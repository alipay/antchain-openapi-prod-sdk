// This file is auto-generated, don't edit it. Thanks.

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;

using Tea;
using Tea.Utils;

using AntChain.SDK.BLOCKCHAIN.Models;

namespace AntChain.SDK.BLOCKCHAIN
{
    public class Client 
    {
        protected string _endpoint;
        protected string _regionId;
        protected string _accessKeyId;
        protected string _accessKeySecret;
        protected string _protocol;
        protected string _userAgent;
        protected int? _readTimeout;
        protected int? _connectTimeout;
        protected string _httpProxy;
        protected string _httpsProxy;
        protected string _socks5Proxy;
        protected string _socks5NetWork;
        protected string _noProxy;
        protected int? _maxIdleConns;
        protected string _securityToken;
        protected int? _maxIdleTimeMillis;
        protected int? _keepAliveDurationMillis;
        protected int? _maxRequests;
        protected int? _maxRequestsPerHost;

        /**
         * Init client with Config
         * @param config config contains the necessary information to create a client
         */
        public Client(Config config)
        {
            if (AlibabaCloud.TeaUtil.Common.IsUnset(config.ToMap()))
            {
                throw new TeaException(new Dictionary<string, string>
                {
                    {"code", "ParameterMissing"},
                    {"message", "'config' can not be unset"},
                });
            }
            this._accessKeyId = config.AccessKeyId;
            this._accessKeySecret = config.AccessKeySecret;
            this._securityToken = config.SecurityToken;
            this._endpoint = config.Endpoint;
            this._protocol = config.Protocol;
            this._userAgent = config.UserAgent;
            this._readTimeout = AlibabaCloud.TeaUtil.Common.DefaultNumber(config.ReadTimeout, 20000);
            this._connectTimeout = AlibabaCloud.TeaUtil.Common.DefaultNumber(config.ConnectTimeout, 20000);
            this._httpProxy = config.HttpProxy;
            this._httpsProxy = config.HttpsProxy;
            this._noProxy = config.NoProxy;
            this._socks5Proxy = config.Socks5Proxy;
            this._socks5NetWork = config.Socks5NetWork;
            this._maxIdleConns = AlibabaCloud.TeaUtil.Common.DefaultNumber(config.MaxIdleConns, 60000);
            this._maxIdleTimeMillis = AlibabaCloud.TeaUtil.Common.DefaultNumber(config.MaxIdleTimeMillis, 5);
            this._keepAliveDurationMillis = AlibabaCloud.TeaUtil.Common.DefaultNumber(config.KeepAliveDurationMillis, 5000);
            this._maxRequests = AlibabaCloud.TeaUtil.Common.DefaultNumber(config.MaxRequests, 100);
            this._maxRequestsPerHost = AlibabaCloud.TeaUtil.Common.DefaultNumber(config.MaxRequestsPerHost, 100);
        }

        /**
         * Encapsulate the request and invoke the network
         * @param action api name
         * @param protocol http or https
         * @param method e.g. GET
         * @param pathname pathname of every api
         * @param request which contains request params
         * @param runtime which controls some details of call api, such as retry times
         * @return the response
         */
        public Dictionary<string, object> DoRequest(string version, string action, string protocol, string method, string pathname, Dictionary<string, object> request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            Dictionary<string, object> runtime_ = new Dictionary<string, object>
            {
                {"timeouted", "retry"},
                {"readTimeout", AlibabaCloud.TeaUtil.Common.DefaultNumber(runtime.ReadTimeout, _readTimeout)},
                {"connectTimeout", AlibabaCloud.TeaUtil.Common.DefaultNumber(runtime.ConnectTimeout, _connectTimeout)},
                {"httpProxy", AlibabaCloud.TeaUtil.Common.DefaultString(runtime.HttpProxy, _httpProxy)},
                {"httpsProxy", AlibabaCloud.TeaUtil.Common.DefaultString(runtime.HttpsProxy, _httpsProxy)},
                {"noProxy", AlibabaCloud.TeaUtil.Common.DefaultString(runtime.NoProxy, _noProxy)},
                {"maxIdleConns", AlibabaCloud.TeaUtil.Common.DefaultNumber(runtime.MaxIdleConns, _maxIdleConns)},
                {"maxIdleTimeMillis", _maxIdleTimeMillis},
                {"keepAliveDuration", _keepAliveDurationMillis},
                {"maxRequests", _maxRequests},
                {"maxRequestsPerHost", _maxRequestsPerHost},
                {"retry", new Dictionary<string, object>
                {
                    {"retryable", runtime.Autoretry},
                    {"maxAttempts", AlibabaCloud.TeaUtil.Common.DefaultNumber(runtime.MaxAttempts, 3)},
                }},
                {"backoff", new Dictionary<string, object>
                {
                    {"policy", AlibabaCloud.TeaUtil.Common.DefaultString(runtime.BackoffPolicy, "no")},
                    {"period", AlibabaCloud.TeaUtil.Common.DefaultNumber(runtime.BackoffPeriod, 1)},
                }},
                {"ignoreSSL", runtime.IgnoreSSL},
            };

            TeaRequest _lastRequest = null;
            Exception _lastException = null;
            long _now = System.DateTime.Now.Millisecond;
            int _retryTimes = 0;
            while (TeaCore.AllowRetry((IDictionary) runtime_["retry"], _retryTimes, _now))
            {
                if (_retryTimes > 0)
                {
                    int backoffTime = TeaCore.GetBackoffTime((IDictionary)runtime_["backoff"], _retryTimes);
                    if (backoffTime > 0)
                    {
                        TeaCore.Sleep(backoffTime);
                    }
                }
                _retryTimes = _retryTimes + 1;
                try
                {
                    TeaRequest request_ = new TeaRequest();
                    request_.Protocol = AlibabaCloud.TeaUtil.Common.DefaultString(_protocol, protocol);
                    request_.Method = method;
                    request_.Pathname = pathname;
                    request_.Query = new Dictionary<string, string>
                    {
                        {"method", action},
                        {"version", version},
                        {"sign_type", "HmacSHA1"},
                        {"req_time", AntChain.AlipayUtil.AntchainUtils.GetTimestamp()},
                        {"req_msg_id", AntChain.AlipayUtil.AntchainUtils.GetNonce()},
                        {"access_key", _accessKeyId},
                        {"base_sdk_version", "TeaSDK-2.0"},
                        {"sdk_version", "1.28.58"},
                        {"_prod_code", "BLOCKCHAIN"},
                        {"_prod_channel", "undefined"},
                    };
                    if (!AlibabaCloud.TeaUtil.Common.Empty(_securityToken))
                    {
                        request_.Query["security_token"] = _securityToken;
                    }
                    request_.Headers = TeaConverter.merge<string>
                    (
                        new Dictionary<string, string>()
                        {
                            {"host", AlibabaCloud.TeaUtil.Common.DefaultString(_endpoint, "openapi.antchain.antgroup.com")},
                            {"user-agent", AlibabaCloud.TeaUtil.Common.GetUserAgent(_userAgent)},
                        },
                        headers
                    );
                    Dictionary<string, object> tmp = AlibabaCloud.TeaUtil.Common.AnyifyMapValue(AlibabaCloud.Commons.Common.Query(request));
                    request_.Body = TeaCore.BytesReadable(AlibabaCloud.TeaUtil.Common.ToFormString(tmp));
                    request_.Headers["content-type"] = "application/x-www-form-urlencoded";
                    Dictionary<string, string> signedParam = TeaConverter.merge<string>
                    (
                        request_.Query,
                        AlibabaCloud.Commons.Common.Query(request)
                    );
                    request_.Query["sign"] = AntChain.AlipayUtil.AntchainUtils.GetSignature(signedParam, _accessKeySecret);
                    _lastRequest = request_;
                    TeaResponse response_ = TeaCore.DoAction(request_, runtime_);

                    string raw = AlibabaCloud.TeaUtil.Common.ReadAsString(response_.Body);
                    object obj = AlibabaCloud.TeaUtil.Common.ParseJSON(raw);
                    Dictionary<string, object> res = AlibabaCloud.TeaUtil.Common.AssertAsMap(obj);
                    Dictionary<string, object> resp = AlibabaCloud.TeaUtil.Common.AssertAsMap(res.Get("response"));
                    if (AntChain.AlipayUtil.AntchainUtils.HasError(raw, _accessKeySecret))
                    {
                        throw new TeaException(new Dictionary<string, object>
                        {
                            {"message", resp.Get("result_msg")},
                            {"data", resp},
                            {"code", resp.Get("result_code")},
                        });
                    }
                    return resp;
                }
                catch (Exception e)
                {
                    if (TeaCore.IsRetryable(e))
                    {
                        _lastException = e;
                        continue;
                    }
                    throw e;
                }
            }

            throw new TeaUnretryableException(_lastRequest, _lastException);
        }

        /**
         * Encapsulate the request and invoke the network
         * @param action api name
         * @param protocol http or https
         * @param method e.g. GET
         * @param pathname pathname of every api
         * @param request which contains request params
         * @param runtime which controls some details of call api, such as retry times
         * @return the response
         */
        public async Task<Dictionary<string, object>> DoRequestAsync(string version, string action, string protocol, string method, string pathname, Dictionary<string, object> request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            Dictionary<string, object> runtime_ = new Dictionary<string, object>
            {
                {"timeouted", "retry"},
                {"readTimeout", AlibabaCloud.TeaUtil.Common.DefaultNumber(runtime.ReadTimeout, _readTimeout)},
                {"connectTimeout", AlibabaCloud.TeaUtil.Common.DefaultNumber(runtime.ConnectTimeout, _connectTimeout)},
                {"httpProxy", AlibabaCloud.TeaUtil.Common.DefaultString(runtime.HttpProxy, _httpProxy)},
                {"httpsProxy", AlibabaCloud.TeaUtil.Common.DefaultString(runtime.HttpsProxy, _httpsProxy)},
                {"noProxy", AlibabaCloud.TeaUtil.Common.DefaultString(runtime.NoProxy, _noProxy)},
                {"maxIdleConns", AlibabaCloud.TeaUtil.Common.DefaultNumber(runtime.MaxIdleConns, _maxIdleConns)},
                {"maxIdleTimeMillis", _maxIdleTimeMillis},
                {"keepAliveDuration", _keepAliveDurationMillis},
                {"maxRequests", _maxRequests},
                {"maxRequestsPerHost", _maxRequestsPerHost},
                {"retry", new Dictionary<string, object>
                {
                    {"retryable", runtime.Autoretry},
                    {"maxAttempts", AlibabaCloud.TeaUtil.Common.DefaultNumber(runtime.MaxAttempts, 3)},
                }},
                {"backoff", new Dictionary<string, object>
                {
                    {"policy", AlibabaCloud.TeaUtil.Common.DefaultString(runtime.BackoffPolicy, "no")},
                    {"period", AlibabaCloud.TeaUtil.Common.DefaultNumber(runtime.BackoffPeriod, 1)},
                }},
                {"ignoreSSL", runtime.IgnoreSSL},
            };

            TeaRequest _lastRequest = null;
            Exception _lastException = null;
            long _now = System.DateTime.Now.Millisecond;
            int _retryTimes = 0;
            while (TeaCore.AllowRetry((IDictionary) runtime_["retry"], _retryTimes, _now))
            {
                if (_retryTimes > 0)
                {
                    int backoffTime = TeaCore.GetBackoffTime((IDictionary)runtime_["backoff"], _retryTimes);
                    if (backoffTime > 0)
                    {
                        TeaCore.Sleep(backoffTime);
                    }
                }
                _retryTimes = _retryTimes + 1;
                try
                {
                    TeaRequest request_ = new TeaRequest();
                    request_.Protocol = AlibabaCloud.TeaUtil.Common.DefaultString(_protocol, protocol);
                    request_.Method = method;
                    request_.Pathname = pathname;
                    request_.Query = new Dictionary<string, string>
                    {
                        {"method", action},
                        {"version", version},
                        {"sign_type", "HmacSHA1"},
                        {"req_time", AntChain.AlipayUtil.AntchainUtils.GetTimestamp()},
                        {"req_msg_id", AntChain.AlipayUtil.AntchainUtils.GetNonce()},
                        {"access_key", _accessKeyId},
                        {"base_sdk_version", "TeaSDK-2.0"},
                        {"sdk_version", "1.28.58"},
                        {"_prod_code", "BLOCKCHAIN"},
                        {"_prod_channel", "undefined"},
                    };
                    if (!AlibabaCloud.TeaUtil.Common.Empty(_securityToken))
                    {
                        request_.Query["security_token"] = _securityToken;
                    }
                    request_.Headers = TeaConverter.merge<string>
                    (
                        new Dictionary<string, string>()
                        {
                            {"host", AlibabaCloud.TeaUtil.Common.DefaultString(_endpoint, "openapi.antchain.antgroup.com")},
                            {"user-agent", AlibabaCloud.TeaUtil.Common.GetUserAgent(_userAgent)},
                        },
                        headers
                    );
                    Dictionary<string, object> tmp = AlibabaCloud.TeaUtil.Common.AnyifyMapValue(AlibabaCloud.Commons.Common.Query(request));
                    request_.Body = TeaCore.BytesReadable(AlibabaCloud.TeaUtil.Common.ToFormString(tmp));
                    request_.Headers["content-type"] = "application/x-www-form-urlencoded";
                    Dictionary<string, string> signedParam = TeaConverter.merge<string>
                    (
                        request_.Query,
                        AlibabaCloud.Commons.Common.Query(request)
                    );
                    request_.Query["sign"] = AntChain.AlipayUtil.AntchainUtils.GetSignature(signedParam, _accessKeySecret);
                    _lastRequest = request_;
                    TeaResponse response_ = await TeaCore.DoActionAsync(request_, runtime_);

                    string raw = AlibabaCloud.TeaUtil.Common.ReadAsString(response_.Body);
                    object obj = AlibabaCloud.TeaUtil.Common.ParseJSON(raw);
                    Dictionary<string, object> res = AlibabaCloud.TeaUtil.Common.AssertAsMap(obj);
                    Dictionary<string, object> resp = AlibabaCloud.TeaUtil.Common.AssertAsMap(res.Get("response"));
                    if (AntChain.AlipayUtil.AntchainUtils.HasError(raw, _accessKeySecret))
                    {
                        throw new TeaException(new Dictionary<string, object>
                        {
                            {"message", resp.Get("result_msg")},
                            {"data", resp},
                            {"code", resp.Get("result_code")},
                        });
                    }
                    return resp;
                }
                catch (Exception e)
                {
                    if (TeaCore.IsRetryable(e))
                    {
                        _lastException = e;
                        continue;
                    }
                    throw e;
                }
            }

            throw new TeaUnretryableException(_lastRequest, _lastException);
        }

        /**
         * Description: 将用户自有账户导入到链上
         * Summary: 自有账户映射到链上
         */
        public StartAccountMappingResponse StartAccountMapping(StartAccountMappingRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartAccountMappingEx(request, headers, runtime);
        }

        /**
         * Description: 将用户自有账户导入到链上
         * Summary: 自有账户映射到链上
         */
        public async Task<StartAccountMappingResponse> StartAccountMappingAsync(StartAccountMappingRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartAccountMappingExAsync(request, headers, runtime);
        }

        /**
         * Description: 将用户自有账户导入到链上
         * Summary: 自有账户映射到链上
         */
        public StartAccountMappingResponse StartAccountMappingEx(StartAccountMappingRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAccountMappingResponse>(DoRequest("1.0", "baas.account.mapping.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 将用户自有账户导入到链上
         * Summary: 自有账户映射到链上
         */
        public async Task<StartAccountMappingResponse> StartAccountMappingExAsync(StartAccountMappingRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAccountMappingResponse>(await DoRequestAsync("1.0", "baas.account.mapping.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 自有账户到链上账户的批量映射接口
         * Summary: 自有账户到链上账户的批量映射
         */
        public BatchcreateAccountMappingResponse BatchcreateAccountMapping(BatchcreateAccountMappingRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return BatchcreateAccountMappingEx(request, headers, runtime);
        }

        /**
         * Description: 自有账户到链上账户的批量映射接口
         * Summary: 自有账户到链上账户的批量映射
         */
        public async Task<BatchcreateAccountMappingResponse> BatchcreateAccountMappingAsync(BatchcreateAccountMappingRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await BatchcreateAccountMappingExAsync(request, headers, runtime);
        }

        /**
         * Description: 自有账户到链上账户的批量映射接口
         * Summary: 自有账户到链上账户的批量映射
         */
        public BatchcreateAccountMappingResponse BatchcreateAccountMappingEx(BatchcreateAccountMappingRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BatchcreateAccountMappingResponse>(DoRequest("1.0", "baas.account.mapping.batchcreate", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 自有账户到链上账户的批量映射接口
         * Summary: 自有账户到链上账户的批量映射
         */
        public async Task<BatchcreateAccountMappingResponse> BatchcreateAccountMappingExAsync(BatchcreateAccountMappingRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BatchcreateAccountMappingResponse>(await DoRequestAsync("1.0", "baas.account.mapping.batchcreate", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 为用户生成签名的接口
         * Summary: 为用户生成签名
         */
        public StartAccountSignatureResponse StartAccountSignature(StartAccountSignatureRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartAccountSignatureEx(request, headers, runtime);
        }

        /**
         * Description: 为用户生成签名的接口
         * Summary: 为用户生成签名
         */
        public async Task<StartAccountSignatureResponse> StartAccountSignatureAsync(StartAccountSignatureRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartAccountSignatureExAsync(request, headers, runtime);
        }

        /**
         * Description: 为用户生成签名的接口
         * Summary: 为用户生成签名
         */
        public StartAccountSignatureResponse StartAccountSignatureEx(StartAccountSignatureRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAccountSignatureResponse>(DoRequest("1.0", "baas.account.signature.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 为用户生成签名的接口
         * Summary: 为用户生成签名
         */
        public async Task<StartAccountSignatureResponse> StartAccountSignatureExAsync(StartAccountSignatureRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAccountSignatureResponse>(await DoRequestAsync("1.0", "baas.account.signature.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询批量映射结果的接口
         * Summary: 查询批量映射的结果
         */
        public QueryAccountMappingresultResponse QueryAccountMappingresult(QueryAccountMappingresultRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryAccountMappingresultEx(request, headers, runtime);
        }

        /**
         * Description: 查询批量映射结果的接口
         * Summary: 查询批量映射的结果
         */
        public async Task<QueryAccountMappingresultResponse> QueryAccountMappingresultAsync(QueryAccountMappingresultRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryAccountMappingresultExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询批量映射结果的接口
         * Summary: 查询批量映射的结果
         */
        public QueryAccountMappingresultResponse QueryAccountMappingresultEx(QueryAccountMappingresultRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAccountMappingresultResponse>(DoRequest("1.0", "baas.account.mappingresult.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询批量映射结果的接口
         * Summary: 查询批量映射的结果
         */
        public async Task<QueryAccountMappingresultResponse> QueryAccountMappingresultExAsync(QueryAccountMappingresultRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAccountMappingresultResponse>(await DoRequestAsync("1.0", "baas.account.mappingresult.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询商户下账户在链上账号映射情况
         * Summary: 单个查询用户映射情况信息
         */
        public QueryAccountMappingResponse QueryAccountMapping(QueryAccountMappingRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryAccountMappingEx(request, headers, runtime);
        }

        /**
         * Description: 查询商户下账户在链上账号映射情况
         * Summary: 单个查询用户映射情况信息
         */
        public async Task<QueryAccountMappingResponse> QueryAccountMappingAsync(QueryAccountMappingRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryAccountMappingExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询商户下账户在链上账号映射情况
         * Summary: 单个查询用户映射情况信息
         */
        public QueryAccountMappingResponse QueryAccountMappingEx(QueryAccountMappingRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAccountMappingResponse>(DoRequest("1.0", "baas.account.mapping.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询商户下账户在链上账号映射情况
         * Summary: 单个查询用户映射情况信息
         */
        public async Task<QueryAccountMappingResponse> QueryAccountMappingExAsync(QueryAccountMappingRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAccountMappingResponse>(await DoRequestAsync("1.0", "baas.account.mapping.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 批量查询商户下已映射的账户信息
         * Summary: 批量查询商户下已映射的账户信息
         */
        public BatchqueryAccountMappingResponse BatchqueryAccountMapping(BatchqueryAccountMappingRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return BatchqueryAccountMappingEx(request, headers, runtime);
        }

        /**
         * Description: 批量查询商户下已映射的账户信息
         * Summary: 批量查询商户下已映射的账户信息
         */
        public async Task<BatchqueryAccountMappingResponse> BatchqueryAccountMappingAsync(BatchqueryAccountMappingRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await BatchqueryAccountMappingExAsync(request, headers, runtime);
        }

        /**
         * Description: 批量查询商户下已映射的账户信息
         * Summary: 批量查询商户下已映射的账户信息
         */
        public BatchqueryAccountMappingResponse BatchqueryAccountMappingEx(BatchqueryAccountMappingRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BatchqueryAccountMappingResponse>(DoRequest("1.0", "baas.account.mapping.batchquery", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 批量查询商户下已映射的账户信息
         * Summary: 批量查询商户下已映射的账户信息
         */
        public async Task<BatchqueryAccountMappingResponse> BatchqueryAccountMappingExAsync(BatchqueryAccountMappingRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BatchqueryAccountMappingResponse>(await DoRequestAsync("1.0", "baas.account.mapping.batchquery", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户信息存储
         * Summary: 用户信息存储
         */
        public CreateAccountMappingInfoResponse CreateAccountMappingInfo(CreateAccountMappingInfoRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateAccountMappingInfoEx(request, headers, runtime);
        }

        /**
         * Description: 用户信息存储
         * Summary: 用户信息存储
         */
        public async Task<CreateAccountMappingInfoResponse> CreateAccountMappingInfoAsync(CreateAccountMappingInfoRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateAccountMappingInfoExAsync(request, headers, runtime);
        }

        /**
         * Description: 用户信息存储
         * Summary: 用户信息存储
         */
        public CreateAccountMappingInfoResponse CreateAccountMappingInfoEx(CreateAccountMappingInfoRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateAccountMappingInfoResponse>(DoRequest("1.0", "baas.account.mapping.info.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户信息存储
         * Summary: 用户信息存储
         */
        public async Task<CreateAccountMappingInfoResponse> CreateAccountMappingInfoExAsync(CreateAccountMappingInfoRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateAccountMappingInfoResponse>(await DoRequestAsync("1.0", "baas.account.mapping.info.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 批量创建用户信息
         * Summary: 批量创建用户信息
         */
        public BatchcreateAccountMappingInfoResponse BatchcreateAccountMappingInfo(BatchcreateAccountMappingInfoRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return BatchcreateAccountMappingInfoEx(request, headers, runtime);
        }

        /**
         * Description: 批量创建用户信息
         * Summary: 批量创建用户信息
         */
        public async Task<BatchcreateAccountMappingInfoResponse> BatchcreateAccountMappingInfoAsync(BatchcreateAccountMappingInfoRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await BatchcreateAccountMappingInfoExAsync(request, headers, runtime);
        }

        /**
         * Description: 批量创建用户信息
         * Summary: 批量创建用户信息
         */
        public BatchcreateAccountMappingInfoResponse BatchcreateAccountMappingInfoEx(BatchcreateAccountMappingInfoRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BatchcreateAccountMappingInfoResponse>(DoRequest("1.0", "baas.account.mapping.info.batchcreate", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 批量创建用户信息
         * Summary: 批量创建用户信息
         */
        public async Task<BatchcreateAccountMappingInfoResponse> BatchcreateAccountMappingInfoExAsync(BatchcreateAccountMappingInfoRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BatchcreateAccountMappingInfoResponse>(await DoRequestAsync("1.0", "baas.account.mapping.info.batchcreate", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取用户的密钥对。
        公钥为明文公钥
        私钥为密文，需要用户在本地再做一次解密才能得到真正的私钥
         * Summary: 获取用户biz key
         */
        public GetAkdfUserbizkeyResponse GetAkdfUserbizkey(GetAkdfUserbizkeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return GetAkdfUserbizkeyEx(request, headers, runtime);
        }

        /**
         * Description: 获取用户的密钥对。
        公钥为明文公钥
        私钥为密文，需要用户在本地再做一次解密才能得到真正的私钥
         * Summary: 获取用户biz key
         */
        public async Task<GetAkdfUserbizkeyResponse> GetAkdfUserbizkeyAsync(GetAkdfUserbizkeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await GetAkdfUserbizkeyExAsync(request, headers, runtime);
        }

        /**
         * Description: 获取用户的密钥对。
        公钥为明文公钥
        私钥为密文，需要用户在本地再做一次解密才能得到真正的私钥
         * Summary: 获取用户biz key
         */
        public GetAkdfUserbizkeyResponse GetAkdfUserbizkeyEx(GetAkdfUserbizkeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetAkdfUserbizkeyResponse>(DoRequest("1.0", "baas.akdf.userbizkey.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取用户的密钥对。
        公钥为明文公钥
        私钥为密文，需要用户在本地再做一次解密才能得到真正的私钥
         * Summary: 获取用户biz key
         */
        public async Task<GetAkdfUserbizkeyResponse> GetAkdfUserbizkeyExAsync(GetAkdfUserbizkeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetAkdfUserbizkeyResponse>(await DoRequestAsync("1.0", "baas.akdf.userbizkey.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 列出用户在某条链上所有的密钥
         * Summary: 列出密钥
         */
        public ListAkdfUserbizkeyResponse ListAkdfUserbizkey(ListAkdfUserbizkeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ListAkdfUserbizkeyEx(request, headers, runtime);
        }

        /**
         * Description: 列出用户在某条链上所有的密钥
         * Summary: 列出密钥
         */
        public async Task<ListAkdfUserbizkeyResponse> ListAkdfUserbizkeyAsync(ListAkdfUserbizkeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ListAkdfUserbizkeyExAsync(request, headers, runtime);
        }

        /**
         * Description: 列出用户在某条链上所有的密钥
         * Summary: 列出密钥
         */
        public ListAkdfUserbizkeyResponse ListAkdfUserbizkeyEx(ListAkdfUserbizkeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListAkdfUserbizkeyResponse>(DoRequest("1.0", "baas.akdf.userbizkey.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 列出用户在某条链上所有的密钥
         * Summary: 列出密钥
         */
        public async Task<ListAkdfUserbizkeyResponse> ListAkdfUserbizkeyExAsync(ListAkdfUserbizkeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListAkdfUserbizkeyResponse>(await DoRequestAsync("1.0", "baas.akdf.userbizkey.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 根据用户选择的规则和订单类型，生成instanceId给commondriver
         * Summary: 下单
         */
        public CheckBlockchainOrderResponse CheckBlockchainOrder(CheckBlockchainOrderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CheckBlockchainOrderEx(request, headers, runtime);
        }

        /**
         * Description: 根据用户选择的规则和订单类型，生成instanceId给commondriver
         * Summary: 下单
         */
        public async Task<CheckBlockchainOrderResponse> CheckBlockchainOrderAsync(CheckBlockchainOrderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CheckBlockchainOrderExAsync(request, headers, runtime);
        }

        /**
         * Description: 根据用户选择的规则和订单类型，生成instanceId给commondriver
         * Summary: 下单
         */
        public CheckBlockchainOrderResponse CheckBlockchainOrderEx(CheckBlockchainOrderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CheckBlockchainOrderResponse>(DoRequest("1.0", "baas.blockchain.order.check", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 根据用户选择的规则和订单类型，生成instanceId给commondriver
         * Summary: 下单
         */
        public async Task<CheckBlockchainOrderResponse> CheckBlockchainOrderExAsync(CheckBlockchainOrderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CheckBlockchainOrderResponse>(await DoRequestAsync("1.0", "baas.blockchain.order.check", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 下单前校验
         * Summary: 下单前校验
         */
        public VerifyBlockchainOrderResponse VerifyBlockchainOrder(VerifyBlockchainOrderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return VerifyBlockchainOrderEx(request, headers, runtime);
        }

        /**
         * Description: 下单前校验
         * Summary: 下单前校验
         */
        public async Task<VerifyBlockchainOrderResponse> VerifyBlockchainOrderAsync(VerifyBlockchainOrderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await VerifyBlockchainOrderExAsync(request, headers, runtime);
        }

        /**
         * Description: 下单前校验
         * Summary: 下单前校验
         */
        public VerifyBlockchainOrderResponse VerifyBlockchainOrderEx(VerifyBlockchainOrderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<VerifyBlockchainOrderResponse>(DoRequest("1.0", "baas.blockchain.order.verify", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 下单前校验
         * Summary: 下单前校验
         */
        public async Task<VerifyBlockchainOrderResponse> VerifyBlockchainOrderExAsync(VerifyBlockchainOrderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<VerifyBlockchainOrderResponse>(await DoRequestAsync("1.0", "baas.blockchain.order.verify", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 退款
         * Summary: 退款
         */
        public InvalidateBlockchainOrderResponse InvalidateBlockchainOrder(InvalidateBlockchainOrderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return InvalidateBlockchainOrderEx(request, headers, runtime);
        }

        /**
         * Description: 退款
         * Summary: 退款
         */
        public async Task<InvalidateBlockchainOrderResponse> InvalidateBlockchainOrderAsync(InvalidateBlockchainOrderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await InvalidateBlockchainOrderExAsync(request, headers, runtime);
        }

        /**
         * Description: 退款
         * Summary: 退款
         */
        public InvalidateBlockchainOrderResponse InvalidateBlockchainOrderEx(InvalidateBlockchainOrderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InvalidateBlockchainOrderResponse>(DoRequest("1.0", "baas.blockchain.order.invalidate", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 退款
         * Summary: 退款
         */
        public async Task<InvalidateBlockchainOrderResponse> InvalidateBlockchainOrderExAsync(InvalidateBlockchainOrderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InvalidateBlockchainOrderResponse>(await DoRequestAsync("1.0", "baas.blockchain.order.invalidate", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 删除物理资源
         * Summary: 删除物理资源
         */
        public ReleaseBlockchainOrderPhysicalResponse ReleaseBlockchainOrderPhysical(ReleaseBlockchainOrderPhysicalRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ReleaseBlockchainOrderPhysicalEx(request, headers, runtime);
        }

        /**
         * Description: 删除物理资源
         * Summary: 删除物理资源
         */
        public async Task<ReleaseBlockchainOrderPhysicalResponse> ReleaseBlockchainOrderPhysicalAsync(ReleaseBlockchainOrderPhysicalRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ReleaseBlockchainOrderPhysicalExAsync(request, headers, runtime);
        }

        /**
         * Description: 删除物理资源
         * Summary: 删除物理资源
         */
        public ReleaseBlockchainOrderPhysicalResponse ReleaseBlockchainOrderPhysicalEx(ReleaseBlockchainOrderPhysicalRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ReleaseBlockchainOrderPhysicalResponse>(DoRequest("1.0", "baas.blockchain.order.physical.release", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 删除物理资源
         * Summary: 删除物理资源
         */
        public async Task<ReleaseBlockchainOrderPhysicalResponse> ReleaseBlockchainOrderPhysicalExAsync(ReleaseBlockchainOrderPhysicalRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ReleaseBlockchainOrderPhysicalResponse>(await DoRequestAsync("1.0", "baas.blockchain.order.physical.release", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 逻辑资源删除
         * Summary: 逻辑资源删除
         */
        public ReleaseBlockchainOrderLogicalResponse ReleaseBlockchainOrderLogical(ReleaseBlockchainOrderLogicalRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ReleaseBlockchainOrderLogicalEx(request, headers, runtime);
        }

        /**
         * Description: 逻辑资源删除
         * Summary: 逻辑资源删除
         */
        public async Task<ReleaseBlockchainOrderLogicalResponse> ReleaseBlockchainOrderLogicalAsync(ReleaseBlockchainOrderLogicalRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ReleaseBlockchainOrderLogicalExAsync(request, headers, runtime);
        }

        /**
         * Description: 逻辑资源删除
         * Summary: 逻辑资源删除
         */
        public ReleaseBlockchainOrderLogicalResponse ReleaseBlockchainOrderLogicalEx(ReleaseBlockchainOrderLogicalRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ReleaseBlockchainOrderLogicalResponse>(DoRequest("1.0", "baas.blockchain.order.logical.release", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 逻辑资源删除
         * Summary: 逻辑资源删除
         */
        public async Task<ReleaseBlockchainOrderLogicalResponse> ReleaseBlockchainOrderLogicalExAsync(ReleaseBlockchainOrderLogicalRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ReleaseBlockchainOrderLogicalResponse>(await DoRequestAsync("1.0", "baas.blockchain.order.logical.release", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 资源检查
         * Summary: 资源检查
         */
        public CheckBlockchainResourceResponse CheckBlockchainResource(CheckBlockchainResourceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CheckBlockchainResourceEx(request, headers, runtime);
        }

        /**
         * Description: 资源检查
         * Summary: 资源检查
         */
        public async Task<CheckBlockchainResourceResponse> CheckBlockchainResourceAsync(CheckBlockchainResourceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CheckBlockchainResourceExAsync(request, headers, runtime);
        }

        /**
         * Description: 资源检查
         * Summary: 资源检查
         */
        public CheckBlockchainResourceResponse CheckBlockchainResourceEx(CheckBlockchainResourceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CheckBlockchainResourceResponse>(DoRequest("1.0", "baas.blockchain.resource.check", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 资源检查
         * Summary: 资源检查
         */
        public async Task<CheckBlockchainResourceResponse> CheckBlockchainResourceExAsync(CheckBlockchainResourceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CheckBlockchainResourceResponse>(await DoRequestAsync("1.0", "baas.blockchain.resource.check", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 补齐商品信息
         * Summary: 补齐商品信息
         */
        public ConfirmBlockchainOrderResponse ConfirmBlockchainOrder(ConfirmBlockchainOrderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ConfirmBlockchainOrderEx(request, headers, runtime);
        }

        /**
         * Description: 补齐商品信息
         * Summary: 补齐商品信息
         */
        public async Task<ConfirmBlockchainOrderResponse> ConfirmBlockchainOrderAsync(ConfirmBlockchainOrderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ConfirmBlockchainOrderExAsync(request, headers, runtime);
        }

        /**
         * Description: 补齐商品信息
         * Summary: 补齐商品信息
         */
        public ConfirmBlockchainOrderResponse ConfirmBlockchainOrderEx(ConfirmBlockchainOrderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ConfirmBlockchainOrderResponse>(DoRequest("1.0", "baas.blockchain.order.confirm", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 补齐商品信息
         * Summary: 补齐商品信息
         */
        public async Task<ConfirmBlockchainOrderResponse> ConfirmBlockchainOrderExAsync(ConfirmBlockchainOrderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ConfirmBlockchainOrderResponse>(await DoRequestAsync("1.0", "baas.blockchain.order.confirm", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 检查
         * Summary: 检查
         */
        public ConnectBlockchainOrderResponse ConnectBlockchainOrder(ConnectBlockchainOrderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ConnectBlockchainOrderEx(request, headers, runtime);
        }

        /**
         * Description: 检查
         * Summary: 检查
         */
        public async Task<ConnectBlockchainOrderResponse> ConnectBlockchainOrderAsync(ConnectBlockchainOrderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ConnectBlockchainOrderExAsync(request, headers, runtime);
        }

        /**
         * Description: 检查
         * Summary: 检查
         */
        public ConnectBlockchainOrderResponse ConnectBlockchainOrderEx(ConnectBlockchainOrderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ConnectBlockchainOrderResponse>(DoRequest("1.0", "baas.blockchain.order.connect", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 检查
         * Summary: 检查
         */
        public async Task<ConnectBlockchainOrderResponse> ConnectBlockchainOrderExAsync(ConnectBlockchainOrderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ConnectBlockchainOrderResponse>(await DoRequestAsync("1.0", "baas.blockchain.order.connect", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链订单创建接口
         * Summary: 阿里云区块链订单创建接口
         */
        public ExecBlockchainOrderResponse ExecBlockchainOrder(ExecBlockchainOrderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ExecBlockchainOrderEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链订单创建接口
         * Summary: 阿里云区块链订单创建接口
         */
        public async Task<ExecBlockchainOrderResponse> ExecBlockchainOrderAsync(ExecBlockchainOrderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ExecBlockchainOrderExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链订单创建接口
         * Summary: 阿里云区块链订单创建接口
         */
        public ExecBlockchainOrderResponse ExecBlockchainOrderEx(ExecBlockchainOrderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecBlockchainOrderResponse>(DoRequest("1.0", "baas.blockchain.order.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链订单创建接口
         * Summary: 阿里云区块链订单创建接口
         */
        public async Task<ExecBlockchainOrderResponse> ExecBlockchainOrderExAsync(ExecBlockchainOrderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecBlockchainOrderResponse>(await DoRequestAsync("1.0", "baas.blockchain.order.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建联盟
         * Summary: 创建联盟
         */
        public CreateUnionUnionResponse CreateUnionUnion(CreateUnionUnionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateUnionUnionEx(request, headers, runtime);
        }

        /**
         * Description: 创建联盟
         * Summary: 创建联盟
         */
        public async Task<CreateUnionUnionResponse> CreateUnionUnionAsync(CreateUnionUnionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateUnionUnionExAsync(request, headers, runtime);
        }

        /**
         * Description: 创建联盟
         * Summary: 创建联盟
         */
        public CreateUnionUnionResponse CreateUnionUnionEx(CreateUnionUnionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateUnionUnionResponse>(DoRequest("1.0", "baas.union.union.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建联盟
         * Summary: 创建联盟
         */
        public async Task<CreateUnionUnionResponse> CreateUnionUnionExAsync(CreateUnionUnionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateUnionUnionResponse>(await DoRequestAsync("1.0", "baas.union.union.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 删除联盟
         * Summary: 删除联盟
         */
        public DeleteUnionUnionResponse DeleteUnionUnion(DeleteUnionUnionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return DeleteUnionUnionEx(request, headers, runtime);
        }

        /**
         * Description: 删除联盟
         * Summary: 删除联盟
         */
        public async Task<DeleteUnionUnionResponse> DeleteUnionUnionAsync(DeleteUnionUnionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await DeleteUnionUnionExAsync(request, headers, runtime);
        }

        /**
         * Description: 删除联盟
         * Summary: 删除联盟
         */
        public DeleteUnionUnionResponse DeleteUnionUnionEx(DeleteUnionUnionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteUnionUnionResponse>(DoRequest("1.0", "baas.union.union.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 删除联盟
         * Summary: 删除联盟
         */
        public async Task<DeleteUnionUnionResponse> DeleteUnionUnionExAsync(DeleteUnionUnionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteUnionUnionResponse>(await DoRequestAsync("1.0", "baas.union.union.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 联盟更新
         * Summary: 联盟更新
         */
        public UpdateUnionUnionResponse UpdateUnionUnion(UpdateUnionUnionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateUnionUnionEx(request, headers, runtime);
        }

        /**
         * Description: 联盟更新
         * Summary: 联盟更新
         */
        public async Task<UpdateUnionUnionResponse> UpdateUnionUnionAsync(UpdateUnionUnionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateUnionUnionExAsync(request, headers, runtime);
        }

        /**
         * Description: 联盟更新
         * Summary: 联盟更新
         */
        public UpdateUnionUnionResponse UpdateUnionUnionEx(UpdateUnionUnionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateUnionUnionResponse>(DoRequest("1.0", "baas.union.union.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 联盟更新
         * Summary: 联盟更新
         */
        public async Task<UpdateUnionUnionResponse> UpdateUnionUnionExAsync(UpdateUnionUnionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateUnionUnionResponse>(await DoRequestAsync("1.0", "baas.union.union.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 联盟查询
         * Summary: 联盟查询
         */
        public QueryUnionUnionResponse QueryUnionUnion(QueryUnionUnionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryUnionUnionEx(request, headers, runtime);
        }

        /**
         * Description: 联盟查询
         * Summary: 联盟查询
         */
        public async Task<QueryUnionUnionResponse> QueryUnionUnionAsync(QueryUnionUnionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryUnionUnionExAsync(request, headers, runtime);
        }

        /**
         * Description: 联盟查询
         * Summary: 联盟查询
         */
        public QueryUnionUnionResponse QueryUnionUnionEx(QueryUnionUnionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryUnionUnionResponse>(DoRequest("1.0", "baas.union.union.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 联盟查询
         * Summary: 联盟查询
         */
        public async Task<QueryUnionUnionResponse> QueryUnionUnionExAsync(QueryUnionUnionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryUnionUnionResponse>(await DoRequestAsync("1.0", "baas.union.union.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 联盟邀请用户
         * Summary: 联盟邀请用户
         */
        public ApplyUnionMemberResponse ApplyUnionMember(ApplyUnionMemberRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ApplyUnionMemberEx(request, headers, runtime);
        }

        /**
         * Description: 联盟邀请用户
         * Summary: 联盟邀请用户
         */
        public async Task<ApplyUnionMemberResponse> ApplyUnionMemberAsync(ApplyUnionMemberRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ApplyUnionMemberExAsync(request, headers, runtime);
        }

        /**
         * Description: 联盟邀请用户
         * Summary: 联盟邀请用户
         */
        public ApplyUnionMemberResponse ApplyUnionMemberEx(ApplyUnionMemberRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyUnionMemberResponse>(DoRequest("1.0", "baas.union.member.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 联盟邀请用户
         * Summary: 联盟邀请用户
         */
        public async Task<ApplyUnionMemberResponse> ApplyUnionMemberExAsync(ApplyUnionMemberRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyUnionMemberResponse>(await DoRequestAsync("1.0", "baas.union.member.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云联盟成员加入
         * Summary: 阿里云联盟成员加入
         */
        public ConfirmUnionMemberResponse ConfirmUnionMember(ConfirmUnionMemberRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ConfirmUnionMemberEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云联盟成员加入
         * Summary: 阿里云联盟成员加入
         */
        public async Task<ConfirmUnionMemberResponse> ConfirmUnionMemberAsync(ConfirmUnionMemberRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ConfirmUnionMemberExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云联盟成员加入
         * Summary: 阿里云联盟成员加入
         */
        public ConfirmUnionMemberResponse ConfirmUnionMemberEx(ConfirmUnionMemberRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ConfirmUnionMemberResponse>(DoRequest("1.0", "baas.union.member.confirm", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云联盟成员加入
         * Summary: 阿里云联盟成员加入
         */
        public async Task<ConfirmUnionMemberResponse> ConfirmUnionMemberExAsync(ConfirmUnionMemberRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ConfirmUnionMemberResponse>(await DoRequestAsync("1.0", "baas.union.member.confirm", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取联盟内的蚂蚁区块链列表
         * Summary: 获取联盟内的蚂蚁区块链列表
         */
        public QueryUnionChainResponse QueryUnionChain(QueryUnionChainRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryUnionChainEx(request, headers, runtime);
        }

        /**
         * Description: 获取联盟内的蚂蚁区块链列表
         * Summary: 获取联盟内的蚂蚁区块链列表
         */
        public async Task<QueryUnionChainResponse> QueryUnionChainAsync(QueryUnionChainRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryUnionChainExAsync(request, headers, runtime);
        }

        /**
         * Description: 获取联盟内的蚂蚁区块链列表
         * Summary: 获取联盟内的蚂蚁区块链列表
         */
        public QueryUnionChainResponse QueryUnionChainEx(QueryUnionChainRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryUnionChainResponse>(DoRequest("1.0", "baas.union.chain.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取联盟内的蚂蚁区块链列表
         * Summary: 获取联盟内的蚂蚁区块链列表
         */
        public async Task<QueryUnionChainResponse> QueryUnionChainExAsync(QueryUnionChainRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryUnionChainResponse>(await DoRequestAsync("1.0", "baas.union.chain.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取联盟成员列表
         * Summary: 获取联盟成员列表
         */
        public QueryUnionMemberResponse QueryUnionMember(QueryUnionMemberRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryUnionMemberEx(request, headers, runtime);
        }

        /**
         * Description: 获取联盟成员列表
         * Summary: 获取联盟成员列表
         */
        public async Task<QueryUnionMemberResponse> QueryUnionMemberAsync(QueryUnionMemberRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryUnionMemberExAsync(request, headers, runtime);
        }

        /**
         * Description: 获取联盟成员列表
         * Summary: 获取联盟成员列表
         */
        public QueryUnionMemberResponse QueryUnionMemberEx(QueryUnionMemberRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryUnionMemberResponse>(DoRequest("1.0", "baas.union.member.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取联盟成员列表
         * Summary: 获取联盟成员列表
         */
        public async Task<QueryUnionMemberResponse> QueryUnionMemberExAsync(QueryUnionMemberRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryUnionMemberResponse>(await DoRequestAsync("1.0", "baas.union.member.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新联盟成员属性
         * Summary: 更新联盟成员属性
         */
        public UpdateUnionMemberResponse UpdateUnionMember(UpdateUnionMemberRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateUnionMemberEx(request, headers, runtime);
        }

        /**
         * Description: 更新联盟成员属性
         * Summary: 更新联盟成员属性
         */
        public async Task<UpdateUnionMemberResponse> UpdateUnionMemberAsync(UpdateUnionMemberRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateUnionMemberExAsync(request, headers, runtime);
        }

        /**
         * Description: 更新联盟成员属性
         * Summary: 更新联盟成员属性
         */
        public UpdateUnionMemberResponse UpdateUnionMemberEx(UpdateUnionMemberRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateUnionMemberResponse>(DoRequest("1.0", "baas.union.member.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新联盟成员属性
         * Summary: 更新联盟成员属性
         */
        public async Task<UpdateUnionMemberResponse> UpdateUnionMemberExAsync(UpdateUnionMemberRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateUnionMemberResponse>(await DoRequestAsync("1.0", "baas.union.member.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新区块链的名称
         * Summary: 更新区块链的名称
         */
        public UpdateChainNameAntResponse UpdateChainNameAnt(UpdateChainNameAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateChainNameAntEx(request, headers, runtime);
        }

        /**
         * Description: 更新区块链的名称
         * Summary: 更新区块链的名称
         */
        public async Task<UpdateChainNameAntResponse> UpdateChainNameAntAsync(UpdateChainNameAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateChainNameAntExAsync(request, headers, runtime);
        }

        /**
         * Description: 更新区块链的名称
         * Summary: 更新区块链的名称
         */
        public UpdateChainNameAntResponse UpdateChainNameAntEx(UpdateChainNameAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateChainNameAntResponse>(DoRequest("1.0", "baas.chain.name.ant.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新区块链的名称
         * Summary: 更新区块链的名称
         */
        public async Task<UpdateChainNameAntResponse> UpdateChainNameAntExAsync(UpdateChainNameAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateChainNameAntResponse>(await DoRequestAsync("1.0", "baas.chain.name.ant.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 手工创建区块链证书
         * Summary: 手工创建区块链证书
         */
        public CreateChainCertAntResponse CreateChainCertAnt(CreateChainCertAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateChainCertAntEx(request, headers, runtime);
        }

        /**
         * Description: 手工创建区块链证书
         * Summary: 手工创建区块链证书
         */
        public async Task<CreateChainCertAntResponse> CreateChainCertAntAsync(CreateChainCertAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateChainCertAntExAsync(request, headers, runtime);
        }

        /**
         * Description: 手工创建区块链证书
         * Summary: 手工创建区块链证书
         */
        public CreateChainCertAntResponse CreateChainCertAntEx(CreateChainCertAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateChainCertAntResponse>(DoRequest("1.0", "baas.chain.cert.ant.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 手工创建区块链证书
         * Summary: 手工创建区块链证书
         */
        public async Task<CreateChainCertAntResponse> CreateChainCertAntExAsync(CreateChainCertAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateChainCertAntResponse>(await DoRequestAsync("1.0", "baas.chain.cert.ant.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 自动申请区块链证书
         * Summary: 自动申请区块链证书
         */
        public ApplyChainCertAntResponse ApplyChainCertAnt(ApplyChainCertAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ApplyChainCertAntEx(request, headers, runtime);
        }

        /**
         * Description: 自动申请区块链证书
         * Summary: 自动申请区块链证书
         */
        public async Task<ApplyChainCertAntResponse> ApplyChainCertAntAsync(ApplyChainCertAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ApplyChainCertAntExAsync(request, headers, runtime);
        }

        /**
         * Description: 自动申请区块链证书
         * Summary: 自动申请区块链证书
         */
        public ApplyChainCertAntResponse ApplyChainCertAntEx(ApplyChainCertAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyChainCertAntResponse>(DoRequest("1.0", "baas.chain.cert.ant.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 自动申请区块链证书
         * Summary: 自动申请区块链证书
         */
        public async Task<ApplyChainCertAntResponse> ApplyChainCertAntExAsync(ApplyChainCertAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyChainCertAntResponse>(await DoRequestAsync("1.0", "baas.chain.cert.ant.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 人工申请区块链证书
         * Summary: 人工申请区块链证书
         */
        public CreateChainPublicCertResponse CreateChainPublicCert(CreateChainPublicCertRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateChainPublicCertEx(request, headers, runtime);
        }

        /**
         * Description: 人工申请区块链证书
         * Summary: 人工申请区块链证书
         */
        public async Task<CreateChainPublicCertResponse> CreateChainPublicCertAsync(CreateChainPublicCertRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateChainPublicCertExAsync(request, headers, runtime);
        }

        /**
         * Description: 人工申请区块链证书
         * Summary: 人工申请区块链证书
         */
        public CreateChainPublicCertResponse CreateChainPublicCertEx(CreateChainPublicCertRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateChainPublicCertResponse>(DoRequest("1.0", "baas.chain.public.cert.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 人工申请区块链证书
         * Summary: 人工申请区块链证书
         */
        public async Task<CreateChainPublicCertResponse> CreateChainPublicCertExAsync(CreateChainPublicCertRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateChainPublicCertResponse>(await DoRequestAsync("1.0", "baas.chain.public.cert.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 自动创建区块链证书
         * Summary: 自动创建区块链证书
         */
        public ApplyChainPublicCertResponse ApplyChainPublicCert(ApplyChainPublicCertRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ApplyChainPublicCertEx(request, headers, runtime);
        }

        /**
         * Description: 自动创建区块链证书
         * Summary: 自动创建区块链证书
         */
        public async Task<ApplyChainPublicCertResponse> ApplyChainPublicCertAsync(ApplyChainPublicCertRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ApplyChainPublicCertExAsync(request, headers, runtime);
        }

        /**
         * Description: 自动创建区块链证书
         * Summary: 自动创建区块链证书
         */
        public ApplyChainPublicCertResponse ApplyChainPublicCertEx(ApplyChainPublicCertRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyChainPublicCertResponse>(DoRequest("1.0", "baas.chain.public.cert.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 自动创建区块链证书
         * Summary: 自动创建区块链证书
         */
        public async Task<ApplyChainPublicCertResponse> ApplyChainPublicCertExAsync(ApplyChainPublicCertRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyChainPublicCertResponse>(await DoRequestAsync("1.0", "baas.chain.public.cert.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 免费体验链重置证书
         * Summary: 免费体验链重置证书
         */
        public ReinitChainPublicCertResponse ReinitChainPublicCert(ReinitChainPublicCertRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ReinitChainPublicCertEx(request, headers, runtime);
        }

        /**
         * Description: 免费体验链重置证书
         * Summary: 免费体验链重置证书
         */
        public async Task<ReinitChainPublicCertResponse> ReinitChainPublicCertAsync(ReinitChainPublicCertRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ReinitChainPublicCertExAsync(request, headers, runtime);
        }

        /**
         * Description: 免费体验链重置证书
         * Summary: 免费体验链重置证书
         */
        public ReinitChainPublicCertResponse ReinitChainPublicCertEx(ReinitChainPublicCertRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ReinitChainPublicCertResponse>(DoRequest("1.0", "baas.chain.public.cert.reinit", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 免费体验链重置证书
         * Summary: 免费体验链重置证书
         */
        public async Task<ReinitChainPublicCertResponse> ReinitChainPublicCertExAsync(ReinitChainPublicCertRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ReinitChainPublicCertResponse>(await DoRequestAsync("1.0", "baas.chain.public.cert.reinit", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 免费体验链创建账户
         * Summary: 免费体验链创建账户
         */
        public CreateChainPublicAccountResponse CreateChainPublicAccount(CreateChainPublicAccountRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateChainPublicAccountEx(request, headers, runtime);
        }

        /**
         * Description: 免费体验链创建账户
         * Summary: 免费体验链创建账户
         */
        public async Task<CreateChainPublicAccountResponse> CreateChainPublicAccountAsync(CreateChainPublicAccountRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateChainPublicAccountExAsync(request, headers, runtime);
        }

        /**
         * Description: 免费体验链创建账户
         * Summary: 免费体验链创建账户
         */
        public CreateChainPublicAccountResponse CreateChainPublicAccountEx(CreateChainPublicAccountRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateChainPublicAccountResponse>(DoRequest("1.0", "baas.chain.public.account.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 免费体验链创建账户
         * Summary: 免费体验链创建账户
         */
        public async Task<CreateChainPublicAccountResponse> CreateChainPublicAccountExAsync(CreateChainPublicAccountRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateChainPublicAccountResponse>(await DoRequestAsync("1.0", "baas.chain.public.account.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 自动创建链上账户
         * Summary: 自动创建链上账户
         */
        public ApplyChainPublicAccountResponse ApplyChainPublicAccount(ApplyChainPublicAccountRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ApplyChainPublicAccountEx(request, headers, runtime);
        }

        /**
         * Description: 自动创建链上账户
         * Summary: 自动创建链上账户
         */
        public async Task<ApplyChainPublicAccountResponse> ApplyChainPublicAccountAsync(ApplyChainPublicAccountRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ApplyChainPublicAccountExAsync(request, headers, runtime);
        }

        /**
         * Description: 自动创建链上账户
         * Summary: 自动创建链上账户
         */
        public ApplyChainPublicAccountResponse ApplyChainPublicAccountEx(ApplyChainPublicAccountRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyChainPublicAccountResponse>(DoRequest("1.0", "baas.chain.public.account.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 自动创建链上账户
         * Summary: 自动创建链上账户
         */
        public async Task<ApplyChainPublicAccountResponse> ApplyChainPublicAccountExAsync(ApplyChainPublicAccountRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyChainPublicAccountResponse>(await DoRequestAsync("1.0", "baas.chain.public.account.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 免费体验链查询
         * Summary: 免费体验链查询
         */
        public QueryChainPublicResponse QueryChainPublic(QueryChainPublicRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainPublicEx(request, headers, runtime);
        }

        /**
         * Description: 免费体验链查询
         * Summary: 免费体验链查询
         */
        public async Task<QueryChainPublicResponse> QueryChainPublicAsync(QueryChainPublicRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainPublicExAsync(request, headers, runtime);
        }

        /**
         * Description: 免费体验链查询
         * Summary: 免费体验链查询
         */
        public QueryChainPublicResponse QueryChainPublicEx(QueryChainPublicRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainPublicResponse>(DoRequest("1.0", "baas.chain.public.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 免费体验链查询
         * Summary: 免费体验链查询
         */
        public async Task<QueryChainPublicResponse> QueryChainPublicExAsync(QueryChainPublicRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainPublicResponse>(await DoRequestAsync("1.0", "baas.chain.public.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 免费体验链证书下载
         * Summary: 免费体验链证书下载
         */
        public DownloadChainPublicCertResponse DownloadChainPublicCert(DownloadChainPublicCertRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return DownloadChainPublicCertEx(request, headers, runtime);
        }

        /**
         * Description: 免费体验链证书下载
         * Summary: 免费体验链证书下载
         */
        public async Task<DownloadChainPublicCertResponse> DownloadChainPublicCertAsync(DownloadChainPublicCertRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await DownloadChainPublicCertExAsync(request, headers, runtime);
        }

        /**
         * Description: 免费体验链证书下载
         * Summary: 免费体验链证书下载
         */
        public DownloadChainPublicCertResponse DownloadChainPublicCertEx(DownloadChainPublicCertRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DownloadChainPublicCertResponse>(DoRequest("1.0", "baas.chain.public.cert.download", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 免费体验链证书下载
         * Summary: 免费体验链证书下载
         */
        public async Task<DownloadChainPublicCertResponse> DownloadChainPublicCertExAsync(DownloadChainPublicCertRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DownloadChainPublicCertResponse>(await DoRequestAsync("1.0", "baas.chain.public.cert.download", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 手工创建账户
         * Summary: 手工创建账户
         */
        public CreateChainAccountAntResponse CreateChainAccountAnt(CreateChainAccountAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateChainAccountAntEx(request, headers, runtime);
        }

        /**
         * Description: 手工创建账户
         * Summary: 手工创建账户
         */
        public async Task<CreateChainAccountAntResponse> CreateChainAccountAntAsync(CreateChainAccountAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateChainAccountAntExAsync(request, headers, runtime);
        }

        /**
         * Description: 手工创建账户
         * Summary: 手工创建账户
         */
        public CreateChainAccountAntResponse CreateChainAccountAntEx(CreateChainAccountAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateChainAccountAntResponse>(DoRequest("1.0", "baas.chain.account.ant.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 手工创建账户
         * Summary: 手工创建账户
         */
        public async Task<CreateChainAccountAntResponse> CreateChainAccountAntExAsync(CreateChainAccountAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateChainAccountAntResponse>(await DoRequestAsync("1.0", "baas.chain.account.ant.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 自动创建账户
         * Summary: 自动创建账户
         */
        public ApplyChainAccountAntResponse ApplyChainAccountAnt(ApplyChainAccountAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ApplyChainAccountAntEx(request, headers, runtime);
        }

        /**
         * Description: 自动创建账户
         * Summary: 自动创建账户
         */
        public async Task<ApplyChainAccountAntResponse> ApplyChainAccountAntAsync(ApplyChainAccountAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ApplyChainAccountAntExAsync(request, headers, runtime);
        }

        /**
         * Description: 自动创建账户
         * Summary: 自动创建账户
         */
        public ApplyChainAccountAntResponse ApplyChainAccountAntEx(ApplyChainAccountAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyChainAccountAntResponse>(DoRequest("1.0", "baas.chain.account.ant.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 自动创建账户
         * Summary: 自动创建账户
         */
        public async Task<ApplyChainAccountAntResponse> ApplyChainAccountAntExAsync(ApplyChainAccountAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyChainAccountAntResponse>(await DoRequestAsync("1.0", "baas.chain.account.ant.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询链上账户列表
         * Summary: 查询链上账户列表
         */
        public QueryChainAccountAntResponse QueryChainAccountAnt(QueryChainAccountAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainAccountAntEx(request, headers, runtime);
        }

        /**
         * Description: 查询链上账户列表
         * Summary: 查询链上账户列表
         */
        public async Task<QueryChainAccountAntResponse> QueryChainAccountAntAsync(QueryChainAccountAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainAccountAntExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询链上账户列表
         * Summary: 查询链上账户列表
         */
        public QueryChainAccountAntResponse QueryChainAccountAntEx(QueryChainAccountAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainAccountAntResponse>(DoRequest("1.0", "baas.chain.account.ant.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询链上账户列表
         * Summary: 查询链上账户列表
         */
        public async Task<QueryChainAccountAntResponse> QueryChainAccountAntExAsync(QueryChainAccountAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainAccountAntResponse>(await DoRequestAsync("1.0", "baas.chain.account.ant.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 区块链证书下载
         * Summary: 区块链证书下载
         */
        public DownloadChainCertAntResponse DownloadChainCertAnt(DownloadChainCertAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return DownloadChainCertAntEx(request, headers, runtime);
        }

        /**
         * Description: 区块链证书下载
         * Summary: 区块链证书下载
         */
        public async Task<DownloadChainCertAntResponse> DownloadChainCertAntAsync(DownloadChainCertAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await DownloadChainCertAntExAsync(request, headers, runtime);
        }

        /**
         * Description: 区块链证书下载
         * Summary: 区块链证书下载
         */
        public DownloadChainCertAntResponse DownloadChainCertAntEx(DownloadChainCertAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DownloadChainCertAntResponse>(DoRequest("1.0", "baas.chain.cert.ant.download", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 区块链证书下载
         * Summary: 区块链证书下载
         */
        public async Task<DownloadChainCertAntResponse> DownloadChainCertAntExAsync(DownloadChainCertAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DownloadChainCertAntResponse>(await DoRequestAsync("1.0", "baas.chain.cert.ant.download", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云链节点查询
         * Summary: 阿里云链节点查询
         */
        public QueryChainNodeAntResponse QueryChainNodeAnt(QueryChainNodeAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainNodeAntEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云链节点查询
         * Summary: 阿里云链节点查询
         */
        public async Task<QueryChainNodeAntResponse> QueryChainNodeAntAsync(QueryChainNodeAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainNodeAntExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云链节点查询
         * Summary: 阿里云链节点查询
         */
        public QueryChainNodeAntResponse QueryChainNodeAntEx(QueryChainNodeAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainNodeAntResponse>(DoRequest("1.0", "baas.chain.node.ant.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云链节点查询
         * Summary: 阿里云链节点查询
         */
        public async Task<QueryChainNodeAntResponse> QueryChainNodeAntExAsync(QueryChainNodeAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainNodeAntResponse>(await DoRequestAsync("1.0", "baas.chain.node.ant.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 区块链链上账户冻结
         * Summary: 区块链链上账户冻结
         */
        public FreezeChainAccountAntResponse FreezeChainAccountAnt(FreezeChainAccountAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return FreezeChainAccountAntEx(request, headers, runtime);
        }

        /**
         * Description: 区块链链上账户冻结
         * Summary: 区块链链上账户冻结
         */
        public async Task<FreezeChainAccountAntResponse> FreezeChainAccountAntAsync(FreezeChainAccountAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await FreezeChainAccountAntExAsync(request, headers, runtime);
        }

        /**
         * Description: 区块链链上账户冻结
         * Summary: 区块链链上账户冻结
         */
        public FreezeChainAccountAntResponse FreezeChainAccountAntEx(FreezeChainAccountAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<FreezeChainAccountAntResponse>(DoRequest("1.0", "baas.chain.account.ant.freeze", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 区块链链上账户冻结
         * Summary: 区块链链上账户冻结
         */
        public async Task<FreezeChainAccountAntResponse> FreezeChainAccountAntExAsync(FreezeChainAccountAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<FreezeChainAccountAntResponse>(await DoRequestAsync("1.0", "baas.chain.account.ant.freeze", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 蚂蚁区块链账户解冻
         * Summary: 蚂蚁区块链账户解冻
         */
        public UnfreezeChainAccountAntResponse UnfreezeChainAccountAnt(UnfreezeChainAccountAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UnfreezeChainAccountAntEx(request, headers, runtime);
        }

        /**
         * Description: 蚂蚁区块链账户解冻
         * Summary: 蚂蚁区块链账户解冻
         */
        public async Task<UnfreezeChainAccountAntResponse> UnfreezeChainAccountAntAsync(UnfreezeChainAccountAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UnfreezeChainAccountAntExAsync(request, headers, runtime);
        }

        /**
         * Description: 蚂蚁区块链账户解冻
         * Summary: 蚂蚁区块链账户解冻
         */
        public UnfreezeChainAccountAntResponse UnfreezeChainAccountAntEx(UnfreezeChainAccountAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UnfreezeChainAccountAntResponse>(DoRequest("1.0", "baas.chain.account.ant.unfreeze", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 蚂蚁区块链账户解冻
         * Summary: 蚂蚁区块链账户解冻
         */
        public async Task<UnfreezeChainAccountAntResponse> UnfreezeChainAccountAntExAsync(UnfreezeChainAccountAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UnfreezeChainAccountAntResponse>(await DoRequestAsync("1.0", "baas.chain.account.ant.unfreeze", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 区块链证书重置
         * Summary: 区块链证书重置
         */
        public ReinitChainCertAntResponse ReinitChainCertAnt(ReinitChainCertAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ReinitChainCertAntEx(request, headers, runtime);
        }

        /**
         * Description: 区块链证书重置
         * Summary: 区块链证书重置
         */
        public async Task<ReinitChainCertAntResponse> ReinitChainCertAntAsync(ReinitChainCertAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ReinitChainCertAntExAsync(request, headers, runtime);
        }

        /**
         * Description: 区块链证书重置
         * Summary: 区块链证书重置
         */
        public ReinitChainCertAntResponse ReinitChainCertAntEx(ReinitChainCertAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ReinitChainCertAntResponse>(DoRequest("1.0", "baas.chain.cert.ant.reinit", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 区块链证书重置
         * Summary: 区块链证书重置
         */
        public async Task<ReinitChainCertAntResponse> ReinitChainCertAntExAsync(ReinitChainCertAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ReinitChainCertAntResponse>(await DoRequestAsync("1.0", "baas.chain.cert.ant.reinit", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 区块链证书查询
         * Summary: 区块链证书查询
         */
        public QueryChainCertAntResponse QueryChainCertAnt(QueryChainCertAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainCertAntEx(request, headers, runtime);
        }

        /**
         * Description: 区块链证书查询
         * Summary: 区块链证书查询
         */
        public async Task<QueryChainCertAntResponse> QueryChainCertAntAsync(QueryChainCertAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainCertAntExAsync(request, headers, runtime);
        }

        /**
         * Description: 区块链证书查询
         * Summary: 区块链证书查询
         */
        public QueryChainCertAntResponse QueryChainCertAntEx(QueryChainCertAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainCertAntResponse>(DoRequest("1.0", "baas.chain.cert.ant.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 区块链证书查询
         * Summary: 区块链证书查询
         */
        public async Task<QueryChainCertAntResponse> QueryChainCertAntExAsync(QueryChainCertAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainCertAntResponse>(await DoRequestAsync("1.0", "baas.chain.cert.ant.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云浏览器信息查询
         * Summary: 阿里云浏览器信息查询
         */
        public QueryChainBrowserInfoResponse QueryChainBrowserInfo(QueryChainBrowserInfoRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainBrowserInfoEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云浏览器信息查询
         * Summary: 阿里云浏览器信息查询
         */
        public async Task<QueryChainBrowserInfoResponse> QueryChainBrowserInfoAsync(QueryChainBrowserInfoRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainBrowserInfoExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云浏览器信息查询
         * Summary: 阿里云浏览器信息查询
         */
        public QueryChainBrowserInfoResponse QueryChainBrowserInfoEx(QueryChainBrowserInfoRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainBrowserInfoResponse>(DoRequest("1.0", "baas.chain.browser.info.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云浏览器信息查询
         * Summary: 阿里云浏览器信息查询
         */
        public async Task<QueryChainBrowserInfoResponse> QueryChainBrowserInfoExAsync(QueryChainBrowserInfoRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainBrowserInfoResponse>(await DoRequestAsync("1.0", "baas.chain.browser.info.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云最新区块链信息查询
         * Summary: 阿里云最新区块链信息查询
         */
        public QueryChainBrowserBlocksResponse QueryChainBrowserBlocks(QueryChainBrowserBlocksRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainBrowserBlocksEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云最新区块链信息查询
         * Summary: 阿里云最新区块链信息查询
         */
        public async Task<QueryChainBrowserBlocksResponse> QueryChainBrowserBlocksAsync(QueryChainBrowserBlocksRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainBrowserBlocksExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云最新区块链信息查询
         * Summary: 阿里云最新区块链信息查询
         */
        public QueryChainBrowserBlocksResponse QueryChainBrowserBlocksEx(QueryChainBrowserBlocksRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainBrowserBlocksResponse>(DoRequest("1.0", "baas.chain.browser.blocks.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云最新区块链信息查询
         * Summary: 阿里云最新区块链信息查询
         */
        public async Task<QueryChainBrowserBlocksResponse> QueryChainBrowserBlocksExAsync(QueryChainBrowserBlocksRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainBrowserBlocksResponse>(await DoRequestAsync("1.0", "baas.chain.browser.blocks.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云最新交易查询
         * Summary: 阿里云最新交易查询
         */
        public QueryChainBrowserTransactionsResponse QueryChainBrowserTransactions(QueryChainBrowserTransactionsRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainBrowserTransactionsEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云最新交易查询
         * Summary: 阿里云最新交易查询
         */
        public async Task<QueryChainBrowserTransactionsResponse> QueryChainBrowserTransactionsAsync(QueryChainBrowserTransactionsRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainBrowserTransactionsExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云最新交易查询
         * Summary: 阿里云最新交易查询
         */
        public QueryChainBrowserTransactionsResponse QueryChainBrowserTransactionsEx(QueryChainBrowserTransactionsRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainBrowserTransactionsResponse>(DoRequest("1.0", "baas.chain.browser.transactions.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云最新交易查询
         * Summary: 阿里云最新交易查询
         */
        public async Task<QueryChainBrowserTransactionsResponse> QueryChainBrowserTransactionsExAsync(QueryChainBrowserTransactionsRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainBrowserTransactionsResponse>(await DoRequestAsync("1.0", "baas.chain.browser.transactions.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云最新区块交易信息查询
         * Summary: 阿里云最新区块交易信息查询
         */
        public BatchqueryChainBrowserTransactionResponse BatchqueryChainBrowserTransaction(BatchqueryChainBrowserTransactionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return BatchqueryChainBrowserTransactionEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云最新区块交易信息查询
         * Summary: 阿里云最新区块交易信息查询
         */
        public async Task<BatchqueryChainBrowserTransactionResponse> BatchqueryChainBrowserTransactionAsync(BatchqueryChainBrowserTransactionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await BatchqueryChainBrowserTransactionExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云最新区块交易信息查询
         * Summary: 阿里云最新区块交易信息查询
         */
        public BatchqueryChainBrowserTransactionResponse BatchqueryChainBrowserTransactionEx(BatchqueryChainBrowserTransactionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BatchqueryChainBrowserTransactionResponse>(DoRequest("1.0", "baas.chain.browser.transaction.batchquery", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云最新区块交易信息查询
         * Summary: 阿里云最新区块交易信息查询
         */
        public async Task<BatchqueryChainBrowserTransactionResponse> BatchqueryChainBrowserTransactionExAsync(BatchqueryChainBrowserTransactionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BatchqueryChainBrowserTransactionResponse>(await DoRequestAsync("1.0", "baas.chain.browser.transaction.batchquery", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链交易收据查询
         * Summary: 阿里云区块链交易收据查询
         */
        public QueryChainBrowserReceiptResponse QueryChainBrowserReceipt(QueryChainBrowserReceiptRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainBrowserReceiptEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链交易收据查询
         * Summary: 阿里云区块链交易收据查询
         */
        public async Task<QueryChainBrowserReceiptResponse> QueryChainBrowserReceiptAsync(QueryChainBrowserReceiptRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainBrowserReceiptExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链交易收据查询
         * Summary: 阿里云区块链交易收据查询
         */
        public QueryChainBrowserReceiptResponse QueryChainBrowserReceiptEx(QueryChainBrowserReceiptRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainBrowserReceiptResponse>(DoRequest("1.0", "baas.chain.browser.receipt.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链交易收据查询
         * Summary: 阿里云区块链交易收据查询
         */
        public async Task<QueryChainBrowserReceiptResponse> QueryChainBrowserReceiptExAsync(QueryChainBrowserReceiptRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainBrowserReceiptResponse>(await DoRequestAsync("1.0", "baas.chain.browser.receipt.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链交易查询
         * Summary: 阿里云区块链交易查询
         */
        public QueryChainBrowserTransactionResponse QueryChainBrowserTransaction(QueryChainBrowserTransactionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainBrowserTransactionEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链交易查询
         * Summary: 阿里云区块链交易查询
         */
        public async Task<QueryChainBrowserTransactionResponse> QueryChainBrowserTransactionAsync(QueryChainBrowserTransactionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainBrowserTransactionExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链交易查询
         * Summary: 阿里云区块链交易查询
         */
        public QueryChainBrowserTransactionResponse QueryChainBrowserTransactionEx(QueryChainBrowserTransactionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainBrowserTransactionResponse>(DoRequest("1.0", "baas.chain.browser.transaction.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链交易查询
         * Summary: 阿里云区块链交易查询
         */
        public async Task<QueryChainBrowserTransactionResponse> QueryChainBrowserTransactionExAsync(QueryChainBrowserTransactionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainBrowserTransactionResponse>(await DoRequestAsync("1.0", "baas.chain.browser.transaction.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链的区块信息
         * Summary: 阿里云区块链的区块信息
         */
        public QueryChainBrowserBlockResponse QueryChainBrowserBlock(QueryChainBrowserBlockRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainBrowserBlockEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链的区块信息
         * Summary: 阿里云区块链的区块信息
         */
        public async Task<QueryChainBrowserBlockResponse> QueryChainBrowserBlockAsync(QueryChainBrowserBlockRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainBrowserBlockExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链的区块信息
         * Summary: 阿里云区块链的区块信息
         */
        public QueryChainBrowserBlockResponse QueryChainBrowserBlockEx(QueryChainBrowserBlockRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainBrowserBlockResponse>(DoRequest("1.0", "baas.chain.browser.block.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链的区块信息
         * Summary: 阿里云区块链的区块信息
         */
        public async Task<QueryChainBrowserBlockResponse> QueryChainBrowserBlockExAsync(QueryChainBrowserBlockRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainBrowserBlockResponse>(await DoRequestAsync("1.0", "baas.chain.browser.block.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云售卖区信息查询
         * Summary: 阿里云售卖区信息查询
         */
        public QueryChainResouceRegionResponse QueryChainResouceRegion(QueryChainResouceRegionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainResouceRegionEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云售卖区信息查询
         * Summary: 阿里云售卖区信息查询
         */
        public async Task<QueryChainResouceRegionResponse> QueryChainResouceRegionAsync(QueryChainResouceRegionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainResouceRegionExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云售卖区信息查询
         * Summary: 阿里云售卖区信息查询
         */
        public QueryChainResouceRegionResponse QueryChainResouceRegionEx(QueryChainResouceRegionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainResouceRegionResponse>(DoRequest("1.0", "baas.chain.resouce.region.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云售卖区信息查询
         * Summary: 阿里云售卖区信息查询
         */
        public async Task<QueryChainResouceRegionResponse> QueryChainResouceRegionExAsync(QueryChainResouceRegionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainResouceRegionResponse>(await DoRequestAsync("1.0", "baas.chain.resouce.region.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云资源类型查询
         * Summary: 阿里云资源类型查询
         */
        public QueryChainResourceTypeResponse QueryChainResourceType(QueryChainResourceTypeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainResourceTypeEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云资源类型查询
         * Summary: 阿里云资源类型查询
         */
        public async Task<QueryChainResourceTypeResponse> QueryChainResourceTypeAsync(QueryChainResourceTypeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainResourceTypeExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云资源类型查询
         * Summary: 阿里云资源类型查询
         */
        public QueryChainResourceTypeResponse QueryChainResourceTypeEx(QueryChainResourceTypeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainResourceTypeResponse>(DoRequest("1.0", "baas.chain.resource.type.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云资源类型查询
         * Summary: 阿里云资源类型查询
         */
        public async Task<QueryChainResourceTypeResponse> QueryChainResourceTypeExAsync(QueryChainResourceTypeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainResourceTypeResponse>(await DoRequestAsync("1.0", "baas.chain.resource.type.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链售卖资源查询
         * Summary: 阿里云区块链售卖资源查询
         */
        public QueryChainResouceSaleResponse QueryChainResouceSale(QueryChainResouceSaleRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainResouceSaleEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链售卖资源查询
         * Summary: 阿里云区块链售卖资源查询
         */
        public async Task<QueryChainResouceSaleResponse> QueryChainResouceSaleAsync(QueryChainResouceSaleRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainResouceSaleExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链售卖资源查询
         * Summary: 阿里云区块链售卖资源查询
         */
        public QueryChainResouceSaleResponse QueryChainResouceSaleEx(QueryChainResouceSaleRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainResouceSaleResponse>(DoRequest("1.0", "baas.chain.resouce.sale.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链售卖资源查询
         * Summary: 阿里云区块链售卖资源查询
         */
        public async Task<QueryChainResouceSaleResponse> QueryChainResouceSaleExAsync(QueryChainResouceSaleRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainResouceSaleResponse>(await DoRequestAsync("1.0", "baas.chain.resouce.sale.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链配置信息查询
         * Summary: 阿里云区块链配置信息查询
         */
        public QueryChainResourceConfigResponse QueryChainResourceConfig(QueryChainResourceConfigRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainResourceConfigEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链配置信息查询
         * Summary: 阿里云区块链配置信息查询
         */
        public async Task<QueryChainResourceConfigResponse> QueryChainResourceConfigAsync(QueryChainResourceConfigRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainResourceConfigExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链配置信息查询
         * Summary: 阿里云区块链配置信息查询
         */
        public QueryChainResourceConfigResponse QueryChainResourceConfigEx(QueryChainResourceConfigRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainResourceConfigResponse>(DoRequest("1.0", "baas.chain.resource.config.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链配置信息查询
         * Summary: 阿里云区块链配置信息查询
         */
        public async Task<QueryChainResourceConfigResponse> QueryChainResourceConfigExAsync(QueryChainResourceConfigRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainResourceConfigResponse>(await DoRequestAsync("1.0", "baas.chain.resource.config.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链交易统计信息
         * Summary: 阿里云区块链交易统计信息
         */
        public QueryChainBrowserStatisticsResponse QueryChainBrowserStatistics(QueryChainBrowserStatisticsRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainBrowserStatisticsEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链交易统计信息
         * Summary: 阿里云区块链交易统计信息
         */
        public async Task<QueryChainBrowserStatisticsResponse> QueryChainBrowserStatisticsAsync(QueryChainBrowserStatisticsRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainBrowserStatisticsExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链交易统计信息
         * Summary: 阿里云区块链交易统计信息
         */
        public QueryChainBrowserStatisticsResponse QueryChainBrowserStatisticsEx(QueryChainBrowserStatisticsRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainBrowserStatisticsResponse>(DoRequest("1.0", "baas.chain.browser.statistics.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链交易统计信息
         * Summary: 阿里云区块链交易统计信息
         */
        public async Task<QueryChainBrowserStatisticsResponse> QueryChainBrowserStatisticsExAsync(QueryChainBrowserStatisticsRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainBrowserStatisticsResponse>(await DoRequestAsync("1.0", "baas.chain.browser.statistics.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链交易执行交易
         * Summary: 阿里云区块链交易执行交易
         */
        public ExecChainPublicContractResponse ExecChainPublicContract(ExecChainPublicContractRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ExecChainPublicContractEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链交易执行交易
         * Summary: 阿里云区块链交易执行交易
         */
        public async Task<ExecChainPublicContractResponse> ExecChainPublicContractAsync(ExecChainPublicContractRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ExecChainPublicContractExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链交易执行交易
         * Summary: 阿里云区块链交易执行交易
         */
        public ExecChainPublicContractResponse ExecChainPublicContractEx(ExecChainPublicContractRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecChainPublicContractResponse>(DoRequest("1.0", "baas.chain.public.contract.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链交易执行交易
         * Summary: 阿里云区块链交易执行交易
         */
        public async Task<ExecChainPublicContractResponse> ExecChainPublicContractExAsync(ExecChainPublicContractRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecChainPublicContractResponse>(await DoRequestAsync("1.0", "baas.chain.public.contract.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云免费体验链的cloudIde查询
         * Summary: 阿里云免费体验链的cloudIde查询
         */
        public QueryChainPublicIdeResponse QueryChainPublicIde(QueryChainPublicIdeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainPublicIdeEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云免费体验链的cloudIde查询
         * Summary: 阿里云免费体验链的cloudIde查询
         */
        public async Task<QueryChainPublicIdeResponse> QueryChainPublicIdeAsync(QueryChainPublicIdeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainPublicIdeExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云免费体验链的cloudIde查询
         * Summary: 阿里云免费体验链的cloudIde查询
         */
        public QueryChainPublicIdeResponse QueryChainPublicIdeEx(QueryChainPublicIdeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainPublicIdeResponse>(DoRequest("1.0", "baas.chain.public.ide.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云免费体验链的cloudIde查询
         * Summary: 阿里云免费体验链的cloudIde查询
         */
        public async Task<QueryChainPublicIdeResponse> QueryChainPublicIdeExAsync(QueryChainPublicIdeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainPublicIdeResponse>(await DoRequestAsync("1.0", "baas.chain.public.ide.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云免费体验链合约文件和内容查询
         * Summary: 阿里云免费体验链合约文件和内容查询
         */
        public QueryChainPublicContentResponse QueryChainPublicContent(QueryChainPublicContentRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainPublicContentEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云免费体验链合约文件和内容查询
         * Summary: 阿里云免费体验链合约文件和内容查询
         */
        public async Task<QueryChainPublicContentResponse> QueryChainPublicContentAsync(QueryChainPublicContentRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainPublicContentExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云免费体验链合约文件和内容查询
         * Summary: 阿里云免费体验链合约文件和内容查询
         */
        public QueryChainPublicContentResponse QueryChainPublicContentEx(QueryChainPublicContentRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainPublicContentResponse>(DoRequest("1.0", "baas.chain.public.content.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云免费体验链合约文件和内容查询
         * Summary: 阿里云免费体验链合约文件和内容查询
         */
        public async Task<QueryChainPublicContentResponse> QueryChainPublicContentExAsync(QueryChainPublicContentRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainPublicContentResponse>(await DoRequestAsync("1.0", "baas.chain.public.content.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云合约工程创建
         * Summary: 阿里云合约工程创建
         */
        public CreateChainContractProjectResponse CreateChainContractProject(CreateChainContractProjectRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateChainContractProjectEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云合约工程创建
         * Summary: 阿里云合约工程创建
         */
        public async Task<CreateChainContractProjectResponse> CreateChainContractProjectAsync(CreateChainContractProjectRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateChainContractProjectExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云合约工程创建
         * Summary: 阿里云合约工程创建
         */
        public CreateChainContractProjectResponse CreateChainContractProjectEx(CreateChainContractProjectRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateChainContractProjectResponse>(DoRequest("1.0", "baas.chain.contract.project.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云合约工程创建
         * Summary: 阿里云合约工程创建
         */
        public async Task<CreateChainContractProjectResponse> CreateChainContractProjectExAsync(CreateChainContractProjectRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateChainContractProjectResponse>(await DoRequestAsync("1.0", "baas.chain.contract.project.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云合约工程删除
         * Summary: 阿里云合约工程删除
         */
        public DeleteChainContractProjectResponse DeleteChainContractProject(DeleteChainContractProjectRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return DeleteChainContractProjectEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云合约工程删除
         * Summary: 阿里云合约工程删除
         */
        public async Task<DeleteChainContractProjectResponse> DeleteChainContractProjectAsync(DeleteChainContractProjectRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await DeleteChainContractProjectExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云合约工程删除
         * Summary: 阿里云合约工程删除
         */
        public DeleteChainContractProjectResponse DeleteChainContractProjectEx(DeleteChainContractProjectRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteChainContractProjectResponse>(DoRequest("1.0", "baas.chain.contract.project.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云合约工程删除
         * Summary: 阿里云合约工程删除
         */
        public async Task<DeleteChainContractProjectResponse> DeleteChainContractProjectExAsync(DeleteChainContractProjectRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteChainContractProjectResponse>(await DoRequestAsync("1.0", "baas.chain.contract.project.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 复制阿里云合约工程
         * Summary: 复制阿里云合约工程
         */
        public CloneChainContractProjectResponse CloneChainContractProject(CloneChainContractProjectRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CloneChainContractProjectEx(request, headers, runtime);
        }

        /**
         * Description: 复制阿里云合约工程
         * Summary: 复制阿里云合约工程
         */
        public async Task<CloneChainContractProjectResponse> CloneChainContractProjectAsync(CloneChainContractProjectRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CloneChainContractProjectExAsync(request, headers, runtime);
        }

        /**
         * Description: 复制阿里云合约工程
         * Summary: 复制阿里云合约工程
         */
        public CloneChainContractProjectResponse CloneChainContractProjectEx(CloneChainContractProjectRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CloneChainContractProjectResponse>(DoRequest("1.0", "baas.chain.contract.project.clone", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 复制阿里云合约工程
         * Summary: 复制阿里云合约工程
         */
        public async Task<CloneChainContractProjectResponse> CloneChainContractProjectExAsync(CloneChainContractProjectRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CloneChainContractProjectResponse>(await DoRequestAsync("1.0", "baas.chain.contract.project.clone", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云合约工程信息查询
         * Summary: 阿里云合约工程信息查询
         */
        public QueryChainContractProjectResponse QueryChainContractProject(QueryChainContractProjectRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainContractProjectEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云合约工程信息查询
         * Summary: 阿里云合约工程信息查询
         */
        public async Task<QueryChainContractProjectResponse> QueryChainContractProjectAsync(QueryChainContractProjectRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainContractProjectExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云合约工程信息查询
         * Summary: 阿里云合约工程信息查询
         */
        public QueryChainContractProjectResponse QueryChainContractProjectEx(QueryChainContractProjectRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainContractProjectResponse>(DoRequest("1.0", "baas.chain.contract.project.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云合约工程信息查询
         * Summary: 阿里云合约工程信息查询
         */
        public async Task<QueryChainContractProjectResponse> QueryChainContractProjectExAsync(QueryChainContractProjectRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainContractProjectResponse>(await DoRequestAsync("1.0", "baas.chain.contract.project.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 复制阿里云合约工程
         * Summary: 复制阿里云合约工程
         */
        public RetryChainContractProjectResponse RetryChainContractProject(RetryChainContractProjectRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return RetryChainContractProjectEx(request, headers, runtime);
        }

        /**
         * Description: 复制阿里云合约工程
         * Summary: 复制阿里云合约工程
         */
        public async Task<RetryChainContractProjectResponse> RetryChainContractProjectAsync(RetryChainContractProjectRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await RetryChainContractProjectExAsync(request, headers, runtime);
        }

        /**
         * Description: 复制阿里云合约工程
         * Summary: 复制阿里云合约工程
         */
        public RetryChainContractProjectResponse RetryChainContractProjectEx(RetryChainContractProjectRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<RetryChainContractProjectResponse>(DoRequest("1.0", "baas.chain.contract.project.retry", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 复制阿里云合约工程
         * Summary: 复制阿里云合约工程
         */
        public async Task<RetryChainContractProjectResponse> RetryChainContractProjectExAsync(RetryChainContractProjectRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<RetryChainContractProjectResponse>(await DoRequestAsync("1.0", "baas.chain.contract.project.retry", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新阿里云区块链的合约工程
         * Summary: 更新阿里云区块链的合约工程
         */
        public UpdateChainContractProjectResponse UpdateChainContractProject(UpdateChainContractProjectRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateChainContractProjectEx(request, headers, runtime);
        }

        /**
         * Description: 更新阿里云区块链的合约工程
         * Summary: 更新阿里云区块链的合约工程
         */
        public async Task<UpdateChainContractProjectResponse> UpdateChainContractProjectAsync(UpdateChainContractProjectRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateChainContractProjectExAsync(request, headers, runtime);
        }

        /**
         * Description: 更新阿里云区块链的合约工程
         * Summary: 更新阿里云区块链的合约工程
         */
        public UpdateChainContractProjectResponse UpdateChainContractProjectEx(UpdateChainContractProjectRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateChainContractProjectResponse>(DoRequest("1.0", "baas.chain.contract.project.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新阿里云区块链的合约工程
         * Summary: 更新阿里云区块链的合约工程
         */
        public async Task<UpdateChainContractProjectResponse> UpdateChainContractProjectExAsync(UpdateChainContractProjectRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateChainContractProjectResponse>(await DoRequestAsync("1.0", "baas.chain.contract.project.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建合约文件内容
         * Summary: 创建合约文件内容
         */
        public CreateChainContractContentResponse CreateChainContractContent(CreateChainContractContentRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateChainContractContentEx(request, headers, runtime);
        }

        /**
         * Description: 创建合约文件内容
         * Summary: 创建合约文件内容
         */
        public async Task<CreateChainContractContentResponse> CreateChainContractContentAsync(CreateChainContractContentRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateChainContractContentExAsync(request, headers, runtime);
        }

        /**
         * Description: 创建合约文件内容
         * Summary: 创建合约文件内容
         */
        public CreateChainContractContentResponse CreateChainContractContentEx(CreateChainContractContentRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateChainContractContentResponse>(DoRequest("1.0", "baas.chain.contract.content.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建合约文件内容
         * Summary: 创建合约文件内容
         */
        public async Task<CreateChainContractContentResponse> CreateChainContractContentExAsync(CreateChainContractContentRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateChainContractContentResponse>(await DoRequestAsync("1.0", "baas.chain.contract.content.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新阿里云合约文件内容
         * Summary: 更新阿里云合约文件内容
         */
        public UpdateChainContractContentResponse UpdateChainContractContent(UpdateChainContractContentRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateChainContractContentEx(request, headers, runtime);
        }

        /**
         * Description: 更新阿里云合约文件内容
         * Summary: 更新阿里云合约文件内容
         */
        public async Task<UpdateChainContractContentResponse> UpdateChainContractContentAsync(UpdateChainContractContentRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateChainContractContentExAsync(request, headers, runtime);
        }

        /**
         * Description: 更新阿里云合约文件内容
         * Summary: 更新阿里云合约文件内容
         */
        public UpdateChainContractContentResponse UpdateChainContractContentEx(UpdateChainContractContentRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateChainContractContentResponse>(DoRequest("1.0", "baas.chain.contract.content.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新阿里云合约文件内容
         * Summary: 更新阿里云合约文件内容
         */
        public async Task<UpdateChainContractContentResponse> UpdateChainContractContentExAsync(UpdateChainContractContentRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateChainContractContentResponse>(await DoRequestAsync("1.0", "baas.chain.contract.content.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云合约文件信息查询
         * Summary: 阿里云合约文件信息查询
         */
        public QueryChainContractContentResponse QueryChainContractContent(QueryChainContractContentRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainContractContentEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云合约文件信息查询
         * Summary: 阿里云合约文件信息查询
         */
        public async Task<QueryChainContractContentResponse> QueryChainContractContentAsync(QueryChainContractContentRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainContractContentExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云合约文件信息查询
         * Summary: 阿里云合约文件信息查询
         */
        public QueryChainContractContentResponse QueryChainContractContentEx(QueryChainContractContentRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainContractContentResponse>(DoRequest("1.0", "baas.chain.contract.content.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云合约文件信息查询
         * Summary: 阿里云合约文件信息查询
         */
        public async Task<QueryChainContractContentResponse> QueryChainContractContentExAsync(QueryChainContractContentRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainContractContentResponse>(await DoRequestAsync("1.0", "baas.chain.contract.content.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链合约执行接口
         * Summary: 阿里云区块链合约执行
         */
        public ExecChainContractResponse ExecChainContract(ExecChainContractRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ExecChainContractEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链合约执行接口
         * Summary: 阿里云区块链合约执行
         */
        public async Task<ExecChainContractResponse> ExecChainContractAsync(ExecChainContractRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ExecChainContractExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链合约执行接口
         * Summary: 阿里云区块链合约执行
         */
        public ExecChainContractResponse ExecChainContractEx(ExecChainContractRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecChainContractResponse>(DoRequest("1.0", "baas.chain.contract.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链合约执行接口
         * Summary: 阿里云区块链合约执行
         */
        public async Task<ExecChainContractResponse> ExecChainContractExAsync(ExecChainContractRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecChainContractResponse>(await DoRequestAsync("1.0", "baas.chain.contract.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链CloudIde配置查询
         * Summary: 阿里云区块链CloudIde配置查询
         */
        public QueryChainIdeResponse QueryChainIde(QueryChainIdeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainIdeEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链CloudIde配置查询
         * Summary: 阿里云区块链CloudIde配置查询
         */
        public async Task<QueryChainIdeResponse> QueryChainIdeAsync(QueryChainIdeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainIdeExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链CloudIde配置查询
         * Summary: 阿里云区块链CloudIde配置查询
         */
        public QueryChainIdeResponse QueryChainIdeEx(QueryChainIdeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainIdeResponse>(DoRequest("1.0", "baas.chain.ide.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链CloudIde配置查询
         * Summary: 阿里云区块链CloudIde配置查询
         */
        public async Task<QueryChainIdeResponse> QueryChainIdeExAsync(QueryChainIdeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainIdeResponse>(await DoRequestAsync("1.0", "baas.chain.ide.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链合约文件删除
         * Summary: 阿里云区块链合约文件删除
         */
        public DeleteChainContractContentResponse DeleteChainContractContent(DeleteChainContractContentRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return DeleteChainContractContentEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链合约文件删除
         * Summary: 阿里云区块链合约文件删除
         */
        public async Task<DeleteChainContractContentResponse> DeleteChainContractContentAsync(DeleteChainContractContentRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await DeleteChainContractContentExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链合约文件删除
         * Summary: 阿里云区块链合约文件删除
         */
        public DeleteChainContractContentResponse DeleteChainContractContentEx(DeleteChainContractContentRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteChainContractContentResponse>(DoRequest("1.0", "baas.chain.contract.content.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链合约文件删除
         * Summary: 阿里云区块链合约文件删除
         */
        public async Task<DeleteChainContractContentResponse> DeleteChainContractContentExAsync(DeleteChainContractContentRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteChainContractContentResponse>(await DoRequestAsync("1.0", "baas.chain.contract.content.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链小程序用户权限添加
         * Summary: 阿里云区块链小程序用户权限添加
         */
        public BatchcreateChainMiniappUserResponse BatchcreateChainMiniappUser(BatchcreateChainMiniappUserRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return BatchcreateChainMiniappUserEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链小程序用户权限添加
         * Summary: 阿里云区块链小程序用户权限添加
         */
        public async Task<BatchcreateChainMiniappUserResponse> BatchcreateChainMiniappUserAsync(BatchcreateChainMiniappUserRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await BatchcreateChainMiniappUserExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链小程序用户权限添加
         * Summary: 阿里云区块链小程序用户权限添加
         */
        public BatchcreateChainMiniappUserResponse BatchcreateChainMiniappUserEx(BatchcreateChainMiniappUserRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BatchcreateChainMiniappUserResponse>(DoRequest("1.0", "baas.chain.miniapp.user.batchcreate", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链小程序用户权限添加
         * Summary: 阿里云区块链小程序用户权限添加
         */
        public async Task<BatchcreateChainMiniappUserResponse> BatchcreateChainMiniappUserExAsync(BatchcreateChainMiniappUserRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BatchcreateChainMiniappUserResponse>(await DoRequestAsync("1.0", "baas.chain.miniapp.user.batchcreate", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链小程序用户权限删除
         * Summary: 阿里云区块链小程序用户权限删除
         */
        public DeleteChainMiniappUserResponse DeleteChainMiniappUser(DeleteChainMiniappUserRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return DeleteChainMiniappUserEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链小程序用户权限删除
         * Summary: 阿里云区块链小程序用户权限删除
         */
        public async Task<DeleteChainMiniappUserResponse> DeleteChainMiniappUserAsync(DeleteChainMiniappUserRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await DeleteChainMiniappUserExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链小程序用户权限删除
         * Summary: 阿里云区块链小程序用户权限删除
         */
        public DeleteChainMiniappUserResponse DeleteChainMiniappUserEx(DeleteChainMiniappUserRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteChainMiniappUserResponse>(DoRequest("1.0", "baas.chain.miniapp.user.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链小程序用户权限删除
         * Summary: 阿里云区块链小程序用户权限删除
         */
        public async Task<DeleteChainMiniappUserResponse> DeleteChainMiniappUserExAsync(DeleteChainMiniappUserRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteChainMiniappUserResponse>(await DoRequestAsync("1.0", "baas.chain.miniapp.user.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链所有用户权限查询
         * Summary: 阿里云区块链所有用户权限查询
         */
        public BatchqueryChainMiniappUserResponse BatchqueryChainMiniappUser(BatchqueryChainMiniappUserRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return BatchqueryChainMiniappUserEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链所有用户权限查询
         * Summary: 阿里云区块链所有用户权限查询
         */
        public async Task<BatchqueryChainMiniappUserResponse> BatchqueryChainMiniappUserAsync(BatchqueryChainMiniappUserRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await BatchqueryChainMiniappUserExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链所有用户权限查询
         * Summary: 阿里云区块链所有用户权限查询
         */
        public BatchqueryChainMiniappUserResponse BatchqueryChainMiniappUserEx(BatchqueryChainMiniappUserRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BatchqueryChainMiniappUserResponse>(DoRequest("1.0", "baas.chain.miniapp.user.batchquery", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链所有用户权限查询
         * Summary: 阿里云区块链所有用户权限查询
         */
        public async Task<BatchqueryChainMiniappUserResponse> BatchqueryChainMiniappUserExAsync(BatchqueryChainMiniappUserRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BatchqueryChainMiniappUserResponse>(await DoRequestAsync("1.0", "baas.chain.miniapp.user.batchquery", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链小程序权限控制查询
         * Summary: 阿里云区块链小程序权限控制查询
         */
        public QueryChainMiniappAuthorizationResponse QueryChainMiniappAuthorization(QueryChainMiniappAuthorizationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainMiniappAuthorizationEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链小程序权限控制查询
         * Summary: 阿里云区块链小程序权限控制查询
         */
        public async Task<QueryChainMiniappAuthorizationResponse> QueryChainMiniappAuthorizationAsync(QueryChainMiniappAuthorizationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainMiniappAuthorizationExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链小程序权限控制查询
         * Summary: 阿里云区块链小程序权限控制查询
         */
        public QueryChainMiniappAuthorizationResponse QueryChainMiniappAuthorizationEx(QueryChainMiniappAuthorizationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainMiniappAuthorizationResponse>(DoRequest("1.0", "baas.chain.miniapp.authorization.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链小程序权限控制查询
         * Summary: 阿里云区块链小程序权限控制查询
         */
        public async Task<QueryChainMiniappAuthorizationResponse> QueryChainMiniappAuthorizationExAsync(QueryChainMiniappAuthorizationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainMiniappAuthorizationResponse>(await DoRequestAsync("1.0", "baas.chain.miniapp.authorization.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链小程序权限控制变更
         * Summary: 阿里云区块链小程序权限控制变更
         */
        public UpdateChainMiniappAuthorizationResponse UpdateChainMiniappAuthorization(UpdateChainMiniappAuthorizationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateChainMiniappAuthorizationEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链小程序权限控制变更
         * Summary: 阿里云区块链小程序权限控制变更
         */
        public async Task<UpdateChainMiniappAuthorizationResponse> UpdateChainMiniappAuthorizationAsync(UpdateChainMiniappAuthorizationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateChainMiniappAuthorizationExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链小程序权限控制变更
         * Summary: 阿里云区块链小程序权限控制变更
         */
        public UpdateChainMiniappAuthorizationResponse UpdateChainMiniappAuthorizationEx(UpdateChainMiniappAuthorizationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateChainMiniappAuthorizationResponse>(DoRequest("1.0", "baas.chain.miniapp.authorization.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链小程序权限控制变更
         * Summary: 阿里云区块链小程序权限控制变更
         */
        public async Task<UpdateChainMiniappAuthorizationResponse> UpdateChainMiniappAuthorizationExAsync(UpdateChainMiniappAuthorizationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateChainMiniappAuthorizationResponse>(await DoRequestAsync("1.0", "baas.chain.miniapp.authorization.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链小程序交易查询
         * Summary: 阿里云区块链小程序交易查询
         */
        public QueryChainMiniappTransactionResponse QueryChainMiniappTransaction(QueryChainMiniappTransactionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainMiniappTransactionEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链小程序交易查询
         * Summary: 阿里云区块链小程序交易查询
         */
        public async Task<QueryChainMiniappTransactionResponse> QueryChainMiniappTransactionAsync(QueryChainMiniappTransactionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainMiniappTransactionExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链小程序交易查询
         * Summary: 阿里云区块链小程序交易查询
         */
        public QueryChainMiniappTransactionResponse QueryChainMiniappTransactionEx(QueryChainMiniappTransactionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainMiniappTransactionResponse>(DoRequest("1.0", "baas.chain.miniapp.transaction.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链小程序交易查询
         * Summary: 阿里云区块链小程序交易查询
         */
        public async Task<QueryChainMiniappTransactionResponse> QueryChainMiniappTransactionExAsync(QueryChainMiniappTransactionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainMiniappTransactionResponse>(await DoRequestAsync("1.0", "baas.chain.miniapp.transaction.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链小程序交易查询的记录
         * Summary: 阿里云区块链小程序交易查询的记录
         */
        public QueryChainMiniappLogResponse QueryChainMiniappLog(QueryChainMiniappLogRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainMiniappLogEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链小程序交易查询的记录
         * Summary: 阿里云区块链小程序交易查询的记录
         */
        public async Task<QueryChainMiniappLogResponse> QueryChainMiniappLogAsync(QueryChainMiniappLogRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainMiniappLogExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云区块链小程序交易查询的记录
         * Summary: 阿里云区块链小程序交易查询的记录
         */
        public QueryChainMiniappLogResponse QueryChainMiniappLogEx(QueryChainMiniappLogRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainMiniappLogResponse>(DoRequest("1.0", "baas.chain.miniapp.log.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云区块链小程序交易查询的记录
         * Summary: 阿里云区块链小程序交易查询的记录
         */
        public async Task<QueryChainMiniappLogResponse> QueryChainMiniappLogExAsync(QueryChainMiniappLogRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainMiniappLogResponse>(await DoRequestAsync("1.0", "baas.chain.miniapp.log.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云生成小程序二维码
         * Summary: 阿里云生成小程序二维码
         */
        public CreateChainMiniappCodeResponse CreateChainMiniappCode(CreateChainMiniappCodeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateChainMiniappCodeEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云生成小程序二维码
         * Summary: 阿里云生成小程序二维码
         */
        public async Task<CreateChainMiniappCodeResponse> CreateChainMiniappCodeAsync(CreateChainMiniappCodeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateChainMiniappCodeExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云生成小程序二维码
         * Summary: 阿里云生成小程序二维码
         */
        public CreateChainMiniappCodeResponse CreateChainMiniappCodeEx(CreateChainMiniappCodeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateChainMiniappCodeResponse>(DoRequest("1.0", "baas.chain.miniapp.code.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云生成小程序二维码
         * Summary: 阿里云生成小程序二维码
         */
        public async Task<CreateChainMiniappCodeResponse> CreateChainMiniappCodeExAsync(CreateChainMiniappCodeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateChainMiniappCodeResponse>(await DoRequestAsync("1.0", "baas.chain.miniapp.code.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云售卖页联盟信息查询
         * Summary: 阿里云售卖页联盟信息查询
         */
        public QueryUnionBuyResponse QueryUnionBuy(QueryUnionBuyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryUnionBuyEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云售卖页联盟信息查询
         * Summary: 阿里云售卖页联盟信息查询
         */
        public async Task<QueryUnionBuyResponse> QueryUnionBuyAsync(QueryUnionBuyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryUnionBuyExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云售卖页联盟信息查询
         * Summary: 阿里云售卖页联盟信息查询
         */
        public QueryUnionBuyResponse QueryUnionBuyEx(QueryUnionBuyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryUnionBuyResponse>(DoRequest("1.0", "baas.union.buy.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云售卖页联盟信息查询
         * Summary: 阿里云售卖页联盟信息查询
         */
        public async Task<QueryUnionBuyResponse> QueryUnionBuyExAsync(QueryUnionBuyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryUnionBuyResponse>(await DoRequestAsync("1.0", "baas.union.buy.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云国内站免费体验链Rest查询
         * Summary: 阿里云国内站免费体验链Rest查询
         */
        public QueryChainPublicRestResponse QueryChainPublicRest(QueryChainPublicRestRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainPublicRestEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云国内站免费体验链Rest查询
         * Summary: 阿里云国内站免费体验链Rest查询
         */
        public async Task<QueryChainPublicRestResponse> QueryChainPublicRestAsync(QueryChainPublicRestRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainPublicRestExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云国内站免费体验链Rest查询
         * Summary: 阿里云国内站免费体验链Rest查询
         */
        public QueryChainPublicRestResponse QueryChainPublicRestEx(QueryChainPublicRestRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainPublicRestResponse>(DoRequest("1.0", "baas.chain.public.rest.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云国内站免费体验链Rest查询
         * Summary: 阿里云国内站免费体验链Rest查询
         */
        public async Task<QueryChainPublicRestResponse> QueryChainPublicRestExAsync(QueryChainPublicRestRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainPublicRestResponse>(await DoRequestAsync("1.0", "baas.chain.public.rest.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云国内站免费体验链申请Rest
         * Summary: 阿里云国内站免费体验链申请Rest
         */
        public ApplyChainPublicRestResponse ApplyChainPublicRest(ApplyChainPublicRestRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ApplyChainPublicRestEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云国内站免费体验链申请Rest
         * Summary: 阿里云国内站免费体验链申请Rest
         */
        public async Task<ApplyChainPublicRestResponse> ApplyChainPublicRestAsync(ApplyChainPublicRestRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ApplyChainPublicRestExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云国内站免费体验链申请Rest
         * Summary: 阿里云国内站免费体验链申请Rest
         */
        public ApplyChainPublicRestResponse ApplyChainPublicRestEx(ApplyChainPublicRestRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyChainPublicRestResponse>(DoRequest("1.0", "baas.chain.public.rest.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云国内站免费体验链申请Rest
         * Summary: 阿里云国内站免费体验链申请Rest
         */
        public async Task<ApplyChainPublicRestResponse> ApplyChainPublicRestExAsync(ApplyChainPublicRestRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyChainPublicRestResponse>(await DoRequestAsync("1.0", "baas.chain.public.rest.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云国内站重置Rest
         * Summary: 阿里云国内站重置Rest
         */
        public ReinitChainPublicRestResponse ReinitChainPublicRest(ReinitChainPublicRestRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ReinitChainPublicRestEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云国内站重置Rest
         * Summary: 阿里云国内站重置Rest
         */
        public async Task<ReinitChainPublicRestResponse> ReinitChainPublicRestAsync(ReinitChainPublicRestRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ReinitChainPublicRestExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云国内站重置Rest
         * Summary: 阿里云国内站重置Rest
         */
        public ReinitChainPublicRestResponse ReinitChainPublicRestEx(ReinitChainPublicRestRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ReinitChainPublicRestResponse>(DoRequest("1.0", "baas.chain.public.rest.reinit", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云国内站重置Rest
         * Summary: 阿里云国内站重置Rest
         */
        public async Task<ReinitChainPublicRestResponse> ReinitChainPublicRestExAsync(ReinitChainPublicRestRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ReinitChainPublicRestResponse>(await DoRequestAsync("1.0", "baas.chain.public.rest.reinit", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云国内站区块链rest查询
         * Summary: 阿里云国内站区块链rest查询
         */
        public QueryChainRestAntResponse QueryChainRestAnt(QueryChainRestAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainRestAntEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云国内站区块链rest查询
         * Summary: 阿里云国内站区块链rest查询
         */
        public async Task<QueryChainRestAntResponse> QueryChainRestAntAsync(QueryChainRestAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainRestAntExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云国内站区块链rest查询
         * Summary: 阿里云国内站区块链rest查询
         */
        public QueryChainRestAntResponse QueryChainRestAntEx(QueryChainRestAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainRestAntResponse>(DoRequest("1.0", "baas.chain.rest.ant.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云国内站区块链rest查询
         * Summary: 阿里云国内站区块链rest查询
         */
        public async Task<QueryChainRestAntResponse> QueryChainRestAntExAsync(QueryChainRestAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainRestAntResponse>(await DoRequestAsync("1.0", "baas.chain.rest.ant.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云国内站区块链rest申请
         * Summary: 阿里云国内站区块链rest申请
         */
        public ApplyChainRestAntResponse ApplyChainRestAnt(ApplyChainRestAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ApplyChainRestAntEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云国内站区块链rest申请
         * Summary: 阿里云国内站区块链rest申请
         */
        public async Task<ApplyChainRestAntResponse> ApplyChainRestAntAsync(ApplyChainRestAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ApplyChainRestAntExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云国内站区块链rest申请
         * Summary: 阿里云国内站区块链rest申请
         */
        public ApplyChainRestAntResponse ApplyChainRestAntEx(ApplyChainRestAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyChainRestAntResponse>(DoRequest("1.0", "baas.chain.rest.ant.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云国内站区块链rest申请
         * Summary: 阿里云国内站区块链rest申请
         */
        public async Task<ApplyChainRestAntResponse> ApplyChainRestAntExAsync(ApplyChainRestAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyChainRestAntResponse>(await DoRequestAsync("1.0", "baas.chain.rest.ant.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云国内站区块链重置Rest
         * Summary: 阿里云国内站区块链重置Rest
         */
        public ReinitChainRestAntResponse ReinitChainRestAnt(ReinitChainRestAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ReinitChainRestAntEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云国内站区块链重置Rest
         * Summary: 阿里云国内站区块链重置Rest
         */
        public async Task<ReinitChainRestAntResponse> ReinitChainRestAntAsync(ReinitChainRestAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ReinitChainRestAntExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云国内站区块链重置Rest
         * Summary: 阿里云国内站区块链重置Rest
         */
        public ReinitChainRestAntResponse ReinitChainRestAntEx(ReinitChainRestAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ReinitChainRestAntResponse>(DoRequest("1.0", "baas.chain.rest.ant.reinit", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云国内站区块链重置Rest
         * Summary: 阿里云国内站区块链重置Rest
         */
        public async Task<ReinitChainRestAntResponse> ReinitChainRestAntExAsync(ReinitChainRestAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ReinitChainRestAntResponse>(await DoRequestAsync("1.0", "baas.chain.rest.ant.reinit", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云国内站公共链重置rest发送验证码
         * Summary: 阿里云国内站公共链重置rest发送验证码
         */
        public SendChainPublicRestResponse SendChainPublicRest(SendChainPublicRestRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SendChainPublicRestEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云国内站公共链重置rest发送验证码
         * Summary: 阿里云国内站公共链重置rest发送验证码
         */
        public async Task<SendChainPublicRestResponse> SendChainPublicRestAsync(SendChainPublicRestRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SendChainPublicRestExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云国内站公共链重置rest发送验证码
         * Summary: 阿里云国内站公共链重置rest发送验证码
         */
        public SendChainPublicRestResponse SendChainPublicRestEx(SendChainPublicRestRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SendChainPublicRestResponse>(DoRequest("1.0", "baas.chain.public.rest.send", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云国内站公共链重置rest发送验证码
         * Summary: 阿里云国内站公共链重置rest发送验证码
         */
        public async Task<SendChainPublicRestResponse> SendChainPublicRestExAsync(SendChainPublicRestRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SendChainPublicRestResponse>(await DoRequestAsync("1.0", "baas.chain.public.rest.send", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云国内站区块链重置rest发送验证码
         * Summary: 阿里云国内站区块链重置rest发送验证码
         */
        public SendChainRestAntResponse SendChainRestAnt(SendChainRestAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SendChainRestAntEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云国内站区块链重置rest发送验证码
         * Summary: 阿里云国内站区块链重置rest发送验证码
         */
        public async Task<SendChainRestAntResponse> SendChainRestAntAsync(SendChainRestAntRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SendChainRestAntExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云国内站区块链重置rest发送验证码
         * Summary: 阿里云国内站区块链重置rest发送验证码
         */
        public SendChainRestAntResponse SendChainRestAntEx(SendChainRestAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SendChainRestAntResponse>(DoRequest("1.0", "baas.chain.rest.ant.send", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云国内站区块链重置rest发送验证码
         * Summary: 阿里云国内站区块链重置rest发送验证码
         */
        public async Task<SendChainRestAntResponse> SendChainRestAntExAsync(SendChainRestAntRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SendChainRestAntResponse>(await DoRequestAsync("1.0", "baas.chain.rest.ant.send", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链列表查询
         * Summary: 阿里云子链列表查询
         */
        public QueryChainSubnetResponse QueryChainSubnet(QueryChainSubnetRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainSubnetEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链列表查询
         * Summary: 阿里云子链列表查询
         */
        public async Task<QueryChainSubnetResponse> QueryChainSubnetAsync(QueryChainSubnetRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainSubnetExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链列表查询
         * Summary: 阿里云子链列表查询
         */
        public QueryChainSubnetResponse QueryChainSubnetEx(QueryChainSubnetRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainSubnetResponse>(DoRequest("1.0", "baas.chain.subnet.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链列表查询
         * Summary: 阿里云子链列表查询
         */
        public async Task<QueryChainSubnetResponse> QueryChainSubnetExAsync(QueryChainSubnetRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainSubnetResponse>(await DoRequestAsync("1.0", "baas.chain.subnet.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链创建的前置检查
         * Summary: 阿里云子链创建的前置检查
         */
        public CheckChainSubnetCreateResponse CheckChainSubnetCreate(CheckChainSubnetCreateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CheckChainSubnetCreateEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链创建的前置检查
         * Summary: 阿里云子链创建的前置检查
         */
        public async Task<CheckChainSubnetCreateResponse> CheckChainSubnetCreateAsync(CheckChainSubnetCreateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CheckChainSubnetCreateExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链创建的前置检查
         * Summary: 阿里云子链创建的前置检查
         */
        public CheckChainSubnetCreateResponse CheckChainSubnetCreateEx(CheckChainSubnetCreateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CheckChainSubnetCreateResponse>(DoRequest("1.0", "baas.chain.subnet.create.check", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链创建的前置检查
         * Summary: 阿里云子链创建的前置检查
         */
        public async Task<CheckChainSubnetCreateResponse> CheckChainSubnetCreateExAsync(CheckChainSubnetCreateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CheckChainSubnetCreateResponse>(await DoRequestAsync("1.0", "baas.chain.subnet.create.check", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链创建
         * Summary: 阿里云子链创建
         */
        public CreateChainSubnetResponse CreateChainSubnet(CreateChainSubnetRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateChainSubnetEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链创建
         * Summary: 阿里云子链创建
         */
        public async Task<CreateChainSubnetResponse> CreateChainSubnetAsync(CreateChainSubnetRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateChainSubnetExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链创建
         * Summary: 阿里云子链创建
         */
        public CreateChainSubnetResponse CreateChainSubnetEx(CreateChainSubnetRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateChainSubnetResponse>(DoRequest("1.0", "baas.chain.subnet.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链创建
         * Summary: 阿里云子链创建
         */
        public async Task<CreateChainSubnetResponse> CreateChainSubnetExAsync(CreateChainSubnetRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateChainSubnetResponse>(await DoRequestAsync("1.0", "baas.chain.subnet.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链的启动
         * Summary: 阿里云子链的启动
         */
        public ExecChainSubnetResponse ExecChainSubnet(ExecChainSubnetRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ExecChainSubnetEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链的启动
         * Summary: 阿里云子链的启动
         */
        public async Task<ExecChainSubnetResponse> ExecChainSubnetAsync(ExecChainSubnetRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ExecChainSubnetExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链的启动
         * Summary: 阿里云子链的启动
         */
        public ExecChainSubnetResponse ExecChainSubnetEx(ExecChainSubnetRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecChainSubnetResponse>(DoRequest("1.0", "baas.chain.subnet.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链的启动
         * Summary: 阿里云子链的启动
         */
        public async Task<ExecChainSubnetResponse> ExecChainSubnetExAsync(ExecChainSubnetRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecChainSubnetResponse>(await DoRequestAsync("1.0", "baas.chain.subnet.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链名称修改
         * Summary: 阿里云子链名称修改
         */
        public UpdateChainSubnetNameResponse UpdateChainSubnetName(UpdateChainSubnetNameRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateChainSubnetNameEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链名称修改
         * Summary: 阿里云子链名称修改
         */
        public async Task<UpdateChainSubnetNameResponse> UpdateChainSubnetNameAsync(UpdateChainSubnetNameRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateChainSubnetNameExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链名称修改
         * Summary: 阿里云子链名称修改
         */
        public UpdateChainSubnetNameResponse UpdateChainSubnetNameEx(UpdateChainSubnetNameRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateChainSubnetNameResponse>(DoRequest("1.0", "baas.chain.subnet.name.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链名称修改
         * Summary: 阿里云子链名称修改
         */
        public async Task<UpdateChainSubnetNameResponse> UpdateChainSubnetNameExAsync(UpdateChainSubnetNameRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateChainSubnetNameResponse>(await DoRequestAsync("1.0", "baas.chain.subnet.name.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链节点信息查询
         * Summary: 阿里云子链节点信息查询
         */
        public QueryChainSubnetNodeResponse QueryChainSubnetNode(QueryChainSubnetNodeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainSubnetNodeEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链节点信息查询
         * Summary: 阿里云子链节点信息查询
         */
        public async Task<QueryChainSubnetNodeResponse> QueryChainSubnetNodeAsync(QueryChainSubnetNodeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainSubnetNodeExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链节点信息查询
         * Summary: 阿里云子链节点信息查询
         */
        public QueryChainSubnetNodeResponse QueryChainSubnetNodeEx(QueryChainSubnetNodeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainSubnetNodeResponse>(DoRequest("1.0", "baas.chain.subnet.node.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链节点信息查询
         * Summary: 阿里云子链节点信息查询
         */
        public async Task<QueryChainSubnetNodeResponse> QueryChainSubnetNodeExAsync(QueryChainSubnetNodeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainSubnetNodeResponse>(await DoRequestAsync("1.0", "baas.chain.subnet.node.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链的节点删除
         * Summary: 阿里云子链的节点删除
         */
        public DeleteChainSubnetNodeResponse DeleteChainSubnetNode(DeleteChainSubnetNodeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return DeleteChainSubnetNodeEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链的节点删除
         * Summary: 阿里云子链的节点删除
         */
        public async Task<DeleteChainSubnetNodeResponse> DeleteChainSubnetNodeAsync(DeleteChainSubnetNodeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await DeleteChainSubnetNodeExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链的节点删除
         * Summary: 阿里云子链的节点删除
         */
        public DeleteChainSubnetNodeResponse DeleteChainSubnetNodeEx(DeleteChainSubnetNodeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteChainSubnetNodeResponse>(DoRequest("1.0", "baas.chain.subnet.node.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链的节点删除
         * Summary: 阿里云子链的节点删除
         */
        public async Task<DeleteChainSubnetNodeResponse> DeleteChainSubnetNodeExAsync(DeleteChainSubnetNodeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteChainSubnetNodeResponse>(await DoRequestAsync("1.0", "baas.chain.subnet.node.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链节点添加的前置检查
         * Summary: 阿里云子链节点添加的前置检查
         */
        public CheckChainSubnetNodeResponse CheckChainSubnetNode(CheckChainSubnetNodeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CheckChainSubnetNodeEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链节点添加的前置检查
         * Summary: 阿里云子链节点添加的前置检查
         */
        public async Task<CheckChainSubnetNodeResponse> CheckChainSubnetNodeAsync(CheckChainSubnetNodeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CheckChainSubnetNodeExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链节点添加的前置检查
         * Summary: 阿里云子链节点添加的前置检查
         */
        public CheckChainSubnetNodeResponse CheckChainSubnetNodeEx(CheckChainSubnetNodeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CheckChainSubnetNodeResponse>(DoRequest("1.0", "baas.chain.subnet.node.check", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链节点添加的前置检查
         * Summary: 阿里云子链节点添加的前置检查
         */
        public async Task<CheckChainSubnetNodeResponse> CheckChainSubnetNodeExAsync(CheckChainSubnetNodeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CheckChainSubnetNodeResponse>(await DoRequestAsync("1.0", "baas.chain.subnet.node.check", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链节点添加
         * Summary: 阿里云子链节点添加
         */
        public AddChainSubnetNodeResponse AddChainSubnetNode(AddChainSubnetNodeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return AddChainSubnetNodeEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链节点添加
         * Summary: 阿里云子链节点添加
         */
        public async Task<AddChainSubnetNodeResponse> AddChainSubnetNodeAsync(AddChainSubnetNodeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await AddChainSubnetNodeExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链节点添加
         * Summary: 阿里云子链节点添加
         */
        public AddChainSubnetNodeResponse AddChainSubnetNodeEx(AddChainSubnetNodeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<AddChainSubnetNodeResponse>(DoRequest("1.0", "baas.chain.subnet.node.add", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链节点添加
         * Summary: 阿里云子链节点添加
         */
        public async Task<AddChainSubnetNodeResponse> AddChainSubnetNodeExAsync(AddChainSubnetNodeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<AddChainSubnetNodeResponse>(await DoRequestAsync("1.0", "baas.chain.subnet.node.add", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链机构列表查询
         * Summary: 阿里云子链机构列表查询
         */
        public QueryChainSubnetMemberResponse QueryChainSubnetMember(QueryChainSubnetMemberRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainSubnetMemberEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链机构列表查询
         * Summary: 阿里云子链机构列表查询
         */
        public async Task<QueryChainSubnetMemberResponse> QueryChainSubnetMemberAsync(QueryChainSubnetMemberRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainSubnetMemberExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链机构列表查询
         * Summary: 阿里云子链机构列表查询
         */
        public QueryChainSubnetMemberResponse QueryChainSubnetMemberEx(QueryChainSubnetMemberRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainSubnetMemberResponse>(DoRequest("1.0", "baas.chain.subnet.member.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链机构列表查询
         * Summary: 阿里云子链机构列表查询
         */
        public async Task<QueryChainSubnetMemberResponse> QueryChainSubnetMemberExAsync(QueryChainSubnetMemberRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainSubnetMemberResponse>(await DoRequestAsync("1.0", "baas.chain.subnet.member.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链成员删除
         * Summary: 阿里云子链成员删除
         */
        public DeleteChainSubnetMemberResponse DeleteChainSubnetMember(DeleteChainSubnetMemberRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return DeleteChainSubnetMemberEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链成员删除
         * Summary: 阿里云子链成员删除
         */
        public async Task<DeleteChainSubnetMemberResponse> DeleteChainSubnetMemberAsync(DeleteChainSubnetMemberRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await DeleteChainSubnetMemberExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链成员删除
         * Summary: 阿里云子链成员删除
         */
        public DeleteChainSubnetMemberResponse DeleteChainSubnetMemberEx(DeleteChainSubnetMemberRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteChainSubnetMemberResponse>(DoRequest("1.0", "baas.chain.subnet.member.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链成员删除
         * Summary: 阿里云子链成员删除
         */
        public async Task<DeleteChainSubnetMemberResponse> DeleteChainSubnetMemberExAsync(DeleteChainSubnetMemberRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteChainSubnetMemberResponse>(await DoRequestAsync("1.0", "baas.chain.subnet.member.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链成员添加前校验
         * Summary: 阿里云子链成员添加前校验
         */
        public CheckChainSubnetMemberResponse CheckChainSubnetMember(CheckChainSubnetMemberRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CheckChainSubnetMemberEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链成员添加前校验
         * Summary: 阿里云子链成员添加前校验
         */
        public async Task<CheckChainSubnetMemberResponse> CheckChainSubnetMemberAsync(CheckChainSubnetMemberRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CheckChainSubnetMemberExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链成员添加前校验
         * Summary: 阿里云子链成员添加前校验
         */
        public CheckChainSubnetMemberResponse CheckChainSubnetMemberEx(CheckChainSubnetMemberRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CheckChainSubnetMemberResponse>(DoRequest("1.0", "baas.chain.subnet.member.check", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链成员添加前校验
         * Summary: 阿里云子链成员添加前校验
         */
        public async Task<CheckChainSubnetMemberResponse> CheckChainSubnetMemberExAsync(CheckChainSubnetMemberRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CheckChainSubnetMemberResponse>(await DoRequestAsync("1.0", "baas.chain.subnet.member.check", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链成员添加
         * Summary: 阿里云子链成员添加
         */
        public AddChainSubnetMemberResponse AddChainSubnetMember(AddChainSubnetMemberRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return AddChainSubnetMemberEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链成员添加
         * Summary: 阿里云子链成员添加
         */
        public async Task<AddChainSubnetMemberResponse> AddChainSubnetMemberAsync(AddChainSubnetMemberRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await AddChainSubnetMemberExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链成员添加
         * Summary: 阿里云子链成员添加
         */
        public AddChainSubnetMemberResponse AddChainSubnetMemberEx(AddChainSubnetMemberRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<AddChainSubnetMemberResponse>(DoRequest("1.0", "baas.chain.subnet.member.add", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链成员添加
         * Summary: 阿里云子链成员添加
         */
        public async Task<AddChainSubnetMemberResponse> AddChainSubnetMemberExAsync(AddChainSubnetMemberRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<AddChainSubnetMemberResponse>(await DoRequestAsync("1.0", "baas.chain.subnet.member.add", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链REST开通
         * Summary: 阿里云子链REST开通
         */
        public ApplyChainSubnetRestResponse ApplyChainSubnetRest(ApplyChainSubnetRestRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ApplyChainSubnetRestEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链REST开通
         * Summary: 阿里云子链REST开通
         */
        public async Task<ApplyChainSubnetRestResponse> ApplyChainSubnetRestAsync(ApplyChainSubnetRestRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ApplyChainSubnetRestExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云子链REST开通
         * Summary: 阿里云子链REST开通
         */
        public ApplyChainSubnetRestResponse ApplyChainSubnetRestEx(ApplyChainSubnetRestRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyChainSubnetRestResponse>(DoRequest("1.0", "baas.chain.subnet.rest.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云子链REST开通
         * Summary: 阿里云子链REST开通
         */
        public async Task<ApplyChainSubnetRestResponse> ApplyChainSubnetRestExAsync(ApplyChainSubnetRestRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyChainSubnetRestResponse>(await DoRequestAsync("1.0", "baas.chain.subnet.rest.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云数据导出任务查询
         * Summary: 阿里云数据导出任务查询
         */
        public QueryChainDataexportTaskResponse QueryChainDataexportTask(QueryChainDataexportTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainDataexportTaskEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云数据导出任务查询
         * Summary: 阿里云数据导出任务查询
         */
        public async Task<QueryChainDataexportTaskResponse> QueryChainDataexportTaskAsync(QueryChainDataexportTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainDataexportTaskExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云数据导出任务查询
         * Summary: 阿里云数据导出任务查询
         */
        public QueryChainDataexportTaskResponse QueryChainDataexportTaskEx(QueryChainDataexportTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainDataexportTaskResponse>(DoRequest("1.0", "baas.chain.dataexport.task.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云数据导出任务查询
         * Summary: 阿里云数据导出任务查询
         */
        public async Task<QueryChainDataexportTaskResponse> QueryChainDataexportTaskExAsync(QueryChainDataexportTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainDataexportTaskResponse>(await DoRequestAsync("1.0", "baas.chain.dataexport.task.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云数据导出服务，列出所有导出任务功能接口
         * Summary: 列出所有导出任务接口
         */
        public QueryChainDataExportResponse QueryChainDataExport(QueryChainDataExportRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainDataExportEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云数据导出服务，列出所有导出任务功能接口
         * Summary: 列出所有导出任务接口
         */
        public async Task<QueryChainDataExportResponse> QueryChainDataExportAsync(QueryChainDataExportRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainDataExportExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云数据导出服务，列出所有导出任务功能接口
         * Summary: 列出所有导出任务接口
         */
        public QueryChainDataExportResponse QueryChainDataExportEx(QueryChainDataExportRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainDataExportResponse>(DoRequest("1.0", "baas.chain.data.export.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云数据导出服务，列出所有导出任务功能接口
         * Summary: 列出所有导出任务接口
         */
        public async Task<QueryChainDataExportResponse> QueryChainDataExportExAsync(QueryChainDataExportRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainDataExportResponse>(await DoRequestAsync("1.0", "baas.chain.data.export.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云数据导出需求创建数据导出任务
         * Summary: 创建数据导出任务
         */
        public CreateChainDataexportTaskResponse CreateChainDataexportTask(CreateChainDataexportTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateChainDataexportTaskEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云数据导出需求创建数据导出任务
         * Summary: 创建数据导出任务
         */
        public async Task<CreateChainDataexportTaskResponse> CreateChainDataexportTaskAsync(CreateChainDataexportTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateChainDataexportTaskExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云数据导出需求创建数据导出任务
         * Summary: 创建数据导出任务
         */
        public CreateChainDataexportTaskResponse CreateChainDataexportTaskEx(CreateChainDataexportTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateChainDataexportTaskResponse>(DoRequest("1.0", "baas.chain.dataexport.task.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云数据导出需求创建数据导出任务
         * Summary: 创建数据导出任务
         */
        public async Task<CreateChainDataexportTaskResponse> CreateChainDataexportTaskExAsync(CreateChainDataexportTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateChainDataexportTaskResponse>(await DoRequestAsync("1.0", "baas.chain.dataexport.task.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取预览数据（第一步：生成任务ID）
         * Summary: 获取预览数据（第一步：生成任务ID）
         */
        public CreateChainTaskIdResponse CreateChainTaskId(CreateChainTaskIdRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateChainTaskIdEx(request, headers, runtime);
        }

        /**
         * Description: 获取预览数据（第一步：生成任务ID）
         * Summary: 获取预览数据（第一步：生成任务ID）
         */
        public async Task<CreateChainTaskIdResponse> CreateChainTaskIdAsync(CreateChainTaskIdRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateChainTaskIdExAsync(request, headers, runtime);
        }

        /**
         * Description: 获取预览数据（第一步：生成任务ID）
         * Summary: 获取预览数据（第一步：生成任务ID）
         */
        public CreateChainTaskIdResponse CreateChainTaskIdEx(CreateChainTaskIdRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateChainTaskIdResponse>(DoRequest("1.0", "baas.chain.task.id.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取预览数据（第一步：生成任务ID）
         * Summary: 获取预览数据（第一步：生成任务ID）
         */
        public async Task<CreateChainTaskIdResponse> CreateChainTaskIdExAsync(CreateChainTaskIdRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateChainTaskIdResponse>(await DoRequestAsync("1.0", "baas.chain.task.id.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取预览数据（第二步：根据任务ID获取预览数据结果）
         * Summary: 根据任务ID获取预览数据结果
         */
        public QueryChainDataPreviewResponse QueryChainDataPreview(QueryChainDataPreviewRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainDataPreviewEx(request, headers, runtime);
        }

        /**
         * Description: 获取预览数据（第二步：根据任务ID获取预览数据结果）
         * Summary: 根据任务ID获取预览数据结果
         */
        public async Task<QueryChainDataPreviewResponse> QueryChainDataPreviewAsync(QueryChainDataPreviewRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainDataPreviewExAsync(request, headers, runtime);
        }

        /**
         * Description: 获取预览数据（第二步：根据任务ID获取预览数据结果）
         * Summary: 根据任务ID获取预览数据结果
         */
        public QueryChainDataPreviewResponse QueryChainDataPreviewEx(QueryChainDataPreviewRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainDataPreviewResponse>(DoRequest("1.0", "baas.chain.data.preview.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取预览数据（第二步：根据任务ID获取预览数据结果）
         * Summary: 根据任务ID获取预览数据结果
         */
        public async Task<QueryChainDataPreviewResponse> QueryChainDataPreviewExAsync(QueryChainDataPreviewRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainDataPreviewResponse>(await DoRequestAsync("1.0", "baas.chain.data.preview.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 根据预览数据获取默认映射关系
         * Summary: 根据预览数据获取默认映射关系
         */
        public QueryChainMappingRelationshipResponse QueryChainMappingRelationship(QueryChainMappingRelationshipRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainMappingRelationshipEx(request, headers, runtime);
        }

        /**
         * Description: 根据预览数据获取默认映射关系
         * Summary: 根据预览数据获取默认映射关系
         */
        public async Task<QueryChainMappingRelationshipResponse> QueryChainMappingRelationshipAsync(QueryChainMappingRelationshipRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainMappingRelationshipExAsync(request, headers, runtime);
        }

        /**
         * Description: 根据预览数据获取默认映射关系
         * Summary: 根据预览数据获取默认映射关系
         */
        public QueryChainMappingRelationshipResponse QueryChainMappingRelationshipEx(QueryChainMappingRelationshipRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainMappingRelationshipResponse>(DoRequest("1.0", "baas.chain.mapping.relationship.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 根据预览数据获取默认映射关系
         * Summary: 根据预览数据获取默认映射关系
         */
        public async Task<QueryChainMappingRelationshipResponse> QueryChainMappingRelationshipExAsync(QueryChainMappingRelationshipRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainMappingRelationshipResponse>(await DoRequestAsync("1.0", "baas.chain.mapping.relationship.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建导出MySQL任务失败，获取 Create Table 语句
         * Summary: 获取 Create Table 语句
         */
        public CreateChainTableSqlResponse CreateChainTableSql(CreateChainTableSqlRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateChainTableSqlEx(request, headers, runtime);
        }

        /**
         * Description: 创建导出MySQL任务失败，获取 Create Table 语句
         * Summary: 获取 Create Table 语句
         */
        public async Task<CreateChainTableSqlResponse> CreateChainTableSqlAsync(CreateChainTableSqlRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateChainTableSqlExAsync(request, headers, runtime);
        }

        /**
         * Description: 创建导出MySQL任务失败，获取 Create Table 语句
         * Summary: 获取 Create Table 语句
         */
        public CreateChainTableSqlResponse CreateChainTableSqlEx(CreateChainTableSqlRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateChainTableSqlResponse>(DoRequest("1.0", "baas.chain.table.sql.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建导出MySQL任务失败，获取 Create Table 语句
         * Summary: 获取 Create Table 语句
         */
        public async Task<CreateChainTableSqlResponse> CreateChainTableSqlExAsync(CreateChainTableSqlRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateChainTableSqlResponse>(await DoRequestAsync("1.0", "baas.chain.table.sql.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 修改导出任务状态（启动、暂停、删除）
         * Summary: 修改导出任务状态（启动、暂停、删除）
         */
        public UpdateChainDataexportStatusResponse UpdateChainDataexportStatus(UpdateChainDataexportStatusRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateChainDataexportStatusEx(request, headers, runtime);
        }

        /**
         * Description: 修改导出任务状态（启动、暂停、删除）
         * Summary: 修改导出任务状态（启动、暂停、删除）
         */
        public async Task<UpdateChainDataexportStatusResponse> UpdateChainDataexportStatusAsync(UpdateChainDataexportStatusRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateChainDataexportStatusExAsync(request, headers, runtime);
        }

        /**
         * Description: 修改导出任务状态（启动、暂停、删除）
         * Summary: 修改导出任务状态（启动、暂停、删除）
         */
        public UpdateChainDataexportStatusResponse UpdateChainDataexportStatusEx(UpdateChainDataexportStatusRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateChainDataexportStatusResponse>(DoRequest("1.0", "baas.chain.dataexport.status.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 修改导出任务状态（启动、暂停、删除）
         * Summary: 修改导出任务状态（启动、暂停、删除）
         */
        public async Task<UpdateChainDataexportStatusResponse> UpdateChainDataexportStatusExAsync(UpdateChainDataexportStatusRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateChainDataexportStatusResponse>(await DoRequestAsync("1.0", "baas.chain.dataexport.status.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 修改导出任务（名称、描述、告警地址）
         * Summary: 修改导出任务（名称、描述、告警地址）
         */
        public UpdateChainDataexportTaskResponse UpdateChainDataexportTask(UpdateChainDataexportTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateChainDataexportTaskEx(request, headers, runtime);
        }

        /**
         * Description: 修改导出任务（名称、描述、告警地址）
         * Summary: 修改导出任务（名称、描述、告警地址）
         */
        public async Task<UpdateChainDataexportTaskResponse> UpdateChainDataexportTaskAsync(UpdateChainDataexportTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateChainDataexportTaskExAsync(request, headers, runtime);
        }

        /**
         * Description: 修改导出任务（名称、描述、告警地址）
         * Summary: 修改导出任务（名称、描述、告警地址）
         */
        public UpdateChainDataexportTaskResponse UpdateChainDataexportTaskEx(UpdateChainDataexportTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateChainDataexportTaskResponse>(DoRequest("1.0", "baas.chain.dataexport.task.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 修改导出任务（名称、描述、告警地址）
         * Summary: 修改导出任务（名称、描述、告警地址）
         */
        public async Task<UpdateChainDataexportTaskResponse> UpdateChainDataexportTaskExAsync(UpdateChainDataexportTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateChainDataexportTaskResponse>(await DoRequestAsync("1.0", "baas.chain.dataexport.task.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 分页失败的展示日志（过滤器：待处理、成功、已忽略）
         * Summary: 分页失败的展示日志
         */
        public QueryChainFailureLogResponse QueryChainFailureLog(QueryChainFailureLogRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainFailureLogEx(request, headers, runtime);
        }

        /**
         * Description: 分页失败的展示日志（过滤器：待处理、成功、已忽略）
         * Summary: 分页失败的展示日志
         */
        public async Task<QueryChainFailureLogResponse> QueryChainFailureLogAsync(QueryChainFailureLogRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainFailureLogExAsync(request, headers, runtime);
        }

        /**
         * Description: 分页失败的展示日志（过滤器：待处理、成功、已忽略）
         * Summary: 分页失败的展示日志
         */
        public QueryChainFailureLogResponse QueryChainFailureLogEx(QueryChainFailureLogRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainFailureLogResponse>(DoRequest("1.0", "baas.chain.failure.log.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 分页失败的展示日志（过滤器：待处理、成功、已忽略）
         * Summary: 分页失败的展示日志
         */
        public async Task<QueryChainFailureLogResponse> QueryChainFailureLogExAsync(QueryChainFailureLogRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainFailureLogResponse>(await DoRequestAsync("1.0", "baas.chain.failure.log.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 批量处理失败日志（重试/忽略）
         * Summary: 批量处理失败日志（重试/忽略）
         */
        public UpdateChainFailureLogResponse UpdateChainFailureLog(UpdateChainFailureLogRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateChainFailureLogEx(request, headers, runtime);
        }

        /**
         * Description: 批量处理失败日志（重试/忽略）
         * Summary: 批量处理失败日志（重试/忽略）
         */
        public async Task<UpdateChainFailureLogResponse> UpdateChainFailureLogAsync(UpdateChainFailureLogRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateChainFailureLogExAsync(request, headers, runtime);
        }

        /**
         * Description: 批量处理失败日志（重试/忽略）
         * Summary: 批量处理失败日志（重试/忽略）
         */
        public UpdateChainFailureLogResponse UpdateChainFailureLogEx(UpdateChainFailureLogRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateChainFailureLogResponse>(DoRequest("1.0", "baas.chain.failure.log.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 批量处理失败日志（重试/忽略）
         * Summary: 批量处理失败日志（重试/忽略）
         */
        public async Task<UpdateChainFailureLogResponse> UpdateChainFailureLogExAsync(UpdateChainFailureLogRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateChainFailureLogResponse>(await DoRequestAsync("1.0", "baas.chain.failure.log.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 列出当前用户的托管MQ实例
         * Summary: 列出当前用户的托管MQ实例
         */
        public QueryChainManagedMqResponse QueryChainManagedMq(QueryChainManagedMqRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainManagedMqEx(request, headers, runtime);
        }

        /**
         * Description: 列出当前用户的托管MQ实例
         * Summary: 列出当前用户的托管MQ实例
         */
        public async Task<QueryChainManagedMqResponse> QueryChainManagedMqAsync(QueryChainManagedMqRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainManagedMqExAsync(request, headers, runtime);
        }

        /**
         * Description: 列出当前用户的托管MQ实例
         * Summary: 列出当前用户的托管MQ实例
         */
        public QueryChainManagedMqResponse QueryChainManagedMqEx(QueryChainManagedMqRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainManagedMqResponse>(DoRequest("1.0", "baas.chain.managed.mq.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 列出当前用户的托管MQ实例
         * Summary: 列出当前用户的托管MQ实例
         */
        public async Task<QueryChainManagedMqResponse> QueryChainManagedMqExAsync(QueryChainManagedMqRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainManagedMqResponse>(await DoRequestAsync("1.0", "baas.chain.managed.mq.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 初始化托管 MQ 实例
         * Summary: 初始化托管 MQ 实例
         */
        public InitChainManagedMqResponse InitChainManagedMq(InitChainManagedMqRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return InitChainManagedMqEx(request, headers, runtime);
        }

        /**
         * Description: 初始化托管 MQ 实例
         * Summary: 初始化托管 MQ 实例
         */
        public async Task<InitChainManagedMqResponse> InitChainManagedMqAsync(InitChainManagedMqRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await InitChainManagedMqExAsync(request, headers, runtime);
        }

        /**
         * Description: 初始化托管 MQ 实例
         * Summary: 初始化托管 MQ 实例
         */
        public InitChainManagedMqResponse InitChainManagedMqEx(InitChainManagedMqRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitChainManagedMqResponse>(DoRequest("1.0", "baas.chain.managed.mq.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 初始化托管 MQ 实例
         * Summary: 初始化托管 MQ 实例
         */
        public async Task<InitChainManagedMqResponse> InitChainManagedMqExAsync(InitChainManagedMqRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitChainManagedMqResponse>(await DoRequestAsync("1.0", "baas.chain.managed.mq.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询蚂蚁链用途列表接口
         * Summary: 查询蚂蚁链用途列表
         */
        public QueryChainUseDeclarationResponse QueryChainUseDeclaration(QueryChainUseDeclarationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainUseDeclarationEx(request, headers, runtime);
        }

        /**
         * Description: 查询蚂蚁链用途列表接口
         * Summary: 查询蚂蚁链用途列表
         */
        public async Task<QueryChainUseDeclarationResponse> QueryChainUseDeclarationAsync(QueryChainUseDeclarationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainUseDeclarationExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询蚂蚁链用途列表接口
         * Summary: 查询蚂蚁链用途列表
         */
        public QueryChainUseDeclarationResponse QueryChainUseDeclarationEx(QueryChainUseDeclarationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainUseDeclarationResponse>(DoRequest("1.0", "baas.chain.use.declaration.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询蚂蚁链用途列表接口
         * Summary: 查询蚂蚁链用途列表
         */
        public async Task<QueryChainUseDeclarationResponse> QueryChainUseDeclarationExAsync(QueryChainUseDeclarationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainUseDeclarationResponse>(await DoRequestAsync("1.0", "baas.chain.use.declaration.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 选择蚂蚁链用途列表中的某项，进行提交申报接口
         * Summary: 选择蚂蚁链用途列表中的某项，进行提交申报
         */
        public ApplyChainUseDeclarationResponse ApplyChainUseDeclaration(ApplyChainUseDeclarationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ApplyChainUseDeclarationEx(request, headers, runtime);
        }

        /**
         * Description: 选择蚂蚁链用途列表中的某项，进行提交申报接口
         * Summary: 选择蚂蚁链用途列表中的某项，进行提交申报
         */
        public async Task<ApplyChainUseDeclarationResponse> ApplyChainUseDeclarationAsync(ApplyChainUseDeclarationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ApplyChainUseDeclarationExAsync(request, headers, runtime);
        }

        /**
         * Description: 选择蚂蚁链用途列表中的某项，进行提交申报接口
         * Summary: 选择蚂蚁链用途列表中的某项，进行提交申报
         */
        public ApplyChainUseDeclarationResponse ApplyChainUseDeclarationEx(ApplyChainUseDeclarationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyChainUseDeclarationResponse>(DoRequest("1.0", "baas.chain.use.declaration.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 选择蚂蚁链用途列表中的某项，进行提交申报接口
         * Summary: 选择蚂蚁链用途列表中的某项，进行提交申报
         */
        public async Task<ApplyChainUseDeclarationResponse> ApplyChainUseDeclarationExAsync(ApplyChainUseDeclarationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyChainUseDeclarationResponse>(await DoRequestAsync("1.0", "baas.chain.use.declaration.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 展示用户添加申报的记录接口
         * Summary: 展示用户添加申报的记录
         */
        public QueryChainUseListResponse QueryChainUseList(QueryChainUseListRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryChainUseListEx(request, headers, runtime);
        }

        /**
         * Description: 展示用户添加申报的记录接口
         * Summary: 展示用户添加申报的记录
         */
        public async Task<QueryChainUseListResponse> QueryChainUseListAsync(QueryChainUseListRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryChainUseListExAsync(request, headers, runtime);
        }

        /**
         * Description: 展示用户添加申报的记录接口
         * Summary: 展示用户添加申报的记录
         */
        public QueryChainUseListResponse QueryChainUseListEx(QueryChainUseListRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainUseListResponse>(DoRequest("1.0", "baas.chain.use.list.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 展示用户添加申报的记录接口
         * Summary: 展示用户添加申报的记录
         */
        public async Task<QueryChainUseListResponse> QueryChainUseListExAsync(QueryChainUseListRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryChainUseListResponse>(await DoRequestAsync("1.0", "baas.chain.use.list.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: BaaS用途申报敏感词检查接口
         * Summary: BaaS用途申报敏感词检查
         */
        public CheckChainSensitiveWordsResponse CheckChainSensitiveWords(CheckChainSensitiveWordsRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CheckChainSensitiveWordsEx(request, headers, runtime);
        }

        /**
         * Description: BaaS用途申报敏感词检查接口
         * Summary: BaaS用途申报敏感词检查
         */
        public async Task<CheckChainSensitiveWordsResponse> CheckChainSensitiveWordsAsync(CheckChainSensitiveWordsRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CheckChainSensitiveWordsExAsync(request, headers, runtime);
        }

        /**
         * Description: BaaS用途申报敏感词检查接口
         * Summary: BaaS用途申报敏感词检查
         */
        public CheckChainSensitiveWordsResponse CheckChainSensitiveWordsEx(CheckChainSensitiveWordsRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CheckChainSensitiveWordsResponse>(DoRequest("1.0", "baas.chain.sensitive.words.check", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: BaaS用途申报敏感词检查接口
         * Summary: BaaS用途申报敏感词检查
         */
        public async Task<CheckChainSensitiveWordsResponse> CheckChainSensitiveWordsExAsync(CheckChainSensitiveWordsRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CheckChainSensitiveWordsResponse>(await DoRequestAsync("1.0", "baas.chain.sensitive.words.check", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云MyChain创建托管账户
         * Summary: 阿里云MyChain创建托管账户
         */
        public CreateChainAccountAntkmsResponse CreateChainAccountAntkms(CreateChainAccountAntkmsRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateChainAccountAntkmsEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云MyChain创建托管账户
         * Summary: 阿里云MyChain创建托管账户
         */
        public async Task<CreateChainAccountAntkmsResponse> CreateChainAccountAntkmsAsync(CreateChainAccountAntkmsRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateChainAccountAntkmsExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云MyChain创建托管账户
         * Summary: 阿里云MyChain创建托管账户
         */
        public CreateChainAccountAntkmsResponse CreateChainAccountAntkmsEx(CreateChainAccountAntkmsRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateChainAccountAntkmsResponse>(DoRequest("1.0", "baas.chain.account.antkms.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云MyChain创建托管账户
         * Summary: 阿里云MyChain创建托管账户
         */
        public async Task<CreateChainAccountAntkmsResponse> CreateChainAccountAntkmsExAsync(CreateChainAccountAntkmsRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateChainAccountAntkmsResponse>(await DoRequestAsync("1.0", "baas.chain.account.antkms.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云渠道链相关商业化服务开通，后台经由ocp转发，实现计量计费
         * Summary: 阿里云渠道链相关商业化服务开通
         */
        public OpenChainServiceResponse OpenChainService(OpenChainServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return OpenChainServiceEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云渠道链相关商业化服务开通，后台经由ocp转发，实现计量计费
         * Summary: 阿里云渠道链相关商业化服务开通
         */
        public async Task<OpenChainServiceResponse> OpenChainServiceAsync(OpenChainServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await OpenChainServiceExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云渠道链相关商业化服务开通，后台经由ocp转发，实现计量计费
         * Summary: 阿里云渠道链相关商业化服务开通
         */
        public OpenChainServiceResponse OpenChainServiceEx(OpenChainServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<OpenChainServiceResponse>(DoRequest("1.0", "baas.chain.service.open", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云渠道链相关商业化服务开通，后台经由ocp转发，实现计量计费
         * Summary: 阿里云渠道链相关商业化服务开通
         */
        public async Task<OpenChainServiceResponse> OpenChainServiceExAsync(OpenChainServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<OpenChainServiceResponse>(await DoRequestAsync("1.0", "baas.chain.service.open", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云渠道链相关商业化服务开通结果查询
         * Summary: 阿里云渠道链相关商业化服务开通结果查询
         */
        public CheckChainServiceResponse CheckChainService(CheckChainServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CheckChainServiceEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云渠道链相关商业化服务开通结果查询
         * Summary: 阿里云渠道链相关商业化服务开通结果查询
         */
        public async Task<CheckChainServiceResponse> CheckChainServiceAsync(CheckChainServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CheckChainServiceExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云渠道链相关商业化服务开通结果查询
         * Summary: 阿里云渠道链相关商业化服务开通结果查询
         */
        public CheckChainServiceResponse CheckChainServiceEx(CheckChainServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CheckChainServiceResponse>(DoRequest("1.0", "baas.chain.service.check", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云渠道链相关商业化服务开通结果查询
         * Summary: 阿里云渠道链相关商业化服务开通结果查询
         */
        public async Task<CheckChainServiceResponse> CheckChainServiceExAsync(CheckChainServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CheckChainServiceResponse>(await DoRequestAsync("1.0", "baas.chain.service.check", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云渠道链相关商业化服务开通，后台经由ocp转发，实现服务关闭
         * Summary: 阿里云渠道链相关商业化服务关闭
         */
        public CloseChainServiceResponse CloseChainService(CloseChainServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CloseChainServiceEx(request, headers, runtime);
        }

        /**
         * Description: 阿里云渠道链相关商业化服务开通，后台经由ocp转发，实现服务关闭
         * Summary: 阿里云渠道链相关商业化服务关闭
         */
        public async Task<CloseChainServiceResponse> CloseChainServiceAsync(CloseChainServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CloseChainServiceExAsync(request, headers, runtime);
        }

        /**
         * Description: 阿里云渠道链相关商业化服务开通，后台经由ocp转发，实现服务关闭
         * Summary: 阿里云渠道链相关商业化服务关闭
         */
        public CloseChainServiceResponse CloseChainServiceEx(CloseChainServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CloseChainServiceResponse>(DoRequest("1.0", "baas.chain.service.close", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 阿里云渠道链相关商业化服务开通，后台经由ocp转发，实现服务关闭
         * Summary: 阿里云渠道链相关商业化服务关闭
         */
        public async Task<CloseChainServiceResponse> CloseChainServiceExAsync(CloseChainServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CloseChainServiceResponse>(await DoRequestAsync("1.0", "baas.chain.service.close", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 企业通过调用该接口准备接入反洗钱信息共享平台
         * Summary: 反洗钱信息共享平台入驻接口
         */
        public StartAmlCorporationJoinprepareResponse StartAmlCorporationJoinprepare(StartAmlCorporationJoinprepareRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartAmlCorporationJoinprepareEx(request, headers, runtime);
        }

        /**
         * Description: 企业通过调用该接口准备接入反洗钱信息共享平台
         * Summary: 反洗钱信息共享平台入驻接口
         */
        public async Task<StartAmlCorporationJoinprepareResponse> StartAmlCorporationJoinprepareAsync(StartAmlCorporationJoinprepareRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartAmlCorporationJoinprepareExAsync(request, headers, runtime);
        }

        /**
         * Description: 企业通过调用该接口准备接入反洗钱信息共享平台
         * Summary: 反洗钱信息共享平台入驻接口
         */
        public StartAmlCorporationJoinprepareResponse StartAmlCorporationJoinprepareEx(StartAmlCorporationJoinprepareRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAmlCorporationJoinprepareResponse>(DoRequest("1.0", "baas.aml.corporation.joinprepare.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 企业通过调用该接口准备接入反洗钱信息共享平台
         * Summary: 反洗钱信息共享平台入驻接口
         */
        public async Task<StartAmlCorporationJoinprepareResponse> StartAmlCorporationJoinprepareExAsync(StartAmlCorporationJoinprepareRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAmlCorporationJoinprepareResponse>(await DoRequestAsync("1.0", "baas.aml.corporation.joinprepare.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 反洗钱信息共享平台确认加盟接口，用户在准备阶段确认了平台安全性之后可以确认入驻
         * Summary: 反洗钱信息共享平台确认加盟接口
         */
        public StartAmlCorporationJoincommitResponse StartAmlCorporationJoincommit(StartAmlCorporationJoincommitRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartAmlCorporationJoincommitEx(request, headers, runtime);
        }

        /**
         * Description: 反洗钱信息共享平台确认加盟接口，用户在准备阶段确认了平台安全性之后可以确认入驻
         * Summary: 反洗钱信息共享平台确认加盟接口
         */
        public async Task<StartAmlCorporationJoincommitResponse> StartAmlCorporationJoincommitAsync(StartAmlCorporationJoincommitRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartAmlCorporationJoincommitExAsync(request, headers, runtime);
        }

        /**
         * Description: 反洗钱信息共享平台确认加盟接口，用户在准备阶段确认了平台安全性之后可以确认入驻
         * Summary: 反洗钱信息共享平台确认加盟接口
         */
        public StartAmlCorporationJoincommitResponse StartAmlCorporationJoincommitEx(StartAmlCorporationJoincommitRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAmlCorporationJoincommitResponse>(DoRequest("1.0", "baas.aml.corporation.joincommit.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 反洗钱信息共享平台确认加盟接口，用户在准备阶段确认了平台安全性之后可以确认入驻
         * Summary: 反洗钱信息共享平台确认加盟接口
         */
        public async Task<StartAmlCorporationJoincommitResponse> StartAmlCorporationJoincommitExAsync(StartAmlCorporationJoincommitRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAmlCorporationJoincommitResponse>(await DoRequestAsync("1.0", "baas.aml.corporation.joincommit.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 反洗钱系统二要素实名认证
         * Summary: 反洗钱系统二要素实名认证
         */
        public StartAmlPersonTwofactorResponse StartAmlPersonTwofactor(StartAmlPersonTwofactorRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartAmlPersonTwofactorEx(request, headers, runtime);
        }

        /**
         * Description: 反洗钱系统二要素实名认证
         * Summary: 反洗钱系统二要素实名认证
         */
        public async Task<StartAmlPersonTwofactorResponse> StartAmlPersonTwofactorAsync(StartAmlPersonTwofactorRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartAmlPersonTwofactorExAsync(request, headers, runtime);
        }

        /**
         * Description: 反洗钱系统二要素实名认证
         * Summary: 反洗钱系统二要素实名认证
         */
        public StartAmlPersonTwofactorResponse StartAmlPersonTwofactorEx(StartAmlPersonTwofactorRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAmlPersonTwofactorResponse>(DoRequest("1.0", "baas.aml.person.twofactor.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 反洗钱系统二要素实名认证
         * Summary: 反洗钱系统二要素实名认证
         */
        public async Task<StartAmlPersonTwofactorResponse> StartAmlPersonTwofactorExAsync(StartAmlPersonTwofactorRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAmlPersonTwofactorResponse>(await DoRequestAsync("1.0", "baas.aml.person.twofactor.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 简单存证
         * Summary: 简单存证
         */
        public SaveBusinessDepositResponse SaveBusinessDeposit(SaveBusinessDepositRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SaveBusinessDepositEx(request, headers, runtime);
        }

        /**
         * Description: 简单存证
         * Summary: 简单存证
         */
        public async Task<SaveBusinessDepositResponse> SaveBusinessDepositAsync(SaveBusinessDepositRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SaveBusinessDepositExAsync(request, headers, runtime);
        }

        /**
         * Description: 简单存证
         * Summary: 简单存证
         */
        public SaveBusinessDepositResponse SaveBusinessDepositEx(SaveBusinessDepositRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SaveBusinessDepositResponse>(DoRequest("1.0", "baas.business.deposit.save", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 简单存证
         * Summary: 简单存证
         */
        public async Task<SaveBusinessDepositResponse> SaveBusinessDepositExAsync(SaveBusinessDepositRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SaveBusinessDepositResponse>(await DoRequestAsync("1.0", "baas.business.deposit.save", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 存储带有描述性的数据
         * Summary: 存储带有描述性的数据
         */
        public SaveBusinessDepositMetadataResponse SaveBusinessDepositMetadata(SaveBusinessDepositMetadataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SaveBusinessDepositMetadataEx(request, headers, runtime);
        }

        /**
         * Description: 存储带有描述性的数据
         * Summary: 存储带有描述性的数据
         */
        public async Task<SaveBusinessDepositMetadataResponse> SaveBusinessDepositMetadataAsync(SaveBusinessDepositMetadataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SaveBusinessDepositMetadataExAsync(request, headers, runtime);
        }

        /**
         * Description: 存储带有描述性的数据
         * Summary: 存储带有描述性的数据
         */
        public SaveBusinessDepositMetadataResponse SaveBusinessDepositMetadataEx(SaveBusinessDepositMetadataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SaveBusinessDepositMetadataResponse>(DoRequest("1.0", "baas.business.deposit.metadata.save", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 存储带有描述性的数据
         * Summary: 存储带有描述性的数据
         */
        public async Task<SaveBusinessDepositMetadataResponse> SaveBusinessDepositMetadataExAsync(SaveBusinessDepositMetadataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SaveBusinessDepositMetadataResponse>(await DoRequestAsync("1.0", "baas.business.deposit.metadata.save", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 将存证的数据在链上加密
         * Summary: 将存证的数据在链上加密
         */
        public SaveBusinessDepositEncryptResponse SaveBusinessDepositEncrypt(SaveBusinessDepositEncryptRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SaveBusinessDepositEncryptEx(request, headers, runtime);
        }

        /**
         * Description: 将存证的数据在链上加密
         * Summary: 将存证的数据在链上加密
         */
        public async Task<SaveBusinessDepositEncryptResponse> SaveBusinessDepositEncryptAsync(SaveBusinessDepositEncryptRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SaveBusinessDepositEncryptExAsync(request, headers, runtime);
        }

        /**
         * Description: 将存证的数据在链上加密
         * Summary: 将存证的数据在链上加密
         */
        public SaveBusinessDepositEncryptResponse SaveBusinessDepositEncryptEx(SaveBusinessDepositEncryptRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SaveBusinessDepositEncryptResponse>(DoRequest("1.0", "baas.business.deposit.encrypt.save", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 将存证的数据在链上加密
         * Summary: 将存证的数据在链上加密
         */
        public async Task<SaveBusinessDepositEncryptResponse> SaveBusinessDepositEncryptExAsync(SaveBusinessDepositEncryptRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SaveBusinessDepositEncryptResponse>(await DoRequestAsync("1.0", "baas.business.deposit.encrypt.save", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 存证带有描述性的数据并加密
         * Summary: 存证带有描述性的数据并加密
         */
        public SaveBusinessDepositEncryptmetadataResponse SaveBusinessDepositEncryptmetadata(SaveBusinessDepositEncryptmetadataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SaveBusinessDepositEncryptmetadataEx(request, headers, runtime);
        }

        /**
         * Description: 存证带有描述性的数据并加密
         * Summary: 存证带有描述性的数据并加密
         */
        public async Task<SaveBusinessDepositEncryptmetadataResponse> SaveBusinessDepositEncryptmetadataAsync(SaveBusinessDepositEncryptmetadataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SaveBusinessDepositEncryptmetadataExAsync(request, headers, runtime);
        }

        /**
         * Description: 存证带有描述性的数据并加密
         * Summary: 存证带有描述性的数据并加密
         */
        public SaveBusinessDepositEncryptmetadataResponse SaveBusinessDepositEncryptmetadataEx(SaveBusinessDepositEncryptmetadataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SaveBusinessDepositEncryptmetadataResponse>(DoRequest("1.0", "baas.business.deposit.encryptmetadata.save", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 存证带有描述性的数据并加密
         * Summary: 存证带有描述性的数据并加密
         */
        public async Task<SaveBusinessDepositEncryptmetadataResponse> SaveBusinessDepositEncryptmetadataExAsync(SaveBusinessDepositEncryptmetadataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SaveBusinessDepositEncryptmetadataResponse>(await DoRequestAsync("1.0", "baas.business.deposit.encryptmetadata.save", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过授权宝创建did
         * Summary: 创建did
         */
        public CreateBusinessDidResponse CreateBusinessDid(CreateBusinessDidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateBusinessDidEx(request, headers, runtime);
        }

        /**
         * Description: 通过授权宝创建did
         * Summary: 创建did
         */
        public async Task<CreateBusinessDidResponse> CreateBusinessDidAsync(CreateBusinessDidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateBusinessDidExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过授权宝创建did
         * Summary: 创建did
         */
        public CreateBusinessDidResponse CreateBusinessDidEx(CreateBusinessDidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateBusinessDidResponse>(DoRequest("1.0", "baas.business.did.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过授权宝创建did
         * Summary: 创建did
         */
        public async Task<CreateBusinessDidResponse> CreateBusinessDidExAsync(CreateBusinessDidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateBusinessDidResponse>(await DoRequestAsync("1.0", "baas.business.did.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 根据did创建链上账户
         * Summary: 根据did创建链上账户
         */
        public CreateBusinessBizaccountResponse CreateBusinessBizaccount(CreateBusinessBizaccountRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateBusinessBizaccountEx(request, headers, runtime);
        }

        /**
         * Description: 根据did创建链上账户
         * Summary: 根据did创建链上账户
         */
        public async Task<CreateBusinessBizaccountResponse> CreateBusinessBizaccountAsync(CreateBusinessBizaccountRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateBusinessBizaccountExAsync(request, headers, runtime);
        }

        /**
         * Description: 根据did创建链上账户
         * Summary: 根据did创建链上账户
         */
        public CreateBusinessBizaccountResponse CreateBusinessBizaccountEx(CreateBusinessBizaccountRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateBusinessBizaccountResponse>(DoRequest("1.0", "baas.business.bizaccount.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 根据did创建链上账户
         * Summary: 根据did创建链上账户
         */
        public async Task<CreateBusinessBizaccountResponse> CreateBusinessBizaccountExAsync(CreateBusinessBizaccountRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateBusinessBizaccountResponse>(await DoRequestAsync("1.0", "baas.business.bizaccount.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询存证数据
         * Summary: 查询存证数据
         */
        public QueryBusinessDepositResponse QueryBusinessDeposit(QueryBusinessDepositRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryBusinessDepositEx(request, headers, runtime);
        }

        /**
         * Description: 查询存证数据
         * Summary: 查询存证数据
         */
        public async Task<QueryBusinessDepositResponse> QueryBusinessDepositAsync(QueryBusinessDepositRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryBusinessDepositExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询存证数据
         * Summary: 查询存证数据
         */
        public QueryBusinessDepositResponse QueryBusinessDepositEx(QueryBusinessDepositRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBusinessDepositResponse>(DoRequest("1.0", "baas.business.deposit.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询存证数据
         * Summary: 查询存证数据
         */
        public async Task<QueryBusinessDepositResponse> QueryBusinessDepositExAsync(QueryBusinessDepositRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBusinessDepositResponse>(await DoRequestAsync("1.0", "baas.business.deposit.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 授权存证数据
         * Summary: 授权存证数据
         */
        public AuthBusinessDepositdataResponse AuthBusinessDepositdata(AuthBusinessDepositdataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return AuthBusinessDepositdataEx(request, headers, runtime);
        }

        /**
         * Description: 授权存证数据
         * Summary: 授权存证数据
         */
        public async Task<AuthBusinessDepositdataResponse> AuthBusinessDepositdataAsync(AuthBusinessDepositdataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await AuthBusinessDepositdataExAsync(request, headers, runtime);
        }

        /**
         * Description: 授权存证数据
         * Summary: 授权存证数据
         */
        public AuthBusinessDepositdataResponse AuthBusinessDepositdataEx(AuthBusinessDepositdataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<AuthBusinessDepositdataResponse>(DoRequest("1.0", "baas.business.depositdata.auth", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 授权存证数据
         * Summary: 授权存证数据
         */
        public async Task<AuthBusinessDepositdataResponse> AuthBusinessDepositdataExAsync(AuthBusinessDepositdataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<AuthBusinessDepositdataResponse>(await DoRequestAsync("1.0", "baas.business.depositdata.auth", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建部署合约
         * Summary: 创建部署合约
         */
        public CreateBusinessContractDeployResponse CreateBusinessContractDeploy(CreateBusinessContractDeployRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateBusinessContractDeployEx(request, headers, runtime);
        }

        /**
         * Description: 创建部署合约
         * Summary: 创建部署合约
         */
        public async Task<CreateBusinessContractDeployResponse> CreateBusinessContractDeployAsync(CreateBusinessContractDeployRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateBusinessContractDeployExAsync(request, headers, runtime);
        }

        /**
         * Description: 创建部署合约
         * Summary: 创建部署合约
         */
        public CreateBusinessContractDeployResponse CreateBusinessContractDeployEx(CreateBusinessContractDeployRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateBusinessContractDeployResponse>(DoRequest("1.0", "baas.business.contract.deploy.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建部署合约
         * Summary: 创建部署合约
         */
        public async Task<CreateBusinessContractDeployResponse> CreateBusinessContractDeployExAsync(CreateBusinessContractDeployRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateBusinessContractDeployResponse>(await DoRequestAsync("1.0", "baas.business.contract.deploy.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 普通合约接口调用
         * Summary: 普通合约接口调用
         */
        public CreateBusinessContractnormalcallResponse CreateBusinessContractnormalcall(CreateBusinessContractnormalcallRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateBusinessContractnormalcallEx(request, headers, runtime);
        }

        /**
         * Description: 普通合约接口调用
         * Summary: 普通合约接口调用
         */
        public async Task<CreateBusinessContractnormalcallResponse> CreateBusinessContractnormalcallAsync(CreateBusinessContractnormalcallRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateBusinessContractnormalcallExAsync(request, headers, runtime);
        }

        /**
         * Description: 普通合约接口调用
         * Summary: 普通合约接口调用
         */
        public CreateBusinessContractnormalcallResponse CreateBusinessContractnormalcallEx(CreateBusinessContractnormalcallRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateBusinessContractnormalcallResponse>(DoRequest("1.0", "baas.business.contractnormalcall.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 普通合约接口调用
         * Summary: 普通合约接口调用
         */
        public async Task<CreateBusinessContractnormalcallResponse> CreateBusinessContractnormalcallExAsync(CreateBusinessContractnormalcallRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateBusinessContractnormalcallResponse>(await DoRequestAsync("1.0", "baas.business.contractnormalcall.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 调用加密合约接口
         * Summary: 调用加密合约接口
         */
        public CreateBusinessContractencryptcallResponse CreateBusinessContractencryptcall(CreateBusinessContractencryptcallRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateBusinessContractencryptcallEx(request, headers, runtime);
        }

        /**
         * Description: 调用加密合约接口
         * Summary: 调用加密合约接口
         */
        public async Task<CreateBusinessContractencryptcallResponse> CreateBusinessContractencryptcallAsync(CreateBusinessContractencryptcallRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateBusinessContractencryptcallExAsync(request, headers, runtime);
        }

        /**
         * Description: 调用加密合约接口
         * Summary: 调用加密合约接口
         */
        public CreateBusinessContractencryptcallResponse CreateBusinessContractencryptcallEx(CreateBusinessContractencryptcallRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateBusinessContractencryptcallResponse>(DoRequest("1.0", "baas.business.contractencryptcall.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 调用加密合约接口
         * Summary: 调用加密合约接口
         */
        public async Task<CreateBusinessContractencryptcallResponse> CreateBusinessContractencryptcallExAsync(CreateBusinessContractencryptcallRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateBusinessContractencryptcallResponse>(await DoRequestAsync("1.0", "baas.business.contractencryptcall.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询交易receipt
         * Summary: 查询交易receipt
         */
        public QueryBusinessContractreceiptResponse QueryBusinessContractreceipt(QueryBusinessContractreceiptRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryBusinessContractreceiptEx(request, headers, runtime);
        }

        /**
         * Description: 查询交易receipt
         * Summary: 查询交易receipt
         */
        public async Task<QueryBusinessContractreceiptResponse> QueryBusinessContractreceiptAsync(QueryBusinessContractreceiptRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryBusinessContractreceiptExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询交易receipt
         * Summary: 查询交易receipt
         */
        public QueryBusinessContractreceiptResponse QueryBusinessContractreceiptEx(QueryBusinessContractreceiptRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBusinessContractreceiptResponse>(DoRequest("1.0", "baas.business.contractreceipt.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询交易receipt
         * Summary: 查询交易receipt
         */
        public async Task<QueryBusinessContractreceiptResponse> QueryBusinessContractreceiptExAsync(QueryBusinessContractreceiptRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBusinessContractreceiptResponse>(await DoRequestAsync("1.0", "baas.business.contractreceipt.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询加密的receipt
         * Summary: 查询加密的receipt
         */
        public QueryBusinessContractencryptreceiptResponse QueryBusinessContractencryptreceipt(QueryBusinessContractencryptreceiptRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryBusinessContractencryptreceiptEx(request, headers, runtime);
        }

        /**
         * Description: 查询加密的receipt
         * Summary: 查询加密的receipt
         */
        public async Task<QueryBusinessContractencryptreceiptResponse> QueryBusinessContractencryptreceiptAsync(QueryBusinessContractencryptreceiptRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryBusinessContractencryptreceiptExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询加密的receipt
         * Summary: 查询加密的receipt
         */
        public QueryBusinessContractencryptreceiptResponse QueryBusinessContractencryptreceiptEx(QueryBusinessContractencryptreceiptRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBusinessContractencryptreceiptResponse>(DoRequest("1.0", "baas.business.contractencryptreceipt.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询加密的receipt
         * Summary: 查询加密的receipt
         */
        public async Task<QueryBusinessContractencryptreceiptResponse> QueryBusinessContractencryptreceiptExAsync(QueryBusinessContractencryptreceiptRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBusinessContractencryptreceiptResponse>(await DoRequestAsync("1.0", "baas.business.contractencryptreceipt.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询合约加密内容的方法
         * Summary: 查询合约加密内容的方法
         */
        public QueryBusinessContractencryptmethodResponse QueryBusinessContractencryptmethod(QueryBusinessContractencryptmethodRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryBusinessContractencryptmethodEx(request, headers, runtime);
        }

        /**
         * Description: 查询合约加密内容的方法
         * Summary: 查询合约加密内容的方法
         */
        public async Task<QueryBusinessContractencryptmethodResponse> QueryBusinessContractencryptmethodAsync(QueryBusinessContractencryptmethodRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryBusinessContractencryptmethodExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询合约加密内容的方法
         * Summary: 查询合约加密内容的方法
         */
        public QueryBusinessContractencryptmethodResponse QueryBusinessContractencryptmethodEx(QueryBusinessContractencryptmethodRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBusinessContractencryptmethodResponse>(DoRequest("1.0", "baas.business.contractencryptmethod.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询合约加密内容的方法
         * Summary: 查询合约加密内容的方法
         */
        public async Task<QueryBusinessContractencryptmethodResponse> QueryBusinessContractencryptmethodExAsync(QueryBusinessContractencryptmethodRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBusinessContractencryptmethodResponse>(await DoRequestAsync("1.0", "baas.business.contractencryptmethod.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 部署业务共识合约
         * Summary: 部署业务共识合约
         */
        public DeployBusinessAgreementResponse DeployBusinessAgreement(DeployBusinessAgreementRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return DeployBusinessAgreementEx(request, headers, runtime);
        }

        /**
         * Description: 部署业务共识合约
         * Summary: 部署业务共识合约
         */
        public async Task<DeployBusinessAgreementResponse> DeployBusinessAgreementAsync(DeployBusinessAgreementRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await DeployBusinessAgreementExAsync(request, headers, runtime);
        }

        /**
         * Description: 部署业务共识合约
         * Summary: 部署业务共识合约
         */
        public DeployBusinessAgreementResponse DeployBusinessAgreementEx(DeployBusinessAgreementRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeployBusinessAgreementResponse>(DoRequest("1.0", "baas.business.agreement.deploy", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 部署业务共识合约
         * Summary: 部署业务共识合约
         */
        public async Task<DeployBusinessAgreementResponse> DeployBusinessAgreementExAsync(DeployBusinessAgreementRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeployBusinessAgreementResponse>(await DoRequestAsync("1.0", "baas.business.agreement.deploy", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建业务共识模板
         * Summary: 创建业务共识模板
         */
        public CreateBusinessAgreementRegistertemplateResponse CreateBusinessAgreementRegistertemplate(CreateBusinessAgreementRegistertemplateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateBusinessAgreementRegistertemplateEx(request, headers, runtime);
        }

        /**
         * Description: 创建业务共识模板
         * Summary: 创建业务共识模板
         */
        public async Task<CreateBusinessAgreementRegistertemplateResponse> CreateBusinessAgreementRegistertemplateAsync(CreateBusinessAgreementRegistertemplateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateBusinessAgreementRegistertemplateExAsync(request, headers, runtime);
        }

        /**
         * Description: 创建业务共识模板
         * Summary: 创建业务共识模板
         */
        public CreateBusinessAgreementRegistertemplateResponse CreateBusinessAgreementRegistertemplateEx(CreateBusinessAgreementRegistertemplateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateBusinessAgreementRegistertemplateResponse>(DoRequest("1.0", "baas.business.agreement.registertemplate.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建业务共识模板
         * Summary: 创建业务共识模板
         */
        public async Task<CreateBusinessAgreementRegistertemplateResponse> CreateBusinessAgreementRegistertemplateExAsync(CreateBusinessAgreementRegistertemplateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateBusinessAgreementRegistertemplateResponse>(await DoRequestAsync("1.0", "baas.business.agreement.registertemplate.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 注册业务共识实例
         * Summary: 注册业务共识实例
         */
        public CreateBusinessAgreementRegisterResponse CreateBusinessAgreementRegister(CreateBusinessAgreementRegisterRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateBusinessAgreementRegisterEx(request, headers, runtime);
        }

        /**
         * Description: 注册业务共识实例
         * Summary: 注册业务共识实例
         */
        public async Task<CreateBusinessAgreementRegisterResponse> CreateBusinessAgreementRegisterAsync(CreateBusinessAgreementRegisterRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateBusinessAgreementRegisterExAsync(request, headers, runtime);
        }

        /**
         * Description: 注册业务共识实例
         * Summary: 注册业务共识实例
         */
        public CreateBusinessAgreementRegisterResponse CreateBusinessAgreementRegisterEx(CreateBusinessAgreementRegisterRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateBusinessAgreementRegisterResponse>(DoRequest("1.0", "baas.business.agreement.register.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 注册业务共识实例
         * Summary: 注册业务共识实例
         */
        public async Task<CreateBusinessAgreementRegisterResponse> CreateBusinessAgreementRegisterExAsync(CreateBusinessAgreementRegisterRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateBusinessAgreementRegisterResponse>(await DoRequestAsync("1.0", "baas.business.agreement.register.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 对业务共识key进行签名认可
         * Summary: 对业务共识key进行签名认可
         */
        public CreateBusinessAgreementSignResponse CreateBusinessAgreementSign(CreateBusinessAgreementSignRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateBusinessAgreementSignEx(request, headers, runtime);
        }

        /**
         * Description: 对业务共识key进行签名认可
         * Summary: 对业务共识key进行签名认可
         */
        public async Task<CreateBusinessAgreementSignResponse> CreateBusinessAgreementSignAsync(CreateBusinessAgreementSignRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateBusinessAgreementSignExAsync(request, headers, runtime);
        }

        /**
         * Description: 对业务共识key进行签名认可
         * Summary: 对业务共识key进行签名认可
         */
        public CreateBusinessAgreementSignResponse CreateBusinessAgreementSignEx(CreateBusinessAgreementSignRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateBusinessAgreementSignResponse>(DoRequest("1.0", "baas.business.agreement.sign.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 对业务共识key进行签名认可
         * Summary: 对业务共识key进行签名认可
         */
        public async Task<CreateBusinessAgreementSignResponse> CreateBusinessAgreementSignExAsync(CreateBusinessAgreementSignRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateBusinessAgreementSignResponse>(await DoRequestAsync("1.0", "baas.business.agreement.sign.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询业务共识当前状态
         * Summary: 查询业务共识当前状态
         */
        public QueryBusinessAgreementResponse QueryBusinessAgreement(QueryBusinessAgreementRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryBusinessAgreementEx(request, headers, runtime);
        }

        /**
         * Description: 查询业务共识当前状态
         * Summary: 查询业务共识当前状态
         */
        public async Task<QueryBusinessAgreementResponse> QueryBusinessAgreementAsync(QueryBusinessAgreementRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryBusinessAgreementExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询业务共识当前状态
         * Summary: 查询业务共识当前状态
         */
        public QueryBusinessAgreementResponse QueryBusinessAgreementEx(QueryBusinessAgreementRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBusinessAgreementResponse>(DoRequest("1.0", "baas.business.agreement.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询业务共识当前状态
         * Summary: 查询业务共识当前状态
         */
        public async Task<QueryBusinessAgreementResponse> QueryBusinessAgreementExAsync(QueryBusinessAgreementRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBusinessAgreementResponse>(await DoRequestAsync("1.0", "baas.business.agreement.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 对合约隐私key授权
         * Summary: 对合约隐私key授权
         */
        public CreateBusinessContractGrantdidResponse CreateBusinessContractGrantdid(CreateBusinessContractGrantdidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateBusinessContractGrantdidEx(request, headers, runtime);
        }

        /**
         * Description: 对合约隐私key授权
         * Summary: 对合约隐私key授权
         */
        public async Task<CreateBusinessContractGrantdidResponse> CreateBusinessContractGrantdidAsync(CreateBusinessContractGrantdidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateBusinessContractGrantdidExAsync(request, headers, runtime);
        }

        /**
         * Description: 对合约隐私key授权
         * Summary: 对合约隐私key授权
         */
        public CreateBusinessContractGrantdidResponse CreateBusinessContractGrantdidEx(CreateBusinessContractGrantdidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateBusinessContractGrantdidResponse>(DoRequest("1.0", "baas.business.contract.grantdid.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 对合约隐私key授权
         * Summary: 对合约隐私key授权
         */
        public async Task<CreateBusinessContractGrantdidResponse> CreateBusinessContractGrantdidExAsync(CreateBusinessContractGrantdidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateBusinessContractGrantdidResponse>(await DoRequestAsync("1.0", "baas.business.contract.grantdid.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询被加密的存证数据
         * Summary: 查询被加密的存证数据
         */
        public QueryBusinessDepositEncryptedmetadataResponse QueryBusinessDepositEncryptedmetadata(QueryBusinessDepositEncryptedmetadataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryBusinessDepositEncryptedmetadataEx(request, headers, runtime);
        }

        /**
         * Description: 查询被加密的存证数据
         * Summary: 查询被加密的存证数据
         */
        public async Task<QueryBusinessDepositEncryptedmetadataResponse> QueryBusinessDepositEncryptedmetadataAsync(QueryBusinessDepositEncryptedmetadataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryBusinessDepositEncryptedmetadataExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询被加密的存证数据
         * Summary: 查询被加密的存证数据
         */
        public QueryBusinessDepositEncryptedmetadataResponse QueryBusinessDepositEncryptedmetadataEx(QueryBusinessDepositEncryptedmetadataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBusinessDepositEncryptedmetadataResponse>(DoRequest("1.0", "baas.business.deposit.encryptedmetadata.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询被加密的存证数据
         * Summary: 查询被加密的存证数据
         */
        public async Task<QueryBusinessDepositEncryptedmetadataResponse> QueryBusinessDepositEncryptedmetadataExAsync(QueryBusinessDepositEncryptedmetadataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBusinessDepositEncryptedmetadataResponse>(await DoRequestAsync("1.0", "baas.business.deposit.encryptedmetadata.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 授权存证数据给对应的组织机构，该组织下所有的人员都可以查询该存证数据的原内容
         * Summary: 授权存证数据给对应的组织机构
         */
        public AuthBusinessDepositdataCorpResponse AuthBusinessDepositdataCorp(AuthBusinessDepositdataCorpRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return AuthBusinessDepositdataCorpEx(request, headers, runtime);
        }

        /**
         * Description: 授权存证数据给对应的组织机构，该组织下所有的人员都可以查询该存证数据的原内容
         * Summary: 授权存证数据给对应的组织机构
         */
        public async Task<AuthBusinessDepositdataCorpResponse> AuthBusinessDepositdataCorpAsync(AuthBusinessDepositdataCorpRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await AuthBusinessDepositdataCorpExAsync(request, headers, runtime);
        }

        /**
         * Description: 授权存证数据给对应的组织机构，该组织下所有的人员都可以查询该存证数据的原内容
         * Summary: 授权存证数据给对应的组织机构
         */
        public AuthBusinessDepositdataCorpResponse AuthBusinessDepositdataCorpEx(AuthBusinessDepositdataCorpRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<AuthBusinessDepositdataCorpResponse>(DoRequest("1.0", "baas.business.depositdata.corp.auth", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 授权存证数据给对应的组织机构，该组织下所有的人员都可以查询该存证数据的原内容
         * Summary: 授权存证数据给对应的组织机构
         */
        public async Task<AuthBusinessDepositdataCorpResponse> AuthBusinessDepositdataCorpExAsync(AuthBusinessDepositdataCorpRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<AuthBusinessDepositdataCorpResponse>(await DoRequestAsync("1.0", "baas.business.depositdata.corp.auth", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 取消存证数据授权给账户
         * Summary: 取消存证数据授权给账户
         */
        public CancelBusinessDepositGrantdidResponse CancelBusinessDepositGrantdid(CancelBusinessDepositGrantdidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CancelBusinessDepositGrantdidEx(request, headers, runtime);
        }

        /**
         * Description: 取消存证数据授权给账户
         * Summary: 取消存证数据授权给账户
         */
        public async Task<CancelBusinessDepositGrantdidResponse> CancelBusinessDepositGrantdidAsync(CancelBusinessDepositGrantdidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CancelBusinessDepositGrantdidExAsync(request, headers, runtime);
        }

        /**
         * Description: 取消存证数据授权给账户
         * Summary: 取消存证数据授权给账户
         */
        public CancelBusinessDepositGrantdidResponse CancelBusinessDepositGrantdidEx(CancelBusinessDepositGrantdidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CancelBusinessDepositGrantdidResponse>(DoRequest("1.0", "baas.business.deposit.grantdid.cancel", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 取消存证数据授权给账户
         * Summary: 取消存证数据授权给账户
         */
        public async Task<CancelBusinessDepositGrantdidResponse> CancelBusinessDepositGrantdidExAsync(CancelBusinessDepositGrantdidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CancelBusinessDepositGrantdidResponse>(await DoRequestAsync("1.0", "baas.business.deposit.grantdid.cancel", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 取消存证授权给组织机构
         * Summary: 取消存证授权给组织机构
         */
        public CancelBusinessDepositGrantcorpResponse CancelBusinessDepositGrantcorp(CancelBusinessDepositGrantcorpRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CancelBusinessDepositGrantcorpEx(request, headers, runtime);
        }

        /**
         * Description: 取消存证授权给组织机构
         * Summary: 取消存证授权给组织机构
         */
        public async Task<CancelBusinessDepositGrantcorpResponse> CancelBusinessDepositGrantcorpAsync(CancelBusinessDepositGrantcorpRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CancelBusinessDepositGrantcorpExAsync(request, headers, runtime);
        }

        /**
         * Description: 取消存证授权给组织机构
         * Summary: 取消存证授权给组织机构
         */
        public CancelBusinessDepositGrantcorpResponse CancelBusinessDepositGrantcorpEx(CancelBusinessDepositGrantcorpRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CancelBusinessDepositGrantcorpResponse>(DoRequest("1.0", "baas.business.deposit.grantcorp.cancel", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 取消存证授权给组织机构
         * Summary: 取消存证授权给组织机构
         */
        public async Task<CancelBusinessDepositGrantcorpResponse> CancelBusinessDepositGrantcorpExAsync(CancelBusinessDepositGrantcorpRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CancelBusinessDepositGrantcorpResponse>(await DoRequestAsync("1.0", "baas.business.deposit.grantcorp.cancel", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 授权合约内加密字段给机构，机构下的所有人都有权限访问该数据
         * Summary: 授权合约内加密字段给机构
         */
        public CreateBusinessContractGrantcorpResponse CreateBusinessContractGrantcorp(CreateBusinessContractGrantcorpRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateBusinessContractGrantcorpEx(request, headers, runtime);
        }

        /**
         * Description: 授权合约内加密字段给机构，机构下的所有人都有权限访问该数据
         * Summary: 授权合约内加密字段给机构
         */
        public async Task<CreateBusinessContractGrantcorpResponse> CreateBusinessContractGrantcorpAsync(CreateBusinessContractGrantcorpRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateBusinessContractGrantcorpExAsync(request, headers, runtime);
        }

        /**
         * Description: 授权合约内加密字段给机构，机构下的所有人都有权限访问该数据
         * Summary: 授权合约内加密字段给机构
         */
        public CreateBusinessContractGrantcorpResponse CreateBusinessContractGrantcorpEx(CreateBusinessContractGrantcorpRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateBusinessContractGrantcorpResponse>(DoRequest("1.0", "baas.business.contract.grantcorp.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 授权合约内加密字段给机构，机构下的所有人都有权限访问该数据
         * Summary: 授权合约内加密字段给机构
         */
        public async Task<CreateBusinessContractGrantcorpResponse> CreateBusinessContractGrantcorpExAsync(CreateBusinessContractGrantcorpRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateBusinessContractGrantcorpResponse>(await DoRequestAsync("1.0", "baas.business.contract.grantcorp.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 取消授权did查询加密数据
         * Summary: 取消授权did查询加密数据
         */
        public CancelBusinessContractGrantdidResponse CancelBusinessContractGrantdid(CancelBusinessContractGrantdidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CancelBusinessContractGrantdidEx(request, headers, runtime);
        }

        /**
         * Description: 取消授权did查询加密数据
         * Summary: 取消授权did查询加密数据
         */
        public async Task<CancelBusinessContractGrantdidResponse> CancelBusinessContractGrantdidAsync(CancelBusinessContractGrantdidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CancelBusinessContractGrantdidExAsync(request, headers, runtime);
        }

        /**
         * Description: 取消授权did查询加密数据
         * Summary: 取消授权did查询加密数据
         */
        public CancelBusinessContractGrantdidResponse CancelBusinessContractGrantdidEx(CancelBusinessContractGrantdidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CancelBusinessContractGrantdidResponse>(DoRequest("1.0", "baas.business.contract.grantdid.cancel", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 取消授权did查询加密数据
         * Summary: 取消授权did查询加密数据
         */
        public async Task<CancelBusinessContractGrantdidResponse> CancelBusinessContractGrantdidExAsync(CancelBusinessContractGrantdidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CancelBusinessContractGrantdidResponse>(await DoRequestAsync("1.0", "baas.business.contract.grantdid.cancel", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 取消授权给组织机构
         * Summary: 取消授权给组织机构
         */
        public CancelBusinessContractGrantcorpResponse CancelBusinessContractGrantcorp(CancelBusinessContractGrantcorpRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CancelBusinessContractGrantcorpEx(request, headers, runtime);
        }

        /**
         * Description: 取消授权给组织机构
         * Summary: 取消授权给组织机构
         */
        public async Task<CancelBusinessContractGrantcorpResponse> CancelBusinessContractGrantcorpAsync(CancelBusinessContractGrantcorpRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CancelBusinessContractGrantcorpExAsync(request, headers, runtime);
        }

        /**
         * Description: 取消授权给组织机构
         * Summary: 取消授权给组织机构
         */
        public CancelBusinessContractGrantcorpResponse CancelBusinessContractGrantcorpEx(CancelBusinessContractGrantcorpRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CancelBusinessContractGrantcorpResponse>(DoRequest("1.0", "baas.business.contract.grantcorp.cancel", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 取消授权给组织机构
         * Summary: 取消授权给组织机构
         */
        public async Task<CancelBusinessContractGrantcorpResponse> CancelBusinessContractGrantcorpExAsync(CancelBusinessContractGrantcorpRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CancelBusinessContractGrantcorpResponse>(await DoRequestAsync("1.0", "baas.business.contract.grantcorp.cancel", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 业务中台测试接口
         * Summary: 业务中台测试接口
         */
        public ImportPlatformTestregionTestfuncResponse ImportPlatformTestregionTestfunc(ImportPlatformTestregionTestfuncRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ImportPlatformTestregionTestfuncEx(request, headers, runtime);
        }

        /**
         * Description: 业务中台测试接口
         * Summary: 业务中台测试接口
         */
        public async Task<ImportPlatformTestregionTestfuncResponse> ImportPlatformTestregionTestfuncAsync(ImportPlatformTestregionTestfuncRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ImportPlatformTestregionTestfuncExAsync(request, headers, runtime);
        }

        /**
         * Description: 业务中台测试接口
         * Summary: 业务中台测试接口
         */
        public ImportPlatformTestregionTestfuncResponse ImportPlatformTestregionTestfuncEx(ImportPlatformTestregionTestfuncRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ImportPlatformTestregionTestfuncResponse>(DoRequest("1.0", "baas.platform.testregion.testfunc.import", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 业务中台测试接口
         * Summary: 业务中台测试接口
         */
        public async Task<ImportPlatformTestregionTestfuncResponse> ImportPlatformTestregionTestfuncExAsync(ImportPlatformTestregionTestfuncRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ImportPlatformTestregionTestfuncResponse>(await DoRequestAsync("1.0", "baas.platform.testregion.testfunc.import", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 存证创建账户
         * Summary: 存证创建账户
         */
        public CreatePlatformDepositAccountResponse CreatePlatformDepositAccount(CreatePlatformDepositAccountRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreatePlatformDepositAccountEx(request, headers, runtime);
        }

        /**
         * Description: 存证创建账户
         * Summary: 存证创建账户
         */
        public async Task<CreatePlatformDepositAccountResponse> CreatePlatformDepositAccountAsync(CreatePlatformDepositAccountRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreatePlatformDepositAccountExAsync(request, headers, runtime);
        }

        /**
         * Description: 存证创建账户
         * Summary: 存证创建账户
         */
        public CreatePlatformDepositAccountResponse CreatePlatformDepositAccountEx(CreatePlatformDepositAccountRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreatePlatformDepositAccountResponse>(DoRequest("1.0", "baas.platform.deposit.account.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 存证创建账户
         * Summary: 存证创建账户
         */
        public async Task<CreatePlatformDepositAccountResponse> CreatePlatformDepositAccountExAsync(CreatePlatformDepositAccountRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreatePlatformDepositAccountResponse>(await DoRequestAsync("1.0", "baas.platform.deposit.account.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 存证创建did
         * Summary: 存证创建did
         */
        public CreatePlatformDepositDidResponse CreatePlatformDepositDid(CreatePlatformDepositDidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreatePlatformDepositDidEx(request, headers, runtime);
        }

        /**
         * Description: 存证创建did
         * Summary: 存证创建did
         */
        public async Task<CreatePlatformDepositDidResponse> CreatePlatformDepositDidAsync(CreatePlatformDepositDidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreatePlatformDepositDidExAsync(request, headers, runtime);
        }

        /**
         * Description: 存证创建did
         * Summary: 存证创建did
         */
        public CreatePlatformDepositDidResponse CreatePlatformDepositDidEx(CreatePlatformDepositDidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreatePlatformDepositDidResponse>(DoRequest("1.0", "baas.platform.deposit.did.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 存证创建did
         * Summary: 存证创建did
         */
        public async Task<CreatePlatformDepositDidResponse> CreatePlatformDepositDidExAsync(CreatePlatformDepositDidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreatePlatformDepositDidResponse>(await DoRequestAsync("1.0", "baas.platform.deposit.did.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 普通数据存证
         * Summary: 普通数据存证
         */
        public SavePlatformDepositDepositResponse SavePlatformDepositDeposit(SavePlatformDepositDepositRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SavePlatformDepositDepositEx(request, headers, runtime);
        }

        /**
         * Description: 普通数据存证
         * Summary: 普通数据存证
         */
        public async Task<SavePlatformDepositDepositResponse> SavePlatformDepositDepositAsync(SavePlatformDepositDepositRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SavePlatformDepositDepositExAsync(request, headers, runtime);
        }

        /**
         * Description: 普通数据存证
         * Summary: 普通数据存证
         */
        public SavePlatformDepositDepositResponse SavePlatformDepositDepositEx(SavePlatformDepositDepositRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SavePlatformDepositDepositResponse>(DoRequest("1.0", "baas.platform.deposit.deposit.save", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 普通数据存证
         * Summary: 普通数据存证
         */
        public async Task<SavePlatformDepositDepositResponse> SavePlatformDepositDepositExAsync(SavePlatformDepositDepositRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SavePlatformDepositDepositResponse>(await DoRequestAsync("1.0", "baas.platform.deposit.deposit.save", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 为企业创建did
         * Summary: 为企业创建did
         */
        public CreatePlatformDepositCorpdidResponse CreatePlatformDepositCorpdid(CreatePlatformDepositCorpdidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreatePlatformDepositCorpdidEx(request, headers, runtime);
        }

        /**
         * Description: 为企业创建did
         * Summary: 为企业创建did
         */
        public async Task<CreatePlatformDepositCorpdidResponse> CreatePlatformDepositCorpdidAsync(CreatePlatformDepositCorpdidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreatePlatformDepositCorpdidExAsync(request, headers, runtime);
        }

        /**
         * Description: 为企业创建did
         * Summary: 为企业创建did
         */
        public CreatePlatformDepositCorpdidResponse CreatePlatformDepositCorpdidEx(CreatePlatformDepositCorpdidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreatePlatformDepositCorpdidResponse>(DoRequest("1.0", "baas.platform.deposit.corpdid.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 为企业创建did
         * Summary: 为企业创建did
         */
        public async Task<CreatePlatformDepositCorpdidResponse> CreatePlatformDepositCorpdidExAsync(CreatePlatformDepositCorpdidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreatePlatformDepositCorpdidResponse>(await DoRequestAsync("1.0", "baas.platform.deposit.corpdid.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用于对用户的账户映射，输入用户名、账户、手机号等信息，返回用户的链上身份信息
         * Summary: 用户账号映射
         */
        public CreateDigitalassetartAccountResponse CreateDigitalassetartAccount(CreateDigitalassetartAccountRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDigitalassetartAccountEx(request, headers, runtime);
        }

        /**
         * Description: 用于对用户的账户映射，输入用户名、账户、手机号等信息，返回用户的链上身份信息
         * Summary: 用户账号映射
         */
        public async Task<CreateDigitalassetartAccountResponse> CreateDigitalassetartAccountAsync(CreateDigitalassetartAccountRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDigitalassetartAccountExAsync(request, headers, runtime);
        }

        /**
         * Description: 用于对用户的账户映射，输入用户名、账户、手机号等信息，返回用户的链上身份信息
         * Summary: 用户账号映射
         */
        public CreateDigitalassetartAccountResponse CreateDigitalassetartAccountEx(CreateDigitalassetartAccountRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDigitalassetartAccountResponse>(DoRequest("1.0", "baas.digitalassetart.account.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用于对用户的账户映射，输入用户名、账户、手机号等信息，返回用户的链上身份信息
         * Summary: 用户账号映射
         */
        public async Task<CreateDigitalassetartAccountResponse> CreateDigitalassetartAccountExAsync(CreateDigitalassetartAccountRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDigitalassetartAccountResponse>(await DoRequestAsync("1.0", "baas.digitalassetart.account.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 批量账户映射
         * Summary: 批量账户映射
         */
        public BatchcreateDigitalassetartAccountResponse BatchcreateDigitalassetartAccount(BatchcreateDigitalassetartAccountRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return BatchcreateDigitalassetartAccountEx(request, headers, runtime);
        }

        /**
         * Description: 批量账户映射
         * Summary: 批量账户映射
         */
        public async Task<BatchcreateDigitalassetartAccountResponse> BatchcreateDigitalassetartAccountAsync(BatchcreateDigitalassetartAccountRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await BatchcreateDigitalassetartAccountExAsync(request, headers, runtime);
        }

        /**
         * Description: 批量账户映射
         * Summary: 批量账户映射
         */
        public BatchcreateDigitalassetartAccountResponse BatchcreateDigitalassetartAccountEx(BatchcreateDigitalassetartAccountRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BatchcreateDigitalassetartAccountResponse>(DoRequest("1.0", "baas.digitalassetart.account.batchcreate", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 批量账户映射
         * Summary: 批量账户映射
         */
        public async Task<BatchcreateDigitalassetartAccountResponse> BatchcreateDigitalassetartAccountExAsync(BatchcreateDigitalassetartAccountRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BatchcreateDigitalassetartAccountResponse>(await DoRequestAsync("1.0", "baas.digitalassetart.account.batchcreate", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建艺术品
         * Summary: 创建艺术品
         */
        public CreateDigitalassetartArtCreateResponse CreateDigitalassetartArtCreate(CreateDigitalassetartArtCreateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDigitalassetartArtCreateEx(request, headers, runtime);
        }

        /**
         * Description: 创建艺术品
         * Summary: 创建艺术品
         */
        public async Task<CreateDigitalassetartArtCreateResponse> CreateDigitalassetartArtCreateAsync(CreateDigitalassetartArtCreateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDigitalassetartArtCreateExAsync(request, headers, runtime);
        }

        /**
         * Description: 创建艺术品
         * Summary: 创建艺术品
         */
        public CreateDigitalassetartArtCreateResponse CreateDigitalassetartArtCreateEx(CreateDigitalassetartArtCreateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDigitalassetartArtCreateResponse>(DoRequest("1.0", "baas.digitalassetart.art.create.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建艺术品
         * Summary: 创建艺术品
         */
        public async Task<CreateDigitalassetartArtCreateResponse> CreateDigitalassetartArtCreateExAsync(CreateDigitalassetartArtCreateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDigitalassetartArtCreateResponse>(await DoRequestAsync("1.0", "baas.digitalassetart.art.create.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 将艺术品从创建状态改为发行状态，只有在发行状态的艺术品才能进行各种交易
         * Summary: 发行艺术品
         */
        public SetDigitalassetartArtIssueResponse SetDigitalassetartArtIssue(SetDigitalassetartArtIssueRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SetDigitalassetartArtIssueEx(request, headers, runtime);
        }

        /**
         * Description: 将艺术品从创建状态改为发行状态，只有在发行状态的艺术品才能进行各种交易
         * Summary: 发行艺术品
         */
        public async Task<SetDigitalassetartArtIssueResponse> SetDigitalassetartArtIssueAsync(SetDigitalassetartArtIssueRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SetDigitalassetartArtIssueExAsync(request, headers, runtime);
        }

        /**
         * Description: 将艺术品从创建状态改为发行状态，只有在发行状态的艺术品才能进行各种交易
         * Summary: 发行艺术品
         */
        public SetDigitalassetartArtIssueResponse SetDigitalassetartArtIssueEx(SetDigitalassetartArtIssueRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SetDigitalassetartArtIssueResponse>(DoRequest("1.0", "baas.digitalassetart.art.issue.set", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 将艺术品从创建状态改为发行状态，只有在发行状态的艺术品才能进行各种交易
         * Summary: 发行艺术品
         */
        public async Task<SetDigitalassetartArtIssueResponse> SetDigitalassetartArtIssueExAsync(SetDigitalassetartArtIssueRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SetDigitalassetartArtIssueResponse>(await DoRequestAsync("1.0", "baas.digitalassetart.art.issue.set", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 将该艺术品发布到交易所
         * Summary: 将该艺术品发布到交易所
         */
        public SetDigitalassetartArtIssuetoexchangeResponse SetDigitalassetartArtIssuetoexchange(SetDigitalassetartArtIssuetoexchangeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SetDigitalassetartArtIssuetoexchangeEx(request, headers, runtime);
        }

        /**
         * Description: 将该艺术品发布到交易所
         * Summary: 将该艺术品发布到交易所
         */
        public async Task<SetDigitalassetartArtIssuetoexchangeResponse> SetDigitalassetartArtIssuetoexchangeAsync(SetDigitalassetartArtIssuetoexchangeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SetDigitalassetartArtIssuetoexchangeExAsync(request, headers, runtime);
        }

        /**
         * Description: 将该艺术品发布到交易所
         * Summary: 将该艺术品发布到交易所
         */
        public SetDigitalassetartArtIssuetoexchangeResponse SetDigitalassetartArtIssuetoexchangeEx(SetDigitalassetartArtIssuetoexchangeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SetDigitalassetartArtIssuetoexchangeResponse>(DoRequest("1.0", "baas.digitalassetart.art.issuetoexchange.set", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 将该艺术品发布到交易所
         * Summary: 将该艺术品发布到交易所
         */
        public async Task<SetDigitalassetartArtIssuetoexchangeResponse> SetDigitalassetartArtIssuetoexchangeExAsync(SetDigitalassetartArtIssuetoexchangeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SetDigitalassetartArtIssuetoexchangeResponse>(await DoRequestAsync("1.0", "baas.digitalassetart.art.issuetoexchange.set", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 艺术品本链交易
         * Summary: 艺术品本链交易
         */
        public SetDigitalassetartArtTradeResponse SetDigitalassetartArtTrade(SetDigitalassetartArtTradeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SetDigitalassetartArtTradeEx(request, headers, runtime);
        }

        /**
         * Description: 艺术品本链交易
         * Summary: 艺术品本链交易
         */
        public async Task<SetDigitalassetartArtTradeResponse> SetDigitalassetartArtTradeAsync(SetDigitalassetartArtTradeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SetDigitalassetartArtTradeExAsync(request, headers, runtime);
        }

        /**
         * Description: 艺术品本链交易
         * Summary: 艺术品本链交易
         */
        public SetDigitalassetartArtTradeResponse SetDigitalassetartArtTradeEx(SetDigitalassetartArtTradeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SetDigitalassetartArtTradeResponse>(DoRequest("1.0", "baas.digitalassetart.art.trade.set", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 艺术品本链交易
         * Summary: 艺术品本链交易
         */
        public async Task<SetDigitalassetartArtTradeResponse> SetDigitalassetartArtTradeExAsync(SetDigitalassetartArtTradeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SetDigitalassetartArtTradeResponse>(await DoRequestAsync("1.0", "baas.digitalassetart.art.trade.set", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 在交易所交易艺术品
         * Summary: 在交易所交易艺术品
         */
        public SetDigitalassetartArtTradeonexchangeResponse SetDigitalassetartArtTradeonexchange(SetDigitalassetartArtTradeonexchangeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SetDigitalassetartArtTradeonexchangeEx(request, headers, runtime);
        }

        /**
         * Description: 在交易所交易艺术品
         * Summary: 在交易所交易艺术品
         */
        public async Task<SetDigitalassetartArtTradeonexchangeResponse> SetDigitalassetartArtTradeonexchangeAsync(SetDigitalassetartArtTradeonexchangeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SetDigitalassetartArtTradeonexchangeExAsync(request, headers, runtime);
        }

        /**
         * Description: 在交易所交易艺术品
         * Summary: 在交易所交易艺术品
         */
        public SetDigitalassetartArtTradeonexchangeResponse SetDigitalassetartArtTradeonexchangeEx(SetDigitalassetartArtTradeonexchangeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SetDigitalassetartArtTradeonexchangeResponse>(DoRequest("1.0", "baas.digitalassetart.art.tradeonexchange.set", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 在交易所交易艺术品
         * Summary: 在交易所交易艺术品
         */
        public async Task<SetDigitalassetartArtTradeonexchangeResponse> SetDigitalassetartArtTradeonexchangeExAsync(SetDigitalassetartArtTradeonexchangeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SetDigitalassetartArtTradeonexchangeResponse>(await DoRequestAsync("1.0", "baas.digitalassetart.art.tradeonexchange.set", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 冻结艺术品
         * Summary: 冻结艺术品
         */
        public FreezeDigitalassetartArtAccountResponse FreezeDigitalassetartArtAccount(FreezeDigitalassetartArtAccountRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return FreezeDigitalassetartArtAccountEx(request, headers, runtime);
        }

        /**
         * Description: 冻结艺术品
         * Summary: 冻结艺术品
         */
        public async Task<FreezeDigitalassetartArtAccountResponse> FreezeDigitalassetartArtAccountAsync(FreezeDigitalassetartArtAccountRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await FreezeDigitalassetartArtAccountExAsync(request, headers, runtime);
        }

        /**
         * Description: 冻结艺术品
         * Summary: 冻结艺术品
         */
        public FreezeDigitalassetartArtAccountResponse FreezeDigitalassetartArtAccountEx(FreezeDigitalassetartArtAccountRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<FreezeDigitalassetartArtAccountResponse>(DoRequest("1.0", "baas.digitalassetart.art.account.freeze", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 冻结艺术品
         * Summary: 冻结艺术品
         */
        public async Task<FreezeDigitalassetartArtAccountResponse> FreezeDigitalassetartArtAccountExAsync(FreezeDigitalassetartArtAccountRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<FreezeDigitalassetartArtAccountResponse>(await DoRequestAsync("1.0", "baas.digitalassetart.art.account.freeze", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 艺术品解冻
         * Summary: 艺术品解冻
         */
        public UnfreezeDigitalassetartArtAccountResponse UnfreezeDigitalassetartArtAccount(UnfreezeDigitalassetartArtAccountRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UnfreezeDigitalassetartArtAccountEx(request, headers, runtime);
        }

        /**
         * Description: 艺术品解冻
         * Summary: 艺术品解冻
         */
        public async Task<UnfreezeDigitalassetartArtAccountResponse> UnfreezeDigitalassetartArtAccountAsync(UnfreezeDigitalassetartArtAccountRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UnfreezeDigitalassetartArtAccountExAsync(request, headers, runtime);
        }

        /**
         * Description: 艺术品解冻
         * Summary: 艺术品解冻
         */
        public UnfreezeDigitalassetartArtAccountResponse UnfreezeDigitalassetartArtAccountEx(UnfreezeDigitalassetartArtAccountRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UnfreezeDigitalassetartArtAccountResponse>(DoRequest("1.0", "baas.digitalassetart.art.account.unfreeze", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 艺术品解冻
         * Summary: 艺术品解冻
         */
        public async Task<UnfreezeDigitalassetartArtAccountResponse> UnfreezeDigitalassetartArtAccountExAsync(UnfreezeDigitalassetartArtAccountRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UnfreezeDigitalassetartArtAccountResponse>(await DoRequestAsync("1.0", "baas.digitalassetart.art.account.unfreeze", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 取消在交易所发布艺术品
         * Summary: 取消在交易所发布艺术品
         */
        public SetDigitalassetartArtUnissuetoexchangeResponse SetDigitalassetartArtUnissuetoexchange(SetDigitalassetartArtUnissuetoexchangeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SetDigitalassetartArtUnissuetoexchangeEx(request, headers, runtime);
        }

        /**
         * Description: 取消在交易所发布艺术品
         * Summary: 取消在交易所发布艺术品
         */
        public async Task<SetDigitalassetartArtUnissuetoexchangeResponse> SetDigitalassetartArtUnissuetoexchangeAsync(SetDigitalassetartArtUnissuetoexchangeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SetDigitalassetartArtUnissuetoexchangeExAsync(request, headers, runtime);
        }

        /**
         * Description: 取消在交易所发布艺术品
         * Summary: 取消在交易所发布艺术品
         */
        public SetDigitalassetartArtUnissuetoexchangeResponse SetDigitalassetartArtUnissuetoexchangeEx(SetDigitalassetartArtUnissuetoexchangeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SetDigitalassetartArtUnissuetoexchangeResponse>(DoRequest("1.0", "baas.digitalassetart.art.unissuetoexchange.set", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 取消在交易所发布艺术品
         * Summary: 取消在交易所发布艺术品
         */
        public async Task<SetDigitalassetartArtUnissuetoexchangeResponse> SetDigitalassetartArtUnissuetoexchangeExAsync(SetDigitalassetartArtUnissuetoexchangeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SetDigitalassetartArtUnissuetoexchangeResponse>(await DoRequestAsync("1.0", "baas.digitalassetart.art.unissuetoexchange.set", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询艺术品信息
         * Summary: 查询艺术品信息
         */
        public QueryDigitalassetartArtResponse QueryDigitalassetartArt(QueryDigitalassetartArtRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDigitalassetartArtEx(request, headers, runtime);
        }

        /**
         * Description: 查询艺术品信息
         * Summary: 查询艺术品信息
         */
        public async Task<QueryDigitalassetartArtResponse> QueryDigitalassetartArtAsync(QueryDigitalassetartArtRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDigitalassetartArtExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询艺术品信息
         * Summary: 查询艺术品信息
         */
        public QueryDigitalassetartArtResponse QueryDigitalassetartArtEx(QueryDigitalassetartArtRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDigitalassetartArtResponse>(DoRequest("1.0", "baas.digitalassetart.art.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询艺术品信息
         * Summary: 查询艺术品信息
         */
        public async Task<QueryDigitalassetartArtResponse> QueryDigitalassetartArtExAsync(QueryDigitalassetartArtRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDigitalassetartArtResponse>(await DoRequestAsync("1.0", "baas.digitalassetart.art.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数字资产管理平台业务方账户映射接口
         * Summary: 数字资产管理平台业务方账户映射
         */
        public CreateDigitalassetExchangeAccountmapResponse CreateDigitalassetExchangeAccountmap(CreateDigitalassetExchangeAccountmapRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDigitalassetExchangeAccountmapEx(request, headers, runtime);
        }

        /**
         * Description: 数字资产管理平台业务方账户映射接口
         * Summary: 数字资产管理平台业务方账户映射
         */
        public async Task<CreateDigitalassetExchangeAccountmapResponse> CreateDigitalassetExchangeAccountmapAsync(CreateDigitalassetExchangeAccountmapRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDigitalassetExchangeAccountmapExAsync(request, headers, runtime);
        }

        /**
         * Description: 数字资产管理平台业务方账户映射接口
         * Summary: 数字资产管理平台业务方账户映射
         */
        public CreateDigitalassetExchangeAccountmapResponse CreateDigitalassetExchangeAccountmapEx(CreateDigitalassetExchangeAccountmapRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDigitalassetExchangeAccountmapResponse>(DoRequest("1.0", "baas.digitalasset.exchange.accountmap.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数字资产管理平台业务方账户映射接口
         * Summary: 数字资产管理平台业务方账户映射
         */
        public async Task<CreateDigitalassetExchangeAccountmapResponse> CreateDigitalassetExchangeAccountmapExAsync(CreateDigitalassetExchangeAccountmapRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDigitalassetExchangeAccountmapResponse>(await DoRequestAsync("1.0", "baas.digitalasset.exchange.accountmap.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数字资产管理平台用户账户批量映射接口
         * Summary: 数字资产管理平台用户账户批量映射
         */
        public BatchcreateDigitalassetExchangeAccountmapResponse BatchcreateDigitalassetExchangeAccountmap(BatchcreateDigitalassetExchangeAccountmapRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return BatchcreateDigitalassetExchangeAccountmapEx(request, headers, runtime);
        }

        /**
         * Description: 数字资产管理平台用户账户批量映射接口
         * Summary: 数字资产管理平台用户账户批量映射
         */
        public async Task<BatchcreateDigitalassetExchangeAccountmapResponse> BatchcreateDigitalassetExchangeAccountmapAsync(BatchcreateDigitalassetExchangeAccountmapRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await BatchcreateDigitalassetExchangeAccountmapExAsync(request, headers, runtime);
        }

        /**
         * Description: 数字资产管理平台用户账户批量映射接口
         * Summary: 数字资产管理平台用户账户批量映射
         */
        public BatchcreateDigitalassetExchangeAccountmapResponse BatchcreateDigitalassetExchangeAccountmapEx(BatchcreateDigitalassetExchangeAccountmapRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BatchcreateDigitalassetExchangeAccountmapResponse>(DoRequest("1.0", "baas.digitalasset.exchange.accountmap.batchcreate", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数字资产管理平台用户账户批量映射接口
         * Summary: 数字资产管理平台用户账户批量映射
         */
        public async Task<BatchcreateDigitalassetExchangeAccountmapResponse> BatchcreateDigitalassetExchangeAccountmapExAsync(BatchcreateDigitalassetExchangeAccountmapRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BatchcreateDigitalassetExchangeAccountmapResponse>(await DoRequestAsync("1.0", "baas.digitalasset.exchange.accountmap.batchcreate", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数字资产管理平台版通解限接口
         * Summary: 数字资产管理平台版通解限
         */
        public StartDigitalassetExchangeUnfreezeResponse StartDigitalassetExchangeUnfreeze(StartDigitalassetExchangeUnfreezeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDigitalassetExchangeUnfreezeEx(request, headers, runtime);
        }

        /**
         * Description: 数字资产管理平台版通解限接口
         * Summary: 数字资产管理平台版通解限
         */
        public async Task<StartDigitalassetExchangeUnfreezeResponse> StartDigitalassetExchangeUnfreezeAsync(StartDigitalassetExchangeUnfreezeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDigitalassetExchangeUnfreezeExAsync(request, headers, runtime);
        }

        /**
         * Description: 数字资产管理平台版通解限接口
         * Summary: 数字资产管理平台版通解限
         */
        public StartDigitalassetExchangeUnfreezeResponse StartDigitalassetExchangeUnfreezeEx(StartDigitalassetExchangeUnfreezeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDigitalassetExchangeUnfreezeResponse>(DoRequest("1.0", "baas.digitalasset.exchange.unfreeze.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数字资产管理平台版通解限接口
         * Summary: 数字资产管理平台版通解限
         */
        public async Task<StartDigitalassetExchangeUnfreezeResponse> StartDigitalassetExchangeUnfreezeExAsync(StartDigitalassetExchangeUnfreezeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDigitalassetExchangeUnfreezeResponse>(await DoRequestAsync("1.0", "baas.digitalasset.exchange.unfreeze.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数字资产管理平台资源管理 处理用户、版通的锁定与解锁
        1. ep_code有值，user_account为空时，对指定版通进行锁定解锁操作
        2. ep_code为空，user_account有值时，对指定账户进行锁定解锁操作
        3. ep_code，user_account均有值时，对指定账户的版通进行锁定解锁操作
        4. ep_code，user_account均为空时，对全交易所进行锁定解锁操作，需谨慎
         * Summary: 数字资产管理平台资源管理
         */
        public StartDigitalassetExchangeLockpositionResponse StartDigitalassetExchangeLockposition(StartDigitalassetExchangeLockpositionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDigitalassetExchangeLockpositionEx(request, headers, runtime);
        }

        /**
         * Description: 数字资产管理平台资源管理 处理用户、版通的锁定与解锁
        1. ep_code有值，user_account为空时，对指定版通进行锁定解锁操作
        2. ep_code为空，user_account有值时，对指定账户进行锁定解锁操作
        3. ep_code，user_account均有值时，对指定账户的版通进行锁定解锁操作
        4. ep_code，user_account均为空时，对全交易所进行锁定解锁操作，需谨慎
         * Summary: 数字资产管理平台资源管理
         */
        public async Task<StartDigitalassetExchangeLockpositionResponse> StartDigitalassetExchangeLockpositionAsync(StartDigitalassetExchangeLockpositionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDigitalassetExchangeLockpositionExAsync(request, headers, runtime);
        }

        /**
         * Description: 数字资产管理平台资源管理 处理用户、版通的锁定与解锁
        1. ep_code有值，user_account为空时，对指定版通进行锁定解锁操作
        2. ep_code为空，user_account有值时，对指定账户进行锁定解锁操作
        3. ep_code，user_account均有值时，对指定账户的版通进行锁定解锁操作
        4. ep_code，user_account均为空时，对全交易所进行锁定解锁操作，需谨慎
         * Summary: 数字资产管理平台资源管理
         */
        public StartDigitalassetExchangeLockpositionResponse StartDigitalassetExchangeLockpositionEx(StartDigitalassetExchangeLockpositionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDigitalassetExchangeLockpositionResponse>(DoRequest("1.0", "baas.digitalasset.exchange.lockposition.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数字资产管理平台资源管理 处理用户、版通的锁定与解锁
        1. ep_code有值，user_account为空时，对指定版通进行锁定解锁操作
        2. ep_code为空，user_account有值时，对指定账户进行锁定解锁操作
        3. ep_code，user_account均有值时，对指定账户的版通进行锁定解锁操作
        4. ep_code，user_account均为空时，对全交易所进行锁定解锁操作，需谨慎
         * Summary: 数字资产管理平台资源管理
         */
        public async Task<StartDigitalassetExchangeLockpositionResponse> StartDigitalassetExchangeLockpositionExAsync(StartDigitalassetExchangeLockpositionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDigitalassetExchangeLockpositionResponse>(await DoRequestAsync("1.0", "baas.digitalasset.exchange.lockposition.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数字资产管理平台版通发行接口
         * Summary: 数字资产管理平台版通发行
         */
        public CreateDigitalassetExchangeEpissueResponse CreateDigitalassetExchangeEpissue(CreateDigitalassetExchangeEpissueRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDigitalassetExchangeEpissueEx(request, headers, runtime);
        }

        /**
         * Description: 数字资产管理平台版通发行接口
         * Summary: 数字资产管理平台版通发行
         */
        public async Task<CreateDigitalassetExchangeEpissueResponse> CreateDigitalassetExchangeEpissueAsync(CreateDigitalassetExchangeEpissueRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDigitalassetExchangeEpissueExAsync(request, headers, runtime);
        }

        /**
         * Description: 数字资产管理平台版通发行接口
         * Summary: 数字资产管理平台版通发行
         */
        public CreateDigitalassetExchangeEpissueResponse CreateDigitalassetExchangeEpissueEx(CreateDigitalassetExchangeEpissueRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDigitalassetExchangeEpissueResponse>(DoRequest("1.0", "baas.digitalasset.exchange.epissue.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数字资产管理平台版通发行接口
         * Summary: 数字资产管理平台版通发行
         */
        public async Task<CreateDigitalassetExchangeEpissueResponse> CreateDigitalassetExchangeEpissueExAsync(CreateDigitalassetExchangeEpissueRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDigitalassetExchangeEpissueResponse>(await DoRequestAsync("1.0", "baas.digitalasset.exchange.epissue.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数字资产管理平台版通存量发行接口
         * Summary: 数字资产管理平台版通存量发行
         */
        public CreateDigitalassetExchangeEpstockissueResponse CreateDigitalassetExchangeEpstockissue(CreateDigitalassetExchangeEpstockissueRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDigitalassetExchangeEpstockissueEx(request, headers, runtime);
        }

        /**
         * Description: 数字资产管理平台版通存量发行接口
         * Summary: 数字资产管理平台版通存量发行
         */
        public async Task<CreateDigitalassetExchangeEpstockissueResponse> CreateDigitalassetExchangeEpstockissueAsync(CreateDigitalassetExchangeEpstockissueRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDigitalassetExchangeEpstockissueExAsync(request, headers, runtime);
        }

        /**
         * Description: 数字资产管理平台版通存量发行接口
         * Summary: 数字资产管理平台版通存量发行
         */
        public CreateDigitalassetExchangeEpstockissueResponse CreateDigitalassetExchangeEpstockissueEx(CreateDigitalassetExchangeEpstockissueRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDigitalassetExchangeEpstockissueResponse>(DoRequest("1.0", "baas.digitalasset.exchange.epstockissue.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数字资产管理平台版通存量发行接口
         * Summary: 数字资产管理平台版通存量发行
         */
        public async Task<CreateDigitalassetExchangeEpstockissueResponse> CreateDigitalassetExchangeEpstockissueExAsync(CreateDigitalassetExchangeEpstockissueRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDigitalassetExchangeEpstockissueResponse>(await DoRequestAsync("1.0", "baas.digitalasset.exchange.epstockissue.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数字资产管理平台版通批发接口
         * Summary: 数字资产管理平台版通批发
         */
        public StartDigitalassetExchangeEpwholesaleResponse StartDigitalassetExchangeEpwholesale(StartDigitalassetExchangeEpwholesaleRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDigitalassetExchangeEpwholesaleEx(request, headers, runtime);
        }

        /**
         * Description: 数字资产管理平台版通批发接口
         * Summary: 数字资产管理平台版通批发
         */
        public async Task<StartDigitalassetExchangeEpwholesaleResponse> StartDigitalassetExchangeEpwholesaleAsync(StartDigitalassetExchangeEpwholesaleRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDigitalassetExchangeEpwholesaleExAsync(request, headers, runtime);
        }

        /**
         * Description: 数字资产管理平台版通批发接口
         * Summary: 数字资产管理平台版通批发
         */
        public StartDigitalassetExchangeEpwholesaleResponse StartDigitalassetExchangeEpwholesaleEx(StartDigitalassetExchangeEpwholesaleRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDigitalassetExchangeEpwholesaleResponse>(DoRequest("1.0", "baas.digitalasset.exchange.epwholesale.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数字资产管理平台版通批发接口
         * Summary: 数字资产管理平台版通批发
         */
        public async Task<StartDigitalassetExchangeEpwholesaleResponse> StartDigitalassetExchangeEpwholesaleExAsync(StartDigitalassetExchangeEpwholesaleRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDigitalassetExchangeEpwholesaleResponse>(await DoRequestAsync("1.0", "baas.digitalasset.exchange.epwholesale.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数字资产管理平台版通信息查询接口
         * Summary: 数字资产管理平台版通信息查询
         */
        public QueryDigitalassetExchangeEpinfoResponse QueryDigitalassetExchangeEpinfo(QueryDigitalassetExchangeEpinfoRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDigitalassetExchangeEpinfoEx(request, headers, runtime);
        }

        /**
         * Description: 数字资产管理平台版通信息查询接口
         * Summary: 数字资产管理平台版通信息查询
         */
        public async Task<QueryDigitalassetExchangeEpinfoResponse> QueryDigitalassetExchangeEpinfoAsync(QueryDigitalassetExchangeEpinfoRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDigitalassetExchangeEpinfoExAsync(request, headers, runtime);
        }

        /**
         * Description: 数字资产管理平台版通信息查询接口
         * Summary: 数字资产管理平台版通信息查询
         */
        public QueryDigitalassetExchangeEpinfoResponse QueryDigitalassetExchangeEpinfoEx(QueryDigitalassetExchangeEpinfoRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDigitalassetExchangeEpinfoResponse>(DoRequest("1.0", "baas.digitalasset.exchange.epinfo.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数字资产管理平台版通信息查询接口
         * Summary: 数字资产管理平台版通信息查询
         */
        public async Task<QueryDigitalassetExchangeEpinfoResponse> QueryDigitalassetExchangeEpinfoExAsync(QueryDigitalassetExchangeEpinfoRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDigitalassetExchangeEpinfoResponse>(await DoRequestAsync("1.0", "baas.digitalasset.exchange.epinfo.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数字资产管理平台交易查询接口
        1. ep_code有值，user_account为空时，查询版通的交易信息
        2. ep_code为空，user_account有值时，查询账户的交易信息
        3. ep_code，user_account均有值时，查询账户下指定版通的交易信息
         * Summary: 数字资产管理平台交易查询
         */
        public QueryDigitalassetExchangeEptradeResponse QueryDigitalassetExchangeEptrade(QueryDigitalassetExchangeEptradeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDigitalassetExchangeEptradeEx(request, headers, runtime);
        }

        /**
         * Description: 数字资产管理平台交易查询接口
        1. ep_code有值，user_account为空时，查询版通的交易信息
        2. ep_code为空，user_account有值时，查询账户的交易信息
        3. ep_code，user_account均有值时，查询账户下指定版通的交易信息
         * Summary: 数字资产管理平台交易查询
         */
        public async Task<QueryDigitalassetExchangeEptradeResponse> QueryDigitalassetExchangeEptradeAsync(QueryDigitalassetExchangeEptradeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDigitalassetExchangeEptradeExAsync(request, headers, runtime);
        }

        /**
         * Description: 数字资产管理平台交易查询接口
        1. ep_code有值，user_account为空时，查询版通的交易信息
        2. ep_code为空，user_account有值时，查询账户的交易信息
        3. ep_code，user_account均有值时，查询账户下指定版通的交易信息
         * Summary: 数字资产管理平台交易查询
         */
        public QueryDigitalassetExchangeEptradeResponse QueryDigitalassetExchangeEptradeEx(QueryDigitalassetExchangeEptradeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDigitalassetExchangeEptradeResponse>(DoRequest("1.0", "baas.digitalasset.exchange.eptrade.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数字资产管理平台交易查询接口
        1. ep_code有值，user_account为空时，查询版通的交易信息
        2. ep_code为空，user_account有值时，查询账户的交易信息
        3. ep_code，user_account均有值时，查询账户下指定版通的交易信息
         * Summary: 数字资产管理平台交易查询
         */
        public async Task<QueryDigitalassetExchangeEptradeResponse> QueryDigitalassetExchangeEptradeExAsync(QueryDigitalassetExchangeEptradeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDigitalassetExchangeEptradeResponse>(await DoRequestAsync("1.0", "baas.digitalasset.exchange.eptrade.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数字资产管理平台账户信息查询接口
         * Summary: 数字资产管理平台账户信息查询
         */
        public QueryDigitalassetExchangeEpaccountResponse QueryDigitalassetExchangeEpaccount(QueryDigitalassetExchangeEpaccountRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDigitalassetExchangeEpaccountEx(request, headers, runtime);
        }

        /**
         * Description: 数字资产管理平台账户信息查询接口
         * Summary: 数字资产管理平台账户信息查询
         */
        public async Task<QueryDigitalassetExchangeEpaccountResponse> QueryDigitalassetExchangeEpaccountAsync(QueryDigitalassetExchangeEpaccountRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDigitalassetExchangeEpaccountExAsync(request, headers, runtime);
        }

        /**
         * Description: 数字资产管理平台账户信息查询接口
         * Summary: 数字资产管理平台账户信息查询
         */
        public QueryDigitalassetExchangeEpaccountResponse QueryDigitalassetExchangeEpaccountEx(QueryDigitalassetExchangeEpaccountRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDigitalassetExchangeEpaccountResponse>(DoRequest("1.0", "baas.digitalasset.exchange.epaccount.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数字资产管理平台账户信息查询接口
         * Summary: 数字资产管理平台账户信息查询
         */
        public async Task<QueryDigitalassetExchangeEpaccountResponse> QueryDigitalassetExchangeEpaccountExAsync(QueryDigitalassetExchangeEpaccountRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDigitalassetExchangeEpaccountResponse>(await DoRequestAsync("1.0", "baas.digitalasset.exchange.epaccount.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数字资产管理平台交易接口
         * Summary: 数字资产管理平台交易
         */
        public StartDigitalassetExchangeEptradeResponse StartDigitalassetExchangeEptrade(StartDigitalassetExchangeEptradeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDigitalassetExchangeEptradeEx(request, headers, runtime);
        }

        /**
         * Description: 数字资产管理平台交易接口
         * Summary: 数字资产管理平台交易
         */
        public async Task<StartDigitalassetExchangeEptradeResponse> StartDigitalassetExchangeEptradeAsync(StartDigitalassetExchangeEptradeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDigitalassetExchangeEptradeExAsync(request, headers, runtime);
        }

        /**
         * Description: 数字资产管理平台交易接口
         * Summary: 数字资产管理平台交易
         */
        public StartDigitalassetExchangeEptradeResponse StartDigitalassetExchangeEptradeEx(StartDigitalassetExchangeEptradeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDigitalassetExchangeEptradeResponse>(DoRequest("1.0", "baas.digitalasset.exchange.eptrade.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数字资产管理平台交易接口
         * Summary: 数字资产管理平台交易
         */
        public async Task<StartDigitalassetExchangeEptradeResponse> StartDigitalassetExchangeEptradeExAsync(StartDigitalassetExchangeEptradeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDigitalassetExchangeEptradeResponse>(await DoRequestAsync("1.0", "baas.digitalasset.exchange.eptrade.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数字资产管理平台版通回购接口
         * Summary: 数字资产管理平台版通回购
         */
        public StartDigitalassetExchangeEpbuybackResponse StartDigitalassetExchangeEpbuyback(StartDigitalassetExchangeEpbuybackRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDigitalassetExchangeEpbuybackEx(request, headers, runtime);
        }

        /**
         * Description: 数字资产管理平台版通回购接口
         * Summary: 数字资产管理平台版通回购
         */
        public async Task<StartDigitalassetExchangeEpbuybackResponse> StartDigitalassetExchangeEpbuybackAsync(StartDigitalassetExchangeEpbuybackRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDigitalassetExchangeEpbuybackExAsync(request, headers, runtime);
        }

        /**
         * Description: 数字资产管理平台版通回购接口
         * Summary: 数字资产管理平台版通回购
         */
        public StartDigitalassetExchangeEpbuybackResponse StartDigitalassetExchangeEpbuybackEx(StartDigitalassetExchangeEpbuybackRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDigitalassetExchangeEpbuybackResponse>(DoRequest("1.0", "baas.digitalasset.exchange.epbuyback.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数字资产管理平台版通回购接口
         * Summary: 数字资产管理平台版通回购
         */
        public async Task<StartDigitalassetExchangeEpbuybackResponse> StartDigitalassetExchangeEpbuybackExAsync(StartDigitalassetExchangeEpbuybackRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDigitalassetExchangeEpbuybackResponse>(await DoRequestAsync("1.0", "baas.digitalasset.exchange.epbuyback.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建用户接口
         * Summary: 创建用户接口
         */
        public CreateDistributionUserResponse CreateDistributionUser(CreateDistributionUserRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDistributionUserEx(request, headers, runtime);
        }

        /**
         * Description: 创建用户接口
         * Summary: 创建用户接口
         */
        public async Task<CreateDistributionUserResponse> CreateDistributionUserAsync(CreateDistributionUserRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDistributionUserExAsync(request, headers, runtime);
        }

        /**
         * Description: 创建用户接口
         * Summary: 创建用户接口
         */
        public CreateDistributionUserResponse CreateDistributionUserEx(CreateDistributionUserRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDistributionUserResponse>(DoRequest("1.0", "baas.distribution.user.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建用户接口
         * Summary: 创建用户接口
         */
        public async Task<CreateDistributionUserResponse> CreateDistributionUserExAsync(CreateDistributionUserRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDistributionUserResponse>(await DoRequestAsync("1.0", "baas.distribution.user.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户下级分销关系查询
         * Summary: 用户下级分销关系查询
         */
        public QueryDistributionUserTeamResponse QueryDistributionUserTeam(QueryDistributionUserTeamRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDistributionUserTeamEx(request, headers, runtime);
        }

        /**
         * Description: 用户下级分销关系查询
         * Summary: 用户下级分销关系查询
         */
        public async Task<QueryDistributionUserTeamResponse> QueryDistributionUserTeamAsync(QueryDistributionUserTeamRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDistributionUserTeamExAsync(request, headers, runtime);
        }

        /**
         * Description: 用户下级分销关系查询
         * Summary: 用户下级分销关系查询
         */
        public QueryDistributionUserTeamResponse QueryDistributionUserTeamEx(QueryDistributionUserTeamRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDistributionUserTeamResponse>(DoRequest("1.0", "baas.distribution.user.team.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户下级分销关系查询
         * Summary: 用户下级分销关系查询
         */
        public async Task<QueryDistributionUserTeamResponse> QueryDistributionUserTeamExAsync(QueryDistributionUserTeamRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDistributionUserTeamResponse>(await DoRequestAsync("1.0", "baas.distribution.user.team.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建商户接口
         * Summary: 创建商户
         */
        public CreateDistributionShopResponse CreateDistributionShop(CreateDistributionShopRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDistributionShopEx(request, headers, runtime);
        }

        /**
         * Description: 创建商户接口
         * Summary: 创建商户
         */
        public async Task<CreateDistributionShopResponse> CreateDistributionShopAsync(CreateDistributionShopRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDistributionShopExAsync(request, headers, runtime);
        }

        /**
         * Description: 创建商户接口
         * Summary: 创建商户
         */
        public CreateDistributionShopResponse CreateDistributionShopEx(CreateDistributionShopRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDistributionShopResponse>(DoRequest("1.0", "baas.distribution.shop.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建商户接口
         * Summary: 创建商户
         */
        public async Task<CreateDistributionShopResponse> CreateDistributionShopExAsync(CreateDistributionShopRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDistributionShopResponse>(await DoRequestAsync("1.0", "baas.distribution.shop.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户之间分销关系建立
         * Summary: 用户之间分销关系建立
         */
        public CreateDistributionUserRelationResponse CreateDistributionUserRelation(CreateDistributionUserRelationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDistributionUserRelationEx(request, headers, runtime);
        }

        /**
         * Description: 用户之间分销关系建立
         * Summary: 用户之间分销关系建立
         */
        public async Task<CreateDistributionUserRelationResponse> CreateDistributionUserRelationAsync(CreateDistributionUserRelationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDistributionUserRelationExAsync(request, headers, runtime);
        }

        /**
         * Description: 用户之间分销关系建立
         * Summary: 用户之间分销关系建立
         */
        public CreateDistributionUserRelationResponse CreateDistributionUserRelationEx(CreateDistributionUserRelationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDistributionUserRelationResponse>(DoRequest("1.0", "baas.distribution.user.relation.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户之间分销关系建立
         * Summary: 用户之间分销关系建立
         */
        public async Task<CreateDistributionUserRelationResponse> CreateDistributionUserRelationExAsync(CreateDistributionUserRelationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDistributionUserRelationResponse>(await DoRequestAsync("1.0", "baas.distribution.user.relation.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销合约初始化
         * Summary: 营销分销合约初始化
         */
        public InitDistributionContractResponse InitDistributionContract(InitDistributionContractRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return InitDistributionContractEx(request, headers, runtime);
        }

        /**
         * Description: 营销分销合约初始化
         * Summary: 营销分销合约初始化
         */
        public async Task<InitDistributionContractResponse> InitDistributionContractAsync(InitDistributionContractRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await InitDistributionContractExAsync(request, headers, runtime);
        }

        /**
         * Description: 营销分销合约初始化
         * Summary: 营销分销合约初始化
         */
        public InitDistributionContractResponse InitDistributionContractEx(InitDistributionContractRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitDistributionContractResponse>(DoRequest("1.0", "baas.distribution.contract.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销合约初始化
         * Summary: 营销分销合约初始化
         */
        public async Task<InitDistributionContractResponse> InitDistributionContractExAsync(InitDistributionContractRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitDistributionContractResponse>(await DoRequestAsync("1.0", "baas.distribution.contract.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销平台商品创建
         * Summary: 营销分销平台商品创建
         */
        public CreateDistributionProductItemResponse CreateDistributionProductItem(CreateDistributionProductItemRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDistributionProductItemEx(request, headers, runtime);
        }

        /**
         * Description: 营销分销平台商品创建
         * Summary: 营销分销平台商品创建
         */
        public async Task<CreateDistributionProductItemResponse> CreateDistributionProductItemAsync(CreateDistributionProductItemRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDistributionProductItemExAsync(request, headers, runtime);
        }

        /**
         * Description: 营销分销平台商品创建
         * Summary: 营销分销平台商品创建
         */
        public CreateDistributionProductItemResponse CreateDistributionProductItemEx(CreateDistributionProductItemRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDistributionProductItemResponse>(DoRequest("1.0", "baas.distribution.product.item.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销平台商品创建
         * Summary: 营销分销平台商品创建
         */
        public async Task<CreateDistributionProductItemResponse> CreateDistributionProductItemExAsync(CreateDistributionProductItemRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDistributionProductItemResponse>(await DoRequestAsync("1.0", "baas.distribution.product.item.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销平台商品查询
         * Summary: 营销分销平台商品查询
         */
        public QueryDistributionProductItemResponse QueryDistributionProductItem(QueryDistributionProductItemRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDistributionProductItemEx(request, headers, runtime);
        }

        /**
         * Description: 营销分销平台商品查询
         * Summary: 营销分销平台商品查询
         */
        public async Task<QueryDistributionProductItemResponse> QueryDistributionProductItemAsync(QueryDistributionProductItemRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDistributionProductItemExAsync(request, headers, runtime);
        }

        /**
         * Description: 营销分销平台商品查询
         * Summary: 营销分销平台商品查询
         */
        public QueryDistributionProductItemResponse QueryDistributionProductItemEx(QueryDistributionProductItemRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDistributionProductItemResponse>(DoRequest("1.0", "baas.distribution.product.item.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销平台商品查询
         * Summary: 营销分销平台商品查询
         */
        public async Task<QueryDistributionProductItemResponse> QueryDistributionProductItemExAsync(QueryDistributionProductItemRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDistributionProductItemResponse>(await DoRequestAsync("1.0", "baas.distribution.product.item.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销平台推广人钱包更新
         * Summary: 营销分销平台推广人钱包更新
         */
        public UpdateDistributionFundPromoterResponse UpdateDistributionFundPromoter(UpdateDistributionFundPromoterRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateDistributionFundPromoterEx(request, headers, runtime);
        }

        /**
         * Description: 营销分销平台推广人钱包更新
         * Summary: 营销分销平台推广人钱包更新
         */
        public async Task<UpdateDistributionFundPromoterResponse> UpdateDistributionFundPromoterAsync(UpdateDistributionFundPromoterRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateDistributionFundPromoterExAsync(request, headers, runtime);
        }

        /**
         * Description: 营销分销平台推广人钱包更新
         * Summary: 营销分销平台推广人钱包更新
         */
        public UpdateDistributionFundPromoterResponse UpdateDistributionFundPromoterEx(UpdateDistributionFundPromoterRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDistributionFundPromoterResponse>(DoRequest("1.0", "baas.distribution.fund.promoter.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销平台推广人钱包更新
         * Summary: 营销分销平台推广人钱包更新
         */
        public async Task<UpdateDistributionFundPromoterResponse> UpdateDistributionFundPromoterExAsync(UpdateDistributionFundPromoterRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDistributionFundPromoterResponse>(await DoRequestAsync("1.0", "baas.distribution.fund.promoter.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销平台商户账户更新
         * Summary: 营销分销平台商户账户更新
         */
        public UpdateDistributionFundShopResponse UpdateDistributionFundShop(UpdateDistributionFundShopRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateDistributionFundShopEx(request, headers, runtime);
        }

        /**
         * Description: 营销分销平台商户账户更新
         * Summary: 营销分销平台商户账户更新
         */
        public async Task<UpdateDistributionFundShopResponse> UpdateDistributionFundShopAsync(UpdateDistributionFundShopRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateDistributionFundShopExAsync(request, headers, runtime);
        }

        /**
         * Description: 营销分销平台商户账户更新
         * Summary: 营销分销平台商户账户更新
         */
        public UpdateDistributionFundShopResponse UpdateDistributionFundShopEx(UpdateDistributionFundShopRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDistributionFundShopResponse>(DoRequest("1.0", "baas.distribution.fund.shop.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销平台商户账户更新
         * Summary: 营销分销平台商户账户更新
         */
        public async Task<UpdateDistributionFundShopResponse> UpdateDistributionFundShopExAsync(UpdateDistributionFundShopRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDistributionFundShopResponse>(await DoRequestAsync("1.0", "baas.distribution.fund.shop.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销平台推广人账户查询
         * Summary: 营销分销平台推广人账户查询
         */
        public QueryDistributionFundPromoterResponse QueryDistributionFundPromoter(QueryDistributionFundPromoterRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDistributionFundPromoterEx(request, headers, runtime);
        }

        /**
         * Description: 营销分销平台推广人账户查询
         * Summary: 营销分销平台推广人账户查询
         */
        public async Task<QueryDistributionFundPromoterResponse> QueryDistributionFundPromoterAsync(QueryDistributionFundPromoterRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDistributionFundPromoterExAsync(request, headers, runtime);
        }

        /**
         * Description: 营销分销平台推广人账户查询
         * Summary: 营销分销平台推广人账户查询
         */
        public QueryDistributionFundPromoterResponse QueryDistributionFundPromoterEx(QueryDistributionFundPromoterRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDistributionFundPromoterResponse>(DoRequest("1.0", "baas.distribution.fund.promoter.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销平台推广人账户查询
         * Summary: 营销分销平台推广人账户查询
         */
        public async Task<QueryDistributionFundPromoterResponse> QueryDistributionFundPromoterExAsync(QueryDistributionFundPromoterRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDistributionFundPromoterResponse>(await DoRequestAsync("1.0", "baas.distribution.fund.promoter.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销平台商户账户查询
         * Summary: 营销分销平台商户账户查询
         */
        public QueryDistributionFundShopResponse QueryDistributionFundShop(QueryDistributionFundShopRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDistributionFundShopEx(request, headers, runtime);
        }

        /**
         * Description: 营销分销平台商户账户查询
         * Summary: 营销分销平台商户账户查询
         */
        public async Task<QueryDistributionFundShopResponse> QueryDistributionFundShopAsync(QueryDistributionFundShopRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDistributionFundShopExAsync(request, headers, runtime);
        }

        /**
         * Description: 营销分销平台商户账户查询
         * Summary: 营销分销平台商户账户查询
         */
        public QueryDistributionFundShopResponse QueryDistributionFundShopEx(QueryDistributionFundShopRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDistributionFundShopResponse>(DoRequest("1.0", "baas.distribution.fund.shop.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销平台商户账户查询
         * Summary: 营销分销平台商户账户查询
         */
        public async Task<QueryDistributionFundShopResponse> QueryDistributionFundShopExAsync(QueryDistributionFundShopRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDistributionFundShopResponse>(await DoRequestAsync("1.0", "baas.distribution.fund.shop.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销平台推广人账户流水查询
         * Summary: 营销分销平台推广人账户流水查询
         */
        public QueryDistributionFundPromoterflowResponse QueryDistributionFundPromoterflow(QueryDistributionFundPromoterflowRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDistributionFundPromoterflowEx(request, headers, runtime);
        }

        /**
         * Description: 营销分销平台推广人账户流水查询
         * Summary: 营销分销平台推广人账户流水查询
         */
        public async Task<QueryDistributionFundPromoterflowResponse> QueryDistributionFundPromoterflowAsync(QueryDistributionFundPromoterflowRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDistributionFundPromoterflowExAsync(request, headers, runtime);
        }

        /**
         * Description: 营销分销平台推广人账户流水查询
         * Summary: 营销分销平台推广人账户流水查询
         */
        public QueryDistributionFundPromoterflowResponse QueryDistributionFundPromoterflowEx(QueryDistributionFundPromoterflowRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDistributionFundPromoterflowResponse>(DoRequest("1.0", "baas.distribution.fund.promoterflow.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销平台推广人账户流水查询
         * Summary: 营销分销平台推广人账户流水查询
         */
        public async Task<QueryDistributionFundPromoterflowResponse> QueryDistributionFundPromoterflowExAsync(QueryDistributionFundPromoterflowRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDistributionFundPromoterflowResponse>(await DoRequestAsync("1.0", "baas.distribution.fund.promoterflow.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销平台推广订单创建
         * Summary: 营销分销平台推广订单创建
         */
        public CreateDistributionOrderPromoterResponse CreateDistributionOrderPromoter(CreateDistributionOrderPromoterRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDistributionOrderPromoterEx(request, headers, runtime);
        }

        /**
         * Description: 营销分销平台推广订单创建
         * Summary: 营销分销平台推广订单创建
         */
        public async Task<CreateDistributionOrderPromoterResponse> CreateDistributionOrderPromoterAsync(CreateDistributionOrderPromoterRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDistributionOrderPromoterExAsync(request, headers, runtime);
        }

        /**
         * Description: 营销分销平台推广订单创建
         * Summary: 营销分销平台推广订单创建
         */
        public CreateDistributionOrderPromoterResponse CreateDistributionOrderPromoterEx(CreateDistributionOrderPromoterRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDistributionOrderPromoterResponse>(DoRequest("1.0", "baas.distribution.order.promoter.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销平台推广订单创建
         * Summary: 营销分销平台推广订单创建
         */
        public async Task<CreateDistributionOrderPromoterResponse> CreateDistributionOrderPromoterExAsync(CreateDistributionOrderPromoterRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDistributionOrderPromoterResponse>(await DoRequestAsync("1.0", "baas.distribution.order.promoter.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销平台购买订单创建
         * Summary: 营销分销平台购买订单创建
         */
        public CreateDistributionOrderTradeResponse CreateDistributionOrderTrade(CreateDistributionOrderTradeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDistributionOrderTradeEx(request, headers, runtime);
        }

        /**
         * Description: 营销分销平台购买订单创建
         * Summary: 营销分销平台购买订单创建
         */
        public async Task<CreateDistributionOrderTradeResponse> CreateDistributionOrderTradeAsync(CreateDistributionOrderTradeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDistributionOrderTradeExAsync(request, headers, runtime);
        }

        /**
         * Description: 营销分销平台购买订单创建
         * Summary: 营销分销平台购买订单创建
         */
        public CreateDistributionOrderTradeResponse CreateDistributionOrderTradeEx(CreateDistributionOrderTradeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDistributionOrderTradeResponse>(DoRequest("1.0", "baas.distribution.order.trade.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销平台购买订单创建
         * Summary: 营销分销平台购买订单创建
         */
        public async Task<CreateDistributionOrderTradeResponse> CreateDistributionOrderTradeExAsync(CreateDistributionOrderTradeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDistributionOrderTradeResponse>(await DoRequestAsync("1.0", "baas.distribution.order.trade.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销平台推广订单查询
         * Summary: 营销分销平台推广订单查询
         */
        public QueryDistributionOrderPromoterResponse QueryDistributionOrderPromoter(QueryDistributionOrderPromoterRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDistributionOrderPromoterEx(request, headers, runtime);
        }

        /**
         * Description: 营销分销平台推广订单查询
         * Summary: 营销分销平台推广订单查询
         */
        public async Task<QueryDistributionOrderPromoterResponse> QueryDistributionOrderPromoterAsync(QueryDistributionOrderPromoterRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDistributionOrderPromoterExAsync(request, headers, runtime);
        }

        /**
         * Description: 营销分销平台推广订单查询
         * Summary: 营销分销平台推广订单查询
         */
        public QueryDistributionOrderPromoterResponse QueryDistributionOrderPromoterEx(QueryDistributionOrderPromoterRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDistributionOrderPromoterResponse>(DoRequest("1.0", "baas.distribution.order.promoter.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销平台推广订单查询
         * Summary: 营销分销平台推广订单查询
         */
        public async Task<QueryDistributionOrderPromoterResponse> QueryDistributionOrderPromoterExAsync(QueryDistributionOrderPromoterRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDistributionOrderPromoterResponse>(await DoRequestAsync("1.0", "baas.distribution.order.promoter.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销平台订单返佣信息查询
         * Summary: 营销分销平台订单返佣信息查询
         */
        public QueryDistributionOrderRakebackResponse QueryDistributionOrderRakeback(QueryDistributionOrderRakebackRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDistributionOrderRakebackEx(request, headers, runtime);
        }

        /**
         * Description: 营销分销平台订单返佣信息查询
         * Summary: 营销分销平台订单返佣信息查询
         */
        public async Task<QueryDistributionOrderRakebackResponse> QueryDistributionOrderRakebackAsync(QueryDistributionOrderRakebackRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDistributionOrderRakebackExAsync(request, headers, runtime);
        }

        /**
         * Description: 营销分销平台订单返佣信息查询
         * Summary: 营销分销平台订单返佣信息查询
         */
        public QueryDistributionOrderRakebackResponse QueryDistributionOrderRakebackEx(QueryDistributionOrderRakebackRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDistributionOrderRakebackResponse>(DoRequest("1.0", "baas.distribution.order.rakeback.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销平台订单返佣信息查询
         * Summary: 营销分销平台订单返佣信息查询
         */
        public async Task<QueryDistributionOrderRakebackResponse> QueryDistributionOrderRakebackExAsync(QueryDistributionOrderRakebackRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDistributionOrderRakebackResponse>(await DoRequestAsync("1.0", "baas.distribution.order.rakeback.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销平台购买订单查询
         * Summary: 营销分销平台购买订单查询
         */
        public QueryDistributionOrderTradeResponse QueryDistributionOrderTrade(QueryDistributionOrderTradeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDistributionOrderTradeEx(request, headers, runtime);
        }

        /**
         * Description: 营销分销平台购买订单查询
         * Summary: 营销分销平台购买订单查询
         */
        public async Task<QueryDistributionOrderTradeResponse> QueryDistributionOrderTradeAsync(QueryDistributionOrderTradeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDistributionOrderTradeExAsync(request, headers, runtime);
        }

        /**
         * Description: 营销分销平台购买订单查询
         * Summary: 营销分销平台购买订单查询
         */
        public QueryDistributionOrderTradeResponse QueryDistributionOrderTradeEx(QueryDistributionOrderTradeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDistributionOrderTradeResponse>(DoRequest("1.0", "baas.distribution.order.trade.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 营销分销平台购买订单查询
         * Summary: 营销分销平台购买订单查询
         */
        public async Task<QueryDistributionOrderTradeResponse> QueryDistributionOrderTradeExAsync(QueryDistributionOrderTradeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDistributionOrderTradeResponse>(await DoRequestAsync("1.0", "baas.distribution.order.trade.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: DIS 分布式数字身份申请
         * Summary: DIS 分布式数字身份申请
         */
        public CreateLogisticFinanceDisResponse CreateLogisticFinanceDis(CreateLogisticFinanceDisRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateLogisticFinanceDisEx(request, headers, runtime);
        }

        /**
         * Description: DIS 分布式数字身份申请
         * Summary: DIS 分布式数字身份申请
         */
        public async Task<CreateLogisticFinanceDisResponse> CreateLogisticFinanceDisAsync(CreateLogisticFinanceDisRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateLogisticFinanceDisExAsync(request, headers, runtime);
        }

        /**
         * Description: DIS 分布式数字身份申请
         * Summary: DIS 分布式数字身份申请
         */
        public CreateLogisticFinanceDisResponse CreateLogisticFinanceDisEx(CreateLogisticFinanceDisRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateLogisticFinanceDisResponse>(DoRequest("1.0", "baas.logistic.finance.dis.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: DIS 分布式数字身份申请
         * Summary: DIS 分布式数字身份申请
         */
        public async Task<CreateLogisticFinanceDisResponse> CreateLogisticFinanceDisExAsync(CreateLogisticFinanceDisRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateLogisticFinanceDisResponse>(await DoRequestAsync("1.0", "baas.logistic.finance.dis.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询 DIS 分布式数字身份列表
         * Summary: 查询 DIS 分布式数字身份列表
         */
        public ListLogisticFinanceDisResponse ListLogisticFinanceDis(ListLogisticFinanceDisRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ListLogisticFinanceDisEx(request, headers, runtime);
        }

        /**
         * Description: 查询 DIS 分布式数字身份列表
         * Summary: 查询 DIS 分布式数字身份列表
         */
        public async Task<ListLogisticFinanceDisResponse> ListLogisticFinanceDisAsync(ListLogisticFinanceDisRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ListLogisticFinanceDisExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询 DIS 分布式数字身份列表
         * Summary: 查询 DIS 分布式数字身份列表
         */
        public ListLogisticFinanceDisResponse ListLogisticFinanceDisEx(ListLogisticFinanceDisRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListLogisticFinanceDisResponse>(DoRequest("1.0", "baas.logistic.finance.dis.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询 DIS 分布式数字身份列表
         * Summary: 查询 DIS 分布式数字身份列表
         */
        public async Task<ListLogisticFinanceDisResponse> ListLogisticFinanceDisExAsync(ListLogisticFinanceDisRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListLogisticFinanceDisResponse>(await DoRequestAsync("1.0", "baas.logistic.finance.dis.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 为成员颁发可验证声明用于允许指定成员有访问数据的权限
         * Summary: 颁发可验证声明
         */
        public CreateLogisticFinanceDisvcResponse CreateLogisticFinanceDisvc(CreateLogisticFinanceDisvcRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateLogisticFinanceDisvcEx(request, headers, runtime);
        }

        /**
         * Description: 为成员颁发可验证声明用于允许指定成员有访问数据的权限
         * Summary: 颁发可验证声明
         */
        public async Task<CreateLogisticFinanceDisvcResponse> CreateLogisticFinanceDisvcAsync(CreateLogisticFinanceDisvcRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateLogisticFinanceDisvcExAsync(request, headers, runtime);
        }

        /**
         * Description: 为成员颁发可验证声明用于允许指定成员有访问数据的权限
         * Summary: 颁发可验证声明
         */
        public CreateLogisticFinanceDisvcResponse CreateLogisticFinanceDisvcEx(CreateLogisticFinanceDisvcRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateLogisticFinanceDisvcResponse>(DoRequest("1.0", "baas.logistic.finance.disvc.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 为成员颁发可验证声明用于允许指定成员有访问数据的权限
         * Summary: 颁发可验证声明
         */
        public async Task<CreateLogisticFinanceDisvcResponse> CreateLogisticFinanceDisvcExAsync(CreateLogisticFinanceDisvcRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateLogisticFinanceDisvcResponse>(await DoRequestAsync("1.0", "baas.logistic.finance.disvc.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询颁发的可验证声明完整声明内容
         * Summary: 查询颁发的可验证声明
         */
        public QueryLogisticFinanceDisvcResponse QueryLogisticFinanceDisvc(QueryLogisticFinanceDisvcRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryLogisticFinanceDisvcEx(request, headers, runtime);
        }

        /**
         * Description: 查询颁发的可验证声明完整声明内容
         * Summary: 查询颁发的可验证声明
         */
        public async Task<QueryLogisticFinanceDisvcResponse> QueryLogisticFinanceDisvcAsync(QueryLogisticFinanceDisvcRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryLogisticFinanceDisvcExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询颁发的可验证声明完整声明内容
         * Summary: 查询颁发的可验证声明
         */
        public QueryLogisticFinanceDisvcResponse QueryLogisticFinanceDisvcEx(QueryLogisticFinanceDisvcRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryLogisticFinanceDisvcResponse>(DoRequest("1.0", "baas.logistic.finance.disvc.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询颁发的可验证声明完整声明内容
         * Summary: 查询颁发的可验证声明
         */
        public async Task<QueryLogisticFinanceDisvcResponse> QueryLogisticFinanceDisvcExAsync(QueryLogisticFinanceDisvcRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryLogisticFinanceDisvcResponse>(await DoRequestAsync("1.0", "baas.logistic.finance.disvc.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台用户账户映射
         * Summary: 物流金融平台用户账户映射
         */
        public CreateLogisticFinanceAccountResponse CreateLogisticFinanceAccount(CreateLogisticFinanceAccountRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateLogisticFinanceAccountEx(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台用户账户映射
         * Summary: 物流金融平台用户账户映射
         */
        public async Task<CreateLogisticFinanceAccountResponse> CreateLogisticFinanceAccountAsync(CreateLogisticFinanceAccountRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateLogisticFinanceAccountExAsync(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台用户账户映射
         * Summary: 物流金融平台用户账户映射
         */
        public CreateLogisticFinanceAccountResponse CreateLogisticFinanceAccountEx(CreateLogisticFinanceAccountRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateLogisticFinanceAccountResponse>(DoRequest("1.0", "baas.logistic.finance.account.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台用户账户映射
         * Summary: 物流金融平台用户账户映射
         */
        public async Task<CreateLogisticFinanceAccountResponse> CreateLogisticFinanceAccountExAsync(CreateLogisticFinanceAccountRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateLogisticFinanceAccountResponse>(await DoRequestAsync("1.0", "baas.logistic.finance.account.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台账户批量映射
         * Summary: 物流金融平台账户批量映射
         */
        public BatchcreateLogisticFinanceAccountResponse BatchcreateLogisticFinanceAccount(BatchcreateLogisticFinanceAccountRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return BatchcreateLogisticFinanceAccountEx(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台账户批量映射
         * Summary: 物流金融平台账户批量映射
         */
        public async Task<BatchcreateLogisticFinanceAccountResponse> BatchcreateLogisticFinanceAccountAsync(BatchcreateLogisticFinanceAccountRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await BatchcreateLogisticFinanceAccountExAsync(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台账户批量映射
         * Summary: 物流金融平台账户批量映射
         */
        public BatchcreateLogisticFinanceAccountResponse BatchcreateLogisticFinanceAccountEx(BatchcreateLogisticFinanceAccountRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BatchcreateLogisticFinanceAccountResponse>(DoRequest("1.0", "baas.logistic.finance.account.batchcreate", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台账户批量映射
         * Summary: 物流金融平台账户批量映射
         */
        public async Task<BatchcreateLogisticFinanceAccountResponse> BatchcreateLogisticFinanceAccountExAsync(BatchcreateLogisticFinanceAccountRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BatchcreateLogisticFinanceAccountResponse>(await DoRequestAsync("1.0", "baas.logistic.finance.account.batchcreate", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台物流运单创建
         * Summary: 物流金融平台物流运单创建
         */
        public CreateLogisticFinanceOrderResponse CreateLogisticFinanceOrder(CreateLogisticFinanceOrderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateLogisticFinanceOrderEx(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台物流运单创建
         * Summary: 物流金融平台物流运单创建
         */
        public async Task<CreateLogisticFinanceOrderResponse> CreateLogisticFinanceOrderAsync(CreateLogisticFinanceOrderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateLogisticFinanceOrderExAsync(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台物流运单创建
         * Summary: 物流金融平台物流运单创建
         */
        public CreateLogisticFinanceOrderResponse CreateLogisticFinanceOrderEx(CreateLogisticFinanceOrderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateLogisticFinanceOrderResponse>(DoRequest("1.0", "baas.logistic.finance.order.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台物流运单创建
         * Summary: 物流金融平台物流运单创建
         */
        public async Task<CreateLogisticFinanceOrderResponse> CreateLogisticFinanceOrderExAsync(CreateLogisticFinanceOrderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateLogisticFinanceOrderResponse>(await DoRequestAsync("1.0", "baas.logistic.finance.order.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台运单完成
         * Summary: 物流金融平台运单完成
         */
        public FinishLogisticFinanceOrderResponse FinishLogisticFinanceOrder(FinishLogisticFinanceOrderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return FinishLogisticFinanceOrderEx(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台运单完成
         * Summary: 物流金融平台运单完成
         */
        public async Task<FinishLogisticFinanceOrderResponse> FinishLogisticFinanceOrderAsync(FinishLogisticFinanceOrderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await FinishLogisticFinanceOrderExAsync(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台运单完成
         * Summary: 物流金融平台运单完成
         */
        public FinishLogisticFinanceOrderResponse FinishLogisticFinanceOrderEx(FinishLogisticFinanceOrderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<FinishLogisticFinanceOrderResponse>(DoRequest("1.0", "baas.logistic.finance.order.finish", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台运单完成
         * Summary: 物流金融平台运单完成
         */
        public async Task<FinishLogisticFinanceOrderResponse> FinishLogisticFinanceOrderExAsync(FinishLogisticFinanceOrderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<FinishLogisticFinanceOrderResponse>(await DoRequestAsync("1.0", "baas.logistic.finance.order.finish", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台支付订单创建
         * Summary: 物流金融平台支付订单创建
         */
        public CreateLogisticFinancePayorderResponse CreateLogisticFinancePayorder(CreateLogisticFinancePayorderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateLogisticFinancePayorderEx(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台支付订单创建
         * Summary: 物流金融平台支付订单创建
         */
        public async Task<CreateLogisticFinancePayorderResponse> CreateLogisticFinancePayorderAsync(CreateLogisticFinancePayorderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateLogisticFinancePayorderExAsync(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台支付订单创建
         * Summary: 物流金融平台支付订单创建
         */
        public CreateLogisticFinancePayorderResponse CreateLogisticFinancePayorderEx(CreateLogisticFinancePayorderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateLogisticFinancePayorderResponse>(DoRequest("1.0", "baas.logistic.finance.payorder.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台支付订单创建
         * Summary: 物流金融平台支付订单创建
         */
        public async Task<CreateLogisticFinancePayorderResponse> CreateLogisticFinancePayorderExAsync(CreateLogisticFinancePayorderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateLogisticFinancePayorderResponse>(await DoRequestAsync("1.0", "baas.logistic.finance.payorder.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台订单状态查询
         * Summary: 物流金融平台订单状态查询
         */
        public QueryLogisticFinanceOrderResponse QueryLogisticFinanceOrder(QueryLogisticFinanceOrderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryLogisticFinanceOrderEx(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台订单状态查询
         * Summary: 物流金融平台订单状态查询
         */
        public async Task<QueryLogisticFinanceOrderResponse> QueryLogisticFinanceOrderAsync(QueryLogisticFinanceOrderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryLogisticFinanceOrderExAsync(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台订单状态查询
         * Summary: 物流金融平台订单状态查询
         */
        public QueryLogisticFinanceOrderResponse QueryLogisticFinanceOrderEx(QueryLogisticFinanceOrderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryLogisticFinanceOrderResponse>(DoRequest("1.0", "baas.logistic.finance.order.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台订单状态查询
         * Summary: 物流金融平台订单状态查询
         */
        public async Task<QueryLogisticFinanceOrderResponse> QueryLogisticFinanceOrderExAsync(QueryLogisticFinanceOrderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryLogisticFinanceOrderResponse>(await DoRequestAsync("1.0", "baas.logistic.finance.order.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台发票订单创建
         * Summary: 物流金融平台发票订单创建
         */
        public CreateLogisticFinanceBillorderResponse CreateLogisticFinanceBillorder(CreateLogisticFinanceBillorderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateLogisticFinanceBillorderEx(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台发票订单创建
         * Summary: 物流金融平台发票订单创建
         */
        public async Task<CreateLogisticFinanceBillorderResponse> CreateLogisticFinanceBillorderAsync(CreateLogisticFinanceBillorderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateLogisticFinanceBillorderExAsync(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台发票订单创建
         * Summary: 物流金融平台发票订单创建
         */
        public CreateLogisticFinanceBillorderResponse CreateLogisticFinanceBillorderEx(CreateLogisticFinanceBillorderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateLogisticFinanceBillorderResponse>(DoRequest("1.0", "baas.logistic.finance.billorder.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台发票订单创建
         * Summary: 物流金融平台发票订单创建
         */
        public async Task<CreateLogisticFinanceBillorderResponse> CreateLogisticFinanceBillorderExAsync(CreateLogisticFinanceBillorderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateLogisticFinanceBillorderResponse>(await DoRequestAsync("1.0", "baas.logistic.finance.billorder.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台运单轨迹信息导入
         * Summary: 物流金融平台运单轨迹信息导入
         */
        public ImportLogisticFinanceLocationResponse ImportLogisticFinanceLocation(ImportLogisticFinanceLocationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ImportLogisticFinanceLocationEx(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台运单轨迹信息导入
         * Summary: 物流金融平台运单轨迹信息导入
         */
        public async Task<ImportLogisticFinanceLocationResponse> ImportLogisticFinanceLocationAsync(ImportLogisticFinanceLocationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ImportLogisticFinanceLocationExAsync(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台运单轨迹信息导入
         * Summary: 物流金融平台运单轨迹信息导入
         */
        public ImportLogisticFinanceLocationResponse ImportLogisticFinanceLocationEx(ImportLogisticFinanceLocationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ImportLogisticFinanceLocationResponse>(DoRequest("1.0", "baas.logistic.finance.location.import", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台运单轨迹信息导入
         * Summary: 物流金融平台运单轨迹信息导入
         */
        public async Task<ImportLogisticFinanceLocationResponse> ImportLogisticFinanceLocationExAsync(ImportLogisticFinanceLocationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ImportLogisticFinanceLocationResponse>(await DoRequestAsync("1.0", "baas.logistic.finance.location.import", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台创建货主DIS
         * Summary: 物流金融平台创建货主DIS
         */
        public CreateLogisticFinanceConsignorResponse CreateLogisticFinanceConsignor(CreateLogisticFinanceConsignorRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateLogisticFinanceConsignorEx(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台创建货主DIS
         * Summary: 物流金融平台创建货主DIS
         */
        public async Task<CreateLogisticFinanceConsignorResponse> CreateLogisticFinanceConsignorAsync(CreateLogisticFinanceConsignorRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateLogisticFinanceConsignorExAsync(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台创建货主DIS
         * Summary: 物流金融平台创建货主DIS
         */
        public CreateLogisticFinanceConsignorResponse CreateLogisticFinanceConsignorEx(CreateLogisticFinanceConsignorRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateLogisticFinanceConsignorResponse>(DoRequest("1.0", "baas.logistic.finance.consignor.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台创建货主DIS
         * Summary: 物流金融平台创建货主DIS
         */
        public async Task<CreateLogisticFinanceConsignorResponse> CreateLogisticFinanceConsignorExAsync(CreateLogisticFinanceConsignorRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateLogisticFinanceConsignorResponse>(await DoRequestAsync("1.0", "baas.logistic.finance.consignor.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台创建无车承运平台DIS
         * Summary: 物流金融平台创建无车承运平台DIS
         */
        public CreateLogisticFinancePlatformResponse CreateLogisticFinancePlatform(CreateLogisticFinancePlatformRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateLogisticFinancePlatformEx(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台创建无车承运平台DIS
         * Summary: 物流金融平台创建无车承运平台DIS
         */
        public async Task<CreateLogisticFinancePlatformResponse> CreateLogisticFinancePlatformAsync(CreateLogisticFinancePlatformRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateLogisticFinancePlatformExAsync(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台创建无车承运平台DIS
         * Summary: 物流金融平台创建无车承运平台DIS
         */
        public CreateLogisticFinancePlatformResponse CreateLogisticFinancePlatformEx(CreateLogisticFinancePlatformRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateLogisticFinancePlatformResponse>(DoRequest("1.0", "baas.logistic.finance.platform.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台创建无车承运平台DIS
         * Summary: 物流金融平台创建无车承运平台DIS
         */
        public async Task<CreateLogisticFinancePlatformResponse> CreateLogisticFinancePlatformExAsync(CreateLogisticFinancePlatformRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateLogisticFinancePlatformResponse>(await DoRequestAsync("1.0", "baas.logistic.finance.platform.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台代理创建无车承运平台DIS
         * Summary: 物流金融平台代理创建无车承运平台DIS
         */
        public CreateLogistFinanceAgentplatformResponse CreateLogistFinanceAgentplatform(CreateLogistFinanceAgentplatformRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateLogistFinanceAgentplatformEx(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台代理创建无车承运平台DIS
         * Summary: 物流金融平台代理创建无车承运平台DIS
         */
        public async Task<CreateLogistFinanceAgentplatformResponse> CreateLogistFinanceAgentplatformAsync(CreateLogistFinanceAgentplatformRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateLogistFinanceAgentplatformExAsync(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台代理创建无车承运平台DIS
         * Summary: 物流金融平台代理创建无车承运平台DIS
         */
        public CreateLogistFinanceAgentplatformResponse CreateLogistFinanceAgentplatformEx(CreateLogistFinanceAgentplatformRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateLogistFinanceAgentplatformResponse>(DoRequest("1.0", "baas.logist.finance.agentplatform.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台代理创建无车承运平台DIS
         * Summary: 物流金融平台代理创建无车承运平台DIS
         */
        public async Task<CreateLogistFinanceAgentplatformResponse> CreateLogistFinanceAgentplatformExAsync(CreateLogistFinanceAgentplatformRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateLogistFinanceAgentplatformResponse>(await DoRequestAsync("1.0", "baas.logist.finance.agentplatform.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台创建司机DIS
         * Summary: 物流金融平台创建司机DIS
         */
        public CreateLogisticFinanceDriverResponse CreateLogisticFinanceDriver(CreateLogisticFinanceDriverRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateLogisticFinanceDriverEx(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台创建司机DIS
         * Summary: 物流金融平台创建司机DIS
         */
        public async Task<CreateLogisticFinanceDriverResponse> CreateLogisticFinanceDriverAsync(CreateLogisticFinanceDriverRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateLogisticFinanceDriverExAsync(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台创建司机DIS
         * Summary: 物流金融平台创建司机DIS
         */
        public CreateLogisticFinanceDriverResponse CreateLogisticFinanceDriverEx(CreateLogisticFinanceDriverRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateLogisticFinanceDriverResponse>(DoRequest("1.0", "baas.logistic.finance.driver.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台创建司机DIS
         * Summary: 物流金融平台创建司机DIS
         */
        public async Task<CreateLogisticFinanceDriverResponse> CreateLogisticFinanceDriverExAsync(CreateLogisticFinanceDriverRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateLogisticFinanceDriverResponse>(await DoRequestAsync("1.0", "baas.logistic.finance.driver.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台创建货源订单
         * Summary: 物流金融平台创建货源订单
         */
        public CreateLogisticFinanceCargoorderResponse CreateLogisticFinanceCargoorder(CreateLogisticFinanceCargoorderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateLogisticFinanceCargoorderEx(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台创建货源订单
         * Summary: 物流金融平台创建货源订单
         */
        public async Task<CreateLogisticFinanceCargoorderResponse> CreateLogisticFinanceCargoorderAsync(CreateLogisticFinanceCargoorderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateLogisticFinanceCargoorderExAsync(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台创建货源订单
         * Summary: 物流金融平台创建货源订单
         */
        public CreateLogisticFinanceCargoorderResponse CreateLogisticFinanceCargoorderEx(CreateLogisticFinanceCargoorderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateLogisticFinanceCargoorderResponse>(DoRequest("1.0", "baas.logistic.finance.cargoorder.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台创建货源订单
         * Summary: 物流金融平台创建货源订单
         */
        public async Task<CreateLogisticFinanceCargoorderResponse> CreateLogisticFinanceCargoorderExAsync(CreateLogisticFinanceCargoorderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateLogisticFinanceCargoorderResponse>(await DoRequestAsync("1.0", "baas.logistic.finance.cargoorder.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台货源支付订单创建
         * Summary: 物流金融平台货源支付订单创建
         */
        public CreateLogisticFinanceCargopayorderResponse CreateLogisticFinanceCargopayorder(CreateLogisticFinanceCargopayorderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateLogisticFinanceCargopayorderEx(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台货源支付订单创建
         * Summary: 物流金融平台货源支付订单创建
         */
        public async Task<CreateLogisticFinanceCargopayorderResponse> CreateLogisticFinanceCargopayorderAsync(CreateLogisticFinanceCargopayorderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateLogisticFinanceCargopayorderExAsync(request, headers, runtime);
        }

        /**
         * Description: 物流金融平台货源支付订单创建
         * Summary: 物流金融平台货源支付订单创建
         */
        public CreateLogisticFinanceCargopayorderResponse CreateLogisticFinanceCargopayorderEx(CreateLogisticFinanceCargopayorderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateLogisticFinanceCargopayorderResponse>(DoRequest("1.0", "baas.logistic.finance.cargopayorder.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融平台货源支付订单创建
         * Summary: 物流金融平台货源支付订单创建
         */
        public async Task<CreateLogisticFinanceCargopayorderResponse> CreateLogisticFinanceCargopayorderExAsync(CreateLogisticFinanceCargopayorderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateLogisticFinanceCargopayorderResponse>(await DoRequestAsync("1.0", "baas.logistic.finance.cargopayorder.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建蚂蚁区块链实例
         * Summary: 创建蚂蚁区块链实例
         */
        public CreateOcpProductResponse CreateOcpProduct(CreateOcpProductRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateOcpProductEx(request, headers, runtime);
        }

        /**
         * Description: 创建蚂蚁区块链实例
         * Summary: 创建蚂蚁区块链实例
         */
        public async Task<CreateOcpProductResponse> CreateOcpProductAsync(CreateOcpProductRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateOcpProductExAsync(request, headers, runtime);
        }

        /**
         * Description: 创建蚂蚁区块链实例
         * Summary: 创建蚂蚁区块链实例
         */
        public CreateOcpProductResponse CreateOcpProductEx(CreateOcpProductRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateOcpProductResponse>(DoRequest("1.0", "baas.ocp.product.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建蚂蚁区块链实例
         * Summary: 创建蚂蚁区块链实例
         */
        public async Task<CreateOcpProductResponse> CreateOcpProductExAsync(CreateOcpProductRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateOcpProductResponse>(await DoRequestAsync("1.0", "baas.ocp.product.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 变配，对已有的实例进行规格变更操作。
         * Summary: 对已有的实例进行规格变更操作
         */
        public UpdateOcpProductResponse UpdateOcpProduct(UpdateOcpProductRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateOcpProductEx(request, headers, runtime);
        }

        /**
         * Description: 变配，对已有的实例进行规格变更操作。
         * Summary: 对已有的实例进行规格变更操作
         */
        public async Task<UpdateOcpProductResponse> UpdateOcpProductAsync(UpdateOcpProductRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateOcpProductExAsync(request, headers, runtime);
        }

        /**
         * Description: 变配，对已有的实例进行规格变更操作。
         * Summary: 对已有的实例进行规格变更操作
         */
        public UpdateOcpProductResponse UpdateOcpProductEx(UpdateOcpProductRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateOcpProductResponse>(DoRequest("1.0", "baas.ocp.product.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 变配，对已有的实例进行规格变更操作。
         * Summary: 对已有的实例进行规格变更操作
         */
        public async Task<UpdateOcpProductResponse> UpdateOcpProductExAsync(UpdateOcpProductRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateOcpProductResponse>(await DoRequestAsync("1.0", "baas.ocp.product.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户主动删除实例或欠费逾期平台按照约定进行强制删除。
         * Summary: 释放资源
         */
        public CloseOcpProductResponse CloseOcpProduct(CloseOcpProductRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CloseOcpProductEx(request, headers, runtime);
        }

        /**
         * Description: 用户主动删除实例或欠费逾期平台按照约定进行强制删除。
         * Summary: 释放资源
         */
        public async Task<CloseOcpProductResponse> CloseOcpProductAsync(CloseOcpProductRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CloseOcpProductExAsync(request, headers, runtime);
        }

        /**
         * Description: 用户主动删除实例或欠费逾期平台按照约定进行强制删除。
         * Summary: 释放资源
         */
        public CloseOcpProductResponse CloseOcpProductEx(CloseOcpProductRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CloseOcpProductResponse>(DoRequest("1.0", "baas.ocp.product.close", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户主动删除实例或欠费逾期平台按照约定进行强制删除。
         * Summary: 释放资源
         */
        public async Task<CloseOcpProductResponse> CloseOcpProductExAsync(CloseOcpProductRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CloseOcpProductResponse>(await DoRequestAsync("1.0", "baas.ocp.product.close", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户对欠费或者到期实例进行续费操作后，平台会通知产品解除对用户指定实例的操作限制。即恢复正常服务能力。
         * Summary: 恢复资源
         */
        public EnableOcpProductResponse EnableOcpProduct(EnableOcpProductRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return EnableOcpProductEx(request, headers, runtime);
        }

        /**
         * Description: 用户对欠费或者到期实例进行续费操作后，平台会通知产品解除对用户指定实例的操作限制。即恢复正常服务能力。
         * Summary: 恢复资源
         */
        public async Task<EnableOcpProductResponse> EnableOcpProductAsync(EnableOcpProductRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await EnableOcpProductExAsync(request, headers, runtime);
        }

        /**
         * Description: 用户对欠费或者到期实例进行续费操作后，平台会通知产品解除对用户指定实例的操作限制。即恢复正常服务能力。
         * Summary: 恢复资源
         */
        public EnableOcpProductResponse EnableOcpProductEx(EnableOcpProductRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<EnableOcpProductResponse>(DoRequest("1.0", "baas.ocp.product.enable", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户对欠费或者到期实例进行续费操作后，平台会通知产品解除对用户指定实例的操作限制。即恢复正常服务能力。
         * Summary: 恢复资源
         */
        public async Task<EnableOcpProductResponse> EnableOcpProductExAsync(EnableOcpProductRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<EnableOcpProductResponse>(await DoRequestAsync("1.0", "baas.ocp.product.enable", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户资源到期或欠费情况下会对资源先进行停服操作，用于限制用户使用但不能删除用户数据！不同的产品可以根据自身的功能进行不同的限制。
         * Summary: 停止服务
         */
        public StopOcpProductResponse StopOcpProduct(StopOcpProductRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StopOcpProductEx(request, headers, runtime);
        }

        /**
         * Description: 用户资源到期或欠费情况下会对资源先进行停服操作，用于限制用户使用但不能删除用户数据！不同的产品可以根据自身的功能进行不同的限制。
         * Summary: 停止服务
         */
        public async Task<StopOcpProductResponse> StopOcpProductAsync(StopOcpProductRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StopOcpProductExAsync(request, headers, runtime);
        }

        /**
         * Description: 用户资源到期或欠费情况下会对资源先进行停服操作，用于限制用户使用但不能删除用户数据！不同的产品可以根据自身的功能进行不同的限制。
         * Summary: 停止服务
         */
        public StopOcpProductResponse StopOcpProductEx(StopOcpProductRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StopOcpProductResponse>(DoRequest("1.0", "baas.ocp.product.stop", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户资源到期或欠费情况下会对资源先进行停服操作，用于限制用户使用但不能删除用户数据！不同的产品可以根据自身的功能进行不同的限制。
         * Summary: 停止服务
         */
        public async Task<StopOcpProductResponse> StopOcpProductExAsync(StopOcpProductRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StopOcpProductResponse>(await DoRequestAsync("1.0", "baas.ocp.product.stop", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 售卖页面加载产品个性化内容，比如：类目、库存等，用于辅助用户选择。用户下单后参数会下发给产品方
         * Summary: 加载售卖页自定义参数
         */
        public InitOcpProductResponse InitOcpProduct(InitOcpProductRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return InitOcpProductEx(request, headers, runtime);
        }

        /**
         * Description: 售卖页面加载产品个性化内容，比如：类目、库存等，用于辅助用户选择。用户下单后参数会下发给产品方
         * Summary: 加载售卖页自定义参数
         */
        public async Task<InitOcpProductResponse> InitOcpProductAsync(InitOcpProductRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await InitOcpProductExAsync(request, headers, runtime);
        }

        /**
         * Description: 售卖页面加载产品个性化内容，比如：类目、库存等，用于辅助用户选择。用户下单后参数会下发给产品方
         * Summary: 加载售卖页自定义参数
         */
        public InitOcpProductResponse InitOcpProductEx(InitOcpProductRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitOcpProductResponse>(DoRequest("1.0", "baas.ocp.product.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 售卖页面加载产品个性化内容，比如：类目、库存等，用于辅助用户选择。用户下单后参数会下发给产品方
         * Summary: 加载售卖页自定义参数
         */
        public async Task<InitOcpProductResponse> InitOcpProductExAsync(InitOcpProductRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitOcpProductResponse>(await DoRequestAsync("1.0", "baas.ocp.product.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询商业化产品的状态
         * Summary: 查询商业化产品的状态
         */
        public QueryOcpProductResponse QueryOcpProduct(QueryOcpProductRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryOcpProductEx(request, headers, runtime);
        }

        /**
         * Description: 查询商业化产品的状态
         * Summary: 查询商业化产品的状态
         */
        public async Task<QueryOcpProductResponse> QueryOcpProductAsync(QueryOcpProductRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryOcpProductExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询商业化产品的状态
         * Summary: 查询商业化产品的状态
         */
        public QueryOcpProductResponse QueryOcpProductEx(QueryOcpProductRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryOcpProductResponse>(DoRequest("1.0", "baas.ocp.product.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询商业化产品的状态
         * Summary: 查询商业化产品的状态
         */
        public async Task<QueryOcpProductResponse> QueryOcpProductExAsync(QueryOcpProductRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryOcpProductResponse>(await DoRequestAsync("1.0", "baas.ocp.product.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 开通商业化服务
         * Summary: 开通商业化服务
         */
        public OpenOcpProductResponse OpenOcpProduct(OpenOcpProductRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return OpenOcpProductEx(request, headers, runtime);
        }

        /**
         * Description: 开通商业化服务
         * Summary: 开通商业化服务
         */
        public async Task<OpenOcpProductResponse> OpenOcpProductAsync(OpenOcpProductRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await OpenOcpProductExAsync(request, headers, runtime);
        }

        /**
         * Description: 开通商业化服务
         * Summary: 开通商业化服务
         */
        public OpenOcpProductResponse OpenOcpProductEx(OpenOcpProductRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<OpenOcpProductResponse>(DoRequest("1.0", "baas.ocp.product.open", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 开通商业化服务
         * Summary: 开通商业化服务
         */
        public async Task<OpenOcpProductResponse> OpenOcpProductExAsync(OpenOcpProductRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<OpenOcpProductResponse>(await DoRequestAsync("1.0", "baas.ocp.product.open", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建商业化产品实例
         * Summary: 创建商业化产品实例
         */
        public CreateOcpProductsResponse CreateOcpProducts(CreateOcpProductsRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateOcpProductsEx(request, headers, runtime);
        }

        /**
         * Description: 创建商业化产品实例
         * Summary: 创建商业化产品实例
         */
        public async Task<CreateOcpProductsResponse> CreateOcpProductsAsync(CreateOcpProductsRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateOcpProductsExAsync(request, headers, runtime);
        }

        /**
         * Description: 创建商业化产品实例
         * Summary: 创建商业化产品实例
         */
        public CreateOcpProductsResponse CreateOcpProductsEx(CreateOcpProductsRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateOcpProductsResponse>(DoRequest("1.0", "baas.ocp.products.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建商业化产品实例
         * Summary: 创建商业化产品实例
         */
        public async Task<CreateOcpProductsResponse> CreateOcpProductsExAsync(CreateOcpProductsRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateOcpProductsResponse>(await DoRequestAsync("1.0", "baas.ocp.products.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 回调接口，产品侧主动通知ocp，产品状态变更。
         * Summary: 主动通知ocp，产品状态变更
         */
        public CallbackOcpProductResponse CallbackOcpProduct(CallbackOcpProductRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CallbackOcpProductEx(request, headers, runtime);
        }

        /**
         * Description: 回调接口，产品侧主动通知ocp，产品状态变更。
         * Summary: 主动通知ocp，产品状态变更
         */
        public async Task<CallbackOcpProductResponse> CallbackOcpProductAsync(CallbackOcpProductRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CallbackOcpProductExAsync(request, headers, runtime);
        }

        /**
         * Description: 回调接口，产品侧主动通知ocp，产品状态变更。
         * Summary: 主动通知ocp，产品状态变更
         */
        public CallbackOcpProductResponse CallbackOcpProductEx(CallbackOcpProductRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CallbackOcpProductResponse>(DoRequest("1.0", "baas.ocp.product.callback", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 回调接口，产品侧主动通知ocp，产品状态变更。
         * Summary: 主动通知ocp，产品状态变更
         */
        public async Task<CallbackOcpProductResponse> CallbackOcpProductExAsync(CallbackOcpProductRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CallbackOcpProductResponse>(await DoRequestAsync("1.0", "baas.ocp.product.callback", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 检查任务状态
         * Summary: 检查任务状态
         */
        public CheckOcpTaskResponse CheckOcpTask(CheckOcpTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CheckOcpTaskEx(request, headers, runtime);
        }

        /**
         * Description: 检查任务状态
         * Summary: 检查任务状态
         */
        public async Task<CheckOcpTaskResponse> CheckOcpTaskAsync(CheckOcpTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CheckOcpTaskExAsync(request, headers, runtime);
        }

        /**
         * Description: 检查任务状态
         * Summary: 检查任务状态
         */
        public CheckOcpTaskResponse CheckOcpTaskEx(CheckOcpTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CheckOcpTaskResponse>(DoRequest("1.0", "baas.ocp.task.check", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 检查任务状态
         * Summary: 检查任务状态
         */
        public async Task<CheckOcpTaskResponse> CheckOcpTaskExAsync(CheckOcpTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CheckOcpTaskResponse>(await DoRequestAsync("1.0", "baas.ocp.task.check", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 商业化产品相关任务下发
         * Summary: 任务下发
         */
        public ExecOcpTaskResponse ExecOcpTask(ExecOcpTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ExecOcpTaskEx(request, headers, runtime);
        }

        /**
         * Description: 商业化产品相关任务下发
         * Summary: 任务下发
         */
        public async Task<ExecOcpTaskResponse> ExecOcpTaskAsync(ExecOcpTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ExecOcpTaskExAsync(request, headers, runtime);
        }

        /**
         * Description: 商业化产品相关任务下发
         * Summary: 任务下发
         */
        public ExecOcpTaskResponse ExecOcpTaskEx(ExecOcpTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecOcpTaskResponse>(DoRequest("1.0", "baas.ocp.task.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 商业化产品相关任务下发
         * Summary: 任务下发
         */
        public async Task<ExecOcpTaskResponse> ExecOcpTaskExAsync(ExecOcpTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecOcpTaskResponse>(await DoRequestAsync("1.0", "baas.ocp.task.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 区块链实例创建（内部）
         * Summary: 区块链创建（内部）
         */
        public CreateBlockchainInstanceInnerResponse CreateBlockchainInstanceInner(CreateBlockchainInstanceInnerRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateBlockchainInstanceInnerEx(request, headers, runtime);
        }

        /**
         * Description: 区块链实例创建（内部）
         * Summary: 区块链创建（内部）
         */
        public async Task<CreateBlockchainInstanceInnerResponse> CreateBlockchainInstanceInnerAsync(CreateBlockchainInstanceInnerRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateBlockchainInstanceInnerExAsync(request, headers, runtime);
        }

        /**
         * Description: 区块链实例创建（内部）
         * Summary: 区块链创建（内部）
         */
        public CreateBlockchainInstanceInnerResponse CreateBlockchainInstanceInnerEx(CreateBlockchainInstanceInnerRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateBlockchainInstanceInnerResponse>(DoRequest("1.0", "baas.blockchain.instance.inner.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 区块链实例创建（内部）
         * Summary: 区块链创建（内部）
         */
        public async Task<CreateBlockchainInstanceInnerResponse> CreateBlockchainInstanceInnerExAsync(CreateBlockchainInstanceInnerRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateBlockchainInstanceInnerResponse>(await DoRequestAsync("1.0", "baas.blockchain.instance.inner.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 蚂蚁区块链通过实例查询链id
         * Summary: 蚂蚁区块链通过实例查询链id
         */
        public QueryBlockchainInstanceBizidResponse QueryBlockchainInstanceBizid(QueryBlockchainInstanceBizidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryBlockchainInstanceBizidEx(request, headers, runtime);
        }

        /**
         * Description: 蚂蚁区块链通过实例查询链id
         * Summary: 蚂蚁区块链通过实例查询链id
         */
        public async Task<QueryBlockchainInstanceBizidResponse> QueryBlockchainInstanceBizidAsync(QueryBlockchainInstanceBizidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryBlockchainInstanceBizidExAsync(request, headers, runtime);
        }

        /**
         * Description: 蚂蚁区块链通过实例查询链id
         * Summary: 蚂蚁区块链通过实例查询链id
         */
        public QueryBlockchainInstanceBizidResponse QueryBlockchainInstanceBizidEx(QueryBlockchainInstanceBizidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBlockchainInstanceBizidResponse>(DoRequest("1.0", "baas.blockchain.instance.bizid.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 蚂蚁区块链通过实例查询链id
         * Summary: 蚂蚁区块链通过实例查询链id
         */
        public async Task<QueryBlockchainInstanceBizidResponse> QueryBlockchainInstanceBizidExAsync(QueryBlockchainInstanceBizidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBlockchainInstanceBizidResponse>(await DoRequestAsync("1.0", "baas.blockchain.instance.bizid.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建联盟接口
         * Summary: 创建联盟接口
         */
        public CreateApiConsortiumResponse CreateApiConsortium(CreateApiConsortiumRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateApiConsortiumEx(request, headers, runtime);
        }

        /**
         * Description: 创建联盟接口
         * Summary: 创建联盟接口
         */
        public async Task<CreateApiConsortiumResponse> CreateApiConsortiumAsync(CreateApiConsortiumRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateApiConsortiumExAsync(request, headers, runtime);
        }

        /**
         * Description: 创建联盟接口
         * Summary: 创建联盟接口
         */
        public CreateApiConsortiumResponse CreateApiConsortiumEx(CreateApiConsortiumRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateApiConsortiumResponse>(DoRequest("1.0", "baas.api.consortium.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建联盟接口
         * Summary: 创建联盟接口
         */
        public async Task<CreateApiConsortiumResponse> CreateApiConsortiumExAsync(CreateApiConsortiumRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateApiConsortiumResponse>(await DoRequestAsync("1.0", "baas.api.consortium.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询链的小程序浏览器授权状态
         * Summary: 查询链的小程序浏览器授权状态
         */
        public QueryApiMiniappbrowserAuthtypeResponse QueryApiMiniappbrowserAuthtype(QueryApiMiniappbrowserAuthtypeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryApiMiniappbrowserAuthtypeEx(request, headers, runtime);
        }

        /**
         * Description: 查询链的小程序浏览器授权状态
         * Summary: 查询链的小程序浏览器授权状态
         */
        public async Task<QueryApiMiniappbrowserAuthtypeResponse> QueryApiMiniappbrowserAuthtypeAsync(QueryApiMiniappbrowserAuthtypeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryApiMiniappbrowserAuthtypeExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询链的小程序浏览器授权状态
         * Summary: 查询链的小程序浏览器授权状态
         */
        public QueryApiMiniappbrowserAuthtypeResponse QueryApiMiniappbrowserAuthtypeEx(QueryApiMiniappbrowserAuthtypeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryApiMiniappbrowserAuthtypeResponse>(DoRequest("1.0", "baas.api.miniappbrowser.authtype.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询链的小程序浏览器授权状态
         * Summary: 查询链的小程序浏览器授权状态
         */
        public async Task<QueryApiMiniappbrowserAuthtypeResponse> QueryApiMiniappbrowserAuthtypeExAsync(QueryApiMiniappbrowserAuthtypeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryApiMiniappbrowserAuthtypeResponse>(await DoRequestAsync("1.0", "baas.api.miniappbrowser.authtype.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询某链当前块高
         * Summary: 查询某链当前块高
         */
        public QueryStatisticsPortHeightResponse QueryStatisticsPortHeight(QueryStatisticsPortHeightRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryStatisticsPortHeightEx(request, headers, runtime);
        }

        /**
         * Description: 查询某链当前块高
         * Summary: 查询某链当前块高
         */
        public async Task<QueryStatisticsPortHeightResponse> QueryStatisticsPortHeightAsync(QueryStatisticsPortHeightRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryStatisticsPortHeightExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询某链当前块高
         * Summary: 查询某链当前块高
         */
        public QueryStatisticsPortHeightResponse QueryStatisticsPortHeightEx(QueryStatisticsPortHeightRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryStatisticsPortHeightResponse>(DoRequest("1.0", "baas.statistics.port.height.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询某链当前块高
         * Summary: 查询某链当前块高
         */
        public async Task<QueryStatisticsPortHeightResponse> QueryStatisticsPortHeightExAsync(QueryStatisticsPortHeightRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryStatisticsPortHeightResponse>(await DoRequestAsync("1.0", "baas.statistics.port.height.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询授权的链id列表
         * Summary: 查询授权的链id列表
         */
        public QueryStatisticPortBizidResponse QueryStatisticPortBizid(QueryStatisticPortBizidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryStatisticPortBizidEx(request, headers, runtime);
        }

        /**
         * Description: 查询授权的链id列表
         * Summary: 查询授权的链id列表
         */
        public async Task<QueryStatisticPortBizidResponse> QueryStatisticPortBizidAsync(QueryStatisticPortBizidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryStatisticPortBizidExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询授权的链id列表
         * Summary: 查询授权的链id列表
         */
        public QueryStatisticPortBizidResponse QueryStatisticPortBizidEx(QueryStatisticPortBizidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryStatisticPortBizidResponse>(DoRequest("1.0", "baas.statistic.port.bizid.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询授权的链id列表
         * Summary: 查询授权的链id列表
         */
        public async Task<QueryStatisticPortBizidResponse> QueryStatisticPortBizidExAsync(QueryStatisticPortBizidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryStatisticPortBizidResponse>(await DoRequestAsync("1.0", "baas.statistic.port.bizid.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 添加存量采集任务
         * Summary: 添加存量采集任务
         */
        public AddStatisticsPortTaskResponse AddStatisticsPortTask(AddStatisticsPortTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return AddStatisticsPortTaskEx(request, headers, runtime);
        }

        /**
         * Description: 添加存量采集任务
         * Summary: 添加存量采集任务
         */
        public async Task<AddStatisticsPortTaskResponse> AddStatisticsPortTaskAsync(AddStatisticsPortTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await AddStatisticsPortTaskExAsync(request, headers, runtime);
        }

        /**
         * Description: 添加存量采集任务
         * Summary: 添加存量采集任务
         */
        public AddStatisticsPortTaskResponse AddStatisticsPortTaskEx(AddStatisticsPortTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<AddStatisticsPortTaskResponse>(DoRequest("1.0", "baas.statistics.port.task.add", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 添加存量采集任务
         * Summary: 添加存量采集任务
         */
        public async Task<AddStatisticsPortTaskResponse> AddStatisticsPortTaskExAsync(AddStatisticsPortTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<AddStatisticsPortTaskResponse>(await DoRequestAsync("1.0", "baas.statistics.port.task.add", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询交易列表
         * Summary: 查询交易列表
         */
        public QueryApiDwhTransactionResponse QueryApiDwhTransaction(QueryApiDwhTransactionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryApiDwhTransactionEx(request, headers, runtime);
        }

        /**
         * Description: 查询交易列表
         * Summary: 查询交易列表
         */
        public async Task<QueryApiDwhTransactionResponse> QueryApiDwhTransactionAsync(QueryApiDwhTransactionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryApiDwhTransactionExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询交易列表
         * Summary: 查询交易列表
         */
        public QueryApiDwhTransactionResponse QueryApiDwhTransactionEx(QueryApiDwhTransactionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryApiDwhTransactionResponse>(DoRequest("1.0", "baas.api.dwh.transaction.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询交易列表
         * Summary: 查询交易列表
         */
        public async Task<QueryApiDwhTransactionResponse> QueryApiDwhTransactionExAsync(QueryApiDwhTransactionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryApiDwhTransactionResponse>(await DoRequestAsync("1.0", "baas.api.dwh.transaction.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 根据自定义条件查询用户列表
         * Summary: 查询账户列表
         */
        public QueryApiDwhAccountResponse QueryApiDwhAccount(QueryApiDwhAccountRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryApiDwhAccountEx(request, headers, runtime);
        }

        /**
         * Description: 根据自定义条件查询用户列表
         * Summary: 查询账户列表
         */
        public async Task<QueryApiDwhAccountResponse> QueryApiDwhAccountAsync(QueryApiDwhAccountRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryApiDwhAccountExAsync(request, headers, runtime);
        }

        /**
         * Description: 根据自定义条件查询用户列表
         * Summary: 查询账户列表
         */
        public QueryApiDwhAccountResponse QueryApiDwhAccountEx(QueryApiDwhAccountRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryApiDwhAccountResponse>(DoRequest("1.0", "baas.api.dwh.account.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 根据自定义条件查询用户列表
         * Summary: 查询账户列表
         */
        public async Task<QueryApiDwhAccountResponse> QueryApiDwhAccountExAsync(QueryApiDwhAccountRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryApiDwhAccountResponse>(await DoRequestAsync("1.0", "baas.api.dwh.account.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询合约接口
         * Summary: 查询合约
         */
        public QueryApiDwhContractResponse QueryApiDwhContract(QueryApiDwhContractRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryApiDwhContractEx(request, headers, runtime);
        }

        /**
         * Description: 查询合约接口
         * Summary: 查询合约
         */
        public async Task<QueryApiDwhContractResponse> QueryApiDwhContractAsync(QueryApiDwhContractRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryApiDwhContractExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询合约接口
         * Summary: 查询合约
         */
        public QueryApiDwhContractResponse QueryApiDwhContractEx(QueryApiDwhContractRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryApiDwhContractResponse>(DoRequest("1.0", "baas.api.dwh.contract.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询合约接口
         * Summary: 查询合约
         */
        public async Task<QueryApiDwhContractResponse> QueryApiDwhContractExAsync(QueryApiDwhContractRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryApiDwhContractResponse>(await DoRequestAsync("1.0", "baas.api.dwh.contract.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 单独查询交易
         * Summary: 查询链上交易
         */
        public QueryApiDwhbTransactionResponse QueryApiDwhbTransaction(QueryApiDwhbTransactionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryApiDwhbTransactionEx(request, headers, runtime);
        }

        /**
         * Description: 单独查询交易
         * Summary: 查询链上交易
         */
        public async Task<QueryApiDwhbTransactionResponse> QueryApiDwhbTransactionAsync(QueryApiDwhbTransactionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryApiDwhbTransactionExAsync(request, headers, runtime);
        }

        /**
         * Description: 单独查询交易
         * Summary: 查询链上交易
         */
        public QueryApiDwhbTransactionResponse QueryApiDwhbTransactionEx(QueryApiDwhbTransactionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryApiDwhbTransactionResponse>(DoRequest("1.0", "baas.api.dwhb.transaction.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 单独查询交易
         * Summary: 查询链上交易
         */
        public async Task<QueryApiDwhbTransactionResponse> QueryApiDwhbTransactionExAsync(QueryApiDwhbTransactionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryApiDwhbTransactionResponse>(await DoRequestAsync("1.0", "baas.api.dwhb.transaction.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 删除合约
         * Summary: 删除合约
         */
        public DeleteCaasContractServiceResponse DeleteCaasContractService(DeleteCaasContractServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return DeleteCaasContractServiceEx(request, headers, runtime);
        }

        /**
         * Description: 删除合约
         * Summary: 删除合约
         */
        public async Task<DeleteCaasContractServiceResponse> DeleteCaasContractServiceAsync(DeleteCaasContractServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await DeleteCaasContractServiceExAsync(request, headers, runtime);
        }

        /**
         * Description: 删除合约
         * Summary: 删除合约
         */
        public DeleteCaasContractServiceResponse DeleteCaasContractServiceEx(DeleteCaasContractServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteCaasContractServiceResponse>(DoRequest("1.0", "baas.caas.contract.service.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 删除合约
         * Summary: 删除合约
         */
        public async Task<DeleteCaasContractServiceResponse> DeleteCaasContractServiceExAsync(DeleteCaasContractServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteCaasContractServiceResponse>(await DoRequestAsync("1.0", "baas.caas.contract.service.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 新建合约服务
         * Summary: 新建合约服务
         */
        public CreateCaasContractServiceResponse CreateCaasContractService(CreateCaasContractServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateCaasContractServiceEx(request, headers, runtime);
        }

        /**
         * Description: 新建合约服务
         * Summary: 新建合约服务
         */
        public async Task<CreateCaasContractServiceResponse> CreateCaasContractServiceAsync(CreateCaasContractServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateCaasContractServiceExAsync(request, headers, runtime);
        }

        /**
         * Description: 新建合约服务
         * Summary: 新建合约服务
         */
        public CreateCaasContractServiceResponse CreateCaasContractServiceEx(CreateCaasContractServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateCaasContractServiceResponse>(DoRequest("1.0", "baas.caas.contract.service.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 新建合约服务
         * Summary: 新建合约服务
         */
        public async Task<CreateCaasContractServiceResponse> CreateCaasContractServiceExAsync(CreateCaasContractServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateCaasContractServiceResponse>(await DoRequestAsync("1.0", "baas.caas.contract.service.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 合约列表查询
         * Summary: 合约列表查询
         */
        public PagequeryCaasContractServiceResponse PagequeryCaasContractService(PagequeryCaasContractServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return PagequeryCaasContractServiceEx(request, headers, runtime);
        }

        /**
         * Description: 合约列表查询
         * Summary: 合约列表查询
         */
        public async Task<PagequeryCaasContractServiceResponse> PagequeryCaasContractServiceAsync(PagequeryCaasContractServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await PagequeryCaasContractServiceExAsync(request, headers, runtime);
        }

        /**
         * Description: 合约列表查询
         * Summary: 合约列表查询
         */
        public PagequeryCaasContractServiceResponse PagequeryCaasContractServiceEx(PagequeryCaasContractServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<PagequeryCaasContractServiceResponse>(DoRequest("1.0", "baas.caas.contract.service.pagequery", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 合约列表查询
         * Summary: 合约列表查询
         */
        public async Task<PagequeryCaasContractServiceResponse> PagequeryCaasContractServiceExAsync(PagequeryCaasContractServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<PagequeryCaasContractServiceResponse>(await DoRequestAsync("1.0", "baas.caas.contract.service.pagequery", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询创建实例进度
         * Summary: 查询创建实例进度
         */
        public QueryCaasContractServiceResponse QueryCaasContractService(QueryCaasContractServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryCaasContractServiceEx(request, headers, runtime);
        }

        /**
         * Description: 查询创建实例进度
         * Summary: 查询创建实例进度
         */
        public async Task<QueryCaasContractServiceResponse> QueryCaasContractServiceAsync(QueryCaasContractServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryCaasContractServiceExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询创建实例进度
         * Summary: 查询创建实例进度
         */
        public QueryCaasContractServiceResponse QueryCaasContractServiceEx(QueryCaasContractServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryCaasContractServiceResponse>(DoRequest("1.0", "baas.caas.contract.service.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询创建实例进度
         * Summary: 查询创建实例进度
         */
        public async Task<QueryCaasContractServiceResponse> QueryCaasContractServiceExAsync(QueryCaasContractServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryCaasContractServiceResponse>(await DoRequestAsync("1.0", "baas.caas.contract.service.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 自动化部署合约服务
         * Summary: 自动化部署合约服务
         */
        public DeployCaasContractServiceResponse DeployCaasContractService(DeployCaasContractServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return DeployCaasContractServiceEx(request, headers, runtime);
        }

        /**
         * Description: 自动化部署合约服务
         * Summary: 自动化部署合约服务
         */
        public async Task<DeployCaasContractServiceResponse> DeployCaasContractServiceAsync(DeployCaasContractServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await DeployCaasContractServiceExAsync(request, headers, runtime);
        }

        /**
         * Description: 自动化部署合约服务
         * Summary: 自动化部署合约服务
         */
        public DeployCaasContractServiceResponse DeployCaasContractServiceEx(DeployCaasContractServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeployCaasContractServiceResponse>(DoRequest("1.0", "baas.caas.contract.service.deploy", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 自动化部署合约服务
         * Summary: 自动化部署合约服务
         */
        public async Task<DeployCaasContractServiceResponse> DeployCaasContractServiceExAsync(DeployCaasContractServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeployCaasContractServiceResponse>(await DoRequestAsync("1.0", "baas.caas.contract.service.deploy", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询合约类型列表
         * Summary: 查询合约类型列表
         */
        public ListCaasContractServiceResponse ListCaasContractService(ListCaasContractServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ListCaasContractServiceEx(request, headers, runtime);
        }

        /**
         * Description: 查询合约类型列表
         * Summary: 查询合约类型列表
         */
        public async Task<ListCaasContractServiceResponse> ListCaasContractServiceAsync(ListCaasContractServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ListCaasContractServiceExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询合约类型列表
         * Summary: 查询合约类型列表
         */
        public ListCaasContractServiceResponse ListCaasContractServiceEx(ListCaasContractServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListCaasContractServiceResponse>(DoRequest("1.0", "baas.caas.contract.service.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询合约类型列表
         * Summary: 查询合约类型列表
         */
        public async Task<ListCaasContractServiceResponse> ListCaasContractServiceExAsync(ListCaasContractServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListCaasContractServiceResponse>(await DoRequestAsync("1.0", "baas.caas.contract.service.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 合约详情
         * Summary: 合约详情
         */
        public DetailCaasContractServiceResponse DetailCaasContractService(DetailCaasContractServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return DetailCaasContractServiceEx(request, headers, runtime);
        }

        /**
         * Description: 合约详情
         * Summary: 合约详情
         */
        public async Task<DetailCaasContractServiceResponse> DetailCaasContractServiceAsync(DetailCaasContractServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await DetailCaasContractServiceExAsync(request, headers, runtime);
        }

        /**
         * Description: 合约详情
         * Summary: 合约详情
         */
        public DetailCaasContractServiceResponse DetailCaasContractServiceEx(DetailCaasContractServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DetailCaasContractServiceResponse>(DoRequest("1.0", "baas.caas.contract.service.detail", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 合约详情
         * Summary: 合约详情
         */
        public async Task<DetailCaasContractServiceResponse> DetailCaasContractServiceExAsync(DetailCaasContractServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DetailCaasContractServiceResponse>(await DoRequestAsync("1.0", "baas.caas.contract.service.detail", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 新建应用
         * Summary: 新建应用
         */
        public CreateCaasApplicationManageResponse CreateCaasApplicationManage(CreateCaasApplicationManageRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateCaasApplicationManageEx(request, headers, runtime);
        }

        /**
         * Description: 新建应用
         * Summary: 新建应用
         */
        public async Task<CreateCaasApplicationManageResponse> CreateCaasApplicationManageAsync(CreateCaasApplicationManageRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateCaasApplicationManageExAsync(request, headers, runtime);
        }

        /**
         * Description: 新建应用
         * Summary: 新建应用
         */
        public CreateCaasApplicationManageResponse CreateCaasApplicationManageEx(CreateCaasApplicationManageRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateCaasApplicationManageResponse>(DoRequest("1.0", "baas.caas.application.manage.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 新建应用
         * Summary: 新建应用
         */
        public async Task<CreateCaasApplicationManageResponse> CreateCaasApplicationManageExAsync(CreateCaasApplicationManageRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateCaasApplicationManageResponse>(await DoRequestAsync("1.0", "baas.caas.application.manage.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 应用列表查询
         * Summary: 应用列表查询
         */
        public PagequeryCaasApplicationManageResponse PagequeryCaasApplicationManage(PagequeryCaasApplicationManageRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return PagequeryCaasApplicationManageEx(request, headers, runtime);
        }

        /**
         * Description: 应用列表查询
         * Summary: 应用列表查询
         */
        public async Task<PagequeryCaasApplicationManageResponse> PagequeryCaasApplicationManageAsync(PagequeryCaasApplicationManageRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await PagequeryCaasApplicationManageExAsync(request, headers, runtime);
        }

        /**
         * Description: 应用列表查询
         * Summary: 应用列表查询
         */
        public PagequeryCaasApplicationManageResponse PagequeryCaasApplicationManageEx(PagequeryCaasApplicationManageRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<PagequeryCaasApplicationManageResponse>(DoRequest("1.0", "baas.caas.application.manage.pagequery", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 应用列表查询
         * Summary: 应用列表查询
         */
        public async Task<PagequeryCaasApplicationManageResponse> PagequeryCaasApplicationManageExAsync(PagequeryCaasApplicationManageRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<PagequeryCaasApplicationManageResponse>(await DoRequestAsync("1.0", "baas.caas.application.manage.pagequery", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询合约绑定关系
         * Summary: 查询合约绑定关系
         */
        public QueryCaasApplicationManageResponse QueryCaasApplicationManage(QueryCaasApplicationManageRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryCaasApplicationManageEx(request, headers, runtime);
        }

        /**
         * Description: 查询合约绑定关系
         * Summary: 查询合约绑定关系
         */
        public async Task<QueryCaasApplicationManageResponse> QueryCaasApplicationManageAsync(QueryCaasApplicationManageRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryCaasApplicationManageExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询合约绑定关系
         * Summary: 查询合约绑定关系
         */
        public QueryCaasApplicationManageResponse QueryCaasApplicationManageEx(QueryCaasApplicationManageRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryCaasApplicationManageResponse>(DoRequest("1.0", "baas.caas.application.manage.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询合约绑定关系
         * Summary: 查询合约绑定关系
         */
        public async Task<QueryCaasApplicationManageResponse> QueryCaasApplicationManageExAsync(QueryCaasApplicationManageRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryCaasApplicationManageResponse>(await DoRequestAsync("1.0", "baas.caas.application.manage.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 解除授权
         * Summary: 解除授权
         */
        public UnbindCaasApplicationManageResponse UnbindCaasApplicationManage(UnbindCaasApplicationManageRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UnbindCaasApplicationManageEx(request, headers, runtime);
        }

        /**
         * Description: 解除授权
         * Summary: 解除授权
         */
        public async Task<UnbindCaasApplicationManageResponse> UnbindCaasApplicationManageAsync(UnbindCaasApplicationManageRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UnbindCaasApplicationManageExAsync(request, headers, runtime);
        }

        /**
         * Description: 解除授权
         * Summary: 解除授权
         */
        public UnbindCaasApplicationManageResponse UnbindCaasApplicationManageEx(UnbindCaasApplicationManageRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UnbindCaasApplicationManageResponse>(DoRequest("1.0", "baas.caas.application.manage.unbind", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 解除授权
         * Summary: 解除授权
         */
        public async Task<UnbindCaasApplicationManageResponse> UnbindCaasApplicationManageExAsync(UnbindCaasApplicationManageRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UnbindCaasApplicationManageResponse>(await DoRequestAsync("1.0", "baas.caas.application.manage.unbind", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 绑定合约
         * Summary: 绑定合约
         */
        public BindCaasApplicationManageResponse BindCaasApplicationManage(BindCaasApplicationManageRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return BindCaasApplicationManageEx(request, headers, runtime);
        }

        /**
         * Description: 绑定合约
         * Summary: 绑定合约
         */
        public async Task<BindCaasApplicationManageResponse> BindCaasApplicationManageAsync(BindCaasApplicationManageRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await BindCaasApplicationManageExAsync(request, headers, runtime);
        }

        /**
         * Description: 绑定合约
         * Summary: 绑定合约
         */
        public BindCaasApplicationManageResponse BindCaasApplicationManageEx(BindCaasApplicationManageRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BindCaasApplicationManageResponse>(DoRequest("1.0", "baas.caas.application.manage.bind", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 绑定合约
         * Summary: 绑定合约
         */
        public async Task<BindCaasApplicationManageResponse> BindCaasApplicationManageExAsync(BindCaasApplicationManageRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BindCaasApplicationManageResponse>(await DoRequestAsync("1.0", "baas.caas.application.manage.bind", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查看sk
         * Summary: 查看sk
         */
        public GetCaasApplicationManageResponse GetCaasApplicationManage(GetCaasApplicationManageRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return GetCaasApplicationManageEx(request, headers, runtime);
        }

        /**
         * Description: 查看sk
         * Summary: 查看sk
         */
        public async Task<GetCaasApplicationManageResponse> GetCaasApplicationManageAsync(GetCaasApplicationManageRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await GetCaasApplicationManageExAsync(request, headers, runtime);
        }

        /**
         * Description: 查看sk
         * Summary: 查看sk
         */
        public GetCaasApplicationManageResponse GetCaasApplicationManageEx(GetCaasApplicationManageRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetCaasApplicationManageResponse>(DoRequest("1.0", "baas.caas.application.manage.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查看sk
         * Summary: 查看sk
         */
        public async Task<GetCaasApplicationManageResponse> GetCaasApplicationManageExAsync(GetCaasApplicationManageRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetCaasApplicationManageResponse>(await DoRequestAsync("1.0", "baas.caas.application.manage.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 智能合约市场列表查询
         * Summary: 智能合约市场列表查询
         */
        public PagequeryCaasContractMarketResponse PagequeryCaasContractMarket(PagequeryCaasContractMarketRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return PagequeryCaasContractMarketEx(request, headers, runtime);
        }

        /**
         * Description: 智能合约市场列表查询
         * Summary: 智能合约市场列表查询
         */
        public async Task<PagequeryCaasContractMarketResponse> PagequeryCaasContractMarketAsync(PagequeryCaasContractMarketRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await PagequeryCaasContractMarketExAsync(request, headers, runtime);
        }

        /**
         * Description: 智能合约市场列表查询
         * Summary: 智能合约市场列表查询
         */
        public PagequeryCaasContractMarketResponse PagequeryCaasContractMarketEx(PagequeryCaasContractMarketRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<PagequeryCaasContractMarketResponse>(DoRequest("1.0", "baas.caas.contract.market.pagequery", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 智能合约市场列表查询
         * Summary: 智能合约市场列表查询
         */
        public async Task<PagequeryCaasContractMarketResponse> PagequeryCaasContractMarketExAsync(PagequeryCaasContractMarketRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<PagequeryCaasContractMarketResponse>(await DoRequestAsync("1.0", "baas.caas.contract.market.pagequery", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 合约部署记录
         * Summary: 合约部署记录
         */
        public CreateContractRecordResponse CreateContractRecord(CreateContractRecordRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateContractRecordEx(request, headers, runtime);
        }

        /**
         * Description: 合约部署记录
         * Summary: 合约部署记录
         */
        public async Task<CreateContractRecordResponse> CreateContractRecordAsync(CreateContractRecordRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateContractRecordExAsync(request, headers, runtime);
        }

        /**
         * Description: 合约部署记录
         * Summary: 合约部署记录
         */
        public CreateContractRecordResponse CreateContractRecordEx(CreateContractRecordRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateContractRecordResponse>(DoRequest("1.0", "baas.contract.record.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 合约部署记录
         * Summary: 合约部署记录
         */
        public async Task<CreateContractRecordResponse> CreateContractRecordExAsync(CreateContractRecordRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateContractRecordResponse>(await DoRequestAsync("1.0", "baas.contract.record.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 部署记录详情
         * Summary: 部署记录详情
         */
        public GetContractRecordResponse GetContractRecord(GetContractRecordRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return GetContractRecordEx(request, headers, runtime);
        }

        /**
         * Description: 部署记录详情
         * Summary: 部署记录详情
         */
        public async Task<GetContractRecordResponse> GetContractRecordAsync(GetContractRecordRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await GetContractRecordExAsync(request, headers, runtime);
        }

        /**
         * Description: 部署记录详情
         * Summary: 部署记录详情
         */
        public GetContractRecordResponse GetContractRecordEx(GetContractRecordRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetContractRecordResponse>(DoRequest("1.0", "baas.contract.record.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 部署记录详情
         * Summary: 部署记录详情
         */
        public async Task<GetContractRecordResponse> GetContractRecordExAsync(GetContractRecordRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetContractRecordResponse>(await DoRequestAsync("1.0", "baas.contract.record.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 合约升级更新
         * Summary: 合约升级更新
         */
        public UpdateContractRecordResponse UpdateContractRecord(UpdateContractRecordRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateContractRecordEx(request, headers, runtime);
        }

        /**
         * Description: 合约升级更新
         * Summary: 合约升级更新
         */
        public async Task<UpdateContractRecordResponse> UpdateContractRecordAsync(UpdateContractRecordRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateContractRecordExAsync(request, headers, runtime);
        }

        /**
         * Description: 合约升级更新
         * Summary: 合约升级更新
         */
        public UpdateContractRecordResponse UpdateContractRecordEx(UpdateContractRecordRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateContractRecordResponse>(DoRequest("1.0", "baas.contract.record.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 合约升级更新
         * Summary: 合约升级更新
         */
        public async Task<UpdateContractRecordResponse> UpdateContractRecordExAsync(UpdateContractRecordRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateContractRecordResponse>(await DoRequestAsync("1.0", "baas.contract.record.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 发布合约服务
         * Summary: 发布合约服务
         */
        public OnlineContractRecordResponse OnlineContractRecord(OnlineContractRecordRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return OnlineContractRecordEx(request, headers, runtime);
        }

        /**
         * Description: 发布合约服务
         * Summary: 发布合约服务
         */
        public async Task<OnlineContractRecordResponse> OnlineContractRecordAsync(OnlineContractRecordRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await OnlineContractRecordExAsync(request, headers, runtime);
        }

        /**
         * Description: 发布合约服务
         * Summary: 发布合约服务
         */
        public OnlineContractRecordResponse OnlineContractRecordEx(OnlineContractRecordRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<OnlineContractRecordResponse>(DoRequest("1.0", "baas.contract.record.online", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 发布合约服务
         * Summary: 发布合约服务
         */
        public async Task<OnlineContractRecordResponse> OnlineContractRecordExAsync(OnlineContractRecordRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<OnlineContractRecordResponse>(await DoRequestAsync("1.0", "baas.contract.record.online", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 合约服务下线
         * Summary: 合约服务下线
         */
        public OfflineContractRecordResponse OfflineContractRecord(OfflineContractRecordRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return OfflineContractRecordEx(request, headers, runtime);
        }

        /**
         * Description: 合约服务下线
         * Summary: 合约服务下线
         */
        public async Task<OfflineContractRecordResponse> OfflineContractRecordAsync(OfflineContractRecordRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await OfflineContractRecordExAsync(request, headers, runtime);
        }

        /**
         * Description: 合约服务下线
         * Summary: 合约服务下线
         */
        public OfflineContractRecordResponse OfflineContractRecordEx(OfflineContractRecordRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<OfflineContractRecordResponse>(DoRequest("1.0", "baas.contract.record.offline", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 合约服务下线
         * Summary: 合约服务下线
         */
        public async Task<OfflineContractRecordResponse> OfflineContractRecordExAsync(OfflineContractRecordRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<OfflineContractRecordResponse>(await DoRequestAsync("1.0", "baas.contract.record.offline", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询合约部署记录
         * Summary: 查询合约部署记录
         */
        public QueryContractRecordResponse QueryContractRecord(QueryContractRecordRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryContractRecordEx(request, headers, runtime);
        }

        /**
         * Description: 查询合约部署记录
         * Summary: 查询合约部署记录
         */
        public async Task<QueryContractRecordResponse> QueryContractRecordAsync(QueryContractRecordRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryContractRecordExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询合约部署记录
         * Summary: 查询合约部署记录
         */
        public QueryContractRecordResponse QueryContractRecordEx(QueryContractRecordRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryContractRecordResponse>(DoRequest("1.0", "baas.contract.record.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询合约部署记录
         * Summary: 查询合约部署记录
         */
        public async Task<QueryContractRecordResponse> QueryContractRecordExAsync(QueryContractRecordRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryContractRecordResponse>(await DoRequestAsync("1.0", "baas.contract.record.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 合约代理调用
         * Summary: 合约代理调用
         */
        public ExecContractDelegateResponse ExecContractDelegate(ExecContractDelegateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ExecContractDelegateEx(request, headers, runtime);
        }

        /**
         * Description: 合约代理调用
         * Summary: 合约代理调用
         */
        public async Task<ExecContractDelegateResponse> ExecContractDelegateAsync(ExecContractDelegateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ExecContractDelegateExAsync(request, headers, runtime);
        }

        /**
         * Description: 合约代理调用
         * Summary: 合约代理调用
         */
        public ExecContractDelegateResponse ExecContractDelegateEx(ExecContractDelegateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecContractDelegateResponse>(DoRequest("1.0", "baas.contract.delegate.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 合约代理调用
         * Summary: 合约代理调用
         */
        public async Task<ExecContractDelegateResponse> ExecContractDelegateExAsync(ExecContractDelegateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecContractDelegateResponse>(await DoRequestAsync("1.0", "baas.contract.delegate.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 调用合约服务
         * Summary: 调用合约服务
         */
        public ExecContractServiceResponse ExecContractService(ExecContractServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ExecContractServiceEx(request, headers, runtime);
        }

        /**
         * Description: 调用合约服务
         * Summary: 调用合约服务
         */
        public async Task<ExecContractServiceResponse> ExecContractServiceAsync(ExecContractServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ExecContractServiceExAsync(request, headers, runtime);
        }

        /**
         * Description: 调用合约服务
         * Summary: 调用合约服务
         */
        public ExecContractServiceResponse ExecContractServiceEx(ExecContractServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecContractServiceResponse>(DoRequest("1.0", "baas.contract.service.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 调用合约服务
         * Summary: 调用合约服务
         */
        public async Task<ExecContractServiceResponse> ExecContractServiceExAsync(ExecContractServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecContractServiceResponse>(await DoRequestAsync("1.0", "baas.contract.service.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取当前租户具有访问权限的合约链配置列表，方便在client（IDE插件、SDK等）访问合约链
         * Summary: 获取合约链配置
         */
        public GetContractConfigChainResponse GetContractConfigChain(GetContractConfigChainRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return GetContractConfigChainEx(request, headers, runtime);
        }

        /**
         * Description: 获取当前租户具有访问权限的合约链配置列表，方便在client（IDE插件、SDK等）访问合约链
         * Summary: 获取合约链配置
         */
        public async Task<GetContractConfigChainResponse> GetContractConfigChainAsync(GetContractConfigChainRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await GetContractConfigChainExAsync(request, headers, runtime);
        }

        /**
         * Description: 获取当前租户具有访问权限的合约链配置列表，方便在client（IDE插件、SDK等）访问合约链
         * Summary: 获取合约链配置
         */
        public GetContractConfigChainResponse GetContractConfigChainEx(GetContractConfigChainRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetContractConfigChainResponse>(DoRequest("1.0", "baas.contract.config.chain.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取当前租户具有访问权限的合约链配置列表，方便在client（IDE插件、SDK等）访问合约链
         * Summary: 获取合约链配置
         */
        public async Task<GetContractConfigChainResponse> GetContractConfigChainExAsync(GetContractConfigChainRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetContractConfigChainResponse>(await DoRequestAsync("1.0", "baas.contract.config.chain.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 申请获取一个可以上传文件到oss的url，此url可用时间默认为30秒
         * Summary: 获取oss的可用url上传文件
         */
        public GetContractAbiUrlResponse GetContractAbiUrl(GetContractAbiUrlRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return GetContractAbiUrlEx(request, headers, runtime);
        }

        /**
         * Description: 申请获取一个可以上传文件到oss的url，此url可用时间默认为30秒
         * Summary: 获取oss的可用url上传文件
         */
        public async Task<GetContractAbiUrlResponse> GetContractAbiUrlAsync(GetContractAbiUrlRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await GetContractAbiUrlExAsync(request, headers, runtime);
        }

        /**
         * Description: 申请获取一个可以上传文件到oss的url，此url可用时间默认为30秒
         * Summary: 获取oss的可用url上传文件
         */
        public GetContractAbiUrlResponse GetContractAbiUrlEx(GetContractAbiUrlRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetContractAbiUrlResponse>(DoRequest("1.0", "baas.contract.abi.url.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 申请获取一个可以上传文件到oss的url，此url可用时间默认为30秒
         * Summary: 获取oss的可用url上传文件
         */
        public async Task<GetContractAbiUrlResponse> GetContractAbiUrlExAsync(GetContractAbiUrlRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetContractAbiUrlResponse>(await DoRequestAsync("1.0", "baas.contract.abi.url.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 申请获取一个可以上传bytecode文件到oss的url，此url可用时间默认为30秒
         * Summary: 获取oss的可用url上传文件
         */
        public GetContractBytecodeUrlResponse GetContractBytecodeUrl(GetContractBytecodeUrlRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return GetContractBytecodeUrlEx(request, headers, runtime);
        }

        /**
         * Description: 申请获取一个可以上传bytecode文件到oss的url，此url可用时间默认为30秒
         * Summary: 获取oss的可用url上传文件
         */
        public async Task<GetContractBytecodeUrlResponse> GetContractBytecodeUrlAsync(GetContractBytecodeUrlRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await GetContractBytecodeUrlExAsync(request, headers, runtime);
        }

        /**
         * Description: 申请获取一个可以上传bytecode文件到oss的url，此url可用时间默认为30秒
         * Summary: 获取oss的可用url上传文件
         */
        public GetContractBytecodeUrlResponse GetContractBytecodeUrlEx(GetContractBytecodeUrlRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetContractBytecodeUrlResponse>(DoRequest("1.0", "baas.contract.bytecode.url.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 申请获取一个可以上传bytecode文件到oss的url，此url可用时间默认为30秒
         * Summary: 获取oss的可用url上传文件
         */
        public async Task<GetContractBytecodeUrlResponse> GetContractBytecodeUrlExAsync(GetContractBytecodeUrlRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetContractBytecodeUrlResponse>(await DoRequestAsync("1.0", "baas.contract.bytecode.url.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 上传批量查询数据文件
         * Summary: 上传批量查询数据文件
         */
        public UploadDataFileBatchqueryResponse UploadDataFileBatchquery(UploadDataFileBatchqueryRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UploadDataFileBatchqueryEx(request, headers, runtime);
        }

        /**
         * Description: 上传批量查询数据文件
         * Summary: 上传批量查询数据文件
         */
        public async Task<UploadDataFileBatchqueryResponse> UploadDataFileBatchqueryAsync(UploadDataFileBatchqueryRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UploadDataFileBatchqueryExAsync(request, headers, runtime);
        }

        /**
         * Description: 上传批量查询数据文件
         * Summary: 上传批量查询数据文件
         */
        public UploadDataFileBatchqueryResponse UploadDataFileBatchqueryEx(UploadDataFileBatchqueryRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            if (!AlibabaCloud.TeaUtil.Common.IsUnset(request.FileObject))
            {
                CreateAntcloudGatewayxFileUploadRequest uploadReq = new CreateAntcloudGatewayxFileUploadRequest
                {
                    AuthToken = request.AuthToken,
                    ApiCode = "baas.data.file.batchquery.upload",
                    FileName = request.FileObjectName,
                };
                CreateAntcloudGatewayxFileUploadResponse uploadResp = CreateAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
                if (!AntChain.AlipayUtil.AntchainUtils.IsSuccess(uploadResp.ResultCode, "ok"))
                {
                    UploadDataFileBatchqueryResponse uploadDataFileBatchqueryResponse = new UploadDataFileBatchqueryResponse
                    {
                        ReqMsgId = uploadResp.ReqMsgId,
                        ResultCode = uploadResp.ResultCode,
                        ResultMsg = uploadResp.ResultMsg,
                    };
                    return uploadDataFileBatchqueryResponse;
                }
                Dictionary<string, string> uploadHeaders = AntChain.AlipayUtil.AntchainUtils.ParseUploadHeaders(uploadResp.UploadHeaders);
                AntChain.AlipayUtil.AntchainUtils.PutObject(request.FileObject, uploadHeaders, uploadResp.UploadUrl);
                request.FileId = uploadResp.FileId;
                request.FileObject = null;
            }
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UploadDataFileBatchqueryResponse>(DoRequest("1.0", "baas.data.file.batchquery.upload", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 上传批量查询数据文件
         * Summary: 上传批量查询数据文件
         */
        public async Task<UploadDataFileBatchqueryResponse> UploadDataFileBatchqueryExAsync(UploadDataFileBatchqueryRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            if (!AlibabaCloud.TeaUtil.Common.IsUnset(request.FileObject))
            {
                CreateAntcloudGatewayxFileUploadRequest uploadReq = new CreateAntcloudGatewayxFileUploadRequest
                {
                    AuthToken = request.AuthToken,
                    ApiCode = "baas.data.file.batchquery.upload",
                    FileName = request.FileObjectName,
                };
                CreateAntcloudGatewayxFileUploadResponse uploadResp = await CreateAntcloudGatewayxFileUploadExAsync(uploadReq, headers, runtime);
                if (!AntChain.AlipayUtil.AntchainUtils.IsSuccess(uploadResp.ResultCode, "ok"))
                {
                    UploadDataFileBatchqueryResponse uploadDataFileBatchqueryResponse = new UploadDataFileBatchqueryResponse
                    {
                        ReqMsgId = uploadResp.ReqMsgId,
                        ResultCode = uploadResp.ResultCode,
                        ResultMsg = uploadResp.ResultMsg,
                    };
                    return uploadDataFileBatchqueryResponse;
                }
                Dictionary<string, string> uploadHeaders = AntChain.AlipayUtil.AntchainUtils.ParseUploadHeaders(uploadResp.UploadHeaders);
                AntChain.AlipayUtil.AntchainUtils.PutObject(request.FileObject, uploadHeaders, uploadResp.UploadUrl);
                request.FileId = uploadResp.FileId;
                request.FileObject = null;
            }
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UploadDataFileBatchqueryResponse>(await DoRequestAsync("1.0", "baas.data.file.batchquery.upload", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取查询数据集任务结果
         * Summary: 获取查询数据集任务结果
         */
        public QueryDataResultBatchqueryResponse QueryDataResultBatchquery(QueryDataResultBatchqueryRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDataResultBatchqueryEx(request, headers, runtime);
        }

        /**
         * Description: 获取查询数据集任务结果
         * Summary: 获取查询数据集任务结果
         */
        public async Task<QueryDataResultBatchqueryResponse> QueryDataResultBatchqueryAsync(QueryDataResultBatchqueryRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDataResultBatchqueryExAsync(request, headers, runtime);
        }

        /**
         * Description: 获取查询数据集任务结果
         * Summary: 获取查询数据集任务结果
         */
        public QueryDataResultBatchqueryResponse QueryDataResultBatchqueryEx(QueryDataResultBatchqueryRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDataResultBatchqueryResponse>(DoRequest("1.0", "baas.data.result.batchquery.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取查询数据集任务结果
         * Summary: 获取查询数据集任务结果
         */
        public async Task<QueryDataResultBatchqueryResponse> QueryDataResultBatchqueryExAsync(QueryDataResultBatchqueryRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDataResultBatchqueryResponse>(await DoRequestAsync("1.0", "baas.data.result.batchquery.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务创建参与方
         * Summary: 数据授权服务创建参与方
         */
        public CreateDataauthorizationParticipantResponse CreateDataauthorizationParticipant(CreateDataauthorizationParticipantRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDataauthorizationParticipantEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务创建参与方
         * Summary: 数据授权服务创建参与方
         */
        public async Task<CreateDataauthorizationParticipantResponse> CreateDataauthorizationParticipantAsync(CreateDataauthorizationParticipantRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDataauthorizationParticipantExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务创建参与方
         * Summary: 数据授权服务创建参与方
         */
        public CreateDataauthorizationParticipantResponse CreateDataauthorizationParticipantEx(CreateDataauthorizationParticipantRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDataauthorizationParticipantResponse>(DoRequest("1.0", "baas.dataauthorization.participant.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务创建参与方
         * Summary: 数据授权服务创建参与方
         */
        public async Task<CreateDataauthorizationParticipantResponse> CreateDataauthorizationParticipantExAsync(CreateDataauthorizationParticipantRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDataauthorizationParticipantResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.participant.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务删除参与方
         * Summary: 数据授权服务删除参与方
         */
        public DeleteDataauthorizationParticipantResponse DeleteDataauthorizationParticipant(DeleteDataauthorizationParticipantRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return DeleteDataauthorizationParticipantEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务删除参与方
         * Summary: 数据授权服务删除参与方
         */
        public async Task<DeleteDataauthorizationParticipantResponse> DeleteDataauthorizationParticipantAsync(DeleteDataauthorizationParticipantRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await DeleteDataauthorizationParticipantExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务删除参与方
         * Summary: 数据授权服务删除参与方
         */
        public DeleteDataauthorizationParticipantResponse DeleteDataauthorizationParticipantEx(DeleteDataauthorizationParticipantRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteDataauthorizationParticipantResponse>(DoRequest("1.0", "baas.dataauthorization.participant.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务删除参与方
         * Summary: 数据授权服务删除参与方
         */
        public async Task<DeleteDataauthorizationParticipantResponse> DeleteDataauthorizationParticipantExAsync(DeleteDataauthorizationParticipantRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteDataauthorizationParticipantResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.participant.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务修改用户信息
         * Summary: 数据授权服务修改用户信息
         */
        public UpdateDataauthorizationParticipantResponse UpdateDataauthorizationParticipant(UpdateDataauthorizationParticipantRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateDataauthorizationParticipantEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务修改用户信息
         * Summary: 数据授权服务修改用户信息
         */
        public async Task<UpdateDataauthorizationParticipantResponse> UpdateDataauthorizationParticipantAsync(UpdateDataauthorizationParticipantRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateDataauthorizationParticipantExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务修改用户信息
         * Summary: 数据授权服务修改用户信息
         */
        public UpdateDataauthorizationParticipantResponse UpdateDataauthorizationParticipantEx(UpdateDataauthorizationParticipantRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDataauthorizationParticipantResponse>(DoRequest("1.0", "baas.dataauthorization.participant.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务修改用户信息
         * Summary: 数据授权服务修改用户信息
         */
        public async Task<UpdateDataauthorizationParticipantResponse> UpdateDataauthorizationParticipantExAsync(UpdateDataauthorizationParticipantRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDataauthorizationParticipantResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.participant.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务查询参与方信息
         * Summary: 数据授权服务查询参与方信息
         */
        public QueryDataauthorizationParticipantResponse QueryDataauthorizationParticipant(QueryDataauthorizationParticipantRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDataauthorizationParticipantEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务查询参与方信息
         * Summary: 数据授权服务查询参与方信息
         */
        public async Task<QueryDataauthorizationParticipantResponse> QueryDataauthorizationParticipantAsync(QueryDataauthorizationParticipantRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDataauthorizationParticipantExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务查询参与方信息
         * Summary: 数据授权服务查询参与方信息
         */
        public QueryDataauthorizationParticipantResponse QueryDataauthorizationParticipantEx(QueryDataauthorizationParticipantRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDataauthorizationParticipantResponse>(DoRequest("1.0", "baas.dataauthorization.participant.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务查询参与方信息
         * Summary: 数据授权服务查询参与方信息
         */
        public async Task<QueryDataauthorizationParticipantResponse> QueryDataauthorizationParticipantExAsync(QueryDataauthorizationParticipantRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDataauthorizationParticipantResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.participant.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务根据角色获取用户列表
         * Summary: 数据授权服务根据角色获取用户列表
         */
        public ListDataauthorizationParticipantResponse ListDataauthorizationParticipant(ListDataauthorizationParticipantRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ListDataauthorizationParticipantEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务根据角色获取用户列表
         * Summary: 数据授权服务根据角色获取用户列表
         */
        public async Task<ListDataauthorizationParticipantResponse> ListDataauthorizationParticipantAsync(ListDataauthorizationParticipantRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ListDataauthorizationParticipantExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务根据角色获取用户列表
         * Summary: 数据授权服务根据角色获取用户列表
         */
        public ListDataauthorizationParticipantResponse ListDataauthorizationParticipantEx(ListDataauthorizationParticipantRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListDataauthorizationParticipantResponse>(DoRequest("1.0", "baas.dataauthorization.participant.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务根据角色获取用户列表
         * Summary: 数据授权服务根据角色获取用户列表
         */
        public async Task<ListDataauthorizationParticipantResponse> ListDataauthorizationParticipantExAsync(ListDataauthorizationParticipantRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListDataauthorizationParticipantResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.participant.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务创建数据目录
         * Summary: 数据授权服务创建数据目录
         */
        public CreateDataauthorizationDataEntityResponse CreateDataauthorizationDataEntity(CreateDataauthorizationDataEntityRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDataauthorizationDataEntityEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务创建数据目录
         * Summary: 数据授权服务创建数据目录
         */
        public async Task<CreateDataauthorizationDataEntityResponse> CreateDataauthorizationDataEntityAsync(CreateDataauthorizationDataEntityRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDataauthorizationDataEntityExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务创建数据目录
         * Summary: 数据授权服务创建数据目录
         */
        public CreateDataauthorizationDataEntityResponse CreateDataauthorizationDataEntityEx(CreateDataauthorizationDataEntityRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDataauthorizationDataEntityResponse>(DoRequest("1.0", "baas.dataauthorization.data.entity.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务创建数据目录
         * Summary: 数据授权服务创建数据目录
         */
        public async Task<CreateDataauthorizationDataEntityResponse> CreateDataauthorizationDataEntityExAsync(CreateDataauthorizationDataEntityRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDataauthorizationDataEntityResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.data.entity.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务查询数据目录
         * Summary: 数据授权服务查询数据目录
         */
        public QueryDataauthorizationDataEntityResponse QueryDataauthorizationDataEntity(QueryDataauthorizationDataEntityRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDataauthorizationDataEntityEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务查询数据目录
         * Summary: 数据授权服务查询数据目录
         */
        public async Task<QueryDataauthorizationDataEntityResponse> QueryDataauthorizationDataEntityAsync(QueryDataauthorizationDataEntityRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDataauthorizationDataEntityExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务查询数据目录
         * Summary: 数据授权服务查询数据目录
         */
        public QueryDataauthorizationDataEntityResponse QueryDataauthorizationDataEntityEx(QueryDataauthorizationDataEntityRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDataauthorizationDataEntityResponse>(DoRequest("1.0", "baas.dataauthorization.data.entity.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务查询数据目录
         * Summary: 数据授权服务查询数据目录
         */
        public async Task<QueryDataauthorizationDataEntityResponse> QueryDataauthorizationDataEntityExAsync(QueryDataauthorizationDataEntityRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDataauthorizationDataEntityResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.data.entity.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务公钥矩阵更新
         * Summary: 数据授权服务公钥矩阵更新
         */
        public UpdateDataauthorizationPublicKeyResponse UpdateDataauthorizationPublicKey(UpdateDataauthorizationPublicKeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateDataauthorizationPublicKeyEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务公钥矩阵更新
         * Summary: 数据授权服务公钥矩阵更新
         */
        public async Task<UpdateDataauthorizationPublicKeyResponse> UpdateDataauthorizationPublicKeyAsync(UpdateDataauthorizationPublicKeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateDataauthorizationPublicKeyExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务公钥矩阵更新
         * Summary: 数据授权服务公钥矩阵更新
         */
        public UpdateDataauthorizationPublicKeyResponse UpdateDataauthorizationPublicKeyEx(UpdateDataauthorizationPublicKeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDataauthorizationPublicKeyResponse>(DoRequest("1.0", "baas.dataauthorization.public.key.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务公钥矩阵更新
         * Summary: 数据授权服务公钥矩阵更新
         */
        public async Task<UpdateDataauthorizationPublicKeyResponse> UpdateDataauthorizationPublicKeyExAsync(UpdateDataauthorizationPublicKeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDataauthorizationPublicKeyResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.public.key.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务公钥矩阵查询
         * Summary: 数据授权服务公钥矩阵查询
         */
        public ListDataauthorizationPublicKeyResponse ListDataauthorizationPublicKey(ListDataauthorizationPublicKeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ListDataauthorizationPublicKeyEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务公钥矩阵查询
         * Summary: 数据授权服务公钥矩阵查询
         */
        public async Task<ListDataauthorizationPublicKeyResponse> ListDataauthorizationPublicKeyAsync(ListDataauthorizationPublicKeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ListDataauthorizationPublicKeyExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务公钥矩阵查询
         * Summary: 数据授权服务公钥矩阵查询
         */
        public ListDataauthorizationPublicKeyResponse ListDataauthorizationPublicKeyEx(ListDataauthorizationPublicKeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListDataauthorizationPublicKeyResponse>(DoRequest("1.0", "baas.dataauthorization.public.key.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务公钥矩阵查询
         * Summary: 数据授权服务公钥矩阵查询
         */
        public async Task<ListDataauthorizationPublicKeyResponse> ListDataauthorizationPublicKeyExAsync(ListDataauthorizationPublicKeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListDataauthorizationPublicKeyResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.public.key.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务开通服务
         * Summary: 数据授权服务开通服务
         */
        public OpenDataauthorizationAuthorizationServiceResponse OpenDataauthorizationAuthorizationService(OpenDataauthorizationAuthorizationServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return OpenDataauthorizationAuthorizationServiceEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务开通服务
         * Summary: 数据授权服务开通服务
         */
        public async Task<OpenDataauthorizationAuthorizationServiceResponse> OpenDataauthorizationAuthorizationServiceAsync(OpenDataauthorizationAuthorizationServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await OpenDataauthorizationAuthorizationServiceExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务开通服务
         * Summary: 数据授权服务开通服务
         */
        public OpenDataauthorizationAuthorizationServiceResponse OpenDataauthorizationAuthorizationServiceEx(OpenDataauthorizationAuthorizationServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<OpenDataauthorizationAuthorizationServiceResponse>(DoRequest("1.0", "baas.dataauthorization.authorization.service.open", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务开通服务
         * Summary: 数据授权服务开通服务
         */
        public async Task<OpenDataauthorizationAuthorizationServiceResponse> OpenDataauthorizationAuthorizationServiceExAsync(OpenDataauthorizationAuthorizationServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<OpenDataauthorizationAuthorizationServiceResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.authorization.service.open", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务关闭租户服务
         * Summary: 数据授权服务关闭租户服务
         */
        public CloseDataauthorizationAuthorizationServiceResponse CloseDataauthorizationAuthorizationService(CloseDataauthorizationAuthorizationServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CloseDataauthorizationAuthorizationServiceEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务关闭租户服务
         * Summary: 数据授权服务关闭租户服务
         */
        public async Task<CloseDataauthorizationAuthorizationServiceResponse> CloseDataauthorizationAuthorizationServiceAsync(CloseDataauthorizationAuthorizationServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CloseDataauthorizationAuthorizationServiceExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务关闭租户服务
         * Summary: 数据授权服务关闭租户服务
         */
        public CloseDataauthorizationAuthorizationServiceResponse CloseDataauthorizationAuthorizationServiceEx(CloseDataauthorizationAuthorizationServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CloseDataauthorizationAuthorizationServiceResponse>(DoRequest("1.0", "baas.dataauthorization.authorization.service.close", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务关闭租户服务
         * Summary: 数据授权服务关闭租户服务
         */
        public async Task<CloseDataauthorizationAuthorizationServiceResponse> CloseDataauthorizationAuthorizationServiceExAsync(CloseDataauthorizationAuthorizationServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CloseDataauthorizationAuthorizationServiceResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.authorization.service.close", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务申请权限
         * Summary: 数据授权服务申请权限
         */
        public ApplyDataauthorizationAuthorizationResponse ApplyDataauthorizationAuthorization(ApplyDataauthorizationAuthorizationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ApplyDataauthorizationAuthorizationEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务申请权限
         * Summary: 数据授权服务申请权限
         */
        public async Task<ApplyDataauthorizationAuthorizationResponse> ApplyDataauthorizationAuthorizationAsync(ApplyDataauthorizationAuthorizationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ApplyDataauthorizationAuthorizationExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务申请权限
         * Summary: 数据授权服务申请权限
         */
        public ApplyDataauthorizationAuthorizationResponse ApplyDataauthorizationAuthorizationEx(ApplyDataauthorizationAuthorizationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyDataauthorizationAuthorizationResponse>(DoRequest("1.0", "baas.dataauthorization.authorization.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务申请权限
         * Summary: 数据授权服务申请权限
         */
        public async Task<ApplyDataauthorizationAuthorizationResponse> ApplyDataauthorizationAuthorizationExAsync(ApplyDataauthorizationAuthorizationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyDataauthorizationAuthorizationResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.authorization.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务流程步骤处理
         * Summary: 数据授权服务流程步骤处理
         */
        public ExecDataauthorizationProcessResponse ExecDataauthorizationProcess(ExecDataauthorizationProcessRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ExecDataauthorizationProcessEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务流程步骤处理
         * Summary: 数据授权服务流程步骤处理
         */
        public async Task<ExecDataauthorizationProcessResponse> ExecDataauthorizationProcessAsync(ExecDataauthorizationProcessRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ExecDataauthorizationProcessExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务流程步骤处理
         * Summary: 数据授权服务流程步骤处理
         */
        public ExecDataauthorizationProcessResponse ExecDataauthorizationProcessEx(ExecDataauthorizationProcessRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecDataauthorizationProcessResponse>(DoRequest("1.0", "baas.dataauthorization.process.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务流程步骤处理
         * Summary: 数据授权服务流程步骤处理
         */
        public async Task<ExecDataauthorizationProcessResponse> ExecDataauthorizationProcessExAsync(ExecDataauthorizationProcessRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecDataauthorizationProcessResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.process.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务取消授权
         * Summary: 数据授权服务取消授权
         */
        public CancelDataauthorizationAuthorizationResponse CancelDataauthorizationAuthorization(CancelDataauthorizationAuthorizationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CancelDataauthorizationAuthorizationEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务取消授权
         * Summary: 数据授权服务取消授权
         */
        public async Task<CancelDataauthorizationAuthorizationResponse> CancelDataauthorizationAuthorizationAsync(CancelDataauthorizationAuthorizationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CancelDataauthorizationAuthorizationExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务取消授权
         * Summary: 数据授权服务取消授权
         */
        public CancelDataauthorizationAuthorizationResponse CancelDataauthorizationAuthorizationEx(CancelDataauthorizationAuthorizationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CancelDataauthorizationAuthorizationResponse>(DoRequest("1.0", "baas.dataauthorization.authorization.cancel", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务取消授权
         * Summary: 数据授权服务取消授权
         */
        public async Task<CancelDataauthorizationAuthorizationResponse> CancelDataauthorizationAuthorizationExAsync(CancelDataauthorizationAuthorizationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CancelDataauthorizationAuthorizationResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.authorization.cancel", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务权限校验
         * Summary: 数据授权服务权限校验
         */
        public CheckDataauthorizationAuthorizationResponse CheckDataauthorizationAuthorization(CheckDataauthorizationAuthorizationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CheckDataauthorizationAuthorizationEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务权限校验
         * Summary: 数据授权服务权限校验
         */
        public async Task<CheckDataauthorizationAuthorizationResponse> CheckDataauthorizationAuthorizationAsync(CheckDataauthorizationAuthorizationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CheckDataauthorizationAuthorizationExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务权限校验
         * Summary: 数据授权服务权限校验
         */
        public CheckDataauthorizationAuthorizationResponse CheckDataauthorizationAuthorizationEx(CheckDataauthorizationAuthorizationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CheckDataauthorizationAuthorizationResponse>(DoRequest("1.0", "baas.dataauthorization.authorization.check", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务权限校验
         * Summary: 数据授权服务权限校验
         */
        public async Task<CheckDataauthorizationAuthorizationResponse> CheckDataauthorizationAuthorizationExAsync(CheckDataauthorizationAuthorizationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CheckDataauthorizationAuthorizationResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.authorization.check", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务流程信息查询
         * Summary: 数据授权服务流程信息查询
         */
        public QueryDataauthorizationProcessResponse QueryDataauthorizationProcess(QueryDataauthorizationProcessRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDataauthorizationProcessEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务流程信息查询
         * Summary: 数据授权服务流程信息查询
         */
        public async Task<QueryDataauthorizationProcessResponse> QueryDataauthorizationProcessAsync(QueryDataauthorizationProcessRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDataauthorizationProcessExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务流程信息查询
         * Summary: 数据授权服务流程信息查询
         */
        public QueryDataauthorizationProcessResponse QueryDataauthorizationProcessEx(QueryDataauthorizationProcessRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDataauthorizationProcessResponse>(DoRequest("1.0", "baas.dataauthorization.process.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务流程信息查询
         * Summary: 数据授权服务流程信息查询
         */
        public async Task<QueryDataauthorizationProcessResponse> QueryDataauthorizationProcessExAsync(QueryDataauthorizationProcessRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDataauthorizationProcessResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.process.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务存证数据上链
         * Summary: 数据授权服务存证数据上链
         */
        public SendDataauthorizationDepositDataResponse SendDataauthorizationDepositData(SendDataauthorizationDepositDataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SendDataauthorizationDepositDataEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务存证数据上链
         * Summary: 数据授权服务存证数据上链
         */
        public async Task<SendDataauthorizationDepositDataResponse> SendDataauthorizationDepositDataAsync(SendDataauthorizationDepositDataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SendDataauthorizationDepositDataExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务存证数据上链
         * Summary: 数据授权服务存证数据上链
         */
        public SendDataauthorizationDepositDataResponse SendDataauthorizationDepositDataEx(SendDataauthorizationDepositDataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SendDataauthorizationDepositDataResponse>(DoRequest("1.0", "baas.dataauthorization.deposit.data.send", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务存证数据上链
         * Summary: 数据授权服务存证数据上链
         */
        public async Task<SendDataauthorizationDepositDataResponse> SendDataauthorizationDepositDataExAsync(SendDataauthorizationDepositDataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SendDataauthorizationDepositDataResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.deposit.data.send", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务查询存证数据
         * Summary: 数据授权服务查询存证数据
         */
        public QueryDataauthorizationDepositDataResponse QueryDataauthorizationDepositData(QueryDataauthorizationDepositDataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDataauthorizationDepositDataEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务查询存证数据
         * Summary: 数据授权服务查询存证数据
         */
        public async Task<QueryDataauthorizationDepositDataResponse> QueryDataauthorizationDepositDataAsync(QueryDataauthorizationDepositDataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDataauthorizationDepositDataExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务查询存证数据
         * Summary: 数据授权服务查询存证数据
         */
        public QueryDataauthorizationDepositDataResponse QueryDataauthorizationDepositDataEx(QueryDataauthorizationDepositDataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDataauthorizationDepositDataResponse>(DoRequest("1.0", "baas.dataauthorization.deposit.data.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务查询存证数据
         * Summary: 数据授权服务查询存证数据
         */
        public async Task<QueryDataauthorizationDepositDataResponse> QueryDataauthorizationDepositDataExAsync(QueryDataauthorizationDepositDataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDataauthorizationDepositDataResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.deposit.data.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务恢复权限
         * Summary: 数据授权服务恢复权限
         */
        public ResumeDataauthorizationAuthorizationResponse ResumeDataauthorizationAuthorization(ResumeDataauthorizationAuthorizationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ResumeDataauthorizationAuthorizationEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务恢复权限
         * Summary: 数据授权服务恢复权限
         */
        public async Task<ResumeDataauthorizationAuthorizationResponse> ResumeDataauthorizationAuthorizationAsync(ResumeDataauthorizationAuthorizationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ResumeDataauthorizationAuthorizationExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务恢复权限
         * Summary: 数据授权服务恢复权限
         */
        public ResumeDataauthorizationAuthorizationResponse ResumeDataauthorizationAuthorizationEx(ResumeDataauthorizationAuthorizationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ResumeDataauthorizationAuthorizationResponse>(DoRequest("1.0", "baas.dataauthorization.authorization.resume", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务恢复权限
         * Summary: 数据授权服务恢复权限
         */
        public async Task<ResumeDataauthorizationAuthorizationResponse> ResumeDataauthorizationAuthorizationExAsync(ResumeDataauthorizationAuthorizationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ResumeDataauthorizationAuthorizationResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.authorization.resume", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务更新数据信息
         * Summary: 数据授权服务更新数据信息
         */
        public UpdateDataauthorizationDataEntityResponse UpdateDataauthorizationDataEntity(UpdateDataauthorizationDataEntityRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateDataauthorizationDataEntityEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务更新数据信息
         * Summary: 数据授权服务更新数据信息
         */
        public async Task<UpdateDataauthorizationDataEntityResponse> UpdateDataauthorizationDataEntityAsync(UpdateDataauthorizationDataEntityRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateDataauthorizationDataEntityExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务更新数据信息
         * Summary: 数据授权服务更新数据信息
         */
        public UpdateDataauthorizationDataEntityResponse UpdateDataauthorizationDataEntityEx(UpdateDataauthorizationDataEntityRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDataauthorizationDataEntityResponse>(DoRequest("1.0", "baas.dataauthorization.data.entity.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务更新数据信息
         * Summary: 数据授权服务更新数据信息
         */
        public async Task<UpdateDataauthorizationDataEntityResponse> UpdateDataauthorizationDataEntityExAsync(UpdateDataauthorizationDataEntityRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDataauthorizationDataEntityResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.data.entity.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务删除数据对象
         * Summary: 数据授权服务删除数据对象
         */
        public DeleteDataauthorizationDataEntityResponse DeleteDataauthorizationDataEntity(DeleteDataauthorizationDataEntityRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return DeleteDataauthorizationDataEntityEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务删除数据对象
         * Summary: 数据授权服务删除数据对象
         */
        public async Task<DeleteDataauthorizationDataEntityResponse> DeleteDataauthorizationDataEntityAsync(DeleteDataauthorizationDataEntityRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await DeleteDataauthorizationDataEntityExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务删除数据对象
         * Summary: 数据授权服务删除数据对象
         */
        public DeleteDataauthorizationDataEntityResponse DeleteDataauthorizationDataEntityEx(DeleteDataauthorizationDataEntityRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteDataauthorizationDataEntityResponse>(DoRequest("1.0", "baas.dataauthorization.data.entity.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务删除数据对象
         * Summary: 数据授权服务删除数据对象
         */
        public async Task<DeleteDataauthorizationDataEntityResponse> DeleteDataauthorizationDataEntityExAsync(DeleteDataauthorizationDataEntityRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteDataauthorizationDataEntityResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.data.entity.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务创建自定义ID用户
         * Summary: 数据授权服务创建自定义ID用户
         */
        public CreateDataauthorizationCustomParticipantResponse CreateDataauthorizationCustomParticipant(CreateDataauthorizationCustomParticipantRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDataauthorizationCustomParticipantEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务创建自定义ID用户
         * Summary: 数据授权服务创建自定义ID用户
         */
        public async Task<CreateDataauthorizationCustomParticipantResponse> CreateDataauthorizationCustomParticipantAsync(CreateDataauthorizationCustomParticipantRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDataauthorizationCustomParticipantExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务创建自定义ID用户
         * Summary: 数据授权服务创建自定义ID用户
         */
        public CreateDataauthorizationCustomParticipantResponse CreateDataauthorizationCustomParticipantEx(CreateDataauthorizationCustomParticipantRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDataauthorizationCustomParticipantResponse>(DoRequest("1.0", "baas.dataauthorization.custom.participant.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务创建自定义ID用户
         * Summary: 数据授权服务创建自定义ID用户
         */
        public async Task<CreateDataauthorizationCustomParticipantResponse> CreateDataauthorizationCustomParticipantExAsync(CreateDataauthorizationCustomParticipantRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDataauthorizationCustomParticipantResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.custom.participant.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务创建自定义ID数据对象
         * Summary: 数据授权服务创建自定义ID数据对象
         */
        public CreateDataauthorizationCustomDataResponse CreateDataauthorizationCustomData(CreateDataauthorizationCustomDataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDataauthorizationCustomDataEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务创建自定义ID数据对象
         * Summary: 数据授权服务创建自定义ID数据对象
         */
        public async Task<CreateDataauthorizationCustomDataResponse> CreateDataauthorizationCustomDataAsync(CreateDataauthorizationCustomDataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDataauthorizationCustomDataExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务创建自定义ID数据对象
         * Summary: 数据授权服务创建自定义ID数据对象
         */
        public CreateDataauthorizationCustomDataResponse CreateDataauthorizationCustomDataEx(CreateDataauthorizationCustomDataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDataauthorizationCustomDataResponse>(DoRequest("1.0", "baas.dataauthorization.custom.data.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务创建自定义ID数据对象
         * Summary: 数据授权服务创建自定义ID数据对象
         */
        public async Task<CreateDataauthorizationCustomDataResponse> CreateDataauthorizationCustomDataExAsync(CreateDataauthorizationCustomDataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDataauthorizationCustomDataResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.custom.data.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务申请权限
         * Summary: 数据授权服务申请权限
         */
        public ApplyDataauthorizationAuthorizationWithsignatureResponse ApplyDataauthorizationAuthorizationWithsignature(ApplyDataauthorizationAuthorizationWithsignatureRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ApplyDataauthorizationAuthorizationWithsignatureEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务申请权限
         * Summary: 数据授权服务申请权限
         */
        public async Task<ApplyDataauthorizationAuthorizationWithsignatureResponse> ApplyDataauthorizationAuthorizationWithsignatureAsync(ApplyDataauthorizationAuthorizationWithsignatureRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ApplyDataauthorizationAuthorizationWithsignatureExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务申请权限
         * Summary: 数据授权服务申请权限
         */
        public ApplyDataauthorizationAuthorizationWithsignatureResponse ApplyDataauthorizationAuthorizationWithsignatureEx(ApplyDataauthorizationAuthorizationWithsignatureRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyDataauthorizationAuthorizationWithsignatureResponse>(DoRequest("1.0", "baas.dataauthorization.authorization.withsignature.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务申请权限
         * Summary: 数据授权服务申请权限
         */
        public async Task<ApplyDataauthorizationAuthorizationWithsignatureResponse> ApplyDataauthorizationAuthorizationWithsignatureExAsync(ApplyDataauthorizationAuthorizationWithsignatureRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyDataauthorizationAuthorizationWithsignatureResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.authorization.withsignature.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务流程步骤处理
         * Summary: 数据授权服务流程步骤处理
         */
        public ExecDataauthorizationProcessWithsignatureResponse ExecDataauthorizationProcessWithsignature(ExecDataauthorizationProcessWithsignatureRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ExecDataauthorizationProcessWithsignatureEx(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务流程步骤处理
         * Summary: 数据授权服务流程步骤处理
         */
        public async Task<ExecDataauthorizationProcessWithsignatureResponse> ExecDataauthorizationProcessWithsignatureAsync(ExecDataauthorizationProcessWithsignatureRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ExecDataauthorizationProcessWithsignatureExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据授权服务流程步骤处理
         * Summary: 数据授权服务流程步骤处理
         */
        public ExecDataauthorizationProcessWithsignatureResponse ExecDataauthorizationProcessWithsignatureEx(ExecDataauthorizationProcessWithsignatureRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecDataauthorizationProcessWithsignatureResponse>(DoRequest("1.0", "baas.dataauthorization.process.withsignature.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据授权服务流程步骤处理
         * Summary: 数据授权服务流程步骤处理
         */
        public async Task<ExecDataauthorizationProcessWithsignatureResponse> ExecDataauthorizationProcessWithsignatureExAsync(ExecDataauthorizationProcessWithsignatureRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecDataauthorizationProcessWithsignatureResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.process.withsignature.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建数据模型
         * Summary: 创建数据模型
         */
        public CreateDataauthorizationDataModelResponse CreateDataauthorizationDataModel(CreateDataauthorizationDataModelRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDataauthorizationDataModelEx(request, headers, runtime);
        }

        /**
         * Description: 创建数据模型
         * Summary: 创建数据模型
         */
        public async Task<CreateDataauthorizationDataModelResponse> CreateDataauthorizationDataModelAsync(CreateDataauthorizationDataModelRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDataauthorizationDataModelExAsync(request, headers, runtime);
        }

        /**
         * Description: 创建数据模型
         * Summary: 创建数据模型
         */
        public CreateDataauthorizationDataModelResponse CreateDataauthorizationDataModelEx(CreateDataauthorizationDataModelRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDataauthorizationDataModelResponse>(DoRequest("1.0", "baas.dataauthorization.data.model.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建数据模型
         * Summary: 创建数据模型
         */
        public async Task<CreateDataauthorizationDataModelResponse> CreateDataauthorizationDataModelExAsync(CreateDataauthorizationDataModelRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDataauthorizationDataModelResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.data.model.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据模型修改
         * Summary: 数据模型修改
         */
        public UpdateDataauthorizationDataModelResponse UpdateDataauthorizationDataModel(UpdateDataauthorizationDataModelRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateDataauthorizationDataModelEx(request, headers, runtime);
        }

        /**
         * Description: 数据模型修改
         * Summary: 数据模型修改
         */
        public async Task<UpdateDataauthorizationDataModelResponse> UpdateDataauthorizationDataModelAsync(UpdateDataauthorizationDataModelRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateDataauthorizationDataModelExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据模型修改
         * Summary: 数据模型修改
         */
        public UpdateDataauthorizationDataModelResponse UpdateDataauthorizationDataModelEx(UpdateDataauthorizationDataModelRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDataauthorizationDataModelResponse>(DoRequest("1.0", "baas.dataauthorization.data.model.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据模型修改
         * Summary: 数据模型修改
         */
        public async Task<UpdateDataauthorizationDataModelResponse> UpdateDataauthorizationDataModelExAsync(UpdateDataauthorizationDataModelRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDataauthorizationDataModelResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.data.model.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 删除数据模型
         * Summary: 删除数据模型
         */
        public DeleteDataauthorizationDataModelResponse DeleteDataauthorizationDataModel(DeleteDataauthorizationDataModelRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return DeleteDataauthorizationDataModelEx(request, headers, runtime);
        }

        /**
         * Description: 删除数据模型
         * Summary: 删除数据模型
         */
        public async Task<DeleteDataauthorizationDataModelResponse> DeleteDataauthorizationDataModelAsync(DeleteDataauthorizationDataModelRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await DeleteDataauthorizationDataModelExAsync(request, headers, runtime);
        }

        /**
         * Description: 删除数据模型
         * Summary: 删除数据模型
         */
        public DeleteDataauthorizationDataModelResponse DeleteDataauthorizationDataModelEx(DeleteDataauthorizationDataModelRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteDataauthorizationDataModelResponse>(DoRequest("1.0", "baas.dataauthorization.data.model.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 删除数据模型
         * Summary: 删除数据模型
         */
        public async Task<DeleteDataauthorizationDataModelResponse> DeleteDataauthorizationDataModelExAsync(DeleteDataauthorizationDataModelRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteDataauthorizationDataModelResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.data.model.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 分页查询参与方列表
         * Summary: 分页查询参与方列表
         */
        public ListDataauthorizationParticipantPageResponse ListDataauthorizationParticipantPage(ListDataauthorizationParticipantPageRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ListDataauthorizationParticipantPageEx(request, headers, runtime);
        }

        /**
         * Description: 分页查询参与方列表
         * Summary: 分页查询参与方列表
         */
        public async Task<ListDataauthorizationParticipantPageResponse> ListDataauthorizationParticipantPageAsync(ListDataauthorizationParticipantPageRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ListDataauthorizationParticipantPageExAsync(request, headers, runtime);
        }

        /**
         * Description: 分页查询参与方列表
         * Summary: 分页查询参与方列表
         */
        public ListDataauthorizationParticipantPageResponse ListDataauthorizationParticipantPageEx(ListDataauthorizationParticipantPageRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListDataauthorizationParticipantPageResponse>(DoRequest("1.0", "baas.dataauthorization.participant.page.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 分页查询参与方列表
         * Summary: 分页查询参与方列表
         */
        public async Task<ListDataauthorizationParticipantPageResponse> ListDataauthorizationParticipantPageExAsync(ListDataauthorizationParticipantPageRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListDataauthorizationParticipantPageResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.participant.page.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询数据模型
         * Summary: 查询数据模型
         */
        public QueryDataauthorizationDataModelResponse QueryDataauthorizationDataModel(QueryDataauthorizationDataModelRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDataauthorizationDataModelEx(request, headers, runtime);
        }

        /**
         * Description: 查询数据模型
         * Summary: 查询数据模型
         */
        public async Task<QueryDataauthorizationDataModelResponse> QueryDataauthorizationDataModelAsync(QueryDataauthorizationDataModelRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDataauthorizationDataModelExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询数据模型
         * Summary: 查询数据模型
         */
        public QueryDataauthorizationDataModelResponse QueryDataauthorizationDataModelEx(QueryDataauthorizationDataModelRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDataauthorizationDataModelResponse>(DoRequest("1.0", "baas.dataauthorization.data.model.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询数据模型
         * Summary: 查询数据模型
         */
        public async Task<QueryDataauthorizationDataModelResponse> QueryDataauthorizationDataModelExAsync(QueryDataauthorizationDataModelRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDataauthorizationDataModelResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.data.model.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据模型分页查询
         * Summary: 数据模型分页查询
         */
        public ListDataauthorizationDatamodelPageResponse ListDataauthorizationDatamodelPage(ListDataauthorizationDatamodelPageRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ListDataauthorizationDatamodelPageEx(request, headers, runtime);
        }

        /**
         * Description: 数据模型分页查询
         * Summary: 数据模型分页查询
         */
        public async Task<ListDataauthorizationDatamodelPageResponse> ListDataauthorizationDatamodelPageAsync(ListDataauthorizationDatamodelPageRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ListDataauthorizationDatamodelPageExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据模型分页查询
         * Summary: 数据模型分页查询
         */
        public ListDataauthorizationDatamodelPageResponse ListDataauthorizationDatamodelPageEx(ListDataauthorizationDatamodelPageRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListDataauthorizationDatamodelPageResponse>(DoRequest("1.0", "baas.dataauthorization.datamodel.page.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据模型分页查询
         * Summary: 数据模型分页查询
         */
        public async Task<ListDataauthorizationDatamodelPageResponse> ListDataauthorizationDatamodelPageExAsync(ListDataauthorizationDatamodelPageRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListDataauthorizationDatamodelPageResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.datamodel.page.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询可注册的数据模型列表
         * Summary: 查询可注册的数据模型列表
         */
        public ListDataauthorizationAvailableDatamodelResponse ListDataauthorizationAvailableDatamodel(ListDataauthorizationAvailableDatamodelRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ListDataauthorizationAvailableDatamodelEx(request, headers, runtime);
        }

        /**
         * Description: 查询可注册的数据模型列表
         * Summary: 查询可注册的数据模型列表
         */
        public async Task<ListDataauthorizationAvailableDatamodelResponse> ListDataauthorizationAvailableDatamodelAsync(ListDataauthorizationAvailableDatamodelRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ListDataauthorizationAvailableDatamodelExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询可注册的数据模型列表
         * Summary: 查询可注册的数据模型列表
         */
        public ListDataauthorizationAvailableDatamodelResponse ListDataauthorizationAvailableDatamodelEx(ListDataauthorizationAvailableDatamodelRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListDataauthorizationAvailableDatamodelResponse>(DoRequest("1.0", "baas.dataauthorization.available.datamodel.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询可注册的数据模型列表
         * Summary: 查询可注册的数据模型列表
         */
        public async Task<ListDataauthorizationAvailableDatamodelResponse> ListDataauthorizationAvailableDatamodelExAsync(ListDataauthorizationAvailableDatamodelRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListDataauthorizationAvailableDatamodelResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.available.datamodel.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 根据模型名称、授权状态分页查询。
         * Summary: 数据注册情况查询
         */
        public ListDataauthorizationDataentityPageResponse ListDataauthorizationDataentityPage(ListDataauthorizationDataentityPageRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ListDataauthorizationDataentityPageEx(request, headers, runtime);
        }

        /**
         * Description: 根据模型名称、授权状态分页查询。
         * Summary: 数据注册情况查询
         */
        public async Task<ListDataauthorizationDataentityPageResponse> ListDataauthorizationDataentityPageAsync(ListDataauthorizationDataentityPageRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ListDataauthorizationDataentityPageExAsync(request, headers, runtime);
        }

        /**
         * Description: 根据模型名称、授权状态分页查询。
         * Summary: 数据注册情况查询
         */
        public ListDataauthorizationDataentityPageResponse ListDataauthorizationDataentityPageEx(ListDataauthorizationDataentityPageRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListDataauthorizationDataentityPageResponse>(DoRequest("1.0", "baas.dataauthorization.dataentity.page.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 根据模型名称、授权状态分页查询。
         * Summary: 数据注册情况查询
         */
        public async Task<ListDataauthorizationDataentityPageResponse> ListDataauthorizationDataentityPageExAsync(ListDataauthorizationDataentityPageRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListDataauthorizationDataentityPageResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.dataentity.page.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 直接授权接口
         * Summary: 直接授权接口
         */
        public CreateDataauthorizationDirectAuthorizationResponse CreateDataauthorizationDirectAuthorization(CreateDataauthorizationDirectAuthorizationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDataauthorizationDirectAuthorizationEx(request, headers, runtime);
        }

        /**
         * Description: 直接授权接口
         * Summary: 直接授权接口
         */
        public async Task<CreateDataauthorizationDirectAuthorizationResponse> CreateDataauthorizationDirectAuthorizationAsync(CreateDataauthorizationDirectAuthorizationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDataauthorizationDirectAuthorizationExAsync(request, headers, runtime);
        }

        /**
         * Description: 直接授权接口
         * Summary: 直接授权接口
         */
        public CreateDataauthorizationDirectAuthorizationResponse CreateDataauthorizationDirectAuthorizationEx(CreateDataauthorizationDirectAuthorizationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDataauthorizationDirectAuthorizationResponse>(DoRequest("1.0", "baas.dataauthorization.direct.authorization.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 直接授权接口
         * Summary: 直接授权接口
         */
        public async Task<CreateDataauthorizationDirectAuthorizationResponse> CreateDataauthorizationDirectAuthorizationExAsync(CreateDataauthorizationDirectAuthorizationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDataauthorizationDirectAuthorizationResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.direct.authorization.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 授权列表分页查询
         * Summary: 授权列表分页查询
         */
        public ListDataauthorizationAuthorizationPageResponse ListDataauthorizationAuthorizationPage(ListDataauthorizationAuthorizationPageRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ListDataauthorizationAuthorizationPageEx(request, headers, runtime);
        }

        /**
         * Description: 授权列表分页查询
         * Summary: 授权列表分页查询
         */
        public async Task<ListDataauthorizationAuthorizationPageResponse> ListDataauthorizationAuthorizationPageAsync(ListDataauthorizationAuthorizationPageRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ListDataauthorizationAuthorizationPageExAsync(request, headers, runtime);
        }

        /**
         * Description: 授权列表分页查询
         * Summary: 授权列表分页查询
         */
        public ListDataauthorizationAuthorizationPageResponse ListDataauthorizationAuthorizationPageEx(ListDataauthorizationAuthorizationPageRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListDataauthorizationAuthorizationPageResponse>(DoRequest("1.0", "baas.dataauthorization.authorization.page.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 授权列表分页查询
         * Summary: 授权列表分页查询
         */
        public async Task<ListDataauthorizationAuthorizationPageResponse> ListDataauthorizationAuthorizationPageExAsync(ListDataauthorizationAuthorizationPageRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListDataauthorizationAuthorizationPageResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.authorization.page.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询已授权的参与方列表
         * Summary: 查询已授权的参与方列表
         */
        public ListDataauthorizationAuthparticipantPageResponse ListDataauthorizationAuthparticipantPage(ListDataauthorizationAuthparticipantPageRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ListDataauthorizationAuthparticipantPageEx(request, headers, runtime);
        }

        /**
         * Description: 查询已授权的参与方列表
         * Summary: 查询已授权的参与方列表
         */
        public async Task<ListDataauthorizationAuthparticipantPageResponse> ListDataauthorizationAuthparticipantPageAsync(ListDataauthorizationAuthparticipantPageRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ListDataauthorizationAuthparticipantPageExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询已授权的参与方列表
         * Summary: 查询已授权的参与方列表
         */
        public ListDataauthorizationAuthparticipantPageResponse ListDataauthorizationAuthparticipantPageEx(ListDataauthorizationAuthparticipantPageRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListDataauthorizationAuthparticipantPageResponse>(DoRequest("1.0", "baas.dataauthorization.authparticipant.page.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询已授权的参与方列表
         * Summary: 查询已授权的参与方列表
         */
        public async Task<ListDataauthorizationAuthparticipantPageResponse> ListDataauthorizationAuthparticipantPageExAsync(ListDataauthorizationAuthparticipantPageRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListDataauthorizationAuthparticipantPageResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.authparticipant.page.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建数据资产
         * Summary: 创建数据资产
         */
        public CreateDataauthorizationDataAssertResponse CreateDataauthorizationDataAssert(CreateDataauthorizationDataAssertRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDataauthorizationDataAssertEx(request, headers, runtime);
        }

        /**
         * Description: 创建数据资产
         * Summary: 创建数据资产
         */
        public async Task<CreateDataauthorizationDataAssertResponse> CreateDataauthorizationDataAssertAsync(CreateDataauthorizationDataAssertRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDataauthorizationDataAssertExAsync(request, headers, runtime);
        }

        /**
         * Description: 创建数据资产
         * Summary: 创建数据资产
         */
        public CreateDataauthorizationDataAssertResponse CreateDataauthorizationDataAssertEx(CreateDataauthorizationDataAssertRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDataauthorizationDataAssertResponse>(DoRequest("1.0", "baas.dataauthorization.data.assert.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建数据资产
         * Summary: 创建数据资产
         */
        public async Task<CreateDataauthorizationDataAssertResponse> CreateDataauthorizationDataAssertExAsync(CreateDataauthorizationDataAssertRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDataauthorizationDataAssertResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.data.assert.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据资产更新
         * Summary: 数据资产更新
         */
        public UpdateDataauthorizationDataAssertResponse UpdateDataauthorizationDataAssert(UpdateDataauthorizationDataAssertRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateDataauthorizationDataAssertEx(request, headers, runtime);
        }

        /**
         * Description: 数据资产更新
         * Summary: 数据资产更新
         */
        public async Task<UpdateDataauthorizationDataAssertResponse> UpdateDataauthorizationDataAssertAsync(UpdateDataauthorizationDataAssertRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateDataauthorizationDataAssertExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据资产更新
         * Summary: 数据资产更新
         */
        public UpdateDataauthorizationDataAssertResponse UpdateDataauthorizationDataAssertEx(UpdateDataauthorizationDataAssertRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDataauthorizationDataAssertResponse>(DoRequest("1.0", "baas.dataauthorization.data.assert.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据资产更新
         * Summary: 数据资产更新
         */
        public async Task<UpdateDataauthorizationDataAssertResponse> UpdateDataauthorizationDataAssertExAsync(UpdateDataauthorizationDataAssertRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDataauthorizationDataAssertResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.data.assert.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据资产删除
         * Summary: 数据资产删除
         */
        public DeleteDataauthorizationDataAssertResponse DeleteDataauthorizationDataAssert(DeleteDataauthorizationDataAssertRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return DeleteDataauthorizationDataAssertEx(request, headers, runtime);
        }

        /**
         * Description: 数据资产删除
         * Summary: 数据资产删除
         */
        public async Task<DeleteDataauthorizationDataAssertResponse> DeleteDataauthorizationDataAssertAsync(DeleteDataauthorizationDataAssertRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await DeleteDataauthorizationDataAssertExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据资产删除
         * Summary: 数据资产删除
         */
        public DeleteDataauthorizationDataAssertResponse DeleteDataauthorizationDataAssertEx(DeleteDataauthorizationDataAssertRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteDataauthorizationDataAssertResponse>(DoRequest("1.0", "baas.dataauthorization.data.assert.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据资产删除
         * Summary: 数据资产删除
         */
        public async Task<DeleteDataauthorizationDataAssertResponse> DeleteDataauthorizationDataAssertExAsync(DeleteDataauthorizationDataAssertRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteDataauthorizationDataAssertResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.data.assert.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 授权服务代理授权接口
         * Summary: 代理授权
         */
        public CreateDataauthorizationAgentAuthorizationResponse CreateDataauthorizationAgentAuthorization(CreateDataauthorizationAgentAuthorizationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDataauthorizationAgentAuthorizationEx(request, headers, runtime);
        }

        /**
         * Description: 授权服务代理授权接口
         * Summary: 代理授权
         */
        public async Task<CreateDataauthorizationAgentAuthorizationResponse> CreateDataauthorizationAgentAuthorizationAsync(CreateDataauthorizationAgentAuthorizationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDataauthorizationAgentAuthorizationExAsync(request, headers, runtime);
        }

        /**
         * Description: 授权服务代理授权接口
         * Summary: 代理授权
         */
        public CreateDataauthorizationAgentAuthorizationResponse CreateDataauthorizationAgentAuthorizationEx(CreateDataauthorizationAgentAuthorizationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDataauthorizationAgentAuthorizationResponse>(DoRequest("1.0", "baas.dataauthorization.agent.authorization.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 授权服务代理授权接口
         * Summary: 代理授权
         */
        public async Task<CreateDataauthorizationAgentAuthorizationResponse> CreateDataauthorizationAgentAuthorizationExAsync(CreateDataauthorizationAgentAuthorizationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDataauthorizationAgentAuthorizationResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.agent.authorization.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description:  授权列表相信信息查询
         * Summary:  授权列表相信信息查询
         */
        public ListDataauthorizationAuthorityCertResponse ListDataauthorizationAuthorityCert(ListDataauthorizationAuthorityCertRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ListDataauthorizationAuthorityCertEx(request, headers, runtime);
        }

        /**
         * Description:  授权列表相信信息查询
         * Summary:  授权列表相信信息查询
         */
        public async Task<ListDataauthorizationAuthorityCertResponse> ListDataauthorizationAuthorityCertAsync(ListDataauthorizationAuthorityCertRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ListDataauthorizationAuthorityCertExAsync(request, headers, runtime);
        }

        /**
         * Description:  授权列表相信信息查询
         * Summary:  授权列表相信信息查询
         */
        public ListDataauthorizationAuthorityCertResponse ListDataauthorizationAuthorityCertEx(ListDataauthorizationAuthorityCertRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListDataauthorizationAuthorityCertResponse>(DoRequest("1.0", "baas.dataauthorization.authority.cert.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description:  授权列表相信信息查询
         * Summary:  授权列表相信信息查询
         */
        public async Task<ListDataauthorizationAuthorityCertResponse> ListDataauthorizationAuthorityCertExAsync(ListDataauthorizationAuthorityCertRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListDataauthorizationAuthorityCertResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.authority.cert.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 同步存证上链接口
         * Summary: 同步存证上链
         */
        public SaveDataauthorizationDepositDataResponse SaveDataauthorizationDepositData(SaveDataauthorizationDepositDataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SaveDataauthorizationDepositDataEx(request, headers, runtime);
        }

        /**
         * Description: 同步存证上链接口
         * Summary: 同步存证上链
         */
        public async Task<SaveDataauthorizationDepositDataResponse> SaveDataauthorizationDepositDataAsync(SaveDataauthorizationDepositDataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SaveDataauthorizationDepositDataExAsync(request, headers, runtime);
        }

        /**
         * Description: 同步存证上链接口
         * Summary: 同步存证上链
         */
        public SaveDataauthorizationDepositDataResponse SaveDataauthorizationDepositDataEx(SaveDataauthorizationDepositDataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SaveDataauthorizationDepositDataResponse>(DoRequest("1.0", "baas.dataauthorization.deposit.data.save", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 同步存证上链接口
         * Summary: 同步存证上链
         */
        public async Task<SaveDataauthorizationDepositDataResponse> SaveDataauthorizationDepositDataExAsync(SaveDataauthorizationDepositDataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SaveDataauthorizationDepositDataResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.deposit.data.save", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 启动全量同步
         * Summary: 启动全量同步
         */
        public StartDataauthorizationSyncDataResponse StartDataauthorizationSyncData(StartDataauthorizationSyncDataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDataauthorizationSyncDataEx(request, headers, runtime);
        }

        /**
         * Description: 启动全量同步
         * Summary: 启动全量同步
         */
        public async Task<StartDataauthorizationSyncDataResponse> StartDataauthorizationSyncDataAsync(StartDataauthorizationSyncDataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDataauthorizationSyncDataExAsync(request, headers, runtime);
        }

        /**
         * Description: 启动全量同步
         * Summary: 启动全量同步
         */
        public StartDataauthorizationSyncDataResponse StartDataauthorizationSyncDataEx(StartDataauthorizationSyncDataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDataauthorizationSyncDataResponse>(DoRequest("1.0", "baas.dataauthorization.sync.data.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 启动全量同步
         * Summary: 启动全量同步
         */
        public async Task<StartDataauthorizationSyncDataResponse> StartDataauthorizationSyncDataExAsync(StartDataauthorizationSyncDataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDataauthorizationSyncDataResponse>(await DoRequestAsync("1.0", "baas.dataauthorization.sync.data.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过额交易hash查询，返回hash对应区块链上信息。
         * Summary: 溯源区块查证接口
         */
        public QueryTraceabilityTxCheckResponse QueryTraceabilityTxCheck(QueryTraceabilityTxCheckRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryTraceabilityTxCheckEx(request, headers, runtime);
        }

        /**
         * Description: 通过额交易hash查询，返回hash对应区块链上信息。
         * Summary: 溯源区块查证接口
         */
        public async Task<QueryTraceabilityTxCheckResponse> QueryTraceabilityTxCheckAsync(QueryTraceabilityTxCheckRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryTraceabilityTxCheckExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过额交易hash查询，返回hash对应区块链上信息。
         * Summary: 溯源区块查证接口
         */
        public QueryTraceabilityTxCheckResponse QueryTraceabilityTxCheckEx(QueryTraceabilityTxCheckRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryTraceabilityTxCheckResponse>(DoRequest("1.0", "baas.traceability.tx.check.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过额交易hash查询，返回hash对应区块链上信息。
         * Summary: 溯源区块查证接口
         */
        public async Task<QueryTraceabilityTxCheckResponse> QueryTraceabilityTxCheckExAsync(QueryTraceabilityTxCheckRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryTraceabilityTxCheckResponse>(await DoRequestAsync("1.0", "baas.traceability.tx.check.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过链id，获取链的相关信息
         * Summary: 获取链信息接口
         */
        public QueryTraceabilityBlockchainInfosResponse QueryTraceabilityBlockchainInfos(QueryTraceabilityBlockchainInfosRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryTraceabilityBlockchainInfosEx(request, headers, runtime);
        }

        /**
         * Description: 通过链id，获取链的相关信息
         * Summary: 获取链信息接口
         */
        public async Task<QueryTraceabilityBlockchainInfosResponse> QueryTraceabilityBlockchainInfosAsync(QueryTraceabilityBlockchainInfosRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryTraceabilityBlockchainInfosExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过链id，获取链的相关信息
         * Summary: 获取链信息接口
         */
        public QueryTraceabilityBlockchainInfosResponse QueryTraceabilityBlockchainInfosEx(QueryTraceabilityBlockchainInfosRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryTraceabilityBlockchainInfosResponse>(DoRequest("1.0", "baas.traceability.blockchain.infos.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过链id，获取链的相关信息
         * Summary: 获取链信息接口
         */
        public async Task<QueryTraceabilityBlockchainInfosResponse> QueryTraceabilityBlockchainInfosExAsync(QueryTraceabilityBlockchainInfosRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryTraceabilityBlockchainInfosResponse>(await DoRequestAsync("1.0", "baas.traceability.blockchain.infos.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: BaaS区块链浏览器添加租户与链的访问权限
         * Summary: BaaS区块链浏览器添加权限
         */
        public SaveBlockchainBrowserPrivilegeResponse SaveBlockchainBrowserPrivilege(SaveBlockchainBrowserPrivilegeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SaveBlockchainBrowserPrivilegeEx(request, headers, runtime);
        }

        /**
         * Description: BaaS区块链浏览器添加租户与链的访问权限
         * Summary: BaaS区块链浏览器添加权限
         */
        public async Task<SaveBlockchainBrowserPrivilegeResponse> SaveBlockchainBrowserPrivilegeAsync(SaveBlockchainBrowserPrivilegeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SaveBlockchainBrowserPrivilegeExAsync(request, headers, runtime);
        }

        /**
         * Description: BaaS区块链浏览器添加租户与链的访问权限
         * Summary: BaaS区块链浏览器添加权限
         */
        public SaveBlockchainBrowserPrivilegeResponse SaveBlockchainBrowserPrivilegeEx(SaveBlockchainBrowserPrivilegeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SaveBlockchainBrowserPrivilegeResponse>(DoRequest("1.0", "baas.blockchain.browser.privilege.save", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: BaaS区块链浏览器添加租户与链的访问权限
         * Summary: BaaS区块链浏览器添加权限
         */
        public async Task<SaveBlockchainBrowserPrivilegeResponse> SaveBlockchainBrowserPrivilegeExAsync(SaveBlockchainBrowserPrivilegeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SaveBlockchainBrowserPrivilegeResponse>(await DoRequestAsync("1.0", "baas.blockchain.browser.privilege.save", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询租户查看某链的权限
         * Summary: 查询租户查看某链的权限
         */
        public QueryBlockchainBrowserPrivilegeResponse QueryBlockchainBrowserPrivilege(QueryBlockchainBrowserPrivilegeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryBlockchainBrowserPrivilegeEx(request, headers, runtime);
        }

        /**
         * Description: 查询租户查看某链的权限
         * Summary: 查询租户查看某链的权限
         */
        public async Task<QueryBlockchainBrowserPrivilegeResponse> QueryBlockchainBrowserPrivilegeAsync(QueryBlockchainBrowserPrivilegeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryBlockchainBrowserPrivilegeExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询租户查看某链的权限
         * Summary: 查询租户查看某链的权限
         */
        public QueryBlockchainBrowserPrivilegeResponse QueryBlockchainBrowserPrivilegeEx(QueryBlockchainBrowserPrivilegeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBlockchainBrowserPrivilegeResponse>(DoRequest("1.0", "baas.blockchain.browser.privilege.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询租户查看某链的权限
         * Summary: 查询租户查看某链的权限
         */
        public async Task<QueryBlockchainBrowserPrivilegeResponse> QueryBlockchainBrowserPrivilegeExAsync(QueryBlockchainBrowserPrivilegeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBlockchainBrowserPrivilegeResponse>(await DoRequestAsync("1.0", "baas.blockchain.browser.privilege.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: BaaS区块链浏览器删除租户与链的访问权限
         * Summary: BaaS区块链浏览器添加权限
         */
        public DeleteBlockchainBrowserPrivilegeResponse DeleteBlockchainBrowserPrivilege(DeleteBlockchainBrowserPrivilegeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return DeleteBlockchainBrowserPrivilegeEx(request, headers, runtime);
        }

        /**
         * Description: BaaS区块链浏览器删除租户与链的访问权限
         * Summary: BaaS区块链浏览器添加权限
         */
        public async Task<DeleteBlockchainBrowserPrivilegeResponse> DeleteBlockchainBrowserPrivilegeAsync(DeleteBlockchainBrowserPrivilegeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await DeleteBlockchainBrowserPrivilegeExAsync(request, headers, runtime);
        }

        /**
         * Description: BaaS区块链浏览器删除租户与链的访问权限
         * Summary: BaaS区块链浏览器添加权限
         */
        public DeleteBlockchainBrowserPrivilegeResponse DeleteBlockchainBrowserPrivilegeEx(DeleteBlockchainBrowserPrivilegeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteBlockchainBrowserPrivilegeResponse>(DoRequest("1.0", "baas.blockchain.browser.privilege.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: BaaS区块链浏览器删除租户与链的访问权限
         * Summary: BaaS区块链浏览器添加权限
         */
        public async Task<DeleteBlockchainBrowserPrivilegeResponse> DeleteBlockchainBrowserPrivilegeExAsync(DeleteBlockchainBrowserPrivilegeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteBlockchainBrowserPrivilegeResponse>(await DoRequestAsync("1.0", "baas.blockchain.browser.privilege.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 生成蚂蚁区块链的交易二维码
         * Summary: 数科生成蚂蚁区块链的交易二维码
         */
        public GetBlockchainMiniprogramResponse GetBlockchainMiniprogram(GetBlockchainMiniprogramRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return GetBlockchainMiniprogramEx(request, headers, runtime);
        }

        /**
         * Description: 生成蚂蚁区块链的交易二维码
         * Summary: 数科生成蚂蚁区块链的交易二维码
         */
        public async Task<GetBlockchainMiniprogramResponse> GetBlockchainMiniprogramAsync(GetBlockchainMiniprogramRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await GetBlockchainMiniprogramExAsync(request, headers, runtime);
        }

        /**
         * Description: 生成蚂蚁区块链的交易二维码
         * Summary: 数科生成蚂蚁区块链的交易二维码
         */
        public GetBlockchainMiniprogramResponse GetBlockchainMiniprogramEx(GetBlockchainMiniprogramRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetBlockchainMiniprogramResponse>(DoRequest("1.0", "baas.blockchain.miniprogram.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 生成蚂蚁区块链的交易二维码
         * Summary: 数科生成蚂蚁区块链的交易二维码
         */
        public async Task<GetBlockchainMiniprogramResponse> GetBlockchainMiniprogramExAsync(GetBlockchainMiniprogramRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetBlockchainMiniprogramResponse>(await DoRequestAsync("1.0", "baas.blockchain.miniprogram.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 蚂蚁区块链的链上交易数据查看权限批量添加
         * Summary: 蚂蚁区块链的链上交易数据查看权限批量添加
         */
        public AddBlockchainMiniprogramResponse AddBlockchainMiniprogram(AddBlockchainMiniprogramRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return AddBlockchainMiniprogramEx(request, headers, runtime);
        }

        /**
         * Description: 蚂蚁区块链的链上交易数据查看权限批量添加
         * Summary: 蚂蚁区块链的链上交易数据查看权限批量添加
         */
        public async Task<AddBlockchainMiniprogramResponse> AddBlockchainMiniprogramAsync(AddBlockchainMiniprogramRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await AddBlockchainMiniprogramExAsync(request, headers, runtime);
        }

        /**
         * Description: 蚂蚁区块链的链上交易数据查看权限批量添加
         * Summary: 蚂蚁区块链的链上交易数据查看权限批量添加
         */
        public AddBlockchainMiniprogramResponse AddBlockchainMiniprogramEx(AddBlockchainMiniprogramRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<AddBlockchainMiniprogramResponse>(DoRequest("1.0", "baas.blockchain.miniprogram.add", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 蚂蚁区块链的链上交易数据查看权限批量添加
         * Summary: 蚂蚁区块链的链上交易数据查看权限批量添加
         */
        public async Task<AddBlockchainMiniprogramResponse> AddBlockchainMiniprogramExAsync(AddBlockchainMiniprogramRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<AddBlockchainMiniprogramResponse>(await DoRequestAsync("1.0", "baas.blockchain.miniprogram.add", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取金融科技BaaS浏览器交易统计信息
         * Summary: 获取金融科技BaaS浏览器交易统计信息
         */
        public QueryBrowserTransactionStatisticResponse QueryBrowserTransactionStatistic(QueryBrowserTransactionStatisticRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryBrowserTransactionStatisticEx(request, headers, runtime);
        }

        /**
         * Description: 获取金融科技BaaS浏览器交易统计信息
         * Summary: 获取金融科技BaaS浏览器交易统计信息
         */
        public async Task<QueryBrowserTransactionStatisticResponse> QueryBrowserTransactionStatisticAsync(QueryBrowserTransactionStatisticRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryBrowserTransactionStatisticExAsync(request, headers, runtime);
        }

        /**
         * Description: 获取金融科技BaaS浏览器交易统计信息
         * Summary: 获取金融科技BaaS浏览器交易统计信息
         */
        public QueryBrowserTransactionStatisticResponse QueryBrowserTransactionStatisticEx(QueryBrowserTransactionStatisticRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBrowserTransactionStatisticResponse>(DoRequest("1.0", "baas.browser.transaction.statistic.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取金融科技BaaS浏览器交易统计信息
         * Summary: 获取金融科技BaaS浏览器交易统计信息
         */
        public async Task<QueryBrowserTransactionStatisticResponse> QueryBrowserTransactionStatisticExAsync(QueryBrowserTransactionStatisticRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBrowserTransactionStatisticResponse>(await DoRequestAsync("1.0", "baas.browser.transaction.statistic.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取金融科技BaaS最新区块信息列表
         * Summary: 获取金融科技BaaS最新区块信息列表
         */
        public QueryBrowserBlockLatestResponse QueryBrowserBlockLatest(QueryBrowserBlockLatestRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryBrowserBlockLatestEx(request, headers, runtime);
        }

        /**
         * Description: 获取金融科技BaaS最新区块信息列表
         * Summary: 获取金融科技BaaS最新区块信息列表
         */
        public async Task<QueryBrowserBlockLatestResponse> QueryBrowserBlockLatestAsync(QueryBrowserBlockLatestRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryBrowserBlockLatestExAsync(request, headers, runtime);
        }

        /**
         * Description: 获取金融科技BaaS最新区块信息列表
         * Summary: 获取金融科技BaaS最新区块信息列表
         */
        public QueryBrowserBlockLatestResponse QueryBrowserBlockLatestEx(QueryBrowserBlockLatestRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBrowserBlockLatestResponse>(DoRequest("1.0", "baas.browser.block.latest.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取金融科技BaaS最新区块信息列表
         * Summary: 获取金融科技BaaS最新区块信息列表
         */
        public async Task<QueryBrowserBlockLatestResponse> QueryBrowserBlockLatestExAsync(QueryBrowserBlockLatestRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBrowserBlockLatestResponse>(await DoRequestAsync("1.0", "baas.browser.block.latest.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取金融科技BaaS最新交易列表
         * Summary: 获取金融科技BaaS最新交易列表
         */
        public QueryBrowserTransactionLatestResponse QueryBrowserTransactionLatest(QueryBrowserTransactionLatestRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryBrowserTransactionLatestEx(request, headers, runtime);
        }

        /**
         * Description: 获取金融科技BaaS最新交易列表
         * Summary: 获取金融科技BaaS最新交易列表
         */
        public async Task<QueryBrowserTransactionLatestResponse> QueryBrowserTransactionLatestAsync(QueryBrowserTransactionLatestRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryBrowserTransactionLatestExAsync(request, headers, runtime);
        }

        /**
         * Description: 获取金融科技BaaS最新交易列表
         * Summary: 获取金融科技BaaS最新交易列表
         */
        public QueryBrowserTransactionLatestResponse QueryBrowserTransactionLatestEx(QueryBrowserTransactionLatestRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBrowserTransactionLatestResponse>(DoRequest("1.0", "baas.browser.transaction.latest.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取金融科技BaaS最新交易列表
         * Summary: 获取金融科技BaaS最新交易列表
         */
        public async Task<QueryBrowserTransactionLatestResponse> QueryBrowserTransactionLatestExAsync(QueryBrowserTransactionLatestRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBrowserTransactionLatestResponse>(await DoRequestAsync("1.0", "baas.browser.transaction.latest.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取金融科技BaaS区块信息
         * Summary: 获取金融科技BaaS区块信息
         */
        public QueryBrowserBlockResponse QueryBrowserBlock(QueryBrowserBlockRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryBrowserBlockEx(request, headers, runtime);
        }

        /**
         * Description: 获取金融科技BaaS区块信息
         * Summary: 获取金融科技BaaS区块信息
         */
        public async Task<QueryBrowserBlockResponse> QueryBrowserBlockAsync(QueryBrowserBlockRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryBrowserBlockExAsync(request, headers, runtime);
        }

        /**
         * Description: 获取金融科技BaaS区块信息
         * Summary: 获取金融科技BaaS区块信息
         */
        public QueryBrowserBlockResponse QueryBrowserBlockEx(QueryBrowserBlockRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBrowserBlockResponse>(DoRequest("1.0", "baas.browser.block.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取金融科技BaaS区块信息
         * Summary: 获取金融科技BaaS区块信息
         */
        public async Task<QueryBrowserBlockResponse> QueryBrowserBlockExAsync(QueryBrowserBlockRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBrowserBlockResponse>(await DoRequestAsync("1.0", "baas.browser.block.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取金融科技BaaS交易信息内容
         * Summary: 获取金融科技BaaS交易信息内容
         */
        public QueryBrowserTransactionResponse QueryBrowserTransaction(QueryBrowserTransactionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryBrowserTransactionEx(request, headers, runtime);
        }

        /**
         * Description: 获取金融科技BaaS交易信息内容
         * Summary: 获取金融科技BaaS交易信息内容
         */
        public async Task<QueryBrowserTransactionResponse> QueryBrowserTransactionAsync(QueryBrowserTransactionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryBrowserTransactionExAsync(request, headers, runtime);
        }

        /**
         * Description: 获取金融科技BaaS交易信息内容
         * Summary: 获取金融科技BaaS交易信息内容
         */
        public QueryBrowserTransactionResponse QueryBrowserTransactionEx(QueryBrowserTransactionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBrowserTransactionResponse>(DoRequest("1.0", "baas.browser.transaction.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取金融科技BaaS交易信息内容
         * Summary: 获取金融科技BaaS交易信息内容
         */
        public async Task<QueryBrowserTransactionResponse> QueryBrowserTransactionExAsync(QueryBrowserTransactionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBrowserTransactionResponse>(await DoRequestAsync("1.0", "baas.browser.transaction.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取金融科技BaaS交易回执信息
         * Summary: 获取金融科技BaaS交易回执信息
         */
        public QueryBrowserTransactionReceiptResponse QueryBrowserTransactionReceipt(QueryBrowserTransactionReceiptRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryBrowserTransactionReceiptEx(request, headers, runtime);
        }

        /**
         * Description: 获取金融科技BaaS交易回执信息
         * Summary: 获取金融科技BaaS交易回执信息
         */
        public async Task<QueryBrowserTransactionReceiptResponse> QueryBrowserTransactionReceiptAsync(QueryBrowserTransactionReceiptRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryBrowserTransactionReceiptExAsync(request, headers, runtime);
        }

        /**
         * Description: 获取金融科技BaaS交易回执信息
         * Summary: 获取金融科技BaaS交易回执信息
         */
        public QueryBrowserTransactionReceiptResponse QueryBrowserTransactionReceiptEx(QueryBrowserTransactionReceiptRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBrowserTransactionReceiptResponse>(DoRequest("1.0", "baas.browser.transaction.receipt.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取金融科技BaaS交易回执信息
         * Summary: 获取金融科技BaaS交易回执信息
         */
        public async Task<QueryBrowserTransactionReceiptResponse> QueryBrowserTransactionReceiptExAsync(QueryBrowserTransactionReceiptRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBrowserTransactionReceiptResponse>(await DoRequestAsync("1.0", "baas.browser.transaction.receipt.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 蚂蚁链节点所有者查询
         * Summary: 蚂蚁链节点所有者查询
         */
        public QueryBrowserNodeOwnerResponse QueryBrowserNodeOwner(QueryBrowserNodeOwnerRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryBrowserNodeOwnerEx(request, headers, runtime);
        }

        /**
         * Description: 蚂蚁链节点所有者查询
         * Summary: 蚂蚁链节点所有者查询
         */
        public async Task<QueryBrowserNodeOwnerResponse> QueryBrowserNodeOwnerAsync(QueryBrowserNodeOwnerRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryBrowserNodeOwnerExAsync(request, headers, runtime);
        }

        /**
         * Description: 蚂蚁链节点所有者查询
         * Summary: 蚂蚁链节点所有者查询
         */
        public QueryBrowserNodeOwnerResponse QueryBrowserNodeOwnerEx(QueryBrowserNodeOwnerRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBrowserNodeOwnerResponse>(DoRequest("1.0", "baas.browser.node.owner.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 蚂蚁链节点所有者查询
         * Summary: 蚂蚁链节点所有者查询
         */
        public async Task<QueryBrowserNodeOwnerResponse> QueryBrowserNodeOwnerExAsync(QueryBrowserNodeOwnerRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBrowserNodeOwnerResponse>(await DoRequestAsync("1.0", "baas.browser.node.owner.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 小程序权限删除
         * Summary: 小程序权限删除
         */
        public DeleteBlockchainMiniprogramResponse DeleteBlockchainMiniprogram(DeleteBlockchainMiniprogramRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return DeleteBlockchainMiniprogramEx(request, headers, runtime);
        }

        /**
         * Description: 小程序权限删除
         * Summary: 小程序权限删除
         */
        public async Task<DeleteBlockchainMiniprogramResponse> DeleteBlockchainMiniprogramAsync(DeleteBlockchainMiniprogramRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await DeleteBlockchainMiniprogramExAsync(request, headers, runtime);
        }

        /**
         * Description: 小程序权限删除
         * Summary: 小程序权限删除
         */
        public DeleteBlockchainMiniprogramResponse DeleteBlockchainMiniprogramEx(DeleteBlockchainMiniprogramRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteBlockchainMiniprogramResponse>(DoRequest("1.0", "baas.blockchain.miniprogram.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 小程序权限删除
         * Summary: 小程序权限删除
         */
        public async Task<DeleteBlockchainMiniprogramResponse> DeleteBlockchainMiniprogramExAsync(DeleteBlockchainMiniprogramRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteBlockchainMiniprogramResponse>(await DoRequestAsync("1.0", "baas.blockchain.miniprogram.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询用户链上交易移动端查看权限
         * Summary: 查询用户链上交易移动端查看权限
         */
        public QueryBlockchainMiniprogramResponse QueryBlockchainMiniprogram(QueryBlockchainMiniprogramRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryBlockchainMiniprogramEx(request, headers, runtime);
        }

        /**
         * Description: 查询用户链上交易移动端查看权限
         * Summary: 查询用户链上交易移动端查看权限
         */
        public async Task<QueryBlockchainMiniprogramResponse> QueryBlockchainMiniprogramAsync(QueryBlockchainMiniprogramRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryBlockchainMiniprogramExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询用户链上交易移动端查看权限
         * Summary: 查询用户链上交易移动端查看权限
         */
        public QueryBlockchainMiniprogramResponse QueryBlockchainMiniprogramEx(QueryBlockchainMiniprogramRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBlockchainMiniprogramResponse>(DoRequest("1.0", "baas.blockchain.miniprogram.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询用户链上交易移动端查看权限
         * Summary: 查询用户链上交易移动端查看权限
         */
        public async Task<QueryBlockchainMiniprogramResponse> QueryBlockchainMiniprogramExAsync(QueryBlockchainMiniprogramRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryBlockchainMiniprogramResponse>(await DoRequestAsync("1.0", "baas.blockchain.miniprogram.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融信用流转能力注册开通结果查询
         * Summary: 物流金融信用流转能力注册开通结果查询
         */
        public QueryCreditTransferApplyResponse QueryCreditTransferApply(QueryCreditTransferApplyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryCreditTransferApplyEx(request, headers, runtime);
        }

        /**
         * Description: 物流金融信用流转能力注册开通结果查询
         * Summary: 物流金融信用流转能力注册开通结果查询
         */
        public async Task<QueryCreditTransferApplyResponse> QueryCreditTransferApplyAsync(QueryCreditTransferApplyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryCreditTransferApplyExAsync(request, headers, runtime);
        }

        /**
         * Description: 物流金融信用流转能力注册开通结果查询
         * Summary: 物流金融信用流转能力注册开通结果查询
         */
        public QueryCreditTransferApplyResponse QueryCreditTransferApplyEx(QueryCreditTransferApplyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryCreditTransferApplyResponse>(DoRequest("1.0", "baas.credit.transfer.apply.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融信用流转能力注册开通结果查询
         * Summary: 物流金融信用流转能力注册开通结果查询
         */
        public async Task<QueryCreditTransferApplyResponse> QueryCreditTransferApplyExAsync(QueryCreditTransferApplyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryCreditTransferApplyResponse>(await DoRequestAsync("1.0", "baas.credit.transfer.apply.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融信用流转额度查询，仅显示是否有额度，不会返回具体额度
         * Summary: 物流金融信用流转额度查询
         */
        public QueryCreditTransferBalanceResponse QueryCreditTransferBalance(QueryCreditTransferBalanceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryCreditTransferBalanceEx(request, headers, runtime);
        }

        /**
         * Description: 物流金融信用流转额度查询，仅显示是否有额度，不会返回具体额度
         * Summary: 物流金融信用流转额度查询
         */
        public async Task<QueryCreditTransferBalanceResponse> QueryCreditTransferBalanceAsync(QueryCreditTransferBalanceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryCreditTransferBalanceExAsync(request, headers, runtime);
        }

        /**
         * Description: 物流金融信用流转额度查询，仅显示是否有额度，不会返回具体额度
         * Summary: 物流金融信用流转额度查询
         */
        public QueryCreditTransferBalanceResponse QueryCreditTransferBalanceEx(QueryCreditTransferBalanceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryCreditTransferBalanceResponse>(DoRequest("1.0", "baas.credit.transfer.balance.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融信用流转额度查询，仅显示是否有额度，不会返回具体额度
         * Summary: 物流金融信用流转额度查询
         */
        public async Task<QueryCreditTransferBalanceResponse> QueryCreditTransferBalanceExAsync(QueryCreditTransferBalanceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryCreditTransferBalanceResponse>(await DoRequestAsync("1.0", "baas.credit.transfer.balance.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融信用流转通过id查询发行结果
         * Summary: 物流金融信用流转通过id查询发行结果
         */
        public QueryCreditTransferIssuebyidResponse QueryCreditTransferIssuebyid(QueryCreditTransferIssuebyidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryCreditTransferIssuebyidEx(request, headers, runtime);
        }

        /**
         * Description: 物流金融信用流转通过id查询发行结果
         * Summary: 物流金融信用流转通过id查询发行结果
         */
        public async Task<QueryCreditTransferIssuebyidResponse> QueryCreditTransferIssuebyidAsync(QueryCreditTransferIssuebyidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryCreditTransferIssuebyidExAsync(request, headers, runtime);
        }

        /**
         * Description: 物流金融信用流转通过id查询发行结果
         * Summary: 物流金融信用流转通过id查询发行结果
         */
        public QueryCreditTransferIssuebyidResponse QueryCreditTransferIssuebyidEx(QueryCreditTransferIssuebyidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryCreditTransferIssuebyidResponse>(DoRequest("1.0", "baas.credit.transfer.issuebyid.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融信用流转通过id查询发行结果
         * Summary: 物流金融信用流转通过id查询发行结果
         */
        public async Task<QueryCreditTransferIssuebyidResponse> QueryCreditTransferIssuebyidExAsync(QueryCreditTransferIssuebyidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryCreditTransferIssuebyidResponse>(await DoRequestAsync("1.0", "baas.credit.transfer.issuebyid.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融根据时间查询信用凭证信息
         * Summary: 物流金融根据时间查询信用流转信息
         */
        public QueryCreditTransferIssuebytimeResponse QueryCreditTransferIssuebytime(QueryCreditTransferIssuebytimeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryCreditTransferIssuebytimeEx(request, headers, runtime);
        }

        /**
         * Description: 物流金融根据时间查询信用凭证信息
         * Summary: 物流金融根据时间查询信用流转信息
         */
        public async Task<QueryCreditTransferIssuebytimeResponse> QueryCreditTransferIssuebytimeAsync(QueryCreditTransferIssuebytimeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryCreditTransferIssuebytimeExAsync(request, headers, runtime);
        }

        /**
         * Description: 物流金融根据时间查询信用凭证信息
         * Summary: 物流金融根据时间查询信用流转信息
         */
        public QueryCreditTransferIssuebytimeResponse QueryCreditTransferIssuebytimeEx(QueryCreditTransferIssuebytimeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryCreditTransferIssuebytimeResponse>(DoRequest("1.0", "baas.credit.transfer.issuebytime.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融根据时间查询信用凭证信息
         * Summary: 物流金融根据时间查询信用流转信息
         */
        public async Task<QueryCreditTransferIssuebytimeResponse> QueryCreditTransferIssuebytimeExAsync(QueryCreditTransferIssuebytimeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryCreditTransferIssuebytimeResponse>(await DoRequestAsync("1.0", "baas.credit.transfer.issuebytime.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融信用流转流水查询
         * Summary: 物流金融信用流转流水查询
         */
        public QueryCreditTransferStatementResponse QueryCreditTransferStatement(QueryCreditTransferStatementRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryCreditTransferStatementEx(request, headers, runtime);
        }

        /**
         * Description: 物流金融信用流转流水查询
         * Summary: 物流金融信用流转流水查询
         */
        public async Task<QueryCreditTransferStatementResponse> QueryCreditTransferStatementAsync(QueryCreditTransferStatementRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryCreditTransferStatementExAsync(request, headers, runtime);
        }

        /**
         * Description: 物流金融信用流转流水查询
         * Summary: 物流金融信用流转流水查询
         */
        public QueryCreditTransferStatementResponse QueryCreditTransferStatementEx(QueryCreditTransferStatementRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryCreditTransferStatementResponse>(DoRequest("1.0", "baas.credit.transfer.statement.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融信用流转流水查询
         * Summary: 物流金融信用流转流水查询
         */
        public async Task<QueryCreditTransferStatementResponse> QueryCreditTransferStatementExAsync(QueryCreditTransferStatementRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryCreditTransferStatementResponse>(await DoRequestAsync("1.0", "baas.credit.transfer.statement.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融信用流转主站系统回调
         * Summary: 物流金融信用流转主站系统回调
         */
        public CallbackCreditTransferResponse CallbackCreditTransfer(CallbackCreditTransferRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CallbackCreditTransferEx(request, headers, runtime);
        }

        /**
         * Description: 物流金融信用流转主站系统回调
         * Summary: 物流金融信用流转主站系统回调
         */
        public async Task<CallbackCreditTransferResponse> CallbackCreditTransferAsync(CallbackCreditTransferRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CallbackCreditTransferExAsync(request, headers, runtime);
        }

        /**
         * Description: 物流金融信用流转主站系统回调
         * Summary: 物流金融信用流转主站系统回调
         */
        public CallbackCreditTransferResponse CallbackCreditTransferEx(CallbackCreditTransferRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CallbackCreditTransferResponse>(DoRequest("1.0", "baas.credit.transfer.callback", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 物流金融信用流转主站系统回调
         * Summary: 物流金融信用流转主站系统回调
         */
        public async Task<CallbackCreditTransferResponse> CallbackCreditTransferExAsync(CallbackCreditTransferRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CallbackCreditTransferResponse>(await DoRequestAsync("1.0", "baas.credit.transfer.callback", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 外部业务方可以给DIS的C端小程序用户颁发声明（VC）用户特定场景
         * Summary: 推送业务方给用户颁发的声明内容
         */
        public PushAuthUserVcResponse PushAuthUserVc(PushAuthUserVcRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return PushAuthUserVcEx(request, headers, runtime);
        }

        /**
         * Description: 外部业务方可以给DIS的C端小程序用户颁发声明（VC）用户特定场景
         * Summary: 推送业务方给用户颁发的声明内容
         */
        public async Task<PushAuthUserVcResponse> PushAuthUserVcAsync(PushAuthUserVcRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await PushAuthUserVcExAsync(request, headers, runtime);
        }

        /**
         * Description: 外部业务方可以给DIS的C端小程序用户颁发声明（VC）用户特定场景
         * Summary: 推送业务方给用户颁发的声明内容
         */
        public PushAuthUserVcResponse PushAuthUserVcEx(PushAuthUserVcRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<PushAuthUserVcResponse>(DoRequest("1.0", "baas.auth.user.vc.push", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 外部业务方可以给DIS的C端小程序用户颁发声明（VC）用户特定场景
         * Summary: 推送业务方给用户颁发的声明内容
         */
        public async Task<PushAuthUserVcResponse> PushAuthUserVcExAsync(PushAuthUserVcRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<PushAuthUserVcResponse>(await DoRequestAsync("1.0", "baas.auth.user.vc.push", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 业务方推送需要用户使用数字身份did授权确认的声明，推送后可根据自定义的业务id（biz_id）来查询状态（另提供接口），进而获取用户授权后的声明。
         * Summary: 推送需要用户端授权的业务声明
         */
        public PushAuthClaimVcResponse PushAuthClaimVc(PushAuthClaimVcRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return PushAuthClaimVcEx(request, headers, runtime);
        }

        /**
         * Description: 业务方推送需要用户使用数字身份did授权确认的声明，推送后可根据自定义的业务id（biz_id）来查询状态（另提供接口），进而获取用户授权后的声明。
         * Summary: 推送需要用户端授权的业务声明
         */
        public async Task<PushAuthClaimVcResponse> PushAuthClaimVcAsync(PushAuthClaimVcRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await PushAuthClaimVcExAsync(request, headers, runtime);
        }

        /**
         * Description: 业务方推送需要用户使用数字身份did授权确认的声明，推送后可根据自定义的业务id（biz_id）来查询状态（另提供接口），进而获取用户授权后的声明。
         * Summary: 推送需要用户端授权的业务声明
         */
        public PushAuthClaimVcResponse PushAuthClaimVcEx(PushAuthClaimVcRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<PushAuthClaimVcResponse>(DoRequest("1.0", "baas.auth.claim.vc.push", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 业务方推送需要用户使用数字身份did授权确认的声明，推送后可根据自定义的业务id（biz_id）来查询状态（另提供接口），进而获取用户授权后的声明。
         * Summary: 推送需要用户端授权的业务声明
         */
        public async Task<PushAuthClaimVcResponse> PushAuthClaimVcExAsync(PushAuthClaimVcRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<PushAuthClaimVcResponse>(await DoRequestAsync("1.0", "baas.auth.claim.vc.push", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 业务方通过提供二维码的方式引导用户支付宝扫描创建did，然后业务方通过此接口可查询用户新建的did
         * Summary: 通过biz_id获取用户的did
         */
        public PullAuthUserDidResponse PullAuthUserDid(PullAuthUserDidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return PullAuthUserDidEx(request, headers, runtime);
        }

        /**
         * Description: 业务方通过提供二维码的方式引导用户支付宝扫描创建did，然后业务方通过此接口可查询用户新建的did
         * Summary: 通过biz_id获取用户的did
         */
        public async Task<PullAuthUserDidResponse> PullAuthUserDidAsync(PullAuthUserDidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await PullAuthUserDidExAsync(request, headers, runtime);
        }

        /**
         * Description: 业务方通过提供二维码的方式引导用户支付宝扫描创建did，然后业务方通过此接口可查询用户新建的did
         * Summary: 通过biz_id获取用户的did
         */
        public PullAuthUserDidResponse PullAuthUserDidEx(PullAuthUserDidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<PullAuthUserDidResponse>(DoRequest("1.0", "baas.auth.user.did.pull", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 业务方通过提供二维码的方式引导用户支付宝扫描创建did，然后业务方通过此接口可查询用户新建的did
         * Summary: 通过biz_id获取用户的did
         */
        public async Task<PullAuthUserDidResponse> PullAuthUserDidExAsync(PullAuthUserDidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<PullAuthUserDidResponse>(await DoRequestAsync("1.0", "baas.auth.user.did.pull", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 业务方通过此接口可以查询，申请用户授权的声明状态，如果用户已授权即可获取到授权后的声明（vc）内容。
         * Summary: 获取申请用户声明的授权结果
         */
        public PullAuthClaimVcResponse PullAuthClaimVc(PullAuthClaimVcRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return PullAuthClaimVcEx(request, headers, runtime);
        }

        /**
         * Description: 业务方通过此接口可以查询，申请用户授权的声明状态，如果用户已授权即可获取到授权后的声明（vc）内容。
         * Summary: 获取申请用户声明的授权结果
         */
        public async Task<PullAuthClaimVcResponse> PullAuthClaimVcAsync(PullAuthClaimVcRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await PullAuthClaimVcExAsync(request, headers, runtime);
        }

        /**
         * Description: 业务方通过此接口可以查询，申请用户授权的声明状态，如果用户已授权即可获取到授权后的声明（vc）内容。
         * Summary: 获取申请用户声明的授权结果
         */
        public PullAuthClaimVcResponse PullAuthClaimVcEx(PullAuthClaimVcRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<PullAuthClaimVcResponse>(DoRequest("1.0", "baas.auth.claim.vc.pull", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 业务方通过此接口可以查询，申请用户授权的声明状态，如果用户已授权即可获取到授权后的声明（vc）内容。
         * Summary: 获取申请用户声明的授权结果
         */
        public async Task<PullAuthClaimVcResponse> PullAuthClaimVcExAsync(PullAuthClaimVcRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<PullAuthClaimVcResponse>(await DoRequestAsync("1.0", "baas.auth.claim.vc.pull", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 业务系统通过授权宝服务帮忙给用户创建did，此接口访问需预先在授权宝配置白名单开通。
         * Summary: 给用户创建did，需要指定userId
         */
        public CreateAuthUserDidResponse CreateAuthUserDid(CreateAuthUserDidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateAuthUserDidEx(request, headers, runtime);
        }

        /**
         * Description: 业务系统通过授权宝服务帮忙给用户创建did，此接口访问需预先在授权宝配置白名单开通。
         * Summary: 给用户创建did，需要指定userId
         */
        public async Task<CreateAuthUserDidResponse> CreateAuthUserDidAsync(CreateAuthUserDidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateAuthUserDidExAsync(request, headers, runtime);
        }

        /**
         * Description: 业务系统通过授权宝服务帮忙给用户创建did，此接口访问需预先在授权宝配置白名单开通。
         * Summary: 给用户创建did，需要指定userId
         */
        public CreateAuthUserDidResponse CreateAuthUserDidEx(CreateAuthUserDidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateAuthUserDidResponse>(DoRequest("1.0", "baas.auth.user.did.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 业务系统通过授权宝服务帮忙给用户创建did，此接口访问需预先在授权宝配置白名单开通。
         * Summary: 给用户创建did，需要指定userId
         */
        public async Task<CreateAuthUserDidResponse> CreateAuthUserDidExAsync(CreateAuthUserDidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateAuthUserDidResponse>(await DoRequestAsync("1.0", "baas.auth.user.did.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 给企业DID创建DID，通常场景为对授权宝服务的开通，调用方对企业有认证能力。
         * Summary: 创建企业DID，开通授权宝服务
         */
        public CreateAuthCorporateDidResponse CreateAuthCorporateDid(CreateAuthCorporateDidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateAuthCorporateDidEx(request, headers, runtime);
        }

        /**
         * Description: 给企业DID创建DID，通常场景为对授权宝服务的开通，调用方对企业有认证能力。
         * Summary: 创建企业DID，开通授权宝服务
         */
        public async Task<CreateAuthCorporateDidResponse> CreateAuthCorporateDidAsync(CreateAuthCorporateDidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateAuthCorporateDidExAsync(request, headers, runtime);
        }

        /**
         * Description: 给企业DID创建DID，通常场景为对授权宝服务的开通，调用方对企业有认证能力。
         * Summary: 创建企业DID，开通授权宝服务
         */
        public CreateAuthCorporateDidResponse CreateAuthCorporateDidEx(CreateAuthCorporateDidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateAuthCorporateDidResponse>(DoRequest("1.0", "baas.auth.corporate.did.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 给企业DID创建DID，通常场景为对授权宝服务的开通，调用方对企业有认证能力。
         * Summary: 创建企业DID，开通授权宝服务
         */
        public async Task<CreateAuthCorporateDidResponse> CreateAuthCorporateDidExAsync(CreateAuthCorporateDidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateAuthCorporateDidResponse>(await DoRequestAsync("1.0", "baas.auth.corporate.did.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 业务方的C端用户授权颁发“可验证声明”（简称VC）之后，就会异步推送结果给相关业务服务端，如果相关业务服务端没有接收到，或者本地缓存过期，则可以通过此接口到授权宝再次查询目标可验证声明结果情况。
         * Summary: 查询目标可验证声明结果
         */
        public PullAuthWebpageVcResponse PullAuthWebpageVc(PullAuthWebpageVcRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return PullAuthWebpageVcEx(request, headers, runtime);
        }

        /**
         * Description: 业务方的C端用户授权颁发“可验证声明”（简称VC）之后，就会异步推送结果给相关业务服务端，如果相关业务服务端没有接收到，或者本地缓存过期，则可以通过此接口到授权宝再次查询目标可验证声明结果情况。
         * Summary: 查询目标可验证声明结果
         */
        public async Task<PullAuthWebpageVcResponse> PullAuthWebpageVcAsync(PullAuthWebpageVcRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await PullAuthWebpageVcExAsync(request, headers, runtime);
        }

        /**
         * Description: 业务方的C端用户授权颁发“可验证声明”（简称VC）之后，就会异步推送结果给相关业务服务端，如果相关业务服务端没有接收到，或者本地缓存过期，则可以通过此接口到授权宝再次查询目标可验证声明结果情况。
         * Summary: 查询目标可验证声明结果
         */
        public PullAuthWebpageVcResponse PullAuthWebpageVcEx(PullAuthWebpageVcRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<PullAuthWebpageVcResponse>(DoRequest("1.0", "baas.auth.webpage.vc.pull", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 业务方的C端用户授权颁发“可验证声明”（简称VC）之后，就会异步推送结果给相关业务服务端，如果相关业务服务端没有接收到，或者本地缓存过期，则可以通过此接口到授权宝再次查询目标可验证声明结果情况。
         * Summary: 查询目标可验证声明结果
         */
        public async Task<PullAuthWebpageVcResponse> PullAuthWebpageVcExAsync(PullAuthWebpageVcRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<PullAuthWebpageVcResponse>(await DoRequestAsync("1.0", "baas.auth.webpage.vc.pull", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 此接口提供了授权宝这边可用的H5页面的Url，此Url会携带一些参数：授权宝鉴权token(JWT机制生成，内部使用)、bizId(接口入参带入)
         * Summary: 获取授权宝侧的H5授权Url
         */
        public PullAuthWebpageUrlResponse PullAuthWebpageUrl(PullAuthWebpageUrlRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return PullAuthWebpageUrlEx(request, headers, runtime);
        }

        /**
         * Description: 此接口提供了授权宝这边可用的H5页面的Url，此Url会携带一些参数：授权宝鉴权token(JWT机制生成，内部使用)、bizId(接口入参带入)
         * Summary: 获取授权宝侧的H5授权Url
         */
        public async Task<PullAuthWebpageUrlResponse> PullAuthWebpageUrlAsync(PullAuthWebpageUrlRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await PullAuthWebpageUrlExAsync(request, headers, runtime);
        }

        /**
         * Description: 此接口提供了授权宝这边可用的H5页面的Url，此Url会携带一些参数：授权宝鉴权token(JWT机制生成，内部使用)、bizId(接口入参带入)
         * Summary: 获取授权宝侧的H5授权Url
         */
        public PullAuthWebpageUrlResponse PullAuthWebpageUrlEx(PullAuthWebpageUrlRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<PullAuthWebpageUrlResponse>(DoRequest("1.0", "baas.auth.webpage.url.pull", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 此接口提供了授权宝这边可用的H5页面的Url，此Url会携带一些参数：授权宝鉴权token(JWT机制生成，内部使用)、bizId(接口入参带入)
         * Summary: 获取授权宝侧的H5授权Url
         */
        public async Task<PullAuthWebpageUrlResponse> PullAuthWebpageUrlExAsync(PullAuthWebpageUrlRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<PullAuthWebpageUrlResponse>(await DoRequestAsync("1.0", "baas.auth.webpage.url.pull", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 在一些业务场景，指定可验证声明之后，根据bizType的类型，直接发生代理颁发可验证声明的操作。
         * Summary: 给定声明内容并颁发声明
         */
        public StartAuthVcAuthResponse StartAuthVcAuth(StartAuthVcAuthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartAuthVcAuthEx(request, headers, runtime);
        }

        /**
         * Description: 在一些业务场景，指定可验证声明之后，根据bizType的类型，直接发生代理颁发可验证声明的操作。
         * Summary: 给定声明内容并颁发声明
         */
        public async Task<StartAuthVcAuthResponse> StartAuthVcAuthAsync(StartAuthVcAuthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartAuthVcAuthExAsync(request, headers, runtime);
        }

        /**
         * Description: 在一些业务场景，指定可验证声明之后，根据bizType的类型，直接发生代理颁发可验证声明的操作。
         * Summary: 给定声明内容并颁发声明
         */
        public StartAuthVcAuthResponse StartAuthVcAuthEx(StartAuthVcAuthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthVcAuthResponse>(DoRequest("1.0", "baas.auth.vc.auth.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 在一些业务场景，指定可验证声明之后，根据bizType的类型，直接发生代理颁发可验证声明的操作。
         * Summary: 给定声明内容并颁发声明
         */
        public async Task<StartAuthVcAuthResponse> StartAuthVcAuthExAsync(StartAuthVcAuthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthVcAuthResponse>(await DoRequestAsync("1.0", "baas.auth.vc.auth.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 可验证声明（VC）的拥有者（vcContent中的subject）可以将声明分享权限给其它的DID。
         * Summary: 将目标的声明内容，分享权限给目标的DID
         */
        public StartAuthVcShareResponse StartAuthVcShare(StartAuthVcShareRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartAuthVcShareEx(request, headers, runtime);
        }

        /**
         * Description: 可验证声明（VC）的拥有者（vcContent中的subject）可以将声明分享权限给其它的DID。
         * Summary: 将目标的声明内容，分享权限给目标的DID
         */
        public async Task<StartAuthVcShareResponse> StartAuthVcShareAsync(StartAuthVcShareRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartAuthVcShareExAsync(request, headers, runtime);
        }

        /**
         * Description: 可验证声明（VC）的拥有者（vcContent中的subject）可以将声明分享权限给其它的DID。
         * Summary: 将目标的声明内容，分享权限给目标的DID
         */
        public StartAuthVcShareResponse StartAuthVcShareEx(StartAuthVcShareRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthVcShareResponse>(DoRequest("1.0", "baas.auth.vc.share.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 可验证声明（VC）的拥有者（vcContent中的subject）可以将声明分享权限给其它的DID。
         * Summary: 将目标的声明内容，分享权限给目标的DID
         */
        public async Task<StartAuthVcShareResponse> StartAuthVcShareExAsync(StartAuthVcShareRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthVcShareResponse>(await DoRequestAsync("1.0", "baas.auth.vc.share.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过指定可验证声明id，获取目标可验证声明内容，需要可验证声明的拥有者分享声明才可查询，如果没有权限则获取失败。
         * Summary: 获取目标可验证声明内容
         */
        public QueryAuthVcContentResponse QueryAuthVcContent(QueryAuthVcContentRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryAuthVcContentEx(request, headers, runtime);
        }

        /**
         * Description: 通过指定可验证声明id，获取目标可验证声明内容，需要可验证声明的拥有者分享声明才可查询，如果没有权限则获取失败。
         * Summary: 获取目标可验证声明内容
         */
        public async Task<QueryAuthVcContentResponse> QueryAuthVcContentAsync(QueryAuthVcContentRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryAuthVcContentExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过指定可验证声明id，获取目标可验证声明内容，需要可验证声明的拥有者分享声明才可查询，如果没有权限则获取失败。
         * Summary: 获取目标可验证声明内容
         */
        public QueryAuthVcContentResponse QueryAuthVcContentEx(QueryAuthVcContentRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthVcContentResponse>(DoRequest("1.0", "baas.auth.vc.content.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过指定可验证声明id，获取目标可验证声明内容，需要可验证声明的拥有者分享声明才可查询，如果没有权限则获取失败。
         * Summary: 获取目标可验证声明内容
         */
        public async Task<QueryAuthVcContentResponse> QueryAuthVcContentExAsync(QueryAuthVcContentRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthVcContentResponse>(await DoRequestAsync("1.0", "baas.auth.vc.content.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 业务系统通过授权宝服务帮忙给C类用户创建did，此接口访问需预先在授权宝配置白名单开通。
         * Summary: 给C类用户建did，需要指定user信息
         */
        public CreateAuthUserinfoDidResponse CreateAuthUserinfoDid(CreateAuthUserinfoDidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateAuthUserinfoDidEx(request, headers, runtime);
        }

        /**
         * Description: 业务系统通过授权宝服务帮忙给C类用户创建did，此接口访问需预先在授权宝配置白名单开通。
         * Summary: 给C类用户建did，需要指定user信息
         */
        public async Task<CreateAuthUserinfoDidResponse> CreateAuthUserinfoDidAsync(CreateAuthUserinfoDidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateAuthUserinfoDidExAsync(request, headers, runtime);
        }

        /**
         * Description: 业务系统通过授权宝服务帮忙给C类用户创建did，此接口访问需预先在授权宝配置白名单开通。
         * Summary: 给C类用户建did，需要指定user信息
         */
        public CreateAuthUserinfoDidResponse CreateAuthUserinfoDidEx(CreateAuthUserinfoDidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateAuthUserinfoDidResponse>(DoRequest("1.0", "baas.auth.userinfo.did.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 业务系统通过授权宝服务帮忙给C类用户创建did，此接口访问需预先在授权宝配置白名单开通。
         * Summary: 给C类用户建did，需要指定user信息
         */
        public async Task<CreateAuthUserinfoDidResponse> CreateAuthUserinfoDidExAsync(CreateAuthUserinfoDidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateAuthUserinfoDidResponse>(await DoRequestAsync("1.0", "baas.auth.userinfo.did.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 声明的持有者可以吊销一个已颁发的可验证声明(VC)
         * Summary: 吊销已颁发声明
         */
        public StartAuthVcRevokeResponse StartAuthVcRevoke(StartAuthVcRevokeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartAuthVcRevokeEx(request, headers, runtime);
        }

        /**
         * Description: 声明的持有者可以吊销一个已颁发的可验证声明(VC)
         * Summary: 吊销已颁发声明
         */
        public async Task<StartAuthVcRevokeResponse> StartAuthVcRevokeAsync(StartAuthVcRevokeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartAuthVcRevokeExAsync(request, headers, runtime);
        }

        /**
         * Description: 声明的持有者可以吊销一个已颁发的可验证声明(VC)
         * Summary: 吊销已颁发声明
         */
        public StartAuthVcRevokeResponse StartAuthVcRevokeEx(StartAuthVcRevokeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthVcRevokeResponse>(DoRequest("1.0", "baas.auth.vc.revoke.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 声明的持有者可以吊销一个已颁发的可验证声明(VC)
         * Summary: 吊销已颁发声明
         */
        public async Task<StartAuthVcRevokeResponse> StartAuthVcRevokeExAsync(StartAuthVcRevokeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthVcRevokeResponse>(await DoRequestAsync("1.0", "baas.auth.vc.revoke.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 将可验证声明内的数据资产内容赠送给目标的did
         * Summary: 将vc赠送给一个目标did
         */
        public StartAuthVcGiveResponse StartAuthVcGive(StartAuthVcGiveRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartAuthVcGiveEx(request, headers, runtime);
        }

        /**
         * Description: 将可验证声明内的数据资产内容赠送给目标的did
         * Summary: 将vc赠送给一个目标did
         */
        public async Task<StartAuthVcGiveResponse> StartAuthVcGiveAsync(StartAuthVcGiveRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartAuthVcGiveExAsync(request, headers, runtime);
        }

        /**
         * Description: 将可验证声明内的数据资产内容赠送给目标的did
         * Summary: 将vc赠送给一个目标did
         */
        public StartAuthVcGiveResponse StartAuthVcGiveEx(StartAuthVcGiveRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthVcGiveResponse>(DoRequest("1.0", "baas.auth.vc.give.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 将可验证声明内的数据资产内容赠送给目标的did
         * Summary: 将vc赠送给一个目标did
         */
        public async Task<StartAuthVcGiveResponse> StartAuthVcGiveExAsync(StartAuthVcGiveRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthVcGiveResponse>(await DoRequestAsync("1.0", "baas.auth.vc.give.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 提供批量分享可验证声明到目标did
         * Summary: 批量分享VC内容
         */
        public StartAuthVcSharebatchResponse StartAuthVcSharebatch(StartAuthVcSharebatchRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartAuthVcSharebatchEx(request, headers, runtime);
        }

        /**
         * Description: 提供批量分享可验证声明到目标did
         * Summary: 批量分享VC内容
         */
        public async Task<StartAuthVcSharebatchResponse> StartAuthVcSharebatchAsync(StartAuthVcSharebatchRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartAuthVcSharebatchExAsync(request, headers, runtime);
        }

        /**
         * Description: 提供批量分享可验证声明到目标did
         * Summary: 批量分享VC内容
         */
        public StartAuthVcSharebatchResponse StartAuthVcSharebatchEx(StartAuthVcSharebatchRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthVcSharebatchResponse>(DoRequest("1.0", "baas.auth.vc.sharebatch.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 提供批量分享可验证声明到目标did
         * Summary: 批量分享VC内容
         */
        public async Task<StartAuthVcSharebatchResponse> StartAuthVcSharebatchExAsync(StartAuthVcSharebatchRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthVcSharebatchResponse>(await DoRequestAsync("1.0", "baas.auth.vc.sharebatch.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 如果机构没有接入网关能力需要合作方代理在授权宝管理签名能力，可使用此接口。
        初始申请创建此corp did的调用方，有权限申请签名。
         * Summary: 代理签名
         */
        public StartAuthCorporateSignResponse StartAuthCorporateSign(StartAuthCorporateSignRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartAuthCorporateSignEx(request, headers, runtime);
        }

        /**
         * Description: 如果机构没有接入网关能力需要合作方代理在授权宝管理签名能力，可使用此接口。
        初始申请创建此corp did的调用方，有权限申请签名。
         * Summary: 代理签名
         */
        public async Task<StartAuthCorporateSignResponse> StartAuthCorporateSignAsync(StartAuthCorporateSignRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartAuthCorporateSignExAsync(request, headers, runtime);
        }

        /**
         * Description: 如果机构没有接入网关能力需要合作方代理在授权宝管理签名能力，可使用此接口。
        初始申请创建此corp did的调用方，有权限申请签名。
         * Summary: 代理签名
         */
        public StartAuthCorporateSignResponse StartAuthCorporateSignEx(StartAuthCorporateSignRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthCorporateSignResponse>(DoRequest("1.0", "baas.auth.corporate.sign.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 如果机构没有接入网关能力需要合作方代理在授权宝管理签名能力，可使用此接口。
        初始申请创建此corp did的调用方，有权限申请签名。
         * Summary: 代理签名
         */
        public async Task<StartAuthCorporateSignResponse> StartAuthCorporateSignExAsync(StartAuthCorporateSignRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthCorporateSignResponse>(await DoRequestAsync("1.0", "baas.auth.corporate.sign.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 在一些业务场景，指定可验证声明之后，提交颁发可验证声明的操作。当前接口支持批量颁发声明，通常支持对多机构的数据授权。
         * Summary: 批量给定声明内容颁发声明，并上链存证
         */
        public StartAuthVcBatchauthResponse StartAuthVcBatchauth(StartAuthVcBatchauthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartAuthVcBatchauthEx(request, headers, runtime);
        }

        /**
         * Description: 在一些业务场景，指定可验证声明之后，提交颁发可验证声明的操作。当前接口支持批量颁发声明，通常支持对多机构的数据授权。
         * Summary: 批量给定声明内容颁发声明，并上链存证
         */
        public async Task<StartAuthVcBatchauthResponse> StartAuthVcBatchauthAsync(StartAuthVcBatchauthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartAuthVcBatchauthExAsync(request, headers, runtime);
        }

        /**
         * Description: 在一些业务场景，指定可验证声明之后，提交颁发可验证声明的操作。当前接口支持批量颁发声明，通常支持对多机构的数据授权。
         * Summary: 批量给定声明内容颁发声明，并上链存证
         */
        public StartAuthVcBatchauthResponse StartAuthVcBatchauthEx(StartAuthVcBatchauthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthVcBatchauthResponse>(DoRequest("1.0", "baas.auth.vc.batchauth.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 在一些业务场景，指定可验证声明之后，提交颁发可验证声明的操作。当前接口支持批量颁发声明，通常支持对多机构的数据授权。
         * Summary: 批量给定声明内容颁发声明，并上链存证
         */
        public async Task<StartAuthVcBatchauthResponse> StartAuthVcBatchauthExAsync(StartAuthVcBatchauthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthVcBatchauthResponse>(await DoRequestAsync("1.0", "baas.auth.vc.batchauth.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 将已颁发的可验证声明进行吊销，然后重新颁发一个新的可验证声明用于代替原有的业务语义的可验证声明。
         * Summary: 将已颁发的可验证声明进行重置替换
         */
        public StartAuthVcReplaceResponse StartAuthVcReplace(StartAuthVcReplaceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartAuthVcReplaceEx(request, headers, runtime);
        }

        /**
         * Description: 将已颁发的可验证声明进行吊销，然后重新颁发一个新的可验证声明用于代替原有的业务语义的可验证声明。
         * Summary: 将已颁发的可验证声明进行重置替换
         */
        public async Task<StartAuthVcReplaceResponse> StartAuthVcReplaceAsync(StartAuthVcReplaceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartAuthVcReplaceExAsync(request, headers, runtime);
        }

        /**
         * Description: 将已颁发的可验证声明进行吊销，然后重新颁发一个新的可验证声明用于代替原有的业务语义的可验证声明。
         * Summary: 将已颁发的可验证声明进行重置替换
         */
        public StartAuthVcReplaceResponse StartAuthVcReplaceEx(StartAuthVcReplaceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthVcReplaceResponse>(DoRequest("1.0", "baas.auth.vc.replace.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 将已颁发的可验证声明进行吊销，然后重新颁发一个新的可验证声明用于代替原有的业务语义的可验证声明。
         * Summary: 将已颁发的可验证声明进行重置替换
         */
        public async Task<StartAuthVcReplaceResponse> StartAuthVcReplaceExAsync(StartAuthVcReplaceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthVcReplaceResponse>(await DoRequestAsync("1.0", "baas.auth.vc.replace.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 推送保单信息
         * Summary: 推送保单信息
         */
        public PushAuthInsurancePolicyResponse PushAuthInsurancePolicy(PushAuthInsurancePolicyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return PushAuthInsurancePolicyEx(request, headers, runtime);
        }

        /**
         * Description: 推送保单信息
         * Summary: 推送保单信息
         */
        public async Task<PushAuthInsurancePolicyResponse> PushAuthInsurancePolicyAsync(PushAuthInsurancePolicyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await PushAuthInsurancePolicyExAsync(request, headers, runtime);
        }

        /**
         * Description: 推送保单信息
         * Summary: 推送保单信息
         */
        public PushAuthInsurancePolicyResponse PushAuthInsurancePolicyEx(PushAuthInsurancePolicyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<PushAuthInsurancePolicyResponse>(DoRequest("1.0", "baas.auth.insurance.policy.push", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 推送保单信息
         * Summary: 推送保单信息
         */
        public async Task<PushAuthInsurancePolicyResponse> PushAuthInsurancePolicyExAsync(PushAuthInsurancePolicyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<PushAuthInsurancePolicyResponse>(await DoRequestAsync("1.0", "baas.auth.insurance.policy.push", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取前端sdk使用的token
         * Summary: 获取前端sdk使用的token
         */
        public GetAuthFrontendAccesstokenResponse GetAuthFrontendAccesstoken(GetAuthFrontendAccesstokenRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return GetAuthFrontendAccesstokenEx(request, headers, runtime);
        }

        /**
         * Description: 获取前端sdk使用的token
         * Summary: 获取前端sdk使用的token
         */
        public async Task<GetAuthFrontendAccesstokenResponse> GetAuthFrontendAccesstokenAsync(GetAuthFrontendAccesstokenRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await GetAuthFrontendAccesstokenExAsync(request, headers, runtime);
        }

        /**
         * Description: 获取前端sdk使用的token
         * Summary: 获取前端sdk使用的token
         */
        public GetAuthFrontendAccesstokenResponse GetAuthFrontendAccesstokenEx(GetAuthFrontendAccesstokenRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetAuthFrontendAccesstokenResponse>(DoRequest("1.0", "baas.auth.frontend.accesstoken.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取前端sdk使用的token
         * Summary: 获取前端sdk使用的token
         */
        public async Task<GetAuthFrontendAccesstokenResponse> GetAuthFrontendAccesstokenExAsync(GetAuthFrontendAccesstokenRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetAuthFrontendAccesstokenResponse>(await DoRequestAsync("1.0", "baas.auth.frontend.accesstoken.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取声明授权链接
         * Summary: 获取声明授权链接
         */
        public CreateAuthClaimUrlResponse CreateAuthClaimUrl(CreateAuthClaimUrlRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateAuthClaimUrlEx(request, headers, runtime);
        }

        /**
         * Description: 获取声明授权链接
         * Summary: 获取声明授权链接
         */
        public async Task<CreateAuthClaimUrlResponse> CreateAuthClaimUrlAsync(CreateAuthClaimUrlRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateAuthClaimUrlExAsync(request, headers, runtime);
        }

        /**
         * Description: 获取声明授权链接
         * Summary: 获取声明授权链接
         */
        public CreateAuthClaimUrlResponse CreateAuthClaimUrlEx(CreateAuthClaimUrlRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateAuthClaimUrlResponse>(DoRequest("1.0", "baas.auth.claim.url.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取声明授权链接
         * Summary: 获取声明授权链接
         */
        public async Task<CreateAuthClaimUrlResponse> CreateAuthClaimUrlExAsync(CreateAuthClaimUrlRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateAuthClaimUrlResponse>(await DoRequestAsync("1.0", "baas.auth.claim.url.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 行驶证核身授权
         * Summary: 授权宝个人信息授权，行驶证核身授权
         */
        public StartAuthVerifyCarinfoResponse StartAuthVerifyCarinfo(StartAuthVerifyCarinfoRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartAuthVerifyCarinfoEx(request, headers, runtime);
        }

        /**
         * Description: 行驶证核身授权
         * Summary: 授权宝个人信息授权，行驶证核身授权
         */
        public async Task<StartAuthVerifyCarinfoResponse> StartAuthVerifyCarinfoAsync(StartAuthVerifyCarinfoRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartAuthVerifyCarinfoExAsync(request, headers, runtime);
        }

        /**
         * Description: 行驶证核身授权
         * Summary: 授权宝个人信息授权，行驶证核身授权
         */
        public StartAuthVerifyCarinfoResponse StartAuthVerifyCarinfoEx(StartAuthVerifyCarinfoRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthVerifyCarinfoResponse>(DoRequest("1.0", "baas.auth.verify.carinfo.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 行驶证核身授权
         * Summary: 授权宝个人信息授权，行驶证核身授权
         */
        public async Task<StartAuthVerifyCarinfoResponse> StartAuthVerifyCarinfoExAsync(StartAuthVerifyCarinfoRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthVerifyCarinfoResponse>(await DoRequestAsync("1.0", "baas.auth.verify.carinfo.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 驾驶证相关信息核验并核身，并且结合授权宝完成授权。
         * Summary: 授权宝个人信息授权，驾驶证核身授权
         */
        public StartAuthVerifyDriverinfoResponse StartAuthVerifyDriverinfo(StartAuthVerifyDriverinfoRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartAuthVerifyDriverinfoEx(request, headers, runtime);
        }

        /**
         * Description: 驾驶证相关信息核验并核身，并且结合授权宝完成授权。
         * Summary: 授权宝个人信息授权，驾驶证核身授权
         */
        public async Task<StartAuthVerifyDriverinfoResponse> StartAuthVerifyDriverinfoAsync(StartAuthVerifyDriverinfoRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartAuthVerifyDriverinfoExAsync(request, headers, runtime);
        }

        /**
         * Description: 驾驶证相关信息核验并核身，并且结合授权宝完成授权。
         * Summary: 授权宝个人信息授权，驾驶证核身授权
         */
        public StartAuthVerifyDriverinfoResponse StartAuthVerifyDriverinfoEx(StartAuthVerifyDriverinfoRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthVerifyDriverinfoResponse>(DoRequest("1.0", "baas.auth.verify.driverinfo.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 驾驶证相关信息核验并核身，并且结合授权宝完成授权。
         * Summary: 授权宝个人信息授权，驾驶证核身授权
         */
        public async Task<StartAuthVerifyDriverinfoResponse> StartAuthVerifyDriverinfoExAsync(StartAuthVerifyDriverinfoRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthVerifyDriverinfoResponse>(await DoRequestAsync("1.0", "baas.auth.verify.driverinfo.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 检查车牌是否进行年检，当前状态，以及年检有效期止。
         * Summary: 车检查询核验，目标车牌年检状态
         */
        public StartAuthVerifyCarinspectResponse StartAuthVerifyCarinspect(StartAuthVerifyCarinspectRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartAuthVerifyCarinspectEx(request, headers, runtime);
        }

        /**
         * Description: 检查车牌是否进行年检，当前状态，以及年检有效期止。
         * Summary: 车检查询核验，目标车牌年检状态
         */
        public async Task<StartAuthVerifyCarinspectResponse> StartAuthVerifyCarinspectAsync(StartAuthVerifyCarinspectRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartAuthVerifyCarinspectExAsync(request, headers, runtime);
        }

        /**
         * Description: 检查车牌是否进行年检，当前状态，以及年检有效期止。
         * Summary: 车检查询核验，目标车牌年检状态
         */
        public StartAuthVerifyCarinspectResponse StartAuthVerifyCarinspectEx(StartAuthVerifyCarinspectRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthVerifyCarinspectResponse>(DoRequest("1.0", "baas.auth.verify.carinspect.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 检查车牌是否进行年检，当前状态，以及年检有效期止。
         * Summary: 车检查询核验，目标车牌年检状态
         */
        public async Task<StartAuthVerifyCarinspectResponse> StartAuthVerifyCarinspectExAsync(StartAuthVerifyCarinspectRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthVerifyCarinspectResponse>(await DoRequestAsync("1.0", "baas.auth.verify.carinspect.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取授权声明模版
         * Summary: 获取授权声明模版
         */
        public GetAuthClaimTemplateResponse GetAuthClaimTemplate(GetAuthClaimTemplateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return GetAuthClaimTemplateEx(request, headers, runtime);
        }

        /**
         * Description: 获取授权声明模版
         * Summary: 获取授权声明模版
         */
        public async Task<GetAuthClaimTemplateResponse> GetAuthClaimTemplateAsync(GetAuthClaimTemplateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await GetAuthClaimTemplateExAsync(request, headers, runtime);
        }

        /**
         * Description: 获取授权声明模版
         * Summary: 获取授权声明模版
         */
        public GetAuthClaimTemplateResponse GetAuthClaimTemplateEx(GetAuthClaimTemplateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetAuthClaimTemplateResponse>(DoRequest("1.0", "baas.auth.claim.template.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取授权声明模版
         * Summary: 获取授权声明模版
         */
        public async Task<GetAuthClaimTemplateResponse> GetAuthClaimTemplateExAsync(GetAuthClaimTemplateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetAuthClaimTemplateResponse>(await DoRequestAsync("1.0", "baas.auth.claim.template.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过claim创建vc
         * Summary: 通过claim创建vc
         */
        public CreateAuthClaimVcResponse CreateAuthClaimVc(CreateAuthClaimVcRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateAuthClaimVcEx(request, headers, runtime);
        }

        /**
         * Description: 通过claim创建vc
         * Summary: 通过claim创建vc
         */
        public async Task<CreateAuthClaimVcResponse> CreateAuthClaimVcAsync(CreateAuthClaimVcRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateAuthClaimVcExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过claim创建vc
         * Summary: 通过claim创建vc
         */
        public CreateAuthClaimVcResponse CreateAuthClaimVcEx(CreateAuthClaimVcRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateAuthClaimVcResponse>(DoRequest("1.0", "baas.auth.claim.vc.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过claim创建vc
         * Summary: 通过claim创建vc
         */
        public async Task<CreateAuthClaimVcResponse> CreateAuthClaimVcExAsync(CreateAuthClaimVcRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateAuthClaimVcResponse>(await DoRequestAsync("1.0", "baas.auth.claim.vc.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询vc详情
         * Summary: 查询vc详情
         */
        public QueryAuthClaimVcResponse QueryAuthClaimVc(QueryAuthClaimVcRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryAuthClaimVcEx(request, headers, runtime);
        }

        /**
         * Description: 查询vc详情
         * Summary: 查询vc详情
         */
        public async Task<QueryAuthClaimVcResponse> QueryAuthClaimVcAsync(QueryAuthClaimVcRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryAuthClaimVcExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询vc详情
         * Summary: 查询vc详情
         */
        public QueryAuthClaimVcResponse QueryAuthClaimVcEx(QueryAuthClaimVcRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthClaimVcResponse>(DoRequest("1.0", "baas.auth.claim.vc.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询vc详情
         * Summary: 查询vc详情
         */
        public async Task<QueryAuthClaimVcResponse> QueryAuthClaimVcExAsync(QueryAuthClaimVcRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthClaimVcResponse>(await DoRequestAsync("1.0", "baas.auth.claim.vc.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 车辆投保日期查询(存量)
         * Summary: 车辆投保日期查询(存量)
         */
        public QueryAuthVehicleinsuranceResponse QueryAuthVehicleinsurance(QueryAuthVehicleinsuranceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryAuthVehicleinsuranceEx(request, headers, runtime);
        }

        /**
         * Description: 车辆投保日期查询(存量)
         * Summary: 车辆投保日期查询(存量)
         */
        public async Task<QueryAuthVehicleinsuranceResponse> QueryAuthVehicleinsuranceAsync(QueryAuthVehicleinsuranceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryAuthVehicleinsuranceExAsync(request, headers, runtime);
        }

        /**
         * Description: 车辆投保日期查询(存量)
         * Summary: 车辆投保日期查询(存量)
         */
        public QueryAuthVehicleinsuranceResponse QueryAuthVehicleinsuranceEx(QueryAuthVehicleinsuranceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthVehicleinsuranceResponse>(DoRequest("1.0", "baas.auth.vehicleinsurance.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 车辆投保日期查询(存量)
         * Summary: 车辆投保日期查询(存量)
         */
        public async Task<QueryAuthVehicleinsuranceResponse> QueryAuthVehicleinsuranceExAsync(QueryAuthVehicleinsuranceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthVehicleinsuranceResponse>(await DoRequestAsync("1.0", "baas.auth.vehicleinsurance.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 车辆投保日期查询(增量)
         * Summary: 车辆投保日期查询(增量)
         */
        public QueryAuthVehicleinsuranceVcResponse QueryAuthVehicleinsuranceVc(QueryAuthVehicleinsuranceVcRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryAuthVehicleinsuranceVcEx(request, headers, runtime);
        }

        /**
         * Description: 车辆投保日期查询(增量)
         * Summary: 车辆投保日期查询(增量)
         */
        public async Task<QueryAuthVehicleinsuranceVcResponse> QueryAuthVehicleinsuranceVcAsync(QueryAuthVehicleinsuranceVcRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryAuthVehicleinsuranceVcExAsync(request, headers, runtime);
        }

        /**
         * Description: 车辆投保日期查询(增量)
         * Summary: 车辆投保日期查询(增量)
         */
        public QueryAuthVehicleinsuranceVcResponse QueryAuthVehicleinsuranceVcEx(QueryAuthVehicleinsuranceVcRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthVehicleinsuranceVcResponse>(DoRequest("1.0", "baas.auth.vehicleinsurance.vc.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 车辆投保日期查询(增量)
         * Summary: 车辆投保日期查询(增量)
         */
        public async Task<QueryAuthVehicleinsuranceVcResponse> QueryAuthVehicleinsuranceVcExAsync(QueryAuthVehicleinsuranceVcRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthVehicleinsuranceVcResponse>(await DoRequestAsync("1.0", "baas.auth.vehicleinsurance.vc.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询在特定业务bizType下的凭证颁发的统计数据，以及按照day维度的分布情况。
         * Summary: 查询目标场景的凭证颁发的统计数据
         */
        public QueryAuthVcStatisticsResponse QueryAuthVcStatistics(QueryAuthVcStatisticsRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryAuthVcStatisticsEx(request, headers, runtime);
        }

        /**
         * Description: 查询在特定业务bizType下的凭证颁发的统计数据，以及按照day维度的分布情况。
         * Summary: 查询目标场景的凭证颁发的统计数据
         */
        public async Task<QueryAuthVcStatisticsResponse> QueryAuthVcStatisticsAsync(QueryAuthVcStatisticsRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryAuthVcStatisticsExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询在特定业务bizType下的凭证颁发的统计数据，以及按照day维度的分布情况。
         * Summary: 查询目标场景的凭证颁发的统计数据
         */
        public QueryAuthVcStatisticsResponse QueryAuthVcStatisticsEx(QueryAuthVcStatisticsRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthVcStatisticsResponse>(DoRequest("1.0", "baas.auth.vc.statistics.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询在特定业务bizType下的凭证颁发的统计数据，以及按照day维度的分布情况。
         * Summary: 查询目标场景的凭证颁发的统计数据
         */
        public async Task<QueryAuthVcStatisticsResponse> QueryAuthVcStatisticsExAsync(QueryAuthVcStatisticsRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthVcStatisticsResponse>(await DoRequestAsync("1.0", "baas.auth.vc.statistics.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询目标业务凭证的实时颁发的情况，返回一个列表。
         * Summary: 查询目标业务凭证颁发的实时列表情况
         */
        public QueryAuthVcRealtimeResponse QueryAuthVcRealtime(QueryAuthVcRealtimeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryAuthVcRealtimeEx(request, headers, runtime);
        }

        /**
         * Description: 查询目标业务凭证的实时颁发的情况，返回一个列表。
         * Summary: 查询目标业务凭证颁发的实时列表情况
         */
        public async Task<QueryAuthVcRealtimeResponse> QueryAuthVcRealtimeAsync(QueryAuthVcRealtimeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryAuthVcRealtimeExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询目标业务凭证的实时颁发的情况，返回一个列表。
         * Summary: 查询目标业务凭证颁发的实时列表情况
         */
        public QueryAuthVcRealtimeResponse QueryAuthVcRealtimeEx(QueryAuthVcRealtimeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthVcRealtimeResponse>(DoRequest("1.0", "baas.auth.vc.realtime.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询目标业务凭证的实时颁发的情况，返回一个列表。
         * Summary: 查询目标业务凭证颁发的实时列表情况
         */
        public async Task<QueryAuthVcRealtimeResponse> QueryAuthVcRealtimeExAsync(QueryAuthVcRealtimeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthVcRealtimeResponse>(await DoRequestAsync("1.0", "baas.auth.vc.realtime.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 在机构颁发凭证的情况下，机构的可信度和状态会影响颁发的凭证的有效性和影响，因此提供接口查询机构状态。
         * Summary: 特定场景下使用，查询机构状态
         */
        public QueryAuthOrgStatusResponse QueryAuthOrgStatus(QueryAuthOrgStatusRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryAuthOrgStatusEx(request, headers, runtime);
        }

        /**
         * Description: 在机构颁发凭证的情况下，机构的可信度和状态会影响颁发的凭证的有效性和影响，因此提供接口查询机构状态。
         * Summary: 特定场景下使用，查询机构状态
         */
        public async Task<QueryAuthOrgStatusResponse> QueryAuthOrgStatusAsync(QueryAuthOrgStatusRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryAuthOrgStatusExAsync(request, headers, runtime);
        }

        /**
         * Description: 在机构颁发凭证的情况下，机构的可信度和状态会影响颁发的凭证的有效性和影响，因此提供接口查询机构状态。
         * Summary: 特定场景下使用，查询机构状态
         */
        public QueryAuthOrgStatusResponse QueryAuthOrgStatusEx(QueryAuthOrgStatusRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthOrgStatusResponse>(DoRequest("1.0", "baas.auth.org.status.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 在机构颁发凭证的情况下，机构的可信度和状态会影响颁发的凭证的有效性和影响，因此提供接口查询机构状态。
         * Summary: 特定场景下使用，查询机构状态
         */
        public async Task<QueryAuthOrgStatusResponse> QueryAuthOrgStatusExAsync(QueryAuthOrgStatusRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthOrgStatusResponse>(await DoRequestAsync("1.0", "baas.auth.org.status.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 预充值交易通过身份的凭证封装的方式在区块链上资产化。
         * Summary: 交易资产的归属
         */
        public StartAuthAssetIssueResponse StartAuthAssetIssue(StartAuthAssetIssueRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartAuthAssetIssueEx(request, headers, runtime);
        }

        /**
         * Description: 预充值交易通过身份的凭证封装的方式在区块链上资产化。
         * Summary: 交易资产的归属
         */
        public async Task<StartAuthAssetIssueResponse> StartAuthAssetIssueAsync(StartAuthAssetIssueRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartAuthAssetIssueExAsync(request, headers, runtime);
        }

        /**
         * Description: 预充值交易通过身份的凭证封装的方式在区块链上资产化。
         * Summary: 交易资产的归属
         */
        public StartAuthAssetIssueResponse StartAuthAssetIssueEx(StartAuthAssetIssueRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthAssetIssueResponse>(DoRequest("1.0", "baas.auth.asset.issue.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 预充值交易通过身份的凭证封装的方式在区块链上资产化。
         * Summary: 交易资产的归属
         */
        public async Task<StartAuthAssetIssueResponse> StartAuthAssetIssueExAsync(StartAuthAssetIssueRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthAssetIssueResponse>(await DoRequestAsync("1.0", "baas.auth.asset.issue.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询卡证模板的列表
         * Summary: 查询模板列表
         */
        public AllAuthCertTemplateResponse AllAuthCertTemplate(AllAuthCertTemplateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return AllAuthCertTemplateEx(request, headers, runtime);
        }

        /**
         * Description: 查询卡证模板的列表
         * Summary: 查询模板列表
         */
        public async Task<AllAuthCertTemplateResponse> AllAuthCertTemplateAsync(AllAuthCertTemplateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await AllAuthCertTemplateExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询卡证模板的列表
         * Summary: 查询模板列表
         */
        public AllAuthCertTemplateResponse AllAuthCertTemplateEx(AllAuthCertTemplateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<AllAuthCertTemplateResponse>(DoRequest("1.0", "baas.auth.cert.template.all", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询卡证模板的列表
         * Summary: 查询模板列表
         */
        public async Task<AllAuthCertTemplateResponse> AllAuthCertTemplateExAsync(AllAuthCertTemplateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<AllAuthCertTemplateResponse>(await DoRequestAsync("1.0", "baas.auth.cert.template.all", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 为客权业务定制化的编辑或新增证书实例，可以绕过审批流程
         * Summary: 编辑或新增证书实例
         */
        public SaveAuthCertInstanceforcustomResponse SaveAuthCertInstanceforcustom(SaveAuthCertInstanceforcustomRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SaveAuthCertInstanceforcustomEx(request, headers, runtime);
        }

        /**
         * Description: 为客权业务定制化的编辑或新增证书实例，可以绕过审批流程
         * Summary: 编辑或新增证书实例
         */
        public async Task<SaveAuthCertInstanceforcustomResponse> SaveAuthCertInstanceforcustomAsync(SaveAuthCertInstanceforcustomRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SaveAuthCertInstanceforcustomExAsync(request, headers, runtime);
        }

        /**
         * Description: 为客权业务定制化的编辑或新增证书实例，可以绕过审批流程
         * Summary: 编辑或新增证书实例
         */
        public SaveAuthCertInstanceforcustomResponse SaveAuthCertInstanceforcustomEx(SaveAuthCertInstanceforcustomRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SaveAuthCertInstanceforcustomResponse>(DoRequest("1.0", "baas.auth.cert.instanceforcustom.save", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 为客权业务定制化的编辑或新增证书实例，可以绕过审批流程
         * Summary: 编辑或新增证书实例
         */
        public async Task<SaveAuthCertInstanceforcustomResponse> SaveAuthCertInstanceforcustomExAsync(SaveAuthCertInstanceforcustomRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SaveAuthCertInstanceforcustomResponse>(await DoRequestAsync("1.0", "baas.auth.cert.instanceforcustom.save", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过上传的领取人明细文件，为证书实例批量颁发证书
         * Summary: 批量颁发证书
         */
        public BatchcreateAuthCertResponse BatchcreateAuthCert(BatchcreateAuthCertRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return BatchcreateAuthCertEx(request, headers, runtime);
        }

        /**
         * Description: 通过上传的领取人明细文件，为证书实例批量颁发证书
         * Summary: 批量颁发证书
         */
        public async Task<BatchcreateAuthCertResponse> BatchcreateAuthCertAsync(BatchcreateAuthCertRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await BatchcreateAuthCertExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过上传的领取人明细文件，为证书实例批量颁发证书
         * Summary: 批量颁发证书
         */
        public BatchcreateAuthCertResponse BatchcreateAuthCertEx(BatchcreateAuthCertRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BatchcreateAuthCertResponse>(DoRequest("1.0", "baas.auth.cert.batchcreate", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过上传的领取人明细文件，为证书实例批量颁发证书
         * Summary: 批量颁发证书
         */
        public async Task<BatchcreateAuthCertResponse> BatchcreateAuthCertExAsync(BatchcreateAuthCertRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BatchcreateAuthCertResponse>(await DoRequestAsync("1.0", "baas.auth.cert.batchcreate", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 单个颁发证书
         * Summary: 颁发证书
         */
        public CreateAuthCertResponse CreateAuthCert(CreateAuthCertRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateAuthCertEx(request, headers, runtime);
        }

        /**
         * Description: 单个颁发证书
         * Summary: 颁发证书
         */
        public async Task<CreateAuthCertResponse> CreateAuthCertAsync(CreateAuthCertRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateAuthCertExAsync(request, headers, runtime);
        }

        /**
         * Description: 单个颁发证书
         * Summary: 颁发证书
         */
        public CreateAuthCertResponse CreateAuthCertEx(CreateAuthCertRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateAuthCertResponse>(DoRequest("1.0", "baas.auth.cert.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 单个颁发证书
         * Summary: 颁发证书
         */
        public async Task<CreateAuthCertResponse> CreateAuthCertExAsync(CreateAuthCertRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateAuthCertResponse>(await DoRequestAsync("1.0", "baas.auth.cert.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 吊销已经颁发的证书
         * Summary: 吊销证书
         */
        public InvalidateAuthCertResponse InvalidateAuthCert(InvalidateAuthCertRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return InvalidateAuthCertEx(request, headers, runtime);
        }

        /**
         * Description: 吊销已经颁发的证书
         * Summary: 吊销证书
         */
        public async Task<InvalidateAuthCertResponse> InvalidateAuthCertAsync(InvalidateAuthCertRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await InvalidateAuthCertExAsync(request, headers, runtime);
        }

        /**
         * Description: 吊销已经颁发的证书
         * Summary: 吊销证书
         */
        public InvalidateAuthCertResponse InvalidateAuthCertEx(InvalidateAuthCertRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InvalidateAuthCertResponse>(DoRequest("1.0", "baas.auth.cert.invalidate", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 吊销已经颁发的证书
         * Summary: 吊销证书
         */
        public async Task<InvalidateAuthCertResponse> InvalidateAuthCertExAsync(InvalidateAuthCertRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InvalidateAuthCertResponse>(await DoRequestAsync("1.0", "baas.auth.cert.invalidate", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询批量颁发证书的进度详情
         * Summary: 查询批量颁发证书的进度
         */
        public QueryAuthCertProgressResponse QueryAuthCertProgress(QueryAuthCertProgressRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryAuthCertProgressEx(request, headers, runtime);
        }

        /**
         * Description: 查询批量颁发证书的进度详情
         * Summary: 查询批量颁发证书的进度
         */
        public async Task<QueryAuthCertProgressResponse> QueryAuthCertProgressAsync(QueryAuthCertProgressRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryAuthCertProgressExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询批量颁发证书的进度详情
         * Summary: 查询批量颁发证书的进度
         */
        public QueryAuthCertProgressResponse QueryAuthCertProgressEx(QueryAuthCertProgressRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthCertProgressResponse>(DoRequest("1.0", "baas.auth.cert.progress.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询批量颁发证书的进度详情
         * Summary: 查询批量颁发证书的进度
         */
        public async Task<QueryAuthCertProgressResponse> QueryAuthCertProgressExAsync(QueryAuthCertProgressRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthCertProgressResponse>(await DoRequestAsync("1.0", "baas.auth.cert.progress.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 上传需要批量颁发的证书领取人明细csv文件到oss服务器，并返回文件的路径
         * Summary: 上传领取人明细csv文件
         */
        public UploadAuthCertInstanceResponse UploadAuthCertInstance(UploadAuthCertInstanceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UploadAuthCertInstanceEx(request, headers, runtime);
        }

        /**
         * Description: 上传需要批量颁发的证书领取人明细csv文件到oss服务器，并返回文件的路径
         * Summary: 上传领取人明细csv文件
         */
        public async Task<UploadAuthCertInstanceResponse> UploadAuthCertInstanceAsync(UploadAuthCertInstanceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UploadAuthCertInstanceExAsync(request, headers, runtime);
        }

        /**
         * Description: 上传需要批量颁发的证书领取人明细csv文件到oss服务器，并返回文件的路径
         * Summary: 上传领取人明细csv文件
         */
        public UploadAuthCertInstanceResponse UploadAuthCertInstanceEx(UploadAuthCertInstanceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            if (!AlibabaCloud.TeaUtil.Common.IsUnset(request.FileObject))
            {
                CreateAntcloudGatewayxFileUploadRequest uploadReq = new CreateAntcloudGatewayxFileUploadRequest
                {
                    AuthToken = request.AuthToken,
                    ApiCode = "baas.auth.cert.instance.upload",
                    FileName = request.FileObjectName,
                };
                CreateAntcloudGatewayxFileUploadResponse uploadResp = CreateAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
                if (!AntChain.AlipayUtil.AntchainUtils.IsSuccess(uploadResp.ResultCode, "ok"))
                {
                    UploadAuthCertInstanceResponse uploadAuthCertInstanceResponse = new UploadAuthCertInstanceResponse
                    {
                        ReqMsgId = uploadResp.ReqMsgId,
                        ResultCode = uploadResp.ResultCode,
                        ResultMsg = uploadResp.ResultMsg,
                    };
                    return uploadAuthCertInstanceResponse;
                }
                Dictionary<string, string> uploadHeaders = AntChain.AlipayUtil.AntchainUtils.ParseUploadHeaders(uploadResp.UploadHeaders);
                AntChain.AlipayUtil.AntchainUtils.PutObject(request.FileObject, uploadHeaders, uploadResp.UploadUrl);
                request.FileId = uploadResp.FileId;
                request.FileObject = null;
            }
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UploadAuthCertInstanceResponse>(DoRequest("1.0", "baas.auth.cert.instance.upload", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 上传需要批量颁发的证书领取人明细csv文件到oss服务器，并返回文件的路径
         * Summary: 上传领取人明细csv文件
         */
        public async Task<UploadAuthCertInstanceResponse> UploadAuthCertInstanceExAsync(UploadAuthCertInstanceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            if (!AlibabaCloud.TeaUtil.Common.IsUnset(request.FileObject))
            {
                CreateAntcloudGatewayxFileUploadRequest uploadReq = new CreateAntcloudGatewayxFileUploadRequest
                {
                    AuthToken = request.AuthToken,
                    ApiCode = "baas.auth.cert.instance.upload",
                    FileName = request.FileObjectName,
                };
                CreateAntcloudGatewayxFileUploadResponse uploadResp = await CreateAntcloudGatewayxFileUploadExAsync(uploadReq, headers, runtime);
                if (!AntChain.AlipayUtil.AntchainUtils.IsSuccess(uploadResp.ResultCode, "ok"))
                {
                    UploadAuthCertInstanceResponse uploadAuthCertInstanceResponse = new UploadAuthCertInstanceResponse
                    {
                        ReqMsgId = uploadResp.ReqMsgId,
                        ResultCode = uploadResp.ResultCode,
                        ResultMsg = uploadResp.ResultMsg,
                    };
                    return uploadAuthCertInstanceResponse;
                }
                Dictionary<string, string> uploadHeaders = AntChain.AlipayUtil.AntchainUtils.ParseUploadHeaders(uploadResp.UploadHeaders);
                AntChain.AlipayUtil.AntchainUtils.PutObject(request.FileObject, uploadHeaders, uploadResp.UploadUrl);
                request.FileId = uploadResp.FileId;
                request.FileObject = null;
            }
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UploadAuthCertInstanceResponse>(await DoRequestAsync("1.0", "baas.auth.cert.instance.upload", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description:  编辑或新增证书实例
         * Summary:  编辑或新增证书实例
         */
        public SaveAuthCertInstanceResponse SaveAuthCertInstance(SaveAuthCertInstanceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SaveAuthCertInstanceEx(request, headers, runtime);
        }

        /**
         * Description:  编辑或新增证书实例
         * Summary:  编辑或新增证书实例
         */
        public async Task<SaveAuthCertInstanceResponse> SaveAuthCertInstanceAsync(SaveAuthCertInstanceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SaveAuthCertInstanceExAsync(request, headers, runtime);
        }

        /**
         * Description:  编辑或新增证书实例
         * Summary:  编辑或新增证书实例
         */
        public SaveAuthCertInstanceResponse SaveAuthCertInstanceEx(SaveAuthCertInstanceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SaveAuthCertInstanceResponse>(DoRequest("1.0", "baas.auth.cert.instance.save", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description:  编辑或新增证书实例
         * Summary:  编辑或新增证书实例
         */
        public async Task<SaveAuthCertInstanceResponse> SaveAuthCertInstanceExAsync(SaveAuthCertInstanceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SaveAuthCertInstanceResponse>(await DoRequestAsync("1.0", "baas.auth.cert.instance.save", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 状态为编辑中的证书实例，调用此接口提交审核
         * Summary: 证书实例提交审核
         */
        public ApplyAuthCertInstanceResponse ApplyAuthCertInstance(ApplyAuthCertInstanceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ApplyAuthCertInstanceEx(request, headers, runtime);
        }

        /**
         * Description: 状态为编辑中的证书实例，调用此接口提交审核
         * Summary: 证书实例提交审核
         */
        public async Task<ApplyAuthCertInstanceResponse> ApplyAuthCertInstanceAsync(ApplyAuthCertInstanceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ApplyAuthCertInstanceExAsync(request, headers, runtime);
        }

        /**
         * Description: 状态为编辑中的证书实例，调用此接口提交审核
         * Summary: 证书实例提交审核
         */
        public ApplyAuthCertInstanceResponse ApplyAuthCertInstanceEx(ApplyAuthCertInstanceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyAuthCertInstanceResponse>(DoRequest("1.0", "baas.auth.cert.instance.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 状态为编辑中的证书实例，调用此接口提交审核
         * Summary: 证书实例提交审核
         */
        public async Task<ApplyAuthCertInstanceResponse> ApplyAuthCertInstanceExAsync(ApplyAuthCertInstanceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyAuthCertInstanceResponse>(await DoRequestAsync("1.0", "baas.auth.cert.instance.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 向证书平台申请一个oss临时url，用来上传证书领取人csv文件，有效期30分钟
         * Summary: 获取证书领取人csv上传url
         */
        public GetAuthCertInstancedataurlResponse GetAuthCertInstancedataurl(GetAuthCertInstancedataurlRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return GetAuthCertInstancedataurlEx(request, headers, runtime);
        }

        /**
         * Description: 向证书平台申请一个oss临时url，用来上传证书领取人csv文件，有效期30分钟
         * Summary: 获取证书领取人csv上传url
         */
        public async Task<GetAuthCertInstancedataurlResponse> GetAuthCertInstancedataurlAsync(GetAuthCertInstancedataurlRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await GetAuthCertInstancedataurlExAsync(request, headers, runtime);
        }

        /**
         * Description: 向证书平台申请一个oss临时url，用来上传证书领取人csv文件，有效期30分钟
         * Summary: 获取证书领取人csv上传url
         */
        public GetAuthCertInstancedataurlResponse GetAuthCertInstancedataurlEx(GetAuthCertInstancedataurlRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetAuthCertInstancedataurlResponse>(DoRequest("1.0", "baas.auth.cert.instancedataurl.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 向证书平台申请一个oss临时url，用来上传证书领取人csv文件，有效期30分钟
         * Summary: 获取证书领取人csv上传url
         */
        public async Task<GetAuthCertInstancedataurlResponse> GetAuthCertInstancedataurlExAsync(GetAuthCertInstancedataurlRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetAuthCertInstancedataurlResponse>(await DoRequestAsync("1.0", "baas.auth.cert.instancedataurl.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 证书平台创建自定义存证
         * Summary: 证书平台创建存证
         */
        public CreateAuthCertClaimResponse CreateAuthCertClaim(CreateAuthCertClaimRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateAuthCertClaimEx(request, headers, runtime);
        }

        /**
         * Description: 证书平台创建自定义存证
         * Summary: 证书平台创建存证
         */
        public async Task<CreateAuthCertClaimResponse> CreateAuthCertClaimAsync(CreateAuthCertClaimRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateAuthCertClaimExAsync(request, headers, runtime);
        }

        /**
         * Description: 证书平台创建自定义存证
         * Summary: 证书平台创建存证
         */
        public CreateAuthCertClaimResponse CreateAuthCertClaimEx(CreateAuthCertClaimRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateAuthCertClaimResponse>(DoRequest("1.0", "baas.auth.cert.claim.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 证书平台创建自定义存证
         * Summary: 证书平台创建存证
         */
        public async Task<CreateAuthCertClaimResponse> CreateAuthCertClaimExAsync(CreateAuthCertClaimRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateAuthCertClaimResponse>(await DoRequestAsync("1.0", "baas.auth.cert.claim.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 证书平台查询用户自定义存证
         * Summary: 证书平台查询用户自定义存证
         */
        public QueryAuthCertClaimResponse QueryAuthCertClaim(QueryAuthCertClaimRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryAuthCertClaimEx(request, headers, runtime);
        }

        /**
         * Description: 证书平台查询用户自定义存证
         * Summary: 证书平台查询用户自定义存证
         */
        public async Task<QueryAuthCertClaimResponse> QueryAuthCertClaimAsync(QueryAuthCertClaimRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryAuthCertClaimExAsync(request, headers, runtime);
        }

        /**
         * Description: 证书平台查询用户自定义存证
         * Summary: 证书平台查询用户自定义存证
         */
        public QueryAuthCertClaimResponse QueryAuthCertClaimEx(QueryAuthCertClaimRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthCertClaimResponse>(DoRequest("1.0", "baas.auth.cert.claim.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 证书平台查询用户自定义存证
         * Summary: 证书平台查询用户自定义存证
         */
        public async Task<QueryAuthCertClaimResponse> QueryAuthCertClaimExAsync(QueryAuthCertClaimRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthCertClaimResponse>(await DoRequestAsync("1.0", "baas.auth.cert.claim.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 生成查验证书存证的url
         * Summary: 生成查验证书存证的url
         */
        public CreateAuthCertClaimurlResponse CreateAuthCertClaimurl(CreateAuthCertClaimurlRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateAuthCertClaimurlEx(request, headers, runtime);
        }

        /**
         * Description: 生成查验证书存证的url
         * Summary: 生成查验证书存证的url
         */
        public async Task<CreateAuthCertClaimurlResponse> CreateAuthCertClaimurlAsync(CreateAuthCertClaimurlRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateAuthCertClaimurlExAsync(request, headers, runtime);
        }

        /**
         * Description: 生成查验证书存证的url
         * Summary: 生成查验证书存证的url
         */
        public CreateAuthCertClaimurlResponse CreateAuthCertClaimurlEx(CreateAuthCertClaimurlRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateAuthCertClaimurlResponse>(DoRequest("1.0", "baas.auth.cert.claimurl.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 生成查验证书存证的url
         * Summary: 生成查验证书存证的url
         */
        public async Task<CreateAuthCertClaimurlResponse> CreateAuthCertClaimurlExAsync(CreateAuthCertClaimurlRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateAuthCertClaimurlResponse>(await DoRequestAsync("1.0", "baas.auth.cert.claimurl.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取用户已授权的最近存证信息，在理财风测卡场景获取最近的题目答案
         * Summary: 获取用户已授权的最近存证信息
         */
        public GetAuthClaimRecentResponse GetAuthClaimRecent(GetAuthClaimRecentRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return GetAuthClaimRecentEx(request, headers, runtime);
        }

        /**
         * Description: 获取用户已授权的最近存证信息，在理财风测卡场景获取最近的题目答案
         * Summary: 获取用户已授权的最近存证信息
         */
        public async Task<GetAuthClaimRecentResponse> GetAuthClaimRecentAsync(GetAuthClaimRecentRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await GetAuthClaimRecentExAsync(request, headers, runtime);
        }

        /**
         * Description: 获取用户已授权的最近存证信息，在理财风测卡场景获取最近的题目答案
         * Summary: 获取用户已授权的最近存证信息
         */
        public GetAuthClaimRecentResponse GetAuthClaimRecentEx(GetAuthClaimRecentRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetAuthClaimRecentResponse>(DoRequest("1.0", "baas.auth.claim.recent.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取用户已授权的最近存证信息，在理财风测卡场景获取最近的题目答案
         * Summary: 获取用户已授权的最近存证信息
         */
        public async Task<GetAuthClaimRecentResponse> GetAuthClaimRecentExAsync(GetAuthClaimRecentRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetAuthClaimRecentResponse>(await DoRequestAsync("1.0", "baas.auth.claim.recent.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 新的：baas.auth.contract.claim.exec
         * Summary: 合约调用_废弃
         */
        public ExecAuthContractResponse ExecAuthContract(ExecAuthContractRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ExecAuthContractEx(request, headers, runtime);
        }

        /**
         * Description: 新的：baas.auth.contract.claim.exec
         * Summary: 合约调用_废弃
         */
        public async Task<ExecAuthContractResponse> ExecAuthContractAsync(ExecAuthContractRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ExecAuthContractExAsync(request, headers, runtime);
        }

        /**
         * Description: 新的：baas.auth.contract.claim.exec
         * Summary: 合约调用_废弃
         */
        public ExecAuthContractResponse ExecAuthContractEx(ExecAuthContractRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecAuthContractResponse>(DoRequest("1.0", "baas.auth.contract.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 新的：baas.auth.contract.claim.exec
         * Summary: 合约调用_废弃
         */
        public async Task<ExecAuthContractResponse> ExecAuthContractExAsync(ExecAuthContractRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecAuthContractResponse>(await DoRequestAsync("1.0", "baas.auth.contract.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查看用户对于某一场景的授权状态
         * Summary: 查看用户授权状态
         */
        public QueryAuthSceneAuthstatusResponse QueryAuthSceneAuthstatus(QueryAuthSceneAuthstatusRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryAuthSceneAuthstatusEx(request, headers, runtime);
        }

        /**
         * Description: 查看用户对于某一场景的授权状态
         * Summary: 查看用户授权状态
         */
        public async Task<QueryAuthSceneAuthstatusResponse> QueryAuthSceneAuthstatusAsync(QueryAuthSceneAuthstatusRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryAuthSceneAuthstatusExAsync(request, headers, runtime);
        }

        /**
         * Description: 查看用户对于某一场景的授权状态
         * Summary: 查看用户授权状态
         */
        public QueryAuthSceneAuthstatusResponse QueryAuthSceneAuthstatusEx(QueryAuthSceneAuthstatusRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthSceneAuthstatusResponse>(DoRequest("1.0", "baas.auth.scene.authstatus.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查看用户对于某一场景的授权状态
         * Summary: 查看用户授权状态
         */
        public async Task<QueryAuthSceneAuthstatusResponse> QueryAuthSceneAuthstatusExAsync(QueryAuthSceneAuthstatusRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthSceneAuthstatusResponse>(await DoRequestAsync("1.0", "baas.auth.scene.authstatus.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 使用调用方did注册的vc channel链上账户调用指定合约
         * Summary: 合约调用
         */
        public ExecAuthContractClaimResponse ExecAuthContractClaim(ExecAuthContractClaimRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ExecAuthContractClaimEx(request, headers, runtime);
        }

        /**
         * Description: 使用调用方did注册的vc channel链上账户调用指定合约
         * Summary: 合约调用
         */
        public async Task<ExecAuthContractClaimResponse> ExecAuthContractClaimAsync(ExecAuthContractClaimRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ExecAuthContractClaimExAsync(request, headers, runtime);
        }

        /**
         * Description: 使用调用方did注册的vc channel链上账户调用指定合约
         * Summary: 合约调用
         */
        public ExecAuthContractClaimResponse ExecAuthContractClaimEx(ExecAuthContractClaimRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecAuthContractClaimResponse>(DoRequest("1.0", "baas.auth.contract.claim.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 使用调用方did注册的vc channel链上账户调用指定合约
         * Summary: 合约调用
         */
        public async Task<ExecAuthContractClaimResponse> ExecAuthContractClaimExAsync(ExecAuthContractClaimRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecAuthContractClaimResponse>(await DoRequestAsync("1.0", "baas.auth.contract.claim.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: B类用户获取证书查验页面二维码的url
         * Summary: 获取证书查验页面二维码的url
         */
        public CreateAuthCertDetailpageurlResponse CreateAuthCertDetailpageurl(CreateAuthCertDetailpageurlRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateAuthCertDetailpageurlEx(request, headers, runtime);
        }

        /**
         * Description: B类用户获取证书查验页面二维码的url
         * Summary: 获取证书查验页面二维码的url
         */
        public async Task<CreateAuthCertDetailpageurlResponse> CreateAuthCertDetailpageurlAsync(CreateAuthCertDetailpageurlRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateAuthCertDetailpageurlExAsync(request, headers, runtime);
        }

        /**
         * Description: B类用户获取证书查验页面二维码的url
         * Summary: 获取证书查验页面二维码的url
         */
        public CreateAuthCertDetailpageurlResponse CreateAuthCertDetailpageurlEx(CreateAuthCertDetailpageurlRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateAuthCertDetailpageurlResponse>(DoRequest("1.0", "baas.auth.cert.detailpageurl.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: B类用户获取证书查验页面二维码的url
         * Summary: 获取证书查验页面二维码的url
         */
        public async Task<CreateAuthCertDetailpageurlResponse> CreateAuthCertDetailpageurlExAsync(CreateAuthCertDetailpageurlRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateAuthCertDetailpageurlResponse>(await DoRequestAsync("1.0", "baas.auth.cert.detailpageurl.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户合约签约接口
         * Summary: 用户合约签约
         */
        public SignAuthAgreementUserResponse SignAuthAgreementUser(SignAuthAgreementUserRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SignAuthAgreementUserEx(request, headers, runtime);
        }

        /**
         * Description: 用户合约签约接口
         * Summary: 用户合约签约
         */
        public async Task<SignAuthAgreementUserResponse> SignAuthAgreementUserAsync(SignAuthAgreementUserRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SignAuthAgreementUserExAsync(request, headers, runtime);
        }

        /**
         * Description: 用户合约签约接口
         * Summary: 用户合约签约
         */
        public SignAuthAgreementUserResponse SignAuthAgreementUserEx(SignAuthAgreementUserRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SignAuthAgreementUserResponse>(DoRequest("1.0", "baas.auth.agreement.user.sign", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户合约签约接口
         * Summary: 用户合约签约
         */
        public async Task<SignAuthAgreementUserResponse> SignAuthAgreementUserExAsync(SignAuthAgreementUserRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SignAuthAgreementUserResponse>(await DoRequestAsync("1.0", "baas.auth.agreement.user.sign", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 给指定用户发放POAP徽章
         * Summary: 给指定用户发放POAP徽章
         */
        public BindAuthPoapResponse BindAuthPoap(BindAuthPoapRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return BindAuthPoapEx(request, headers, runtime);
        }

        /**
         * Description: 给指定用户发放POAP徽章
         * Summary: 给指定用户发放POAP徽章
         */
        public async Task<BindAuthPoapResponse> BindAuthPoapAsync(BindAuthPoapRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await BindAuthPoapExAsync(request, headers, runtime);
        }

        /**
         * Description: 给指定用户发放POAP徽章
         * Summary: 给指定用户发放POAP徽章
         */
        public BindAuthPoapResponse BindAuthPoapEx(BindAuthPoapRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BindAuthPoapResponse>(DoRequest("1.0", "baas.auth.poap.bind", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 给指定用户发放POAP徽章
         * Summary: 给指定用户发放POAP徽章
         */
        public async Task<BindAuthPoapResponse> BindAuthPoapExAsync(BindAuthPoapRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BindAuthPoapResponse>(await DoRequestAsync("1.0", "baas.auth.poap.bind", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 根据ID查询POAP徽章详情
         * Summary: 查询POAP徽章详情
         */
        public QueryAuthPoapResponse QueryAuthPoap(QueryAuthPoapRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryAuthPoapEx(request, headers, runtime);
        }

        /**
         * Description: 根据ID查询POAP徽章详情
         * Summary: 查询POAP徽章详情
         */
        public async Task<QueryAuthPoapResponse> QueryAuthPoapAsync(QueryAuthPoapRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryAuthPoapExAsync(request, headers, runtime);
        }

        /**
         * Description: 根据ID查询POAP徽章详情
         * Summary: 查询POAP徽章详情
         */
        public QueryAuthPoapResponse QueryAuthPoapEx(QueryAuthPoapRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthPoapResponse>(DoRequest("1.0", "baas.auth.poap.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 根据ID查询POAP徽章详情
         * Summary: 查询POAP徽章详情
         */
        public async Task<QueryAuthPoapResponse> QueryAuthPoapExAsync(QueryAuthPoapRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthPoapResponse>(await DoRequestAsync("1.0", "baas.auth.poap.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 授权宝数据授权流程，需要请求方先进行请求记录。
         * Summary: 开启数据授权流程，首先记录授权请求
         */
        public StartAuthDataResponse StartAuthData(StartAuthDataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartAuthDataEx(request, headers, runtime);
        }

        /**
         * Description: 授权宝数据授权流程，需要请求方先进行请求记录。
         * Summary: 开启数据授权流程，首先记录授权请求
         */
        public async Task<StartAuthDataResponse> StartAuthDataAsync(StartAuthDataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartAuthDataExAsync(request, headers, runtime);
        }

        /**
         * Description: 授权宝数据授权流程，需要请求方先进行请求记录。
         * Summary: 开启数据授权流程，首先记录授权请求
         */
        public StartAuthDataResponse StartAuthDataEx(StartAuthDataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthDataResponse>(DoRequest("1.0", "baas.auth.data.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 授权宝数据授权流程，需要请求方先进行请求记录。
         * Summary: 开启数据授权流程，首先记录授权请求
         */
        public async Task<StartAuthDataResponse> StartAuthDataExAsync(StartAuthDataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartAuthDataResponse>(await DoRequestAsync("1.0", "baas.auth.data.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 授权宝数据授权流程，调用方经过授权之后请求数据
         * Summary: 请求授权的数据，加密传输
         */
        public GetAuthDataResponse GetAuthData(GetAuthDataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return GetAuthDataEx(request, headers, runtime);
        }

        /**
         * Description: 授权宝数据授权流程，调用方经过授权之后请求数据
         * Summary: 请求授权的数据，加密传输
         */
        public async Task<GetAuthDataResponse> GetAuthDataAsync(GetAuthDataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await GetAuthDataExAsync(request, headers, runtime);
        }

        /**
         * Description: 授权宝数据授权流程，调用方经过授权之后请求数据
         * Summary: 请求授权的数据，加密传输
         */
        public GetAuthDataResponse GetAuthDataEx(GetAuthDataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetAuthDataResponse>(DoRequest("1.0", "baas.auth.data.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 授权宝数据授权流程，调用方经过授权之后请求数据
         * Summary: 请求授权的数据，加密传输
         */
        public async Task<GetAuthDataResponse> GetAuthDataExAsync(GetAuthDataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetAuthDataResponse>(await DoRequestAsync("1.0", "baas.auth.data.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询核身结果
         * Summary: 查询核身结果
         */
        public QueryAuthIdentityauthResponse QueryAuthIdentityauth(QueryAuthIdentityauthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryAuthIdentityauthEx(request, headers, runtime);
        }

        /**
         * Description: 查询核身结果
         * Summary: 查询核身结果
         */
        public async Task<QueryAuthIdentityauthResponse> QueryAuthIdentityauthAsync(QueryAuthIdentityauthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryAuthIdentityauthExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询核身结果
         * Summary: 查询核身结果
         */
        public QueryAuthIdentityauthResponse QueryAuthIdentityauthEx(QueryAuthIdentityauthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthIdentityauthResponse>(DoRequest("1.0", "baas.auth.identityauth.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询核身结果
         * Summary: 查询核身结果
         */
        public async Task<QueryAuthIdentityauthResponse> QueryAuthIdentityauthExAsync(QueryAuthIdentityauthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthIdentityauthResponse>(await DoRequestAsync("1.0", "baas.auth.identityauth.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询证书的详情h5链接
         * Summary: 查询证书的详情h5链接
         */
        public QueryAuthCertDetailurlResponse QueryAuthCertDetailurl(QueryAuthCertDetailurlRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryAuthCertDetailurlEx(request, headers, runtime);
        }

        /**
         * Description: 查询证书的详情h5链接
         * Summary: 查询证书的详情h5链接
         */
        public async Task<QueryAuthCertDetailurlResponse> QueryAuthCertDetailurlAsync(QueryAuthCertDetailurlRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryAuthCertDetailurlExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询证书的详情h5链接
         * Summary: 查询证书的详情h5链接
         */
        public QueryAuthCertDetailurlResponse QueryAuthCertDetailurlEx(QueryAuthCertDetailurlRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthCertDetailurlResponse>(DoRequest("1.0", "baas.auth.cert.detailurl.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询证书的详情h5链接
         * Summary: 查询证书的详情h5链接
         */
        public async Task<QueryAuthCertDetailurlResponse> QueryAuthCertDetailurlExAsync(QueryAuthCertDetailurlRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthCertDetailurlResponse>(await DoRequestAsync("1.0", "baas.auth.cert.detailurl.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 主站应用同步授权宝权益任务的完成情况
         * Summary: 主站应用同步授权宝权益任务的完成情况
         */
        public NotifyAuthTaskStatusResponse NotifyAuthTaskStatus(NotifyAuthTaskStatusRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return NotifyAuthTaskStatusEx(request, headers, runtime);
        }

        /**
         * Description: 主站应用同步授权宝权益任务的完成情况
         * Summary: 主站应用同步授权宝权益任务的完成情况
         */
        public async Task<NotifyAuthTaskStatusResponse> NotifyAuthTaskStatusAsync(NotifyAuthTaskStatusRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await NotifyAuthTaskStatusExAsync(request, headers, runtime);
        }

        /**
         * Description: 主站应用同步授权宝权益任务的完成情况
         * Summary: 主站应用同步授权宝权益任务的完成情况
         */
        public NotifyAuthTaskStatusResponse NotifyAuthTaskStatusEx(NotifyAuthTaskStatusRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<NotifyAuthTaskStatusResponse>(DoRequest("1.0", "baas.auth.task.status.notify", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 主站应用同步授权宝权益任务的完成情况
         * Summary: 主站应用同步授权宝权益任务的完成情况
         */
        public async Task<NotifyAuthTaskStatusResponse> NotifyAuthTaskStatusExAsync(NotifyAuthTaskStatusRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<NotifyAuthTaskStatusResponse>(await DoRequestAsync("1.0", "baas.auth.task.status.notify", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 任务暂停
         * Summary: 任务暂停
         */
        public PauseAuthTaskResponse PauseAuthTask(PauseAuthTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return PauseAuthTaskEx(request, headers, runtime);
        }

        /**
         * Description: 任务暂停
         * Summary: 任务暂停
         */
        public async Task<PauseAuthTaskResponse> PauseAuthTaskAsync(PauseAuthTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await PauseAuthTaskExAsync(request, headers, runtime);
        }

        /**
         * Description: 任务暂停
         * Summary: 任务暂停
         */
        public PauseAuthTaskResponse PauseAuthTaskEx(PauseAuthTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<PauseAuthTaskResponse>(DoRequest("1.0", "baas.auth.task.pause", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 任务暂停
         * Summary: 任务暂停
         */
        public async Task<PauseAuthTaskResponse> PauseAuthTaskExAsync(PauseAuthTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<PauseAuthTaskResponse>(await DoRequestAsync("1.0", "baas.auth.task.pause", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 任务完成
         * Summary: 任务完成
         */
        public FinishAuthTaskResponse FinishAuthTask(FinishAuthTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return FinishAuthTaskEx(request, headers, runtime);
        }

        /**
         * Description: 任务完成
         * Summary: 任务完成
         */
        public async Task<FinishAuthTaskResponse> FinishAuthTaskAsync(FinishAuthTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await FinishAuthTaskExAsync(request, headers, runtime);
        }

        /**
         * Description: 任务完成
         * Summary: 任务完成
         */
        public FinishAuthTaskResponse FinishAuthTaskEx(FinishAuthTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<FinishAuthTaskResponse>(DoRequest("1.0", "baas.auth.task.finish", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 任务完成
         * Summary: 任务完成
         */
        public async Task<FinishAuthTaskResponse> FinishAuthTaskExAsync(FinishAuthTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<FinishAuthTaskResponse>(await DoRequestAsync("1.0", "baas.auth.task.finish", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 任务重启
         * Summary: 任务重启
         */
        public ReopenAuthTaskResponse ReopenAuthTask(ReopenAuthTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ReopenAuthTaskEx(request, headers, runtime);
        }

        /**
         * Description: 任务重启
         * Summary: 任务重启
         */
        public async Task<ReopenAuthTaskResponse> ReopenAuthTaskAsync(ReopenAuthTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ReopenAuthTaskExAsync(request, headers, runtime);
        }

        /**
         * Description: 任务重启
         * Summary: 任务重启
         */
        public ReopenAuthTaskResponse ReopenAuthTaskEx(ReopenAuthTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ReopenAuthTaskResponse>(DoRequest("1.0", "baas.auth.task.reopen", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 任务重启
         * Summary: 任务重启
         */
        public async Task<ReopenAuthTaskResponse> ReopenAuthTaskExAsync(ReopenAuthTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ReopenAuthTaskResponse>(await DoRequestAsync("1.0", "baas.auth.task.reopen", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 样本量修改
         * Summary: 样本量修改
         */
        public OperateAuthTaskResponse OperateAuthTask(OperateAuthTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return OperateAuthTaskEx(request, headers, runtime);
        }

        /**
         * Description: 样本量修改
         * Summary: 样本量修改
         */
        public async Task<OperateAuthTaskResponse> OperateAuthTaskAsync(OperateAuthTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await OperateAuthTaskExAsync(request, headers, runtime);
        }

        /**
         * Description: 样本量修改
         * Summary: 样本量修改
         */
        public OperateAuthTaskResponse OperateAuthTaskEx(OperateAuthTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<OperateAuthTaskResponse>(DoRequest("1.0", "baas.auth.task.operate", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 样本量修改
         * Summary: 样本量修改
         */
        public async Task<OperateAuthTaskResponse> OperateAuthTaskExAsync(OperateAuthTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<OperateAuthTaskResponse>(await DoRequestAsync("1.0", "baas.auth.task.operate", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询人群标签取值范围
         * Summary: 查询人群标签取值范围
         */
        public QueryAuthTaskResponse QueryAuthTask(QueryAuthTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryAuthTaskEx(request, headers, runtime);
        }

        /**
         * Description: 查询人群标签取值范围
         * Summary: 查询人群标签取值范围
         */
        public async Task<QueryAuthTaskResponse> QueryAuthTaskAsync(QueryAuthTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryAuthTaskExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询人群标签取值范围
         * Summary: 查询人群标签取值范围
         */
        public QueryAuthTaskResponse QueryAuthTaskEx(QueryAuthTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthTaskResponse>(DoRequest("1.0", "baas.auth.task.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询人群标签取值范围
         * Summary: 查询人群标签取值范围
         */
        public async Task<QueryAuthTaskResponse> QueryAuthTaskExAsync(QueryAuthTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthTaskResponse>(await DoRequestAsync("1.0", "baas.auth.task.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 人群量级查询
         * Summary: 人群量级查询
         */
        public CountAuthTaskResponse CountAuthTask(CountAuthTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CountAuthTaskEx(request, headers, runtime);
        }

        /**
         * Description: 人群量级查询
         * Summary: 人群量级查询
         */
        public async Task<CountAuthTaskResponse> CountAuthTaskAsync(CountAuthTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CountAuthTaskExAsync(request, headers, runtime);
        }

        /**
         * Description: 人群量级查询
         * Summary: 人群量级查询
         */
        public CountAuthTaskResponse CountAuthTaskEx(CountAuthTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CountAuthTaskResponse>(DoRequest("1.0", "baas.auth.task.count", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 人群量级查询
         * Summary: 人群量级查询
         */
        public async Task<CountAuthTaskResponse> CountAuthTaskExAsync(CountAuthTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CountAuthTaskResponse>(await DoRequestAsync("1.0", "baas.auth.task.count", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 人群匹配查询
         * Summary: 人群匹配查询
         */
        public MatchAuthTaskResponse MatchAuthTask(MatchAuthTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return MatchAuthTaskEx(request, headers, runtime);
        }

        /**
         * Description: 人群匹配查询
         * Summary: 人群匹配查询
         */
        public async Task<MatchAuthTaskResponse> MatchAuthTaskAsync(MatchAuthTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await MatchAuthTaskExAsync(request, headers, runtime);
        }

        /**
         * Description: 人群匹配查询
         * Summary: 人群匹配查询
         */
        public MatchAuthTaskResponse MatchAuthTaskEx(MatchAuthTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<MatchAuthTaskResponse>(DoRequest("1.0", "baas.auth.task.match", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 人群匹配查询
         * Summary: 人群匹配查询
         */
        public async Task<MatchAuthTaskResponse> MatchAuthTaskExAsync(MatchAuthTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<MatchAuthTaskResponse>(await DoRequestAsync("1.0", "baas.auth.task.match", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 问卷任务提交
         * Summary: 问卷任务提交
         */
        public SubmitAuthTaskResponse SubmitAuthTask(SubmitAuthTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SubmitAuthTaskEx(request, headers, runtime);
        }

        /**
         * Description: 问卷任务提交
         * Summary: 问卷任务提交
         */
        public async Task<SubmitAuthTaskResponse> SubmitAuthTaskAsync(SubmitAuthTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SubmitAuthTaskExAsync(request, headers, runtime);
        }

        /**
         * Description: 问卷任务提交
         * Summary: 问卷任务提交
         */
        public SubmitAuthTaskResponse SubmitAuthTaskEx(SubmitAuthTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SubmitAuthTaskResponse>(DoRequest("1.0", "baas.auth.task.submit", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 问卷任务提交
         * Summary: 问卷任务提交
         */
        public async Task<SubmitAuthTaskResponse> SubmitAuthTaskExAsync(SubmitAuthTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SubmitAuthTaskResponse>(await DoRequestAsync("1.0", "baas.auth.task.submit", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 问卷任务详情
         * Summary: 问卷任务详情
         */
        public DetailAuthTaskResponse DetailAuthTask(DetailAuthTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return DetailAuthTaskEx(request, headers, runtime);
        }

        /**
         * Description: 问卷任务详情
         * Summary: 问卷任务详情
         */
        public async Task<DetailAuthTaskResponse> DetailAuthTaskAsync(DetailAuthTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await DetailAuthTaskExAsync(request, headers, runtime);
        }

        /**
         * Description: 问卷任务详情
         * Summary: 问卷任务详情
         */
        public DetailAuthTaskResponse DetailAuthTaskEx(DetailAuthTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DetailAuthTaskResponse>(DoRequest("1.0", "baas.auth.task.detail", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 问卷任务详情
         * Summary: 问卷任务详情
         */
        public async Task<DetailAuthTaskResponse> DetailAuthTaskExAsync(DetailAuthTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DetailAuthTaskResponse>(await DoRequestAsync("1.0", "baas.auth.task.detail", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 任务修改
         * Summary: 任务修改
         */
        public UpdateAuthTaskResponse UpdateAuthTask(UpdateAuthTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateAuthTaskEx(request, headers, runtime);
        }

        /**
         * Description: 任务修改
         * Summary: 任务修改
         */
        public async Task<UpdateAuthTaskResponse> UpdateAuthTaskAsync(UpdateAuthTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateAuthTaskExAsync(request, headers, runtime);
        }

        /**
         * Description: 任务修改
         * Summary: 任务修改
         */
        public UpdateAuthTaskResponse UpdateAuthTaskEx(UpdateAuthTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateAuthTaskResponse>(DoRequest("1.0", "baas.auth.task.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 任务修改
         * Summary: 任务修改
         */
        public async Task<UpdateAuthTaskResponse> UpdateAuthTaskExAsync(UpdateAuthTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateAuthTaskResponse>(await DoRequestAsync("1.0", "baas.auth.task.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 人群量级查询
         * Summary: 人群量级查询
         */
        public CountAuthTaskCrowdResponse CountAuthTaskCrowd(CountAuthTaskCrowdRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CountAuthTaskCrowdEx(request, headers, runtime);
        }

        /**
         * Description: 人群量级查询
         * Summary: 人群量级查询
         */
        public async Task<CountAuthTaskCrowdResponse> CountAuthTaskCrowdAsync(CountAuthTaskCrowdRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CountAuthTaskCrowdExAsync(request, headers, runtime);
        }

        /**
         * Description: 人群量级查询
         * Summary: 人群量级查询
         */
        public CountAuthTaskCrowdResponse CountAuthTaskCrowdEx(CountAuthTaskCrowdRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CountAuthTaskCrowdResponse>(DoRequest("1.0", "baas.auth.task.crowd.count", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 人群量级查询
         * Summary: 人群量级查询
         */
        public async Task<CountAuthTaskCrowdResponse> CountAuthTaskCrowdExAsync(CountAuthTaskCrowdRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CountAuthTaskCrowdResponse>(await DoRequestAsync("1.0", "baas.auth.task.crowd.count", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 人群匹配查询
         * Summary: 人群匹配查询
         */
        public MatchAuthTaskCrowdResponse MatchAuthTaskCrowd(MatchAuthTaskCrowdRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return MatchAuthTaskCrowdEx(request, headers, runtime);
        }

        /**
         * Description: 人群匹配查询
         * Summary: 人群匹配查询
         */
        public async Task<MatchAuthTaskCrowdResponse> MatchAuthTaskCrowdAsync(MatchAuthTaskCrowdRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await MatchAuthTaskCrowdExAsync(request, headers, runtime);
        }

        /**
         * Description: 人群匹配查询
         * Summary: 人群匹配查询
         */
        public MatchAuthTaskCrowdResponse MatchAuthTaskCrowdEx(MatchAuthTaskCrowdRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<MatchAuthTaskCrowdResponse>(DoRequest("1.0", "baas.auth.task.crowd.match", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 人群匹配查询
         * Summary: 人群匹配查询
         */
        public async Task<MatchAuthTaskCrowdResponse> MatchAuthTaskCrowdExAsync(MatchAuthTaskCrowdRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<MatchAuthTaskCrowdResponse>(await DoRequestAsync("1.0", "baas.auth.task.crowd.match", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 人群标签取值范围查询
         * Summary: 人群标签取值范围查询
         */
        public QueryAuthTaskLabelResponse QueryAuthTaskLabel(QueryAuthTaskLabelRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryAuthTaskLabelEx(request, headers, runtime);
        }

        /**
         * Description: 人群标签取值范围查询
         * Summary: 人群标签取值范围查询
         */
        public async Task<QueryAuthTaskLabelResponse> QueryAuthTaskLabelAsync(QueryAuthTaskLabelRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryAuthTaskLabelExAsync(request, headers, runtime);
        }

        /**
         * Description: 人群标签取值范围查询
         * Summary: 人群标签取值范围查询
         */
        public QueryAuthTaskLabelResponse QueryAuthTaskLabelEx(QueryAuthTaskLabelRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthTaskLabelResponse>(DoRequest("1.0", "baas.auth.task.label.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 人群标签取值范围查询
         * Summary: 人群标签取值范围查询
         */
        public async Task<QueryAuthTaskLabelResponse> QueryAuthTaskLabelExAsync(QueryAuthTaskLabelRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthTaskLabelResponse>(await DoRequestAsync("1.0", "baas.auth.task.label.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 任务列表查询
         * Summary: 任务列表查询
         */
        public ListAuthTaskResponse ListAuthTask(ListAuthTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ListAuthTaskEx(request, headers, runtime);
        }

        /**
         * Description: 任务列表查询
         * Summary: 任务列表查询
         */
        public async Task<ListAuthTaskResponse> ListAuthTaskAsync(ListAuthTaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ListAuthTaskExAsync(request, headers, runtime);
        }

        /**
         * Description: 任务列表查询
         * Summary: 任务列表查询
         */
        public ListAuthTaskResponse ListAuthTaskEx(ListAuthTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListAuthTaskResponse>(DoRequest("1.0", "baas.auth.task.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 任务列表查询
         * Summary: 任务列表查询
         */
        public async Task<ListAuthTaskResponse> ListAuthTaskExAsync(ListAuthTaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListAuthTaskResponse>(await DoRequestAsync("1.0", "baas.auth.task.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 权益退订openAPI接口
         * Summary: 权益退订
         */
        public UnbindAuthEquityResponse UnbindAuthEquity(UnbindAuthEquityRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UnbindAuthEquityEx(request, headers, runtime);
        }

        /**
         * Description: 权益退订openAPI接口
         * Summary: 权益退订
         */
        public async Task<UnbindAuthEquityResponse> UnbindAuthEquityAsync(UnbindAuthEquityRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UnbindAuthEquityExAsync(request, headers, runtime);
        }

        /**
         * Description: 权益退订openAPI接口
         * Summary: 权益退订
         */
        public UnbindAuthEquityResponse UnbindAuthEquityEx(UnbindAuthEquityRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UnbindAuthEquityResponse>(DoRequest("1.0", "baas.auth.equity.unbind", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 权益退订openAPI接口
         * Summary: 权益退订
         */
        public async Task<UnbindAuthEquityResponse> UnbindAuthEquityExAsync(UnbindAuthEquityRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UnbindAuthEquityResponse>(await DoRequestAsync("1.0", "baas.auth.equity.unbind", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 权益退款
         * Summary: 权益退款接口
         */
        public RepayAuthEquityResponse RepayAuthEquity(RepayAuthEquityRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return RepayAuthEquityEx(request, headers, runtime);
        }

        /**
         * Description: 权益退款
         * Summary: 权益退款接口
         */
        public async Task<RepayAuthEquityResponse> RepayAuthEquityAsync(RepayAuthEquityRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await RepayAuthEquityExAsync(request, headers, runtime);
        }

        /**
         * Description: 权益退款
         * Summary: 权益退款接口
         */
        public RepayAuthEquityResponse RepayAuthEquityEx(RepayAuthEquityRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<RepayAuthEquityResponse>(DoRequest("1.0", "baas.auth.equity.repay", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 权益退款
         * Summary: 权益退款接口
         */
        public async Task<RepayAuthEquityResponse> RepayAuthEquityExAsync(RepayAuthEquityRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<RepayAuthEquityResponse>(await DoRequestAsync("1.0", "baas.auth.equity.repay", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 授权token校验
         * Summary: 授权token校验
         */
        public VerifyAuthTokenValidityResponse VerifyAuthTokenValidity(VerifyAuthTokenValidityRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return VerifyAuthTokenValidityEx(request, headers, runtime);
        }

        /**
         * Description: 授权token校验
         * Summary: 授权token校验
         */
        public async Task<VerifyAuthTokenValidityResponse> VerifyAuthTokenValidityAsync(VerifyAuthTokenValidityRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await VerifyAuthTokenValidityExAsync(request, headers, runtime);
        }

        /**
         * Description: 授权token校验
         * Summary: 授权token校验
         */
        public VerifyAuthTokenValidityResponse VerifyAuthTokenValidityEx(VerifyAuthTokenValidityRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<VerifyAuthTokenValidityResponse>(DoRequest("1.0", "baas.auth.token.validity.verify", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 授权token校验
         * Summary: 授权token校验
         */
        public async Task<VerifyAuthTokenValidityResponse> VerifyAuthTokenValidityExAsync(VerifyAuthTokenValidityRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<VerifyAuthTokenValidityResponse>(await DoRequestAsync("1.0", "baas.auth.token.validity.verify", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 核验当前用户是否权益新用户
         * Summary: 权益核验是否新用户
         */
        public VerifyAuthBusinessUserResponse VerifyAuthBusinessUser(VerifyAuthBusinessUserRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return VerifyAuthBusinessUserEx(request, headers, runtime);
        }

        /**
         * Description: 核验当前用户是否权益新用户
         * Summary: 权益核验是否新用户
         */
        public async Task<VerifyAuthBusinessUserResponse> VerifyAuthBusinessUserAsync(VerifyAuthBusinessUserRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await VerifyAuthBusinessUserExAsync(request, headers, runtime);
        }

        /**
         * Description: 核验当前用户是否权益新用户
         * Summary: 权益核验是否新用户
         */
        public VerifyAuthBusinessUserResponse VerifyAuthBusinessUserEx(VerifyAuthBusinessUserRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<VerifyAuthBusinessUserResponse>(DoRequest("1.0", "baas.auth.business.user.verify", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 核验当前用户是否权益新用户
         * Summary: 权益核验是否新用户
         */
        public async Task<VerifyAuthBusinessUserResponse> VerifyAuthBusinessUserExAsync(VerifyAuthBusinessUserRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<VerifyAuthBusinessUserResponse>(await DoRequestAsync("1.0", "baas.auth.business.user.verify", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 代运营场景下第三方应用调用该接口推送相关信息，例如车辆信息
         * Summary: 代运营-推送用户授权的相关信息
         */
        public SubmitAuthBusinessDataResponse SubmitAuthBusinessData(SubmitAuthBusinessDataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SubmitAuthBusinessDataEx(request, headers, runtime);
        }

        /**
         * Description: 代运营场景下第三方应用调用该接口推送相关信息，例如车辆信息
         * Summary: 代运营-推送用户授权的相关信息
         */
        public async Task<SubmitAuthBusinessDataResponse> SubmitAuthBusinessDataAsync(SubmitAuthBusinessDataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SubmitAuthBusinessDataExAsync(request, headers, runtime);
        }

        /**
         * Description: 代运营场景下第三方应用调用该接口推送相关信息，例如车辆信息
         * Summary: 代运营-推送用户授权的相关信息
         */
        public SubmitAuthBusinessDataResponse SubmitAuthBusinessDataEx(SubmitAuthBusinessDataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SubmitAuthBusinessDataResponse>(DoRequest("1.0", "baas.auth.business.data.submit", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 代运营场景下第三方应用调用该接口推送相关信息，例如车辆信息
         * Summary: 代运营-推送用户授权的相关信息
         */
        public async Task<SubmitAuthBusinessDataResponse> SubmitAuthBusinessDataExAsync(SubmitAuthBusinessDataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SubmitAuthBusinessDataResponse>(await DoRequestAsync("1.0", "baas.auth.business.data.submit", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 支持调用该接口上传行驶证照片，返回上传链接
         * Summary: 行驶证上传接口
         */
        public UploadAuthBusinessCardResponse UploadAuthBusinessCard(UploadAuthBusinessCardRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UploadAuthBusinessCardEx(request, headers, runtime);
        }

        /**
         * Description: 支持调用该接口上传行驶证照片，返回上传链接
         * Summary: 行驶证上传接口
         */
        public async Task<UploadAuthBusinessCardResponse> UploadAuthBusinessCardAsync(UploadAuthBusinessCardRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UploadAuthBusinessCardExAsync(request, headers, runtime);
        }

        /**
         * Description: 支持调用该接口上传行驶证照片，返回上传链接
         * Summary: 行驶证上传接口
         */
        public UploadAuthBusinessCardResponse UploadAuthBusinessCardEx(UploadAuthBusinessCardRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UploadAuthBusinessCardResponse>(DoRequest("1.0", "baas.auth.business.card.upload", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 支持调用该接口上传行驶证照片，返回上传链接
         * Summary: 行驶证上传接口
         */
        public async Task<UploadAuthBusinessCardResponse> UploadAuthBusinessCardExAsync(UploadAuthBusinessCardRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UploadAuthBusinessCardResponse>(await DoRequestAsync("1.0", "baas.auth.business.card.upload", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过指定可验证声明id，获取目标可验证声明链上交易信息，需要可验证声明的拥有者分享声明才可查询，如果没有权限则获取失败。
         * Summary: 获取目标可验证声明链上交易信息
         */
        public QueryAuthVcTransactionResponse QueryAuthVcTransaction(QueryAuthVcTransactionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryAuthVcTransactionEx(request, headers, runtime);
        }

        /**
         * Description: 通过指定可验证声明id，获取目标可验证声明链上交易信息，需要可验证声明的拥有者分享声明才可查询，如果没有权限则获取失败。
         * Summary: 获取目标可验证声明链上交易信息
         */
        public async Task<QueryAuthVcTransactionResponse> QueryAuthVcTransactionAsync(QueryAuthVcTransactionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryAuthVcTransactionExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过指定可验证声明id，获取目标可验证声明链上交易信息，需要可验证声明的拥有者分享声明才可查询，如果没有权限则获取失败。
         * Summary: 获取目标可验证声明链上交易信息
         */
        public QueryAuthVcTransactionResponse QueryAuthVcTransactionEx(QueryAuthVcTransactionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthVcTransactionResponse>(DoRequest("1.0", "baas.auth.vc.transaction.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过指定可验证声明id，获取目标可验证声明链上交易信息，需要可验证声明的拥有者分享声明才可查询，如果没有权限则获取失败。
         * Summary: 获取目标可验证声明链上交易信息
         */
        public async Task<QueryAuthVcTransactionResponse> QueryAuthVcTransactionExAsync(QueryAuthVcTransactionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthVcTransactionResponse>(await DoRequestAsync("1.0", "baas.auth.vc.transaction.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 代运营场景用户确认授权接口
         * Summary: 代运营用户确认授权接口
         */
        public AuthAuthBusinessUserResponse AuthAuthBusinessUser(AuthAuthBusinessUserRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return AuthAuthBusinessUserEx(request, headers, runtime);
        }

        /**
         * Description: 代运营场景用户确认授权接口
         * Summary: 代运营用户确认授权接口
         */
        public async Task<AuthAuthBusinessUserResponse> AuthAuthBusinessUserAsync(AuthAuthBusinessUserRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await AuthAuthBusinessUserExAsync(request, headers, runtime);
        }

        /**
         * Description: 代运营场景用户确认授权接口
         * Summary: 代运营用户确认授权接口
         */
        public AuthAuthBusinessUserResponse AuthAuthBusinessUserEx(AuthAuthBusinessUserRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<AuthAuthBusinessUserResponse>(DoRequest("1.0", "baas.auth.business.user.auth", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 代运营场景用户确认授权接口
         * Summary: 代运营用户确认授权接口
         */
        public async Task<AuthAuthBusinessUserResponse> AuthAuthBusinessUserExAsync(AuthAuthBusinessUserRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<AuthAuthBusinessUserResponse>(await DoRequestAsync("1.0", "baas.auth.business.user.auth", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取文件上传到OSS的地址和key信息
         * Summary: 获取文件上传到OSS的地址和key信息
         */
        public QueryAuthCrowdUploadurlResponse QueryAuthCrowdUploadurl(QueryAuthCrowdUploadurlRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryAuthCrowdUploadurlEx(request, headers, runtime);
        }

        /**
         * Description: 获取文件上传到OSS的地址和key信息
         * Summary: 获取文件上传到OSS的地址和key信息
         */
        public async Task<QueryAuthCrowdUploadurlResponse> QueryAuthCrowdUploadurlAsync(QueryAuthCrowdUploadurlRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryAuthCrowdUploadurlExAsync(request, headers, runtime);
        }

        /**
         * Description: 获取文件上传到OSS的地址和key信息
         * Summary: 获取文件上传到OSS的地址和key信息
         */
        public QueryAuthCrowdUploadurlResponse QueryAuthCrowdUploadurlEx(QueryAuthCrowdUploadurlRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthCrowdUploadurlResponse>(DoRequest("1.0", "baas.auth.crowd.uploadurl.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取文件上传到OSS的地址和key信息
         * Summary: 获取文件上传到OSS的地址和key信息
         */
        public async Task<QueryAuthCrowdUploadurlResponse> QueryAuthCrowdUploadurlExAsync(QueryAuthCrowdUploadurlRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthCrowdUploadurlResponse>(await DoRequestAsync("1.0", "baas.auth.crowd.uploadurl.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 提交人群上传相关文件信息
         * Summary: 提交
         */
        public SubmitAuthCrowdUploadResponse SubmitAuthCrowdUpload(SubmitAuthCrowdUploadRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SubmitAuthCrowdUploadEx(request, headers, runtime);
        }

        /**
         * Description: 提交人群上传相关文件信息
         * Summary: 提交
         */
        public async Task<SubmitAuthCrowdUploadResponse> SubmitAuthCrowdUploadAsync(SubmitAuthCrowdUploadRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SubmitAuthCrowdUploadExAsync(request, headers, runtime);
        }

        /**
         * Description: 提交人群上传相关文件信息
         * Summary: 提交
         */
        public SubmitAuthCrowdUploadResponse SubmitAuthCrowdUploadEx(SubmitAuthCrowdUploadRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SubmitAuthCrowdUploadResponse>(DoRequest("1.0", "baas.auth.crowd.upload.submit", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 提交人群上传相关文件信息
         * Summary: 提交
         */
        public async Task<SubmitAuthCrowdUploadResponse> SubmitAuthCrowdUploadExAsync(SubmitAuthCrowdUploadRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SubmitAuthCrowdUploadResponse>(await DoRequestAsync("1.0", "baas.auth.crowd.upload.submit", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 上传证书动态图片
         * Summary: 上传证书动态图片
         */
        public UploadAuthCertPhotoResponse UploadAuthCertPhoto(UploadAuthCertPhotoRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UploadAuthCertPhotoEx(request, headers, runtime);
        }

        /**
         * Description: 上传证书动态图片
         * Summary: 上传证书动态图片
         */
        public async Task<UploadAuthCertPhotoResponse> UploadAuthCertPhotoAsync(UploadAuthCertPhotoRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UploadAuthCertPhotoExAsync(request, headers, runtime);
        }

        /**
         * Description: 上传证书动态图片
         * Summary: 上传证书动态图片
         */
        public UploadAuthCertPhotoResponse UploadAuthCertPhotoEx(UploadAuthCertPhotoRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UploadAuthCertPhotoResponse>(DoRequest("1.0", "baas.auth.cert.photo.upload", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 上传证书动态图片
         * Summary: 上传证书动态图片
         */
        public async Task<UploadAuthCertPhotoResponse> UploadAuthCertPhotoExAsync(UploadAuthCertPhotoRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UploadAuthCertPhotoResponse>(await DoRequestAsync("1.0", "baas.auth.cert.photo.upload", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 车五项信息提交
         * Summary: 车五项信息提交
         */
        public SubmitAuthCarinfoResponse SubmitAuthCarinfo(SubmitAuthCarinfoRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SubmitAuthCarinfoEx(request, headers, runtime);
        }

        /**
         * Description: 车五项信息提交
         * Summary: 车五项信息提交
         */
        public async Task<SubmitAuthCarinfoResponse> SubmitAuthCarinfoAsync(SubmitAuthCarinfoRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SubmitAuthCarinfoExAsync(request, headers, runtime);
        }

        /**
         * Description: 车五项信息提交
         * Summary: 车五项信息提交
         */
        public SubmitAuthCarinfoResponse SubmitAuthCarinfoEx(SubmitAuthCarinfoRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SubmitAuthCarinfoResponse>(DoRequest("1.0", "baas.auth.carinfo.submit", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 车五项信息提交
         * Summary: 车五项信息提交
         */
        public async Task<SubmitAuthCarinfoResponse> SubmitAuthCarinfoExAsync(SubmitAuthCarinfoRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SubmitAuthCarinfoResponse>(await DoRequestAsync("1.0", "baas.auth.carinfo.submit", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 车信息识别
         * Summary: 车信息识别
         */
        public RecognizeAuthCarinfoResponse RecognizeAuthCarinfo(RecognizeAuthCarinfoRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return RecognizeAuthCarinfoEx(request, headers, runtime);
        }

        /**
         * Description: 车信息识别
         * Summary: 车信息识别
         */
        public async Task<RecognizeAuthCarinfoResponse> RecognizeAuthCarinfoAsync(RecognizeAuthCarinfoRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await RecognizeAuthCarinfoExAsync(request, headers, runtime);
        }

        /**
         * Description: 车信息识别
         * Summary: 车信息识别
         */
        public RecognizeAuthCarinfoResponse RecognizeAuthCarinfoEx(RecognizeAuthCarinfoRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<RecognizeAuthCarinfoResponse>(DoRequest("1.0", "baas.auth.carinfo.recognize", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 车信息识别
         * Summary: 车信息识别
         */
        public async Task<RecognizeAuthCarinfoResponse> RecognizeAuthCarinfoExAsync(RecognizeAuthCarinfoRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<RecognizeAuthCarinfoResponse>(await DoRequestAsync("1.0", "baas.auth.carinfo.recognize", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 提交新车线索
         * Summary: 提交新车线索
         */
        public SubmitAuthNewcarResponse SubmitAuthNewcar(SubmitAuthNewcarRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SubmitAuthNewcarEx(request, headers, runtime);
        }

        /**
         * Description: 提交新车线索
         * Summary: 提交新车线索
         */
        public async Task<SubmitAuthNewcarResponse> SubmitAuthNewcarAsync(SubmitAuthNewcarRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SubmitAuthNewcarExAsync(request, headers, runtime);
        }

        /**
         * Description: 提交新车线索
         * Summary: 提交新车线索
         */
        public SubmitAuthNewcarResponse SubmitAuthNewcarEx(SubmitAuthNewcarRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SubmitAuthNewcarResponse>(DoRequest("1.0", "baas.auth.newcar.submit", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 提交新车线索
         * Summary: 提交新车线索
         */
        public async Task<SubmitAuthNewcarResponse> SubmitAuthNewcarExAsync(SubmitAuthNewcarRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SubmitAuthNewcarResponse>(await DoRequestAsync("1.0", "baas.auth.newcar.submit", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 平安车险车辆绑定 天猫使用
         * Summary: 平安车险车辆绑定 天猫使用
         */
        public QueryAuthInsuranceResponse QueryAuthInsurance(QueryAuthInsuranceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryAuthInsuranceEx(request, headers, runtime);
        }

        /**
         * Description: 平安车险车辆绑定 天猫使用
         * Summary: 平安车险车辆绑定 天猫使用
         */
        public async Task<QueryAuthInsuranceResponse> QueryAuthInsuranceAsync(QueryAuthInsuranceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryAuthInsuranceExAsync(request, headers, runtime);
        }

        /**
         * Description: 平安车险车辆绑定 天猫使用
         * Summary: 平安车险车辆绑定 天猫使用
         */
        public QueryAuthInsuranceResponse QueryAuthInsuranceEx(QueryAuthInsuranceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthInsuranceResponse>(DoRequest("1.0", "baas.auth.insurance.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 平安车险车辆绑定 天猫使用
         * Summary: 平安车险车辆绑定 天猫使用
         */
        public async Task<QueryAuthInsuranceResponse> QueryAuthInsuranceExAsync(QueryAuthInsuranceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthInsuranceResponse>(await DoRequestAsync("1.0", "baas.auth.insurance.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 车主信息提交
         * Summary: 车主信息提交
         */
        public RegisterAuthCarownerResponse RegisterAuthCarowner(RegisterAuthCarownerRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return RegisterAuthCarownerEx(request, headers, runtime);
        }

        /**
         * Description: 车主信息提交
         * Summary: 车主信息提交
         */
        public async Task<RegisterAuthCarownerResponse> RegisterAuthCarownerAsync(RegisterAuthCarownerRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await RegisterAuthCarownerExAsync(request, headers, runtime);
        }

        /**
         * Description: 车主信息提交
         * Summary: 车主信息提交
         */
        public RegisterAuthCarownerResponse RegisterAuthCarownerEx(RegisterAuthCarownerRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<RegisterAuthCarownerResponse>(DoRequest("1.0", "baas.auth.carowner.register", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 车主信息提交
         * Summary: 车主信息提交
         */
        public async Task<RegisterAuthCarownerResponse> RegisterAuthCarownerExAsync(RegisterAuthCarownerRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<RegisterAuthCarownerResponse>(await DoRequestAsync("1.0", "baas.auth.carowner.register", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 车五项查询
         * Summary: 车五项查询
         */
        public QueryAuthCaritemsResponse QueryAuthCaritems(QueryAuthCaritemsRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryAuthCaritemsEx(request, headers, runtime);
        }

        /**
         * Description: 车五项查询
         * Summary: 车五项查询
         */
        public async Task<QueryAuthCaritemsResponse> QueryAuthCaritemsAsync(QueryAuthCaritemsRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryAuthCaritemsExAsync(request, headers, runtime);
        }

        /**
         * Description: 车五项查询
         * Summary: 车五项查询
         */
        public QueryAuthCaritemsResponse QueryAuthCaritemsEx(QueryAuthCaritemsRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthCaritemsResponse>(DoRequest("1.0", "baas.auth.caritems.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 车五项查询
         * Summary: 车五项查询
         */
        public async Task<QueryAuthCaritemsResponse> QueryAuthCaritemsExAsync(QueryAuthCaritemsRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthCaritemsResponse>(await DoRequestAsync("1.0", "baas.auth.caritems.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 车辆价格查询
         * Summary: 车辆价格查询
         */
        public QueryAuthCarpriceResponse QueryAuthCarprice(QueryAuthCarpriceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryAuthCarpriceEx(request, headers, runtime);
        }

        /**
         * Description: 车辆价格查询
         * Summary: 车辆价格查询
         */
        public async Task<QueryAuthCarpriceResponse> QueryAuthCarpriceAsync(QueryAuthCarpriceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryAuthCarpriceExAsync(request, headers, runtime);
        }

        /**
         * Description: 车辆价格查询
         * Summary: 车辆价格查询
         */
        public QueryAuthCarpriceResponse QueryAuthCarpriceEx(QueryAuthCarpriceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthCarpriceResponse>(DoRequest("1.0", "baas.auth.carprice.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 车辆价格查询
         * Summary: 车辆价格查询
         */
        public async Task<QueryAuthCarpriceResponse> QueryAuthCarpriceExAsync(QueryAuthCarpriceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryAuthCarpriceResponse>(await DoRequestAsync("1.0", "baas.auth.carprice.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过设备号匹配用户是否存在
         * Summary: 查询人群数据是否存在
         */
        public MatchAuthCarUsersResponse MatchAuthCarUsers(MatchAuthCarUsersRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return MatchAuthCarUsersEx(request, headers, runtime);
        }

        /**
         * Description: 通过设备号匹配用户是否存在
         * Summary: 查询人群数据是否存在
         */
        public async Task<MatchAuthCarUsersResponse> MatchAuthCarUsersAsync(MatchAuthCarUsersRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await MatchAuthCarUsersExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过设备号匹配用户是否存在
         * Summary: 查询人群数据是否存在
         */
        public MatchAuthCarUsersResponse MatchAuthCarUsersEx(MatchAuthCarUsersRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<MatchAuthCarUsersResponse>(DoRequest("1.0", "baas.auth.car.users.match", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过设备号匹配用户是否存在
         * Summary: 查询人群数据是否存在
         */
        public async Task<MatchAuthCarUsersResponse> MatchAuthCarUsersExAsync(MatchAuthCarUsersRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<MatchAuthCarUsersResponse>(await DoRequestAsync("1.0", "baas.auth.car.users.match", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 新车线索批量提交
         * Summary: 新车线索批量提交
         */
        public BatchcreateAuthNewcarResponse BatchcreateAuthNewcar(BatchcreateAuthNewcarRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return BatchcreateAuthNewcarEx(request, headers, runtime);
        }

        /**
         * Description: 新车线索批量提交
         * Summary: 新车线索批量提交
         */
        public async Task<BatchcreateAuthNewcarResponse> BatchcreateAuthNewcarAsync(BatchcreateAuthNewcarRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await BatchcreateAuthNewcarExAsync(request, headers, runtime);
        }

        /**
         * Description: 新车线索批量提交
         * Summary: 新车线索批量提交
         */
        public BatchcreateAuthNewcarResponse BatchcreateAuthNewcarEx(BatchcreateAuthNewcarRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BatchcreateAuthNewcarResponse>(DoRequest("1.0", "baas.auth.newcar.batchcreate", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 新车线索批量提交
         * Summary: 新车线索批量提交
         */
        public async Task<BatchcreateAuthNewcarResponse> BatchcreateAuthNewcarExAsync(BatchcreateAuthNewcarRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<BatchcreateAuthNewcarResponse>(await DoRequestAsync("1.0", "baas.auth.newcar.batchcreate", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过代理模式为企业创建did
         * Summary: 通过代理模式为企业创建did
         */
        public StartDidCorporateAgentcreateResponse StartDidCorporateAgentcreate(StartDidCorporateAgentcreateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidCorporateAgentcreateEx(request, headers, runtime);
        }

        /**
         * Description: 通过代理模式为企业创建did
         * Summary: 通过代理模式为企业创建did
         */
        public async Task<StartDidCorporateAgentcreateResponse> StartDidCorporateAgentcreateAsync(StartDidCorporateAgentcreateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidCorporateAgentcreateExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过代理模式为企业创建did
         * Summary: 通过代理模式为企业创建did
         */
        public StartDidCorporateAgentcreateResponse StartDidCorporateAgentcreateEx(StartDidCorporateAgentcreateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCorporateAgentcreateResponse>(DoRequest("1.0", "baas.did.corporate.agentcreate.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过代理模式为企业创建did
         * Summary: 通过代理模式为企业创建did
         */
        public async Task<StartDidCorporateAgentcreateResponse> StartDidCorporateAgentcreateExAsync(StartDidCorporateAgentcreateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCorporateAgentcreateResponse>(await DoRequestAsync("1.0", "baas.did.corporate.agentcreate.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过代理模式为个人创建did
         * Summary: 通过代理模式为个人创建did
         */
        public StartDidPersonAgentcreateResponse StartDidPersonAgentcreate(StartDidPersonAgentcreateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidPersonAgentcreateEx(request, headers, runtime);
        }

        /**
         * Description: 通过代理模式为个人创建did
         * Summary: 通过代理模式为个人创建did
         */
        public async Task<StartDidPersonAgentcreateResponse> StartDidPersonAgentcreateAsync(StartDidPersonAgentcreateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidPersonAgentcreateExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过代理模式为个人创建did
         * Summary: 通过代理模式为个人创建did
         */
        public StartDidPersonAgentcreateResponse StartDidPersonAgentcreateEx(StartDidPersonAgentcreateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidPersonAgentcreateResponse>(DoRequest("1.0", "baas.did.person.agentcreate.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过代理模式为个人创建did
         * Summary: 通过代理模式为个人创建did
         */
        public async Task<StartDidPersonAgentcreateResponse> StartDidPersonAgentcreateExAsync(StartDidPersonAgentcreateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidPersonAgentcreateResponse>(await DoRequestAsync("1.0", "baas.did.person.agentcreate.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 直接创建自己的企业did
         * Summary: 直接创建自己的企业did
         */
        public StartDidCorporateSelfcreateResponse StartDidCorporateSelfcreate(StartDidCorporateSelfcreateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidCorporateSelfcreateEx(request, headers, runtime);
        }

        /**
         * Description: 直接创建自己的企业did
         * Summary: 直接创建自己的企业did
         */
        public async Task<StartDidCorporateSelfcreateResponse> StartDidCorporateSelfcreateAsync(StartDidCorporateSelfcreateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidCorporateSelfcreateExAsync(request, headers, runtime);
        }

        /**
         * Description: 直接创建自己的企业did
         * Summary: 直接创建自己的企业did
         */
        public StartDidCorporateSelfcreateResponse StartDidCorporateSelfcreateEx(StartDidCorporateSelfcreateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCorporateSelfcreateResponse>(DoRequest("1.0", "baas.did.corporate.selfcreate.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 直接创建自己的企业did
         * Summary: 直接创建自己的企业did
         */
        public async Task<StartDidCorporateSelfcreateResponse> StartDidCorporateSelfcreateExAsync(StartDidCorporateSelfcreateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCorporateSelfcreateResponse>(await DoRequestAsync("1.0", "baas.did.corporate.selfcreate.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 直接创建自己的个人did
         * Summary: 直接创建自己的个人did
         */
        public StartDidPersonSelfcreateResponse StartDidPersonSelfcreate(StartDidPersonSelfcreateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidPersonSelfcreateEx(request, headers, runtime);
        }

        /**
         * Description: 直接创建自己的个人did
         * Summary: 直接创建自己的个人did
         */
        public async Task<StartDidPersonSelfcreateResponse> StartDidPersonSelfcreateAsync(StartDidPersonSelfcreateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidPersonSelfcreateExAsync(request, headers, runtime);
        }

        /**
         * Description: 直接创建自己的个人did
         * Summary: 直接创建自己的个人did
         */
        public StartDidPersonSelfcreateResponse StartDidPersonSelfcreateEx(StartDidPersonSelfcreateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidPersonSelfcreateResponse>(DoRequest("1.0", "baas.did.person.selfcreate.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 直接创建自己的个人did
         * Summary: 直接创建自己的个人did
         */
        public async Task<StartDidPersonSelfcreateResponse> StartDidPersonSelfcreateExAsync(StartDidPersonSelfcreateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidPersonSelfcreateResponse>(await DoRequestAsync("1.0", "baas.did.person.selfcreate.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 使用自己或者代理的did为指定did颁发证书
         * Summary: 为指定did颁发证书
         */
        public StartDidVerifiableclaimIssureResponse StartDidVerifiableclaimIssure(StartDidVerifiableclaimIssureRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidVerifiableclaimIssureEx(request, headers, runtime);
        }

        /**
         * Description: 使用自己或者代理的did为指定did颁发证书
         * Summary: 为指定did颁发证书
         */
        public async Task<StartDidVerifiableclaimIssureResponse> StartDidVerifiableclaimIssureAsync(StartDidVerifiableclaimIssureRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidVerifiableclaimIssureExAsync(request, headers, runtime);
        }

        /**
         * Description: 使用自己或者代理的did为指定did颁发证书
         * Summary: 为指定did颁发证书
         */
        public StartDidVerifiableclaimIssureResponse StartDidVerifiableclaimIssureEx(StartDidVerifiableclaimIssureRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVerifiableclaimIssureResponse>(DoRequest("1.0", "baas.did.verifiableclaim.issure.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 使用自己或者代理的did为指定did颁发证书
         * Summary: 为指定did颁发证书
         */
        public async Task<StartDidVerifiableclaimIssureResponse> StartDidVerifiableclaimIssureExAsync(StartDidVerifiableclaimIssureRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVerifiableclaimIssureResponse>(await DoRequestAsync("1.0", "baas.did.verifiableclaim.issure.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 验证可验证声明
         * Summary: 验证可验证声明
         */
        public StartDidVerifiableclaimVerifierResponse StartDidVerifiableclaimVerifier(StartDidVerifiableclaimVerifierRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidVerifiableclaimVerifierEx(request, headers, runtime);
        }

        /**
         * Description: 验证可验证声明
         * Summary: 验证可验证声明
         */
        public async Task<StartDidVerifiableclaimVerifierResponse> StartDidVerifiableclaimVerifierAsync(StartDidVerifiableclaimVerifierRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidVerifiableclaimVerifierExAsync(request, headers, runtime);
        }

        /**
         * Description: 验证可验证声明
         * Summary: 验证可验证声明
         */
        public StartDidVerifiableclaimVerifierResponse StartDidVerifiableclaimVerifierEx(StartDidVerifiableclaimVerifierRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVerifiableclaimVerifierResponse>(DoRequest("1.0", "baas.did.verifiableclaim.verifier.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 验证可验证声明
         * Summary: 验证可验证声明
         */
        public async Task<StartDidVerifiableclaimVerifierResponse> StartDidVerifiableclaimVerifierExAsync(StartDidVerifiableclaimVerifierRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVerifiableclaimVerifierResponse>(await DoRequestAsync("1.0", "baas.did.verifiableclaim.verifier.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询did对应的doc
         * Summary: 查询did对应的doc
         */
        public QueryDidDocResponse QueryDidDoc(QueryDidDocRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDidDocEx(request, headers, runtime);
        }

        /**
         * Description: 查询did对应的doc
         * Summary: 查询did对应的doc
         */
        public async Task<QueryDidDocResponse> QueryDidDocAsync(QueryDidDocRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDidDocExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询did对应的doc
         * Summary: 查询did对应的doc
         */
        public QueryDidDocResponse QueryDidDocEx(QueryDidDocRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidDocResponse>(DoRequest("1.0", "baas.did.doc.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询did对应的doc
         * Summary: 查询did对应的doc
         */
        public async Task<QueryDidDocResponse> QueryDidDocExAsync(QueryDidDocRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidDocResponse>(await DoRequestAsync("1.0", "baas.did.doc.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新可验证声明状态
         * Summary: 更新可验证声明状态
         */
        public UpdateDidVerifiableclaimStatusResponse UpdateDidVerifiableclaimStatus(UpdateDidVerifiableclaimStatusRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateDidVerifiableclaimStatusEx(request, headers, runtime);
        }

        /**
         * Description: 更新可验证声明状态
         * Summary: 更新可验证声明状态
         */
        public async Task<UpdateDidVerifiableclaimStatusResponse> UpdateDidVerifiableclaimStatusAsync(UpdateDidVerifiableclaimStatusRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateDidVerifiableclaimStatusExAsync(request, headers, runtime);
        }

        /**
         * Description: 更新可验证声明状态
         * Summary: 更新可验证声明状态
         */
        public UpdateDidVerifiableclaimStatusResponse UpdateDidVerifiableclaimStatusEx(UpdateDidVerifiableclaimStatusRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDidVerifiableclaimStatusResponse>(DoRequest("1.0", "baas.did.verifiableclaim.status.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新可验证声明状态
         * Summary: 更新可验证声明状态
         */
        public async Task<UpdateDidVerifiableclaimStatusResponse> UpdateDidVerifiableclaimStatusExAsync(UpdateDidVerifiableclaimStatusRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDidVerifiableclaimStatusResponse>(await DoRequestAsync("1.0", "baas.did.verifiableclaim.status.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户更新扩展字段中的扩展字段
         * Summary: 更新doc service中的扩展字段
         */
        public UpdateDidCorporateExtensionserviceResponse UpdateDidCorporateExtensionservice(UpdateDidCorporateExtensionserviceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateDidCorporateExtensionserviceEx(request, headers, runtime);
        }

        /**
         * Description: 用户更新扩展字段中的扩展字段
         * Summary: 更新doc service中的扩展字段
         */
        public async Task<UpdateDidCorporateExtensionserviceResponse> UpdateDidCorporateExtensionserviceAsync(UpdateDidCorporateExtensionserviceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateDidCorporateExtensionserviceExAsync(request, headers, runtime);
        }

        /**
         * Description: 用户更新扩展字段中的扩展字段
         * Summary: 更新doc service中的扩展字段
         */
        public UpdateDidCorporateExtensionserviceResponse UpdateDidCorporateExtensionserviceEx(UpdateDidCorporateExtensionserviceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDidCorporateExtensionserviceResponse>(DoRequest("1.0", "baas.did.corporate.extensionservice.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户更新扩展字段中的扩展字段
         * Summary: 更新doc service中的扩展字段
         */
        public async Task<UpdateDidCorporateExtensionserviceResponse> UpdateDidCorporateExtensionserviceExAsync(UpdateDidCorporateExtensionserviceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDidCorporateExtensionserviceResponse>(await DoRequestAsync("1.0", "baas.did.corporate.extensionservice.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 设置不通租户在DID中的不同扩展字段
         * Summary: 设置不通租户在DID中的不同扩展字段
         */
        public StartDidCorporateCustomerservicetypeResponse StartDidCorporateCustomerservicetype(StartDidCorporateCustomerservicetypeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidCorporateCustomerservicetypeEx(request, headers, runtime);
        }

        /**
         * Description: 设置不通租户在DID中的不同扩展字段
         * Summary: 设置不通租户在DID中的不同扩展字段
         */
        public async Task<StartDidCorporateCustomerservicetypeResponse> StartDidCorporateCustomerservicetypeAsync(StartDidCorporateCustomerservicetypeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidCorporateCustomerservicetypeExAsync(request, headers, runtime);
        }

        /**
         * Description: 设置不通租户在DID中的不同扩展字段
         * Summary: 设置不通租户在DID中的不同扩展字段
         */
        public StartDidCorporateCustomerservicetypeResponse StartDidCorporateCustomerservicetypeEx(StartDidCorporateCustomerservicetypeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCorporateCustomerservicetypeResponse>(DoRequest("1.0", "baas.did.corporate.customerservicetype.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 设置不通租户在DID中的不同扩展字段
         * Summary: 设置不通租户在DID中的不同扩展字段
         */
        public async Task<StartDidCorporateCustomerservicetypeResponse> StartDidCorporateCustomerservicetypeExAsync(StartDidCorporateCustomerservicetypeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCorporateCustomerservicetypeResponse>(await DoRequestAsync("1.0", "baas.did.corporate.customerservicetype.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 三要素实名认证
         * Summary: 三要素实名认证
         */
        public StartDidCertificationThreemetaResponse StartDidCertificationThreemeta(StartDidCertificationThreemetaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidCertificationThreemetaEx(request, headers, runtime);
        }

        /**
         * Description: 三要素实名认证
         * Summary: 三要素实名认证
         */
        public async Task<StartDidCertificationThreemetaResponse> StartDidCertificationThreemetaAsync(StartDidCertificationThreemetaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidCertificationThreemetaExAsync(request, headers, runtime);
        }

        /**
         * Description: 三要素实名认证
         * Summary: 三要素实名认证
         */
        public StartDidCertificationThreemetaResponse StartDidCertificationThreemetaEx(StartDidCertificationThreemetaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCertificationThreemetaResponse>(DoRequest("1.0", "baas.did.certification.threemeta.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 三要素实名认证
         * Summary: 三要素实名认证
         */
        public async Task<StartDidCertificationThreemetaResponse> StartDidCertificationThreemetaExAsync(StartDidCertificationThreemetaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCertificationThreemetaResponse>(await DoRequestAsync("1.0", "baas.did.certification.threemeta.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 二要素实名认证
         * Summary: 二要素实名认证
         */
        public StartDidCertificationTwometaResponse StartDidCertificationTwometa(StartDidCertificationTwometaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidCertificationTwometaEx(request, headers, runtime);
        }

        /**
         * Description: 二要素实名认证
         * Summary: 二要素实名认证
         */
        public async Task<StartDidCertificationTwometaResponse> StartDidCertificationTwometaAsync(StartDidCertificationTwometaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidCertificationTwometaExAsync(request, headers, runtime);
        }

        /**
         * Description: 二要素实名认证
         * Summary: 二要素实名认证
         */
        public StartDidCertificationTwometaResponse StartDidCertificationTwometaEx(StartDidCertificationTwometaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCertificationTwometaResponse>(DoRequest("1.0", "baas.did.certification.twometa.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 二要素实名认证
         * Summary: 二要素实名认证
         */
        public async Task<StartDidCertificationTwometaResponse> StartDidCertificationTwometaExAsync(StartDidCertificationTwometaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCertificationTwometaResponse>(await DoRequestAsync("1.0", "baas.did.certification.twometa.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过vcid查询vc内容
         * Summary: 通过vcid查询vc内容
         */
        public QueryDidVcResponse QueryDidVc(QueryDidVcRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDidVcEx(request, headers, runtime);
        }

        /**
         * Description: 通过vcid查询vc内容
         * Summary: 通过vcid查询vc内容
         */
        public async Task<QueryDidVcResponse> QueryDidVcAsync(QueryDidVcRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDidVcExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过vcid查询vc内容
         * Summary: 通过vcid查询vc内容
         */
        public QueryDidVcResponse QueryDidVcEx(QueryDidVcRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidVcResponse>(DoRequest("1.0", "baas.did.vc.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过vcid查询vc内容
         * Summary: 通过vcid查询vc内容
         */
        public async Task<QueryDidVcResponse> QueryDidVcExAsync(QueryDidVcRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidVcResponse>(await DoRequestAsync("1.0", "baas.did.vc.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 开始实人认证
         * Summary: 开始实人认证
         */
        public StartDidIdentificationFaceauthResponse StartDidIdentificationFaceauth(StartDidIdentificationFaceauthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidIdentificationFaceauthEx(request, headers, runtime);
        }

        /**
         * Description: 开始实人认证
         * Summary: 开始实人认证
         */
        public async Task<StartDidIdentificationFaceauthResponse> StartDidIdentificationFaceauthAsync(StartDidIdentificationFaceauthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidIdentificationFaceauthExAsync(request, headers, runtime);
        }

        /**
         * Description: 开始实人认证
         * Summary: 开始实人认证
         */
        public StartDidIdentificationFaceauthResponse StartDidIdentificationFaceauthEx(StartDidIdentificationFaceauthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidIdentificationFaceauthResponse>(DoRequest("1.0", "baas.did.identification.faceauth.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 开始实人认证
         * Summary: 开始实人认证
         */
        public async Task<StartDidIdentificationFaceauthResponse> StartDidIdentificationFaceauthExAsync(StartDidIdentificationFaceauthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidIdentificationFaceauthResponse>(await DoRequestAsync("1.0", "baas.did.identification.faceauth.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询实人认证结果
         * Summary: 查询实人认证结果
         */
        public QueryDidIdentificationFaceauthResponse QueryDidIdentificationFaceauth(QueryDidIdentificationFaceauthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDidIdentificationFaceauthEx(request, headers, runtime);
        }

        /**
         * Description: 查询实人认证结果
         * Summary: 查询实人认证结果
         */
        public async Task<QueryDidIdentificationFaceauthResponse> QueryDidIdentificationFaceauthAsync(QueryDidIdentificationFaceauthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDidIdentificationFaceauthExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询实人认证结果
         * Summary: 查询实人认证结果
         */
        public QueryDidIdentificationFaceauthResponse QueryDidIdentificationFaceauthEx(QueryDidIdentificationFaceauthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidIdentificationFaceauthResponse>(DoRequest("1.0", "baas.did.identification.faceauth.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询实人认证结果
         * Summary: 查询实人认证结果
         */
        public async Task<QueryDidIdentificationFaceauthResponse> QueryDidIdentificationFaceauthExAsync(QueryDidIdentificationFaceauthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidIdentificationFaceauthResponse>(await DoRequestAsync("1.0", "baas.did.identification.faceauth.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户通过该接口订阅自己关心的did事件
         * Summary: 订阅did事件服务
         */
        public StartDidNotificationConsumerResponse StartDidNotificationConsumer(StartDidNotificationConsumerRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidNotificationConsumerEx(request, headers, runtime);
        }

        /**
         * Description: 用户通过该接口订阅自己关心的did事件
         * Summary: 订阅did事件服务
         */
        public async Task<StartDidNotificationConsumerResponse> StartDidNotificationConsumerAsync(StartDidNotificationConsumerRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidNotificationConsumerExAsync(request, headers, runtime);
        }

        /**
         * Description: 用户通过该接口订阅自己关心的did事件
         * Summary: 订阅did事件服务
         */
        public StartDidNotificationConsumerResponse StartDidNotificationConsumerEx(StartDidNotificationConsumerRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidNotificationConsumerResponse>(DoRequest("1.0", "baas.did.notification.consumer.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户通过该接口订阅自己关心的did事件
         * Summary: 订阅did事件服务
         */
        public async Task<StartDidNotificationConsumerResponse> StartDidNotificationConsumerExAsync(StartDidNotificationConsumerRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidNotificationConsumerResponse>(await DoRequestAsync("1.0", "baas.did.notification.consumer.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 消费端在重启，或者需要重新拉之前的信息，需要调用这个接口重新注册
         * Summary: 消费端重新启动
         */
        public RebootDidNotificationConsumerResponse RebootDidNotificationConsumer(RebootDidNotificationConsumerRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return RebootDidNotificationConsumerEx(request, headers, runtime);
        }

        /**
         * Description: 消费端在重启，或者需要重新拉之前的信息，需要调用这个接口重新注册
         * Summary: 消费端重新启动
         */
        public async Task<RebootDidNotificationConsumerResponse> RebootDidNotificationConsumerAsync(RebootDidNotificationConsumerRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await RebootDidNotificationConsumerExAsync(request, headers, runtime);
        }

        /**
         * Description: 消费端在重启，或者需要重新拉之前的信息，需要调用这个接口重新注册
         * Summary: 消费端重新启动
         */
        public RebootDidNotificationConsumerResponse RebootDidNotificationConsumerEx(RebootDidNotificationConsumerRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<RebootDidNotificationConsumerResponse>(DoRequest("1.0", "baas.did.notification.consumer.reboot", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 消费端在重启，或者需要重新拉之前的信息，需要调用这个接口重新注册
         * Summary: 消费端重新启动
         */
        public async Task<RebootDidNotificationConsumerResponse> RebootDidNotificationConsumerExAsync(RebootDidNotificationConsumerRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<RebootDidNotificationConsumerResponse>(await DoRequestAsync("1.0", "baas.did.notification.consumer.reboot", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 向Dis申请DID号
         * Summary: 非托管模式下创建DID时，申请ID
         */
        public InitDidCorporateDirectResponse InitDidCorporateDirect(InitDidCorporateDirectRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return InitDidCorporateDirectEx(request, headers, runtime);
        }

        /**
         * Description: 向Dis申请DID号
         * Summary: 非托管模式下创建DID时，申请ID
         */
        public async Task<InitDidCorporateDirectResponse> InitDidCorporateDirectAsync(InitDidCorporateDirectRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await InitDidCorporateDirectExAsync(request, headers, runtime);
        }

        /**
         * Description: 向Dis申请DID号
         * Summary: 非托管模式下创建DID时，申请ID
         */
        public InitDidCorporateDirectResponse InitDidCorporateDirectEx(InitDidCorporateDirectRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitDidCorporateDirectResponse>(DoRequest("1.0", "baas.did.corporate.direct.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 向Dis申请DID号
         * Summary: 非托管模式下创建DID时，申请ID
         */
        public async Task<InitDidCorporateDirectResponse> InitDidCorporateDirectExAsync(InitDidCorporateDirectRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitDidCorporateDirectResponse>(await DoRequestAsync("1.0", "baas.did.corporate.direct.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 推送或者更新did doc
         * Summary: 推送或者更新did doc
         */
        public PushDidCorporateDirectResponse PushDidCorporateDirect(PushDidCorporateDirectRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return PushDidCorporateDirectEx(request, headers, runtime);
        }

        /**
         * Description: 推送或者更新did doc
         * Summary: 推送或者更新did doc
         */
        public async Task<PushDidCorporateDirectResponse> PushDidCorporateDirectAsync(PushDidCorporateDirectRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await PushDidCorporateDirectExAsync(request, headers, runtime);
        }

        /**
         * Description: 推送或者更新did doc
         * Summary: 推送或者更新did doc
         */
        public PushDidCorporateDirectResponse PushDidCorporateDirectEx(PushDidCorporateDirectRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<PushDidCorporateDirectResponse>(DoRequest("1.0", "baas.did.corporate.direct.push", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 推送或者更新did doc
         * Summary: 推送或者更新did doc
         */
        public async Task<PushDidCorporateDirectResponse> PushDidCorporateDirectExAsync(PushDidCorporateDirectRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<PushDidCorporateDirectResponse>(await DoRequestAsync("1.0", "baas.did.corporate.direct.push", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 企业申请did
         * Summary: 申请did
         */
        public InitDidCorporateIdentityResponse InitDidCorporateIdentity(InitDidCorporateIdentityRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return InitDidCorporateIdentityEx(request, headers, runtime);
        }

        /**
         * Description: 企业申请did
         * Summary: 申请did
         */
        public async Task<InitDidCorporateIdentityResponse> InitDidCorporateIdentityAsync(InitDidCorporateIdentityRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await InitDidCorporateIdentityExAsync(request, headers, runtime);
        }

        /**
         * Description: 企业申请did
         * Summary: 申请did
         */
        public InitDidCorporateIdentityResponse InitDidCorporateIdentityEx(InitDidCorporateIdentityRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitDidCorporateIdentityResponse>(DoRequest("1.0", "baas.did.corporate.identity.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 企业申请did
         * Summary: 申请did
         */
        public async Task<InitDidCorporateIdentityResponse> InitDidCorporateIdentityExAsync(InitDidCorporateIdentityRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitDidCorporateIdentityResponse>(await DoRequestAsync("1.0", "baas.did.corporate.identity.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 对authchallenge进行响应
         * Summary: 对authchallenge进行响应
         */
        public StartDidAgentChallengeresponseResponse StartDidAgentChallengeresponse(StartDidAgentChallengeresponseRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidAgentChallengeresponseEx(request, headers, runtime);
        }

        /**
         * Description: 对authchallenge进行响应
         * Summary: 对authchallenge进行响应
         */
        public async Task<StartDidAgentChallengeresponseResponse> StartDidAgentChallengeresponseAsync(StartDidAgentChallengeresponseRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidAgentChallengeresponseExAsync(request, headers, runtime);
        }

        /**
         * Description: 对authchallenge进行响应
         * Summary: 对authchallenge进行响应
         */
        public StartDidAgentChallengeresponseResponse StartDidAgentChallengeresponseEx(StartDidAgentChallengeresponseRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidAgentChallengeresponseResponse>(DoRequest("1.0", "baas.did.agent.challengeresponse.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 对authchallenge进行响应
         * Summary: 对authchallenge进行响应
         */
        public async Task<StartDidAgentChallengeresponseResponse> StartDidAgentChallengeresponseExAsync(StartDidAgentChallengeresponseRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidAgentChallengeresponseResponse>(await DoRequestAsync("1.0", "baas.did.agent.challengeresponse.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 验证Auth Response有效性接口
         * Summary: 验证Auth Response有效性
         */
        public StartDidAgentVerifyauthresponseResponse StartDidAgentVerifyauthresponse(StartDidAgentVerifyauthresponseRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidAgentVerifyauthresponseEx(request, headers, runtime);
        }

        /**
         * Description: 验证Auth Response有效性接口
         * Summary: 验证Auth Response有效性
         */
        public async Task<StartDidAgentVerifyauthresponseResponse> StartDidAgentVerifyauthresponseAsync(StartDidAgentVerifyauthresponseRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidAgentVerifyauthresponseExAsync(request, headers, runtime);
        }

        /**
         * Description: 验证Auth Response有效性接口
         * Summary: 验证Auth Response有效性
         */
        public StartDidAgentVerifyauthresponseResponse StartDidAgentVerifyauthresponseEx(StartDidAgentVerifyauthresponseRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidAgentVerifyauthresponseResponse>(DoRequest("1.0", "baas.did.agent.verifyauthresponse.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 验证Auth Response有效性接口
         * Summary: 验证Auth Response有效性
         */
        public async Task<StartDidAgentVerifyauthresponseResponse> StartDidAgentVerifyauthresponseExAsync(StartDidAgentVerifyauthresponseRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidAgentVerifyauthresponseResponse>(await DoRequestAsync("1.0", "baas.did.agent.verifyauthresponse.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 脱敏身份验证
         * Summary: 脱敏身份验证
         */
        public StartDidCertificationMaskResponse StartDidCertificationMask(StartDidCertificationMaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidCertificationMaskEx(request, headers, runtime);
        }

        /**
         * Description: 脱敏身份验证
         * Summary: 脱敏身份验证
         */
        public async Task<StartDidCertificationMaskResponse> StartDidCertificationMaskAsync(StartDidCertificationMaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidCertificationMaskExAsync(request, headers, runtime);
        }

        /**
         * Description: 脱敏身份验证
         * Summary: 脱敏身份验证
         */
        public StartDidCertificationMaskResponse StartDidCertificationMaskEx(StartDidCertificationMaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCertificationMaskResponse>(DoRequest("1.0", "baas.did.certification.mask.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 脱敏身份验证
         * Summary: 脱敏身份验证
         */
        public async Task<StartDidCertificationMaskResponse> StartDidCertificationMaskExAsync(StartDidCertificationMaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCertificationMaskResponse>(await DoRequestAsync("1.0", "baas.did.certification.mask.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 管理员为租户开通did服务
         * Summary: 管理员为租户开通did服务
         */
        public OpenDidAdminServiceResponse OpenDidAdminService(OpenDidAdminServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return OpenDidAdminServiceEx(request, headers, runtime);
        }

        /**
         * Description: 管理员为租户开通did服务
         * Summary: 管理员为租户开通did服务
         */
        public async Task<OpenDidAdminServiceResponse> OpenDidAdminServiceAsync(OpenDidAdminServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await OpenDidAdminServiceExAsync(request, headers, runtime);
        }

        /**
         * Description: 管理员为租户开通did服务
         * Summary: 管理员为租户开通did服务
         */
        public OpenDidAdminServiceResponse OpenDidAdminServiceEx(OpenDidAdminServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<OpenDidAdminServiceResponse>(DoRequest("1.0", "baas.did.admin.service.open", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 管理员为租户开通did服务
         * Summary: 管理员为租户开通did服务
         */
        public async Task<OpenDidAdminServiceResponse> OpenDidAdminServiceExAsync(OpenDidAdminServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<OpenDidAdminServiceResponse>(await DoRequestAsync("1.0", "baas.did.admin.service.open", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 针对指定租户关闭dis服务
         * Summary: 针对指定租户关闭dis服务
         */
        public StopDidAdminServiceResponse StopDidAdminService(StopDidAdminServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StopDidAdminServiceEx(request, headers, runtime);
        }

        /**
         * Description: 针对指定租户关闭dis服务
         * Summary: 针对指定租户关闭dis服务
         */
        public async Task<StopDidAdminServiceResponse> StopDidAdminServiceAsync(StopDidAdminServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StopDidAdminServiceExAsync(request, headers, runtime);
        }

        /**
         * Description: 针对指定租户关闭dis服务
         * Summary: 针对指定租户关闭dis服务
         */
        public StopDidAdminServiceResponse StopDidAdminServiceEx(StopDidAdminServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StopDidAdminServiceResponse>(DoRequest("1.0", "baas.did.admin.service.stop", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 针对指定租户关闭dis服务
         * Summary: 针对指定租户关闭dis服务
         */
        public async Task<StopDidAdminServiceResponse> StopDidAdminServiceExAsync(StopDidAdminServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StopDidAdminServiceResponse>(await DoRequestAsync("1.0", "baas.did.admin.service.stop", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 为被托管人进行代理签名
         * Summary: 为被托管人进行代理签名
         */
        public StartDidSignatureAgentResponse StartDidSignatureAgent(StartDidSignatureAgentRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidSignatureAgentEx(request, headers, runtime);
        }

        /**
         * Description: 为被托管人进行代理签名
         * Summary: 为被托管人进行代理签名
         */
        public async Task<StartDidSignatureAgentResponse> StartDidSignatureAgentAsync(StartDidSignatureAgentRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidSignatureAgentExAsync(request, headers, runtime);
        }

        /**
         * Description: 为被托管人进行代理签名
         * Summary: 为被托管人进行代理签名
         */
        public StartDidSignatureAgentResponse StartDidSignatureAgentEx(StartDidSignatureAgentRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidSignatureAgentResponse>(DoRequest("1.0", "baas.did.signature.agent.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 为被托管人进行代理签名
         * Summary: 为被托管人进行代理签名
         */
        public async Task<StartDidSignatureAgentResponse> StartDidSignatureAgentExAsync(StartDidSignatureAgentRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidSignatureAgentResponse>(await DoRequestAsync("1.0", "baas.did.signature.agent.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 对字符串进行验签
         * Summary: 对字符串进行验签
         */
        public CheckDidSignResponse CheckDidSign(CheckDidSignRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CheckDidSignEx(request, headers, runtime);
        }

        /**
         * Description: 对字符串进行验签
         * Summary: 对字符串进行验签
         */
        public async Task<CheckDidSignResponse> CheckDidSignAsync(CheckDidSignRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CheckDidSignExAsync(request, headers, runtime);
        }

        /**
         * Description: 对字符串进行验签
         * Summary: 对字符串进行验签
         */
        public CheckDidSignResponse CheckDidSignEx(CheckDidSignRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CheckDidSignResponse>(DoRequest("1.0", "baas.did.sign.check", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 对字符串进行验签
         * Summary: 对字符串进行验签
         */
        public async Task<CheckDidSignResponse> CheckDidSignExAsync(CheckDidSignRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CheckDidSignResponse>(await DoRequestAsync("1.0", "baas.did.sign.check", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 根据用户指定路径，展示部分可见的声明，并可以被验证
         * Summary: 根据用户指定路径，展示部分可见声明
         */
        public StartDidZkpverifiableclaimVisibilityResponse StartDidZkpverifiableclaimVisibility(StartDidZkpverifiableclaimVisibilityRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidZkpverifiableclaimVisibilityEx(request, headers, runtime);
        }

        /**
         * Description: 根据用户指定路径，展示部分可见的声明，并可以被验证
         * Summary: 根据用户指定路径，展示部分可见声明
         */
        public async Task<StartDidZkpverifiableclaimVisibilityResponse> StartDidZkpverifiableclaimVisibilityAsync(StartDidZkpverifiableclaimVisibilityRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidZkpverifiableclaimVisibilityExAsync(request, headers, runtime);
        }

        /**
         * Description: 根据用户指定路径，展示部分可见的声明，并可以被验证
         * Summary: 根据用户指定路径，展示部分可见声明
         */
        public StartDidZkpverifiableclaimVisibilityResponse StartDidZkpverifiableclaimVisibilityEx(StartDidZkpverifiableclaimVisibilityRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidZkpverifiableclaimVisibilityResponse>(DoRequest("1.0", "baas.did.zkpverifiableclaim.visibility.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 根据用户指定路径，展示部分可见的声明，并可以被验证
         * Summary: 根据用户指定路径，展示部分可见声明
         */
        public async Task<StartDidZkpverifiableclaimVisibilityResponse> StartDidZkpverifiableclaimVisibilityExAsync(StartDidZkpverifiableclaimVisibilityRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidZkpverifiableclaimVisibilityResponse>(await DoRequestAsync("1.0", "baas.did.zkpverifiableclaim.visibility.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 为指定did添加外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
         * Summary: 为指定did添加外键关联
         */
        public StartDidAgentSidekeyResponse StartDidAgentSidekey(StartDidAgentSidekeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidAgentSidekeyEx(request, headers, runtime);
        }

        /**
         * Description: 为指定did添加外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
         * Summary: 为指定did添加外键关联
         */
        public async Task<StartDidAgentSidekeyResponse> StartDidAgentSidekeyAsync(StartDidAgentSidekeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidAgentSidekeyExAsync(request, headers, runtime);
        }

        /**
         * Description: 为指定did添加外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
         * Summary: 为指定did添加外键关联
         */
        public StartDidAgentSidekeyResponse StartDidAgentSidekeyEx(StartDidAgentSidekeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidAgentSidekeyResponse>(DoRequest("1.0", "baas.did.agent.sidekey.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 为指定did添加外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
         * Summary: 为指定did添加外键关联
         */
        public async Task<StartDidAgentSidekeyResponse> StartDidAgentSidekeyExAsync(StartDidAgentSidekeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidAgentSidekeyResponse>(await DoRequestAsync("1.0", "baas.did.agent.sidekey.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 为指定did更新外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
         * Summary: 更新指定did的外键
         */
        public UpdateDidAgentSidekeyResponse UpdateDidAgentSidekey(UpdateDidAgentSidekeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateDidAgentSidekeyEx(request, headers, runtime);
        }

        /**
         * Description: 为指定did更新外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
         * Summary: 更新指定did的外键
         */
        public async Task<UpdateDidAgentSidekeyResponse> UpdateDidAgentSidekeyAsync(UpdateDidAgentSidekeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateDidAgentSidekeyExAsync(request, headers, runtime);
        }

        /**
         * Description: 为指定did更新外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
         * Summary: 更新指定did的外键
         */
        public UpdateDidAgentSidekeyResponse UpdateDidAgentSidekeyEx(UpdateDidAgentSidekeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDidAgentSidekeyResponse>(DoRequest("1.0", "baas.did.agent.sidekey.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 为指定did更新外键关联，该接口必须被did自己调用或者did的认证密钥管理人调用。
         * Summary: 更新指定did的外键
         */
        public async Task<UpdateDidAgentSidekeyResponse> UpdateDidAgentSidekeyExAsync(UpdateDidAgentSidekeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDidAgentSidekeyResponse>(await DoRequestAsync("1.0", "baas.did.agent.sidekey.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 代理创建did并创建外键
         * Summary: 代理创建did并创建外键
         */
        public StartDidCorporateAgentcreatewithsidekeyResponse StartDidCorporateAgentcreatewithsidekey(StartDidCorporateAgentcreatewithsidekeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidCorporateAgentcreatewithsidekeyEx(request, headers, runtime);
        }

        /**
         * Description: 代理创建did并创建外键
         * Summary: 代理创建did并创建外键
         */
        public async Task<StartDidCorporateAgentcreatewithsidekeyResponse> StartDidCorporateAgentcreatewithsidekeyAsync(StartDidCorporateAgentcreatewithsidekeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidCorporateAgentcreatewithsidekeyExAsync(request, headers, runtime);
        }

        /**
         * Description: 代理创建did并创建外键
         * Summary: 代理创建did并创建外键
         */
        public StartDidCorporateAgentcreatewithsidekeyResponse StartDidCorporateAgentcreatewithsidekeyEx(StartDidCorporateAgentcreatewithsidekeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCorporateAgentcreatewithsidekeyResponse>(DoRequest("1.0", "baas.did.corporate.agentcreatewithsidekey.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 代理创建did并创建外键
         * Summary: 代理创建did并创建外键
         */
        public async Task<StartDidCorporateAgentcreatewithsidekeyResponse> StartDidCorporateAgentcreatewithsidekeyExAsync(StartDidCorporateAgentcreatewithsidekeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCorporateAgentcreatewithsidekeyResponse>(await DoRequestAsync("1.0", "baas.did.corporate.agentcreatewithsidekey.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新doc 中的扩展字段并更新外键
         * Summary: 更新doc 中的扩展字段并更新外键
         */
        public UpdateDidCorporateExtensionservicewithsidekeyResponse UpdateDidCorporateExtensionservicewithsidekey(UpdateDidCorporateExtensionservicewithsidekeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateDidCorporateExtensionservicewithsidekeyEx(request, headers, runtime);
        }

        /**
         * Description: 更新doc 中的扩展字段并更新外键
         * Summary: 更新doc 中的扩展字段并更新外键
         */
        public async Task<UpdateDidCorporateExtensionservicewithsidekeyResponse> UpdateDidCorporateExtensionservicewithsidekeyAsync(UpdateDidCorporateExtensionservicewithsidekeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateDidCorporateExtensionservicewithsidekeyExAsync(request, headers, runtime);
        }

        /**
         * Description: 更新doc 中的扩展字段并更新外键
         * Summary: 更新doc 中的扩展字段并更新外键
         */
        public UpdateDidCorporateExtensionservicewithsidekeyResponse UpdateDidCorporateExtensionservicewithsidekeyEx(UpdateDidCorporateExtensionservicewithsidekeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDidCorporateExtensionservicewithsidekeyResponse>(DoRequest("1.0", "baas.did.corporate.extensionservicewithsidekey.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新doc 中的扩展字段并更新外键
         * Summary: 更新doc 中的扩展字段并更新外键
         */
        public async Task<UpdateDidCorporateExtensionservicewithsidekeyResponse> UpdateDidCorporateExtensionservicewithsidekeyExAsync(UpdateDidCorporateExtensionservicewithsidekeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDidCorporateExtensionservicewithsidekeyResponse>(await DoRequestAsync("1.0", "baas.did.corporate.extensionservicewithsidekey.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过sidekey方式查询对应doc
         * Summary: 通过sidekey方式查询对应doc
         */
        public QueryDidDocSidekeyResponse QueryDidDocSidekey(QueryDidDocSidekeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDidDocSidekeyEx(request, headers, runtime);
        }

        /**
         * Description: 通过sidekey方式查询对应doc
         * Summary: 通过sidekey方式查询对应doc
         */
        public async Task<QueryDidDocSidekeyResponse> QueryDidDocSidekeyAsync(QueryDidDocSidekeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDidDocSidekeyExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过sidekey方式查询对应doc
         * Summary: 通过sidekey方式查询对应doc
         */
        public QueryDidDocSidekeyResponse QueryDidDocSidekeyEx(QueryDidDocSidekeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidDocSidekeyResponse>(DoRequest("1.0", "baas.did.doc.sidekey.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过sidekey方式查询对应doc
         * Summary: 通过sidekey方式查询对应doc
         */
        public async Task<QueryDidDocSidekeyResponse> QueryDidDocSidekeyExAsync(QueryDidDocSidekeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidDocSidekeyResponse>(await DoRequestAsync("1.0", "baas.did.doc.sidekey.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 代理创建个人did并创建外键
         * Summary: 代理创建个人did并创建外键
         */
        public StartDidPersonAgentcreatewithsidekeyResponse StartDidPersonAgentcreatewithsidekey(StartDidPersonAgentcreatewithsidekeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidPersonAgentcreatewithsidekeyEx(request, headers, runtime);
        }

        /**
         * Description: 代理创建个人did并创建外键
         * Summary: 代理创建个人did并创建外键
         */
        public async Task<StartDidPersonAgentcreatewithsidekeyResponse> StartDidPersonAgentcreatewithsidekeyAsync(StartDidPersonAgentcreatewithsidekeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidPersonAgentcreatewithsidekeyExAsync(request, headers, runtime);
        }

        /**
         * Description: 代理创建个人did并创建外键
         * Summary: 代理创建个人did并创建外键
         */
        public StartDidPersonAgentcreatewithsidekeyResponse StartDidPersonAgentcreatewithsidekeyEx(StartDidPersonAgentcreatewithsidekeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidPersonAgentcreatewithsidekeyResponse>(DoRequest("1.0", "baas.did.person.agentcreatewithsidekey.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 代理创建个人did并创建外键
         * Summary: 代理创建个人did并创建外键
         */
        public async Task<StartDidPersonAgentcreatewithsidekeyResponse> StartDidPersonAgentcreatewithsidekeyExAsync(StartDidPersonAgentcreatewithsidekeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidPersonAgentcreatewithsidekeyResponse>(await DoRequestAsync("1.0", "baas.did.person.agentcreatewithsidekey.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 代理创建IOT did
         * Summary: 代理创建IOT did
         */
        public StartDidIotAgentcreateResponse StartDidIotAgentcreate(StartDidIotAgentcreateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidIotAgentcreateEx(request, headers, runtime);
        }

        /**
         * Description: 代理创建IOT did
         * Summary: 代理创建IOT did
         */
        public async Task<StartDidIotAgentcreateResponse> StartDidIotAgentcreateAsync(StartDidIotAgentcreateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidIotAgentcreateExAsync(request, headers, runtime);
        }

        /**
         * Description: 代理创建IOT did
         * Summary: 代理创建IOT did
         */
        public StartDidIotAgentcreateResponse StartDidIotAgentcreateEx(StartDidIotAgentcreateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidIotAgentcreateResponse>(DoRequest("1.0", "baas.did.iot.agentcreate.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 代理创建IOT did
         * Summary: 代理创建IOT did
         */
        public async Task<StartDidIotAgentcreateResponse> StartDidIotAgentcreateExAsync(StartDidIotAgentcreateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidIotAgentcreateResponse>(await DoRequestAsync("1.0", "baas.did.iot.agentcreate.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 代理创建IOT did并创建外键
         * Summary: 代理创建IOT did并创建外键
         */
        public StartDidIotAgentcreatewithsidekeyResponse StartDidIotAgentcreatewithsidekey(StartDidIotAgentcreatewithsidekeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidIotAgentcreatewithsidekeyEx(request, headers, runtime);
        }

        /**
         * Description: 代理创建IOT did并创建外键
         * Summary: 代理创建IOT did并创建外键
         */
        public async Task<StartDidIotAgentcreatewithsidekeyResponse> StartDidIotAgentcreatewithsidekeyAsync(StartDidIotAgentcreatewithsidekeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidIotAgentcreatewithsidekeyExAsync(request, headers, runtime);
        }

        /**
         * Description: 代理创建IOT did并创建外键
         * Summary: 代理创建IOT did并创建外键
         */
        public StartDidIotAgentcreatewithsidekeyResponse StartDidIotAgentcreatewithsidekeyEx(StartDidIotAgentcreatewithsidekeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidIotAgentcreatewithsidekeyResponse>(DoRequest("1.0", "baas.did.iot.agentcreatewithsidekey.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 代理创建IOT did并创建外键
         * Summary: 代理创建IOT did并创建外键
         */
        public async Task<StartDidIotAgentcreatewithsidekeyResponse> StartDidIotAgentcreatewithsidekeyExAsync(StartDidIotAgentcreatewithsidekeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidIotAgentcreatewithsidekeyResponse>(await DoRequestAsync("1.0", "baas.did.iot.agentcreatewithsidekey.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新IOT类did的扩展字段并更新外键
         * Summary: 更新IOT类did的扩展字段并更新外键
         */
        public UpdateDidIotExtensionservicewithsidekeyResponse UpdateDidIotExtensionservicewithsidekey(UpdateDidIotExtensionservicewithsidekeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateDidIotExtensionservicewithsidekeyEx(request, headers, runtime);
        }

        /**
         * Description: 更新IOT类did的扩展字段并更新外键
         * Summary: 更新IOT类did的扩展字段并更新外键
         */
        public async Task<UpdateDidIotExtensionservicewithsidekeyResponse> UpdateDidIotExtensionservicewithsidekeyAsync(UpdateDidIotExtensionservicewithsidekeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateDidIotExtensionservicewithsidekeyExAsync(request, headers, runtime);
        }

        /**
         * Description: 更新IOT类did的扩展字段并更新外键
         * Summary: 更新IOT类did的扩展字段并更新外键
         */
        public UpdateDidIotExtensionservicewithsidekeyResponse UpdateDidIotExtensionservicewithsidekeyEx(UpdateDidIotExtensionservicewithsidekeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDidIotExtensionservicewithsidekeyResponse>(DoRequest("1.0", "baas.did.iot.extensionservicewithsidekey.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新IOT类did的扩展字段并更新外键
         * Summary: 更新IOT类did的扩展字段并更新外键
         */
        public async Task<UpdateDidIotExtensionservicewithsidekeyResponse> UpdateDidIotExtensionservicewithsidekeyExAsync(UpdateDidIotExtensionservicewithsidekeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDidIotExtensionservicewithsidekeyResponse>(await DoRequestAsync("1.0", "baas.did.iot.extensionservicewithsidekey.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新个人did中的扩展字段并更新外键
         * Summary: 更新个人did中的扩展字段并更新外键
         */
        public UpdateDidPersonExtensionservicewithsidekeyResponse UpdateDidPersonExtensionservicewithsidekey(UpdateDidPersonExtensionservicewithsidekeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateDidPersonExtensionservicewithsidekeyEx(request, headers, runtime);
        }

        /**
         * Description: 更新个人did中的扩展字段并更新外键
         * Summary: 更新个人did中的扩展字段并更新外键
         */
        public async Task<UpdateDidPersonExtensionservicewithsidekeyResponse> UpdateDidPersonExtensionservicewithsidekeyAsync(UpdateDidPersonExtensionservicewithsidekeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateDidPersonExtensionservicewithsidekeyExAsync(request, headers, runtime);
        }

        /**
         * Description: 更新个人did中的扩展字段并更新外键
         * Summary: 更新个人did中的扩展字段并更新外键
         */
        public UpdateDidPersonExtensionservicewithsidekeyResponse UpdateDidPersonExtensionservicewithsidekeyEx(UpdateDidPersonExtensionservicewithsidekeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDidPersonExtensionservicewithsidekeyResponse>(DoRequest("1.0", "baas.did.person.extensionservicewithsidekey.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新个人did中的扩展字段并更新外键
         * Summary: 更新个人did中的扩展字段并更新外键
         */
        public async Task<UpdateDidPersonExtensionservicewithsidekeyResponse> UpdateDidPersonExtensionservicewithsidekeyExAsync(UpdateDidPersonExtensionservicewithsidekeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDidPersonExtensionservicewithsidekeyResponse>(await DoRequestAsync("1.0", "baas.did.person.extensionservicewithsidekey.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过个人三要素验证后创建个人did，若未通过个人三要素验证，则不创建did并报错
         * Summary: 通过个人三要素验证后创建个人did
         */
        public CreateDidPersonWiththreemetaResponse CreateDidPersonWiththreemeta(CreateDidPersonWiththreemetaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDidPersonWiththreemetaEx(request, headers, runtime);
        }

        /**
         * Description: 通过个人三要素验证后创建个人did，若未通过个人三要素验证，则不创建did并报错
         * Summary: 通过个人三要素验证后创建个人did
         */
        public async Task<CreateDidPersonWiththreemetaResponse> CreateDidPersonWiththreemetaAsync(CreateDidPersonWiththreemetaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDidPersonWiththreemetaExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过个人三要素验证后创建个人did，若未通过个人三要素验证，则不创建did并报错
         * Summary: 通过个人三要素验证后创建个人did
         */
        public CreateDidPersonWiththreemetaResponse CreateDidPersonWiththreemetaEx(CreateDidPersonWiththreemetaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidPersonWiththreemetaResponse>(DoRequest("1.0", "baas.did.person.withthreemeta.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过个人三要素验证后创建个人did，若未通过个人三要素验证，则不创建did并报错
         * Summary: 通过个人三要素验证后创建个人did
         */
        public async Task<CreateDidPersonWiththreemetaResponse> CreateDidPersonWiththreemetaExAsync(CreateDidPersonWiththreemetaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidPersonWiththreemetaResponse>(await DoRequestAsync("1.0", "baas.did.person.withthreemeta.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过企业三要素验证后创建企业did，若未通过企业三要素验证，则不创建did并报错
         * Summary: 通过企业三要素验证后创建企业did
         */
        public CreateDidCorporateWiththreemetaResponse CreateDidCorporateWiththreemeta(CreateDidCorporateWiththreemetaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDidCorporateWiththreemetaEx(request, headers, runtime);
        }

        /**
         * Description: 通过企业三要素验证后创建企业did，若未通过企业三要素验证，则不创建did并报错
         * Summary: 通过企业三要素验证后创建企业did
         */
        public async Task<CreateDidCorporateWiththreemetaResponse> CreateDidCorporateWiththreemetaAsync(CreateDidCorporateWiththreemetaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDidCorporateWiththreemetaExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过企业三要素验证后创建企业did，若未通过企业三要素验证，则不创建did并报错
         * Summary: 通过企业三要素验证后创建企业did
         */
        public CreateDidCorporateWiththreemetaResponse CreateDidCorporateWiththreemetaEx(CreateDidCorporateWiththreemetaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidCorporateWiththreemetaResponse>(DoRequest("1.0", "baas.did.corporate.withthreemeta.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过企业三要素验证后创建企业did，若未通过企业三要素验证，则不创建did并报错
         * Summary: 通过企业三要素验证后创建企业did
         */
        public async Task<CreateDidCorporateWiththreemetaResponse> CreateDidCorporateWiththreemetaExAsync(CreateDidCorporateWiththreemetaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidCorporateWiththreemetaResponse>(await DoRequestAsync("1.0", "baas.did.corporate.withthreemeta.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 使用自己或者代理的did为指定did颁发证书，同时在VC Repository中对证书VC进行存储。
        支持授权管理，只有被授权的did未来才可以访问获取此颁发的证书数据。
         * Summary: 指定did颁发证书，并存储
         */
        public StartDidVcrepositoryIssueResponse StartDidVcrepositoryIssue(StartDidVcrepositoryIssueRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidVcrepositoryIssueEx(request, headers, runtime);
        }

        /**
         * Description: 使用自己或者代理的did为指定did颁发证书，同时在VC Repository中对证书VC进行存储。
        支持授权管理，只有被授权的did未来才可以访问获取此颁发的证书数据。
         * Summary: 指定did颁发证书，并存储
         */
        public async Task<StartDidVcrepositoryIssueResponse> StartDidVcrepositoryIssueAsync(StartDidVcrepositoryIssueRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidVcrepositoryIssueExAsync(request, headers, runtime);
        }

        /**
         * Description: 使用自己或者代理的did为指定did颁发证书，同时在VC Repository中对证书VC进行存储。
        支持授权管理，只有被授权的did未来才可以访问获取此颁发的证书数据。
         * Summary: 指定did颁发证书，并存储
         */
        public StartDidVcrepositoryIssueResponse StartDidVcrepositoryIssueEx(StartDidVcrepositoryIssueRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVcrepositoryIssueResponse>(DoRequest("1.0", "baas.did.vcrepository.issue.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 使用自己或者代理的did为指定did颁发证书，同时在VC Repository中对证书VC进行存储。
        支持授权管理，只有被授权的did未来才可以访问获取此颁发的证书数据。
         * Summary: 指定did颁发证书，并存储
         */
        public async Task<StartDidVcrepositoryIssueResponse> StartDidVcrepositoryIssueExAsync(StartDidVcrepositoryIssueRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVcrepositoryIssueResponse>(await DoRequestAsync("1.0", "baas.did.vcrepository.issue.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用方不知道目标VC的verifiable_claim_id，则通过配置目标VC的subject_did、issuer_did 和 过滤字段来查询并读取。
        如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
         * Summary: 读取目标证书数据
         */
        public StartDidVcrepositoryReadResponse StartDidVcrepositoryRead(StartDidVcrepositoryReadRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidVcrepositoryReadEx(request, headers, runtime);
        }

        /**
         * Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用方不知道目标VC的verifiable_claim_id，则通过配置目标VC的subject_did、issuer_did 和 过滤字段来查询并读取。
        如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
         * Summary: 读取目标证书数据
         */
        public async Task<StartDidVcrepositoryReadResponse> StartDidVcrepositoryReadAsync(StartDidVcrepositoryReadRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidVcrepositoryReadExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用方不知道目标VC的verifiable_claim_id，则通过配置目标VC的subject_did、issuer_did 和 过滤字段来查询并读取。
        如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
         * Summary: 读取目标证书数据
         */
        public StartDidVcrepositoryReadResponse StartDidVcrepositoryReadEx(StartDidVcrepositoryReadRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVcrepositoryReadResponse>(DoRequest("1.0", "baas.did.vcrepository.read.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用方不知道目标VC的verifiable_claim_id，则通过配置目标VC的subject_did、issuer_did 和 过滤字段来查询并读取。
        如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
         * Summary: 读取目标证书数据
         */
        public async Task<StartDidVcrepositoryReadResponse> StartDidVcrepositoryReadExAsync(StartDidVcrepositoryReadRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVcrepositoryReadResponse>(await DoRequestAsync("1.0", "baas.did.vcrepository.read.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 调用者需是目标VC的拥有者，也就是目标VC内容中的subject。
        授权新的did读取目标VC的权限。
         * Summary: 对已有vc新增授权did
         */
        public StartDidVcrepositoryAuthResponse StartDidVcrepositoryAuth(StartDidVcrepositoryAuthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidVcrepositoryAuthEx(request, headers, runtime);
        }

        /**
         * Description: 调用者需是目标VC的拥有者，也就是目标VC内容中的subject。
        授权新的did读取目标VC的权限。
         * Summary: 对已有vc新增授权did
         */
        public async Task<StartDidVcrepositoryAuthResponse> StartDidVcrepositoryAuthAsync(StartDidVcrepositoryAuthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidVcrepositoryAuthExAsync(request, headers, runtime);
        }

        /**
         * Description: 调用者需是目标VC的拥有者，也就是目标VC内容中的subject。
        授权新的did读取目标VC的权限。
         * Summary: 对已有vc新增授权did
         */
        public StartDidVcrepositoryAuthResponse StartDidVcrepositoryAuthEx(StartDidVcrepositoryAuthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVcrepositoryAuthResponse>(DoRequest("1.0", "baas.did.vcrepository.auth.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 调用者需是目标VC的拥有者，也就是目标VC内容中的subject。
        授权新的did读取目标VC的权限。
         * Summary: 对已有vc新增授权did
         */
        public async Task<StartDidVcrepositoryAuthResponse> StartDidVcrepositoryAuthExAsync(StartDidVcrepositoryAuthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVcrepositoryAuthResponse>(await DoRequestAsync("1.0", "baas.did.vcrepository.auth.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过配置目标VC的subject_did 和 过滤字段来查询并读取。
        如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
         * Summary: 查询过滤并读取目标证书数据
         */
        public StartDidVcrepositoryFilterandreadResponse StartDidVcrepositoryFilterandread(StartDidVcrepositoryFilterandreadRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidVcrepositoryFilterandreadEx(request, headers, runtime);
        }

        /**
         * Description: 通过配置目标VC的subject_did 和 过滤字段来查询并读取。
        如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
         * Summary: 查询过滤并读取目标证书数据
         */
        public async Task<StartDidVcrepositoryFilterandreadResponse> StartDidVcrepositoryFilterandreadAsync(StartDidVcrepositoryFilterandreadRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidVcrepositoryFilterandreadExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过配置目标VC的subject_did 和 过滤字段来查询并读取。
        如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
         * Summary: 查询过滤并读取目标证书数据
         */
        public StartDidVcrepositoryFilterandreadResponse StartDidVcrepositoryFilterandreadEx(StartDidVcrepositoryFilterandreadRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVcrepositoryFilterandreadResponse>(DoRequest("1.0", "baas.did.vcrepository.filterandread.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过配置目标VC的subject_did 和 过滤字段来查询并读取。
        如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
         * Summary: 查询过滤并读取目标证书数据
         */
        public async Task<StartDidVcrepositoryFilterandreadResponse> StartDidVcrepositoryFilterandreadExAsync(StartDidVcrepositoryFilterandreadRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVcrepositoryFilterandreadResponse>(await DoRequestAsync("1.0", "baas.did.vcrepository.filterandread.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
        注意通常verifiable_claim_id是“vc:mychain:”为前缀。
         * Summary: 通过vcid读取目标证书数据
         */
        public StartDidVcrepositoryReadwithvcidResponse StartDidVcrepositoryReadwithvcid(StartDidVcrepositoryReadwithvcidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidVcrepositoryReadwithvcidEx(request, headers, runtime);
        }

        /**
         * Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
        注意通常verifiable_claim_id是“vc:mychain:”为前缀。
         * Summary: 通过vcid读取目标证书数据
         */
        public async Task<StartDidVcrepositoryReadwithvcidResponse> StartDidVcrepositoryReadwithvcidAsync(StartDidVcrepositoryReadwithvcidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidVcrepositoryReadwithvcidExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
        注意通常verifiable_claim_id是“vc:mychain:”为前缀。
         * Summary: 通过vcid读取目标证书数据
         */
        public StartDidVcrepositoryReadwithvcidResponse StartDidVcrepositoryReadwithvcidEx(StartDidVcrepositoryReadwithvcidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVcrepositoryReadwithvcidResponse>(DoRequest("1.0", "baas.did.vcrepository.readwithvcid.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过提供verifiable_claim_id来读取目标VC内容，如果调用者不在目标VC的授权名单中，则无法读取目标VC内容。
        注意通常verifiable_claim_id是“vc:mychain:”为前缀。
         * Summary: 通过vcid读取目标证书数据
         */
        public async Task<StartDidVcrepositoryReadwithvcidResponse> StartDidVcrepositoryReadwithvcidExAsync(StartDidVcrepositoryReadwithvcidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVcrepositoryReadwithvcidResponse>(await DoRequestAsync("1.0", "baas.did.vcrepository.readwithvcid.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 如果业务方在颁发证书VC时，使用了自定义的verifiable_claim_id，则使用此id来读取目标证书内容。
        注意：通常自定义的verifiable_claim_id，不是“vc:mychain:”前缀开始。
         * Summary: 通过自定义id读取目标证书内容
         */
        public StartDidVcrepositoryReadwithdefineidResponse StartDidVcrepositoryReadwithdefineid(StartDidVcrepositoryReadwithdefineidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidVcrepositoryReadwithdefineidEx(request, headers, runtime);
        }

        /**
         * Description: 如果业务方在颁发证书VC时，使用了自定义的verifiable_claim_id，则使用此id来读取目标证书内容。
        注意：通常自定义的verifiable_claim_id，不是“vc:mychain:”前缀开始。
         * Summary: 通过自定义id读取目标证书内容
         */
        public async Task<StartDidVcrepositoryReadwithdefineidResponse> StartDidVcrepositoryReadwithdefineidAsync(StartDidVcrepositoryReadwithdefineidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidVcrepositoryReadwithdefineidExAsync(request, headers, runtime);
        }

        /**
         * Description: 如果业务方在颁发证书VC时，使用了自定义的verifiable_claim_id，则使用此id来读取目标证书内容。
        注意：通常自定义的verifiable_claim_id，不是“vc:mychain:”前缀开始。
         * Summary: 通过自定义id读取目标证书内容
         */
        public StartDidVcrepositoryReadwithdefineidResponse StartDidVcrepositoryReadwithdefineidEx(StartDidVcrepositoryReadwithdefineidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVcrepositoryReadwithdefineidResponse>(DoRequest("1.0", "baas.did.vcrepository.readwithdefineid.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 如果业务方在颁发证书VC时，使用了自定义的verifiable_claim_id，则使用此id来读取目标证书内容。
        注意：通常自定义的verifiable_claim_id，不是“vc:mychain:”前缀开始。
         * Summary: 通过自定义id读取目标证书内容
         */
        public async Task<StartDidVcrepositoryReadwithdefineidResponse> StartDidVcrepositoryReadwithdefineidExAsync(StartDidVcrepositoryReadwithdefineidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVcrepositoryReadwithdefineidResponse>(await DoRequestAsync("1.0", "baas.did.vcrepository.readwithdefineid.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过提供verifiable_claim_id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常verifiable_claim_id是“vc:mychain:”为前缀。
         * Summary: 通过vcid对目标证书追加授权
         */
        public StartDidVcrepositoryAuthwithvcidResponse StartDidVcrepositoryAuthwithvcid(StartDidVcrepositoryAuthwithvcidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidVcrepositoryAuthwithvcidEx(request, headers, runtime);
        }

        /**
         * Description: 通过提供verifiable_claim_id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常verifiable_claim_id是“vc:mychain:”为前缀。
         * Summary: 通过vcid对目标证书追加授权
         */
        public async Task<StartDidVcrepositoryAuthwithvcidResponse> StartDidVcrepositoryAuthwithvcidAsync(StartDidVcrepositoryAuthwithvcidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidVcrepositoryAuthwithvcidExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过提供verifiable_claim_id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常verifiable_claim_id是“vc:mychain:”为前缀。
         * Summary: 通过vcid对目标证书追加授权
         */
        public StartDidVcrepositoryAuthwithvcidResponse StartDidVcrepositoryAuthwithvcidEx(StartDidVcrepositoryAuthwithvcidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVcrepositoryAuthwithvcidResponse>(DoRequest("1.0", "baas.did.vcrepository.authwithvcid.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过提供verifiable_claim_id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常verifiable_claim_id是“vc:mychain:”为前缀。
         * Summary: 通过vcid对目标证书追加授权
         */
        public async Task<StartDidVcrepositoryAuthwithvcidResponse> StartDidVcrepositoryAuthwithvcidExAsync(StartDidVcrepositoryAuthwithvcidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVcrepositoryAuthwithvcidResponse>(await DoRequestAsync("1.0", "baas.did.vcrepository.authwithvcid.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过提供业务方自定义id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常自定义id不是“vc:mychain:”前缀。
         * Summary: 通过自定义id对目标证书追加授权
         */
        public StartDidVcrepositoryAuthwithdefineidResponse StartDidVcrepositoryAuthwithdefineid(StartDidVcrepositoryAuthwithdefineidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidVcrepositoryAuthwithdefineidEx(request, headers, runtime);
        }

        /**
         * Description: 通过提供业务方自定义id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常自定义id不是“vc:mychain:”前缀。
         * Summary: 通过自定义id对目标证书追加授权
         */
        public async Task<StartDidVcrepositoryAuthwithdefineidResponse> StartDidVcrepositoryAuthwithdefineidAsync(StartDidVcrepositoryAuthwithdefineidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidVcrepositoryAuthwithdefineidExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过提供业务方自定义id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常自定义id不是“vc:mychain:”前缀。
         * Summary: 通过自定义id对目标证书追加授权
         */
        public StartDidVcrepositoryAuthwithdefineidResponse StartDidVcrepositoryAuthwithdefineidEx(StartDidVcrepositoryAuthwithdefineidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVcrepositoryAuthwithdefineidResponse>(DoRequest("1.0", "baas.did.vcrepository.authwithdefineid.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过提供业务方自定义id来找到目标VC内容并追加授权did列表，只有调用者是目标VC的subject才能操作。 注意通常自定义id不是“vc:mychain:”前缀。
         * Summary: 通过自定义id对目标证书追加授权
         */
        public async Task<StartDidVcrepositoryAuthwithdefineidResponse> StartDidVcrepositoryAuthwithdefineidExAsync(StartDidVcrepositoryAuthwithdefineidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVcrepositoryAuthwithdefineidResponse>(await DoRequestAsync("1.0", "baas.did.vcrepository.authwithdefineid.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 注册自定义的服务类型，目前只有租户did可以调用
         * Summary: 注册自定义服务类型
         */
        public StartDidAgentServicetypeResponse StartDidAgentServicetype(StartDidAgentServicetypeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidAgentServicetypeEx(request, headers, runtime);
        }

        /**
         * Description: 注册自定义的服务类型，目前只有租户did可以调用
         * Summary: 注册自定义服务类型
         */
        public async Task<StartDidAgentServicetypeResponse> StartDidAgentServicetypeAsync(StartDidAgentServicetypeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidAgentServicetypeExAsync(request, headers, runtime);
        }

        /**
         * Description: 注册自定义的服务类型，目前只有租户did可以调用
         * Summary: 注册自定义服务类型
         */
        public StartDidAgentServicetypeResponse StartDidAgentServicetypeEx(StartDidAgentServicetypeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidAgentServicetypeResponse>(DoRequest("1.0", "baas.did.agent.servicetype.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 注册自定义的服务类型，目前只有租户did可以调用
         * Summary: 注册自定义服务类型
         */
        public async Task<StartDidAgentServicetypeResponse> StartDidAgentServicetypeExAsync(StartDidAgentServicetypeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidAgentServicetypeResponse>(await DoRequestAsync("1.0", "baas.did.agent.servicetype.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询指定服务类型的定义，不支持全量查询
         * Summary: 查询指定服务类型的定义
         */
        public QueryDidAgentServicetypeResponse QueryDidAgentServicetype(QueryDidAgentServicetypeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDidAgentServicetypeEx(request, headers, runtime);
        }

        /**
         * Description: 查询指定服务类型的定义，不支持全量查询
         * Summary: 查询指定服务类型的定义
         */
        public async Task<QueryDidAgentServicetypeResponse> QueryDidAgentServicetypeAsync(QueryDidAgentServicetypeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDidAgentServicetypeExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询指定服务类型的定义，不支持全量查询
         * Summary: 查询指定服务类型的定义
         */
        public QueryDidAgentServicetypeResponse QueryDidAgentServicetypeEx(QueryDidAgentServicetypeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidAgentServicetypeResponse>(DoRequest("1.0", "baas.did.agent.servicetype.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询指定服务类型的定义，不支持全量查询
         * Summary: 查询指定服务类型的定义
         */
        public async Task<QueryDidAgentServicetypeResponse> QueryDidAgentServicetypeExAsync(QueryDidAgentServicetypeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidAgentServicetypeResponse>(await DoRequestAsync("1.0", "baas.did.agent.servicetype.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 代理模式下更新企业did doc中service中的字段
         * Summary: 代理更新企业did中的services
         */
        public UpdateDidServicesResponse UpdateDidServices(UpdateDidServicesRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateDidServicesEx(request, headers, runtime);
        }

        /**
         * Description: 代理模式下更新企业did doc中service中的字段
         * Summary: 代理更新企业did中的services
         */
        public async Task<UpdateDidServicesResponse> UpdateDidServicesAsync(UpdateDidServicesRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateDidServicesExAsync(request, headers, runtime);
        }

        /**
         * Description: 代理模式下更新企业did doc中service中的字段
         * Summary: 代理更新企业did中的services
         */
        public UpdateDidServicesResponse UpdateDidServicesEx(UpdateDidServicesRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDidServicesResponse>(DoRequest("1.0", "baas.did.services.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 代理模式下更新企业did doc中service中的字段
         * Summary: 代理更新企业did中的services
         */
        public async Task<UpdateDidServicesResponse> UpdateDidServicesExAsync(UpdateDidServicesRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDidServicesResponse>(await DoRequestAsync("1.0", "baas.did.services.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 服务发现
         * Summary: 服务发现
         */
        public QueryDidAgentServicediscoveryResponse QueryDidAgentServicediscovery(QueryDidAgentServicediscoveryRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDidAgentServicediscoveryEx(request, headers, runtime);
        }

        /**
         * Description: 服务发现
         * Summary: 服务发现
         */
        public async Task<QueryDidAgentServicediscoveryResponse> QueryDidAgentServicediscoveryAsync(QueryDidAgentServicediscoveryRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDidAgentServicediscoveryExAsync(request, headers, runtime);
        }

        /**
         * Description: 服务发现
         * Summary: 服务发现
         */
        public QueryDidAgentServicediscoveryResponse QueryDidAgentServicediscoveryEx(QueryDidAgentServicediscoveryRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidAgentServicediscoveryResponse>(DoRequest("1.0", "baas.did.agent.servicediscovery.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 服务发现
         * Summary: 服务发现
         */
        public async Task<QueryDidAgentServicediscoveryResponse> QueryDidAgentServicediscoveryExAsync(QueryDidAgentServicediscoveryRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidAgentServicediscoveryResponse>(await DoRequestAsync("1.0", "baas.did.agent.servicediscovery.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 为指定did颁发证书,并将保存到对应仓库
         * Summary: 为指定did颁发证书,并将保存到对应仓库
         */
        public StartDidVerifiableclaimIssuerandsaveResponse StartDidVerifiableclaimIssuerandsave(StartDidVerifiableclaimIssuerandsaveRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidVerifiableclaimIssuerandsaveEx(request, headers, runtime);
        }

        /**
         * Description: 为指定did颁发证书,并将保存到对应仓库
         * Summary: 为指定did颁发证书,并将保存到对应仓库
         */
        public async Task<StartDidVerifiableclaimIssuerandsaveResponse> StartDidVerifiableclaimIssuerandsaveAsync(StartDidVerifiableclaimIssuerandsaveRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidVerifiableclaimIssuerandsaveExAsync(request, headers, runtime);
        }

        /**
         * Description: 为指定did颁发证书,并将保存到对应仓库
         * Summary: 为指定did颁发证书,并将保存到对应仓库
         */
        public StartDidVerifiableclaimIssuerandsaveResponse StartDidVerifiableclaimIssuerandsaveEx(StartDidVerifiableclaimIssuerandsaveRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVerifiableclaimIssuerandsaveResponse>(DoRequest("1.0", "baas.did.verifiableclaim.issuerandsave.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 为指定did颁发证书,并将保存到对应仓库
         * Summary: 为指定did颁发证书,并将保存到对应仓库
         */
        public async Task<StartDidVerifiableclaimIssuerandsaveResponse> StartDidVerifiableclaimIssuerandsaveExAsync(StartDidVerifiableclaimIssuerandsaveRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVerifiableclaimIssuerandsaveResponse>(await DoRequestAsync("1.0", "baas.did.verifiableclaim.issuerandsave.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过agent代理通过VC Repo进行VC传输
         * Summary: 通过agent代理进行VC传输
         */
        public StartDidVcrepositoryVctransmitResponse StartDidVcrepositoryVctransmit(StartDidVcrepositoryVctransmitRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidVcrepositoryVctransmitEx(request, headers, runtime);
        }

        /**
         * Description: 通过agent代理通过VC Repo进行VC传输
         * Summary: 通过agent代理进行VC传输
         */
        public async Task<StartDidVcrepositoryVctransmitResponse> StartDidVcrepositoryVctransmitAsync(StartDidVcrepositoryVctransmitRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidVcrepositoryVctransmitExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过agent代理通过VC Repo进行VC传输
         * Summary: 通过agent代理进行VC传输
         */
        public StartDidVcrepositoryVctransmitResponse StartDidVcrepositoryVctransmitEx(StartDidVcrepositoryVctransmitRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVcrepositoryVctransmitResponse>(DoRequest("1.0", "baas.did.vcrepository.vctransmit.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过agent代理通过VC Repo进行VC传输
         * Summary: 通过agent代理进行VC传输
         */
        public async Task<StartDidVcrepositoryVctransmitResponse> StartDidVcrepositoryVctransmitExAsync(StartDidVcrepositoryVctransmitRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVcrepositoryVctransmitResponse>(await DoRequestAsync("1.0", "baas.did.vcrepository.vctransmit.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过个人二要素验证后创建个人did，若未通过个人二要素验证，则不创建did并报错
         * Summary: 通过个人二要素验证后创建个人did
         */
        public CreateDidPersonWithtwometaResponse CreateDidPersonWithtwometa(CreateDidPersonWithtwometaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDidPersonWithtwometaEx(request, headers, runtime);
        }

        /**
         * Description: 通过个人二要素验证后创建个人did，若未通过个人二要素验证，则不创建did并报错
         * Summary: 通过个人二要素验证后创建个人did
         */
        public async Task<CreateDidPersonWithtwometaResponse> CreateDidPersonWithtwometaAsync(CreateDidPersonWithtwometaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDidPersonWithtwometaExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过个人二要素验证后创建个人did，若未通过个人二要素验证，则不创建did并报错
         * Summary: 通过个人二要素验证后创建个人did
         */
        public CreateDidPersonWithtwometaResponse CreateDidPersonWithtwometaEx(CreateDidPersonWithtwometaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidPersonWithtwometaResponse>(DoRequest("1.0", "baas.did.person.withtwometa.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过个人二要素验证后创建个人did，若未通过个人二要素验证，则不创建did并报错
         * Summary: 通过个人二要素验证后创建个人did
         */
        public async Task<CreateDidPersonWithtwometaResponse> CreateDidPersonWithtwometaExAsync(CreateDidPersonWithtwometaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidPersonWithtwometaResponse>(await DoRequestAsync("1.0", "baas.did.person.withtwometa.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过企业二要素验证后创建企业did
         * Summary: 通过企业二要素验证后创建企业did
         */
        public CreateDidCorporateWithtwometaResponse CreateDidCorporateWithtwometa(CreateDidCorporateWithtwometaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDidCorporateWithtwometaEx(request, headers, runtime);
        }

        /**
         * Description: 通过企业二要素验证后创建企业did
         * Summary: 通过企业二要素验证后创建企业did
         */
        public async Task<CreateDidCorporateWithtwometaResponse> CreateDidCorporateWithtwometaAsync(CreateDidCorporateWithtwometaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDidCorporateWithtwometaExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过企业二要素验证后创建企业did
         * Summary: 通过企业二要素验证后创建企业did
         */
        public CreateDidCorporateWithtwometaResponse CreateDidCorporateWithtwometaEx(CreateDidCorporateWithtwometaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidCorporateWithtwometaResponse>(DoRequest("1.0", "baas.did.corporate.withtwometa.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过企业二要素验证后创建企业did
         * Summary: 通过企业二要素验证后创建企业did
         */
        public async Task<CreateDidCorporateWithtwometaResponse> CreateDidCorporateWithtwometaExAsync(CreateDidCorporateWithtwometaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidCorporateWithtwometaResponse>(await DoRequestAsync("1.0", "baas.did.corporate.withtwometa.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过企业四要素验证后创建企业did
         * Summary: 通过企业四要素验证后创建企业did
         */
        public CreateDidCorporateWithfourmetaResponse CreateDidCorporateWithfourmeta(CreateDidCorporateWithfourmetaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDidCorporateWithfourmetaEx(request, headers, runtime);
        }

        /**
         * Description: 通过企业四要素验证后创建企业did
         * Summary: 通过企业四要素验证后创建企业did
         */
        public async Task<CreateDidCorporateWithfourmetaResponse> CreateDidCorporateWithfourmetaAsync(CreateDidCorporateWithfourmetaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDidCorporateWithfourmetaExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过企业四要素验证后创建企业did
         * Summary: 通过企业四要素验证后创建企业did
         */
        public CreateDidCorporateWithfourmetaResponse CreateDidCorporateWithfourmetaEx(CreateDidCorporateWithfourmetaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidCorporateWithfourmetaResponse>(DoRequest("1.0", "baas.did.corporate.withfourmeta.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过企业四要素验证后创建企业did
         * Summary: 通过企业四要素验证后创建企业did
         */
        public async Task<CreateDidCorporateWithfourmetaResponse> CreateDidCorporateWithfourmetaExAsync(CreateDidCorporateWithfourmetaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidCorporateWithfourmetaResponse>(await DoRequestAsync("1.0", "baas.did.corporate.withfourmeta.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过个人四要素验证后创建个人did
         * Summary: 通过个人四要素验证后创建个人did
         */
        public CreateDidPersonWithfourmetaResponse CreateDidPersonWithfourmeta(CreateDidPersonWithfourmetaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDidPersonWithfourmetaEx(request, headers, runtime);
        }

        /**
         * Description: 通过个人四要素验证后创建个人did
         * Summary: 通过个人四要素验证后创建个人did
         */
        public async Task<CreateDidPersonWithfourmetaResponse> CreateDidPersonWithfourmetaAsync(CreateDidPersonWithfourmetaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDidPersonWithfourmetaExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过个人四要素验证后创建个人did
         * Summary: 通过个人四要素验证后创建个人did
         */
        public CreateDidPersonWithfourmetaResponse CreateDidPersonWithfourmetaEx(CreateDidPersonWithfourmetaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidPersonWithfourmetaResponse>(DoRequest("1.0", "baas.did.person.withfourmeta.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过个人四要素验证后创建个人did
         * Summary: 通过个人四要素验证后创建个人did
         */
        public async Task<CreateDidPersonWithfourmetaResponse> CreateDidPersonWithfourmetaExAsync(CreateDidPersonWithfourmetaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidPersonWithfourmetaResponse>(await DoRequestAsync("1.0", "baas.did.person.withfourmeta.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 对did进行企业二要素实名认证
         * Summary: 对did进行企业二要素实名认证
         */
        public StartDidCorporateTwometaResponse StartDidCorporateTwometa(StartDidCorporateTwometaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidCorporateTwometaEx(request, headers, runtime);
        }

        /**
         * Description: 对did进行企业二要素实名认证
         * Summary: 对did进行企业二要素实名认证
         */
        public async Task<StartDidCorporateTwometaResponse> StartDidCorporateTwometaAsync(StartDidCorporateTwometaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidCorporateTwometaExAsync(request, headers, runtime);
        }

        /**
         * Description: 对did进行企业二要素实名认证
         * Summary: 对did进行企业二要素实名认证
         */
        public StartDidCorporateTwometaResponse StartDidCorporateTwometaEx(StartDidCorporateTwometaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCorporateTwometaResponse>(DoRequest("1.0", "baas.did.corporate.twometa.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 对did进行企业二要素实名认证
         * Summary: 对did进行企业二要素实名认证
         */
        public async Task<StartDidCorporateTwometaResponse> StartDidCorporateTwometaExAsync(StartDidCorporateTwometaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCorporateTwometaResponse>(await DoRequestAsync("1.0", "baas.did.corporate.twometa.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 对did进行企业三要素实名认证
         * Summary: 对did进行企业三要素实名认证
         */
        public StartDidCorporateThreemetaResponse StartDidCorporateThreemeta(StartDidCorporateThreemetaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidCorporateThreemetaEx(request, headers, runtime);
        }

        /**
         * Description: 对did进行企业三要素实名认证
         * Summary: 对did进行企业三要素实名认证
         */
        public async Task<StartDidCorporateThreemetaResponse> StartDidCorporateThreemetaAsync(StartDidCorporateThreemetaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidCorporateThreemetaExAsync(request, headers, runtime);
        }

        /**
         * Description: 对did进行企业三要素实名认证
         * Summary: 对did进行企业三要素实名认证
         */
        public StartDidCorporateThreemetaResponse StartDidCorporateThreemetaEx(StartDidCorporateThreemetaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCorporateThreemetaResponse>(DoRequest("1.0", "baas.did.corporate.threemeta.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 对did进行企业三要素实名认证
         * Summary: 对did进行企业三要素实名认证
         */
        public async Task<StartDidCorporateThreemetaResponse> StartDidCorporateThreemetaExAsync(StartDidCorporateThreemetaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCorporateThreemetaResponse>(await DoRequestAsync("1.0", "baas.did.corporate.threemeta.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 对did进行企业四要素实名认证
         * Summary: 对did进行企业四要素实名认证
         */
        public StartDidCorporateFourmetaResponse StartDidCorporateFourmeta(StartDidCorporateFourmetaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidCorporateFourmetaEx(request, headers, runtime);
        }

        /**
         * Description: 对did进行企业四要素实名认证
         * Summary: 对did进行企业四要素实名认证
         */
        public async Task<StartDidCorporateFourmetaResponse> StartDidCorporateFourmetaAsync(StartDidCorporateFourmetaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidCorporateFourmetaExAsync(request, headers, runtime);
        }

        /**
         * Description: 对did进行企业四要素实名认证
         * Summary: 对did进行企业四要素实名认证
         */
        public StartDidCorporateFourmetaResponse StartDidCorporateFourmetaEx(StartDidCorporateFourmetaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCorporateFourmetaResponse>(DoRequest("1.0", "baas.did.corporate.fourmeta.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 对did进行企业四要素实名认证
         * Summary: 对did进行企业四要素实名认证
         */
        public async Task<StartDidCorporateFourmetaResponse> StartDidCorporateFourmetaExAsync(StartDidCorporateFourmetaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCorporateFourmetaResponse>(await DoRequestAsync("1.0", "baas.did.corporate.fourmeta.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 四要素实名认证
         * Summary: 四要素实名认证
         */
        public StartDidCertificationFourmetaResponse StartDidCertificationFourmeta(StartDidCertificationFourmetaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidCertificationFourmetaEx(request, headers, runtime);
        }

        /**
         * Description: 四要素实名认证
         * Summary: 四要素实名认证
         */
        public async Task<StartDidCertificationFourmetaResponse> StartDidCertificationFourmetaAsync(StartDidCertificationFourmetaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidCertificationFourmetaExAsync(request, headers, runtime);
        }

        /**
         * Description: 四要素实名认证
         * Summary: 四要素实名认证
         */
        public StartDidCertificationFourmetaResponse StartDidCertificationFourmetaEx(StartDidCertificationFourmetaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCertificationFourmetaResponse>(DoRequest("1.0", "baas.did.certification.fourmeta.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 四要素实名认证
         * Summary: 四要素实名认证
         */
        public async Task<StartDidCertificationFourmetaResponse> StartDidCertificationFourmetaExAsync(StartDidCertificationFourmetaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCertificationFourmetaResponse>(await DoRequestAsync("1.0", "baas.did.certification.fourmeta.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 模糊查询VC列表
         * Summary: 模糊查询vc
         */
        public QueryDidVcrepositoryFuzzyquerywithdefinedidResponse QueryDidVcrepositoryFuzzyquerywithdefinedid(QueryDidVcrepositoryFuzzyquerywithdefinedidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDidVcrepositoryFuzzyquerywithdefinedidEx(request, headers, runtime);
        }

        /**
         * Description: 模糊查询VC列表
         * Summary: 模糊查询vc
         */
        public async Task<QueryDidVcrepositoryFuzzyquerywithdefinedidResponse> QueryDidVcrepositoryFuzzyquerywithdefinedidAsync(QueryDidVcrepositoryFuzzyquerywithdefinedidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDidVcrepositoryFuzzyquerywithdefinedidExAsync(request, headers, runtime);
        }

        /**
         * Description: 模糊查询VC列表
         * Summary: 模糊查询vc
         */
        public QueryDidVcrepositoryFuzzyquerywithdefinedidResponse QueryDidVcrepositoryFuzzyquerywithdefinedidEx(QueryDidVcrepositoryFuzzyquerywithdefinedidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidVcrepositoryFuzzyquerywithdefinedidResponse>(DoRequest("1.0", "baas.did.vcrepository.fuzzyquerywithdefinedid.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 模糊查询VC列表
         * Summary: 模糊查询vc
         */
        public async Task<QueryDidVcrepositoryFuzzyquerywithdefinedidResponse> QueryDidVcrepositoryFuzzyquerywithdefinedidExAsync(QueryDidVcrepositoryFuzzyquerywithdefinedidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidVcrepositoryFuzzyquerywithdefinedidResponse>(await DoRequestAsync("1.0", "baas.did.vcrepository.fuzzyquerywithdefinedid.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过代理模式为普通账号创建did
         * Summary: 通过代理模式为普通账号创建did
         */
        public StartDidCommonAgentcreateResponse StartDidCommonAgentcreate(StartDidCommonAgentcreateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidCommonAgentcreateEx(request, headers, runtime);
        }

        /**
         * Description: 通过代理模式为普通账号创建did
         * Summary: 通过代理模式为普通账号创建did
         */
        public async Task<StartDidCommonAgentcreateResponse> StartDidCommonAgentcreateAsync(StartDidCommonAgentcreateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidCommonAgentcreateExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过代理模式为普通账号创建did
         * Summary: 通过代理模式为普通账号创建did
         */
        public StartDidCommonAgentcreateResponse StartDidCommonAgentcreateEx(StartDidCommonAgentcreateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCommonAgentcreateResponse>(DoRequest("1.0", "baas.did.common.agentcreate.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过代理模式为普通账号创建did
         * Summary: 通过代理模式为普通账号创建did
         */
        public async Task<StartDidCommonAgentcreateResponse> StartDidCommonAgentcreateExAsync(StartDidCommonAgentcreateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCommonAgentcreateResponse>(await DoRequestAsync("1.0", "baas.did.common.agentcreate.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 企业法人刷脸认证
         * Summary: 企业法人刷脸认证
         */
        public StartDidCorporateFaceauthResponse StartDidCorporateFaceauth(StartDidCorporateFaceauthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidCorporateFaceauthEx(request, headers, runtime);
        }

        /**
         * Description: 企业法人刷脸认证
         * Summary: 企业法人刷脸认证
         */
        public async Task<StartDidCorporateFaceauthResponse> StartDidCorporateFaceauthAsync(StartDidCorporateFaceauthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidCorporateFaceauthExAsync(request, headers, runtime);
        }

        /**
         * Description: 企业法人刷脸认证
         * Summary: 企业法人刷脸认证
         */
        public StartDidCorporateFaceauthResponse StartDidCorporateFaceauthEx(StartDidCorporateFaceauthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCorporateFaceauthResponse>(DoRequest("1.0", "baas.did.corporate.faceauth.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 企业法人刷脸认证
         * Summary: 企业法人刷脸认证
         */
        public async Task<StartDidCorporateFaceauthResponse> StartDidCorporateFaceauthExAsync(StartDidCorporateFaceauthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCorporateFaceauthResponse>(await DoRequestAsync("1.0", "baas.did.corporate.faceauth.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询企业法人实人结果
         * Summary: 查询企业法人实人结果
         */
        public QueryDidCorporateFaceauthResponse QueryDidCorporateFaceauth(QueryDidCorporateFaceauthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDidCorporateFaceauthEx(request, headers, runtime);
        }

        /**
         * Description: 查询企业法人实人结果
         * Summary: 查询企业法人实人结果
         */
        public async Task<QueryDidCorporateFaceauthResponse> QueryDidCorporateFaceauthAsync(QueryDidCorporateFaceauthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDidCorporateFaceauthExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询企业法人实人结果
         * Summary: 查询企业法人实人结果
         */
        public QueryDidCorporateFaceauthResponse QueryDidCorporateFaceauthEx(QueryDidCorporateFaceauthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidCorporateFaceauthResponse>(DoRequest("1.0", "baas.did.corporate.faceauth.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询企业法人实人结果
         * Summary: 查询企业法人实人结果
         */
        public async Task<QueryDidCorporateFaceauthResponse> QueryDidCorporateFaceauthExAsync(QueryDidCorporateFaceauthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidCorporateFaceauthResponse>(await DoRequestAsync("1.0", "baas.did.corporate.faceauth.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户删除不需要的VC
         * Summary: 用户删除不需要的vc
         */
        public DeleteDidVcrepositoryVcResponse DeleteDidVcrepositoryVc(DeleteDidVcrepositoryVcRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return DeleteDidVcrepositoryVcEx(request, headers, runtime);
        }

        /**
         * Description: 用户删除不需要的VC
         * Summary: 用户删除不需要的vc
         */
        public async Task<DeleteDidVcrepositoryVcResponse> DeleteDidVcrepositoryVcAsync(DeleteDidVcrepositoryVcRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await DeleteDidVcrepositoryVcExAsync(request, headers, runtime);
        }

        /**
         * Description: 用户删除不需要的VC
         * Summary: 用户删除不需要的vc
         */
        public DeleteDidVcrepositoryVcResponse DeleteDidVcrepositoryVcEx(DeleteDidVcrepositoryVcRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteDidVcrepositoryVcResponse>(DoRequest("1.0", "baas.did.vcrepository.vc.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户删除不需要的VC
         * Summary: 用户删除不需要的vc
         */
        public async Task<DeleteDidVcrepositoryVcResponse> DeleteDidVcrepositoryVcExAsync(DeleteDidVcrepositoryVcRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteDidVcrepositoryVcResponse>(await DoRequestAsync("1.0", "baas.did.vcrepository.vc.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description:  构造包含零知识 字段的VC
         * Summary: 构造零知识证明的VC
         */
        public StartDidZkpverifiableclaimProofResponse StartDidZkpverifiableclaimProof(StartDidZkpverifiableclaimProofRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidZkpverifiableclaimProofEx(request, headers, runtime);
        }

        /**
         * Description:  构造包含零知识 字段的VC
         * Summary: 构造零知识证明的VC
         */
        public async Task<StartDidZkpverifiableclaimProofResponse> StartDidZkpverifiableclaimProofAsync(StartDidZkpverifiableclaimProofRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidZkpverifiableclaimProofExAsync(request, headers, runtime);
        }

        /**
         * Description:  构造包含零知识 字段的VC
         * Summary: 构造零知识证明的VC
         */
        public StartDidZkpverifiableclaimProofResponse StartDidZkpverifiableclaimProofEx(StartDidZkpverifiableclaimProofRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidZkpverifiableclaimProofResponse>(DoRequest("1.0", "baas.did.zkpverifiableclaim.proof.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description:  构造包含零知识 字段的VC
         * Summary: 构造零知识证明的VC
         */
        public async Task<StartDidZkpverifiableclaimProofResponse> StartDidZkpverifiableclaimProofExAsync(StartDidZkpverifiableclaimProofRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidZkpverifiableclaimProofResponse>(await DoRequestAsync("1.0", "baas.did.zkpverifiableclaim.proof.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 验证包含ZKP Proof的VC
         * Summary: 验证包含ZKP Proof的VC
         */
        public VerifyDidZkpverifiableclaimProofResponse VerifyDidZkpverifiableclaimProof(VerifyDidZkpverifiableclaimProofRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return VerifyDidZkpverifiableclaimProofEx(request, headers, runtime);
        }

        /**
         * Description: 验证包含ZKP Proof的VC
         * Summary: 验证包含ZKP Proof的VC
         */
        public async Task<VerifyDidZkpverifiableclaimProofResponse> VerifyDidZkpverifiableclaimProofAsync(VerifyDidZkpverifiableclaimProofRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await VerifyDidZkpverifiableclaimProofExAsync(request, headers, runtime);
        }

        /**
         * Description: 验证包含ZKP Proof的VC
         * Summary: 验证包含ZKP Proof的VC
         */
        public VerifyDidZkpverifiableclaimProofResponse VerifyDidZkpverifiableclaimProofEx(VerifyDidZkpverifiableclaimProofRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<VerifyDidZkpverifiableclaimProofResponse>(DoRequest("1.0", "baas.did.zkpverifiableclaim.proof.verify", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 验证包含ZKP Proof的VC
         * Summary: 验证包含ZKP Proof的VC
         */
        public async Task<VerifyDidZkpverifiableclaimProofResponse> VerifyDidZkpverifiableclaimProofExAsync(VerifyDidZkpverifiableclaimProofRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<VerifyDidZkpverifiableclaimProofResponse>(await DoRequestAsync("1.0", "baas.did.zkpverifiableclaim.proof.verify", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 支持移动端APP的安卓和IOS集成SDK进行刷脸认证，在查询query认证结果通过的情况下创建DID身份。
         * Summary: APP移动端刷脸认证成功后创建DID
         */
        public CreateDidPersonFacevrfResponse CreateDidPersonFacevrf(CreateDidPersonFacevrfRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDidPersonFacevrfEx(request, headers, runtime);
        }

        /**
         * Description: 支持移动端APP的安卓和IOS集成SDK进行刷脸认证，在查询query认证结果通过的情况下创建DID身份。
         * Summary: APP移动端刷脸认证成功后创建DID
         */
        public async Task<CreateDidPersonFacevrfResponse> CreateDidPersonFacevrfAsync(CreateDidPersonFacevrfRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDidPersonFacevrfExAsync(request, headers, runtime);
        }

        /**
         * Description: 支持移动端APP的安卓和IOS集成SDK进行刷脸认证，在查询query认证结果通过的情况下创建DID身份。
         * Summary: APP移动端刷脸认证成功后创建DID
         */
        public CreateDidPersonFacevrfResponse CreateDidPersonFacevrfEx(CreateDidPersonFacevrfRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidPersonFacevrfResponse>(DoRequest("1.0", "baas.did.person.facevrf.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 支持移动端APP的安卓和IOS集成SDK进行刷脸认证，在查询query认证结果通过的情况下创建DID身份。
         * Summary: APP移动端刷脸认证成功后创建DID
         */
        public async Task<CreateDidPersonFacevrfResponse> CreateDidPersonFacevrfExAsync(CreateDidPersonFacevrfRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidPersonFacevrfResponse>(await DoRequestAsync("1.0", "baas.did.person.facevrf.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询之前发起的实人认证的结果，如果认证通过就创建DID身份并返回。
         * Summary: 查询可信实人认证的结果并创建DID
         */
        public QueryDidPersonFacevrfResponse QueryDidPersonFacevrf(QueryDidPersonFacevrfRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDidPersonFacevrfEx(request, headers, runtime);
        }

        /**
         * Description: 查询之前发起的实人认证的结果，如果认证通过就创建DID身份并返回。
         * Summary: 查询可信实人认证的结果并创建DID
         */
        public async Task<QueryDidPersonFacevrfResponse> QueryDidPersonFacevrfAsync(QueryDidPersonFacevrfRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDidPersonFacevrfExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询之前发起的实人认证的结果，如果认证通过就创建DID身份并返回。
         * Summary: 查询可信实人认证的结果并创建DID
         */
        public QueryDidPersonFacevrfResponse QueryDidPersonFacevrfEx(QueryDidPersonFacevrfRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidPersonFacevrfResponse>(DoRequest("1.0", "baas.did.person.facevrf.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询之前发起的实人认证的结果，如果认证通过就创建DID身份并返回。
         * Summary: 查询可信实人认证的结果并创建DID
         */
        public async Task<QueryDidPersonFacevrfResponse> QueryDidPersonFacevrfExAsync(QueryDidPersonFacevrfRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidPersonFacevrfResponse>(await DoRequestAsync("1.0", "baas.did.person.facevrf.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: h5或者小程序刷脸认证成功后创建DID
         * Summary: h5或者小程序刷脸认证成功后创建DID
         */
        public CreateDidPersonFacevrfminiappResponse CreateDidPersonFacevrfminiapp(CreateDidPersonFacevrfminiappRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDidPersonFacevrfminiappEx(request, headers, runtime);
        }

        /**
         * Description: h5或者小程序刷脸认证成功后创建DID
         * Summary: h5或者小程序刷脸认证成功后创建DID
         */
        public async Task<CreateDidPersonFacevrfminiappResponse> CreateDidPersonFacevrfminiappAsync(CreateDidPersonFacevrfminiappRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDidPersonFacevrfminiappExAsync(request, headers, runtime);
        }

        /**
         * Description: h5或者小程序刷脸认证成功后创建DID
         * Summary: h5或者小程序刷脸认证成功后创建DID
         */
        public CreateDidPersonFacevrfminiappResponse CreateDidPersonFacevrfminiappEx(CreateDidPersonFacevrfminiappRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidPersonFacevrfminiappResponse>(DoRequest("1.0", "baas.did.person.facevrfminiapp.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: h5或者小程序刷脸认证成功后创建DID
         * Summary: h5或者小程序刷脸认证成功后创建DID
         */
        public async Task<CreateDidPersonFacevrfminiappResponse> CreateDidPersonFacevrfminiappExAsync(CreateDidPersonFacevrfminiappRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidPersonFacevrfminiappResponse>(await DoRequestAsync("1.0", "baas.did.person.facevrfminiapp.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询之前发起的实人认证的结果，如果认证通过就创建DID身份并返回。
         * Summary: 查询小程序刷脸的结果并创建DID
         */
        public QueryDidPersonFacevrfminiappResponse QueryDidPersonFacevrfminiapp(QueryDidPersonFacevrfminiappRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDidPersonFacevrfminiappEx(request, headers, runtime);
        }

        /**
         * Description: 查询之前发起的实人认证的结果，如果认证通过就创建DID身份并返回。
         * Summary: 查询小程序刷脸的结果并创建DID
         */
        public async Task<QueryDidPersonFacevrfminiappResponse> QueryDidPersonFacevrfminiappAsync(QueryDidPersonFacevrfminiappRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDidPersonFacevrfminiappExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询之前发起的实人认证的结果，如果认证通过就创建DID身份并返回。
         * Summary: 查询小程序刷脸的结果并创建DID
         */
        public QueryDidPersonFacevrfminiappResponse QueryDidPersonFacevrfminiappEx(QueryDidPersonFacevrfminiappRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidPersonFacevrfminiappResponse>(DoRequest("1.0", "baas.did.person.facevrfminiapp.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询之前发起的实人认证的结果，如果认证通过就创建DID身份并返回。
         * Summary: 查询小程序刷脸的结果并创建DID
         */
        public async Task<QueryDidPersonFacevrfminiappResponse> QueryDidPersonFacevrfminiappExAsync(QueryDidPersonFacevrfminiappRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidPersonFacevrfminiappResponse>(await DoRequestAsync("1.0", "baas.did.person.facevrfminiapp.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 使用自己或者代理的did为指定did颁发证书，同时在VC Repository中对证书VC进行存储。 支持授权管理，只有被授权的did未来才可以访问获取此颁发的证书数据。
         * Summary: 指定did颁发证书，并存储（新商品）
         */
        public StartDidVcrepositoryIssuenewocpResponse StartDidVcrepositoryIssuenewocp(StartDidVcrepositoryIssuenewocpRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidVcrepositoryIssuenewocpEx(request, headers, runtime);
        }

        /**
         * Description: 使用自己或者代理的did为指定did颁发证书，同时在VC Repository中对证书VC进行存储。 支持授权管理，只有被授权的did未来才可以访问获取此颁发的证书数据。
         * Summary: 指定did颁发证书，并存储（新商品）
         */
        public async Task<StartDidVcrepositoryIssuenewocpResponse> StartDidVcrepositoryIssuenewocpAsync(StartDidVcrepositoryIssuenewocpRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidVcrepositoryIssuenewocpExAsync(request, headers, runtime);
        }

        /**
         * Description: 使用自己或者代理的did为指定did颁发证书，同时在VC Repository中对证书VC进行存储。 支持授权管理，只有被授权的did未来才可以访问获取此颁发的证书数据。
         * Summary: 指定did颁发证书，并存储（新商品）
         */
        public StartDidVcrepositoryIssuenewocpResponse StartDidVcrepositoryIssuenewocpEx(StartDidVcrepositoryIssuenewocpRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVcrepositoryIssuenewocpResponse>(DoRequest("1.0", "baas.did.vcrepository.issuenewocp.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 使用自己或者代理的did为指定did颁发证书，同时在VC Repository中对证书VC进行存储。 支持授权管理，只有被授权的did未来才可以访问获取此颁发的证书数据。
         * Summary: 指定did颁发证书，并存储（新商品）
         */
        public async Task<StartDidVcrepositoryIssuenewocpResponse> StartDidVcrepositoryIssuenewocpExAsync(StartDidVcrepositoryIssuenewocpRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVcrepositoryIssuenewocpResponse>(await DoRequestAsync("1.0", "baas.did.vcrepository.issuenewocp.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 使用自己或者代理的did为指定did颁发证书
         * Summary: 为指定did颁发证书（新商品）
         */
        public StartDidVerifiableclaimIssurenewocpResponse StartDidVerifiableclaimIssurenewocp(StartDidVerifiableclaimIssurenewocpRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidVerifiableclaimIssurenewocpEx(request, headers, runtime);
        }

        /**
         * Description: 使用自己或者代理的did为指定did颁发证书
         * Summary: 为指定did颁发证书（新商品）
         */
        public async Task<StartDidVerifiableclaimIssurenewocpResponse> StartDidVerifiableclaimIssurenewocpAsync(StartDidVerifiableclaimIssurenewocpRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidVerifiableclaimIssurenewocpExAsync(request, headers, runtime);
        }

        /**
         * Description: 使用自己或者代理的did为指定did颁发证书
         * Summary: 为指定did颁发证书（新商品）
         */
        public StartDidVerifiableclaimIssurenewocpResponse StartDidVerifiableclaimIssurenewocpEx(StartDidVerifiableclaimIssurenewocpRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVerifiableclaimIssurenewocpResponse>(DoRequest("1.0", "baas.did.verifiableclaim.issurenewocp.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 使用自己或者代理的did为指定did颁发证书
         * Summary: 为指定did颁发证书（新商品）
         */
        public async Task<StartDidVerifiableclaimIssurenewocpResponse> StartDidVerifiableclaimIssurenewocpExAsync(StartDidVerifiableclaimIssurenewocpRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidVerifiableclaimIssurenewocpResponse>(await DoRequestAsync("1.0", "baas.did.verifiableclaim.issurenewocp.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过个人二要素验证后创建个人did，若未通过个人二要素验证，则不创建did并报错
         * Summary: 通过个人二要素验证后创建个人did（新）
         */
        public CreateDidPersonWithtwometanewocpResponse CreateDidPersonWithtwometanewocp(CreateDidPersonWithtwometanewocpRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDidPersonWithtwometanewocpEx(request, headers, runtime);
        }

        /**
         * Description: 通过个人二要素验证后创建个人did，若未通过个人二要素验证，则不创建did并报错
         * Summary: 通过个人二要素验证后创建个人did（新）
         */
        public async Task<CreateDidPersonWithtwometanewocpResponse> CreateDidPersonWithtwometanewocpAsync(CreateDidPersonWithtwometanewocpRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDidPersonWithtwometanewocpExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过个人二要素验证后创建个人did，若未通过个人二要素验证，则不创建did并报错
         * Summary: 通过个人二要素验证后创建个人did（新）
         */
        public CreateDidPersonWithtwometanewocpResponse CreateDidPersonWithtwometanewocpEx(CreateDidPersonWithtwometanewocpRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidPersonWithtwometanewocpResponse>(DoRequest("1.0", "baas.did.person.withtwometanewocp.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过个人二要素验证后创建个人did，若未通过个人二要素验证，则不创建did并报错
         * Summary: 通过个人二要素验证后创建个人did（新）
         */
        public async Task<CreateDidPersonWithtwometanewocpResponse> CreateDidPersonWithtwometanewocpExAsync(CreateDidPersonWithtwometanewocpRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidPersonWithtwometanewocpResponse>(await DoRequestAsync("1.0", "baas.did.person.withtwometanewocp.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过个人三要素验证后创建个人did，若未通过个人三要素验证，则不创建did并报错
         * Summary: 通过个人三要素验证后创建个人did（新）
         */
        public CreateDidPersonWiththreemetanewocpResponse CreateDidPersonWiththreemetanewocp(CreateDidPersonWiththreemetanewocpRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDidPersonWiththreemetanewocpEx(request, headers, runtime);
        }

        /**
         * Description: 通过个人三要素验证后创建个人did，若未通过个人三要素验证，则不创建did并报错
         * Summary: 通过个人三要素验证后创建个人did（新）
         */
        public async Task<CreateDidPersonWiththreemetanewocpResponse> CreateDidPersonWiththreemetanewocpAsync(CreateDidPersonWiththreemetanewocpRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDidPersonWiththreemetanewocpExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过个人三要素验证后创建个人did，若未通过个人三要素验证，则不创建did并报错
         * Summary: 通过个人三要素验证后创建个人did（新）
         */
        public CreateDidPersonWiththreemetanewocpResponse CreateDidPersonWiththreemetanewocpEx(CreateDidPersonWiththreemetanewocpRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidPersonWiththreemetanewocpResponse>(DoRequest("1.0", "baas.did.person.withthreemetanewocp.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过个人三要素验证后创建个人did，若未通过个人三要素验证，则不创建did并报错
         * Summary: 通过个人三要素验证后创建个人did（新）
         */
        public async Task<CreateDidPersonWiththreemetanewocpResponse> CreateDidPersonWiththreemetanewocpExAsync(CreateDidPersonWiththreemetanewocpRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidPersonWiththreemetanewocpResponse>(await DoRequestAsync("1.0", "baas.did.person.withthreemetanewocp.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 开始实人认证
         * Summary: 开始实人认证（新商品）
         */
        public StartDidIdentificationFaceauthnewocpResponse StartDidIdentificationFaceauthnewocp(StartDidIdentificationFaceauthnewocpRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidIdentificationFaceauthnewocpEx(request, headers, runtime);
        }

        /**
         * Description: 开始实人认证
         * Summary: 开始实人认证（新商品）
         */
        public async Task<StartDidIdentificationFaceauthnewocpResponse> StartDidIdentificationFaceauthnewocpAsync(StartDidIdentificationFaceauthnewocpRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidIdentificationFaceauthnewocpExAsync(request, headers, runtime);
        }

        /**
         * Description: 开始实人认证
         * Summary: 开始实人认证（新商品）
         */
        public StartDidIdentificationFaceauthnewocpResponse StartDidIdentificationFaceauthnewocpEx(StartDidIdentificationFaceauthnewocpRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidIdentificationFaceauthnewocpResponse>(DoRequest("1.0", "baas.did.identification.faceauthnewocp.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 开始实人认证
         * Summary: 开始实人认证（新商品）
         */
        public async Task<StartDidIdentificationFaceauthnewocpResponse> StartDidIdentificationFaceauthnewocpExAsync(StartDidIdentificationFaceauthnewocpRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidIdentificationFaceauthnewocpResponse>(await DoRequestAsync("1.0", "baas.did.identification.faceauthnewocp.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 支持移动端APP的安卓和IOS集成SDK进行刷脸认证，在查询query认证结果通过的情况下创建DID身份。
         * Summary: APP移动端刷脸认证成功后创建DID
         */
        public CreateDidPersonFacevrfnewocpResponse CreateDidPersonFacevrfnewocp(CreateDidPersonFacevrfnewocpRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDidPersonFacevrfnewocpEx(request, headers, runtime);
        }

        /**
         * Description: 支持移动端APP的安卓和IOS集成SDK进行刷脸认证，在查询query认证结果通过的情况下创建DID身份。
         * Summary: APP移动端刷脸认证成功后创建DID
         */
        public async Task<CreateDidPersonFacevrfnewocpResponse> CreateDidPersonFacevrfnewocpAsync(CreateDidPersonFacevrfnewocpRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDidPersonFacevrfnewocpExAsync(request, headers, runtime);
        }

        /**
         * Description: 支持移动端APP的安卓和IOS集成SDK进行刷脸认证，在查询query认证结果通过的情况下创建DID身份。
         * Summary: APP移动端刷脸认证成功后创建DID
         */
        public CreateDidPersonFacevrfnewocpResponse CreateDidPersonFacevrfnewocpEx(CreateDidPersonFacevrfnewocpRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidPersonFacevrfnewocpResponse>(DoRequest("1.0", "baas.did.person.facevrfnewocp.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 支持移动端APP的安卓和IOS集成SDK进行刷脸认证，在查询query认证结果通过的情况下创建DID身份。
         * Summary: APP移动端刷脸认证成功后创建DID
         */
        public async Task<CreateDidPersonFacevrfnewocpResponse> CreateDidPersonFacevrfnewocpExAsync(CreateDidPersonFacevrfnewocpRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidPersonFacevrfnewocpResponse>(await DoRequestAsync("1.0", "baas.did.person.facevrfnewocp.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: h5或者小程序刷脸认证成功后创建DID（新个人刷脸商品）
         * Summary: h5或者小程序刷脸认证成功后创建DID
         */
        public CreateDidPersonFacevrfminiappnewocpResponse CreateDidPersonFacevrfminiappnewocp(CreateDidPersonFacevrfminiappnewocpRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDidPersonFacevrfminiappnewocpEx(request, headers, runtime);
        }

        /**
         * Description: h5或者小程序刷脸认证成功后创建DID（新个人刷脸商品）
         * Summary: h5或者小程序刷脸认证成功后创建DID
         */
        public async Task<CreateDidPersonFacevrfminiappnewocpResponse> CreateDidPersonFacevrfminiappnewocpAsync(CreateDidPersonFacevrfminiappnewocpRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDidPersonFacevrfminiappnewocpExAsync(request, headers, runtime);
        }

        /**
         * Description: h5或者小程序刷脸认证成功后创建DID（新个人刷脸商品）
         * Summary: h5或者小程序刷脸认证成功后创建DID
         */
        public CreateDidPersonFacevrfminiappnewocpResponse CreateDidPersonFacevrfminiappnewocpEx(CreateDidPersonFacevrfminiappnewocpRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidPersonFacevrfminiappnewocpResponse>(DoRequest("1.0", "baas.did.person.facevrfminiappnewocp.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: h5或者小程序刷脸认证成功后创建DID（新个人刷脸商品）
         * Summary: h5或者小程序刷脸认证成功后创建DID
         */
        public async Task<CreateDidPersonFacevrfminiappnewocpResponse> CreateDidPersonFacevrfminiappnewocpExAsync(CreateDidPersonFacevrfminiappnewocpRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidPersonFacevrfminiappnewocpResponse>(await DoRequestAsync("1.0", "baas.did.person.facevrfminiappnewocp.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 三要素实名认证（新商品）
         * Summary: 三要素实名认证
         */
        public StartDidCertificationThreemetanewocpResponse StartDidCertificationThreemetanewocp(StartDidCertificationThreemetanewocpRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidCertificationThreemetanewocpEx(request, headers, runtime);
        }

        /**
         * Description: 三要素实名认证（新商品）
         * Summary: 三要素实名认证
         */
        public async Task<StartDidCertificationThreemetanewocpResponse> StartDidCertificationThreemetanewocpAsync(StartDidCertificationThreemetanewocpRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidCertificationThreemetanewocpExAsync(request, headers, runtime);
        }

        /**
         * Description: 三要素实名认证（新商品）
         * Summary: 三要素实名认证
         */
        public StartDidCertificationThreemetanewocpResponse StartDidCertificationThreemetanewocpEx(StartDidCertificationThreemetanewocpRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCertificationThreemetanewocpResponse>(DoRequest("1.0", "baas.did.certification.threemetanewocp.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 三要素实名认证（新商品）
         * Summary: 三要素实名认证
         */
        public async Task<StartDidCertificationThreemetanewocpResponse> StartDidCertificationThreemetanewocpExAsync(StartDidCertificationThreemetanewocpRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidCertificationThreemetanewocpResponse>(await DoRequestAsync("1.0", "baas.did.certification.threemetanewocp.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 迁移did至aldaba链
         * Summary: 迁移did至aldaba链
         */
        public ImportDidAldabaResponse ImportDidAldaba(ImportDidAldabaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ImportDidAldabaEx(request, headers, runtime);
        }

        /**
         * Description: 迁移did至aldaba链
         * Summary: 迁移did至aldaba链
         */
        public async Task<ImportDidAldabaResponse> ImportDidAldabaAsync(ImportDidAldabaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ImportDidAldabaExAsync(request, headers, runtime);
        }

        /**
         * Description: 迁移did至aldaba链
         * Summary: 迁移did至aldaba链
         */
        public ImportDidAldabaResponse ImportDidAldabaEx(ImportDidAldabaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ImportDidAldabaResponse>(DoRequest("1.0", "baas.did.aldaba.import", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 迁移did至aldaba链
         * Summary: 迁移did至aldaba链
         */
        public async Task<ImportDidAldabaResponse> ImportDidAldabaExAsync(ImportDidAldabaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ImportDidAldabaResponse>(await DoRequestAsync("1.0", "baas.did.aldaba.import", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 端上密钥生成did，但不doc上链
         * Summary: 端上密钥生成did
         */
        public CreateDidDtxPersonResponse CreateDidDtxPerson(CreateDidDtxPersonRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDidDtxPersonEx(request, headers, runtime);
        }

        /**
         * Description: 端上密钥生成did，但不doc上链
         * Summary: 端上密钥生成did
         */
        public async Task<CreateDidDtxPersonResponse> CreateDidDtxPersonAsync(CreateDidDtxPersonRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDidDtxPersonExAsync(request, headers, runtime);
        }

        /**
         * Description: 端上密钥生成did，但不doc上链
         * Summary: 端上密钥生成did
         */
        public CreateDidDtxPersonResponse CreateDidDtxPersonEx(CreateDidDtxPersonRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidDtxPersonResponse>(DoRequest("1.0", "baas.did.dtx.person.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 端上密钥生成did，但不doc上链
         * Summary: 端上密钥生成did
         */
        public async Task<CreateDidDtxPersonResponse> CreateDidDtxPersonExAsync(CreateDidDtxPersonRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidDtxPersonResponse>(await DoRequestAsync("1.0", "baas.did.dtx.person.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 添加端上密钥，并上链
         * Summary: 添加端上密钥
         */
        public AddDidDtxPkResponse AddDidDtxPk(AddDidDtxPkRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return AddDidDtxPkEx(request, headers, runtime);
        }

        /**
         * Description: 添加端上密钥，并上链
         * Summary: 添加端上密钥
         */
        public async Task<AddDidDtxPkResponse> AddDidDtxPkAsync(AddDidDtxPkRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await AddDidDtxPkExAsync(request, headers, runtime);
        }

        /**
         * Description: 添加端上密钥，并上链
         * Summary: 添加端上密钥
         */
        public AddDidDtxPkResponse AddDidDtxPkEx(AddDidDtxPkRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<AddDidDtxPkResponse>(DoRequest("1.0", "baas.did.dtx.pk.add", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 添加端上密钥，并上链
         * Summary: 添加端上密钥
         */
        public async Task<AddDidDtxPkResponse> AddDidDtxPkExAsync(AddDidDtxPkRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<AddDidDtxPkResponse>(await DoRequestAsync("1.0", "baas.did.dtx.pk.add", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 端上密钥颁发vc
         * Summary: 端上密钥颁发vc
         */
        public CreateDidDtxVcResponse CreateDidDtxVc(CreateDidDtxVcRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDidDtxVcEx(request, headers, runtime);
        }

        /**
         * Description: 端上密钥颁发vc
         * Summary: 端上密钥颁发vc
         */
        public async Task<CreateDidDtxVcResponse> CreateDidDtxVcAsync(CreateDidDtxVcRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDidDtxVcExAsync(request, headers, runtime);
        }

        /**
         * Description: 端上密钥颁发vc
         * Summary: 端上密钥颁发vc
         */
        public CreateDidDtxVcResponse CreateDidDtxVcEx(CreateDidDtxVcRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidDtxVcResponse>(DoRequest("1.0", "baas.did.dtx.vc.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 端上密钥颁发vc
         * Summary: 端上密钥颁发vc
         */
        public async Task<CreateDidDtxVcResponse> CreateDidDtxVcExAsync(CreateDidDtxVcRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidDtxVcResponse>(await DoRequestAsync("1.0", "baas.did.dtx.vc.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据隐私服务合作方入驻接口
         * Summary: 数据隐私服务合作方入驻接口
         */
        public StartMydidcommunAgencySettleinResponse StartMydidcommunAgencySettlein(StartMydidcommunAgencySettleinRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartMydidcommunAgencySettleinEx(request, headers, runtime);
        }

        /**
         * Description: 数据隐私服务合作方入驻接口
         * Summary: 数据隐私服务合作方入驻接口
         */
        public async Task<StartMydidcommunAgencySettleinResponse> StartMydidcommunAgencySettleinAsync(StartMydidcommunAgencySettleinRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartMydidcommunAgencySettleinExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据隐私服务合作方入驻接口
         * Summary: 数据隐私服务合作方入驻接口
         */
        public StartMydidcommunAgencySettleinResponse StartMydidcommunAgencySettleinEx(StartMydidcommunAgencySettleinRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunAgencySettleinResponse>(DoRequest("1.0", "baas.mydidcommun.agency.settlein.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据隐私服务合作方入驻接口
         * Summary: 数据隐私服务合作方入驻接口
         */
        public async Task<StartMydidcommunAgencySettleinResponse> StartMydidcommunAgencySettleinExAsync(StartMydidcommunAgencySettleinRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunAgencySettleinResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.agency.settlein.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据隐私服务合作机构选择tapp接口
         * Summary: 数据隐私服务合作机构选择tapp接口
         */
        public StartMydidcommunAgencyChoicetappResponse StartMydidcommunAgencyChoicetapp(StartMydidcommunAgencyChoicetappRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartMydidcommunAgencyChoicetappEx(request, headers, runtime);
        }

        /**
         * Description: 数据隐私服务合作机构选择tapp接口
         * Summary: 数据隐私服务合作机构选择tapp接口
         */
        public async Task<StartMydidcommunAgencyChoicetappResponse> StartMydidcommunAgencyChoicetappAsync(StartMydidcommunAgencyChoicetappRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartMydidcommunAgencyChoicetappExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据隐私服务合作机构选择tapp接口
         * Summary: 数据隐私服务合作机构选择tapp接口
         */
        public StartMydidcommunAgencyChoicetappResponse StartMydidcommunAgencyChoicetappEx(StartMydidcommunAgencyChoicetappRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunAgencyChoicetappResponse>(DoRequest("1.0", "baas.mydidcommun.agency.choicetapp.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据隐私服务合作机构选择tapp接口
         * Summary: 数据隐私服务合作机构选择tapp接口
         */
        public async Task<StartMydidcommunAgencyChoicetappResponse> StartMydidcommunAgencyChoicetappExAsync(StartMydidcommunAgencyChoicetappRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunAgencyChoicetappResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.agency.choicetapp.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据隐私服务合作机构下个人用户入驻接口
         * Summary: 数据隐私服务合作机构下个人用户入驻接口
         */
        public StartMydidcommunAgencyuserPersonjoinResponse StartMydidcommunAgencyuserPersonjoin(StartMydidcommunAgencyuserPersonjoinRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartMydidcommunAgencyuserPersonjoinEx(request, headers, runtime);
        }

        /**
         * Description: 数据隐私服务合作机构下个人用户入驻接口
         * Summary: 数据隐私服务合作机构下个人用户入驻接口
         */
        public async Task<StartMydidcommunAgencyuserPersonjoinResponse> StartMydidcommunAgencyuserPersonjoinAsync(StartMydidcommunAgencyuserPersonjoinRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartMydidcommunAgencyuserPersonjoinExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据隐私服务合作机构下个人用户入驻接口
         * Summary: 数据隐私服务合作机构下个人用户入驻接口
         */
        public StartMydidcommunAgencyuserPersonjoinResponse StartMydidcommunAgencyuserPersonjoinEx(StartMydidcommunAgencyuserPersonjoinRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunAgencyuserPersonjoinResponse>(DoRequest("1.0", "baas.mydidcommun.agencyuser.personjoin.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据隐私服务合作机构下个人用户入驻接口
         * Summary: 数据隐私服务合作机构下个人用户入驻接口
         */
        public async Task<StartMydidcommunAgencyuserPersonjoinResponse> StartMydidcommunAgencyuserPersonjoinExAsync(StartMydidcommunAgencyuserPersonjoinRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunAgencyuserPersonjoinResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.agencyuser.personjoin.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据隐私服务合作机构下企业用户入驻接口
         * Summary: 数据隐私服务合作机构下企业用户入驻接口
         */
        public StartMydidcommunAgencyuserCorporatejoinResponse StartMydidcommunAgencyuserCorporatejoin(StartMydidcommunAgencyuserCorporatejoinRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartMydidcommunAgencyuserCorporatejoinEx(request, headers, runtime);
        }

        /**
         * Description: 数据隐私服务合作机构下企业用户入驻接口
         * Summary: 数据隐私服务合作机构下企业用户入驻接口
         */
        public async Task<StartMydidcommunAgencyuserCorporatejoinResponse> StartMydidcommunAgencyuserCorporatejoinAsync(StartMydidcommunAgencyuserCorporatejoinRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartMydidcommunAgencyuserCorporatejoinExAsync(request, headers, runtime);
        }

        /**
         * Description: 数据隐私服务合作机构下企业用户入驻接口
         * Summary: 数据隐私服务合作机构下企业用户入驻接口
         */
        public StartMydidcommunAgencyuserCorporatejoinResponse StartMydidcommunAgencyuserCorporatejoinEx(StartMydidcommunAgencyuserCorporatejoinRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunAgencyuserCorporatejoinResponse>(DoRequest("1.0", "baas.mydidcommun.agencyuser.corporatejoin.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 数据隐私服务合作机构下企业用户入驻接口
         * Summary: 数据隐私服务合作机构下企业用户入驻接口
         */
        public async Task<StartMydidcommunAgencyuserCorporatejoinResponse> StartMydidcommunAgencyuserCorporatejoinExAsync(StartMydidcommunAgencyuserCorporatejoinRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunAgencyuserCorporatejoinResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.agencyuser.corporatejoin.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新doc service接口
         * Summary: 更新doc service接口
         */
        public UpdateMydidcommunAgencyDocResponse UpdateMydidcommunAgencyDoc(UpdateMydidcommunAgencyDocRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateMydidcommunAgencyDocEx(request, headers, runtime);
        }

        /**
         * Description: 更新doc service接口
         * Summary: 更新doc service接口
         */
        public async Task<UpdateMydidcommunAgencyDocResponse> UpdateMydidcommunAgencyDocAsync(UpdateMydidcommunAgencyDocRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateMydidcommunAgencyDocExAsync(request, headers, runtime);
        }

        /**
         * Description: 更新doc service接口
         * Summary: 更新doc service接口
         */
        public UpdateMydidcommunAgencyDocResponse UpdateMydidcommunAgencyDocEx(UpdateMydidcommunAgencyDocRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateMydidcommunAgencyDocResponse>(DoRequest("1.0", "baas.mydidcommun.agency.doc.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新doc service接口
         * Summary: 更新doc service接口
         */
        public async Task<UpdateMydidcommunAgencyDocResponse> UpdateMydidcommunAgencyDocExAsync(UpdateMydidcommunAgencyDocRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateMydidcommunAgencyDocResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.agency.doc.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 主动发起数据传输流程请求
         * Summary: 主动发起数据安全传输流程
         */
        public StartMydidcommunAgencyDatatransmitstartResponse StartMydidcommunAgencyDatatransmitstart(StartMydidcommunAgencyDatatransmitstartRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartMydidcommunAgencyDatatransmitstartEx(request, headers, runtime);
        }

        /**
         * Description: 主动发起数据传输流程请求
         * Summary: 主动发起数据安全传输流程
         */
        public async Task<StartMydidcommunAgencyDatatransmitstartResponse> StartMydidcommunAgencyDatatransmitstartAsync(StartMydidcommunAgencyDatatransmitstartRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartMydidcommunAgencyDatatransmitstartExAsync(request, headers, runtime);
        }

        /**
         * Description: 主动发起数据传输流程请求
         * Summary: 主动发起数据安全传输流程
         */
        public StartMydidcommunAgencyDatatransmitstartResponse StartMydidcommunAgencyDatatransmitstartEx(StartMydidcommunAgencyDatatransmitstartRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunAgencyDatatransmitstartResponse>(DoRequest("1.0", "baas.mydidcommun.agency.datatransmitstart.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 主动发起数据传输流程请求
         * Summary: 主动发起数据安全传输流程
         */
        public async Task<StartMydidcommunAgencyDatatransmitstartResponse> StartMydidcommunAgencyDatatransmitstartExAsync(StartMydidcommunAgencyDatatransmitstartRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunAgencyDatatransmitstartResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.agency.datatransmitstart.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 继续触发主动发起数据安全传输流程
         * Summary: 继续触发主动发起数据安全传输流程
         */
        public StartMydidcommunAgencyDatatransmitcontinueResponse StartMydidcommunAgencyDatatransmitcontinue(StartMydidcommunAgencyDatatransmitcontinueRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartMydidcommunAgencyDatatransmitcontinueEx(request, headers, runtime);
        }

        /**
         * Description: 继续触发主动发起数据安全传输流程
         * Summary: 继续触发主动发起数据安全传输流程
         */
        public async Task<StartMydidcommunAgencyDatatransmitcontinueResponse> StartMydidcommunAgencyDatatransmitcontinueAsync(StartMydidcommunAgencyDatatransmitcontinueRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartMydidcommunAgencyDatatransmitcontinueExAsync(request, headers, runtime);
        }

        /**
         * Description: 继续触发主动发起数据安全传输流程
         * Summary: 继续触发主动发起数据安全传输流程
         */
        public StartMydidcommunAgencyDatatransmitcontinueResponse StartMydidcommunAgencyDatatransmitcontinueEx(StartMydidcommunAgencyDatatransmitcontinueRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunAgencyDatatransmitcontinueResponse>(DoRequest("1.0", "baas.mydidcommun.agency.datatransmitcontinue.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 继续触发主动发起数据安全传输流程
         * Summary: 继续触发主动发起数据安全传输流程
         */
        public async Task<StartMydidcommunAgencyDatatransmitcontinueResponse> StartMydidcommunAgencyDatatransmitcontinueExAsync(StartMydidcommunAgencyDatatransmitcontinueRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunAgencyDatatransmitcontinueResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.agency.datatransmitcontinue.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 主动发起申请数据资产的流程
         * Summary: 主动发起申请数据资产的流程
         */
        public StartMydidcommunAgencyDataapplicationResponse StartMydidcommunAgencyDataapplication(StartMydidcommunAgencyDataapplicationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartMydidcommunAgencyDataapplicationEx(request, headers, runtime);
        }

        /**
         * Description: 主动发起申请数据资产的流程
         * Summary: 主动发起申请数据资产的流程
         */
        public async Task<StartMydidcommunAgencyDataapplicationResponse> StartMydidcommunAgencyDataapplicationAsync(StartMydidcommunAgencyDataapplicationRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartMydidcommunAgencyDataapplicationExAsync(request, headers, runtime);
        }

        /**
         * Description: 主动发起申请数据资产的流程
         * Summary: 主动发起申请数据资产的流程
         */
        public StartMydidcommunAgencyDataapplicationResponse StartMydidcommunAgencyDataapplicationEx(StartMydidcommunAgencyDataapplicationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunAgencyDataapplicationResponse>(DoRequest("1.0", "baas.mydidcommun.agency.dataapplication.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 主动发起申请数据资产的流程
         * Summary: 主动发起申请数据资产的流程
         */
        public async Task<StartMydidcommunAgencyDataapplicationResponse> StartMydidcommunAgencyDataapplicationExAsync(StartMydidcommunAgencyDataapplicationRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunAgencyDataapplicationResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.agency.dataapplication.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 据隐私服务合作机构选择多个tapp接口
         * Summary: 据隐私服务合作机构选择多个tapp接口
         */
        public StartMydidcommunAgencyChoicetapplistResponse StartMydidcommunAgencyChoicetapplist(StartMydidcommunAgencyChoicetapplistRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartMydidcommunAgencyChoicetapplistEx(request, headers, runtime);
        }

        /**
         * Description: 据隐私服务合作机构选择多个tapp接口
         * Summary: 据隐私服务合作机构选择多个tapp接口
         */
        public async Task<StartMydidcommunAgencyChoicetapplistResponse> StartMydidcommunAgencyChoicetapplistAsync(StartMydidcommunAgencyChoicetapplistRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartMydidcommunAgencyChoicetapplistExAsync(request, headers, runtime);
        }

        /**
         * Description: 据隐私服务合作机构选择多个tapp接口
         * Summary: 据隐私服务合作机构选择多个tapp接口
         */
        public StartMydidcommunAgencyChoicetapplistResponse StartMydidcommunAgencyChoicetapplistEx(StartMydidcommunAgencyChoicetapplistRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunAgencyChoicetapplistResponse>(DoRequest("1.0", "baas.mydidcommun.agency.choicetapplist.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 据隐私服务合作机构选择多个tapp接口
         * Summary: 据隐私服务合作机构选择多个tapp接口
         */
        public async Task<StartMydidcommunAgencyChoicetapplistResponse> StartMydidcommunAgencyChoicetapplistExAsync(StartMydidcommunAgencyChoicetapplistRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunAgencyChoicetapplistResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.agency.choicetapplist.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 定义数据资产审批流程
         * Summary: 定义数据资产审批流程
         */
        public StartMydidcommunAgencyDataassertregisterResponse StartMydidcommunAgencyDataassertregister(StartMydidcommunAgencyDataassertregisterRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartMydidcommunAgencyDataassertregisterEx(request, headers, runtime);
        }

        /**
         * Description: 定义数据资产审批流程
         * Summary: 定义数据资产审批流程
         */
        public async Task<StartMydidcommunAgencyDataassertregisterResponse> StartMydidcommunAgencyDataassertregisterAsync(StartMydidcommunAgencyDataassertregisterRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartMydidcommunAgencyDataassertregisterExAsync(request, headers, runtime);
        }

        /**
         * Description: 定义数据资产审批流程
         * Summary: 定义数据资产审批流程
         */
        public StartMydidcommunAgencyDataassertregisterResponse StartMydidcommunAgencyDataassertregisterEx(StartMydidcommunAgencyDataassertregisterRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunAgencyDataassertregisterResponse>(DoRequest("1.0", "baas.mydidcommun.agency.dataassertregister.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 定义数据资产审批流程
         * Summary: 定义数据资产审批流程
         */
        public async Task<StartMydidcommunAgencyDataassertregisterResponse> StartMydidcommunAgencyDataassertregisterExAsync(StartMydidcommunAgencyDataassertregisterRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunAgencyDataassertregisterResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.agency.dataassertregister.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 发起数据授权
         * Summary: 发起数据授权
         */
        public StartMydidcommunAgencyAuthResponse StartMydidcommunAgencyAuth(StartMydidcommunAgencyAuthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartMydidcommunAgencyAuthEx(request, headers, runtime);
        }

        /**
         * Description: 发起数据授权
         * Summary: 发起数据授权
         */
        public async Task<StartMydidcommunAgencyAuthResponse> StartMydidcommunAgencyAuthAsync(StartMydidcommunAgencyAuthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartMydidcommunAgencyAuthExAsync(request, headers, runtime);
        }

        /**
         * Description: 发起数据授权
         * Summary: 发起数据授权
         */
        public StartMydidcommunAgencyAuthResponse StartMydidcommunAgencyAuthEx(StartMydidcommunAgencyAuthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunAgencyAuthResponse>(DoRequest("1.0", "baas.mydidcommun.agency.auth.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 发起数据授权
         * Summary: 发起数据授权
         */
        public async Task<StartMydidcommunAgencyAuthResponse> StartMydidcommunAgencyAuthExAsync(StartMydidcommunAgencyAuthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunAgencyAuthResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.agency.auth.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 处理授权流程
         * Summary: 处理授权流程
         */
        public StartMydidcommunAgencyProcessauthResponse StartMydidcommunAgencyProcessauth(StartMydidcommunAgencyProcessauthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartMydidcommunAgencyProcessauthEx(request, headers, runtime);
        }

        /**
         * Description: 处理授权流程
         * Summary: 处理授权流程
         */
        public async Task<StartMydidcommunAgencyProcessauthResponse> StartMydidcommunAgencyProcessauthAsync(StartMydidcommunAgencyProcessauthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartMydidcommunAgencyProcessauthExAsync(request, headers, runtime);
        }

        /**
         * Description: 处理授权流程
         * Summary: 处理授权流程
         */
        public StartMydidcommunAgencyProcessauthResponse StartMydidcommunAgencyProcessauthEx(StartMydidcommunAgencyProcessauthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunAgencyProcessauthResponse>(DoRequest("1.0", "baas.mydidcommun.agency.processauth.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 处理授权流程
         * Summary: 处理授权流程
         */
        public async Task<StartMydidcommunAgencyProcessauthResponse> StartMydidcommunAgencyProcessauthExAsync(StartMydidcommunAgencyProcessauthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunAgencyProcessauthResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.agency.processauth.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询授权当前状态
         * Summary: 查询授权当前状态
         */
        public QueryMydidcommunAgencyProcessauthResponse QueryMydidcommunAgencyProcessauth(QueryMydidcommunAgencyProcessauthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryMydidcommunAgencyProcessauthEx(request, headers, runtime);
        }

        /**
         * Description: 查询授权当前状态
         * Summary: 查询授权当前状态
         */
        public async Task<QueryMydidcommunAgencyProcessauthResponse> QueryMydidcommunAgencyProcessauthAsync(QueryMydidcommunAgencyProcessauthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryMydidcommunAgencyProcessauthExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询授权当前状态
         * Summary: 查询授权当前状态
         */
        public QueryMydidcommunAgencyProcessauthResponse QueryMydidcommunAgencyProcessauthEx(QueryMydidcommunAgencyProcessauthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryMydidcommunAgencyProcessauthResponse>(DoRequest("1.0", "baas.mydidcommun.agency.processauth.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询授权当前状态
         * Summary: 查询授权当前状态
         */
        public async Task<QueryMydidcommunAgencyProcessauthResponse> QueryMydidcommunAgencyProcessauthExAsync(QueryMydidcommunAgencyProcessauthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryMydidcommunAgencyProcessauthResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.agency.processauth.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过serviceType查找其对应信息
         * Summary: 通过serviceType查找其对应信息
         */
        public QueryMydidcommunAgencyServicetypeinfoResponse QueryMydidcommunAgencyServicetypeinfo(QueryMydidcommunAgencyServicetypeinfoRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryMydidcommunAgencyServicetypeinfoEx(request, headers, runtime);
        }

        /**
         * Description: 通过serviceType查找其对应信息
         * Summary: 通过serviceType查找其对应信息
         */
        public async Task<QueryMydidcommunAgencyServicetypeinfoResponse> QueryMydidcommunAgencyServicetypeinfoAsync(QueryMydidcommunAgencyServicetypeinfoRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryMydidcommunAgencyServicetypeinfoExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过serviceType查找其对应信息
         * Summary: 通过serviceType查找其对应信息
         */
        public QueryMydidcommunAgencyServicetypeinfoResponse QueryMydidcommunAgencyServicetypeinfoEx(QueryMydidcommunAgencyServicetypeinfoRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryMydidcommunAgencyServicetypeinfoResponse>(DoRequest("1.0", "baas.mydidcommun.agency.servicetypeinfo.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过serviceType查找其对应信息
         * Summary: 通过serviceType查找其对应信息
         */
        public async Task<QueryMydidcommunAgencyServicetypeinfoResponse> QueryMydidcommunAgencyServicetypeinfoExAsync(QueryMydidcommunAgencyServicetypeinfoRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryMydidcommunAgencyServicetypeinfoResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.agency.servicetypeinfo.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询任务执行结果文件
         * Summary: 查询任务执行结果文件
         */
        public QueryMydidcommunAgencyTaskresultfileResponse QueryMydidcommunAgencyTaskresultfile(QueryMydidcommunAgencyTaskresultfileRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryMydidcommunAgencyTaskresultfileEx(request, headers, runtime);
        }

        /**
         * Description: 查询任务执行结果文件
         * Summary: 查询任务执行结果文件
         */
        public async Task<QueryMydidcommunAgencyTaskresultfileResponse> QueryMydidcommunAgencyTaskresultfileAsync(QueryMydidcommunAgencyTaskresultfileRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryMydidcommunAgencyTaskresultfileExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询任务执行结果文件
         * Summary: 查询任务执行结果文件
         */
        public QueryMydidcommunAgencyTaskresultfileResponse QueryMydidcommunAgencyTaskresultfileEx(QueryMydidcommunAgencyTaskresultfileRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryMydidcommunAgencyTaskresultfileResponse>(DoRequest("1.0", "baas.mydidcommun.agency.taskresultfile.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询任务执行结果文件
         * Summary: 查询任务执行结果文件
         */
        public async Task<QueryMydidcommunAgencyTaskresultfileResponse> QueryMydidcommunAgencyTaskresultfileExAsync(QueryMydidcommunAgencyTaskresultfileRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryMydidcommunAgencyTaskresultfileResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.agency.taskresultfile.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 任务执行 - 为目标用户申请某一服务类型的调用权限
         * Summary: 服务类型权限申请
         */
        public ApplyMydidcommunTaskServicetypeResponse ApplyMydidcommunTaskServicetype(ApplyMydidcommunTaskServicetypeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ApplyMydidcommunTaskServicetypeEx(request, headers, runtime);
        }

        /**
         * Description: 任务执行 - 为目标用户申请某一服务类型的调用权限
         * Summary: 服务类型权限申请
         */
        public async Task<ApplyMydidcommunTaskServicetypeResponse> ApplyMydidcommunTaskServicetypeAsync(ApplyMydidcommunTaskServicetypeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ApplyMydidcommunTaskServicetypeExAsync(request, headers, runtime);
        }

        /**
         * Description: 任务执行 - 为目标用户申请某一服务类型的调用权限
         * Summary: 服务类型权限申请
         */
        public ApplyMydidcommunTaskServicetypeResponse ApplyMydidcommunTaskServicetypeEx(ApplyMydidcommunTaskServicetypeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyMydidcommunTaskServicetypeResponse>(DoRequest("1.0", "baas.mydidcommun.task.servicetype.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 任务执行 - 为目标用户申请某一服务类型的调用权限
         * Summary: 服务类型权限申请
         */
        public async Task<ApplyMydidcommunTaskServicetypeResponse> ApplyMydidcommunTaskServicetypeExAsync(ApplyMydidcommunTaskServicetypeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ApplyMydidcommunTaskServicetypeResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.task.servicetype.apply", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过任务Id获取任务执行结果
         * Summary: 获取任务执行结果
         */
        public GetMydidcommunTaskTaskresultResponse GetMydidcommunTaskTaskresult(GetMydidcommunTaskTaskresultRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return GetMydidcommunTaskTaskresultEx(request, headers, runtime);
        }

        /**
         * Description: 通过任务Id获取任务执行结果
         * Summary: 获取任务执行结果
         */
        public async Task<GetMydidcommunTaskTaskresultResponse> GetMydidcommunTaskTaskresultAsync(GetMydidcommunTaskTaskresultRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await GetMydidcommunTaskTaskresultExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过任务Id获取任务执行结果
         * Summary: 获取任务执行结果
         */
        public GetMydidcommunTaskTaskresultResponse GetMydidcommunTaskTaskresultEx(GetMydidcommunTaskTaskresultRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetMydidcommunTaskTaskresultResponse>(DoRequest("1.0", "baas.mydidcommun.task.taskresult.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过任务Id获取任务执行结果
         * Summary: 获取任务执行结果
         */
        public async Task<GetMydidcommunTaskTaskresultResponse> GetMydidcommunTaskTaskresultExAsync(GetMydidcommunTaskTaskresultRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetMydidcommunTaskTaskresultResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.task.taskresult.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 注册数据资产
         * Summary: 添加数据资产
         */
        public AddMydidcommunAssetDataResponse AddMydidcommunAssetData(AddMydidcommunAssetDataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return AddMydidcommunAssetDataEx(request, headers, runtime);
        }

        /**
         * Description: 注册数据资产
         * Summary: 添加数据资产
         */
        public async Task<AddMydidcommunAssetDataResponse> AddMydidcommunAssetDataAsync(AddMydidcommunAssetDataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await AddMydidcommunAssetDataExAsync(request, headers, runtime);
        }

        /**
         * Description: 注册数据资产
         * Summary: 添加数据资产
         */
        public AddMydidcommunAssetDataResponse AddMydidcommunAssetDataEx(AddMydidcommunAssetDataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<AddMydidcommunAssetDataResponse>(DoRequest("1.0", "baas.mydidcommun.asset.data.add", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 注册数据资产
         * Summary: 添加数据资产
         */
        public async Task<AddMydidcommunAssetDataResponse> AddMydidcommunAssetDataExAsync(AddMydidcommunAssetDataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<AddMydidcommunAssetDataResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.asset.data.add", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 开始获取数据任务流程
         * Summary: 执行获取数据接口
         */
        public StartMydidcommunTaskGetdataResponse StartMydidcommunTaskGetdata(StartMydidcommunTaskGetdataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartMydidcommunTaskGetdataEx(request, headers, runtime);
        }

        /**
         * Description: 开始获取数据任务流程
         * Summary: 执行获取数据接口
         */
        public async Task<StartMydidcommunTaskGetdataResponse> StartMydidcommunTaskGetdataAsync(StartMydidcommunTaskGetdataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartMydidcommunTaskGetdataExAsync(request, headers, runtime);
        }

        /**
         * Description: 开始获取数据任务流程
         * Summary: 执行获取数据接口
         */
        public StartMydidcommunTaskGetdataResponse StartMydidcommunTaskGetdataEx(StartMydidcommunTaskGetdataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunTaskGetdataResponse>(DoRequest("1.0", "baas.mydidcommun.task.getdata.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 开始获取数据任务流程
         * Summary: 执行获取数据接口
         */
        public async Task<StartMydidcommunTaskGetdataResponse> StartMydidcommunTaskGetdataExAsync(StartMydidcommunTaskGetdataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunTaskGetdataResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.task.getdata.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 针对线下入驻，或者无法提供四要素的机构入驻
         * Summary: 机构入驻数据隐私服务
         */
        public StartMydidcommunInstitutionSettleinResponse StartMydidcommunInstitutionSettlein(StartMydidcommunInstitutionSettleinRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartMydidcommunInstitutionSettleinEx(request, headers, runtime);
        }

        /**
         * Description: 针对线下入驻，或者无法提供四要素的机构入驻
         * Summary: 机构入驻数据隐私服务
         */
        public async Task<StartMydidcommunInstitutionSettleinResponse> StartMydidcommunInstitutionSettleinAsync(StartMydidcommunInstitutionSettleinRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartMydidcommunInstitutionSettleinExAsync(request, headers, runtime);
        }

        /**
         * Description: 针对线下入驻，或者无法提供四要素的机构入驻
         * Summary: 机构入驻数据隐私服务
         */
        public StartMydidcommunInstitutionSettleinResponse StartMydidcommunInstitutionSettleinEx(StartMydidcommunInstitutionSettleinRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunInstitutionSettleinResponse>(DoRequest("1.0", "baas.mydidcommun.institution.settlein.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 针对线下入驻，或者无法提供四要素的机构入驻
         * Summary: 机构入驻数据隐私服务
         */
        public async Task<StartMydidcommunInstitutionSettleinResponse> StartMydidcommunInstitutionSettleinExAsync(StartMydidcommunInstitutionSettleinRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidcommunInstitutionSettleinResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.institution.settlein.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 计算集群 - 部署同步 - 获取一个需要同步的部署任务
         * Summary: 计算集群-部署同步-获取一个需要同步任务
         */
        public GetMydidcommunWorkergroupSyncResponse GetMydidcommunWorkergroupSync(GetMydidcommunWorkergroupSyncRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return GetMydidcommunWorkergroupSyncEx(request, headers, runtime);
        }

        /**
         * Description: 计算集群 - 部署同步 - 获取一个需要同步的部署任务
         * Summary: 计算集群-部署同步-获取一个需要同步任务
         */
        public async Task<GetMydidcommunWorkergroupSyncResponse> GetMydidcommunWorkergroupSyncAsync(GetMydidcommunWorkergroupSyncRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await GetMydidcommunWorkergroupSyncExAsync(request, headers, runtime);
        }

        /**
         * Description: 计算集群 - 部署同步 - 获取一个需要同步的部署任务
         * Summary: 计算集群-部署同步-获取一个需要同步任务
         */
        public GetMydidcommunWorkergroupSyncResponse GetMydidcommunWorkergroupSyncEx(GetMydidcommunWorkergroupSyncRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetMydidcommunWorkergroupSyncResponse>(DoRequest("1.0", "baas.mydidcommun.workergroup.sync.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 计算集群 - 部署同步 - 获取一个需要同步的部署任务
         * Summary: 计算集群-部署同步-获取一个需要同步任务
         */
        public async Task<GetMydidcommunWorkergroupSyncResponse> GetMydidcommunWorkergroupSyncExAsync(GetMydidcommunWorkergroupSyncRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetMydidcommunWorkergroupSyncResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.workergroup.sync.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过部署ID获取部署详情
         * Summary: 计算集群-部署-获取部署详情
         */
        public GetMydidcommunWorkergroupPodResponse GetMydidcommunWorkergroupPod(GetMydidcommunWorkergroupPodRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return GetMydidcommunWorkergroupPodEx(request, headers, runtime);
        }

        /**
         * Description: 通过部署ID获取部署详情
         * Summary: 计算集群-部署-获取部署详情
         */
        public async Task<GetMydidcommunWorkergroupPodResponse> GetMydidcommunWorkergroupPodAsync(GetMydidcommunWorkergroupPodRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await GetMydidcommunWorkergroupPodExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过部署ID获取部署详情
         * Summary: 计算集群-部署-获取部署详情
         */
        public GetMydidcommunWorkergroupPodResponse GetMydidcommunWorkergroupPodEx(GetMydidcommunWorkergroupPodRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetMydidcommunWorkergroupPodResponse>(DoRequest("1.0", "baas.mydidcommun.workergroup.pod.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过部署ID获取部署详情
         * Summary: 计算集群-部署-获取部署详情
         */
        public async Task<GetMydidcommunWorkergroupPodResponse> GetMydidcommunWorkergroupPodExAsync(GetMydidcommunWorkergroupPodRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetMydidcommunWorkergroupPodResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.workergroup.pod.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 计算集群-部署同步-设置同步任务完成
         * Summary: 计算集群-部署同步-设置同步任务完成
         */
        public FinishMydidcommunWorkergroupSyncResponse FinishMydidcommunWorkergroupSync(FinishMydidcommunWorkergroupSyncRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return FinishMydidcommunWorkergroupSyncEx(request, headers, runtime);
        }

        /**
         * Description: 计算集群-部署同步-设置同步任务完成
         * Summary: 计算集群-部署同步-设置同步任务完成
         */
        public async Task<FinishMydidcommunWorkergroupSyncResponse> FinishMydidcommunWorkergroupSyncAsync(FinishMydidcommunWorkergroupSyncRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await FinishMydidcommunWorkergroupSyncExAsync(request, headers, runtime);
        }

        /**
         * Description: 计算集群-部署同步-设置同步任务完成
         * Summary: 计算集群-部署同步-设置同步任务完成
         */
        public FinishMydidcommunWorkergroupSyncResponse FinishMydidcommunWorkergroupSyncEx(FinishMydidcommunWorkergroupSyncRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<FinishMydidcommunWorkergroupSyncResponse>(DoRequest("1.0", "baas.mydidcommun.workergroup.sync.finish", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 计算集群-部署同步-设置同步任务完成
         * Summary: 计算集群-部署同步-设置同步任务完成
         */
        public async Task<FinishMydidcommunWorkergroupSyncResponse> FinishMydidcommunWorkergroupSyncExAsync(FinishMydidcommunWorkergroupSyncRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<FinishMydidcommunWorkergroupSyncResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.workergroup.sync.finish", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 计算集群-部署同步-获取TAPP部署详情
         * Summary: 计算集群-TAPP-获取TAPP部署
         */
        public GetMydidcommunWorkergroupTappResponse GetMydidcommunWorkergroupTapp(GetMydidcommunWorkergroupTappRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return GetMydidcommunWorkergroupTappEx(request, headers, runtime);
        }

        /**
         * Description: 计算集群-部署同步-获取TAPP部署详情
         * Summary: 计算集群-TAPP-获取TAPP部署
         */
        public async Task<GetMydidcommunWorkergroupTappResponse> GetMydidcommunWorkergroupTappAsync(GetMydidcommunWorkergroupTappRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await GetMydidcommunWorkergroupTappExAsync(request, headers, runtime);
        }

        /**
         * Description: 计算集群-部署同步-获取TAPP部署详情
         * Summary: 计算集群-TAPP-获取TAPP部署
         */
        public GetMydidcommunWorkergroupTappResponse GetMydidcommunWorkergroupTappEx(GetMydidcommunWorkergroupTappRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetMydidcommunWorkergroupTappResponse>(DoRequest("1.0", "baas.mydidcommun.workergroup.tapp.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 计算集群-部署同步-获取TAPP部署详情
         * Summary: 计算集群-TAPP-获取TAPP部署
         */
        public async Task<GetMydidcommunWorkergroupTappResponse> GetMydidcommunWorkergroupTappExAsync(GetMydidcommunWorkergroupTappRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetMydidcommunWorkergroupTappResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.workergroup.tapp.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新TAPP部署的信息，包括公钥哈希等
         * Summary: 计算集群-TAPP-更新TAPP信息
         */
        public UpdateMydidcommunWorkergroupTappResponse UpdateMydidcommunWorkergroupTapp(UpdateMydidcommunWorkergroupTappRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateMydidcommunWorkergroupTappEx(request, headers, runtime);
        }

        /**
         * Description: 更新TAPP部署的信息，包括公钥哈希等
         * Summary: 计算集群-TAPP-更新TAPP信息
         */
        public async Task<UpdateMydidcommunWorkergroupTappResponse> UpdateMydidcommunWorkergroupTappAsync(UpdateMydidcommunWorkergroupTappRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateMydidcommunWorkergroupTappExAsync(request, headers, runtime);
        }

        /**
         * Description: 更新TAPP部署的信息，包括公钥哈希等
         * Summary: 计算集群-TAPP-更新TAPP信息
         */
        public UpdateMydidcommunWorkergroupTappResponse UpdateMydidcommunWorkergroupTappEx(UpdateMydidcommunWorkergroupTappRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateMydidcommunWorkergroupTappResponse>(DoRequest("1.0", "baas.mydidcommun.workergroup.tapp.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新TAPP部署的信息，包括公钥哈希等
         * Summary: 计算集群-TAPP-更新TAPP信息
         */
        public async Task<UpdateMydidcommunWorkergroupTappResponse> UpdateMydidcommunWorkergroupTappExAsync(UpdateMydidcommunWorkergroupTappRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateMydidcommunWorkergroupTappResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.workergroup.tapp.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取工作流的所有在线版本的配置
         * Summary: 计算集群-工作流-获取工作流配置
         */
        public QueryMydidcommunWorkergroupWorkflowResponse QueryMydidcommunWorkergroupWorkflow(QueryMydidcommunWorkergroupWorkflowRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryMydidcommunWorkergroupWorkflowEx(request, headers, runtime);
        }

        /**
         * Description: 获取工作流的所有在线版本的配置
         * Summary: 计算集群-工作流-获取工作流配置
         */
        public async Task<QueryMydidcommunWorkergroupWorkflowResponse> QueryMydidcommunWorkergroupWorkflowAsync(QueryMydidcommunWorkergroupWorkflowRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryMydidcommunWorkergroupWorkflowExAsync(request, headers, runtime);
        }

        /**
         * Description: 获取工作流的所有在线版本的配置
         * Summary: 计算集群-工作流-获取工作流配置
         */
        public QueryMydidcommunWorkergroupWorkflowResponse QueryMydidcommunWorkergroupWorkflowEx(QueryMydidcommunWorkergroupWorkflowRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryMydidcommunWorkergroupWorkflowResponse>(DoRequest("1.0", "baas.mydidcommun.workergroup.workflow.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取工作流的所有在线版本的配置
         * Summary: 计算集群-工作流-获取工作流配置
         */
        public async Task<QueryMydidcommunWorkergroupWorkflowResponse> QueryMydidcommunWorkergroupWorkflowExAsync(QueryMydidcommunWorkergroupWorkflowRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryMydidcommunWorkergroupWorkflowResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.workergroup.workflow.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 同步集群状态
         * Summary: 计算集群-集群-同步集群状态
         */
        public SyncMydidcommunWorkergroupGroupResponse SyncMydidcommunWorkergroupGroup(SyncMydidcommunWorkergroupGroupRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SyncMydidcommunWorkergroupGroupEx(request, headers, runtime);
        }

        /**
         * Description: 同步集群状态
         * Summary: 计算集群-集群-同步集群状态
         */
        public async Task<SyncMydidcommunWorkergroupGroupResponse> SyncMydidcommunWorkergroupGroupAsync(SyncMydidcommunWorkergroupGroupRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SyncMydidcommunWorkergroupGroupExAsync(request, headers, runtime);
        }

        /**
         * Description: 同步集群状态
         * Summary: 计算集群-集群-同步集群状态
         */
        public SyncMydidcommunWorkergroupGroupResponse SyncMydidcommunWorkergroupGroupEx(SyncMydidcommunWorkergroupGroupRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SyncMydidcommunWorkergroupGroupResponse>(DoRequest("1.0", "baas.mydidcommun.workergroup.group.sync", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 同步集群状态
         * Summary: 计算集群-集群-同步集群状态
         */
        public async Task<SyncMydidcommunWorkergroupGroupResponse> SyncMydidcommunWorkergroupGroupExAsync(SyncMydidcommunWorkergroupGroupRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SyncMydidcommunWorkergroupGroupResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.workergroup.group.sync", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 计算集群-部署版本-获取版本列表
         * Summary: 计算集群-部署版本-获取版本列表
         */
        public ListMydidcommunWorkergroupPodversionResponse ListMydidcommunWorkergroupPodversion(ListMydidcommunWorkergroupPodversionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ListMydidcommunWorkergroupPodversionEx(request, headers, runtime);
        }

        /**
         * Description: 计算集群-部署版本-获取版本列表
         * Summary: 计算集群-部署版本-获取版本列表
         */
        public async Task<ListMydidcommunWorkergroupPodversionResponse> ListMydidcommunWorkergroupPodversionAsync(ListMydidcommunWorkergroupPodversionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ListMydidcommunWorkergroupPodversionExAsync(request, headers, runtime);
        }

        /**
         * Description: 计算集群-部署版本-获取版本列表
         * Summary: 计算集群-部署版本-获取版本列表
         */
        public ListMydidcommunWorkergroupPodversionResponse ListMydidcommunWorkergroupPodversionEx(ListMydidcommunWorkergroupPodversionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListMydidcommunWorkergroupPodversionResponse>(DoRequest("1.0", "baas.mydidcommun.workergroup.podversion.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 计算集群-部署版本-获取版本列表
         * Summary: 计算集群-部署版本-获取版本列表
         */
        public async Task<ListMydidcommunWorkergroupPodversionResponse> ListMydidcommunWorkergroupPodversionExAsync(ListMydidcommunWorkergroupPodversionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListMydidcommunWorkergroupPodversionResponse>(await DoRequestAsync("1.0", "baas.mydidcommun.workergroup.podversion.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: did创建
         * Summary: did创建
         */
        public SaveMydidIdaasDidserviceResponse SaveMydidIdaasDidservice(SaveMydidIdaasDidserviceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SaveMydidIdaasDidserviceEx(request, headers, runtime);
        }

        /**
         * Description: did创建
         * Summary: did创建
         */
        public async Task<SaveMydidIdaasDidserviceResponse> SaveMydidIdaasDidserviceAsync(SaveMydidIdaasDidserviceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SaveMydidIdaasDidserviceExAsync(request, headers, runtime);
        }

        /**
         * Description: did创建
         * Summary: did创建
         */
        public SaveMydidIdaasDidserviceResponse SaveMydidIdaasDidserviceEx(SaveMydidIdaasDidserviceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SaveMydidIdaasDidserviceResponse>(DoRequest("1.0", "baas.mydid.idaas.didservice.save", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: did创建
         * Summary: did创建
         */
        public async Task<SaveMydidIdaasDidserviceResponse> SaveMydidIdaasDidserviceExAsync(SaveMydidIdaasDidserviceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SaveMydidIdaasDidserviceResponse>(await DoRequestAsync("1.0", "baas.mydid.idaas.didservice.save", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 消息端主动拉取did event
         * Summary: 消息端主动拉取did event
         */
        public QueryDidNotificationDideventResponse QueryDidNotificationDidevent(QueryDidNotificationDideventRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDidNotificationDideventEx(request, headers, runtime);
        }

        /**
         * Description: 消息端主动拉取did event
         * Summary: 消息端主动拉取did event
         */
        public async Task<QueryDidNotificationDideventResponse> QueryDidNotificationDideventAsync(QueryDidNotificationDideventRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDidNotificationDideventExAsync(request, headers, runtime);
        }

        /**
         * Description: 消息端主动拉取did event
         * Summary: 消息端主动拉取did event
         */
        public QueryDidNotificationDideventResponse QueryDidNotificationDideventEx(QueryDidNotificationDideventRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidNotificationDideventResponse>(DoRequest("1.0", "baas.did.notification.didevent.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 消息端主动拉取did event
         * Summary: 消息端主动拉取did event
         */
        public async Task<QueryDidNotificationDideventResponse> QueryDidNotificationDideventExAsync(QueryDidNotificationDideventRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidNotificationDideventResponse>(await DoRequestAsync("1.0", "baas.did.notification.didevent.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 主动拉取vc事件
         * Summary: 主动拉取vc事件
         */
        public QueryDidNotificationVceventResponse QueryDidNotificationVcevent(QueryDidNotificationVceventRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDidNotificationVceventEx(request, headers, runtime);
        }

        /**
         * Description: 主动拉取vc事件
         * Summary: 主动拉取vc事件
         */
        public async Task<QueryDidNotificationVceventResponse> QueryDidNotificationVceventAsync(QueryDidNotificationVceventRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDidNotificationVceventExAsync(request, headers, runtime);
        }

        /**
         * Description: 主动拉取vc事件
         * Summary: 主动拉取vc事件
         */
        public QueryDidNotificationVceventResponse QueryDidNotificationVceventEx(QueryDidNotificationVceventRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidNotificationVceventResponse>(DoRequest("1.0", "baas.did.notification.vcevent.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 主动拉取vc事件
         * Summary: 主动拉取vc事件
         */
        public async Task<QueryDidNotificationVceventResponse> QueryDidNotificationVceventExAsync(QueryDidNotificationVceventRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidNotificationVceventResponse>(await DoRequestAsync("1.0", "baas.did.notification.vcevent.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取did全量数据
         * Summary: 获取did全量数据
         */
        public QueryDidNotificationFulldidResponse QueryDidNotificationFulldid(QueryDidNotificationFulldidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDidNotificationFulldidEx(request, headers, runtime);
        }

        /**
         * Description: 获取did全量数据
         * Summary: 获取did全量数据
         */
        public async Task<QueryDidNotificationFulldidResponse> QueryDidNotificationFulldidAsync(QueryDidNotificationFulldidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDidNotificationFulldidExAsync(request, headers, runtime);
        }

        /**
         * Description: 获取did全量数据
         * Summary: 获取did全量数据
         */
        public QueryDidNotificationFulldidResponse QueryDidNotificationFulldidEx(QueryDidNotificationFulldidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidNotificationFulldidResponse>(DoRequest("1.0", "baas.did.notification.fulldid.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取did全量数据
         * Summary: 获取did全量数据
         */
        public async Task<QueryDidNotificationFulldidResponse> QueryDidNotificationFulldidExAsync(QueryDidNotificationFulldidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidNotificationFulldidResponse>(await DoRequestAsync("1.0", "baas.did.notification.fulldid.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 非托管模式下创建企业did账户
         * Summary: 非托管模式下创建企业did账户
         */
        public CreateDidIdentityCorporateResponse CreateDidIdentityCorporate(CreateDidIdentityCorporateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDidIdentityCorporateEx(request, headers, runtime);
        }

        /**
         * Description: 非托管模式下创建企业did账户
         * Summary: 非托管模式下创建企业did账户
         */
        public async Task<CreateDidIdentityCorporateResponse> CreateDidIdentityCorporateAsync(CreateDidIdentityCorporateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDidIdentityCorporateExAsync(request, headers, runtime);
        }

        /**
         * Description: 非托管模式下创建企业did账户
         * Summary: 非托管模式下创建企业did账户
         */
        public CreateDidIdentityCorporateResponse CreateDidIdentityCorporateEx(CreateDidIdentityCorporateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidIdentityCorporateResponse>(DoRequest("1.0", "baas.did.identity.corporate.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 非托管模式下创建企业did账户
         * Summary: 非托管模式下创建企业did账户
         */
        public async Task<CreateDidIdentityCorporateResponse> CreateDidIdentityCorporateExAsync(CreateDidIdentityCorporateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidIdentityCorporateResponse>(await DoRequestAsync("1.0", "baas.did.identity.corporate.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 计算上链交易hash
         * Summary: add did doc上链交易hash
         */
        public InitDidAdddidHashResponse InitDidAdddidHash(InitDidAdddidHashRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return InitDidAdddidHashEx(request, headers, runtime);
        }

        /**
         * Description: 计算上链交易hash
         * Summary: add did doc上链交易hash
         */
        public async Task<InitDidAdddidHashResponse> InitDidAdddidHashAsync(InitDidAdddidHashRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await InitDidAdddidHashExAsync(request, headers, runtime);
        }

        /**
         * Description: 计算上链交易hash
         * Summary: add did doc上链交易hash
         */
        public InitDidAdddidHashResponse InitDidAdddidHashEx(InitDidAdddidHashRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitDidAdddidHashResponse>(DoRequest("1.0", "baas.did.adddid.hash.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 计算上链交易hash
         * Summary: add did doc上链交易hash
         */
        public async Task<InitDidAdddidHashResponse> InitDidAdddidHashExAsync(InitDidAdddidHashRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitDidAdddidHashResponse>(await DoRequestAsync("1.0", "baas.did.adddid.hash.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 将diddoc写入DIS链
         * Summary: 将diddoc写入DIS链
         */
        public StartDidAdddidExecuteResponse StartDidAdddidExecute(StartDidAdddidExecuteRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidAdddidExecuteEx(request, headers, runtime);
        }

        /**
         * Description: 将diddoc写入DIS链
         * Summary: 将diddoc写入DIS链
         */
        public async Task<StartDidAdddidExecuteResponse> StartDidAdddidExecuteAsync(StartDidAdddidExecuteRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidAdddidExecuteExAsync(request, headers, runtime);
        }

        /**
         * Description: 将diddoc写入DIS链
         * Summary: 将diddoc写入DIS链
         */
        public StartDidAdddidExecuteResponse StartDidAdddidExecuteEx(StartDidAdddidExecuteRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidAdddidExecuteResponse>(DoRequest("1.0", "baas.did.adddid.execute.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 将diddoc写入DIS链
         * Summary: 将diddoc写入DIS链
         */
        public async Task<StartDidAdddidExecuteResponse> StartDidAdddidExecuteExAsync(StartDidAdddidExecuteRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidAdddidExecuteResponse>(await DoRequestAsync("1.0", "baas.did.adddid.execute.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 可验证声明上链之前计算其hash
         * Summary: 可验证声明上链之前计算其hash
         */
        public InitDidAddvcHashResponse InitDidAddvcHash(InitDidAddvcHashRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return InitDidAddvcHashEx(request, headers, runtime);
        }

        /**
         * Description: 可验证声明上链之前计算其hash
         * Summary: 可验证声明上链之前计算其hash
         */
        public async Task<InitDidAddvcHashResponse> InitDidAddvcHashAsync(InitDidAddvcHashRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await InitDidAddvcHashExAsync(request, headers, runtime);
        }

        /**
         * Description: 可验证声明上链之前计算其hash
         * Summary: 可验证声明上链之前计算其hash
         */
        public InitDidAddvcHashResponse InitDidAddvcHashEx(InitDidAddvcHashRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitDidAddvcHashResponse>(DoRequest("1.0", "baas.did.addvc.hash.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 可验证声明上链之前计算其hash
         * Summary: 可验证声明上链之前计算其hash
         */
        public async Task<InitDidAddvcHashResponse> InitDidAddvcHashExAsync(InitDidAddvcHashRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitDidAddvcHashResponse>(await DoRequestAsync("1.0", "baas.did.addvc.hash.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 实际执行可验证声明上链
         * Summary: 实际执行可验证声明上链
         */
        public StartDidAddvcExecuteResponse StartDidAddvcExecute(StartDidAddvcExecuteRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidAddvcExecuteEx(request, headers, runtime);
        }

        /**
         * Description: 实际执行可验证声明上链
         * Summary: 实际执行可验证声明上链
         */
        public async Task<StartDidAddvcExecuteResponse> StartDidAddvcExecuteAsync(StartDidAddvcExecuteRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidAddvcExecuteExAsync(request, headers, runtime);
        }

        /**
         * Description: 实际执行可验证声明上链
         * Summary: 实际执行可验证声明上链
         */
        public StartDidAddvcExecuteResponse StartDidAddvcExecuteEx(StartDidAddvcExecuteRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidAddvcExecuteResponse>(DoRequest("1.0", "baas.did.addvc.execute.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 实际执行可验证声明上链
         * Summary: 实际执行可验证声明上链
         */
        public async Task<StartDidAddvcExecuteResponse> StartDidAddvcExecuteExAsync(StartDidAddvcExecuteRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidAddvcExecuteResponse>(await DoRequestAsync("1.0", "baas.did.addvc.execute.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 计算更新VC状态交易hash
         * Summary: 计算更新VC状态交易hash
         */
        public InitDidUpdatevcstatusHashResponse InitDidUpdatevcstatusHash(InitDidUpdatevcstatusHashRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return InitDidUpdatevcstatusHashEx(request, headers, runtime);
        }

        /**
         * Description: 计算更新VC状态交易hash
         * Summary: 计算更新VC状态交易hash
         */
        public async Task<InitDidUpdatevcstatusHashResponse> InitDidUpdatevcstatusHashAsync(InitDidUpdatevcstatusHashRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await InitDidUpdatevcstatusHashExAsync(request, headers, runtime);
        }

        /**
         * Description: 计算更新VC状态交易hash
         * Summary: 计算更新VC状态交易hash
         */
        public InitDidUpdatevcstatusHashResponse InitDidUpdatevcstatusHashEx(InitDidUpdatevcstatusHashRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitDidUpdatevcstatusHashResponse>(DoRequest("1.0", "baas.did.updatevcstatus.hash.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 计算更新VC状态交易hash
         * Summary: 计算更新VC状态交易hash
         */
        public async Task<InitDidUpdatevcstatusHashResponse> InitDidUpdatevcstatusHashExAsync(InitDidUpdatevcstatusHashRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitDidUpdatevcstatusHashResponse>(await DoRequestAsync("1.0", "baas.did.updatevcstatus.hash.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新VC状态
         * Summary: 更新VC状态
         */
        public StartDidUpdatevcstatusExecuteResponse StartDidUpdatevcstatusExecute(StartDidUpdatevcstatusExecuteRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidUpdatevcstatusExecuteEx(request, headers, runtime);
        }

        /**
         * Description: 更新VC状态
         * Summary: 更新VC状态
         */
        public async Task<StartDidUpdatevcstatusExecuteResponse> StartDidUpdatevcstatusExecuteAsync(StartDidUpdatevcstatusExecuteRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidUpdatevcstatusExecuteExAsync(request, headers, runtime);
        }

        /**
         * Description: 更新VC状态
         * Summary: 更新VC状态
         */
        public StartDidUpdatevcstatusExecuteResponse StartDidUpdatevcstatusExecuteEx(StartDidUpdatevcstatusExecuteRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidUpdatevcstatusExecuteResponse>(DoRequest("1.0", "baas.did.updatevcstatus.execute.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新VC状态
         * Summary: 更新VC状态
         */
        public async Task<StartDidUpdatevcstatusExecuteResponse> StartDidUpdatevcstatusExecuteExAsync(StartDidUpdatevcstatusExecuteRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidUpdatevcstatusExecuteResponse>(await DoRequestAsync("1.0", "baas.did.updatevcstatus.execute.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 计算更新did交易hash
         * Summary: 计算更新did交易hash
         */
        public InitDidUpdatedidHashResponse InitDidUpdatedidHash(InitDidUpdatedidHashRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return InitDidUpdatedidHashEx(request, headers, runtime);
        }

        /**
         * Description: 计算更新did交易hash
         * Summary: 计算更新did交易hash
         */
        public async Task<InitDidUpdatedidHashResponse> InitDidUpdatedidHashAsync(InitDidUpdatedidHashRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await InitDidUpdatedidHashExAsync(request, headers, runtime);
        }

        /**
         * Description: 计算更新did交易hash
         * Summary: 计算更新did交易hash
         */
        public InitDidUpdatedidHashResponse InitDidUpdatedidHashEx(InitDidUpdatedidHashRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitDidUpdatedidHashResponse>(DoRequest("1.0", "baas.did.updatedid.hash.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 计算更新did交易hash
         * Summary: 计算更新did交易hash
         */
        public async Task<InitDidUpdatedidHashResponse> InitDidUpdatedidHashExAsync(InitDidUpdatedidHashRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitDidUpdatedidHashResponse>(await DoRequestAsync("1.0", "baas.did.updatedid.hash.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新did
         * Summary: 更新did
         */
        public StartDidUpdatedidExecuteResponse StartDidUpdatedidExecute(StartDidUpdatedidExecuteRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidUpdatedidExecuteEx(request, headers, runtime);
        }

        /**
         * Description: 更新did
         * Summary: 更新did
         */
        public async Task<StartDidUpdatedidExecuteResponse> StartDidUpdatedidExecuteAsync(StartDidUpdatedidExecuteRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidUpdatedidExecuteExAsync(request, headers, runtime);
        }

        /**
         * Description: 更新did
         * Summary: 更新did
         */
        public StartDidUpdatedidExecuteResponse StartDidUpdatedidExecuteEx(StartDidUpdatedidExecuteRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidUpdatedidExecuteResponse>(DoRequest("1.0", "baas.did.updatedid.execute.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新did
         * Summary: 更新did
         */
        public async Task<StartDidUpdatedidExecuteResponse> StartDidUpdatedidExecuteExAsync(StartDidUpdatedidExecuteRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidUpdatedidExecuteResponse>(await DoRequestAsync("1.0", "baas.did.updatedid.execute.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 非托管查询did doc
         * Summary: 非托管查询did doc
         */
        public QueryDidDiddocDirectResponse QueryDidDiddocDirect(QueryDidDiddocDirectRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDidDiddocDirectEx(request, headers, runtime);
        }

        /**
         * Description: 非托管查询did doc
         * Summary: 非托管查询did doc
         */
        public async Task<QueryDidDiddocDirectResponse> QueryDidDiddocDirectAsync(QueryDidDiddocDirectRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDidDiddocDirectExAsync(request, headers, runtime);
        }

        /**
         * Description: 非托管查询did doc
         * Summary: 非托管查询did doc
         */
        public QueryDidDiddocDirectResponse QueryDidDiddocDirectEx(QueryDidDiddocDirectRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidDiddocDirectResponse>(DoRequest("1.0", "baas.did.diddoc.direct.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 非托管查询did doc
         * Summary: 非托管查询did doc
         */
        public async Task<QueryDidDiddocDirectResponse> QueryDidDiddocDirectExAsync(QueryDidDiddocDirectRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidDiddocDirectResponse>(await DoRequestAsync("1.0", "baas.did.diddoc.direct.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 非托管查询可验证声明
         * Summary: 非托管查询可验证声明
         */
        public QueryDidVcDirectResponse QueryDidVcDirect(QueryDidVcDirectRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryDidVcDirectEx(request, headers, runtime);
        }

        /**
         * Description: 非托管查询可验证声明
         * Summary: 非托管查询可验证声明
         */
        public async Task<QueryDidVcDirectResponse> QueryDidVcDirectAsync(QueryDidVcDirectRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryDidVcDirectExAsync(request, headers, runtime);
        }

        /**
         * Description: 非托管查询可验证声明
         * Summary: 非托管查询可验证声明
         */
        public QueryDidVcDirectResponse QueryDidVcDirectEx(QueryDidVcDirectRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidVcDirectResponse>(DoRequest("1.0", "baas.did.vc.direct.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 非托管查询可验证声明
         * Summary: 非托管查询可验证声明
         */
        public async Task<QueryDidVcDirectResponse> QueryDidVcDirectExAsync(QueryDidVcDirectRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryDidVcDirectResponse>(await DoRequestAsync("1.0", "baas.did.vc.direct.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 非托管模式下创建个人did账户
         * Summary: 非托管模式下创建个人did账户
         */
        public CreateDidIdentityPersonResponse CreateDidIdentityPerson(CreateDidIdentityPersonRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDidIdentityPersonEx(request, headers, runtime);
        }

        /**
         * Description: 非托管模式下创建个人did账户
         * Summary: 非托管模式下创建个人did账户
         */
        public async Task<CreateDidIdentityPersonResponse> CreateDidIdentityPersonAsync(CreateDidIdentityPersonRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDidIdentityPersonExAsync(request, headers, runtime);
        }

        /**
         * Description: 非托管模式下创建个人did账户
         * Summary: 非托管模式下创建个人did账户
         */
        public CreateDidIdentityPersonResponse CreateDidIdentityPersonEx(CreateDidIdentityPersonRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidIdentityPersonResponse>(DoRequest("1.0", "baas.did.identity.person.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 非托管模式下创建个人did账户
         * Summary: 非托管模式下创建个人did账户
         */
        public async Task<CreateDidIdentityPersonResponse> CreateDidIdentityPersonExAsync(CreateDidIdentityPersonRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidIdentityPersonResponse>(await DoRequestAsync("1.0", "baas.did.identity.person.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 非托管模式更新did doc中的auth key
         * Summary: 非托管模式更新doc中的auth key
         */
        public UpdateDidUpdatedidAuthkeyResponse UpdateDidUpdatedidAuthkey(UpdateDidUpdatedidAuthkeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateDidUpdatedidAuthkeyEx(request, headers, runtime);
        }

        /**
         * Description: 非托管模式更新did doc中的auth key
         * Summary: 非托管模式更新doc中的auth key
         */
        public async Task<UpdateDidUpdatedidAuthkeyResponse> UpdateDidUpdatedidAuthkeyAsync(UpdateDidUpdatedidAuthkeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateDidUpdatedidAuthkeyExAsync(request, headers, runtime);
        }

        /**
         * Description: 非托管模式更新did doc中的auth key
         * Summary: 非托管模式更新doc中的auth key
         */
        public UpdateDidUpdatedidAuthkeyResponse UpdateDidUpdatedidAuthkeyEx(UpdateDidUpdatedidAuthkeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDidUpdatedidAuthkeyResponse>(DoRequest("1.0", "baas.did.updatedid.authkey.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 非托管模式更新did doc中的auth key
         * Summary: 非托管模式更新doc中的auth key
         */
        public async Task<UpdateDidUpdatedidAuthkeyResponse> UpdateDidUpdatedidAuthkeyExAsync(UpdateDidUpdatedidAuthkeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDidUpdatedidAuthkeyResponse>(await DoRequestAsync("1.0", "baas.did.updatedid.authkey.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新did对应did doc中的service信息
         * Summary: 更新did service信息
         */
        public UpdateDidUpdatedidServiceResponse UpdateDidUpdatedidService(UpdateDidUpdatedidServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateDidUpdatedidServiceEx(request, headers, runtime);
        }

        /**
         * Description: 更新did对应did doc中的service信息
         * Summary: 更新did service信息
         */
        public async Task<UpdateDidUpdatedidServiceResponse> UpdateDidUpdatedidServiceAsync(UpdateDidUpdatedidServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateDidUpdatedidServiceExAsync(request, headers, runtime);
        }

        /**
         * Description: 更新did对应did doc中的service信息
         * Summary: 更新did service信息
         */
        public UpdateDidUpdatedidServiceResponse UpdateDidUpdatedidServiceEx(UpdateDidUpdatedidServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDidUpdatedidServiceResponse>(DoRequest("1.0", "baas.did.updatedid.service.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新did对应did doc中的service信息
         * Summary: 更新did service信息
         */
        public async Task<UpdateDidUpdatedidServiceResponse> UpdateDidUpdatedidServiceExAsync(UpdateDidUpdatedidServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDidUpdatedidServiceResponse>(await DoRequestAsync("1.0", "baas.did.updatedid.service.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 添加did doc中的service
         * Summary: 添加did doc中的service
         */
        public AddDidUpdatedidServiceResponse AddDidUpdatedidService(AddDidUpdatedidServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return AddDidUpdatedidServiceEx(request, headers, runtime);
        }

        /**
         * Description: 添加did doc中的service
         * Summary: 添加did doc中的service
         */
        public async Task<AddDidUpdatedidServiceResponse> AddDidUpdatedidServiceAsync(AddDidUpdatedidServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await AddDidUpdatedidServiceExAsync(request, headers, runtime);
        }

        /**
         * Description: 添加did doc中的service
         * Summary: 添加did doc中的service
         */
        public AddDidUpdatedidServiceResponse AddDidUpdatedidServiceEx(AddDidUpdatedidServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<AddDidUpdatedidServiceResponse>(DoRequest("1.0", "baas.did.updatedid.service.add", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 添加did doc中的service
         * Summary: 添加did doc中的service
         */
        public async Task<AddDidUpdatedidServiceResponse> AddDidUpdatedidServiceExAsync(AddDidUpdatedidServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<AddDidUpdatedidServiceResponse>(await DoRequestAsync("1.0", "baas.did.updatedid.service.add", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 删除did doc中的service信息
         * Summary: 删除did doc中的service信息
         */
        public DeleteDidUpdatedidServiceResponse DeleteDidUpdatedidService(DeleteDidUpdatedidServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return DeleteDidUpdatedidServiceEx(request, headers, runtime);
        }

        /**
         * Description: 删除did doc中的service信息
         * Summary: 删除did doc中的service信息
         */
        public async Task<DeleteDidUpdatedidServiceResponse> DeleteDidUpdatedidServiceAsync(DeleteDidUpdatedidServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await DeleteDidUpdatedidServiceExAsync(request, headers, runtime);
        }

        /**
         * Description: 删除did doc中的service信息
         * Summary: 删除did doc中的service信息
         */
        public DeleteDidUpdatedidServiceResponse DeleteDidUpdatedidServiceEx(DeleteDidUpdatedidServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteDidUpdatedidServiceResponse>(DoRequest("1.0", "baas.did.updatedid.service.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 删除did doc中的service信息
         * Summary: 删除did doc中的service信息
         */
        public async Task<DeleteDidUpdatedidServiceResponse> DeleteDidUpdatedidServiceExAsync(DeleteDidUpdatedidServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeleteDidUpdatedidServiceResponse>(await DoRequestAsync("1.0", "baas.did.updatedid.service.delete", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新可验证声明状态
         * Summary: 更新可验证声明
         */
        public UpdateDidUpdatevcStatusResponse UpdateDidUpdatevcStatus(UpdateDidUpdatevcStatusRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateDidUpdatevcStatusEx(request, headers, runtime);
        }

        /**
         * Description: 更新可验证声明状态
         * Summary: 更新可验证声明
         */
        public async Task<UpdateDidUpdatevcStatusResponse> UpdateDidUpdatevcStatusAsync(UpdateDidUpdatevcStatusRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateDidUpdatevcStatusExAsync(request, headers, runtime);
        }

        /**
         * Description: 更新可验证声明状态
         * Summary: 更新可验证声明
         */
        public UpdateDidUpdatevcStatusResponse UpdateDidUpdatevcStatusEx(UpdateDidUpdatevcStatusRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDidUpdatevcStatusResponse>(DoRequest("1.0", "baas.did.updatevc.status.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 更新可验证声明状态
         * Summary: 更新可验证声明
         */
        public async Task<UpdateDidUpdatevcStatusResponse> UpdateDidUpdatevcStatusExAsync(UpdateDidUpdatevcStatusRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDidUpdatevcStatusResponse>(await DoRequestAsync("1.0", "baas.did.updatevc.status.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 开通resolver服务接口
         * Summary: 开通resolver服务接口
         */
        public OpenDidResolverServiceResponse OpenDidResolverService(OpenDidResolverServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return OpenDidResolverServiceEx(request, headers, runtime);
        }

        /**
         * Description: 开通resolver服务接口
         * Summary: 开通resolver服务接口
         */
        public async Task<OpenDidResolverServiceResponse> OpenDidResolverServiceAsync(OpenDidResolverServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await OpenDidResolverServiceExAsync(request, headers, runtime);
        }

        /**
         * Description: 开通resolver服务接口
         * Summary: 开通resolver服务接口
         */
        public OpenDidResolverServiceResponse OpenDidResolverServiceEx(OpenDidResolverServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<OpenDidResolverServiceResponse>(DoRequest("1.0", "baas.did.resolver.service.open", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 开通resolver服务接口
         * Summary: 开通resolver服务接口
         */
        public async Task<OpenDidResolverServiceResponse> OpenDidResolverServiceExAsync(OpenDidResolverServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<OpenDidResolverServiceResponse>(await DoRequestAsync("1.0", "baas.did.resolver.service.open", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 停止resolver服务接口
         * Summary: 停止resolver服务接口
         */
        public StopDidResolverServiceResponse StopDidResolverService(StopDidResolverServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StopDidResolverServiceEx(request, headers, runtime);
        }

        /**
         * Description: 停止resolver服务接口
         * Summary: 停止resolver服务接口
         */
        public async Task<StopDidResolverServiceResponse> StopDidResolverServiceAsync(StopDidResolverServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StopDidResolverServiceExAsync(request, headers, runtime);
        }

        /**
         * Description: 停止resolver服务接口
         * Summary: 停止resolver服务接口
         */
        public StopDidResolverServiceResponse StopDidResolverServiceEx(StopDidResolverServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StopDidResolverServiceResponse>(DoRequest("1.0", "baas.did.resolver.service.stop", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 停止resolver服务接口
         * Summary: 停止resolver服务接口
         */
        public async Task<StopDidResolverServiceResponse> StopDidResolverServiceExAsync(StopDidResolverServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StopDidResolverServiceResponse>(await DoRequestAsync("1.0", "baas.did.resolver.service.stop", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 使用根DID派生子DID并上链
         * Summary: 派生子DID上链
         */
        public StartDidDerivedidExecuteResponse StartDidDerivedidExecute(StartDidDerivedidExecuteRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartDidDerivedidExecuteEx(request, headers, runtime);
        }

        /**
         * Description: 使用根DID派生子DID并上链
         * Summary: 派生子DID上链
         */
        public async Task<StartDidDerivedidExecuteResponse> StartDidDerivedidExecuteAsync(StartDidDerivedidExecuteRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartDidDerivedidExecuteExAsync(request, headers, runtime);
        }

        /**
         * Description: 使用根DID派生子DID并上链
         * Summary: 派生子DID上链
         */
        public StartDidDerivedidExecuteResponse StartDidDerivedidExecuteEx(StartDidDerivedidExecuteRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidDerivedidExecuteResponse>(DoRequest("1.0", "baas.did.derivedid.execute.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 使用根DID派生子DID并上链
         * Summary: 派生子DID上链
         */
        public async Task<StartDidDerivedidExecuteResponse> StartDidDerivedidExecuteExAsync(StartDidDerivedidExecuteRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartDidDerivedidExecuteResponse>(await DoRequestAsync("1.0", "baas.did.derivedid.execute.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 基于DIS的访问控制授权
         * Summary: 访问控制授权
         */
        public ExecDidAccesscontrolAuthorizeResponse ExecDidAccesscontrolAuthorize(ExecDidAccesscontrolAuthorizeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ExecDidAccesscontrolAuthorizeEx(request, headers, runtime);
        }

        /**
         * Description: 基于DIS的访问控制授权
         * Summary: 访问控制授权
         */
        public async Task<ExecDidAccesscontrolAuthorizeResponse> ExecDidAccesscontrolAuthorizeAsync(ExecDidAccesscontrolAuthorizeRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ExecDidAccesscontrolAuthorizeExAsync(request, headers, runtime);
        }

        /**
         * Description: 基于DIS的访问控制授权
         * Summary: 访问控制授权
         */
        public ExecDidAccesscontrolAuthorizeResponse ExecDidAccesscontrolAuthorizeEx(ExecDidAccesscontrolAuthorizeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecDidAccesscontrolAuthorizeResponse>(DoRequest("1.0", "baas.did.accesscontrol.authorize.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 基于DIS的访问控制授权
         * Summary: 访问控制授权
         */
        public async Task<ExecDidAccesscontrolAuthorizeResponse> ExecDidAccesscontrolAuthorizeExAsync(ExecDidAccesscontrolAuthorizeRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecDidAccesscontrolAuthorizeResponse>(await DoRequestAsync("1.0", "baas.did.accesscontrol.authorize.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 对请求的权限进行鉴权，判断是否有该权限
         * Summary: 访问控制鉴权
         */
        public ExecDidAccesscontrolCheckResponse ExecDidAccesscontrolCheck(ExecDidAccesscontrolCheckRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ExecDidAccesscontrolCheckEx(request, headers, runtime);
        }

        /**
         * Description: 对请求的权限进行鉴权，判断是否有该权限
         * Summary: 访问控制鉴权
         */
        public async Task<ExecDidAccesscontrolCheckResponse> ExecDidAccesscontrolCheckAsync(ExecDidAccesscontrolCheckRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ExecDidAccesscontrolCheckExAsync(request, headers, runtime);
        }

        /**
         * Description: 对请求的权限进行鉴权，判断是否有该权限
         * Summary: 访问控制鉴权
         */
        public ExecDidAccesscontrolCheckResponse ExecDidAccesscontrolCheckEx(ExecDidAccesscontrolCheckRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecDidAccesscontrolCheckResponse>(DoRequest("1.0", "baas.did.accesscontrol.check.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 对请求的权限进行鉴权，判断是否有该权限
         * Summary: 访问控制鉴权
         */
        public async Task<ExecDidAccesscontrolCheckResponse> ExecDidAccesscontrolCheckExAsync(ExecDidAccesscontrolCheckRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecDidAccesscontrolCheckResponse>(await DoRequestAsync("1.0", "baas.did.accesscontrol.check.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 访问控制中更新权限
         * Summary: 对已授权的did更新权限
         */
        public ExecDidAccesscontrolUpdateResponse ExecDidAccesscontrolUpdate(ExecDidAccesscontrolUpdateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ExecDidAccesscontrolUpdateEx(request, headers, runtime);
        }

        /**
         * Description: 访问控制中更新权限
         * Summary: 对已授权的did更新权限
         */
        public async Task<ExecDidAccesscontrolUpdateResponse> ExecDidAccesscontrolUpdateAsync(ExecDidAccesscontrolUpdateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ExecDidAccesscontrolUpdateExAsync(request, headers, runtime);
        }

        /**
         * Description: 访问控制中更新权限
         * Summary: 对已授权的did更新权限
         */
        public ExecDidAccesscontrolUpdateResponse ExecDidAccesscontrolUpdateEx(ExecDidAccesscontrolUpdateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecDidAccesscontrolUpdateResponse>(DoRequest("1.0", "baas.did.accesscontrol.update.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 访问控制中更新权限
         * Summary: 对已授权的did更新权限
         */
        public async Task<ExecDidAccesscontrolUpdateResponse> ExecDidAccesscontrolUpdateExAsync(ExecDidAccesscontrolUpdateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecDidAccesscontrolUpdateResponse>(await DoRequestAsync("1.0", "baas.did.accesscontrol.update.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 非托管模式下为iot创建did
         * Summary: 非托管模式下为iot创建did
         */
        public CreateDidIdentityIotResponse CreateDidIdentityIot(CreateDidIdentityIotRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDidIdentityIotEx(request, headers, runtime);
        }

        /**
         * Description: 非托管模式下为iot创建did
         * Summary: 非托管模式下为iot创建did
         */
        public async Task<CreateDidIdentityIotResponse> CreateDidIdentityIotAsync(CreateDidIdentityIotRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDidIdentityIotExAsync(request, headers, runtime);
        }

        /**
         * Description: 非托管模式下为iot创建did
         * Summary: 非托管模式下为iot创建did
         */
        public CreateDidIdentityIotResponse CreateDidIdentityIotEx(CreateDidIdentityIotRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidIdentityIotResponse>(DoRequest("1.0", "baas.did.identity.iot.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 非托管模式下为iot创建did
         * Summary: 非托管模式下为iot创建did
         */
        public async Task<CreateDidIdentityIotResponse> CreateDidIdentityIotExAsync(CreateDidIdentityIotRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidIdentityIotResponse>(await DoRequestAsync("1.0", "baas.did.identity.iot.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 非托管模式下的服务类型创建
         * Summary: 非托管模式下的服务类型创建
         */
        public ExecDidServicetypeCreateResponse ExecDidServicetypeCreate(ExecDidServicetypeCreateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ExecDidServicetypeCreateEx(request, headers, runtime);
        }

        /**
         * Description: 非托管模式下的服务类型创建
         * Summary: 非托管模式下的服务类型创建
         */
        public async Task<ExecDidServicetypeCreateResponse> ExecDidServicetypeCreateAsync(ExecDidServicetypeCreateRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ExecDidServicetypeCreateExAsync(request, headers, runtime);
        }

        /**
         * Description: 非托管模式下的服务类型创建
         * Summary: 非托管模式下的服务类型创建
         */
        public ExecDidServicetypeCreateResponse ExecDidServicetypeCreateEx(ExecDidServicetypeCreateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecDidServicetypeCreateResponse>(DoRequest("1.0", "baas.did.servicetype.create.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 非托管模式下的服务类型创建
         * Summary: 非托管模式下的服务类型创建
         */
        public async Task<ExecDidServicetypeCreateResponse> ExecDidServicetypeCreateExAsync(ExecDidServicetypeCreateRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ExecDidServicetypeCreateResponse>(await DoRequestAsync("1.0", "baas.did.servicetype.create.exec", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 非托管模式下创建普通did账户
         * Summary: 非托管模式下创建普通did账户
         */
        public CreateDidIdentityCommonResponse CreateDidIdentityCommon(CreateDidIdentityCommonRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateDidIdentityCommonEx(request, headers, runtime);
        }

        /**
         * Description: 非托管模式下创建普通did账户
         * Summary: 非托管模式下创建普通did账户
         */
        public async Task<CreateDidIdentityCommonResponse> CreateDidIdentityCommonAsync(CreateDidIdentityCommonRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateDidIdentityCommonExAsync(request, headers, runtime);
        }

        /**
         * Description: 非托管模式下创建普通did账户
         * Summary: 非托管模式下创建普通did账户
         */
        public CreateDidIdentityCommonResponse CreateDidIdentityCommonEx(CreateDidIdentityCommonRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidIdentityCommonResponse>(DoRequest("1.0", "baas.did.identity.common.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 非托管模式下创建普通did账户
         * Summary: 非托管模式下创建普通did账户
         */
        public async Task<CreateDidIdentityCommonResponse> CreateDidIdentityCommonExAsync(CreateDidIdentityCommonRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateDidIdentityCommonResponse>(await DoRequestAsync("1.0", "baas.did.identity.common.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: VC传输确认请求
         * Summary: VC传输确认请求
         */
        public ConfirmVcVcrepoVctransmitResponse ConfirmVcVcrepoVctransmit(ConfirmVcVcrepoVctransmitRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ConfirmVcVcrepoVctransmitEx(request, headers, runtime);
        }

        /**
         * Description: VC传输确认请求
         * Summary: VC传输确认请求
         */
        public async Task<ConfirmVcVcrepoVctransmitResponse> ConfirmVcVcrepoVctransmitAsync(ConfirmVcVcrepoVctransmitRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ConfirmVcVcrepoVctransmitExAsync(request, headers, runtime);
        }

        /**
         * Description: VC传输确认请求
         * Summary: VC传输确认请求
         */
        public ConfirmVcVcrepoVctransmitResponse ConfirmVcVcrepoVctransmitEx(ConfirmVcVcrepoVctransmitRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ConfirmVcVcrepoVctransmitResponse>(DoRequest("1.0", "baas.vc.vcrepo.vctransmit.confirm", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: VC传输确认请求
         * Summary: VC传输确认请求
         */
        public async Task<ConfirmVcVcrepoVctransmitResponse> ConfirmVcVcrepoVctransmitExAsync(ConfirmVcVcrepoVctransmitRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ConfirmVcVcrepoVctransmitResponse>(await DoRequestAsync("1.0", "baas.vc.vcrepo.vctransmit.confirm", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 在非托管模式，要先createDid，然后addDoc，两步都完成才实现DID创建。
        如果第一步成功，第二步失败，无法完全回滚，但是第一步createDid已经绑定了一个pubKey，如果调用方重试，并且用了新的pubKey（可能之前绑定的pubKey因为没有走完流程，没有保存，或者没有中间态，继续重试第二步），就无法重试成功。因此需要给这种极端情况一个更新pubKey的机会，但是需要通过recoveryKey鉴权请求变更。
         * Summary: 非托管更新还未上链did的pub key
         */
        public UpdateDidUpdatedidPubkeyResponse UpdateDidUpdatedidPubkey(UpdateDidUpdatedidPubkeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateDidUpdatedidPubkeyEx(request, headers, runtime);
        }

        /**
         * Description: 在非托管模式，要先createDid，然后addDoc，两步都完成才实现DID创建。
        如果第一步成功，第二步失败，无法完全回滚，但是第一步createDid已经绑定了一个pubKey，如果调用方重试，并且用了新的pubKey（可能之前绑定的pubKey因为没有走完流程，没有保存，或者没有中间态，继续重试第二步），就无法重试成功。因此需要给这种极端情况一个更新pubKey的机会，但是需要通过recoveryKey鉴权请求变更。
         * Summary: 非托管更新还未上链did的pub key
         */
        public async Task<UpdateDidUpdatedidPubkeyResponse> UpdateDidUpdatedidPubkeyAsync(UpdateDidUpdatedidPubkeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateDidUpdatedidPubkeyExAsync(request, headers, runtime);
        }

        /**
         * Description: 在非托管模式，要先createDid，然后addDoc，两步都完成才实现DID创建。
        如果第一步成功，第二步失败，无法完全回滚，但是第一步createDid已经绑定了一个pubKey，如果调用方重试，并且用了新的pubKey（可能之前绑定的pubKey因为没有走完流程，没有保存，或者没有中间态，继续重试第二步），就无法重试成功。因此需要给这种极端情况一个更新pubKey的机会，但是需要通过recoveryKey鉴权请求变更。
         * Summary: 非托管更新还未上链did的pub key
         */
        public UpdateDidUpdatedidPubkeyResponse UpdateDidUpdatedidPubkeyEx(UpdateDidUpdatedidPubkeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDidUpdatedidPubkeyResponse>(DoRequest("1.0", "baas.did.updatedid.pubkey.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 在非托管模式，要先createDid，然后addDoc，两步都完成才实现DID创建。
        如果第一步成功，第二步失败，无法完全回滚，但是第一步createDid已经绑定了一个pubKey，如果调用方重试，并且用了新的pubKey（可能之前绑定的pubKey因为没有走完流程，没有保存，或者没有中间态，继续重试第二步），就无法重试成功。因此需要给这种极端情况一个更新pubKey的机会，但是需要通过recoveryKey鉴权请求变更。
         * Summary: 非托管更新还未上链did的pub key
         */
        public async Task<UpdateDidUpdatedidPubkeyResponse> UpdateDidUpdatedidPubkeyExAsync(UpdateDidUpdatedidPubkeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateDidUpdatedidPubkeyResponse>(await DoRequestAsync("1.0", "baas.did.updatedid.pubkey.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 一次增加多个service
         * Summary: 一次增加多个service
         */
        public AddDidUpdatedidServicelistResponse AddDidUpdatedidServicelist(AddDidUpdatedidServicelistRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return AddDidUpdatedidServicelistEx(request, headers, runtime);
        }

        /**
         * Description: 一次增加多个service
         * Summary: 一次增加多个service
         */
        public async Task<AddDidUpdatedidServicelistResponse> AddDidUpdatedidServicelistAsync(AddDidUpdatedidServicelistRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await AddDidUpdatedidServicelistExAsync(request, headers, runtime);
        }

        /**
         * Description: 一次增加多个service
         * Summary: 一次增加多个service
         */
        public AddDidUpdatedidServicelistResponse AddDidUpdatedidServicelistEx(AddDidUpdatedidServicelistRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<AddDidUpdatedidServicelistResponse>(DoRequest("1.0", "baas.did.updatedid.servicelist.add", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 一次增加多个service
         * Summary: 一次增加多个service
         */
        public async Task<AddDidUpdatedidServicelistResponse> AddDidUpdatedidServicelistExAsync(AddDidUpdatedidServicelistRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<AddDidUpdatedidServicelistResponse>(await DoRequestAsync("1.0", "baas.did.updatedid.servicelist.add", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 存储VC到存储中
         * Summary: 写入VC存储
         */
        public StartVcVcrepositoryWriteResponse StartVcVcrepositoryWrite(StartVcVcrepositoryWriteRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartVcVcrepositoryWriteEx(request, headers, runtime);
        }

        /**
         * Description: 存储VC到存储中
         * Summary: 写入VC存储
         */
        public async Task<StartVcVcrepositoryWriteResponse> StartVcVcrepositoryWriteAsync(StartVcVcrepositoryWriteRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartVcVcrepositoryWriteExAsync(request, headers, runtime);
        }

        /**
         * Description: 存储VC到存储中
         * Summary: 写入VC存储
         */
        public StartVcVcrepositoryWriteResponse StartVcVcrepositoryWriteEx(StartVcVcrepositoryWriteRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartVcVcrepositoryWriteResponse>(DoRequest("1.0", "baas.vc.vcrepository.write.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 存储VC到存储中
         * Summary: 写入VC存储
         */
        public async Task<StartVcVcrepositoryWriteResponse> StartVcVcrepositoryWriteExAsync(StartVcVcrepositoryWriteRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartVcVcrepositoryWriteResponse>(await DoRequestAsync("1.0", "baas.vc.vcrepository.write.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 从VC存储中，读取目标的VC内容，前提是调用者的did已经被授予权限。
        如果VC中claim内容已被加密，返回值的verifiable_claim_content的claim字段是密文，需要使用当前调用者的did对应私钥解密auth_access_key获取AES密钥，然后通过AES密钥解密VC内容。
         * Summary: 从VC存储读取已被授权VC内容
         */
        public StartVcVcrepositoryReadResponse StartVcVcrepositoryRead(StartVcVcrepositoryReadRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartVcVcrepositoryReadEx(request, headers, runtime);
        }

        /**
         * Description: 从VC存储中，读取目标的VC内容，前提是调用者的did已经被授予权限。
        如果VC中claim内容已被加密，返回值的verifiable_claim_content的claim字段是密文，需要使用当前调用者的did对应私钥解密auth_access_key获取AES密钥，然后通过AES密钥解密VC内容。
         * Summary: 从VC存储读取已被授权VC内容
         */
        public async Task<StartVcVcrepositoryReadResponse> StartVcVcrepositoryReadAsync(StartVcVcrepositoryReadRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartVcVcrepositoryReadExAsync(request, headers, runtime);
        }

        /**
         * Description: 从VC存储中，读取目标的VC内容，前提是调用者的did已经被授予权限。
        如果VC中claim内容已被加密，返回值的verifiable_claim_content的claim字段是密文，需要使用当前调用者的did对应私钥解密auth_access_key获取AES密钥，然后通过AES密钥解密VC内容。
         * Summary: 从VC存储读取已被授权VC内容
         */
        public StartVcVcrepositoryReadResponse StartVcVcrepositoryReadEx(StartVcVcrepositoryReadRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartVcVcrepositoryReadResponse>(DoRequest("1.0", "baas.vc.vcrepository.read.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 从VC存储中，读取目标的VC内容，前提是调用者的did已经被授予权限。
        如果VC中claim内容已被加密，返回值的verifiable_claim_content的claim字段是密文，需要使用当前调用者的did对应私钥解密auth_access_key获取AES密钥，然后通过AES密钥解密VC内容。
         * Summary: 从VC存储读取已被授权VC内容
         */
        public async Task<StartVcVcrepositoryReadResponse> StartVcVcrepositoryReadExAsync(StartVcVcrepositoryReadRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartVcVcrepositoryReadResponse>(await DoRequestAsync("1.0", "baas.vc.vcrepository.read.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 对已存在的证书VC进行新增授权管理，批量添加did到授权列表中，授权这些did具有读取VC的权限。
        注意：VC的整体auth_did_list的长度将受限制，目前约定不超过30。
         * Summary: 添加已有证书VC的授权列表
         */
        public StartVcVcrepositoryAuthResponse StartVcVcrepositoryAuth(StartVcVcrepositoryAuthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartVcVcrepositoryAuthEx(request, headers, runtime);
        }

        /**
         * Description: 对已存在的证书VC进行新增授权管理，批量添加did到授权列表中，授权这些did具有读取VC的权限。
        注意：VC的整体auth_did_list的长度将受限制，目前约定不超过30。
         * Summary: 添加已有证书VC的授权列表
         */
        public async Task<StartVcVcrepositoryAuthResponse> StartVcVcrepositoryAuthAsync(StartVcVcrepositoryAuthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartVcVcrepositoryAuthExAsync(request, headers, runtime);
        }

        /**
         * Description: 对已存在的证书VC进行新增授权管理，批量添加did到授权列表中，授权这些did具有读取VC的权限。
        注意：VC的整体auth_did_list的长度将受限制，目前约定不超过30。
         * Summary: 添加已有证书VC的授权列表
         */
        public StartVcVcrepositoryAuthResponse StartVcVcrepositoryAuthEx(StartVcVcrepositoryAuthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartVcVcrepositoryAuthResponse>(DoRequest("1.0", "baas.vc.vcrepository.auth.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 对已存在的证书VC进行新增授权管理，批量添加did到授权列表中，授权这些did具有读取VC的权限。
        注意：VC的整体auth_did_list的长度将受限制，目前约定不超过30。
         * Summary: 添加已有证书VC的授权列表
         */
        public async Task<StartVcVcrepositoryAuthResponse> StartVcVcrepositoryAuthExAsync(StartVcVcrepositoryAuthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartVcVcrepositoryAuthResponse>(await DoRequestAsync("1.0", "baas.vc.vcrepository.auth.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: vc repo上的用户注册
         * Summary: vc repo 上的用户注册
         */
        public StartVcVcrepoUserResponse StartVcVcrepoUser(StartVcVcrepoUserRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartVcVcrepoUserEx(request, headers, runtime);
        }

        /**
         * Description: vc repo上的用户注册
         * Summary: vc repo 上的用户注册
         */
        public async Task<StartVcVcrepoUserResponse> StartVcVcrepoUserAsync(StartVcVcrepoUserRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartVcVcrepoUserExAsync(request, headers, runtime);
        }

        /**
         * Description: vc repo上的用户注册
         * Summary: vc repo 上的用户注册
         */
        public StartVcVcrepoUserResponse StartVcVcrepoUserEx(StartVcVcrepoUserRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartVcVcrepoUserResponse>(DoRequest("1.0", "baas.vc.vcrepo.user.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: vc repo上的用户注册
         * Summary: vc repo 上的用户注册
         */
        public async Task<StartVcVcrepoUserResponse> StartVcVcrepoUserExAsync(StartVcVcrepoUserRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartVcVcrepoUserResponse>(await DoRequestAsync("1.0", "baas.vc.vcrepo.user.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: VC Repo用户信息更新，可以更新公钥，可以更新vc channel
         * Summary: VC Repo用户信息更新
         */
        public UpdateVcVcrepoUserResponse UpdateVcVcrepoUser(UpdateVcVcrepoUserRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return UpdateVcVcrepoUserEx(request, headers, runtime);
        }

        /**
         * Description: VC Repo用户信息更新，可以更新公钥，可以更新vc channel
         * Summary: VC Repo用户信息更新
         */
        public async Task<UpdateVcVcrepoUserResponse> UpdateVcVcrepoUserAsync(UpdateVcVcrepoUserRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await UpdateVcVcrepoUserExAsync(request, headers, runtime);
        }

        /**
         * Description: VC Repo用户信息更新，可以更新公钥，可以更新vc channel
         * Summary: VC Repo用户信息更新
         */
        public UpdateVcVcrepoUserResponse UpdateVcVcrepoUserEx(UpdateVcVcrepoUserRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateVcVcrepoUserResponse>(DoRequest("1.0", "baas.vc.vcrepo.user.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: VC Repo用户信息更新，可以更新公钥，可以更新vc channel
         * Summary: VC Repo用户信息更新
         */
        public async Task<UpdateVcVcrepoUserResponse> UpdateVcVcrepoUserExAsync(UpdateVcVcrepoUserRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<UpdateVcVcrepoUserResponse>(await DoRequestAsync("1.0", "baas.vc.vcrepo.user.update", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 指定VC可信传输到指定Verifier
         * Summary: 指定VC可信传输到指定Verifier
         */
        public StartVcVcrepoVctransmitResponse StartVcVcrepoVctransmit(StartVcVcrepoVctransmitRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartVcVcrepoVctransmitEx(request, headers, runtime);
        }

        /**
         * Description: 指定VC可信传输到指定Verifier
         * Summary: 指定VC可信传输到指定Verifier
         */
        public async Task<StartVcVcrepoVctransmitResponse> StartVcVcrepoVctransmitAsync(StartVcVcrepoVctransmitRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartVcVcrepoVctransmitExAsync(request, headers, runtime);
        }

        /**
         * Description: 指定VC可信传输到指定Verifier
         * Summary: 指定VC可信传输到指定Verifier
         */
        public StartVcVcrepoVctransmitResponse StartVcVcrepoVctransmitEx(StartVcVcrepoVctransmitRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartVcVcrepoVctransmitResponse>(DoRequest("1.0", "baas.vc.vcrepo.vctransmit.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 指定VC可信传输到指定Verifier
         * Summary: 指定VC可信传输到指定Verifier
         */
        public async Task<StartVcVcrepoVctransmitResponse> StartVcVcrepoVctransmitExAsync(StartVcVcrepoVctransmitRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartVcVcrepoVctransmitResponse>(await DoRequestAsync("1.0", "baas.vc.vcrepo.vctransmit.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过controller进行用户注册
         * Summary: 通过controller的用户注册
         */
        public StartVcVcrepoControlleradduserResponse StartVcVcrepoControlleradduser(StartVcVcrepoControlleradduserRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartVcVcrepoControlleradduserEx(request, headers, runtime);
        }

        /**
         * Description: 通过controller进行用户注册
         * Summary: 通过controller的用户注册
         */
        public async Task<StartVcVcrepoControlleradduserResponse> StartVcVcrepoControlleradduserAsync(StartVcVcrepoControlleradduserRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartVcVcrepoControlleradduserExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过controller进行用户注册
         * Summary: 通过controller的用户注册
         */
        public StartVcVcrepoControlleradduserResponse StartVcVcrepoControlleradduserEx(StartVcVcrepoControlleradduserRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartVcVcrepoControlleradduserResponse>(DoRequest("1.0", "baas.vc.vcrepo.controlleradduser.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过controller进行用户注册
         * Summary: 通过controller的用户注册
         */
        public async Task<StartVcVcrepoControlleradduserResponse> StartVcVcrepoControlleradduserExAsync(StartVcVcrepoControlleradduserRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartVcVcrepoControlleradduserResponse>(await DoRequestAsync("1.0", "baas.vc.vcrepo.controlleradduser.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: VC存储
         * Summary: VC存储
         */
        public StartVcVcrepoVccontentsaveResponse StartVcVcrepoVccontentsave(StartVcVcrepoVccontentsaveRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartVcVcrepoVccontentsaveEx(request, headers, runtime);
        }

        /**
         * Description: VC存储
         * Summary: VC存储
         */
        public async Task<StartVcVcrepoVccontentsaveResponse> StartVcVcrepoVccontentsaveAsync(StartVcVcrepoVccontentsaveRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartVcVcrepoVccontentsaveExAsync(request, headers, runtime);
        }

        /**
         * Description: VC存储
         * Summary: VC存储
         */
        public StartVcVcrepoVccontentsaveResponse StartVcVcrepoVccontentsaveEx(StartVcVcrepoVccontentsaveRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartVcVcrepoVccontentsaveResponse>(DoRequest("1.0", "baas.vc.vcrepo.vccontentsave.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: VC存储
         * Summary: VC存储
         */
        public async Task<StartVcVcrepoVccontentsaveResponse> StartVcVcrepoVccontentsaveExAsync(StartVcVcrepoVccontentsaveRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartVcVcrepoVccontentsaveResponse>(await DoRequestAsync("1.0", "baas.vc.vcrepo.vccontentsave.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 根据vcid获取vccontent
         * Summary: 根据vcid获取vccontent
         */
        public StartVcRepoReadwithvcidResponse StartVcRepoReadwithvcid(StartVcRepoReadwithvcidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartVcRepoReadwithvcidEx(request, headers, runtime);
        }

        /**
         * Description: 根据vcid获取vccontent
         * Summary: 根据vcid获取vccontent
         */
        public async Task<StartVcRepoReadwithvcidResponse> StartVcRepoReadwithvcidAsync(StartVcRepoReadwithvcidRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartVcRepoReadwithvcidExAsync(request, headers, runtime);
        }

        /**
         * Description: 根据vcid获取vccontent
         * Summary: 根据vcid获取vccontent
         */
        public StartVcRepoReadwithvcidResponse StartVcRepoReadwithvcidEx(StartVcRepoReadwithvcidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartVcRepoReadwithvcidResponse>(DoRequest("1.0", "baas.vc.repo.readwithvcid.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 根据vcid获取vccontent
         * Summary: 根据vcid获取vccontent
         */
        public async Task<StartVcRepoReadwithvcidResponse> StartVcRepoReadwithvcidExAsync(StartVcRepoReadwithvcidRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartVcRepoReadwithvcidResponse>(await DoRequestAsync("1.0", "baas.vc.repo.readwithvcid.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: vc仓库非托管模式下的VC传输初始化接口
         * Summary: vc仓库非托管模式下的VC传输初始化接口
         */
        public InitVcVcrepoVctransmitResponse InitVcVcrepoVctransmit(InitVcVcrepoVctransmitRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return InitVcVcrepoVctransmitEx(request, headers, runtime);
        }

        /**
         * Description: vc仓库非托管模式下的VC传输初始化接口
         * Summary: vc仓库非托管模式下的VC传输初始化接口
         */
        public async Task<InitVcVcrepoVctransmitResponse> InitVcVcrepoVctransmitAsync(InitVcVcrepoVctransmitRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await InitVcVcrepoVctransmitExAsync(request, headers, runtime);
        }

        /**
         * Description: vc仓库非托管模式下的VC传输初始化接口
         * Summary: vc仓库非托管模式下的VC传输初始化接口
         */
        public InitVcVcrepoVctransmitResponse InitVcVcrepoVctransmitEx(InitVcVcrepoVctransmitRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitVcVcrepoVctransmitResponse>(DoRequest("1.0", "baas.vc.vcrepo.vctransmit.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: vc仓库非托管模式下的VC传输初始化接口
         * Summary: vc仓库非托管模式下的VC传输初始化接口
         */
        public async Task<InitVcVcrepoVctransmitResponse> InitVcVcrepoVctransmitExAsync(InitVcVcrepoVctransmitRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitVcVcrepoVctransmitResponse>(await DoRequestAsync("1.0", "baas.vc.vcrepo.vctransmit.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 人脸实人认证初始化接口
         * Summary: 人脸实人认证初始化接口
         */
        public InitIdentificationFaceauthResponse InitIdentificationFaceauth(InitIdentificationFaceauthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return InitIdentificationFaceauthEx(request, headers, runtime);
        }

        /**
         * Description: 人脸实人认证初始化接口
         * Summary: 人脸实人认证初始化接口
         */
        public async Task<InitIdentificationFaceauthResponse> InitIdentificationFaceauthAsync(InitIdentificationFaceauthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await InitIdentificationFaceauthExAsync(request, headers, runtime);
        }

        /**
         * Description: 人脸实人认证初始化接口
         * Summary: 人脸实人认证初始化接口
         */
        public InitIdentificationFaceauthResponse InitIdentificationFaceauthEx(InitIdentificationFaceauthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitIdentificationFaceauthResponse>(DoRequest("1.0", "baas.identification.faceauth.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 人脸实人认证初始化接口
         * Summary: 人脸实人认证初始化接口
         */
        public async Task<InitIdentificationFaceauthResponse> InitIdentificationFaceauthExAsync(InitIdentificationFaceauthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitIdentificationFaceauthResponse>(await DoRequestAsync("1.0", "baas.identification.faceauth.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取人脸实人认证结果
         * Summary: 获取人脸实人认证结果
         */
        public QueryIdentificationFaceauthResponse QueryIdentificationFaceauth(QueryIdentificationFaceauthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryIdentificationFaceauthEx(request, headers, runtime);
        }

        /**
         * Description: 获取人脸实人认证结果
         * Summary: 获取人脸实人认证结果
         */
        public async Task<QueryIdentificationFaceauthResponse> QueryIdentificationFaceauthAsync(QueryIdentificationFaceauthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryIdentificationFaceauthExAsync(request, headers, runtime);
        }

        /**
         * Description: 获取人脸实人认证结果
         * Summary: 获取人脸实人认证结果
         */
        public QueryIdentificationFaceauthResponse QueryIdentificationFaceauthEx(QueryIdentificationFaceauthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryIdentificationFaceauthResponse>(DoRequest("1.0", "baas.identification.faceauth.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取人脸实人认证结果
         * Summary: 获取人脸实人认证结果
         */
        public async Task<QueryIdentificationFaceauthResponse> QueryIdentificationFaceauthExAsync(QueryIdentificationFaceauthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryIdentificationFaceauthResponse>(await DoRequestAsync("1.0", "baas.identification.faceauth.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 初始化存证事务: 进⾏行行资格核验，包括调⽤用⽅方账号权限，是否实⼈人等。成功后获得存证事务 ID(Token)
         * Summary: 存证交易初始化
         */
        public InitNotaryTransactionResponse InitNotaryTransaction(InitNotaryTransactionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return InitNotaryTransactionEx(request, headers, runtime);
        }

        /**
         * Description: 初始化存证事务: 进⾏行行资格核验，包括调⽤用⽅方账号权限，是否实⼈人等。成功后获得存证事务 ID(Token)
         * Summary: 存证交易初始化
         */
        public async Task<InitNotaryTransactionResponse> InitNotaryTransactionAsync(InitNotaryTransactionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await InitNotaryTransactionExAsync(request, headers, runtime);
        }

        /**
         * Description: 初始化存证事务: 进⾏行行资格核验，包括调⽤用⽅方账号权限，是否实⼈人等。成功后获得存证事务 ID(Token)
         * Summary: 存证交易初始化
         */
        public InitNotaryTransactionResponse InitNotaryTransactionEx(InitNotaryTransactionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitNotaryTransactionResponse>(DoRequest("1.0", "baas.notary.transaction.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 初始化存证事务: 进⾏行行资格核验，包括调⽤用⽅方账号权限，是否实⼈人等。成功后获得存证事务 ID(Token)
         * Summary: 存证交易初始化
         */
        public async Task<InitNotaryTransactionResponse> InitNotaryTransactionExAsync(InitNotaryTransactionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitNotaryTransactionResponse>(await DoRequestAsync("1.0", "baas.notary.transaction.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: ⽤用户通过存证事务Token，获取事务中所有的存证信息
         * Summary: 获取事务中所有的存证信息
         */
        public GetNotaryTransactionResponse GetNotaryTransaction(GetNotaryTransactionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return GetNotaryTransactionEx(request, headers, runtime);
        }

        /**
         * Description: ⽤用户通过存证事务Token，获取事务中所有的存证信息
         * Summary: 获取事务中所有的存证信息
         */
        public async Task<GetNotaryTransactionResponse> GetNotaryTransactionAsync(GetNotaryTransactionRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await GetNotaryTransactionExAsync(request, headers, runtime);
        }

        /**
         * Description: ⽤用户通过存证事务Token，获取事务中所有的存证信息
         * Summary: 获取事务中所有的存证信息
         */
        public GetNotaryTransactionResponse GetNotaryTransactionEx(GetNotaryTransactionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetNotaryTransactionResponse>(DoRequest("1.0", "baas.notary.transaction.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: ⽤用户通过存证事务Token，获取事务中所有的存证信息
         * Summary: 获取事务中所有的存证信息
         */
        public async Task<GetNotaryTransactionResponse> GetNotaryTransactionExAsync(GetNotaryTransactionRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetNotaryTransactionResponse>(await DoRequestAsync("1.0", "baas.notary.transaction.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 发起⼀个文本存证，将文本内容存证上链。
         * Summary: 发送文本存证
         */
        public SendNotaryTransactionTextResponse SendNotaryTransactionText(SendNotaryTransactionTextRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return SendNotaryTransactionTextEx(request, headers, runtime);
        }

        /**
         * Description: 发起⼀个文本存证，将文本内容存证上链。
         * Summary: 发送文本存证
         */
        public async Task<SendNotaryTransactionTextResponse> SendNotaryTransactionTextAsync(SendNotaryTransactionTextRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await SendNotaryTransactionTextExAsync(request, headers, runtime);
        }

        /**
         * Description: 发起⼀个文本存证，将文本内容存证上链。
         * Summary: 发送文本存证
         */
        public SendNotaryTransactionTextResponse SendNotaryTransactionTextEx(SendNotaryTransactionTextRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SendNotaryTransactionTextResponse>(DoRequest("1.0", "baas.notary.transaction.text.send", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 发起⼀个文本存证，将文本内容存证上链。
         * Summary: 发送文本存证
         */
        public async Task<SendNotaryTransactionTextResponse> SendNotaryTransactionTextExAsync(SendNotaryTransactionTextRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<SendNotaryTransactionTextResponse>(await DoRequestAsync("1.0", "baas.notary.transaction.text.send", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: ⽤户通过交易易哈希获取自己上传的文本存证内容
         * Summary: 获取文本存证
         */
        public GetNotaryTransactionTextResponse GetNotaryTransactionText(GetNotaryTransactionTextRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return GetNotaryTransactionTextEx(request, headers, runtime);
        }

        /**
         * Description: ⽤户通过交易易哈希获取自己上传的文本存证内容
         * Summary: 获取文本存证
         */
        public async Task<GetNotaryTransactionTextResponse> GetNotaryTransactionTextAsync(GetNotaryTransactionTextRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await GetNotaryTransactionTextExAsync(request, headers, runtime);
        }

        /**
         * Description: ⽤户通过交易易哈希获取自己上传的文本存证内容
         * Summary: 获取文本存证
         */
        public GetNotaryTransactionTextResponse GetNotaryTransactionTextEx(GetNotaryTransactionTextRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetNotaryTransactionTextResponse>(DoRequest("1.0", "baas.notary.transaction.text.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: ⽤户通过交易易哈希获取自己上传的文本存证内容
         * Summary: 获取文本存证
         */
        public async Task<GetNotaryTransactionTextResponse> GetNotaryTransactionTextExAsync(GetNotaryTransactionTextRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetNotaryTransactionTextResponse>(await DoRequestAsync("1.0", "baas.notary.transaction.text.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取存证事务ID
         * Summary: 获取存证事务ID
         */
        public CreateNotaryTokenResponse CreateNotaryToken(CreateNotaryTokenRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateNotaryTokenEx(request, headers, runtime);
        }

        /**
         * Description: 获取存证事务ID
         * Summary: 获取存证事务ID
         */
        public async Task<CreateNotaryTokenResponse> CreateNotaryTokenAsync(CreateNotaryTokenRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateNotaryTokenExAsync(request, headers, runtime);
        }

        /**
         * Description: 获取存证事务ID
         * Summary: 获取存证事务ID
         */
        public CreateNotaryTokenResponse CreateNotaryTokenEx(CreateNotaryTokenRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateNotaryTokenResponse>(DoRequest("1.0", "baas.notary.token.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取存证事务ID
         * Summary: 获取存证事务ID
         */
        public async Task<CreateNotaryTokenResponse> CreateNotaryTokenExAsync(CreateNotaryTokenRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateNotaryTokenResponse>(await DoRequestAsync("1.0", "baas.notary.token.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过存证事务Token，获取事务中所有的存证信息
         * Summary: 获取事务中所有的存证信息
         */
        public GetNotaryTransResponse GetNotaryTrans(GetNotaryTransRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return GetNotaryTransEx(request, headers, runtime);
        }

        /**
         * Description: 通过存证事务Token，获取事务中所有的存证信息
         * Summary: 获取事务中所有的存证信息
         */
        public async Task<GetNotaryTransResponse> GetNotaryTransAsync(GetNotaryTransRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await GetNotaryTransExAsync(request, headers, runtime);
        }

        /**
         * Description: 通过存证事务Token，获取事务中所有的存证信息
         * Summary: 获取事务中所有的存证信息
         */
        public GetNotaryTransResponse GetNotaryTransEx(GetNotaryTransRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetNotaryTransResponse>(DoRequest("1.0", "baas.notary.trans.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 通过存证事务Token，获取事务中所有的存证信息
         * Summary: 获取事务中所有的存证信息
         */
        public async Task<GetNotaryTransResponse> GetNotaryTransExAsync(GetNotaryTransRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetNotaryTransResponse>(await DoRequestAsync("1.0", "baas.notary.trans.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 发起文本存证，将文本内容存证上链
         * Summary: 文本存证，将文本内容存证上链
         */
        public CreateNotaryTextResponse CreateNotaryText(CreateNotaryTextRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateNotaryTextEx(request, headers, runtime);
        }

        /**
         * Description: 发起文本存证，将文本内容存证上链
         * Summary: 文本存证，将文本内容存证上链
         */
        public async Task<CreateNotaryTextResponse> CreateNotaryTextAsync(CreateNotaryTextRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateNotaryTextExAsync(request, headers, runtime);
        }

        /**
         * Description: 发起文本存证，将文本内容存证上链
         * Summary: 文本存证，将文本内容存证上链
         */
        public CreateNotaryTextResponse CreateNotaryTextEx(CreateNotaryTextRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateNotaryTextResponse>(DoRequest("1.0", "baas.notary.text.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 发起文本存证，将文本内容存证上链
         * Summary: 文本存证，将文本内容存证上链
         */
        public async Task<CreateNotaryTextResponse> CreateNotaryTextExAsync(CreateNotaryTextRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateNotaryTextResponse>(await DoRequestAsync("1.0", "baas.notary.text.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户通过交易哈希获取自己上传的文本存证内容
         * Summary: 获取文本存证内容
         */
        public GetNotaryTextResponse GetNotaryText(GetNotaryTextRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return GetNotaryTextEx(request, headers, runtime);
        }

        /**
         * Description: 用户通过交易哈希获取自己上传的文本存证内容
         * Summary: 获取文本存证内容
         */
        public async Task<GetNotaryTextResponse> GetNotaryTextAsync(GetNotaryTextRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await GetNotaryTextExAsync(request, headers, runtime);
        }

        /**
         * Description: 用户通过交易哈希获取自己上传的文本存证内容
         * Summary: 获取文本存证内容
         */
        public GetNotaryTextResponse GetNotaryTextEx(GetNotaryTextRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetNotaryTextResponse>(DoRequest("1.0", "baas.notary.text.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户通过交易哈希获取自己上传的文本存证内容
         * Summary: 获取文本存证内容
         */
        public async Task<GetNotaryTextResponse> GetNotaryTextExAsync(GetNotaryTextRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetNotaryTextResponse>(await DoRequestAsync("1.0", "baas.notary.text.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 发起文件存证，将文件内容存证上链
         * Summary: 文件内容存证上链
         */
        public CreateNotaryFileResponse CreateNotaryFile(CreateNotaryFileRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateNotaryFileEx(request, headers, runtime);
        }

        /**
         * Description: 发起文件存证，将文件内容存证上链
         * Summary: 文件内容存证上链
         */
        public async Task<CreateNotaryFileResponse> CreateNotaryFileAsync(CreateNotaryFileRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateNotaryFileExAsync(request, headers, runtime);
        }

        /**
         * Description: 发起文件存证，将文件内容存证上链
         * Summary: 文件内容存证上链
         */
        public CreateNotaryFileResponse CreateNotaryFileEx(CreateNotaryFileRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateNotaryFileResponse>(DoRequest("1.0", "baas.notary.file.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 发起文件存证，将文件内容存证上链
         * Summary: 文件内容存证上链
         */
        public async Task<CreateNotaryFileResponse> CreateNotaryFileExAsync(CreateNotaryFileRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateNotaryFileResponse>(await DoRequestAsync("1.0", "baas.notary.file.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户通过交易哈希获取自己上传的文件存证oss下载地址
         * Summary: 获取文件存证oss下载地址
         */
        public GetNotaryFileResponse GetNotaryFile(GetNotaryFileRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return GetNotaryFileEx(request, headers, runtime);
        }

        /**
         * Description: 用户通过交易哈希获取自己上传的文件存证oss下载地址
         * Summary: 获取文件存证oss下载地址
         */
        public async Task<GetNotaryFileResponse> GetNotaryFileAsync(GetNotaryFileRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await GetNotaryFileExAsync(request, headers, runtime);
        }

        /**
         * Description: 用户通过交易哈希获取自己上传的文件存证oss下载地址
         * Summary: 获取文件存证oss下载地址
         */
        public GetNotaryFileResponse GetNotaryFileEx(GetNotaryFileRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetNotaryFileResponse>(DoRequest("1.0", "baas.notary.file.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户通过交易哈希获取自己上传的文件存证oss下载地址
         * Summary: 获取文件存证oss下载地址
         */
        public async Task<GetNotaryFileResponse> GetNotaryFileExAsync(GetNotaryFileRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetNotaryFileResponse>(await DoRequestAsync("1.0", "baas.notary.file.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 发起原文存证，将原文内容存证上链
         * Summary: 原文内容存证
         */
        public CreateNotarySourceResponse CreateNotarySource(CreateNotarySourceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateNotarySourceEx(request, headers, runtime);
        }

        /**
         * Description: 发起原文存证，将原文内容存证上链
         * Summary: 原文内容存证
         */
        public async Task<CreateNotarySourceResponse> CreateNotarySourceAsync(CreateNotarySourceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateNotarySourceExAsync(request, headers, runtime);
        }

        /**
         * Description: 发起原文存证，将原文内容存证上链
         * Summary: 原文内容存证
         */
        public CreateNotarySourceResponse CreateNotarySourceEx(CreateNotarySourceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateNotarySourceResponse>(DoRequest("1.0", "baas.notary.source.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 发起原文存证，将原文内容存证上链
         * Summary: 原文内容存证
         */
        public async Task<CreateNotarySourceResponse> CreateNotarySourceExAsync(CreateNotarySourceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateNotarySourceResponse>(await DoRequestAsync("1.0", "baas.notary.source.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户通过交易哈希获取自己上传的原文存证oss下载地址
         * Summary: 获取原文存证oss下载地址
         */
        public GetNotarySourceResponse GetNotarySource(GetNotarySourceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return GetNotarySourceEx(request, headers, runtime);
        }

        /**
         * Description: 用户通过交易哈希获取自己上传的原文存证oss下载地址
         * Summary: 获取原文存证oss下载地址
         */
        public async Task<GetNotarySourceResponse> GetNotarySourceAsync(GetNotarySourceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await GetNotarySourceExAsync(request, headers, runtime);
        }

        /**
         * Description: 用户通过交易哈希获取自己上传的原文存证oss下载地址
         * Summary: 获取原文存证oss下载地址
         */
        public GetNotarySourceResponse GetNotarySourceEx(GetNotarySourceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetNotarySourceResponse>(DoRequest("1.0", "baas.notary.source.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 用户通过交易哈希获取自己上传的原文存证oss下载地址
         * Summary: 获取原文存证oss下载地址
         */
        public async Task<GetNotarySourceResponse> GetNotarySourceExAsync(GetNotarySourceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetNotarySourceResponse>(await DoRequestAsync("1.0", "baas.notary.source.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: test
         * Summary: test
         */
        public QueryNotaryTestResponse QueryNotaryTest(QueryNotaryTestRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryNotaryTestEx(request, headers, runtime);
        }

        /**
         * Description: test
         * Summary: test
         */
        public async Task<QueryNotaryTestResponse> QueryNotaryTestAsync(QueryNotaryTestRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryNotaryTestExAsync(request, headers, runtime);
        }

        /**
         * Description: test
         * Summary: test
         */
        public QueryNotaryTestResponse QueryNotaryTestEx(QueryNotaryTestRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryNotaryTestResponse>(DoRequest("1.0", "baas.notary.test.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: test
         * Summary: test
         */
        public async Task<QueryNotaryTestResponse> QueryNotaryTestExAsync(QueryNotaryTestRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryNotaryTestResponse>(await DoRequestAsync("1.0", "baas.notary.test.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 接口定义 https://yuque.antfin-inc.com/antchain/lqq4qz/pnvo46#52f667ab
         * Summary: 企业法人认证初始化接口
         */
        public InitNotaryOpenapiMerchantResponse InitNotaryOpenapiMerchant(InitNotaryOpenapiMerchantRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return InitNotaryOpenapiMerchantEx(request, headers, runtime);
        }

        /**
         * Description: 接口定义 https://yuque.antfin-inc.com/antchain/lqq4qz/pnvo46#52f667ab
         * Summary: 企业法人认证初始化接口
         */
        public async Task<InitNotaryOpenapiMerchantResponse> InitNotaryOpenapiMerchantAsync(InitNotaryOpenapiMerchantRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await InitNotaryOpenapiMerchantExAsync(request, headers, runtime);
        }

        /**
         * Description: 接口定义 https://yuque.antfin-inc.com/antchain/lqq4qz/pnvo46#52f667ab
         * Summary: 企业法人认证初始化接口
         */
        public InitNotaryOpenapiMerchantResponse InitNotaryOpenapiMerchantEx(InitNotaryOpenapiMerchantRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitNotaryOpenapiMerchantResponse>(DoRequest("1.0", "baas.notary.openapi.merchant.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 接口定义 https://yuque.antfin-inc.com/antchain/lqq4qz/pnvo46#52f667ab
         * Summary: 企业法人认证初始化接口
         */
        public async Task<InitNotaryOpenapiMerchantResponse> InitNotaryOpenapiMerchantExAsync(InitNotaryOpenapiMerchantRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitNotaryOpenapiMerchantResponse>(await DoRequestAsync("1.0", "baas.notary.openapi.merchant.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 企业法人认证查询认证状态
         * Summary: 企业法人认证查询认证状态
         */
        public QueryNotaryOpenapiMerchantResponse QueryNotaryOpenapiMerchant(QueryNotaryOpenapiMerchantRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryNotaryOpenapiMerchantEx(request, headers, runtime);
        }

        /**
         * Description: 企业法人认证查询认证状态
         * Summary: 企业法人认证查询认证状态
         */
        public async Task<QueryNotaryOpenapiMerchantResponse> QueryNotaryOpenapiMerchantAsync(QueryNotaryOpenapiMerchantRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryNotaryOpenapiMerchantExAsync(request, headers, runtime);
        }

        /**
         * Description: 企业法人认证查询认证状态
         * Summary: 企业法人认证查询认证状态
         */
        public QueryNotaryOpenapiMerchantResponse QueryNotaryOpenapiMerchantEx(QueryNotaryOpenapiMerchantRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryNotaryOpenapiMerchantResponse>(DoRequest("1.0", "baas.notary.openapi.merchant.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 企业法人认证查询认证状态
         * Summary: 企业法人认证查询认证状态
         */
        public async Task<QueryNotaryOpenapiMerchantResponse> QueryNotaryOpenapiMerchantExAsync(QueryNotaryOpenapiMerchantRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryNotaryOpenapiMerchantResponse>(await DoRequestAsync("1.0", "baas.notary.openapi.merchant.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 为租赁服务平台部署合约
         * Summary: 为租赁服务平台部署合约
         */
        public DeployNotaryLeaseContractResponse DeployNotaryLeaseContract(DeployNotaryLeaseContractRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return DeployNotaryLeaseContractEx(request, headers, runtime);
        }

        /**
         * Description: 为租赁服务平台部署合约
         * Summary: 为租赁服务平台部署合约
         */
        public async Task<DeployNotaryLeaseContractResponse> DeployNotaryLeaseContractAsync(DeployNotaryLeaseContractRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await DeployNotaryLeaseContractExAsync(request, headers, runtime);
        }

        /**
         * Description: 为租赁服务平台部署合约
         * Summary: 为租赁服务平台部署合约
         */
        public DeployNotaryLeaseContractResponse DeployNotaryLeaseContractEx(DeployNotaryLeaseContractRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeployNotaryLeaseContractResponse>(DoRequest("1.0", "baas.notary.lease.contract.deploy", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 为租赁服务平台部署合约
         * Summary: 为租赁服务平台部署合约
         */
        public async Task<DeployNotaryLeaseContractResponse> DeployNotaryLeaseContractExAsync(DeployNotaryLeaseContractRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<DeployNotaryLeaseContractResponse>(await DoRequestAsync("1.0", "baas.notary.lease.contract.deploy", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 建站服务信息注册
         * Summary: 服务注册
         */
        public CreateOpenchainWebsitServiceResponse CreateOpenchainWebsitService(CreateOpenchainWebsitServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateOpenchainWebsitServiceEx(request, headers, runtime);
        }

        /**
         * Description: 建站服务信息注册
         * Summary: 服务注册
         */
        public async Task<CreateOpenchainWebsitServiceResponse> CreateOpenchainWebsitServiceAsync(CreateOpenchainWebsitServiceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateOpenchainWebsitServiceExAsync(request, headers, runtime);
        }

        /**
         * Description: 建站服务信息注册
         * Summary: 服务注册
         */
        public CreateOpenchainWebsitServiceResponse CreateOpenchainWebsitServiceEx(CreateOpenchainWebsitServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateOpenchainWebsitServiceResponse>(DoRequest("1.0", "baas.openchain.websit.service.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 建站服务信息注册
         * Summary: 服务注册
         */
        public async Task<CreateOpenchainWebsitServiceResponse> CreateOpenchainWebsitServiceExAsync(CreateOpenchainWebsitServiceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateOpenchainWebsitServiceResponse>(await DoRequestAsync("1.0", "baas.openchain.websit.service.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 可信建站法人四要素认证
         * Summary: 可信建站法人四要素认证
         */
        public CheckOpenchainCorporateFaceResponse CheckOpenchainCorporateFace(CheckOpenchainCorporateFaceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CheckOpenchainCorporateFaceEx(request, headers, runtime);
        }

        /**
         * Description: 可信建站法人四要素认证
         * Summary: 可信建站法人四要素认证
         */
        public async Task<CheckOpenchainCorporateFaceResponse> CheckOpenchainCorporateFaceAsync(CheckOpenchainCorporateFaceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CheckOpenchainCorporateFaceExAsync(request, headers, runtime);
        }

        /**
         * Description: 可信建站法人四要素认证
         * Summary: 可信建站法人四要素认证
         */
        public CheckOpenchainCorporateFaceResponse CheckOpenchainCorporateFaceEx(CheckOpenchainCorporateFaceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CheckOpenchainCorporateFaceResponse>(DoRequest("1.0", "baas.openchain.corporate.face.check", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 可信建站法人四要素认证
         * Summary: 可信建站法人四要素认证
         */
        public async Task<CheckOpenchainCorporateFaceResponse> CheckOpenchainCorporateFaceExAsync(CheckOpenchainCorporateFaceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CheckOpenchainCorporateFaceResponse>(await DoRequestAsync("1.0", "baas.openchain.corporate.face.check", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 法人认证4要素结果查询
         * Summary: 法人认证4要素结果查询
         */
        public QueryOpenchainCorporateFaceResponse QueryOpenchainCorporateFace(QueryOpenchainCorporateFaceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryOpenchainCorporateFaceEx(request, headers, runtime);
        }

        /**
         * Description: 法人认证4要素结果查询
         * Summary: 法人认证4要素结果查询
         */
        public async Task<QueryOpenchainCorporateFaceResponse> QueryOpenchainCorporateFaceAsync(QueryOpenchainCorporateFaceRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryOpenchainCorporateFaceExAsync(request, headers, runtime);
        }

        /**
         * Description: 法人认证4要素结果查询
         * Summary: 法人认证4要素结果查询
         */
        public QueryOpenchainCorporateFaceResponse QueryOpenchainCorporateFaceEx(QueryOpenchainCorporateFaceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryOpenchainCorporateFaceResponse>(DoRequest("1.0", "baas.openchain.corporate.face.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 法人认证4要素结果查询
         * Summary: 法人认证4要素结果查询
         */
        public async Task<QueryOpenchainCorporateFaceResponse> QueryOpenchainCorporateFaceExAsync(QueryOpenchainCorporateFaceRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryOpenchainCorporateFaceResponse>(await DoRequestAsync("1.0", "baas.openchain.corporate.face.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 授权用户数据查询
         * Summary: 授权用户数据查询
         */
        public QueryOpenchainUserDataResponse QueryOpenchainUserData(QueryOpenchainUserDataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryOpenchainUserDataEx(request, headers, runtime);
        }

        /**
         * Description: 授权用户数据查询
         * Summary: 授权用户数据查询
         */
        public async Task<QueryOpenchainUserDataResponse> QueryOpenchainUserDataAsync(QueryOpenchainUserDataRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryOpenchainUserDataExAsync(request, headers, runtime);
        }

        /**
         * Description: 授权用户数据查询
         * Summary: 授权用户数据查询
         */
        public QueryOpenchainUserDataResponse QueryOpenchainUserDataEx(QueryOpenchainUserDataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryOpenchainUserDataResponse>(DoRequest("1.0", "baas.openchain.user.data.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 授权用户数据查询
         * Summary: 授权用户数据查询
         */
        public async Task<QueryOpenchainUserDataResponse> QueryOpenchainUserDataExAsync(QueryOpenchainUserDataRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryOpenchainUserDataResponse>(await DoRequestAsync("1.0", "baas.openchain.user.data.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 三要素验证身份冒用风险
         * Summary: 三要素验证身份冒用风险
         */
        public QueryIdentificationRiskThreemetaResponse QueryIdentificationRiskThreemeta(QueryIdentificationRiskThreemetaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryIdentificationRiskThreemetaEx(request, headers, runtime);
        }

        /**
         * Description: 三要素验证身份冒用风险
         * Summary: 三要素验证身份冒用风险
         */
        public async Task<QueryIdentificationRiskThreemetaResponse> QueryIdentificationRiskThreemetaAsync(QueryIdentificationRiskThreemetaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryIdentificationRiskThreemetaExAsync(request, headers, runtime);
        }

        /**
         * Description: 三要素验证身份冒用风险
         * Summary: 三要素验证身份冒用风险
         */
        public QueryIdentificationRiskThreemetaResponse QueryIdentificationRiskThreemetaEx(QueryIdentificationRiskThreemetaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryIdentificationRiskThreemetaResponse>(DoRequest("1.0", "baas.identification.risk.threemeta.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 三要素验证身份冒用风险
         * Summary: 三要素验证身份冒用风险
         */
        public async Task<QueryIdentificationRiskThreemetaResponse> QueryIdentificationRiskThreemetaExAsync(QueryIdentificationRiskThreemetaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryIdentificationRiskThreemetaResponse>(await DoRequestAsync("1.0", "baas.identification.risk.threemeta.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 文本内容安全扫描
         * Summary: 文本内容安全扫描
         */
        public CheckContentRiskTextResponse CheckContentRiskText(CheckContentRiskTextRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CheckContentRiskTextEx(request, headers, runtime);
        }

        /**
         * Description: 文本内容安全扫描
         * Summary: 文本内容安全扫描
         */
        public async Task<CheckContentRiskTextResponse> CheckContentRiskTextAsync(CheckContentRiskTextRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CheckContentRiskTextExAsync(request, headers, runtime);
        }

        /**
         * Description: 文本内容安全扫描
         * Summary: 文本内容安全扫描
         */
        public CheckContentRiskTextResponse CheckContentRiskTextEx(CheckContentRiskTextRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CheckContentRiskTextResponse>(DoRequest("1.0", "baas.content.risk.text.check", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 文本内容安全扫描
         * Summary: 文本内容安全扫描
         */
        public async Task<CheckContentRiskTextResponse> CheckContentRiskTextExAsync(CheckContentRiskTextRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CheckContentRiskTextResponse>(await DoRequestAsync("1.0", "baas.content.risk.text.check", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 二要素验证身份冒用风险
         * Summary: 二要素验证身份冒用风险
         */
        public QueryIdentificationRiskTwometaResponse QueryIdentificationRiskTwometa(QueryIdentificationRiskTwometaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryIdentificationRiskTwometaEx(request, headers, runtime);
        }

        /**
         * Description: 二要素验证身份冒用风险
         * Summary: 二要素验证身份冒用风险
         */
        public async Task<QueryIdentificationRiskTwometaResponse> QueryIdentificationRiskTwometaAsync(QueryIdentificationRiskTwometaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryIdentificationRiskTwometaExAsync(request, headers, runtime);
        }

        /**
         * Description: 二要素验证身份冒用风险
         * Summary: 二要素验证身份冒用风险
         */
        public QueryIdentificationRiskTwometaResponse QueryIdentificationRiskTwometaEx(QueryIdentificationRiskTwometaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryIdentificationRiskTwometaResponse>(DoRequest("1.0", "baas.identification.risk.twometa.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 二要素验证身份冒用风险
         * Summary: 二要素验证身份冒用风险
         */
        public async Task<QueryIdentificationRiskTwometaResponse> QueryIdentificationRiskTwometaExAsync(QueryIdentificationRiskTwometaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryIdentificationRiskTwometaResponse>(await DoRequestAsync("1.0", "baas.identification.risk.twometa.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 四要素验证身份冒用风险
         * Summary: 四要素验证身份冒用风险
         */
        public QueryIdentificationRiskFourmetaResponse QueryIdentificationRiskFourmeta(QueryIdentificationRiskFourmetaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryIdentificationRiskFourmetaEx(request, headers, runtime);
        }

        /**
         * Description: 四要素验证身份冒用风险
         * Summary: 四要素验证身份冒用风险
         */
        public async Task<QueryIdentificationRiskFourmetaResponse> QueryIdentificationRiskFourmetaAsync(QueryIdentificationRiskFourmetaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryIdentificationRiskFourmetaExAsync(request, headers, runtime);
        }

        /**
         * Description: 四要素验证身份冒用风险
         * Summary: 四要素验证身份冒用风险
         */
        public QueryIdentificationRiskFourmetaResponse QueryIdentificationRiskFourmetaEx(QueryIdentificationRiskFourmetaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryIdentificationRiskFourmetaResponse>(DoRequest("1.0", "baas.identification.risk.fourmeta.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 四要素验证身份冒用风险
         * Summary: 四要素验证身份冒用风险
         */
        public async Task<QueryIdentificationRiskFourmetaResponse> QueryIdentificationRiskFourmetaExAsync(QueryIdentificationRiskFourmetaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryIdentificationRiskFourmetaResponse>(await DoRequestAsync("1.0", "baas.identification.risk.fourmeta.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 原生存证接口
         * Summary: 原生存证接口
         */
        public CreateNotaryRawTextResponse CreateNotaryRawText(CreateNotaryRawTextRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateNotaryRawTextEx(request, headers, runtime);
        }

        /**
         * Description: 原生存证接口
         * Summary: 原生存证接口
         */
        public async Task<CreateNotaryRawTextResponse> CreateNotaryRawTextAsync(CreateNotaryRawTextRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateNotaryRawTextExAsync(request, headers, runtime);
        }

        /**
         * Description: 原生存证接口
         * Summary: 原生存证接口
         */
        public CreateNotaryRawTextResponse CreateNotaryRawTextEx(CreateNotaryRawTextRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateNotaryRawTextResponse>(DoRequest("1.0", "baas.notary.raw.text.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 原生存证接口
         * Summary: 原生存证接口
         */
        public async Task<CreateNotaryRawTextResponse> CreateNotaryRawTextExAsync(CreateNotaryRawTextRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateNotaryRawTextResponse>(await DoRequestAsync("1.0", "baas.notary.raw.text.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取原生存证内容接口
         * Summary: 获取原生存证内容接口
         */
        public GetNotaryRawTextResponse GetNotaryRawText(GetNotaryRawTextRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return GetNotaryRawTextEx(request, headers, runtime);
        }

        /**
         * Description: 获取原生存证内容接口
         * Summary: 获取原生存证内容接口
         */
        public async Task<GetNotaryRawTextResponse> GetNotaryRawTextAsync(GetNotaryRawTextRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await GetNotaryRawTextExAsync(request, headers, runtime);
        }

        /**
         * Description: 获取原生存证内容接口
         * Summary: 获取原生存证内容接口
         */
        public GetNotaryRawTextResponse GetNotaryRawTextEx(GetNotaryRawTextRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetNotaryRawTextResponse>(DoRequest("1.0", "baas.notary.raw.text.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 获取原生存证内容接口
         * Summary: 获取原生存证内容接口
         */
        public async Task<GetNotaryRawTextResponse> GetNotaryRawTextExAsync(GetNotaryRawTextRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<GetNotaryRawTextResponse>(await DoRequestAsync("1.0", "baas.notary.raw.text.get", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 脱敏身份验证
         * Summary: 脱敏身份验证
         */
        public QueryIdentificationRiskMaskResponse QueryIdentificationRiskMask(QueryIdentificationRiskMaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryIdentificationRiskMaskEx(request, headers, runtime);
        }

        /**
         * Description: 脱敏身份验证
         * Summary: 脱敏身份验证
         */
        public async Task<QueryIdentificationRiskMaskResponse> QueryIdentificationRiskMaskAsync(QueryIdentificationRiskMaskRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryIdentificationRiskMaskExAsync(request, headers, runtime);
        }

        /**
         * Description: 脱敏身份验证
         * Summary: 脱敏身份验证
         */
        public QueryIdentificationRiskMaskResponse QueryIdentificationRiskMaskEx(QueryIdentificationRiskMaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryIdentificationRiskMaskResponse>(DoRequest("1.0", "baas.identification.risk.mask.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 脱敏身份验证
         * Summary: 脱敏身份验证
         */
        public async Task<QueryIdentificationRiskMaskResponse> QueryIdentificationRiskMaskExAsync(QueryIdentificationRiskMaskRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryIdentificationRiskMaskResponse>(await DoRequestAsync("1.0", "baas.identification.risk.mask.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 基于法人实人认证的企业四要素认证
         * Summary: 基于法人实人认证的企业四要素认证
         */
        public InitIdentificationEnterpriseFaceauthResponse InitIdentificationEnterpriseFaceauth(InitIdentificationEnterpriseFaceauthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return InitIdentificationEnterpriseFaceauthEx(request, headers, runtime);
        }

        /**
         * Description: 基于法人实人认证的企业四要素认证
         * Summary: 基于法人实人认证的企业四要素认证
         */
        public async Task<InitIdentificationEnterpriseFaceauthResponse> InitIdentificationEnterpriseFaceauthAsync(InitIdentificationEnterpriseFaceauthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await InitIdentificationEnterpriseFaceauthExAsync(request, headers, runtime);
        }

        /**
         * Description: 基于法人实人认证的企业四要素认证
         * Summary: 基于法人实人认证的企业四要素认证
         */
        public InitIdentificationEnterpriseFaceauthResponse InitIdentificationEnterpriseFaceauthEx(InitIdentificationEnterpriseFaceauthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitIdentificationEnterpriseFaceauthResponse>(DoRequest("1.0", "baas.identification.enterprise.faceauth.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 基于法人实人认证的企业四要素认证
         * Summary: 基于法人实人认证的企业四要素认证
         */
        public async Task<InitIdentificationEnterpriseFaceauthResponse> InitIdentificationEnterpriseFaceauthExAsync(InitIdentificationEnterpriseFaceauthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<InitIdentificationEnterpriseFaceauthResponse>(await DoRequestAsync("1.0", "baas.identification.enterprise.faceauth.init", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询企业四要素（实人）认证结果
         * Summary: 查询企业四要素（实人）认证结果
         */
        public QueryIdentificationEnterpriseFaceauthResponse QueryIdentificationEnterpriseFaceauth(QueryIdentificationEnterpriseFaceauthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryIdentificationEnterpriseFaceauthEx(request, headers, runtime);
        }

        /**
         * Description: 查询企业四要素（实人）认证结果
         * Summary: 查询企业四要素（实人）认证结果
         */
        public async Task<QueryIdentificationEnterpriseFaceauthResponse> QueryIdentificationEnterpriseFaceauthAsync(QueryIdentificationEnterpriseFaceauthRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryIdentificationEnterpriseFaceauthExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询企业四要素（实人）认证结果
         * Summary: 查询企业四要素（实人）认证结果
         */
        public QueryIdentificationEnterpriseFaceauthResponse QueryIdentificationEnterpriseFaceauthEx(QueryIdentificationEnterpriseFaceauthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryIdentificationEnterpriseFaceauthResponse>(DoRequest("1.0", "baas.identification.enterprise.faceauth.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询企业四要素（实人）认证结果
         * Summary: 查询企业四要素（实人）认证结果
         */
        public async Task<QueryIdentificationEnterpriseFaceauthResponse> QueryIdentificationEnterpriseFaceauthExAsync(QueryIdentificationEnterpriseFaceauthRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryIdentificationEnterpriseFaceauthResponse>(await DoRequestAsync("1.0", "baas.identification.enterprise.faceauth.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 企业四要素认证
         * Summary: 企业四要素认证
         */
        public QueryIdentificationEnterpriseFourmetaResponse QueryIdentificationEnterpriseFourmeta(QueryIdentificationEnterpriseFourmetaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryIdentificationEnterpriseFourmetaEx(request, headers, runtime);
        }

        /**
         * Description: 企业四要素认证
         * Summary: 企业四要素认证
         */
        public async Task<QueryIdentificationEnterpriseFourmetaResponse> QueryIdentificationEnterpriseFourmetaAsync(QueryIdentificationEnterpriseFourmetaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryIdentificationEnterpriseFourmetaExAsync(request, headers, runtime);
        }

        /**
         * Description: 企业四要素认证
         * Summary: 企业四要素认证
         */
        public QueryIdentificationEnterpriseFourmetaResponse QueryIdentificationEnterpriseFourmetaEx(QueryIdentificationEnterpriseFourmetaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryIdentificationEnterpriseFourmetaResponse>(DoRequest("1.0", "baas.identification.enterprise.fourmeta.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 企业四要素认证
         * Summary: 企业四要素认证
         */
        public async Task<QueryIdentificationEnterpriseFourmetaResponse> QueryIdentificationEnterpriseFourmetaExAsync(QueryIdentificationEnterpriseFourmetaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryIdentificationEnterpriseFourmetaResponse>(await DoRequestAsync("1.0", "baas.identification.enterprise.fourmeta.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 企业三要素认证（企业名，企业证件号，法人姓名）
         * Summary: 企业三要素认证
         */
        public QueryIdentificationEnterpriseThreemetaResponse QueryIdentificationEnterpriseThreemeta(QueryIdentificationEnterpriseThreemetaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryIdentificationEnterpriseThreemetaEx(request, headers, runtime);
        }

        /**
         * Description: 企业三要素认证（企业名，企业证件号，法人姓名）
         * Summary: 企业三要素认证
         */
        public async Task<QueryIdentificationEnterpriseThreemetaResponse> QueryIdentificationEnterpriseThreemetaAsync(QueryIdentificationEnterpriseThreemetaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryIdentificationEnterpriseThreemetaExAsync(request, headers, runtime);
        }

        /**
         * Description: 企业三要素认证（企业名，企业证件号，法人姓名）
         * Summary: 企业三要素认证
         */
        public QueryIdentificationEnterpriseThreemetaResponse QueryIdentificationEnterpriseThreemetaEx(QueryIdentificationEnterpriseThreemetaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryIdentificationEnterpriseThreemetaResponse>(DoRequest("1.0", "baas.identification.enterprise.threemeta.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 企业三要素认证（企业名，企业证件号，法人姓名）
         * Summary: 企业三要素认证
         */
        public async Task<QueryIdentificationEnterpriseThreemetaResponse> QueryIdentificationEnterpriseThreemetaExAsync(QueryIdentificationEnterpriseThreemetaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryIdentificationEnterpriseThreemetaResponse>(await DoRequestAsync("1.0", "baas.identification.enterprise.threemeta.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 企业二要素认证（企业名称，企业证件号码）
         * Summary:  企业二要素认证
         */
        public QueryIdentificationEnterpriseTwometaResponse QueryIdentificationEnterpriseTwometa(QueryIdentificationEnterpriseTwometaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryIdentificationEnterpriseTwometaEx(request, headers, runtime);
        }

        /**
         * Description: 企业二要素认证（企业名称，企业证件号码）
         * Summary:  企业二要素认证
         */
        public async Task<QueryIdentificationEnterpriseTwometaResponse> QueryIdentificationEnterpriseTwometaAsync(QueryIdentificationEnterpriseTwometaRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryIdentificationEnterpriseTwometaExAsync(request, headers, runtime);
        }

        /**
         * Description: 企业二要素认证（企业名称，企业证件号码）
         * Summary:  企业二要素认证
         */
        public QueryIdentificationEnterpriseTwometaResponse QueryIdentificationEnterpriseTwometaEx(QueryIdentificationEnterpriseTwometaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryIdentificationEnterpriseTwometaResponse>(DoRequest("1.0", "baas.identification.enterprise.twometa.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 企业二要素认证（企业名称，企业证件号码）
         * Summary:  企业二要素认证
         */
        public async Task<QueryIdentificationEnterpriseTwometaResponse> QueryIdentificationEnterpriseTwometaExAsync(QueryIdentificationEnterpriseTwometaRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryIdentificationEnterpriseTwometaResponse>(await DoRequestAsync("1.0", "baas.identification.enterprise.twometa.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 完成1.三要素认证；2创建did；3.颁发声明（声明该DID已经完成三要素认证）
         * Summary: 三要素认证与did创建接口
         */
        public StartMydidDidThreeelementResponse StartMydidDidThreeelement(StartMydidDidThreeelementRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return StartMydidDidThreeelementEx(request, headers, runtime);
        }

        /**
         * Description: 完成1.三要素认证；2创建did；3.颁发声明（声明该DID已经完成三要素认证）
         * Summary: 三要素认证与did创建接口
         */
        public async Task<StartMydidDidThreeelementResponse> StartMydidDidThreeelementAsync(StartMydidDidThreeelementRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await StartMydidDidThreeelementExAsync(request, headers, runtime);
        }

        /**
         * Description: 完成1.三要素认证；2创建did；3.颁发声明（声明该DID已经完成三要素认证）
         * Summary: 三要素认证与did创建接口
         */
        public StartMydidDidThreeelementResponse StartMydidDidThreeelementEx(StartMydidDidThreeelementRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidDidThreeelementResponse>(DoRequest("1.0", "baas.mydid.did.threeelement.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 完成1.三要素认证；2创建did；3.颁发声明（声明该DID已经完成三要素认证）
         * Summary: 三要素认证与did创建接口
         */
        public async Task<StartMydidDidThreeelementResponse> StartMydidDidThreeelementExAsync(StartMydidDidThreeelementRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<StartMydidDidThreeelementResponse>(await DoRequestAsync("1.0", "baas.mydid.did.threeelement.start", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询用户可用的公钥列表
         * Summary: 查询用户可用的公钥列表
         */
        public ListWaasDidValidpublickeysResponse ListWaasDidValidpublickeys(ListWaasDidValidpublickeysRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return ListWaasDidValidpublickeysEx(request, headers, runtime);
        }

        /**
         * Description: 查询用户可用的公钥列表
         * Summary: 查询用户可用的公钥列表
         */
        public async Task<ListWaasDidValidpublickeysResponse> ListWaasDidValidpublickeysAsync(ListWaasDidValidpublickeysRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await ListWaasDidValidpublickeysExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询用户可用的公钥列表
         * Summary: 查询用户可用的公钥列表
         */
        public ListWaasDidValidpublickeysResponse ListWaasDidValidpublickeysEx(ListWaasDidValidpublickeysRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListWaasDidValidpublickeysResponse>(DoRequest("1.0", "baas.waas.did.validpublickeys.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询用户可用的公钥列表
         * Summary: 查询用户可用的公钥列表
         */
        public async Task<ListWaasDidValidpublickeysResponse> ListWaasDidValidpublickeysExAsync(ListWaasDidValidpublickeysRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<ListWaasDidValidpublickeysResponse>(await DoRequestAsync("1.0", "baas.waas.did.validpublickeys.list", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询指定公钥信息
         * Summary: 查询指定公钥信息
         */
        public QueryWaasDidPublickeyResponse QueryWaasDidPublickey(QueryWaasDidPublickeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryWaasDidPublickeyEx(request, headers, runtime);
        }

        /**
         * Description: 查询指定公钥信息
         * Summary: 查询指定公钥信息
         */
        public async Task<QueryWaasDidPublickeyResponse> QueryWaasDidPublickeyAsync(QueryWaasDidPublickeyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryWaasDidPublickeyExAsync(request, headers, runtime);
        }

        /**
         * Description: 查询指定公钥信息
         * Summary: 查询指定公钥信息
         */
        public QueryWaasDidPublickeyResponse QueryWaasDidPublickeyEx(QueryWaasDidPublickeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryWaasDidPublickeyResponse>(DoRequest("1.0", "baas.waas.did.publickey.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 查询指定公钥信息
         * Summary: 查询指定公钥信息
         */
        public async Task<QueryWaasDidPublickeyResponse> QueryWaasDidPublickeyExAsync(QueryWaasDidPublickeyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryWaasDidPublickeyResponse>(await DoRequestAsync("1.0", "baas.waas.did.publickey.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 业务注册waas服务
         * Summary: 业务注册waas服务
         */
        public RegisterWaasBusinessResponse RegisterWaasBusiness(RegisterWaasBusinessRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return RegisterWaasBusinessEx(request, headers, runtime);
        }

        /**
         * Description: 业务注册waas服务
         * Summary: 业务注册waas服务
         */
        public async Task<RegisterWaasBusinessResponse> RegisterWaasBusinessAsync(RegisterWaasBusinessRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await RegisterWaasBusinessExAsync(request, headers, runtime);
        }

        /**
         * Description: 业务注册waas服务
         * Summary: 业务注册waas服务
         */
        public RegisterWaasBusinessResponse RegisterWaasBusinessEx(RegisterWaasBusinessRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<RegisterWaasBusinessResponse>(DoRequest("1.0", "baas.waas.business.register", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 业务注册waas服务
         * Summary: 业务注册waas服务
         */
        public async Task<RegisterWaasBusinessResponse> RegisterWaasBusinessExAsync(RegisterWaasBusinessRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<RegisterWaasBusinessResponse>(await DoRequestAsync("1.0", "baas.waas.business.register", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 为业务合作方提供查询转账时上链信息，里面包含dcep合约传参
         * Summary: 查询转账上链信息
         */
        public QueryWaasBusinessTransferbodyResponse QueryWaasBusinessTransferbody(QueryWaasBusinessTransferbodyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return QueryWaasBusinessTransferbodyEx(request, headers, runtime);
        }

        /**
         * Description: 为业务合作方提供查询转账时上链信息，里面包含dcep合约传参
         * Summary: 查询转账上链信息
         */
        public async Task<QueryWaasBusinessTransferbodyResponse> QueryWaasBusinessTransferbodyAsync(QueryWaasBusinessTransferbodyRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await QueryWaasBusinessTransferbodyExAsync(request, headers, runtime);
        }

        /**
         * Description: 为业务合作方提供查询转账时上链信息，里面包含dcep合约传参
         * Summary: 查询转账上链信息
         */
        public QueryWaasBusinessTransferbodyResponse QueryWaasBusinessTransferbodyEx(QueryWaasBusinessTransferbodyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryWaasBusinessTransferbodyResponse>(DoRequest("1.0", "baas.waas.business.transferbody.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 为业务合作方提供查询转账时上链信息，里面包含dcep合约传参
         * Summary: 查询转账上链信息
         */
        public async Task<QueryWaasBusinessTransferbodyResponse> QueryWaasBusinessTransferbodyExAsync(QueryWaasBusinessTransferbodyRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<QueryWaasBusinessTransferbodyResponse>(await DoRequestAsync("1.0", "baas.waas.business.transferbody.query", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 业务合作方通知订单上链情况
         * Summary: 业务合作方通知订单上链情况
         */
        public NotifyWaasBusinessOrderResponse NotifyWaasBusinessOrder(NotifyWaasBusinessOrderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return NotifyWaasBusinessOrderEx(request, headers, runtime);
        }

        /**
         * Description: 业务合作方通知订单上链情况
         * Summary: 业务合作方通知订单上链情况
         */
        public async Task<NotifyWaasBusinessOrderResponse> NotifyWaasBusinessOrderAsync(NotifyWaasBusinessOrderRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await NotifyWaasBusinessOrderExAsync(request, headers, runtime);
        }

        /**
         * Description: 业务合作方通知订单上链情况
         * Summary: 业务合作方通知订单上链情况
         */
        public NotifyWaasBusinessOrderResponse NotifyWaasBusinessOrderEx(NotifyWaasBusinessOrderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<NotifyWaasBusinessOrderResponse>(DoRequest("1.0", "baas.waas.business.order.notify", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 业务合作方通知订单上链情况
         * Summary: 业务合作方通知订单上链情况
         */
        public async Task<NotifyWaasBusinessOrderResponse> NotifyWaasBusinessOrderExAsync(NotifyWaasBusinessOrderRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<NotifyWaasBusinessOrderResponse>(await DoRequestAsync("1.0", "baas.waas.business.order.notify", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建HTTP PUT提交的文件上传
         * Summary: 文件上传创建
         */
        public CreateAntcloudGatewayxFileUploadResponse CreateAntcloudGatewayxFileUpload(CreateAntcloudGatewayxFileUploadRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return CreateAntcloudGatewayxFileUploadEx(request, headers, runtime);
        }

        /**
         * Description: 创建HTTP PUT提交的文件上传
         * Summary: 文件上传创建
         */
        public async Task<CreateAntcloudGatewayxFileUploadResponse> CreateAntcloudGatewayxFileUploadAsync(CreateAntcloudGatewayxFileUploadRequest request)
        {
            AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
            Dictionary<string, string> headers = new Dictionary<string, string>(){};
            return await CreateAntcloudGatewayxFileUploadExAsync(request, headers, runtime);
        }

        /**
         * Description: 创建HTTP PUT提交的文件上传
         * Summary: 文件上传创建
         */
        public CreateAntcloudGatewayxFileUploadResponse CreateAntcloudGatewayxFileUploadEx(CreateAntcloudGatewayxFileUploadRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateAntcloudGatewayxFileUploadResponse>(DoRequest("1.0", "antcloud.gatewayx.file.upload.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

        /**
         * Description: 创建HTTP PUT提交的文件上传
         * Summary: 文件上传创建
         */
        public async Task<CreateAntcloudGatewayxFileUploadResponse> CreateAntcloudGatewayxFileUploadExAsync(CreateAntcloudGatewayxFileUploadRequest request, Dictionary<string, string> headers, AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime)
        {
            AlibabaCloud.TeaUtil.Common.ValidateModel(request);
            return TeaModel.ToObject<CreateAntcloudGatewayxFileUploadResponse>(await DoRequestAsync("1.0", "antcloud.gatewayx.file.upload.create", "HTTPS", "POST", "/gateway.do", request.ToMap(), headers, runtime));
        }

    }
}
