import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.4',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 任务统计
model TaskCount {
  // 总数量
  totalCount: long(name='total_count', example='1'),
  // 成功数量
  successCount: long(name='success_count', example='1'),
  // 处理中的数量
  processingCount: long(name='processing_count', example='1'),
  // 失败数量
  failureCount: long(name='failure_count', example='1'),
}

// 事件租户
model EventTenant {
  // 智科租户2088 ID，tenant_id/tenant_name二选一
  tenantId?: string(name='tenant_id', example='20880000000000'),
  // 租户8位字母，tenant_id/tenant_name二选一
  tenantName?: string(name='tenant_name', example='ORGXYZCN'),
}

// 事件资源
model EventResource {
  // 资源类型
  type: string(name='type', example='INSTANCE_ID'),
  // 实例ID
  value: string(name='value', example='ACSJKLHERJHKHSDS'),
}

// 键值对
model KeyValuePair {
  // 键
  key: string(name='key', example='key'),
  // 值
  value: string(name='value', example='value'),
}

// 事件接收人
model EventReceiver {
  // 接收人的有效联系方式
  receiver: string(name='receiver', example='19999999999'),
  // 接收人联系方式的类型
  receiverType: string(name='receiver_type', example='PHONE_NUMBER'),
  // 消息发送类型
  msgType: string(name='msg_type', example='SMS'),
}

model ImportEventMetadataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 元数据文本
  content: string(name='content'),
}

model ImportEventMetadataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 事件元数据导入
 * Summary: 事件元数据导入
 */
async function importEventMetadata(request: ImportEventMetadataRequest): ImportEventMetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importEventMetadataEx(request, headers, runtime);
}

/**
 * Description: 事件元数据导入
 * Summary: 事件元数据导入
 */
async function importEventMetadataEx(request: ImportEventMetadataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportEventMetadataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.notification.event.metadata.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExportEventMetadataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 事件码
  eventCode: string(name='event_code'),
}

model ExportEventMetadataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 事件码元数据
  content?: string(name='content'),
}

/**
 * Description: 事件元数据导出
 * Summary: 事件元数据导出
 */
async function exportEventMetadata(request: ExportEventMetadataRequest): ExportEventMetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return exportEventMetadataEx(request, headers, runtime);
}

/**
 * Description: 事件元数据导出
 * Summary: 事件元数据导出
 */
async function exportEventMetadataEx(request: ExportEventMetadataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExportEventMetadataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.notification.event.metadata.export', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendEventAsyncRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 事件码
  eventCode: string(name='event_code'),
  // 事件上下文，用于填充消息模板里的参数
  eventParams?: [ KeyValuePair ](name='event_params'),
  // 消息接收人，对应自定义人群
  eventReceivers?: [ EventReceiver ](name='event_receivers'),
  // 租户信息，对应智科用户群组
  eventTenant?: EventTenant(name='event_tenant'),
  // 事件资源，据此查询相关的内部小二群组
  eventResources?: [ EventResource ](name='event_resources'),
  // 发送方，用于查询结果，可以是系统名、产品码、员工工号等等
  sender: string(name='sender'),
  // 描述sender
  senderName?: string(name='sender_name'),
}

model SendEventAsyncResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 事件ID
  taskId?: string(name='task_id'),
}

/**
 * Description: 发送事件(异步执行)
 * Summary: 发送事件(异步执行)
 */
async function sendEventAsync(request: SendEventAsyncRequest): SendEventAsyncResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendEventAsyncEx(request, headers, runtime);
}

/**
 * Description: 发送事件(异步执行)
 * Summary: 发送事件(异步执行)
 */
async function sendEventAsyncEx(request: SendEventAsyncRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendEventAsyncResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.notification.event.async.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendEventDirectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 事件码
  eventCode: string(name='event_code'),
  // 事件参数
  eventParams?: [ KeyValuePair ](name='event_params'),
  // 接收者
  eventReceiver: EventReceiver(name='event_receiver'),
  // 发送方，用于查询结果，可以是系统名、产品码、员工工号等等
  sender: string(name='sender'),
  // 用于描述sender
  senderName?: string(name='sender_name'),
}

model SendEventDirectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 事件ID
  taskId?: string(name='task_id'),
}

/**
 * Description: 直发事件(同步调用)
 * Summary: 直发事件(同步调用)
 */
async function sendEventDirect(request: SendEventDirectRequest): SendEventDirectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendEventDirectEx(request, headers, runtime);
}

/**
 * Description: 直发事件(同步调用)
 * Summary: 直发事件(同步调用)
 */
async function sendEventDirectEx(request: SendEventDirectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendEventDirectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.notification.event.direct.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CountTaskMessageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 24位任务id
  taskId: string(name='task_id'),
}

model CountTaskMessageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 事件码
  eventCode?: string(name='event_code'),
  // 任务状态
  taskState?: string(name='task_state'),
  // 消息发送统计
  messageCount?: TaskCount(name='message_count'),
}

/**
 * Description: 获取事件发送结果
 * Summary: 获取事件发送结果
 */
async function countTaskMessage(request: CountTaskMessageRequest): CountTaskMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return countTaskMessageEx(request, headers, runtime);
}

/**
 * Description: 获取事件发送结果
 * Summary: 获取事件发送结果
 */
async function countTaskMessageEx(request: CountTaskMessageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CountTaskMessageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.notification.task.message.count', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

