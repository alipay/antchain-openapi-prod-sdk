import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.0',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 上传者信息
model UploaderInfo {
  // 上传者证书hash
  certHash: string(name='cert_hash', example='1654570807000'),
  // 上传者身份证明
  uploader: string(name='uploader', example='123'),
  // 上传时间
  uploadTime: long(name='upload_time', example='1654570807000'),
  // 经度
  longitude?: string(name='longitude', example='123'),
  // 纬度
  latitude?: string(name='latitude', example='123'),
}

// 环节项
model PhaseItem {
  // 标题
  title: string(name='title', example='123'),
  // 类型
  // TEXT: 文本，
  // IMAGE： 图片,
  // VIDEO:  视频,
  // LONGTEXT: 长文本,
  // MAP: 地图,
  // BANNER: 广告位,
  // PDF: pdf文件,
  // CERTIFICATE: 认证信息
  // NESTED： 嵌套类型
  // CUSTOMIZE： 自定义类型
  type: string(name='type', example='TEXT'),
  // 值
  value: string(name='value', example='1654570807000'),
  // 扩展信息
  extInfo: string(name='ext_info', example='{"hello": "666"}'),
}

// 区块信息
model BlockInfo {
  // 块高度
  blockHeight: long(name='block_height', example='123'),
  // 成块时间戳
  timestamp: long(name='timestamp', example='1654570807000'),
  // 交易摘要
  txHash: string(name='tx_hash', example='2ba028918edd6566fd0674dd33fc5e53b72c8e33439562e1598d1bdab341b0f1'),
}

// 用户扫码信息
model ScanUserInfo {
  // 用户昵称
  nick: string(name='nick', example='123'),
  // 用户ID
  userId: string(name='user_id', example='1654570807000'),
  // 经度
  longitude: long(name='longitude', example='123'),
  // 纬度
  latitude: long(name='latitude', example='123'),
  // 用户来源
  srcType: string(name='src_type', example='alipay'),
  // 扫码时间
  scanTime?: long(name='scan_time', example='1654570807000'),
}

// 首次扫描信息
model ScanHeadInfo {
  // 扫描时间
  scanTime: long(name='scan_time', example='1654570807000'),
  // 扫码次数
  scanCount: long(name='scan_count', example='123'),
  // 扫码地址
  scanAddr: string(name='scan_addr', example='1654570807000'),
}

// 环节信息
model PhaseInfo {
  // 环节名称
  name: string(name='name', example='商品信息'),
  // 环节项
  items: [ PhaseItem ](name='items', example=''),
  // 上传者信息
  uploadInfo: UploaderInfo(name='upload_info', example=''),
  // 区块信息
  blockInfo: BlockInfo(name='block_info', example=''),
}

model QueryAntchainMytcMiniCertRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 溯源码信息
  code: string(maxLength=160, name='code'),
  // 交易哈希
  txHash: string(maxLength=64, name='tx_hash'),
}

model QueryAntchainMytcMiniCertResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 区块信息
  blockInfo?: BlockInfo(name='block_info'),
  // 上传者信息
  uploadInfo?: UploaderInfo(name='upload_info'),
}

/**
 * Description: 溯源证书查询
 * Summary: 溯源证书查询
 */
async function queryAntchainMytcMiniCert(request: QueryAntchainMytcMiniCertRequest): QueryAntchainMytcMiniCertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAntchainMytcMiniCertEx(request, headers, runtime);
}

/**
 * Description: 溯源证书查询
 * Summary: 溯源证书查询
 */
async function queryAntchainMytcMiniCertEx(request: QueryAntchainMytcMiniCertRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAntchainMytcMiniCertResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mytc.mini.cert.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAntchainMytcMiniCodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 溯源码
  code: string(maxLength=160, name='code'),
  // 用户信息
  userInfo?: ScanUserInfo(name='user_info'),
}

model QueryAntchainMytcMiniCodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 首次扫描信息
  scanInfo?: ScanHeadInfo(name='scan_info'),
  // 溯源环节信息列表
  phaseInfos?: [ PhaseInfo ](name='phase_infos'),
}

/**
 * Description: 溯源码详情查询
 * Summary: 溯源码详情查询
 */
async function queryAntchainMytcMiniCode(request: QueryAntchainMytcMiniCodeRequest): QueryAntchainMytcMiniCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAntchainMytcMiniCodeEx(request, headers, runtime);
}

/**
 * Description: 溯源码详情查询
 * Summary: 溯源码详情查询
 */
async function queryAntchainMytcMiniCodeEx(request: QueryAntchainMytcMiniCodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAntchainMytcMiniCodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mytc.mini.code.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyAntchainMytcMiniNfcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 动态秘钥字符串信息
  code: string(maxLength=160, name='code'),
  // NFC UID
  uid?: string(name='uid'),
}

model VerifyAntchainMytcMiniNfcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 校验结果
  status?: string(name='status'),
  // 校验信息
  message?: string(name='message'),
  // 校验解析溯源码
  code?: string(name='code'),
  // NFC UID
  uid?: string(name='uid'),
}

/**
 * Description: 动态秘钥NFC二维码校验
 * Summary: 动态秘钥NFC二维码校验
 */
async function verifyAntchainMytcMiniNfc(request: VerifyAntchainMytcMiniNfcRequest): VerifyAntchainMytcMiniNfcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyAntchainMytcMiniNfcEx(request, headers, runtime);
}

/**
 * Description: 动态秘钥NFC二维码校验
 * Summary: 动态秘钥NFC二维码校验
 */
async function verifyAntchainMytcMiniNfcEx(request: VerifyAntchainMytcMiniNfcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyAntchainMytcMiniNfcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mytc.mini.nfc.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

