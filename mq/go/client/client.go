// This file is auto-generated, don't edit it. Thanks.
package client

import (
	rpcutil "github.com/alibabacloud-go/tea-rpc-utils/service"
	util "github.com/alibabacloud-go/tea-utils/service"
	"github.com/alibabacloud-go/tea/tea"
	antchainutil "github.com/antchain-openapi-sdk-go/antchain-util/service"
)

/**
 * Model for initing client
 */
type Config struct {
	// accesskey id
	AccessKeyId *string `json:"accessKeyId,omitempty" xml:"accessKeyId,omitempty"`
	// accesskey secret
	AccessKeySecret *string `json:"accessKeySecret,omitempty" xml:"accessKeySecret,omitempty"`
	// security token
	SecurityToken *string `json:"securityToken,omitempty" xml:"securityToken,omitempty"`
	// http protocol
	Protocol *string `json:"protocol,omitempty" xml:"protocol,omitempty"`
	// read timeout
	ReadTimeout *int `json:"readTimeout,omitempty" xml:"readTimeout,omitempty"`
	// connect timeout
	ConnectTimeout *int `json:"connectTimeout,omitempty" xml:"connectTimeout,omitempty"`
	// http proxy
	HttpProxy *string `json:"httpProxy,omitempty" xml:"httpProxy,omitempty"`
	// https proxy
	HttpsProxy *string `json:"httpsProxy,omitempty" xml:"httpsProxy,omitempty"`
	// endpoint
	Endpoint *string `json:"endpoint,omitempty" xml:"endpoint,omitempty"`
	// proxy white list
	NoProxy *string `json:"noProxy,omitempty" xml:"noProxy,omitempty"`
	// max idle conns
	MaxIdleConns *int `json:"maxIdleConns,omitempty" xml:"maxIdleConns,omitempty"`
	// user agent
	UserAgent *string `json:"userAgent,omitempty" xml:"userAgent,omitempty"`
	// socks5 proxy
	Socks5Proxy *string `json:"socks5Proxy,omitempty" xml:"socks5Proxy,omitempty"`
	// socks5 network
	Socks5NetWork *string `json:"socks5NetWork,omitempty" xml:"socks5NetWork,omitempty"`
	// 长链接最大空闲时长
	MaxIdleTimeMillis *int `json:"maxIdleTimeMillis,omitempty" xml:"maxIdleTimeMillis,omitempty"`
	// 长链接最大连接时长
	KeepAliveDurationMillis *int `json:"keepAliveDurationMillis,omitempty" xml:"keepAliveDurationMillis,omitempty"`
	// 最大连接数（长链接最大总数）
	MaxRequests *int `json:"maxRequests,omitempty" xml:"maxRequests,omitempty"`
	// 每个目标主机的最大连接数（分主机域名的长链接最大总数
	MaxRequestsPerHost *int `json:"maxRequestsPerHost,omitempty" xml:"maxRequestsPerHost,omitempty"`
}

func (s Config) String() string {
	return tea.Prettify(s)
}

func (s Config) GoString() string {
	return s.String()
}

func (s *Config) SetAccessKeyId(v string) *Config {
	s.AccessKeyId = &v
	return s
}

func (s *Config) SetAccessKeySecret(v string) *Config {
	s.AccessKeySecret = &v
	return s
}

func (s *Config) SetSecurityToken(v string) *Config {
	s.SecurityToken = &v
	return s
}

func (s *Config) SetProtocol(v string) *Config {
	s.Protocol = &v
	return s
}

func (s *Config) SetReadTimeout(v int) *Config {
	s.ReadTimeout = &v
	return s
}

func (s *Config) SetConnectTimeout(v int) *Config {
	s.ConnectTimeout = &v
	return s
}

func (s *Config) SetHttpProxy(v string) *Config {
	s.HttpProxy = &v
	return s
}

func (s *Config) SetHttpsProxy(v string) *Config {
	s.HttpsProxy = &v
	return s
}

func (s *Config) SetEndpoint(v string) *Config {
	s.Endpoint = &v
	return s
}

func (s *Config) SetNoProxy(v string) *Config {
	s.NoProxy = &v
	return s
}

func (s *Config) SetMaxIdleConns(v int) *Config {
	s.MaxIdleConns = &v
	return s
}

func (s *Config) SetUserAgent(v string) *Config {
	s.UserAgent = &v
	return s
}

func (s *Config) SetSocks5Proxy(v string) *Config {
	s.Socks5Proxy = &v
	return s
}

func (s *Config) SetSocks5NetWork(v string) *Config {
	s.Socks5NetWork = &v
	return s
}

func (s *Config) SetMaxIdleTimeMillis(v int) *Config {
	s.MaxIdleTimeMillis = &v
	return s
}

func (s *Config) SetKeepAliveDurationMillis(v int) *Config {
	s.KeepAliveDurationMillis = &v
	return s
}

func (s *Config) SetMaxRequests(v int) *Config {
	s.MaxRequests = &v
	return s
}

func (s *Config) SetMaxRequestsPerHost(v int) *Config {
	s.MaxRequestsPerHost = &v
	return s
}

// schema元数据对象
type SchemaMetadataDO struct {
	// app名称
	App *string `json:"app,omitempty" xml:"app,omitempty" require:"true"`
	// 兼容性
	Compatibility *string `json:"compatibility,omitempty" xml:"compatibility,omitempty" require:"true"`
	// 坐标依赖
	Coordinate *string `json:"coordinate,omitempty" xml:"coordinate,omitempty" require:"true"`
	// 描述
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 状态
	State *string `json:"state,omitempty" xml:"state,omitempty" require:"true"`
	// 同步站点
	SyncSites *string `json:"sync_sites,omitempty" xml:"sync_sites,omitempty" require:"true"`
	// 租户
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty" require:"true"`
	// 创建时间
	GmtCreate *int64 `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 修改时间
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
	// Schema指定的序列化方式
	Serialization *string `json:"serialization,omitempty" xml:"serialization,omitempty" require:"true"`
}

func (s SchemaMetadataDO) String() string {
	return tea.Prettify(s)
}

func (s SchemaMetadataDO) GoString() string {
	return s.String()
}

func (s *SchemaMetadataDO) SetApp(v string) *SchemaMetadataDO {
	s.App = &v
	return s
}

func (s *SchemaMetadataDO) SetCompatibility(v string) *SchemaMetadataDO {
	s.Compatibility = &v
	return s
}

func (s *SchemaMetadataDO) SetCoordinate(v string) *SchemaMetadataDO {
	s.Coordinate = &v
	return s
}

func (s *SchemaMetadataDO) SetDescription(v string) *SchemaMetadataDO {
	s.Description = &v
	return s
}

func (s *SchemaMetadataDO) SetName(v string) *SchemaMetadataDO {
	s.Name = &v
	return s
}

func (s *SchemaMetadataDO) SetNamespace(v string) *SchemaMetadataDO {
	s.Namespace = &v
	return s
}

func (s *SchemaMetadataDO) SetOperator(v string) *SchemaMetadataDO {
	s.Operator = &v
	return s
}

func (s *SchemaMetadataDO) SetState(v string) *SchemaMetadataDO {
	s.State = &v
	return s
}

func (s *SchemaMetadataDO) SetSyncSites(v string) *SchemaMetadataDO {
	s.SyncSites = &v
	return s
}

func (s *SchemaMetadataDO) SetTenant(v string) *SchemaMetadataDO {
	s.Tenant = &v
	return s
}

func (s *SchemaMetadataDO) SetGmtCreate(v int64) *SchemaMetadataDO {
	s.GmtCreate = &v
	return s
}

func (s *SchemaMetadataDO) SetGmtModified(v int64) *SchemaMetadataDO {
	s.GmtModified = &v
	return s
}

func (s *SchemaMetadataDO) SetSerialization(v string) *SchemaMetadataDO {
	s.Serialization = &v
	return s
}

// 切换动作
type SwitchoverAction struct {
	// 目标单元
	DestCell *string `json:"dest_cell,omitempty" xml:"dest_cell,omitempty"`
	// 来源单元
	SourceCell *string `json:"source_cell,omitempty" xml:"source_cell,omitempty"`
}

func (s SwitchoverAction) String() string {
	return tea.Prettify(s)
}

func (s SwitchoverAction) GoString() string {
	return s.String()
}

func (s *SwitchoverAction) SetDestCell(v string) *SwitchoverAction {
	s.DestCell = &v
	return s
}

func (s *SwitchoverAction) SetSourceCell(v string) *SwitchoverAction {
	s.SourceCell = &v
	return s
}

// SofaMQ 资源标签
type ResourceLabelsDTO struct {
	// 实例 ID（命名空间）
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 资源类型：TOPIC、GROUP
	ResourceType *string `json:"resource_type,omitempty" xml:"resource_type,omitempty" require:"true"`
	// 资源名字
	ResourceName *string `json:"resource_name,omitempty" xml:"resource_name,omitempty" require:"true"`
	// 标签
	Labels []*string `json:"labels,omitempty" xml:"labels,omitempty" require:"true" type:"Repeated"`
}

func (s ResourceLabelsDTO) String() string {
	return tea.Prettify(s)
}

func (s ResourceLabelsDTO) GoString() string {
	return s.String()
}

func (s *ResourceLabelsDTO) SetInstanceId(v string) *ResourceLabelsDTO {
	s.InstanceId = &v
	return s
}

func (s *ResourceLabelsDTO) SetResourceType(v string) *ResourceLabelsDTO {
	s.ResourceType = &v
	return s
}

func (s *ResourceLabelsDTO) SetResourceName(v string) *ResourceLabelsDTO {
	s.ResourceName = &v
	return s
}

func (s *ResourceLabelsDTO) SetLabels(v []*string) *ResourceLabelsDTO {
	s.Labels = v
	return s
}

// metedata分页对象
type SchemaMetadataPageDO struct {
	// Metadata列表内容
	Content []*SchemaMetadataDO `json:"content,omitempty" xml:"content,omitempty" require:"true" type:"Repeated"`
	// 页号
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 总个数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty" require:"true"`
}

func (s SchemaMetadataPageDO) String() string {
	return tea.Prettify(s)
}

func (s SchemaMetadataPageDO) GoString() string {
	return s.String()
}

func (s *SchemaMetadataPageDO) SetContent(v []*SchemaMetadataDO) *SchemaMetadataPageDO {
	s.Content = v
	return s
}

func (s *SchemaMetadataPageDO) SetPageNum(v int64) *SchemaMetadataPageDO {
	s.PageNum = &v
	return s
}

func (s *SchemaMetadataPageDO) SetPageSize(v int64) *SchemaMetadataPageDO {
	s.PageSize = &v
	return s
}

func (s *SchemaMetadataPageDO) SetTotal(v int64) *SchemaMetadataPageDO {
	s.Total = &v
	return s
}

// 客户端消费记录的明细列表
type SubClientInfoDTO struct {
	// 消费客户端的客户端地址
	ClientHost *string `json:"client_host,omitempty" xml:"client_host,omitempty" require:"true"`
	// 本次消费耗时，单位毫秒
	CostTime *int64 `json:"cost_time,omitempty" xml:"cost_time,omitempty" require:"true"`
	// 本次消费的投递轮次
	ReconsumeTimes *int64 `json:"reconsume_times,omitempty" xml:"reconsume_times,omitempty" require:"true"`
	// 消费状态。取值说明如下：
	//
	// CONSUME_FAILED：消费失败
	// CONSUME_SUCCESS：消费成功
	// CONSUME_NOT_RETURN：消费未返回结果
	// SEND_UNKNOWN：事务消息未提交
	// SEND_DELAY：定时(延时)消息定时中
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 该客户端所属的 Group ID
	SubGroupName *string `json:"sub_group_name,omitempty" xml:"sub_group_name,omitempty" require:"true"`
	// 消费开始时间戳
	SubTime *int64 `json:"sub_time,omitempty" xml:"sub_time,omitempty" require:"true"`
}

func (s SubClientInfoDTO) String() string {
	return tea.Prettify(s)
}

func (s SubClientInfoDTO) GoString() string {
	return s.String()
}

func (s *SubClientInfoDTO) SetClientHost(v string) *SubClientInfoDTO {
	s.ClientHost = &v
	return s
}

func (s *SubClientInfoDTO) SetCostTime(v int64) *SubClientInfoDTO {
	s.CostTime = &v
	return s
}

func (s *SubClientInfoDTO) SetReconsumeTimes(v int64) *SubClientInfoDTO {
	s.ReconsumeTimes = &v
	return s
}

func (s *SubClientInfoDTO) SetStatus(v string) *SubClientInfoDTO {
	s.Status = &v
	return s
}

func (s *SubClientInfoDTO) SetSubGroupName(v string) *SubClientInfoDTO {
	s.SubGroupName = &v
	return s
}

func (s *SubClientInfoDTO) SetSubTime(v int64) *SubClientInfoDTO {
	s.SubTime = &v
	return s
}

// UIComponent的内容
type ComponentContent struct {
	// 文本内容
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
	// 超链接
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
	// 是否粗体
	Bold *bool `json:"bold,omitempty" xml:"bold,omitempty" require:"true"`
}

func (s ComponentContent) String() string {
	return tea.Prettify(s)
}

func (s ComponentContent) GoString() string {
	return s.String()
}

func (s *ComponentContent) SetContent(v string) *ComponentContent {
	s.Content = &v
	return s
}

func (s *ComponentContent) SetUrl(v string) *ComponentContent {
	s.Url = &v
	return s
}

func (s *ComponentContent) SetBold(v bool) *ComponentContent {
	s.Bold = &v
	return s
}

// 列值详情
type ColumnValue struct {
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s ColumnValue) String() string {
	return tea.Prettify(s)
}

func (s ColumnValue) GoString() string {
	return s.String()
}

func (s *ColumnValue) SetName(v string) *ColumnValue {
	s.Name = &v
	return s
}

func (s *ColumnValue) SetValue(v string) *ColumnValue {
	s.Value = &v
	return s
}

// 前端控件中的选择框中每个选项，参见 UIControlModel
type UIOptionModel struct {
	// 选项展示的中文描述
	Display *string `json:"display,omitempty" xml:"display,omitempty" require:"true"`
	// 选项的枚举值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s UIOptionModel) String() string {
	return tea.Prettify(s)
}

func (s UIOptionModel) GoString() string {
	return s.String()
}

func (s *UIOptionModel) SetDisplay(v string) *UIOptionModel {
	s.Display = &v
	return s
}

func (s *UIOptionModel) SetValue(v string) *UIOptionModel {
	s.Value = &v
	return s
}

// Jstack 堆栈信息
type ThreadTrackDTO struct {
	// 线程名称
	Thread *string `json:"thread,omitempty" xml:"thread,omitempty" require:"true"`
	// Jstack 堆栈信息字符串
	TrackList []*string `json:"track_list,omitempty" xml:"track_list,omitempty" require:"true" type:"Repeated"`
}

func (s ThreadTrackDTO) String() string {
	return tea.Prettify(s)
}

func (s ThreadTrackDTO) GoString() string {
	return s.String()
}

func (s *ThreadTrackDTO) SetThread(v string) *ThreadTrackDTO {
	s.Thread = &v
	return s
}

func (s *ThreadTrackDTO) SetTrackList(v []*string) *ThreadTrackDTO {
	s.TrackList = v
	return s
}

// 订阅关系集合
type SubscriptionDTO struct {
	// 订阅该 Topic 的子类别 Tag 表达式
	SubString *string `json:"sub_string,omitempty" xml:"sub_string,omitempty" require:"true"`
	//  订阅关系版本号，为自增 Long 型
	SubVersion *int64 `json:"sub_version,omitempty" xml:"sub_version,omitempty" require:"true"`
	// 订阅的 Tag 集合
	TagsSet []*string `json:"tags_set,omitempty" xml:"tags_set,omitempty" require:"true" type:"Repeated"`
	// 订阅的 Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s SubscriptionDTO) String() string {
	return tea.Prettify(s)
}

func (s SubscriptionDTO) GoString() string {
	return s.String()
}

func (s *SubscriptionDTO) SetSubString(v string) *SubscriptionDTO {
	s.SubString = &v
	return s
}

func (s *SubscriptionDTO) SetSubVersion(v int64) *SubscriptionDTO {
	s.SubVersion = &v
	return s
}

func (s *SubscriptionDTO) SetTagsSet(v []*string) *SubscriptionDTO {
	s.TagsSet = v
	return s
}

func (s *SubscriptionDTO) SetTopic(v string) *SubscriptionDTO {
	s.Topic = &v
	return s
}

// 列表元素
type ItemComponent struct {
	// 内容
	Contents []*ComponentContent `json:"contents,omitempty" xml:"contents,omitempty" require:"true" type:"Repeated"`
}

func (s ItemComponent) String() string {
	return tea.Prettify(s)
}

func (s ItemComponent) GoString() string {
	return s.String()
}

func (s *ItemComponent) SetContents(v []*ComponentContent) *ItemComponent {
	s.Contents = v
	return s
}

// 消息属性列表
type MessagePropertyDTO struct {
	// Key 名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s MessagePropertyDTO) String() string {
	return tea.Prettify(s)
}

func (s MessagePropertyDTO) GoString() string {
	return s.String()
}

func (s *MessagePropertyDTO) SetName(v string) *MessagePropertyDTO {
	s.Name = &v
	return s
}

func (s *MessagePropertyDTO) SetValue(v string) *MessagePropertyDTO {
	s.Value = &v
	return s
}

// 实时状态统计
type ConsumerRunningDataDTO struct {
	// 堆积量
	Diff *int64 `json:"diff,omitempty" xml:"diff,omitempty" require:"true"`
	// 每小时内消费失败的消息数统计
	FailedCountPerHour *int64 `json:"failed_count_per_hour,omitempty" xml:"failed_count_per_hour,omitempty" require:"true"`
	// 消费消息失败的 TPS 统计
	FailedTps *string `json:"failed_tps,omitempty" xml:"failed_tps,omitempty" require:"true"`
	// 订阅方的 Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 消费消息成功的 TPS 统计
	OkTps *string `json:"ok_tps,omitempty" xml:"ok_tps,omitempty" require:"true"`
	// 消费 RT 时间，单位 ms
	Rt *string `json:"rt,omitempty" xml:"rt,omitempty" require:"true"`
	// 订阅的 Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s ConsumerRunningDataDTO) String() string {
	return tea.Prettify(s)
}

func (s ConsumerRunningDataDTO) GoString() string {
	return s.String()
}

func (s *ConsumerRunningDataDTO) SetDiff(v int64) *ConsumerRunningDataDTO {
	s.Diff = &v
	return s
}

func (s *ConsumerRunningDataDTO) SetFailedCountPerHour(v int64) *ConsumerRunningDataDTO {
	s.FailedCountPerHour = &v
	return s
}

func (s *ConsumerRunningDataDTO) SetFailedTps(v string) *ConsumerRunningDataDTO {
	s.FailedTps = &v
	return s
}

func (s *ConsumerRunningDataDTO) SetGroupId(v string) *ConsumerRunningDataDTO {
	s.GroupId = &v
	return s
}

func (s *ConsumerRunningDataDTO) SetOkTps(v string) *ConsumerRunningDataDTO {
	s.OkTps = &v
	return s
}

func (s *ConsumerRunningDataDTO) SetRt(v string) *ConsumerRunningDataDTO {
	s.Rt = &v
	return s
}

func (s *ConsumerRunningDataDTO) SetTopic(v string) *ConsumerRunningDataDTO {
	s.Topic = &v
	return s
}

// 消息的消费轨迹列表
type SubMapDTO struct {
	// cell name
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 该 Group ID 客户端消费记录的明细列表
	//
	//
	ClientList []*SubClientInfoDTO `json:"client_list,omitempty" xml:"client_list,omitempty" require:"true" type:"Repeated"`
	// 该 Group ID 消费失败次数统计
	FailCount *int64 `json:"fail_count,omitempty" xml:"fail_count,omitempty" require:"true"`
	// 消费方 Group ID
	SubGroupName *string `json:"sub_group_name,omitempty" xml:"sub_group_name,omitempty" require:"true"`
	// 该 Group ID 消费成功次数统计
	SuccessCount *int64 `json:"success_count,omitempty" xml:"success_count,omitempty" require:"true"`
}

func (s SubMapDTO) String() string {
	return tea.Prettify(s)
}

func (s SubMapDTO) GoString() string {
	return s.String()
}

func (s *SubMapDTO) SetCell(v string) *SubMapDTO {
	s.Cell = &v
	return s
}

func (s *SubMapDTO) SetClientList(v []*SubClientInfoDTO) *SubMapDTO {
	s.ClientList = v
	return s
}

func (s *SubMapDTO) SetFailCount(v int64) *SubMapDTO {
	s.FailCount = &v
	return s
}

func (s *SubMapDTO) SetSubGroupName(v string) *SubMapDTO {
	s.SubGroupName = &v
	return s
}

func (s *SubMapDTO) SetSuccessCount(v int64) *SubMapDTO {
	s.SuccessCount = &v
	return s
}

// instance
type InstanceDTO struct {
	// 集群名
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty" require:"true"`
	// 创建时间
	GmtCreate *int64 `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 修改时间
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
	// 实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 实例状态。取值说明如下： 0、部署中 1、已欠费
	InstanceStatus *int64 `json:"instance_status,omitempty" xml:"instance_status,omitempty" require:"true"`
	// 租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 用户id
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// workspace名
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 数据库id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s InstanceDTO) String() string {
	return tea.Prettify(s)
}

func (s InstanceDTO) GoString() string {
	return s.String()
}

func (s *InstanceDTO) SetCluster(v string) *InstanceDTO {
	s.Cluster = &v
	return s
}

func (s *InstanceDTO) SetGmtCreate(v int64) *InstanceDTO {
	s.GmtCreate = &v
	return s
}

func (s *InstanceDTO) SetGmtModified(v int64) *InstanceDTO {
	s.GmtModified = &v
	return s
}

func (s *InstanceDTO) SetInstanceId(v string) *InstanceDTO {
	s.InstanceId = &v
	return s
}

func (s *InstanceDTO) SetInstanceStatus(v int64) *InstanceDTO {
	s.InstanceStatus = &v
	return s
}

func (s *InstanceDTO) SetTenantId(v string) *InstanceDTO {
	s.TenantId = &v
	return s
}

func (s *InstanceDTO) SetUserId(v string) *InstanceDTO {
	s.UserId = &v
	return s
}

func (s *InstanceDTO) SetWorkspaceName(v string) *InstanceDTO {
	s.WorkspaceName = &v
	return s
}

func (s *InstanceDTO) SetId(v int64) *InstanceDTO {
	s.Id = &v
	return s
}

// SofamqMessageGetByMsgId和SofamqMessageGetByKey接口返回Data信息
type MessageGetDTO struct {
	// 消息体
	Body *string `json:"body,omitempty" xml:"body,omitempty" require:"true"`
	// 消息体 CRC 校验值
	BodyCrc *int64 `json:"body_crc,omitempty" xml:"body_crc,omitempty" require:"true"`
	// 生成该消息的客户端实例
	BornHost *string `json:"born_host,omitempty" xml:"born_host,omitempty" require:"true"`
	//  生成时间戳
	BornTimestamp *int64 `json:"born_timestamp,omitempty" xml:"born_timestamp,omitempty" require:"true"`
	//  实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 消息 ID，即 Message ID
	MsgId *string `json:"msg_id,omitempty" xml:"msg_id,omitempty" require:"true"`
	// 消息属性列表
	PropertyList []*MessagePropertyDTO `json:"property_list,omitempty" xml:"property_list,omitempty" require:"true" type:"Repeated"`
	//  消息重试消费的次数
	ReconsumeTimes *int64 `json:"reconsume_times,omitempty" xml:"reconsume_times,omitempty" require:"true"`
	// 存储该消息的服务器实例
	StoreHost *string `json:"store_host,omitempty" xml:"store_host,omitempty" require:"true"`
	// 消息大小
	StoreSize *int64 `json:"store_size,omitempty" xml:"store_size,omitempty" require:"true"`
	// 被服务端存储的时间戳
	StoreTimestamp *int64 `json:"store_timestamp,omitempty" xml:"store_timestamp,omitempty" require:"true"`
	//  消息的 Topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// 消息的SchemaID
	SchemaId *string `json:"schema_id,omitempty" xml:"schema_id,omitempty" require:"true"`
}

func (s MessageGetDTO) String() string {
	return tea.Prettify(s)
}

func (s MessageGetDTO) GoString() string {
	return s.String()
}

func (s *MessageGetDTO) SetBody(v string) *MessageGetDTO {
	s.Body = &v
	return s
}

func (s *MessageGetDTO) SetBodyCrc(v int64) *MessageGetDTO {
	s.BodyCrc = &v
	return s
}

func (s *MessageGetDTO) SetBornHost(v string) *MessageGetDTO {
	s.BornHost = &v
	return s
}

func (s *MessageGetDTO) SetBornTimestamp(v int64) *MessageGetDTO {
	s.BornTimestamp = &v
	return s
}

func (s *MessageGetDTO) SetInstanceId(v string) *MessageGetDTO {
	s.InstanceId = &v
	return s
}

func (s *MessageGetDTO) SetMsgId(v string) *MessageGetDTO {
	s.MsgId = &v
	return s
}

func (s *MessageGetDTO) SetPropertyList(v []*MessagePropertyDTO) *MessageGetDTO {
	s.PropertyList = v
	return s
}

func (s *MessageGetDTO) SetReconsumeTimes(v int64) *MessageGetDTO {
	s.ReconsumeTimes = &v
	return s
}

func (s *MessageGetDTO) SetStoreHost(v string) *MessageGetDTO {
	s.StoreHost = &v
	return s
}

func (s *MessageGetDTO) SetStoreSize(v int64) *MessageGetDTO {
	s.StoreSize = &v
	return s
}

func (s *MessageGetDTO) SetStoreTimestamp(v int64) *MessageGetDTO {
	s.StoreTimestamp = &v
	return s
}

func (s *MessageGetDTO) SetTopic(v string) *MessageGetDTO {
	s.Topic = &v
	return s
}

func (s *MessageGetDTO) SetSchemaId(v string) *MessageGetDTO {
	s.SchemaId = &v
	return s
}

// 该查询任务的匹配轨迹列表
type TraceMapDTO struct {
	// 消息发送方的客户端地址
	BornHost *string `json:"born_host,omitempty" xml:"born_host,omitempty" require:"true"`
	// 生产端的cell name
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 发送耗时，单位毫秒
	CostTime *int64 `json:"cost_time,omitempty" xml:"cost_time,omitempty" require:"true"`
	// 消息的 ID，即 Message ID
	MsgId *string `json:"msg_id,omitempty" xml:"msg_id,omitempty" require:"true"`
	//  消息的 Key ，即 Message Key
	MsgKey *string `json:"msg_key,omitempty" xml:"msg_key,omitempty" require:"true"`
	// 发送方客户端配置的 Group ID
	PubGroupName *string `json:"pub_group_name,omitempty" xml:"pub_group_name,omitempty" require:"true"`
	// 消息发送时间
	PubTime *int64 `json:"pub_time,omitempty" xml:"pub_time,omitempty" require:"true"`
	// 发送状态。取值说明如下：
	//
	// SEND_SUCCESS：发送成功
	// SEND_FAILED：发送失败
	// SEND_ROLLBACK：事务消息回滚
	// SEND_UNKNOWN：事务消息未提交
	// SEND_DELAY：定时(延时)消息定时中
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 消息的消费轨迹列表
	SubList []*SubMapDTO `json:"sub_list,omitempty" xml:"sub_list,omitempty" require:"true" type:"Repeated"`
	// 消息的 Tag，即 Message Tag
	Tag *string `json:"tag,omitempty" xml:"tag,omitempty" require:"true"`
	// 消息的 Topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s TraceMapDTO) String() string {
	return tea.Prettify(s)
}

func (s TraceMapDTO) GoString() string {
	return s.String()
}

func (s *TraceMapDTO) SetBornHost(v string) *TraceMapDTO {
	s.BornHost = &v
	return s
}

func (s *TraceMapDTO) SetCell(v string) *TraceMapDTO {
	s.Cell = &v
	return s
}

func (s *TraceMapDTO) SetCostTime(v int64) *TraceMapDTO {
	s.CostTime = &v
	return s
}

func (s *TraceMapDTO) SetMsgId(v string) *TraceMapDTO {
	s.MsgId = &v
	return s
}

func (s *TraceMapDTO) SetMsgKey(v string) *TraceMapDTO {
	s.MsgKey = &v
	return s
}

func (s *TraceMapDTO) SetPubGroupName(v string) *TraceMapDTO {
	s.PubGroupName = &v
	return s
}

func (s *TraceMapDTO) SetPubTime(v int64) *TraceMapDTO {
	s.PubTime = &v
	return s
}

func (s *TraceMapDTO) SetStatus(v string) *TraceMapDTO {
	s.Status = &v
	return s
}

func (s *TraceMapDTO) SetSubList(v []*SubMapDTO) *TraceMapDTO {
	s.SubList = v
	return s
}

func (s *TraceMapDTO) SetTag(v string) *TraceMapDTO {
	s.Tag = &v
	return s
}

func (s *TraceMapDTO) SetTopic(v string) *TraceMapDTO {
	s.Topic = &v
	return s
}

// TracePageDTO内每行数据
type TraceDTO struct {
	// 查询的 Cell
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 创建时间
	GmtCreate *int64 `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 修改时间
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 消息查询所用的 Message ID
	MsgId *string `json:"msg_id,omitempty" xml:"msg_id,omitempty"`
	// 消息查询所用的 Message Key
	MsgKey *string `json:"msg_key,omitempty" xml:"msg_key,omitempty"`
	// 查询 ID
	QueryId *string `json:"query_id,omitempty" xml:"query_id,omitempty" require:"true"`
	// 状态
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 查询的 Topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s TraceDTO) String() string {
	return tea.Prettify(s)
}

func (s TraceDTO) GoString() string {
	return s.String()
}

func (s *TraceDTO) SetCell(v string) *TraceDTO {
	s.Cell = &v
	return s
}

func (s *TraceDTO) SetGmtCreate(v int64) *TraceDTO {
	s.GmtCreate = &v
	return s
}

func (s *TraceDTO) SetGmtModified(v int64) *TraceDTO {
	s.GmtModified = &v
	return s
}

func (s *TraceDTO) SetInstanceId(v string) *TraceDTO {
	s.InstanceId = &v
	return s
}

func (s *TraceDTO) SetMsgId(v string) *TraceDTO {
	s.MsgId = &v
	return s
}

func (s *TraceDTO) SetMsgKey(v string) *TraceDTO {
	s.MsgKey = &v
	return s
}

func (s *TraceDTO) SetQueryId(v string) *TraceDTO {
	s.QueryId = &v
	return s
}

func (s *TraceDTO) SetStatus(v string) *TraceDTO {
	s.Status = &v
	return s
}

func (s *TraceDTO) SetTopic(v string) *TraceDTO {
	s.Topic = &v
	return s
}

// connector事件订阅配置
type EventSubConfig struct {
	// 配置是否开启
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty" require:"true"`
	// 事件类型数组
	EventTypes []*string `json:"event_types,omitempty" xml:"event_types,omitempty" require:"true" type:"Repeated"`
	// 事件触发通知类型
	TriggerType *string `json:"trigger_type,omitempty" xml:"trigger_type,omitempty" require:"true"`
	// 钉钉通知的webhook
	Webhook *string `json:"webhook,omitempty" xml:"webhook,omitempty"`
	// http 连接
	HttpUrl *string `json:"http_url,omitempty" xml:"http_url,omitempty"`
	// topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty"`
	// tag
	Tag *string `json:"tag,omitempty" xml:"tag,omitempty"`
}

func (s EventSubConfig) String() string {
	return tea.Prettify(s)
}

func (s EventSubConfig) GoString() string {
	return s.String()
}

func (s *EventSubConfig) SetEnabled(v bool) *EventSubConfig {
	s.Enabled = &v
	return s
}

func (s *EventSubConfig) SetEventTypes(v []*string) *EventSubConfig {
	s.EventTypes = v
	return s
}

func (s *EventSubConfig) SetTriggerType(v string) *EventSubConfig {
	s.TriggerType = &v
	return s
}

func (s *EventSubConfig) SetWebhook(v string) *EventSubConfig {
	s.Webhook = &v
	return s
}

func (s *EventSubConfig) SetHttpUrl(v string) *EventSubConfig {
	s.HttpUrl = &v
	return s
}

func (s *EventSubConfig) SetTopic(v string) *EventSubConfig {
	s.Topic = &v
	return s
}

func (s *EventSubConfig) SetTag(v string) *EventSubConfig {
	s.Tag = &v
	return s
}

// 任务执行记录详情
type TaskRecordDTO struct {
	// 结束时间
	//
	//
	End *string `json:"end,omitempty" xml:"end,omitempty"`
	// 任务分区名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 开始时间
	//
	//
	Start *string `json:"start,omitempty" xml:"start,omitempty" require:"true"`
	// 耗时 s
	//
	//
	Time *string `json:"time,omitempty" xml:"time,omitempty"`
	// 任务进度
	//
	//
	Progress *string `json:"progress,omitempty" xml:"progress,omitempty" require:"true"`
	// 执行成功，执行失败，执行中
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s TaskRecordDTO) String() string {
	return tea.Prettify(s)
}

func (s TaskRecordDTO) GoString() string {
	return s.String()
}

func (s *TaskRecordDTO) SetEnd(v string) *TaskRecordDTO {
	s.End = &v
	return s
}

func (s *TaskRecordDTO) SetName(v string) *TaskRecordDTO {
	s.Name = &v
	return s
}

func (s *TaskRecordDTO) SetStart(v string) *TaskRecordDTO {
	s.Start = &v
	return s
}

func (s *TaskRecordDTO) SetTime(v string) *TaskRecordDTO {
	s.Time = &v
	return s
}

func (s *TaskRecordDTO) SetProgress(v string) *TaskRecordDTO {
	s.Progress = &v
	return s
}

func (s *TaskRecordDTO) SetType(v string) *TaskRecordDTO {
	s.Type = &v
	return s
}

// 四元组，包括 key，value, display，visible
type UIKeyVauleTemplate struct {
	// 中文，描述这个UI元素的key
	Display *string `json:"display,omitempty" xml:"display,omitempty" require:"true"`
	// 对应ui元素的key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// 对应UI元素的值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
	// 该配置是否对 用户 可见。
	Visible *bool `json:"visible,omitempty" xml:"visible,omitempty" require:"true"`
}

func (s UIKeyVauleTemplate) String() string {
	return tea.Prettify(s)
}

func (s UIKeyVauleTemplate) GoString() string {
	return s.String()
}

func (s *UIKeyVauleTemplate) SetDisplay(v string) *UIKeyVauleTemplate {
	s.Display = &v
	return s
}

func (s *UIKeyVauleTemplate) SetKey(v string) *UIKeyVauleTemplate {
	s.Key = &v
	return s
}

func (s *UIKeyVauleTemplate) SetValue(v string) *UIKeyVauleTemplate {
	s.Value = &v
	return s
}

func (s *UIKeyVauleTemplate) SetVisible(v bool) *UIKeyVauleTemplate {
	s.Visible = &v
	return s
}

// router
type RouterConfigDO struct {
	// 消费端 Group
	ConsumerId *string `json:"consumer_id,omitempty" xml:"consumer_id,omitempty" require:"true"`
	// 消费起始位点。取值范围：0：最小位点；1：最大位点；2：时间戳。
	ConsumeFromType *int64 `json:"consume_from_type,omitempty" xml:"consume_from_type,omitempty" require:"true"`
	// 消费起始位点时间戳，时间戳的值，单位是秒
	ConsumeFromValue *int64 `json:"consume_from_value,omitempty" xml:"consume_from_value,omitempty" require:"true"`
	// 消费终止位点。取值范围：0：最小位点；1：最大位点；2：时间戳。
	ConsumeToType *int64 `json:"consume_to_type,omitempty" xml:"consume_to_type,omitempty" require:"true"`
	// 消费终止位点时间戳，时间戳的值，单位是秒
	ConsumeToValue *int64 `json:"consume_to_value,omitempty" xml:"consume_to_value,omitempty" require:"true"`
	// 延迟时间
	DelayTime *string `json:"delay_time,omitempty" xml:"delay_time,omitempty"`
	// 描述信息
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 目标单元
	DestinationCell *string `json:"destination_cell,omitempty" xml:"destination_cell,omitempty" require:"true"`
	// 目标实例 ID
	DestinationInstanceId *string `json:"destination_instance_id,omitempty" xml:"destination_instance_id,omitempty" require:"true"`
	// 目标 Topic
	DestinationTopic *string `json:"destination_topic,omitempty" xml:"destination_topic,omitempty" require:"true"`
	// 容灾标识
	Disaster *bool `json:"disaster,omitempty" xml:"disaster,omitempty" require:"true"`
	// 容灾机房
	DisasterRecoveryDatacenter *string `json:"disaster_recovery_datacenter,omitempty" xml:"disaster_recovery_datacenter,omitempty" require:"true"`
	// 创建时间
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 修改时间
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
	// 路由任务 ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 源单元
	SourceCell *string `json:"source_cell,omitempty" xml:"source_cell,omitempty" require:"true"`
	// 源实例 ID
	SourceInstanceId *string `json:"source_instance_id,omitempty" xml:"source_instance_id,omitempty" require:"true"`
	// 源 Topic
	SourceTopic *string `json:"source_topic,omitempty" xml:"source_topic,omitempty" require:"true"`
	// 过滤 Tag
	Tag *string `json:"tag,omitempty" xml:"tag,omitempty" require:"true"`
	// 任务状态。取值说明：0：初始化；1：工作中；2：停止。
	TaskStatus *int64 `json:"task_status,omitempty" xml:"task_status,omitempty" require:"true"`
	// 任务类型。取值范围： 0：LDC 复制；1：非 LDC；2...
	TaskType *int64 `json:"task_type,omitempty" xml:"task_type,omitempty" require:"true"`
}

func (s RouterConfigDO) String() string {
	return tea.Prettify(s)
}

func (s RouterConfigDO) GoString() string {
	return s.String()
}

func (s *RouterConfigDO) SetConsumerId(v string) *RouterConfigDO {
	s.ConsumerId = &v
	return s
}

func (s *RouterConfigDO) SetConsumeFromType(v int64) *RouterConfigDO {
	s.ConsumeFromType = &v
	return s
}

func (s *RouterConfigDO) SetConsumeFromValue(v int64) *RouterConfigDO {
	s.ConsumeFromValue = &v
	return s
}

func (s *RouterConfigDO) SetConsumeToType(v int64) *RouterConfigDO {
	s.ConsumeToType = &v
	return s
}

func (s *RouterConfigDO) SetConsumeToValue(v int64) *RouterConfigDO {
	s.ConsumeToValue = &v
	return s
}

func (s *RouterConfigDO) SetDelayTime(v string) *RouterConfigDO {
	s.DelayTime = &v
	return s
}

func (s *RouterConfigDO) SetDescription(v string) *RouterConfigDO {
	s.Description = &v
	return s
}

func (s *RouterConfigDO) SetDestinationCell(v string) *RouterConfigDO {
	s.DestinationCell = &v
	return s
}

func (s *RouterConfigDO) SetDestinationInstanceId(v string) *RouterConfigDO {
	s.DestinationInstanceId = &v
	return s
}

func (s *RouterConfigDO) SetDestinationTopic(v string) *RouterConfigDO {
	s.DestinationTopic = &v
	return s
}

func (s *RouterConfigDO) SetDisaster(v bool) *RouterConfigDO {
	s.Disaster = &v
	return s
}

func (s *RouterConfigDO) SetDisasterRecoveryDatacenter(v string) *RouterConfigDO {
	s.DisasterRecoveryDatacenter = &v
	return s
}

func (s *RouterConfigDO) SetGmtCreate(v string) *RouterConfigDO {
	s.GmtCreate = &v
	return s
}

func (s *RouterConfigDO) SetGmtModified(v string) *RouterConfigDO {
	s.GmtModified = &v
	return s
}

func (s *RouterConfigDO) SetId(v int64) *RouterConfigDO {
	s.Id = &v
	return s
}

func (s *RouterConfigDO) SetSourceCell(v string) *RouterConfigDO {
	s.SourceCell = &v
	return s
}

func (s *RouterConfigDO) SetSourceInstanceId(v string) *RouterConfigDO {
	s.SourceInstanceId = &v
	return s
}

func (s *RouterConfigDO) SetSourceTopic(v string) *RouterConfigDO {
	s.SourceTopic = &v
	return s
}

func (s *RouterConfigDO) SetTag(v string) *RouterConfigDO {
	s.Tag = &v
	return s
}

func (s *RouterConfigDO) SetTaskStatus(v int64) *RouterConfigDO {
	s.TaskStatus = &v
	return s
}

func (s *RouterConfigDO) SetTaskType(v int64) *RouterConfigDO {
	s.TaskType = &v
	return s
}

// 订阅者topic信息
type SubscriptionTopicDTO struct {
	// 是否在线
	Online *bool `json:"online,omitempty" xml:"online,omitempty" require:"true"`
	// 订阅匹配字符串
	SubString *string `json:"sub_string,omitempty" xml:"sub_string,omitempty" require:"true"`
	// Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s SubscriptionTopicDTO) String() string {
	return tea.Prettify(s)
}

func (s SubscriptionTopicDTO) GoString() string {
	return s.String()
}

func (s *SubscriptionTopicDTO) SetOnline(v bool) *SubscriptionTopicDTO {
	s.Online = &v
	return s
}

func (s *SubscriptionTopicDTO) SetSubString(v string) *SubscriptionTopicDTO {
	s.SubString = &v
	return s
}

func (s *SubscriptionTopicDTO) SetTopic(v string) *SubscriptionTopicDTO {
	s.Topic = &v
	return s
}

// 该集群在线客户端详细信息，包含 Jstack、消费 RT 时间等信息
type ConsumerConnectionInfoDTO struct {
	// 消费实例的 ID
	ClientId *string `json:"client_id,omitempty" xml:"client_id,omitempty" require:"true"`
	// 连接信息
	Connection *string `json:"connection,omitempty" xml:"connection,omitempty" require:"true"`
	// PUSH/PULL
	ConsumeType *string `json:"consume_type,omitempty" xml:"consume_type,omitempty" require:"true"`
	// Jstack 堆栈信息
	Jstack []*ThreadTrackDTO `json:"jstack,omitempty" xml:"jstack,omitempty" require:"true" type:"Repeated"`
	// 客户端语言
	Language *string `json:"language,omitempty" xml:"language,omitempty" require:"true"`
	// 最后更新时间
	LastTimestamp *int64 `json:"last_timestamp,omitempty" xml:"last_timestamp,omitempty" require:"true"`
	// 消费模型，取值说明如下：CLUSTERING：集群消费模式；BROADCASTING：广播消费模式。
	MessageModel *string `json:"message_model,omitempty" xml:"message_model,omitempty" require:"true"`
	// 实时状态统计
	RunningDataList []*ConsumerRunningDataDTO `json:"running_data_list,omitempty" xml:"running_data_list,omitempty" require:"true" type:"Repeated"`
	// 开始时间
	StartTimestamp *int64 `json:"start_timestamp,omitempty" xml:"start_timestamp,omitempty" require:"true"`
	// 订阅关系集合
	SubscriptionSet []*SubscriptionDTO `json:"subscription_set,omitempty" xml:"subscription_set,omitempty" require:"true" type:"Repeated"`
	// 消费线程数
	ThreadCount *int64 `json:"thread_count,omitempty" xml:"thread_count,omitempty" require:"true"`
	//  客户端版本号
	Version *string `json:"version,omitempty" xml:"version,omitempty" require:"true"`
}

func (s ConsumerConnectionInfoDTO) String() string {
	return tea.Prettify(s)
}

func (s ConsumerConnectionInfoDTO) GoString() string {
	return s.String()
}

func (s *ConsumerConnectionInfoDTO) SetClientId(v string) *ConsumerConnectionInfoDTO {
	s.ClientId = &v
	return s
}

func (s *ConsumerConnectionInfoDTO) SetConnection(v string) *ConsumerConnectionInfoDTO {
	s.Connection = &v
	return s
}

func (s *ConsumerConnectionInfoDTO) SetConsumeType(v string) *ConsumerConnectionInfoDTO {
	s.ConsumeType = &v
	return s
}

func (s *ConsumerConnectionInfoDTO) SetJstack(v []*ThreadTrackDTO) *ConsumerConnectionInfoDTO {
	s.Jstack = v
	return s
}

func (s *ConsumerConnectionInfoDTO) SetLanguage(v string) *ConsumerConnectionInfoDTO {
	s.Language = &v
	return s
}

func (s *ConsumerConnectionInfoDTO) SetLastTimestamp(v int64) *ConsumerConnectionInfoDTO {
	s.LastTimestamp = &v
	return s
}

func (s *ConsumerConnectionInfoDTO) SetMessageModel(v string) *ConsumerConnectionInfoDTO {
	s.MessageModel = &v
	return s
}

func (s *ConsumerConnectionInfoDTO) SetRunningDataList(v []*ConsumerRunningDataDTO) *ConsumerConnectionInfoDTO {
	s.RunningDataList = v
	return s
}

func (s *ConsumerConnectionInfoDTO) SetStartTimestamp(v int64) *ConsumerConnectionInfoDTO {
	s.StartTimestamp = &v
	return s
}

func (s *ConsumerConnectionInfoDTO) SetSubscriptionSet(v []*SubscriptionDTO) *ConsumerConnectionInfoDTO {
	s.SubscriptionSet = v
	return s
}

func (s *ConsumerConnectionInfoDTO) SetThreadCount(v int64) *ConsumerConnectionInfoDTO {
	s.ThreadCount = &v
	return s
}

func (s *ConsumerConnectionInfoDTO) SetVersion(v string) *ConsumerConnectionInfoDTO {
	s.Version = &v
	return s
}

// cell
type CellDO struct {
	// cell
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty" require:"true"`
	// cell type
	CellType *string `json:"cell_type,omitempty" xml:"cell_type,omitempty"`
	// default
	Datacenter *string `json:"datacenter,omitempty" xml:"datacenter,omitempty"`
	// endpoint
	Endpoint *string `json:"endpoint,omitempty" xml:"endpoint,omitempty"`
	// endpoint type
	EndpointType *string `json:"endpoint_type,omitempty" xml:"endpoint_type,omitempty"`
	// gmt_create
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// gmt_modified
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
	// room
	Room *string `json:"room,omitempty" xml:"room,omitempty"`
}

func (s CellDO) String() string {
	return tea.Prettify(s)
}

func (s CellDO) GoString() string {
	return s.String()
}

func (s *CellDO) SetCell(v string) *CellDO {
	s.Cell = &v
	return s
}

func (s *CellDO) SetCellType(v string) *CellDO {
	s.CellType = &v
	return s
}

func (s *CellDO) SetDatacenter(v string) *CellDO {
	s.Datacenter = &v
	return s
}

func (s *CellDO) SetEndpoint(v string) *CellDO {
	s.Endpoint = &v
	return s
}

func (s *CellDO) SetEndpointType(v string) *CellDO {
	s.EndpointType = &v
	return s
}

func (s *CellDO) SetGmtCreate(v string) *CellDO {
	s.GmtCreate = &v
	return s
}

func (s *CellDO) SetGmtModified(v string) *CellDO {
	s.GmtModified = &v
	return s
}

func (s *CellDO) SetId(v int64) *CellDO {
	s.Id = &v
	return s
}

func (s *CellDO) SetInstanceId(v string) *CellDO {
	s.InstanceId = &v
	return s
}

func (s *CellDO) SetRoom(v string) *CellDO {
	s.Room = &v
	return s
}

// sofa mq
type TopicDTO struct {
	// 集群名称
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty"`
	// 创建时间
	GmtCreate *int64 `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 修改时间
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
	// 数据库 ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 消息类型。取值说明如下：
	//
	// 0：普通消息
	// 1：分区顺序消息
	// 2：全局顺序消息
	// 4：事务消息
	// 5：定时/延时消息
	MessageType *int64 `json:"message_type,omitempty" xml:"message_type,omitempty" require:"true"`
	// 创建人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
	// 设置该 Topic 的读写模式。取值说明如下：
	//
	// 6：同时支持读写
	// 4：禁写
	// 2：禁读
	Perm *int64 `json:"perm,omitempty" xml:"perm,omitempty" require:"true"`
	// 读分区数
	ReadQueueNum *int64 `json:"read_queue_num,omitempty" xml:"read_queue_num,omitempty"`
	// Topic 备注信息
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty" require:"true"`
	// Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// 写分区数
	WriteQueueNum *int64 `json:"write_queue_num,omitempty" xml:"write_queue_num,omitempty"`
	// 生效范围
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// 版本号
	Version *int64 `json:"version,omitempty" xml:"version,omitempty"`
	// 删除标志
	DeleteMark *string `json:"delete_mark,omitempty" xml:"delete_mark,omitempty"`
	// true标识该topic带有schema，否则不带schema
	SchemaMark *bool `json:"schema_mark,omitempty" xml:"schema_mark,omitempty"`
	// Topic对应Schema配置的序列化方式
	SchemaSerialization *string `json:"schema_serialization,omitempty" xml:"schema_serialization,omitempty"`
	// Topic对应的Schema的兼容性策略
	SchemaCompatibility *string `json:"schema_compatibility,omitempty" xml:"schema_compatibility,omitempty"`
	// Topic 所属的应用名称，要求 app name 在 zappinfo 上可查
	Owner *string `json:"owner,omitempty" xml:"owner,omitempty"`
}

func (s TopicDTO) String() string {
	return tea.Prettify(s)
}

func (s TopicDTO) GoString() string {
	return s.String()
}

func (s *TopicDTO) SetCluster(v string) *TopicDTO {
	s.Cluster = &v
	return s
}

func (s *TopicDTO) SetGmtCreate(v int64) *TopicDTO {
	s.GmtCreate = &v
	return s
}

func (s *TopicDTO) SetGmtModified(v int64) *TopicDTO {
	s.GmtModified = &v
	return s
}

func (s *TopicDTO) SetId(v int64) *TopicDTO {
	s.Id = &v
	return s
}

func (s *TopicDTO) SetInstanceId(v string) *TopicDTO {
	s.InstanceId = &v
	return s
}

func (s *TopicDTO) SetMessageType(v int64) *TopicDTO {
	s.MessageType = &v
	return s
}

func (s *TopicDTO) SetOperator(v string) *TopicDTO {
	s.Operator = &v
	return s
}

func (s *TopicDTO) SetPerm(v int64) *TopicDTO {
	s.Perm = &v
	return s
}

func (s *TopicDTO) SetReadQueueNum(v int64) *TopicDTO {
	s.ReadQueueNum = &v
	return s
}

func (s *TopicDTO) SetRemark(v string) *TopicDTO {
	s.Remark = &v
	return s
}

func (s *TopicDTO) SetTopic(v string) *TopicDTO {
	s.Topic = &v
	return s
}

func (s *TopicDTO) SetWriteQueueNum(v int64) *TopicDTO {
	s.WriteQueueNum = &v
	return s
}

func (s *TopicDTO) SetScope(v string) *TopicDTO {
	s.Scope = &v
	return s
}

func (s *TopicDTO) SetVersion(v int64) *TopicDTO {
	s.Version = &v
	return s
}

func (s *TopicDTO) SetDeleteMark(v string) *TopicDTO {
	s.DeleteMark = &v
	return s
}

func (s *TopicDTO) SetSchemaMark(v bool) *TopicDTO {
	s.SchemaMark = &v
	return s
}

func (s *TopicDTO) SetSchemaSerialization(v string) *TopicDTO {
	s.SchemaSerialization = &v
	return s
}

func (s *TopicDTO) SetSchemaCompatibility(v string) *TopicDTO {
	s.SchemaCompatibility = &v
	return s
}

func (s *TopicDTO) SetOwner(v string) *TopicDTO {
	s.Owner = &v
	return s
}

// msgtype
type MsgTypeDO struct {
	// desc
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty"`
	// eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// gmt_create
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	// gmt_modified
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s MsgTypeDO) String() string {
	return tea.Prettify(s)
}

func (s MsgTypeDO) GoString() string {
	return s.String()
}

func (s *MsgTypeDO) SetDesc(v string) *MsgTypeDO {
	s.Desc = &v
	return s
}

func (s *MsgTypeDO) SetEventcode(v string) *MsgTypeDO {
	s.Eventcode = &v
	return s
}

func (s *MsgTypeDO) SetGmtCreate(v string) *MsgTypeDO {
	s.GmtCreate = &v
	return s
}

func (s *MsgTypeDO) SetGmtModified(v string) *MsgTypeDO {
	s.GmtModified = &v
	return s
}

func (s *MsgTypeDO) SetInstanceId(v string) *MsgTypeDO {
	s.InstanceId = &v
	return s
}

func (s *MsgTypeDO) SetTopic(v string) *MsgTypeDO {
	s.Topic = &v
	return s
}

func (s *MsgTypeDO) SetId(v int64) *MsgTypeDO {
	s.Id = &v
	return s
}

// 前端UI展示的模型
type UIControlModel struct {
	// 展示给用户查看的描述。
	Display *string `json:"display,omitempty" xml:"display,omitempty" require:"true"`
	// 提示信息，参照Tooltip
	Hint *string `json:"hint,omitempty" xml:"hint,omitempty"`
	// 控件名称，也是控件绑定的数据 key
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 如果本控件是 select 或者 radio 选择框类型，本数组是 所有 选项的具体信息。
	Options []*UIOptionModel `json:"options,omitempty" xml:"options,omitempty" type:"Repeated"`
	// input控件独有字段，代表输入框的place holder
	PlaceHolder *string `json:"place_holder,omitempty" xml:"place_holder,omitempty"`
	// 该控件的value是否是必须的
	Required *bool `json:"required,omitempty" xml:"required,omitempty" require:"true"`
	// 本控件的值必须满足的规则，例如input，那么可能输入的文本必须满足全英文等；以正则表达式的形式。
	Rule *string `json:"rule,omitempty" xml:"rule,omitempty"`
	// 当 用户输入的 值与 rule不符合时，提醒用户出错的备注。
	RuleRemark *string `json:"rule_remark,omitempty" xml:"rule_remark,omitempty"`
	// 控件的类型；支持 Select、Radio、Input、DatePicking
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 本控件是否未联动控件，联动控件是否展示 与 union_control和union_value 相关，当联动的父控件union_control的值为union_value时，本控件才可见。
	Union *bool `json:"union,omitempty" xml:"union,omitempty" require:"true"`
	// 联动的控件名称，即name
	UnionControl *string `json:"union_control,omitempty" xml:"union_control,omitempty"`
	// 当联动空间union_control的值是本字段的值时，本联动控件可以展示。
	UnionValue *string `json:"union_value,omitempty" xml:"union_value,omitempty"`
	// 本控件对应的值；如果是input，那么就是输入的值；如果是select/radio，那就是选项的值；如果是option，那么就是自己本身的枚举值。
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
	// 该控件的值是否可以修改
	Immutable *bool `json:"immutable,omitempty" xml:"immutable,omitempty" require:"true"`
}

func (s UIControlModel) String() string {
	return tea.Prettify(s)
}

func (s UIControlModel) GoString() string {
	return s.String()
}

func (s *UIControlModel) SetDisplay(v string) *UIControlModel {
	s.Display = &v
	return s
}

func (s *UIControlModel) SetHint(v string) *UIControlModel {
	s.Hint = &v
	return s
}

func (s *UIControlModel) SetName(v string) *UIControlModel {
	s.Name = &v
	return s
}

func (s *UIControlModel) SetOptions(v []*UIOptionModel) *UIControlModel {
	s.Options = v
	return s
}

func (s *UIControlModel) SetPlaceHolder(v string) *UIControlModel {
	s.PlaceHolder = &v
	return s
}

func (s *UIControlModel) SetRequired(v bool) *UIControlModel {
	s.Required = &v
	return s
}

func (s *UIControlModel) SetRule(v string) *UIControlModel {
	s.Rule = &v
	return s
}

func (s *UIControlModel) SetRuleRemark(v string) *UIControlModel {
	s.RuleRemark = &v
	return s
}

func (s *UIControlModel) SetType(v string) *UIControlModel {
	s.Type = &v
	return s
}

func (s *UIControlModel) SetUnion(v bool) *UIControlModel {
	s.Union = &v
	return s
}

func (s *UIControlModel) SetUnionControl(v string) *UIControlModel {
	s.UnionControl = &v
	return s
}

func (s *UIControlModel) SetUnionValue(v string) *UIControlModel {
	s.UnionValue = &v
	return s
}

func (s *UIControlModel) SetValue(v string) *UIControlModel {
	s.Value = &v
	return s
}

func (s *UIControlModel) SetImmutable(v bool) *UIControlModel {
	s.Immutable = &v
	return s
}

// 队列详情信息
type QueueDescDTO struct {
	// 关联应用名
	AssoApp *string `json:"asso_app,omitempty" xml:"asso_app,omitempty" require:"true"`
	// 通道名
	Channel *string `json:"channel,omitempty" xml:"channel,omitempty" require:"true"`
	// 队列id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 队列管理器ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty" require:"true"`
	// 队列管理器名
	Manager *string `json:"manager,omitempty" xml:"manager,omitempty" require:"true"`
	// 队列名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 队列管理器端口
	Port *string `json:"port,omitempty" xml:"port,omitempty" require:"true"`
	// 队列类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s QueueDescDTO) String() string {
	return tea.Prettify(s)
}

func (s QueueDescDTO) GoString() string {
	return s.String()
}

func (s *QueueDescDTO) SetAssoApp(v string) *QueueDescDTO {
	s.AssoApp = &v
	return s
}

func (s *QueueDescDTO) SetChannel(v string) *QueueDescDTO {
	s.Channel = &v
	return s
}

func (s *QueueDescDTO) SetId(v int64) *QueueDescDTO {
	s.Id = &v
	return s
}

func (s *QueueDescDTO) SetIp(v string) *QueueDescDTO {
	s.Ip = &v
	return s
}

func (s *QueueDescDTO) SetManager(v string) *QueueDescDTO {
	s.Manager = &v
	return s
}

func (s *QueueDescDTO) SetName(v string) *QueueDescDTO {
	s.Name = &v
	return s
}

func (s *QueueDescDTO) SetPort(v string) *QueueDescDTO {
	s.Port = &v
	return s
}

func (s *QueueDescDTO) SetType(v string) *QueueDescDTO {
	s.Type = &v
	return s
}

// 接入点信息
type EndpointsDTO struct {
	// HTTP 内网接入点
	HttpInternalEndpoint *string `json:"http_internal_endpoint,omitempty" xml:"http_internal_endpoint,omitempty" require:"true"`
	// HTTP 公网接入点
	HttpInternetEndpoint *string `json:"http_internet_endpoint,omitempty" xml:"http_internet_endpoint,omitempty" require:"true"`
	// HTTPS 公网接入点
	HttpInternetSecureEndpoint *string `json:"http_internet_secure_endpoint,omitempty" xml:"http_internet_secure_endpoint,omitempty" require:"true"`
	// TCP 协议接入点
	TcpEndpoint *string `json:"tcp_endpoint,omitempty" xml:"tcp_endpoint,omitempty" require:"true"`
}

func (s EndpointsDTO) String() string {
	return tea.Prettify(s)
}

func (s EndpointsDTO) GoString() string {
	return s.String()
}

func (s *EndpointsDTO) SetHttpInternalEndpoint(v string) *EndpointsDTO {
	s.HttpInternalEndpoint = &v
	return s
}

func (s *EndpointsDTO) SetHttpInternetEndpoint(v string) *EndpointsDTO {
	s.HttpInternetEndpoint = &v
	return s
}

func (s *EndpointsDTO) SetHttpInternetSecureEndpoint(v string) *EndpointsDTO {
	s.HttpInternetSecureEndpoint = &v
	return s
}

func (s *EndpointsDTO) SetTcpEndpoint(v string) *EndpointsDTO {
	s.TcpEndpoint = &v
	return s
}

// 源端 topic
type SourceTopic struct {
	// 源端 topic
	SourceTopic *string `json:"source_topic,omitempty" xml:"source_topic,omitempty" require:"true"`
	// 此源端 topic 所有的 event code列表
	SourceEventCode []*string `json:"source_event_code,omitempty" xml:"source_event_code,omitempty" require:"true" type:"Repeated"`
}

func (s SourceTopic) String() string {
	return tea.Prettify(s)
}

func (s SourceTopic) GoString() string {
	return s.String()
}

func (s *SourceTopic) SetSourceTopic(v string) *SourceTopic {
	s.SourceTopic = &v
	return s
}

func (s *SourceTopic) SetSourceEventCode(v []*string) *SourceTopic {
	s.SourceEventCode = v
	return s
}

// 查询结果
type MessageTrackDTO struct {
	// 订阅该 Topic 的消费者所对应的 Group ID
	ConsumerGroup *string `json:"consumer_group,omitempty" xml:"consumer_group,omitempty" require:"true"`
	// 需查询的消息所对应的实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 当前状态。取值说明如下：
	//
	// CONSUMED：已消费
	// CONSUMED_BUT_FILTERED：已被过滤
	// NOT_CONSUME_YET：暂未消费
	// NOT_ONLINE：客户端不在线
	// UNKNOWN：其他问题
	//
	TrackType *string `json:"track_type,omitempty" xml:"track_type,omitempty" require:"true"`
}

func (s MessageTrackDTO) String() string {
	return tea.Prettify(s)
}

func (s MessageTrackDTO) GoString() string {
	return s.String()
}

func (s *MessageTrackDTO) SetConsumerGroup(v string) *MessageTrackDTO {
	s.ConsumerGroup = &v
	return s
}

func (s *MessageTrackDTO) SetInstanceId(v string) *MessageTrackDTO {
	s.InstanceId = &v
	return s
}

func (s *MessageTrackDTO) SetTrackType(v string) *MessageTrackDTO {
	s.TrackType = &v
	return s
}

// 一行字段的值
type ColumnsValue struct {
	// 一行的值
	Value []*ColumnValue `json:"value,omitempty" xml:"value,omitempty" require:"true" type:"Repeated"`
}

func (s ColumnsValue) String() string {
	return tea.Prettify(s)
}

func (s ColumnsValue) GoString() string {
	return s.String()
}

func (s *ColumnsValue) SetValue(v []*ColumnValue) *ColumnsValue {
	s.Value = v
	return s
}

// 告警信息
type WarnDTO struct {
	// 报警时间段
	AlertTime *string `json:"alert_time,omitempty" xml:"alert_time,omitempty" require:"true"`
	// 属性字符串
	Attribute *string `json:"attribute,omitempty" xml:"attribute,omitempty" require:"true"`
	// 消息阻塞时间
	BlockTime *int64 `json:"block_time,omitempty" xml:"block_time,omitempty" require:"true"`
	// 联系人列表
	Contacts *string `json:"contacts,omitempty" xml:"contacts,omitempty" require:"true"`
	// 延迟时间
	DelayTime *int64 `json:"delay_time,omitempty" xml:"delay_time,omitempty" require:"true"`
	// 报警频率，单位分钟
	Frequency *int64 `json:"frequency,omitempty" xml:"frequency,omitempty" require:"true"`
	// 创建时间
	GmtCreate *int64 `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 修改时间
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
	// 消费组 ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 报警 ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 操作者
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 阈值
	Threshold *int64 `json:"threshold,omitempty" xml:"threshold,omitempty" require:"true"`
	// 报警的 Topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// 报警级别
	WarnLevel *int64 `json:"warn_level,omitempty" xml:"warn_level,omitempty" require:"true"`
	// 报警状态
	WarnStatus *int64 `json:"warn_status,omitempty" xml:"warn_status,omitempty" require:"true"`
	// 报警类型
	WarnType *int64 `json:"warn_type,omitempty" xml:"warn_type,omitempty" require:"true"`
}

func (s WarnDTO) String() string {
	return tea.Prettify(s)
}

func (s WarnDTO) GoString() string {
	return s.String()
}

func (s *WarnDTO) SetAlertTime(v string) *WarnDTO {
	s.AlertTime = &v
	return s
}

func (s *WarnDTO) SetAttribute(v string) *WarnDTO {
	s.Attribute = &v
	return s
}

func (s *WarnDTO) SetBlockTime(v int64) *WarnDTO {
	s.BlockTime = &v
	return s
}

func (s *WarnDTO) SetContacts(v string) *WarnDTO {
	s.Contacts = &v
	return s
}

func (s *WarnDTO) SetDelayTime(v int64) *WarnDTO {
	s.DelayTime = &v
	return s
}

func (s *WarnDTO) SetFrequency(v int64) *WarnDTO {
	s.Frequency = &v
	return s
}

func (s *WarnDTO) SetGmtCreate(v int64) *WarnDTO {
	s.GmtCreate = &v
	return s
}

func (s *WarnDTO) SetGmtModified(v int64) *WarnDTO {
	s.GmtModified = &v
	return s
}

func (s *WarnDTO) SetGroupId(v string) *WarnDTO {
	s.GroupId = &v
	return s
}

func (s *WarnDTO) SetId(v int64) *WarnDTO {
	s.Id = &v
	return s
}

func (s *WarnDTO) SetInstanceId(v string) *WarnDTO {
	s.InstanceId = &v
	return s
}

func (s *WarnDTO) SetOperator(v string) *WarnDTO {
	s.Operator = &v
	return s
}

func (s *WarnDTO) SetThreshold(v int64) *WarnDTO {
	s.Threshold = &v
	return s
}

func (s *WarnDTO) SetTopic(v string) *WarnDTO {
	s.Topic = &v
	return s
}

func (s *WarnDTO) SetWarnLevel(v int64) *WarnDTO {
	s.WarnLevel = &v
	return s
}

func (s *WarnDTO) SetWarnStatus(v int64) *WarnDTO {
	s.WarnStatus = &v
	return s
}

func (s *WarnDTO) SetWarnType(v int64) *WarnDTO {
	s.WarnType = &v
	return s
}

// config信息
type ConfigDTO struct {
	// create time
	GmtCreate *int64 `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// modify time
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// operator
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// key
	Property *string `json:"property,omitempty" xml:"property,omitempty" require:"true"`
	// 目标名
	TargetName *string `json:"target_name,omitempty" xml:"target_name,omitempty" require:"true"`
	// cluster type or broker type
	TargetType *int64 `json:"target_type,omitempty" xml:"target_type,omitempty" require:"true"`
	// value
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
	// 生效范围
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty" require:"true"`
	// 版本号
	Version *int64 `json:"version,omitempty" xml:"version,omitempty" require:"true"`
	// 删除标志
	DeleteMark *string `json:"delete_mark,omitempty" xml:"delete_mark,omitempty" require:"true"`
}

func (s ConfigDTO) String() string {
	return tea.Prettify(s)
}

func (s ConfigDTO) GoString() string {
	return s.String()
}

func (s *ConfigDTO) SetGmtCreate(v int64) *ConfigDTO {
	s.GmtCreate = &v
	return s
}

func (s *ConfigDTO) SetGmtModified(v int64) *ConfigDTO {
	s.GmtModified = &v
	return s
}

func (s *ConfigDTO) SetId(v int64) *ConfigDTO {
	s.Id = &v
	return s
}

func (s *ConfigDTO) SetOperator(v string) *ConfigDTO {
	s.Operator = &v
	return s
}

func (s *ConfigDTO) SetProperty(v string) *ConfigDTO {
	s.Property = &v
	return s
}

func (s *ConfigDTO) SetTargetName(v string) *ConfigDTO {
	s.TargetName = &v
	return s
}

func (s *ConfigDTO) SetTargetType(v int64) *ConfigDTO {
	s.TargetType = &v
	return s
}

func (s *ConfigDTO) SetValue(v string) *ConfigDTO {
	s.Value = &v
	return s
}

func (s *ConfigDTO) SetScope(v string) *ConfigDTO {
	s.Scope = &v
	return s
}

func (s *ConfigDTO) SetVersion(v int64) *ConfigDTO {
	s.Version = &v
	return s
}

func (s *ConfigDTO) SetDeleteMark(v string) *ConfigDTO {
	s.DeleteMark = &v
	return s
}

// 告警日志
type WarnLogDTO struct {
	// 单元名称
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty" require:"true"`
	// 创建时间
	GmtCreate *int64 `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 修改时间
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
	// Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// 报警 ID
	WarnId *int64 `json:"warn_id,omitempty" xml:"warn_id,omitempty" require:"true"`
	// 报警信息
	WarnInfo *string `json:"warn_info,omitempty" xml:"warn_info,omitempty" require:"true"`
}

func (s WarnLogDTO) String() string {
	return tea.Prettify(s)
}

func (s WarnLogDTO) GoString() string {
	return s.String()
}

func (s *WarnLogDTO) SetCell(v string) *WarnLogDTO {
	s.Cell = &v
	return s
}

func (s *WarnLogDTO) SetGmtCreate(v int64) *WarnLogDTO {
	s.GmtCreate = &v
	return s
}

func (s *WarnLogDTO) SetGmtModified(v int64) *WarnLogDTO {
	s.GmtModified = &v
	return s
}

func (s *WarnLogDTO) SetGroupId(v string) *WarnLogDTO {
	s.GroupId = &v
	return s
}

func (s *WarnLogDTO) SetInstanceId(v string) *WarnLogDTO {
	s.InstanceId = &v
	return s
}

func (s *WarnLogDTO) SetTopic(v string) *WarnLogDTO {
	s.Topic = &v
	return s
}

func (s *WarnLogDTO) SetWarnId(v int64) *WarnLogDTO {
	s.WarnId = &v
	return s
}

func (s *WarnLogDTO) SetWarnInfo(v string) *WarnLogDTO {
	s.WarnInfo = &v
	return s
}

// node
type NodeDO struct {
	// cluster
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty"`
	// default
	DataCenter *string `json:"data_center,omitempty" xml:"data_center,omitempty"`
	// hostname
	Hostname *string `json:"hostname,omitempty" xml:"hostname,omitempty" require:"true"`
	// node group
	NodeGroup *string `json:"node_group,omitempty" xml:"node_group,omitempty"`
	// node type
	NodeType *string `json:"node_type,omitempty" xml:"node_type,omitempty"`
	// node perm
	Perm *string `json:"perm,omitempty" xml:"perm,omitempty"`
	// rip
	Rip *string `json:"rip,omitempty" xml:"rip,omitempty"`
	// room
	Room *string `json:"room,omitempty" xml:"room,omitempty"`
	// vip
	Vip *string `json:"vip,omitempty" xml:"vip,omitempty"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// gmt_create
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// gmt_modified
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
	// 节点状态 MASTER|SLAVE|OFFLINE
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 节点所属环境
	Env *string `json:"env,omitempty" xml:"env,omitempty"`
	// 节点所在城市
	City *string `json:"city,omitempty" xml:"city,omitempty"`
}

func (s NodeDO) String() string {
	return tea.Prettify(s)
}

func (s NodeDO) GoString() string {
	return s.String()
}

func (s *NodeDO) SetCluster(v string) *NodeDO {
	s.Cluster = &v
	return s
}

func (s *NodeDO) SetDataCenter(v string) *NodeDO {
	s.DataCenter = &v
	return s
}

func (s *NodeDO) SetHostname(v string) *NodeDO {
	s.Hostname = &v
	return s
}

func (s *NodeDO) SetNodeGroup(v string) *NodeDO {
	s.NodeGroup = &v
	return s
}

func (s *NodeDO) SetNodeType(v string) *NodeDO {
	s.NodeType = &v
	return s
}

func (s *NodeDO) SetPerm(v string) *NodeDO {
	s.Perm = &v
	return s
}

func (s *NodeDO) SetRip(v string) *NodeDO {
	s.Rip = &v
	return s
}

func (s *NodeDO) SetRoom(v string) *NodeDO {
	s.Room = &v
	return s
}

func (s *NodeDO) SetVip(v string) *NodeDO {
	s.Vip = &v
	return s
}

func (s *NodeDO) SetId(v int64) *NodeDO {
	s.Id = &v
	return s
}

func (s *NodeDO) SetGmtCreate(v string) *NodeDO {
	s.GmtCreate = &v
	return s
}

func (s *NodeDO) SetGmtModified(v string) *NodeDO {
	s.GmtModified = &v
	return s
}

func (s *NodeDO) SetStatus(v string) *NodeDO {
	s.Status = &v
	return s
}

func (s *NodeDO) SetEnv(v string) *NodeDO {
	s.Env = &v
	return s
}

func (s *NodeDO) SetCity(v string) *NodeDO {
	s.City = &v
	return s
}

// 客户端信息
//
type ClientInfoDTO struct {
	// 客户端ID
	ClientId *string `json:"client_id,omitempty" xml:"client_id,omitempty" require:"true"`
	// 客户端地址
	ClientAddr *string `json:"client_addr,omitempty" xml:"client_addr,omitempty" require:"true"`
	// 订阅详情
	Subscriptions []*SubscriptionDTO `json:"subscriptions,omitempty" xml:"subscriptions,omitempty" require:"true" type:"Repeated"`
}

func (s ClientInfoDTO) String() string {
	return tea.Prettify(s)
}

func (s ClientInfoDTO) GoString() string {
	return s.String()
}

func (s *ClientInfoDTO) SetClientId(v string) *ClientInfoDTO {
	s.ClientId = &v
	return s
}

func (s *ClientInfoDTO) SetClientAddr(v string) *ClientInfoDTO {
	s.ClientAddr = &v
	return s
}

func (s *ClientInfoDTO) SetSubscriptions(v []*SubscriptionDTO) *ClientInfoDTO {
	s.Subscriptions = v
	return s
}

// 订阅者分组信息
type SubscriptionGroupDTO struct {
	// 消费者所属消费组
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 部署模型
	MessageModel *string `json:"message_model,omitempty" xml:"message_model,omitempty" require:"true"`
	// 订阅字符串
	SubString *string `json:"sub_string,omitempty" xml:"sub_string,omitempty" require:"true"`
	// group协议类型
	GroupType *string `json:"group_type,omitempty" xml:"group_type,omitempty" require:"true"`
}

func (s SubscriptionGroupDTO) String() string {
	return tea.Prettify(s)
}

func (s SubscriptionGroupDTO) GoString() string {
	return s.String()
}

func (s *SubscriptionGroupDTO) SetGroupId(v string) *SubscriptionGroupDTO {
	s.GroupId = &v
	return s
}

func (s *SubscriptionGroupDTO) SetMessageModel(v string) *SubscriptionGroupDTO {
	s.MessageModel = &v
	return s
}

func (s *SubscriptionGroupDTO) SetSubString(v string) *SubscriptionGroupDTO {
	s.SubString = &v
	return s
}

func (s *SubscriptionGroupDTO) SetGroupType(v string) *SubscriptionGroupDTO {
	s.GroupType = &v
	return s
}

// bind
type BindingDO struct {
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// exchange_type
	ExchangeType *string `json:"exchange_type,omitempty" xml:"exchange_type,omitempty" require:"true"`
	// expression
	Expression *string `json:"expression,omitempty" xml:"expression,omitempty"`
	// gmt_create
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// gmt_modified
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
	// group
	Group *string `json:"group,omitempty" xml:"group,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// persistence
	Persistence *bool `json:"persistence,omitempty" xml:"persistence,omitempty" require:"true"`
	// topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s BindingDO) String() string {
	return tea.Prettify(s)
}

func (s BindingDO) GoString() string {
	return s.String()
}

func (s *BindingDO) SetAppName(v string) *BindingDO {
	s.AppName = &v
	return s
}

func (s *BindingDO) SetEventcode(v string) *BindingDO {
	s.Eventcode = &v
	return s
}

func (s *BindingDO) SetExchangeType(v string) *BindingDO {
	s.ExchangeType = &v
	return s
}

func (s *BindingDO) SetExpression(v string) *BindingDO {
	s.Expression = &v
	return s
}

func (s *BindingDO) SetGmtCreate(v string) *BindingDO {
	s.GmtCreate = &v
	return s
}

func (s *BindingDO) SetGmtModified(v string) *BindingDO {
	s.GmtModified = &v
	return s
}

func (s *BindingDO) SetGroup(v string) *BindingDO {
	s.Group = &v
	return s
}

func (s *BindingDO) SetId(v int64) *BindingDO {
	s.Id = &v
	return s
}

func (s *BindingDO) SetInstanceId(v string) *BindingDO {
	s.InstanceId = &v
	return s
}

func (s *BindingDO) SetPersistence(v bool) *BindingDO {
	s.Persistence = &v
	return s
}

func (s *BindingDO) SetTopic(v string) *BindingDO {
	s.Topic = &v
	return s
}

// msgbatch
type MsgQueryBatchDO struct {
	// eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// gmt_create
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	// message_id
	MessageId *string `json:"message_id,omitempty" xml:"message_id,omitempty" require:"true"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// subscriber_group_undelivery
	SubscriberGroupUndelivery *string `json:"subscriber_group_undelivery,omitempty" xml:"subscriber_group_undelivery,omitempty"`
}

func (s MsgQueryBatchDO) String() string {
	return tea.Prettify(s)
}

func (s MsgQueryBatchDO) GoString() string {
	return s.String()
}

func (s *MsgQueryBatchDO) SetEventcode(v string) *MsgQueryBatchDO {
	s.Eventcode = &v
	return s
}

func (s *MsgQueryBatchDO) SetGmtCreate(v string) *MsgQueryBatchDO {
	s.GmtCreate = &v
	return s
}

func (s *MsgQueryBatchDO) SetMessageId(v string) *MsgQueryBatchDO {
	s.MessageId = &v
	return s
}

func (s *MsgQueryBatchDO) SetStatus(v string) *MsgQueryBatchDO {
	s.Status = &v
	return s
}

func (s *MsgQueryBatchDO) SetSubscriberGroupUndelivery(v string) *MsgQueryBatchDO {
	s.SubscriberGroupUndelivery = &v
	return s
}

// kv配置
type KVConfigDTO struct {
	// 创建时间
	GmtCreate *int64 `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 修改时间
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// key
	UniformKey *string `json:"uniform_key,omitempty" xml:"uniform_key,omitempty" require:"true"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// value
	UniformValue *string `json:"uniform_value,omitempty" xml:"uniform_value,omitempty" require:"true"`
}

func (s KVConfigDTO) String() string {
	return tea.Prettify(s)
}

func (s KVConfigDTO) GoString() string {
	return s.String()
}

func (s *KVConfigDTO) SetGmtCreate(v int64) *KVConfigDTO {
	s.GmtCreate = &v
	return s
}

func (s *KVConfigDTO) SetGmtModified(v int64) *KVConfigDTO {
	s.GmtModified = &v
	return s
}

func (s *KVConfigDTO) SetId(v int64) *KVConfigDTO {
	s.Id = &v
	return s
}

func (s *KVConfigDTO) SetUniformKey(v string) *KVConfigDTO {
	s.UniformKey = &v
	return s
}

func (s *KVConfigDTO) SetNamespace(v string) *KVConfigDTO {
	s.Namespace = &v
	return s
}

func (s *KVConfigDTO) SetOperator(v string) *KVConfigDTO {
	s.Operator = &v
	return s
}

func (s *KVConfigDTO) SetUniformValue(v string) *KVConfigDTO {
	s.UniformValue = &v
	return s
}

// 连接器任务信息
type ConnectorJobInfo struct {
	// 任务名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 任务的调度类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 创建时间
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 任务描述
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
	// 任务状态
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 所属应用
	App *string `json:"app,omitempty" xml:"app,omitempty" require:"true"`
	// 工单状态
	ProcessStatus *string `json:"process_status,omitempty" xml:"process_status,omitempty" require:"true"`
	// 系统标签
	SysLabels []*string `json:"sys_labels,omitempty" xml:"sys_labels,omitempty" type:"Repeated"`
	// 应用标签
	UserLabels []*string `json:"user_labels,omitempty" xml:"user_labels,omitempty" type:"Repeated"`
	// 事件订阅是否开启
	EventSubEnabled *bool `json:"event_sub_enabled,omitempty" xml:"event_sub_enabled,omitempty"`
}

func (s ConnectorJobInfo) String() string {
	return tea.Prettify(s)
}

func (s ConnectorJobInfo) GoString() string {
	return s.String()
}

func (s *ConnectorJobInfo) SetName(v string) *ConnectorJobInfo {
	s.Name = &v
	return s
}

func (s *ConnectorJobInfo) SetType(v string) *ConnectorJobInfo {
	s.Type = &v
	return s
}

func (s *ConnectorJobInfo) SetGmtCreate(v string) *ConnectorJobInfo {
	s.GmtCreate = &v
	return s
}

func (s *ConnectorJobInfo) SetRemark(v string) *ConnectorJobInfo {
	s.Remark = &v
	return s
}

func (s *ConnectorJobInfo) SetStatus(v string) *ConnectorJobInfo {
	s.Status = &v
	return s
}

func (s *ConnectorJobInfo) SetApp(v string) *ConnectorJobInfo {
	s.App = &v
	return s
}

func (s *ConnectorJobInfo) SetProcessStatus(v string) *ConnectorJobInfo {
	s.ProcessStatus = &v
	return s
}

func (s *ConnectorJobInfo) SetSysLabels(v []*string) *ConnectorJobInfo {
	s.SysLabels = v
	return s
}

func (s *ConnectorJobInfo) SetUserLabels(v []*string) *ConnectorJobInfo {
	s.UserLabels = v
	return s
}

func (s *ConnectorJobInfo) SetEventSubEnabled(v bool) *ConnectorJobInfo {
	s.EventSubEnabled = &v
	return s
}

// 各个 Topic 的消费情况
type DetailInTopicDTO struct {
	// 延迟时间
	DelayTime *int64 `json:"delay_time,omitempty" xml:"delay_time,omitempty" require:"true"`
	// 最后更新时间
	LastTimestamp *int64 `json:"last_timestamp,omitempty" xml:"last_timestamp,omitempty" require:"true"`
	// Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// 该 Topic 消费总堆积数
	TotalDiff *int64 `json:"total_diff,omitempty" xml:"total_diff,omitempty" require:"true"`
}

func (s DetailInTopicDTO) String() string {
	return tea.Prettify(s)
}

func (s DetailInTopicDTO) GoString() string {
	return s.String()
}

func (s *DetailInTopicDTO) SetDelayTime(v int64) *DetailInTopicDTO {
	s.DelayTime = &v
	return s
}

func (s *DetailInTopicDTO) SetLastTimestamp(v int64) *DetailInTopicDTO {
	s.LastTimestamp = &v
	return s
}

func (s *DetailInTopicDTO) SetTopic(v string) *DetailInTopicDTO {
	s.Topic = &v
	return s
}

func (s *DetailInTopicDTO) SetTotalDiff(v int64) *DetailInTopicDTO {
	s.TotalDiff = &v
	return s
}

// 队列路由规则
type QueueRouteRulesDTO struct {
	// 应用
	App *string `json:"app,omitempty" xml:"app,omitempty" require:"true"`
	// 修改时间
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 队列路由规则id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 方法
	Meth *string `json:"meth,omitempty" xml:"meth,omitempty" require:"true"`
	// 路由规则名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 队列id
	QueueId *int64 `json:"queue_id,omitempty" xml:"queue_id,omitempty" require:"true"`
	// 状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 分流开关
	SwitchStatus *int64 `json:"switch_status,omitempty" xml:"switch_status,omitempty" require:"true"`
	// 路由类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s QueueRouteRulesDTO) String() string {
	return tea.Prettify(s)
}

func (s QueueRouteRulesDTO) GoString() string {
	return s.String()
}

func (s *QueueRouteRulesDTO) SetApp(v string) *QueueRouteRulesDTO {
	s.App = &v
	return s
}

func (s *QueueRouteRulesDTO) SetGmtModified(v string) *QueueRouteRulesDTO {
	s.GmtModified = &v
	return s
}

func (s *QueueRouteRulesDTO) SetId(v int64) *QueueRouteRulesDTO {
	s.Id = &v
	return s
}

func (s *QueueRouteRulesDTO) SetMeth(v string) *QueueRouteRulesDTO {
	s.Meth = &v
	return s
}

func (s *QueueRouteRulesDTO) SetName(v string) *QueueRouteRulesDTO {
	s.Name = &v
	return s
}

func (s *QueueRouteRulesDTO) SetQueueId(v int64) *QueueRouteRulesDTO {
	s.QueueId = &v
	return s
}

func (s *QueueRouteRulesDTO) SetStatus(v int64) *QueueRouteRulesDTO {
	s.Status = &v
	return s
}

func (s *QueueRouteRulesDTO) SetSwitchStatus(v int64) *QueueRouteRulesDTO {
	s.SwitchStatus = &v
	return s
}

func (s *QueueRouteRulesDTO) SetType(v string) *QueueRouteRulesDTO {
	s.Type = &v
	return s
}

// WhitelistDO
type WhitelistDO struct {
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// groupid
	Groupid *string `json:"groupid,omitempty" xml:"groupid,omitempty" require:"true"`
	// gmt_create
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	// gmt_modified
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
}

func (s WhitelistDO) String() string {
	return tea.Prettify(s)
}

func (s WhitelistDO) GoString() string {
	return s.String()
}

func (s *WhitelistDO) SetInstanceId(v string) *WhitelistDO {
	s.InstanceId = &v
	return s
}

func (s *WhitelistDO) SetTopic(v string) *WhitelistDO {
	s.Topic = &v
	return s
}

func (s *WhitelistDO) SetId(v int64) *WhitelistDO {
	s.Id = &v
	return s
}

func (s *WhitelistDO) SetGroupid(v string) *WhitelistDO {
	s.Groupid = &v
	return s
}

func (s *WhitelistDO) SetGmtCreate(v string) *WhitelistDO {
	s.GmtCreate = &v
	return s
}

func (s *WhitelistDO) SetGmtModified(v string) *WhitelistDO {
	s.GmtModified = &v
	return s
}

// schema详情
type SchemaDetailDO struct {
	// 注释
	Comment *string `json:"comment,omitempty" xml:"comment,omitempty"`
	// schema内容
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
	// 值校验规则
	FieldValidateRule *string `json:"field_validate_rule,omitempty" xml:"field_validate_rule,omitempty"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
	// 序列化类型
	Serialization *string `json:"serialization,omitempty" xml:"serialization,omitempty" require:"true"`
	// 状态
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// 租户
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// schema类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 唯一ID
	UniqId *string `json:"uniq_id,omitempty" xml:"uniq_id,omitempty"`
	// 版本
	Version *int64 `json:"version,omitempty" xml:"version,omitempty"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 创建时间
	GmtCreate *int64 `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	// 修改时间
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
}

func (s SchemaDetailDO) String() string {
	return tea.Prettify(s)
}

func (s SchemaDetailDO) GoString() string {
	return s.String()
}

func (s *SchemaDetailDO) SetComment(v string) *SchemaDetailDO {
	s.Comment = &v
	return s
}

func (s *SchemaDetailDO) SetContent(v string) *SchemaDetailDO {
	s.Content = &v
	return s
}

func (s *SchemaDetailDO) SetFieldValidateRule(v string) *SchemaDetailDO {
	s.FieldValidateRule = &v
	return s
}

func (s *SchemaDetailDO) SetName(v string) *SchemaDetailDO {
	s.Name = &v
	return s
}

func (s *SchemaDetailDO) SetNamespace(v string) *SchemaDetailDO {
	s.Namespace = &v
	return s
}

func (s *SchemaDetailDO) SetSerialization(v string) *SchemaDetailDO {
	s.Serialization = &v
	return s
}

func (s *SchemaDetailDO) SetState(v string) *SchemaDetailDO {
	s.State = &v
	return s
}

func (s *SchemaDetailDO) SetTenant(v string) *SchemaDetailDO {
	s.Tenant = &v
	return s
}

func (s *SchemaDetailDO) SetType(v string) *SchemaDetailDO {
	s.Type = &v
	return s
}

func (s *SchemaDetailDO) SetUniqId(v string) *SchemaDetailDO {
	s.UniqId = &v
	return s
}

func (s *SchemaDetailDO) SetVersion(v int64) *SchemaDetailDO {
	s.Version = &v
	return s
}

func (s *SchemaDetailDO) SetOperator(v string) *SchemaDetailDO {
	s.Operator = &v
	return s
}

func (s *SchemaDetailDO) SetGmtCreate(v int64) *SchemaDetailDO {
	s.GmtCreate = &v
	return s
}

func (s *SchemaDetailDO) SetGmtModified(v int64) *SchemaDetailDO {
	s.GmtModified = &v
	return s
}

// 前端展示的UI组件
type UIComponent struct {
	// UI组件类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// UI组件中的 内容组成部分，可以由多个Content对象组成
	Contents []*ComponentContent `json:"contents,omitempty" xml:"contents,omitempty" require:"true" type:"Repeated"`
	// 列表内元素组件集合
	ListItems []*ItemComponent `json:"list_items,omitempty" xml:"list_items,omitempty" type:"Repeated"`
}

func (s UIComponent) String() string {
	return tea.Prettify(s)
}

func (s UIComponent) GoString() string {
	return s.String()
}

func (s *UIComponent) SetType(v string) *UIComponent {
	s.Type = &v
	return s
}

func (s *UIComponent) SetContents(v []*ComponentContent) *UIComponent {
	s.Contents = v
	return s
}

func (s *UIComponent) SetListItems(v []*ItemComponent) *UIComponent {
	s.ListItems = v
	return s
}

// 采集点信息
type StatsDataDTO struct {
	// 横轴，毫秒时间戳
	X *int64 `json:"x,omitempty" xml:"x,omitempty" require:"true"`
	// 纵轴，数据（TPS 或者总量）
	Y *string `json:"y,omitempty" xml:"y,omitempty" require:"true"`
}

func (s StatsDataDTO) String() string {
	return tea.Prettify(s)
}

func (s StatsDataDTO) GoString() string {
	return s.String()
}

func (s *StatsDataDTO) SetX(v int64) *StatsDataDTO {
	s.X = &v
	return s
}

func (s *StatsDataDTO) SetY(v string) *StatsDataDTO {
	s.Y = &v
	return s
}

// 限流规则信息
type QueueLimitRulesDTO struct {
	// 修改时间
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 限流规则id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 限流算法
	LAlgorithm *string `json:"l_algorithm,omitempty" xml:"l_algorithm,omitempty" require:"true"`
	// 限流后操作
	LOperation *string `json:"l_operation,omitempty" xml:"l_operation,omitempty" require:"true"`
	// 方法
	Meth *string `json:"meth,omitempty" xml:"meth,omitempty" require:"true"`
	// 限流规则名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 队列id
	QueueId *int64 `json:"queue_id,omitempty" xml:"queue_id,omitempty" require:"true"`
	// 运行模式
	RMode *string `json:"r_mode,omitempty" xml:"r_mode,omitempty" require:"true"`
	// 状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 应用名
	App *string `json:"app,omitempty" xml:"app,omitempty" require:"true"`
}

func (s QueueLimitRulesDTO) String() string {
	return tea.Prettify(s)
}

func (s QueueLimitRulesDTO) GoString() string {
	return s.String()
}

func (s *QueueLimitRulesDTO) SetGmtModified(v string) *QueueLimitRulesDTO {
	s.GmtModified = &v
	return s
}

func (s *QueueLimitRulesDTO) SetId(v int64) *QueueLimitRulesDTO {
	s.Id = &v
	return s
}

func (s *QueueLimitRulesDTO) SetLAlgorithm(v string) *QueueLimitRulesDTO {
	s.LAlgorithm = &v
	return s
}

func (s *QueueLimitRulesDTO) SetLOperation(v string) *QueueLimitRulesDTO {
	s.LOperation = &v
	return s
}

func (s *QueueLimitRulesDTO) SetMeth(v string) *QueueLimitRulesDTO {
	s.Meth = &v
	return s
}

func (s *QueueLimitRulesDTO) SetName(v string) *QueueLimitRulesDTO {
	s.Name = &v
	return s
}

func (s *QueueLimitRulesDTO) SetQueueId(v int64) *QueueLimitRulesDTO {
	s.QueueId = &v
	return s
}

func (s *QueueLimitRulesDTO) SetRMode(v string) *QueueLimitRulesDTO {
	s.RMode = &v
	return s
}

func (s *QueueLimitRulesDTO) SetStatus(v int64) *QueueLimitRulesDTO {
	s.Status = &v
	return s
}

func (s *QueueLimitRulesDTO) SetApp(v string) *QueueLimitRulesDTO {
	s.App = &v
	return s
}

// 管理员用户信息
type AdminUserDTO struct {
	// 创建时间
	GmtCreate *int64 `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 修改时间
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
	// 数据库id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 登录名
	LoginName *string `json:"login_name,omitempty" xml:"login_name,omitempty" require:"true"`
	// 昵称
	NickName *string `json:"nick_name,omitempty" xml:"nick_name,omitempty" require:"true"`
	// 真实姓名
	RealName *string `json:"real_name,omitempty" xml:"real_name,omitempty" require:"true"`
	// 用户类型
	UserType *int64 `json:"user_type,omitempty" xml:"user_type,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
}

func (s AdminUserDTO) String() string {
	return tea.Prettify(s)
}

func (s AdminUserDTO) GoString() string {
	return s.String()
}

func (s *AdminUserDTO) SetGmtCreate(v int64) *AdminUserDTO {
	s.GmtCreate = &v
	return s
}

func (s *AdminUserDTO) SetGmtModified(v int64) *AdminUserDTO {
	s.GmtModified = &v
	return s
}

func (s *AdminUserDTO) SetId(v int64) *AdminUserDTO {
	s.Id = &v
	return s
}

func (s *AdminUserDTO) SetLoginName(v string) *AdminUserDTO {
	s.LoginName = &v
	return s
}

func (s *AdminUserDTO) SetNickName(v string) *AdminUserDTO {
	s.NickName = &v
	return s
}

func (s *AdminUserDTO) SetRealName(v string) *AdminUserDTO {
	s.RealName = &v
	return s
}

func (s *AdminUserDTO) SetUserType(v int64) *AdminUserDTO {
	s.UserType = &v
	return s
}

func (s *AdminUserDTO) SetOperator(v string) *AdminUserDTO {
	s.Operator = &v
	return s
}

// 队列的消费offset相关信息
type ConsumeQueueOffset struct {
	// topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// queue所在broker的名字
	BrokerName *string `json:"broker_name,omitempty" xml:"broker_name,omitempty" require:"true"`
	// queue id
	QueueId *int64 `json:"queue_id,omitempty" xml:"queue_id,omitempty" require:"true"`
	// 消费位点
	BrokerOffset *int64 `json:"broker_offset,omitempty" xml:"broker_offset,omitempty" require:"true"`
	// 消费端offset
	ConsumerOffset *int64 `json:"consumer_offset,omitempty" xml:"consumer_offset,omitempty" require:"true"`
	// 最后时间（时间戳）
	//
	LastTimestamp *int64 `json:"last_timestamp,omitempty" xml:"last_timestamp,omitempty" require:"true"`
	// 消费端地址
	ClientAddr *string `json:"client_addr,omitempty" xml:"client_addr,omitempty" require:"true"`
	// 消费者客户端id
	//
	ClientId *string `json:"client_id,omitempty" xml:"client_id,omitempty" require:"true"`
	// 消息堆积数
	//
	Accumulate *int64 `json:"accumulate,omitempty" xml:"accumulate,omitempty" require:"true"`
	// queue位点和消费端位点差
	Difference *int64 `json:"difference,omitempty" xml:"difference,omitempty" require:"true"`
}

func (s ConsumeQueueOffset) String() string {
	return tea.Prettify(s)
}

func (s ConsumeQueueOffset) GoString() string {
	return s.String()
}

func (s *ConsumeQueueOffset) SetTopic(v string) *ConsumeQueueOffset {
	s.Topic = &v
	return s
}

func (s *ConsumeQueueOffset) SetBrokerName(v string) *ConsumeQueueOffset {
	s.BrokerName = &v
	return s
}

func (s *ConsumeQueueOffset) SetQueueId(v int64) *ConsumeQueueOffset {
	s.QueueId = &v
	return s
}

func (s *ConsumeQueueOffset) SetBrokerOffset(v int64) *ConsumeQueueOffset {
	s.BrokerOffset = &v
	return s
}

func (s *ConsumeQueueOffset) SetConsumerOffset(v int64) *ConsumeQueueOffset {
	s.ConsumerOffset = &v
	return s
}

func (s *ConsumeQueueOffset) SetLastTimestamp(v int64) *ConsumeQueueOffset {
	s.LastTimestamp = &v
	return s
}

func (s *ConsumeQueueOffset) SetClientAddr(v string) *ConsumeQueueOffset {
	s.ClientAddr = &v
	return s
}

func (s *ConsumeQueueOffset) SetClientId(v string) *ConsumeQueueOffset {
	s.ClientId = &v
	return s
}

func (s *ConsumeQueueOffset) SetAccumulate(v int64) *ConsumeQueueOffset {
	s.Accumulate = &v
	return s
}

func (s *ConsumeQueueOffset) SetDifference(v int64) *ConsumeQueueOffset {
	s.Difference = &v
	return s
}

// group
type GroupDTO struct {
	// 集群名
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty"`
	// 删除标志
	DeleteMark *string `json:"delete_mark,omitempty" xml:"delete_mark,omitempty"`
	// 创建时间
	GmtCreate *int64 `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 修改时间
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
	// Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 查询的 Group ID 适用的协议。TCP 协议和 HTTP 协议的 Group ID 不可以共用，需要分别创建。取值说明如下：
	//
	// tcp：表示该 Group ID 仅适用于 TCP 协议的消息收发。
	// http：表示该 Group ID 仅适用于 HTTP 协议的消息收发。
	GroupType *string `json:"group_type,omitempty" xml:"group_type,omitempty" require:"true"`
	// 数据库 ID
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
	// 读权限
	ReadEnable *bool `json:"read_enable,omitempty" xml:"read_enable,omitempty"`
	// Group 备注信息
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty" require:"true"`
	// 生效范围
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// 版本号
	Version *int64 `json:"version,omitempty" xml:"version,omitempty"`
	// retry topic读队列数
	RetryReadQueueNum *int64 `json:"retry_read_queue_num,omitempty" xml:"retry_read_queue_num,omitempty"`
	// retry topic写队列数
	RetryWriteQueueNum *int64 `json:"retry_write_queue_num,omitempty" xml:"retry_write_queue_num,omitempty"`
	// retry topic读写权限
	RetryPerm *int64 `json:"retry_perm,omitempty" xml:"retry_perm,omitempty"`
	// Group 所属的应用名称，要求应用名在 zappinfo 上可查
	Owner *string `json:"owner,omitempty" xml:"owner,omitempty"`
}

func (s GroupDTO) String() string {
	return tea.Prettify(s)
}

func (s GroupDTO) GoString() string {
	return s.String()
}

func (s *GroupDTO) SetCluster(v string) *GroupDTO {
	s.Cluster = &v
	return s
}

func (s *GroupDTO) SetDeleteMark(v string) *GroupDTO {
	s.DeleteMark = &v
	return s
}

func (s *GroupDTO) SetGmtCreate(v int64) *GroupDTO {
	s.GmtCreate = &v
	return s
}

func (s *GroupDTO) SetGmtModified(v int64) *GroupDTO {
	s.GmtModified = &v
	return s
}

func (s *GroupDTO) SetGroupId(v string) *GroupDTO {
	s.GroupId = &v
	return s
}

func (s *GroupDTO) SetGroupType(v string) *GroupDTO {
	s.GroupType = &v
	return s
}

func (s *GroupDTO) SetId(v int64) *GroupDTO {
	s.Id = &v
	return s
}

func (s *GroupDTO) SetInstanceId(v string) *GroupDTO {
	s.InstanceId = &v
	return s
}

func (s *GroupDTO) SetOperator(v string) *GroupDTO {
	s.Operator = &v
	return s
}

func (s *GroupDTO) SetReadEnable(v bool) *GroupDTO {
	s.ReadEnable = &v
	return s
}

func (s *GroupDTO) SetRemark(v string) *GroupDTO {
	s.Remark = &v
	return s
}

func (s *GroupDTO) SetScope(v string) *GroupDTO {
	s.Scope = &v
	return s
}

func (s *GroupDTO) SetVersion(v int64) *GroupDTO {
	s.Version = &v
	return s
}

func (s *GroupDTO) SetRetryReadQueueNum(v int64) *GroupDTO {
	s.RetryReadQueueNum = &v
	return s
}

func (s *GroupDTO) SetRetryWriteQueueNum(v int64) *GroupDTO {
	s.RetryWriteQueueNum = &v
	return s
}

func (s *GroupDTO) SetRetryPerm(v int64) *GroupDTO {
	s.RetryPerm = &v
	return s
}

func (s *GroupDTO) SetOwner(v string) *GroupDTO {
	s.Owner = &v
	return s
}

// 该集群当前在线客户端信息
type ConnectionDTO struct {
	// 该消费实例的地址和端口
	ClientAddr *string `json:"client_addr,omitempty" xml:"client_addr,omitempty" require:"true"`
	// 消费实例的 ID
	ClientId *string `json:"client_id,omitempty" xml:"client_id,omitempty" require:"true"`
	// 消费端语言
	Language *string `json:"language,omitempty" xml:"language,omitempty" require:"true"`
	// 宿主机 IP 或公网 IP
	RemoteIp *string `json:"remote_ip,omitempty" xml:"remote_ip,omitempty" require:"true"`
	// 消费端版本
	Version *string `json:"version,omitempty" xml:"version,omitempty" require:"true"`
}

func (s ConnectionDTO) String() string {
	return tea.Prettify(s)
}

func (s ConnectionDTO) GoString() string {
	return s.String()
}

func (s *ConnectionDTO) SetClientAddr(v string) *ConnectionDTO {
	s.ClientAddr = &v
	return s
}

func (s *ConnectionDTO) SetClientId(v string) *ConnectionDTO {
	s.ClientId = &v
	return s
}

func (s *ConnectionDTO) SetLanguage(v string) *ConnectionDTO {
	s.Language = &v
	return s
}

func (s *ConnectionDTO) SetRemoteIp(v string) *ConnectionDTO {
	s.RemoteIp = &v
	return s
}

func (s *ConnectionDTO) SetVersion(v string) *ConnectionDTO {
	s.Version = &v
	return s
}

// 列配置
type ColumnConfig struct {
	// 别名
	Alias *string `json:"alias,omitempty" xml:"alias,omitempty"`
	// 转化类型
	CastType *string `json:"cast_type,omitempty" xml:"cast_type,omitempty"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 列类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 当前字段 可转化成的类型选项
	CastTypeOptions []*string `json:"cast_type_options,omitempty" xml:"cast_type_options,omitempty" type:"Repeated"`
}

func (s ColumnConfig) String() string {
	return tea.Prettify(s)
}

func (s ColumnConfig) GoString() string {
	return s.String()
}

func (s *ColumnConfig) SetAlias(v string) *ColumnConfig {
	s.Alias = &v
	return s
}

func (s *ColumnConfig) SetCastType(v string) *ColumnConfig {
	s.CastType = &v
	return s
}

func (s *ColumnConfig) SetName(v string) *ColumnConfig {
	s.Name = &v
	return s
}

func (s *ColumnConfig) SetType(v string) *ColumnConfig {
	s.Type = &v
	return s
}

func (s *ColumnConfig) SetCastTypeOptions(v []*string) *ColumnConfig {
	s.CastTypeOptions = v
	return s
}

// 应用页面
type ApplicationDTO struct {
	// 创建时间
	GmtCreated *string `json:"gmt_created,omitempty" xml:"gmt_created,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 应用id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 应用名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 服务端get队列
	PubGetQueue *string `json:"pub_get_queue,omitempty" xml:"pub_get_queue,omitempty"`
	// 服务端put队列
	PubPutQueue *string `json:"pub_put_queue,omitempty" xml:"pub_put_queue,omitempty"`
	// 服务端开关
	PubRpcStatus *int64 `json:"pub_rpc_status,omitempty" xml:"pub_rpc_status,omitempty"`
	// 客户端get队列
	SubGetQueue *string `json:"sub_get_queue,omitempty" xml:"sub_get_queue,omitempty"`
	// 客户端put队列
	SubPutQueue *string `json:"sub_put_queue,omitempty" xml:"sub_put_queue,omitempty"`
	// rpc分流比例
	SubRpcScale *int64 `json:"sub_rpc_scale,omitempty" xml:"sub_rpc_scale,omitempty"`
	// 服务类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s ApplicationDTO) String() string {
	return tea.Prettify(s)
}

func (s ApplicationDTO) GoString() string {
	return s.String()
}

func (s *ApplicationDTO) SetGmtCreated(v string) *ApplicationDTO {
	s.GmtCreated = &v
	return s
}

func (s *ApplicationDTO) SetId(v int64) *ApplicationDTO {
	s.Id = &v
	return s
}

func (s *ApplicationDTO) SetName(v string) *ApplicationDTO {
	s.Name = &v
	return s
}

func (s *ApplicationDTO) SetPubGetQueue(v string) *ApplicationDTO {
	s.PubGetQueue = &v
	return s
}

func (s *ApplicationDTO) SetPubPutQueue(v string) *ApplicationDTO {
	s.PubPutQueue = &v
	return s
}

func (s *ApplicationDTO) SetPubRpcStatus(v int64) *ApplicationDTO {
	s.PubRpcStatus = &v
	return s
}

func (s *ApplicationDTO) SetSubGetQueue(v string) *ApplicationDTO {
	s.SubGetQueue = &v
	return s
}

func (s *ApplicationDTO) SetSubPutQueue(v string) *ApplicationDTO {
	s.SubPutQueue = &v
	return s
}

func (s *ApplicationDTO) SetSubRpcScale(v int64) *ApplicationDTO {
	s.SubRpcScale = &v
	return s
}

func (s *ApplicationDTO) SetType(v string) *ApplicationDTO {
	s.Type = &v
	return s
}

// nodes
type NodePageDO struct {
	// nodes
	Content []*NodeDO `json:"content,omitempty" xml:"content,omitempty" require:"true" type:"Repeated"`
	// page
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// page size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// total
	Total *int64 `json:"total,omitempty" xml:"total,omitempty" require:"true"`
}

func (s NodePageDO) String() string {
	return tea.Prettify(s)
}

func (s NodePageDO) GoString() string {
	return s.String()
}

func (s *NodePageDO) SetContent(v []*NodeDO) *NodePageDO {
	s.Content = v
	return s
}

func (s *NodePageDO) SetPageNum(v int64) *NodePageDO {
	s.PageNum = &v
	return s
}

func (s *NodePageDO) SetPageSize(v int64) *NodePageDO {
	s.PageSize = &v
	return s
}

func (s *NodePageDO) SetTotal(v int64) *NodePageDO {
	s.Total = &v
	return s
}

// 执行记录详情
type JobRecordDTO struct {
	// 结束时间
	End *string `json:"end,omitempty" xml:"end,omitempty"`
	// 任务执行id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 执行总进度
	//
	// 总的进度为100，这里的进度条如何配置需要，前端同学定一下，我来改
	Progress *int64 `json:"progress,omitempty" xml:"progress,omitempty" require:"true"`
	// 任务执行状态
	RunType *string `json:"run_type,omitempty" xml:"run_type,omitempty" require:"true"`
	// 开始时间
	Start *string `json:"start,omitempty" xml:"start,omitempty" require:"true"`
	// 任务执行记录集合
	TaskRecords []*TaskRecordDTO `json:"task_records,omitempty" xml:"task_records,omitempty" require:"true" type:"Repeated"`
	// 执行耗时
	Time *int64 `json:"time,omitempty" xml:"time,omitempty"`
	// 触发类型
	TriggerType *string `json:"trigger_type,omitempty" xml:"trigger_type,omitempty" require:"true"`
	// 分区信息
	Partition *string `json:"partition,omitempty" xml:"partition,omitempty" require:"true"`
	// 触发上下文
	Context *string `json:"context,omitempty" xml:"context,omitempty"`
}

func (s JobRecordDTO) String() string {
	return tea.Prettify(s)
}

func (s JobRecordDTO) GoString() string {
	return s.String()
}

func (s *JobRecordDTO) SetEnd(v string) *JobRecordDTO {
	s.End = &v
	return s
}

func (s *JobRecordDTO) SetId(v string) *JobRecordDTO {
	s.Id = &v
	return s
}

func (s *JobRecordDTO) SetProgress(v int64) *JobRecordDTO {
	s.Progress = &v
	return s
}

func (s *JobRecordDTO) SetRunType(v string) *JobRecordDTO {
	s.RunType = &v
	return s
}

func (s *JobRecordDTO) SetStart(v string) *JobRecordDTO {
	s.Start = &v
	return s
}

func (s *JobRecordDTO) SetTaskRecords(v []*TaskRecordDTO) *JobRecordDTO {
	s.TaskRecords = v
	return s
}

func (s *JobRecordDTO) SetTime(v int64) *JobRecordDTO {
	s.Time = &v
	return s
}

func (s *JobRecordDTO) SetTriggerType(v string) *JobRecordDTO {
	s.TriggerType = &v
	return s
}

func (s *JobRecordDTO) SetPartition(v string) *JobRecordDTO {
	s.Partition = &v
	return s
}

func (s *JobRecordDTO) SetContext(v string) *JobRecordDTO {
	s.Context = &v
	return s
}

// room
type RoomDO struct {
	// cluster
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty" require:"true"`
	// endpoint
	Endpoint *string `json:"endpoint,omitempty" xml:"endpoint,omitempty"`
	// endpoint_type
	EndpointType *string `json:"endpoint_type,omitempty" xml:"endpoint_type,omitempty"`
	// region
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
	// room
	Room *string `json:"room,omitempty" xml:"room,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// gmt_create
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// gmt_modified
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
}

func (s RoomDO) String() string {
	return tea.Prettify(s)
}

func (s RoomDO) GoString() string {
	return s.String()
}

func (s *RoomDO) SetCluster(v string) *RoomDO {
	s.Cluster = &v
	return s
}

func (s *RoomDO) SetEndpoint(v string) *RoomDO {
	s.Endpoint = &v
	return s
}

func (s *RoomDO) SetEndpointType(v string) *RoomDO {
	s.EndpointType = &v
	return s
}

func (s *RoomDO) SetRegion(v string) *RoomDO {
	s.Region = &v
	return s
}

func (s *RoomDO) SetRoom(v string) *RoomDO {
	s.Room = &v
	return s
}

func (s *RoomDO) SetId(v int64) *RoomDO {
	s.Id = &v
	return s
}

func (s *RoomDO) SetGmtCreate(v string) *RoomDO {
	s.GmtCreate = &v
	return s
}

func (s *RoomDO) SetGmtModified(v string) *RoomDO {
	s.GmtModified = &v
	return s
}

// 任务实例摘要信息
type InstanceDigest struct {
	// job instance id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 分区信息
	Partition *string `json:"partition,omitempty" xml:"partition,omitempty" require:"true"`
	// 时间
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 任务状态
	State *string `json:"state,omitempty" xml:"state,omitempty" require:"true"`
}

func (s InstanceDigest) String() string {
	return tea.Prettify(s)
}

func (s InstanceDigest) GoString() string {
	return s.String()
}

func (s *InstanceDigest) SetId(v string) *InstanceDigest {
	s.Id = &v
	return s
}

func (s *InstanceDigest) SetPartition(v string) *InstanceDigest {
	s.Partition = &v
	return s
}

func (s *InstanceDigest) SetGmtCreate(v string) *InstanceDigest {
	s.GmtCreate = &v
	return s
}

func (s *InstanceDigest) SetState(v string) *InstanceDigest {
	s.State = &v
	return s
}

// 告警日志查询集合
type WarnLogPageDTO struct {
	// 报警日志信息
	Content []*WarnLogDTO `json:"content,omitempty" xml:"content,omitempty" require:"true" type:"Repeated"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页显示条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 总条数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty" require:"true"`
}

func (s WarnLogPageDTO) String() string {
	return tea.Prettify(s)
}

func (s WarnLogPageDTO) GoString() string {
	return s.String()
}

func (s *WarnLogPageDTO) SetContent(v []*WarnLogDTO) *WarnLogPageDTO {
	s.Content = v
	return s
}

func (s *WarnLogPageDTO) SetPageNum(v int64) *WarnLogPageDTO {
	s.PageNum = &v
	return s
}

func (s *WarnLogPageDTO) SetPageSize(v int64) *WarnLogPageDTO {
	s.PageSize = &v
	return s
}

func (s *WarnLogPageDTO) SetTotal(v int64) *WarnLogPageDTO {
	s.Total = &v
	return s
}

// 指定 Group ID 的连接信息
type ConsumerGetConnectionDTO struct {
	// 指定 Group ID 的连接信息
	//
	//
	ConnectionList []*ConnectionDTO `json:"connection_list,omitempty" xml:"connection_list,omitempty" require:"true" type:"Repeated"`
}

func (s ConsumerGetConnectionDTO) String() string {
	return tea.Prettify(s)
}

func (s ConsumerGetConnectionDTO) GoString() string {
	return s.String()
}

func (s *ConsumerGetConnectionDTO) SetConnectionList(v []*ConnectionDTO) *ConsumerGetConnectionDTO {
	s.ConnectionList = v
	return s
}

// 积压数据点
type BacklogMetricItem struct {
	// 积压消息量
	BacklogCnt *int64 `json:"backlog_cnt,omitempty" xml:"backlog_cnt,omitempty" require:"true"`
	// 积压数据的时间戳
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty" require:"true"`
}

func (s BacklogMetricItem) String() string {
	return tea.Prettify(s)
}

func (s BacklogMetricItem) GoString() string {
	return s.String()
}

func (s *BacklogMetricItem) SetBacklogCnt(v int64) *BacklogMetricItem {
	s.BacklogCnt = &v
	return s
}

func (s *BacklogMetricItem) SetTimestamp(v int64) *BacklogMetricItem {
	s.Timestamp = &v
	return s
}

// 清除消费进度结果对象
type ClearOffsetResultDTO struct {
	// GroupId
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// 操作结果
	Result *string `json:"result,omitempty" xml:"result,omitempty" require:"true"`
}

func (s ClearOffsetResultDTO) String() string {
	return tea.Prettify(s)
}

func (s ClearOffsetResultDTO) GoString() string {
	return s.String()
}

func (s *ClearOffsetResultDTO) SetGroupId(v string) *ClearOffsetResultDTO {
	s.GroupId = &v
	return s
}

func (s *ClearOffsetResultDTO) SetTopic(v string) *ClearOffsetResultDTO {
	s.Topic = &v
	return s
}

func (s *ClearOffsetResultDTO) SetResult(v string) *ClearOffsetResultDTO {
	s.Result = &v
	return s
}

// 工单详情
type ProcessDTO struct {
	// 工单名称
	ProcessName *string `json:"process_name,omitempty" xml:"process_name,omitempty" require:"true"`
	// 状态
	ProcessStatus *string `json:"process_status,omitempty" xml:"process_status,omitempty" require:"true"`
	// 工单链接
	ProcessUrl *string `json:"process_url,omitempty" xml:"process_url,omitempty" require:"true"`
}

func (s ProcessDTO) String() string {
	return tea.Prettify(s)
}

func (s ProcessDTO) GoString() string {
	return s.String()
}

func (s *ProcessDTO) SetProcessName(v string) *ProcessDTO {
	s.ProcessName = &v
	return s
}

func (s *ProcessDTO) SetProcessStatus(v string) *ProcessDTO {
	s.ProcessStatus = &v
	return s
}

func (s *ProcessDTO) SetProcessUrl(v string) *ProcessDTO {
	s.ProcessUrl = &v
	return s
}

// cell页面数据
type CellPageDTO struct {
	// cell数据
	Content []*CellDO `json:"content,omitempty" xml:"content,omitempty" require:"true" type:"Repeated"`
	// 页号
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 总量
	Total *int64 `json:"total,omitempty" xml:"total,omitempty" require:"true"`
}

func (s CellPageDTO) String() string {
	return tea.Prettify(s)
}

func (s CellPageDTO) GoString() string {
	return s.String()
}

func (s *CellPageDTO) SetContent(v []*CellDO) *CellPageDTO {
	s.Content = v
	return s
}

func (s *CellPageDTO) SetPageNum(v int64) *CellPageDTO {
	s.PageNum = &v
	return s
}

func (s *CellPageDTO) SetPageSize(v int64) *CellPageDTO {
	s.PageSize = &v
	return s
}

func (s *CellPageDTO) SetTotal(v int64) *CellPageDTO {
	s.Total = &v
	return s
}

// Api接口信息
type ApiInfoDTO struct {
	// api详细描述
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// api名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 负责人
	Owner *string `json:"owner,omitempty" xml:"owner,omitempty" require:"true"`
	// api路径
	Path *string `json:"path,omitempty" xml:"path,omitempty" require:"true"`
	// api简介
	Summary *string `json:"summary,omitempty" xml:"summary,omitempty" require:"true"`
	// 开关
	SwitchOpen *bool `json:"switch_open,omitempty" xml:"switch_open,omitempty" require:"true"`
	// sofamq action 名称
	SofamqAction *string `json:"sofamq_action,omitempty" xml:"sofamq_action,omitempty"`
	// 是否默认分配给普通用户
	UserDefaultAssign *bool `json:"user_default_assign,omitempty" xml:"user_default_assign,omitempty"`
	// 是否默认分配给 app owner
	OwnerDefaultAssign *bool `json:"owner_default_assign,omitempty" xml:"owner_default_assign,omitempty"`
}

func (s ApiInfoDTO) String() string {
	return tea.Prettify(s)
}

func (s ApiInfoDTO) GoString() string {
	return s.String()
}

func (s *ApiInfoDTO) SetDescription(v string) *ApiInfoDTO {
	s.Description = &v
	return s
}

func (s *ApiInfoDTO) SetName(v string) *ApiInfoDTO {
	s.Name = &v
	return s
}

func (s *ApiInfoDTO) SetOwner(v string) *ApiInfoDTO {
	s.Owner = &v
	return s
}

func (s *ApiInfoDTO) SetPath(v string) *ApiInfoDTO {
	s.Path = &v
	return s
}

func (s *ApiInfoDTO) SetSummary(v string) *ApiInfoDTO {
	s.Summary = &v
	return s
}

func (s *ApiInfoDTO) SetSwitchOpen(v bool) *ApiInfoDTO {
	s.SwitchOpen = &v
	return s
}

func (s *ApiInfoDTO) SetSofamqAction(v string) *ApiInfoDTO {
	s.SofamqAction = &v
	return s
}

func (s *ApiInfoDTO) SetUserDefaultAssign(v bool) *ApiInfoDTO {
	s.UserDefaultAssign = &v
	return s
}

func (s *ApiInfoDTO) SetOwnerDefaultAssign(v bool) *ApiInfoDTO {
	s.OwnerDefaultAssign = &v
	return s
}

// Consumer 的消费堆积情况信息
type ConsumerAccumulateDTO struct {
	// 该 Group ID 下消费者实例群组接收消息的总 TPS
	ConsumeTps *string `json:"consume_tps,omitempty" xml:"consume_tps,omitempty" require:"true"`
	// 该 Topic 所发消息的最大消费延迟时间
	DelayTime *int64 `json:"delay_time,omitempty" xml:"delay_time,omitempty" require:"true"`
	// 各个 Topic 具体情况
	DetailInTopicList []*DetailInTopicDTO `json:"detail_in_topic_list,omitempty" xml:"detail_in_topic_list,omitempty" require:"true" type:"Repeated"`
	// 该 Topic 中最近一条被消费的信息的生产时间
	LastTimestamp *int64 `json:"last_timestamp,omitempty" xml:"last_timestamp,omitempty" require:"true"`
	// 该 Group ID 下是否有消费者实例在线；只要有一个消费者实例在线，该 Group ID 状态即为在线。取值说明如下：
	//
	// true：状态为在线
	// false：状态为不在线
	Online *bool `json:"online,omitempty" xml:"online,omitempty" require:"true"`
	// 该 Topic 的消费堆积数量
	TotalDiff *int64 `json:"total_diff,omitempty" xml:"total_diff,omitempty" require:"true"`
}

func (s ConsumerAccumulateDTO) String() string {
	return tea.Prettify(s)
}

func (s ConsumerAccumulateDTO) GoString() string {
	return s.String()
}

func (s *ConsumerAccumulateDTO) SetConsumeTps(v string) *ConsumerAccumulateDTO {
	s.ConsumeTps = &v
	return s
}

func (s *ConsumerAccumulateDTO) SetDelayTime(v int64) *ConsumerAccumulateDTO {
	s.DelayTime = &v
	return s
}

func (s *ConsumerAccumulateDTO) SetDetailInTopicList(v []*DetailInTopicDTO) *ConsumerAccumulateDTO {
	s.DetailInTopicList = v
	return s
}

func (s *ConsumerAccumulateDTO) SetLastTimestamp(v int64) *ConsumerAccumulateDTO {
	s.LastTimestamp = &v
	return s
}

func (s *ConsumerAccumulateDTO) SetOnline(v bool) *ConsumerAccumulateDTO {
	s.Online = &v
	return s
}

func (s *ConsumerAccumulateDTO) SetTotalDiff(v int64) *ConsumerAccumulateDTO {
	s.TotalDiff = &v
	return s
}

// 采集数据集合
type TrendTpsDTO struct {
	// 数据集合
	Records []*StatsDataDTO `json:"records,omitempty" xml:"records,omitempty" require:"true" type:"Repeated"`
	// Table 的名称
	Title *string `json:"title,omitempty" xml:"title,omitempty" require:"true"`
	// 时间戳，单位毫秒
	XUnit *string `json:"x_unit,omitempty" xml:"x_unit,omitempty" require:"true"`
	// 纵轴单位
	//
	YUnit *string `json:"y_unit,omitempty" xml:"y_unit,omitempty" require:"true"`
}

func (s TrendTpsDTO) String() string {
	return tea.Prettify(s)
}

func (s TrendTpsDTO) GoString() string {
	return s.String()
}

func (s *TrendTpsDTO) SetRecords(v []*StatsDataDTO) *TrendTpsDTO {
	s.Records = v
	return s
}

func (s *TrendTpsDTO) SetTitle(v string) *TrendTpsDTO {
	s.Title = &v
	return s
}

func (s *TrendTpsDTO) SetXUnit(v string) *TrendTpsDTO {
	s.XUnit = &v
	return s
}

func (s *TrendTpsDTO) SetYUnit(v string) *TrendTpsDTO {
	s.YUnit = &v
	return s
}

// ConsumerTimeSpan查询结果
type ConsumerTimeSpanDTO struct {
	//  当前 Group 消费该 Topic 的最新的时间
	ConsumeTimestamp *int64 `json:"consume_timestamp,omitempty" xml:"consume_timestamp,omitempty" require:"true"`
	// 需查询的消费端 Group ID 所对应的实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 整个 Topic 目前存储的最早的消息的时间
	MaxTimestamp *int64 `json:"max_timestamp,omitempty" xml:"max_timestamp,omitempty" require:"true"`
	//  整个 Topic 目前存储的最新的消息的时间
	MinTimestamp *int64 `json:"min_timestamp,omitempty" xml:"min_timestamp,omitempty" require:"true"`
	// 需查询的 Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s ConsumerTimeSpanDTO) String() string {
	return tea.Prettify(s)
}

func (s ConsumerTimeSpanDTO) GoString() string {
	return s.String()
}

func (s *ConsumerTimeSpanDTO) SetConsumeTimestamp(v int64) *ConsumerTimeSpanDTO {
	s.ConsumeTimestamp = &v
	return s
}

func (s *ConsumerTimeSpanDTO) SetInstanceId(v string) *ConsumerTimeSpanDTO {
	s.InstanceId = &v
	return s
}

func (s *ConsumerTimeSpanDTO) SetMaxTimestamp(v int64) *ConsumerTimeSpanDTO {
	s.MaxTimestamp = &v
	return s
}

func (s *ConsumerTimeSpanDTO) SetMinTimestamp(v int64) *ConsumerTimeSpanDTO {
	s.MinTimestamp = &v
	return s
}

func (s *ConsumerTimeSpanDTO) SetTopic(v string) *ConsumerTimeSpanDTO {
	s.Topic = &v
	return s
}

// 二元组
type Pair struct {
	// 键值对中的 键
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// 键值对中的值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s Pair) String() string {
	return tea.Prettify(s)
}

func (s Pair) GoString() string {
	return s.String()
}

func (s *Pair) SetKey(v string) *Pair {
	s.Key = &v
	return s
}

func (s *Pair) SetValue(v string) *Pair {
	s.Value = &v
	return s
}

// topic
type Topic struct {
	// creation_time
	CreationTime *string `json:"creation_time,omitempty" xml:"creation_time,omitempty"`
	// desc
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty"`
	// eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
	// topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty"`
	// update_time
	UpdateTime *string `json:"update_time,omitempty" xml:"update_time,omitempty"`
}

func (s Topic) String() string {
	return tea.Prettify(s)
}

func (s Topic) GoString() string {
	return s.String()
}

func (s *Topic) SetCreationTime(v string) *Topic {
	s.CreationTime = &v
	return s
}

func (s *Topic) SetDesc(v string) *Topic {
	s.Desc = &v
	return s
}

func (s *Topic) SetEventcode(v string) *Topic {
	s.Eventcode = &v
	return s
}

func (s *Topic) SetId(v string) *Topic {
	s.Id = &v
	return s
}

func (s *Topic) SetInstanceId(v string) *Topic {
	s.InstanceId = &v
	return s
}

func (s *Topic) SetTopic(v string) *Topic {
	s.Topic = &v
	return s
}

func (s *Topic) SetUpdateTime(v string) *Topic {
	s.UpdateTime = &v
	return s
}

// Group 统计列表详情
type GroupStatsItem struct {
	// 每分钟消息大小
	Bpm *int64 `json:"bpm,omitempty" xml:"bpm,omitempty" require:"true"`
	// 死信数量
	Dlq *int64 `json:"dlq,omitempty" xml:"dlq,omitempty" require:"true"`
	// 消费组 Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 当前 Group 消息积压的数量
	MsgBacklog *int64 `json:"msg_backlog,omitempty" xml:"msg_backlog,omitempty" require:"true"`
	// 当前每分钟 Group ID 拉请求数量
	Ppm *int64 `json:"ppm,omitempty" xml:"ppm,omitempty" require:"true"`
	// Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// 每分钟拉取的消息数量
	Tpm *int64 `json:"tpm,omitempty" xml:"tpm,omitempty" require:"true"`
	// 每天拉取的消息数量
	Tpd *int64 `json:"tpd,omitempty" xml:"tpd,omitempty" require:"true"`
}

func (s GroupStatsItem) String() string {
	return tea.Prettify(s)
}

func (s GroupStatsItem) GoString() string {
	return s.String()
}

func (s *GroupStatsItem) SetBpm(v int64) *GroupStatsItem {
	s.Bpm = &v
	return s
}

func (s *GroupStatsItem) SetDlq(v int64) *GroupStatsItem {
	s.Dlq = &v
	return s
}

func (s *GroupStatsItem) SetGroupId(v string) *GroupStatsItem {
	s.GroupId = &v
	return s
}

func (s *GroupStatsItem) SetMsgBacklog(v int64) *GroupStatsItem {
	s.MsgBacklog = &v
	return s
}

func (s *GroupStatsItem) SetPpm(v int64) *GroupStatsItem {
	s.Ppm = &v
	return s
}

func (s *GroupStatsItem) SetTopic(v string) *GroupStatsItem {
	s.Topic = &v
	return s
}

func (s *GroupStatsItem) SetTpm(v int64) *GroupStatsItem {
	s.Tpm = &v
	return s
}

func (s *GroupStatsItem) SetTpd(v int64) *GroupStatsItem {
	s.Tpd = &v
	return s
}

// 队列详情信息以及分页信息
type QueuePageDescDTO struct {
	// 总页数
	PageCount *int64 `json:"page_count,omitempty" xml:"page_count,omitempty" require:"true"`
	// 当前页面
	PageCurrent *int64 `json:"page_current,omitempty" xml:"page_current,omitempty" require:"true"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 队列详情信息
	Records []*QueueDescDTO `json:"records,omitempty" xml:"records,omitempty" require:"true" type:"Repeated"`
	// 总记录数
	RowCount *int64 `json:"row_count,omitempty" xml:"row_count,omitempty" require:"true"`
}

func (s QueuePageDescDTO) String() string {
	return tea.Prettify(s)
}

func (s QueuePageDescDTO) GoString() string {
	return s.String()
}

func (s *QueuePageDescDTO) SetPageCount(v int64) *QueuePageDescDTO {
	s.PageCount = &v
	return s
}

func (s *QueuePageDescDTO) SetPageCurrent(v int64) *QueuePageDescDTO {
	s.PageCurrent = &v
	return s
}

func (s *QueuePageDescDTO) SetPageSize(v int64) *QueuePageDescDTO {
	s.PageSize = &v
	return s
}

func (s *QueuePageDescDTO) SetRecords(v []*QueueDescDTO) *QueuePageDescDTO {
	s.Records = v
	return s
}

func (s *QueuePageDescDTO) SetRowCount(v int64) *QueuePageDescDTO {
	s.RowCount = &v
	return s
}

// config page
type ConfigPageDTO struct {
	// config page
	Content []*ConfigDTO `json:"content,omitempty" xml:"content,omitempty" require:"true" type:"Repeated"`
	// 页号
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 总量
	Total *int64 `json:"total,omitempty" xml:"total,omitempty" require:"true"`
}

func (s ConfigPageDTO) String() string {
	return tea.Prettify(s)
}

func (s ConfigPageDTO) GoString() string {
	return s.String()
}

func (s *ConfigPageDTO) SetContent(v []*ConfigDTO) *ConfigPageDTO {
	s.Content = v
	return s
}

func (s *ConfigPageDTO) SetPageNum(v int64) *ConfigPageDTO {
	s.PageNum = &v
	return s
}

func (s *ConfigPageDTO) SetPageSize(v int64) *ConfigPageDTO {
	s.PageSize = &v
	return s
}

func (s *ConfigPageDTO) SetTotal(v int64) *ConfigPageDTO {
	s.Total = &v
	return s
}

// dms
type WhitelistPageDO struct {
	// content
	Content []*WhitelistDO `json:"content,omitempty" xml:"content,omitempty" require:"true" type:"Repeated"`
	// page_num
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// total
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s WhitelistPageDO) String() string {
	return tea.Prettify(s)
}

func (s WhitelistPageDO) GoString() string {
	return s.String()
}

func (s *WhitelistPageDO) SetContent(v []*WhitelistDO) *WhitelistPageDO {
	s.Content = v
	return s
}

func (s *WhitelistPageDO) SetPageNum(v int64) *WhitelistPageDO {
	s.PageNum = &v
	return s
}

func (s *WhitelistPageDO) SetPageSize(v int64) *WhitelistPageDO {
	s.PageSize = &v
	return s
}

func (s *WhitelistPageDO) SetTotal(v int64) *WhitelistPageDO {
	s.Total = &v
	return s
}

// sofa mq topic page
type TopicPageDTO struct {
	// Topic 信息
	Content []*TopicDTO `json:"content,omitempty" xml:"content,omitempty" require:"true" type:"Repeated"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页显示条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 总条数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty" require:"true"`
}

func (s TopicPageDTO) String() string {
	return tea.Prettify(s)
}

func (s TopicPageDTO) GoString() string {
	return s.String()
}

func (s *TopicPageDTO) SetContent(v []*TopicDTO) *TopicPageDTO {
	s.Content = v
	return s
}

func (s *TopicPageDTO) SetPageNum(v int64) *TopicPageDTO {
	s.PageNum = &v
	return s
}

func (s *TopicPageDTO) SetPageSize(v int64) *TopicPageDTO {
	s.PageSize = &v
	return s
}

func (s *TopicPageDTO) SetTotal(v int64) *TopicPageDTO {
	s.Total = &v
	return s
}

// trace result返回值
type TraceMapResultDTO struct {
	// 该查询任务的创建时间
	//
	//
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty" require:"true"`
	//  实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 该查询任务对应的 Message ID
	MsgId *string `json:"msg_id,omitempty" xml:"msg_id,omitempty" require:"true"`
	// 该查询任务对应的 Message Key
	MsgKey *string `json:"msg_key,omitempty" xml:"msg_key,omitempty" require:"true"`
	// 查询任务 ID
	QueryId *string `json:"query_id,omitempty" xml:"query_id,omitempty" require:"true"`
	// 该查询任务的结果。取值说明如下：finish：查询完成；working：查询中；removed：任务已删除。
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 该查询任务的 Topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// 该查询任务的匹配轨迹列表
	//
	TraceList []*TraceMapDTO `json:"trace_list,omitempty" xml:"trace_list,omitempty" require:"true" type:"Repeated"`
	// 该查询任务的最后更新时间
	UpdateTime *int64 `json:"update_time,omitempty" xml:"update_time,omitempty" require:"true"`
	//  查询用户 ID
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
}

func (s TraceMapResultDTO) String() string {
	return tea.Prettify(s)
}

func (s TraceMapResultDTO) GoString() string {
	return s.String()
}

func (s *TraceMapResultDTO) SetCreateTime(v int64) *TraceMapResultDTO {
	s.CreateTime = &v
	return s
}

func (s *TraceMapResultDTO) SetInstanceId(v string) *TraceMapResultDTO {
	s.InstanceId = &v
	return s
}

func (s *TraceMapResultDTO) SetMsgId(v string) *TraceMapResultDTO {
	s.MsgId = &v
	return s
}

func (s *TraceMapResultDTO) SetMsgKey(v string) *TraceMapResultDTO {
	s.MsgKey = &v
	return s
}

func (s *TraceMapResultDTO) SetQueryId(v string) *TraceMapResultDTO {
	s.QueryId = &v
	return s
}

func (s *TraceMapResultDTO) SetStatus(v string) *TraceMapResultDTO {
	s.Status = &v
	return s
}

func (s *TraceMapResultDTO) SetTopic(v string) *TraceMapResultDTO {
	s.Topic = &v
	return s
}

func (s *TraceMapResultDTO) SetTraceList(v []*TraceMapDTO) *TraceMapResultDTO {
	s.TraceList = v
	return s
}

func (s *TraceMapResultDTO) SetUpdateTime(v int64) *TraceMapResultDTO {
	s.UpdateTime = &v
	return s
}

func (s *TraceMapResultDTO) SetUserId(v string) *TraceMapResultDTO {
	s.UserId = &v
	return s
}

// 延迟信息
type DelayInfo struct {
	// 延迟时间
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
	// 值类型
	ValueType *string `json:"value_type,omitempty" xml:"value_type,omitempty" require:"true"`
}

func (s DelayInfo) String() string {
	return tea.Prettify(s)
}

func (s DelayInfo) GoString() string {
	return s.String()
}

func (s *DelayInfo) SetName(v string) *DelayInfo {
	s.Name = &v
	return s
}

func (s *DelayInfo) SetValue(v string) *DelayInfo {
	s.Value = &v
	return s
}

func (s *DelayInfo) SetValueType(v string) *DelayInfo {
	s.ValueType = &v
	return s
}

// slo配置
type SloSpec struct {
	// 是否开启
	Enable *bool `json:"enable,omitempty" xml:"enable,omitempty" require:"true"`
	// 是否是常驻任务
	LongRunningTask *bool `json:"long_running_task,omitempty" xml:"long_running_task,omitempty" require:"true"`
	// 默认可接受执行时间
	DefaultAcceptableExecutionInterval *int64 `json:"default_acceptable_execution_interval,omitempty" xml:"default_acceptable_execution_interval,omitempty" require:"true"`
}

func (s SloSpec) String() string {
	return tea.Prettify(s)
}

func (s SloSpec) GoString() string {
	return s.String()
}

func (s *SloSpec) SetEnable(v bool) *SloSpec {
	s.Enable = &v
	return s
}

func (s *SloSpec) SetLongRunningTask(v bool) *SloSpec {
	s.LongRunningTask = &v
	return s
}

func (s *SloSpec) SetDefaultAcceptableExecutionInterval(v int64) *SloSpec {
	s.DefaultAcceptableExecutionInterval = &v
	return s
}

// 队列路由域值
type QueueRouteEditionDTO struct {
	// 版本
	Edition *string `json:"edition,omitempty" xml:"edition,omitempty" require:"true"`
	// 路由版本（插入时可不填）
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 路由规则id（插入时可不填）
	RouteId *int64 `json:"route_id,omitempty" xml:"route_id,omitempty" require:"true"`
	// 权重
	Scale *int64 `json:"scale,omitempty" xml:"scale,omitempty" require:"true"`
}

func (s QueueRouteEditionDTO) String() string {
	return tea.Prettify(s)
}

func (s QueueRouteEditionDTO) GoString() string {
	return s.String()
}

func (s *QueueRouteEditionDTO) SetEdition(v string) *QueueRouteEditionDTO {
	s.Edition = &v
	return s
}

func (s *QueueRouteEditionDTO) SetId(v int64) *QueueRouteEditionDTO {
	s.Id = &v
	return s
}

func (s *QueueRouteEditionDTO) SetRouteId(v int64) *QueueRouteEditionDTO {
	s.RouteId = &v
	return s
}

func (s *QueueRouteEditionDTO) SetScale(v int64) *QueueRouteEditionDTO {
	s.Scale = &v
	return s
}

// 消息同步任务
type MsgdumpTaskDTO struct {
	// 描述
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty" require:"true"`
	// 源 eventcode
	SourceEventCode *string `json:"source_event_code,omitempty" xml:"source_event_code,omitempty" require:"true"`
	// 源实例 id
	SourceInstanceId *string `json:"source_instance_id,omitempty" xml:"source_instance_id,omitempty" require:"true"`
	// 源 topic
	SourceTopic *string `json:"source_topic,omitempty" xml:"source_topic,omitempty" require:"true"`
	// 任务状态
	// 0: 初始化中；1: 运行中；2: 停止中；3: 已停止
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 目标实例 id
	TargetInstanceId *string `json:"target_instance_id,omitempty" xml:"target_instance_id,omitempty" require:"true"`
	// 目标 tag
	TargetTag *string `json:"target_tag,omitempty" xml:"target_tag,omitempty" require:"true"`
	// 目标 topic
	TargetTopic *string `json:"target_topic,omitempty" xml:"target_topic,omitempty" require:"true"`
	// 任务 id
	TaskId *int64 `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true"`
	// 消息同步目标 cell
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty" require:"true"`
}

func (s MsgdumpTaskDTO) String() string {
	return tea.Prettify(s)
}

func (s MsgdumpTaskDTO) GoString() string {
	return s.String()
}

func (s *MsgdumpTaskDTO) SetRemark(v string) *MsgdumpTaskDTO {
	s.Remark = &v
	return s
}

func (s *MsgdumpTaskDTO) SetSourceEventCode(v string) *MsgdumpTaskDTO {
	s.SourceEventCode = &v
	return s
}

func (s *MsgdumpTaskDTO) SetSourceInstanceId(v string) *MsgdumpTaskDTO {
	s.SourceInstanceId = &v
	return s
}

func (s *MsgdumpTaskDTO) SetSourceTopic(v string) *MsgdumpTaskDTO {
	s.SourceTopic = &v
	return s
}

func (s *MsgdumpTaskDTO) SetStatus(v int64) *MsgdumpTaskDTO {
	s.Status = &v
	return s
}

func (s *MsgdumpTaskDTO) SetTargetInstanceId(v string) *MsgdumpTaskDTO {
	s.TargetInstanceId = &v
	return s
}

func (s *MsgdumpTaskDTO) SetTargetTag(v string) *MsgdumpTaskDTO {
	s.TargetTag = &v
	return s
}

func (s *MsgdumpTaskDTO) SetTargetTopic(v string) *MsgdumpTaskDTO {
	s.TargetTopic = &v
	return s
}

func (s *MsgdumpTaskDTO) SetTaskId(v int64) *MsgdumpTaskDTO {
	s.TaskId = &v
	return s
}

func (s *MsgdumpTaskDTO) SetCell(v string) *MsgdumpTaskDTO {
	s.Cell = &v
	return s
}

// 消息同步任务源端实例、topic、eventcode
type MsgdumpSourceInfo struct {
	// 源 instance id
	SourceInstanceId *string `json:"source_instance_id,omitempty" xml:"source_instance_id,omitempty" require:"true"`
	// 源端 topic 列表
	SourceTopics []*SourceTopic `json:"source_topics,omitempty" xml:"source_topics,omitempty" require:"true" type:"Repeated"`
}

func (s MsgdumpSourceInfo) String() string {
	return tea.Prettify(s)
}

func (s MsgdumpSourceInfo) GoString() string {
	return s.String()
}

func (s *MsgdumpSourceInfo) SetSourceInstanceId(v string) *MsgdumpSourceInfo {
	s.SourceInstanceId = &v
	return s
}

func (s *MsgdumpSourceInfo) SetSourceTopics(v []*SourceTopic) *MsgdumpSourceInfo {
	s.SourceTopics = v
	return s
}

// sofamq 审计
type AuditorDTO struct {
	// 操作名
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
	// 资源名
	Resource *string `json:"resource,omitempty" xml:"resource,omitempty" require:"true"`
	// 操作详情
	Detail *string `json:"detail,omitempty" xml:"detail,omitempty" require:"true"`
	// 操作人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
	// 时间戳
	Timestamp *string `json:"timestamp,omitempty" xml:"timestamp,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s AuditorDTO) String() string {
	return tea.Prettify(s)
}

func (s AuditorDTO) GoString() string {
	return s.String()
}

func (s *AuditorDTO) SetAction(v string) *AuditorDTO {
	s.Action = &v
	return s
}

func (s *AuditorDTO) SetResource(v string) *AuditorDTO {
	s.Resource = &v
	return s
}

func (s *AuditorDTO) SetDetail(v string) *AuditorDTO {
	s.Detail = &v
	return s
}

func (s *AuditorDTO) SetOperator(v string) *AuditorDTO {
	s.Operator = &v
	return s
}

func (s *AuditorDTO) SetTimestamp(v string) *AuditorDTO {
	s.Timestamp = &v
	return s
}

// SofamqTopicStatus 返回data
type TopicStatusDTO struct {
	// Topic 的最后更新时间时间戳
	LastTimestamp *int64 `json:"last_timestamp,omitempty" xml:"last_timestamp,omitempty" require:"true"`
	// 设置该 Topic 的读写模式。取值说明如下：6：同时支持读写；4：禁写；2：禁读。
	Perm *int64 `json:"perm,omitempty" xml:"perm,omitempty" require:"true"`
	// 消息总量
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty" require:"true"`
}

func (s TopicStatusDTO) String() string {
	return tea.Prettify(s)
}

func (s TopicStatusDTO) GoString() string {
	return s.String()
}

func (s *TopicStatusDTO) SetLastTimestamp(v int64) *TopicStatusDTO {
	s.LastTimestamp = &v
	return s
}

func (s *TopicStatusDTO) SetPerm(v int64) *TopicStatusDTO {
	s.Perm = &v
	return s
}

func (s *TopicStatusDTO) SetTotalCount(v int64) *TopicStatusDTO {
	s.TotalCount = &v
	return s
}

// SofamqTopicSubDetail接口返回的data信息
type TopicSubDetailDTO struct {
	// 最近发送时间
	LatestSendTime *int64 `json:"latest_send_time,omitempty" xml:"latest_send_time,omitempty" require:"true"`
	// SubscriptionData 数组
	SubscriptionDataList []*SubscriptionGroupDTO `json:"subscription_data_list,omitempty" xml:"subscription_data_list,omitempty" require:"true" type:"Repeated"`
	// Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s TopicSubDetailDTO) String() string {
	return tea.Prettify(s)
}

func (s TopicSubDetailDTO) GoString() string {
	return s.String()
}

func (s *TopicSubDetailDTO) SetLatestSendTime(v int64) *TopicSubDetailDTO {
	s.LatestSendTime = &v
	return s
}

func (s *TopicSubDetailDTO) SetSubscriptionDataList(v []*SubscriptionGroupDTO) *TopicSubDetailDTO {
	s.SubscriptionDataList = v
	return s
}

func (s *TopicSubDetailDTO) SetTopic(v string) *TopicSubDetailDTO {
	s.Topic = &v
	return s
}

// 链接信息
type LinkDTO struct {
	// demo工程
	DemoProject *string `json:"demo_project,omitempty" xml:"demo_project,omitempty" require:"true"`
	// 产品文档
	ProductDoc *string `json:"product_doc,omitempty" xml:"product_doc,omitempty" require:"true"`
	// 快速开始文档
	QuickStart *string `json:"quick_start,omitempty" xml:"quick_start,omitempty" require:"true"`
}

func (s LinkDTO) String() string {
	return tea.Prettify(s)
}

func (s LinkDTO) GoString() string {
	return s.String()
}

func (s *LinkDTO) SetDemoProject(v string) *LinkDTO {
	s.DemoProject = &v
	return s
}

func (s *LinkDTO) SetProductDoc(v string) *LinkDTO {
	s.ProductDoc = &v
	return s
}

func (s *LinkDTO) SetQuickStart(v string) *LinkDTO {
	s.QuickStart = &v
	return s
}

// InstanceCreate返回数据
type InstanceCreateDTO struct {
	// instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 实例类型
	InstanceType *int64 `json:"instance_type,omitempty" xml:"instance_type,omitempty" require:"true"`
}

func (s InstanceCreateDTO) String() string {
	return tea.Prettify(s)
}

func (s InstanceCreateDTO) GoString() string {
	return s.String()
}

func (s *InstanceCreateDTO) SetInstanceId(v string) *InstanceCreateDTO {
	s.InstanceId = &v
	return s
}

func (s *InstanceCreateDTO) SetInstanceType(v int64) *InstanceCreateDTO {
	s.InstanceType = &v
	return s
}

// topic
type Binding struct {
	// appName
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// creation_time
	CreationTime *string `json:"creation_time,omitempty" xml:"creation_time,omitempty"`
	// eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty"`
	// exchangeType
	ExchangeType *string `json:"exchange_type,omitempty" xml:"exchange_type,omitempty"`
	// expression
	Expression *string `json:"expression,omitempty" xml:"expression,omitempty"`
	// group
	Group *string `json:"group,omitempty" xml:"group,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
	// persistence
	Persistence *bool `json:"persistence,omitempty" xml:"persistence,omitempty"`
	// topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty"`
	// update_time
	UpdateTime *string `json:"update_time,omitempty" xml:"update_time,omitempty"`
}

func (s Binding) String() string {
	return tea.Prettify(s)
}

func (s Binding) GoString() string {
	return s.String()
}

func (s *Binding) SetAppName(v string) *Binding {
	s.AppName = &v
	return s
}

func (s *Binding) SetCreationTime(v string) *Binding {
	s.CreationTime = &v
	return s
}

func (s *Binding) SetEventcode(v string) *Binding {
	s.Eventcode = &v
	return s
}

func (s *Binding) SetExchangeType(v string) *Binding {
	s.ExchangeType = &v
	return s
}

func (s *Binding) SetExpression(v string) *Binding {
	s.Expression = &v
	return s
}

func (s *Binding) SetGroup(v string) *Binding {
	s.Group = &v
	return s
}

func (s *Binding) SetId(v string) *Binding {
	s.Id = &v
	return s
}

func (s *Binding) SetInstanceId(v string) *Binding {
	s.InstanceId = &v
	return s
}

func (s *Binding) SetPersistence(v bool) *Binding {
	s.Persistence = &v
	return s
}

func (s *Binding) SetTopic(v string) *Binding {
	s.Topic = &v
	return s
}

func (s *Binding) SetUpdateTime(v string) *Binding {
	s.UpdateTime = &v
	return s
}

// string
type StringDataDo struct {
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s StringDataDo) String() string {
	return tea.Prettify(s)
}

func (s StringDataDo) GoString() string {
	return s.String()
}

func (s *StringDataDo) SetData(v string) *StringDataDo {
	s.Data = &v
	return s
}

// 返回 Data 对象
//
type GroupSubDetailDTO struct {
	// Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 部署模型
	MessageModel *string `json:"message_model,omitempty" xml:"message_model,omitempty" require:"true"`
	// 是否在线
	Online *bool `json:"online,omitempty" xml:"online,omitempty" require:"true"`
	// 订阅信息列表
	SubscriptionDataList []*SubscriptionTopicDTO `json:"subscription_data_list,omitempty" xml:"subscription_data_list,omitempty" require:"true" type:"Repeated"`
}

func (s GroupSubDetailDTO) String() string {
	return tea.Prettify(s)
}

func (s GroupSubDetailDTO) GoString() string {
	return s.String()
}

func (s *GroupSubDetailDTO) SetGroupId(v string) *GroupSubDetailDTO {
	s.GroupId = &v
	return s
}

func (s *GroupSubDetailDTO) SetMessageModel(v string) *GroupSubDetailDTO {
	s.MessageModel = &v
	return s
}

func (s *GroupSubDetailDTO) SetOnline(v bool) *GroupSubDetailDTO {
	s.Online = &v
	return s
}

func (s *GroupSubDetailDTO) SetSubscriptionDataList(v []*SubscriptionTopicDTO) *GroupSubDetailDTO {
	s.SubscriptionDataList = v
	return s
}

// datacenter
type DataCenterDO struct {
	// cluster
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty" require:"true"`
	// datacenter
	Datacenter *string `json:"datacenter,omitempty" xml:"datacenter,omitempty" require:"true"`
	// room
	Room *string `json:"room,omitempty" xml:"room,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// gmt_create
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// gmt_modified
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
}

func (s DataCenterDO) String() string {
	return tea.Prettify(s)
}

func (s DataCenterDO) GoString() string {
	return s.String()
}

func (s *DataCenterDO) SetCluster(v string) *DataCenterDO {
	s.Cluster = &v
	return s
}

func (s *DataCenterDO) SetDatacenter(v string) *DataCenterDO {
	s.Datacenter = &v
	return s
}

func (s *DataCenterDO) SetRoom(v string) *DataCenterDO {
	s.Room = &v
	return s
}

func (s *DataCenterDO) SetId(v int64) *DataCenterDO {
	s.Id = &v
	return s
}

func (s *DataCenterDO) SetGmtCreate(v string) *DataCenterDO {
	s.GmtCreate = &v
	return s
}

func (s *DataCenterDO) SetGmtModified(v string) *DataCenterDO {
	s.GmtModified = &v
	return s
}

// 连接器任务
type ConnectorJob struct {
	// cron表达式描述任务的触发详情。
	Cron *string `json:"cron,omitempty" xml:"cron,omitempty"`
	// sql过滤
	Filter *string `json:"filter,omitempty" xml:"filter,omitempty"`
	// 任务名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 限流值
	Rate *int64 `json:"rate,omitempty" xml:"rate,omitempty" minimum:"0"`
	// 描述这个任务的具体详情
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty" maxLength:"128"`
	// 去向信息的配置
	SinkConfigs []*UIKeyVauleTemplate `json:"sink_configs,omitempty" xml:"sink_configs,omitempty" require:"true" type:"Repeated"`
	// 去向类型
	SinkType *string `json:"sink_type,omitempty" xml:"sink_type,omitempty" require:"true"`
	// 数据源的配置项列表
	SourceConfigs []*UIKeyVauleTemplate `json:"source_configs,omitempty" xml:"source_configs,omitempty" require:"true" type:"Repeated"`
	// 来源类型
	SourceType *string `json:"source_type,omitempty" xml:"source_type,omitempty" require:"true"`
	// 当任务类型选择为once时，会有本字段，表示具体执行的时间
	Time *string `json:"time,omitempty" xml:"time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 数据转化
	Transformation []*ColumnConfig `json:"transformation,omitempty" xml:"transformation,omitempty" type:"Repeated"`
	// 任务的调度类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 创建时间
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 任务所有者
	App *string `json:"app,omitempty" xml:"app,omitempty"`
	// stepflow平台的某个模板的编号
	StepflowTemplateId *string `json:"stepflow_template_id,omitempty" xml:"stepflow_template_id,omitempty"`
	// 单例模式
	Singleton *bool `json:"singleton,omitempty" xml:"singleton,omitempty" require:"true"`
	// 事件订阅是否开启
	EventSubEnabled *bool `json:"event_sub_enabled,omitempty" xml:"event_sub_enabled,omitempty"`
	// 事件订阅的配置集合
	EventSubConfigs []*EventSubConfig `json:"event_sub_configs,omitempty" xml:"event_sub_configs,omitempty" type:"Repeated"`
	// 可接受延迟时间
	AcceptableExecutionInterval *int64 `json:"acceptable_execution_interval,omitempty" xml:"acceptable_execution_interval,omitempty"`
	// 状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 工单状态
	ProcessStatus *string `json:"process_status,omitempty" xml:"process_status,omitempty"`
	// 是否自动回收实例
	AutoRecycleInstance *bool `json:"auto_recycle_instance,omitempty" xml:"auto_recycle_instance,omitempty" require:"true"`
}

func (s ConnectorJob) String() string {
	return tea.Prettify(s)
}

func (s ConnectorJob) GoString() string {
	return s.String()
}

func (s *ConnectorJob) SetCron(v string) *ConnectorJob {
	s.Cron = &v
	return s
}

func (s *ConnectorJob) SetFilter(v string) *ConnectorJob {
	s.Filter = &v
	return s
}

func (s *ConnectorJob) SetName(v string) *ConnectorJob {
	s.Name = &v
	return s
}

func (s *ConnectorJob) SetRate(v int64) *ConnectorJob {
	s.Rate = &v
	return s
}

func (s *ConnectorJob) SetRemark(v string) *ConnectorJob {
	s.Remark = &v
	return s
}

func (s *ConnectorJob) SetSinkConfigs(v []*UIKeyVauleTemplate) *ConnectorJob {
	s.SinkConfigs = v
	return s
}

func (s *ConnectorJob) SetSinkType(v string) *ConnectorJob {
	s.SinkType = &v
	return s
}

func (s *ConnectorJob) SetSourceConfigs(v []*UIKeyVauleTemplate) *ConnectorJob {
	s.SourceConfigs = v
	return s
}

func (s *ConnectorJob) SetSourceType(v string) *ConnectorJob {
	s.SourceType = &v
	return s
}

func (s *ConnectorJob) SetTime(v string) *ConnectorJob {
	s.Time = &v
	return s
}

func (s *ConnectorJob) SetTransformation(v []*ColumnConfig) *ConnectorJob {
	s.Transformation = v
	return s
}

func (s *ConnectorJob) SetType(v string) *ConnectorJob {
	s.Type = &v
	return s
}

func (s *ConnectorJob) SetGmtCreate(v string) *ConnectorJob {
	s.GmtCreate = &v
	return s
}

func (s *ConnectorJob) SetApp(v string) *ConnectorJob {
	s.App = &v
	return s
}

func (s *ConnectorJob) SetStepflowTemplateId(v string) *ConnectorJob {
	s.StepflowTemplateId = &v
	return s
}

func (s *ConnectorJob) SetSingleton(v bool) *ConnectorJob {
	s.Singleton = &v
	return s
}

func (s *ConnectorJob) SetEventSubEnabled(v bool) *ConnectorJob {
	s.EventSubEnabled = &v
	return s
}

func (s *ConnectorJob) SetEventSubConfigs(v []*EventSubConfig) *ConnectorJob {
	s.EventSubConfigs = v
	return s
}

func (s *ConnectorJob) SetAcceptableExecutionInterval(v int64) *ConnectorJob {
	s.AcceptableExecutionInterval = &v
	return s
}

func (s *ConnectorJob) SetStatus(v string) *ConnectorJob {
	s.Status = &v
	return s
}

func (s *ConnectorJob) SetProcessStatus(v string) *ConnectorJob {
	s.ProcessStatus = &v
	return s
}

func (s *ConnectorJob) SetAutoRecycleInstance(v bool) *ConnectorJob {
	s.AutoRecycleInstance = &v
	return s
}

// 错误报告，包含了错误码，排查指南，请求上下文，支持链接等
type ErrorReport struct {
	// 组件 数组
	Components []*UIComponent `json:"components,omitempty" xml:"components,omitempty" require:"true" type:"Repeated"`
}

func (s ErrorReport) String() string {
	return tea.Prettify(s)
}

func (s ErrorReport) GoString() string {
	return s.String()
}

func (s *ErrorReport) SetComponents(v []*UIComponent) *ErrorReport {
	s.Components = v
	return s
}

// 分区详情分页结果
type ConnectorJobPartitionStatusPageResult struct {
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页数量
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 数据总数
	TotalSize *int64 `json:"total_size,omitempty" xml:"total_size,omitempty"`
	// 分区状态
	Content []*ColumnsValue `json:"content,omitempty" xml:"content,omitempty" require:"true" type:"Repeated"`
}

func (s ConnectorJobPartitionStatusPageResult) String() string {
	return tea.Prettify(s)
}

func (s ConnectorJobPartitionStatusPageResult) GoString() string {
	return s.String()
}

func (s *ConnectorJobPartitionStatusPageResult) SetPageNum(v int64) *ConnectorJobPartitionStatusPageResult {
	s.PageNum = &v
	return s
}

func (s *ConnectorJobPartitionStatusPageResult) SetPageSize(v int64) *ConnectorJobPartitionStatusPageResult {
	s.PageSize = &v
	return s
}

func (s *ConnectorJobPartitionStatusPageResult) SetTotalSize(v int64) *ConnectorJobPartitionStatusPageResult {
	s.TotalSize = &v
	return s
}

func (s *ConnectorJobPartitionStatusPageResult) SetContent(v []*ColumnsValue) *ConnectorJobPartitionStatusPageResult {
	s.Content = v
	return s
}

// MessageTrace信息结构
type MessageTraceDTO struct {
	// 查询结果
	TrackList []*MessageTrackDTO `json:"track_list,omitempty" xml:"track_list,omitempty" require:"true" type:"Repeated"`
}

func (s MessageTraceDTO) String() string {
	return tea.Prettify(s)
}

func (s MessageTraceDTO) GoString() string {
	return s.String()
}

func (s *MessageTraceDTO) SetTrackList(v []*MessageTrackDTO) *MessageTraceDTO {
	s.TrackList = v
	return s
}

// namespace
type NamespaceDO struct {
	// gmt_create
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// gmt_modified
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// instance type
	InstanceType *string `json:"instance_type,omitempty" xml:"instance_type,omitempty"`
	// namespace name
	NamespaceName *string `json:"namespace_name,omitempty" xml:"namespace_name,omitempty" require:"true"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
	// workspace group
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty"`
	// ldcMode
	LdcMode *int64 `json:"ldc_mode,omitempty" xml:"ldc_mode,omitempty" require:"true"`
}

func (s NamespaceDO) String() string {
	return tea.Prettify(s)
}

func (s NamespaceDO) GoString() string {
	return s.String()
}

func (s *NamespaceDO) SetGmtCreate(v string) *NamespaceDO {
	s.GmtCreate = &v
	return s
}

func (s *NamespaceDO) SetGmtModified(v string) *NamespaceDO {
	s.GmtModified = &v
	return s
}

func (s *NamespaceDO) SetId(v int64) *NamespaceDO {
	s.Id = &v
	return s
}

func (s *NamespaceDO) SetInstanceType(v string) *NamespaceDO {
	s.InstanceType = &v
	return s
}

func (s *NamespaceDO) SetNamespaceName(v string) *NamespaceDO {
	s.NamespaceName = &v
	return s
}

func (s *NamespaceDO) SetWorkspace(v string) *NamespaceDO {
	s.Workspace = &v
	return s
}

func (s *NamespaceDO) SetWorkspaceGroup(v string) *NamespaceDO {
	s.WorkspaceGroup = &v
	return s
}

func (s *NamespaceDO) SetLdcMode(v int64) *NamespaceDO {
	s.LdcMode = &v
	return s
}

// 联动的UI控件模型
type UnionControlModel struct {
	// 具体的联动 控件模型
	Control *UIControlModel `json:"control,omitempty" xml:"control,omitempty" require:"true"`
	// 本联动控件对应的父控件的名称，例如本联动控件是input，父控件是select，想要做到select选择某个特定选项后展示input控件，那么本字段就是 select控件的name。
	UnionControl *string `json:"union_control,omitempty" xml:"union_control,omitempty" require:"true"`
	// 对应父控件的value为本字段的值时，本联动控件会展示出来。例如：当topicConfig这个select控件的值是 customized时，本联动控件input就能展示了。
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s UnionControlModel) String() string {
	return tea.Prettify(s)
}

func (s UnionControlModel) GoString() string {
	return s.String()
}

func (s *UnionControlModel) SetControl(v *UIControlModel) *UnionControlModel {
	s.Control = v
	return s
}

func (s *UnionControlModel) SetUnionControl(v string) *UnionControlModel {
	s.UnionControl = &v
	return s
}

func (s *UnionControlModel) SetValue(v string) *UnionControlModel {
	s.Value = &v
	return s
}

// 查询到的trace信息集合
type TracePageDTO struct {
	// Trace 信息
	Content []*TraceDTO `json:"content,omitempty" xml:"content,omitempty" require:"true" type:"Repeated"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页显示条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 总条数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty" require:"true"`
}

func (s TracePageDTO) String() string {
	return tea.Prettify(s)
}

func (s TracePageDTO) GoString() string {
	return s.String()
}

func (s *TracePageDTO) SetContent(v []*TraceDTO) *TracePageDTO {
	s.Content = v
	return s
}

func (s *TracePageDTO) SetPageNum(v int64) *TracePageDTO {
	s.PageNum = &v
	return s
}

func (s *TracePageDTO) SetPageSize(v int64) *TracePageDTO {
	s.PageSize = &v
	return s
}

func (s *TracePageDTO) SetTotal(v int64) *TracePageDTO {
	s.Total = &v
	return s
}

// msgtype
type MsgTypePageDO struct {
	// msgtypes
	Content []*MsgTypeDO `json:"content,omitempty" xml:"content,omitempty" require:"true" type:"Repeated"`
	// page_num
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// total
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s MsgTypePageDO) String() string {
	return tea.Prettify(s)
}

func (s MsgTypePageDO) GoString() string {
	return s.String()
}

func (s *MsgTypePageDO) SetContent(v []*MsgTypeDO) *MsgTypePageDO {
	s.Content = v
	return s
}

func (s *MsgTypePageDO) SetPageNum(v int64) *MsgTypePageDO {
	s.PageNum = &v
	return s
}

func (s *MsgTypePageDO) SetPageSize(v int64) *MsgTypePageDO {
	s.PageSize = &v
	return s
}

func (s *MsgTypePageDO) SetTotal(v int64) *MsgTypePageDO {
	s.Total = &v
	return s
}

// 流程查询请求
type ProcessQueryDTO struct {
	// 任务名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s ProcessQueryDTO) String() string {
	return tea.Prettify(s)
}

func (s ProcessQueryDTO) GoString() string {
	return s.String()
}

func (s *ProcessQueryDTO) SetName(v string) *ProcessQueryDTO {
	s.Name = &v
	return s
}

// 列名称
type ColumnName struct {
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 唯一ID
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 值类型
	ValueType *string `json:"value_type,omitempty" xml:"value_type,omitempty" require:"true"`
}

func (s ColumnName) String() string {
	return tea.Prettify(s)
}

func (s ColumnName) GoString() string {
	return s.String()
}

func (s *ColumnName) SetName(v string) *ColumnName {
	s.Name = &v
	return s
}

func (s *ColumnName) SetId(v string) *ColumnName {
	s.Id = &v
	return s
}

func (s *ColumnName) SetValueType(v string) *ColumnName {
	s.ValueType = &v
	return s
}

// MsgTypeDTO
type MsgTypeDTO struct {
	// topic name
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// desc
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty"`
}

func (s MsgTypeDTO) String() string {
	return tea.Prettify(s)
}

func (s MsgTypeDTO) GoString() string {
	return s.String()
}

func (s *MsgTypeDTO) SetTopic(v string) *MsgTypeDTO {
	s.Topic = &v
	return s
}

func (s *MsgTypeDTO) SetEventcode(v string) *MsgTypeDTO {
	s.Eventcode = &v
	return s
}

func (s *MsgTypeDTO) SetDesc(v string) *MsgTypeDTO {
	s.Desc = &v
	return s
}

// schema详情分页类型
type SchemaDetailPageDO struct {
	// 页面数量
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 总数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty" require:"true"`
	// 内容
	Content []*SchemaDetailDO `json:"content,omitempty" xml:"content,omitempty" require:"true" type:"Repeated"`
}

func (s SchemaDetailPageDO) String() string {
	return tea.Prettify(s)
}

func (s SchemaDetailPageDO) GoString() string {
	return s.String()
}

func (s *SchemaDetailPageDO) SetPageNum(v int64) *SchemaDetailPageDO {
	s.PageNum = &v
	return s
}

func (s *SchemaDetailPageDO) SetPageSize(v int64) *SchemaDetailPageDO {
	s.PageSize = &v
	return s
}

func (s *SchemaDetailPageDO) SetTotal(v int64) *SchemaDetailPageDO {
	s.Total = &v
	return s
}

func (s *SchemaDetailPageDO) SetContent(v []*SchemaDetailDO) *SchemaDetailPageDO {
	s.Content = v
	return s
}

// topic 统计列表详情
type TopicStatsItem struct {
	// 该 Topic 每分钟发送的消息大小（byte）
	Bpm *int64 `json:"bpm,omitempty" xml:"bpm,omitempty" require:"true"`
	// Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// 该 Topic 每分钟发送的消息数量
	Tpm *int64 `json:"tpm,omitempty" xml:"tpm,omitempty" require:"true"`
	// 该 Topic 每天发送的消息数量
	//
	Tpd *int64 `json:"tpd,omitempty" xml:"tpd,omitempty" require:"true"`
	// 该 Topic 每天发送的消息大小（byte）
	//
	Bpd *int64 `json:"bpd,omitempty" xml:"bpd,omitempty" require:"true"`
}

func (s TopicStatsItem) String() string {
	return tea.Prettify(s)
}

func (s TopicStatsItem) GoString() string {
	return s.String()
}

func (s *TopicStatsItem) SetBpm(v int64) *TopicStatsItem {
	s.Bpm = &v
	return s
}

func (s *TopicStatsItem) SetTopic(v string) *TopicStatsItem {
	s.Topic = &v
	return s
}

func (s *TopicStatsItem) SetTpm(v int64) *TopicStatsItem {
	s.Tpm = &v
	return s
}

func (s *TopicStatsItem) SetTpd(v int64) *TopicStatsItem {
	s.Tpd = &v
	return s
}

func (s *TopicStatsItem) SetBpd(v int64) *TopicStatsItem {
	s.Bpd = &v
	return s
}

// topic 监控数据点的值
type TopicMetricItem struct {
	// 当前时间点 Topic 消费的消息数量
	RecvCnt *int64 `json:"recv_cnt,omitempty" xml:"recv_cnt,omitempty" require:"true"`
	// 当前时间点 Topic 消费的消息流量（byte）
	RecvTraffic *int64 `json:"recv_traffic,omitempty" xml:"recv_traffic,omitempty" require:"true"`
	// 当前时间点 Topic 发送的消息数量
	SendCnt *int64 `json:"send_cnt,omitempty" xml:"send_cnt,omitempty" require:"true"`
	// 当前时间点 Topic 发送的消息流量（byte）
	SendTraffic *int64 `json:"send_traffic,omitempty" xml:"send_traffic,omitempty" require:"true"`
	// 数据点的时间戳
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty" require:"true"`
}

func (s TopicMetricItem) String() string {
	return tea.Prettify(s)
}

func (s TopicMetricItem) GoString() string {
	return s.String()
}

func (s *TopicMetricItem) SetRecvCnt(v int64) *TopicMetricItem {
	s.RecvCnt = &v
	return s
}

func (s *TopicMetricItem) SetRecvTraffic(v int64) *TopicMetricItem {
	s.RecvTraffic = &v
	return s
}

func (s *TopicMetricItem) SetSendCnt(v int64) *TopicMetricItem {
	s.SendCnt = &v
	return s
}

func (s *TopicMetricItem) SetSendTraffic(v int64) *TopicMetricItem {
	s.SendTraffic = &v
	return s
}

func (s *TopicMetricItem) SetTimestamp(v int64) *TopicMetricItem {
	s.Timestamp = &v
	return s
}

// sofa mq group page
type GroupPageDTO struct {
	// Group 信息
	Content []*GroupDTO `json:"content,omitempty" xml:"content,omitempty" require:"true" type:"Repeated"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页显示条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 总条数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty" require:"true"`
}

func (s GroupPageDTO) String() string {
	return tea.Prettify(s)
}

func (s GroupPageDTO) GoString() string {
	return s.String()
}

func (s *GroupPageDTO) SetContent(v []*GroupDTO) *GroupPageDTO {
	s.Content = v
	return s
}

func (s *GroupPageDTO) SetPageNum(v int64) *GroupPageDTO {
	s.PageNum = &v
	return s
}

func (s *GroupPageDTO) SetPageSize(v int64) *GroupPageDTO {
	s.PageSize = &v
	return s
}

func (s *GroupPageDTO) SetTotal(v int64) *GroupPageDTO {
	s.Total = &v
	return s
}

// 接入点信息
type EndpointDTO struct {
	// endpoint接口相关的文档
	Doc *string `json:"doc,omitempty" xml:"doc,omitempty"`
	// https类型公网的endpoint接入点
	HttpsInternet *string `json:"https_internet,omitempty" xml:"https_internet,omitempty"`
	// http类型内网的endpoint接口
	HttpInternal *string `json:"http_internal,omitempty" xml:"http_internal,omitempty"`
	// http类型的公网接入点
	HttpInternet *string `json:"http_internet,omitempty" xml:"http_internet,omitempty"`
	// tcp类型的endpoint接口
	Tcp *string `json:"tcp,omitempty" xml:"tcp,omitempty"`
}

func (s EndpointDTO) String() string {
	return tea.Prettify(s)
}

func (s EndpointDTO) GoString() string {
	return s.String()
}

func (s *EndpointDTO) SetDoc(v string) *EndpointDTO {
	s.Doc = &v
	return s
}

func (s *EndpointDTO) SetHttpsInternet(v string) *EndpointDTO {
	s.HttpsInternet = &v
	return s
}

func (s *EndpointDTO) SetHttpInternal(v string) *EndpointDTO {
	s.HttpInternal = &v
	return s
}

func (s *EndpointDTO) SetHttpInternet(v string) *EndpointDTO {
	s.HttpInternet = &v
	return s
}

func (s *EndpointDTO) SetTcp(v string) *EndpointDTO {
	s.Tcp = &v
	return s
}

// 消费端堆栈信息
type ConsumerJstackDTO struct {
	// 消费端 Client ID
	ClientId *string `json:"client_id,omitempty" xml:"client_id,omitempty" require:"true"`
	// Jstack 堆栈信息
	Jstack []*ThreadTrackDTO `json:"jstack,omitempty" xml:"jstack,omitempty" require:"true" type:"Repeated"`
}

func (s ConsumerJstackDTO) String() string {
	return tea.Prettify(s)
}

func (s ConsumerJstackDTO) GoString() string {
	return s.String()
}

func (s *ConsumerJstackDTO) SetClientId(v string) *ConsumerJstackDTO {
	s.ClientId = &v
	return s
}

func (s *ConsumerJstackDTO) SetJstack(v []*ThreadTrackDTO) *ConsumerJstackDTO {
	s.Jstack = v
	return s
}

// sofa mq instance page
type InstancePageDTO struct {
	// topic page
	Content []*InstanceDTO `json:"content,omitempty" xml:"content,omitempty" require:"true" type:"Repeated"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 总条数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty" require:"true"`
}

func (s InstancePageDTO) String() string {
	return tea.Prettify(s)
}

func (s InstancePageDTO) GoString() string {
	return s.String()
}

func (s *InstancePageDTO) SetContent(v []*InstanceDTO) *InstancePageDTO {
	s.Content = v
	return s
}

func (s *InstancePageDTO) SetPageNum(v int64) *InstancePageDTO {
	s.PageNum = &v
	return s
}

func (s *InstancePageDTO) SetPageSize(v int64) *InstancePageDTO {
	s.PageSize = &v
	return s
}

func (s *InstancePageDTO) SetTotal(v int64) *InstancePageDTO {
	s.Total = &v
	return s
}

// 消费限流DTO
type ConsumeLimiterDTO struct {
	// 实例ID
	//
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 限流类型
	// - UNIT：单元限流，指定单元/CELL限流
	//
	LimiterType *string `json:"limiter_type,omitempty" xml:"limiter_type,omitempty" require:"true"`
	// 限流资源名，由 GROUP@TOPIC 组成
	//
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 限流值配置，BASE 为基准限流值。
	Tps *string `json:"tps,omitempty" xml:"tps,omitempty" require:"true"`
}

func (s ConsumeLimiterDTO) String() string {
	return tea.Prettify(s)
}

func (s ConsumeLimiterDTO) GoString() string {
	return s.String()
}

func (s *ConsumeLimiterDTO) SetInstanceId(v string) *ConsumeLimiterDTO {
	s.InstanceId = &v
	return s
}

func (s *ConsumeLimiterDTO) SetLimiterType(v string) *ConsumeLimiterDTO {
	s.LimiterType = &v
	return s
}

func (s *ConsumeLimiterDTO) SetName(v string) *ConsumeLimiterDTO {
	s.Name = &v
	return s
}

func (s *ConsumeLimiterDTO) SetTps(v string) *ConsumeLimiterDTO {
	s.Tps = &v
	return s
}

// 队列路由信息和分页信息
type QueueRouteRulesPageDTO struct {
	// 规则信息
	Records []*QueueRouteRulesDTO `json:"records,omitempty" xml:"records,omitempty" require:"true" type:"Repeated"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 当前页
	PageCurrent *int64 `json:"page_current,omitempty" xml:"page_current,omitempty" require:"true"`
	// 总页数
	PageCount *int64 `json:"page_count,omitempty" xml:"page_count,omitempty" require:"true"`
	// 总记录数
	RowCount *int64 `json:"row_count,omitempty" xml:"row_count,omitempty" require:"true"`
}

func (s QueueRouteRulesPageDTO) String() string {
	return tea.Prettify(s)
}

func (s QueueRouteRulesPageDTO) GoString() string {
	return s.String()
}

func (s *QueueRouteRulesPageDTO) SetRecords(v []*QueueRouteRulesDTO) *QueueRouteRulesPageDTO {
	s.Records = v
	return s
}

func (s *QueueRouteRulesPageDTO) SetPageSize(v int64) *QueueRouteRulesPageDTO {
	s.PageSize = &v
	return s
}

func (s *QueueRouteRulesPageDTO) SetPageCurrent(v int64) *QueueRouteRulesPageDTO {
	s.PageCurrent = &v
	return s
}

func (s *QueueRouteRulesPageDTO) SetPageCount(v int64) *QueueRouteRulesPageDTO {
	s.PageCount = &v
	return s
}

func (s *QueueRouteRulesPageDTO) SetRowCount(v int64) *QueueRouteRulesPageDTO {
	s.RowCount = &v
	return s
}

// 告警查询关系集合
type WarnPageDTO struct {
	// 报警规则信息
	Content []*WarnDTO `json:"content,omitempty" xml:"content,omitempty" require:"true" type:"Repeated"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页显示条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 总条数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty" require:"true"`
}

func (s WarnPageDTO) String() string {
	return tea.Prettify(s)
}

func (s WarnPageDTO) GoString() string {
	return s.String()
}

func (s *WarnPageDTO) SetContent(v []*WarnDTO) *WarnPageDTO {
	s.Content = v
	return s
}

func (s *WarnPageDTO) SetPageNum(v int64) *WarnPageDTO {
	s.PageNum = &v
	return s
}

func (s *WarnPageDTO) SetPageSize(v int64) *WarnPageDTO {
	s.PageSize = &v
	return s
}

func (s *WarnPageDTO) SetTotal(v int64) *WarnPageDTO {
	s.Total = &v
	return s
}

// 应用服务
type ApplicationServiceDTO struct {
	// 应用服务id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 应用serviceid
	ServiceId *string `json:"service_id,omitempty" xml:"service_id,omitempty" require:"true"`
	// 应用服务名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 应用id
	AppId *int64 `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
	// 区分客户端的serviceid和服务端的service_id
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s ApplicationServiceDTO) String() string {
	return tea.Prettify(s)
}

func (s ApplicationServiceDTO) GoString() string {
	return s.String()
}

func (s *ApplicationServiceDTO) SetId(v int64) *ApplicationServiceDTO {
	s.Id = &v
	return s
}

func (s *ApplicationServiceDTO) SetServiceId(v string) *ApplicationServiceDTO {
	s.ServiceId = &v
	return s
}

func (s *ApplicationServiceDTO) SetName(v string) *ApplicationServiceDTO {
	s.Name = &v
	return s
}

func (s *ApplicationServiceDTO) SetAppId(v int64) *ApplicationServiceDTO {
	s.AppId = &v
	return s
}

func (s *ApplicationServiceDTO) SetType(v string) *ApplicationServiceDTO {
	s.Type = &v
	return s
}

// 应用详情页面
type ApplicationPageDescDTO struct {
	// 总页数
	PageCount *int64 `json:"page_count,omitempty" xml:"page_count,omitempty" require:"true"`
	// 当前页
	PageCurrent *int64 `json:"page_current,omitempty" xml:"page_current,omitempty" require:"true"`
	// 页面显示数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 页面记录
	Records []*ApplicationDTO `json:"records,omitempty" xml:"records,omitempty" require:"true" type:"Repeated"`
	// 总记录数
	RowCount *int64 `json:"row_count,omitempty" xml:"row_count,omitempty" require:"true"`
}

func (s ApplicationPageDescDTO) String() string {
	return tea.Prettify(s)
}

func (s ApplicationPageDescDTO) GoString() string {
	return s.String()
}

func (s *ApplicationPageDescDTO) SetPageCount(v int64) *ApplicationPageDescDTO {
	s.PageCount = &v
	return s
}

func (s *ApplicationPageDescDTO) SetPageCurrent(v int64) *ApplicationPageDescDTO {
	s.PageCurrent = &v
	return s
}

func (s *ApplicationPageDescDTO) SetPageSize(v int64) *ApplicationPageDescDTO {
	s.PageSize = &v
	return s
}

func (s *ApplicationPageDescDTO) SetRecords(v []*ApplicationDTO) *ApplicationPageDescDTO {
	s.Records = v
	return s
}

func (s *ApplicationPageDescDTO) SetRowCount(v int64) *ApplicationPageDescDTO {
	s.RowCount = &v
	return s
}

// Topic Group历史统计数据点
type TopicGroupHistoryStatsItem struct {
	// 当前时间点的死信数量
	Dlq *int64 `json:"dlq,omitempty" xml:"dlq,omitempty" require:"true"`
	// 当前时间点的消息积压量
	MsgBacklog *int64 `json:"msg_backlog,omitempty" xml:"msg_backlog,omitempty" require:"true"`
	// 每分钟消费数据大小
	RecvBpm *int64 `json:"recv_bpm,omitempty" xml:"recv_bpm,omitempty" require:"true"`
	// 每分钟拉请求数量
	RecvPpm *int64 `json:"recv_ppm,omitempty" xml:"recv_ppm,omitempty" require:"true"`
	// 消费 TPM
	RecvTpm *int64 `json:"recv_tpm,omitempty" xml:"recv_tpm,omitempty" require:"true"`
	// 每分钟发送消息大小
	SendBpm *int64 `json:"send_bpm,omitempty" xml:"send_bpm,omitempty" require:"true"`
	// 发送 TPM
	SendTpm *int64 `json:"send_tpm,omitempty" xml:"send_tpm,omitempty" require:"true"`
	// Unix 时间戳
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty" require:"true"`
}

func (s TopicGroupHistoryStatsItem) String() string {
	return tea.Prettify(s)
}

func (s TopicGroupHistoryStatsItem) GoString() string {
	return s.String()
}

func (s *TopicGroupHistoryStatsItem) SetDlq(v int64) *TopicGroupHistoryStatsItem {
	s.Dlq = &v
	return s
}

func (s *TopicGroupHistoryStatsItem) SetMsgBacklog(v int64) *TopicGroupHistoryStatsItem {
	s.MsgBacklog = &v
	return s
}

func (s *TopicGroupHistoryStatsItem) SetRecvBpm(v int64) *TopicGroupHistoryStatsItem {
	s.RecvBpm = &v
	return s
}

func (s *TopicGroupHistoryStatsItem) SetRecvPpm(v int64) *TopicGroupHistoryStatsItem {
	s.RecvPpm = &v
	return s
}

func (s *TopicGroupHistoryStatsItem) SetRecvTpm(v int64) *TopicGroupHistoryStatsItem {
	s.RecvTpm = &v
	return s
}

func (s *TopicGroupHistoryStatsItem) SetSendBpm(v int64) *TopicGroupHistoryStatsItem {
	s.SendBpm = &v
	return s
}

func (s *TopicGroupHistoryStatsItem) SetSendTpm(v int64) *TopicGroupHistoryStatsItem {
	s.SendTpm = &v
	return s
}

func (s *TopicGroupHistoryStatsItem) SetTimestamp(v int64) *TopicGroupHistoryStatsItem {
	s.Timestamp = &v
	return s
}

// 连接器任务分页查询结果
type ConnectorJobPageResult struct {
	// 任务信息列表
	Content []*ConnectorJobInfo `json:"content,omitempty" xml:"content,omitempty" require:"true" type:"Repeated"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页的数量
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 数据总数
	TotalSize *int64 `json:"total_size,omitempty" xml:"total_size,omitempty" require:"true"`
}

func (s ConnectorJobPageResult) String() string {
	return tea.Prettify(s)
}

func (s ConnectorJobPageResult) GoString() string {
	return s.String()
}

func (s *ConnectorJobPageResult) SetContent(v []*ConnectorJobInfo) *ConnectorJobPageResult {
	s.Content = v
	return s
}

func (s *ConnectorJobPageResult) SetPageNum(v int64) *ConnectorJobPageResult {
	s.PageNum = &v
	return s
}

func (s *ConnectorJobPageResult) SetPageSize(v int64) *ConnectorJobPageResult {
	s.PageSize = &v
	return s
}

func (s *ConnectorJobPageResult) SetTotalSize(v int64) *ConnectorJobPageResult {
	s.TotalSize = &v
	return s
}

// dms
type MsgQueryPageDO struct {
	// data
	Content []*MsgQueryBatchDO `json:"content,omitempty" xml:"content,omitempty" require:"true" type:"Repeated"`
	// page_num
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// total
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s MsgQueryPageDO) String() string {
	return tea.Prettify(s)
}

func (s MsgQueryPageDO) GoString() string {
	return s.String()
}

func (s *MsgQueryPageDO) SetContent(v []*MsgQueryBatchDO) *MsgQueryPageDO {
	s.Content = v
	return s
}

func (s *MsgQueryPageDO) SetPageNum(v int64) *MsgQueryPageDO {
	s.PageNum = &v
	return s
}

func (s *MsgQueryPageDO) SetPageSize(v int64) *MsgQueryPageDO {
	s.PageSize = &v
	return s
}

func (s *MsgQueryPageDO) SetTotal(v int64) *MsgQueryPageDO {
	s.Total = &v
	return s
}

// config
type ConfigDO struct {
	// key
	Property *string `json:"property,omitempty" xml:"property,omitempty" require:"true"`
	// target name
	TargetName *string `json:"target_name,omitempty" xml:"target_name,omitempty" require:"true"`
	// cluster type or broker type
	TargetType *string `json:"target_type,omitempty" xml:"target_type,omitempty" require:"true"`
	// value
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// gmt_create
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// gmt_modified
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
}

func (s ConfigDO) String() string {
	return tea.Prettify(s)
}

func (s ConfigDO) GoString() string {
	return s.String()
}

func (s *ConfigDO) SetProperty(v string) *ConfigDO {
	s.Property = &v
	return s
}

func (s *ConfigDO) SetTargetName(v string) *ConfigDO {
	s.TargetName = &v
	return s
}

func (s *ConfigDO) SetTargetType(v string) *ConfigDO {
	s.TargetType = &v
	return s
}

func (s *ConfigDO) SetValue(v string) *ConfigDO {
	s.Value = &v
	return s
}

func (s *ConfigDO) SetId(v int64) *ConfigDO {
	s.Id = &v
	return s
}

func (s *ConfigDO) SetGmtCreate(v string) *ConfigDO {
	s.GmtCreate = &v
	return s
}

func (s *ConfigDO) SetGmtModified(v string) *ConfigDO {
	s.GmtModified = &v
	return s
}

// 连接器任务查询条件
type ConnectorJobQuery struct {
	// 任务名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 任务状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 排序的列
	SortColumn *string `json:"sort_column,omitempty" xml:"sort_column,omitempty"`
	// increment代表升序排序，decrement代表降序排序。
	//
	SortType *string `json:"sort_type,omitempty" xml:"sort_type,omitempty"`
	// 应用名
	App *string `json:"app,omitempty" xml:"app,omitempty"`
	// 审批状态
	ProcessStatus *string `json:"process_status,omitempty" xml:"process_status,omitempty"`
}

func (s ConnectorJobQuery) String() string {
	return tea.Prettify(s)
}

func (s ConnectorJobQuery) GoString() string {
	return s.String()
}

func (s *ConnectorJobQuery) SetName(v string) *ConnectorJobQuery {
	s.Name = &v
	return s
}

func (s *ConnectorJobQuery) SetStatus(v string) *ConnectorJobQuery {
	s.Status = &v
	return s
}

func (s *ConnectorJobQuery) SetSortColumn(v string) *ConnectorJobQuery {
	s.SortColumn = &v
	return s
}

func (s *ConnectorJobQuery) SetSortType(v string) *ConnectorJobQuery {
	s.SortType = &v
	return s
}

func (s *ConnectorJobQuery) SetApp(v string) *ConnectorJobQuery {
	s.App = &v
	return s
}

func (s *ConnectorJobQuery) SetProcessStatus(v string) *ConnectorJobQuery {
	s.ProcessStatus = &v
	return s
}

// 消息体内容的DTO对象，包含SchemaID和消息体内容反序列化后的字符串
type MessagePayloadDTO struct {
	// 消息对应的Schema的唯一ID
	SchemaId *string `json:"schema_id,omitempty" xml:"schema_id,omitempty" require:"true"`
	// 消息体内容的展现
	Payload *string `json:"payload,omitempty" xml:"payload,omitempty" require:"true"`
}

func (s MessagePayloadDTO) String() string {
	return tea.Prettify(s)
}

func (s MessagePayloadDTO) GoString() string {
	return s.String()
}

func (s *MessagePayloadDTO) SetSchemaId(v string) *MessagePayloadDTO {
	s.SchemaId = &v
	return s
}

func (s *MessagePayloadDTO) SetPayload(v string) *MessagePayloadDTO {
	s.Payload = &v
	return s
}

// 限流域值
type QueueLimitValueDTO struct {
	// 条件模式
	CMode *string `json:"c_mode,omitempty" xml:"c_mode,omitempty" require:"true"`
	// 限流域值id(新增限流规则时不填）
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 限流规则id(新增限流规则时不填）
	LimitId *int64 `json:"limit_id,omitempty" xml:"limit_id,omitempty" require:"true"`
	// 限流域值
	LValue *string `json:"l_value,omitempty" xml:"l_value,omitempty" require:"true"`
	// 单位时间
	UTime *string `json:"u_time,omitempty" xml:"u_time,omitempty" require:"true"`
}

func (s QueueLimitValueDTO) String() string {
	return tea.Prettify(s)
}

func (s QueueLimitValueDTO) GoString() string {
	return s.String()
}

func (s *QueueLimitValueDTO) SetCMode(v string) *QueueLimitValueDTO {
	s.CMode = &v
	return s
}

func (s *QueueLimitValueDTO) SetId(v int64) *QueueLimitValueDTO {
	s.Id = &v
	return s
}

func (s *QueueLimitValueDTO) SetLimitId(v int64) *QueueLimitValueDTO {
	s.LimitId = &v
	return s
}

func (s *QueueLimitValueDTO) SetLValue(v string) *QueueLimitValueDTO {
	s.LValue = &v
	return s
}

func (s *QueueLimitValueDTO) SetUTime(v string) *QueueLimitValueDTO {
	s.UTime = &v
	return s
}

// router
type RouterPageDO struct {
	// 消息路由信息
	Content []*RouterConfigDO `json:"content,omitempty" xml:"content,omitempty" require:"true" type:"Repeated"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页显示条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 总条数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty" require:"true"`
}

func (s RouterPageDO) String() string {
	return tea.Prettify(s)
}

func (s RouterPageDO) GoString() string {
	return s.String()
}

func (s *RouterPageDO) SetContent(v []*RouterConfigDO) *RouterPageDO {
	s.Content = v
	return s
}

func (s *RouterPageDO) SetPageNum(v int64) *RouterPageDO {
	s.PageNum = &v
	return s
}

func (s *RouterPageDO) SetPageSize(v int64) *RouterPageDO {
	s.PageSize = &v
	return s
}

func (s *RouterPageDO) SetTotal(v int64) *RouterPageDO {
	s.Total = &v
	return s
}

// topic队列信息
type TopicQueueDTO struct {
	// Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// Broker 名称
	BrokerName *string `json:"broker_name,omitempty" xml:"broker_name,omitempty" require:"true"`
	// brokerip地址
	BrokerAddrStr *string `json:"broker_addr_str,omitempty" xml:"broker_addr_str,omitempty" require:"true"`
	// 最后更新时间
	LastUpdateTimestamp *int64 `json:"last_update_timestamp,omitempty" xml:"last_update_timestamp,omitempty" require:"true"`
	// 最大 offset 位点
	MaxOffset *int64 `json:"max_offset,omitempty" xml:"max_offset,omitempty" require:"true"`
	// 最小位点
	MinOffset *int64 `json:"min_offset,omitempty" xml:"min_offset,omitempty" require:"true"`
	// 队列 ID
	QueueId *int64 `json:"queue_id,omitempty" xml:"queue_id,omitempty" require:"true"`
}

func (s TopicQueueDTO) String() string {
	return tea.Prettify(s)
}

func (s TopicQueueDTO) GoString() string {
	return s.String()
}

func (s *TopicQueueDTO) SetTopic(v string) *TopicQueueDTO {
	s.Topic = &v
	return s
}

func (s *TopicQueueDTO) SetBrokerName(v string) *TopicQueueDTO {
	s.BrokerName = &v
	return s
}

func (s *TopicQueueDTO) SetBrokerAddrStr(v string) *TopicQueueDTO {
	s.BrokerAddrStr = &v
	return s
}

func (s *TopicQueueDTO) SetLastUpdateTimestamp(v int64) *TopicQueueDTO {
	s.LastUpdateTimestamp = &v
	return s
}

func (s *TopicQueueDTO) SetMaxOffset(v int64) *TopicQueueDTO {
	s.MaxOffset = &v
	return s
}

func (s *TopicQueueDTO) SetMinOffset(v int64) *TopicQueueDTO {
	s.MinOffset = &v
	return s
}

func (s *TopicQueueDTO) SetQueueId(v int64) *TopicQueueDTO {
	s.QueueId = &v
	return s
}

// 队列规则信息以及分页信息
type QueueLimitRulesPageDTO struct {
	// 总页数
	PageCount *int64 `json:"page_count,omitempty" xml:"page_count,omitempty" require:"true"`
	// 当前页
	PageCurrent *int64 `json:"page_current,omitempty" xml:"page_current,omitempty" require:"true"`
	// 每页条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 总记录数
	RowCount *int64 `json:"row_count,omitempty" xml:"row_count,omitempty" require:"true"`
	// 队列规则信息
	Records []*QueueLimitRulesDTO `json:"records,omitempty" xml:"records,omitempty" require:"true" type:"Repeated"`
}

func (s QueueLimitRulesPageDTO) String() string {
	return tea.Prettify(s)
}

func (s QueueLimitRulesPageDTO) GoString() string {
	return s.String()
}

func (s *QueueLimitRulesPageDTO) SetPageCount(v int64) *QueueLimitRulesPageDTO {
	s.PageCount = &v
	return s
}

func (s *QueueLimitRulesPageDTO) SetPageCurrent(v int64) *QueueLimitRulesPageDTO {
	s.PageCurrent = &v
	return s
}

func (s *QueueLimitRulesPageDTO) SetPageSize(v int64) *QueueLimitRulesPageDTO {
	s.PageSize = &v
	return s
}

func (s *QueueLimitRulesPageDTO) SetRowCount(v int64) *QueueLimitRulesPageDTO {
	s.RowCount = &v
	return s
}

func (s *QueueLimitRulesPageDTO) SetRecords(v []*QueueLimitRulesDTO) *QueueLimitRulesPageDTO {
	s.Records = v
	return s
}

// kv config page
type KVConfigPageDTO struct {
	// config page
	Content []*KVConfigDTO `json:"content,omitempty" xml:"content,omitempty" require:"true" type:"Repeated"`
	// 页号
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 总量
	Total *int64 `json:"total,omitempty" xml:"total,omitempty" require:"true"`
}

func (s KVConfigPageDTO) String() string {
	return tea.Prettify(s)
}

func (s KVConfigPageDTO) GoString() string {
	return s.String()
}

func (s *KVConfigPageDTO) SetContent(v []*KVConfigDTO) *KVConfigPageDTO {
	s.Content = v
	return s
}

func (s *KVConfigPageDTO) SetPageNum(v int64) *KVConfigPageDTO {
	s.PageNum = &v
	return s
}

func (s *KVConfigPageDTO) SetPageSize(v int64) *KVConfigPageDTO {
	s.PageSize = &v
	return s
}

func (s *KVConfigPageDTO) SetTotal(v int64) *KVConfigPageDTO {
	s.Total = &v
	return s
}

// 实例信息对象
type InstanceBaseInfoDTO struct {
	// 各个协议的接入点
	Endpoints *EndpointsDTO `json:"endpoints,omitempty" xml:"endpoints,omitempty" require:"true"`
	// 实例是否有命名空间。取值说明如下：
	//
	// true：拥有独立命名空间，资源命名确保实例内唯一，跨实例之间可重名
	// false：无独立命名空间，实例内或者跨实例之间，资源命名必须全局唯一
	IndependentNaming *bool `json:"independent_naming,omitempty" xml:"independent_naming,omitempty" require:"true"`
	//  实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 实例名称
	InstanceName *string `json:"instance_name,omitempty" xml:"instance_name,omitempty" require:"true"`
	// 实例状态。取值说明如下：
	//
	// 0：铂金版实例部署中
	// 2：后付费实例已欠费
	// 5：后付费实例或铂金版实例服务中
	// 7：铂金版实例升级中且服务可用
	InstanceStatus *int64 `json:"instance_status,omitempty" xml:"instance_status,omitempty" require:"true"`
	// 实例类型。取值说明如下：
	//
	// 1：后付费实例
	// 2：铂金版实例
	InstanceType *int64 `json:"instance_type,omitempty" xml:"instance_type,omitempty"`
	// 铂金版实例过期时间
	//
	//
	ReleaseTime *int64 `json:"release_time,omitempty" xml:"release_time,omitempty"`
	// 备注
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty" require:"true"`
}

func (s InstanceBaseInfoDTO) String() string {
	return tea.Prettify(s)
}

func (s InstanceBaseInfoDTO) GoString() string {
	return s.String()
}

func (s *InstanceBaseInfoDTO) SetEndpoints(v *EndpointsDTO) *InstanceBaseInfoDTO {
	s.Endpoints = v
	return s
}

func (s *InstanceBaseInfoDTO) SetIndependentNaming(v bool) *InstanceBaseInfoDTO {
	s.IndependentNaming = &v
	return s
}

func (s *InstanceBaseInfoDTO) SetInstanceId(v string) *InstanceBaseInfoDTO {
	s.InstanceId = &v
	return s
}

func (s *InstanceBaseInfoDTO) SetInstanceName(v string) *InstanceBaseInfoDTO {
	s.InstanceName = &v
	return s
}

func (s *InstanceBaseInfoDTO) SetInstanceStatus(v int64) *InstanceBaseInfoDTO {
	s.InstanceStatus = &v
	return s
}

func (s *InstanceBaseInfoDTO) SetInstanceType(v int64) *InstanceBaseInfoDTO {
	s.InstanceType = &v
	return s
}

func (s *InstanceBaseInfoDTO) SetReleaseTime(v int64) *InstanceBaseInfoDTO {
	s.ReleaseTime = &v
	return s
}

func (s *InstanceBaseInfoDTO) SetRemark(v string) *InstanceBaseInfoDTO {
	s.Remark = &v
	return s
}

// 订阅关系DTO
type BindingDTO struct {
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// group
	Group *string `json:"group,omitempty" xml:"group,omitempty" require:"true"`
	// topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// exchange_type
	ExchangeType *string `json:"exchange_type,omitempty" xml:"exchange_type,omitempty" require:"true"`
	// expression
	Expression *string `json:"expression,omitempty" xml:"expression,omitempty"`
	// persistence
	Persistence *bool `json:"persistence,omitempty" xml:"persistence,omitempty" require:"true"`
}

func (s BindingDTO) String() string {
	return tea.Prettify(s)
}

func (s BindingDTO) GoString() string {
	return s.String()
}

func (s *BindingDTO) SetAppName(v string) *BindingDTO {
	s.AppName = &v
	return s
}

func (s *BindingDTO) SetGroup(v string) *BindingDTO {
	s.Group = &v
	return s
}

func (s *BindingDTO) SetTopic(v string) *BindingDTO {
	s.Topic = &v
	return s
}

func (s *BindingDTO) SetEventcode(v string) *BindingDTO {
	s.Eventcode = &v
	return s
}

func (s *BindingDTO) SetExchangeType(v string) *BindingDTO {
	s.ExchangeType = &v
	return s
}

func (s *BindingDTO) SetExpression(v string) *BindingDTO {
	s.Expression = &v
	return s
}

func (s *BindingDTO) SetPersistence(v bool) *BindingDTO {
	s.Persistence = &v
	return s
}

// 延迟详情
type DelayDetail struct {
	// 延迟时间
	DelayTime *string `json:"delay_time,omitempty" xml:"delay_time,omitempty"`
	// store拉取延迟时间
	StorePullDelay *string `json:"store_pull_delay,omitempty" xml:"store_pull_delay,omitempty"`
	// 延迟时间
	LightWriteDelay *string `json:"light_write_delay,omitempty" xml:"light_write_delay,omitempty"`
	// 积压数量
	Backlog *int64 `json:"backlog,omitempty" xml:"backlog,omitempty"`
}

func (s DelayDetail) String() string {
	return tea.Prettify(s)
}

func (s DelayDetail) GoString() string {
	return s.String()
}

func (s *DelayDetail) SetDelayTime(v string) *DelayDetail {
	s.DelayTime = &v
	return s
}

func (s *DelayDetail) SetStorePullDelay(v string) *DelayDetail {
	s.StorePullDelay = &v
	return s
}

func (s *DelayDetail) SetLightWriteDelay(v string) *DelayDetail {
	s.LightWriteDelay = &v
	return s
}

func (s *DelayDetail) SetBacklog(v int64) *DelayDetail {
	s.Backlog = &v
	return s
}

// 连接器中来源去向信息的配置项描述，包括名称、控件、描述、默认值
type ConnectorConfigs struct {
	// 前端控件类型
	Control *string `json:"control,omitempty" xml:"control,omitempty" require:"true"`
	// 控件描述：中文、展示给用户
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// 配置项名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 选项控件的所有选项
	SelectOptions []*string `json:"select_options,omitempty" xml:"select_options,omitempty" type:"Repeated"`
	// radio控件的所有选项
	RadioOptions []*string `json:"radio_options,omitempty" xml:"radio_options,omitempty" type:"Repeated"`
	// 描述本配置的子配置名称，如果本配置是 选项类型，那么如果本选项被选中后，子控件才可见。
	Child *string `json:"child,omitempty" xml:"child,omitempty"`
	// 本配置是否可见，也即控件是否被用户可见
	Visible *bool `json:"visible,omitempty" xml:"visible,omitempty" require:"true"`
	// 代表 本配置 的 父配置名称，便于做 控件间联动
	Parent *string `json:"parent,omitempty" xml:"parent,omitempty"`
}

func (s ConnectorConfigs) String() string {
	return tea.Prettify(s)
}

func (s ConnectorConfigs) GoString() string {
	return s.String()
}

func (s *ConnectorConfigs) SetControl(v string) *ConnectorConfigs {
	s.Control = &v
	return s
}

func (s *ConnectorConfigs) SetDescription(v string) *ConnectorConfigs {
	s.Description = &v
	return s
}

func (s *ConnectorConfigs) SetName(v string) *ConnectorConfigs {
	s.Name = &v
	return s
}

func (s *ConnectorConfigs) SetSelectOptions(v []*string) *ConnectorConfigs {
	s.SelectOptions = v
	return s
}

func (s *ConnectorConfigs) SetRadioOptions(v []*string) *ConnectorConfigs {
	s.RadioOptions = v
	return s
}

func (s *ConnectorConfigs) SetChild(v string) *ConnectorConfigs {
	s.Child = &v
	return s
}

func (s *ConnectorConfigs) SetVisible(v bool) *ConnectorConfigs {
	s.Visible = &v
	return s
}

func (s *ConnectorConfigs) SetParent(v string) *ConnectorConfigs {
	s.Parent = &v
	return s
}

// cluster
type ClusterDO struct {
	// appkey
	Appkey *string `json:"appkey,omitempty" xml:"appkey,omitempty"`
	// cluster
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty" require:"true"`
	// cluster cluster
	ClusterType *string `json:"cluster_type,omitempty" xml:"cluster_type,omitempty"`
	// 0:单机房
	DeployMode *string `json:"deploy_mode,omitempty" xml:"deploy_mode,omitempty"`
	// ldc模式
	LdcMode *string `json:"ldc_mode,omitempty" xml:"ldc_mode,omitempty"`
	// remark
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// create
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// gmt_modified
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
}

func (s ClusterDO) String() string {
	return tea.Prettify(s)
}

func (s ClusterDO) GoString() string {
	return s.String()
}

func (s *ClusterDO) SetAppkey(v string) *ClusterDO {
	s.Appkey = &v
	return s
}

func (s *ClusterDO) SetCluster(v string) *ClusterDO {
	s.Cluster = &v
	return s
}

func (s *ClusterDO) SetClusterType(v string) *ClusterDO {
	s.ClusterType = &v
	return s
}

func (s *ClusterDO) SetDeployMode(v string) *ClusterDO {
	s.DeployMode = &v
	return s
}

func (s *ClusterDO) SetLdcMode(v string) *ClusterDO {
	s.LdcMode = &v
	return s
}

func (s *ClusterDO) SetRemark(v string) *ClusterDO {
	s.Remark = &v
	return s
}

func (s *ClusterDO) SetId(v int64) *ClusterDO {
	s.Id = &v
	return s
}

func (s *ClusterDO) SetGmtCreate(v string) *ClusterDO {
	s.GmtCreate = &v
	return s
}

func (s *ClusterDO) SetGmtModified(v string) *ClusterDO {
	s.GmtModified = &v
	return s
}

// 管理员用户分页信息
type AdminUserPageDTO struct {
	// admin user page
	Content []*AdminUserDTO `json:"content,omitempty" xml:"content,omitempty" require:"true" type:"Repeated"`
	// 页号
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 总条数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty" require:"true"`
}

func (s AdminUserPageDTO) String() string {
	return tea.Prettify(s)
}

func (s AdminUserPageDTO) GoString() string {
	return s.String()
}

func (s *AdminUserPageDTO) SetContent(v []*AdminUserDTO) *AdminUserPageDTO {
	s.Content = v
	return s
}

func (s *AdminUserPageDTO) SetPageNum(v int64) *AdminUserPageDTO {
	s.PageNum = &v
	return s
}

func (s *AdminUserPageDTO) SetPageSize(v int64) *AdminUserPageDTO {
	s.PageSize = &v
	return s
}

func (s *AdminUserPageDTO) SetTotal(v int64) *AdminUserPageDTO {
	s.Total = &v
	return s
}

// 重置任务位点请求
type ResetJobOffsetRequest struct {
	// 时间戳(单位为s)
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

func (s ResetJobOffsetRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetJobOffsetRequest) GoString() string {
	return s.String()
}

func (s *ResetJobOffsetRequest) SetTimestamp(v int64) *ResetJobOffsetRequest {
	s.Timestamp = &v
	return s
}

// 消费状态查询结果
type ConsumptionStatusDTO struct {
	// 实例id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 消费端groupId
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 单元化cell
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty" require:"true"`
	// 消费端是否在线
	Online *bool `json:"online,omitempty" xml:"online,omitempty" require:"true"`
	// 总的位点差
	TotalDiff *int64 `json:"total_diff,omitempty" xml:"total_diff,omitempty" require:"true"`
	// 所有订阅关系
	Subscriptions []*SubscriptionDTO `json:"subscriptions,omitempty" xml:"subscriptions,omitempty" require:"true" type:"Repeated"`
	// 消费者-队列状态
	ConsumptionStatus []*ConsumeQueueOffset `json:"consumption_status,omitempty" xml:"consumption_status,omitempty" require:"true" type:"Repeated"`
	// 消费者客户端状态
	Clients []*ClientInfoDTO `json:"clients,omitempty" xml:"clients,omitempty" require:"true" type:"Repeated"`
}

func (s ConsumptionStatusDTO) String() string {
	return tea.Prettify(s)
}

func (s ConsumptionStatusDTO) GoString() string {
	return s.String()
}

func (s *ConsumptionStatusDTO) SetInstanceId(v string) *ConsumptionStatusDTO {
	s.InstanceId = &v
	return s
}

func (s *ConsumptionStatusDTO) SetGroupId(v string) *ConsumptionStatusDTO {
	s.GroupId = &v
	return s
}

func (s *ConsumptionStatusDTO) SetCell(v string) *ConsumptionStatusDTO {
	s.Cell = &v
	return s
}

func (s *ConsumptionStatusDTO) SetOnline(v bool) *ConsumptionStatusDTO {
	s.Online = &v
	return s
}

func (s *ConsumptionStatusDTO) SetTotalDiff(v int64) *ConsumptionStatusDTO {
	s.TotalDiff = &v
	return s
}

func (s *ConsumptionStatusDTO) SetSubscriptions(v []*SubscriptionDTO) *ConsumptionStatusDTO {
	s.Subscriptions = v
	return s
}

func (s *ConsumptionStatusDTO) SetConsumptionStatus(v []*ConsumeQueueOffset) *ConsumptionStatusDTO {
	s.ConsumptionStatus = v
	return s
}

func (s *ConsumptionStatusDTO) SetClients(v []*ClientInfoDTO) *ConsumptionStatusDTO {
	s.Clients = v
	return s
}

// SofamqConsumerStatus返回数据
type ConsumerStatusDTO struct {
	// 该集群当前在线客户端信息
	ConnectionSet []*ConnectionDTO `json:"connection_set,omitempty" xml:"connection_set,omitempty" require:"true" type:"Repeated"`
	// 该集群在线客户端详细信息，包含 Jstack、消费 RT 时间等信息
	ConsumerConnectionInfoList []*ConsumerConnectionInfoDTO `json:"consumer_connection_info_list,omitempty" xml:"consumer_connection_info_list,omitempty" require:"true" type:"Repeated"`
	// 消费模型。取值说明如下：CLUSTERING：集群消费模式；BROADCASTING：广播消费模式。
	ConsumeModel *string `json:"consume_model,omitempty" xml:"consume_model,omitempty" require:"true"`
	// 总消费 TPS
	ConsumeTps *string `json:"consume_tps,omitempty" xml:"consume_tps,omitempty" require:"true"`
	// 延迟时间
	DelayTime *int64 `json:"delay_time,omitempty" xml:"delay_time,omitempty" require:"true"`
	// 各个 Topic 的消费情况
	DetailInTopicList []*DetailInTopicDTO `json:"detail_in_topic_list,omitempty" xml:"detail_in_topic_list,omitempty" require:"true" type:"Repeated"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 最后更新时间
	LastTimestamp *int64 `json:"last_timestamp,omitempty" xml:"last_timestamp,omitempty" require:"true"`
	// 是否在线
	Online *bool `json:"online,omitempty" xml:"online,omitempty" require:"true"`
	// 客户端 Rebalance 是否正常。取值说明如下：true：正常；false：不正常。
	RebalanceOk *bool `json:"rebalance_ok,omitempty" xml:"rebalance_ok,omitempty" require:"true"`
	// 订阅关系是否一致
	SubscriptionSame *bool `json:"subscription_same,omitempty" xml:"subscription_same,omitempty" require:"true"`
	// 集群总的消费堆积
	TotalDiff *int64 `json:"total_diff,omitempty" xml:"total_diff,omitempty" require:"true"`
}

func (s ConsumerStatusDTO) String() string {
	return tea.Prettify(s)
}

func (s ConsumerStatusDTO) GoString() string {
	return s.String()
}

func (s *ConsumerStatusDTO) SetConnectionSet(v []*ConnectionDTO) *ConsumerStatusDTO {
	s.ConnectionSet = v
	return s
}

func (s *ConsumerStatusDTO) SetConsumerConnectionInfoList(v []*ConsumerConnectionInfoDTO) *ConsumerStatusDTO {
	s.ConsumerConnectionInfoList = v
	return s
}

func (s *ConsumerStatusDTO) SetConsumeModel(v string) *ConsumerStatusDTO {
	s.ConsumeModel = &v
	return s
}

func (s *ConsumerStatusDTO) SetConsumeTps(v string) *ConsumerStatusDTO {
	s.ConsumeTps = &v
	return s
}

func (s *ConsumerStatusDTO) SetDelayTime(v int64) *ConsumerStatusDTO {
	s.DelayTime = &v
	return s
}

func (s *ConsumerStatusDTO) SetDetailInTopicList(v []*DetailInTopicDTO) *ConsumerStatusDTO {
	s.DetailInTopicList = v
	return s
}

func (s *ConsumerStatusDTO) SetInstanceId(v string) *ConsumerStatusDTO {
	s.InstanceId = &v
	return s
}

func (s *ConsumerStatusDTO) SetLastTimestamp(v int64) *ConsumerStatusDTO {
	s.LastTimestamp = &v
	return s
}

func (s *ConsumerStatusDTO) SetOnline(v bool) *ConsumerStatusDTO {
	s.Online = &v
	return s
}

func (s *ConsumerStatusDTO) SetRebalanceOk(v bool) *ConsumerStatusDTO {
	s.RebalanceOk = &v
	return s
}

func (s *ConsumerStatusDTO) SetSubscriptionSame(v bool) *ConsumerStatusDTO {
	s.SubscriptionSame = &v
	return s
}

func (s *ConsumerStatusDTO) SetTotalDiff(v int64) *ConsumerStatusDTO {
	s.TotalDiff = &v
	return s
}

// message page
type MessageGetPageDTO struct {
	// 消息的详细信息
	Content []*MessageGetDTO `json:"content,omitempty" xml:"content,omitempty" require:"true" type:"Repeated"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页显示条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 第一次新建查询时返回的查询任务 ID，用于后续获取消息。
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
	// 总页数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty" require:"true"`
}

func (s MessageGetPageDTO) String() string {
	return tea.Prettify(s)
}

func (s MessageGetPageDTO) GoString() string {
	return s.String()
}

func (s *MessageGetPageDTO) SetContent(v []*MessageGetDTO) *MessageGetPageDTO {
	s.Content = v
	return s
}

func (s *MessageGetPageDTO) SetPageNum(v int64) *MessageGetPageDTO {
	s.PageNum = &v
	return s
}

func (s *MessageGetPageDTO) SetPageSize(v int64) *MessageGetPageDTO {
	s.PageSize = &v
	return s
}

func (s *MessageGetPageDTO) SetTaskId(v string) *MessageGetPageDTO {
	s.TaskId = &v
	return s
}

func (s *MessageGetPageDTO) SetTotal(v int64) *MessageGetPageDTO {
	s.Total = &v
	return s
}

// 分区状态
type PartitionStatus struct {
	// 分区ID
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 消费位点
	ConsumeOffset *int64 `json:"consume_offset,omitempty" xml:"consume_offset,omitempty"`
	// 延迟时间
	ConsumeTime *string `json:"consume_time,omitempty" xml:"consume_time,omitempty"`
	// 积压数量
	BacklogNum *int64 `json:"backlog_num,omitempty" xml:"backlog_num,omitempty"`
}

func (s PartitionStatus) String() string {
	return tea.Prettify(s)
}

func (s PartitionStatus) GoString() string {
	return s.String()
}

func (s *PartitionStatus) SetId(v string) *PartitionStatus {
	s.Id = &v
	return s
}

func (s *PartitionStatus) SetConsumeOffset(v int64) *PartitionStatus {
	s.ConsumeOffset = &v
	return s
}

func (s *PartitionStatus) SetConsumeTime(v string) *PartitionStatus {
	s.ConsumeTime = &v
	return s
}

func (s *PartitionStatus) SetBacklogNum(v int64) *PartitionStatus {
	s.BacklogNum = &v
	return s
}

// binds
type BindingPageDO struct {
	// binds
	Content []*BindingDO `json:"content,omitempty" xml:"content,omitempty" type:"Repeated"`
	// page num
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// page size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// total
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s BindingPageDO) String() string {
	return tea.Prettify(s)
}

func (s BindingPageDO) GoString() string {
	return s.String()
}

func (s *BindingPageDO) SetContent(v []*BindingDO) *BindingPageDO {
	s.Content = v
	return s
}

func (s *BindingPageDO) SetPageNum(v int64) *BindingPageDO {
	s.PageNum = &v
	return s
}

func (s *BindingPageDO) SetPageSize(v int64) *BindingPageDO {
	s.PageSize = &v
	return s
}

func (s *BindingPageDO) SetTotal(v int64) *BindingPageDO {
	s.Total = &v
	return s
}

// dms
type MsgQueryDO struct {
	// delivery_count
	DeliveryCount *int64 `json:"delivery_count,omitempty" xml:"delivery_count,omitempty"`
	// eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// gmt_create
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// gmt_last_delivery
	GmtLastDelivery *string `json:"gmt_last_delivery,omitempty" xml:"gmt_last_delivery,omitempty" require:"true"`
	// gmt_next_delivery
	GmtNextDelivery *string `json:"gmt_next_delivery,omitempty" xml:"gmt_next_delivery,omitempty" require:"true"`
	// message_id
	MessageId *string `json:"message_id,omitempty" xml:"message_id,omitempty" require:"true"`
	// publisher_group
	PublisherGroup *string `json:"publisher_group,omitempty" xml:"publisher_group,omitempty" require:"true"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// transaction
	Transaction *bool `json:"transaction,omitempty" xml:"transaction,omitempty"`
	// subscriber_group_delivery
	SubscriberGroupDelivery *string `json:"subscriber_group_delivery,omitempty" xml:"subscriber_group_delivery,omitempty"`
	// subscriber_group_undelivery
	SubscriberGroupUndelivery *string `json:"subscriber_group_undelivery,omitempty" xml:"subscriber_group_undelivery,omitempty"`
}

func (s MsgQueryDO) String() string {
	return tea.Prettify(s)
}

func (s MsgQueryDO) GoString() string {
	return s.String()
}

func (s *MsgQueryDO) SetDeliveryCount(v int64) *MsgQueryDO {
	s.DeliveryCount = &v
	return s
}

func (s *MsgQueryDO) SetEventcode(v string) *MsgQueryDO {
	s.Eventcode = &v
	return s
}

func (s *MsgQueryDO) SetGmtCreate(v string) *MsgQueryDO {
	s.GmtCreate = &v
	return s
}

func (s *MsgQueryDO) SetGmtLastDelivery(v string) *MsgQueryDO {
	s.GmtLastDelivery = &v
	return s
}

func (s *MsgQueryDO) SetGmtNextDelivery(v string) *MsgQueryDO {
	s.GmtNextDelivery = &v
	return s
}

func (s *MsgQueryDO) SetMessageId(v string) *MsgQueryDO {
	s.MessageId = &v
	return s
}

func (s *MsgQueryDO) SetPublisherGroup(v string) *MsgQueryDO {
	s.PublisherGroup = &v
	return s
}

func (s *MsgQueryDO) SetStatus(v string) *MsgQueryDO {
	s.Status = &v
	return s
}

func (s *MsgQueryDO) SetTopic(v string) *MsgQueryDO {
	s.Topic = &v
	return s
}

func (s *MsgQueryDO) SetTransaction(v bool) *MsgQueryDO {
	s.Transaction = &v
	return s
}

func (s *MsgQueryDO) SetSubscriberGroupDelivery(v string) *MsgQueryDO {
	s.SubscriberGroupDelivery = &v
	return s
}

func (s *MsgQueryDO) SetSubscriberGroupUndelivery(v string) *MsgQueryDO {
	s.SubscriberGroupUndelivery = &v
	return s
}

// cell by type
type CellGroupDO struct {
	// cell_type
	CellType *string `json:"cell_type,omitempty" xml:"cell_type,omitempty" require:"true"`
	// cells
	Data []*string `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s CellGroupDO) String() string {
	return tea.Prettify(s)
}

func (s CellGroupDO) GoString() string {
	return s.String()
}

func (s *CellGroupDO) SetCellType(v string) *CellGroupDO {
	s.CellType = &v
	return s
}

func (s *CellGroupDO) SetData(v []*string) *CellGroupDO {
	s.Data = v
	return s
}

type StatusMqMessageUndeliveryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
}

func (s StatusMqMessageUndeliveryRequest) String() string {
	return tea.Prettify(s)
}

func (s StatusMqMessageUndeliveryRequest) GoString() string {
	return s.String()
}

func (s *StatusMqMessageUndeliveryRequest) SetAuthToken(v string) *StatusMqMessageUndeliveryRequest {
	s.AuthToken = &v
	return s
}

func (s *StatusMqMessageUndeliveryRequest) SetProductInstanceId(v string) *StatusMqMessageUndeliveryRequest {
	s.ProductInstanceId = &v
	return s
}

type StatusMqMessageUndeliveryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StatusMqMessageUndeliveryResponse) String() string {
	return tea.Prettify(s)
}

func (s StatusMqMessageUndeliveryResponse) GoString() string {
	return s.String()
}

func (s *StatusMqMessageUndeliveryResponse) SetReqMsgId(v string) *StatusMqMessageUndeliveryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StatusMqMessageUndeliveryResponse) SetResultCode(v string) *StatusMqMessageUndeliveryResponse {
	s.ResultCode = &v
	return s
}

func (s *StatusMqMessageUndeliveryResponse) SetResultMsg(v string) *StatusMqMessageUndeliveryResponse {
	s.ResultMsg = &v
	return s
}

type UndeliverMessageStatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// message type: eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// group of subscriber
	Group *string `json:"group,omitempty" xml:"group,omitempty" require:"true"`
	// middleware instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// interval in seconds to the current time
	IntervalInSecond *int `json:"interval_in_second,omitempty" xml:"interval_in_second,omitempty" require:"true"`
	// tenant id
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// message type: topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// workspace id
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s UndeliverMessageStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UndeliverMessageStatusRequest) GoString() string {
	return s.String()
}

func (s *UndeliverMessageStatusRequest) SetAuthToken(v string) *UndeliverMessageStatusRequest {
	s.AuthToken = &v
	return s
}

func (s *UndeliverMessageStatusRequest) SetProductInstanceId(v string) *UndeliverMessageStatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UndeliverMessageStatusRequest) SetEventcode(v string) *UndeliverMessageStatusRequest {
	s.Eventcode = &v
	return s
}

func (s *UndeliverMessageStatusRequest) SetGroup(v string) *UndeliverMessageStatusRequest {
	s.Group = &v
	return s
}

func (s *UndeliverMessageStatusRequest) SetInstanceId(v string) *UndeliverMessageStatusRequest {
	s.InstanceId = &v
	return s
}

func (s *UndeliverMessageStatusRequest) SetIntervalInSecond(v int) *UndeliverMessageStatusRequest {
	s.IntervalInSecond = &v
	return s
}

func (s *UndeliverMessageStatusRequest) SetTenant(v string) *UndeliverMessageStatusRequest {
	s.Tenant = &v
	return s
}

func (s *UndeliverMessageStatusRequest) SetTopic(v string) *UndeliverMessageStatusRequest {
	s.Topic = &v
	return s
}

func (s *UndeliverMessageStatusRequest) SetWorkspace(v string) *UndeliverMessageStatusRequest {
	s.Workspace = &v
	return s
}

type UndeliverMessageStatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// status of undelivery message
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s UndeliverMessageStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UndeliverMessageStatusResponse) GoString() string {
	return s.String()
}

func (s *UndeliverMessageStatusResponse) SetReqMsgId(v string) *UndeliverMessageStatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UndeliverMessageStatusResponse) SetResultCode(v string) *UndeliverMessageStatusResponse {
	s.ResultCode = &v
	return s
}

func (s *UndeliverMessageStatusResponse) SetResultMsg(v string) *UndeliverMessageStatusResponse {
	s.ResultMsg = &v
	return s
}

func (s *UndeliverMessageStatusResponse) SetData(v string) *UndeliverMessageStatusResponse {
	s.Data = &v
	return s
}

type AddMsgtypeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// description of message type
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty"`
	// message type: eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// middleware instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// tenant id
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// message type: topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// workspace id
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s AddMsgtypeRequest) String() string {
	return tea.Prettify(s)
}

func (s AddMsgtypeRequest) GoString() string {
	return s.String()
}

func (s *AddMsgtypeRequest) SetAuthToken(v string) *AddMsgtypeRequest {
	s.AuthToken = &v
	return s
}

func (s *AddMsgtypeRequest) SetProductInstanceId(v string) *AddMsgtypeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AddMsgtypeRequest) SetDesc(v string) *AddMsgtypeRequest {
	s.Desc = &v
	return s
}

func (s *AddMsgtypeRequest) SetEventcode(v string) *AddMsgtypeRequest {
	s.Eventcode = &v
	return s
}

func (s *AddMsgtypeRequest) SetInstanceId(v string) *AddMsgtypeRequest {
	s.InstanceId = &v
	return s
}

func (s *AddMsgtypeRequest) SetTenant(v string) *AddMsgtypeRequest {
	s.Tenant = &v
	return s
}

func (s *AddMsgtypeRequest) SetTopic(v string) *AddMsgtypeRequest {
	s.Topic = &v
	return s
}

func (s *AddMsgtypeRequest) SetWorkspace(v string) *AddMsgtypeRequest {
	s.Workspace = &v
	return s
}

type AddMsgtypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// request result
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s AddMsgtypeResponse) String() string {
	return tea.Prettify(s)
}

func (s AddMsgtypeResponse) GoString() string {
	return s.String()
}

func (s *AddMsgtypeResponse) SetReqMsgId(v string) *AddMsgtypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddMsgtypeResponse) SetResultCode(v string) *AddMsgtypeResponse {
	s.ResultCode = &v
	return s
}

func (s *AddMsgtypeResponse) SetResultMsg(v string) *AddMsgtypeResponse {
	s.ResultMsg = &v
	return s
}

func (s *AddMsgtypeResponse) SetData(v bool) *AddMsgtypeResponse {
	s.Data = &v
	return s
}

type UpdateMsgtypeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// description of message type
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty"`
	// message type: eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// middleware instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// tenant id
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// message type: topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// workspace id
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s UpdateMsgtypeRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMsgtypeRequest) GoString() string {
	return s.String()
}

func (s *UpdateMsgtypeRequest) SetAuthToken(v string) *UpdateMsgtypeRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateMsgtypeRequest) SetProductInstanceId(v string) *UpdateMsgtypeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateMsgtypeRequest) SetDesc(v string) *UpdateMsgtypeRequest {
	s.Desc = &v
	return s
}

func (s *UpdateMsgtypeRequest) SetEventcode(v string) *UpdateMsgtypeRequest {
	s.Eventcode = &v
	return s
}

func (s *UpdateMsgtypeRequest) SetInstanceId(v string) *UpdateMsgtypeRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateMsgtypeRequest) SetTenant(v string) *UpdateMsgtypeRequest {
	s.Tenant = &v
	return s
}

func (s *UpdateMsgtypeRequest) SetTopic(v string) *UpdateMsgtypeRequest {
	s.Topic = &v
	return s
}

func (s *UpdateMsgtypeRequest) SetWorkspace(v string) *UpdateMsgtypeRequest {
	s.Workspace = &v
	return s
}

type UpdateMsgtypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// request result
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s UpdateMsgtypeResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMsgtypeResponse) GoString() string {
	return s.String()
}

func (s *UpdateMsgtypeResponse) SetReqMsgId(v string) *UpdateMsgtypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateMsgtypeResponse) SetResultCode(v string) *UpdateMsgtypeResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateMsgtypeResponse) SetResultMsg(v string) *UpdateMsgtypeResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateMsgtypeResponse) SetData(v bool) *UpdateMsgtypeResponse {
	s.Data = &v
	return s
}

type DeleteMsgtypeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// message type: eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// middleware instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// tenant id
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// message type: topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// workspace id
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s DeleteMsgtypeRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMsgtypeRequest) GoString() string {
	return s.String()
}

func (s *DeleteMsgtypeRequest) SetAuthToken(v string) *DeleteMsgtypeRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteMsgtypeRequest) SetProductInstanceId(v string) *DeleteMsgtypeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteMsgtypeRequest) SetEventcode(v string) *DeleteMsgtypeRequest {
	s.Eventcode = &v
	return s
}

func (s *DeleteMsgtypeRequest) SetInstanceId(v string) *DeleteMsgtypeRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteMsgtypeRequest) SetTenant(v string) *DeleteMsgtypeRequest {
	s.Tenant = &v
	return s
}

func (s *DeleteMsgtypeRequest) SetTopic(v string) *DeleteMsgtypeRequest {
	s.Topic = &v
	return s
}

func (s *DeleteMsgtypeRequest) SetWorkspace(v string) *DeleteMsgtypeRequest {
	s.Workspace = &v
	return s
}

type DeleteMsgtypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// request result
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DeleteMsgtypeResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMsgtypeResponse) GoString() string {
	return s.String()
}

func (s *DeleteMsgtypeResponse) SetReqMsgId(v string) *DeleteMsgtypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteMsgtypeResponse) SetResultCode(v string) *DeleteMsgtypeResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteMsgtypeResponse) SetResultMsg(v string) *DeleteMsgtypeResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteMsgtypeResponse) SetData(v bool) *DeleteMsgtypeResponse {
	s.Data = &v
	return s
}

type QueryMsgtypeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// count value
	Count *int `json:"count,omitempty" xml:"count,omitempty"`
	// message type: eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// middleware instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// offset value
	Offset *int `json:"offset,omitempty" xml:"offset,omitempty"`
	// tenant id
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// message type: topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// workspace id
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryMsgtypeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMsgtypeRequest) GoString() string {
	return s.String()
}

func (s *QueryMsgtypeRequest) SetAuthToken(v string) *QueryMsgtypeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMsgtypeRequest) SetProductInstanceId(v string) *QueryMsgtypeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMsgtypeRequest) SetCount(v int) *QueryMsgtypeRequest {
	s.Count = &v
	return s
}

func (s *QueryMsgtypeRequest) SetEventcode(v string) *QueryMsgtypeRequest {
	s.Eventcode = &v
	return s
}

func (s *QueryMsgtypeRequest) SetInstanceId(v string) *QueryMsgtypeRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryMsgtypeRequest) SetOffset(v int) *QueryMsgtypeRequest {
	s.Offset = &v
	return s
}

func (s *QueryMsgtypeRequest) SetTenant(v string) *QueryMsgtypeRequest {
	s.Tenant = &v
	return s
}

func (s *QueryMsgtypeRequest) SetTopic(v string) *QueryMsgtypeRequest {
	s.Topic = &v
	return s
}

func (s *QueryMsgtypeRequest) SetWorkspace(v string) *QueryMsgtypeRequest {
	s.Workspace = &v
	return s
}

type QueryMsgtypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// request result
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryMsgtypeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMsgtypeResponse) GoString() string {
	return s.String()
}

func (s *QueryMsgtypeResponse) SetReqMsgId(v string) *QueryMsgtypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMsgtypeResponse) SetResultCode(v string) *QueryMsgtypeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMsgtypeResponse) SetResultMsg(v string) *QueryMsgtypeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMsgtypeResponse) SetData(v string) *QueryMsgtypeResponse {
	s.Data = &v
	return s
}

type AddBindingRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// application name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// message type: eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// binding: exchangeType, "DIRECT" or "HEADER"
	ExchangeType *string `json:"exchange_type,omitempty" xml:"exchange_type,omitempty" require:"true"`
	// binding: expression
	Expression *string `json:"expression,omitempty" xml:"expression,omitempty"`
	// group of subscriber
	Group *string `json:"group,omitempty" xml:"group,omitempty" require:"true"`
	// middleware instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// binding: expression
	Persistence *bool `json:"persistence,omitempty" xml:"persistence,omitempty" require:"true"`
	// tenant id
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// message type: topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// workspace id
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
	// zone info
	Zone *string `json:"zone,omitempty" xml:"zone,omitempty"`
	// zone mode
	ZoneMode *string `json:"zone_mode,omitempty" xml:"zone_mode,omitempty"`
}

func (s AddBindingRequest) String() string {
	return tea.Prettify(s)
}

func (s AddBindingRequest) GoString() string {
	return s.String()
}

func (s *AddBindingRequest) SetAuthToken(v string) *AddBindingRequest {
	s.AuthToken = &v
	return s
}

func (s *AddBindingRequest) SetProductInstanceId(v string) *AddBindingRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AddBindingRequest) SetAppName(v string) *AddBindingRequest {
	s.AppName = &v
	return s
}

func (s *AddBindingRequest) SetEventcode(v string) *AddBindingRequest {
	s.Eventcode = &v
	return s
}

func (s *AddBindingRequest) SetExchangeType(v string) *AddBindingRequest {
	s.ExchangeType = &v
	return s
}

func (s *AddBindingRequest) SetExpression(v string) *AddBindingRequest {
	s.Expression = &v
	return s
}

func (s *AddBindingRequest) SetGroup(v string) *AddBindingRequest {
	s.Group = &v
	return s
}

func (s *AddBindingRequest) SetInstanceId(v string) *AddBindingRequest {
	s.InstanceId = &v
	return s
}

func (s *AddBindingRequest) SetPersistence(v bool) *AddBindingRequest {
	s.Persistence = &v
	return s
}

func (s *AddBindingRequest) SetTenant(v string) *AddBindingRequest {
	s.Tenant = &v
	return s
}

func (s *AddBindingRequest) SetTopic(v string) *AddBindingRequest {
	s.Topic = &v
	return s
}

func (s *AddBindingRequest) SetWorkspace(v string) *AddBindingRequest {
	s.Workspace = &v
	return s
}

func (s *AddBindingRequest) SetZone(v string) *AddBindingRequest {
	s.Zone = &v
	return s
}

func (s *AddBindingRequest) SetZoneMode(v string) *AddBindingRequest {
	s.ZoneMode = &v
	return s
}

type AddBindingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// request result
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s AddBindingResponse) String() string {
	return tea.Prettify(s)
}

func (s AddBindingResponse) GoString() string {
	return s.String()
}

func (s *AddBindingResponse) SetReqMsgId(v string) *AddBindingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddBindingResponse) SetResultCode(v string) *AddBindingResponse {
	s.ResultCode = &v
	return s
}

func (s *AddBindingResponse) SetResultMsg(v string) *AddBindingResponse {
	s.ResultMsg = &v
	return s
}

func (s *AddBindingResponse) SetData(v bool) *AddBindingResponse {
	s.Data = &v
	return s
}

type UpdateBindingRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// application name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// message type: eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// binding: exchangeType, "DIRECT" or "HEADER"
	ExchangeType *string `json:"exchange_type,omitempty" xml:"exchange_type,omitempty" require:"true"`
	// binding: expression
	Expression *string `json:"expression,omitempty" xml:"expression,omitempty"`
	// group of subscriber
	Group *string `json:"group,omitempty" xml:"group,omitempty" require:"true"`
	// middleware instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// binding: expression
	Persistence *bool `json:"persistence,omitempty" xml:"persistence,omitempty" require:"true"`
	// tenant id
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// message type: topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// workspace id
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
	// zone info
	Zone *string `json:"zone,omitempty" xml:"zone,omitempty"`
	// zone mode
	ZoneMode *string `json:"zone_mode,omitempty" xml:"zone_mode,omitempty"`
}

func (s UpdateBindingRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateBindingRequest) GoString() string {
	return s.String()
}

func (s *UpdateBindingRequest) SetAuthToken(v string) *UpdateBindingRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateBindingRequest) SetProductInstanceId(v string) *UpdateBindingRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateBindingRequest) SetAppName(v string) *UpdateBindingRequest {
	s.AppName = &v
	return s
}

func (s *UpdateBindingRequest) SetEventcode(v string) *UpdateBindingRequest {
	s.Eventcode = &v
	return s
}

func (s *UpdateBindingRequest) SetExchangeType(v string) *UpdateBindingRequest {
	s.ExchangeType = &v
	return s
}

func (s *UpdateBindingRequest) SetExpression(v string) *UpdateBindingRequest {
	s.Expression = &v
	return s
}

func (s *UpdateBindingRequest) SetGroup(v string) *UpdateBindingRequest {
	s.Group = &v
	return s
}

func (s *UpdateBindingRequest) SetInstanceId(v string) *UpdateBindingRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateBindingRequest) SetPersistence(v bool) *UpdateBindingRequest {
	s.Persistence = &v
	return s
}

func (s *UpdateBindingRequest) SetTenant(v string) *UpdateBindingRequest {
	s.Tenant = &v
	return s
}

func (s *UpdateBindingRequest) SetTopic(v string) *UpdateBindingRequest {
	s.Topic = &v
	return s
}

func (s *UpdateBindingRequest) SetWorkspace(v string) *UpdateBindingRequest {
	s.Workspace = &v
	return s
}

func (s *UpdateBindingRequest) SetZone(v string) *UpdateBindingRequest {
	s.Zone = &v
	return s
}

func (s *UpdateBindingRequest) SetZoneMode(v string) *UpdateBindingRequest {
	s.ZoneMode = &v
	return s
}

type UpdateBindingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// request result
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s UpdateBindingResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateBindingResponse) GoString() string {
	return s.String()
}

func (s *UpdateBindingResponse) SetReqMsgId(v string) *UpdateBindingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateBindingResponse) SetResultCode(v string) *UpdateBindingResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateBindingResponse) SetResultMsg(v string) *UpdateBindingResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateBindingResponse) SetData(v bool) *UpdateBindingResponse {
	s.Data = &v
	return s
}

type DeleteBindingRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// message type: eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// group of subscriber
	Group *string `json:"group,omitempty" xml:"group,omitempty" require:"true"`
	// middleware instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// tenant id
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// message type: topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// workspace id
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
	// zone info
	Zone *string `json:"zone,omitempty" xml:"zone,omitempty"`
}

func (s DeleteBindingRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBindingRequest) GoString() string {
	return s.String()
}

func (s *DeleteBindingRequest) SetAuthToken(v string) *DeleteBindingRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteBindingRequest) SetProductInstanceId(v string) *DeleteBindingRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteBindingRequest) SetEventcode(v string) *DeleteBindingRequest {
	s.Eventcode = &v
	return s
}

func (s *DeleteBindingRequest) SetGroup(v string) *DeleteBindingRequest {
	s.Group = &v
	return s
}

func (s *DeleteBindingRequest) SetInstanceId(v string) *DeleteBindingRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteBindingRequest) SetTenant(v string) *DeleteBindingRequest {
	s.Tenant = &v
	return s
}

func (s *DeleteBindingRequest) SetTopic(v string) *DeleteBindingRequest {
	s.Topic = &v
	return s
}

func (s *DeleteBindingRequest) SetWorkspace(v string) *DeleteBindingRequest {
	s.Workspace = &v
	return s
}

func (s *DeleteBindingRequest) SetZone(v string) *DeleteBindingRequest {
	s.Zone = &v
	return s
}

type DeleteBindingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// request result
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DeleteBindingResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBindingResponse) GoString() string {
	return s.String()
}

func (s *DeleteBindingResponse) SetReqMsgId(v string) *DeleteBindingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteBindingResponse) SetResultCode(v string) *DeleteBindingResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteBindingResponse) SetResultMsg(v string) *DeleteBindingResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteBindingResponse) SetData(v bool) *DeleteBindingResponse {
	s.Data = &v
	return s
}

type QueryBindingRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// application name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// count value
	Count *int `json:"count,omitempty" xml:"count,omitempty"`
	// message type: eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty"`
	// group of subscriber
	Group *string `json:"group,omitempty" xml:"group,omitempty"`
	// middleware instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// offset value
	Offset *int `json:"offset,omitempty" xml:"offset,omitempty"`
	// tenant id
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// message type: topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty"`
	// workspace id
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
	// zone info
	Zone *string `json:"zone,omitempty" xml:"zone,omitempty"`
}

func (s QueryBindingRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBindingRequest) GoString() string {
	return s.String()
}

func (s *QueryBindingRequest) SetAuthToken(v string) *QueryBindingRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBindingRequest) SetProductInstanceId(v string) *QueryBindingRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBindingRequest) SetAppName(v string) *QueryBindingRequest {
	s.AppName = &v
	return s
}

func (s *QueryBindingRequest) SetCount(v int) *QueryBindingRequest {
	s.Count = &v
	return s
}

func (s *QueryBindingRequest) SetEventcode(v string) *QueryBindingRequest {
	s.Eventcode = &v
	return s
}

func (s *QueryBindingRequest) SetGroup(v string) *QueryBindingRequest {
	s.Group = &v
	return s
}

func (s *QueryBindingRequest) SetInstanceId(v string) *QueryBindingRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryBindingRequest) SetOffset(v int) *QueryBindingRequest {
	s.Offset = &v
	return s
}

func (s *QueryBindingRequest) SetTenant(v string) *QueryBindingRequest {
	s.Tenant = &v
	return s
}

func (s *QueryBindingRequest) SetTopic(v string) *QueryBindingRequest {
	s.Topic = &v
	return s
}

func (s *QueryBindingRequest) SetWorkspace(v string) *QueryBindingRequest {
	s.Workspace = &v
	return s
}

func (s *QueryBindingRequest) SetZone(v string) *QueryBindingRequest {
	s.Zone = &v
	return s
}

type QueryBindingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// request result
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryBindingResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBindingResponse) GoString() string {
	return s.String()
}

func (s *QueryBindingResponse) SetReqMsgId(v string) *QueryBindingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBindingResponse) SetResultCode(v string) *QueryBindingResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBindingResponse) SetResultMsg(v string) *QueryBindingResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBindingResponse) SetData(v string) *QueryBindingResponse {
	s.Data = &v
	return s
}

type ExecuteSwitchoverRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// target zone
	DestCell *string `json:"dest_cell,omitempty" xml:"dest_cell,omitempty" require:"true"`
	// instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// source zone
	SourceCell *string `json:"source_cell,omitempty" xml:"source_cell,omitempty" require:"true"`
}

func (s ExecuteSwitchoverRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecuteSwitchoverRequest) GoString() string {
	return s.String()
}

func (s *ExecuteSwitchoverRequest) SetAuthToken(v string) *ExecuteSwitchoverRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecuteSwitchoverRequest) SetProductInstanceId(v string) *ExecuteSwitchoverRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecuteSwitchoverRequest) SetDestCell(v string) *ExecuteSwitchoverRequest {
	s.DestCell = &v
	return s
}

func (s *ExecuteSwitchoverRequest) SetInstanceId(v string) *ExecuteSwitchoverRequest {
	s.InstanceId = &v
	return s
}

func (s *ExecuteSwitchoverRequest) SetSourceCell(v string) *ExecuteSwitchoverRequest {
	s.SourceCell = &v
	return s
}

type ExecuteSwitchoverResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// request result
	Success *bool `json:"success,omitempty" xml:"success,omitempty" require:"true"`
}

func (s ExecuteSwitchoverResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecuteSwitchoverResponse) GoString() string {
	return s.String()
}

func (s *ExecuteSwitchoverResponse) SetReqMsgId(v string) *ExecuteSwitchoverResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecuteSwitchoverResponse) SetResultCode(v string) *ExecuteSwitchoverResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecuteSwitchoverResponse) SetResultMsg(v string) *ExecuteSwitchoverResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecuteSwitchoverResponse) SetSuccess(v bool) *ExecuteSwitchoverResponse {
	s.Success = &v
	return s
}

type CancelSwitchoverRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// target zone
	DestCell *string `json:"dest_cell,omitempty" xml:"dest_cell,omitempty" require:"true"`
	// instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// source zone
	SourceCell *string `json:"source_cell,omitempty" xml:"source_cell,omitempty" require:"true"`
}

func (s CancelSwitchoverRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelSwitchoverRequest) GoString() string {
	return s.String()
}

func (s *CancelSwitchoverRequest) SetAuthToken(v string) *CancelSwitchoverRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelSwitchoverRequest) SetProductInstanceId(v string) *CancelSwitchoverRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CancelSwitchoverRequest) SetDestCell(v string) *CancelSwitchoverRequest {
	s.DestCell = &v
	return s
}

func (s *CancelSwitchoverRequest) SetInstanceId(v string) *CancelSwitchoverRequest {
	s.InstanceId = &v
	return s
}

func (s *CancelSwitchoverRequest) SetSourceCell(v string) *CancelSwitchoverRequest {
	s.SourceCell = &v
	return s
}

type CancelSwitchoverResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// request result
	Success *bool `json:"success,omitempty" xml:"success,omitempty" require:"true"`
}

func (s CancelSwitchoverResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelSwitchoverResponse) GoString() string {
	return s.String()
}

func (s *CancelSwitchoverResponse) SetReqMsgId(v string) *CancelSwitchoverResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelSwitchoverResponse) SetResultCode(v string) *CancelSwitchoverResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelSwitchoverResponse) SetResultMsg(v string) *CancelSwitchoverResponse {
	s.ResultMsg = &v
	return s
}

func (s *CancelSwitchoverResponse) SetSuccess(v bool) *CancelSwitchoverResponse {
	s.Success = &v
	return s
}

type QuerySwitchoverRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s QuerySwitchoverRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySwitchoverRequest) GoString() string {
	return s.String()
}

func (s *QuerySwitchoverRequest) SetAuthToken(v string) *QuerySwitchoverRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySwitchoverRequest) SetProductInstanceId(v string) *QuerySwitchoverRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySwitchoverRequest) SetInstanceId(v string) *QuerySwitchoverRequest {
	s.InstanceId = &v
	return s
}

type QuerySwitchoverResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// unit list
	Actions []*SwitchoverAction `json:"actions,omitempty" xml:"actions,omitempty" require:"true" type:"Repeated"`
}

func (s QuerySwitchoverResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySwitchoverResponse) GoString() string {
	return s.String()
}

func (s *QuerySwitchoverResponse) SetReqMsgId(v string) *QuerySwitchoverResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySwitchoverResponse) SetResultCode(v string) *QuerySwitchoverResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySwitchoverResponse) SetResultMsg(v string) *QuerySwitchoverResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySwitchoverResponse) SetActions(v []*SwitchoverAction) *QuerySwitchoverResponse {
	s.Actions = v
	return s
}

type GetMsgtypeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// count value
	Count *int `json:"count,omitempty" xml:"count,omitempty"`
	// message type: eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// middleware instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// offset value
	Offset *int `json:"offset,omitempty" xml:"offset,omitempty"`
	// tenant id
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// message type: topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// workspace id
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s GetMsgtypeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMsgtypeRequest) GoString() string {
	return s.String()
}

func (s *GetMsgtypeRequest) SetAuthToken(v string) *GetMsgtypeRequest {
	s.AuthToken = &v
	return s
}

func (s *GetMsgtypeRequest) SetProductInstanceId(v string) *GetMsgtypeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetMsgtypeRequest) SetCount(v int) *GetMsgtypeRequest {
	s.Count = &v
	return s
}

func (s *GetMsgtypeRequest) SetEventcode(v string) *GetMsgtypeRequest {
	s.Eventcode = &v
	return s
}

func (s *GetMsgtypeRequest) SetInstanceId(v string) *GetMsgtypeRequest {
	s.InstanceId = &v
	return s
}

func (s *GetMsgtypeRequest) SetOffset(v int) *GetMsgtypeRequest {
	s.Offset = &v
	return s
}

func (s *GetMsgtypeRequest) SetTenant(v string) *GetMsgtypeRequest {
	s.Tenant = &v
	return s
}

func (s *GetMsgtypeRequest) SetTopic(v string) *GetMsgtypeRequest {
	s.Topic = &v
	return s
}

func (s *GetMsgtypeRequest) SetWorkspace(v string) *GetMsgtypeRequest {
	s.Workspace = &v
	return s
}

type GetMsgtypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// request result
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetMsgtypeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMsgtypeResponse) GoString() string {
	return s.String()
}

func (s *GetMsgtypeResponse) SetReqMsgId(v string) *GetMsgtypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetMsgtypeResponse) SetResultCode(v string) *GetMsgtypeResponse {
	s.ResultCode = &v
	return s
}

func (s *GetMsgtypeResponse) SetResultMsg(v string) *GetMsgtypeResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetMsgtypeResponse) SetData(v string) *GetMsgtypeResponse {
	s.Data = &v
	return s
}

type UndeliveryMessageStatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// end time
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// message type: eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// group of subscriber
	Group *string `json:"group,omitempty" xml:"group,omitempty" require:"true"`
	// middleware instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// stauts
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// message type: topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s UndeliveryMessageStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UndeliveryMessageStatusRequest) GoString() string {
	return s.String()
}

func (s *UndeliveryMessageStatusRequest) SetAuthToken(v string) *UndeliveryMessageStatusRequest {
	s.AuthToken = &v
	return s
}

func (s *UndeliveryMessageStatusRequest) SetProductInstanceId(v string) *UndeliveryMessageStatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UndeliveryMessageStatusRequest) SetEndTime(v int64) *UndeliveryMessageStatusRequest {
	s.EndTime = &v
	return s
}

func (s *UndeliveryMessageStatusRequest) SetEventcode(v string) *UndeliveryMessageStatusRequest {
	s.Eventcode = &v
	return s
}

func (s *UndeliveryMessageStatusRequest) SetGroup(v string) *UndeliveryMessageStatusRequest {
	s.Group = &v
	return s
}

func (s *UndeliveryMessageStatusRequest) SetInstanceId(v string) *UndeliveryMessageStatusRequest {
	s.InstanceId = &v
	return s
}

func (s *UndeliveryMessageStatusRequest) SetStatus(v string) *UndeliveryMessageStatusRequest {
	s.Status = &v
	return s
}

func (s *UndeliveryMessageStatusRequest) SetTopic(v string) *UndeliveryMessageStatusRequest {
	s.Topic = &v
	return s
}

type UndeliveryMessageStatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// count of undelivery message
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty" require:"true"`
}

func (s UndeliveryMessageStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UndeliveryMessageStatusResponse) GoString() string {
	return s.String()
}

func (s *UndeliveryMessageStatusResponse) SetReqMsgId(v string) *UndeliveryMessageStatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UndeliveryMessageStatusResponse) SetResultCode(v string) *UndeliveryMessageStatusResponse {
	s.ResultCode = &v
	return s
}

func (s *UndeliveryMessageStatusResponse) SetResultMsg(v string) *UndeliveryMessageStatusResponse {
	s.ResultMsg = &v
	return s
}

func (s *UndeliveryMessageStatusResponse) SetTotalCount(v int64) *UndeliveryMessageStatusResponse {
	s.TotalCount = &v
	return s
}

type QueryTopicsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// page num
	PageNum *int `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// page size
	PageSize *int `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s QueryTopicsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTopicsRequest) GoString() string {
	return s.String()
}

func (s *QueryTopicsRequest) SetAuthToken(v string) *QueryTopicsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTopicsRequest) SetProductInstanceId(v string) *QueryTopicsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryTopicsRequest) SetEventcode(v string) *QueryTopicsRequest {
	s.Eventcode = &v
	return s
}

func (s *QueryTopicsRequest) SetInstanceId(v string) *QueryTopicsRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryTopicsRequest) SetPageNum(v int) *QueryTopicsRequest {
	s.PageNum = &v
	return s
}

func (s *QueryTopicsRequest) SetPageSize(v int) *QueryTopicsRequest {
	s.PageSize = &v
	return s
}

func (s *QueryTopicsRequest) SetTopic(v string) *QueryTopicsRequest {
	s.Topic = &v
	return s
}

type QueryTopicsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// page num
	PageNum *int `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// page size
	PageSize *int `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// list
	Topics []*Topic `json:"topics,omitempty" xml:"topics,omitempty" require:"true" type:"Repeated"`
	// total count
	TotalCount *int `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryTopicsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTopicsResponse) GoString() string {
	return s.String()
}

func (s *QueryTopicsResponse) SetReqMsgId(v string) *QueryTopicsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTopicsResponse) SetResultCode(v string) *QueryTopicsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTopicsResponse) SetResultMsg(v string) *QueryTopicsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTopicsResponse) SetPageNum(v int) *QueryTopicsResponse {
	s.PageNum = &v
	return s
}

func (s *QueryTopicsResponse) SetPageSize(v int) *QueryTopicsResponse {
	s.PageSize = &v
	return s
}

func (s *QueryTopicsResponse) SetTopics(v []*Topic) *QueryTopicsResponse {
	s.Topics = v
	return s
}

func (s *QueryTopicsResponse) SetTotalCount(v int) *QueryTopicsResponse {
	s.TotalCount = &v
	return s
}

type IdTopicQueryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s IdTopicQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s IdTopicQueryRequest) GoString() string {
	return s.String()
}

func (s *IdTopicQueryRequest) SetAuthToken(v string) *IdTopicQueryRequest {
	s.AuthToken = &v
	return s
}

func (s *IdTopicQueryRequest) SetProductInstanceId(v string) *IdTopicQueryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *IdTopicQueryRequest) SetId(v string) *IdTopicQueryRequest {
	s.Id = &v
	return s
}

func (s *IdTopicQueryRequest) SetInstanceId(v string) *IdTopicQueryRequest {
	s.InstanceId = &v
	return s
}

type IdTopicQueryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// topic
	Topic *Topic `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s IdTopicQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s IdTopicQueryResponse) GoString() string {
	return s.String()
}

func (s *IdTopicQueryResponse) SetReqMsgId(v string) *IdTopicQueryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *IdTopicQueryResponse) SetResultCode(v string) *IdTopicQueryResponse {
	s.ResultCode = &v
	return s
}

func (s *IdTopicQueryResponse) SetResultMsg(v string) *IdTopicQueryResponse {
	s.ResultMsg = &v
	return s
}

func (s *IdTopicQueryResponse) SetTopic(v *Topic) *IdTopicQueryResponse {
	s.Topic = v
	return s
}

type AddTopicRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// desc
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty" require:"true"`
	// eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s AddTopicRequest) String() string {
	return tea.Prettify(s)
}

func (s AddTopicRequest) GoString() string {
	return s.String()
}

func (s *AddTopicRequest) SetAuthToken(v string) *AddTopicRequest {
	s.AuthToken = &v
	return s
}

func (s *AddTopicRequest) SetProductInstanceId(v string) *AddTopicRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AddTopicRequest) SetDesc(v string) *AddTopicRequest {
	s.Desc = &v
	return s
}

func (s *AddTopicRequest) SetEventcode(v string) *AddTopicRequest {
	s.Eventcode = &v
	return s
}

func (s *AddTopicRequest) SetInstanceId(v string) *AddTopicRequest {
	s.InstanceId = &v
	return s
}

func (s *AddTopicRequest) SetTopic(v string) *AddTopicRequest {
	s.Topic = &v
	return s
}

type AddTopicResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
}

func (s AddTopicResponse) String() string {
	return tea.Prettify(s)
}

func (s AddTopicResponse) GoString() string {
	return s.String()
}

func (s *AddTopicResponse) SetReqMsgId(v string) *AddTopicResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddTopicResponse) SetResultCode(v string) *AddTopicResponse {
	s.ResultCode = &v
	return s
}

func (s *AddTopicResponse) SetResultMsg(v string) *AddTopicResponse {
	s.ResultMsg = &v
	return s
}

func (s *AddTopicResponse) SetId(v string) *AddTopicResponse {
	s.Id = &v
	return s
}

func (s *AddTopicResponse) SetInstanceId(v string) *AddTopicResponse {
	s.InstanceId = &v
	return s
}

type UpdateTopicRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// desc
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty" require:"true"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s UpdateTopicRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTopicRequest) GoString() string {
	return s.String()
}

func (s *UpdateTopicRequest) SetAuthToken(v string) *UpdateTopicRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateTopicRequest) SetProductInstanceId(v string) *UpdateTopicRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateTopicRequest) SetDesc(v string) *UpdateTopicRequest {
	s.Desc = &v
	return s
}

func (s *UpdateTopicRequest) SetId(v string) *UpdateTopicRequest {
	s.Id = &v
	return s
}

func (s *UpdateTopicRequest) SetInstanceId(v string) *UpdateTopicRequest {
	s.InstanceId = &v
	return s
}

type UpdateTopicResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
}

func (s UpdateTopicResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTopicResponse) GoString() string {
	return s.String()
}

func (s *UpdateTopicResponse) SetReqMsgId(v string) *UpdateTopicResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateTopicResponse) SetResultCode(v string) *UpdateTopicResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateTopicResponse) SetResultMsg(v string) *UpdateTopicResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateTopicResponse) SetId(v string) *UpdateTopicResponse {
	s.Id = &v
	return s
}

func (s *UpdateTopicResponse) SetInstanceId(v string) *UpdateTopicResponse {
	s.InstanceId = &v
	return s
}

type DeleteTopicRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s DeleteTopicRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTopicRequest) GoString() string {
	return s.String()
}

func (s *DeleteTopicRequest) SetAuthToken(v string) *DeleteTopicRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteTopicRequest) SetProductInstanceId(v string) *DeleteTopicRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteTopicRequest) SetId(v string) *DeleteTopicRequest {
	s.Id = &v
	return s
}

func (s *DeleteTopicRequest) SetInstanceId(v string) *DeleteTopicRequest {
	s.InstanceId = &v
	return s
}

type DeleteTopicResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteTopicResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTopicResponse) GoString() string {
	return s.String()
}

func (s *DeleteTopicResponse) SetReqMsgId(v string) *DeleteTopicResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteTopicResponse) SetResultCode(v string) *DeleteTopicResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteTopicResponse) SetResultMsg(v string) *DeleteTopicResponse {
	s.ResultMsg = &v
	return s
}

type QueryBindingsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// appname
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// group
	Group *string `json:"group,omitempty" xml:"group,omitempty" require:"true"`
	// instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// page num
	PageNum *int `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// page size
	PageSize *int `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s QueryBindingsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBindingsRequest) GoString() string {
	return s.String()
}

func (s *QueryBindingsRequest) SetAuthToken(v string) *QueryBindingsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBindingsRequest) SetProductInstanceId(v string) *QueryBindingsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBindingsRequest) SetAppName(v string) *QueryBindingsRequest {
	s.AppName = &v
	return s
}

func (s *QueryBindingsRequest) SetEventcode(v string) *QueryBindingsRequest {
	s.Eventcode = &v
	return s
}

func (s *QueryBindingsRequest) SetGroup(v string) *QueryBindingsRequest {
	s.Group = &v
	return s
}

func (s *QueryBindingsRequest) SetInstanceId(v string) *QueryBindingsRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryBindingsRequest) SetPageNum(v int) *QueryBindingsRequest {
	s.PageNum = &v
	return s
}

func (s *QueryBindingsRequest) SetPageSize(v int) *QueryBindingsRequest {
	s.PageSize = &v
	return s
}

func (s *QueryBindingsRequest) SetTopic(v string) *QueryBindingsRequest {
	s.Topic = &v
	return s
}

type QueryBindingsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// list
	Bindings []*Binding `json:"bindings,omitempty" xml:"bindings,omitempty" require:"true" type:"Repeated"`
	// page num
	PageNum *int `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// page size
	PageSize *int `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// total count
	TotalCount *int `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryBindingsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBindingsResponse) GoString() string {
	return s.String()
}

func (s *QueryBindingsResponse) SetReqMsgId(v string) *QueryBindingsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBindingsResponse) SetResultCode(v string) *QueryBindingsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBindingsResponse) SetResultMsg(v string) *QueryBindingsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBindingsResponse) SetBindings(v []*Binding) *QueryBindingsResponse {
	s.Bindings = v
	return s
}

func (s *QueryBindingsResponse) SetPageNum(v int) *QueryBindingsResponse {
	s.PageNum = &v
	return s
}

func (s *QueryBindingsResponse) SetPageSize(v int) *QueryBindingsResponse {
	s.PageSize = &v
	return s
}

func (s *QueryBindingsResponse) SetTotalCount(v int) *QueryBindingsResponse {
	s.TotalCount = &v
	return s
}

type IdBindingQueryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s IdBindingQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s IdBindingQueryRequest) GoString() string {
	return s.String()
}

func (s *IdBindingQueryRequest) SetAuthToken(v string) *IdBindingQueryRequest {
	s.AuthToken = &v
	return s
}

func (s *IdBindingQueryRequest) SetProductInstanceId(v string) *IdBindingQueryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *IdBindingQueryRequest) SetId(v string) *IdBindingQueryRequest {
	s.Id = &v
	return s
}

func (s *IdBindingQueryRequest) SetInstanceId(v string) *IdBindingQueryRequest {
	s.InstanceId = &v
	return s
}

type IdBindingQueryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// binding
	Binding *Binding `json:"binding,omitempty" xml:"binding,omitempty" require:"true"`
}

func (s IdBindingQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s IdBindingQueryResponse) GoString() string {
	return s.String()
}

func (s *IdBindingQueryResponse) SetReqMsgId(v string) *IdBindingQueryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *IdBindingQueryResponse) SetResultCode(v string) *IdBindingQueryResponse {
	s.ResultCode = &v
	return s
}

func (s *IdBindingQueryResponse) SetResultMsg(v string) *IdBindingQueryResponse {
	s.ResultMsg = &v
	return s
}

func (s *IdBindingQueryResponse) SetBinding(v *Binding) *IdBindingQueryResponse {
	s.Binding = v
	return s
}

type ListSofamqTopicRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需获取的 Topic 信息列表所对应的实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页显示条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 查询指定 Topic 时设置，否则查询所有 Topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty"`
}

func (s ListSofamqTopicRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqTopicRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqTopicRequest) SetAuthToken(v string) *ListSofamqTopicRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqTopicRequest) SetProductInstanceId(v string) *ListSofamqTopicRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListSofamqTopicRequest) SetInstanceId(v string) *ListSofamqTopicRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSofamqTopicRequest) SetPageNum(v int64) *ListSofamqTopicRequest {
	s.PageNum = &v
	return s
}

func (s *ListSofamqTopicRequest) SetPageSize(v int64) *ListSofamqTopicRequest {
	s.PageSize = &v
	return s
}

func (s *ListSofamqTopicRequest) SetTopic(v string) *ListSofamqTopicRequest {
	s.Topic = &v
	return s
}

type ListSofamqTopicResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回所有查询到的 Topic 信息列表
	Data *TopicPageDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListSofamqTopicResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqTopicResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqTopicResponse) SetReqMsgId(v string) *ListSofamqTopicResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqTopicResponse) SetResultCode(v string) *ListSofamqTopicResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqTopicResponse) SetResultMsg(v string) *ListSofamqTopicResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqTopicResponse) SetData(v *TopicPageDTO) *ListSofamqTopicResponse {
	s.Data = v
	return s
}

type CreateSofamqTopicRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需创建的 Topic 所对应的实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 消息类型。取值说明如下：0：普通消息；1：分区顺序消息；2：全局顺序消息；4：事务消息；5：定时/延时消息。
	MessageType *int64 `json:"message_type,omitempty" xml:"message_type,omitempty" require:"true"`
	// Topic 的备注信息
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
	// 需创建的 Topic 的名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// Topic对应Schema的兼容性策略
	SchemaCompatibility *string `json:"schema_compatibility,omitempty" xml:"schema_compatibility,omitempty"`
	// Topic对应Schema的序列化方式
	SchemaSerialization *string `json:"schema_serialization,omitempty" xml:"schema_serialization,omitempty"`
	// Topic 所属的应用名称，要求 app name 在 zappinfo 上可查
	Owner *string `json:"owner,omitempty" xml:"owner,omitempty"`
}

func (s CreateSofamqTopicRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqTopicRequest) GoString() string {
	return s.String()
}

func (s *CreateSofamqTopicRequest) SetAuthToken(v string) *CreateSofamqTopicRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSofamqTopicRequest) SetProductInstanceId(v string) *CreateSofamqTopicRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSofamqTopicRequest) SetInstanceId(v string) *CreateSofamqTopicRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateSofamqTopicRequest) SetMessageType(v int64) *CreateSofamqTopicRequest {
	s.MessageType = &v
	return s
}

func (s *CreateSofamqTopicRequest) SetRemark(v string) *CreateSofamqTopicRequest {
	s.Remark = &v
	return s
}

func (s *CreateSofamqTopicRequest) SetTopic(v string) *CreateSofamqTopicRequest {
	s.Topic = &v
	return s
}

func (s *CreateSofamqTopicRequest) SetSchemaCompatibility(v string) *CreateSofamqTopicRequest {
	s.SchemaCompatibility = &v
	return s
}

func (s *CreateSofamqTopicRequest) SetSchemaSerialization(v string) *CreateSofamqTopicRequest {
	s.SchemaSerialization = &v
	return s
}

func (s *CreateSofamqTopicRequest) SetOwner(v string) *CreateSofamqTopicRequest {
	s.Owner = &v
	return s
}

type CreateSofamqTopicResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateSofamqTopicResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqTopicResponse) GoString() string {
	return s.String()
}

func (s *CreateSofamqTopicResponse) SetReqMsgId(v string) *CreateSofamqTopicResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSofamqTopicResponse) SetResultCode(v string) *CreateSofamqTopicResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSofamqTopicResponse) SetResultMsg(v string) *CreateSofamqTopicResponse {
	s.ResultMsg = &v
	return s
}

type DeleteSofamqTopicRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需删除的 Topic 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 指定删除的 Topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s DeleteSofamqTopicRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqTopicRequest) GoString() string {
	return s.String()
}

func (s *DeleteSofamqTopicRequest) SetAuthToken(v string) *DeleteSofamqTopicRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSofamqTopicRequest) SetProductInstanceId(v string) *DeleteSofamqTopicRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteSofamqTopicRequest) SetInstanceId(v string) *DeleteSofamqTopicRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteSofamqTopicRequest) SetTopic(v string) *DeleteSofamqTopicRequest {
	s.Topic = &v
	return s
}

type DeleteSofamqTopicResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSofamqTopicResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqTopicResponse) GoString() string {
	return s.String()
}

func (s *DeleteSofamqTopicResponse) SetReqMsgId(v string) *DeleteSofamqTopicResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSofamqTopicResponse) SetResultCode(v string) *DeleteSofamqTopicResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSofamqTopicResponse) SetResultMsg(v string) *DeleteSofamqTopicResponse {
	s.ResultMsg = &v
	return s
}

type UpdateSofamqTopicRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需更新读写权限的 Topic 所对应的实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 设置该 Topic 的读写模式。取值说明：6：同时支持读写；4：禁写；2：禁读。
	Perm *int64 `json:"perm,omitempty" xml:"perm,omitempty" require:"true"`
	// 需更新读写权限的 Topic 名称。一个用户下不可重复。
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s UpdateSofamqTopicRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqTopicRequest) GoString() string {
	return s.String()
}

func (s *UpdateSofamqTopicRequest) SetAuthToken(v string) *UpdateSofamqTopicRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSofamqTopicRequest) SetProductInstanceId(v string) *UpdateSofamqTopicRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateSofamqTopicRequest) SetInstanceId(v string) *UpdateSofamqTopicRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateSofamqTopicRequest) SetPerm(v int64) *UpdateSofamqTopicRequest {
	s.Perm = &v
	return s
}

func (s *UpdateSofamqTopicRequest) SetTopic(v string) *UpdateSofamqTopicRequest {
	s.Topic = &v
	return s
}

type UpdateSofamqTopicResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSofamqTopicResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqTopicResponse) GoString() string {
	return s.String()
}

func (s *UpdateSofamqTopicResponse) SetReqMsgId(v string) *UpdateSofamqTopicResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSofamqTopicResponse) SetResultCode(v string) *UpdateSofamqTopicResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSofamqTopicResponse) SetResultMsg(v string) *UpdateSofamqTopicResponse {
	s.ResultMsg = &v
	return s
}

type ListSofamqInstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 页号
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页显示条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
	// 用户id
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	// 集群名
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty"`
}

func (s ListSofamqInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqInstanceRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqInstanceRequest) SetAuthToken(v string) *ListSofamqInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqInstanceRequest) SetProductInstanceId(v string) *ListSofamqInstanceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListSofamqInstanceRequest) SetPageNum(v int64) *ListSofamqInstanceRequest {
	s.PageNum = &v
	return s
}

func (s *ListSofamqInstanceRequest) SetPageSize(v int64) *ListSofamqInstanceRequest {
	s.PageSize = &v
	return s
}

func (s *ListSofamqInstanceRequest) SetInstanceId(v string) *ListSofamqInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSofamqInstanceRequest) SetUserId(v string) *ListSofamqInstanceRequest {
	s.UserId = &v
	return s
}

func (s *ListSofamqInstanceRequest) SetCluster(v string) *ListSofamqInstanceRequest {
	s.Cluster = &v
	return s
}

type ListSofamqInstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// instance list
	Data *InstancePageDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListSofamqInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqInstanceResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqInstanceResponse) SetReqMsgId(v string) *ListSofamqInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqInstanceResponse) SetResultCode(v string) *ListSofamqInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqInstanceResponse) SetResultMsg(v string) *ListSofamqInstanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqInstanceResponse) SetData(v *InstancePageDTO) *ListSofamqInstanceResponse {
	s.Data = v
	return s
}

type CreateSofamqInstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例名称，长度为 3-64，取值可为中英文
	InstanceName *string `json:"instance_name,omitempty" xml:"instance_name,omitempty" require:"true"`
	// 备注信息
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s CreateSofamqInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateSofamqInstanceRequest) SetAuthToken(v string) *CreateSofamqInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSofamqInstanceRequest) SetProductInstanceId(v string) *CreateSofamqInstanceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSofamqInstanceRequest) SetInstanceName(v string) *CreateSofamqInstanceRequest {
	s.InstanceName = &v
	return s
}

func (s *CreateSofamqInstanceRequest) SetRemark(v string) *CreateSofamqInstanceRequest {
	s.Remark = &v
	return s
}

type CreateSofamqInstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// InstanceCreate返回数据
	Data *InstanceCreateDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateSofamqInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateSofamqInstanceResponse) SetReqMsgId(v string) *CreateSofamqInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSofamqInstanceResponse) SetResultCode(v string) *CreateSofamqInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSofamqInstanceResponse) SetResultMsg(v string) *CreateSofamqInstanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateSofamqInstanceResponse) SetData(v *InstanceCreateDTO) *CreateSofamqInstanceResponse {
	s.Data = v
	return s
}

type DeleteSofamqInstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s DeleteSofamqInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqInstanceRequest) GoString() string {
	return s.String()
}

func (s *DeleteSofamqInstanceRequest) SetAuthToken(v string) *DeleteSofamqInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSofamqInstanceRequest) SetProductInstanceId(v string) *DeleteSofamqInstanceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteSofamqInstanceRequest) SetInstanceId(v string) *DeleteSofamqInstanceRequest {
	s.InstanceId = &v
	return s
}

type DeleteSofamqInstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSofamqInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqInstanceResponse) GoString() string {
	return s.String()
}

func (s *DeleteSofamqInstanceResponse) SetReqMsgId(v string) *DeleteSofamqInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSofamqInstanceResponse) SetResultCode(v string) *DeleteSofamqInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSofamqInstanceResponse) SetResultMsg(v string) *DeleteSofamqInstanceResponse {
	s.ResultMsg = &v
	return s
}

type UpdateSofamqInstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 实例名
	InstanceName *string `json:"instance_name,omitempty" xml:"instance_name,omitempty" require:"true"`
	// 实例描述
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s UpdateSofamqInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqInstanceRequest) GoString() string {
	return s.String()
}

func (s *UpdateSofamqInstanceRequest) SetAuthToken(v string) *UpdateSofamqInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSofamqInstanceRequest) SetProductInstanceId(v string) *UpdateSofamqInstanceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateSofamqInstanceRequest) SetInstanceId(v string) *UpdateSofamqInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateSofamqInstanceRequest) SetInstanceName(v string) *UpdateSofamqInstanceRequest {
	s.InstanceName = &v
	return s
}

func (s *UpdateSofamqInstanceRequest) SetRemark(v string) *UpdateSofamqInstanceRequest {
	s.Remark = &v
	return s
}

type UpdateSofamqInstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSofamqInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqInstanceResponse) GoString() string {
	return s.String()
}

func (s *UpdateSofamqInstanceResponse) SetReqMsgId(v string) *UpdateSofamqInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSofamqInstanceResponse) SetResultCode(v string) *UpdateSofamqInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSofamqInstanceResponse) SetResultMsg(v string) *UpdateSofamqInstanceResponse {
	s.ResultMsg = &v
	return s
}

type CreateSofamqGroupRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 创建的消息端 Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 需创建的 Group ID 所对应的实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// Group ID 描述信息
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
	// 指定创建的 Group ID 适用的协议。TCP 协议和 HTTP 协议的 Group ID 不可以共用，需要分别创建。取值说明如下：
	//
	// tcp：默认值，表示创建的 Group ID 仅适用于 TCP 协议的消息收发。
	// http：表示创建的 Group ID 仅适用于 HTTP 协议的消息收发。
	GroupType *string `json:"group_type,omitempty" xml:"group_type,omitempty"`
	// Group 所属的应用名称，要求 app name 在 zappinfo 上可查
	Owner *string `json:"owner,omitempty" xml:"owner,omitempty"`
}

func (s CreateSofamqGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateSofamqGroupRequest) SetAuthToken(v string) *CreateSofamqGroupRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSofamqGroupRequest) SetProductInstanceId(v string) *CreateSofamqGroupRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSofamqGroupRequest) SetGroupId(v string) *CreateSofamqGroupRequest {
	s.GroupId = &v
	return s
}

func (s *CreateSofamqGroupRequest) SetInstanceId(v string) *CreateSofamqGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateSofamqGroupRequest) SetRemark(v string) *CreateSofamqGroupRequest {
	s.Remark = &v
	return s
}

func (s *CreateSofamqGroupRequest) SetGroupType(v string) *CreateSofamqGroupRequest {
	s.GroupType = &v
	return s
}

func (s *CreateSofamqGroupRequest) SetOwner(v string) *CreateSofamqGroupRequest {
	s.Owner = &v
	return s
}

type CreateSofamqGroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateSofamqGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateSofamqGroupResponse) SetReqMsgId(v string) *CreateSofamqGroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSofamqGroupResponse) SetResultCode(v string) *CreateSofamqGroupResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSofamqGroupResponse) SetResultMsg(v string) *CreateSofamqGroupResponse {
	s.ResultMsg = &v
	return s
}

type ListSofamqGroupRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 查询指定 Group ID 时设置，否则查询所有 Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty"`
	// 需获取 Group ID 所对应的实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页显示数量
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 查询的 Group ID 适用的协议。TCP 协议和 HTTP 协议的 Group ID 不可以共用，需要分别创建。取值说明如下：
	//
	// tcp：默认值，表示该 Group ID 仅适用于 TCP 协议的消息收发。
	// http：表示该 Group ID 仅适用于 HTTP 协议的消息收发。
	GroupType *string `json:"group_type,omitempty" xml:"group_type,omitempty"`
}

func (s ListSofamqGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqGroupRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqGroupRequest) SetAuthToken(v string) *ListSofamqGroupRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqGroupRequest) SetProductInstanceId(v string) *ListSofamqGroupRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListSofamqGroupRequest) SetGroupId(v string) *ListSofamqGroupRequest {
	s.GroupId = &v
	return s
}

func (s *ListSofamqGroupRequest) SetInstanceId(v string) *ListSofamqGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSofamqGroupRequest) SetPageNum(v int64) *ListSofamqGroupRequest {
	s.PageNum = &v
	return s
}

func (s *ListSofamqGroupRequest) SetPageSize(v int64) *ListSofamqGroupRequest {
	s.PageSize = &v
	return s
}

func (s *ListSofamqGroupRequest) SetGroupType(v string) *ListSofamqGroupRequest {
	s.GroupType = &v
	return s
}

type ListSofamqGroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询到的订阅关系集合
	Data *GroupPageDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListSofamqGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqGroupResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqGroupResponse) SetReqMsgId(v string) *ListSofamqGroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqGroupResponse) SetResultCode(v string) *ListSofamqGroupResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqGroupResponse) SetResultMsg(v string) *ListSofamqGroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqGroupResponse) SetData(v *GroupPageDTO) *ListSofamqGroupResponse {
	s.Data = v
	return s
}

type DeleteSofamqGroupRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需要删除的消息消费集群的 Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 需删除的 Group ID 对应的实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s DeleteSofamqGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteSofamqGroupRequest) SetAuthToken(v string) *DeleteSofamqGroupRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSofamqGroupRequest) SetProductInstanceId(v string) *DeleteSofamqGroupRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteSofamqGroupRequest) SetGroupId(v string) *DeleteSofamqGroupRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteSofamqGroupRequest) SetInstanceId(v string) *DeleteSofamqGroupRequest {
	s.InstanceId = &v
	return s
}

type DeleteSofamqGroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSofamqGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteSofamqGroupResponse) SetReqMsgId(v string) *DeleteSofamqGroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSofamqGroupResponse) SetResultCode(v string) *DeleteSofamqGroupResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSofamqGroupResponse) SetResultMsg(v string) *DeleteSofamqGroupResponse {
	s.ResultMsg = &v
	return s
}

type UpdateSofamqGroupRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需配置的 Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 需配置的 Group ID 所对应的实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 设置读消息开关
	ReadEnable *bool `json:"read_enable,omitempty" xml:"read_enable,omitempty" require:"true"`
}

func (s UpdateSofamqGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqGroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateSofamqGroupRequest) SetAuthToken(v string) *UpdateSofamqGroupRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSofamqGroupRequest) SetProductInstanceId(v string) *UpdateSofamqGroupRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateSofamqGroupRequest) SetGroupId(v string) *UpdateSofamqGroupRequest {
	s.GroupId = &v
	return s
}

func (s *UpdateSofamqGroupRequest) SetInstanceId(v string) *UpdateSofamqGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateSofamqGroupRequest) SetReadEnable(v bool) *UpdateSofamqGroupRequest {
	s.ReadEnable = &v
	return s
}

type UpdateSofamqGroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSofamqGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqGroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateSofamqGroupResponse) SetReqMsgId(v string) *UpdateSofamqGroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSofamqGroupResponse) SetResultCode(v string) *UpdateSofamqGroupResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSofamqGroupResponse) SetResultMsg(v string) *UpdateSofamqGroupResponse {
	s.ResultMsg = &v
	return s
}

type QuerySofamqTopicstatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需查询的 Topic 所在的 Cell
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 需查询的 Topic 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 需查询的 Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s QuerySofamqTopicstatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqTopicstatusRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqTopicstatusRequest) SetAuthToken(v string) *QuerySofamqTopicstatusRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqTopicstatusRequest) SetProductInstanceId(v string) *QuerySofamqTopicstatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqTopicstatusRequest) SetCell(v string) *QuerySofamqTopicstatusRequest {
	s.Cell = &v
	return s
}

func (s *QuerySofamqTopicstatusRequest) SetInstanceId(v string) *QuerySofamqTopicstatusRequest {
	s.InstanceId = &v
	return s
}

func (s *QuerySofamqTopicstatusRequest) SetTopic(v string) *QuerySofamqTopicstatusRequest {
	s.Topic = &v
	return s
}

type QuerySofamqTopicstatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询到的 Topic 的信息存储数据结构
	Data *TopicStatusDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySofamqTopicstatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqTopicstatusResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqTopicstatusResponse) SetReqMsgId(v string) *QuerySofamqTopicstatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqTopicstatusResponse) SetResultCode(v string) *QuerySofamqTopicstatusResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqTopicstatusResponse) SetResultMsg(v string) *QuerySofamqTopicstatusResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqTopicstatusResponse) SetData(v *TopicStatusDTO) *QuerySofamqTopicstatusResponse {
	s.Data = v
	return s
}

type QuerySofamqTopicsubdetailRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需查询的 Topic 所在的单元
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 需查询的 Topic 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 需查询的 Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s QuerySofamqTopicsubdetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqTopicsubdetailRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqTopicsubdetailRequest) SetAuthToken(v string) *QuerySofamqTopicsubdetailRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqTopicsubdetailRequest) SetProductInstanceId(v string) *QuerySofamqTopicsubdetailRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqTopicsubdetailRequest) SetCell(v string) *QuerySofamqTopicsubdetailRequest {
	s.Cell = &v
	return s
}

func (s *QuerySofamqTopicsubdetailRequest) SetInstanceId(v string) *QuerySofamqTopicsubdetailRequest {
	s.InstanceId = &v
	return s
}

func (s *QuerySofamqTopicsubdetailRequest) SetTopic(v string) *QuerySofamqTopicsubdetailRequest {
	s.Topic = &v
	return s
}

type QuerySofamqTopicsubdetailResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回 Data 对象
	Data *TopicSubDetailDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySofamqTopicsubdetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqTopicsubdetailResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqTopicsubdetailResponse) SetReqMsgId(v string) *QuerySofamqTopicsubdetailResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqTopicsubdetailResponse) SetResultCode(v string) *QuerySofamqTopicsubdetailResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqTopicsubdetailResponse) SetResultMsg(v string) *QuerySofamqTopicsubdetailResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqTopicsubdetailResponse) SetData(v *TopicSubDetailDTO) *QuerySofamqTopicsubdetailResponse {
	s.Data = v
	return s
}

type ListSofamqNodeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// cluster
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty"`
	// data_center
	DataCenter *string `json:"data_center,omitempty" xml:"data_center,omitempty"`
	// hostname
	Hostname *string `json:"hostname,omitempty" xml:"hostname,omitempty"`
	// node_group
	NodeGroup *string `json:"node_group,omitempty" xml:"node_group,omitempty"`
	// room
	Room *string `json:"room,omitempty" xml:"room,omitempty"`
	// page num
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// page size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
}

func (s ListSofamqNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqNodeRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqNodeRequest) SetAuthToken(v string) *ListSofamqNodeRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqNodeRequest) SetProductInstanceId(v string) *ListSofamqNodeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListSofamqNodeRequest) SetCluster(v string) *ListSofamqNodeRequest {
	s.Cluster = &v
	return s
}

func (s *ListSofamqNodeRequest) SetDataCenter(v string) *ListSofamqNodeRequest {
	s.DataCenter = &v
	return s
}

func (s *ListSofamqNodeRequest) SetHostname(v string) *ListSofamqNodeRequest {
	s.Hostname = &v
	return s
}

func (s *ListSofamqNodeRequest) SetNodeGroup(v string) *ListSofamqNodeRequest {
	s.NodeGroup = &v
	return s
}

func (s *ListSofamqNodeRequest) SetRoom(v string) *ListSofamqNodeRequest {
	s.Room = &v
	return s
}

func (s *ListSofamqNodeRequest) SetPageNum(v int64) *ListSofamqNodeRequest {
	s.PageNum = &v
	return s
}

func (s *ListSofamqNodeRequest) SetPageSize(v int64) *ListSofamqNodeRequest {
	s.PageSize = &v
	return s
}

type ListSofamqNodeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// node list
	Data *NodePageDO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListSofamqNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqNodeResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqNodeResponse) SetReqMsgId(v string) *ListSofamqNodeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqNodeResponse) SetResultCode(v string) *ListSofamqNodeResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqNodeResponse) SetResultMsg(v string) *ListSofamqNodeResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqNodeResponse) SetData(v *NodePageDO) *ListSofamqNodeResponse {
	s.Data = v
	return s
}

type CreateSofamqNodeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// cluster
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty"`
	// hostname
	Hostname *string `json:"hostname,omitempty" xml:"hostname,omitempty" require:"true"`
	// node_group
	NodeGroup *string `json:"node_group,omitempty" xml:"node_group,omitempty"`
	// node_type
	NodeType *string `json:"node_type,omitempty" xml:"node_type,omitempty"`
	// perm
	Perm *string `json:"perm,omitempty" xml:"perm,omitempty"`
	// rip
	Rip *string `json:"rip,omitempty" xml:"rip,omitempty"`
	// room
	Room *string `json:"room,omitempty" xml:"room,omitempty"`
	// vip
	Vip *string `json:"vip,omitempty" xml:"vip,omitempty"`
	// default
	DataCenter *string `json:"data_center,omitempty" xml:"data_center,omitempty"`
}

func (s CreateSofamqNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqNodeRequest) GoString() string {
	return s.String()
}

func (s *CreateSofamqNodeRequest) SetAuthToken(v string) *CreateSofamqNodeRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSofamqNodeRequest) SetProductInstanceId(v string) *CreateSofamqNodeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSofamqNodeRequest) SetCluster(v string) *CreateSofamqNodeRequest {
	s.Cluster = &v
	return s
}

func (s *CreateSofamqNodeRequest) SetHostname(v string) *CreateSofamqNodeRequest {
	s.Hostname = &v
	return s
}

func (s *CreateSofamqNodeRequest) SetNodeGroup(v string) *CreateSofamqNodeRequest {
	s.NodeGroup = &v
	return s
}

func (s *CreateSofamqNodeRequest) SetNodeType(v string) *CreateSofamqNodeRequest {
	s.NodeType = &v
	return s
}

func (s *CreateSofamqNodeRequest) SetPerm(v string) *CreateSofamqNodeRequest {
	s.Perm = &v
	return s
}

func (s *CreateSofamqNodeRequest) SetRip(v string) *CreateSofamqNodeRequest {
	s.Rip = &v
	return s
}

func (s *CreateSofamqNodeRequest) SetRoom(v string) *CreateSofamqNodeRequest {
	s.Room = &v
	return s
}

func (s *CreateSofamqNodeRequest) SetVip(v string) *CreateSofamqNodeRequest {
	s.Vip = &v
	return s
}

func (s *CreateSofamqNodeRequest) SetDataCenter(v string) *CreateSofamqNodeRequest {
	s.DataCenter = &v
	return s
}

type CreateSofamqNodeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateSofamqNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqNodeResponse) GoString() string {
	return s.String()
}

func (s *CreateSofamqNodeResponse) SetReqMsgId(v string) *CreateSofamqNodeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSofamqNodeResponse) SetResultCode(v string) *CreateSofamqNodeResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSofamqNodeResponse) SetResultMsg(v string) *CreateSofamqNodeResponse {
	s.ResultMsg = &v
	return s
}

type CreateSofamqRoomRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// cluster
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty" require:"true"`
	// endpoint
	Endpoint *string `json:"endpoint,omitempty" xml:"endpoint,omitempty"`
	// endpoint_type
	EndpointType *string `json:"endpoint_type,omitempty" xml:"endpoint_type,omitempty"`
	// region
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
	// room
	Room *string `json:"room,omitempty" xml:"room,omitempty" require:"true"`
}

func (s CreateSofamqRoomRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqRoomRequest) GoString() string {
	return s.String()
}

func (s *CreateSofamqRoomRequest) SetAuthToken(v string) *CreateSofamqRoomRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSofamqRoomRequest) SetProductInstanceId(v string) *CreateSofamqRoomRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSofamqRoomRequest) SetCluster(v string) *CreateSofamqRoomRequest {
	s.Cluster = &v
	return s
}

func (s *CreateSofamqRoomRequest) SetEndpoint(v string) *CreateSofamqRoomRequest {
	s.Endpoint = &v
	return s
}

func (s *CreateSofamqRoomRequest) SetEndpointType(v string) *CreateSofamqRoomRequest {
	s.EndpointType = &v
	return s
}

func (s *CreateSofamqRoomRequest) SetRegion(v string) *CreateSofamqRoomRequest {
	s.Region = &v
	return s
}

func (s *CreateSofamqRoomRequest) SetRoom(v string) *CreateSofamqRoomRequest {
	s.Room = &v
	return s
}

type CreateSofamqRoomResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateSofamqRoomResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqRoomResponse) GoString() string {
	return s.String()
}

func (s *CreateSofamqRoomResponse) SetReqMsgId(v string) *CreateSofamqRoomResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSofamqRoomResponse) SetResultCode(v string) *CreateSofamqRoomResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSofamqRoomResponse) SetResultMsg(v string) *CreateSofamqRoomResponse {
	s.ResultMsg = &v
	return s
}

type CreateSofamqCellRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// cell
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty" require:"true"`
	// cell_type
	CellType *string `json:"cell_type,omitempty" xml:"cell_type,omitempty"`
	// default
	Datacenter *string `json:"datacenter,omitempty" xml:"datacenter,omitempty"`
	// endpoint
	Endpoint *string `json:"endpoint,omitempty" xml:"endpoint,omitempty"`
	// endpoint_type
	EndpointType *string `json:"endpoint_type,omitempty" xml:"endpoint_type,omitempty"`
	// ns id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// room
	Room *string `json:"room,omitempty" xml:"room,omitempty"`
}

func (s CreateSofamqCellRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqCellRequest) GoString() string {
	return s.String()
}

func (s *CreateSofamqCellRequest) SetAuthToken(v string) *CreateSofamqCellRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSofamqCellRequest) SetProductInstanceId(v string) *CreateSofamqCellRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSofamqCellRequest) SetCell(v string) *CreateSofamqCellRequest {
	s.Cell = &v
	return s
}

func (s *CreateSofamqCellRequest) SetCellType(v string) *CreateSofamqCellRequest {
	s.CellType = &v
	return s
}

func (s *CreateSofamqCellRequest) SetDatacenter(v string) *CreateSofamqCellRequest {
	s.Datacenter = &v
	return s
}

func (s *CreateSofamqCellRequest) SetEndpoint(v string) *CreateSofamqCellRequest {
	s.Endpoint = &v
	return s
}

func (s *CreateSofamqCellRequest) SetEndpointType(v string) *CreateSofamqCellRequest {
	s.EndpointType = &v
	return s
}

func (s *CreateSofamqCellRequest) SetInstanceId(v string) *CreateSofamqCellRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateSofamqCellRequest) SetRoom(v string) *CreateSofamqCellRequest {
	s.Room = &v
	return s
}

type CreateSofamqCellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateSofamqCellResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqCellResponse) GoString() string {
	return s.String()
}

func (s *CreateSofamqCellResponse) SetReqMsgId(v string) *CreateSofamqCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSofamqCellResponse) SetResultCode(v string) *CreateSofamqCellResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSofamqCellResponse) SetResultMsg(v string) *CreateSofamqCellResponse {
	s.ResultMsg = &v
	return s
}

type CreateSofamqClusterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// appkey
	Appkey *string `json:"appkey,omitempty" xml:"appkey,omitempty"`
	// cluster
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty" require:"true"`
	// cluster_type
	ClusterType *string `json:"cluster_type,omitempty" xml:"cluster_type,omitempty"`
	// 0:单机房,1:本地优先,2:交叉部署,3:独占LDC
	DeployMode *string `json:"deploy_mode,omitempty" xml:"deploy_mode,omitempty"`
	// unshared: 独占
	// shared: 共享
	LdcMode *string `json:"ldc_mode,omitempty" xml:"ldc_mode,omitempty"`
	// remark
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s CreateSofamqClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqClusterRequest) GoString() string {
	return s.String()
}

func (s *CreateSofamqClusterRequest) SetAuthToken(v string) *CreateSofamqClusterRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSofamqClusterRequest) SetProductInstanceId(v string) *CreateSofamqClusterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSofamqClusterRequest) SetAppkey(v string) *CreateSofamqClusterRequest {
	s.Appkey = &v
	return s
}

func (s *CreateSofamqClusterRequest) SetCluster(v string) *CreateSofamqClusterRequest {
	s.Cluster = &v
	return s
}

func (s *CreateSofamqClusterRequest) SetClusterType(v string) *CreateSofamqClusterRequest {
	s.ClusterType = &v
	return s
}

func (s *CreateSofamqClusterRequest) SetDeployMode(v string) *CreateSofamqClusterRequest {
	s.DeployMode = &v
	return s
}

func (s *CreateSofamqClusterRequest) SetLdcMode(v string) *CreateSofamqClusterRequest {
	s.LdcMode = &v
	return s
}

func (s *CreateSofamqClusterRequest) SetRemark(v string) *CreateSofamqClusterRequest {
	s.Remark = &v
	return s
}

type CreateSofamqClusterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateSofamqClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqClusterResponse) GoString() string {
	return s.String()
}

func (s *CreateSofamqClusterResponse) SetReqMsgId(v string) *CreateSofamqClusterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSofamqClusterResponse) SetResultCode(v string) *CreateSofamqClusterResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSofamqClusterResponse) SetResultMsg(v string) *CreateSofamqClusterResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateSofamqClusterResponse) SetData(v string) *CreateSofamqClusterResponse {
	s.Data = &v
	return s
}

type CreateSofamqNamespaceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// instance_type
	InstanceType *string `json:"instance_type,omitempty" xml:"instance_type,omitempty"`
	// nsid
	NamespaceId *string `json:"namespace_id,omitempty" xml:"namespace_id,omitempty" require:"true"`
	// namespace_name
	NamespaceName *string `json:"namespace_name,omitempty" xml:"namespace_name,omitempty" require:"true"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
	// workspace_group
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty"`
	// ldcMode
	LdcMode *int64 `json:"ldc_mode,omitempty" xml:"ldc_mode,omitempty" require:"true"`
}

func (s CreateSofamqNamespaceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqNamespaceRequest) GoString() string {
	return s.String()
}

func (s *CreateSofamqNamespaceRequest) SetAuthToken(v string) *CreateSofamqNamespaceRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSofamqNamespaceRequest) SetProductInstanceId(v string) *CreateSofamqNamespaceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSofamqNamespaceRequest) SetInstanceId(v string) *CreateSofamqNamespaceRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateSofamqNamespaceRequest) SetInstanceType(v string) *CreateSofamqNamespaceRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateSofamqNamespaceRequest) SetNamespaceId(v string) *CreateSofamqNamespaceRequest {
	s.NamespaceId = &v
	return s
}

func (s *CreateSofamqNamespaceRequest) SetNamespaceName(v string) *CreateSofamqNamespaceRequest {
	s.NamespaceName = &v
	return s
}

func (s *CreateSofamqNamespaceRequest) SetWorkspace(v string) *CreateSofamqNamespaceRequest {
	s.Workspace = &v
	return s
}

func (s *CreateSofamqNamespaceRequest) SetWorkspaceGroup(v string) *CreateSofamqNamespaceRequest {
	s.WorkspaceGroup = &v
	return s
}

func (s *CreateSofamqNamespaceRequest) SetLdcMode(v int64) *CreateSofamqNamespaceRequest {
	s.LdcMode = &v
	return s
}

type CreateSofamqNamespaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateSofamqNamespaceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqNamespaceResponse) GoString() string {
	return s.String()
}

func (s *CreateSofamqNamespaceResponse) SetReqMsgId(v string) *CreateSofamqNamespaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSofamqNamespaceResponse) SetResultCode(v string) *CreateSofamqNamespaceResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSofamqNamespaceResponse) SetResultMsg(v string) *CreateSofamqNamespaceResponse {
	s.ResultMsg = &v
	return s
}

type ListSofamqRoomRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// cluster
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty"`
	// region
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
	// room
	Room *string `json:"room,omitempty" xml:"room,omitempty"`
}

func (s ListSofamqRoomRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqRoomRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqRoomRequest) SetAuthToken(v string) *ListSofamqRoomRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqRoomRequest) SetProductInstanceId(v string) *ListSofamqRoomRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListSofamqRoomRequest) SetCluster(v string) *ListSofamqRoomRequest {
	s.Cluster = &v
	return s
}

func (s *ListSofamqRoomRequest) SetRegion(v string) *ListSofamqRoomRequest {
	s.Region = &v
	return s
}

func (s *ListSofamqRoomRequest) SetRoom(v string) *ListSofamqRoomRequest {
	s.Room = &v
	return s
}

type ListSofamqRoomResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// room
	Data []*RoomDO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListSofamqRoomResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqRoomResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqRoomResponse) SetReqMsgId(v string) *ListSofamqRoomResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqRoomResponse) SetResultCode(v string) *ListSofamqRoomResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqRoomResponse) SetResultMsg(v string) *ListSofamqRoomResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqRoomResponse) SetData(v []*RoomDO) *ListSofamqRoomResponse {
	s.Data = v
	return s
}

type ListSofamqCellRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// cell名
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty" require:"true"`
	// 需查询的 Group ID 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 页号
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
}

func (s ListSofamqCellRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqCellRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqCellRequest) SetAuthToken(v string) *ListSofamqCellRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqCellRequest) SetProductInstanceId(v string) *ListSofamqCellRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListSofamqCellRequest) SetCell(v string) *ListSofamqCellRequest {
	s.Cell = &v
	return s
}

func (s *ListSofamqCellRequest) SetInstanceId(v string) *ListSofamqCellRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSofamqCellRequest) SetPageNum(v int64) *ListSofamqCellRequest {
	s.PageNum = &v
	return s
}

func (s *ListSofamqCellRequest) SetPageSize(v int64) *ListSofamqCellRequest {
	s.PageSize = &v
	return s
}

type ListSofamqCellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// cell
	Data *CellPageDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListSofamqCellResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqCellResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqCellResponse) SetReqMsgId(v string) *ListSofamqCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqCellResponse) SetResultCode(v string) *ListSofamqCellResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqCellResponse) SetResultMsg(v string) *ListSofamqCellResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqCellResponse) SetData(v *CellPageDTO) *ListSofamqCellResponse {
	s.Data = v
	return s
}

type ListSofamqClusterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// cluster
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty"`
	// appkey
	Appkey *string `json:"appkey,omitempty" xml:"appkey,omitempty"`
}

func (s ListSofamqClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqClusterRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqClusterRequest) SetAuthToken(v string) *ListSofamqClusterRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqClusterRequest) SetProductInstanceId(v string) *ListSofamqClusterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListSofamqClusterRequest) SetCluster(v string) *ListSofamqClusterRequest {
	s.Cluster = &v
	return s
}

func (s *ListSofamqClusterRequest) SetAppkey(v string) *ListSofamqClusterRequest {
	s.Appkey = &v
	return s
}

type ListSofamqClusterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// list cell
	Data []*ClusterDO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListSofamqClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqClusterResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqClusterResponse) SetReqMsgId(v string) *ListSofamqClusterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqClusterResponse) SetResultCode(v string) *ListSofamqClusterResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqClusterResponse) SetResultMsg(v string) *ListSofamqClusterResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqClusterResponse) SetData(v []*ClusterDO) *ListSofamqClusterResponse {
	s.Data = v
	return s
}

type QuerySofamqGroupsubdetailRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需查询的 Group ID 所在的 Cell
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 需查询的 Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 需查询的 Group ID 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s QuerySofamqGroupsubdetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqGroupsubdetailRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqGroupsubdetailRequest) SetAuthToken(v string) *QuerySofamqGroupsubdetailRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqGroupsubdetailRequest) SetProductInstanceId(v string) *QuerySofamqGroupsubdetailRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqGroupsubdetailRequest) SetCell(v string) *QuerySofamqGroupsubdetailRequest {
	s.Cell = &v
	return s
}

func (s *QuerySofamqGroupsubdetailRequest) SetGroupId(v string) *QuerySofamqGroupsubdetailRequest {
	s.GroupId = &v
	return s
}

func (s *QuerySofamqGroupsubdetailRequest) SetInstanceId(v string) *QuerySofamqGroupsubdetailRequest {
	s.InstanceId = &v
	return s
}

type QuerySofamqGroupsubdetailResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回 Data 信息
	Data *GroupSubDetailDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySofamqGroupsubdetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqGroupsubdetailResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqGroupsubdetailResponse) SetReqMsgId(v string) *QuerySofamqGroupsubdetailResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqGroupsubdetailResponse) SetResultCode(v string) *QuerySofamqGroupsubdetailResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqGroupsubdetailResponse) SetResultMsg(v string) *QuerySofamqGroupsubdetailResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqGroupsubdetailResponse) SetData(v *GroupSubDetailDTO) *QuerySofamqGroupsubdetailResponse {
	s.Data = v
	return s
}

type GetSofamqInstancebaseinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需查询的实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s GetSofamqInstancebaseinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSofamqInstancebaseinfoRequest) GoString() string {
	return s.String()
}

func (s *GetSofamqInstancebaseinfoRequest) SetAuthToken(v string) *GetSofamqInstancebaseinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *GetSofamqInstancebaseinfoRequest) SetProductInstanceId(v string) *GetSofamqInstancebaseinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetSofamqInstancebaseinfoRequest) SetInstanceId(v string) *GetSofamqInstancebaseinfoRequest {
	s.InstanceId = &v
	return s
}

type GetSofamqInstancebaseinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 实例信息对象
	Data *InstanceBaseInfoDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetSofamqInstancebaseinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSofamqInstancebaseinfoResponse) GoString() string {
	return s.String()
}

func (s *GetSofamqInstancebaseinfoResponse) SetReqMsgId(v string) *GetSofamqInstancebaseinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetSofamqInstancebaseinfoResponse) SetResultCode(v string) *GetSofamqInstancebaseinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *GetSofamqInstancebaseinfoResponse) SetResultMsg(v string) *GetSofamqInstancebaseinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetSofamqInstancebaseinfoResponse) SetData(v *InstanceBaseInfoDTO) *GetSofamqInstancebaseinfoResponse {
	s.Data = v
	return s
}

type ExecSofamqConsumerresetoffsetRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需要查询的单元
	//
	//
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 需查询的消费端 Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 需查询的 Group ID 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 重置位点到指定的时间戳，仅在 Type 为 1 时生效。
	ResetTimestamp *int64 `json:"reset_timestamp,omitempty" xml:"reset_timestamp,omitempty"`
	// 需重置位点的 Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// 消息清理类型。取值说明如下：
	//
	// 0：清除所有消息
	// 1：清理到指定时间
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s ExecSofamqConsumerresetoffsetRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecSofamqConsumerresetoffsetRequest) GoString() string {
	return s.String()
}

func (s *ExecSofamqConsumerresetoffsetRequest) SetAuthToken(v string) *ExecSofamqConsumerresetoffsetRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecSofamqConsumerresetoffsetRequest) SetProductInstanceId(v string) *ExecSofamqConsumerresetoffsetRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecSofamqConsumerresetoffsetRequest) SetCell(v string) *ExecSofamqConsumerresetoffsetRequest {
	s.Cell = &v
	return s
}

func (s *ExecSofamqConsumerresetoffsetRequest) SetGroupId(v string) *ExecSofamqConsumerresetoffsetRequest {
	s.GroupId = &v
	return s
}

func (s *ExecSofamqConsumerresetoffsetRequest) SetInstanceId(v string) *ExecSofamqConsumerresetoffsetRequest {
	s.InstanceId = &v
	return s
}

func (s *ExecSofamqConsumerresetoffsetRequest) SetResetTimestamp(v int64) *ExecSofamqConsumerresetoffsetRequest {
	s.ResetTimestamp = &v
	return s
}

func (s *ExecSofamqConsumerresetoffsetRequest) SetTopic(v string) *ExecSofamqConsumerresetoffsetRequest {
	s.Topic = &v
	return s
}

func (s *ExecSofamqConsumerresetoffsetRequest) SetType(v int64) *ExecSofamqConsumerresetoffsetRequest {
	s.Type = &v
	return s
}

type ExecSofamqConsumerresetoffsetResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecSofamqConsumerresetoffsetResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecSofamqConsumerresetoffsetResponse) GoString() string {
	return s.String()
}

func (s *ExecSofamqConsumerresetoffsetResponse) SetReqMsgId(v string) *ExecSofamqConsumerresetoffsetResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecSofamqConsumerresetoffsetResponse) SetResultCode(v string) *ExecSofamqConsumerresetoffsetResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecSofamqConsumerresetoffsetResponse) SetResultMsg(v string) *ExecSofamqConsumerresetoffsetResponse {
	s.ResultMsg = &v
	return s
}

type QuerySofamqConsumeraccumulateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需要查询的 Group ID 所在的单元
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 是否查询详细信息。取值说明如下：true：要查询详细信息；false：不查询详细信息（默认值）。
	Detail *bool `json:"detail,omitempty" xml:"detail,omitempty"`
	// 需查询的消费端 Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 实例 ID。针对有独立命名空间的实例，该参数为必填。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s QuerySofamqConsumeraccumulateRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConsumeraccumulateRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqConsumeraccumulateRequest) SetAuthToken(v string) *QuerySofamqConsumeraccumulateRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqConsumeraccumulateRequest) SetProductInstanceId(v string) *QuerySofamqConsumeraccumulateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqConsumeraccumulateRequest) SetCell(v string) *QuerySofamqConsumeraccumulateRequest {
	s.Cell = &v
	return s
}

func (s *QuerySofamqConsumeraccumulateRequest) SetDetail(v bool) *QuerySofamqConsumeraccumulateRequest {
	s.Detail = &v
	return s
}

func (s *QuerySofamqConsumeraccumulateRequest) SetGroupId(v string) *QuerySofamqConsumeraccumulateRequest {
	s.GroupId = &v
	return s
}

func (s *QuerySofamqConsumeraccumulateRequest) SetInstanceId(v string) *QuerySofamqConsumeraccumulateRequest {
	s.InstanceId = &v
	return s
}

type QuerySofamqConsumeraccumulateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 指定 Consumer 的消费堆积情况
	Data *ConsumerAccumulateDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySofamqConsumeraccumulateResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConsumeraccumulateResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqConsumeraccumulateResponse) SetReqMsgId(v string) *QuerySofamqConsumeraccumulateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqConsumeraccumulateResponse) SetResultCode(v string) *QuerySofamqConsumeraccumulateResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqConsumeraccumulateResponse) SetResultMsg(v string) *QuerySofamqConsumeraccumulateResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqConsumeraccumulateResponse) SetData(v *ConsumerAccumulateDTO) *QuerySofamqConsumeraccumulateResponse {
	s.Data = v
	return s
}

type QuerySofamqConsumerconnectionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需要查询的 Group ID 所在的单元
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 需查询的 Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 需查询的 Group ID 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s QuerySofamqConsumerconnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConsumerconnectionRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqConsumerconnectionRequest) SetAuthToken(v string) *QuerySofamqConsumerconnectionRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqConsumerconnectionRequest) SetProductInstanceId(v string) *QuerySofamqConsumerconnectionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqConsumerconnectionRequest) SetCell(v string) *QuerySofamqConsumerconnectionRequest {
	s.Cell = &v
	return s
}

func (s *QuerySofamqConsumerconnectionRequest) SetGroupId(v string) *QuerySofamqConsumerconnectionRequest {
	s.GroupId = &v
	return s
}

func (s *QuerySofamqConsumerconnectionRequest) SetInstanceId(v string) *QuerySofamqConsumerconnectionRequest {
	s.InstanceId = &v
	return s
}

type QuerySofamqConsumerconnectionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 指定 Group ID 的连接信息
	//
	//
	Data *ConsumerGetConnectionDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySofamqConsumerconnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConsumerconnectionResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqConsumerconnectionResponse) SetReqMsgId(v string) *QuerySofamqConsumerconnectionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqConsumerconnectionResponse) SetResultCode(v string) *QuerySofamqConsumerconnectionResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqConsumerconnectionResponse) SetResultMsg(v string) *QuerySofamqConsumerconnectionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqConsumerconnectionResponse) SetData(v *ConsumerGetConnectionDTO) *QuerySofamqConsumerconnectionResponse {
	s.Data = v
	return s
}

type QuerySofamqConsumertimespanRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需查询的消费端 Group ID 所在的 Cell
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 需查询的消费端 Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 需查询的消费端 Group ID 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 需查询的消费端 Group ID 订阅的 Topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s QuerySofamqConsumertimespanRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConsumertimespanRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqConsumertimespanRequest) SetAuthToken(v string) *QuerySofamqConsumertimespanRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqConsumertimespanRequest) SetProductInstanceId(v string) *QuerySofamqConsumertimespanRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqConsumertimespanRequest) SetCell(v string) *QuerySofamqConsumertimespanRequest {
	s.Cell = &v
	return s
}

func (s *QuerySofamqConsumertimespanRequest) SetGroupId(v string) *QuerySofamqConsumertimespanRequest {
	s.GroupId = &v
	return s
}

func (s *QuerySofamqConsumertimespanRequest) SetInstanceId(v string) *QuerySofamqConsumertimespanRequest {
	s.InstanceId = &v
	return s
}

func (s *QuerySofamqConsumertimespanRequest) SetTopic(v string) *QuerySofamqConsumertimespanRequest {
	s.Topic = &v
	return s
}

type QuerySofamqConsumertimespanResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询结果
	Data *ConsumerTimeSpanDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySofamqConsumertimespanResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConsumertimespanResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqConsumertimespanResponse) SetReqMsgId(v string) *QuerySofamqConsumertimespanResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqConsumertimespanResponse) SetResultCode(v string) *QuerySofamqConsumertimespanResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqConsumertimespanResponse) SetResultMsg(v string) *QuerySofamqConsumertimespanResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqConsumertimespanResponse) SetData(v *ConsumerTimeSpanDTO) *QuerySofamqConsumertimespanResponse {
	s.Data = v
	return s
}

type QuerySofamqMessagetraceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需要查询的Cell名
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 需查询的消息所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 需查询消息轨迹的消息 ID，即 Message ID
	MsgId *string `json:"msg_id,omitempty" xml:"msg_id,omitempty" require:"true"`
	// 消息的 Topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s QuerySofamqMessagetraceRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqMessagetraceRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqMessagetraceRequest) SetAuthToken(v string) *QuerySofamqMessagetraceRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqMessagetraceRequest) SetProductInstanceId(v string) *QuerySofamqMessagetraceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqMessagetraceRequest) SetCell(v string) *QuerySofamqMessagetraceRequest {
	s.Cell = &v
	return s
}

func (s *QuerySofamqMessagetraceRequest) SetInstanceId(v string) *QuerySofamqMessagetraceRequest {
	s.InstanceId = &v
	return s
}

func (s *QuerySofamqMessagetraceRequest) SetMsgId(v string) *QuerySofamqMessagetraceRequest {
	s.MsgId = &v
	return s
}

func (s *QuerySofamqMessagetraceRequest) SetTopic(v string) *QuerySofamqMessagetraceRequest {
	s.Topic = &v
	return s
}

type QuerySofamqMessagetraceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询结果
	Data *MessageTraceDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySofamqMessagetraceResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqMessagetraceResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqMessagetraceResponse) SetReqMsgId(v string) *QuerySofamqMessagetraceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqMessagetraceResponse) SetResultCode(v string) *QuerySofamqMessagetraceResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqMessagetraceResponse) SetResultMsg(v string) *QuerySofamqMessagetraceResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqMessagetraceResponse) SetData(v *MessageTraceDTO) *QuerySofamqMessagetraceResponse {
	s.Data = v
	return s
}

type GetSofamqMessagebymsgidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需查询的消息所在的单元
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 需查询消息所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 需查询的消息的 ID，即 Message ID
	MsgId *string `json:"msg_id,omitempty" xml:"msg_id,omitempty" require:"true"`
	// 需查询的消息的 Topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s GetSofamqMessagebymsgidRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSofamqMessagebymsgidRequest) GoString() string {
	return s.String()
}

func (s *GetSofamqMessagebymsgidRequest) SetAuthToken(v string) *GetSofamqMessagebymsgidRequest {
	s.AuthToken = &v
	return s
}

func (s *GetSofamqMessagebymsgidRequest) SetProductInstanceId(v string) *GetSofamqMessagebymsgidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetSofamqMessagebymsgidRequest) SetCell(v string) *GetSofamqMessagebymsgidRequest {
	s.Cell = &v
	return s
}

func (s *GetSofamqMessagebymsgidRequest) SetInstanceId(v string) *GetSofamqMessagebymsgidRequest {
	s.InstanceId = &v
	return s
}

func (s *GetSofamqMessagebymsgidRequest) SetMsgId(v string) *GetSofamqMessagebymsgidRequest {
	s.MsgId = &v
	return s
}

func (s *GetSofamqMessagebymsgidRequest) SetTopic(v string) *GetSofamqMessagebymsgidRequest {
	s.Topic = &v
	return s
}

type GetSofamqMessagebymsgidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询结果
	Data *MessageGetDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetSofamqMessagebymsgidResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSofamqMessagebymsgidResponse) GoString() string {
	return s.String()
}

func (s *GetSofamqMessagebymsgidResponse) SetReqMsgId(v string) *GetSofamqMessagebymsgidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetSofamqMessagebymsgidResponse) SetResultCode(v string) *GetSofamqMessagebymsgidResponse {
	s.ResultCode = &v
	return s
}

func (s *GetSofamqMessagebymsgidResponse) SetResultMsg(v string) *GetSofamqMessagebymsgidResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetSofamqMessagebymsgidResponse) SetData(v *MessageGetDTO) *GetSofamqMessagebymsgidResponse {
	s.Data = v
	return s
}

type QuerySofamqMessagebykeyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需查询的消息所在的单元
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 需查询的消息所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 需查询的消息的 Message Key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// 需查询的消息的 Topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s QuerySofamqMessagebykeyRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqMessagebykeyRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqMessagebykeyRequest) SetAuthToken(v string) *QuerySofamqMessagebykeyRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqMessagebykeyRequest) SetProductInstanceId(v string) *QuerySofamqMessagebykeyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqMessagebykeyRequest) SetCell(v string) *QuerySofamqMessagebykeyRequest {
	s.Cell = &v
	return s
}

func (s *QuerySofamqMessagebykeyRequest) SetInstanceId(v string) *QuerySofamqMessagebykeyRequest {
	s.InstanceId = &v
	return s
}

func (s *QuerySofamqMessagebykeyRequest) SetKey(v string) *QuerySofamqMessagebykeyRequest {
	s.Key = &v
	return s
}

func (s *QuerySofamqMessagebykeyRequest) SetTopic(v string) *QuerySofamqMessagebykeyRequest {
	s.Topic = &v
	return s
}

type QuerySofamqMessagebykeyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询结果
	Data []*MessageGetDTO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QuerySofamqMessagebykeyResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqMessagebykeyResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqMessagebykeyResponse) SetReqMsgId(v string) *QuerySofamqMessagebykeyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqMessagebykeyResponse) SetResultCode(v string) *QuerySofamqMessagebykeyResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqMessagebykeyResponse) SetResultMsg(v string) *QuerySofamqMessagebykeyResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqMessagebykeyResponse) SetData(v []*MessageGetDTO) *QuerySofamqMessagebykeyResponse {
	s.Data = v
	return s
}

type GetSofamqTracebymsgidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	//  查询的时间范围的起始时间点
	BeginTime *int64 `json:"begin_time,omitempty" xml:"begin_time,omitempty" require:"true"`
	// 需要查询的单元
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 查询的时间范围的结束时间点
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 需查询的消息的 Topic 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 需查询的消息的 ID，即 Message ID
	MsgId *string `json:"msg_id,omitempty" xml:"msg_id,omitempty" require:"true"`
	// 需查询的消息的 Topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s GetSofamqTracebymsgidRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSofamqTracebymsgidRequest) GoString() string {
	return s.String()
}

func (s *GetSofamqTracebymsgidRequest) SetAuthToken(v string) *GetSofamqTracebymsgidRequest {
	s.AuthToken = &v
	return s
}

func (s *GetSofamqTracebymsgidRequest) SetProductInstanceId(v string) *GetSofamqTracebymsgidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetSofamqTracebymsgidRequest) SetBeginTime(v int64) *GetSofamqTracebymsgidRequest {
	s.BeginTime = &v
	return s
}

func (s *GetSofamqTracebymsgidRequest) SetCell(v string) *GetSofamqTracebymsgidRequest {
	s.Cell = &v
	return s
}

func (s *GetSofamqTracebymsgidRequest) SetEndTime(v int64) *GetSofamqTracebymsgidRequest {
	s.EndTime = &v
	return s
}

func (s *GetSofamqTracebymsgidRequest) SetInstanceId(v string) *GetSofamqTracebymsgidRequest {
	s.InstanceId = &v
	return s
}

func (s *GetSofamqTracebymsgidRequest) SetMsgId(v string) *GetSofamqTracebymsgidRequest {
	s.MsgId = &v
	return s
}

func (s *GetSofamqTracebymsgidRequest) SetTopic(v string) *GetSofamqTracebymsgidRequest {
	s.Topic = &v
	return s
}

type GetSofamqTracebymsgidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//  该查询任务的 ID。可根据该任务 ID，再调用 GetMqSofamqTraceResult 接口获取详细结果。
	QueryId *string `json:"query_id,omitempty" xml:"query_id,omitempty"`
}

func (s GetSofamqTracebymsgidResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSofamqTracebymsgidResponse) GoString() string {
	return s.String()
}

func (s *GetSofamqTracebymsgidResponse) SetReqMsgId(v string) *GetSofamqTracebymsgidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetSofamqTracebymsgidResponse) SetResultCode(v string) *GetSofamqTracebymsgidResponse {
	s.ResultCode = &v
	return s
}

func (s *GetSofamqTracebymsgidResponse) SetResultMsg(v string) *GetSofamqTracebymsgidResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetSofamqTracebymsgidResponse) SetQueryId(v string) *GetSofamqTracebymsgidResponse {
	s.QueryId = &v
	return s
}

type QuerySofamqTracebymsgkeyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	//  查询的时间范围的起始时间点
	BeginTime *int64 `json:"begin_time,omitempty" xml:"begin_time,omitempty" require:"true"`
	// 需要查询的单元
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 查询的时间范围的结束时间点
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	//  需查询的消息的 Topic 所对应的实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	//  需查询的消息的 Message Key
	MsgKey *string `json:"msg_key,omitempty" xml:"msg_key,omitempty" require:"true"`
	// 需查询的消息的 Topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s QuerySofamqTracebymsgkeyRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqTracebymsgkeyRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqTracebymsgkeyRequest) SetAuthToken(v string) *QuerySofamqTracebymsgkeyRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqTracebymsgkeyRequest) SetProductInstanceId(v string) *QuerySofamqTracebymsgkeyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqTracebymsgkeyRequest) SetBeginTime(v int64) *QuerySofamqTracebymsgkeyRequest {
	s.BeginTime = &v
	return s
}

func (s *QuerySofamqTracebymsgkeyRequest) SetCell(v string) *QuerySofamqTracebymsgkeyRequest {
	s.Cell = &v
	return s
}

func (s *QuerySofamqTracebymsgkeyRequest) SetEndTime(v int64) *QuerySofamqTracebymsgkeyRequest {
	s.EndTime = &v
	return s
}

func (s *QuerySofamqTracebymsgkeyRequest) SetInstanceId(v string) *QuerySofamqTracebymsgkeyRequest {
	s.InstanceId = &v
	return s
}

func (s *QuerySofamqTracebymsgkeyRequest) SetMsgKey(v string) *QuerySofamqTracebymsgkeyRequest {
	s.MsgKey = &v
	return s
}

func (s *QuerySofamqTracebymsgkeyRequest) SetTopic(v string) *QuerySofamqTracebymsgkeyRequest {
	s.Topic = &v
	return s
}

type QuerySofamqTracebymsgkeyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 该查询任务的 ID。可根据该任务 ID，再调用 GetMqSofamqTraceResult 接口获取详细结果。
	QueryId *string `json:"query_id,omitempty" xml:"query_id,omitempty"`
}

func (s QuerySofamqTracebymsgkeyResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqTracebymsgkeyResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqTracebymsgkeyResponse) SetReqMsgId(v string) *QuerySofamqTracebymsgkeyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqTracebymsgkeyResponse) SetResultCode(v string) *QuerySofamqTracebymsgkeyResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqTracebymsgkeyResponse) SetResultMsg(v string) *QuerySofamqTracebymsgkeyResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqTracebymsgkeyResponse) SetQueryId(v string) *QuerySofamqTracebymsgkeyResponse {
	s.QueryId = &v
	return s
}

type GetSofamqTraceresultRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 消息轨迹查询的任务 ID
	QueryId *string `json:"query_id,omitempty" xml:"query_id,omitempty" require:"true"`
}

func (s GetSofamqTraceresultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSofamqTraceresultRequest) GoString() string {
	return s.String()
}

func (s *GetSofamqTraceresultRequest) SetAuthToken(v string) *GetSofamqTraceresultRequest {
	s.AuthToken = &v
	return s
}

func (s *GetSofamqTraceresultRequest) SetProductInstanceId(v string) *GetSofamqTraceresultRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetSofamqTraceresultRequest) SetInstanceId(v string) *GetSofamqTraceresultRequest {
	s.InstanceId = &v
	return s
}

func (s *GetSofamqTraceresultRequest) SetQueryId(v string) *GetSofamqTraceresultRequest {
	s.QueryId = &v
	return s
}

type GetSofamqTraceresultResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 该查询任务的结果明细
	Data *TraceMapResultDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetSofamqTraceresultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSofamqTraceresultResponse) GoString() string {
	return s.String()
}

func (s *GetSofamqTraceresultResponse) SetReqMsgId(v string) *GetSofamqTraceresultResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetSofamqTraceresultResponse) SetResultCode(v string) *GetSofamqTraceresultResponse {
	s.ResultCode = &v
	return s
}

func (s *GetSofamqTraceresultResponse) SetResultMsg(v string) *GetSofamqTraceresultResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetSofamqTraceresultResponse) SetData(v *TraceMapResultDTO) *GetSofamqTraceresultResponse {
	s.Data = v
	return s
}

type QuerySofamqInputtpsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 查询区间起始毫秒时间戳
	BeginTime *int64 `json:"begin_time,omitempty" xml:"begin_time,omitempty" require:"true"`
	// 需要查询的Cell名
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 查询区间终止毫秒时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 指定的 Topic 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 采样周期，单位分钟，取值可为 1、5、10
	Period *int64 `json:"period,omitempty" xml:"period,omitempty"`
	// 需查询的 Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// 查询的类型。取值说明如下：
	//
	// 0：查询指定时间段内 Topic 的写入量
	// 1：查询指定时间段内 Topic 的 TPS 曲线数据
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s QuerySofamqInputtpsRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqInputtpsRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqInputtpsRequest) SetAuthToken(v string) *QuerySofamqInputtpsRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqInputtpsRequest) SetProductInstanceId(v string) *QuerySofamqInputtpsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqInputtpsRequest) SetBeginTime(v int64) *QuerySofamqInputtpsRequest {
	s.BeginTime = &v
	return s
}

func (s *QuerySofamqInputtpsRequest) SetCell(v string) *QuerySofamqInputtpsRequest {
	s.Cell = &v
	return s
}

func (s *QuerySofamqInputtpsRequest) SetEndTime(v int64) *QuerySofamqInputtpsRequest {
	s.EndTime = &v
	return s
}

func (s *QuerySofamqInputtpsRequest) SetInstanceId(v string) *QuerySofamqInputtpsRequest {
	s.InstanceId = &v
	return s
}

func (s *QuerySofamqInputtpsRequest) SetPeriod(v int64) *QuerySofamqInputtpsRequest {
	s.Period = &v
	return s
}

func (s *QuerySofamqInputtpsRequest) SetTopic(v string) *QuerySofamqInputtpsRequest {
	s.Topic = &v
	return s
}

func (s *QuerySofamqInputtpsRequest) SetType(v int64) *QuerySofamqInputtpsRequest {
	s.Type = &v
	return s
}

type QuerySofamqInputtpsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 数据集合
	Data *TrendTpsDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySofamqInputtpsResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqInputtpsResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqInputtpsResponse) SetReqMsgId(v string) *QuerySofamqInputtpsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqInputtpsResponse) SetResultCode(v string) *QuerySofamqInputtpsResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqInputtpsResponse) SetResultMsg(v string) *QuerySofamqInputtpsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqInputtpsResponse) SetData(v *TrendTpsDTO) *QuerySofamqInputtpsResponse {
	s.Data = v
	return s
}

type QuerySofamqOutputtpsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	//  查询区间起始毫秒时间戳
	BeginTime *string `json:"begin_time,omitempty" xml:"begin_time,omitempty" require:"true"`
	// 需要查询的Cell名
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	//  查询区间终止毫秒时间戳
	EndTime *string `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	//  需要查询的 Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 需统计数据的 Group ID 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 采样周期，单位分钟，取值可为 1、5、10
	Period *int64 `json:"period,omitempty" xml:"period,omitempty"`
	//  需要查询的 Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// 查询的类型。取值说明如下：
	//
	// 0：查询消费消息总量的统计曲线
	// 1：查询消费消息 TPS 的统计曲线
	Type *int64 `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s QuerySofamqOutputtpsRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqOutputtpsRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqOutputtpsRequest) SetAuthToken(v string) *QuerySofamqOutputtpsRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqOutputtpsRequest) SetProductInstanceId(v string) *QuerySofamqOutputtpsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqOutputtpsRequest) SetBeginTime(v string) *QuerySofamqOutputtpsRequest {
	s.BeginTime = &v
	return s
}

func (s *QuerySofamqOutputtpsRequest) SetCell(v string) *QuerySofamqOutputtpsRequest {
	s.Cell = &v
	return s
}

func (s *QuerySofamqOutputtpsRequest) SetEndTime(v string) *QuerySofamqOutputtpsRequest {
	s.EndTime = &v
	return s
}

func (s *QuerySofamqOutputtpsRequest) SetGroupId(v string) *QuerySofamqOutputtpsRequest {
	s.GroupId = &v
	return s
}

func (s *QuerySofamqOutputtpsRequest) SetInstanceId(v string) *QuerySofamqOutputtpsRequest {
	s.InstanceId = &v
	return s
}

func (s *QuerySofamqOutputtpsRequest) SetPeriod(v int64) *QuerySofamqOutputtpsRequest {
	s.Period = &v
	return s
}

func (s *QuerySofamqOutputtpsRequest) SetTopic(v string) *QuerySofamqOutputtpsRequest {
	s.Topic = &v
	return s
}

func (s *QuerySofamqOutputtpsRequest) SetType(v int64) *QuerySofamqOutputtpsRequest {
	s.Type = &v
	return s
}

type QuerySofamqOutputtpsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 数据集合
	Data *TrendTpsDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySofamqOutputtpsResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqOutputtpsResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqOutputtpsResponse) SetReqMsgId(v string) *QuerySofamqOutputtpsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqOutputtpsResponse) SetResultCode(v string) *QuerySofamqOutputtpsResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqOutputtpsResponse) SetResultMsg(v string) *QuerySofamqOutputtpsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqOutputtpsResponse) SetData(v *TrendTpsDTO) *QuerySofamqOutputtpsResponse {
	s.Data = v
	return s
}

type GetSofamqDlqbyidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需要查询的单元
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 需查询的消费端 Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 需查询消息所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 需查询的消息的 ID，即 Message ID
	MsgId *string `json:"msg_id,omitempty" xml:"msg_id,omitempty" require:"true"`
}

func (s GetSofamqDlqbyidRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSofamqDlqbyidRequest) GoString() string {
	return s.String()
}

func (s *GetSofamqDlqbyidRequest) SetAuthToken(v string) *GetSofamqDlqbyidRequest {
	s.AuthToken = &v
	return s
}

func (s *GetSofamqDlqbyidRequest) SetProductInstanceId(v string) *GetSofamqDlqbyidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetSofamqDlqbyidRequest) SetCell(v string) *GetSofamqDlqbyidRequest {
	s.Cell = &v
	return s
}

func (s *GetSofamqDlqbyidRequest) SetGroupId(v string) *GetSofamqDlqbyidRequest {
	s.GroupId = &v
	return s
}

func (s *GetSofamqDlqbyidRequest) SetInstanceId(v string) *GetSofamqDlqbyidRequest {
	s.InstanceId = &v
	return s
}

func (s *GetSofamqDlqbyidRequest) SetMsgId(v string) *GetSofamqDlqbyidRequest {
	s.MsgId = &v
	return s
}

type GetSofamqDlqbyidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询结果
	Data *MessageGetDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetSofamqDlqbyidResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSofamqDlqbyidResponse) GoString() string {
	return s.String()
}

func (s *GetSofamqDlqbyidResponse) SetReqMsgId(v string) *GetSofamqDlqbyidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetSofamqDlqbyidResponse) SetResultCode(v string) *GetSofamqDlqbyidResponse {
	s.ResultCode = &v
	return s
}

func (s *GetSofamqDlqbyidResponse) SetResultMsg(v string) *GetSofamqDlqbyidResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetSofamqDlqbyidResponse) SetData(v *MessageGetDTO) *GetSofamqDlqbyidResponse {
	s.Data = v
	return s
}

type ExecSofamqDlqresendbyidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需要查询的单元
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 需查询的消费端 Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 需查询消息所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 需查询的消息的 ID，即 Message ID
	MsgId *string `json:"msg_id,omitempty" xml:"msg_id,omitempty" require:"true"`
}

func (s ExecSofamqDlqresendbyidRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecSofamqDlqresendbyidRequest) GoString() string {
	return s.String()
}

func (s *ExecSofamqDlqresendbyidRequest) SetAuthToken(v string) *ExecSofamqDlqresendbyidRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecSofamqDlqresendbyidRequest) SetProductInstanceId(v string) *ExecSofamqDlqresendbyidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecSofamqDlqresendbyidRequest) SetCell(v string) *ExecSofamqDlqresendbyidRequest {
	s.Cell = &v
	return s
}

func (s *ExecSofamqDlqresendbyidRequest) SetGroupId(v string) *ExecSofamqDlqresendbyidRequest {
	s.GroupId = &v
	return s
}

func (s *ExecSofamqDlqresendbyidRequest) SetInstanceId(v string) *ExecSofamqDlqresendbyidRequest {
	s.InstanceId = &v
	return s
}

func (s *ExecSofamqDlqresendbyidRequest) SetMsgId(v string) *ExecSofamqDlqresendbyidRequest {
	s.MsgId = &v
	return s
}

type ExecSofamqDlqresendbyidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecSofamqDlqresendbyidResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecSofamqDlqresendbyidResponse) GoString() string {
	return s.String()
}

func (s *ExecSofamqDlqresendbyidResponse) SetReqMsgId(v string) *ExecSofamqDlqresendbyidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecSofamqDlqresendbyidResponse) SetResultCode(v string) *ExecSofamqDlqresendbyidResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecSofamqDlqresendbyidResponse) SetResultMsg(v string) *ExecSofamqDlqresendbyidResponse {
	s.ResultMsg = &v
	return s
}

type ListSofamqNamespaceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
}

func (s ListSofamqNamespaceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqNamespaceRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqNamespaceRequest) SetAuthToken(v string) *ListSofamqNamespaceRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqNamespaceRequest) SetProductInstanceId(v string) *ListSofamqNamespaceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListSofamqNamespaceRequest) SetInstanceId(v string) *ListSofamqNamespaceRequest {
	s.InstanceId = &v
	return s
}

type ListSofamqNamespaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// ns
	Data []*NamespaceDO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListSofamqNamespaceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqNamespaceResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqNamespaceResponse) SetReqMsgId(v string) *ListSofamqNamespaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqNamespaceResponse) SetResultCode(v string) *ListSofamqNamespaceResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqNamespaceResponse) SetResultMsg(v string) *ListSofamqNamespaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqNamespaceResponse) SetData(v []*NamespaceDO) *ListSofamqNamespaceResponse {
	s.Data = v
	return s
}

type SendSofamqMessageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 目标单元
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 消息的 Message Key
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	//  消息内容
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// 消息 Tag
	Tag *string `json:"tag,omitempty" xml:"tag,omitempty"`
	// 需要发送的 Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// 使用的Schema的版本号
	SchemaVersion *int64 `json:"schema_version,omitempty" xml:"schema_version,omitempty"`
	// 消息属性 key-value
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
}

func (s SendSofamqMessageRequest) String() string {
	return tea.Prettify(s)
}

func (s SendSofamqMessageRequest) GoString() string {
	return s.String()
}

func (s *SendSofamqMessageRequest) SetAuthToken(v string) *SendSofamqMessageRequest {
	s.AuthToken = &v
	return s
}

func (s *SendSofamqMessageRequest) SetProductInstanceId(v string) *SendSofamqMessageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SendSofamqMessageRequest) SetCell(v string) *SendSofamqMessageRequest {
	s.Cell = &v
	return s
}

func (s *SendSofamqMessageRequest) SetInstanceId(v string) *SendSofamqMessageRequest {
	s.InstanceId = &v
	return s
}

func (s *SendSofamqMessageRequest) SetKey(v string) *SendSofamqMessageRequest {
	s.Key = &v
	return s
}

func (s *SendSofamqMessageRequest) SetMessage(v string) *SendSofamqMessageRequest {
	s.Message = &v
	return s
}

func (s *SendSofamqMessageRequest) SetTag(v string) *SendSofamqMessageRequest {
	s.Tag = &v
	return s
}

func (s *SendSofamqMessageRequest) SetTopic(v string) *SendSofamqMessageRequest {
	s.Topic = &v
	return s
}

func (s *SendSofamqMessageRequest) SetSchemaVersion(v int64) *SendSofamqMessageRequest {
	s.SchemaVersion = &v
	return s
}

func (s *SendSofamqMessageRequest) SetProperties(v string) *SendSofamqMessageRequest {
	s.Properties = &v
	return s
}

type SendSofamqMessageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 消息的 Message ID
	MsgId *string `json:"msg_id,omitempty" xml:"msg_id,omitempty"`
}

func (s SendSofamqMessageResponse) String() string {
	return tea.Prettify(s)
}

func (s SendSofamqMessageResponse) GoString() string {
	return s.String()
}

func (s *SendSofamqMessageResponse) SetReqMsgId(v string) *SendSofamqMessageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SendSofamqMessageResponse) SetResultCode(v string) *SendSofamqMessageResponse {
	s.ResultCode = &v
	return s
}

func (s *SendSofamqMessageResponse) SetResultMsg(v string) *SendSofamqMessageResponse {
	s.ResultMsg = &v
	return s
}

func (s *SendSofamqMessageResponse) SetMsgId(v string) *SendSofamqMessageResponse {
	s.MsgId = &v
	return s
}

type PushSofamqMessageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 单元名称
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 需要接收消息的 Client ID
	ClientId *string `json:"client_id,omitempty" xml:"client_id,omitempty" require:"true"`
	// 需要 push 的消费组 Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 需要 push 的消息 Message ID
	MsgId *string `json:"msg_id,omitempty" xml:"msg_id,omitempty" require:"true"`
	// 需要发送的 Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s PushSofamqMessageRequest) String() string {
	return tea.Prettify(s)
}

func (s PushSofamqMessageRequest) GoString() string {
	return s.String()
}

func (s *PushSofamqMessageRequest) SetAuthToken(v string) *PushSofamqMessageRequest {
	s.AuthToken = &v
	return s
}

func (s *PushSofamqMessageRequest) SetProductInstanceId(v string) *PushSofamqMessageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PushSofamqMessageRequest) SetCell(v string) *PushSofamqMessageRequest {
	s.Cell = &v
	return s
}

func (s *PushSofamqMessageRequest) SetClientId(v string) *PushSofamqMessageRequest {
	s.ClientId = &v
	return s
}

func (s *PushSofamqMessageRequest) SetGroupId(v string) *PushSofamqMessageRequest {
	s.GroupId = &v
	return s
}

func (s *PushSofamqMessageRequest) SetInstanceId(v string) *PushSofamqMessageRequest {
	s.InstanceId = &v
	return s
}

func (s *PushSofamqMessageRequest) SetMsgId(v string) *PushSofamqMessageRequest {
	s.MsgId = &v
	return s
}

func (s *PushSofamqMessageRequest) SetTopic(v string) *PushSofamqMessageRequest {
	s.Topic = &v
	return s
}

type PushSofamqMessageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s PushSofamqMessageResponse) String() string {
	return tea.Prettify(s)
}

func (s PushSofamqMessageResponse) GoString() string {
	return s.String()
}

func (s *PushSofamqMessageResponse) SetReqMsgId(v string) *PushSofamqMessageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PushSofamqMessageResponse) SetResultCode(v string) *PushSofamqMessageResponse {
	s.ResultCode = &v
	return s
}

func (s *PushSofamqMessageResponse) SetResultMsg(v string) *PushSofamqMessageResponse {
	s.ResultMsg = &v
	return s
}

type QuerySofamqNodebynamespaceidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// instanceid
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s QuerySofamqNodebynamespaceidRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqNodebynamespaceidRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqNodebynamespaceidRequest) SetAuthToken(v string) *QuerySofamqNodebynamespaceidRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqNodebynamespaceidRequest) SetProductInstanceId(v string) *QuerySofamqNodebynamespaceidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqNodebynamespaceidRequest) SetInstanceId(v string) *QuerySofamqNodebynamespaceidRequest {
	s.InstanceId = &v
	return s
}

type QuerySofamqNodebynamespaceidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// ndoes
	Data []*NodeDO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QuerySofamqNodebynamespaceidResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqNodebynamespaceidResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqNodebynamespaceidResponse) SetReqMsgId(v string) *QuerySofamqNodebynamespaceidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqNodebynamespaceidResponse) SetResultCode(v string) *QuerySofamqNodebynamespaceidResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqNodebynamespaceidResponse) SetResultMsg(v string) *QuerySofamqNodebynamespaceidResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqNodebynamespaceidResponse) SetData(v []*NodeDO) *QuerySofamqNodebynamespaceidResponse {
	s.Data = v
	return s
}

type QuerySofamqRoombynamespaceidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s QuerySofamqRoombynamespaceidRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqRoombynamespaceidRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqRoombynamespaceidRequest) SetAuthToken(v string) *QuerySofamqRoombynamespaceidRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqRoombynamespaceidRequest) SetProductInstanceId(v string) *QuerySofamqRoombynamespaceidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqRoombynamespaceidRequest) SetInstanceId(v string) *QuerySofamqRoombynamespaceidRequest {
	s.InstanceId = &v
	return s
}

type QuerySofamqRoombynamespaceidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// rooms
	Data []*RoomDO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QuerySofamqRoombynamespaceidResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqRoombynamespaceidResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqRoombynamespaceidResponse) SetReqMsgId(v string) *QuerySofamqRoombynamespaceidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqRoombynamespaceidResponse) SetResultCode(v string) *QuerySofamqRoombynamespaceidResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqRoombynamespaceidResponse) SetResultMsg(v string) *QuerySofamqRoombynamespaceidResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqRoombynamespaceidResponse) SetData(v []*RoomDO) *QuerySofamqRoombynamespaceidResponse {
	s.Data = v
	return s
}

type QuerySofamqMessagebytopicRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	//  查询范围的起始时间戳
	BeginTime *int64 `json:"begin_time,omitempty" xml:"begin_time,omitempty" require:"true"`
	// 需查询的单元
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 查询范围的终止时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 需查询的消息所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页显示条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 查询任务的 ID。首次查询不需要输入，后续取消息必须传入，根据前一次的返回结果取出该字段。
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
	// 需查询的消息的 Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s QuerySofamqMessagebytopicRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqMessagebytopicRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqMessagebytopicRequest) SetAuthToken(v string) *QuerySofamqMessagebytopicRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqMessagebytopicRequest) SetProductInstanceId(v string) *QuerySofamqMessagebytopicRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqMessagebytopicRequest) SetBeginTime(v int64) *QuerySofamqMessagebytopicRequest {
	s.BeginTime = &v
	return s
}

func (s *QuerySofamqMessagebytopicRequest) SetCell(v string) *QuerySofamqMessagebytopicRequest {
	s.Cell = &v
	return s
}

func (s *QuerySofamqMessagebytopicRequest) SetEndTime(v int64) *QuerySofamqMessagebytopicRequest {
	s.EndTime = &v
	return s
}

func (s *QuerySofamqMessagebytopicRequest) SetInstanceId(v string) *QuerySofamqMessagebytopicRequest {
	s.InstanceId = &v
	return s
}

func (s *QuerySofamqMessagebytopicRequest) SetPageNum(v int64) *QuerySofamqMessagebytopicRequest {
	s.PageNum = &v
	return s
}

func (s *QuerySofamqMessagebytopicRequest) SetPageSize(v int64) *QuerySofamqMessagebytopicRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySofamqMessagebytopicRequest) SetTaskId(v string) *QuerySofamqMessagebytopicRequest {
	s.TaskId = &v
	return s
}

func (s *QuerySofamqMessagebytopicRequest) SetTopic(v string) *QuerySofamqMessagebytopicRequest {
	s.Topic = &v
	return s
}

type QuerySofamqMessagebytopicResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 分页查询Message
	Data *MessageGetPageDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySofamqMessagebytopicResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqMessagebytopicResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqMessagebytopicResponse) SetReqMsgId(v string) *QuerySofamqMessagebytopicResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqMessagebytopicResponse) SetResultCode(v string) *QuerySofamqMessagebytopicResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqMessagebytopicResponse) SetResultMsg(v string) *QuerySofamqMessagebytopicResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqMessagebytopicResponse) SetData(v *MessageGetPageDTO) *QuerySofamqMessagebytopicResponse {
	s.Data = v
	return s
}

type QuerySofamqDlqbygroupidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 查询范围的起始时间戳
	//
	//
	BeginTime *int64 `json:"begin_time,omitempty" xml:"begin_time,omitempty" require:"true"`
	// 需要查询的单元
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 查询范围的终止时间戳
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 需查询的消费端 Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 需查询的消息所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 查询任务的 ID。首次查询不需要输入，后续获取消息必须传入，根据前一次的返回结果取出该字段。
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
}

func (s QuerySofamqDlqbygroupidRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqDlqbygroupidRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqDlqbygroupidRequest) SetAuthToken(v string) *QuerySofamqDlqbygroupidRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqDlqbygroupidRequest) SetProductInstanceId(v string) *QuerySofamqDlqbygroupidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqDlqbygroupidRequest) SetBeginTime(v int64) *QuerySofamqDlqbygroupidRequest {
	s.BeginTime = &v
	return s
}

func (s *QuerySofamqDlqbygroupidRequest) SetCell(v string) *QuerySofamqDlqbygroupidRequest {
	s.Cell = &v
	return s
}

func (s *QuerySofamqDlqbygroupidRequest) SetEndTime(v int64) *QuerySofamqDlqbygroupidRequest {
	s.EndTime = &v
	return s
}

func (s *QuerySofamqDlqbygroupidRequest) SetGroupId(v string) *QuerySofamqDlqbygroupidRequest {
	s.GroupId = &v
	return s
}

func (s *QuerySofamqDlqbygroupidRequest) SetInstanceId(v string) *QuerySofamqDlqbygroupidRequest {
	s.InstanceId = &v
	return s
}

func (s *QuerySofamqDlqbygroupidRequest) SetPageNum(v int64) *QuerySofamqDlqbygroupidRequest {
	s.PageNum = &v
	return s
}

func (s *QuerySofamqDlqbygroupidRequest) SetPageSize(v int64) *QuerySofamqDlqbygroupidRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySofamqDlqbygroupidRequest) SetTaskId(v string) *QuerySofamqDlqbygroupidRequest {
	s.TaskId = &v
	return s
}

type QuerySofamqDlqbygroupidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 消息内容
	Data *MessageGetPageDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySofamqDlqbygroupidResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqDlqbygroupidResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqDlqbygroupidResponse) SetReqMsgId(v string) *QuerySofamqDlqbygroupidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqDlqbygroupidResponse) SetResultCode(v string) *QuerySofamqDlqbygroupidResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqDlqbygroupidResponse) SetResultMsg(v string) *QuerySofamqDlqbygroupidResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqDlqbygroupidResponse) SetData(v *MessageGetPageDTO) *QuerySofamqDlqbygroupidResponse {
	s.Data = v
	return s
}

type GetSofamqConsumerstatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需要查询的单元
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 是否查询详细信息。取值说明如下：true：要查询详细信息；false：不查询详细信息。
	Detail *bool `json:"detail,omitempty" xml:"detail,omitempty"`
	// 需要查询的消费端 Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 需查询的 Group ID 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 是否打印 Jstack 信息
	NeedJstack *bool `json:"need_jstack,omitempty" xml:"need_jstack,omitempty"`
}

func (s GetSofamqConsumerstatusRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSofamqConsumerstatusRequest) GoString() string {
	return s.String()
}

func (s *GetSofamqConsumerstatusRequest) SetAuthToken(v string) *GetSofamqConsumerstatusRequest {
	s.AuthToken = &v
	return s
}

func (s *GetSofamqConsumerstatusRequest) SetProductInstanceId(v string) *GetSofamqConsumerstatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetSofamqConsumerstatusRequest) SetCell(v string) *GetSofamqConsumerstatusRequest {
	s.Cell = &v
	return s
}

func (s *GetSofamqConsumerstatusRequest) SetDetail(v bool) *GetSofamqConsumerstatusRequest {
	s.Detail = &v
	return s
}

func (s *GetSofamqConsumerstatusRequest) SetGroupId(v string) *GetSofamqConsumerstatusRequest {
	s.GroupId = &v
	return s
}

func (s *GetSofamqConsumerstatusRequest) SetInstanceId(v string) *GetSofamqConsumerstatusRequest {
	s.InstanceId = &v
	return s
}

func (s *GetSofamqConsumerstatusRequest) SetNeedJstack(v bool) *GetSofamqConsumerstatusRequest {
	s.NeedJstack = &v
	return s
}

type GetSofamqConsumerstatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询结果
	Data *ConsumerStatusDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetSofamqConsumerstatusResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSofamqConsumerstatusResponse) GoString() string {
	return s.String()
}

func (s *GetSofamqConsumerstatusResponse) SetReqMsgId(v string) *GetSofamqConsumerstatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetSofamqConsumerstatusResponse) SetResultCode(v string) *GetSofamqConsumerstatusResponse {
	s.ResultCode = &v
	return s
}

func (s *GetSofamqConsumerstatusResponse) SetResultMsg(v string) *GetSofamqConsumerstatusResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetSofamqConsumerstatusResponse) SetData(v *ConsumerStatusDTO) *GetSofamqConsumerstatusResponse {
	s.Data = v
	return s
}

type UpdateSofamqTopicremarkRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// Topic 描述信息
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty" require:"true"`
	// 需更新的 Topic 名称，一个用户下不可重复。
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s UpdateSofamqTopicremarkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqTopicremarkRequest) GoString() string {
	return s.String()
}

func (s *UpdateSofamqTopicremarkRequest) SetAuthToken(v string) *UpdateSofamqTopicremarkRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSofamqTopicremarkRequest) SetProductInstanceId(v string) *UpdateSofamqTopicremarkRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateSofamqTopicremarkRequest) SetInstanceId(v string) *UpdateSofamqTopicremarkRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateSofamqTopicremarkRequest) SetRemark(v string) *UpdateSofamqTopicremarkRequest {
	s.Remark = &v
	return s
}

func (s *UpdateSofamqTopicremarkRequest) SetTopic(v string) *UpdateSofamqTopicremarkRequest {
	s.Topic = &v
	return s
}

type UpdateSofamqTopicremarkResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSofamqTopicremarkResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqTopicremarkResponse) GoString() string {
	return s.String()
}

func (s *UpdateSofamqTopicremarkResponse) SetReqMsgId(v string) *UpdateSofamqTopicremarkResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSofamqTopicremarkResponse) SetResultCode(v string) *UpdateSofamqTopicremarkResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSofamqTopicremarkResponse) SetResultMsg(v string) *UpdateSofamqTopicremarkResponse {
	s.ResultMsg = &v
	return s
}

type CreateSofamqDatacenterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// cluster
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty"`
	// datacenter
	Datacenter *string `json:"datacenter,omitempty" xml:"datacenter,omitempty"`
	// room
	Room *string `json:"room,omitempty" xml:"room,omitempty"`
}

func (s CreateSofamqDatacenterRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqDatacenterRequest) GoString() string {
	return s.String()
}

func (s *CreateSofamqDatacenterRequest) SetAuthToken(v string) *CreateSofamqDatacenterRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSofamqDatacenterRequest) SetProductInstanceId(v string) *CreateSofamqDatacenterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSofamqDatacenterRequest) SetCluster(v string) *CreateSofamqDatacenterRequest {
	s.Cluster = &v
	return s
}

func (s *CreateSofamqDatacenterRequest) SetDatacenter(v string) *CreateSofamqDatacenterRequest {
	s.Datacenter = &v
	return s
}

func (s *CreateSofamqDatacenterRequest) SetRoom(v string) *CreateSofamqDatacenterRequest {
	s.Room = &v
	return s
}

type CreateSofamqDatacenterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateSofamqDatacenterResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqDatacenterResponse) GoString() string {
	return s.String()
}

func (s *CreateSofamqDatacenterResponse) SetReqMsgId(v string) *CreateSofamqDatacenterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSofamqDatacenterResponse) SetResultCode(v string) *CreateSofamqDatacenterResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSofamqDatacenterResponse) SetResultMsg(v string) *CreateSofamqDatacenterResponse {
	s.ResultMsg = &v
	return s
}

type ListSofamqDatacenterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
	// cluster
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty"`
	// datacenter
	Datacenter *string `json:"datacenter,omitempty" xml:"datacenter,omitempty"`
	// room
	Room *string `json:"room,omitempty" xml:"room,omitempty"`
}

func (s ListSofamqDatacenterRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqDatacenterRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqDatacenterRequest) SetAuthToken(v string) *ListSofamqDatacenterRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqDatacenterRequest) SetProductInstanceId(v string) *ListSofamqDatacenterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListSofamqDatacenterRequest) SetInstanceId(v string) *ListSofamqDatacenterRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSofamqDatacenterRequest) SetCluster(v string) *ListSofamqDatacenterRequest {
	s.Cluster = &v
	return s
}

func (s *ListSofamqDatacenterRequest) SetDatacenter(v string) *ListSofamqDatacenterRequest {
	s.Datacenter = &v
	return s
}

func (s *ListSofamqDatacenterRequest) SetRoom(v string) *ListSofamqDatacenterRequest {
	s.Room = &v
	return s
}

type ListSofamqDatacenterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// datacenter
	Data []*DataCenterDO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListSofamqDatacenterResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqDatacenterResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqDatacenterResponse) SetReqMsgId(v string) *ListSofamqDatacenterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqDatacenterResponse) SetResultCode(v string) *ListSofamqDatacenterResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqDatacenterResponse) SetResultMsg(v string) *ListSofamqDatacenterResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqDatacenterResponse) SetData(v []*DataCenterDO) *ListSofamqDatacenterResponse {
	s.Data = v
	return s
}

type ListSofamqConfigRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 页号
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// key
	Property *string `json:"property,omitempty" xml:"property,omitempty"`
	// target name
	TargetName *string `json:"target_name,omitempty" xml:"target_name,omitempty"`
	// cluster or broker type
	TargetType *int64 `json:"target_type,omitempty" xml:"target_type,omitempty"`
}

func (s ListSofamqConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqConfigRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqConfigRequest) SetAuthToken(v string) *ListSofamqConfigRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqConfigRequest) SetProductInstanceId(v string) *ListSofamqConfigRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListSofamqConfigRequest) SetPageNum(v int64) *ListSofamqConfigRequest {
	s.PageNum = &v
	return s
}

func (s *ListSofamqConfigRequest) SetPageSize(v int64) *ListSofamqConfigRequest {
	s.PageSize = &v
	return s
}

func (s *ListSofamqConfigRequest) SetProperty(v string) *ListSofamqConfigRequest {
	s.Property = &v
	return s
}

func (s *ListSofamqConfigRequest) SetTargetName(v string) *ListSofamqConfigRequest {
	s.TargetName = &v
	return s
}

func (s *ListSofamqConfigRequest) SetTargetType(v int64) *ListSofamqConfigRequest {
	s.TargetType = &v
	return s
}

type ListSofamqConfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// configs
	Data *ConfigPageDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListSofamqConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqConfigResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqConfigResponse) SetReqMsgId(v string) *ListSofamqConfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqConfigResponse) SetResultCode(v string) *ListSofamqConfigResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqConfigResponse) SetResultMsg(v string) *ListSofamqConfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqConfigResponse) SetData(v *ConfigPageDTO) *ListSofamqConfigResponse {
	s.Data = v
	return s
}

type UpdateSofamqGroupremarkRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需配置更新的 Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 描述信息
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty" require:"true"`
}

func (s UpdateSofamqGroupremarkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqGroupremarkRequest) GoString() string {
	return s.String()
}

func (s *UpdateSofamqGroupremarkRequest) SetAuthToken(v string) *UpdateSofamqGroupremarkRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSofamqGroupremarkRequest) SetProductInstanceId(v string) *UpdateSofamqGroupremarkRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateSofamqGroupremarkRequest) SetGroupId(v string) *UpdateSofamqGroupremarkRequest {
	s.GroupId = &v
	return s
}

func (s *UpdateSofamqGroupremarkRequest) SetInstanceId(v string) *UpdateSofamqGroupremarkRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateSofamqGroupremarkRequest) SetRemark(v string) *UpdateSofamqGroupremarkRequest {
	s.Remark = &v
	return s
}

type UpdateSofamqGroupremarkResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSofamqGroupremarkResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqGroupremarkResponse) GoString() string {
	return s.String()
}

func (s *UpdateSofamqGroupremarkResponse) SetReqMsgId(v string) *UpdateSofamqGroupremarkResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSofamqGroupremarkResponse) SetResultCode(v string) *UpdateSofamqGroupremarkResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSofamqGroupremarkResponse) SetResultMsg(v string) *UpdateSofamqGroupremarkResponse {
	s.ResultMsg = &v
	return s
}

type DownloadSofamqMessageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需配置的 Group ID 所对应的实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// topic名
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	//  需查询的消息的 ID，即 Message ID
	MsgId *string `json:"msg_id,omitempty" xml:"msg_id,omitempty" require:"true"`
	// 需要查询的Cell名
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
}

func (s DownloadSofamqMessageRequest) String() string {
	return tea.Prettify(s)
}

func (s DownloadSofamqMessageRequest) GoString() string {
	return s.String()
}

func (s *DownloadSofamqMessageRequest) SetAuthToken(v string) *DownloadSofamqMessageRequest {
	s.AuthToken = &v
	return s
}

func (s *DownloadSofamqMessageRequest) SetProductInstanceId(v string) *DownloadSofamqMessageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DownloadSofamqMessageRequest) SetInstanceId(v string) *DownloadSofamqMessageRequest {
	s.InstanceId = &v
	return s
}

func (s *DownloadSofamqMessageRequest) SetTopic(v string) *DownloadSofamqMessageRequest {
	s.Topic = &v
	return s
}

func (s *DownloadSofamqMessageRequest) SetMsgId(v string) *DownloadSofamqMessageRequest {
	s.MsgId = &v
	return s
}

func (s *DownloadSofamqMessageRequest) SetCell(v string) *DownloadSofamqMessageRequest {
	s.Cell = &v
	return s
}

type DownloadSofamqMessageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DownloadSofamqMessageResponse) String() string {
	return tea.Prettify(s)
}

func (s DownloadSofamqMessageResponse) GoString() string {
	return s.String()
}

func (s *DownloadSofamqMessageResponse) SetReqMsgId(v string) *DownloadSofamqMessageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DownloadSofamqMessageResponse) SetResultCode(v string) *DownloadSofamqMessageResponse {
	s.ResultCode = &v
	return s
}

func (s *DownloadSofamqMessageResponse) SetResultMsg(v string) *DownloadSofamqMessageResponse {
	s.ResultMsg = &v
	return s
}

type QueryMetricsTopicRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 结束时间
	//
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 开始时间
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 需要查询的 Topic 名称。如果 Topic 为 "ALL"，则查询当前租户下所有的 Topic 的数据。
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s QueryMetricsTopicRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMetricsTopicRequest) GoString() string {
	return s.String()
}

func (s *QueryMetricsTopicRequest) SetAuthToken(v string) *QueryMetricsTopicRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMetricsTopicRequest) SetProductInstanceId(v string) *QueryMetricsTopicRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMetricsTopicRequest) SetEndTime(v int64) *QueryMetricsTopicRequest {
	s.EndTime = &v
	return s
}

func (s *QueryMetricsTopicRequest) SetInstanceId(v string) *QueryMetricsTopicRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryMetricsTopicRequest) SetStartTime(v int64) *QueryMetricsTopicRequest {
	s.StartTime = &v
	return s
}

func (s *QueryMetricsTopicRequest) SetTopic(v string) *QueryMetricsTopicRequest {
	s.Topic = &v
	return s
}

type QueryMetricsTopicResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结束时间
	//
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty"`
	// 每个数据点间隔（毫秒）
	Interval *int64 `json:"interval,omitempty" xml:"interval,omitempty"`
	// 数据点列表
	//
	Metrics []*TopicMetricItem `json:"metrics,omitempty" xml:"metrics,omitempty" type:"Repeated"`
	// 开始时间
	//
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty"`
	// Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty"`
}

func (s QueryMetricsTopicResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMetricsTopicResponse) GoString() string {
	return s.String()
}

func (s *QueryMetricsTopicResponse) SetReqMsgId(v string) *QueryMetricsTopicResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMetricsTopicResponse) SetResultCode(v string) *QueryMetricsTopicResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMetricsTopicResponse) SetResultMsg(v string) *QueryMetricsTopicResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMetricsTopicResponse) SetEndTime(v int64) *QueryMetricsTopicResponse {
	s.EndTime = &v
	return s
}

func (s *QueryMetricsTopicResponse) SetInterval(v int64) *QueryMetricsTopicResponse {
	s.Interval = &v
	return s
}

func (s *QueryMetricsTopicResponse) SetMetrics(v []*TopicMetricItem) *QueryMetricsTopicResponse {
	s.Metrics = v
	return s
}

func (s *QueryMetricsTopicResponse) SetStartTime(v int64) *QueryMetricsTopicResponse {
	s.StartTime = &v
	return s
}

func (s *QueryMetricsTopicResponse) SetTopic(v string) *QueryMetricsTopicResponse {
	s.Topic = &v
	return s
}

type QueryMetricsBacklogRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 结束时间
	//
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 实例 ID
	//
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 开始时间
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
}

func (s QueryMetricsBacklogRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMetricsBacklogRequest) GoString() string {
	return s.String()
}

func (s *QueryMetricsBacklogRequest) SetAuthToken(v string) *QueryMetricsBacklogRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMetricsBacklogRequest) SetProductInstanceId(v string) *QueryMetricsBacklogRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMetricsBacklogRequest) SetEndTime(v int64) *QueryMetricsBacklogRequest {
	s.EndTime = &v
	return s
}

func (s *QueryMetricsBacklogRequest) SetInstanceId(v string) *QueryMetricsBacklogRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryMetricsBacklogRequest) SetStartTime(v int64) *QueryMetricsBacklogRequest {
	s.StartTime = &v
	return s
}

type QueryMetricsBacklogResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结束时间
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty"`
	// 每个时间点间隔（毫秒）
	Interval *int64 `json:"interval,omitempty" xml:"interval,omitempty"`
	// 数据点
	//
	Metrics []*BacklogMetricItem `json:"metrics,omitempty" xml:"metrics,omitempty" type:"Repeated"`
	// 开始时间
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty"`
}

func (s QueryMetricsBacklogResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMetricsBacklogResponse) GoString() string {
	return s.String()
}

func (s *QueryMetricsBacklogResponse) SetReqMsgId(v string) *QueryMetricsBacklogResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMetricsBacklogResponse) SetResultCode(v string) *QueryMetricsBacklogResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMetricsBacklogResponse) SetResultMsg(v string) *QueryMetricsBacklogResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMetricsBacklogResponse) SetEndTime(v int64) *QueryMetricsBacklogResponse {
	s.EndTime = &v
	return s
}

func (s *QueryMetricsBacklogResponse) SetInterval(v int64) *QueryMetricsBacklogResponse {
	s.Interval = &v
	return s
}

func (s *QueryMetricsBacklogResponse) SetMetrics(v []*BacklogMetricItem) *QueryMetricsBacklogResponse {
	s.Metrics = v
	return s
}

func (s *QueryMetricsBacklogResponse) SetStartTime(v int64) *QueryMetricsBacklogResponse {
	s.StartTime = &v
	return s
}

type QueryMetricsOverviewRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s QueryMetricsOverviewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMetricsOverviewRequest) GoString() string {
	return s.String()
}

func (s *QueryMetricsOverviewRequest) SetAuthToken(v string) *QueryMetricsOverviewRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMetricsOverviewRequest) SetProductInstanceId(v string) *QueryMetricsOverviewRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMetricsOverviewRequest) SetInstanceId(v string) *QueryMetricsOverviewRequest {
	s.InstanceId = &v
	return s
}

type QueryMetricsOverviewResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 消息堆积数量
	BacklogNum *int64 `json:"backlog_num,omitempty" xml:"backlog_num,omitempty"`
	// 死信消息数量
	DlqNum *int64 `json:"dlq_num,omitempty" xml:"dlq_num,omitempty"`
	// 当前租户消费组数量
	GroupNum *int64 `json:"group_num,omitempty" xml:"group_num,omitempty"`
	// 订阅关系数量
	SubscriptionNum *int64 `json:"subscription_num,omitempty" xml:"subscription_num,omitempty"`
	// 当前租户下的 Topic 数量
	TopicNum *int64 `json:"topic_num,omitempty" xml:"topic_num,omitempty"`
}

func (s QueryMetricsOverviewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMetricsOverviewResponse) GoString() string {
	return s.String()
}

func (s *QueryMetricsOverviewResponse) SetReqMsgId(v string) *QueryMetricsOverviewResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMetricsOverviewResponse) SetResultCode(v string) *QueryMetricsOverviewResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMetricsOverviewResponse) SetResultMsg(v string) *QueryMetricsOverviewResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMetricsOverviewResponse) SetBacklogNum(v int64) *QueryMetricsOverviewResponse {
	s.BacklogNum = &v
	return s
}

func (s *QueryMetricsOverviewResponse) SetDlqNum(v int64) *QueryMetricsOverviewResponse {
	s.DlqNum = &v
	return s
}

func (s *QueryMetricsOverviewResponse) SetGroupNum(v int64) *QueryMetricsOverviewResponse {
	s.GroupNum = &v
	return s
}

func (s *QueryMetricsOverviewResponse) SetSubscriptionNum(v int64) *QueryMetricsOverviewResponse {
	s.SubscriptionNum = &v
	return s
}

func (s *QueryMetricsOverviewResponse) SetTopicNum(v int64) *QueryMetricsOverviewResponse {
	s.TopicNum = &v
	return s
}

type ListSofamqRouterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 目标单元
	DestinationCell *string `json:"destination_cell,omitempty" xml:"destination_cell,omitempty"`
	// 目标实例 ID
	DestinationInstanceId *string `json:"destination_instance_id,omitempty" xml:"destination_instance_id,omitempty" require:"true"`
	// 目标 Topic
	DestinationTopic *string `json:"destination_topic,omitempty" xml:"destination_topic,omitempty"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页显示条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 源单元
	SourceCell *string `json:"source_cell,omitempty" xml:"source_cell,omitempty"`
	// 源实例 ID
	SourceInstanceId *string `json:"source_instance_id,omitempty" xml:"source_instance_id,omitempty" require:"true"`
	// 源 Topic
	SourceTopic *string `json:"source_topic,omitempty" xml:"source_topic,omitempty"`
}

func (s ListSofamqRouterRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqRouterRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqRouterRequest) SetAuthToken(v string) *ListSofamqRouterRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqRouterRequest) SetProductInstanceId(v string) *ListSofamqRouterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListSofamqRouterRequest) SetDestinationCell(v string) *ListSofamqRouterRequest {
	s.DestinationCell = &v
	return s
}

func (s *ListSofamqRouterRequest) SetDestinationInstanceId(v string) *ListSofamqRouterRequest {
	s.DestinationInstanceId = &v
	return s
}

func (s *ListSofamqRouterRequest) SetDestinationTopic(v string) *ListSofamqRouterRequest {
	s.DestinationTopic = &v
	return s
}

func (s *ListSofamqRouterRequest) SetInstanceId(v string) *ListSofamqRouterRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSofamqRouterRequest) SetPageNum(v int64) *ListSofamqRouterRequest {
	s.PageNum = &v
	return s
}

func (s *ListSofamqRouterRequest) SetPageSize(v int64) *ListSofamqRouterRequest {
	s.PageSize = &v
	return s
}

func (s *ListSofamqRouterRequest) SetSourceCell(v string) *ListSofamqRouterRequest {
	s.SourceCell = &v
	return s
}

func (s *ListSofamqRouterRequest) SetSourceInstanceId(v string) *ListSofamqRouterRequest {
	s.SourceInstanceId = &v
	return s
}

func (s *ListSofamqRouterRequest) SetSourceTopic(v string) *ListSofamqRouterRequest {
	s.SourceTopic = &v
	return s
}

type ListSofamqRouterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 消息路由任务列表页
	Data *RouterPageDO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListSofamqRouterResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqRouterResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqRouterResponse) SetReqMsgId(v string) *ListSofamqRouterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqRouterResponse) SetResultCode(v string) *ListSofamqRouterResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqRouterResponse) SetResultMsg(v string) *ListSofamqRouterResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqRouterResponse) SetData(v *RouterPageDO) *ListSofamqRouterResponse {
	s.Data = v
	return s
}

type CreateSofamqRouterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 消费端 Group
	ConsumerId *string `json:"consumer_id,omitempty" xml:"consumer_id,omitempty"`
	// 消费起始位点。取值范围：0：最小位点；1：最大位点；2：时间戳。
	ConsumeFromType *int64 `json:"consume_from_type,omitempty" xml:"consume_from_type,omitempty" require:"true"`
	// 消费起始位点时间戳，时间戳的值，单位是秒
	ConsumeFromValue *int64 `json:"consume_from_value,omitempty" xml:"consume_from_value,omitempty"`
	// 消费终止位点。取值范围：0：最小位点；1：最大位点；2：时间戳。
	ConsumeToType *int64 `json:"consume_to_type,omitempty" xml:"consume_to_type,omitempty"`
	// 消费终止位点时间戳，时间戳的值，单位是秒
	ConsumeToValue *int64 `json:"consume_to_value,omitempty" xml:"consume_to_value,omitempty"`
	// 描述信息
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 目标单元
	DestinationCell *string `json:"destination_cell,omitempty" xml:"destination_cell,omitempty" require:"true"`
	// 目标实例 ID
	DestinationInstanceId *string `json:"destination_instance_id,omitempty" xml:"destination_instance_id,omitempty" require:"true"`
	// 目标 Topic
	DestinationTopic *string `json:"destination_topic,omitempty" xml:"destination_topic,omitempty" require:"true"`
	// 容灾标识
	Disaster *bool `json:"disaster,omitempty" xml:"disaster,omitempty"`
	// 容灾机房
	DisasterRecoveryDatacenter *string `json:"disaster_recovery_datacenter,omitempty" xml:"disaster_recovery_datacenter,omitempty"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 源单元
	SourceCell *string `json:"source_cell,omitempty" xml:"source_cell,omitempty" require:"true"`
	// 源实例 ID
	SourceInstanceId *string `json:"source_instance_id,omitempty" xml:"source_instance_id,omitempty" require:"true"`
	// 源 Topic
	SourceTopic *string `json:"source_topic,omitempty" xml:"source_topic,omitempty" require:"true"`
	// 过滤 Tag
	Tag *string `json:"tag,omitempty" xml:"tag,omitempty"`
	// 任务状态。取值说明：0：初始化；1：工作中；2：停止。
	TaskStatus *int64 `json:"task_status,omitempty" xml:"task_status,omitempty"`
	// 任务类型。取值范围： 0：LDC 复制；1：非 LDC；2：LDC 容灾。
	TaskType *int64 `json:"task_type,omitempty" xml:"task_type,omitempty" require:"true"`
}

func (s CreateSofamqRouterRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqRouterRequest) GoString() string {
	return s.String()
}

func (s *CreateSofamqRouterRequest) SetAuthToken(v string) *CreateSofamqRouterRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSofamqRouterRequest) SetProductInstanceId(v string) *CreateSofamqRouterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSofamqRouterRequest) SetConsumerId(v string) *CreateSofamqRouterRequest {
	s.ConsumerId = &v
	return s
}

func (s *CreateSofamqRouterRequest) SetConsumeFromType(v int64) *CreateSofamqRouterRequest {
	s.ConsumeFromType = &v
	return s
}

func (s *CreateSofamqRouterRequest) SetConsumeFromValue(v int64) *CreateSofamqRouterRequest {
	s.ConsumeFromValue = &v
	return s
}

func (s *CreateSofamqRouterRequest) SetConsumeToType(v int64) *CreateSofamqRouterRequest {
	s.ConsumeToType = &v
	return s
}

func (s *CreateSofamqRouterRequest) SetConsumeToValue(v int64) *CreateSofamqRouterRequest {
	s.ConsumeToValue = &v
	return s
}

func (s *CreateSofamqRouterRequest) SetDescription(v string) *CreateSofamqRouterRequest {
	s.Description = &v
	return s
}

func (s *CreateSofamqRouterRequest) SetDestinationCell(v string) *CreateSofamqRouterRequest {
	s.DestinationCell = &v
	return s
}

func (s *CreateSofamqRouterRequest) SetDestinationInstanceId(v string) *CreateSofamqRouterRequest {
	s.DestinationInstanceId = &v
	return s
}

func (s *CreateSofamqRouterRequest) SetDestinationTopic(v string) *CreateSofamqRouterRequest {
	s.DestinationTopic = &v
	return s
}

func (s *CreateSofamqRouterRequest) SetDisaster(v bool) *CreateSofamqRouterRequest {
	s.Disaster = &v
	return s
}

func (s *CreateSofamqRouterRequest) SetDisasterRecoveryDatacenter(v string) *CreateSofamqRouterRequest {
	s.DisasterRecoveryDatacenter = &v
	return s
}

func (s *CreateSofamqRouterRequest) SetInstanceId(v string) *CreateSofamqRouterRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateSofamqRouterRequest) SetSourceCell(v string) *CreateSofamqRouterRequest {
	s.SourceCell = &v
	return s
}

func (s *CreateSofamqRouterRequest) SetSourceInstanceId(v string) *CreateSofamqRouterRequest {
	s.SourceInstanceId = &v
	return s
}

func (s *CreateSofamqRouterRequest) SetSourceTopic(v string) *CreateSofamqRouterRequest {
	s.SourceTopic = &v
	return s
}

func (s *CreateSofamqRouterRequest) SetTag(v string) *CreateSofamqRouterRequest {
	s.Tag = &v
	return s
}

func (s *CreateSofamqRouterRequest) SetTaskStatus(v int64) *CreateSofamqRouterRequest {
	s.TaskStatus = &v
	return s
}

func (s *CreateSofamqRouterRequest) SetTaskType(v int64) *CreateSofamqRouterRequest {
	s.TaskType = &v
	return s
}

type CreateSofamqRouterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateSofamqRouterResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqRouterResponse) GoString() string {
	return s.String()
}

func (s *CreateSofamqRouterResponse) SetReqMsgId(v string) *CreateSofamqRouterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSofamqRouterResponse) SetResultCode(v string) *CreateSofamqRouterResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSofamqRouterResponse) SetResultMsg(v string) *CreateSofamqRouterResponse {
	s.ResultMsg = &v
	return s
}

type DeleteSofamqNodeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s DeleteSofamqNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqNodeRequest) GoString() string {
	return s.String()
}

func (s *DeleteSofamqNodeRequest) SetAuthToken(v string) *DeleteSofamqNodeRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSofamqNodeRequest) SetProductInstanceId(v string) *DeleteSofamqNodeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteSofamqNodeRequest) SetId(v int64) *DeleteSofamqNodeRequest {
	s.Id = &v
	return s
}

type DeleteSofamqNodeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSofamqNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqNodeResponse) GoString() string {
	return s.String()
}

func (s *DeleteSofamqNodeResponse) SetReqMsgId(v string) *DeleteSofamqNodeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSofamqNodeResponse) SetResultCode(v string) *DeleteSofamqNodeResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSofamqNodeResponse) SetResultMsg(v string) *DeleteSofamqNodeResponse {
	s.ResultMsg = &v
	return s
}

type DeleteSofamqRoomRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s DeleteSofamqRoomRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqRoomRequest) GoString() string {
	return s.String()
}

func (s *DeleteSofamqRoomRequest) SetAuthToken(v string) *DeleteSofamqRoomRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSofamqRoomRequest) SetProductInstanceId(v string) *DeleteSofamqRoomRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteSofamqRoomRequest) SetId(v int64) *DeleteSofamqRoomRequest {
	s.Id = &v
	return s
}

type DeleteSofamqRoomResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSofamqRoomResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqRoomResponse) GoString() string {
	return s.String()
}

func (s *DeleteSofamqRoomResponse) SetReqMsgId(v string) *DeleteSofamqRoomResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSofamqRoomResponse) SetResultCode(v string) *DeleteSofamqRoomResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSofamqRoomResponse) SetResultMsg(v string) *DeleteSofamqRoomResponse {
	s.ResultMsg = &v
	return s
}

type DeleteSofamqCellRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s DeleteSofamqCellRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqCellRequest) GoString() string {
	return s.String()
}

func (s *DeleteSofamqCellRequest) SetAuthToken(v string) *DeleteSofamqCellRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSofamqCellRequest) SetProductInstanceId(v string) *DeleteSofamqCellRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteSofamqCellRequest) SetId(v int64) *DeleteSofamqCellRequest {
	s.Id = &v
	return s
}

func (s *DeleteSofamqCellRequest) SetInstanceId(v string) *DeleteSofamqCellRequest {
	s.InstanceId = &v
	return s
}

type DeleteSofamqCellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSofamqCellResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqCellResponse) GoString() string {
	return s.String()
}

func (s *DeleteSofamqCellResponse) SetReqMsgId(v string) *DeleteSofamqCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSofamqCellResponse) SetResultCode(v string) *DeleteSofamqCellResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSofamqCellResponse) SetResultMsg(v string) *DeleteSofamqCellResponse {
	s.ResultMsg = &v
	return s
}

type DeleteSofamqClusterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s DeleteSofamqClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqClusterRequest) GoString() string {
	return s.String()
}

func (s *DeleteSofamqClusterRequest) SetAuthToken(v string) *DeleteSofamqClusterRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSofamqClusterRequest) SetProductInstanceId(v string) *DeleteSofamqClusterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteSofamqClusterRequest) SetId(v int64) *DeleteSofamqClusterRequest {
	s.Id = &v
	return s
}

type DeleteSofamqClusterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSofamqClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqClusterResponse) GoString() string {
	return s.String()
}

func (s *DeleteSofamqClusterResponse) SetReqMsgId(v string) *DeleteSofamqClusterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSofamqClusterResponse) SetResultCode(v string) *DeleteSofamqClusterResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSofamqClusterResponse) SetResultMsg(v string) *DeleteSofamqClusterResponse {
	s.ResultMsg = &v
	return s
}

type DeleteSofamqNamespaceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s DeleteSofamqNamespaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqNamespaceRequest) GoString() string {
	return s.String()
}

func (s *DeleteSofamqNamespaceRequest) SetAuthToken(v string) *DeleteSofamqNamespaceRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSofamqNamespaceRequest) SetProductInstanceId(v string) *DeleteSofamqNamespaceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteSofamqNamespaceRequest) SetId(v int64) *DeleteSofamqNamespaceRequest {
	s.Id = &v
	return s
}

func (s *DeleteSofamqNamespaceRequest) SetInstanceId(v string) *DeleteSofamqNamespaceRequest {
	s.InstanceId = &v
	return s
}

type DeleteSofamqNamespaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSofamqNamespaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqNamespaceResponse) GoString() string {
	return s.String()
}

func (s *DeleteSofamqNamespaceResponse) SetReqMsgId(v string) *DeleteSofamqNamespaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSofamqNamespaceResponse) SetResultCode(v string) *DeleteSofamqNamespaceResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSofamqNamespaceResponse) SetResultMsg(v string) *DeleteSofamqNamespaceResponse {
	s.ResultMsg = &v
	return s
}

type DeleteSofamqDatacenterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s DeleteSofamqDatacenterRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqDatacenterRequest) GoString() string {
	return s.String()
}

func (s *DeleteSofamqDatacenterRequest) SetAuthToken(v string) *DeleteSofamqDatacenterRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSofamqDatacenterRequest) SetProductInstanceId(v string) *DeleteSofamqDatacenterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteSofamqDatacenterRequest) SetId(v int64) *DeleteSofamqDatacenterRequest {
	s.Id = &v
	return s
}

type DeleteSofamqDatacenterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSofamqDatacenterResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqDatacenterResponse) GoString() string {
	return s.String()
}

func (s *DeleteSofamqDatacenterResponse) SetReqMsgId(v string) *DeleteSofamqDatacenterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSofamqDatacenterResponse) SetResultCode(v string) *DeleteSofamqDatacenterResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSofamqDatacenterResponse) SetResultMsg(v string) *DeleteSofamqDatacenterResponse {
	s.ResultMsg = &v
	return s
}

type DeleteSofamqRouterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 路由任务 ID
	RouterId *int64 `json:"router_id,omitempty" xml:"router_id,omitempty" require:"true"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s DeleteSofamqRouterRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqRouterRequest) GoString() string {
	return s.String()
}

func (s *DeleteSofamqRouterRequest) SetAuthToken(v string) *DeleteSofamqRouterRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSofamqRouterRequest) SetProductInstanceId(v string) *DeleteSofamqRouterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteSofamqRouterRequest) SetRouterId(v int64) *DeleteSofamqRouterRequest {
	s.RouterId = &v
	return s
}

func (s *DeleteSofamqRouterRequest) SetInstanceId(v string) *DeleteSofamqRouterRequest {
	s.InstanceId = &v
	return s
}

type DeleteSofamqRouterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSofamqRouterResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqRouterResponse) GoString() string {
	return s.String()
}

func (s *DeleteSofamqRouterResponse) SetReqMsgId(v string) *DeleteSofamqRouterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSofamqRouterResponse) SetResultCode(v string) *DeleteSofamqRouterResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSofamqRouterResponse) SetResultMsg(v string) *DeleteSofamqRouterResponse {
	s.ResultMsg = &v
	return s
}

type CreateSofamqConfigRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// property
	Property *string `json:"property,omitempty" xml:"property,omitempty" require:"true"`
	// target_name
	TargetName *string `json:"target_name,omitempty" xml:"target_name,omitempty" require:"true"`
	// target_type
	TargetType *int64 `json:"target_type,omitempty" xml:"target_type,omitempty" require:"true"`
	// value
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
	// 生效范围，三板斧使用
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
}

func (s CreateSofamqConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqConfigRequest) GoString() string {
	return s.String()
}

func (s *CreateSofamqConfigRequest) SetAuthToken(v string) *CreateSofamqConfigRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSofamqConfigRequest) SetProductInstanceId(v string) *CreateSofamqConfigRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSofamqConfigRequest) SetProperty(v string) *CreateSofamqConfigRequest {
	s.Property = &v
	return s
}

func (s *CreateSofamqConfigRequest) SetTargetName(v string) *CreateSofamqConfigRequest {
	s.TargetName = &v
	return s
}

func (s *CreateSofamqConfigRequest) SetTargetType(v int64) *CreateSofamqConfigRequest {
	s.TargetType = &v
	return s
}

func (s *CreateSofamqConfigRequest) SetValue(v string) *CreateSofamqConfigRequest {
	s.Value = &v
	return s
}

func (s *CreateSofamqConfigRequest) SetScope(v string) *CreateSofamqConfigRequest {
	s.Scope = &v
	return s
}

type CreateSofamqConfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateSofamqConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqConfigResponse) GoString() string {
	return s.String()
}

func (s *CreateSofamqConfigResponse) SetReqMsgId(v string) *CreateSofamqConfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSofamqConfigResponse) SetResultCode(v string) *CreateSofamqConfigResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSofamqConfigResponse) SetResultMsg(v string) *CreateSofamqConfigResponse {
	s.ResultMsg = &v
	return s
}

type QuerySofamqCellRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
}

func (s QuerySofamqCellRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqCellRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqCellRequest) SetAuthToken(v string) *QuerySofamqCellRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqCellRequest) SetProductInstanceId(v string) *QuerySofamqCellRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqCellRequest) SetInstanceId(v string) *QuerySofamqCellRequest {
	s.InstanceId = &v
	return s
}

type QuerySofamqCellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// cells
	Data []*CellDO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QuerySofamqCellResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqCellResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqCellResponse) SetReqMsgId(v string) *QuerySofamqCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqCellResponse) SetResultCode(v string) *QuerySofamqCellResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqCellResponse) SetResultMsg(v string) *QuerySofamqCellResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqCellResponse) SetData(v []*CellDO) *QuerySofamqCellResponse {
	s.Data = v
	return s
}

type QuerySofamqRouterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// instanceId
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s QuerySofamqRouterRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqRouterRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqRouterRequest) SetAuthToken(v string) *QuerySofamqRouterRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqRouterRequest) SetProductInstanceId(v string) *QuerySofamqRouterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqRouterRequest) SetInstanceId(v string) *QuerySofamqRouterRequest {
	s.InstanceId = &v
	return s
}

type QuerySofamqRouterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// router
	Data []*RouterConfigDO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QuerySofamqRouterResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqRouterResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqRouterResponse) SetReqMsgId(v string) *QuerySofamqRouterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqRouterResponse) SetResultCode(v string) *QuerySofamqRouterResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqRouterResponse) SetResultMsg(v string) *QuerySofamqRouterResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqRouterResponse) SetData(v []*RouterConfigDO) *QuerySofamqRouterResponse {
	s.Data = v
	return s
}

type GetMiddlewareInstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// curr_tenant
	CurrTenant *string `json:"curr_tenant,omitempty" xml:"curr_tenant,omitempty" require:"true"`
	// curr_workspace
	CurrWorkspace *string `json:"curr_workspace,omitempty" xml:"curr_workspace,omitempty" require:"true"`
}

func (s GetMiddlewareInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMiddlewareInstanceRequest) GoString() string {
	return s.String()
}

func (s *GetMiddlewareInstanceRequest) SetAuthToken(v string) *GetMiddlewareInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *GetMiddlewareInstanceRequest) SetProductInstanceId(v string) *GetMiddlewareInstanceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetMiddlewareInstanceRequest) SetCurrTenant(v string) *GetMiddlewareInstanceRequest {
	s.CurrTenant = &v
	return s
}

func (s *GetMiddlewareInstanceRequest) SetCurrWorkspace(v string) *GetMiddlewareInstanceRequest {
	s.CurrWorkspace = &v
	return s
}

type GetMiddlewareInstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// instanceid
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetMiddlewareInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMiddlewareInstanceResponse) GoString() string {
	return s.String()
}

func (s *GetMiddlewareInstanceResponse) SetReqMsgId(v string) *GetMiddlewareInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetMiddlewareInstanceResponse) SetResultCode(v string) *GetMiddlewareInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *GetMiddlewareInstanceResponse) SetResultMsg(v string) *GetMiddlewareInstanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetMiddlewareInstanceResponse) SetData(v string) *GetMiddlewareInstanceResponse {
	s.Data = &v
	return s
}

type GetMiddlewareEndpointRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s GetMiddlewareEndpointRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMiddlewareEndpointRequest) GoString() string {
	return s.String()
}

func (s *GetMiddlewareEndpointRequest) SetAuthToken(v string) *GetMiddlewareEndpointRequest {
	s.AuthToken = &v
	return s
}

func (s *GetMiddlewareEndpointRequest) SetProductInstanceId(v string) *GetMiddlewareEndpointRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetMiddlewareEndpointRequest) SetInstanceId(v string) *GetMiddlewareEndpointRequest {
	s.InstanceId = &v
	return s
}

type GetMiddlewareEndpointResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// endpoint
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetMiddlewareEndpointResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMiddlewareEndpointResponse) GoString() string {
	return s.String()
}

func (s *GetMiddlewareEndpointResponse) SetReqMsgId(v string) *GetMiddlewareEndpointResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetMiddlewareEndpointResponse) SetResultCode(v string) *GetMiddlewareEndpointResponse {
	s.ResultCode = &v
	return s
}

func (s *GetMiddlewareEndpointResponse) SetResultMsg(v string) *GetMiddlewareEndpointResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetMiddlewareEndpointResponse) SetData(v string) *GetMiddlewareEndpointResponse {
	s.Data = &v
	return s
}

type QuerySofamqCellbytypeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s QuerySofamqCellbytypeRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqCellbytypeRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqCellbytypeRequest) SetAuthToken(v string) *QuerySofamqCellbytypeRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqCellbytypeRequest) SetProductInstanceId(v string) *QuerySofamqCellbytypeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqCellbytypeRequest) SetInstanceId(v string) *QuerySofamqCellbytypeRequest {
	s.InstanceId = &v
	return s
}

type QuerySofamqCellbytypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// cells
	Data []*CellGroupDO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QuerySofamqCellbytypeResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqCellbytypeResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqCellbytypeResponse) SetReqMsgId(v string) *QuerySofamqCellbytypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqCellbytypeResponse) SetResultCode(v string) *QuerySofamqCellbytypeResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqCellbytypeResponse) SetResultMsg(v string) *QuerySofamqCellbytypeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqCellbytypeResponse) SetData(v []*CellGroupDO) *QuerySofamqCellbytypeResponse {
	s.Data = v
	return s
}

type ListSofamqTraceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页显示条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 模糊查询项，可以为 Topic、Message ID 或 Message Key。
	QueryItem *string `json:"query_item,omitempty" xml:"query_item,omitempty"`
}

func (s ListSofamqTraceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqTraceRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqTraceRequest) SetAuthToken(v string) *ListSofamqTraceRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqTraceRequest) SetProductInstanceId(v string) *ListSofamqTraceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListSofamqTraceRequest) SetInstanceId(v string) *ListSofamqTraceRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSofamqTraceRequest) SetPageNum(v int64) *ListSofamqTraceRequest {
	s.PageNum = &v
	return s
}

func (s *ListSofamqTraceRequest) SetPageSize(v int64) *ListSofamqTraceRequest {
	s.PageSize = &v
	return s
}

func (s *ListSofamqTraceRequest) SetQueryItem(v string) *ListSofamqTraceRequest {
	s.QueryItem = &v
	return s
}

type ListSofamqTraceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询返回的数据集合
	Data *TracePageDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListSofamqTraceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqTraceResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqTraceResponse) SetReqMsgId(v string) *ListSofamqTraceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqTraceResponse) SetResultCode(v string) *ListSofamqTraceResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqTraceResponse) SetResultMsg(v string) *ListSofamqTraceResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqTraceResponse) SetData(v *TracePageDTO) *ListSofamqTraceResponse {
	s.Data = v
	return s
}

type DeleteSofamqTraceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 待删除的消息轨迹查询任务 ID
	QueryId *string `json:"query_id,omitempty" xml:"query_id,omitempty" require:"true"`
}

func (s DeleteSofamqTraceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqTraceRequest) GoString() string {
	return s.String()
}

func (s *DeleteSofamqTraceRequest) SetAuthToken(v string) *DeleteSofamqTraceRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSofamqTraceRequest) SetProductInstanceId(v string) *DeleteSofamqTraceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteSofamqTraceRequest) SetInstanceId(v string) *DeleteSofamqTraceRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteSofamqTraceRequest) SetQueryId(v string) *DeleteSofamqTraceRequest {
	s.QueryId = &v
	return s
}

type DeleteSofamqTraceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSofamqTraceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqTraceResponse) GoString() string {
	return s.String()
}

func (s *DeleteSofamqTraceResponse) SetReqMsgId(v string) *DeleteSofamqTraceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSofamqTraceResponse) SetResultCode(v string) *DeleteSofamqTraceResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSofamqTraceResponse) SetResultMsg(v string) *DeleteSofamqTraceResponse {
	s.ResultMsg = &v
	return s
}

type QuerySofamqTracebytopicRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 查询的时间范围的起始时间点
	BeginTime *int64 `json:"begin_time,omitempty" xml:"begin_time,omitempty" require:"true"`
	// 需要查询的单元
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 查询的时间范围的结束时间点
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 需查询的消息的 Topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s QuerySofamqTracebytopicRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqTracebytopicRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqTracebytopicRequest) SetAuthToken(v string) *QuerySofamqTracebytopicRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqTracebytopicRequest) SetProductInstanceId(v string) *QuerySofamqTracebytopicRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqTracebytopicRequest) SetBeginTime(v int64) *QuerySofamqTracebytopicRequest {
	s.BeginTime = &v
	return s
}

func (s *QuerySofamqTracebytopicRequest) SetCell(v string) *QuerySofamqTracebytopicRequest {
	s.Cell = &v
	return s
}

func (s *QuerySofamqTracebytopicRequest) SetEndTime(v int64) *QuerySofamqTracebytopicRequest {
	s.EndTime = &v
	return s
}

func (s *QuerySofamqTracebytopicRequest) SetInstanceId(v string) *QuerySofamqTracebytopicRequest {
	s.InstanceId = &v
	return s
}

func (s *QuerySofamqTracebytopicRequest) SetTopic(v string) *QuerySofamqTracebytopicRequest {
	s.Topic = &v
	return s
}

type QuerySofamqTracebytopicResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 该消息轨迹查询任务的 ID
	QueryId *string `json:"query_id,omitempty" xml:"query_id,omitempty"`
}

func (s QuerySofamqTracebytopicResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqTracebytopicResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqTracebytopicResponse) SetReqMsgId(v string) *QuerySofamqTracebytopicResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqTracebytopicResponse) SetResultCode(v string) *QuerySofamqTracebytopicResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqTracebytopicResponse) SetResultMsg(v string) *QuerySofamqTracebytopicResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqTracebytopicResponse) SetQueryId(v string) *QuerySofamqTracebytopicResponse {
	s.QueryId = &v
	return s
}

type PushSpiPaycallbackRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// JSON data
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
	// request_id
	RequestId *string `json:"request_id,omitempty" xml:"request_id,omitempty" require:"true"`
}

func (s PushSpiPaycallbackRequest) String() string {
	return tea.Prettify(s)
}

func (s PushSpiPaycallbackRequest) GoString() string {
	return s.String()
}

func (s *PushSpiPaycallbackRequest) SetAuthToken(v string) *PushSpiPaycallbackRequest {
	s.AuthToken = &v
	return s
}

func (s *PushSpiPaycallbackRequest) SetProductInstanceId(v string) *PushSpiPaycallbackRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PushSpiPaycallbackRequest) SetData(v string) *PushSpiPaycallbackRequest {
	s.Data = &v
	return s
}

func (s *PushSpiPaycallbackRequest) SetRequestId(v string) *PushSpiPaycallbackRequest {
	s.RequestId = &v
	return s
}

type PushSpiPaycallbackResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回 code
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// json data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// 返回 message
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 请求是否成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// synchro
	Synchro *string `json:"synchro,omitempty" xml:"synchro,omitempty"`
	// request_id
	RequestId *string `json:"request_id,omitempty" xml:"request_id,omitempty"`
}

func (s PushSpiPaycallbackResponse) String() string {
	return tea.Prettify(s)
}

func (s PushSpiPaycallbackResponse) GoString() string {
	return s.String()
}

func (s *PushSpiPaycallbackResponse) SetReqMsgId(v string) *PushSpiPaycallbackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PushSpiPaycallbackResponse) SetResultCode(v string) *PushSpiPaycallbackResponse {
	s.ResultCode = &v
	return s
}

func (s *PushSpiPaycallbackResponse) SetResultMsg(v string) *PushSpiPaycallbackResponse {
	s.ResultMsg = &v
	return s
}

func (s *PushSpiPaycallbackResponse) SetCode(v string) *PushSpiPaycallbackResponse {
	s.Code = &v
	return s
}

func (s *PushSpiPaycallbackResponse) SetData(v string) *PushSpiPaycallbackResponse {
	s.Data = &v
	return s
}

func (s *PushSpiPaycallbackResponse) SetMessage(v string) *PushSpiPaycallbackResponse {
	s.Message = &v
	return s
}

func (s *PushSpiPaycallbackResponse) SetSuccess(v bool) *PushSpiPaycallbackResponse {
	s.Success = &v
	return s
}

func (s *PushSpiPaycallbackResponse) SetSynchro(v string) *PushSpiPaycallbackResponse {
	s.Synchro = &v
	return s
}

func (s *PushSpiPaycallbackResponse) SetRequestId(v string) *PushSpiPaycallbackResponse {
	s.RequestId = &v
	return s
}

type PushSpiCompletecommodityRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s PushSpiCompletecommodityRequest) String() string {
	return tea.Prettify(s)
}

func (s PushSpiCompletecommodityRequest) GoString() string {
	return s.String()
}

func (s *PushSpiCompletecommodityRequest) SetAuthToken(v string) *PushSpiCompletecommodityRequest {
	s.AuthToken = &v
	return s
}

func (s *PushSpiCompletecommodityRequest) SetProductInstanceId(v string) *PushSpiCompletecommodityRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PushSpiCompletecommodityRequest) SetData(v string) *PushSpiCompletecommodityRequest {
	s.Data = &v
	return s
}

type PushSpiCompletecommodityResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// code
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// message
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// synchro
	Synchro *string `json:"synchro,omitempty" xml:"synchro,omitempty"`
}

func (s PushSpiCompletecommodityResponse) String() string {
	return tea.Prettify(s)
}

func (s PushSpiCompletecommodityResponse) GoString() string {
	return s.String()
}

func (s *PushSpiCompletecommodityResponse) SetReqMsgId(v string) *PushSpiCompletecommodityResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PushSpiCompletecommodityResponse) SetResultCode(v string) *PushSpiCompletecommodityResponse {
	s.ResultCode = &v
	return s
}

func (s *PushSpiCompletecommodityResponse) SetResultMsg(v string) *PushSpiCompletecommodityResponse {
	s.ResultMsg = &v
	return s
}

func (s *PushSpiCompletecommodityResponse) SetCode(v string) *PushSpiCompletecommodityResponse {
	s.Code = &v
	return s
}

func (s *PushSpiCompletecommodityResponse) SetData(v string) *PushSpiCompletecommodityResponse {
	s.Data = &v
	return s
}

func (s *PushSpiCompletecommodityResponse) SetMessage(v string) *PushSpiCompletecommodityResponse {
	s.Message = &v
	return s
}

func (s *PushSpiCompletecommodityResponse) SetSuccess(v bool) *PushSpiCompletecommodityResponse {
	s.Success = &v
	return s
}

func (s *PushSpiCompletecommodityResponse) SetSynchro(v string) *PushSpiCompletecommodityResponse {
	s.Synchro = &v
	return s
}

type PushSpiOrderverifyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s PushSpiOrderverifyRequest) String() string {
	return tea.Prettify(s)
}

func (s PushSpiOrderverifyRequest) GoString() string {
	return s.String()
}

func (s *PushSpiOrderverifyRequest) SetAuthToken(v string) *PushSpiOrderverifyRequest {
	s.AuthToken = &v
	return s
}

func (s *PushSpiOrderverifyRequest) SetProductInstanceId(v string) *PushSpiOrderverifyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PushSpiOrderverifyRequest) SetData(v string) *PushSpiOrderverifyRequest {
	s.Data = &v
	return s
}

type PushSpiOrderverifyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// code
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// synchro
	Synchro *string `json:"synchro,omitempty" xml:"synchro,omitempty"`
}

func (s PushSpiOrderverifyResponse) String() string {
	return tea.Prettify(s)
}

func (s PushSpiOrderverifyResponse) GoString() string {
	return s.String()
}

func (s *PushSpiOrderverifyResponse) SetReqMsgId(v string) *PushSpiOrderverifyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PushSpiOrderverifyResponse) SetResultCode(v string) *PushSpiOrderverifyResponse {
	s.ResultCode = &v
	return s
}

func (s *PushSpiOrderverifyResponse) SetResultMsg(v string) *PushSpiOrderverifyResponse {
	s.ResultMsg = &v
	return s
}

func (s *PushSpiOrderverifyResponse) SetSuccess(v bool) *PushSpiOrderverifyResponse {
	s.Success = &v
	return s
}

func (s *PushSpiOrderverifyResponse) SetCode(v string) *PushSpiOrderverifyResponse {
	s.Code = &v
	return s
}

func (s *PushSpiOrderverifyResponse) SetMessage(v string) *PushSpiOrderverifyResponse {
	s.Message = &v
	return s
}

func (s *PushSpiOrderverifyResponse) SetData(v string) *PushSpiOrderverifyResponse {
	s.Data = &v
	return s
}

func (s *PushSpiOrderverifyResponse) SetSynchro(v string) *PushSpiOrderverifyResponse {
	s.Synchro = &v
	return s
}

type PushSpiOpencallbackRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
}

func (s PushSpiOpencallbackRequest) String() string {
	return tea.Prettify(s)
}

func (s PushSpiOpencallbackRequest) GoString() string {
	return s.String()
}

func (s *PushSpiOpencallbackRequest) SetAuthToken(v string) *PushSpiOpencallbackRequest {
	s.AuthToken = &v
	return s
}

func (s *PushSpiOpencallbackRequest) SetProductInstanceId(v string) *PushSpiOpencallbackRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PushSpiOpencallbackRequest) SetData(v string) *PushSpiOpencallbackRequest {
	s.Data = &v
	return s
}

type PushSpiOpencallbackResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// success
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// code
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// synchro
	Synchro *string `json:"synchro,omitempty" xml:"synchro,omitempty"`
}

func (s PushSpiOpencallbackResponse) String() string {
	return tea.Prettify(s)
}

func (s PushSpiOpencallbackResponse) GoString() string {
	return s.String()
}

func (s *PushSpiOpencallbackResponse) SetReqMsgId(v string) *PushSpiOpencallbackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PushSpiOpencallbackResponse) SetResultCode(v string) *PushSpiOpencallbackResponse {
	s.ResultCode = &v
	return s
}

func (s *PushSpiOpencallbackResponse) SetResultMsg(v string) *PushSpiOpencallbackResponse {
	s.ResultMsg = &v
	return s
}

func (s *PushSpiOpencallbackResponse) SetSuccess(v bool) *PushSpiOpencallbackResponse {
	s.Success = &v
	return s
}

func (s *PushSpiOpencallbackResponse) SetCode(v string) *PushSpiOpencallbackResponse {
	s.Code = &v
	return s
}

func (s *PushSpiOpencallbackResponse) SetMessage(v string) *PushSpiOpencallbackResponse {
	s.Message = &v
	return s
}

func (s *PushSpiOpencallbackResponse) SetData(v string) *PushSpiOpencallbackResponse {
	s.Data = &v
	return s
}

func (s *PushSpiOpencallbackResponse) SetSynchro(v string) *PushSpiOpencallbackResponse {
	s.Synchro = &v
	return s
}

type GetSofamqLdcbynamespaceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// namespace_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s GetSofamqLdcbynamespaceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSofamqLdcbynamespaceRequest) GoString() string {
	return s.String()
}

func (s *GetSofamqLdcbynamespaceRequest) SetAuthToken(v string) *GetSofamqLdcbynamespaceRequest {
	s.AuthToken = &v
	return s
}

func (s *GetSofamqLdcbynamespaceRequest) SetProductInstanceId(v string) *GetSofamqLdcbynamespaceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetSofamqLdcbynamespaceRequest) SetInstanceId(v string) *GetSofamqLdcbynamespaceRequest {
	s.InstanceId = &v
	return s
}

type GetSofamqLdcbynamespaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// true
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetSofamqLdcbynamespaceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSofamqLdcbynamespaceResponse) GoString() string {
	return s.String()
}

func (s *GetSofamqLdcbynamespaceResponse) SetReqMsgId(v string) *GetSofamqLdcbynamespaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetSofamqLdcbynamespaceResponse) SetResultCode(v string) *GetSofamqLdcbynamespaceResponse {
	s.ResultCode = &v
	return s
}

func (s *GetSofamqLdcbynamespaceResponse) SetResultMsg(v string) *GetSofamqLdcbynamespaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetSofamqLdcbynamespaceResponse) SetData(v bool) *GetSofamqLdcbynamespaceResponse {
	s.Data = &v
	return s
}

type UpdateSofamqRouterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 当前状态
	CurrentStatus *int64 `json:"current_status,omitempty" xml:"current_status,omitempty" require:"true"`
	// 路由任务描述信息
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// 路由任务 ID
	RouterId *int64 `json:"router_id,omitempty" xml:"router_id,omitempty" require:"true"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 目标状态
	TargetStatus *int64 `json:"target_status,omitempty" xml:"target_status,omitempty" require:"true"`
}

func (s UpdateSofamqRouterRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqRouterRequest) GoString() string {
	return s.String()
}

func (s *UpdateSofamqRouterRequest) SetAuthToken(v string) *UpdateSofamqRouterRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSofamqRouterRequest) SetProductInstanceId(v string) *UpdateSofamqRouterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateSofamqRouterRequest) SetCurrentStatus(v int64) *UpdateSofamqRouterRequest {
	s.CurrentStatus = &v
	return s
}

func (s *UpdateSofamqRouterRequest) SetDescription(v string) *UpdateSofamqRouterRequest {
	s.Description = &v
	return s
}

func (s *UpdateSofamqRouterRequest) SetRouterId(v int64) *UpdateSofamqRouterRequest {
	s.RouterId = &v
	return s
}

func (s *UpdateSofamqRouterRequest) SetInstanceId(v string) *UpdateSofamqRouterRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateSofamqRouterRequest) SetTargetStatus(v int64) *UpdateSofamqRouterRequest {
	s.TargetStatus = &v
	return s
}

type UpdateSofamqRouterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSofamqRouterResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqRouterResponse) GoString() string {
	return s.String()
}

func (s *UpdateSofamqRouterResponse) SetReqMsgId(v string) *UpdateSofamqRouterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSofamqRouterResponse) SetResultCode(v string) *UpdateSofamqRouterResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSofamqRouterResponse) SetResultMsg(v string) *UpdateSofamqRouterResponse {
	s.ResultMsg = &v
	return s
}

type ExecSofamqDlqresendbatchRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需要查询的单元
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 需查询的消费端 Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 需查询消息所对应的实例 ID。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 需重发的消息的 ID，即 Message ID，多个消息使用英文逗号分隔
	MsgIds *string `json:"msg_ids,omitempty" xml:"msg_ids,omitempty" require:"true"`
}

func (s ExecSofamqDlqresendbatchRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecSofamqDlqresendbatchRequest) GoString() string {
	return s.String()
}

func (s *ExecSofamqDlqresendbatchRequest) SetAuthToken(v string) *ExecSofamqDlqresendbatchRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecSofamqDlqresendbatchRequest) SetProductInstanceId(v string) *ExecSofamqDlqresendbatchRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecSofamqDlqresendbatchRequest) SetCell(v string) *ExecSofamqDlqresendbatchRequest {
	s.Cell = &v
	return s
}

func (s *ExecSofamqDlqresendbatchRequest) SetGroupId(v string) *ExecSofamqDlqresendbatchRequest {
	s.GroupId = &v
	return s
}

func (s *ExecSofamqDlqresendbatchRequest) SetInstanceId(v string) *ExecSofamqDlqresendbatchRequest {
	s.InstanceId = &v
	return s
}

func (s *ExecSofamqDlqresendbatchRequest) SetMsgIds(v string) *ExecSofamqDlqresendbatchRequest {
	s.MsgIds = &v
	return s
}

type ExecSofamqDlqresendbatchResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 发送失败的消息的 ID，即 Message ID
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ExecSofamqDlqresendbatchResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecSofamqDlqresendbatchResponse) GoString() string {
	return s.String()
}

func (s *ExecSofamqDlqresendbatchResponse) SetReqMsgId(v string) *ExecSofamqDlqresendbatchResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecSofamqDlqresendbatchResponse) SetResultCode(v string) *ExecSofamqDlqresendbatchResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecSofamqDlqresendbatchResponse) SetResultMsg(v string) *ExecSofamqDlqresendbatchResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecSofamqDlqresendbatchResponse) SetData(v string) *ExecSofamqDlqresendbatchResponse {
	s.Data = &v
	return s
}

type ListSofamqWarnRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 查询指定 Group 的报警规则时设置
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页显示条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 查询指定 Topic 的报警规则时设置
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty"`
}

func (s ListSofamqWarnRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqWarnRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqWarnRequest) SetAuthToken(v string) *ListSofamqWarnRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqWarnRequest) SetProductInstanceId(v string) *ListSofamqWarnRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListSofamqWarnRequest) SetGroupId(v string) *ListSofamqWarnRequest {
	s.GroupId = &v
	return s
}

func (s *ListSofamqWarnRequest) SetInstanceId(v string) *ListSofamqWarnRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSofamqWarnRequest) SetPageNum(v int64) *ListSofamqWarnRequest {
	s.PageNum = &v
	return s
}

func (s *ListSofamqWarnRequest) SetPageSize(v int64) *ListSofamqWarnRequest {
	s.PageSize = &v
	return s
}

func (s *ListSofamqWarnRequest) SetTopic(v string) *ListSofamqWarnRequest {
	s.Topic = &v
	return s
}

type ListSofamqWarnResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询到的告警规则集合
	Data *WarnPageDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListSofamqWarnResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqWarnResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqWarnResponse) SetReqMsgId(v string) *ListSofamqWarnResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqWarnResponse) SetResultCode(v string) *ListSofamqWarnResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqWarnResponse) SetResultMsg(v string) *ListSofamqWarnResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqWarnResponse) SetData(v *WarnPageDTO) *ListSofamqWarnResponse {
	s.Data = v
	return s
}

type CreateSofamqWarnRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 报警时间范围
	AlertTime *string `json:"alert_time,omitempty" xml:"alert_time,omitempty" require:"true"`
	// 报警通知人信息
	Contacts *string `json:"contacts,omitempty" xml:"contacts,omitempty" require:"true"`
	// 延迟多少秒报报警
	DelayTime *int64 `json:"delay_time,omitempty" xml:"delay_time,omitempty" require:"true"`
	// 报警频率
	Frequency *int64 `json:"frequency,omitempty" xml:"frequency,omitempty" require:"true"`
	// 查询指定 Group 时设置
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 堆积阈值
	Threshold *int64 `json:"threshold,omitempty" xml:"threshold,omitempty" require:"true"`
	// 查询指定 Topic 时设置
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty"`
}

func (s CreateSofamqWarnRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqWarnRequest) GoString() string {
	return s.String()
}

func (s *CreateSofamqWarnRequest) SetAuthToken(v string) *CreateSofamqWarnRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSofamqWarnRequest) SetProductInstanceId(v string) *CreateSofamqWarnRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSofamqWarnRequest) SetAlertTime(v string) *CreateSofamqWarnRequest {
	s.AlertTime = &v
	return s
}

func (s *CreateSofamqWarnRequest) SetContacts(v string) *CreateSofamqWarnRequest {
	s.Contacts = &v
	return s
}

func (s *CreateSofamqWarnRequest) SetDelayTime(v int64) *CreateSofamqWarnRequest {
	s.DelayTime = &v
	return s
}

func (s *CreateSofamqWarnRequest) SetFrequency(v int64) *CreateSofamqWarnRequest {
	s.Frequency = &v
	return s
}

func (s *CreateSofamqWarnRequest) SetGroupId(v string) *CreateSofamqWarnRequest {
	s.GroupId = &v
	return s
}

func (s *CreateSofamqWarnRequest) SetInstanceId(v string) *CreateSofamqWarnRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateSofamqWarnRequest) SetThreshold(v int64) *CreateSofamqWarnRequest {
	s.Threshold = &v
	return s
}

func (s *CreateSofamqWarnRequest) SetTopic(v string) *CreateSofamqWarnRequest {
	s.Topic = &v
	return s
}

type CreateSofamqWarnResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateSofamqWarnResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqWarnResponse) GoString() string {
	return s.String()
}

func (s *CreateSofamqWarnResponse) SetReqMsgId(v string) *CreateSofamqWarnResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSofamqWarnResponse) SetResultCode(v string) *CreateSofamqWarnResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSofamqWarnResponse) SetResultMsg(v string) *CreateSofamqWarnResponse {
	s.ResultMsg = &v
	return s
}

type DeleteSofamqWarnRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 待删除的报警规则 ID
	WarnId *int64 `json:"warn_id,omitempty" xml:"warn_id,omitempty" require:"true"`
}

func (s DeleteSofamqWarnRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqWarnRequest) GoString() string {
	return s.String()
}

func (s *DeleteSofamqWarnRequest) SetAuthToken(v string) *DeleteSofamqWarnRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSofamqWarnRequest) SetProductInstanceId(v string) *DeleteSofamqWarnRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteSofamqWarnRequest) SetInstanceId(v string) *DeleteSofamqWarnRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteSofamqWarnRequest) SetWarnId(v int64) *DeleteSofamqWarnRequest {
	s.WarnId = &v
	return s
}

type DeleteSofamqWarnResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSofamqWarnResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqWarnResponse) GoString() string {
	return s.String()
}

func (s *DeleteSofamqWarnResponse) SetReqMsgId(v string) *DeleteSofamqWarnResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSofamqWarnResponse) SetResultCode(v string) *DeleteSofamqWarnResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSofamqWarnResponse) SetResultMsg(v string) *DeleteSofamqWarnResponse {
	s.ResultMsg = &v
	return s
}

type UpdateSofamqWarnRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 报警时间范围
	AlertTime *string `json:"alert_time,omitempty" xml:"alert_time,omitempty"`
	// 报警通知人信息
	Contacts *string `json:"contacts,omitempty" xml:"contacts,omitempty"`
	// 延迟多少秒报警
	DelayTime *int64 `json:"delay_time,omitempty" xml:"delay_time,omitempty"`
	// 报警频率
	Frequency *int64 `json:"frequency,omitempty" xml:"frequency,omitempty"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 阈值
	Threshold *int64 `json:"threshold,omitempty" xml:"threshold,omitempty"`
	// 指定修改的报警规则
	WarnId *int64 `json:"warn_id,omitempty" xml:"warn_id,omitempty" require:"true"`
}

func (s UpdateSofamqWarnRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqWarnRequest) GoString() string {
	return s.String()
}

func (s *UpdateSofamqWarnRequest) SetAuthToken(v string) *UpdateSofamqWarnRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSofamqWarnRequest) SetProductInstanceId(v string) *UpdateSofamqWarnRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateSofamqWarnRequest) SetAlertTime(v string) *UpdateSofamqWarnRequest {
	s.AlertTime = &v
	return s
}

func (s *UpdateSofamqWarnRequest) SetContacts(v string) *UpdateSofamqWarnRequest {
	s.Contacts = &v
	return s
}

func (s *UpdateSofamqWarnRequest) SetDelayTime(v int64) *UpdateSofamqWarnRequest {
	s.DelayTime = &v
	return s
}

func (s *UpdateSofamqWarnRequest) SetFrequency(v int64) *UpdateSofamqWarnRequest {
	s.Frequency = &v
	return s
}

func (s *UpdateSofamqWarnRequest) SetInstanceId(v string) *UpdateSofamqWarnRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateSofamqWarnRequest) SetThreshold(v int64) *UpdateSofamqWarnRequest {
	s.Threshold = &v
	return s
}

func (s *UpdateSofamqWarnRequest) SetWarnId(v int64) *UpdateSofamqWarnRequest {
	s.WarnId = &v
	return s
}

type UpdateSofamqWarnResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSofamqWarnResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqWarnResponse) GoString() string {
	return s.String()
}

func (s *UpdateSofamqWarnResponse) SetReqMsgId(v string) *UpdateSofamqWarnResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSofamqWarnResponse) SetResultCode(v string) *UpdateSofamqWarnResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSofamqWarnResponse) SetResultMsg(v string) *UpdateSofamqWarnResponse {
	s.ResultMsg = &v
	return s
}

type EnableSofamqWarnRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 待开启的报警规则 ID
	WarnId *int64 `json:"warn_id,omitempty" xml:"warn_id,omitempty" require:"true"`
}

func (s EnableSofamqWarnRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableSofamqWarnRequest) GoString() string {
	return s.String()
}

func (s *EnableSofamqWarnRequest) SetAuthToken(v string) *EnableSofamqWarnRequest {
	s.AuthToken = &v
	return s
}

func (s *EnableSofamqWarnRequest) SetProductInstanceId(v string) *EnableSofamqWarnRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *EnableSofamqWarnRequest) SetInstanceId(v string) *EnableSofamqWarnRequest {
	s.InstanceId = &v
	return s
}

func (s *EnableSofamqWarnRequest) SetWarnId(v int64) *EnableSofamqWarnRequest {
	s.WarnId = &v
	return s
}

type EnableSofamqWarnResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s EnableSofamqWarnResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableSofamqWarnResponse) GoString() string {
	return s.String()
}

func (s *EnableSofamqWarnResponse) SetReqMsgId(v string) *EnableSofamqWarnResponse {
	s.ReqMsgId = &v
	return s
}

func (s *EnableSofamqWarnResponse) SetResultCode(v string) *EnableSofamqWarnResponse {
	s.ResultCode = &v
	return s
}

func (s *EnableSofamqWarnResponse) SetResultMsg(v string) *EnableSofamqWarnResponse {
	s.ResultMsg = &v
	return s
}

type DisableSofamqWarnRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 待关闭的报警规则 ID
	WarnId *int64 `json:"warn_id,omitempty" xml:"warn_id,omitempty" require:"true"`
}

func (s DisableSofamqWarnRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableSofamqWarnRequest) GoString() string {
	return s.String()
}

func (s *DisableSofamqWarnRequest) SetAuthToken(v string) *DisableSofamqWarnRequest {
	s.AuthToken = &v
	return s
}

func (s *DisableSofamqWarnRequest) SetProductInstanceId(v string) *DisableSofamqWarnRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DisableSofamqWarnRequest) SetInstanceId(v string) *DisableSofamqWarnRequest {
	s.InstanceId = &v
	return s
}

func (s *DisableSofamqWarnRequest) SetWarnId(v int64) *DisableSofamqWarnRequest {
	s.WarnId = &v
	return s
}

type DisableSofamqWarnResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DisableSofamqWarnResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableSofamqWarnResponse) GoString() string {
	return s.String()
}

func (s *DisableSofamqWarnResponse) SetReqMsgId(v string) *DisableSofamqWarnResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DisableSofamqWarnResponse) SetResultCode(v string) *DisableSofamqWarnResponse {
	s.ResultCode = &v
	return s
}

func (s *DisableSofamqWarnResponse) SetResultMsg(v string) *DisableSofamqWarnResponse {
	s.ResultMsg = &v
	return s
}

type ListSofamqWarnlogRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 目标单元
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页显示条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty"`
	// 报警规则 ID
	WarnId *int64 `json:"warn_id,omitempty" xml:"warn_id,omitempty"`
}

func (s ListSofamqWarnlogRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqWarnlogRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqWarnlogRequest) SetAuthToken(v string) *ListSofamqWarnlogRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqWarnlogRequest) SetProductInstanceId(v string) *ListSofamqWarnlogRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListSofamqWarnlogRequest) SetCell(v string) *ListSofamqWarnlogRequest {
	s.Cell = &v
	return s
}

func (s *ListSofamqWarnlogRequest) SetGroupId(v string) *ListSofamqWarnlogRequest {
	s.GroupId = &v
	return s
}

func (s *ListSofamqWarnlogRequest) SetInstanceId(v string) *ListSofamqWarnlogRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSofamqWarnlogRequest) SetPageNum(v int64) *ListSofamqWarnlogRequest {
	s.PageNum = &v
	return s
}

func (s *ListSofamqWarnlogRequest) SetPageSize(v int64) *ListSofamqWarnlogRequest {
	s.PageSize = &v
	return s
}

func (s *ListSofamqWarnlogRequest) SetTopic(v string) *ListSofamqWarnlogRequest {
	s.Topic = &v
	return s
}

func (s *ListSofamqWarnlogRequest) SetWarnId(v int64) *ListSofamqWarnlogRequest {
	s.WarnId = &v
	return s
}

type ListSofamqWarnlogResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询到的报警日志集合
	Data *WarnLogPageDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListSofamqWarnlogResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqWarnlogResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqWarnlogResponse) SetReqMsgId(v string) *ListSofamqWarnlogResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqWarnlogResponse) SetResultCode(v string) *ListSofamqWarnlogResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqWarnlogResponse) SetResultMsg(v string) *ListSofamqWarnlogResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqWarnlogResponse) SetData(v *WarnLogPageDTO) *ListSofamqWarnlogResponse {
	s.Data = v
	return s
}

type ListSofamqAdmintopicRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
	// 集群名
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty"`
	// topic名
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty"`
	// 页号
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	//  页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
}

func (s ListSofamqAdmintopicRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqAdmintopicRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqAdmintopicRequest) SetAuthToken(v string) *ListSofamqAdmintopicRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqAdmintopicRequest) SetProductInstanceId(v string) *ListSofamqAdmintopicRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListSofamqAdmintopicRequest) SetInstanceId(v string) *ListSofamqAdmintopicRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSofamqAdmintopicRequest) SetCluster(v string) *ListSofamqAdmintopicRequest {
	s.Cluster = &v
	return s
}

func (s *ListSofamqAdmintopicRequest) SetTopic(v string) *ListSofamqAdmintopicRequest {
	s.Topic = &v
	return s
}

func (s *ListSofamqAdmintopicRequest) SetPageNum(v int64) *ListSofamqAdmintopicRequest {
	s.PageNum = &v
	return s
}

func (s *ListSofamqAdmintopicRequest) SetPageSize(v int64) *ListSofamqAdmintopicRequest {
	s.PageSize = &v
	return s
}

type ListSofamqAdmintopicResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// topic list
	Data *TopicPageDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListSofamqAdmintopicResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqAdmintopicResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqAdmintopicResponse) SetReqMsgId(v string) *ListSofamqAdmintopicResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqAdmintopicResponse) SetResultCode(v string) *ListSofamqAdmintopicResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqAdmintopicResponse) SetResultMsg(v string) *ListSofamqAdmintopicResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqAdmintopicResponse) SetData(v *TopicPageDTO) *ListSofamqAdmintopicResponse {
	s.Data = v
	return s
}

type QueryMetricsTginstantRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 要查询的单元
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// Group ID
	Group *string `json:"group,omitempty" xml:"group,omitempty" require:"true"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s QueryMetricsTginstantRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMetricsTginstantRequest) GoString() string {
	return s.String()
}

func (s *QueryMetricsTginstantRequest) SetAuthToken(v string) *QueryMetricsTginstantRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMetricsTginstantRequest) SetProductInstanceId(v string) *QueryMetricsTginstantRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMetricsTginstantRequest) SetCell(v string) *QueryMetricsTginstantRequest {
	s.Cell = &v
	return s
}

func (s *QueryMetricsTginstantRequest) SetGroup(v string) *QueryMetricsTginstantRequest {
	s.Group = &v
	return s
}

func (s *QueryMetricsTginstantRequest) SetInstanceId(v string) *QueryMetricsTginstantRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryMetricsTginstantRequest) SetTopic(v string) *QueryMetricsTginstantRequest {
	s.Topic = &v
	return s
}

type QueryMetricsTginstantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 当前 Group 死信
	Dlq *int64 `json:"dlq,omitempty" xml:"dlq,omitempty"`
	// 当前消息积压
	MsgBacklog *int64 `json:"msg_backlog,omitempty" xml:"msg_backlog,omitempty"`
	// 每分钟消费数据大小
	RecvBpm *int64 `json:"recv_bpm,omitempty" xml:"recv_bpm,omitempty"`
	// 每分钟拉请求数量
	RecvPpm *int64 `json:"recv_ppm,omitempty" xml:"recv_ppm,omitempty"`
	// 消费 TPM
	RecvTpm *int64 `json:"recv_tpm,omitempty" xml:"recv_tpm,omitempty"`
	// 每分钟发送消息大小
	SendBpm *int64 `json:"send_bpm,omitempty" xml:"send_bpm,omitempty"`
	// 发送 TPM
	SendTpm *int64 `json:"send_tpm,omitempty" xml:"send_tpm,omitempty"`
}

func (s QueryMetricsTginstantResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMetricsTginstantResponse) GoString() string {
	return s.String()
}

func (s *QueryMetricsTginstantResponse) SetReqMsgId(v string) *QueryMetricsTginstantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMetricsTginstantResponse) SetResultCode(v string) *QueryMetricsTginstantResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMetricsTginstantResponse) SetResultMsg(v string) *QueryMetricsTginstantResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMetricsTginstantResponse) SetDlq(v int64) *QueryMetricsTginstantResponse {
	s.Dlq = &v
	return s
}

func (s *QueryMetricsTginstantResponse) SetMsgBacklog(v int64) *QueryMetricsTginstantResponse {
	s.MsgBacklog = &v
	return s
}

func (s *QueryMetricsTginstantResponse) SetRecvBpm(v int64) *QueryMetricsTginstantResponse {
	s.RecvBpm = &v
	return s
}

func (s *QueryMetricsTginstantResponse) SetRecvPpm(v int64) *QueryMetricsTginstantResponse {
	s.RecvPpm = &v
	return s
}

func (s *QueryMetricsTginstantResponse) SetRecvTpm(v int64) *QueryMetricsTginstantResponse {
	s.RecvTpm = &v
	return s
}

func (s *QueryMetricsTginstantResponse) SetSendBpm(v int64) *QueryMetricsTginstantResponse {
	s.SendBpm = &v
	return s
}

func (s *QueryMetricsTginstantResponse) SetSendTpm(v int64) *QueryMetricsTginstantResponse {
	s.SendTpm = &v
	return s
}

type QueryMetricsTghistoryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 要查询的单元
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 结束时间
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 消费组 Group ID
	Group *string `json:"group,omitempty" xml:"group,omitempty" require:"true"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 开始时间
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s QueryMetricsTghistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMetricsTghistoryRequest) GoString() string {
	return s.String()
}

func (s *QueryMetricsTghistoryRequest) SetAuthToken(v string) *QueryMetricsTghistoryRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMetricsTghistoryRequest) SetProductInstanceId(v string) *QueryMetricsTghistoryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMetricsTghistoryRequest) SetCell(v string) *QueryMetricsTghistoryRequest {
	s.Cell = &v
	return s
}

func (s *QueryMetricsTghistoryRequest) SetEndTime(v int64) *QueryMetricsTghistoryRequest {
	s.EndTime = &v
	return s
}

func (s *QueryMetricsTghistoryRequest) SetGroup(v string) *QueryMetricsTghistoryRequest {
	s.Group = &v
	return s
}

func (s *QueryMetricsTghistoryRequest) SetInstanceId(v string) *QueryMetricsTghistoryRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryMetricsTghistoryRequest) SetStartTime(v int64) *QueryMetricsTghistoryRequest {
	s.StartTime = &v
	return s
}

func (s *QueryMetricsTghistoryRequest) SetTopic(v string) *QueryMetricsTghistoryRequest {
	s.Topic = &v
	return s
}

type QueryMetricsTghistoryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结束时间
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty"`
	// 消息点之间的时间间隔（秒），默认为 1
	Interval *int64 `json:"interval,omitempty" xml:"interval,omitempty"`
	// 具体的统计值
	Metrics []*TopicGroupHistoryStatsItem `json:"metrics,omitempty" xml:"metrics,omitempty" type:"Repeated"`
	// 开始时间
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty"`
}

func (s QueryMetricsTghistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMetricsTghistoryResponse) GoString() string {
	return s.String()
}

func (s *QueryMetricsTghistoryResponse) SetReqMsgId(v string) *QueryMetricsTghistoryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMetricsTghistoryResponse) SetResultCode(v string) *QueryMetricsTghistoryResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMetricsTghistoryResponse) SetResultMsg(v string) *QueryMetricsTghistoryResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMetricsTghistoryResponse) SetEndTime(v int64) *QueryMetricsTghistoryResponse {
	s.EndTime = &v
	return s
}

func (s *QueryMetricsTghistoryResponse) SetInterval(v int64) *QueryMetricsTghistoryResponse {
	s.Interval = &v
	return s
}

func (s *QueryMetricsTghistoryResponse) SetMetrics(v []*TopicGroupHistoryStatsItem) *QueryMetricsTghistoryResponse {
	s.Metrics = v
	return s
}

func (s *QueryMetricsTghistoryResponse) SetStartTime(v int64) *QueryMetricsTghistoryResponse {
	s.StartTime = &v
	return s
}

type QueryMetricsInstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s QueryMetricsInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMetricsInstanceRequest) GoString() string {
	return s.String()
}

func (s *QueryMetricsInstanceRequest) SetAuthToken(v string) *QueryMetricsInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMetricsInstanceRequest) SetProductInstanceId(v string) *QueryMetricsInstanceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMetricsInstanceRequest) SetInstanceId(v string) *QueryMetricsInstanceRequest {
	s.InstanceId = &v
	return s
}

type QueryMetricsInstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 消息积压数量
	BacklogNum *int64 `json:"backlog_num,omitempty" xml:"backlog_num,omitempty"`
	// 死信数量
	DlqNum *int64 `json:"dlq_num,omitempty" xml:"dlq_num,omitempty"`
	// 消费组数量
	GroupNum *int64 `json:"group_num,omitempty" xml:"group_num,omitempty"`
	// 订阅关系数量
	SubscriptionNum *int64 `json:"subscription_num,omitempty" xml:"subscription_num,omitempty"`
	// Topic 数量
	TopicNum *int64 `json:"topic_num,omitempty" xml:"topic_num,omitempty"`
	// 数据更新时间戳
	UpdateAt *int64 `json:"update_at,omitempty" xml:"update_at,omitempty"`
}

func (s QueryMetricsInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMetricsInstanceResponse) GoString() string {
	return s.String()
}

func (s *QueryMetricsInstanceResponse) SetReqMsgId(v string) *QueryMetricsInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMetricsInstanceResponse) SetResultCode(v string) *QueryMetricsInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMetricsInstanceResponse) SetResultMsg(v string) *QueryMetricsInstanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMetricsInstanceResponse) SetBacklogNum(v int64) *QueryMetricsInstanceResponse {
	s.BacklogNum = &v
	return s
}

func (s *QueryMetricsInstanceResponse) SetDlqNum(v int64) *QueryMetricsInstanceResponse {
	s.DlqNum = &v
	return s
}

func (s *QueryMetricsInstanceResponse) SetGroupNum(v int64) *QueryMetricsInstanceResponse {
	s.GroupNum = &v
	return s
}

func (s *QueryMetricsInstanceResponse) SetSubscriptionNum(v int64) *QueryMetricsInstanceResponse {
	s.SubscriptionNum = &v
	return s
}

func (s *QueryMetricsInstanceResponse) SetTopicNum(v int64) *QueryMetricsInstanceResponse {
	s.TopicNum = &v
	return s
}

func (s *QueryMetricsInstanceResponse) SetUpdateAt(v int64) *QueryMetricsInstanceResponse {
	s.UpdateAt = &v
	return s
}

type QueryMetricsInstancehistoryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 结束时间（Unix 时间戳）
	EndTime *int64 `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 开始时间（Unix 时间戳）
	StartTime *int64 `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
}

func (s QueryMetricsInstancehistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMetricsInstancehistoryRequest) GoString() string {
	return s.String()
}

func (s *QueryMetricsInstancehistoryRequest) SetAuthToken(v string) *QueryMetricsInstancehistoryRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMetricsInstancehistoryRequest) SetProductInstanceId(v string) *QueryMetricsInstancehistoryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMetricsInstancehistoryRequest) SetEndTime(v int64) *QueryMetricsInstancehistoryRequest {
	s.EndTime = &v
	return s
}

func (s *QueryMetricsInstancehistoryRequest) SetInstanceId(v string) *QueryMetricsInstancehistoryRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryMetricsInstancehistoryRequest) SetStartTime(v int64) *QueryMetricsInstancehistoryRequest {
	s.StartTime = &v
	return s
}

type QueryMetricsInstancehistoryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 历史统计数据
	Metrics []*TopicGroupHistoryStatsItem `json:"metrics,omitempty" xml:"metrics,omitempty" type:"Repeated"`
}

func (s QueryMetricsInstancehistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMetricsInstancehistoryResponse) GoString() string {
	return s.String()
}

func (s *QueryMetricsInstancehistoryResponse) SetReqMsgId(v string) *QueryMetricsInstancehistoryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMetricsInstancehistoryResponse) SetResultCode(v string) *QueryMetricsInstancehistoryResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMetricsInstancehistoryResponse) SetResultMsg(v string) *QueryMetricsInstancehistoryResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMetricsInstancehistoryResponse) SetMetrics(v []*TopicGroupHistoryStatsItem) *QueryMetricsInstancehistoryResponse {
	s.Metrics = v
	return s
}

type QueryStatsTopicRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 是否降序
	Desc *bool `json:"desc,omitempty" xml:"desc,omitempty"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 排序字段
	OrderIndex *int64 `json:"order_index,omitempty" xml:"order_index,omitempty"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页显示条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// Unix 时间戳
	TimestampSec *int64 `json:"timestamp_sec,omitempty" xml:"timestamp_sec,omitempty" require:"true"`
	// 过滤查询的 Topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty"`
}

func (s QueryStatsTopicRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryStatsTopicRequest) GoString() string {
	return s.String()
}

func (s *QueryStatsTopicRequest) SetAuthToken(v string) *QueryStatsTopicRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryStatsTopicRequest) SetProductInstanceId(v string) *QueryStatsTopicRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryStatsTopicRequest) SetDesc(v bool) *QueryStatsTopicRequest {
	s.Desc = &v
	return s
}

func (s *QueryStatsTopicRequest) SetInstanceId(v string) *QueryStatsTopicRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryStatsTopicRequest) SetOrderIndex(v int64) *QueryStatsTopicRequest {
	s.OrderIndex = &v
	return s
}

func (s *QueryStatsTopicRequest) SetPageNum(v int64) *QueryStatsTopicRequest {
	s.PageNum = &v
	return s
}

func (s *QueryStatsTopicRequest) SetPageSize(v int64) *QueryStatsTopicRequest {
	s.PageSize = &v
	return s
}

func (s *QueryStatsTopicRequest) SetTimestampSec(v int64) *QueryStatsTopicRequest {
	s.TimestampSec = &v
	return s
}

func (s *QueryStatsTopicRequest) SetTopic(v string) *QueryStatsTopicRequest {
	s.Topic = &v
	return s
}

type QueryStatsTopicResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// Topic 统计详情
	Metrics []*TopicStatsItem `json:"metrics,omitempty" xml:"metrics,omitempty" type:"Repeated"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 每页显示条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 总条数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// 报表数据更新的 Unix 时间戳
	UpdatedAt *int64 `json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

func (s QueryStatsTopicResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryStatsTopicResponse) GoString() string {
	return s.String()
}

func (s *QueryStatsTopicResponse) SetReqMsgId(v string) *QueryStatsTopicResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryStatsTopicResponse) SetResultCode(v string) *QueryStatsTopicResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryStatsTopicResponse) SetResultMsg(v string) *QueryStatsTopicResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryStatsTopicResponse) SetMetrics(v []*TopicStatsItem) *QueryStatsTopicResponse {
	s.Metrics = v
	return s
}

func (s *QueryStatsTopicResponse) SetPageNum(v int64) *QueryStatsTopicResponse {
	s.PageNum = &v
	return s
}

func (s *QueryStatsTopicResponse) SetPageSize(v int64) *QueryStatsTopicResponse {
	s.PageSize = &v
	return s
}

func (s *QueryStatsTopicResponse) SetTotalCount(v int64) *QueryStatsTopicResponse {
	s.TotalCount = &v
	return s
}

func (s *QueryStatsTopicResponse) SetUpdatedAt(v int64) *QueryStatsTopicResponse {
	s.UpdatedAt = &v
	return s
}

type QueryStatsGroupRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 是否降序，默认为降序
	Desc *bool `json:"desc,omitempty" xml:"desc,omitempty"`
	// Group ID 过滤
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty"`
	// 实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 排序字段
	OrderIndex *int64 `json:"order_index,omitempty" xml:"order_index,omitempty"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页显示条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// Unix 时间戳
	TimestampSec *int64 `json:"timestamp_sec,omitempty" xml:"timestamp_sec,omitempty" require:"true"`
	// Topic 过滤
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty"`
}

func (s QueryStatsGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryStatsGroupRequest) GoString() string {
	return s.String()
}

func (s *QueryStatsGroupRequest) SetAuthToken(v string) *QueryStatsGroupRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryStatsGroupRequest) SetProductInstanceId(v string) *QueryStatsGroupRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryStatsGroupRequest) SetDesc(v bool) *QueryStatsGroupRequest {
	s.Desc = &v
	return s
}

func (s *QueryStatsGroupRequest) SetGroupId(v string) *QueryStatsGroupRequest {
	s.GroupId = &v
	return s
}

func (s *QueryStatsGroupRequest) SetInstanceId(v string) *QueryStatsGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryStatsGroupRequest) SetOrderIndex(v int64) *QueryStatsGroupRequest {
	s.OrderIndex = &v
	return s
}

func (s *QueryStatsGroupRequest) SetPageNum(v int64) *QueryStatsGroupRequest {
	s.PageNum = &v
	return s
}

func (s *QueryStatsGroupRequest) SetPageSize(v int64) *QueryStatsGroupRequest {
	s.PageSize = &v
	return s
}

func (s *QueryStatsGroupRequest) SetTimestampSec(v int64) *QueryStatsGroupRequest {
	s.TimestampSec = &v
	return s
}

func (s *QueryStatsGroupRequest) SetTopic(v string) *QueryStatsGroupRequest {
	s.Topic = &v
	return s
}

type QueryStatsGroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 当前实例的所有 Group 统计信息
	Metrics []*GroupStatsItem `json:"metrics,omitempty" xml:"metrics,omitempty" type:"Repeated"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 每页显示条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 总条数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// 报表数据更新的 Unix 时间戳
	UpdatedAt *int64 `json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

func (s QueryStatsGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryStatsGroupResponse) GoString() string {
	return s.String()
}

func (s *QueryStatsGroupResponse) SetReqMsgId(v string) *QueryStatsGroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryStatsGroupResponse) SetResultCode(v string) *QueryStatsGroupResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryStatsGroupResponse) SetResultMsg(v string) *QueryStatsGroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryStatsGroupResponse) SetMetrics(v []*GroupStatsItem) *QueryStatsGroupResponse {
	s.Metrics = v
	return s
}

func (s *QueryStatsGroupResponse) SetPageNum(v int64) *QueryStatsGroupResponse {
	s.PageNum = &v
	return s
}

func (s *QueryStatsGroupResponse) SetPageSize(v int64) *QueryStatsGroupResponse {
	s.PageSize = &v
	return s
}

func (s *QueryStatsGroupResponse) SetTotalCount(v int64) *QueryStatsGroupResponse {
	s.TotalCount = &v
	return s
}

func (s *QueryStatsGroupResponse) SetUpdatedAt(v int64) *QueryStatsGroupResponse {
	s.UpdatedAt = &v
	return s
}

type ListSofamqAdmingroupRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 集群名
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty"`
	// 组名
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty"`
	// 实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
	// 页号
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 是否显示router group
	ShowRouter *bool `json:"show_router,omitempty" xml:"show_router,omitempty"`
}

func (s ListSofamqAdmingroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqAdmingroupRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqAdmingroupRequest) SetAuthToken(v string) *ListSofamqAdmingroupRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqAdmingroupRequest) SetProductInstanceId(v string) *ListSofamqAdmingroupRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListSofamqAdmingroupRequest) SetCluster(v string) *ListSofamqAdmingroupRequest {
	s.Cluster = &v
	return s
}

func (s *ListSofamqAdmingroupRequest) SetGroupId(v string) *ListSofamqAdmingroupRequest {
	s.GroupId = &v
	return s
}

func (s *ListSofamqAdmingroupRequest) SetInstanceId(v string) *ListSofamqAdmingroupRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSofamqAdmingroupRequest) SetPageNum(v int64) *ListSofamqAdmingroupRequest {
	s.PageNum = &v
	return s
}

func (s *ListSofamqAdmingroupRequest) SetPageSize(v int64) *ListSofamqAdmingroupRequest {
	s.PageSize = &v
	return s
}

func (s *ListSofamqAdmingroupRequest) SetShowRouter(v bool) *ListSofamqAdmingroupRequest {
	s.ShowRouter = &v
	return s
}

type ListSofamqAdmingroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// group list
	Data *GroupPageDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListSofamqAdmingroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqAdmingroupResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqAdmingroupResponse) SetReqMsgId(v string) *ListSofamqAdmingroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqAdmingroupResponse) SetResultCode(v string) *ListSofamqAdmingroupResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqAdmingroupResponse) SetResultMsg(v string) *ListSofamqAdmingroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqAdmingroupResponse) SetData(v *GroupPageDTO) *ListSofamqAdmingroupResponse {
	s.Data = v
	return s
}

type ListSofamqKvconfigRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
	// 页号
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
}

func (s ListSofamqKvconfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqKvconfigRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqKvconfigRequest) SetAuthToken(v string) *ListSofamqKvconfigRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqKvconfigRequest) SetProductInstanceId(v string) *ListSofamqKvconfigRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListSofamqKvconfigRequest) SetKey(v string) *ListSofamqKvconfigRequest {
	s.Key = &v
	return s
}

func (s *ListSofamqKvconfigRequest) SetNamespace(v string) *ListSofamqKvconfigRequest {
	s.Namespace = &v
	return s
}

func (s *ListSofamqKvconfigRequest) SetPageNum(v int64) *ListSofamqKvconfigRequest {
	s.PageNum = &v
	return s
}

func (s *ListSofamqKvconfigRequest) SetPageSize(v int64) *ListSofamqKvconfigRequest {
	s.PageSize = &v
	return s
}

type ListSofamqKvconfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// kv config page
	Data *KVConfigPageDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListSofamqKvconfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqKvconfigResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqKvconfigResponse) SetReqMsgId(v string) *ListSofamqKvconfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqKvconfigResponse) SetResultCode(v string) *ListSofamqKvconfigResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqKvconfigResponse) SetResultMsg(v string) *ListSofamqKvconfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqKvconfigResponse) SetData(v *KVConfigPageDTO) *ListSofamqKvconfigResponse {
	s.Data = v
	return s
}

type CreateSofamqKvconfigRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// value
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s CreateSofamqKvconfigRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqKvconfigRequest) GoString() string {
	return s.String()
}

func (s *CreateSofamqKvconfigRequest) SetAuthToken(v string) *CreateSofamqKvconfigRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSofamqKvconfigRequest) SetProductInstanceId(v string) *CreateSofamqKvconfigRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSofamqKvconfigRequest) SetNamespace(v string) *CreateSofamqKvconfigRequest {
	s.Namespace = &v
	return s
}

func (s *CreateSofamqKvconfigRequest) SetKey(v string) *CreateSofamqKvconfigRequest {
	s.Key = &v
	return s
}

func (s *CreateSofamqKvconfigRequest) SetValue(v string) *CreateSofamqKvconfigRequest {
	s.Value = &v
	return s
}

type CreateSofamqKvconfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateSofamqKvconfigResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqKvconfigResponse) GoString() string {
	return s.String()
}

func (s *CreateSofamqKvconfigResponse) SetReqMsgId(v string) *CreateSofamqKvconfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSofamqKvconfigResponse) SetResultCode(v string) *CreateSofamqKvconfigResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSofamqKvconfigResponse) SetResultMsg(v string) *CreateSofamqKvconfigResponse {
	s.ResultMsg = &v
	return s
}

type DeleteSofamqKvconfigRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
}

func (s DeleteSofamqKvconfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqKvconfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteSofamqKvconfigRequest) SetAuthToken(v string) *DeleteSofamqKvconfigRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSofamqKvconfigRequest) SetProductInstanceId(v string) *DeleteSofamqKvconfigRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteSofamqKvconfigRequest) SetNamespace(v string) *DeleteSofamqKvconfigRequest {
	s.Namespace = &v
	return s
}

func (s *DeleteSofamqKvconfigRequest) SetKey(v string) *DeleteSofamqKvconfigRequest {
	s.Key = &v
	return s
}

type DeleteSofamqKvconfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSofamqKvconfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqKvconfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteSofamqKvconfigResponse) SetReqMsgId(v string) *DeleteSofamqKvconfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSofamqKvconfigResponse) SetResultCode(v string) *DeleteSofamqKvconfigResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSofamqKvconfigResponse) SetResultMsg(v string) *DeleteSofamqKvconfigResponse {
	s.ResultMsg = &v
	return s
}

type UpdateSofamqKvconfigRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// 值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s UpdateSofamqKvconfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqKvconfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateSofamqKvconfigRequest) SetAuthToken(v string) *UpdateSofamqKvconfigRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSofamqKvconfigRequest) SetProductInstanceId(v string) *UpdateSofamqKvconfigRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateSofamqKvconfigRequest) SetNamespace(v string) *UpdateSofamqKvconfigRequest {
	s.Namespace = &v
	return s
}

func (s *UpdateSofamqKvconfigRequest) SetKey(v string) *UpdateSofamqKvconfigRequest {
	s.Key = &v
	return s
}

func (s *UpdateSofamqKvconfigRequest) SetValue(v string) *UpdateSofamqKvconfigRequest {
	s.Value = &v
	return s
}

type UpdateSofamqKvconfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSofamqKvconfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqKvconfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateSofamqKvconfigResponse) SetReqMsgId(v string) *UpdateSofamqKvconfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSofamqKvconfigResponse) SetResultCode(v string) *UpdateSofamqKvconfigResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSofamqKvconfigResponse) SetResultMsg(v string) *UpdateSofamqKvconfigResponse {
	s.ResultMsg = &v
	return s
}

type DeleteSofamqConfigRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 目标名
	TargetName *string `json:"target_name,omitempty" xml:"target_name,omitempty" require:"true"`
	// 目标类型
	TargetType *int64 `json:"target_type,omitempty" xml:"target_type,omitempty" require:"true"`
	// 属性名
	Property *string `json:"property,omitempty" xml:"property,omitempty" require:"true"`
}

func (s DeleteSofamqConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteSofamqConfigRequest) SetAuthToken(v string) *DeleteSofamqConfigRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSofamqConfigRequest) SetProductInstanceId(v string) *DeleteSofamqConfigRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteSofamqConfigRequest) SetTargetName(v string) *DeleteSofamqConfigRequest {
	s.TargetName = &v
	return s
}

func (s *DeleteSofamqConfigRequest) SetTargetType(v int64) *DeleteSofamqConfigRequest {
	s.TargetType = &v
	return s
}

func (s *DeleteSofamqConfigRequest) SetProperty(v string) *DeleteSofamqConfigRequest {
	s.Property = &v
	return s
}

type DeleteSofamqConfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSofamqConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteSofamqConfigResponse) SetReqMsgId(v string) *DeleteSofamqConfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSofamqConfigResponse) SetResultCode(v string) *DeleteSofamqConfigResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSofamqConfigResponse) SetResultMsg(v string) *DeleteSofamqConfigResponse {
	s.ResultMsg = &v
	return s
}

type UpdateSofamqConfigRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 目标名
	TargetName *string `json:"target_name,omitempty" xml:"target_name,omitempty" require:"true"`
	// 目标类型
	TargetType *int64 `json:"target_type,omitempty" xml:"target_type,omitempty" require:"true"`
	// 配置名
	Property *string `json:"property,omitempty" xml:"property,omitempty" require:"true"`
	// 配置值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s UpdateSofamqConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateSofamqConfigRequest) SetAuthToken(v string) *UpdateSofamqConfigRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSofamqConfigRequest) SetProductInstanceId(v string) *UpdateSofamqConfigRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateSofamqConfigRequest) SetTargetName(v string) *UpdateSofamqConfigRequest {
	s.TargetName = &v
	return s
}

func (s *UpdateSofamqConfigRequest) SetTargetType(v int64) *UpdateSofamqConfigRequest {
	s.TargetType = &v
	return s
}

func (s *UpdateSofamqConfigRequest) SetProperty(v string) *UpdateSofamqConfigRequest {
	s.Property = &v
	return s
}

func (s *UpdateSofamqConfigRequest) SetValue(v string) *UpdateSofamqConfigRequest {
	s.Value = &v
	return s
}

type UpdateSofamqConfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSofamqConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateSofamqConfigResponse) SetReqMsgId(v string) *UpdateSofamqConfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSofamqConfigResponse) SetResultCode(v string) *UpdateSofamqConfigResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSofamqConfigResponse) SetResultMsg(v string) *UpdateSofamqConfigResponse {
	s.ResultMsg = &v
	return s
}

type UpdateSofamqClusterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// appkey
	Appkey *string `json:"appkey,omitempty" xml:"appkey,omitempty"`
	// cluster
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty"`
	// deploy_mode
	DeployMode *string `json:"deploy_mode,omitempty" xml:"deploy_mode,omitempty"`
	// remark
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
}

func (s UpdateSofamqClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqClusterRequest) GoString() string {
	return s.String()
}

func (s *UpdateSofamqClusterRequest) SetAuthToken(v string) *UpdateSofamqClusterRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSofamqClusterRequest) SetProductInstanceId(v string) *UpdateSofamqClusterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateSofamqClusterRequest) SetId(v int64) *UpdateSofamqClusterRequest {
	s.Id = &v
	return s
}

func (s *UpdateSofamqClusterRequest) SetAppkey(v string) *UpdateSofamqClusterRequest {
	s.Appkey = &v
	return s
}

func (s *UpdateSofamqClusterRequest) SetCluster(v string) *UpdateSofamqClusterRequest {
	s.Cluster = &v
	return s
}

func (s *UpdateSofamqClusterRequest) SetDeployMode(v string) *UpdateSofamqClusterRequest {
	s.DeployMode = &v
	return s
}

func (s *UpdateSofamqClusterRequest) SetRemark(v string) *UpdateSofamqClusterRequest {
	s.Remark = &v
	return s
}

type UpdateSofamqClusterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSofamqClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqClusterResponse) GoString() string {
	return s.String()
}

func (s *UpdateSofamqClusterResponse) SetReqMsgId(v string) *UpdateSofamqClusterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSofamqClusterResponse) SetResultCode(v string) *UpdateSofamqClusterResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSofamqClusterResponse) SetResultMsg(v string) *UpdateSofamqClusterResponse {
	s.ResultMsg = &v
	return s
}

type UpdateSofamqDatacenterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// datacenter
	Datacenter *string `json:"datacenter,omitempty" xml:"datacenter,omitempty"`
	// room
	Room *string `json:"room,omitempty" xml:"room,omitempty"`
	// cluster
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty"`
}

func (s UpdateSofamqDatacenterRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqDatacenterRequest) GoString() string {
	return s.String()
}

func (s *UpdateSofamqDatacenterRequest) SetAuthToken(v string) *UpdateSofamqDatacenterRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSofamqDatacenterRequest) SetProductInstanceId(v string) *UpdateSofamqDatacenterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateSofamqDatacenterRequest) SetId(v int64) *UpdateSofamqDatacenterRequest {
	s.Id = &v
	return s
}

func (s *UpdateSofamqDatacenterRequest) SetDatacenter(v string) *UpdateSofamqDatacenterRequest {
	s.Datacenter = &v
	return s
}

func (s *UpdateSofamqDatacenterRequest) SetRoom(v string) *UpdateSofamqDatacenterRequest {
	s.Room = &v
	return s
}

func (s *UpdateSofamqDatacenterRequest) SetCluster(v string) *UpdateSofamqDatacenterRequest {
	s.Cluster = &v
	return s
}

type UpdateSofamqDatacenterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSofamqDatacenterResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqDatacenterResponse) GoString() string {
	return s.String()
}

func (s *UpdateSofamqDatacenterResponse) SetReqMsgId(v string) *UpdateSofamqDatacenterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSofamqDatacenterResponse) SetResultCode(v string) *UpdateSofamqDatacenterResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSofamqDatacenterResponse) SetResultMsg(v string) *UpdateSofamqDatacenterResponse {
	s.ResultMsg = &v
	return s
}

type UpdateSofamqRoomRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// cluster
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty"`
	// endpoint
	Endpoint *string `json:"endpoint,omitempty" xml:"endpoint,omitempty"`
	// region
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
	// room
	Room *string `json:"room,omitempty" xml:"room,omitempty"`
}

func (s UpdateSofamqRoomRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqRoomRequest) GoString() string {
	return s.String()
}

func (s *UpdateSofamqRoomRequest) SetAuthToken(v string) *UpdateSofamqRoomRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSofamqRoomRequest) SetProductInstanceId(v string) *UpdateSofamqRoomRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateSofamqRoomRequest) SetId(v int64) *UpdateSofamqRoomRequest {
	s.Id = &v
	return s
}

func (s *UpdateSofamqRoomRequest) SetCluster(v string) *UpdateSofamqRoomRequest {
	s.Cluster = &v
	return s
}

func (s *UpdateSofamqRoomRequest) SetEndpoint(v string) *UpdateSofamqRoomRequest {
	s.Endpoint = &v
	return s
}

func (s *UpdateSofamqRoomRequest) SetRegion(v string) *UpdateSofamqRoomRequest {
	s.Region = &v
	return s
}

func (s *UpdateSofamqRoomRequest) SetRoom(v string) *UpdateSofamqRoomRequest {
	s.Room = &v
	return s
}

type UpdateSofamqRoomResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSofamqRoomResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqRoomResponse) GoString() string {
	return s.String()
}

func (s *UpdateSofamqRoomResponse) SetReqMsgId(v string) *UpdateSofamqRoomResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSofamqRoomResponse) SetResultCode(v string) *UpdateSofamqRoomResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSofamqRoomResponse) SetResultMsg(v string) *UpdateSofamqRoomResponse {
	s.ResultMsg = &v
	return s
}

type UpdateSofamqNodeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// cluster
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty"`
	// data_center
	DataCenter *string `json:"data_center,omitempty" xml:"data_center,omitempty"`
	// hostname
	Hostname *string `json:"hostname,omitempty" xml:"hostname,omitempty"`
	// node_group
	NodeGroup *string `json:"node_group,omitempty" xml:"node_group,omitempty"`
	// perm
	Perm *string `json:"perm,omitempty" xml:"perm,omitempty"`
	// rip
	Rip *string `json:"rip,omitempty" xml:"rip,omitempty"`
	// vip
	Vip *string `json:"vip,omitempty" xml:"vip,omitempty"`
	// room
	Room *string `json:"room,omitempty" xml:"room,omitempty"`
}

func (s UpdateSofamqNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqNodeRequest) GoString() string {
	return s.String()
}

func (s *UpdateSofamqNodeRequest) SetAuthToken(v string) *UpdateSofamqNodeRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSofamqNodeRequest) SetProductInstanceId(v string) *UpdateSofamqNodeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateSofamqNodeRequest) SetId(v int64) *UpdateSofamqNodeRequest {
	s.Id = &v
	return s
}

func (s *UpdateSofamqNodeRequest) SetCluster(v string) *UpdateSofamqNodeRequest {
	s.Cluster = &v
	return s
}

func (s *UpdateSofamqNodeRequest) SetDataCenter(v string) *UpdateSofamqNodeRequest {
	s.DataCenter = &v
	return s
}

func (s *UpdateSofamqNodeRequest) SetHostname(v string) *UpdateSofamqNodeRequest {
	s.Hostname = &v
	return s
}

func (s *UpdateSofamqNodeRequest) SetNodeGroup(v string) *UpdateSofamqNodeRequest {
	s.NodeGroup = &v
	return s
}

func (s *UpdateSofamqNodeRequest) SetPerm(v string) *UpdateSofamqNodeRequest {
	s.Perm = &v
	return s
}

func (s *UpdateSofamqNodeRequest) SetRip(v string) *UpdateSofamqNodeRequest {
	s.Rip = &v
	return s
}

func (s *UpdateSofamqNodeRequest) SetVip(v string) *UpdateSofamqNodeRequest {
	s.Vip = &v
	return s
}

func (s *UpdateSofamqNodeRequest) SetRoom(v string) *UpdateSofamqNodeRequest {
	s.Room = &v
	return s
}

type UpdateSofamqNodeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSofamqNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqNodeResponse) GoString() string {
	return s.String()
}

func (s *UpdateSofamqNodeResponse) SetReqMsgId(v string) *UpdateSofamqNodeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSofamqNodeResponse) SetResultCode(v string) *UpdateSofamqNodeResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSofamqNodeResponse) SetResultMsg(v string) *UpdateSofamqNodeResponse {
	s.ResultMsg = &v
	return s
}

type QuerySofamqTopicqueueRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需查询的 Topic 所在的 Cell
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// 需查询的 Topic 所对应的实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s QuerySofamqTopicqueueRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqTopicqueueRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqTopicqueueRequest) SetAuthToken(v string) *QuerySofamqTopicqueueRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqTopicqueueRequest) SetProductInstanceId(v string) *QuerySofamqTopicqueueRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqTopicqueueRequest) SetCell(v string) *QuerySofamqTopicqueueRequest {
	s.Cell = &v
	return s
}

func (s *QuerySofamqTopicqueueRequest) SetInstanceId(v string) *QuerySofamqTopicqueueRequest {
	s.InstanceId = &v
	return s
}

func (s *QuerySofamqTopicqueueRequest) SetTopic(v string) *QuerySofamqTopicqueueRequest {
	s.Topic = &v
	return s
}

type QuerySofamqTopicqueueResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// Topic 队列列表
	Data []*TopicQueueDTO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QuerySofamqTopicqueueResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqTopicqueueResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqTopicqueueResponse) SetReqMsgId(v string) *QuerySofamqTopicqueueResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqTopicqueueResponse) SetResultCode(v string) *QuerySofamqTopicqueueResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqTopicqueueResponse) SetResultMsg(v string) *QuerySofamqTopicqueueResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqTopicqueueResponse) SetData(v []*TopicQueueDTO) *QuerySofamqTopicqueueResponse {
	s.Data = v
	return s
}

type QuerySofamqAdmingroupsubdetailRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// cell名
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty" require:"true"`
	// 需查询的 Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 需查询的 Topic 所对应的实例 ID。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s QuerySofamqAdmingroupsubdetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqAdmingroupsubdetailRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqAdmingroupsubdetailRequest) SetAuthToken(v string) *QuerySofamqAdmingroupsubdetailRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqAdmingroupsubdetailRequest) SetProductInstanceId(v string) *QuerySofamqAdmingroupsubdetailRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqAdmingroupsubdetailRequest) SetCell(v string) *QuerySofamqAdmingroupsubdetailRequest {
	s.Cell = &v
	return s
}

func (s *QuerySofamqAdmingroupsubdetailRequest) SetGroupId(v string) *QuerySofamqAdmingroupsubdetailRequest {
	s.GroupId = &v
	return s
}

func (s *QuerySofamqAdmingroupsubdetailRequest) SetInstanceId(v string) *QuerySofamqAdmingroupsubdetailRequest {
	s.InstanceId = &v
	return s
}

type QuerySofamqAdmingroupsubdetailResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回data信息
	Data *GroupSubDetailDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySofamqAdmingroupsubdetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqAdmingroupsubdetailResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqAdmingroupsubdetailResponse) SetReqMsgId(v string) *QuerySofamqAdmingroupsubdetailResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqAdmingroupsubdetailResponse) SetResultCode(v string) *QuerySofamqAdmingroupsubdetailResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqAdmingroupsubdetailResponse) SetResultMsg(v string) *QuerySofamqAdmingroupsubdetailResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqAdmingroupsubdetailResponse) SetData(v *GroupSubDetailDTO) *QuerySofamqAdmingroupsubdetailResponse {
	s.Data = v
	return s
}

type ListSofamqAdminuserRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户名
	LoginName *string `json:"login_name,omitempty" xml:"login_name,omitempty"`
	// 页号
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
}

func (s ListSofamqAdminuserRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqAdminuserRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqAdminuserRequest) SetAuthToken(v string) *ListSofamqAdminuserRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqAdminuserRequest) SetProductInstanceId(v string) *ListSofamqAdminuserRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListSofamqAdminuserRequest) SetLoginName(v string) *ListSofamqAdminuserRequest {
	s.LoginName = &v
	return s
}

func (s *ListSofamqAdminuserRequest) SetPageNum(v int64) *ListSofamqAdminuserRequest {
	s.PageNum = &v
	return s
}

func (s *ListSofamqAdminuserRequest) SetPageSize(v int64) *ListSofamqAdminuserRequest {
	s.PageSize = &v
	return s
}

type ListSofamqAdminuserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 管理员用户分页数据
	Data *AdminUserPageDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListSofamqAdminuserResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqAdminuserResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqAdminuserResponse) SetReqMsgId(v string) *ListSofamqAdminuserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqAdminuserResponse) SetResultCode(v string) *ListSofamqAdminuserResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqAdminuserResponse) SetResultMsg(v string) *ListSofamqAdminuserResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqAdminuserResponse) SetData(v *AdminUserPageDTO) *ListSofamqAdminuserResponse {
	s.Data = v
	return s
}

type CreateSofamqAdminuserRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 登录名
	LoginName *string `json:"login_name,omitempty" xml:"login_name,omitempty" require:"true"`
	// 用户密码
	Password *string `json:"password,omitempty" xml:"password,omitempty" require:"true"`
	// 用户类型
	UserType *int64 `json:"user_type,omitempty" xml:"user_type,omitempty" require:"true"`
}

func (s CreateSofamqAdminuserRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqAdminuserRequest) GoString() string {
	return s.String()
}

func (s *CreateSofamqAdminuserRequest) SetAuthToken(v string) *CreateSofamqAdminuserRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSofamqAdminuserRequest) SetProductInstanceId(v string) *CreateSofamqAdminuserRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSofamqAdminuserRequest) SetLoginName(v string) *CreateSofamqAdminuserRequest {
	s.LoginName = &v
	return s
}

func (s *CreateSofamqAdminuserRequest) SetPassword(v string) *CreateSofamqAdminuserRequest {
	s.Password = &v
	return s
}

func (s *CreateSofamqAdminuserRequest) SetUserType(v int64) *CreateSofamqAdminuserRequest {
	s.UserType = &v
	return s
}

type CreateSofamqAdminuserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateSofamqAdminuserResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqAdminuserResponse) GoString() string {
	return s.String()
}

func (s *CreateSofamqAdminuserResponse) SetReqMsgId(v string) *CreateSofamqAdminuserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSofamqAdminuserResponse) SetResultCode(v string) *CreateSofamqAdminuserResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSofamqAdminuserResponse) SetResultMsg(v string) *CreateSofamqAdminuserResponse {
	s.ResultMsg = &v
	return s
}

type DeleteSofamqAdminuserRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 管理员用户名
	LoginName *string `json:"login_name,omitempty" xml:"login_name,omitempty" require:"true"`
}

func (s DeleteSofamqAdminuserRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqAdminuserRequest) GoString() string {
	return s.String()
}

func (s *DeleteSofamqAdminuserRequest) SetAuthToken(v string) *DeleteSofamqAdminuserRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSofamqAdminuserRequest) SetProductInstanceId(v string) *DeleteSofamqAdminuserRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteSofamqAdminuserRequest) SetLoginName(v string) *DeleteSofamqAdminuserRequest {
	s.LoginName = &v
	return s
}

type DeleteSofamqAdminuserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSofamqAdminuserResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqAdminuserResponse) GoString() string {
	return s.String()
}

func (s *DeleteSofamqAdminuserResponse) SetReqMsgId(v string) *DeleteSofamqAdminuserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSofamqAdminuserResponse) SetResultCode(v string) *DeleteSofamqAdminuserResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSofamqAdminuserResponse) SetResultMsg(v string) *DeleteSofamqAdminuserResponse {
	s.ResultMsg = &v
	return s
}

type ListSofamqAdminapiRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 是否显示创建接口
	ShowCreate *bool `json:"show_create,omitempty" xml:"show_create,omitempty"`
	// 是否显示删除接口
	ShowDelete *bool `json:"show_delete,omitempty" xml:"show_delete,omitempty"`
	// 是否显示查询接口
	ShowRetrieve *bool `json:"show_retrieve,omitempty" xml:"show_retrieve,omitempty"`
	// 是否显示更新接口
	ShowUpdate *bool `json:"show_update,omitempty" xml:"show_update,omitempty"`
	// 是否显示操作类接口
	ShowOperation *bool `json:"show_operation,omitempty" xml:"show_operation,omitempty"`
}

func (s ListSofamqAdminapiRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqAdminapiRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqAdminapiRequest) SetAuthToken(v string) *ListSofamqAdminapiRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqAdminapiRequest) SetProductInstanceId(v string) *ListSofamqAdminapiRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListSofamqAdminapiRequest) SetShowCreate(v bool) *ListSofamqAdminapiRequest {
	s.ShowCreate = &v
	return s
}

func (s *ListSofamqAdminapiRequest) SetShowDelete(v bool) *ListSofamqAdminapiRequest {
	s.ShowDelete = &v
	return s
}

func (s *ListSofamqAdminapiRequest) SetShowRetrieve(v bool) *ListSofamqAdminapiRequest {
	s.ShowRetrieve = &v
	return s
}

func (s *ListSofamqAdminapiRequest) SetShowUpdate(v bool) *ListSofamqAdminapiRequest {
	s.ShowUpdate = &v
	return s
}

func (s *ListSofamqAdminapiRequest) SetShowOperation(v bool) *ListSofamqAdminapiRequest {
	s.ShowOperation = &v
	return s
}

type ListSofamqAdminapiResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询结果
	Data []*ApiInfoDTO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListSofamqAdminapiResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqAdminapiResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqAdminapiResponse) SetReqMsgId(v string) *ListSofamqAdminapiResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqAdminapiResponse) SetResultCode(v string) *ListSofamqAdminapiResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqAdminapiResponse) SetResultMsg(v string) *ListSofamqAdminapiResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqAdminapiResponse) SetData(v []*ApiInfoDTO) *ListSofamqAdminapiResponse {
	s.Data = v
	return s
}

type SwitchSofamqAdminapiRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// api接口名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 开关是否打开
	SwitchOpen *bool `json:"switch_open,omitempty" xml:"switch_open,omitempty" require:"true"`
}

func (s SwitchSofamqAdminapiRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchSofamqAdminapiRequest) GoString() string {
	return s.String()
}

func (s *SwitchSofamqAdminapiRequest) SetAuthToken(v string) *SwitchSofamqAdminapiRequest {
	s.AuthToken = &v
	return s
}

func (s *SwitchSofamqAdminapiRequest) SetProductInstanceId(v string) *SwitchSofamqAdminapiRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SwitchSofamqAdminapiRequest) SetName(v string) *SwitchSofamqAdminapiRequest {
	s.Name = &v
	return s
}

func (s *SwitchSofamqAdminapiRequest) SetSwitchOpen(v bool) *SwitchSofamqAdminapiRequest {
	s.SwitchOpen = &v
	return s
}

type SwitchSofamqAdminapiResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SwitchSofamqAdminapiResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchSofamqAdminapiResponse) GoString() string {
	return s.String()
}

func (s *SwitchSofamqAdminapiResponse) SetReqMsgId(v string) *SwitchSofamqAdminapiResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SwitchSofamqAdminapiResponse) SetResultCode(v string) *SwitchSofamqAdminapiResponse {
	s.ResultCode = &v
	return s
}

func (s *SwitchSofamqAdminapiResponse) SetResultMsg(v string) *SwitchSofamqAdminapiResponse {
	s.ResultMsg = &v
	return s
}

type AddDmsMsgtypeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// desc
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty"`
}

func (s AddDmsMsgtypeRequest) String() string {
	return tea.Prettify(s)
}

func (s AddDmsMsgtypeRequest) GoString() string {
	return s.String()
}

func (s *AddDmsMsgtypeRequest) SetAuthToken(v string) *AddDmsMsgtypeRequest {
	s.AuthToken = &v
	return s
}

func (s *AddDmsMsgtypeRequest) SetProductInstanceId(v string) *AddDmsMsgtypeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AddDmsMsgtypeRequest) SetInstanceId(v string) *AddDmsMsgtypeRequest {
	s.InstanceId = &v
	return s
}

func (s *AddDmsMsgtypeRequest) SetTopic(v string) *AddDmsMsgtypeRequest {
	s.Topic = &v
	return s
}

func (s *AddDmsMsgtypeRequest) SetEventcode(v string) *AddDmsMsgtypeRequest {
	s.Eventcode = &v
	return s
}

func (s *AddDmsMsgtypeRequest) SetDesc(v string) *AddDmsMsgtypeRequest {
	s.Desc = &v
	return s
}

type AddDmsMsgtypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s AddDmsMsgtypeResponse) String() string {
	return tea.Prettify(s)
}

func (s AddDmsMsgtypeResponse) GoString() string {
	return s.String()
}

func (s *AddDmsMsgtypeResponse) SetReqMsgId(v string) *AddDmsMsgtypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddDmsMsgtypeResponse) SetResultCode(v string) *AddDmsMsgtypeResponse {
	s.ResultCode = &v
	return s
}

func (s *AddDmsMsgtypeResponse) SetResultMsg(v string) *AddDmsMsgtypeResponse {
	s.ResultMsg = &v
	return s
}

type ListDmsMsgtypeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// currentPage
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// page size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty"`
}

func (s ListDmsMsgtypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDmsMsgtypeRequest) GoString() string {
	return s.String()
}

func (s *ListDmsMsgtypeRequest) SetAuthToken(v string) *ListDmsMsgtypeRequest {
	s.AuthToken = &v
	return s
}

func (s *ListDmsMsgtypeRequest) SetProductInstanceId(v string) *ListDmsMsgtypeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListDmsMsgtypeRequest) SetPageNum(v int64) *ListDmsMsgtypeRequest {
	s.PageNum = &v
	return s
}

func (s *ListDmsMsgtypeRequest) SetEventcode(v string) *ListDmsMsgtypeRequest {
	s.Eventcode = &v
	return s
}

func (s *ListDmsMsgtypeRequest) SetInstanceId(v string) *ListDmsMsgtypeRequest {
	s.InstanceId = &v
	return s
}

func (s *ListDmsMsgtypeRequest) SetPageSize(v int64) *ListDmsMsgtypeRequest {
	s.PageSize = &v
	return s
}

func (s *ListDmsMsgtypeRequest) SetTopic(v string) *ListDmsMsgtypeRequest {
	s.Topic = &v
	return s
}

type ListDmsMsgtypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// msgtypes
	Data *MsgTypePageDO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListDmsMsgtypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDmsMsgtypeResponse) GoString() string {
	return s.String()
}

func (s *ListDmsMsgtypeResponse) SetReqMsgId(v string) *ListDmsMsgtypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListDmsMsgtypeResponse) SetResultCode(v string) *ListDmsMsgtypeResponse {
	s.ResultCode = &v
	return s
}

func (s *ListDmsMsgtypeResponse) SetResultMsg(v string) *ListDmsMsgtypeResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListDmsMsgtypeResponse) SetData(v *MsgTypePageDO) *ListDmsMsgtypeResponse {
	s.Data = v
	return s
}

type CreateDmsBindingRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// appname
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// exchange_type
	ExchangeType *string `json:"exchange_type,omitempty" xml:"exchange_type,omitempty" require:"true"`
	// expression
	Expression *string `json:"expression,omitempty" xml:"expression,omitempty"`
	// groupid
	Group *string `json:"group,omitempty" xml:"group,omitempty" require:"true"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// persistence
	Persistence *bool `json:"persistence,omitempty" xml:"persistence,omitempty" require:"true"`
	// topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s CreateDmsBindingRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDmsBindingRequest) GoString() string {
	return s.String()
}

func (s *CreateDmsBindingRequest) SetAuthToken(v string) *CreateDmsBindingRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDmsBindingRequest) SetProductInstanceId(v string) *CreateDmsBindingRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDmsBindingRequest) SetAppName(v string) *CreateDmsBindingRequest {
	s.AppName = &v
	return s
}

func (s *CreateDmsBindingRequest) SetEventcode(v string) *CreateDmsBindingRequest {
	s.Eventcode = &v
	return s
}

func (s *CreateDmsBindingRequest) SetExchangeType(v string) *CreateDmsBindingRequest {
	s.ExchangeType = &v
	return s
}

func (s *CreateDmsBindingRequest) SetExpression(v string) *CreateDmsBindingRequest {
	s.Expression = &v
	return s
}

func (s *CreateDmsBindingRequest) SetGroup(v string) *CreateDmsBindingRequest {
	s.Group = &v
	return s
}

func (s *CreateDmsBindingRequest) SetInstanceId(v string) *CreateDmsBindingRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateDmsBindingRequest) SetPersistence(v bool) *CreateDmsBindingRequest {
	s.Persistence = &v
	return s
}

func (s *CreateDmsBindingRequest) SetTopic(v string) *CreateDmsBindingRequest {
	s.Topic = &v
	return s
}

type CreateDmsBindingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateDmsBindingResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDmsBindingResponse) GoString() string {
	return s.String()
}

func (s *CreateDmsBindingResponse) SetReqMsgId(v string) *CreateDmsBindingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDmsBindingResponse) SetResultCode(v string) *CreateDmsBindingResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDmsBindingResponse) SetResultMsg(v string) *CreateDmsBindingResponse {
	s.ResultMsg = &v
	return s
}

type ListDmsBindingRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// appname
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty"`
	// groupid
	Group *string `json:"group,omitempty" xml:"group,omitempty"`
	// current_page
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty"`
	// ins
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s ListDmsBindingRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDmsBindingRequest) GoString() string {
	return s.String()
}

func (s *ListDmsBindingRequest) SetAuthToken(v string) *ListDmsBindingRequest {
	s.AuthToken = &v
	return s
}

func (s *ListDmsBindingRequest) SetProductInstanceId(v string) *ListDmsBindingRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListDmsBindingRequest) SetAppName(v string) *ListDmsBindingRequest {
	s.AppName = &v
	return s
}

func (s *ListDmsBindingRequest) SetEventcode(v string) *ListDmsBindingRequest {
	s.Eventcode = &v
	return s
}

func (s *ListDmsBindingRequest) SetGroup(v string) *ListDmsBindingRequest {
	s.Group = &v
	return s
}

func (s *ListDmsBindingRequest) SetPageNum(v int64) *ListDmsBindingRequest {
	s.PageNum = &v
	return s
}

func (s *ListDmsBindingRequest) SetPageSize(v int64) *ListDmsBindingRequest {
	s.PageSize = &v
	return s
}

func (s *ListDmsBindingRequest) SetTopic(v string) *ListDmsBindingRequest {
	s.Topic = &v
	return s
}

func (s *ListDmsBindingRequest) SetInstanceId(v string) *ListDmsBindingRequest {
	s.InstanceId = &v
	return s
}

type ListDmsBindingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *BindingPageDO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListDmsBindingResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDmsBindingResponse) GoString() string {
	return s.String()
}

func (s *ListDmsBindingResponse) SetReqMsgId(v string) *ListDmsBindingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListDmsBindingResponse) SetResultCode(v string) *ListDmsBindingResponse {
	s.ResultCode = &v
	return s
}

func (s *ListDmsBindingResponse) SetResultMsg(v string) *ListDmsBindingResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListDmsBindingResponse) SetData(v *BindingPageDO) *ListDmsBindingResponse {
	s.Data = v
	return s
}

type DeleteDmsMsgtypeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s DeleteDmsMsgtypeRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDmsMsgtypeRequest) GoString() string {
	return s.String()
}

func (s *DeleteDmsMsgtypeRequest) SetAuthToken(v string) *DeleteDmsMsgtypeRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteDmsMsgtypeRequest) SetProductInstanceId(v string) *DeleteDmsMsgtypeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteDmsMsgtypeRequest) SetId(v string) *DeleteDmsMsgtypeRequest {
	s.Id = &v
	return s
}

func (s *DeleteDmsMsgtypeRequest) SetInstanceId(v string) *DeleteDmsMsgtypeRequest {
	s.InstanceId = &v
	return s
}

type DeleteDmsMsgtypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteDmsMsgtypeResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDmsMsgtypeResponse) GoString() string {
	return s.String()
}

func (s *DeleteDmsMsgtypeResponse) SetReqMsgId(v string) *DeleteDmsMsgtypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteDmsMsgtypeResponse) SetResultCode(v string) *DeleteDmsMsgtypeResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteDmsMsgtypeResponse) SetResultMsg(v string) *DeleteDmsMsgtypeResponse {
	s.ResultMsg = &v
	return s
}

type DeleteDmsBindingRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s DeleteDmsBindingRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDmsBindingRequest) GoString() string {
	return s.String()
}

func (s *DeleteDmsBindingRequest) SetAuthToken(v string) *DeleteDmsBindingRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteDmsBindingRequest) SetProductInstanceId(v string) *DeleteDmsBindingRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteDmsBindingRequest) SetId(v string) *DeleteDmsBindingRequest {
	s.Id = &v
	return s
}

func (s *DeleteDmsBindingRequest) SetInstanceId(v string) *DeleteDmsBindingRequest {
	s.InstanceId = &v
	return s
}

type DeleteDmsBindingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteDmsBindingResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDmsBindingResponse) GoString() string {
	return s.String()
}

func (s *DeleteDmsBindingResponse) SetReqMsgId(v string) *DeleteDmsBindingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteDmsBindingResponse) SetResultCode(v string) *DeleteDmsBindingResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteDmsBindingResponse) SetResultMsg(v string) *DeleteDmsBindingResponse {
	s.ResultMsg = &v
	return s
}

type UpdateDmsMsgtypeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// desc
	Desc *string `json:"desc,omitempty" xml:"desc,omitempty"`
}

func (s UpdateDmsMsgtypeRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDmsMsgtypeRequest) GoString() string {
	return s.String()
}

func (s *UpdateDmsMsgtypeRequest) SetAuthToken(v string) *UpdateDmsMsgtypeRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDmsMsgtypeRequest) SetProductInstanceId(v string) *UpdateDmsMsgtypeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateDmsMsgtypeRequest) SetId(v int64) *UpdateDmsMsgtypeRequest {
	s.Id = &v
	return s
}

func (s *UpdateDmsMsgtypeRequest) SetInstanceId(v string) *UpdateDmsMsgtypeRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateDmsMsgtypeRequest) SetEventcode(v string) *UpdateDmsMsgtypeRequest {
	s.Eventcode = &v
	return s
}

func (s *UpdateDmsMsgtypeRequest) SetDesc(v string) *UpdateDmsMsgtypeRequest {
	s.Desc = &v
	return s
}

type UpdateDmsMsgtypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateDmsMsgtypeResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDmsMsgtypeResponse) GoString() string {
	return s.String()
}

func (s *UpdateDmsMsgtypeResponse) SetReqMsgId(v string) *UpdateDmsMsgtypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDmsMsgtypeResponse) SetResultCode(v string) *UpdateDmsMsgtypeResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDmsMsgtypeResponse) SetResultMsg(v string) *UpdateDmsMsgtypeResponse {
	s.ResultMsg = &v
	return s
}

type UpdateDmsBindingRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// exchange_type
	ExchangeType *string `json:"exchange_type,omitempty" xml:"exchange_type,omitempty" require:"true"`
	// expression
	Expression *string `json:"expression,omitempty" xml:"expression,omitempty"`
	// persistence
	Persistence *bool `json:"persistence,omitempty" xml:"persistence,omitempty" require:"true"`
}

func (s UpdateDmsBindingRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDmsBindingRequest) GoString() string {
	return s.String()
}

func (s *UpdateDmsBindingRequest) SetAuthToken(v string) *UpdateDmsBindingRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDmsBindingRequest) SetProductInstanceId(v string) *UpdateDmsBindingRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateDmsBindingRequest) SetId(v string) *UpdateDmsBindingRequest {
	s.Id = &v
	return s
}

func (s *UpdateDmsBindingRequest) SetInstanceId(v string) *UpdateDmsBindingRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateDmsBindingRequest) SetEventcode(v string) *UpdateDmsBindingRequest {
	s.Eventcode = &v
	return s
}

func (s *UpdateDmsBindingRequest) SetExchangeType(v string) *UpdateDmsBindingRequest {
	s.ExchangeType = &v
	return s
}

func (s *UpdateDmsBindingRequest) SetExpression(v string) *UpdateDmsBindingRequest {
	s.Expression = &v
	return s
}

func (s *UpdateDmsBindingRequest) SetPersistence(v bool) *UpdateDmsBindingRequest {
	s.Persistence = &v
	return s
}

type UpdateDmsBindingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateDmsBindingResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDmsBindingResponse) GoString() string {
	return s.String()
}

func (s *UpdateDmsBindingResponse) SetReqMsgId(v string) *UpdateDmsBindingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDmsBindingResponse) SetResultCode(v string) *UpdateDmsBindingResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDmsBindingResponse) SetResultMsg(v string) *UpdateDmsBindingResponse {
	s.ResultMsg = &v
	return s
}

type QueryDmsMsgRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s QueryDmsMsgRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDmsMsgRequest) GoString() string {
	return s.String()
}

func (s *QueryDmsMsgRequest) SetAuthToken(v string) *QueryDmsMsgRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDmsMsgRequest) SetProductInstanceId(v string) *QueryDmsMsgRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDmsMsgRequest) SetId(v string) *QueryDmsMsgRequest {
	s.Id = &v
	return s
}

func (s *QueryDmsMsgRequest) SetInstanceId(v string) *QueryDmsMsgRequest {
	s.InstanceId = &v
	return s
}

type QueryDmsMsgResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *MsgQueryDO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryDmsMsgResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDmsMsgResponse) GoString() string {
	return s.String()
}

func (s *QueryDmsMsgResponse) SetReqMsgId(v string) *QueryDmsMsgResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDmsMsgResponse) SetResultCode(v string) *QueryDmsMsgResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDmsMsgResponse) SetResultMsg(v string) *QueryDmsMsgResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDmsMsgResponse) SetData(v *MsgQueryDO) *QueryDmsMsgResponse {
	s.Data = v
	return s
}

type BatchqueryDmsMsgRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// born_time_begin
	BornTimeBegin *string `json:"born_time_begin,omitempty" xml:"born_time_begin,omitempty" require:"true"`
	// born_time_end
	BornTimeEnd *string `json:"born_time_end,omitempty" xml:"born_time_end,omitempty" require:"true"`
	// current_page
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s BatchqueryDmsMsgRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryDmsMsgRequest) GoString() string {
	return s.String()
}

func (s *BatchqueryDmsMsgRequest) SetAuthToken(v string) *BatchqueryDmsMsgRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchqueryDmsMsgRequest) SetProductInstanceId(v string) *BatchqueryDmsMsgRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BatchqueryDmsMsgRequest) SetBornTimeBegin(v string) *BatchqueryDmsMsgRequest {
	s.BornTimeBegin = &v
	return s
}

func (s *BatchqueryDmsMsgRequest) SetBornTimeEnd(v string) *BatchqueryDmsMsgRequest {
	s.BornTimeEnd = &v
	return s
}

func (s *BatchqueryDmsMsgRequest) SetPageNum(v int64) *BatchqueryDmsMsgRequest {
	s.PageNum = &v
	return s
}

func (s *BatchqueryDmsMsgRequest) SetEventcode(v string) *BatchqueryDmsMsgRequest {
	s.Eventcode = &v
	return s
}

func (s *BatchqueryDmsMsgRequest) SetInstanceId(v string) *BatchqueryDmsMsgRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchqueryDmsMsgRequest) SetPageSize(v int64) *BatchqueryDmsMsgRequest {
	s.PageSize = &v
	return s
}

func (s *BatchqueryDmsMsgRequest) SetTopic(v string) *BatchqueryDmsMsgRequest {
	s.Topic = &v
	return s
}

type BatchqueryDmsMsgResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *MsgQueryPageDO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s BatchqueryDmsMsgResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchqueryDmsMsgResponse) GoString() string {
	return s.String()
}

func (s *BatchqueryDmsMsgResponse) SetReqMsgId(v string) *BatchqueryDmsMsgResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchqueryDmsMsgResponse) SetResultCode(v string) *BatchqueryDmsMsgResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchqueryDmsMsgResponse) SetResultMsg(v string) *BatchqueryDmsMsgResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchqueryDmsMsgResponse) SetData(v *MsgQueryPageDO) *BatchqueryDmsMsgResponse {
	s.Data = v
	return s
}

type DeleteDmsMsgRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s DeleteDmsMsgRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDmsMsgRequest) GoString() string {
	return s.String()
}

func (s *DeleteDmsMsgRequest) SetAuthToken(v string) *DeleteDmsMsgRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteDmsMsgRequest) SetProductInstanceId(v string) *DeleteDmsMsgRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteDmsMsgRequest) SetId(v string) *DeleteDmsMsgRequest {
	s.Id = &v
	return s
}

func (s *DeleteDmsMsgRequest) SetInstanceId(v string) *DeleteDmsMsgRequest {
	s.InstanceId = &v
	return s
}

type DeleteDmsMsgResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteDmsMsgResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDmsMsgResponse) GoString() string {
	return s.String()
}

func (s *DeleteDmsMsgResponse) SetReqMsgId(v string) *DeleteDmsMsgResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteDmsMsgResponse) SetResultCode(v string) *DeleteDmsMsgResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteDmsMsgResponse) SetResultMsg(v string) *DeleteDmsMsgResponse {
	s.ResultMsg = &v
	return s
}

type BatchdeleteDmsMsgRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s BatchdeleteDmsMsgRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteDmsMsgRequest) GoString() string {
	return s.String()
}

func (s *BatchdeleteDmsMsgRequest) SetAuthToken(v string) *BatchdeleteDmsMsgRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchdeleteDmsMsgRequest) SetProductInstanceId(v string) *BatchdeleteDmsMsgRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BatchdeleteDmsMsgRequest) SetId(v string) *BatchdeleteDmsMsgRequest {
	s.Id = &v
	return s
}

func (s *BatchdeleteDmsMsgRequest) SetInstanceId(v string) *BatchdeleteDmsMsgRequest {
	s.InstanceId = &v
	return s
}

type BatchdeleteDmsMsgResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BatchdeleteDmsMsgResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteDmsMsgResponse) GoString() string {
	return s.String()
}

func (s *BatchdeleteDmsMsgResponse) SetReqMsgId(v string) *BatchdeleteDmsMsgResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchdeleteDmsMsgResponse) SetResultCode(v string) *BatchdeleteDmsMsgResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchdeleteDmsMsgResponse) SetResultMsg(v string) *BatchdeleteDmsMsgResponse {
	s.ResultMsg = &v
	return s
}

type ExportDmsMsgtypeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// id列表，为空则表示导出当前instance_id全部数据
	Ids *string `json:"ids,omitempty" xml:"ids,omitempty"`
	// field
	Field *string `json:"field,omitempty" xml:"field,omitempty"`
	// order
	Order *string `json:"order,omitempty" xml:"order,omitempty"`
	// topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty"`
	// eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty"`
}

func (s ExportDmsMsgtypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportDmsMsgtypeRequest) GoString() string {
	return s.String()
}

func (s *ExportDmsMsgtypeRequest) SetAuthToken(v string) *ExportDmsMsgtypeRequest {
	s.AuthToken = &v
	return s
}

func (s *ExportDmsMsgtypeRequest) SetProductInstanceId(v string) *ExportDmsMsgtypeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExportDmsMsgtypeRequest) SetInstanceId(v string) *ExportDmsMsgtypeRequest {
	s.InstanceId = &v
	return s
}

func (s *ExportDmsMsgtypeRequest) SetIds(v string) *ExportDmsMsgtypeRequest {
	s.Ids = &v
	return s
}

func (s *ExportDmsMsgtypeRequest) SetField(v string) *ExportDmsMsgtypeRequest {
	s.Field = &v
	return s
}

func (s *ExportDmsMsgtypeRequest) SetOrder(v string) *ExportDmsMsgtypeRequest {
	s.Order = &v
	return s
}

func (s *ExportDmsMsgtypeRequest) SetTopic(v string) *ExportDmsMsgtypeRequest {
	s.Topic = &v
	return s
}

func (s *ExportDmsMsgtypeRequest) SetEventcode(v string) *ExportDmsMsgtypeRequest {
	s.Eventcode = &v
	return s
}

type ExportDmsMsgtypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回的导出结果具体数据
	MsgTypeList []*MsgTypeDTO `json:"msg_type_list,omitempty" xml:"msg_type_list,omitempty" type:"Repeated"`
}

func (s ExportDmsMsgtypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportDmsMsgtypeResponse) GoString() string {
	return s.String()
}

func (s *ExportDmsMsgtypeResponse) SetReqMsgId(v string) *ExportDmsMsgtypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExportDmsMsgtypeResponse) SetResultCode(v string) *ExportDmsMsgtypeResponse {
	s.ResultCode = &v
	return s
}

func (s *ExportDmsMsgtypeResponse) SetResultMsg(v string) *ExportDmsMsgtypeResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExportDmsMsgtypeResponse) SetMsgTypeList(v []*MsgTypeDTO) *ExportDmsMsgtypeResponse {
	s.MsgTypeList = v
	return s
}

type ImportDmsMsgtypeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 导入的excel文件转换成的具体json字符串内容
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s ImportDmsMsgtypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportDmsMsgtypeRequest) GoString() string {
	return s.String()
}

func (s *ImportDmsMsgtypeRequest) SetAuthToken(v string) *ImportDmsMsgtypeRequest {
	s.AuthToken = &v
	return s
}

func (s *ImportDmsMsgtypeRequest) SetProductInstanceId(v string) *ImportDmsMsgtypeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ImportDmsMsgtypeRequest) SetContent(v string) *ImportDmsMsgtypeRequest {
	s.Content = &v
	return s
}

func (s *ImportDmsMsgtypeRequest) SetInstanceId(v string) *ImportDmsMsgtypeRequest {
	s.InstanceId = &v
	return s
}

type ImportDmsMsgtypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 导入内容总条数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// 导入成功数量
	SuccessCount *int64 `json:"success_count,omitempty" xml:"success_count,omitempty"`
	// 已经存在的记录总数
	ExistRecords []*MsgTypeDTO `json:"exist_records,omitempty" xml:"exist_records,omitempty" type:"Repeated"`
	// 导入失败的记录详情
	ProcessErrorRecords []*MsgTypeDTO `json:"process_error_records,omitempty" xml:"process_error_records,omitempty" type:"Repeated"`
	// 格式错误的记录
	FormatErrorRecords []*MsgTypeDTO `json:"format_error_records,omitempty" xml:"format_error_records,omitempty" type:"Repeated"`
}

func (s ImportDmsMsgtypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportDmsMsgtypeResponse) GoString() string {
	return s.String()
}

func (s *ImportDmsMsgtypeResponse) SetReqMsgId(v string) *ImportDmsMsgtypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ImportDmsMsgtypeResponse) SetResultCode(v string) *ImportDmsMsgtypeResponse {
	s.ResultCode = &v
	return s
}

func (s *ImportDmsMsgtypeResponse) SetResultMsg(v string) *ImportDmsMsgtypeResponse {
	s.ResultMsg = &v
	return s
}

func (s *ImportDmsMsgtypeResponse) SetTotalCount(v int64) *ImportDmsMsgtypeResponse {
	s.TotalCount = &v
	return s
}

func (s *ImportDmsMsgtypeResponse) SetSuccessCount(v int64) *ImportDmsMsgtypeResponse {
	s.SuccessCount = &v
	return s
}

func (s *ImportDmsMsgtypeResponse) SetExistRecords(v []*MsgTypeDTO) *ImportDmsMsgtypeResponse {
	s.ExistRecords = v
	return s
}

func (s *ImportDmsMsgtypeResponse) SetProcessErrorRecords(v []*MsgTypeDTO) *ImportDmsMsgtypeResponse {
	s.ProcessErrorRecords = v
	return s
}

func (s *ImportDmsMsgtypeResponse) SetFormatErrorRecords(v []*MsgTypeDTO) *ImportDmsMsgtypeResponse {
	s.FormatErrorRecords = v
	return s
}

type ExportDmsBindingRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// ids
	Ids *string `json:"ids,omitempty" xml:"ids,omitempty"`
	// field
	Field *string `json:"field,omitempty" xml:"field,omitempty"`
	// order
	Order *string `json:"order,omitempty" xml:"order,omitempty"`
	// appname
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// groupid
	Group *string `json:"group,omitempty" xml:"group,omitempty"`
	// topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty"`
	// eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty"`
}

func (s ExportDmsBindingRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportDmsBindingRequest) GoString() string {
	return s.String()
}

func (s *ExportDmsBindingRequest) SetAuthToken(v string) *ExportDmsBindingRequest {
	s.AuthToken = &v
	return s
}

func (s *ExportDmsBindingRequest) SetProductInstanceId(v string) *ExportDmsBindingRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExportDmsBindingRequest) SetInstanceId(v string) *ExportDmsBindingRequest {
	s.InstanceId = &v
	return s
}

func (s *ExportDmsBindingRequest) SetIds(v string) *ExportDmsBindingRequest {
	s.Ids = &v
	return s
}

func (s *ExportDmsBindingRequest) SetField(v string) *ExportDmsBindingRequest {
	s.Field = &v
	return s
}

func (s *ExportDmsBindingRequest) SetOrder(v string) *ExportDmsBindingRequest {
	s.Order = &v
	return s
}

func (s *ExportDmsBindingRequest) SetAppName(v string) *ExportDmsBindingRequest {
	s.AppName = &v
	return s
}

func (s *ExportDmsBindingRequest) SetGroup(v string) *ExportDmsBindingRequest {
	s.Group = &v
	return s
}

func (s *ExportDmsBindingRequest) SetTopic(v string) *ExportDmsBindingRequest {
	s.Topic = &v
	return s
}

func (s *ExportDmsBindingRequest) SetEventcode(v string) *ExportDmsBindingRequest {
	s.Eventcode = &v
	return s
}

type ExportDmsBindingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 导出数据列表
	BindingList []*BindingDTO `json:"binding_list,omitempty" xml:"binding_list,omitempty" type:"Repeated"`
}

func (s ExportDmsBindingResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportDmsBindingResponse) GoString() string {
	return s.String()
}

func (s *ExportDmsBindingResponse) SetReqMsgId(v string) *ExportDmsBindingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExportDmsBindingResponse) SetResultCode(v string) *ExportDmsBindingResponse {
	s.ResultCode = &v
	return s
}

func (s *ExportDmsBindingResponse) SetResultMsg(v string) *ExportDmsBindingResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExportDmsBindingResponse) SetBindingList(v []*BindingDTO) *ExportDmsBindingResponse {
	s.BindingList = v
	return s
}

type ImportDmsBindingRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 导入的excel文件转换成的具体json字符串内容
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
}

func (s ImportDmsBindingRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportDmsBindingRequest) GoString() string {
	return s.String()
}

func (s *ImportDmsBindingRequest) SetAuthToken(v string) *ImportDmsBindingRequest {
	s.AuthToken = &v
	return s
}

func (s *ImportDmsBindingRequest) SetProductInstanceId(v string) *ImportDmsBindingRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ImportDmsBindingRequest) SetInstanceId(v string) *ImportDmsBindingRequest {
	s.InstanceId = &v
	return s
}

func (s *ImportDmsBindingRequest) SetContent(v string) *ImportDmsBindingRequest {
	s.Content = &v
	return s
}

type ImportDmsBindingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 导入总数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// 导入成功总数
	SuccessCount *int64 `json:"success_count,omitempty" xml:"success_count,omitempty"`
	// 格式化或者参数错误元素列表
	FormatErrorRecords []*BindingDTO `json:"format_error_records,omitempty" xml:"format_error_records,omitempty" type:"Repeated"`
	// 导入错误元素列表
	ProcessErrorRecords []*BindingDTO `json:"process_error_records,omitempty" xml:"process_error_records,omitempty" type:"Repeated"`
	// 已存在元素列表
	ExistRecords []*BindingDTO `json:"exist_records,omitempty" xml:"exist_records,omitempty" type:"Repeated"`
}

func (s ImportDmsBindingResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportDmsBindingResponse) GoString() string {
	return s.String()
}

func (s *ImportDmsBindingResponse) SetReqMsgId(v string) *ImportDmsBindingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ImportDmsBindingResponse) SetResultCode(v string) *ImportDmsBindingResponse {
	s.ResultCode = &v
	return s
}

func (s *ImportDmsBindingResponse) SetResultMsg(v string) *ImportDmsBindingResponse {
	s.ResultMsg = &v
	return s
}

func (s *ImportDmsBindingResponse) SetTotalCount(v int64) *ImportDmsBindingResponse {
	s.TotalCount = &v
	return s
}

func (s *ImportDmsBindingResponse) SetSuccessCount(v int64) *ImportDmsBindingResponse {
	s.SuccessCount = &v
	return s
}

func (s *ImportDmsBindingResponse) SetFormatErrorRecords(v []*BindingDTO) *ImportDmsBindingResponse {
	s.FormatErrorRecords = v
	return s
}

func (s *ImportDmsBindingResponse) SetProcessErrorRecords(v []*BindingDTO) *ImportDmsBindingResponse {
	s.ProcessErrorRecords = v
	return s
}

func (s *ImportDmsBindingResponse) SetExistRecords(v []*BindingDTO) *ImportDmsBindingResponse {
	s.ExistRecords = v
	return s
}

type ListDmsWhitelistRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// groupid
	Group *string `json:"group,omitempty" xml:"group,omitempty"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// page_num
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty"`
}

func (s ListDmsWhitelistRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDmsWhitelistRequest) GoString() string {
	return s.String()
}

func (s *ListDmsWhitelistRequest) SetAuthToken(v string) *ListDmsWhitelistRequest {
	s.AuthToken = &v
	return s
}

func (s *ListDmsWhitelistRequest) SetProductInstanceId(v string) *ListDmsWhitelistRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListDmsWhitelistRequest) SetGroup(v string) *ListDmsWhitelistRequest {
	s.Group = &v
	return s
}

func (s *ListDmsWhitelistRequest) SetInstanceId(v string) *ListDmsWhitelistRequest {
	s.InstanceId = &v
	return s
}

func (s *ListDmsWhitelistRequest) SetPageNum(v int64) *ListDmsWhitelistRequest {
	s.PageNum = &v
	return s
}

func (s *ListDmsWhitelistRequest) SetPageSize(v int64) *ListDmsWhitelistRequest {
	s.PageSize = &v
	return s
}

func (s *ListDmsWhitelistRequest) SetTopic(v string) *ListDmsWhitelistRequest {
	s.Topic = &v
	return s
}

type ListDmsWhitelistResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *WhitelistPageDO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListDmsWhitelistResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDmsWhitelistResponse) GoString() string {
	return s.String()
}

func (s *ListDmsWhitelistResponse) SetReqMsgId(v string) *ListDmsWhitelistResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListDmsWhitelistResponse) SetResultCode(v string) *ListDmsWhitelistResponse {
	s.ResultCode = &v
	return s
}

func (s *ListDmsWhitelistResponse) SetResultMsg(v string) *ListDmsWhitelistResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListDmsWhitelistResponse) SetData(v *WhitelistPageDO) *ListDmsWhitelistResponse {
	s.Data = v
	return s
}

type AddDmsWhitelistRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// groupid
	Group *string `json:"group,omitempty" xml:"group,omitempty" require:"true"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s AddDmsWhitelistRequest) String() string {
	return tea.Prettify(s)
}

func (s AddDmsWhitelistRequest) GoString() string {
	return s.String()
}

func (s *AddDmsWhitelistRequest) SetAuthToken(v string) *AddDmsWhitelistRequest {
	s.AuthToken = &v
	return s
}

func (s *AddDmsWhitelistRequest) SetProductInstanceId(v string) *AddDmsWhitelistRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AddDmsWhitelistRequest) SetGroup(v string) *AddDmsWhitelistRequest {
	s.Group = &v
	return s
}

func (s *AddDmsWhitelistRequest) SetInstanceId(v string) *AddDmsWhitelistRequest {
	s.InstanceId = &v
	return s
}

func (s *AddDmsWhitelistRequest) SetTopic(v string) *AddDmsWhitelistRequest {
	s.Topic = &v
	return s
}

type AddDmsWhitelistResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s AddDmsWhitelistResponse) String() string {
	return tea.Prettify(s)
}

func (s AddDmsWhitelistResponse) GoString() string {
	return s.String()
}

func (s *AddDmsWhitelistResponse) SetReqMsgId(v string) *AddDmsWhitelistResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddDmsWhitelistResponse) SetResultCode(v string) *AddDmsWhitelistResponse {
	s.ResultCode = &v
	return s
}

func (s *AddDmsWhitelistResponse) SetResultMsg(v string) *AddDmsWhitelistResponse {
	s.ResultMsg = &v
	return s
}

type DeleteDmsWhitelistRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s DeleteDmsWhitelistRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDmsWhitelistRequest) GoString() string {
	return s.String()
}

func (s *DeleteDmsWhitelistRequest) SetAuthToken(v string) *DeleteDmsWhitelistRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteDmsWhitelistRequest) SetProductInstanceId(v string) *DeleteDmsWhitelistRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteDmsWhitelistRequest) SetInstanceId(v string) *DeleteDmsWhitelistRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteDmsWhitelistRequest) SetId(v int64) *DeleteDmsWhitelistRequest {
	s.Id = &v
	return s
}

type DeleteDmsWhitelistResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteDmsWhitelistResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDmsWhitelistResponse) GoString() string {
	return s.String()
}

func (s *DeleteDmsWhitelistResponse) SetReqMsgId(v string) *DeleteDmsWhitelistResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteDmsWhitelistResponse) SetResultCode(v string) *DeleteDmsWhitelistResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteDmsWhitelistResponse) SetResultMsg(v string) *DeleteDmsWhitelistResponse {
	s.ResultMsg = &v
	return s
}

type GetDmsTopicsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ins
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// group
	Group *string `json:"group,omitempty" xml:"group,omitempty" require:"true"`
}

func (s GetDmsTopicsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDmsTopicsRequest) GoString() string {
	return s.String()
}

func (s *GetDmsTopicsRequest) SetAuthToken(v string) *GetDmsTopicsRequest {
	s.AuthToken = &v
	return s
}

func (s *GetDmsTopicsRequest) SetProductInstanceId(v string) *GetDmsTopicsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetDmsTopicsRequest) SetInstanceId(v string) *GetDmsTopicsRequest {
	s.InstanceId = &v
	return s
}

func (s *GetDmsTopicsRequest) SetGroup(v string) *GetDmsTopicsRequest {
	s.Group = &v
	return s
}

type GetDmsTopicsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s GetDmsTopicsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDmsTopicsResponse) GoString() string {
	return s.String()
}

func (s *GetDmsTopicsResponse) SetReqMsgId(v string) *GetDmsTopicsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetDmsTopicsResponse) SetResultCode(v string) *GetDmsTopicsResponse {
	s.ResultCode = &v
	return s
}

func (s *GetDmsTopicsResponse) SetResultMsg(v string) *GetDmsTopicsResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetDmsTopicsResponse) SetData(v []*string) *GetDmsTopicsResponse {
	s.Data = v
	return s
}

type GetSofamqConsumerjstackRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需要查询的单元
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty" require:"true"`
	// 需要查询的消费端 Client ID
	ClientId *string `json:"client_id,omitempty" xml:"client_id,omitempty" require:"true"`
	// 需要查询的消费端的 Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 需要查询的消费者对应的实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s GetSofamqConsumerjstackRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSofamqConsumerjstackRequest) GoString() string {
	return s.String()
}

func (s *GetSofamqConsumerjstackRequest) SetAuthToken(v string) *GetSofamqConsumerjstackRequest {
	s.AuthToken = &v
	return s
}

func (s *GetSofamqConsumerjstackRequest) SetProductInstanceId(v string) *GetSofamqConsumerjstackRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetSofamqConsumerjstackRequest) SetCell(v string) *GetSofamqConsumerjstackRequest {
	s.Cell = &v
	return s
}

func (s *GetSofamqConsumerjstackRequest) SetClientId(v string) *GetSofamqConsumerjstackRequest {
	s.ClientId = &v
	return s
}

func (s *GetSofamqConsumerjstackRequest) SetGroupId(v string) *GetSofamqConsumerjstackRequest {
	s.GroupId = &v
	return s
}

func (s *GetSofamqConsumerjstackRequest) SetInstanceId(v string) *GetSofamqConsumerjstackRequest {
	s.InstanceId = &v
	return s
}

type GetSofamqConsumerjstackResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 消费端 Jstack 堆栈信息
	Data *ConsumerJstackDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetSofamqConsumerjstackResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSofamqConsumerjstackResponse) GoString() string {
	return s.String()
}

func (s *GetSofamqConsumerjstackResponse) SetReqMsgId(v string) *GetSofamqConsumerjstackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetSofamqConsumerjstackResponse) SetResultCode(v string) *GetSofamqConsumerjstackResponse {
	s.ResultCode = &v
	return s
}

func (s *GetSofamqConsumerjstackResponse) SetResultMsg(v string) *GetSofamqConsumerjstackResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetSofamqConsumerjstackResponse) SetData(v *ConsumerJstackDTO) *GetSofamqConsumerjstackResponse {
	s.Data = v
	return s
}

type QueryDmsUploadurlRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// file_name
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty" require:"true"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// type
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s QueryDmsUploadurlRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDmsUploadurlRequest) GoString() string {
	return s.String()
}

func (s *QueryDmsUploadurlRequest) SetAuthToken(v string) *QueryDmsUploadurlRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDmsUploadurlRequest) SetProductInstanceId(v string) *QueryDmsUploadurlRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDmsUploadurlRequest) SetFileName(v string) *QueryDmsUploadurlRequest {
	s.FileName = &v
	return s
}

func (s *QueryDmsUploadurlRequest) SetInstanceId(v string) *QueryDmsUploadurlRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryDmsUploadurlRequest) SetType(v string) *QueryDmsUploadurlRequest {
	s.Type = &v
	return s
}

type QueryDmsUploadurlResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryDmsUploadurlResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDmsUploadurlResponse) GoString() string {
	return s.String()
}

func (s *QueryDmsUploadurlResponse) SetReqMsgId(v string) *QueryDmsUploadurlResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDmsUploadurlResponse) SetResultCode(v string) *QueryDmsUploadurlResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDmsUploadurlResponse) SetResultMsg(v string) *QueryDmsUploadurlResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDmsUploadurlResponse) SetData(v string) *QueryDmsUploadurlResponse {
	s.Data = &v
	return s
}

type GetDmsMsgtypetemplateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s GetDmsMsgtypetemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDmsMsgtypetemplateRequest) GoString() string {
	return s.String()
}

func (s *GetDmsMsgtypetemplateRequest) SetAuthToken(v string) *GetDmsMsgtypetemplateRequest {
	s.AuthToken = &v
	return s
}

func (s *GetDmsMsgtypetemplateRequest) SetProductInstanceId(v string) *GetDmsMsgtypetemplateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetDmsMsgtypetemplateRequest) SetInstanceId(v string) *GetDmsMsgtypetemplateRequest {
	s.InstanceId = &v
	return s
}

type GetDmsMsgtypetemplateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetDmsMsgtypetemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDmsMsgtypetemplateResponse) GoString() string {
	return s.String()
}

func (s *GetDmsMsgtypetemplateResponse) SetReqMsgId(v string) *GetDmsMsgtypetemplateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetDmsMsgtypetemplateResponse) SetResultCode(v string) *GetDmsMsgtypetemplateResponse {
	s.ResultCode = &v
	return s
}

func (s *GetDmsMsgtypetemplateResponse) SetResultMsg(v string) *GetDmsMsgtypetemplateResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetDmsMsgtypetemplateResponse) SetData(v string) *GetDmsMsgtypetemplateResponse {
	s.Data = &v
	return s
}

type GetDmsBindingtemplateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ins
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s GetDmsBindingtemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDmsBindingtemplateRequest) GoString() string {
	return s.String()
}

func (s *GetDmsBindingtemplateRequest) SetAuthToken(v string) *GetDmsBindingtemplateRequest {
	s.AuthToken = &v
	return s
}

func (s *GetDmsBindingtemplateRequest) SetProductInstanceId(v string) *GetDmsBindingtemplateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetDmsBindingtemplateRequest) SetInstanceId(v string) *GetDmsBindingtemplateRequest {
	s.InstanceId = &v
	return s
}

type GetDmsBindingtemplateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetDmsBindingtemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDmsBindingtemplateResponse) GoString() string {
	return s.String()
}

func (s *GetDmsBindingtemplateResponse) SetReqMsgId(v string) *GetDmsBindingtemplateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetDmsBindingtemplateResponse) SetResultCode(v string) *GetDmsBindingtemplateResponse {
	s.ResultCode = &v
	return s
}

func (s *GetDmsBindingtemplateResponse) SetResultMsg(v string) *GetDmsBindingtemplateResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetDmsBindingtemplateResponse) SetData(v string) *GetDmsBindingtemplateResponse {
	s.Data = &v
	return s
}

type QueryMsgdumpSourceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 当前 instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s QueryMsgdumpSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMsgdumpSourceRequest) GoString() string {
	return s.String()
}

func (s *QueryMsgdumpSourceRequest) SetAuthToken(v string) *QueryMsgdumpSourceRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMsgdumpSourceRequest) SetProductInstanceId(v string) *QueryMsgdumpSourceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMsgdumpSourceRequest) SetInstanceId(v string) *QueryMsgdumpSourceRequest {
	s.InstanceId = &v
	return s
}

type QueryMsgdumpSourceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 消息同步源端信息
	Data []*MsgdumpSourceInfo `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryMsgdumpSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMsgdumpSourceResponse) GoString() string {
	return s.String()
}

func (s *QueryMsgdumpSourceResponse) SetReqMsgId(v string) *QueryMsgdumpSourceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMsgdumpSourceResponse) SetResultCode(v string) *QueryMsgdumpSourceResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMsgdumpSourceResponse) SetResultMsg(v string) *QueryMsgdumpSourceResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMsgdumpSourceResponse) SetData(v []*MsgdumpSourceInfo) *QueryMsgdumpSourceResponse {
	s.Data = v
	return s
}

type CreateMsgdumpTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// cell
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty" require:"true"`
	// 对消息同步任务的描述
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty" require:"true"`
	// 源端 event code
	SourceEventCode *string `json:"source_event_code,omitempty" xml:"source_event_code,omitempty" require:"true"`
	// 源端实例 id
	SourceInstanceId *string `json:"source_instance_id,omitempty" xml:"source_instance_id,omitempty" require:"true"`
	// 源端 topic
	SourceTopic *string `json:"source_topic,omitempty" xml:"source_topic,omitempty" require:"true"`
	// 目标 tag
	TargetTag *string `json:"target_tag,omitempty" xml:"target_tag,omitempty" require:"true"`
	// 目标 topic
	TargetTopic *string `json:"target_topic,omitempty" xml:"target_topic,omitempty" require:"true"`
	// 目标 instance id
	TargetInstanceId *string `json:"target_instance_id,omitempty" xml:"target_instance_id,omitempty" require:"true"`
}

func (s CreateMsgdumpTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMsgdumpTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateMsgdumpTaskRequest) SetAuthToken(v string) *CreateMsgdumpTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateMsgdumpTaskRequest) SetProductInstanceId(v string) *CreateMsgdumpTaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateMsgdumpTaskRequest) SetCell(v string) *CreateMsgdumpTaskRequest {
	s.Cell = &v
	return s
}

func (s *CreateMsgdumpTaskRequest) SetRemark(v string) *CreateMsgdumpTaskRequest {
	s.Remark = &v
	return s
}

func (s *CreateMsgdumpTaskRequest) SetSourceEventCode(v string) *CreateMsgdumpTaskRequest {
	s.SourceEventCode = &v
	return s
}

func (s *CreateMsgdumpTaskRequest) SetSourceInstanceId(v string) *CreateMsgdumpTaskRequest {
	s.SourceInstanceId = &v
	return s
}

func (s *CreateMsgdumpTaskRequest) SetSourceTopic(v string) *CreateMsgdumpTaskRequest {
	s.SourceTopic = &v
	return s
}

func (s *CreateMsgdumpTaskRequest) SetTargetTag(v string) *CreateMsgdumpTaskRequest {
	s.TargetTag = &v
	return s
}

func (s *CreateMsgdumpTaskRequest) SetTargetTopic(v string) *CreateMsgdumpTaskRequest {
	s.TargetTopic = &v
	return s
}

func (s *CreateMsgdumpTaskRequest) SetTargetInstanceId(v string) *CreateMsgdumpTaskRequest {
	s.TargetInstanceId = &v
	return s
}

type CreateMsgdumpTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateMsgdumpTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMsgdumpTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateMsgdumpTaskResponse) SetReqMsgId(v string) *CreateMsgdumpTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateMsgdumpTaskResponse) SetResultCode(v string) *CreateMsgdumpTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateMsgdumpTaskResponse) SetResultMsg(v string) *CreateMsgdumpTaskResponse {
	s.ResultMsg = &v
	return s
}

type QueryMsgdumpTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 源 event code
	SourceEventCode *string `json:"source_event_code,omitempty" xml:"source_event_code,omitempty"`
	// 源实例 id
	SourceInstanceId *string `json:"source_instance_id,omitempty" xml:"source_instance_id,omitempty"`
	// 源 topic
	SourceTopic *string `json:"source_topic,omitempty" xml:"source_topic,omitempty"`
	// 任务状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 目标 instance id
	TargetInstanceId *string `json:"target_instance_id,omitempty" xml:"target_instance_id,omitempty"`
	// 目标 tag
	TargetTag *string `json:"target_tag,omitempty" xml:"target_tag,omitempty"`
	// 目标 topic
	TargetTopic *string `json:"target_topic,omitempty" xml:"target_topic,omitempty"`
}

func (s QueryMsgdumpTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMsgdumpTaskRequest) GoString() string {
	return s.String()
}

func (s *QueryMsgdumpTaskRequest) SetAuthToken(v string) *QueryMsgdumpTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMsgdumpTaskRequest) SetProductInstanceId(v string) *QueryMsgdumpTaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMsgdumpTaskRequest) SetSourceEventCode(v string) *QueryMsgdumpTaskRequest {
	s.SourceEventCode = &v
	return s
}

func (s *QueryMsgdumpTaskRequest) SetSourceInstanceId(v string) *QueryMsgdumpTaskRequest {
	s.SourceInstanceId = &v
	return s
}

func (s *QueryMsgdumpTaskRequest) SetSourceTopic(v string) *QueryMsgdumpTaskRequest {
	s.SourceTopic = &v
	return s
}

func (s *QueryMsgdumpTaskRequest) SetStatus(v int64) *QueryMsgdumpTaskRequest {
	s.Status = &v
	return s
}

func (s *QueryMsgdumpTaskRequest) SetTargetInstanceId(v string) *QueryMsgdumpTaskRequest {
	s.TargetInstanceId = &v
	return s
}

func (s *QueryMsgdumpTaskRequest) SetTargetTag(v string) *QueryMsgdumpTaskRequest {
	s.TargetTag = &v
	return s
}

func (s *QueryMsgdumpTaskRequest) SetTargetTopic(v string) *QueryMsgdumpTaskRequest {
	s.TargetTopic = &v
	return s
}

type QueryMsgdumpTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 任务列表
	Data []*MsgdumpTaskDTO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryMsgdumpTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMsgdumpTaskResponse) GoString() string {
	return s.String()
}

func (s *QueryMsgdumpTaskResponse) SetReqMsgId(v string) *QueryMsgdumpTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMsgdumpTaskResponse) SetResultCode(v string) *QueryMsgdumpTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMsgdumpTaskResponse) SetResultMsg(v string) *QueryMsgdumpTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMsgdumpTaskResponse) SetData(v []*MsgdumpTaskDTO) *QueryMsgdumpTaskResponse {
	s.Data = v
	return s
}

type DeleteMsgdumpTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务 id
	TaskId *int64 `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true"`
}

func (s DeleteMsgdumpTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMsgdumpTaskRequest) GoString() string {
	return s.String()
}

func (s *DeleteMsgdumpTaskRequest) SetAuthToken(v string) *DeleteMsgdumpTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteMsgdumpTaskRequest) SetProductInstanceId(v string) *DeleteMsgdumpTaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteMsgdumpTaskRequest) SetTaskId(v int64) *DeleteMsgdumpTaskRequest {
	s.TaskId = &v
	return s
}

type DeleteMsgdumpTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteMsgdumpTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMsgdumpTaskResponse) GoString() string {
	return s.String()
}

func (s *DeleteMsgdumpTaskResponse) SetReqMsgId(v string) *DeleteMsgdumpTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteMsgdumpTaskResponse) SetResultCode(v string) *DeleteMsgdumpTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteMsgdumpTaskResponse) SetResultMsg(v string) *DeleteMsgdumpTaskResponse {
	s.ResultMsg = &v
	return s
}

type EnableMsgdumpTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务 id
	TaskId *int64 `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true"`
	// true: 启动任务
	// false: 停止任务
	Enable *bool `json:"enable,omitempty" xml:"enable,omitempty" require:"true"`
}

func (s EnableMsgdumpTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableMsgdumpTaskRequest) GoString() string {
	return s.String()
}

func (s *EnableMsgdumpTaskRequest) SetAuthToken(v string) *EnableMsgdumpTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *EnableMsgdumpTaskRequest) SetProductInstanceId(v string) *EnableMsgdumpTaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *EnableMsgdumpTaskRequest) SetTaskId(v int64) *EnableMsgdumpTaskRequest {
	s.TaskId = &v
	return s
}

func (s *EnableMsgdumpTaskRequest) SetEnable(v bool) *EnableMsgdumpTaskRequest {
	s.Enable = &v
	return s
}

type EnableMsgdumpTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s EnableMsgdumpTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableMsgdumpTaskResponse) GoString() string {
	return s.String()
}

func (s *EnableMsgdumpTaskResponse) SetReqMsgId(v string) *EnableMsgdumpTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *EnableMsgdumpTaskResponse) SetResultCode(v string) *EnableMsgdumpTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *EnableMsgdumpTaskResponse) SetResultMsg(v string) *EnableMsgdumpTaskResponse {
	s.ResultMsg = &v
	return s
}

type ListSchemaAdminmetadataRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// SOFAMQ的实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 页号
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// schema的租户信息
	SchemaTenant *string `json:"schema_tenant,omitempty" xml:"schema_tenant,omitempty"`
	// schema的命名空间
	SchemaNamespace *string `json:"schema_namespace,omitempty" xml:"schema_namespace,omitempty"`
}

func (s ListSchemaAdminmetadataRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSchemaAdminmetadataRequest) GoString() string {
	return s.String()
}

func (s *ListSchemaAdminmetadataRequest) SetAuthToken(v string) *ListSchemaAdminmetadataRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSchemaAdminmetadataRequest) SetProductInstanceId(v string) *ListSchemaAdminmetadataRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListSchemaAdminmetadataRequest) SetInstanceId(v string) *ListSchemaAdminmetadataRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSchemaAdminmetadataRequest) SetName(v string) *ListSchemaAdminmetadataRequest {
	s.Name = &v
	return s
}

func (s *ListSchemaAdminmetadataRequest) SetPageNum(v int64) *ListSchemaAdminmetadataRequest {
	s.PageNum = &v
	return s
}

func (s *ListSchemaAdminmetadataRequest) SetPageSize(v int64) *ListSchemaAdminmetadataRequest {
	s.PageSize = &v
	return s
}

func (s *ListSchemaAdminmetadataRequest) SetSchemaTenant(v string) *ListSchemaAdminmetadataRequest {
	s.SchemaTenant = &v
	return s
}

func (s *ListSchemaAdminmetadataRequest) SetSchemaNamespace(v string) *ListSchemaAdminmetadataRequest {
	s.SchemaNamespace = &v
	return s
}

type ListSchemaAdminmetadataResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 数据
	Data *SchemaMetadataPageDO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListSchemaAdminmetadataResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSchemaAdminmetadataResponse) GoString() string {
	return s.String()
}

func (s *ListSchemaAdminmetadataResponse) SetReqMsgId(v string) *ListSchemaAdminmetadataResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSchemaAdminmetadataResponse) SetResultCode(v string) *ListSchemaAdminmetadataResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSchemaAdminmetadataResponse) SetResultMsg(v string) *ListSchemaAdminmetadataResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSchemaAdminmetadataResponse) SetData(v *SchemaMetadataPageDO) *ListSchemaAdminmetadataResponse {
	s.Data = v
	return s
}

type CreateSchemaAdminmetadataRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// SOFAMQ实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 应用名称
	App *string `json:"app,omitempty" xml:"app,omitempty" require:"true"`
	// 兼容性策略
	Compatibility *string `json:"compatibility,omitempty" xml:"compatibility,omitempty" require:"true"`
	// 描述
	//
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
	// 租户
	SchemaTenant *string `json:"schema_tenant,omitempty" xml:"schema_tenant,omitempty"`
}

func (s CreateSchemaAdminmetadataRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSchemaAdminmetadataRequest) GoString() string {
	return s.String()
}

func (s *CreateSchemaAdminmetadataRequest) SetAuthToken(v string) *CreateSchemaAdminmetadataRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSchemaAdminmetadataRequest) SetProductInstanceId(v string) *CreateSchemaAdminmetadataRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSchemaAdminmetadataRequest) SetInstanceId(v string) *CreateSchemaAdminmetadataRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateSchemaAdminmetadataRequest) SetApp(v string) *CreateSchemaAdminmetadataRequest {
	s.App = &v
	return s
}

func (s *CreateSchemaAdminmetadataRequest) SetCompatibility(v string) *CreateSchemaAdminmetadataRequest {
	s.Compatibility = &v
	return s
}

func (s *CreateSchemaAdminmetadataRequest) SetDescription(v string) *CreateSchemaAdminmetadataRequest {
	s.Description = &v
	return s
}

func (s *CreateSchemaAdminmetadataRequest) SetName(v string) *CreateSchemaAdminmetadataRequest {
	s.Name = &v
	return s
}

func (s *CreateSchemaAdminmetadataRequest) SetNamespace(v string) *CreateSchemaAdminmetadataRequest {
	s.Namespace = &v
	return s
}

func (s *CreateSchemaAdminmetadataRequest) SetSchemaTenant(v string) *CreateSchemaAdminmetadataRequest {
	s.SchemaTenant = &v
	return s
}

type CreateSchemaAdminmetadataResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateSchemaAdminmetadataResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSchemaAdminmetadataResponse) GoString() string {
	return s.String()
}

func (s *CreateSchemaAdminmetadataResponse) SetReqMsgId(v string) *CreateSchemaAdminmetadataResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSchemaAdminmetadataResponse) SetResultCode(v string) *CreateSchemaAdminmetadataResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSchemaAdminmetadataResponse) SetResultMsg(v string) *CreateSchemaAdminmetadataResponse {
	s.ResultMsg = &v
	return s
}

type UpdateSchemaAdminmetadataRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// SOFAMQ实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 应用名
	App *string `json:"app,omitempty" xml:"app,omitempty"`
	// 兼容性
	Compatibility *string `json:"compatibility,omitempty" xml:"compatibility,omitempty"`
	// 依赖坐标
	Coordinate *string `json:"coordinate,omitempty" xml:"coordinate,omitempty"`
	// 描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
	// 租户
	SchemaTenant *string `json:"schema_tenant,omitempty" xml:"schema_tenant,omitempty"`
	// 状态
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// 同步站点
	SyncSites *string `json:"sync_sites,omitempty" xml:"sync_sites,omitempty"`
}

func (s UpdateSchemaAdminmetadataRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSchemaAdminmetadataRequest) GoString() string {
	return s.String()
}

func (s *UpdateSchemaAdminmetadataRequest) SetAuthToken(v string) *UpdateSchemaAdminmetadataRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSchemaAdminmetadataRequest) SetProductInstanceId(v string) *UpdateSchemaAdminmetadataRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateSchemaAdminmetadataRequest) SetInstanceId(v string) *UpdateSchemaAdminmetadataRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateSchemaAdminmetadataRequest) SetApp(v string) *UpdateSchemaAdminmetadataRequest {
	s.App = &v
	return s
}

func (s *UpdateSchemaAdminmetadataRequest) SetCompatibility(v string) *UpdateSchemaAdminmetadataRequest {
	s.Compatibility = &v
	return s
}

func (s *UpdateSchemaAdminmetadataRequest) SetCoordinate(v string) *UpdateSchemaAdminmetadataRequest {
	s.Coordinate = &v
	return s
}

func (s *UpdateSchemaAdminmetadataRequest) SetDescription(v string) *UpdateSchemaAdminmetadataRequest {
	s.Description = &v
	return s
}

func (s *UpdateSchemaAdminmetadataRequest) SetName(v string) *UpdateSchemaAdminmetadataRequest {
	s.Name = &v
	return s
}

func (s *UpdateSchemaAdminmetadataRequest) SetNamespace(v string) *UpdateSchemaAdminmetadataRequest {
	s.Namespace = &v
	return s
}

func (s *UpdateSchemaAdminmetadataRequest) SetSchemaTenant(v string) *UpdateSchemaAdminmetadataRequest {
	s.SchemaTenant = &v
	return s
}

func (s *UpdateSchemaAdminmetadataRequest) SetState(v string) *UpdateSchemaAdminmetadataRequest {
	s.State = &v
	return s
}

func (s *UpdateSchemaAdminmetadataRequest) SetSyncSites(v string) *UpdateSchemaAdminmetadataRequest {
	s.SyncSites = &v
	return s
}

type UpdateSchemaAdminmetadataResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSchemaAdminmetadataResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSchemaAdminmetadataResponse) GoString() string {
	return s.String()
}

func (s *UpdateSchemaAdminmetadataResponse) SetReqMsgId(v string) *UpdateSchemaAdminmetadataResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSchemaAdminmetadataResponse) SetResultCode(v string) *UpdateSchemaAdminmetadataResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSchemaAdminmetadataResponse) SetResultMsg(v string) *UpdateSchemaAdminmetadataResponse {
	s.ResultMsg = &v
	return s
}

type DeleteSchemaAdminmetadataRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// SOFAMQ的实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
	// 租户
	SchemaTenant *string `json:"schema_tenant,omitempty" xml:"schema_tenant,omitempty"`
}

func (s DeleteSchemaAdminmetadataRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSchemaAdminmetadataRequest) GoString() string {
	return s.String()
}

func (s *DeleteSchemaAdminmetadataRequest) SetAuthToken(v string) *DeleteSchemaAdminmetadataRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSchemaAdminmetadataRequest) SetProductInstanceId(v string) *DeleteSchemaAdminmetadataRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteSchemaAdminmetadataRequest) SetInstanceId(v string) *DeleteSchemaAdminmetadataRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteSchemaAdminmetadataRequest) SetName(v string) *DeleteSchemaAdminmetadataRequest {
	s.Name = &v
	return s
}

func (s *DeleteSchemaAdminmetadataRequest) SetNamespace(v string) *DeleteSchemaAdminmetadataRequest {
	s.Namespace = &v
	return s
}

func (s *DeleteSchemaAdminmetadataRequest) SetSchemaTenant(v string) *DeleteSchemaAdminmetadataRequest {
	s.SchemaTenant = &v
	return s
}

type DeleteSchemaAdminmetadataResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSchemaAdminmetadataResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSchemaAdminmetadataResponse) GoString() string {
	return s.String()
}

func (s *DeleteSchemaAdminmetadataResponse) SetReqMsgId(v string) *DeleteSchemaAdminmetadataResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSchemaAdminmetadataResponse) SetResultCode(v string) *DeleteSchemaAdminmetadataResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSchemaAdminmetadataResponse) SetResultMsg(v string) *DeleteSchemaAdminmetadataResponse {
	s.ResultMsg = &v
	return s
}

type ListSchemaAdmindetailRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// SOFAMQ的实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// schema 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 页面编号
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
}

func (s ListSchemaAdmindetailRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSchemaAdmindetailRequest) GoString() string {
	return s.String()
}

func (s *ListSchemaAdmindetailRequest) SetAuthToken(v string) *ListSchemaAdmindetailRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSchemaAdmindetailRequest) SetProductInstanceId(v string) *ListSchemaAdmindetailRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListSchemaAdmindetailRequest) SetInstanceId(v string) *ListSchemaAdmindetailRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSchemaAdmindetailRequest) SetName(v string) *ListSchemaAdmindetailRequest {
	s.Name = &v
	return s
}

func (s *ListSchemaAdmindetailRequest) SetPageNum(v int64) *ListSchemaAdmindetailRequest {
	s.PageNum = &v
	return s
}

func (s *ListSchemaAdmindetailRequest) SetPageSize(v int64) *ListSchemaAdmindetailRequest {
	s.PageSize = &v
	return s
}

type ListSchemaAdmindetailResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 分页返回值
	Data *SchemaDetailPageDO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListSchemaAdmindetailResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSchemaAdmindetailResponse) GoString() string {
	return s.String()
}

func (s *ListSchemaAdmindetailResponse) SetReqMsgId(v string) *ListSchemaAdmindetailResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSchemaAdmindetailResponse) SetResultCode(v string) *ListSchemaAdmindetailResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSchemaAdmindetailResponse) SetResultMsg(v string) *ListSchemaAdmindetailResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSchemaAdmindetailResponse) SetData(v *SchemaDetailPageDO) *ListSchemaAdmindetailResponse {
	s.Data = v
	return s
}

type CreateSchemaAdmindetailRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// SOFAMQ的实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 内容
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
	// 值校验
	FieldValidateRule *string `json:"field_validate_rule,omitempty" xml:"field_validate_rule,omitempty"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
	// 租户
	SchemaTenant *string `json:"schema_tenant,omitempty" xml:"schema_tenant,omitempty"`
	// 序列化方式
	Serialization *string `json:"serialization,omitempty" xml:"serialization,omitempty" require:"true"`
	// 类型
	SchemaType *string `json:"schema_type,omitempty" xml:"schema_type,omitempty" require:"true"`
}

func (s CreateSchemaAdmindetailRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSchemaAdmindetailRequest) GoString() string {
	return s.String()
}

func (s *CreateSchemaAdmindetailRequest) SetAuthToken(v string) *CreateSchemaAdmindetailRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSchemaAdmindetailRequest) SetProductInstanceId(v string) *CreateSchemaAdmindetailRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSchemaAdmindetailRequest) SetInstanceId(v string) *CreateSchemaAdmindetailRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateSchemaAdmindetailRequest) SetContent(v string) *CreateSchemaAdmindetailRequest {
	s.Content = &v
	return s
}

func (s *CreateSchemaAdmindetailRequest) SetFieldValidateRule(v string) *CreateSchemaAdmindetailRequest {
	s.FieldValidateRule = &v
	return s
}

func (s *CreateSchemaAdmindetailRequest) SetName(v string) *CreateSchemaAdmindetailRequest {
	s.Name = &v
	return s
}

func (s *CreateSchemaAdmindetailRequest) SetNamespace(v string) *CreateSchemaAdmindetailRequest {
	s.Namespace = &v
	return s
}

func (s *CreateSchemaAdmindetailRequest) SetSchemaTenant(v string) *CreateSchemaAdmindetailRequest {
	s.SchemaTenant = &v
	return s
}

func (s *CreateSchemaAdmindetailRequest) SetSerialization(v string) *CreateSchemaAdmindetailRequest {
	s.Serialization = &v
	return s
}

func (s *CreateSchemaAdmindetailRequest) SetSchemaType(v string) *CreateSchemaAdmindetailRequest {
	s.SchemaType = &v
	return s
}

type CreateSchemaAdmindetailResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateSchemaAdmindetailResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSchemaAdmindetailResponse) GoString() string {
	return s.String()
}

func (s *CreateSchemaAdmindetailResponse) SetReqMsgId(v string) *CreateSchemaAdmindetailResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSchemaAdmindetailResponse) SetResultCode(v string) *CreateSchemaAdmindetailResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSchemaAdmindetailResponse) SetResultMsg(v string) *CreateSchemaAdmindetailResponse {
	s.ResultMsg = &v
	return s
}

type DeleteSchemaAdmindetailRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// uniq_id
	UniqId *int64 `json:"uniq_id,omitempty" xml:"uniq_id,omitempty" require:"true"`
}

func (s DeleteSchemaAdmindetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSchemaAdmindetailRequest) GoString() string {
	return s.String()
}

func (s *DeleteSchemaAdmindetailRequest) SetAuthToken(v string) *DeleteSchemaAdmindetailRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSchemaAdmindetailRequest) SetProductInstanceId(v string) *DeleteSchemaAdmindetailRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteSchemaAdmindetailRequest) SetUniqId(v int64) *DeleteSchemaAdmindetailRequest {
	s.UniqId = &v
	return s
}

type DeleteSchemaAdmindetailResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSchemaAdmindetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSchemaAdmindetailResponse) GoString() string {
	return s.String()
}

func (s *DeleteSchemaAdmindetailResponse) SetReqMsgId(v string) *DeleteSchemaAdmindetailResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSchemaAdmindetailResponse) SetResultCode(v string) *DeleteSchemaAdmindetailResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSchemaAdmindetailResponse) SetResultMsg(v string) *DeleteSchemaAdmindetailResponse {
	s.ResultMsg = &v
	return s
}

type QuerySofamqEndpointRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s QuerySofamqEndpointRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqEndpointRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqEndpointRequest) SetAuthToken(v string) *QuerySofamqEndpointRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqEndpointRequest) SetProductInstanceId(v string) *QuerySofamqEndpointRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqEndpointRequest) SetInstanceId(v string) *QuerySofamqEndpointRequest {
	s.InstanceId = &v
	return s
}

type QuerySofamqEndpointResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 接入点列表信息
	Data *EndpointDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySofamqEndpointResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqEndpointResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqEndpointResponse) SetReqMsgId(v string) *QuerySofamqEndpointResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqEndpointResponse) SetResultCode(v string) *QuerySofamqEndpointResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqEndpointResponse) SetResultMsg(v string) *QuerySofamqEndpointResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqEndpointResponse) SetData(v *EndpointDTO) *QuerySofamqEndpointResponse {
	s.Data = v
	return s
}

type QuerySchemaAdminmetadataRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// SOFAMQ实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// schema名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 命名空间
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
	// 租户
	SchemaTenant *string `json:"schema_tenant,omitempty" xml:"schema_tenant,omitempty"`
}

func (s QuerySchemaAdminmetadataRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySchemaAdminmetadataRequest) GoString() string {
	return s.String()
}

func (s *QuerySchemaAdminmetadataRequest) SetAuthToken(v string) *QuerySchemaAdminmetadataRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySchemaAdminmetadataRequest) SetProductInstanceId(v string) *QuerySchemaAdminmetadataRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySchemaAdminmetadataRequest) SetInstanceId(v string) *QuerySchemaAdminmetadataRequest {
	s.InstanceId = &v
	return s
}

func (s *QuerySchemaAdminmetadataRequest) SetName(v string) *QuerySchemaAdminmetadataRequest {
	s.Name = &v
	return s
}

func (s *QuerySchemaAdminmetadataRequest) SetNamespace(v string) *QuerySchemaAdminmetadataRequest {
	s.Namespace = &v
	return s
}

func (s *QuerySchemaAdminmetadataRequest) SetSchemaTenant(v string) *QuerySchemaAdminmetadataRequest {
	s.SchemaTenant = &v
	return s
}

type QuerySchemaAdminmetadataResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// schema元数据
	Data *SchemaMetadataDO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySchemaAdminmetadataResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySchemaAdminmetadataResponse) GoString() string {
	return s.String()
}

func (s *QuerySchemaAdminmetadataResponse) SetReqMsgId(v string) *QuerySchemaAdminmetadataResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySchemaAdminmetadataResponse) SetResultCode(v string) *QuerySchemaAdminmetadataResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySchemaAdminmetadataResponse) SetResultMsg(v string) *QuerySchemaAdminmetadataResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySchemaAdminmetadataResponse) SetData(v *SchemaMetadataDO) *QuerySchemaAdminmetadataResponse {
	s.Data = v
	return s
}

type QuerySchemaAdminconfigRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 配置类型
	ConfigType *string `json:"config_type,omitempty" xml:"config_type,omitempty" require:"true"`
}

func (s QuerySchemaAdminconfigRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySchemaAdminconfigRequest) GoString() string {
	return s.String()
}

func (s *QuerySchemaAdminconfigRequest) SetAuthToken(v string) *QuerySchemaAdminconfigRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySchemaAdminconfigRequest) SetProductInstanceId(v string) *QuerySchemaAdminconfigRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySchemaAdminconfigRequest) SetConfigType(v string) *QuerySchemaAdminconfigRequest {
	s.ConfigType = &v
	return s
}

type QuerySchemaAdminconfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 配置列表
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QuerySchemaAdminconfigResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySchemaAdminconfigResponse) GoString() string {
	return s.String()
}

func (s *QuerySchemaAdminconfigResponse) SetReqMsgId(v string) *QuerySchemaAdminconfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySchemaAdminconfigResponse) SetResultCode(v string) *QuerySchemaAdminconfigResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySchemaAdminconfigResponse) SetResultMsg(v string) *QuerySchemaAdminconfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySchemaAdminconfigResponse) SetData(v []*string) *QuerySchemaAdminconfigResponse {
	s.Data = v
	return s
}

type QuerySofamqLinkRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
}

func (s QuerySofamqLinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqLinkRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqLinkRequest) SetAuthToken(v string) *QuerySofamqLinkRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqLinkRequest) SetProductInstanceId(v string) *QuerySofamqLinkRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqLinkRequest) SetInstanceId(v string) *QuerySofamqLinkRequest {
	s.InstanceId = &v
	return s
}

type QuerySofamqLinkResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 链接信息
	Data *LinkDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySofamqLinkResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqLinkResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqLinkResponse) SetReqMsgId(v string) *QuerySofamqLinkResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqLinkResponse) SetResultCode(v string) *QuerySofamqLinkResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqLinkResponse) SetResultMsg(v string) *QuerySofamqLinkResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqLinkResponse) SetData(v *LinkDTO) *QuerySofamqLinkResponse {
	s.Data = v
	return s
}

type QuerySofamqTopicnameRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 查询数量
	Num *int64 `json:"num,omitempty" xml:"num,omitempty"`
	// 用于模糊搜索的 topic 关键字
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty"`
}

func (s QuerySofamqTopicnameRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqTopicnameRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqTopicnameRequest) SetAuthToken(v string) *QuerySofamqTopicnameRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqTopicnameRequest) SetProductInstanceId(v string) *QuerySofamqTopicnameRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqTopicnameRequest) SetInstanceId(v string) *QuerySofamqTopicnameRequest {
	s.InstanceId = &v
	return s
}

func (s *QuerySofamqTopicnameRequest) SetNum(v int64) *QuerySofamqTopicnameRequest {
	s.Num = &v
	return s
}

func (s *QuerySofamqTopicnameRequest) SetTopic(v string) *QuerySofamqTopicnameRequest {
	s.Topic = &v
	return s
}

type QuerySofamqTopicnameResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// topic列表
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QuerySofamqTopicnameResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqTopicnameResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqTopicnameResponse) SetReqMsgId(v string) *QuerySofamqTopicnameResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqTopicnameResponse) SetResultCode(v string) *QuerySofamqTopicnameResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqTopicnameResponse) SetResultMsg(v string) *QuerySofamqTopicnameResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqTopicnameResponse) SetData(v []*string) *QuerySofamqTopicnameResponse {
	s.Data = v
	return s
}

type QuerySofamqGroupnameRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 查询最大数量
	Num *int64 `json:"num,omitempty" xml:"num,omitempty"`
	// 用于模糊搜索的 groupId 关键字
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty"`
}

func (s QuerySofamqGroupnameRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqGroupnameRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqGroupnameRequest) SetAuthToken(v string) *QuerySofamqGroupnameRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqGroupnameRequest) SetProductInstanceId(v string) *QuerySofamqGroupnameRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqGroupnameRequest) SetInstanceId(v string) *QuerySofamqGroupnameRequest {
	s.InstanceId = &v
	return s
}

func (s *QuerySofamqGroupnameRequest) SetNum(v int64) *QuerySofamqGroupnameRequest {
	s.Num = &v
	return s
}

func (s *QuerySofamqGroupnameRequest) SetGroupId(v string) *QuerySofamqGroupnameRequest {
	s.GroupId = &v
	return s
}

type QuerySofamqGroupnameResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// group列表
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QuerySofamqGroupnameResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqGroupnameResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqGroupnameResponse) SetReqMsgId(v string) *QuerySofamqGroupnameResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqGroupnameResponse) SetResultCode(v string) *QuerySofamqGroupnameResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqGroupnameResponse) SetResultMsg(v string) *QuerySofamqGroupnameResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqGroupnameResponse) SetData(v []*string) *QuerySofamqGroupnameResponse {
	s.Data = v
	return s
}

type CreateSofamqAdmintopicRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 集群名
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty" require:"true"`
	// 需创建的 Topic 所对应的实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 消息类型。取值说明如下：0：普通消息；1：分区顺序消息；2：全局顺序消息；4：事务消息；5：定时/延时消息。
	MessageType *int64 `json:"message_type,omitempty" xml:"message_type,omitempty" require:"true"`
	// Topic 的备注信息
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
	// 生效范围，为三板斧使用
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// 需创建的 Topic 的名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// Topic 权限，6为可读可写，4为可读
	Perm *string `json:"perm,omitempty" xml:"perm,omitempty"`
	// Topic 所属的应用名称，要求 app name 在 appinfo 上可查
	Owner *string `json:"owner,omitempty" xml:"owner,omitempty"`
	// 标识该 topic 的消息是否具有优先级
	Priority *bool `json:"priority,omitempty" xml:"priority,omitempty"`
}

func (s CreateSofamqAdmintopicRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqAdmintopicRequest) GoString() string {
	return s.String()
}

func (s *CreateSofamqAdmintopicRequest) SetAuthToken(v string) *CreateSofamqAdmintopicRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSofamqAdmintopicRequest) SetProductInstanceId(v string) *CreateSofamqAdmintopicRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSofamqAdmintopicRequest) SetCluster(v string) *CreateSofamqAdmintopicRequest {
	s.Cluster = &v
	return s
}

func (s *CreateSofamqAdmintopicRequest) SetInstanceId(v string) *CreateSofamqAdmintopicRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateSofamqAdmintopicRequest) SetMessageType(v int64) *CreateSofamqAdmintopicRequest {
	s.MessageType = &v
	return s
}

func (s *CreateSofamqAdmintopicRequest) SetRemark(v string) *CreateSofamqAdmintopicRequest {
	s.Remark = &v
	return s
}

func (s *CreateSofamqAdmintopicRequest) SetScope(v string) *CreateSofamqAdmintopicRequest {
	s.Scope = &v
	return s
}

func (s *CreateSofamqAdmintopicRequest) SetTopic(v string) *CreateSofamqAdmintopicRequest {
	s.Topic = &v
	return s
}

func (s *CreateSofamqAdmintopicRequest) SetPerm(v string) *CreateSofamqAdmintopicRequest {
	s.Perm = &v
	return s
}

func (s *CreateSofamqAdmintopicRequest) SetOwner(v string) *CreateSofamqAdmintopicRequest {
	s.Owner = &v
	return s
}

func (s *CreateSofamqAdmintopicRequest) SetPriority(v bool) *CreateSofamqAdmintopicRequest {
	s.Priority = &v
	return s
}

type CreateSofamqAdmintopicResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateSofamqAdmintopicResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqAdmintopicResponse) GoString() string {
	return s.String()
}

func (s *CreateSofamqAdmintopicResponse) SetReqMsgId(v string) *CreateSofamqAdmintopicResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSofamqAdmintopicResponse) SetResultCode(v string) *CreateSofamqAdmintopicResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSofamqAdmintopicResponse) SetResultMsg(v string) *CreateSofamqAdmintopicResponse {
	s.ResultMsg = &v
	return s
}

type CreateSofamqAdmingroupRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 集群名
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty" require:"true"`
	// Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// group协议类型
	GroupType *string `json:"group_type,omitempty" xml:"group_type,omitempty"`
	// 实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// Group ID 描述信息
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
	// 生效范围，三板斧使用
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// Group 所属的应用名称，要求 app name 在 zappinfo 上可查
	Owner *string `json:"owner,omitempty" xml:"owner,omitempty"`
}

func (s CreateSofamqAdmingroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqAdmingroupRequest) GoString() string {
	return s.String()
}

func (s *CreateSofamqAdmingroupRequest) SetAuthToken(v string) *CreateSofamqAdmingroupRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSofamqAdmingroupRequest) SetProductInstanceId(v string) *CreateSofamqAdmingroupRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSofamqAdmingroupRequest) SetCluster(v string) *CreateSofamqAdmingroupRequest {
	s.Cluster = &v
	return s
}

func (s *CreateSofamqAdmingroupRequest) SetGroupId(v string) *CreateSofamqAdmingroupRequest {
	s.GroupId = &v
	return s
}

func (s *CreateSofamqAdmingroupRequest) SetGroupType(v string) *CreateSofamqAdmingroupRequest {
	s.GroupType = &v
	return s
}

func (s *CreateSofamqAdmingroupRequest) SetInstanceId(v string) *CreateSofamqAdmingroupRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateSofamqAdmingroupRequest) SetRemark(v string) *CreateSofamqAdmingroupRequest {
	s.Remark = &v
	return s
}

func (s *CreateSofamqAdmingroupRequest) SetScope(v string) *CreateSofamqAdmingroupRequest {
	s.Scope = &v
	return s
}

func (s *CreateSofamqAdmingroupRequest) SetOwner(v string) *CreateSofamqAdmingroupRequest {
	s.Owner = &v
	return s
}

type CreateSofamqAdmingroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateSofamqAdmingroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqAdmingroupResponse) GoString() string {
	return s.String()
}

func (s *CreateSofamqAdmingroupResponse) SetReqMsgId(v string) *CreateSofamqAdmingroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSofamqAdmingroupResponse) SetResultCode(v string) *CreateSofamqAdmingroupResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSofamqAdmingroupResponse) SetResultMsg(v string) *CreateSofamqAdmingroupResponse {
	s.ResultMsg = &v
	return s
}

type QuerySofamqConnectorRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s QuerySofamqConnectorRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConnectorRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqConnectorRequest) SetAuthToken(v string) *QuerySofamqConnectorRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqConnectorRequest) SetProductInstanceId(v string) *QuerySofamqConnectorRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqConnectorRequest) SetName(v string) *QuerySofamqConnectorRequest {
	s.Name = &v
	return s
}

type QuerySofamqConnectorResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 连接器任务实体
	Data *ConnectorJob `json:"data,omitempty" xml:"data,omitempty"`
	// 错误报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s QuerySofamqConnectorResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConnectorResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqConnectorResponse) SetReqMsgId(v string) *QuerySofamqConnectorResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqConnectorResponse) SetResultCode(v string) *QuerySofamqConnectorResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqConnectorResponse) SetResultMsg(v string) *QuerySofamqConnectorResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqConnectorResponse) SetData(v *ConnectorJob) *QuerySofamqConnectorResponse {
	s.Data = v
	return s
}

func (s *QuerySofamqConnectorResponse) SetErrorReport(v *ErrorReport) *QuerySofamqConnectorResponse {
	s.ErrorReport = v
	return s
}

type CreateSofamqConnectorRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// cron表达式描述任务触发，如果类型是cron的话
	Cron *string `json:"cron,omitempty" xml:"cron,omitempty"`
	// 数据过滤，支持SQL92过滤
	Filter *string `json:"filter,omitempty" xml:"filter,omitempty"`
	// 实例编号
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 任务名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 限流值
	Rate *int64 `json:"rate,omitempty" xml:"rate,omitempty" minimum:"0"`
	// 描述任务
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
	// 去向信息的配置, kv结构的数组 的 JSON String
	SinkConfigs *string `json:"sink_configs,omitempty" xml:"sink_configs,omitempty" require:"true"`
	// 去向类型
	SinkType *string `json:"sink_type,omitempty" xml:"sink_type,omitempty" require:"true"`
	// 来源的配置项列表， kv结构数组 的 JSON String
	SourceConfigs *string `json:"source_configs,omitempty" xml:"source_configs,omitempty" require:"true"`
	// 来源类型
	SourceType *string `json:"source_type,omitempty" xml:"source_type,omitempty" require:"true"`
	// 如果类型是once的话，给定一个unix时间戳
	Time *int64 `json:"time,omitempty" xml:"time,omitempty"`
	// 数据转化配置。数据转化配置的数组 的JSON String
	Transformation *string `json:"transformation,omitempty" xml:"transformation,omitempty"`
	// 任务调度类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 任务所有者，一般是app维度
	App *string `json:"app,omitempty" xml:"app,omitempty" require:"true"`
	// stepflow平台上的某个 模板编号
	StepflowTemplateId *string `json:"stepflow_template_id,omitempty" xml:"stepflow_template_id,omitempty"`
	// 时间订阅的配置，json格式
	EventSubConfigs *string `json:"event_sub_configs,omitempty" xml:"event_sub_configs,omitempty"`
	// 事件订阅是否开启
	EventSubEnabled *bool `json:"event_sub_enabled,omitempty" xml:"event_sub_enabled,omitempty" require:"true"`
	// 预期完成时间(s)
	AcceptableExecutionInterval *int64 `json:"acceptable_execution_interval,omitempty" xml:"acceptable_execution_interval,omitempty"`
	// 是否自动回收实例
	AutoRecycleInstance *bool `json:"auto_recycle_instance,omitempty" xml:"auto_recycle_instance,omitempty"`
}

func (s CreateSofamqConnectorRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqConnectorRequest) GoString() string {
	return s.String()
}

func (s *CreateSofamqConnectorRequest) SetAuthToken(v string) *CreateSofamqConnectorRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSofamqConnectorRequest) SetProductInstanceId(v string) *CreateSofamqConnectorRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSofamqConnectorRequest) SetCron(v string) *CreateSofamqConnectorRequest {
	s.Cron = &v
	return s
}

func (s *CreateSofamqConnectorRequest) SetFilter(v string) *CreateSofamqConnectorRequest {
	s.Filter = &v
	return s
}

func (s *CreateSofamqConnectorRequest) SetInstanceId(v string) *CreateSofamqConnectorRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateSofamqConnectorRequest) SetName(v string) *CreateSofamqConnectorRequest {
	s.Name = &v
	return s
}

func (s *CreateSofamqConnectorRequest) SetRate(v int64) *CreateSofamqConnectorRequest {
	s.Rate = &v
	return s
}

func (s *CreateSofamqConnectorRequest) SetRemark(v string) *CreateSofamqConnectorRequest {
	s.Remark = &v
	return s
}

func (s *CreateSofamqConnectorRequest) SetSinkConfigs(v string) *CreateSofamqConnectorRequest {
	s.SinkConfigs = &v
	return s
}

func (s *CreateSofamqConnectorRequest) SetSinkType(v string) *CreateSofamqConnectorRequest {
	s.SinkType = &v
	return s
}

func (s *CreateSofamqConnectorRequest) SetSourceConfigs(v string) *CreateSofamqConnectorRequest {
	s.SourceConfigs = &v
	return s
}

func (s *CreateSofamqConnectorRequest) SetSourceType(v string) *CreateSofamqConnectorRequest {
	s.SourceType = &v
	return s
}

func (s *CreateSofamqConnectorRequest) SetTime(v int64) *CreateSofamqConnectorRequest {
	s.Time = &v
	return s
}

func (s *CreateSofamqConnectorRequest) SetTransformation(v string) *CreateSofamqConnectorRequest {
	s.Transformation = &v
	return s
}

func (s *CreateSofamqConnectorRequest) SetType(v string) *CreateSofamqConnectorRequest {
	s.Type = &v
	return s
}

func (s *CreateSofamqConnectorRequest) SetApp(v string) *CreateSofamqConnectorRequest {
	s.App = &v
	return s
}

func (s *CreateSofamqConnectorRequest) SetStepflowTemplateId(v string) *CreateSofamqConnectorRequest {
	s.StepflowTemplateId = &v
	return s
}

func (s *CreateSofamqConnectorRequest) SetEventSubConfigs(v string) *CreateSofamqConnectorRequest {
	s.EventSubConfigs = &v
	return s
}

func (s *CreateSofamqConnectorRequest) SetEventSubEnabled(v bool) *CreateSofamqConnectorRequest {
	s.EventSubEnabled = &v
	return s
}

func (s *CreateSofamqConnectorRequest) SetAcceptableExecutionInterval(v int64) *CreateSofamqConnectorRequest {
	s.AcceptableExecutionInterval = &v
	return s
}

func (s *CreateSofamqConnectorRequest) SetAutoRecycleInstance(v bool) *CreateSofamqConnectorRequest {
	s.AutoRecycleInstance = &v
	return s
}

type CreateSofamqConnectorResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s CreateSofamqConnectorResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqConnectorResponse) GoString() string {
	return s.String()
}

func (s *CreateSofamqConnectorResponse) SetReqMsgId(v string) *CreateSofamqConnectorResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSofamqConnectorResponse) SetResultCode(v string) *CreateSofamqConnectorResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSofamqConnectorResponse) SetResultMsg(v string) *CreateSofamqConnectorResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateSofamqConnectorResponse) SetErrorReport(v *ErrorReport) *CreateSofamqConnectorResponse {
	s.ErrorReport = v
	return s
}

type ListSofamqConnectorRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 任务查询条件
	Query *ConnectorJobQuery `json:"query,omitempty" xml:"query,omitempty"`
	// 租户实例编号
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s ListSofamqConnectorRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqConnectorRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqConnectorRequest) SetAuthToken(v string) *ListSofamqConnectorRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqConnectorRequest) SetProductInstanceId(v string) *ListSofamqConnectorRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListSofamqConnectorRequest) SetPageNum(v int64) *ListSofamqConnectorRequest {
	s.PageNum = &v
	return s
}

func (s *ListSofamqConnectorRequest) SetPageSize(v int64) *ListSofamqConnectorRequest {
	s.PageSize = &v
	return s
}

func (s *ListSofamqConnectorRequest) SetQuery(v *ConnectorJobQuery) *ListSofamqConnectorRequest {
	s.Query = v
	return s
}

func (s *ListSofamqConnectorRequest) SetInstanceId(v string) *ListSofamqConnectorRequest {
	s.InstanceId = &v
	return s
}

type ListSofamqConnectorResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 连接器分页查询结果
	Data *ConnectorJobPageResult `json:"data,omitempty" xml:"data,omitempty"`
	// 错误报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s ListSofamqConnectorResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqConnectorResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqConnectorResponse) SetReqMsgId(v string) *ListSofamqConnectorResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqConnectorResponse) SetResultCode(v string) *ListSofamqConnectorResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqConnectorResponse) SetResultMsg(v string) *ListSofamqConnectorResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqConnectorResponse) SetData(v *ConnectorJobPageResult) *ListSofamqConnectorResponse {
	s.Data = v
	return s
}

func (s *ListSofamqConnectorResponse) SetErrorReport(v *ErrorReport) *ListSofamqConnectorResponse {
	s.ErrorReport = v
	return s
}

type DeleteSofamqConnectorRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 租户实例编号
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s DeleteSofamqConnectorRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqConnectorRequest) GoString() string {
	return s.String()
}

func (s *DeleteSofamqConnectorRequest) SetAuthToken(v string) *DeleteSofamqConnectorRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSofamqConnectorRequest) SetProductInstanceId(v string) *DeleteSofamqConnectorRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteSofamqConnectorRequest) SetName(v string) *DeleteSofamqConnectorRequest {
	s.Name = &v
	return s
}

func (s *DeleteSofamqConnectorRequest) SetInstanceId(v string) *DeleteSofamqConnectorRequest {
	s.InstanceId = &v
	return s
}

type DeleteSofamqConnectorResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s DeleteSofamqConnectorResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqConnectorResponse) GoString() string {
	return s.String()
}

func (s *DeleteSofamqConnectorResponse) SetReqMsgId(v string) *DeleteSofamqConnectorResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSofamqConnectorResponse) SetResultCode(v string) *DeleteSofamqConnectorResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSofamqConnectorResponse) SetResultMsg(v string) *DeleteSofamqConnectorResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteSofamqConnectorResponse) SetErrorReport(v *ErrorReport) *DeleteSofamqConnectorResponse {
	s.ErrorReport = v
	return s
}

type EnableSofamqConnectorRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s EnableSofamqConnectorRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableSofamqConnectorRequest) GoString() string {
	return s.String()
}

func (s *EnableSofamqConnectorRequest) SetAuthToken(v string) *EnableSofamqConnectorRequest {
	s.AuthToken = &v
	return s
}

func (s *EnableSofamqConnectorRequest) SetProductInstanceId(v string) *EnableSofamqConnectorRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *EnableSofamqConnectorRequest) SetName(v string) *EnableSofamqConnectorRequest {
	s.Name = &v
	return s
}

type EnableSofamqConnectorResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 任务名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 租户实例编号
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
	// 错误报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s EnableSofamqConnectorResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableSofamqConnectorResponse) GoString() string {
	return s.String()
}

func (s *EnableSofamqConnectorResponse) SetReqMsgId(v string) *EnableSofamqConnectorResponse {
	s.ReqMsgId = &v
	return s
}

func (s *EnableSofamqConnectorResponse) SetResultCode(v string) *EnableSofamqConnectorResponse {
	s.ResultCode = &v
	return s
}

func (s *EnableSofamqConnectorResponse) SetResultMsg(v string) *EnableSofamqConnectorResponse {
	s.ResultMsg = &v
	return s
}

func (s *EnableSofamqConnectorResponse) SetName(v string) *EnableSofamqConnectorResponse {
	s.Name = &v
	return s
}

func (s *EnableSofamqConnectorResponse) SetInstanceId(v string) *EnableSofamqConnectorResponse {
	s.InstanceId = &v
	return s
}

func (s *EnableSofamqConnectorResponse) SetErrorReport(v *ErrorReport) *EnableSofamqConnectorResponse {
	s.ErrorReport = v
	return s
}

type DisableSofamqConnectorRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 租户实例
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s DisableSofamqConnectorRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableSofamqConnectorRequest) GoString() string {
	return s.String()
}

func (s *DisableSofamqConnectorRequest) SetAuthToken(v string) *DisableSofamqConnectorRequest {
	s.AuthToken = &v
	return s
}

func (s *DisableSofamqConnectorRequest) SetProductInstanceId(v string) *DisableSofamqConnectorRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DisableSofamqConnectorRequest) SetName(v string) *DisableSofamqConnectorRequest {
	s.Name = &v
	return s
}

func (s *DisableSofamqConnectorRequest) SetInstanceId(v string) *DisableSofamqConnectorRequest {
	s.InstanceId = &v
	return s
}

type DisableSofamqConnectorResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s DisableSofamqConnectorResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableSofamqConnectorResponse) GoString() string {
	return s.String()
}

func (s *DisableSofamqConnectorResponse) SetReqMsgId(v string) *DisableSofamqConnectorResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DisableSofamqConnectorResponse) SetResultCode(v string) *DisableSofamqConnectorResponse {
	s.ResultCode = &v
	return s
}

func (s *DisableSofamqConnectorResponse) SetResultMsg(v string) *DisableSofamqConnectorResponse {
	s.ResultMsg = &v
	return s
}

func (s *DisableSofamqConnectorResponse) SetErrorReport(v *ErrorReport) *DisableSofamqConnectorResponse {
	s.ErrorReport = v
	return s
}

type ListSofamqConnectorscheuletypeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
}

func (s ListSofamqConnectorscheuletypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqConnectorscheuletypeRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqConnectorscheuletypeRequest) SetAuthToken(v string) *ListSofamqConnectorscheuletypeRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqConnectorscheuletypeRequest) SetProductInstanceId(v string) *ListSofamqConnectorscheuletypeRequest {
	s.ProductInstanceId = &v
	return s
}

type ListSofamqConnectorscheuletypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 任务的调度类型 列表
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListSofamqConnectorscheuletypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqConnectorscheuletypeResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqConnectorscheuletypeResponse) SetReqMsgId(v string) *ListSofamqConnectorscheuletypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqConnectorscheuletypeResponse) SetResultCode(v string) *ListSofamqConnectorscheuletypeResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqConnectorscheuletypeResponse) SetResultMsg(v string) *ListSofamqConnectorscheuletypeResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqConnectorscheuletypeResponse) SetData(v []*string) *ListSofamqConnectorscheuletypeResponse {
	s.Data = v
	return s
}

type ListSofamqConnectorsourcetypeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
}

func (s ListSofamqConnectorsourcetypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqConnectorsourcetypeRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqConnectorsourcetypeRequest) SetAuthToken(v string) *ListSofamqConnectorsourcetypeRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqConnectorsourcetypeRequest) SetProductInstanceId(v string) *ListSofamqConnectorsourcetypeRequest {
	s.ProductInstanceId = &v
	return s
}

type ListSofamqConnectorsourcetypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 所有支持的来源类型
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListSofamqConnectorsourcetypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqConnectorsourcetypeResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqConnectorsourcetypeResponse) SetReqMsgId(v string) *ListSofamqConnectorsourcetypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqConnectorsourcetypeResponse) SetResultCode(v string) *ListSofamqConnectorsourcetypeResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqConnectorsourcetypeResponse) SetResultMsg(v string) *ListSofamqConnectorsourcetypeResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqConnectorsourcetypeResponse) SetData(v []*string) *ListSofamqConnectorsourcetypeResponse {
	s.Data = v
	return s
}

type ListSofamqConnectorsinktypeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
}

func (s ListSofamqConnectorsinktypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqConnectorsinktypeRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqConnectorsinktypeRequest) SetAuthToken(v string) *ListSofamqConnectorsinktypeRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqConnectorsinktypeRequest) SetProductInstanceId(v string) *ListSofamqConnectorsinktypeRequest {
	s.ProductInstanceId = &v
	return s
}

type ListSofamqConnectorsinktypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 所有支持的去向类型
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListSofamqConnectorsinktypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqConnectorsinktypeResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqConnectorsinktypeResponse) SetReqMsgId(v string) *ListSofamqConnectorsinktypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqConnectorsinktypeResponse) SetResultCode(v string) *ListSofamqConnectorsinktypeResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqConnectorsinktypeResponse) SetResultMsg(v string) *ListSofamqConnectorsinktypeResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqConnectorsinktypeResponse) SetData(v []*string) *ListSofamqConnectorsinktypeResponse {
	s.Data = v
	return s
}

type LoadSofamqConnectorconfigsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 数据源的类型，代表是来源还是去向，只有两种，对应的值是source 和 sink
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 具体的来源或者去向的类型
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s LoadSofamqConnectorconfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s LoadSofamqConnectorconfigsRequest) GoString() string {
	return s.String()
}

func (s *LoadSofamqConnectorconfigsRequest) SetAuthToken(v string) *LoadSofamqConnectorconfigsRequest {
	s.AuthToken = &v
	return s
}

func (s *LoadSofamqConnectorconfigsRequest) SetProductInstanceId(v string) *LoadSofamqConnectorconfigsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *LoadSofamqConnectorconfigsRequest) SetType(v string) *LoadSofamqConnectorconfigsRequest {
	s.Type = &v
	return s
}

func (s *LoadSofamqConnectorconfigsRequest) SetValue(v string) *LoadSofamqConnectorconfigsRequest {
	s.Value = &v
	return s
}

type LoadSofamqConnectorconfigsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 连接器来源或者去向的 配置详情
	Data []*UIControlModel `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 错误报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s LoadSofamqConnectorconfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s LoadSofamqConnectorconfigsResponse) GoString() string {
	return s.String()
}

func (s *LoadSofamqConnectorconfigsResponse) SetReqMsgId(v string) *LoadSofamqConnectorconfigsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *LoadSofamqConnectorconfigsResponse) SetResultCode(v string) *LoadSofamqConnectorconfigsResponse {
	s.ResultCode = &v
	return s
}

func (s *LoadSofamqConnectorconfigsResponse) SetResultMsg(v string) *LoadSofamqConnectorconfigsResponse {
	s.ResultMsg = &v
	return s
}

func (s *LoadSofamqConnectorconfigsResponse) SetData(v []*UIControlModel) *LoadSofamqConnectorconfigsResponse {
	s.Data = v
	return s
}

func (s *LoadSofamqConnectorconfigsResponse) SetErrorReport(v *ErrorReport) *LoadSofamqConnectorconfigsResponse {
	s.ErrorReport = v
	return s
}

type QuerySofamqConnectordateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s QuerySofamqConnectordateRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConnectordateRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqConnectordateRequest) SetAuthToken(v string) *QuerySofamqConnectordateRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqConnectordateRequest) SetProductInstanceId(v string) *QuerySofamqConnectordateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqConnectordateRequest) SetName(v string) *QuerySofamqConnectordateRequest {
	s.Name = &v
	return s
}

type QuerySofamqConnectordateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回该任务的执行计划的实例摘要
	Data []*InstanceDigest `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 时间列表
	DateList []*string `json:"date_list,omitempty" xml:"date_list,omitempty" type:"Repeated"`
	// 错误报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s QuerySofamqConnectordateResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConnectordateResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqConnectordateResponse) SetReqMsgId(v string) *QuerySofamqConnectordateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqConnectordateResponse) SetResultCode(v string) *QuerySofamqConnectordateResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqConnectordateResponse) SetResultMsg(v string) *QuerySofamqConnectordateResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqConnectordateResponse) SetData(v []*InstanceDigest) *QuerySofamqConnectordateResponse {
	s.Data = v
	return s
}

func (s *QuerySofamqConnectordateResponse) SetDateList(v []*string) *QuerySofamqConnectordateResponse {
	s.DateList = v
	return s
}

func (s *QuerySofamqConnectordateResponse) SetErrorReport(v *ErrorReport) *QuerySofamqConnectordateResponse {
	s.ErrorReport = v
	return s
}

type QuerySofamqConnectorrecordRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务执行摘要
	Digest *InstanceDigest `json:"digest,omitempty" xml:"digest,omitempty" require:"true"`
	// 任务名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 时间，本字段已经废除，不需要传递
	Date *string `json:"date,omitempty" xml:"date,omitempty"`
}

func (s QuerySofamqConnectorrecordRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConnectorrecordRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqConnectorrecordRequest) SetAuthToken(v string) *QuerySofamqConnectorrecordRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqConnectorrecordRequest) SetProductInstanceId(v string) *QuerySofamqConnectorrecordRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqConnectorrecordRequest) SetDigest(v *InstanceDigest) *QuerySofamqConnectorrecordRequest {
	s.Digest = v
	return s
}

func (s *QuerySofamqConnectorrecordRequest) SetName(v string) *QuerySofamqConnectorrecordRequest {
	s.Name = &v
	return s
}

func (s *QuerySofamqConnectorrecordRequest) SetDate(v string) *QuerySofamqConnectorrecordRequest {
	s.Date = &v
	return s
}

type QuerySofamqConnectorrecordResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 任务执行记录
	Records *JobRecordDTO `json:"records,omitempty" xml:"records,omitempty"`
	// 错误报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s QuerySofamqConnectorrecordResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConnectorrecordResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqConnectorrecordResponse) SetReqMsgId(v string) *QuerySofamqConnectorrecordResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqConnectorrecordResponse) SetResultCode(v string) *QuerySofamqConnectorrecordResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqConnectorrecordResponse) SetResultMsg(v string) *QuerySofamqConnectorrecordResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqConnectorrecordResponse) SetRecords(v *JobRecordDTO) *QuerySofamqConnectorrecordResponse {
	s.Records = v
	return s
}

func (s *QuerySofamqConnectorrecordResponse) SetErrorReport(v *ErrorReport) *QuerySofamqConnectorrecordResponse {
	s.ErrorReport = v
	return s
}

type LoadSofamqConnectorsourceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 来源的配置信息。source kv结构配置 数组 的 JSON String
	SourceConfigs *string `json:"source_configs,omitempty" xml:"source_configs,omitempty" require:"true"`
	// 数据源类型
	SourceType *string `json:"source_type,omitempty" xml:"source_type,omitempty" require:"true"`
	// 任务名称，仅仅在任务修改时需要传递
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s LoadSofamqConnectorsourceRequest) String() string {
	return tea.Prettify(s)
}

func (s LoadSofamqConnectorsourceRequest) GoString() string {
	return s.String()
}

func (s *LoadSofamqConnectorsourceRequest) SetAuthToken(v string) *LoadSofamqConnectorsourceRequest {
	s.AuthToken = &v
	return s
}

func (s *LoadSofamqConnectorsourceRequest) SetProductInstanceId(v string) *LoadSofamqConnectorsourceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *LoadSofamqConnectorsourceRequest) SetSourceConfigs(v string) *LoadSofamqConnectorsourceRequest {
	s.SourceConfigs = &v
	return s
}

func (s *LoadSofamqConnectorsourceRequest) SetSourceType(v string) *LoadSofamqConnectorsourceRequest {
	s.SourceType = &v
	return s
}

func (s *LoadSofamqConnectorsourceRequest) SetName(v string) *LoadSofamqConnectorsourceRequest {
	s.Name = &v
	return s
}

type LoadSofamqConnectorsourceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 来源的数据结构信息，包括名称、类型、别名、转化类型
	Data []*ColumnConfig `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 错误报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s LoadSofamqConnectorsourceResponse) String() string {
	return tea.Prettify(s)
}

func (s LoadSofamqConnectorsourceResponse) GoString() string {
	return s.String()
}

func (s *LoadSofamqConnectorsourceResponse) SetReqMsgId(v string) *LoadSofamqConnectorsourceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *LoadSofamqConnectorsourceResponse) SetResultCode(v string) *LoadSofamqConnectorsourceResponse {
	s.ResultCode = &v
	return s
}

func (s *LoadSofamqConnectorsourceResponse) SetResultMsg(v string) *LoadSofamqConnectorsourceResponse {
	s.ResultMsg = &v
	return s
}

func (s *LoadSofamqConnectorsourceResponse) SetData(v []*ColumnConfig) *LoadSofamqConnectorsourceResponse {
	s.Data = v
	return s
}

func (s *LoadSofamqConnectorsourceResponse) SetErrorReport(v *ErrorReport) *LoadSofamqConnectorsourceResponse {
	s.ErrorReport = v
	return s
}

type QueryMeshQueueRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 队列名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 当前页码值
	PageCurrent *int64 `json:"page_current,omitempty" xml:"page_current,omitempty" require:"true"`
	// 页面显示数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
}

func (s QueryMeshQueueRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMeshQueueRequest) GoString() string {
	return s.String()
}

func (s *QueryMeshQueueRequest) SetAuthToken(v string) *QueryMeshQueueRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMeshQueueRequest) SetProductInstanceId(v string) *QueryMeshQueueRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMeshQueueRequest) SetName(v string) *QueryMeshQueueRequest {
	s.Name = &v
	return s
}

func (s *QueryMeshQueueRequest) SetPageCurrent(v int64) *QueryMeshQueueRequest {
	s.PageCurrent = &v
	return s
}

func (s *QueryMeshQueueRequest) SetPageSize(v int64) *QueryMeshQueueRequest {
	s.PageSize = &v
	return s
}

type QueryMeshQueueResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 队列详情以及分页信息
	Data *QueuePageDescDTO `json:"data,omitempty" xml:"data,omitempty"`
	// 状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s QueryMeshQueueResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMeshQueueResponse) GoString() string {
	return s.String()
}

func (s *QueryMeshQueueResponse) SetReqMsgId(v string) *QueryMeshQueueResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMeshQueueResponse) SetResultCode(v string) *QueryMeshQueueResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMeshQueueResponse) SetResultMsg(v string) *QueryMeshQueueResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMeshQueueResponse) SetData(v *QueuePageDescDTO) *QueryMeshQueueResponse {
	s.Data = v
	return s
}

func (s *QueryMeshQueueResponse) SetState(v int64) *QueryMeshQueueResponse {
	s.State = &v
	return s
}

type ImportMeshQueueRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 关联应用名
	AssoApp *string `json:"asso_app,omitempty" xml:"asso_app,omitempty" require:"true"`
	// 通道名
	Channel *string `json:"channel,omitempty" xml:"channel,omitempty" require:"true"`
	// 队列管理器ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty" require:"true"`
	// 队列管理器名
	Manager *string `json:"manager,omitempty" xml:"manager,omitempty" require:"true"`
	// 队列名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 队列管理器端口
	Port *string `json:"port,omitempty" xml:"port,omitempty" require:"true"`
	// 队列类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s ImportMeshQueueRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportMeshQueueRequest) GoString() string {
	return s.String()
}

func (s *ImportMeshQueueRequest) SetAuthToken(v string) *ImportMeshQueueRequest {
	s.AuthToken = &v
	return s
}

func (s *ImportMeshQueueRequest) SetProductInstanceId(v string) *ImportMeshQueueRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ImportMeshQueueRequest) SetAssoApp(v string) *ImportMeshQueueRequest {
	s.AssoApp = &v
	return s
}

func (s *ImportMeshQueueRequest) SetChannel(v string) *ImportMeshQueueRequest {
	s.Channel = &v
	return s
}

func (s *ImportMeshQueueRequest) SetIp(v string) *ImportMeshQueueRequest {
	s.Ip = &v
	return s
}

func (s *ImportMeshQueueRequest) SetManager(v string) *ImportMeshQueueRequest {
	s.Manager = &v
	return s
}

func (s *ImportMeshQueueRequest) SetName(v string) *ImportMeshQueueRequest {
	s.Name = &v
	return s
}

func (s *ImportMeshQueueRequest) SetPort(v string) *ImportMeshQueueRequest {
	s.Port = &v
	return s
}

func (s *ImportMeshQueueRequest) SetType(v string) *ImportMeshQueueRequest {
	s.Type = &v
	return s
}

type ImportMeshQueueResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s ImportMeshQueueResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportMeshQueueResponse) GoString() string {
	return s.String()
}

func (s *ImportMeshQueueResponse) SetReqMsgId(v string) *ImportMeshQueueResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ImportMeshQueueResponse) SetResultCode(v string) *ImportMeshQueueResponse {
	s.ResultCode = &v
	return s
}

func (s *ImportMeshQueueResponse) SetResultMsg(v string) *ImportMeshQueueResponse {
	s.ResultMsg = &v
	return s
}

func (s *ImportMeshQueueResponse) SetState(v int64) *ImportMeshQueueResponse {
	s.State = &v
	return s
}

type DeleteMeshQueueRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 队列id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s DeleteMeshQueueRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeshQueueRequest) GoString() string {
	return s.String()
}

func (s *DeleteMeshQueueRequest) SetAuthToken(v string) *DeleteMeshQueueRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteMeshQueueRequest) SetProductInstanceId(v string) *DeleteMeshQueueRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteMeshQueueRequest) SetId(v int64) *DeleteMeshQueueRequest {
	s.Id = &v
	return s
}

type DeleteMeshQueueResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s DeleteMeshQueueResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeshQueueResponse) GoString() string {
	return s.String()
}

func (s *DeleteMeshQueueResponse) SetReqMsgId(v string) *DeleteMeshQueueResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteMeshQueueResponse) SetResultCode(v string) *DeleteMeshQueueResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteMeshQueueResponse) SetResultMsg(v string) *DeleteMeshQueueResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteMeshQueueResponse) SetState(v int64) *DeleteMeshQueueResponse {
	s.State = &v
	return s
}

type UpdateMeshQueueRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 关联应用名
	AssoApp *string `json:"asso_app,omitempty" xml:"asso_app,omitempty" require:"true"`
	// 通道名
	Channel *string `json:"channel,omitempty" xml:"channel,omitempty" require:"true"`
	// 队列id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 队列管理器ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty" require:"true"`
	// 队列管理器名
	Manager *string `json:"manager,omitempty" xml:"manager,omitempty" require:"true"`
	// 队列名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 队列管理器端口
	Port *string `json:"port,omitempty" xml:"port,omitempty" require:"true"`
	// 队列类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s UpdateMeshQueueRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeshQueueRequest) GoString() string {
	return s.String()
}

func (s *UpdateMeshQueueRequest) SetAuthToken(v string) *UpdateMeshQueueRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateMeshQueueRequest) SetProductInstanceId(v string) *UpdateMeshQueueRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateMeshQueueRequest) SetAssoApp(v string) *UpdateMeshQueueRequest {
	s.AssoApp = &v
	return s
}

func (s *UpdateMeshQueueRequest) SetChannel(v string) *UpdateMeshQueueRequest {
	s.Channel = &v
	return s
}

func (s *UpdateMeshQueueRequest) SetId(v int64) *UpdateMeshQueueRequest {
	s.Id = &v
	return s
}

func (s *UpdateMeshQueueRequest) SetIp(v string) *UpdateMeshQueueRequest {
	s.Ip = &v
	return s
}

func (s *UpdateMeshQueueRequest) SetManager(v string) *UpdateMeshQueueRequest {
	s.Manager = &v
	return s
}

func (s *UpdateMeshQueueRequest) SetName(v string) *UpdateMeshQueueRequest {
	s.Name = &v
	return s
}

func (s *UpdateMeshQueueRequest) SetPort(v string) *UpdateMeshQueueRequest {
	s.Port = &v
	return s
}

func (s *UpdateMeshQueueRequest) SetType(v string) *UpdateMeshQueueRequest {
	s.Type = &v
	return s
}

type UpdateMeshQueueResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回状态码
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s UpdateMeshQueueResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeshQueueResponse) GoString() string {
	return s.String()
}

func (s *UpdateMeshQueueResponse) SetReqMsgId(v string) *UpdateMeshQueueResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateMeshQueueResponse) SetResultCode(v string) *UpdateMeshQueueResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateMeshQueueResponse) SetResultMsg(v string) *UpdateMeshQueueResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateMeshQueueResponse) SetState(v int64) *UpdateMeshQueueResponse {
	s.State = &v
	return s
}

type QueryMeshQueuelimitrulesRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 队列id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 限流规则名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 当前页
	PageCurrent *int64 `json:"page_current,omitempty" xml:"page_current,omitempty" require:"true"`
	// 每页记录数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
}

func (s QueryMeshQueuelimitrulesRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMeshQueuelimitrulesRequest) GoString() string {
	return s.String()
}

func (s *QueryMeshQueuelimitrulesRequest) SetAuthToken(v string) *QueryMeshQueuelimitrulesRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMeshQueuelimitrulesRequest) SetProductInstanceId(v string) *QueryMeshQueuelimitrulesRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMeshQueuelimitrulesRequest) SetId(v string) *QueryMeshQueuelimitrulesRequest {
	s.Id = &v
	return s
}

func (s *QueryMeshQueuelimitrulesRequest) SetName(v string) *QueryMeshQueuelimitrulesRequest {
	s.Name = &v
	return s
}

func (s *QueryMeshQueuelimitrulesRequest) SetPageCurrent(v int64) *QueryMeshQueuelimitrulesRequest {
	s.PageCurrent = &v
	return s
}

func (s *QueryMeshQueuelimitrulesRequest) SetPageSize(v int64) *QueryMeshQueuelimitrulesRequest {
	s.PageSize = &v
	return s
}

type QueryMeshQueuelimitrulesResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 队列规则信息和分页信息
	Data []*QueueLimitRulesPageDTO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s QueryMeshQueuelimitrulesResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMeshQueuelimitrulesResponse) GoString() string {
	return s.String()
}

func (s *QueryMeshQueuelimitrulesResponse) SetReqMsgId(v string) *QueryMeshQueuelimitrulesResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMeshQueuelimitrulesResponse) SetResultCode(v string) *QueryMeshQueuelimitrulesResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMeshQueuelimitrulesResponse) SetResultMsg(v string) *QueryMeshQueuelimitrulesResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMeshQueuelimitrulesResponse) SetData(v []*QueueLimitRulesPageDTO) *QueryMeshQueuelimitrulesResponse {
	s.Data = v
	return s
}

func (s *QueryMeshQueuelimitrulesResponse) SetState(v int64) *QueryMeshQueuelimitrulesResponse {
	s.State = &v
	return s
}

type UpdateSofamqConnectorRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// cron表达式描述任务触发，如果类型是cron的话
	Cron *string `json:"cron,omitempty" xml:"cron,omitempty"`
	// 数据过滤，支持SQL92过滤
	Filter *string `json:"filter,omitempty" xml:"filter,omitempty"`
	// 实例编号
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 任务名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 限流值
	Rate *int64 `json:"rate,omitempty" xml:"rate,omitempty" minimum:"0"`
	// 任务描述
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
	// 去向信息的配置，配置信息数组的 jsonString
	SinkConfigs *string `json:"sink_configs,omitempty" xml:"sink_configs,omitempty" require:"true"`
	// 去向类型
	SinkType *string `json:"sink_type,omitempty" xml:"sink_type,omitempty" require:"true"`
	//
	// 来源的配置项列表，配置数据数组 的JSONString
	SourceConfigs *string `json:"source_configs,omitempty" xml:"source_configs,omitempty" require:"true"`
	// 来源类型
	SourceType *string `json:"source_type,omitempty" xml:"source_type,omitempty" require:"true"`
	// 如果类型是once的话，给定一个unix时间戳
	Time *int64 `json:"time,omitempty" xml:"time,omitempty"`
	// 数据转化配置，转化配置数组的 JSONString
	Transformation *string `json:"transformation,omitempty" xml:"transformation,omitempty"`
	// 任务调度类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 所属应用
	App *string `json:"app,omitempty" xml:"app,omitempty" require:"true"`
	// stepflow_template_id
	StepflowTemplateId *string `json:"stepflow_template_id,omitempty" xml:"stepflow_template_id,omitempty"`
	// 事件订阅的配置，json格式
	EventSubConfigs *string `json:"event_sub_configs,omitempty" xml:"event_sub_configs,omitempty"`
	// 事件订阅是否生效
	EventSubEnabled *bool `json:"event_sub_enabled,omitempty" xml:"event_sub_enabled,omitempty" require:"true"`
	// SLO时间
	AcceptableExecutionInterval *int64 `json:"acceptable_execution_interval,omitempty" xml:"acceptable_execution_interval,omitempty" require:"true"`
	// 是否自动回收实例
	AutoRecycleInstance *bool `json:"auto_recycle_instance,omitempty" xml:"auto_recycle_instance,omitempty"`
}

func (s UpdateSofamqConnectorRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqConnectorRequest) GoString() string {
	return s.String()
}

func (s *UpdateSofamqConnectorRequest) SetAuthToken(v string) *UpdateSofamqConnectorRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSofamqConnectorRequest) SetProductInstanceId(v string) *UpdateSofamqConnectorRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateSofamqConnectorRequest) SetCron(v string) *UpdateSofamqConnectorRequest {
	s.Cron = &v
	return s
}

func (s *UpdateSofamqConnectorRequest) SetFilter(v string) *UpdateSofamqConnectorRequest {
	s.Filter = &v
	return s
}

func (s *UpdateSofamqConnectorRequest) SetInstanceId(v string) *UpdateSofamqConnectorRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateSofamqConnectorRequest) SetName(v string) *UpdateSofamqConnectorRequest {
	s.Name = &v
	return s
}

func (s *UpdateSofamqConnectorRequest) SetRate(v int64) *UpdateSofamqConnectorRequest {
	s.Rate = &v
	return s
}

func (s *UpdateSofamqConnectorRequest) SetRemark(v string) *UpdateSofamqConnectorRequest {
	s.Remark = &v
	return s
}

func (s *UpdateSofamqConnectorRequest) SetSinkConfigs(v string) *UpdateSofamqConnectorRequest {
	s.SinkConfigs = &v
	return s
}

func (s *UpdateSofamqConnectorRequest) SetSinkType(v string) *UpdateSofamqConnectorRequest {
	s.SinkType = &v
	return s
}

func (s *UpdateSofamqConnectorRequest) SetSourceConfigs(v string) *UpdateSofamqConnectorRequest {
	s.SourceConfigs = &v
	return s
}

func (s *UpdateSofamqConnectorRequest) SetSourceType(v string) *UpdateSofamqConnectorRequest {
	s.SourceType = &v
	return s
}

func (s *UpdateSofamqConnectorRequest) SetTime(v int64) *UpdateSofamqConnectorRequest {
	s.Time = &v
	return s
}

func (s *UpdateSofamqConnectorRequest) SetTransformation(v string) *UpdateSofamqConnectorRequest {
	s.Transformation = &v
	return s
}

func (s *UpdateSofamqConnectorRequest) SetType(v string) *UpdateSofamqConnectorRequest {
	s.Type = &v
	return s
}

func (s *UpdateSofamqConnectorRequest) SetApp(v string) *UpdateSofamqConnectorRequest {
	s.App = &v
	return s
}

func (s *UpdateSofamqConnectorRequest) SetStepflowTemplateId(v string) *UpdateSofamqConnectorRequest {
	s.StepflowTemplateId = &v
	return s
}

func (s *UpdateSofamqConnectorRequest) SetEventSubConfigs(v string) *UpdateSofamqConnectorRequest {
	s.EventSubConfigs = &v
	return s
}

func (s *UpdateSofamqConnectorRequest) SetEventSubEnabled(v bool) *UpdateSofamqConnectorRequest {
	s.EventSubEnabled = &v
	return s
}

func (s *UpdateSofamqConnectorRequest) SetAcceptableExecutionInterval(v int64) *UpdateSofamqConnectorRequest {
	s.AcceptableExecutionInterval = &v
	return s
}

func (s *UpdateSofamqConnectorRequest) SetAutoRecycleInstance(v bool) *UpdateSofamqConnectorRequest {
	s.AutoRecycleInstance = &v
	return s
}

type UpdateSofamqConnectorResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s UpdateSofamqConnectorResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqConnectorResponse) GoString() string {
	return s.String()
}

func (s *UpdateSofamqConnectorResponse) SetReqMsgId(v string) *UpdateSofamqConnectorResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSofamqConnectorResponse) SetResultCode(v string) *UpdateSofamqConnectorResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSofamqConnectorResponse) SetResultMsg(v string) *UpdateSofamqConnectorResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateSofamqConnectorResponse) SetErrorReport(v *ErrorReport) *UpdateSofamqConnectorResponse {
	s.ErrorReport = v
	return s
}

type QueryMeshQueuelimitvalueRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 限流规则id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s QueryMeshQueuelimitvalueRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMeshQueuelimitvalueRequest) GoString() string {
	return s.String()
}

func (s *QueryMeshQueuelimitvalueRequest) SetAuthToken(v string) *QueryMeshQueuelimitvalueRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMeshQueuelimitvalueRequest) SetProductInstanceId(v string) *QueryMeshQueuelimitvalueRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMeshQueuelimitvalueRequest) SetId(v int64) *QueryMeshQueuelimitvalueRequest {
	s.Id = &v
	return s
}

type QueryMeshQueuelimitvalueResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 限流域值
	Data []*QueueLimitValueDTO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s QueryMeshQueuelimitvalueResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMeshQueuelimitvalueResponse) GoString() string {
	return s.String()
}

func (s *QueryMeshQueuelimitvalueResponse) SetReqMsgId(v string) *QueryMeshQueuelimitvalueResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMeshQueuelimitvalueResponse) SetResultCode(v string) *QueryMeshQueuelimitvalueResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMeshQueuelimitvalueResponse) SetResultMsg(v string) *QueryMeshQueuelimitvalueResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMeshQueuelimitvalueResponse) SetData(v []*QueueLimitValueDTO) *QueryMeshQueuelimitvalueResponse {
	s.Data = v
	return s
}

func (s *QueryMeshQueuelimitvalueResponse) SetState(v int64) *QueryMeshQueuelimitvalueResponse {
	s.State = &v
	return s
}

type UpdateMeshQueuelimitRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 限流规则id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 队列限流域值
	List []*QueueLimitValueDTO `json:"list,omitempty" xml:"list,omitempty" require:"true" type:"Repeated"`
	// 限流算法
	LAlgorithm *string `json:"l_algorithm,omitempty" xml:"l_algorithm,omitempty" require:"true"`
	// 限流后操作
	LOperation *string `json:"l_operation,omitempty" xml:"l_operation,omitempty" require:"true"`
	// 方法
	Meth *string `json:"meth,omitempty" xml:"meth,omitempty" require:"true"`
	// 限流规则名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 队列id
	QueueId *int64 `json:"queue_id,omitempty" xml:"queue_id,omitempty" require:"true"`
	// 运行模式
	RMode *string `json:"r_mode,omitempty" xml:"r_mode,omitempty" require:"true"`
	// 状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 应用名
	App *string `json:"app,omitempty" xml:"app,omitempty" require:"true"`
}

func (s UpdateMeshQueuelimitRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeshQueuelimitRequest) GoString() string {
	return s.String()
}

func (s *UpdateMeshQueuelimitRequest) SetAuthToken(v string) *UpdateMeshQueuelimitRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateMeshQueuelimitRequest) SetProductInstanceId(v string) *UpdateMeshQueuelimitRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateMeshQueuelimitRequest) SetId(v int64) *UpdateMeshQueuelimitRequest {
	s.Id = &v
	return s
}

func (s *UpdateMeshQueuelimitRequest) SetList(v []*QueueLimitValueDTO) *UpdateMeshQueuelimitRequest {
	s.List = v
	return s
}

func (s *UpdateMeshQueuelimitRequest) SetLAlgorithm(v string) *UpdateMeshQueuelimitRequest {
	s.LAlgorithm = &v
	return s
}

func (s *UpdateMeshQueuelimitRequest) SetLOperation(v string) *UpdateMeshQueuelimitRequest {
	s.LOperation = &v
	return s
}

func (s *UpdateMeshQueuelimitRequest) SetMeth(v string) *UpdateMeshQueuelimitRequest {
	s.Meth = &v
	return s
}

func (s *UpdateMeshQueuelimitRequest) SetName(v string) *UpdateMeshQueuelimitRequest {
	s.Name = &v
	return s
}

func (s *UpdateMeshQueuelimitRequest) SetQueueId(v int64) *UpdateMeshQueuelimitRequest {
	s.QueueId = &v
	return s
}

func (s *UpdateMeshQueuelimitRequest) SetRMode(v string) *UpdateMeshQueuelimitRequest {
	s.RMode = &v
	return s
}

func (s *UpdateMeshQueuelimitRequest) SetStatus(v int64) *UpdateMeshQueuelimitRequest {
	s.Status = &v
	return s
}

func (s *UpdateMeshQueuelimitRequest) SetApp(v string) *UpdateMeshQueuelimitRequest {
	s.App = &v
	return s
}

type UpdateMeshQueuelimitResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s UpdateMeshQueuelimitResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeshQueuelimitResponse) GoString() string {
	return s.String()
}

func (s *UpdateMeshQueuelimitResponse) SetReqMsgId(v string) *UpdateMeshQueuelimitResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateMeshQueuelimitResponse) SetResultCode(v string) *UpdateMeshQueuelimitResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateMeshQueuelimitResponse) SetResultMsg(v string) *UpdateMeshQueuelimitResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateMeshQueuelimitResponse) SetMessage(v string) *UpdateMeshQueuelimitResponse {
	s.Message = &v
	return s
}

func (s *UpdateMeshQueuelimitResponse) SetState(v int64) *UpdateMeshQueuelimitResponse {
	s.State = &v
	return s
}

type ImportMeshQueuelimitRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// id和rule_id为空
	List []*QueueLimitValueDTO `json:"list,omitempty" xml:"list,omitempty" require:"true" type:"Repeated"`
	// 限流算法
	LAlgorithm *string `json:"l_algorithm,omitempty" xml:"l_algorithm,omitempty" require:"true"`
	// 限流后操作
	LOperation *string `json:"l_operation,omitempty" xml:"l_operation,omitempty" require:"true"`
	// 方法
	Meth *string `json:"meth,omitempty" xml:"meth,omitempty" require:"true"`
	// 规则名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 队列id
	QueueId *int64 `json:"queue_id,omitempty" xml:"queue_id,omitempty" require:"true"`
	// 运行模式
	RMode *string `json:"r_mode,omitempty" xml:"r_mode,omitempty" require:"true"`
	// 应用名
	App *string `json:"app,omitempty" xml:"app,omitempty" require:"true"`
}

func (s ImportMeshQueuelimitRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportMeshQueuelimitRequest) GoString() string {
	return s.String()
}

func (s *ImportMeshQueuelimitRequest) SetAuthToken(v string) *ImportMeshQueuelimitRequest {
	s.AuthToken = &v
	return s
}

func (s *ImportMeshQueuelimitRequest) SetProductInstanceId(v string) *ImportMeshQueuelimitRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ImportMeshQueuelimitRequest) SetList(v []*QueueLimitValueDTO) *ImportMeshQueuelimitRequest {
	s.List = v
	return s
}

func (s *ImportMeshQueuelimitRequest) SetLAlgorithm(v string) *ImportMeshQueuelimitRequest {
	s.LAlgorithm = &v
	return s
}

func (s *ImportMeshQueuelimitRequest) SetLOperation(v string) *ImportMeshQueuelimitRequest {
	s.LOperation = &v
	return s
}

func (s *ImportMeshQueuelimitRequest) SetMeth(v string) *ImportMeshQueuelimitRequest {
	s.Meth = &v
	return s
}

func (s *ImportMeshQueuelimitRequest) SetName(v string) *ImportMeshQueuelimitRequest {
	s.Name = &v
	return s
}

func (s *ImportMeshQueuelimitRequest) SetQueueId(v int64) *ImportMeshQueuelimitRequest {
	s.QueueId = &v
	return s
}

func (s *ImportMeshQueuelimitRequest) SetRMode(v string) *ImportMeshQueuelimitRequest {
	s.RMode = &v
	return s
}

func (s *ImportMeshQueuelimitRequest) SetApp(v string) *ImportMeshQueuelimitRequest {
	s.App = &v
	return s
}

type ImportMeshQueuelimitResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s ImportMeshQueuelimitResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportMeshQueuelimitResponse) GoString() string {
	return s.String()
}

func (s *ImportMeshQueuelimitResponse) SetReqMsgId(v string) *ImportMeshQueuelimitResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ImportMeshQueuelimitResponse) SetResultCode(v string) *ImportMeshQueuelimitResponse {
	s.ResultCode = &v
	return s
}

func (s *ImportMeshQueuelimitResponse) SetResultMsg(v string) *ImportMeshQueuelimitResponse {
	s.ResultMsg = &v
	return s
}

func (s *ImportMeshQueuelimitResponse) SetState(v int64) *ImportMeshQueuelimitResponse {
	s.State = &v
	return s
}

type DeleteMeshQueuelimitRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 队列规则id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s DeleteMeshQueuelimitRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeshQueuelimitRequest) GoString() string {
	return s.String()
}

func (s *DeleteMeshQueuelimitRequest) SetAuthToken(v string) *DeleteMeshQueuelimitRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteMeshQueuelimitRequest) SetProductInstanceId(v string) *DeleteMeshQueuelimitRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteMeshQueuelimitRequest) SetId(v int64) *DeleteMeshQueuelimitRequest {
	s.Id = &v
	return s
}

type DeleteMeshQueuelimitResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s DeleteMeshQueuelimitResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeshQueuelimitResponse) GoString() string {
	return s.String()
}

func (s *DeleteMeshQueuelimitResponse) SetReqMsgId(v string) *DeleteMeshQueuelimitResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteMeshQueuelimitResponse) SetResultCode(v string) *DeleteMeshQueuelimitResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteMeshQueuelimitResponse) SetResultMsg(v string) *DeleteMeshQueuelimitResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteMeshQueuelimitResponse) SetState(v int64) *DeleteMeshQueuelimitResponse {
	s.State = &v
	return s
}

type DeleteMeshQueuelimitvalueRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 限流域值id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s DeleteMeshQueuelimitvalueRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeshQueuelimitvalueRequest) GoString() string {
	return s.String()
}

func (s *DeleteMeshQueuelimitvalueRequest) SetAuthToken(v string) *DeleteMeshQueuelimitvalueRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteMeshQueuelimitvalueRequest) SetProductInstanceId(v string) *DeleteMeshQueuelimitvalueRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteMeshQueuelimitvalueRequest) SetId(v int64) *DeleteMeshQueuelimitvalueRequest {
	s.Id = &v
	return s
}

type DeleteMeshQueuelimitvalueResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s DeleteMeshQueuelimitvalueResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeshQueuelimitvalueResponse) GoString() string {
	return s.String()
}

func (s *DeleteMeshQueuelimitvalueResponse) SetReqMsgId(v string) *DeleteMeshQueuelimitvalueResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteMeshQueuelimitvalueResponse) SetResultCode(v string) *DeleteMeshQueuelimitvalueResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteMeshQueuelimitvalueResponse) SetResultMsg(v string) *DeleteMeshQueuelimitvalueResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteMeshQueuelimitvalueResponse) SetState(v int64) *DeleteMeshQueuelimitvalueResponse {
	s.State = &v
	return s
}

type QueryMeshQueuerouterulesRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 队列id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 路由规则名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 当前页码值
	Pagecurrent *int64 `json:"pagecurrent,omitempty" xml:"pagecurrent,omitempty" require:"true"`
	// 页面大小
	Pagesize *int64 `json:"pagesize,omitempty" xml:"pagesize,omitempty" require:"true"`
}

func (s QueryMeshQueuerouterulesRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMeshQueuerouterulesRequest) GoString() string {
	return s.String()
}

func (s *QueryMeshQueuerouterulesRequest) SetAuthToken(v string) *QueryMeshQueuerouterulesRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMeshQueuerouterulesRequest) SetProductInstanceId(v string) *QueryMeshQueuerouterulesRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMeshQueuerouterulesRequest) SetId(v int64) *QueryMeshQueuerouterulesRequest {
	s.Id = &v
	return s
}

func (s *QueryMeshQueuerouterulesRequest) SetName(v string) *QueryMeshQueuerouterulesRequest {
	s.Name = &v
	return s
}

func (s *QueryMeshQueuerouterulesRequest) SetPagecurrent(v int64) *QueryMeshQueuerouterulesRequest {
	s.Pagecurrent = &v
	return s
}

func (s *QueryMeshQueuerouterulesRequest) SetPagesize(v int64) *QueryMeshQueuerouterulesRequest {
	s.Pagesize = &v
	return s
}

type QueryMeshQueuerouterulesResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 路由规则信息
	Data *QueueRouteRulesPageDTO `json:"data,omitempty" xml:"data,omitempty"`
	// 状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s QueryMeshQueuerouterulesResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMeshQueuerouterulesResponse) GoString() string {
	return s.String()
}

func (s *QueryMeshQueuerouterulesResponse) SetReqMsgId(v string) *QueryMeshQueuerouterulesResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMeshQueuerouterulesResponse) SetResultCode(v string) *QueryMeshQueuerouterulesResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMeshQueuerouterulesResponse) SetResultMsg(v string) *QueryMeshQueuerouterulesResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMeshQueuerouterulesResponse) SetData(v *QueueRouteRulesPageDTO) *QueryMeshQueuerouterulesResponse {
	s.Data = v
	return s
}

func (s *QueryMeshQueuerouterulesResponse) SetState(v int64) *QueryMeshQueuerouterulesResponse {
	s.State = &v
	return s
}

type QueryMeshQueuerouteeditionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 路由规则id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s QueryMeshQueuerouteeditionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMeshQueuerouteeditionRequest) GoString() string {
	return s.String()
}

func (s *QueryMeshQueuerouteeditionRequest) SetAuthToken(v string) *QueryMeshQueuerouteeditionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMeshQueuerouteeditionRequest) SetProductInstanceId(v string) *QueryMeshQueuerouteeditionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMeshQueuerouteeditionRequest) SetId(v int64) *QueryMeshQueuerouteeditionRequest {
	s.Id = &v
	return s
}

type QueryMeshQueuerouteeditionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 路由版本
	Data []*QueueRouteEditionDTO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s QueryMeshQueuerouteeditionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMeshQueuerouteeditionResponse) GoString() string {
	return s.String()
}

func (s *QueryMeshQueuerouteeditionResponse) SetReqMsgId(v string) *QueryMeshQueuerouteeditionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMeshQueuerouteeditionResponse) SetResultCode(v string) *QueryMeshQueuerouteeditionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMeshQueuerouteeditionResponse) SetResultMsg(v string) *QueryMeshQueuerouteeditionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMeshQueuerouteeditionResponse) SetData(v []*QueueRouteEditionDTO) *QueryMeshQueuerouteeditionResponse {
	s.Data = v
	return s
}

func (s *QueryMeshQueuerouteeditionResponse) SetState(v int64) *QueryMeshQueuerouteeditionResponse {
	s.State = &v
	return s
}

type ImportMeshQueuerouteRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 应用
	App *string `json:"app,omitempty" xml:"app,omitempty" require:"true"`
	// 队列版本
	List []*QueueRouteEditionDTO `json:"list,omitempty" xml:"list,omitempty" require:"true" type:"Repeated"`
	// 方法
	Meth *string `json:"meth,omitempty" xml:"meth,omitempty" require:"true"`
	// 路由规则名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 队列id
	QueueId *int64 `json:"queue_id,omitempty" xml:"queue_id,omitempty" require:"true"`
	// 路由类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s ImportMeshQueuerouteRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportMeshQueuerouteRequest) GoString() string {
	return s.String()
}

func (s *ImportMeshQueuerouteRequest) SetAuthToken(v string) *ImportMeshQueuerouteRequest {
	s.AuthToken = &v
	return s
}

func (s *ImportMeshQueuerouteRequest) SetProductInstanceId(v string) *ImportMeshQueuerouteRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ImportMeshQueuerouteRequest) SetApp(v string) *ImportMeshQueuerouteRequest {
	s.App = &v
	return s
}

func (s *ImportMeshQueuerouteRequest) SetList(v []*QueueRouteEditionDTO) *ImportMeshQueuerouteRequest {
	s.List = v
	return s
}

func (s *ImportMeshQueuerouteRequest) SetMeth(v string) *ImportMeshQueuerouteRequest {
	s.Meth = &v
	return s
}

func (s *ImportMeshQueuerouteRequest) SetName(v string) *ImportMeshQueuerouteRequest {
	s.Name = &v
	return s
}

func (s *ImportMeshQueuerouteRequest) SetQueueId(v int64) *ImportMeshQueuerouteRequest {
	s.QueueId = &v
	return s
}

func (s *ImportMeshQueuerouteRequest) SetType(v string) *ImportMeshQueuerouteRequest {
	s.Type = &v
	return s
}

type ImportMeshQueuerouteResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s ImportMeshQueuerouteResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportMeshQueuerouteResponse) GoString() string {
	return s.String()
}

func (s *ImportMeshQueuerouteResponse) SetReqMsgId(v string) *ImportMeshQueuerouteResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ImportMeshQueuerouteResponse) SetResultCode(v string) *ImportMeshQueuerouteResponse {
	s.ResultCode = &v
	return s
}

func (s *ImportMeshQueuerouteResponse) SetResultMsg(v string) *ImportMeshQueuerouteResponse {
	s.ResultMsg = &v
	return s
}

func (s *ImportMeshQueuerouteResponse) SetState(v int64) *ImportMeshQueuerouteResponse {
	s.State = &v
	return s
}

type UpdateMeshQueuerouteRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 应用
	App *string `json:"app,omitempty" xml:"app,omitempty" require:"true"`
	// 路由规则id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 版本
	List []*QueueRouteEditionDTO `json:"list,omitempty" xml:"list,omitempty" require:"true" type:"Repeated"`
	// 方法
	Meth *string `json:"meth,omitempty" xml:"meth,omitempty" require:"true"`
	// 路由规则名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 队列id
	QueueId *int64 `json:"queue_id,omitempty" xml:"queue_id,omitempty" require:"true"`
	// 状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 分流开关
	SwitchStatus *int64 `json:"switch_status,omitempty" xml:"switch_status,omitempty" require:"true"`
	// 路由类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s UpdateMeshQueuerouteRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeshQueuerouteRequest) GoString() string {
	return s.String()
}

func (s *UpdateMeshQueuerouteRequest) SetAuthToken(v string) *UpdateMeshQueuerouteRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateMeshQueuerouteRequest) SetProductInstanceId(v string) *UpdateMeshQueuerouteRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateMeshQueuerouteRequest) SetApp(v string) *UpdateMeshQueuerouteRequest {
	s.App = &v
	return s
}

func (s *UpdateMeshQueuerouteRequest) SetId(v int64) *UpdateMeshQueuerouteRequest {
	s.Id = &v
	return s
}

func (s *UpdateMeshQueuerouteRequest) SetList(v []*QueueRouteEditionDTO) *UpdateMeshQueuerouteRequest {
	s.List = v
	return s
}

func (s *UpdateMeshQueuerouteRequest) SetMeth(v string) *UpdateMeshQueuerouteRequest {
	s.Meth = &v
	return s
}

func (s *UpdateMeshQueuerouteRequest) SetName(v string) *UpdateMeshQueuerouteRequest {
	s.Name = &v
	return s
}

func (s *UpdateMeshQueuerouteRequest) SetQueueId(v int64) *UpdateMeshQueuerouteRequest {
	s.QueueId = &v
	return s
}

func (s *UpdateMeshQueuerouteRequest) SetStatus(v int64) *UpdateMeshQueuerouteRequest {
	s.Status = &v
	return s
}

func (s *UpdateMeshQueuerouteRequest) SetSwitchStatus(v int64) *UpdateMeshQueuerouteRequest {
	s.SwitchStatus = &v
	return s
}

func (s *UpdateMeshQueuerouteRequest) SetType(v string) *UpdateMeshQueuerouteRequest {
	s.Type = &v
	return s
}

type UpdateMeshQueuerouteResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s UpdateMeshQueuerouteResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeshQueuerouteResponse) GoString() string {
	return s.String()
}

func (s *UpdateMeshQueuerouteResponse) SetReqMsgId(v string) *UpdateMeshQueuerouteResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateMeshQueuerouteResponse) SetResultCode(v string) *UpdateMeshQueuerouteResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateMeshQueuerouteResponse) SetResultMsg(v string) *UpdateMeshQueuerouteResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateMeshQueuerouteResponse) SetState(v int64) *UpdateMeshQueuerouteResponse {
	s.State = &v
	return s
}

type DeleteMeshQueuerouteRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 路由规则id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s DeleteMeshQueuerouteRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeshQueuerouteRequest) GoString() string {
	return s.String()
}

func (s *DeleteMeshQueuerouteRequest) SetAuthToken(v string) *DeleteMeshQueuerouteRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteMeshQueuerouteRequest) SetProductInstanceId(v string) *DeleteMeshQueuerouteRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteMeshQueuerouteRequest) SetId(v int64) *DeleteMeshQueuerouteRequest {
	s.Id = &v
	return s
}

type DeleteMeshQueuerouteResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s DeleteMeshQueuerouteResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeshQueuerouteResponse) GoString() string {
	return s.String()
}

func (s *DeleteMeshQueuerouteResponse) SetReqMsgId(v string) *DeleteMeshQueuerouteResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteMeshQueuerouteResponse) SetResultCode(v string) *DeleteMeshQueuerouteResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteMeshQueuerouteResponse) SetResultMsg(v string) *DeleteMeshQueuerouteResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteMeshQueuerouteResponse) SetState(v int64) *DeleteMeshQueuerouteResponse {
	s.State = &v
	return s
}

type DeleteMeshQueuerouteeditionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 路由版本id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s DeleteMeshQueuerouteeditionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeshQueuerouteeditionRequest) GoString() string {
	return s.String()
}

func (s *DeleteMeshQueuerouteeditionRequest) SetAuthToken(v string) *DeleteMeshQueuerouteeditionRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteMeshQueuerouteeditionRequest) SetProductInstanceId(v string) *DeleteMeshQueuerouteeditionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteMeshQueuerouteeditionRequest) SetId(v int64) *DeleteMeshQueuerouteeditionRequest {
	s.Id = &v
	return s
}

type DeleteMeshQueuerouteeditionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s DeleteMeshQueuerouteeditionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeshQueuerouteeditionResponse) GoString() string {
	return s.String()
}

func (s *DeleteMeshQueuerouteeditionResponse) SetReqMsgId(v string) *DeleteMeshQueuerouteeditionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteMeshQueuerouteeditionResponse) SetResultCode(v string) *DeleteMeshQueuerouteeditionResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteMeshQueuerouteeditionResponse) SetResultMsg(v string) *DeleteMeshQueuerouteeditionResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteMeshQueuerouteeditionResponse) SetState(v int64) *DeleteMeshQueuerouteeditionResponse {
	s.State = &v
	return s
}

type QueryMeshQueuerouteappRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 队列id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s QueryMeshQueuerouteappRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMeshQueuerouteappRequest) GoString() string {
	return s.String()
}

func (s *QueryMeshQueuerouteappRequest) SetAuthToken(v string) *QueryMeshQueuerouteappRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMeshQueuerouteappRequest) SetProductInstanceId(v string) *QueryMeshQueuerouteappRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMeshQueuerouteappRequest) SetId(v int64) *QueryMeshQueuerouteappRequest {
	s.Id = &v
	return s
}

type QueryMeshQueuerouteappResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用名
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s QueryMeshQueuerouteappResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMeshQueuerouteappResponse) GoString() string {
	return s.String()
}

func (s *QueryMeshQueuerouteappResponse) SetReqMsgId(v string) *QueryMeshQueuerouteappResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMeshQueuerouteappResponse) SetResultCode(v string) *QueryMeshQueuerouteappResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMeshQueuerouteappResponse) SetResultMsg(v string) *QueryMeshQueuerouteappResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMeshQueuerouteappResponse) SetData(v []*string) *QueryMeshQueuerouteappResponse {
	s.Data = v
	return s
}

func (s *QueryMeshQueuerouteappResponse) SetState(v int64) *QueryMeshQueuerouteappResponse {
	s.State = &v
	return s
}

type QueryMeshQueuebyidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 队列id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s QueryMeshQueuebyidRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMeshQueuebyidRequest) GoString() string {
	return s.String()
}

func (s *QueryMeshQueuebyidRequest) SetAuthToken(v string) *QueryMeshQueuebyidRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMeshQueuebyidRequest) SetProductInstanceId(v string) *QueryMeshQueuebyidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMeshQueuebyidRequest) SetId(v int64) *QueryMeshQueuebyidRequest {
	s.Id = &v
	return s
}

type QueryMeshQueuebyidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 关联应用
	AssoApp *string `json:"asso_app,omitempty" xml:"asso_app,omitempty"`
	// 通道名
	Channel *string `json:"channel,omitempty" xml:"channel,omitempty"`
	// 队列管理器ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
	// 队列管理器名
	Manager *string `json:"manager,omitempty" xml:"manager,omitempty"`
	// 队列名
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 队列管理器端口
	Port *string `json:"port,omitempty" xml:"port,omitempty"`
	// 状态码
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
	// 类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s QueryMeshQueuebyidResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMeshQueuebyidResponse) GoString() string {
	return s.String()
}

func (s *QueryMeshQueuebyidResponse) SetReqMsgId(v string) *QueryMeshQueuebyidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMeshQueuebyidResponse) SetResultCode(v string) *QueryMeshQueuebyidResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMeshQueuebyidResponse) SetResultMsg(v string) *QueryMeshQueuebyidResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMeshQueuebyidResponse) SetAssoApp(v string) *QueryMeshQueuebyidResponse {
	s.AssoApp = &v
	return s
}

func (s *QueryMeshQueuebyidResponse) SetChannel(v string) *QueryMeshQueuebyidResponse {
	s.Channel = &v
	return s
}

func (s *QueryMeshQueuebyidResponse) SetIp(v string) *QueryMeshQueuebyidResponse {
	s.Ip = &v
	return s
}

func (s *QueryMeshQueuebyidResponse) SetManager(v string) *QueryMeshQueuebyidResponse {
	s.Manager = &v
	return s
}

func (s *QueryMeshQueuebyidResponse) SetName(v string) *QueryMeshQueuebyidResponse {
	s.Name = &v
	return s
}

func (s *QueryMeshQueuebyidResponse) SetPort(v string) *QueryMeshQueuebyidResponse {
	s.Port = &v
	return s
}

func (s *QueryMeshQueuebyidResponse) SetState(v int64) *QueryMeshQueuebyidResponse {
	s.State = &v
	return s
}

func (s *QueryMeshQueuebyidResponse) SetType(v string) *QueryMeshQueuebyidResponse {
	s.Type = &v
	return s
}

type UpdateMeshQueuelimitstatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 限流规则id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
}

func (s UpdateMeshQueuelimitstatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeshQueuelimitstatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateMeshQueuelimitstatusRequest) SetAuthToken(v string) *UpdateMeshQueuelimitstatusRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateMeshQueuelimitstatusRequest) SetProductInstanceId(v string) *UpdateMeshQueuelimitstatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateMeshQueuelimitstatusRequest) SetId(v int64) *UpdateMeshQueuelimitstatusRequest {
	s.Id = &v
	return s
}

func (s *UpdateMeshQueuelimitstatusRequest) SetStatus(v int64) *UpdateMeshQueuelimitstatusRequest {
	s.Status = &v
	return s
}

type UpdateMeshQueuelimitstatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s UpdateMeshQueuelimitstatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeshQueuelimitstatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateMeshQueuelimitstatusResponse) SetReqMsgId(v string) *UpdateMeshQueuelimitstatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateMeshQueuelimitstatusResponse) SetResultCode(v string) *UpdateMeshQueuelimitstatusResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateMeshQueuelimitstatusResponse) SetResultMsg(v string) *UpdateMeshQueuelimitstatusResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateMeshQueuelimitstatusResponse) SetState(v int64) *UpdateMeshQueuelimitstatusResponse {
	s.State = &v
	return s
}

type UpdateMeshQueueroutestatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 路由规则id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 队列id
	QueueId *int64 `json:"queue_id,omitempty" xml:"queue_id,omitempty" require:"true"`
	// 状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 应用
	App *string `json:"app,omitempty" xml:"app,omitempty" require:"true"`
}

func (s UpdateMeshQueueroutestatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeshQueueroutestatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateMeshQueueroutestatusRequest) SetAuthToken(v string) *UpdateMeshQueueroutestatusRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateMeshQueueroutestatusRequest) SetProductInstanceId(v string) *UpdateMeshQueueroutestatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateMeshQueueroutestatusRequest) SetId(v int64) *UpdateMeshQueueroutestatusRequest {
	s.Id = &v
	return s
}

func (s *UpdateMeshQueueroutestatusRequest) SetQueueId(v int64) *UpdateMeshQueueroutestatusRequest {
	s.QueueId = &v
	return s
}

func (s *UpdateMeshQueueroutestatusRequest) SetStatus(v int64) *UpdateMeshQueueroutestatusRequest {
	s.Status = &v
	return s
}

func (s *UpdateMeshQueueroutestatusRequest) SetApp(v string) *UpdateMeshQueueroutestatusRequest {
	s.App = &v
	return s
}

type UpdateMeshQueueroutestatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s UpdateMeshQueueroutestatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeshQueueroutestatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateMeshQueueroutestatusResponse) SetReqMsgId(v string) *UpdateMeshQueueroutestatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateMeshQueueroutestatusResponse) SetResultCode(v string) *UpdateMeshQueueroutestatusResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateMeshQueueroutestatusResponse) SetResultMsg(v string) *UpdateMeshQueueroutestatusResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateMeshQueueroutestatusResponse) SetState(v int64) *UpdateMeshQueueroutestatusResponse {
	s.State = &v
	return s
}

type UpdateSofamqAdmintopicRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 集群名
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty" require:"true"`
	// 需创建的 Topic 所对应的实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 设置该 Topic 的读写模式。取值说明：6：同时支持读写；4：禁写；2：禁读。
	Perm *int64 `json:"perm,omitempty" xml:"perm,omitempty"`
	// 读队列数
	ReadQueueNum *int64 `json:"read_queue_num,omitempty" xml:"read_queue_num,omitempty"`
	// topic名
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// 写队列数
	WriteQueueNum *int64 `json:"write_queue_num,omitempty" xml:"write_queue_num,omitempty"`
	// 生效范围，三板斧使用
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// 标识该 topic 的消息是否具有优先级
	Priority *bool `json:"priority,omitempty" xml:"priority,omitempty"`
}

func (s UpdateSofamqAdmintopicRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqAdmintopicRequest) GoString() string {
	return s.String()
}

func (s *UpdateSofamqAdmintopicRequest) SetAuthToken(v string) *UpdateSofamqAdmintopicRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSofamqAdmintopicRequest) SetProductInstanceId(v string) *UpdateSofamqAdmintopicRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateSofamqAdmintopicRequest) SetCluster(v string) *UpdateSofamqAdmintopicRequest {
	s.Cluster = &v
	return s
}

func (s *UpdateSofamqAdmintopicRequest) SetInstanceId(v string) *UpdateSofamqAdmintopicRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateSofamqAdmintopicRequest) SetPerm(v int64) *UpdateSofamqAdmintopicRequest {
	s.Perm = &v
	return s
}

func (s *UpdateSofamqAdmintopicRequest) SetReadQueueNum(v int64) *UpdateSofamqAdmintopicRequest {
	s.ReadQueueNum = &v
	return s
}

func (s *UpdateSofamqAdmintopicRequest) SetTopic(v string) *UpdateSofamqAdmintopicRequest {
	s.Topic = &v
	return s
}

func (s *UpdateSofamqAdmintopicRequest) SetWriteQueueNum(v int64) *UpdateSofamqAdmintopicRequest {
	s.WriteQueueNum = &v
	return s
}

func (s *UpdateSofamqAdmintopicRequest) SetScope(v string) *UpdateSofamqAdmintopicRequest {
	s.Scope = &v
	return s
}

func (s *UpdateSofamqAdmintopicRequest) SetPriority(v bool) *UpdateSofamqAdmintopicRequest {
	s.Priority = &v
	return s
}

type UpdateSofamqAdmintopicResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSofamqAdmintopicResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqAdmintopicResponse) GoString() string {
	return s.String()
}

func (s *UpdateSofamqAdmintopicResponse) SetReqMsgId(v string) *UpdateSofamqAdmintopicResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSofamqAdmintopicResponse) SetResultCode(v string) *UpdateSofamqAdmintopicResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSofamqAdmintopicResponse) SetResultMsg(v string) *UpdateSofamqAdmintopicResponse {
	s.ResultMsg = &v
	return s
}

type UpdateSofamqAdmingroupRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 集群名
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty" require:"true"`
	// group名
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 需创建的 Topic 所对应的实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 设置读消息开关
	ReadEnable *bool `json:"read_enable,omitempty" xml:"read_enable,omitempty" require:"true"`
	// 生效范围，三板斧使用
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// 重试队列读队列数
	RetryReadQueueNum *int64 `json:"retry_read_queue_num,omitempty" xml:"retry_read_queue_num,omitempty"`
	// 重试队列写队列数
	RetryWriteQueueNum *int64 `json:"retry_write_queue_num,omitempty" xml:"retry_write_queue_num,omitempty"`
	// 设置该重试队列的读写模式。取值说明：6：同时支持读写；4：禁写；2：禁读。
	RetryPerm *int64 `json:"retry_perm,omitempty" xml:"retry_perm,omitempty"`
}

func (s UpdateSofamqAdmingroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqAdmingroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateSofamqAdmingroupRequest) SetAuthToken(v string) *UpdateSofamqAdmingroupRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSofamqAdmingroupRequest) SetProductInstanceId(v string) *UpdateSofamqAdmingroupRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateSofamqAdmingroupRequest) SetCluster(v string) *UpdateSofamqAdmingroupRequest {
	s.Cluster = &v
	return s
}

func (s *UpdateSofamqAdmingroupRequest) SetGroupId(v string) *UpdateSofamqAdmingroupRequest {
	s.GroupId = &v
	return s
}

func (s *UpdateSofamqAdmingroupRequest) SetInstanceId(v string) *UpdateSofamqAdmingroupRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateSofamqAdmingroupRequest) SetReadEnable(v bool) *UpdateSofamqAdmingroupRequest {
	s.ReadEnable = &v
	return s
}

func (s *UpdateSofamqAdmingroupRequest) SetScope(v string) *UpdateSofamqAdmingroupRequest {
	s.Scope = &v
	return s
}

func (s *UpdateSofamqAdmingroupRequest) SetRetryReadQueueNum(v int64) *UpdateSofamqAdmingroupRequest {
	s.RetryReadQueueNum = &v
	return s
}

func (s *UpdateSofamqAdmingroupRequest) SetRetryWriteQueueNum(v int64) *UpdateSofamqAdmingroupRequest {
	s.RetryWriteQueueNum = &v
	return s
}

func (s *UpdateSofamqAdmingroupRequest) SetRetryPerm(v int64) *UpdateSofamqAdmingroupRequest {
	s.RetryPerm = &v
	return s
}

type UpdateSofamqAdmingroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSofamqAdmingroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqAdmingroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateSofamqAdmingroupResponse) SetReqMsgId(v string) *UpdateSofamqAdmingroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSofamqAdmingroupResponse) SetResultCode(v string) *UpdateSofamqAdmingroupResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSofamqAdmingroupResponse) SetResultMsg(v string) *UpdateSofamqAdmingroupResponse {
	s.ResultMsg = &v
	return s
}

type RunSofamqConnectorjobRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 期望任务执行时间的unix 时间戳，精度是毫秒
	ExecutionTime *int64 `json:"execution_time,omitempty" xml:"execution_time,omitempty"`
	// 任务名
	Job *string `json:"job,omitempty" xml:"job,omitempty" require:"true"`
	// 分区描述
	Partition *string `json:"partition,omitempty" xml:"partition,omitempty"`
	// 租户实例id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// Sink开发分组
	SinkDevGroup *string `json:"sink_dev_group,omitempty" xml:"sink_dev_group,omitempty"`
	// dt=20210910
	SourcePartition *string `json:"source_partition,omitempty" xml:"source_partition,omitempty"`
	// 目标分组
	SinkPartition *string `json:"sink_partition,omitempty" xml:"sink_partition,omitempty"`
	// Source开发分组
	SourceDevGroup *string `json:"source_dev_group,omitempty" xml:"source_dev_group,omitempty"`
}

func (s RunSofamqConnectorjobRequest) String() string {
	return tea.Prettify(s)
}

func (s RunSofamqConnectorjobRequest) GoString() string {
	return s.String()
}

func (s *RunSofamqConnectorjobRequest) SetAuthToken(v string) *RunSofamqConnectorjobRequest {
	s.AuthToken = &v
	return s
}

func (s *RunSofamqConnectorjobRequest) SetProductInstanceId(v string) *RunSofamqConnectorjobRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *RunSofamqConnectorjobRequest) SetExecutionTime(v int64) *RunSofamqConnectorjobRequest {
	s.ExecutionTime = &v
	return s
}

func (s *RunSofamqConnectorjobRequest) SetJob(v string) *RunSofamqConnectorjobRequest {
	s.Job = &v
	return s
}

func (s *RunSofamqConnectorjobRequest) SetPartition(v string) *RunSofamqConnectorjobRequest {
	s.Partition = &v
	return s
}

func (s *RunSofamqConnectorjobRequest) SetInstanceId(v string) *RunSofamqConnectorjobRequest {
	s.InstanceId = &v
	return s
}

func (s *RunSofamqConnectorjobRequest) SetSinkDevGroup(v string) *RunSofamqConnectorjobRequest {
	s.SinkDevGroup = &v
	return s
}

func (s *RunSofamqConnectorjobRequest) SetSourcePartition(v string) *RunSofamqConnectorjobRequest {
	s.SourcePartition = &v
	return s
}

func (s *RunSofamqConnectorjobRequest) SetSinkPartition(v string) *RunSofamqConnectorjobRequest {
	s.SinkPartition = &v
	return s
}

func (s *RunSofamqConnectorjobRequest) SetSourceDevGroup(v string) *RunSofamqConnectorjobRequest {
	s.SourceDevGroup = &v
	return s
}

type RunSofamqConnectorjobResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s RunSofamqConnectorjobResponse) String() string {
	return tea.Prettify(s)
}

func (s RunSofamqConnectorjobResponse) GoString() string {
	return s.String()
}

func (s *RunSofamqConnectorjobResponse) SetReqMsgId(v string) *RunSofamqConnectorjobResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RunSofamqConnectorjobResponse) SetResultCode(v string) *RunSofamqConnectorjobResponse {
	s.ResultCode = &v
	return s
}

func (s *RunSofamqConnectorjobResponse) SetResultMsg(v string) *RunSofamqConnectorjobResponse {
	s.ResultMsg = &v
	return s
}

func (s *RunSofamqConnectorjobResponse) SetErrorReport(v *ErrorReport) *RunSofamqConnectorjobResponse {
	s.ErrorReport = v
	return s
}

type PauseSofamqConnectorjobRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务id
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true"`
	// 所属Connector任务名
	Job *string `json:"job,omitempty" xml:"job,omitempty" require:"true"`
}

func (s PauseSofamqConnectorjobRequest) String() string {
	return tea.Prettify(s)
}

func (s PauseSofamqConnectorjobRequest) GoString() string {
	return s.String()
}

func (s *PauseSofamqConnectorjobRequest) SetAuthToken(v string) *PauseSofamqConnectorjobRequest {
	s.AuthToken = &v
	return s
}

func (s *PauseSofamqConnectorjobRequest) SetProductInstanceId(v string) *PauseSofamqConnectorjobRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PauseSofamqConnectorjobRequest) SetTaskId(v string) *PauseSofamqConnectorjobRequest {
	s.TaskId = &v
	return s
}

func (s *PauseSofamqConnectorjobRequest) SetJob(v string) *PauseSofamqConnectorjobRequest {
	s.Job = &v
	return s
}

type PauseSofamqConnectorjobResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s PauseSofamqConnectorjobResponse) String() string {
	return tea.Prettify(s)
}

func (s PauseSofamqConnectorjobResponse) GoString() string {
	return s.String()
}

func (s *PauseSofamqConnectorjobResponse) SetReqMsgId(v string) *PauseSofamqConnectorjobResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PauseSofamqConnectorjobResponse) SetResultCode(v string) *PauseSofamqConnectorjobResponse {
	s.ResultCode = &v
	return s
}

func (s *PauseSofamqConnectorjobResponse) SetResultMsg(v string) *PauseSofamqConnectorjobResponse {
	s.ResultMsg = &v
	return s
}

func (s *PauseSofamqConnectorjobResponse) SetErrorReport(v *ErrorReport) *PauseSofamqConnectorjobResponse {
	s.ErrorReport = v
	return s
}

type ResumeSofamqConnectorjobRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务id
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true"`
	// Connector任务
	Job *string `json:"job,omitempty" xml:"job,omitempty" require:"true"`
}

func (s ResumeSofamqConnectorjobRequest) String() string {
	return tea.Prettify(s)
}

func (s ResumeSofamqConnectorjobRequest) GoString() string {
	return s.String()
}

func (s *ResumeSofamqConnectorjobRequest) SetAuthToken(v string) *ResumeSofamqConnectorjobRequest {
	s.AuthToken = &v
	return s
}

func (s *ResumeSofamqConnectorjobRequest) SetProductInstanceId(v string) *ResumeSofamqConnectorjobRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ResumeSofamqConnectorjobRequest) SetTaskId(v string) *ResumeSofamqConnectorjobRequest {
	s.TaskId = &v
	return s
}

func (s *ResumeSofamqConnectorjobRequest) SetJob(v string) *ResumeSofamqConnectorjobRequest {
	s.Job = &v
	return s
}

type ResumeSofamqConnectorjobResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s ResumeSofamqConnectorjobResponse) String() string {
	return tea.Prettify(s)
}

func (s ResumeSofamqConnectorjobResponse) GoString() string {
	return s.String()
}

func (s *ResumeSofamqConnectorjobResponse) SetReqMsgId(v string) *ResumeSofamqConnectorjobResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ResumeSofamqConnectorjobResponse) SetResultCode(v string) *ResumeSofamqConnectorjobResponse {
	s.ResultCode = &v
	return s
}

func (s *ResumeSofamqConnectorjobResponse) SetResultMsg(v string) *ResumeSofamqConnectorjobResponse {
	s.ResultMsg = &v
	return s
}

func (s *ResumeSofamqConnectorjobResponse) SetErrorReport(v *ErrorReport) *ResumeSofamqConnectorjobResponse {
	s.ErrorReport = v
	return s
}

type UpdateMeshQueueroutestatusconfirmRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 路由规则id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 队列id
	QueueId *int64 `json:"queue_id,omitempty" xml:"queue_id,omitempty" require:"true"`
	// 状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 应用
	App *string `json:"app,omitempty" xml:"app,omitempty" require:"true"`
}

func (s UpdateMeshQueueroutestatusconfirmRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeshQueueroutestatusconfirmRequest) GoString() string {
	return s.String()
}

func (s *UpdateMeshQueueroutestatusconfirmRequest) SetAuthToken(v string) *UpdateMeshQueueroutestatusconfirmRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateMeshQueueroutestatusconfirmRequest) SetProductInstanceId(v string) *UpdateMeshQueueroutestatusconfirmRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateMeshQueueroutestatusconfirmRequest) SetId(v int64) *UpdateMeshQueueroutestatusconfirmRequest {
	s.Id = &v
	return s
}

func (s *UpdateMeshQueueroutestatusconfirmRequest) SetQueueId(v int64) *UpdateMeshQueueroutestatusconfirmRequest {
	s.QueueId = &v
	return s
}

func (s *UpdateMeshQueueroutestatusconfirmRequest) SetStatus(v int64) *UpdateMeshQueueroutestatusconfirmRequest {
	s.Status = &v
	return s
}

func (s *UpdateMeshQueueroutestatusconfirmRequest) SetApp(v string) *UpdateMeshQueueroutestatusconfirmRequest {
	s.App = &v
	return s
}

type UpdateMeshQueueroutestatusconfirmResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s UpdateMeshQueueroutestatusconfirmResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeshQueueroutestatusconfirmResponse) GoString() string {
	return s.String()
}

func (s *UpdateMeshQueueroutestatusconfirmResponse) SetReqMsgId(v string) *UpdateMeshQueueroutestatusconfirmResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateMeshQueueroutestatusconfirmResponse) SetResultCode(v string) *UpdateMeshQueueroutestatusconfirmResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateMeshQueueroutestatusconfirmResponse) SetResultMsg(v string) *UpdateMeshQueueroutestatusconfirmResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateMeshQueueroutestatusconfirmResponse) SetState(v int64) *UpdateMeshQueueroutestatusconfirmResponse {
	s.State = &v
	return s
}

type UpdateMeshQueuelimitstatusconfirmRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 限流规则id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 限流规则状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 队列id
	QueueId *int64 `json:"queue_id,omitempty" xml:"queue_id,omitempty" require:"true"`
	// 方法
	Meth *string `json:"meth,omitempty" xml:"meth,omitempty" require:"true"`
}

func (s UpdateMeshQueuelimitstatusconfirmRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeshQueuelimitstatusconfirmRequest) GoString() string {
	return s.String()
}

func (s *UpdateMeshQueuelimitstatusconfirmRequest) SetAuthToken(v string) *UpdateMeshQueuelimitstatusconfirmRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateMeshQueuelimitstatusconfirmRequest) SetProductInstanceId(v string) *UpdateMeshQueuelimitstatusconfirmRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateMeshQueuelimitstatusconfirmRequest) SetId(v int64) *UpdateMeshQueuelimitstatusconfirmRequest {
	s.Id = &v
	return s
}

func (s *UpdateMeshQueuelimitstatusconfirmRequest) SetStatus(v int64) *UpdateMeshQueuelimitstatusconfirmRequest {
	s.Status = &v
	return s
}

func (s *UpdateMeshQueuelimitstatusconfirmRequest) SetQueueId(v int64) *UpdateMeshQueuelimitstatusconfirmRequest {
	s.QueueId = &v
	return s
}

func (s *UpdateMeshQueuelimitstatusconfirmRequest) SetMeth(v string) *UpdateMeshQueuelimitstatusconfirmRequest {
	s.Meth = &v
	return s
}

type UpdateMeshQueuelimitstatusconfirmResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s UpdateMeshQueuelimitstatusconfirmResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeshQueuelimitstatusconfirmResponse) GoString() string {
	return s.String()
}

func (s *UpdateMeshQueuelimitstatusconfirmResponse) SetReqMsgId(v string) *UpdateMeshQueuelimitstatusconfirmResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateMeshQueuelimitstatusconfirmResponse) SetResultCode(v string) *UpdateMeshQueuelimitstatusconfirmResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateMeshQueuelimitstatusconfirmResponse) SetResultMsg(v string) *UpdateMeshQueuelimitstatusconfirmResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateMeshQueuelimitstatusconfirmResponse) SetState(v int64) *UpdateMeshQueuelimitstatusconfirmResponse {
	s.State = &v
	return s
}

type ExecSofamqDailycheckRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 单元名
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// group名
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 日切时间点
	CheckTime *int64 `json:"check_time,omitempty" xml:"check_time,omitempty" require:"true"`
	// topic名
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s ExecSofamqDailycheckRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecSofamqDailycheckRequest) GoString() string {
	return s.String()
}

func (s *ExecSofamqDailycheckRequest) SetAuthToken(v string) *ExecSofamqDailycheckRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecSofamqDailycheckRequest) SetProductInstanceId(v string) *ExecSofamqDailycheckRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecSofamqDailycheckRequest) SetCell(v string) *ExecSofamqDailycheckRequest {
	s.Cell = &v
	return s
}

func (s *ExecSofamqDailycheckRequest) SetGroupId(v string) *ExecSofamqDailycheckRequest {
	s.GroupId = &v
	return s
}

func (s *ExecSofamqDailycheckRequest) SetInstanceId(v string) *ExecSofamqDailycheckRequest {
	s.InstanceId = &v
	return s
}

func (s *ExecSofamqDailycheckRequest) SetCheckTime(v int64) *ExecSofamqDailycheckRequest {
	s.CheckTime = &v
	return s
}

func (s *ExecSofamqDailycheckRequest) SetTopic(v string) *ExecSofamqDailycheckRequest {
	s.Topic = &v
	return s
}

type ExecSofamqDailycheckResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否满足日切条件
	CheckStatus *bool `json:"check_status,omitempty" xml:"check_status,omitempty"`
}

func (s ExecSofamqDailycheckResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecSofamqDailycheckResponse) GoString() string {
	return s.String()
}

func (s *ExecSofamqDailycheckResponse) SetReqMsgId(v string) *ExecSofamqDailycheckResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecSofamqDailycheckResponse) SetResultCode(v string) *ExecSofamqDailycheckResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecSofamqDailycheckResponse) SetResultMsg(v string) *ExecSofamqDailycheckResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecSofamqDailycheckResponse) SetCheckStatus(v bool) *ExecSofamqDailycheckResponse {
	s.CheckStatus = &v
	return s
}

type QueryMeshApplicationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 应用名
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 当前页
	PageCurrent *int64 `json:"page_current,omitempty" xml:"page_current,omitempty" require:"true"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
}

func (s QueryMeshApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMeshApplicationRequest) GoString() string {
	return s.String()
}

func (s *QueryMeshApplicationRequest) SetAuthToken(v string) *QueryMeshApplicationRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMeshApplicationRequest) SetProductInstanceId(v string) *QueryMeshApplicationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMeshApplicationRequest) SetName(v string) *QueryMeshApplicationRequest {
	s.Name = &v
	return s
}

func (s *QueryMeshApplicationRequest) SetPageCurrent(v int64) *QueryMeshApplicationRequest {
	s.PageCurrent = &v
	return s
}

func (s *QueryMeshApplicationRequest) SetPageSize(v int64) *QueryMeshApplicationRequest {
	s.PageSize = &v
	return s
}

type QueryMeshApplicationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 页面记录
	Data []*ApplicationPageDescDTO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s QueryMeshApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMeshApplicationResponse) GoString() string {
	return s.String()
}

func (s *QueryMeshApplicationResponse) SetReqMsgId(v string) *QueryMeshApplicationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMeshApplicationResponse) SetResultCode(v string) *QueryMeshApplicationResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMeshApplicationResponse) SetResultMsg(v string) *QueryMeshApplicationResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMeshApplicationResponse) SetData(v []*ApplicationPageDescDTO) *QueryMeshApplicationResponse {
	s.Data = v
	return s
}

func (s *QueryMeshApplicationResponse) SetState(v int64) *QueryMeshApplicationResponse {
	s.State = &v
	return s
}

type ImportMeshApplicationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 应用id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 应用名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 服务端get队列
	PubGetQueue *string `json:"pub_get_queue,omitempty" xml:"pub_get_queue,omitempty"`
	// 服务端put队列
	PubPutQueue *string `json:"pub_put_queue,omitempty" xml:"pub_put_queue,omitempty"`
	// 服务端rpc开关
	PubRpcStatus *int64 `json:"pub_rpc_status,omitempty" xml:"pub_rpc_status,omitempty"`
	// 客户端get队列
	SubGetQueue *string `json:"sub_get_queue,omitempty" xml:"sub_get_queue,omitempty"`
	// 客户端put队列
	SubPutQueue *string `json:"sub_put_queue,omitempty" xml:"sub_put_queue,omitempty"`
	// 客户端rpc分流比例
	SubRpcScale *int64 `json:"sub_rpc_scale,omitempty" xml:"sub_rpc_scale,omitempty"`
	// 服务类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 服务id列表
	List []*ApplicationServiceDTO `json:"list,omitempty" xml:"list,omitempty" require:"true" type:"Repeated"`
}

func (s ImportMeshApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportMeshApplicationRequest) GoString() string {
	return s.String()
}

func (s *ImportMeshApplicationRequest) SetAuthToken(v string) *ImportMeshApplicationRequest {
	s.AuthToken = &v
	return s
}

func (s *ImportMeshApplicationRequest) SetProductInstanceId(v string) *ImportMeshApplicationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ImportMeshApplicationRequest) SetId(v int64) *ImportMeshApplicationRequest {
	s.Id = &v
	return s
}

func (s *ImportMeshApplicationRequest) SetName(v string) *ImportMeshApplicationRequest {
	s.Name = &v
	return s
}

func (s *ImportMeshApplicationRequest) SetPubGetQueue(v string) *ImportMeshApplicationRequest {
	s.PubGetQueue = &v
	return s
}

func (s *ImportMeshApplicationRequest) SetPubPutQueue(v string) *ImportMeshApplicationRequest {
	s.PubPutQueue = &v
	return s
}

func (s *ImportMeshApplicationRequest) SetPubRpcStatus(v int64) *ImportMeshApplicationRequest {
	s.PubRpcStatus = &v
	return s
}

func (s *ImportMeshApplicationRequest) SetSubGetQueue(v string) *ImportMeshApplicationRequest {
	s.SubGetQueue = &v
	return s
}

func (s *ImportMeshApplicationRequest) SetSubPutQueue(v string) *ImportMeshApplicationRequest {
	s.SubPutQueue = &v
	return s
}

func (s *ImportMeshApplicationRequest) SetSubRpcScale(v int64) *ImportMeshApplicationRequest {
	s.SubRpcScale = &v
	return s
}

func (s *ImportMeshApplicationRequest) SetType(v string) *ImportMeshApplicationRequest {
	s.Type = &v
	return s
}

func (s *ImportMeshApplicationRequest) SetList(v []*ApplicationServiceDTO) *ImportMeshApplicationRequest {
	s.List = v
	return s
}

type ImportMeshApplicationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s ImportMeshApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportMeshApplicationResponse) GoString() string {
	return s.String()
}

func (s *ImportMeshApplicationResponse) SetReqMsgId(v string) *ImportMeshApplicationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ImportMeshApplicationResponse) SetResultCode(v string) *ImportMeshApplicationResponse {
	s.ResultCode = &v
	return s
}

func (s *ImportMeshApplicationResponse) SetResultMsg(v string) *ImportMeshApplicationResponse {
	s.ResultMsg = &v
	return s
}

func (s *ImportMeshApplicationResponse) SetState(v int64) *ImportMeshApplicationResponse {
	s.State = &v
	return s
}

type UpdateMeshApplicationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 应用id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 服务id
	List []*ApplicationServiceDTO `json:"list,omitempty" xml:"list,omitempty" require:"true" type:"Repeated"`
	// 应用名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 服务度get队列
	PubGetQueue *string `json:"pub_get_queue,omitempty" xml:"pub_get_queue,omitempty"`
	// 服务端put队列
	PubPutQueue *string `json:"pub_put_queue,omitempty" xml:"pub_put_queue,omitempty"`
	// 服务端开关
	PubRpcStatus *int64 `json:"pub_rpc_status,omitempty" xml:"pub_rpc_status,omitempty"`
	// 客户端get队列
	SubGetQueue *string `json:"sub_get_queue,omitempty" xml:"sub_get_queue,omitempty"`
	// 客户端put队列
	SubPutQueue *string `json:"sub_put_queue,omitempty" xml:"sub_put_queue,omitempty"`
	// 客户端rpc比例
	SubRpcScale *int64 `json:"sub_rpc_scale,omitempty" xml:"sub_rpc_scale,omitempty"`
	// 服务类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s UpdateMeshApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeshApplicationRequest) GoString() string {
	return s.String()
}

func (s *UpdateMeshApplicationRequest) SetAuthToken(v string) *UpdateMeshApplicationRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateMeshApplicationRequest) SetProductInstanceId(v string) *UpdateMeshApplicationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateMeshApplicationRequest) SetId(v int64) *UpdateMeshApplicationRequest {
	s.Id = &v
	return s
}

func (s *UpdateMeshApplicationRequest) SetList(v []*ApplicationServiceDTO) *UpdateMeshApplicationRequest {
	s.List = v
	return s
}

func (s *UpdateMeshApplicationRequest) SetName(v string) *UpdateMeshApplicationRequest {
	s.Name = &v
	return s
}

func (s *UpdateMeshApplicationRequest) SetPubGetQueue(v string) *UpdateMeshApplicationRequest {
	s.PubGetQueue = &v
	return s
}

func (s *UpdateMeshApplicationRequest) SetPubPutQueue(v string) *UpdateMeshApplicationRequest {
	s.PubPutQueue = &v
	return s
}

func (s *UpdateMeshApplicationRequest) SetPubRpcStatus(v int64) *UpdateMeshApplicationRequest {
	s.PubRpcStatus = &v
	return s
}

func (s *UpdateMeshApplicationRequest) SetSubGetQueue(v string) *UpdateMeshApplicationRequest {
	s.SubGetQueue = &v
	return s
}

func (s *UpdateMeshApplicationRequest) SetSubPutQueue(v string) *UpdateMeshApplicationRequest {
	s.SubPutQueue = &v
	return s
}

func (s *UpdateMeshApplicationRequest) SetSubRpcScale(v int64) *UpdateMeshApplicationRequest {
	s.SubRpcScale = &v
	return s
}

func (s *UpdateMeshApplicationRequest) SetType(v string) *UpdateMeshApplicationRequest {
	s.Type = &v
	return s
}

type UpdateMeshApplicationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s UpdateMeshApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeshApplicationResponse) GoString() string {
	return s.String()
}

func (s *UpdateMeshApplicationResponse) SetReqMsgId(v string) *UpdateMeshApplicationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateMeshApplicationResponse) SetResultCode(v string) *UpdateMeshApplicationResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateMeshApplicationResponse) SetResultMsg(v string) *UpdateMeshApplicationResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateMeshApplicationResponse) SetState(v int64) *UpdateMeshApplicationResponse {
	s.State = &v
	return s
}

type DeleteMeshApplicationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 应用id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s DeleteMeshApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeshApplicationRequest) GoString() string {
	return s.String()
}

func (s *DeleteMeshApplicationRequest) SetAuthToken(v string) *DeleteMeshApplicationRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteMeshApplicationRequest) SetProductInstanceId(v string) *DeleteMeshApplicationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteMeshApplicationRequest) SetId(v int64) *DeleteMeshApplicationRequest {
	s.Id = &v
	return s
}

type DeleteMeshApplicationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s DeleteMeshApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeshApplicationResponse) GoString() string {
	return s.String()
}

func (s *DeleteMeshApplicationResponse) SetReqMsgId(v string) *DeleteMeshApplicationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteMeshApplicationResponse) SetResultCode(v string) *DeleteMeshApplicationResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteMeshApplicationResponse) SetResultMsg(v string) *DeleteMeshApplicationResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteMeshApplicationResponse) SetState(v int64) *DeleteMeshApplicationResponse {
	s.State = &v
	return s
}

type QueryMeshApplicationserviceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 应用id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s QueryMeshApplicationserviceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMeshApplicationserviceRequest) GoString() string {
	return s.String()
}

func (s *QueryMeshApplicationserviceRequest) SetAuthToken(v string) *QueryMeshApplicationserviceRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMeshApplicationserviceRequest) SetProductInstanceId(v string) *QueryMeshApplicationserviceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMeshApplicationserviceRequest) SetId(v int64) *QueryMeshApplicationserviceRequest {
	s.Id = &v
	return s
}

type QueryMeshApplicationserviceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 服务信息
	Data []*ApplicationServiceDTO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 返回状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s QueryMeshApplicationserviceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMeshApplicationserviceResponse) GoString() string {
	return s.String()
}

func (s *QueryMeshApplicationserviceResponse) SetReqMsgId(v string) *QueryMeshApplicationserviceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMeshApplicationserviceResponse) SetResultCode(v string) *QueryMeshApplicationserviceResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMeshApplicationserviceResponse) SetResultMsg(v string) *QueryMeshApplicationserviceResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMeshApplicationserviceResponse) SetData(v []*ApplicationServiceDTO) *QueryMeshApplicationserviceResponse {
	s.Data = v
	return s
}

func (s *QueryMeshApplicationserviceResponse) SetState(v int64) *QueryMeshApplicationserviceResponse {
	s.State = &v
	return s
}

type QueryMeshApplicationbynameRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 应用名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s QueryMeshApplicationbynameRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMeshApplicationbynameRequest) GoString() string {
	return s.String()
}

func (s *QueryMeshApplicationbynameRequest) SetAuthToken(v string) *QueryMeshApplicationbynameRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMeshApplicationbynameRequest) SetProductInstanceId(v string) *QueryMeshApplicationbynameRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMeshApplicationbynameRequest) SetName(v string) *QueryMeshApplicationbynameRequest {
	s.Name = &v
	return s
}

type QueryMeshApplicationbynameResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建日期
	GmtCreated *string `json:"gmt_created,omitempty" xml:"gmt_created,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 应用id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// 应用名
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 服务端get队列
	PubGetQueue *string `json:"pub_get_queue,omitempty" xml:"pub_get_queue,omitempty"`
	// 服务端put队列
	PubPutQueue *string `json:"pub_put_queue,omitempty" xml:"pub_put_queue,omitempty"`
	// 服务端rpc开关
	PubRpcStatus *int64 `json:"pub_rpc_status,omitempty" xml:"pub_rpc_status,omitempty"`
	// 返回状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
	// 客户端get队列
	SubGetQueue *string `json:"sub_get_queue,omitempty" xml:"sub_get_queue,omitempty"`
	// 客户端put队列
	SubPutQueue *string `json:"sub_put_queue,omitempty" xml:"sub_put_queue,omitempty"`
	// 客户端rpc比例
	SubRpcScale *int64 `json:"sub_rpc_scale,omitempty" xml:"sub_rpc_scale,omitempty"`
	// 服务类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s QueryMeshApplicationbynameResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMeshApplicationbynameResponse) GoString() string {
	return s.String()
}

func (s *QueryMeshApplicationbynameResponse) SetReqMsgId(v string) *QueryMeshApplicationbynameResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMeshApplicationbynameResponse) SetResultCode(v string) *QueryMeshApplicationbynameResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMeshApplicationbynameResponse) SetResultMsg(v string) *QueryMeshApplicationbynameResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMeshApplicationbynameResponse) SetGmtCreated(v string) *QueryMeshApplicationbynameResponse {
	s.GmtCreated = &v
	return s
}

func (s *QueryMeshApplicationbynameResponse) SetId(v int64) *QueryMeshApplicationbynameResponse {
	s.Id = &v
	return s
}

func (s *QueryMeshApplicationbynameResponse) SetName(v string) *QueryMeshApplicationbynameResponse {
	s.Name = &v
	return s
}

func (s *QueryMeshApplicationbynameResponse) SetPubGetQueue(v string) *QueryMeshApplicationbynameResponse {
	s.PubGetQueue = &v
	return s
}

func (s *QueryMeshApplicationbynameResponse) SetPubPutQueue(v string) *QueryMeshApplicationbynameResponse {
	s.PubPutQueue = &v
	return s
}

func (s *QueryMeshApplicationbynameResponse) SetPubRpcStatus(v int64) *QueryMeshApplicationbynameResponse {
	s.PubRpcStatus = &v
	return s
}

func (s *QueryMeshApplicationbynameResponse) SetState(v int64) *QueryMeshApplicationbynameResponse {
	s.State = &v
	return s
}

func (s *QueryMeshApplicationbynameResponse) SetSubGetQueue(v string) *QueryMeshApplicationbynameResponse {
	s.SubGetQueue = &v
	return s
}

func (s *QueryMeshApplicationbynameResponse) SetSubPutQueue(v string) *QueryMeshApplicationbynameResponse {
	s.SubPutQueue = &v
	return s
}

func (s *QueryMeshApplicationbynameResponse) SetSubRpcScale(v int64) *QueryMeshApplicationbynameResponse {
	s.SubRpcScale = &v
	return s
}

func (s *QueryMeshApplicationbynameResponse) SetType(v string) *QueryMeshApplicationbynameResponse {
	s.Type = &v
	return s
}

type QueryMeshApplicationlistRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 队列id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 队列名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s QueryMeshApplicationlistRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMeshApplicationlistRequest) GoString() string {
	return s.String()
}

func (s *QueryMeshApplicationlistRequest) SetAuthToken(v string) *QueryMeshApplicationlistRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMeshApplicationlistRequest) SetProductInstanceId(v string) *QueryMeshApplicationlistRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryMeshApplicationlistRequest) SetId(v int64) *QueryMeshApplicationlistRequest {
	s.Id = &v
	return s
}

func (s *QueryMeshApplicationlistRequest) SetName(v string) *QueryMeshApplicationlistRequest {
	s.Name = &v
	return s
}

type QueryMeshApplicationlistResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 队列应用列表
	List []*string `json:"list,omitempty" xml:"list,omitempty" type:"Repeated"`
	// 返回状态
	State *int64 `json:"state,omitempty" xml:"state,omitempty"`
}

func (s QueryMeshApplicationlistResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMeshApplicationlistResponse) GoString() string {
	return s.String()
}

func (s *QueryMeshApplicationlistResponse) SetReqMsgId(v string) *QueryMeshApplicationlistResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMeshApplicationlistResponse) SetResultCode(v string) *QueryMeshApplicationlistResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMeshApplicationlistResponse) SetResultMsg(v string) *QueryMeshApplicationlistResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMeshApplicationlistResponse) SetList(v []*string) *QueryMeshApplicationlistResponse {
	s.List = v
	return s
}

func (s *QueryMeshApplicationlistResponse) SetState(v int64) *QueryMeshApplicationlistResponse {
	s.State = &v
	return s
}

type QueryMeshApplicationqueuenamesRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
}

func (s QueryMeshApplicationqueuenamesRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMeshApplicationqueuenamesRequest) GoString() string {
	return s.String()
}

func (s *QueryMeshApplicationqueuenamesRequest) SetAuthToken(v string) *QueryMeshApplicationqueuenamesRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMeshApplicationqueuenamesRequest) SetProductInstanceId(v string) *QueryMeshApplicationqueuenamesRequest {
	s.ProductInstanceId = &v
	return s
}

type QueryMeshApplicationqueuenamesResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用列表
	List []*string `json:"list,omitempty" xml:"list,omitempty" type:"Repeated"`
}

func (s QueryMeshApplicationqueuenamesResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMeshApplicationqueuenamesResponse) GoString() string {
	return s.String()
}

func (s *QueryMeshApplicationqueuenamesResponse) SetReqMsgId(v string) *QueryMeshApplicationqueuenamesResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMeshApplicationqueuenamesResponse) SetResultCode(v string) *QueryMeshApplicationqueuenamesResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMeshApplicationqueuenamesResponse) SetResultMsg(v string) *QueryMeshApplicationqueuenamesResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMeshApplicationqueuenamesResponse) SetList(v []*string) *QueryMeshApplicationqueuenamesResponse {
	s.List = v
	return s
}

type PauseSofamqConnectorplanRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 执行计划的Id
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty" require:"true"`
	// Connector任务名
	Job *string `json:"job,omitempty" xml:"job,omitempty" require:"true"`
}

func (s PauseSofamqConnectorplanRequest) String() string {
	return tea.Prettify(s)
}

func (s PauseSofamqConnectorplanRequest) GoString() string {
	return s.String()
}

func (s *PauseSofamqConnectorplanRequest) SetAuthToken(v string) *PauseSofamqConnectorplanRequest {
	s.AuthToken = &v
	return s
}

func (s *PauseSofamqConnectorplanRequest) SetProductInstanceId(v string) *PauseSofamqConnectorplanRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PauseSofamqConnectorplanRequest) SetPlanId(v string) *PauseSofamqConnectorplanRequest {
	s.PlanId = &v
	return s
}

func (s *PauseSofamqConnectorplanRequest) SetJob(v string) *PauseSofamqConnectorplanRequest {
	s.Job = &v
	return s
}

type PauseSofamqConnectorplanResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s PauseSofamqConnectorplanResponse) String() string {
	return tea.Prettify(s)
}

func (s PauseSofamqConnectorplanResponse) GoString() string {
	return s.String()
}

func (s *PauseSofamqConnectorplanResponse) SetReqMsgId(v string) *PauseSofamqConnectorplanResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PauseSofamqConnectorplanResponse) SetResultCode(v string) *PauseSofamqConnectorplanResponse {
	s.ResultCode = &v
	return s
}

func (s *PauseSofamqConnectorplanResponse) SetResultMsg(v string) *PauseSofamqConnectorplanResponse {
	s.ResultMsg = &v
	return s
}

func (s *PauseSofamqConnectorplanResponse) SetErrorReport(v *ErrorReport) *PauseSofamqConnectorplanResponse {
	s.ErrorReport = v
	return s
}

type ResumeSofamqConnectorplanRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// connector任务执行计划Id
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty" require:"true"`
	// Connector任务名
	Job *string `json:"job,omitempty" xml:"job,omitempty" require:"true"`
}

func (s ResumeSofamqConnectorplanRequest) String() string {
	return tea.Prettify(s)
}

func (s ResumeSofamqConnectorplanRequest) GoString() string {
	return s.String()
}

func (s *ResumeSofamqConnectorplanRequest) SetAuthToken(v string) *ResumeSofamqConnectorplanRequest {
	s.AuthToken = &v
	return s
}

func (s *ResumeSofamqConnectorplanRequest) SetProductInstanceId(v string) *ResumeSofamqConnectorplanRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ResumeSofamqConnectorplanRequest) SetPlanId(v string) *ResumeSofamqConnectorplanRequest {
	s.PlanId = &v
	return s
}

func (s *ResumeSofamqConnectorplanRequest) SetJob(v string) *ResumeSofamqConnectorplanRequest {
	s.Job = &v
	return s
}

type ResumeSofamqConnectorplanResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s ResumeSofamqConnectorplanResponse) String() string {
	return tea.Prettify(s)
}

func (s ResumeSofamqConnectorplanResponse) GoString() string {
	return s.String()
}

func (s *ResumeSofamqConnectorplanResponse) SetReqMsgId(v string) *ResumeSofamqConnectorplanResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ResumeSofamqConnectorplanResponse) SetResultCode(v string) *ResumeSofamqConnectorplanResponse {
	s.ResultCode = &v
	return s
}

func (s *ResumeSofamqConnectorplanResponse) SetResultMsg(v string) *ResumeSofamqConnectorplanResponse {
	s.ResultMsg = &v
	return s
}

func (s *ResumeSofamqConnectorplanResponse) SetErrorReport(v *ErrorReport) *ResumeSofamqConnectorplanResponse {
	s.ErrorReport = v
	return s
}

type RetrySofamqConnectorplanRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// connector任务执行计划
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty" require:"true"`
	// Connector任务
	Job *string `json:"job,omitempty" xml:"job,omitempty" require:"true"`
}

func (s RetrySofamqConnectorplanRequest) String() string {
	return tea.Prettify(s)
}

func (s RetrySofamqConnectorplanRequest) GoString() string {
	return s.String()
}

func (s *RetrySofamqConnectorplanRequest) SetAuthToken(v string) *RetrySofamqConnectorplanRequest {
	s.AuthToken = &v
	return s
}

func (s *RetrySofamqConnectorplanRequest) SetProductInstanceId(v string) *RetrySofamqConnectorplanRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *RetrySofamqConnectorplanRequest) SetPlanId(v string) *RetrySofamqConnectorplanRequest {
	s.PlanId = &v
	return s
}

func (s *RetrySofamqConnectorplanRequest) SetJob(v string) *RetrySofamqConnectorplanRequest {
	s.Job = &v
	return s
}

type RetrySofamqConnectorplanResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s RetrySofamqConnectorplanResponse) String() string {
	return tea.Prettify(s)
}

func (s RetrySofamqConnectorplanResponse) GoString() string {
	return s.String()
}

func (s *RetrySofamqConnectorplanResponse) SetReqMsgId(v string) *RetrySofamqConnectorplanResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RetrySofamqConnectorplanResponse) SetResultCode(v string) *RetrySofamqConnectorplanResponse {
	s.ResultCode = &v
	return s
}

func (s *RetrySofamqConnectorplanResponse) SetResultMsg(v string) *RetrySofamqConnectorplanResponse {
	s.ResultMsg = &v
	return s
}

func (s *RetrySofamqConnectorplanResponse) SetErrorReport(v *ErrorReport) *RetrySofamqConnectorplanResponse {
	s.ErrorReport = v
	return s
}

type QuerySofamqConnectorconfigsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 租户名称
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 任务名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 代表查询的配置 是source还是sink
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 是否是克隆模式
	Clone *bool `json:"clone,omitempty" xml:"clone,omitempty"`
}

func (s QuerySofamqConnectorconfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConnectorconfigsRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqConnectorconfigsRequest) SetAuthToken(v string) *QuerySofamqConnectorconfigsRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqConnectorconfigsRequest) SetProductInstanceId(v string) *QuerySofamqConnectorconfigsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqConnectorconfigsRequest) SetInstanceId(v string) *QuerySofamqConnectorconfigsRequest {
	s.InstanceId = &v
	return s
}

func (s *QuerySofamqConnectorconfigsRequest) SetName(v string) *QuerySofamqConnectorconfigsRequest {
	s.Name = &v
	return s
}

func (s *QuerySofamqConnectorconfigsRequest) SetType(v string) *QuerySofamqConnectorconfigsRequest {
	s.Type = &v
	return s
}

func (s *QuerySofamqConnectorconfigsRequest) SetClone(v bool) *QuerySofamqConnectorconfigsRequest {
	s.Clone = &v
	return s
}

type QuerySofamqConnectorconfigsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 该任务 来源或去向的配置信息，包括是否可以修改，已经每个配置项如何修改的控件
	Configs []*UIControlModel `json:"configs,omitempty" xml:"configs,omitempty" type:"Repeated"`
	// 错误报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s QuerySofamqConnectorconfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConnectorconfigsResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqConnectorconfigsResponse) SetReqMsgId(v string) *QuerySofamqConnectorconfigsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqConnectorconfigsResponse) SetResultCode(v string) *QuerySofamqConnectorconfigsResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqConnectorconfigsResponse) SetResultMsg(v string) *QuerySofamqConnectorconfigsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqConnectorconfigsResponse) SetConfigs(v []*UIControlModel) *QuerySofamqConnectorconfigsResponse {
	s.Configs = v
	return s
}

func (s *QuerySofamqConnectorconfigsResponse) SetErrorReport(v *ErrorReport) *QuerySofamqConnectorconfigsResponse {
	s.ErrorReport = v
	return s
}

type CreateSofamqConsumelimiterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 限流资源名，由 GROUP@TOPIC 组成
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 限流类型
	// - UNIT：单元限流，指定单元/CELL限流
	LimiterType *string `json:"limiter_type,omitempty" xml:"limiter_type,omitempty" require:"true"`
	// 限流值配置，BASE 为基准限流值。
	Tps *string `json:"tps,omitempty" xml:"tps,omitempty" require:"true"`
}

func (s CreateSofamqConsumelimiterRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqConsumelimiterRequest) GoString() string {
	return s.String()
}

func (s *CreateSofamqConsumelimiterRequest) SetAuthToken(v string) *CreateSofamqConsumelimiterRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSofamqConsumelimiterRequest) SetProductInstanceId(v string) *CreateSofamqConsumelimiterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSofamqConsumelimiterRequest) SetInstanceId(v string) *CreateSofamqConsumelimiterRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateSofamqConsumelimiterRequest) SetName(v string) *CreateSofamqConsumelimiterRequest {
	s.Name = &v
	return s
}

func (s *CreateSofamqConsumelimiterRequest) SetLimiterType(v string) *CreateSofamqConsumelimiterRequest {
	s.LimiterType = &v
	return s
}

func (s *CreateSofamqConsumelimiterRequest) SetTps(v string) *CreateSofamqConsumelimiterRequest {
	s.Tps = &v
	return s
}

type CreateSofamqConsumelimiterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateSofamqConsumelimiterResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqConsumelimiterResponse) GoString() string {
	return s.String()
}

func (s *CreateSofamqConsumelimiterResponse) SetReqMsgId(v string) *CreateSofamqConsumelimiterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSofamqConsumelimiterResponse) SetResultCode(v string) *CreateSofamqConsumelimiterResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSofamqConsumelimiterResponse) SetResultMsg(v string) *CreateSofamqConsumelimiterResponse {
	s.ResultMsg = &v
	return s
}

type UpdateSofamqConsumelimiterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例ID
	//
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 限流类型 - UNIT：单元限流，指定单元/CELL限流
	//
	LimiterType *string `json:"limiter_type,omitempty" xml:"limiter_type,omitempty" require:"true"`
	// 限流资源名，由 GROUP@TOPIC 组成
	//
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 限流值配置，BASE 为基准限流值。
	Tps *string `json:"tps,omitempty" xml:"tps,omitempty" require:"true"`
}

func (s UpdateSofamqConsumelimiterRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqConsumelimiterRequest) GoString() string {
	return s.String()
}

func (s *UpdateSofamqConsumelimiterRequest) SetAuthToken(v string) *UpdateSofamqConsumelimiterRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSofamqConsumelimiterRequest) SetProductInstanceId(v string) *UpdateSofamqConsumelimiterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateSofamqConsumelimiterRequest) SetInstanceId(v string) *UpdateSofamqConsumelimiterRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateSofamqConsumelimiterRequest) SetLimiterType(v string) *UpdateSofamqConsumelimiterRequest {
	s.LimiterType = &v
	return s
}

func (s *UpdateSofamqConsumelimiterRequest) SetName(v string) *UpdateSofamqConsumelimiterRequest {
	s.Name = &v
	return s
}

func (s *UpdateSofamqConsumelimiterRequest) SetTps(v string) *UpdateSofamqConsumelimiterRequest {
	s.Tps = &v
	return s
}

type UpdateSofamqConsumelimiterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSofamqConsumelimiterResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqConsumelimiterResponse) GoString() string {
	return s.String()
}

func (s *UpdateSofamqConsumelimiterResponse) SetReqMsgId(v string) *UpdateSofamqConsumelimiterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSofamqConsumelimiterResponse) SetResultCode(v string) *UpdateSofamqConsumelimiterResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSofamqConsumelimiterResponse) SetResultMsg(v string) *UpdateSofamqConsumelimiterResponse {
	s.ResultMsg = &v
	return s
}

type DeleteSofamqConsumelimiterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 限流资源名，由 GROUP@TOPIC 组成
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s DeleteSofamqConsumelimiterRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqConsumelimiterRequest) GoString() string {
	return s.String()
}

func (s *DeleteSofamqConsumelimiterRequest) SetAuthToken(v string) *DeleteSofamqConsumelimiterRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSofamqConsumelimiterRequest) SetProductInstanceId(v string) *DeleteSofamqConsumelimiterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteSofamqConsumelimiterRequest) SetInstanceId(v string) *DeleteSofamqConsumelimiterRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteSofamqConsumelimiterRequest) SetName(v string) *DeleteSofamqConsumelimiterRequest {
	s.Name = &v
	return s
}

type DeleteSofamqConsumelimiterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSofamqConsumelimiterResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqConsumelimiterResponse) GoString() string {
	return s.String()
}

func (s *DeleteSofamqConsumelimiterResponse) SetReqMsgId(v string) *DeleteSofamqConsumelimiterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSofamqConsumelimiterResponse) SetResultCode(v string) *DeleteSofamqConsumelimiterResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSofamqConsumelimiterResponse) SetResultMsg(v string) *DeleteSofamqConsumelimiterResponse {
	s.ResultMsg = &v
	return s
}

type QuerySofamqConsumelimiterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 消费限流资源所属的group
	Group *string `json:"group,omitempty" xml:"group,omitempty" require:"true"`
	// 实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s QuerySofamqConsumelimiterRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConsumelimiterRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqConsumelimiterRequest) SetAuthToken(v string) *QuerySofamqConsumelimiterRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqConsumelimiterRequest) SetProductInstanceId(v string) *QuerySofamqConsumelimiterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqConsumelimiterRequest) SetGroup(v string) *QuerySofamqConsumelimiterRequest {
	s.Group = &v
	return s
}

func (s *QuerySofamqConsumelimiterRequest) SetInstanceId(v string) *QuerySofamqConsumelimiterRequest {
	s.InstanceId = &v
	return s
}

type QuerySofamqConsumelimiterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 消费限流列表
	Data []*ConsumeLimiterDTO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QuerySofamqConsumelimiterResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConsumelimiterResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqConsumelimiterResponse) SetReqMsgId(v string) *QuerySofamqConsumelimiterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqConsumelimiterResponse) SetResultCode(v string) *QuerySofamqConsumelimiterResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqConsumelimiterResponse) SetResultMsg(v string) *QuerySofamqConsumelimiterResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqConsumelimiterResponse) SetData(v []*ConsumeLimiterDTO) *QuerySofamqConsumelimiterResponse {
	s.Data = v
	return s
}

type GetDmsInstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// ddd
	CurrTenant *string `json:"curr_tenant,omitempty" xml:"curr_tenant,omitempty" require:"true"`
	// ss
	CurrWorkspace *string `json:"curr_workspace,omitempty" xml:"curr_workspace,omitempty" require:"true"`
}

func (s GetDmsInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDmsInstanceRequest) GoString() string {
	return s.String()
}

func (s *GetDmsInstanceRequest) SetAuthToken(v string) *GetDmsInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *GetDmsInstanceRequest) SetProductInstanceId(v string) *GetDmsInstanceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetDmsInstanceRequest) SetCurrTenant(v string) *GetDmsInstanceRequest {
	s.CurrTenant = &v
	return s
}

func (s *GetDmsInstanceRequest) SetCurrWorkspace(v string) *GetDmsInstanceRequest {
	s.CurrWorkspace = &v
	return s
}

type GetDmsInstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// dd
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetDmsInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDmsInstanceResponse) GoString() string {
	return s.String()
}

func (s *GetDmsInstanceResponse) SetReqMsgId(v string) *GetDmsInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetDmsInstanceResponse) SetResultCode(v string) *GetDmsInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *GetDmsInstanceResponse) SetResultMsg(v string) *GetDmsInstanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetDmsInstanceResponse) SetData(v string) *GetDmsInstanceResponse {
	s.Data = &v
	return s
}

type QuerySofamqLabelsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例 ID（命名空间）
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
	// 资源类型：TOPIC、GROUP
	ResourceType *string `json:"resource_type,omitempty" xml:"resource_type,omitempty"`
	// 资源名，like _resource_name_ 匹配
	ResourceName *string `json:"resource_name,omitempty" xml:"resource_name,omitempty"`
	// 标签 KEY
	LabelKey *string `json:"label_key,omitempty" xml:"label_key,omitempty"`
	// 标签值，like _label_value_ 匹配
	LabelValue *string `json:"label_value,omitempty" xml:"label_value,omitempty" require:"true"`
}

func (s QuerySofamqLabelsRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqLabelsRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqLabelsRequest) SetAuthToken(v string) *QuerySofamqLabelsRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqLabelsRequest) SetProductInstanceId(v string) *QuerySofamqLabelsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqLabelsRequest) SetInstanceId(v string) *QuerySofamqLabelsRequest {
	s.InstanceId = &v
	return s
}

func (s *QuerySofamqLabelsRequest) SetResourceType(v string) *QuerySofamqLabelsRequest {
	s.ResourceType = &v
	return s
}

func (s *QuerySofamqLabelsRequest) SetResourceName(v string) *QuerySofamqLabelsRequest {
	s.ResourceName = &v
	return s
}

func (s *QuerySofamqLabelsRequest) SetLabelKey(v string) *QuerySofamqLabelsRequest {
	s.LabelKey = &v
	return s
}

func (s *QuerySofamqLabelsRequest) SetLabelValue(v string) *QuerySofamqLabelsRequest {
	s.LabelValue = &v
	return s
}

type QuerySofamqLabelsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 资源标签
	Labels []*ResourceLabelsDTO `json:"labels,omitempty" xml:"labels,omitempty" type:"Repeated"`
}

func (s QuerySofamqLabelsResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqLabelsResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqLabelsResponse) SetReqMsgId(v string) *QuerySofamqLabelsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqLabelsResponse) SetResultCode(v string) *QuerySofamqLabelsResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqLabelsResponse) SetResultMsg(v string) *QuerySofamqLabelsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqLabelsResponse) SetLabels(v []*ResourceLabelsDTO) *QuerySofamqLabelsResponse {
	s.Labels = v
	return s
}

type CreateSofamqLabelsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例 ID（命名空间）
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 资源类型：TOPIC、GROUP
	ResourceType *string `json:"resource_type,omitempty" xml:"resource_type,omitempty" require:"true"`
	// 资源名
	ResourceName *string `json:"resource_name,omitempty" xml:"resource_name,omitempty" require:"true"`
	// 标签
	Labels []*string `json:"labels,omitempty" xml:"labels,omitempty" require:"true" type:"Repeated"`
}

func (s CreateSofamqLabelsRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqLabelsRequest) GoString() string {
	return s.String()
}

func (s *CreateSofamqLabelsRequest) SetAuthToken(v string) *CreateSofamqLabelsRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSofamqLabelsRequest) SetProductInstanceId(v string) *CreateSofamqLabelsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSofamqLabelsRequest) SetInstanceId(v string) *CreateSofamqLabelsRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateSofamqLabelsRequest) SetResourceType(v string) *CreateSofamqLabelsRequest {
	s.ResourceType = &v
	return s
}

func (s *CreateSofamqLabelsRequest) SetResourceName(v string) *CreateSofamqLabelsRequest {
	s.ResourceName = &v
	return s
}

func (s *CreateSofamqLabelsRequest) SetLabels(v []*string) *CreateSofamqLabelsRequest {
	s.Labels = v
	return s
}

type CreateSofamqLabelsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateSofamqLabelsResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqLabelsResponse) GoString() string {
	return s.String()
}

func (s *CreateSofamqLabelsResponse) SetReqMsgId(v string) *CreateSofamqLabelsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSofamqLabelsResponse) SetResultCode(v string) *CreateSofamqLabelsResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSofamqLabelsResponse) SetResultMsg(v string) *CreateSofamqLabelsResponse {
	s.ResultMsg = &v
	return s
}

type DeleteSofamqLabelsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例 ID（命名空间）
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 资源类型：TOPIC、GROUP
	ResourceType *string `json:"resource_type,omitempty" xml:"resource_type,omitempty" require:"true"`
	// 资源名
	ResourceName *string `json:"resource_name,omitempty" xml:"resource_name,omitempty" require:"true"`
	// 标签
	Labels []*string `json:"labels,omitempty" xml:"labels,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteSofamqLabelsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqLabelsRequest) GoString() string {
	return s.String()
}

func (s *DeleteSofamqLabelsRequest) SetAuthToken(v string) *DeleteSofamqLabelsRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSofamqLabelsRequest) SetProductInstanceId(v string) *DeleteSofamqLabelsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteSofamqLabelsRequest) SetInstanceId(v string) *DeleteSofamqLabelsRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteSofamqLabelsRequest) SetResourceType(v string) *DeleteSofamqLabelsRequest {
	s.ResourceType = &v
	return s
}

func (s *DeleteSofamqLabelsRequest) SetResourceName(v string) *DeleteSofamqLabelsRequest {
	s.ResourceName = &v
	return s
}

func (s *DeleteSofamqLabelsRequest) SetLabels(v []*string) *DeleteSofamqLabelsRequest {
	s.Labels = v
	return s
}

type DeleteSofamqLabelsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSofamqLabelsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqLabelsResponse) GoString() string {
	return s.String()
}

func (s *DeleteSofamqLabelsResponse) SetReqMsgId(v string) *DeleteSofamqLabelsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSofamqLabelsResponse) SetResultCode(v string) *DeleteSofamqLabelsResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSofamqLabelsResponse) SetResultMsg(v string) *DeleteSofamqLabelsResponse {
	s.ResultMsg = &v
	return s
}

type ListSofamqSchemaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需获取的 Topic 信息列表所对应的实例 ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页的条数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// schema的subject，在sofamq就中就是topic名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// schema的唯一ID
	SchemaId *int64 `json:"schema_id,omitempty" xml:"schema_id,omitempty"`
}

func (s ListSofamqSchemaRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqSchemaRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqSchemaRequest) SetAuthToken(v string) *ListSofamqSchemaRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqSchemaRequest) SetProductInstanceId(v string) *ListSofamqSchemaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListSofamqSchemaRequest) SetInstanceId(v string) *ListSofamqSchemaRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSofamqSchemaRequest) SetPageNum(v int64) *ListSofamqSchemaRequest {
	s.PageNum = &v
	return s
}

func (s *ListSofamqSchemaRequest) SetPageSize(v int64) *ListSofamqSchemaRequest {
	s.PageSize = &v
	return s
}

func (s *ListSofamqSchemaRequest) SetTopic(v string) *ListSofamqSchemaRequest {
	s.Topic = &v
	return s
}

func (s *ListSofamqSchemaRequest) SetSchemaId(v int64) *ListSofamqSchemaRequest {
	s.SchemaId = &v
	return s
}

type ListSofamqSchemaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// Schema信息
	Data *SchemaDetailPageDO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListSofamqSchemaResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqSchemaResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqSchemaResponse) SetReqMsgId(v string) *ListSofamqSchemaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqSchemaResponse) SetResultCode(v string) *ListSofamqSchemaResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqSchemaResponse) SetResultMsg(v string) *ListSofamqSchemaResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqSchemaResponse) SetData(v *SchemaDetailPageDO) *ListSofamqSchemaResponse {
	s.Data = v
	return s
}

type CreateSofamqSchemaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 创建Schema时的instanceId
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// SOFAMQ的Topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// Topic的Schema内容
	SchemaContent *string `json:"schema_content,omitempty" xml:"schema_content,omitempty" require:"true"`
	// Schema的描述信息
	SchemaComment *string `json:"schema_comment,omitempty" xml:"schema_comment,omitempty" require:"true"`
	// Schema的兼容性策略
	SchemaCompatibility *string `json:"schema_compatibility,omitempty" xml:"schema_compatibility,omitempty" require:"true"`
	// schema的序列化方式
	SchemaSerialization *string `json:"schema_serialization,omitempty" xml:"schema_serialization,omitempty" require:"true"`
}

func (s CreateSofamqSchemaRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqSchemaRequest) GoString() string {
	return s.String()
}

func (s *CreateSofamqSchemaRequest) SetAuthToken(v string) *CreateSofamqSchemaRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSofamqSchemaRequest) SetProductInstanceId(v string) *CreateSofamqSchemaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSofamqSchemaRequest) SetInstanceId(v string) *CreateSofamqSchemaRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateSofamqSchemaRequest) SetTopic(v string) *CreateSofamqSchemaRequest {
	s.Topic = &v
	return s
}

func (s *CreateSofamqSchemaRequest) SetSchemaContent(v string) *CreateSofamqSchemaRequest {
	s.SchemaContent = &v
	return s
}

func (s *CreateSofamqSchemaRequest) SetSchemaComment(v string) *CreateSofamqSchemaRequest {
	s.SchemaComment = &v
	return s
}

func (s *CreateSofamqSchemaRequest) SetSchemaCompatibility(v string) *CreateSofamqSchemaRequest {
	s.SchemaCompatibility = &v
	return s
}

func (s *CreateSofamqSchemaRequest) SetSchemaSerialization(v string) *CreateSofamqSchemaRequest {
	s.SchemaSerialization = &v
	return s
}

type CreateSofamqSchemaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateSofamqSchemaResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSofamqSchemaResponse) GoString() string {
	return s.String()
}

func (s *CreateSofamqSchemaResponse) SetReqMsgId(v string) *CreateSofamqSchemaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSofamqSchemaResponse) SetResultCode(v string) *CreateSofamqSchemaResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSofamqSchemaResponse) SetResultMsg(v string) *CreateSofamqSchemaResponse {
	s.ResultMsg = &v
	return s
}

type GetSofamqSchemaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// sofamq的topic名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// schema的版本号
	SchemaVersion *int64 `json:"schema_version,omitempty" xml:"schema_version,omitempty" require:"true"`
}

func (s GetSofamqSchemaRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSofamqSchemaRequest) GoString() string {
	return s.String()
}

func (s *GetSofamqSchemaRequest) SetAuthToken(v string) *GetSofamqSchemaRequest {
	s.AuthToken = &v
	return s
}

func (s *GetSofamqSchemaRequest) SetProductInstanceId(v string) *GetSofamqSchemaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetSofamqSchemaRequest) SetInstanceId(v string) *GetSofamqSchemaRequest {
	s.InstanceId = &v
	return s
}

func (s *GetSofamqSchemaRequest) SetTopic(v string) *GetSofamqSchemaRequest {
	s.Topic = &v
	return s
}

func (s *GetSofamqSchemaRequest) SetSchemaVersion(v int64) *GetSofamqSchemaRequest {
	s.SchemaVersion = &v
	return s
}

type GetSofamqSchemaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回特定某个Schema的信息
	Data *SchemaDetailDO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetSofamqSchemaResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSofamqSchemaResponse) GoString() string {
	return s.String()
}

func (s *GetSofamqSchemaResponse) SetReqMsgId(v string) *GetSofamqSchemaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetSofamqSchemaResponse) SetResultCode(v string) *GetSofamqSchemaResponse {
	s.ResultCode = &v
	return s
}

func (s *GetSofamqSchemaResponse) SetResultMsg(v string) *GetSofamqSchemaResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetSofamqSchemaResponse) SetData(v *SchemaDetailDO) *GetSofamqSchemaResponse {
	s.Data = v
	return s
}

type ExportSofamqSchemaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// sofamq instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// schema的唯一ID
	SchemaId *string `json:"schema_id,omitempty" xml:"schema_id,omitempty" require:"true"`
	// 实例代码的变成语言类型，空缺时使用Java
	Language *string `json:"language,omitempty" xml:"language,omitempty"`
}

func (s ExportSofamqSchemaRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportSofamqSchemaRequest) GoString() string {
	return s.String()
}

func (s *ExportSofamqSchemaRequest) SetAuthToken(v string) *ExportSofamqSchemaRequest {
	s.AuthToken = &v
	return s
}

func (s *ExportSofamqSchemaRequest) SetProductInstanceId(v string) *ExportSofamqSchemaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExportSofamqSchemaRequest) SetInstanceId(v string) *ExportSofamqSchemaRequest {
	s.InstanceId = &v
	return s
}

func (s *ExportSofamqSchemaRequest) SetSchemaId(v string) *ExportSofamqSchemaRequest {
	s.SchemaId = &v
	return s
}

func (s *ExportSofamqSchemaRequest) SetLanguage(v string) *ExportSofamqSchemaRequest {
	s.Language = &v
	return s
}

type ExportSofamqSchemaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 代码示例
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ExportSofamqSchemaResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportSofamqSchemaResponse) GoString() string {
	return s.String()
}

func (s *ExportSofamqSchemaResponse) SetReqMsgId(v string) *ExportSofamqSchemaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExportSofamqSchemaResponse) SetResultCode(v string) *ExportSofamqSchemaResponse {
	s.ResultCode = &v
	return s
}

func (s *ExportSofamqSchemaResponse) SetResultMsg(v string) *ExportSofamqSchemaResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExportSofamqSchemaResponse) SetData(v string) *ExportSofamqSchemaResponse {
	s.Data = &v
	return s
}

type UpdateSofamqSchemaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// sofamq的instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// schema的唯一id
	SchemaId *string `json:"schema_id,omitempty" xml:"schema_id,omitempty" require:"true"`
	// schema的描述信息
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 消息主题
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s UpdateSofamqSchemaRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqSchemaRequest) GoString() string {
	return s.String()
}

func (s *UpdateSofamqSchemaRequest) SetAuthToken(v string) *UpdateSofamqSchemaRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSofamqSchemaRequest) SetProductInstanceId(v string) *UpdateSofamqSchemaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateSofamqSchemaRequest) SetInstanceId(v string) *UpdateSofamqSchemaRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateSofamqSchemaRequest) SetSchemaId(v string) *UpdateSofamqSchemaRequest {
	s.SchemaId = &v
	return s
}

func (s *UpdateSofamqSchemaRequest) SetDescription(v string) *UpdateSofamqSchemaRequest {
	s.Description = &v
	return s
}

func (s *UpdateSofamqSchemaRequest) SetTopic(v string) *UpdateSofamqSchemaRequest {
	s.Topic = &v
	return s
}

type UpdateSofamqSchemaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateSofamqSchemaResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSofamqSchemaResponse) GoString() string {
	return s.String()
}

func (s *UpdateSofamqSchemaResponse) SetReqMsgId(v string) *UpdateSofamqSchemaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSofamqSchemaResponse) SetResultCode(v string) *UpdateSofamqSchemaResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSofamqSchemaResponse) SetResultMsg(v string) *UpdateSofamqSchemaResponse {
	s.ResultMsg = &v
	return s
}

type AllSofamqSchemaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// sofamq的instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 查询Schema的Topic名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s AllSofamqSchemaRequest) String() string {
	return tea.Prettify(s)
}

func (s AllSofamqSchemaRequest) GoString() string {
	return s.String()
}

func (s *AllSofamqSchemaRequest) SetAuthToken(v string) *AllSofamqSchemaRequest {
	s.AuthToken = &v
	return s
}

func (s *AllSofamqSchemaRequest) SetProductInstanceId(v string) *AllSofamqSchemaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AllSofamqSchemaRequest) SetInstanceId(v string) *AllSofamqSchemaRequest {
	s.InstanceId = &v
	return s
}

func (s *AllSofamqSchemaRequest) SetTopic(v string) *AllSofamqSchemaRequest {
	s.Topic = &v
	return s
}

type AllSofamqSchemaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回某个Topic的Schema的版本号列表，版本号降序排列
	Data []*int64 `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s AllSofamqSchemaResponse) String() string {
	return tea.Prettify(s)
}

func (s AllSofamqSchemaResponse) GoString() string {
	return s.String()
}

func (s *AllSofamqSchemaResponse) SetReqMsgId(v string) *AllSofamqSchemaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllSofamqSchemaResponse) SetResultCode(v string) *AllSofamqSchemaResponse {
	s.ResultCode = &v
	return s
}

func (s *AllSofamqSchemaResponse) SetResultMsg(v string) *AllSofamqSchemaResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllSofamqSchemaResponse) SetData(v []*int64) *AllSofamqSchemaResponse {
	s.Data = v
	return s
}

type ExportSofamqMessageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// sofamq的instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 消息的唯一ID
	MessageId *string `json:"message_id,omitempty" xml:"message_id,omitempty" require:"true"`
	// 消息的Topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// 消息所属的ZONE
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
}

func (s ExportSofamqMessageRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportSofamqMessageRequest) GoString() string {
	return s.String()
}

func (s *ExportSofamqMessageRequest) SetAuthToken(v string) *ExportSofamqMessageRequest {
	s.AuthToken = &v
	return s
}

func (s *ExportSofamqMessageRequest) SetProductInstanceId(v string) *ExportSofamqMessageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExportSofamqMessageRequest) SetInstanceId(v string) *ExportSofamqMessageRequest {
	s.InstanceId = &v
	return s
}

func (s *ExportSofamqMessageRequest) SetMessageId(v string) *ExportSofamqMessageRequest {
	s.MessageId = &v
	return s
}

func (s *ExportSofamqMessageRequest) SetTopic(v string) *ExportSofamqMessageRequest {
	s.Topic = &v
	return s
}

func (s *ExportSofamqMessageRequest) SetCell(v string) *ExportSofamqMessageRequest {
	s.Cell = &v
	return s
}

type ExportSofamqMessageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 消息体反序列化后的数据，包含
	Data *MessagePayloadDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ExportSofamqMessageResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportSofamqMessageResponse) GoString() string {
	return s.String()
}

func (s *ExportSofamqMessageResponse) SetReqMsgId(v string) *ExportSofamqMessageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExportSofamqMessageResponse) SetResultCode(v string) *ExportSofamqMessageResponse {
	s.ResultCode = &v
	return s
}

func (s *ExportSofamqMessageResponse) SetResultMsg(v string) *ExportSofamqMessageResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExportSofamqMessageResponse) SetData(v *MessagePayloadDTO) *ExportSofamqMessageResponse {
	s.Data = v
	return s
}

type ListSofamqSchemacompatibilityRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
}

func (s ListSofamqSchemacompatibilityRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqSchemacompatibilityRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqSchemacompatibilityRequest) SetAuthToken(v string) *ListSofamqSchemacompatibilityRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqSchemacompatibilityRequest) SetProductInstanceId(v string) *ListSofamqSchemacompatibilityRequest {
	s.ProductInstanceId = &v
	return s
}

type ListSofamqSchemacompatibilityResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回系统支持的兼容性，key为兼容性的值，比如FULL，对应的value为前端下拉列表中展现的内容，比如“全兼容”
	Data []*Pair `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListSofamqSchemacompatibilityResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqSchemacompatibilityResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqSchemacompatibilityResponse) SetReqMsgId(v string) *ListSofamqSchemacompatibilityResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqSchemacompatibilityResponse) SetResultCode(v string) *ListSofamqSchemacompatibilityResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqSchemacompatibilityResponse) SetResultMsg(v string) *ListSofamqSchemacompatibilityResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqSchemacompatibilityResponse) SetData(v []*Pair) *ListSofamqSchemacompatibilityResponse {
	s.Data = v
	return s
}

type ListSofamqSchemaserializationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
}

func (s ListSofamqSchemaserializationRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqSchemaserializationRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqSchemaserializationRequest) SetAuthToken(v string) *ListSofamqSchemaserializationRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqSchemaserializationRequest) SetProductInstanceId(v string) *ListSofamqSchemaserializationRequest {
	s.ProductInstanceId = &v
	return s
}

type ListSofamqSchemaserializationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回系统支持的序列化方式
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListSofamqSchemaserializationResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqSchemaserializationResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqSchemaserializationResponse) SetReqMsgId(v string) *ListSofamqSchemaserializationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqSchemaserializationResponse) SetResultCode(v string) *ListSofamqSchemaserializationResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqSchemaserializationResponse) SetResultMsg(v string) *ListSofamqSchemaserializationResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqSchemaserializationResponse) SetData(v []*string) *ListSofamqSchemaserializationResponse {
	s.Data = v
	return s
}

type DeleteSofamqSchemaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// sofamq的instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// schema的唯一id
	SchemaId *string `json:"schema_id,omitempty" xml:"schema_id,omitempty" require:"true"`
	// 消息主题
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s DeleteSofamqSchemaRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqSchemaRequest) GoString() string {
	return s.String()
}

func (s *DeleteSofamqSchemaRequest) SetAuthToken(v string) *DeleteSofamqSchemaRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSofamqSchemaRequest) SetProductInstanceId(v string) *DeleteSofamqSchemaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteSofamqSchemaRequest) SetInstanceId(v string) *DeleteSofamqSchemaRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteSofamqSchemaRequest) SetSchemaId(v string) *DeleteSofamqSchemaRequest {
	s.SchemaId = &v
	return s
}

func (s *DeleteSofamqSchemaRequest) SetTopic(v string) *DeleteSofamqSchemaRequest {
	s.Topic = &v
	return s
}

type DeleteSofamqSchemaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSofamqSchemaResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqSchemaResponse) GoString() string {
	return s.String()
}

func (s *DeleteSofamqSchemaResponse) SetReqMsgId(v string) *DeleteSofamqSchemaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSofamqSchemaResponse) SetResultCode(v string) *DeleteSofamqSchemaResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSofamqSchemaResponse) SetResultMsg(v string) *DeleteSofamqSchemaResponse {
	s.ResultMsg = &v
	return s
}

type QuerySofamqConnectorprocessRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务名称
	JobName *string `json:"job_name,omitempty" xml:"job_name,omitempty" require:"true"`
}

func (s QuerySofamqConnectorprocessRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConnectorprocessRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqConnectorprocessRequest) SetAuthToken(v string) *QuerySofamqConnectorprocessRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqConnectorprocessRequest) SetProductInstanceId(v string) *QuerySofamqConnectorprocessRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqConnectorprocessRequest) SetJobName(v string) *QuerySofamqConnectorprocessRequest {
	s.JobName = &v
	return s
}

type QuerySofamqConnectorprocessResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 工单详情
	ProcessInfos []*ProcessDTO `json:"process_infos,omitempty" xml:"process_infos,omitempty" type:"Repeated"`
}

func (s QuerySofamqConnectorprocessResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConnectorprocessResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqConnectorprocessResponse) SetReqMsgId(v string) *QuerySofamqConnectorprocessResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqConnectorprocessResponse) SetResultCode(v string) *QuerySofamqConnectorprocessResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqConnectorprocessResponse) SetResultMsg(v string) *QuerySofamqConnectorprocessResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqConnectorprocessResponse) SetProcessInfos(v []*ProcessDTO) *QuerySofamqConnectorprocessResponse {
	s.ProcessInfos = v
	return s
}

type CancelSofamqConnectorprocessRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务名称
	JobName *string `json:"job_name,omitempty" xml:"job_name,omitempty" require:"true"`
}

func (s CancelSofamqConnectorprocessRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelSofamqConnectorprocessRequest) GoString() string {
	return s.String()
}

func (s *CancelSofamqConnectorprocessRequest) SetAuthToken(v string) *CancelSofamqConnectorprocessRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelSofamqConnectorprocessRequest) SetProductInstanceId(v string) *CancelSofamqConnectorprocessRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CancelSofamqConnectorprocessRequest) SetJobName(v string) *CancelSofamqConnectorprocessRequest {
	s.JobName = &v
	return s
}

type CancelSofamqConnectorprocessResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CancelSofamqConnectorprocessResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelSofamqConnectorprocessResponse) GoString() string {
	return s.String()
}

func (s *CancelSofamqConnectorprocessResponse) SetReqMsgId(v string) *CancelSofamqConnectorprocessResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelSofamqConnectorprocessResponse) SetResultCode(v string) *CancelSofamqConnectorprocessResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelSofamqConnectorprocessResponse) SetResultMsg(v string) *CancelSofamqConnectorprocessResponse {
	s.ResultMsg = &v
	return s
}

type ResumeSofamqConnectorprocessRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务名称
	JobName *string `json:"job_name,omitempty" xml:"job_name,omitempty" require:"true"`
}

func (s ResumeSofamqConnectorprocessRequest) String() string {
	return tea.Prettify(s)
}

func (s ResumeSofamqConnectorprocessRequest) GoString() string {
	return s.String()
}

func (s *ResumeSofamqConnectorprocessRequest) SetAuthToken(v string) *ResumeSofamqConnectorprocessRequest {
	s.AuthToken = &v
	return s
}

func (s *ResumeSofamqConnectorprocessRequest) SetProductInstanceId(v string) *ResumeSofamqConnectorprocessRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ResumeSofamqConnectorprocessRequest) SetJobName(v string) *ResumeSofamqConnectorprocessRequest {
	s.JobName = &v
	return s
}

type ResumeSofamqConnectorprocessResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ResumeSofamqConnectorprocessResponse) String() string {
	return tea.Prettify(s)
}

func (s ResumeSofamqConnectorprocessResponse) GoString() string {
	return s.String()
}

func (s *ResumeSofamqConnectorprocessResponse) SetReqMsgId(v string) *ResumeSofamqConnectorprocessResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ResumeSofamqConnectorprocessResponse) SetResultCode(v string) *ResumeSofamqConnectorprocessResponse {
	s.ResultCode = &v
	return s
}

func (s *ResumeSofamqConnectorprocessResponse) SetResultMsg(v string) *ResumeSofamqConnectorprocessResponse {
	s.ResultMsg = &v
	return s
}

type VerifySofamqConnectoroperationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务名称
	Job *string `json:"job,omitempty" xml:"job,omitempty" require:"true"`
}

func (s VerifySofamqConnectoroperationRequest) String() string {
	return tea.Prettify(s)
}

func (s VerifySofamqConnectoroperationRequest) GoString() string {
	return s.String()
}

func (s *VerifySofamqConnectoroperationRequest) SetAuthToken(v string) *VerifySofamqConnectoroperationRequest {
	s.AuthToken = &v
	return s
}

func (s *VerifySofamqConnectoroperationRequest) SetProductInstanceId(v string) *VerifySofamqConnectoroperationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *VerifySofamqConnectoroperationRequest) SetJob(v string) *VerifySofamqConnectoroperationRequest {
	s.Job = &v
	return s
}

type VerifySofamqConnectoroperationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s VerifySofamqConnectoroperationResponse) String() string {
	return tea.Prettify(s)
}

func (s VerifySofamqConnectoroperationResponse) GoString() string {
	return s.String()
}

func (s *VerifySofamqConnectoroperationResponse) SetReqMsgId(v string) *VerifySofamqConnectoroperationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *VerifySofamqConnectoroperationResponse) SetResultCode(v string) *VerifySofamqConnectoroperationResponse {
	s.ResultCode = &v
	return s
}

func (s *VerifySofamqConnectoroperationResponse) SetResultMsg(v string) *VerifySofamqConnectoroperationResponse {
	s.ResultMsg = &v
	return s
}

type ListSofamqAuditorRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 起始时间
	ClosedStart *int64 `json:"closed_start,omitempty" xml:"closed_start,omitempty"`
	// 结束时间戳
	OpenEnd *int64 `json:"open_end,omitempty" xml:"open_end,omitempty"`
	// 模糊资源名
	Resource *string `json:"resource,omitempty" xml:"resource,omitempty"`
}

func (s ListSofamqAuditorRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqAuditorRequest) GoString() string {
	return s.String()
}

func (s *ListSofamqAuditorRequest) SetAuthToken(v string) *ListSofamqAuditorRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSofamqAuditorRequest) SetProductInstanceId(v string) *ListSofamqAuditorRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListSofamqAuditorRequest) SetClosedStart(v int64) *ListSofamqAuditorRequest {
	s.ClosedStart = &v
	return s
}

func (s *ListSofamqAuditorRequest) SetOpenEnd(v int64) *ListSofamqAuditorRequest {
	s.OpenEnd = &v
	return s
}

func (s *ListSofamqAuditorRequest) SetResource(v string) *ListSofamqAuditorRequest {
	s.Resource = &v
	return s
}

type ListSofamqAuditorResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 操作审计数据
	Data []*AuditorDTO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListSofamqAuditorResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSofamqAuditorResponse) GoString() string {
	return s.String()
}

func (s *ListSofamqAuditorResponse) SetReqMsgId(v string) *ListSofamqAuditorResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSofamqAuditorResponse) SetResultCode(v string) *ListSofamqAuditorResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSofamqAuditorResponse) SetResultMsg(v string) *ListSofamqAuditorResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSofamqAuditorResponse) SetData(v []*AuditorDTO) *ListSofamqAuditorResponse {
	s.Data = v
	return s
}

type QuerySofamqConnectorjobappRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s QuerySofamqConnectorjobappRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConnectorjobappRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqConnectorjobappRequest) SetAuthToken(v string) *QuerySofamqConnectorjobappRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqConnectorjobappRequest) SetProductInstanceId(v string) *QuerySofamqConnectorjobappRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqConnectorjobappRequest) SetInstanceId(v string) *QuerySofamqConnectorjobappRequest {
	s.InstanceId = &v
	return s
}

type QuerySofamqConnectorjobappResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用名称
	AppNames []*string `json:"app_names,omitempty" xml:"app_names,omitempty" type:"Repeated"`
	// 报错信息
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s QuerySofamqConnectorjobappResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConnectorjobappResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqConnectorjobappResponse) SetReqMsgId(v string) *QuerySofamqConnectorjobappResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqConnectorjobappResponse) SetResultCode(v string) *QuerySofamqConnectorjobappResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqConnectorjobappResponse) SetResultMsg(v string) *QuerySofamqConnectorjobappResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqConnectorjobappResponse) SetAppNames(v []*string) *QuerySofamqConnectorjobappResponse {
	s.AppNames = v
	return s
}

func (s *QuerySofamqConnectorjobappResponse) SetErrorReport(v *ErrorReport) *QuerySofamqConnectorjobappResponse {
	s.ErrorReport = v
	return s
}

type CancelSofamqConnectorplanRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// connector任务执行计划Id
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty" require:"true"`
	// Connector任务名
	Job *string `json:"job,omitempty" xml:"job,omitempty" require:"true"`
}

func (s CancelSofamqConnectorplanRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelSofamqConnectorplanRequest) GoString() string {
	return s.String()
}

func (s *CancelSofamqConnectorplanRequest) SetAuthToken(v string) *CancelSofamqConnectorplanRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelSofamqConnectorplanRequest) SetProductInstanceId(v string) *CancelSofamqConnectorplanRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CancelSofamqConnectorplanRequest) SetPlanId(v string) *CancelSofamqConnectorplanRequest {
	s.PlanId = &v
	return s
}

func (s *CancelSofamqConnectorplanRequest) SetJob(v string) *CancelSofamqConnectorplanRequest {
	s.Job = &v
	return s
}

type CancelSofamqConnectorplanResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 报错报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s CancelSofamqConnectorplanResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelSofamqConnectorplanResponse) GoString() string {
	return s.String()
}

func (s *CancelSofamqConnectorplanResponse) SetReqMsgId(v string) *CancelSofamqConnectorplanResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelSofamqConnectorplanResponse) SetResultCode(v string) *CancelSofamqConnectorplanResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelSofamqConnectorplanResponse) SetResultMsg(v string) *CancelSofamqConnectorplanResponse {
	s.ResultMsg = &v
	return s
}

func (s *CancelSofamqConnectorplanResponse) SetErrorReport(v *ErrorReport) *CancelSofamqConnectorplanResponse {
	s.ErrorReport = v
	return s
}

type SetSofamqConnectorplancheckpointRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// connector任务执行计划Id
	//
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty" require:"true"`
	// Connector任务名
	//
	Job *string `json:"job,omitempty" xml:"job,omitempty" require:"true"`
	// 重置任务请求
	ResetOffsetRequest *ResetJobOffsetRequest `json:"reset_offset_request,omitempty" xml:"reset_offset_request,omitempty" require:"true"`
}

func (s SetSofamqConnectorplancheckpointRequest) String() string {
	return tea.Prettify(s)
}

func (s SetSofamqConnectorplancheckpointRequest) GoString() string {
	return s.String()
}

func (s *SetSofamqConnectorplancheckpointRequest) SetAuthToken(v string) *SetSofamqConnectorplancheckpointRequest {
	s.AuthToken = &v
	return s
}

func (s *SetSofamqConnectorplancheckpointRequest) SetProductInstanceId(v string) *SetSofamqConnectorplancheckpointRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetSofamqConnectorplancheckpointRequest) SetPlanId(v string) *SetSofamqConnectorplancheckpointRequest {
	s.PlanId = &v
	return s
}

func (s *SetSofamqConnectorplancheckpointRequest) SetJob(v string) *SetSofamqConnectorplancheckpointRequest {
	s.Job = &v
	return s
}

func (s *SetSofamqConnectorplancheckpointRequest) SetResetOffsetRequest(v *ResetJobOffsetRequest) *SetSofamqConnectorplancheckpointRequest {
	s.ResetOffsetRequest = v
	return s
}

type SetSofamqConnectorplancheckpointResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s SetSofamqConnectorplancheckpointResponse) String() string {
	return tea.Prettify(s)
}

func (s SetSofamqConnectorplancheckpointResponse) GoString() string {
	return s.String()
}

func (s *SetSofamqConnectorplancheckpointResponse) SetReqMsgId(v string) *SetSofamqConnectorplancheckpointResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetSofamqConnectorplancheckpointResponse) SetResultCode(v string) *SetSofamqConnectorplancheckpointResponse {
	s.ResultCode = &v
	return s
}

func (s *SetSofamqConnectorplancheckpointResponse) SetResultMsg(v string) *SetSofamqConnectorplancheckpointResponse {
	s.ResultMsg = &v
	return s
}

func (s *SetSofamqConnectorplancheckpointResponse) SetErrorReport(v *ErrorReport) *SetSofamqConnectorplancheckpointResponse {
	s.ErrorReport = v
	return s
}

type QuerySofamqConnectorplansingletonRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务名称
	Job *string `json:"job,omitempty" xml:"job,omitempty" require:"true"`
}

func (s QuerySofamqConnectorplansingletonRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConnectorplansingletonRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqConnectorplansingletonRequest) SetAuthToken(v string) *QuerySofamqConnectorplansingletonRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqConnectorplansingletonRequest) SetProductInstanceId(v string) *QuerySofamqConnectorplansingletonRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqConnectorplansingletonRequest) SetJob(v string) *QuerySofamqConnectorplansingletonRequest {
	s.Job = &v
	return s
}

type QuerySofamqConnectorplansingletonResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 实例详情
	JobInstance *JobRecordDTO `json:"job_instance,omitempty" xml:"job_instance,omitempty"`
	// 报错报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s QuerySofamqConnectorplansingletonResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConnectorplansingletonResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqConnectorplansingletonResponse) SetReqMsgId(v string) *QuerySofamqConnectorplansingletonResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqConnectorplansingletonResponse) SetResultCode(v string) *QuerySofamqConnectorplansingletonResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqConnectorplansingletonResponse) SetResultMsg(v string) *QuerySofamqConnectorplansingletonResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqConnectorplansingletonResponse) SetJobInstance(v *JobRecordDTO) *QuerySofamqConnectorplansingletonResponse {
	s.JobInstance = v
	return s
}

func (s *QuerySofamqConnectorplansingletonResponse) SetErrorReport(v *ErrorReport) *QuerySofamqConnectorplansingletonResponse {
	s.ErrorReport = v
	return s
}

type QuerySofamqConnectorjobdelayRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务名称
	Job *string `json:"job,omitempty" xml:"job,omitempty" require:"true"`
	// connector任务执行计划Id
	//
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty" require:"true"`
}

func (s QuerySofamqConnectorjobdelayRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConnectorjobdelayRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqConnectorjobdelayRequest) SetAuthToken(v string) *QuerySofamqConnectorjobdelayRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqConnectorjobdelayRequest) SetProductInstanceId(v string) *QuerySofamqConnectorjobdelayRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqConnectorjobdelayRequest) SetJob(v string) *QuerySofamqConnectorjobdelayRequest {
	s.Job = &v
	return s
}

func (s *QuerySofamqConnectorjobdelayRequest) SetPlanId(v string) *QuerySofamqConnectorjobdelayRequest {
	s.PlanId = &v
	return s
}

type QuerySofamqConnectorjobdelayResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 延迟详情
	DelayDetail []*DelayInfo `json:"delay_detail,omitempty" xml:"delay_detail,omitempty" type:"Repeated"`
	// 报错报告
	ErrorDetail *ErrorReport `json:"error_detail,omitempty" xml:"error_detail,omitempty"`
}

func (s QuerySofamqConnectorjobdelayResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConnectorjobdelayResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqConnectorjobdelayResponse) SetReqMsgId(v string) *QuerySofamqConnectorjobdelayResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqConnectorjobdelayResponse) SetResultCode(v string) *QuerySofamqConnectorjobdelayResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqConnectorjobdelayResponse) SetResultMsg(v string) *QuerySofamqConnectorjobdelayResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqConnectorjobdelayResponse) SetDelayDetail(v []*DelayInfo) *QuerySofamqConnectorjobdelayResponse {
	s.DelayDetail = v
	return s
}

func (s *QuerySofamqConnectorjobdelayResponse) SetErrorDetail(v *ErrorReport) *QuerySofamqConnectorjobdelayResponse {
	s.ErrorDetail = v
	return s
}

type QuerySofamqConnectorjobpartitionstatuscolumnRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// connector任务执行计划Id
	//
	Job *string `json:"job,omitempty" xml:"job,omitempty" require:"true"`
	// connector任务执行计划Id
	//
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty" require:"true"`
}

func (s QuerySofamqConnectorjobpartitionstatuscolumnRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConnectorjobpartitionstatuscolumnRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqConnectorjobpartitionstatuscolumnRequest) SetAuthToken(v string) *QuerySofamqConnectorjobpartitionstatuscolumnRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqConnectorjobpartitionstatuscolumnRequest) SetProductInstanceId(v string) *QuerySofamqConnectorjobpartitionstatuscolumnRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqConnectorjobpartitionstatuscolumnRequest) SetJob(v string) *QuerySofamqConnectorjobpartitionstatuscolumnRequest {
	s.Job = &v
	return s
}

func (s *QuerySofamqConnectorjobpartitionstatuscolumnRequest) SetPlanId(v string) *QuerySofamqConnectorjobpartitionstatuscolumnRequest {
	s.PlanId = &v
	return s
}

type QuerySofamqConnectorjobpartitionstatuscolumnResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 列名称
	ColumnName []*ColumnName `json:"column_name,omitempty" xml:"column_name,omitempty" type:"Repeated"`
	// 错误报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s QuerySofamqConnectorjobpartitionstatuscolumnResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConnectorjobpartitionstatuscolumnResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqConnectorjobpartitionstatuscolumnResponse) SetReqMsgId(v string) *QuerySofamqConnectorjobpartitionstatuscolumnResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqConnectorjobpartitionstatuscolumnResponse) SetResultCode(v string) *QuerySofamqConnectorjobpartitionstatuscolumnResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqConnectorjobpartitionstatuscolumnResponse) SetResultMsg(v string) *QuerySofamqConnectorjobpartitionstatuscolumnResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqConnectorjobpartitionstatuscolumnResponse) SetColumnName(v []*ColumnName) *QuerySofamqConnectorjobpartitionstatuscolumnResponse {
	s.ColumnName = v
	return s
}

func (s *QuerySofamqConnectorjobpartitionstatuscolumnResponse) SetErrorReport(v *ErrorReport) *QuerySofamqConnectorjobpartitionstatuscolumnResponse {
	s.ErrorReport = v
	return s
}

type QuerySofamqConnectorjobpartitionstatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
	// 每页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 作业名称
	Job *string `json:"job,omitempty" xml:"job,omitempty" require:"true"`
	// 实例id
	PlanId *string `json:"plan_id,omitempty" xml:"plan_id,omitempty"`
}

func (s QuerySofamqConnectorjobpartitionstatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConnectorjobpartitionstatusRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqConnectorjobpartitionstatusRequest) SetAuthToken(v string) *QuerySofamqConnectorjobpartitionstatusRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqConnectorjobpartitionstatusRequest) SetProductInstanceId(v string) *QuerySofamqConnectorjobpartitionstatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqConnectorjobpartitionstatusRequest) SetPageNum(v int64) *QuerySofamqConnectorjobpartitionstatusRequest {
	s.PageNum = &v
	return s
}

func (s *QuerySofamqConnectorjobpartitionstatusRequest) SetPageSize(v int64) *QuerySofamqConnectorjobpartitionstatusRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySofamqConnectorjobpartitionstatusRequest) SetJob(v string) *QuerySofamqConnectorjobpartitionstatusRequest {
	s.Job = &v
	return s
}

func (s *QuerySofamqConnectorjobpartitionstatusRequest) SetPlanId(v string) *QuerySofamqConnectorjobpartitionstatusRequest {
	s.PlanId = &v
	return s
}

type QuerySofamqConnectorjobpartitionstatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 分区分页状态
	Data *ConnectorJobPartitionStatusPageResult `json:"data,omitempty" xml:"data,omitempty"`
	// 错误报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s QuerySofamqConnectorjobpartitionstatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConnectorjobpartitionstatusResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqConnectorjobpartitionstatusResponse) SetReqMsgId(v string) *QuerySofamqConnectorjobpartitionstatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqConnectorjobpartitionstatusResponse) SetResultCode(v string) *QuerySofamqConnectorjobpartitionstatusResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqConnectorjobpartitionstatusResponse) SetResultMsg(v string) *QuerySofamqConnectorjobpartitionstatusResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqConnectorjobpartitionstatusResponse) SetData(v *ConnectorJobPartitionStatusPageResult) *QuerySofamqConnectorjobpartitionstatusResponse {
	s.Data = v
	return s
}

func (s *QuerySofamqConnectorjobpartitionstatusResponse) SetErrorReport(v *ErrorReport) *QuerySofamqConnectorjobpartitionstatusResponse {
	s.ErrorReport = v
	return s
}

type QuerySofamqConnectortriggerconfigsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// source类型
	SourceType *string `json:"source_type,omitempty" xml:"source_type,omitempty" require:"true"`
	// sink类型
	SinkType *string `json:"sink_type,omitempty" xml:"sink_type,omitempty" require:"true"`
}

func (s QuerySofamqConnectortriggerconfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConnectortriggerconfigsRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqConnectortriggerconfigsRequest) SetAuthToken(v string) *QuerySofamqConnectortriggerconfigsRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqConnectortriggerconfigsRequest) SetProductInstanceId(v string) *QuerySofamqConnectortriggerconfigsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqConnectortriggerconfigsRequest) SetSourceType(v string) *QuerySofamqConnectortriggerconfigsRequest {
	s.SourceType = &v
	return s
}

func (s *QuerySofamqConnectortriggerconfigsRequest) SetSinkType(v string) *QuerySofamqConnectortriggerconfigsRequest {
	s.SinkType = &v
	return s
}

type QuerySofamqConnectortriggerconfigsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 页面渲染配置
	Configs []*UIControlModel `json:"configs,omitempty" xml:"configs,omitempty" type:"Repeated"`
	// 错误报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s QuerySofamqConnectortriggerconfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConnectortriggerconfigsResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqConnectortriggerconfigsResponse) SetReqMsgId(v string) *QuerySofamqConnectortriggerconfigsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqConnectortriggerconfigsResponse) SetResultCode(v string) *QuerySofamqConnectortriggerconfigsResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqConnectortriggerconfigsResponse) SetResultMsg(v string) *QuerySofamqConnectortriggerconfigsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqConnectortriggerconfigsResponse) SetConfigs(v []*UIControlModel) *QuerySofamqConnectortriggerconfigsResponse {
	s.Configs = v
	return s
}

func (s *QuerySofamqConnectortriggerconfigsResponse) SetErrorReport(v *ErrorReport) *QuerySofamqConnectortriggerconfigsResponse {
	s.ErrorReport = v
	return s
}

type DeleteSofamqOffsetRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需清除消费进度的 Group ID 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 需清除消费进度的消费端 Group ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 需清除消费进度的 Topic 名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// 需要清除消费进度的单元
	Cells *string `json:"cells,omitempty" xml:"cells,omitempty" require:"true"`
}

func (s DeleteSofamqOffsetRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqOffsetRequest) GoString() string {
	return s.String()
}

func (s *DeleteSofamqOffsetRequest) SetAuthToken(v string) *DeleteSofamqOffsetRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSofamqOffsetRequest) SetProductInstanceId(v string) *DeleteSofamqOffsetRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteSofamqOffsetRequest) SetInstanceId(v string) *DeleteSofamqOffsetRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteSofamqOffsetRequest) SetGroupId(v string) *DeleteSofamqOffsetRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteSofamqOffsetRequest) SetTopic(v string) *DeleteSofamqOffsetRequest {
	s.Topic = &v
	return s
}

func (s *DeleteSofamqOffsetRequest) SetCells(v string) *DeleteSofamqOffsetRequest {
	s.Cells = &v
	return s
}

type DeleteSofamqOffsetResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSofamqOffsetResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSofamqOffsetResponse) GoString() string {
	return s.String()
}

func (s *DeleteSofamqOffsetResponse) SetReqMsgId(v string) *DeleteSofamqOffsetResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSofamqOffsetResponse) SetResultCode(v string) *DeleteSofamqOffsetResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSofamqOffsetResponse) SetResultMsg(v string) *DeleteSofamqOffsetResponse {
	s.ResultMsg = &v
	return s
}

type QuerySofamqConsumptionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 租户实例ID
	//
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// ldc模式下的cell
	//
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty" require:"true"`
	// 消费者groupID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty" require:"true"`
	// 订阅的topic
	//
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// 是否带上客户端信息
	//
	NeedClientDetail *bool `json:"need_client_detail,omitempty" xml:"need_client_detail,omitempty" require:"true"`
}

func (s QuerySofamqConsumptionRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConsumptionRequest) GoString() string {
	return s.String()
}

func (s *QuerySofamqConsumptionRequest) SetAuthToken(v string) *QuerySofamqConsumptionRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySofamqConsumptionRequest) SetProductInstanceId(v string) *QuerySofamqConsumptionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySofamqConsumptionRequest) SetInstanceId(v string) *QuerySofamqConsumptionRequest {
	s.InstanceId = &v
	return s
}

func (s *QuerySofamqConsumptionRequest) SetCell(v string) *QuerySofamqConsumptionRequest {
	s.Cell = &v
	return s
}

func (s *QuerySofamqConsumptionRequest) SetGroupId(v string) *QuerySofamqConsumptionRequest {
	s.GroupId = &v
	return s
}

func (s *QuerySofamqConsumptionRequest) SetTopic(v string) *QuerySofamqConsumptionRequest {
	s.Topic = &v
	return s
}

func (s *QuerySofamqConsumptionRequest) SetNeedClientDetail(v bool) *QuerySofamqConsumptionRequest {
	s.NeedClientDetail = &v
	return s
}

type QuerySofamqConsumptionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询结果
	Data *ConsumptionStatusDTO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySofamqConsumptionResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySofamqConsumptionResponse) GoString() string {
	return s.String()
}

func (s *QuerySofamqConsumptionResponse) SetReqMsgId(v string) *QuerySofamqConsumptionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySofamqConsumptionResponse) SetResultCode(v string) *QuerySofamqConsumptionResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySofamqConsumptionResponse) SetResultMsg(v string) *QuerySofamqConsumptionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySofamqConsumptionResponse) SetData(v *ConsumptionStatusDTO) *QuerySofamqConsumptionResponse {
	s.Data = v
	return s
}

type QueryUserTopicqueueRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 需查询的 Topic 所在的 Cell
	//
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty" require:"true"`
	// 需要查询的Topic对应的实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// Topic名称
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
}

func (s QueryUserTopicqueueRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUserTopicqueueRequest) GoString() string {
	return s.String()
}

func (s *QueryUserTopicqueueRequest) SetAuthToken(v string) *QueryUserTopicqueueRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryUserTopicqueueRequest) SetProductInstanceId(v string) *QueryUserTopicqueueRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryUserTopicqueueRequest) SetCell(v string) *QueryUserTopicqueueRequest {
	s.Cell = &v
	return s
}

func (s *QueryUserTopicqueueRequest) SetInstanceId(v string) *QueryUserTopicqueueRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryUserTopicqueueRequest) SetTopic(v string) *QueryUserTopicqueueRequest {
	s.Topic = &v
	return s
}

type QueryUserTopicqueueResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// Topic队列列表信息
	Data []*TopicQueueDTO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryUserTopicqueueResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUserTopicqueueResponse) GoString() string {
	return s.String()
}

func (s *QueryUserTopicqueueResponse) SetReqMsgId(v string) *QueryUserTopicqueueResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryUserTopicqueueResponse) SetResultCode(v string) *QueryUserTopicqueueResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryUserTopicqueueResponse) SetResultMsg(v string) *QueryUserTopicqueueResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryUserTopicqueueResponse) SetData(v []*TopicQueueDTO) *QueryUserTopicqueueResponse {
	s.Data = v
	return s
}

type UpdateMessageNextdeliverytimeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 租户实例id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// subscriber group
	Group *string `json:"group,omitempty" xml:"group,omitempty" require:"true"`
	// next delivery time
	DeliveryTime *int64 `json:"delivery_time,omitempty" xml:"delivery_time,omitempty"`
}

func (s UpdateMessageNextdeliverytimeRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMessageNextdeliverytimeRequest) GoString() string {
	return s.String()
}

func (s *UpdateMessageNextdeliverytimeRequest) SetAuthToken(v string) *UpdateMessageNextdeliverytimeRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateMessageNextdeliverytimeRequest) SetProductInstanceId(v string) *UpdateMessageNextdeliverytimeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateMessageNextdeliverytimeRequest) SetInstanceId(v string) *UpdateMessageNextdeliverytimeRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateMessageNextdeliverytimeRequest) SetTopic(v string) *UpdateMessageNextdeliverytimeRequest {
	s.Topic = &v
	return s
}

func (s *UpdateMessageNextdeliverytimeRequest) SetEventcode(v string) *UpdateMessageNextdeliverytimeRequest {
	s.Eventcode = &v
	return s
}

func (s *UpdateMessageNextdeliverytimeRequest) SetGroup(v string) *UpdateMessageNextdeliverytimeRequest {
	s.Group = &v
	return s
}

func (s *UpdateMessageNextdeliverytimeRequest) SetDeliveryTime(v int64) *UpdateMessageNextdeliverytimeRequest {
	s.DeliveryTime = &v
	return s
}

type UpdateMessageNextdeliverytimeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 更新结果
	UpdateResults []*int64 `json:"update_results,omitempty" xml:"update_results,omitempty" type:"Repeated"`
}

func (s UpdateMessageNextdeliverytimeResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMessageNextdeliverytimeResponse) GoString() string {
	return s.String()
}

func (s *UpdateMessageNextdeliverytimeResponse) SetReqMsgId(v string) *UpdateMessageNextdeliverytimeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateMessageNextdeliverytimeResponse) SetResultCode(v string) *UpdateMessageNextdeliverytimeResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateMessageNextdeliverytimeResponse) SetResultMsg(v string) *UpdateMessageNextdeliverytimeResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateMessageNextdeliverytimeResponse) SetUpdateResults(v []*int64) *UpdateMessageNextdeliverytimeResponse {
	s.UpdateResults = v
	return s
}

type CountMessageUndeliveryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// middleware instance id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// topic
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty" require:"true"`
	// eventcode
	Eventcode *string `json:"eventcode,omitempty" xml:"eventcode,omitempty" require:"true"`
	// subscriber group
	Group *string `json:"group,omitempty" xml:"group,omitempty" require:"true"`
	// end time
	EndTime *string `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
}

func (s CountMessageUndeliveryRequest) String() string {
	return tea.Prettify(s)
}

func (s CountMessageUndeliveryRequest) GoString() string {
	return s.String()
}

func (s *CountMessageUndeliveryRequest) SetAuthToken(v string) *CountMessageUndeliveryRequest {
	s.AuthToken = &v
	return s
}

func (s *CountMessageUndeliveryRequest) SetProductInstanceId(v string) *CountMessageUndeliveryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CountMessageUndeliveryRequest) SetInstanceId(v string) *CountMessageUndeliveryRequest {
	s.InstanceId = &v
	return s
}

func (s *CountMessageUndeliveryRequest) SetTopic(v string) *CountMessageUndeliveryRequest {
	s.Topic = &v
	return s
}

func (s *CountMessageUndeliveryRequest) SetEventcode(v string) *CountMessageUndeliveryRequest {
	s.Eventcode = &v
	return s
}

func (s *CountMessageUndeliveryRequest) SetGroup(v string) *CountMessageUndeliveryRequest {
	s.Group = &v
	return s
}

func (s *CountMessageUndeliveryRequest) SetEndTime(v string) *CountMessageUndeliveryRequest {
	s.EndTime = &v
	return s
}

type CountMessageUndeliveryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// count of undelivered messages
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s CountMessageUndeliveryResponse) String() string {
	return tea.Prettify(s)
}

func (s CountMessageUndeliveryResponse) GoString() string {
	return s.String()
}

func (s *CountMessageUndeliveryResponse) SetReqMsgId(v string) *CountMessageUndeliveryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CountMessageUndeliveryResponse) SetResultCode(v string) *CountMessageUndeliveryResponse {
	s.ResultCode = &v
	return s
}

func (s *CountMessageUndeliveryResponse) SetResultMsg(v string) *CountMessageUndeliveryResponse {
	s.ResultMsg = &v
	return s
}

func (s *CountMessageUndeliveryResponse) SetTotalCount(v int64) *CountMessageUndeliveryResponse {
	s.TotalCount = &v
	return s
}

type LoadConnectorjobSloviewRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// source类型
	SourceType *string `json:"source_type,omitempty" xml:"source_type,omitempty" require:"true"`
	// 触发类型
	TriggerType *string `json:"trigger_type,omitempty" xml:"trigger_type,omitempty" require:"true"`
	// cron表达式的值
	TriggerValue *string `json:"trigger_value,omitempty" xml:"trigger_value,omitempty" require:"true"`
}

func (s LoadConnectorjobSloviewRequest) String() string {
	return tea.Prettify(s)
}

func (s LoadConnectorjobSloviewRequest) GoString() string {
	return s.String()
}

func (s *LoadConnectorjobSloviewRequest) SetAuthToken(v string) *LoadConnectorjobSloviewRequest {
	s.AuthToken = &v
	return s
}

func (s *LoadConnectorjobSloviewRequest) SetProductInstanceId(v string) *LoadConnectorjobSloviewRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *LoadConnectorjobSloviewRequest) SetSourceType(v string) *LoadConnectorjobSloviewRequest {
	s.SourceType = &v
	return s
}

func (s *LoadConnectorjobSloviewRequest) SetTriggerType(v string) *LoadConnectorjobSloviewRequest {
	s.TriggerType = &v
	return s
}

func (s *LoadConnectorjobSloviewRequest) SetTriggerValue(v string) *LoadConnectorjobSloviewRequest {
	s.TriggerValue = &v
	return s
}

type LoadConnectorjobSloviewResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// Slo配置
	Data *SloSpec `json:"data,omitempty" xml:"data,omitempty"`
	// 错误报告
	ErrorReport *ErrorReport `json:"error_report,omitempty" xml:"error_report,omitempty"`
}

func (s LoadConnectorjobSloviewResponse) String() string {
	return tea.Prettify(s)
}

func (s LoadConnectorjobSloviewResponse) GoString() string {
	return s.String()
}

func (s *LoadConnectorjobSloviewResponse) SetReqMsgId(v string) *LoadConnectorjobSloviewResponse {
	s.ReqMsgId = &v
	return s
}

func (s *LoadConnectorjobSloviewResponse) SetResultCode(v string) *LoadConnectorjobSloviewResponse {
	s.ResultCode = &v
	return s
}

func (s *LoadConnectorjobSloviewResponse) SetResultMsg(v string) *LoadConnectorjobSloviewResponse {
	s.ResultMsg = &v
	return s
}

func (s *LoadConnectorjobSloviewResponse) SetData(v *SloSpec) *LoadConnectorjobSloviewResponse {
	s.Data = v
	return s
}

func (s *LoadConnectorjobSloviewResponse) SetErrorReport(v *ErrorReport) *LoadConnectorjobSloviewResponse {
	s.ErrorReport = v
	return s
}

type Client struct {
	Endpoint                *string
	RegionId                *string
	AccessKeyId             *string
	AccessKeySecret         *string
	Protocol                *string
	UserAgent               *string
	ReadTimeout             *int
	ConnectTimeout          *int
	HttpProxy               *string
	HttpsProxy              *string
	Socks5Proxy             *string
	Socks5NetWork           *string
	NoProxy                 *string
	MaxIdleConns            *int
	SecurityToken           *string
	MaxIdleTimeMillis       *int
	KeepAliveDurationMillis *int
	MaxRequests             *int
	MaxRequestsPerHost      *int
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
func NewClient(config *Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *Config) (_err error) {
	if tea.BoolValue(util.IsUnset(tea.ToMap(config))) {
		_err = tea.NewSDKError(map[string]interface{}{
			"code":    "ParameterMissing",
			"message": "'config' can not be unset",
		})
		return _err
	}

	client.AccessKeyId = config.AccessKeyId
	client.AccessKeySecret = config.AccessKeySecret
	client.SecurityToken = config.SecurityToken
	client.Endpoint = config.Endpoint
	client.Protocol = config.Protocol
	client.UserAgent = config.UserAgent
	client.ReadTimeout = util.DefaultNumber(config.ReadTimeout, tea.Int(20000))
	client.ConnectTimeout = util.DefaultNumber(config.ConnectTimeout, tea.Int(20000))
	client.HttpProxy = config.HttpProxy
	client.HttpsProxy = config.HttpsProxy
	client.NoProxy = config.NoProxy
	client.Socks5Proxy = config.Socks5Proxy
	client.Socks5NetWork = config.Socks5NetWork
	client.MaxIdleConns = util.DefaultNumber(config.MaxIdleConns, tea.Int(60000))
	client.MaxIdleTimeMillis = util.DefaultNumber(config.MaxIdleTimeMillis, tea.Int(5))
	client.KeepAliveDurationMillis = util.DefaultNumber(config.KeepAliveDurationMillis, tea.Int(5000))
	client.MaxRequests = util.DefaultNumber(config.MaxRequests, tea.Int(100))
	client.MaxRequestsPerHost = util.DefaultNumber(config.MaxRequestsPerHost, tea.Int(100))
	return nil
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
func (client *Client) DoRequest(version *string, action *string, protocol *string, method *string, pathname *string, request map[string]interface{}, headers map[string]*string, runtime *util.RuntimeOptions) (_result map[string]interface{}, _err error) {
	_err = tea.Validate(runtime)
	if _err != nil {
		return _result, _err
	}
	_runtime := map[string]interface{}{
		"timeouted":               "retry",
		"readTimeout":             tea.IntValue(util.DefaultNumber(runtime.ReadTimeout, client.ReadTimeout)),
		"connectTimeout":          tea.IntValue(util.DefaultNumber(runtime.ConnectTimeout, client.ConnectTimeout)),
		"httpProxy":               tea.StringValue(util.DefaultString(runtime.HttpProxy, client.HttpProxy)),
		"httpsProxy":              tea.StringValue(util.DefaultString(runtime.HttpsProxy, client.HttpsProxy)),
		"noProxy":                 tea.StringValue(util.DefaultString(runtime.NoProxy, client.NoProxy)),
		"maxIdleConns":            tea.IntValue(util.DefaultNumber(runtime.MaxIdleConns, client.MaxIdleConns)),
		"maxIdleTimeMillis":       tea.IntValue(client.MaxIdleTimeMillis),
		"keepAliveDurationMillis": tea.IntValue(client.KeepAliveDurationMillis),
		"maxRequests":             tea.IntValue(client.MaxRequests),
		"maxRequestsPerHost":      tea.IntValue(client.MaxRequestsPerHost),
		"retry": map[string]interface{}{
			"retryable":   tea.BoolValue(runtime.Autoretry),
			"maxAttempts": tea.IntValue(util.DefaultNumber(runtime.MaxAttempts, tea.Int(3))),
		},
		"backoff": map[string]interface{}{
			"policy": tea.StringValue(util.DefaultString(runtime.BackoffPolicy, tea.String("no"))),
			"period": tea.IntValue(util.DefaultNumber(runtime.BackoffPeriod, tea.Int(1))),
		},
		"ignoreSSL": tea.BoolValue(runtime.IgnoreSSL),
	}

	_resp := make(map[string]interface{})
	for _retryTimes := 0; tea.BoolValue(tea.AllowRetry(_runtime["retry"], tea.Int(_retryTimes))); _retryTimes++ {
		if _retryTimes > 0 {
			_backoffTime := tea.GetBackoffTime(_runtime["backoff"], tea.Int(_retryTimes))
			if tea.IntValue(_backoffTime) > 0 {
				tea.Sleep(_backoffTime)
			}
		}

		_resp, _err = func() (map[string]interface{}, error) {
			request_ := tea.NewRequest()
			request_.Protocol = util.DefaultString(client.Protocol, protocol)
			request_.Method = method
			request_.Pathname = pathname
			request_.Query = map[string]*string{
				"method":           action,
				"version":          version,
				"sign_type":        tea.String("HmacSHA1"),
				"req_time":         antchainutil.GetTimestamp(),
				"req_msg_id":       antchainutil.GetNonce(),
				"access_key":       client.AccessKeyId,
				"base_sdk_version": tea.String("TeaSDK-2.0"),
				"sdk_version":      tea.String("3.8.22"),
			}
			if !tea.BoolValue(util.Empty(client.SecurityToken)) {
				request_.Query["security_token"] = client.SecurityToken
			}

			request_.Headers = tea.Merge(map[string]*string{
				"host":       util.DefaultString(client.Endpoint, tea.String("openapi.antchain.antgroup.com")),
				"user-agent": util.GetUserAgent(client.UserAgent),
			}, headers)
			tmp := util.AnyifyMapValue(rpcutil.Query(request))
			request_.Body = tea.ToReader(util.ToFormString(tmp))
			request_.Headers["content-type"] = tea.String("application/x-www-form-urlencoded")
			signedParam := tea.Merge(request_.Query,
				rpcutil.Query(request))
			request_.Query["sign"] = antchainutil.GetSignature(signedParam, client.AccessKeySecret)
			response_, _err := tea.DoRequest(request_, _runtime)
			if _err != nil {
				return _result, _err
			}
			raw, _err := util.ReadAsString(response_.Body)
			if _err != nil {
				return _result, _err
			}

			obj := util.ParseJSON(raw)
			res := util.AssertAsMap(obj)
			resp := util.AssertAsMap(res["response"])
			if tea.BoolValue(antchainutil.HasError(raw, client.AccessKeySecret)) {
				_err = tea.NewSDKError(map[string]interface{}{
					"message": resp["result_msg"],
					"data":    resp,
					"code":    resp["result_code"],
				})
				return _result, _err
			}

			_result = resp
			return _result, _err
		}()
		if !tea.BoolValue(tea.Retryable(_err)) {
			break
		}
	}

	return _resp, _err
}

/**
 * Description: Query undelivery message status.
 * Summary: query undelivery message status
 */
func (client *Client) StatusMqMessageUndelivery(request *StatusMqMessageUndeliveryRequest) (_result *StatusMqMessageUndeliveryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StatusMqMessageUndeliveryResponse{}
	_body, _err := client.StatusMqMessageUndeliveryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: Query undelivery message status.
 * Summary: query undelivery message status
 */
func (client *Client) StatusMqMessageUndeliveryEx(request *StatusMqMessageUndeliveryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StatusMqMessageUndeliveryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StatusMqMessageUndeliveryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("mq.message.undelivery.status"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: Query undelivery message status.
 * Summary: query undelivery message status
 */
func (client *Client) UndeliverMessageStatus(request *UndeliverMessageStatusRequest) (_result *UndeliverMessageStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UndeliverMessageStatusResponse{}
	_body, _err := client.UndeliverMessageStatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: Query undelivery message status.
 * Summary: query undelivery message status
 */
func (client *Client) UndeliverMessageStatusEx(request *UndeliverMessageStatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UndeliverMessageStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UndeliverMessageStatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("sofa.mq.message.status.undeliver"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: Add a message type.
 * Summary: add a message type
 */
func (client *Client) AddMsgtype(request *AddMsgtypeRequest) (_result *AddMsgtypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddMsgtypeResponse{}
	_body, _err := client.AddMsgtypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: Add a message type.
 * Summary: add a message type
 */
func (client *Client) AddMsgtypeEx(request *AddMsgtypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddMsgtypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddMsgtypeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("sofa.mq.msgtype.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: Update a message type.
 * Summary: update a message type
 */
func (client *Client) UpdateMsgtype(request *UpdateMsgtypeRequest) (_result *UpdateMsgtypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateMsgtypeResponse{}
	_body, _err := client.UpdateMsgtypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: Update a message type.
 * Summary: update a message type
 */
func (client *Client) UpdateMsgtypeEx(request *UpdateMsgtypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateMsgtypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateMsgtypeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("sofa.mq.msgtype.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: Delete a message type.
 * Summary: delete a message type
 */
func (client *Client) DeleteMsgtype(request *DeleteMsgtypeRequest) (_result *DeleteMsgtypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteMsgtypeResponse{}
	_body, _err := client.DeleteMsgtypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: Delete a message type.
 * Summary: delete a message type
 */
func (client *Client) DeleteMsgtypeEx(request *DeleteMsgtypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteMsgtypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteMsgtypeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("sofa.mq.msgtype.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: Query the collection of message type.
 * Summary: query the collection of message type
 */
func (client *Client) QueryMsgtype(request *QueryMsgtypeRequest) (_result *QueryMsgtypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMsgtypeResponse{}
	_body, _err := client.QueryMsgtypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: Query the collection of message type.
 * Summary: query the collection of message type
 */
func (client *Client) QueryMsgtypeEx(request *QueryMsgtypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMsgtypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMsgtypeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("sofa.mq.msgtype.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: Add a binding.
 * Summary: add a binding
 */
func (client *Client) AddBinding(request *AddBindingRequest) (_result *AddBindingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddBindingResponse{}
	_body, _err := client.AddBindingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: Add a binding.
 * Summary: add a binding
 */
func (client *Client) AddBindingEx(request *AddBindingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddBindingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddBindingResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("sofa.mq.binding.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: Update a binding.
 * Summary: update a binding
 */
func (client *Client) UpdateBinding(request *UpdateBindingRequest) (_result *UpdateBindingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateBindingResponse{}
	_body, _err := client.UpdateBindingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: Update a binding.
 * Summary: update a binding
 */
func (client *Client) UpdateBindingEx(request *UpdateBindingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateBindingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateBindingResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("sofa.mq.binding.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: Delete a binding.
 * Summary: delete a binding
 */
func (client *Client) DeleteBinding(request *DeleteBindingRequest) (_result *DeleteBindingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteBindingResponse{}
	_body, _err := client.DeleteBindingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: Delete a binding.
 * Summary: delete a binding
 */
func (client *Client) DeleteBindingEx(request *DeleteBindingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteBindingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteBindingResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("sofa.mq.binding.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: Query the collection of binding.
 * Summary: query the collection of binding
 */
func (client *Client) QueryBinding(request *QueryBindingRequest) (_result *QueryBindingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBindingResponse{}
	_body, _err := client.QueryBindingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: Query the collection of binding.
 * Summary: query the collection of binding
 */
func (client *Client) QueryBindingEx(request *QueryBindingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBindingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBindingResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("sofa.mq.binding.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: Queue switchover execute.
 * Summary: Queue switchover execute
 */
func (client *Client) ExecuteSwitchover(request *ExecuteSwitchoverRequest) (_result *ExecuteSwitchoverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecuteSwitchoverResponse{}
	_body, _err := client.ExecuteSwitchoverEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: Queue switchover execute.
 * Summary: Queue switchover execute
 */
func (client *Client) ExecuteSwitchoverEx(request *ExecuteSwitchoverRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecuteSwitchoverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecuteSwitchoverResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("sofa.mq.switchover.execute"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: Queue switchover cancel.
 * Summary: Queue switchover cancel
 */
func (client *Client) CancelSwitchover(request *CancelSwitchoverRequest) (_result *CancelSwitchoverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelSwitchoverResponse{}
	_body, _err := client.CancelSwitchoverEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: Queue switchover cancel.
 * Summary: Queue switchover cancel
 */
func (client *Client) CancelSwitchoverEx(request *CancelSwitchoverRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelSwitchoverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelSwitchoverResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("sofa.mq.switchover.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: Queue switchover query.
 * Summary: Queue switchover query
 */
func (client *Client) QuerySwitchover(request *QuerySwitchoverRequest) (_result *QuerySwitchoverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySwitchoverResponse{}
	_body, _err := client.QuerySwitchoverEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: Queue switchover query.
 * Summary: Queue switchover query
 */
func (client *Client) QuerySwitchoverEx(request *QuerySwitchoverRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySwitchoverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySwitchoverResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("sofa.mq.switchover.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: Query the collection of message type.
 * Summary: query the collection of message type
 */
func (client *Client) GetMsgtype(request *GetMsgtypeRequest) (_result *GetMsgtypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetMsgtypeResponse{}
	_body, _err := client.GetMsgtypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: Query the collection of message type.
 * Summary: query the collection of message type
 */
func (client *Client) GetMsgtypeEx(request *GetMsgtypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetMsgtypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetMsgtypeResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.msgtype.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: Query undelivery message status.
 * Summary: query undelivery message status
 */
func (client *Client) UndeliveryMessageStatus(request *UndeliveryMessageStatusRequest) (_result *UndeliveryMessageStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UndeliveryMessageStatusResponse{}
	_body, _err := client.UndeliveryMessageStatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: Query undelivery message status.
 * Summary: query undelivery message status
 */
func (client *Client) UndeliveryMessageStatusEx(request *UndeliveryMessageStatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UndeliveryMessageStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UndeliveryMessageStatusResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.message.status.undelivery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: query topics
 * Summary: query topics
 */
func (client *Client) QueryTopics(request *QueryTopicsRequest) (_result *QueryTopicsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTopicsResponse{}
	_body, _err := client.QueryTopicsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: query topics
 * Summary: query topics
 */
func (client *Client) QueryTopicsEx(request *QueryTopicsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTopicsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTopicsResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.topics.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: query topic
 * Summary: query topic
 */
func (client *Client) IdTopicQuery(request *IdTopicQueryRequest) (_result *IdTopicQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &IdTopicQueryResponse{}
	_body, _err := client.IdTopicQueryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: query topic
 * Summary: query topic
 */
func (client *Client) IdTopicQueryEx(request *IdTopicQueryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *IdTopicQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &IdTopicQueryResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.topic.query.id"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: add topic
 * Summary: add topic
 */
func (client *Client) AddTopic(request *AddTopicRequest) (_result *AddTopicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddTopicResponse{}
	_body, _err := client.AddTopicEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: add topic
 * Summary: add topic
 */
func (client *Client) AddTopicEx(request *AddTopicRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddTopicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddTopicResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.topic.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: update topic
 * Summary: update topic
 */
func (client *Client) UpdateTopic(request *UpdateTopicRequest) (_result *UpdateTopicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateTopicResponse{}
	_body, _err := client.UpdateTopicEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: update topic
 * Summary: update topic
 */
func (client *Client) UpdateTopicEx(request *UpdateTopicRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateTopicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateTopicResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.topic.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: delete topic
 * Summary: delete topic
 */
func (client *Client) DeleteTopic(request *DeleteTopicRequest) (_result *DeleteTopicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteTopicResponse{}
	_body, _err := client.DeleteTopicEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: delete topic
 * Summary: delete topic
 */
func (client *Client) DeleteTopicEx(request *DeleteTopicRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteTopicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteTopicResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.topic.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: query bindings
 * Summary: query bindings
 */
func (client *Client) QueryBindings(request *QueryBindingsRequest) (_result *QueryBindingsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBindingsResponse{}
	_body, _err := client.QueryBindingsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: query bindings
 * Summary: query bindings
 */
func (client *Client) QueryBindingsEx(request *QueryBindingsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBindingsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBindingsResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.bindings.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: query binding
 * Summary: query binding
 */
func (client *Client) IdBindingQuery(request *IdBindingQueryRequest) (_result *IdBindingQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &IdBindingQueryResponse{}
	_body, _err := client.IdBindingQueryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: query binding
 * Summary: query binding
 */
func (client *Client) IdBindingQueryEx(request *IdBindingQueryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *IdBindingQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &IdBindingQueryResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.binding.query.id"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询指定实例下 Topic 的信息列表。
 * Summary: 查询Topic列表
 */
func (client *Client) ListSofamqTopic(request *ListSofamqTopicRequest) (_result *ListSofamqTopicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqTopicResponse{}
	_body, _err := client.ListSofamqTopicEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询指定实例下 Topic 的信息列表。
 * Summary: 查询Topic列表
 */
func (client *Client) ListSofamqTopicEx(request *ListSofamqTopicRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqTopicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqTopicResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.topic.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 在指定环境实例下创建一个 Topic，需要指定消息类型与 Topic 名称。
 * Summary: 创建Topic
 */
func (client *Client) CreateSofamqTopic(request *CreateSofamqTopicRequest) (_result *CreateSofamqTopicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSofamqTopicResponse{}
	_body, _err := client.CreateSofamqTopicEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 在指定环境实例下创建一个 Topic，需要指定消息类型与 Topic 名称。
 * Summary: 创建Topic
 */
func (client *Client) CreateSofamqTopicEx(request *CreateSofamqTopicRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSofamqTopicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSofamqTopicResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.topic.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除指定的 Topic。删除后，该 Topic 下所有的订阅关系会被清理，需谨慎调用。
 * Summary: 删除Topic
 */
func (client *Client) DeleteSofamqTopic(request *DeleteSofamqTopicRequest) (_result *DeleteSofamqTopicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSofamqTopicResponse{}
	_body, _err := client.DeleteSofamqTopicEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除指定的 Topic。删除后，该 Topic 下所有的订阅关系会被清理，需谨慎调用。
 * Summary: 删除Topic
 */
func (client *Client) DeleteSofamqTopicEx(request *DeleteSofamqTopicRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSofamqTopicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSofamqTopicResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.topic.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新指定 Topic 的读写权限配置。
 * Summary: 更新Topic读写权限
 */
func (client *Client) UpdateSofamqTopic(request *UpdateSofamqTopicRequest) (_result *UpdateSofamqTopicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSofamqTopicResponse{}
	_body, _err := client.UpdateSofamqTopicEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新指定 Topic 的读写权限配置。
 * Summary: 更新Topic读写权限
 */
func (client *Client) UpdateSofamqTopicEx(request *UpdateSofamqTopicRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSofamqTopicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSofamqTopicResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.topic.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: sofamq list instance
 * Summary: sofamq list instance
 */
func (client *Client) ListSofamqInstance(request *ListSofamqInstanceRequest) (_result *ListSofamqInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqInstanceResponse{}
	_body, _err := client.ListSofamqInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: sofamq list instance
 * Summary: sofamq list instance
 */
func (client *Client) ListSofamqInstanceEx(request *ListSofamqInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.instance.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: sofamq instance create
 * Summary: instance create
 */
func (client *Client) CreateSofamqInstance(request *CreateSofamqInstanceRequest) (_result *CreateSofamqInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSofamqInstanceResponse{}
	_body, _err := client.CreateSofamqInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: sofamq instance create
 * Summary: instance create
 */
func (client *Client) CreateSofamqInstanceEx(request *CreateSofamqInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSofamqInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSofamqInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.instance.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: instance delete
 * Summary: instance delete
 */
func (client *Client) DeleteSofamqInstance(request *DeleteSofamqInstanceRequest) (_result *DeleteSofamqInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSofamqInstanceResponse{}
	_body, _err := client.DeleteSofamqInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: instance delete
 * Summary: instance delete
 */
func (client *Client) DeleteSofamqInstanceEx(request *DeleteSofamqInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSofamqInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSofamqInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.instance.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 使用 InstanceUpdate 更新实例名称和描述
 * Summary: instance update
 */
func (client *Client) UpdateSofamqInstance(request *UpdateSofamqInstanceRequest) (_result *UpdateSofamqInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSofamqInstanceResponse{}
	_body, _err := client.UpdateSofamqInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 使用 InstanceUpdate 更新实例名称和描述
 * Summary: instance update
 */
func (client *Client) UpdateSofamqInstanceEx(request *UpdateSofamqInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSofamqInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSofamqInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.instance.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建 Group ID。创建的 Group ID 用于发布和订阅消息。
 * Summary: 创建Group
 */
func (client *Client) CreateSofamqGroup(request *CreateSofamqGroupRequest) (_result *CreateSofamqGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSofamqGroupResponse{}
	_body, _err := client.CreateSofamqGroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建 Group ID。创建的 Group ID 用于发布和订阅消息。
 * Summary: 创建Group
 */
func (client *Client) CreateSofamqGroupEx(request *CreateSofamqGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSofamqGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSofamqGroupResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.group.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询指定环境实例下 Group ID 资源的信息列表。
 * Summary: 查询Group列表
 */
func (client *Client) ListSofamqGroup(request *ListSofamqGroupRequest) (_result *ListSofamqGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqGroupResponse{}
	_body, _err := client.ListSofamqGroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询指定环境实例下 Group ID 资源的信息列表。
 * Summary: 查询Group列表
 */
func (client *Client) ListSofamqGroupEx(request *ListSofamqGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqGroupResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.group.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除指定的 Group。
 * Summary: 删除Group
 */
func (client *Client) DeleteSofamqGroup(request *DeleteSofamqGroupRequest) (_result *DeleteSofamqGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSofamqGroupResponse{}
	_body, _err := client.DeleteSofamqGroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除指定的 Group。
 * Summary: 删除Group
 */
func (client *Client) DeleteSofamqGroupEx(request *DeleteSofamqGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSofamqGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSofamqGroupResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.group.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新指定 Group 的读权限配置。
 * Summary: 更新Group读权限
 */
func (client *Client) UpdateSofamqGroup(request *UpdateSofamqGroupRequest) (_result *UpdateSofamqGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSofamqGroupResponse{}
	_body, _err := client.UpdateSofamqGroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新指定 Group 的读权限配置。
 * Summary: 更新Group读权限
 */
func (client *Client) UpdateSofamqGroupEx(request *UpdateSofamqGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSofamqGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSofamqGroupResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.group.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询指定的 Topic 下的消息总量以及 Topic 的最后更新时间。
 * Summary: 查询Topic状态
 */
func (client *Client) QuerySofamqTopicstatus(request *QuerySofamqTopicstatusRequest) (_result *QuerySofamqTopicstatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqTopicstatusResponse{}
	_body, _err := client.QuerySofamqTopicstatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询指定的 Topic 下的消息总量以及 Topic 的最后更新时间。
 * Summary: 查询Topic状态
 */
func (client *Client) QuerySofamqTopicstatusEx(request *QuerySofamqTopicstatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqTopicstatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqTopicstatusResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.topicstatus.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询指定的 Topic 被哪些在线的订阅组订阅了。
 * Summary: 查看在线订阅组
 */
func (client *Client) QuerySofamqTopicsubdetail(request *QuerySofamqTopicsubdetailRequest) (_result *QuerySofamqTopicsubdetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqTopicsubdetailResponse{}
	_body, _err := client.QuerySofamqTopicsubdetailEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询指定的 Topic 被哪些在线的订阅组订阅了。
 * Summary: 查看在线订阅组
 */
func (client *Client) QuerySofamqTopicsubdetailEx(request *QuerySofamqTopicsubdetailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqTopicsubdetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqTopicsubdetailResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.topicsubdetail.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: node list
 * Summary: node list
 */
func (client *Client) ListSofamqNode(request *ListSofamqNodeRequest) (_result *ListSofamqNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqNodeResponse{}
	_body, _err := client.ListSofamqNodeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: node list
 * Summary: node list
 */
func (client *Client) ListSofamqNodeEx(request *ListSofamqNodeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqNodeResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.node.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: create node
 * Summary: create node
 */
func (client *Client) CreateSofamqNode(request *CreateSofamqNodeRequest) (_result *CreateSofamqNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSofamqNodeResponse{}
	_body, _err := client.CreateSofamqNodeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: create node
 * Summary: create node
 */
func (client *Client) CreateSofamqNodeEx(request *CreateSofamqNodeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSofamqNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSofamqNodeResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.node.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: room create
 * Summary: room create
 */
func (client *Client) CreateSofamqRoom(request *CreateSofamqRoomRequest) (_result *CreateSofamqRoomResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSofamqRoomResponse{}
	_body, _err := client.CreateSofamqRoomEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: room create
 * Summary: room create
 */
func (client *Client) CreateSofamqRoomEx(request *CreateSofamqRoomRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSofamqRoomResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSofamqRoomResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.room.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: create cell
 * Summary: create cell
 */
func (client *Client) CreateSofamqCell(request *CreateSofamqCellRequest) (_result *CreateSofamqCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSofamqCellResponse{}
	_body, _err := client.CreateSofamqCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: create cell
 * Summary: create cell
 */
func (client *Client) CreateSofamqCellEx(request *CreateSofamqCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSofamqCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSofamqCellResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.cell.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: create cluster
 * Summary: create cluster
 */
func (client *Client) CreateSofamqCluster(request *CreateSofamqClusterRequest) (_result *CreateSofamqClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSofamqClusterResponse{}
	_body, _err := client.CreateSofamqClusterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: create cluster
 * Summary: create cluster
 */
func (client *Client) CreateSofamqClusterEx(request *CreateSofamqClusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSofamqClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSofamqClusterResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.cluster.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: create namespace
 * Summary: create namespace
 */
func (client *Client) CreateSofamqNamespace(request *CreateSofamqNamespaceRequest) (_result *CreateSofamqNamespaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSofamqNamespaceResponse{}
	_body, _err := client.CreateSofamqNamespaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: create namespace
 * Summary: create namespace
 */
func (client *Client) CreateSofamqNamespaceEx(request *CreateSofamqNamespaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSofamqNamespaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSofamqNamespaceResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.namespace.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: room list
 * Summary: room list
 */
func (client *Client) ListSofamqRoom(request *ListSofamqRoomRequest) (_result *ListSofamqRoomResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqRoomResponse{}
	_body, _err := client.ListSofamqRoomEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: room list
 * Summary: room list
 */
func (client *Client) ListSofamqRoomEx(request *ListSofamqRoomRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqRoomResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqRoomResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.room.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询cell列表
 * Summary: 查询cell列表
 */
func (client *Client) ListSofamqCell(request *ListSofamqCellRequest) (_result *ListSofamqCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqCellResponse{}
	_body, _err := client.ListSofamqCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询cell列表
 * Summary: 查询cell列表
 */
func (client *Client) ListSofamqCellEx(request *ListSofamqCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqCellResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.cell.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: list cluster
 * Summary: list cluster
 */
func (client *Client) ListSofamqCluster(request *ListSofamqClusterRequest) (_result *ListSofamqClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqClusterResponse{}
	_body, _err := client.ListSofamqClusterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: list cluster
 * Summary: list cluster
 */
func (client *Client) ListSofamqClusterEx(request *ListSofamqClusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqClusterResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.cluster.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查看指定的 Group ID 订阅了哪些 Topic。如果 Group ID 对应的消费者实例不在线，则查不到数据。
 * Summary: 查看在线订阅组
 */
func (client *Client) QuerySofamqGroupsubdetail(request *QuerySofamqGroupsubdetailRequest) (_result *QuerySofamqGroupsubdetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqGroupsubdetailResponse{}
	_body, _err := client.QuerySofamqGroupsubdetailEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查看指定的 Group ID 订阅了哪些 Topic。如果 Group ID 对应的消费者实例不在线，则查不到数据。
 * Summary: 查看在线订阅组
 */
func (client *Client) QuerySofamqGroupsubdetailEx(request *QuerySofamqGroupsubdetailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqGroupsubdetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqGroupsubdetailResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.groupsubdetail.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询实例基本信息和收发消息的接入点
 * Summary: 查询实例基本信息
 */
func (client *Client) GetSofamqInstancebaseinfo(request *GetSofamqInstancebaseinfoRequest) (_result *GetSofamqInstancebaseinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSofamqInstancebaseinfoResponse{}
	_body, _err := client.GetSofamqInstancebaseinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询实例基本信息和收发消息的接入点
 * Summary: 查询实例基本信息
 */
func (client *Client) GetSofamqInstancebaseinfoEx(request *GetSofamqInstancebaseinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSofamqInstancebaseinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSofamqInstancebaseinfoResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.instancebaseinfo.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重置指定的 Group ID 的消费位点到指定时间戳。本接口一般用于清理堆积消息，或者回溯消费。提供以下两种清理方式：清理所有消息、清理消费进度到指定的时间。
 * Summary: 重置消费位点
 */
func (client *Client) ExecSofamqConsumerresetoffset(request *ExecSofamqConsumerresetoffsetRequest) (_result *ExecSofamqConsumerresetoffsetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecSofamqConsumerresetoffsetResponse{}
	_body, _err := client.ExecSofamqConsumerresetoffsetEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重置指定的 Group ID 的消费位点到指定时间戳。本接口一般用于清理堆积消息，或者回溯消费。提供以下两种清理方式：清理所有消息、清理消费进度到指定的时间。
 * Summary: 重置消费位点
 */
func (client *Client) ExecSofamqConsumerresetoffsetEx(request *ExecSofamqConsumerresetoffsetRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecSofamqConsumerresetoffsetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecSofamqConsumerresetoffsetResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.consumerresetoffset.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 消费堆积查询一般在生产环境中需要关注 Group ID 消费进度时使用，用于粗略判断消息消费情况和延迟情况。您不仅可以查到该 Group ID 订阅的所有 Topic 的消息堆积情况，还可以查到每个 Topic 各自的消息堆积情况。
 * Summary: 消费者堆积查询
 */
func (client *Client) QuerySofamqConsumeraccumulate(request *QuerySofamqConsumeraccumulateRequest) (_result *QuerySofamqConsumeraccumulateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqConsumeraccumulateResponse{}
	_body, _err := client.QuerySofamqConsumeraccumulateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 消费堆积查询一般在生产环境中需要关注 Group ID 消费进度时使用，用于粗略判断消息消费情况和延迟情况。您不仅可以查到该 Group ID 订阅的所有 Topic 的消息堆积情况，还可以查到每个 Topic 各自的消息堆积情况。
 * Summary: 消费者堆积查询
 */
func (client *Client) QuerySofamqConsumeraccumulateEx(request *QuerySofamqConsumeraccumulateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqConsumeraccumulateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqConsumeraccumulateResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.consumeraccumulate.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 判断指定 Group ID 的消费者是否在线，并获取详细的客户端连接的列表。
 * Summary: 查询指定当前客户端的连接情况。
 */
func (client *Client) QuerySofamqConsumerconnection(request *QuerySofamqConsumerconnectionRequest) (_result *QuerySofamqConsumerconnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqConsumerconnectionResponse{}
	_body, _err := client.QuerySofamqConsumerconnectionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 判断指定 Group ID 的消费者是否在线，并获取详细的客户端连接的列表。
 * Summary: 查询指定当前客户端的连接情况。
 */
func (client *Client) QuerySofamqConsumerconnectionEx(request *QuerySofamqConsumerconnectionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqConsumerconnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqConsumerconnectionResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.consumerconnection.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询指定的 Group ID 订阅的 Topic 的最新消息时间戳以及消费的最新时间。可以查询某个 Topic 当前服务器上存在的消息的最新时间和最早时间，以及查询消费端最近消费的时间。本接口一般用于展示消费进度的概况，与 QueryMqSofamqConsumerAccumulate 接口配合使用。
 * Summary: 查询时间跨度
 */
func (client *Client) QuerySofamqConsumertimespan(request *QuerySofamqConsumertimespanRequest) (_result *QuerySofamqConsumertimespanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqConsumertimespanResponse{}
	_body, _err := client.QuerySofamqConsumertimespanEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询指定的 Group ID 订阅的 Topic 的最新消息时间戳以及消费的最新时间。可以查询某个 Topic 当前服务器上存在的消息的最新时间和最早时间，以及查询消费端最近消费的时间。本接口一般用于展示消费进度的概况，与 QueryMqSofamqConsumerAccumulate 接口配合使用。
 * Summary: 查询时间跨度
 */
func (client *Client) QuerySofamqConsumertimespanEx(request *QuerySofamqConsumertimespanRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqConsumertimespanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqConsumertimespanResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.consumertimespan.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 本接口的实现基于消息队列 Sofamq的内部位点机制，在大部分场景下判断结果可信，但如果应用方进行过重置位点已经清除消息等操作，则判断结果可能有误。
 * Summary: 判断目标消息是否曾被消费过
 */
func (client *Client) QuerySofamqMessagetrace(request *QuerySofamqMessagetraceRequest) (_result *QuerySofamqMessagetraceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqMessagetraceResponse{}
	_body, _err := client.QuerySofamqMessagetraceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 本接口的实现基于消息队列 Sofamq的内部位点机制，在大部分场景下判断结果可信，但如果应用方进行过重置位点已经清除消息等操作，则判断结果可能有误。
 * Summary: 判断目标消息是否曾被消费过
 */
func (client *Client) QuerySofamqMessagetraceEx(request *QuerySofamqMessagetraceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqMessagetraceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqMessagetraceResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.messagetrace.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据指定的 Message ID，查询消息。该查询方式属于精确查询。查询条件需要的 Message ID 从每次消息发送成功的 SendResult 中获取，因此业务方必须存储每次发送消息的结果。
 * Summary: 按Message ID查询消息
 */
func (client *Client) GetSofamqMessagebymsgid(request *GetSofamqMessagebymsgidRequest) (_result *GetSofamqMessagebymsgidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSofamqMessagebymsgidResponse{}
	_body, _err := client.GetSofamqMessagebymsgidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据指定的 Message ID，查询消息。该查询方式属于精确查询。查询条件需要的 Message ID 从每次消息发送成功的 SendResult 中获取，因此业务方必须存储每次发送消息的结果。
 * Summary: 按Message ID查询消息
 */
func (client *Client) GetSofamqMessagebymsgidEx(request *GetSofamqMessagebymsgidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSofamqMessagebymsgidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSofamqMessagebymsgidResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.messagebymsgid.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据指定的 Message Key，查询消息，该查询方式属于模糊查询。由于业务方的 Key 可能不唯一，所以查询结果可能为多条。
 * Summary: 按Message Key查询消息
 */
func (client *Client) QuerySofamqMessagebykey(request *QuerySofamqMessagebykeyRequest) (_result *QuerySofamqMessagebykeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqMessagebykeyResponse{}
	_body, _err := client.QuerySofamqMessagebykeyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据指定的 Message Key，查询消息，该查询方式属于模糊查询。由于业务方的 Key 可能不唯一，所以查询结果可能为多条。
 * Summary: 按Message Key查询消息
 */
func (client *Client) QuerySofamqMessagebykeyEx(request *QuerySofamqMessagebykeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqMessagebykeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqMessagebykeyResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.messagebykey.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 已记录了某消息的 Message ID，如需根据此 Message ID 查询该消息的投递轨迹信息，可调用本接口创建查询任务。本接口返回任务 ID 后，可调用 GetMqSofamqTraceResult 接口传入任务 ID，以获取轨迹查询结果。
 * Summary: 通过MsgId创建轨迹查询任务
 */
func (client *Client) GetSofamqTracebymsgid(request *GetSofamqTracebymsgidRequest) (_result *GetSofamqTracebymsgidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSofamqTracebymsgidResponse{}
	_body, _err := client.GetSofamqTracebymsgidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 已记录了某消息的 Message ID，如需根据此 Message ID 查询该消息的投递轨迹信息，可调用本接口创建查询任务。本接口返回任务 ID 后，可调用 GetMqSofamqTraceResult 接口传入任务 ID，以获取轨迹查询结果。
 * Summary: 通过MsgId创建轨迹查询任务
 */
func (client *Client) GetSofamqTracebymsgidEx(request *GetSofamqTracebymsgidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSofamqTracebymsgidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSofamqTracebymsgidResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.tracebymsgid.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 已记录了 Message Key ，如需根据此 Message Key 查询该消息的投递轨迹信息，即可调用本接口创建查询任务。
 * Summary: 通过MsgKey创建轨迹查询任务
 */
func (client *Client) QuerySofamqTracebymsgkey(request *QuerySofamqTracebymsgkeyRequest) (_result *QuerySofamqTracebymsgkeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqTracebymsgkeyResponse{}
	_body, _err := client.QuerySofamqTracebymsgkeyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 已记录了 Message Key ，如需根据此 Message Key 查询该消息的投递轨迹信息，即可调用本接口创建查询任务。
 * Summary: 通过MsgKey创建轨迹查询任务
 */
func (client *Client) QuerySofamqTracebymsgkeyEx(request *QuerySofamqTracebymsgkeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqTracebymsgkeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqTracebymsgkeyResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.tracebymsgkey.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 已根据 Message ID 或者 Message Key 创建了轨迹查询任务，并得到了查询任务的 ID。此时，可调用本接口通过传入该查询任务 ID，获取对应的轨迹查询的结果明细。
 * Summary: 获取轨迹查询结果
 */
func (client *Client) GetSofamqTraceresult(request *GetSofamqTraceresultRequest) (_result *GetSofamqTraceresultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSofamqTraceresultResponse{}
	_body, _err := client.GetSofamqTraceresultEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 已根据 Message ID 或者 Message Key 创建了轨迹查询任务，并得到了查询任务的 ID。此时，可调用本接口通过传入该查询任务 ID，获取对应的轨迹查询的结果明细。
 * Summary: 获取轨迹查询结果
 */
func (client *Client) GetSofamqTraceresultEx(request *GetSofamqTraceresultRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSofamqTraceresultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSofamqTraceresultResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.traceresult.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 您可以使用本接口获取在线上环境统计的 Topic 的消息数据信息，可以根据需要择查询指定时间段内 Topic 的写入量或者 TPS 曲线数据。
 * Summary: 查询一段时间写入报表数据
 */
func (client *Client) QuerySofamqInputtps(request *QuerySofamqInputtpsRequest) (_result *QuerySofamqInputtpsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqInputtpsResponse{}
	_body, _err := client.QuerySofamqInputtpsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 您可以使用本接口获取在线上环境统计的 Topic 的消息数据信息，可以根据需要择查询指定时间段内 Topic 的写入量或者 TPS 曲线数据。
 * Summary: 查询一段时间写入报表数据
 */
func (client *Client) QuerySofamqInputtpsEx(request *QuerySofamqInputtpsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqInputtpsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqInputtpsResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.inputtps.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 线上环境生成消费数据报表时，可以使用本接口查询指定的 Group ID 在一段时间内的以下统计信息：

消费消息总量的统计曲线
消费消息 TPS 的统计曲线
 * Summary: 查询一段时间内消费消息统计信息
*/
func (client *Client) QuerySofamqOutputtps(request *QuerySofamqOutputtpsRequest) (_result *QuerySofamqOutputtpsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqOutputtpsResponse{}
	_body, _err := client.QuerySofamqOutputtpsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 线上环境生成消费数据报表时，可以使用本接口查询指定的 Group ID 在一段时间内的以下统计信息：

消费消息总量的统计曲线
消费消息 TPS 的统计曲线
 * Summary: 查询一段时间内消费消息统计信息
*/
func (client *Client) QuerySofamqOutputtpsEx(request *QuerySofamqOutputtpsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqOutputtpsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqOutputtpsResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.outputtps.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据 Message ID，查询死信消息。该查询方式属于精确查询。查询条件需要的 Message ID 从消息发送成功的 SendResult 中获取，或者从批量查询的接口中获取。
 * Summary: 按Message ID查询死信消息
 */
func (client *Client) GetSofamqDlqbyid(request *GetSofamqDlqbyidRequest) (_result *GetSofamqDlqbyidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSofamqDlqbyidResponse{}
	_body, _err := client.GetSofamqDlqbyidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据 Message ID，查询死信消息。该查询方式属于精确查询。查询条件需要的 Message ID 从消息发送成功的 SendResult 中获取，或者从批量查询的接口中获取。
 * Summary: 按Message ID查询死信消息
 */
func (client *Client) GetSofamqDlqbyidEx(request *GetSofamqDlqbyidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSofamqDlqbyidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSofamqDlqbyidResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.dlqbyid.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重发指定 Message ID 的死信消息。使该死信消息复活，让消息能够被 Consumer 再消费一次。

死信消息已达最大重试次数，若重发后再次消费失败，则死信队列中将增加一条 Message ID 相同的消息，可通过控制台死信队列的查询页面或者管控 API 查看该结果。您可通过同一 Message ID 的消息出现次数判断重发后依然消费失败的次数。
 * Summary: 重新发送死信消息
*/
func (client *Client) ExecSofamqDlqresendbyid(request *ExecSofamqDlqresendbyidRequest) (_result *ExecSofamqDlqresendbyidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecSofamqDlqresendbyidResponse{}
	_body, _err := client.ExecSofamqDlqresendbyidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重发指定 Message ID 的死信消息。使该死信消息复活，让消息能够被 Consumer 再消费一次。

死信消息已达最大重试次数，若重发后再次消费失败，则死信队列中将增加一条 Message ID 相同的消息，可通过控制台死信队列的查询页面或者管控 API 查看该结果。您可通过同一 Message ID 的消息出现次数判断重发后依然消费失败的次数。
 * Summary: 重新发送死信消息
*/
func (client *Client) ExecSofamqDlqresendbyidEx(request *ExecSofamqDlqresendbyidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecSofamqDlqresendbyidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecSofamqDlqresendbyidResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.dlqresendbyid.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: list ns
 * Summary: list ns
 */
func (client *Client) ListSofamqNamespace(request *ListSofamqNamespaceRequest) (_result *ListSofamqNamespaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqNamespaceResponse{}
	_body, _err := client.ListSofamqNamespaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: list ns
 * Summary: list ns
 */
func (client *Client) ListSofamqNamespaceEx(request *ListSofamqNamespaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqNamespaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqNamespaceResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.namespace.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发送测试消息
 * Summary: 发送测试信息
 */
func (client *Client) SendSofamqMessage(request *SendSofamqMessageRequest) (_result *SendSofamqMessageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SendSofamqMessageResponse{}
	_body, _err := client.SendSofamqMessageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发送测试消息
 * Summary: 发送测试信息
 */
func (client *Client) SendSofamqMessageEx(request *SendSofamqMessageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SendSofamqMessageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SendSofamqMessageResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.message.send"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 消费验证
 * Summary: 消费验证
 */
func (client *Client) PushSofamqMessage(request *PushSofamqMessageRequest) (_result *PushSofamqMessageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PushSofamqMessageResponse{}
	_body, _err := client.PushSofamqMessageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 消费验证
 * Summary: 消费验证
 */
func (client *Client) PushSofamqMessageEx(request *PushSofamqMessageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PushSofamqMessageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PushSofamqMessageResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.message.push"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: getNodesByNamespaceId
 * Summary: get nodes by ns id
 */
func (client *Client) QuerySofamqNodebynamespaceid(request *QuerySofamqNodebynamespaceidRequest) (_result *QuerySofamqNodebynamespaceidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqNodebynamespaceidResponse{}
	_body, _err := client.QuerySofamqNodebynamespaceidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: getNodesByNamespaceId
 * Summary: get nodes by ns id
 */
func (client *Client) QuerySofamqNodebynamespaceidEx(request *QuerySofamqNodebynamespaceidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqNodebynamespaceidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqNodebynamespaceidResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.nodebynamespaceid.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: query room by ns
 * Summary: query room by ns
 */
func (client *Client) QuerySofamqRoombynamespaceid(request *QuerySofamqRoombynamespaceidRequest) (_result *QuerySofamqRoombynamespaceidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqRoombynamespaceidResponse{}
	_body, _err := client.QuerySofamqRoombynamespaceidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: query room by ns
 * Summary: query room by ns
 */
func (client *Client) QuerySofamqRoombynamespaceidEx(request *QuerySofamqRoombynamespaceidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqRoombynamespaceidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqRoombynamespaceidResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.roombynamespaceid.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过传入 Topic 名称和时间段，分页查询指定时间段内该 Topic 内存在的所有消息。
 * Summary: 按Topic查询消息
 */
func (client *Client) QuerySofamqMessagebytopic(request *QuerySofamqMessagebytopicRequest) (_result *QuerySofamqMessagebytopicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqMessagebytopicResponse{}
	_body, _err := client.QuerySofamqMessagebytopicEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过传入 Topic 名称和时间段，分页查询指定时间段内该 Topic 内存在的所有消息。
 * Summary: 按Topic查询消息
 */
func (client *Client) QuerySofamqMessagebytopicEx(request *QuerySofamqMessagebytopicRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqMessagebytopicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqMessagebytopicResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.messagebytopic.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过传入 Group ID 和时间段，分页查询指定时间段内该 Group ID 内存在的所有死信消息。
 * Summary: 按Group ID查询死信消息
 */
func (client *Client) QuerySofamqDlqbygroupid(request *QuerySofamqDlqbygroupidRequest) (_result *QuerySofamqDlqbygroupidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqDlqbygroupidResponse{}
	_body, _err := client.QuerySofamqDlqbygroupidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过传入 Group ID 和时间段，分页查询指定时间段内该 Group ID 内存在的所有死信消息。
 * Summary: 按Group ID查询死信消息
 */
func (client *Client) QuerySofamqDlqbygroupidEx(request *QuerySofamqDlqbygroupidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqDlqbygroupidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqDlqbygroupidResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.dlqbygroupid.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询指定 Group ID 的详细状态数据，包含订阅关系检查、消费 TPS 统计、负载均衡状态、消费端连接等。
 * Summary: 查询消费状态
 */
func (client *Client) GetSofamqConsumerstatus(request *GetSofamqConsumerstatusRequest) (_result *GetSofamqConsumerstatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSofamqConsumerstatusResponse{}
	_body, _err := client.GetSofamqConsumerstatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询指定 Group ID 的详细状态数据，包含订阅关系检查、消费 TPS 统计、负载均衡状态、消费端连接等。
 * Summary: 查询消费状态
 */
func (client *Client) GetSofamqConsumerstatusEx(request *GetSofamqConsumerstatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSofamqConsumerstatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSofamqConsumerstatusResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.consumerstatus.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新指定 Topic 的描述信息。
 * Summary: 更新Topic的描述
 */
func (client *Client) UpdateSofamqTopicremark(request *UpdateSofamqTopicremarkRequest) (_result *UpdateSofamqTopicremarkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSofamqTopicremarkResponse{}
	_body, _err := client.UpdateSofamqTopicremarkEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新指定 Topic 的描述信息。
 * Summary: 更新Topic的描述
 */
func (client *Client) UpdateSofamqTopicremarkEx(request *UpdateSofamqTopicremarkRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSofamqTopicremarkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSofamqTopicremarkResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.topicremark.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: datacenter list
 * Summary: datacenter
 */
func (client *Client) CreateSofamqDatacenter(request *CreateSofamqDatacenterRequest) (_result *CreateSofamqDatacenterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSofamqDatacenterResponse{}
	_body, _err := client.CreateSofamqDatacenterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: datacenter list
 * Summary: datacenter
 */
func (client *Client) CreateSofamqDatacenterEx(request *CreateSofamqDatacenterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSofamqDatacenterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSofamqDatacenterResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.datacenter.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: datacenter list
 * Summary: datacenter list
 */
func (client *Client) ListSofamqDatacenter(request *ListSofamqDatacenterRequest) (_result *ListSofamqDatacenterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqDatacenterResponse{}
	_body, _err := client.ListSofamqDatacenterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: datacenter list
 * Summary: datacenter list
 */
func (client *Client) ListSofamqDatacenterEx(request *ListSofamqDatacenterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqDatacenterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqDatacenterResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.datacenter.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: config list
 * Summary: config list
 */
func (client *Client) ListSofamqConfig(request *ListSofamqConfigRequest) (_result *ListSofamqConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqConfigResponse{}
	_body, _err := client.ListSofamqConfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: config list
 * Summary: config list
 */
func (client *Client) ListSofamqConfigEx(request *ListSofamqConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqConfigResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.config.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新指定 Group 的描述信息。
 * Summary: 更新Group的描述
 */
func (client *Client) UpdateSofamqGroupremark(request *UpdateSofamqGroupremarkRequest) (_result *UpdateSofamqGroupremarkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSofamqGroupremarkResponse{}
	_body, _err := client.UpdateSofamqGroupremarkEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新指定 Group 的描述信息。
 * Summary: 更新Group的描述
 */
func (client *Client) UpdateSofamqGroupremarkEx(request *UpdateSofamqGroupremarkRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSofamqGroupremarkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSofamqGroupremarkResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.groupremark.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 下载消息
 * Summary: 下载消息
 */
func (client *Client) DownloadSofamqMessage(request *DownloadSofamqMessageRequest) (_result *DownloadSofamqMessageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DownloadSofamqMessageResponse{}
	_body, _err := client.DownloadSofamqMessageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 下载消息
 * Summary: 下载消息
 */
func (client *Client) DownloadSofamqMessageEx(request *DownloadSofamqMessageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DownloadSofamqMessageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DownloadSofamqMessageResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.message.download"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取指定或全部的 Topic 资源监控统计信息。
 * Summary: 获取 topic 统计信息
 */
func (client *Client) QueryMetricsTopic(request *QueryMetricsTopicRequest) (_result *QueryMetricsTopicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMetricsTopicResponse{}
	_body, _err := client.QueryMetricsTopicEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取指定或全部的 Topic 资源监控统计信息。
 * Summary: 获取 topic 统计信息
 */
func (client *Client) QueryMetricsTopicEx(request *QueryMetricsTopicRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMetricsTopicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMetricsTopicResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.metrics.topic.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询指定时间范围内的积压数据。
 * Summary: 查看积压数据
 */
func (client *Client) QueryMetricsBacklog(request *QueryMetricsBacklogRequest) (_result *QueryMetricsBacklogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMetricsBacklogResponse{}
	_body, _err := client.QueryMetricsBacklogEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询指定时间范围内的积压数据。
 * Summary: 查看积压数据
 */
func (client *Client) QueryMetricsBacklogEx(request *QueryMetricsBacklogRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMetricsBacklogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMetricsBacklogResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.metrics.backlog.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询监控数据概览信息，包括消息堆积数量、死信消息数量、订阅关系数量等。
 * Summary: 监控数据概览
 */
func (client *Client) QueryMetricsOverview(request *QueryMetricsOverviewRequest) (_result *QueryMetricsOverviewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMetricsOverviewResponse{}
	_body, _err := client.QueryMetricsOverviewEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询监控数据概览信息，包括消息堆积数量、死信消息数量、订阅关系数量等。
 * Summary: 监控数据概览
 */
func (client *Client) QueryMetricsOverviewEx(request *QueryMetricsOverviewRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMetricsOverviewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMetricsOverviewResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.metrics.overview.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询消息路由列表信息。
 * Summary: 查询路由列表
 */
func (client *Client) ListSofamqRouter(request *ListSofamqRouterRequest) (_result *ListSofamqRouterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqRouterResponse{}
	_body, _err := client.ListSofamqRouterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询消息路由列表信息。
 * Summary: 查询路由列表
 */
func (client *Client) ListSofamqRouterEx(request *ListSofamqRouterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqRouterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqRouterResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.router.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建一个消息路由任务。
 * Summary: 创建路由
 */
func (client *Client) CreateSofamqRouter(request *CreateSofamqRouterRequest) (_result *CreateSofamqRouterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSofamqRouterResponse{}
	_body, _err := client.CreateSofamqRouterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建一个消息路由任务。
 * Summary: 创建路由
 */
func (client *Client) CreateSofamqRouterEx(request *CreateSofamqRouterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSofamqRouterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSofamqRouterResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.router.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: delete node
 * Summary: delete node
 */
func (client *Client) DeleteSofamqNode(request *DeleteSofamqNodeRequest) (_result *DeleteSofamqNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSofamqNodeResponse{}
	_body, _err := client.DeleteSofamqNodeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: delete node
 * Summary: delete node
 */
func (client *Client) DeleteSofamqNodeEx(request *DeleteSofamqNodeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSofamqNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSofamqNodeResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.node.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: delete room
 * Summary: delete room
 */
func (client *Client) DeleteSofamqRoom(request *DeleteSofamqRoomRequest) (_result *DeleteSofamqRoomResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSofamqRoomResponse{}
	_body, _err := client.DeleteSofamqRoomEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: delete room
 * Summary: delete room
 */
func (client *Client) DeleteSofamqRoomEx(request *DeleteSofamqRoomRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSofamqRoomResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSofamqRoomResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.room.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: del cell
 * Summary: del cell
 */
func (client *Client) DeleteSofamqCell(request *DeleteSofamqCellRequest) (_result *DeleteSofamqCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSofamqCellResponse{}
	_body, _err := client.DeleteSofamqCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: del cell
 * Summary: del cell
 */
func (client *Client) DeleteSofamqCellEx(request *DeleteSofamqCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSofamqCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSofamqCellResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.cell.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: del cluster
 * Summary: del cluster
 */
func (client *Client) DeleteSofamqCluster(request *DeleteSofamqClusterRequest) (_result *DeleteSofamqClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSofamqClusterResponse{}
	_body, _err := client.DeleteSofamqClusterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: del cluster
 * Summary: del cluster
 */
func (client *Client) DeleteSofamqClusterEx(request *DeleteSofamqClusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSofamqClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSofamqClusterResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.cluster.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: del ns
 * Summary: del ns
 */
func (client *Client) DeleteSofamqNamespace(request *DeleteSofamqNamespaceRequest) (_result *DeleteSofamqNamespaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSofamqNamespaceResponse{}
	_body, _err := client.DeleteSofamqNamespaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: del ns
 * Summary: del ns
 */
func (client *Client) DeleteSofamqNamespaceEx(request *DeleteSofamqNamespaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSofamqNamespaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSofamqNamespaceResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.namespace.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: del dc
 * Summary: del dc
 */
func (client *Client) DeleteSofamqDatacenter(request *DeleteSofamqDatacenterRequest) (_result *DeleteSofamqDatacenterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSofamqDatacenterResponse{}
	_body, _err := client.DeleteSofamqDatacenterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: del dc
 * Summary: del dc
 */
func (client *Client) DeleteSofamqDatacenterEx(request *DeleteSofamqDatacenterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSofamqDatacenterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSofamqDatacenterResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.datacenter.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除指定的消息路由任务。
 * Summary: 删除路由
 */
func (client *Client) DeleteSofamqRouter(request *DeleteSofamqRouterRequest) (_result *DeleteSofamqRouterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSofamqRouterResponse{}
	_body, _err := client.DeleteSofamqRouterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除指定的消息路由任务。
 * Summary: 删除路由
 */
func (client *Client) DeleteSofamqRouterEx(request *DeleteSofamqRouterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSofamqRouterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSofamqRouterResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.router.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: create config
 * Summary: create config
 */
func (client *Client) CreateSofamqConfig(request *CreateSofamqConfigRequest) (_result *CreateSofamqConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSofamqConfigResponse{}
	_body, _err := client.CreateSofamqConfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: create config
 * Summary: create config
 */
func (client *Client) CreateSofamqConfigEx(request *CreateSofamqConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSofamqConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSofamqConfigResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.config.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: query cells
 * Summary: query cells
 */
func (client *Client) QuerySofamqCell(request *QuerySofamqCellRequest) (_result *QuerySofamqCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqCellResponse{}
	_body, _err := client.QuerySofamqCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: query cells
 * Summary: query cells
 */
func (client *Client) QuerySofamqCellEx(request *QuerySofamqCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqCellResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.cell.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询路由
 * Summary: 查询路由
 */
func (client *Client) QuerySofamqRouter(request *QuerySofamqRouterRequest) (_result *QuerySofamqRouterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqRouterResponse{}
	_body, _err := client.QuerySofamqRouterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询路由
 * Summary: 查询路由
 */
func (client *Client) QuerySofamqRouterEx(request *QuerySofamqRouterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqRouterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqRouterResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.router.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: get instance
 * Summary: get instance
 */
func (client *Client) GetMiddlewareInstance(request *GetMiddlewareInstanceRequest) (_result *GetMiddlewareInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetMiddlewareInstanceResponse{}
	_body, _err := client.GetMiddlewareInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: get instance
 * Summary: get instance
 */
func (client *Client) GetMiddlewareInstanceEx(request *GetMiddlewareInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetMiddlewareInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetMiddlewareInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.middleware.instance.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: get endpoint
 * Summary: get endpoint
 */
func (client *Client) GetMiddlewareEndpoint(request *GetMiddlewareEndpointRequest) (_result *GetMiddlewareEndpointResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetMiddlewareEndpointResponse{}
	_body, _err := client.GetMiddlewareEndpointEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: get endpoint
 * Summary: get endpoint
 */
func (client *Client) GetMiddlewareEndpointEx(request *GetMiddlewareEndpointRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetMiddlewareEndpointResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetMiddlewareEndpointResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.middleware.endpoint.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: cellbytype
 * Summary: cellbytype
 */
func (client *Client) QuerySofamqCellbytype(request *QuerySofamqCellbytypeRequest) (_result *QuerySofamqCellbytypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqCellbytypeResponse{}
	_body, _err := client.QuerySofamqCellbytypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: cellbytype
 * Summary: cellbytype
 */
func (client *Client) QuerySofamqCellbytypeEx(request *QuerySofamqCellbytypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqCellbytypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqCellbytypeResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.cellbytype.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询指定实例下的消息轨迹查询任务列表信息。
 * Summary: 查询trace请求列表
 */
func (client *Client) ListSofamqTrace(request *ListSofamqTraceRequest) (_result *ListSofamqTraceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqTraceResponse{}
	_body, _err := client.ListSofamqTraceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询指定实例下的消息轨迹查询任务列表信息。
 * Summary: 查询trace请求列表
 */
func (client *Client) ListSofamqTraceEx(request *ListSofamqTraceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqTraceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqTraceResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.trace.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除指定的消息轨迹查询任务。
 * Summary: 删除trace查询任务
 */
func (client *Client) DeleteSofamqTrace(request *DeleteSofamqTraceRequest) (_result *DeleteSofamqTraceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSofamqTraceResponse{}
	_body, _err := client.DeleteSofamqTraceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除指定的消息轨迹查询任务。
 * Summary: 删除trace查询任务
 */
func (client *Client) DeleteSofamqTraceEx(request *DeleteSofamqTraceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSofamqTraceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSofamqTraceResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.trace.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过传入 Topic 名称创建消息轨迹查询任务，得到该查询任务的 ID。
 * Summary: 通过Topic创建轨迹查询任务
 */
func (client *Client) QuerySofamqTracebytopic(request *QuerySofamqTracebytopicRequest) (_result *QuerySofamqTracebytopicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqTracebytopicResponse{}
	_body, _err := client.QuerySofamqTracebytopicEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过传入 Topic 名称创建消息轨迹查询任务，得到该查询任务的 ID。
 * Summary: 通过Topic创建轨迹查询任务
 */
func (client *Client) QuerySofamqTracebytopicEx(request *QuerySofamqTracebytopicRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqTracebytopicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqTracebytopicResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.tracebytopic.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: sofamq 支付后回调
 * Summary: sofamq 支付后回调
 */
func (client *Client) PushSpiPaycallback(request *PushSpiPaycallbackRequest) (_result *PushSpiPaycallbackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PushSpiPaycallbackResponse{}
	_body, _err := client.PushSpiPaycallbackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: sofamq 支付后回调
 * Summary: sofamq 支付后回调
 */
func (client *Client) PushSpiPaycallbackEx(request *PushSpiPaycallbackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PushSpiPaycallbackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PushSpiPaycallbackResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.spi.paycallback.push"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 补全商品信息
 * Summary: 补全商品信息
 */
func (client *Client) PushSpiCompletecommodity(request *PushSpiCompletecommodityRequest) (_result *PushSpiCompletecommodityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PushSpiCompletecommodityResponse{}
	_body, _err := client.PushSpiCompletecommodityEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 补全商品信息
 * Summary: 补全商品信息
 */
func (client *Client) PushSpiCompletecommodityEx(request *PushSpiCompletecommodityRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PushSpiCompletecommodityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PushSpiCompletecommodityResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.spi.completecommodity.push"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 订单校验
 * Summary: 订单校验
 */
func (client *Client) PushSpiOrderverify(request *PushSpiOrderverifyRequest) (_result *PushSpiOrderverifyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PushSpiOrderverifyResponse{}
	_body, _err := client.PushSpiOrderverifyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 订单校验
 * Summary: 订单校验
 */
func (client *Client) PushSpiOrderverifyEx(request *PushSpiOrderverifyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PushSpiOrderverifyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PushSpiOrderverifyResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.spi.orderverify.push"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 生命周期回调
 * Summary: 生命周期回调
 */
func (client *Client) PushSpiOpencallback(request *PushSpiOpencallbackRequest) (_result *PushSpiOpencallbackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PushSpiOpencallbackResponse{}
	_body, _err := client.PushSpiOpencallbackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 生命周期回调
 * Summary: 生命周期回调
 */
func (client *Client) PushSpiOpencallbackEx(request *PushSpiOpencallbackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PushSpiOpencallbackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PushSpiOpencallbackResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.spi.opencallback.push"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: getldcbynamespace
 * Summary: getldcbynamespace
 */
func (client *Client) GetSofamqLdcbynamespace(request *GetSofamqLdcbynamespaceRequest) (_result *GetSofamqLdcbynamespaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSofamqLdcbynamespaceResponse{}
	_body, _err := client.GetSofamqLdcbynamespaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: getldcbynamespace
 * Summary: getldcbynamespace
 */
func (client *Client) GetSofamqLdcbynamespaceEx(request *GetSofamqLdcbynamespaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSofamqLdcbynamespaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSofamqLdcbynamespaceResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.ldcbynamespace.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新指定的消息路由任务的配置信息。
 * Summary: 更新路由配置
 */
func (client *Client) UpdateSofamqRouter(request *UpdateSofamqRouterRequest) (_result *UpdateSofamqRouterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSofamqRouterResponse{}
	_body, _err := client.UpdateSofamqRouterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新指定的消息路由任务的配置信息。
 * Summary: 更新路由配置
 */
func (client *Client) UpdateSofamqRouterEx(request *UpdateSofamqRouterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSofamqRouterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSofamqRouterResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.router.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量重发指定 Message ID 的死信消息，使这些消息能够被 Consumer 再次消费。
 * Summary: 批量重发死信消息
 */
func (client *Client) ExecSofamqDlqresendbatch(request *ExecSofamqDlqresendbatchRequest) (_result *ExecSofamqDlqresendbatchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecSofamqDlqresendbatchResponse{}
	_body, _err := client.ExecSofamqDlqresendbatchEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量重发指定 Message ID 的死信消息，使这些消息能够被 Consumer 再次消费。
 * Summary: 批量重发死信消息
 */
func (client *Client) ExecSofamqDlqresendbatchEx(request *ExecSofamqDlqresendbatchRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecSofamqDlqresendbatchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecSofamqDlqresendbatchResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.dlqresendbatch.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取报警规则列表信息。
 * Summary: 获取告警列表
 */
func (client *Client) ListSofamqWarn(request *ListSofamqWarnRequest) (_result *ListSofamqWarnResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqWarnResponse{}
	_body, _err := client.ListSofamqWarnEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取报警规则列表信息。
 * Summary: 获取告警列表
 */
func (client *Client) ListSofamqWarnEx(request *ListSofamqWarnRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqWarnResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqWarnResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.warn.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建一条报警规则。
 * Summary: 创建告警规则
 */
func (client *Client) CreateSofamqWarn(request *CreateSofamqWarnRequest) (_result *CreateSofamqWarnResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSofamqWarnResponse{}
	_body, _err := client.CreateSofamqWarnEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建一条报警规则。
 * Summary: 创建告警规则
 */
func (client *Client) CreateSofamqWarnEx(request *CreateSofamqWarnRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSofamqWarnResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSofamqWarnResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.warn.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过传入报警规则 ID，删除指定的报警规则。
 * Summary: 删除告警规则
 */
func (client *Client) DeleteSofamqWarn(request *DeleteSofamqWarnRequest) (_result *DeleteSofamqWarnResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSofamqWarnResponse{}
	_body, _err := client.DeleteSofamqWarnEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过传入报警规则 ID，删除指定的报警规则。
 * Summary: 删除告警规则
 */
func (client *Client) DeleteSofamqWarnEx(request *DeleteSofamqWarnRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSofamqWarnResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSofamqWarnResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.warn.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新指定报警规则的配置信息。
 * Summary: 更新告警规则
 */
func (client *Client) UpdateSofamqWarn(request *UpdateSofamqWarnRequest) (_result *UpdateSofamqWarnResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSofamqWarnResponse{}
	_body, _err := client.UpdateSofamqWarnEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新指定报警规则的配置信息。
 * Summary: 更新告警规则
 */
func (client *Client) UpdateSofamqWarnEx(request *UpdateSofamqWarnRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSofamqWarnResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSofamqWarnResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.warn.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过传入报警规则 ID，启用指定的报警规则。
 * Summary: 打开告警开关
 */
func (client *Client) EnableSofamqWarn(request *EnableSofamqWarnRequest) (_result *EnableSofamqWarnResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &EnableSofamqWarnResponse{}
	_body, _err := client.EnableSofamqWarnEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过传入报警规则 ID，启用指定的报警规则。
 * Summary: 打开告警开关
 */
func (client *Client) EnableSofamqWarnEx(request *EnableSofamqWarnRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *EnableSofamqWarnResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &EnableSofamqWarnResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.warn.enable"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过传入报警规则 ID，禁用指定的报警规则。
 * Summary: 关闭告警开关
 */
func (client *Client) DisableSofamqWarn(request *DisableSofamqWarnRequest) (_result *DisableSofamqWarnResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DisableSofamqWarnResponse{}
	_body, _err := client.DisableSofamqWarnEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过传入报警规则 ID，禁用指定的报警规则。
 * Summary: 关闭告警开关
 */
func (client *Client) DisableSofamqWarnEx(request *DisableSofamqWarnRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DisableSofamqWarnResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DisableSofamqWarnResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.warn.disable"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 可以通过本接口查询历史报警记录，目前默认保存 30 天以内的报警信息。
 * Summary: 查询告警日志
 */
func (client *Client) ListSofamqWarnlog(request *ListSofamqWarnlogRequest) (_result *ListSofamqWarnlogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqWarnlogResponse{}
	_body, _err := client.ListSofamqWarnlogEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 可以通过本接口查询历史报警记录，目前默认保存 30 天以内的报警信息。
 * Summary: 查询告警日志
 */
func (client *Client) ListSofamqWarnlogEx(request *ListSofamqWarnlogRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqWarnlogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqWarnlogResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.warnlog.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 管理员查看topic
 * Summary: 管理员查看topic
 */
func (client *Client) ListSofamqAdmintopic(request *ListSofamqAdmintopicRequest) (_result *ListSofamqAdmintopicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqAdmintopicResponse{}
	_body, _err := client.ListSofamqAdmintopicEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 管理员查看topic
 * Summary: 管理员查看topic
 */
func (client *Client) ListSofamqAdmintopicEx(request *ListSofamqAdmintopicRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqAdmintopicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqAdmintopicResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.admintopic.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询 Topic、Group 实时的发送消费速度。
 * Summary: topicgroup实时的发送消费速度
 */
func (client *Client) QueryMetricsTginstant(request *QueryMetricsTginstantRequest) (_result *QueryMetricsTginstantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMetricsTginstantResponse{}
	_body, _err := client.QueryMetricsTginstantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询 Topic、Group 实时的发送消费速度。
 * Summary: topicgroup实时的发送消费速度
 */
func (client *Client) QueryMetricsTginstantEx(request *QueryMetricsTginstantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMetricsTginstantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMetricsTginstantResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.metrics.tginstant.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询指定时间端内 Topic、Group 的历史统计数据。
 * Summary: 获取 topic、group 的历史数据
 */
func (client *Client) QueryMetricsTghistory(request *QueryMetricsTghistoryRequest) (_result *QueryMetricsTghistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMetricsTghistoryResponse{}
	_body, _err := client.QueryMetricsTghistoryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询指定时间端内 Topic、Group 的历史统计数据。
 * Summary: 获取 topic、group 的历史数据
 */
func (client *Client) QueryMetricsTghistoryEx(request *QueryMetricsTghistoryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMetricsTghistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMetricsTghistoryResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.metrics.tghistory.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据实例 ID，查询该实例的资源统计信息，包括 Topic 数量、订阅关系数量、死信数量等。
 * Summary: 获取实例的基本信息
 */
func (client *Client) QueryMetricsInstance(request *QueryMetricsInstanceRequest) (_result *QueryMetricsInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMetricsInstanceResponse{}
	_body, _err := client.QueryMetricsInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据实例 ID，查询该实例的资源统计信息，包括 Topic 数量、订阅关系数量、死信数量等。
 * Summary: 获取实例的基本信息
 */
func (client *Client) QueryMetricsInstanceEx(request *QueryMetricsInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMetricsInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMetricsInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.metrics.instance.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询指定实例下的历史统计数据，包括每分钟消费数据大小、每分钟发送消息大小等。
 * Summary: 获取实例的历史统计数据
 */
func (client *Client) QueryMetricsInstancehistory(request *QueryMetricsInstancehistoryRequest) (_result *QueryMetricsInstancehistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMetricsInstancehistoryResponse{}
	_body, _err := client.QueryMetricsInstancehistoryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询指定实例下的历史统计数据，包括每分钟消费数据大小、每分钟发送消息大小等。
 * Summary: 获取实例的历史统计数据
 */
func (client *Client) QueryMetricsInstancehistoryEx(request *QueryMetricsInstancehistoryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMetricsInstancehistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMetricsInstancehistoryResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.metrics.instancehistory.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询指定实例下 Topic 的统计列表信息。
 * Summary: 查询 topic 统计列表
 */
func (client *Client) QueryStatsTopic(request *QueryStatsTopicRequest) (_result *QueryStatsTopicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryStatsTopicResponse{}
	_body, _err := client.QueryStatsTopicEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询指定实例下 Topic 的统计列表信息。
 * Summary: 查询 topic 统计列表
 */
func (client *Client) QueryStatsTopicEx(request *QueryStatsTopicRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryStatsTopicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryStatsTopicResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.stats.topic.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取指定实例下 Group 的统计信息。
 * Summary: 获取当前实例的 group 统计信息
 */
func (client *Client) QueryStatsGroup(request *QueryStatsGroupRequest) (_result *QueryStatsGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryStatsGroupResponse{}
	_body, _err := client.QueryStatsGroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取指定实例下 Group 的统计信息。
 * Summary: 获取当前实例的 group 统计信息
 */
func (client *Client) QueryStatsGroupEx(request *QueryStatsGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryStatsGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryStatsGroupResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.stats.group.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 管理员查看group
 * Summary: 管理员查看group
 */
func (client *Client) ListSofamqAdmingroup(request *ListSofamqAdmingroupRequest) (_result *ListSofamqAdmingroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqAdmingroupResponse{}
	_body, _err := client.ListSofamqAdmingroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 管理员查看group
 * Summary: 管理员查看group
 */
func (client *Client) ListSofamqAdmingroupEx(request *ListSofamqAdmingroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqAdmingroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqAdmingroupResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.admingroup.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询kv配置
 * Summary: 查询kv配置
 */
func (client *Client) ListSofamqKvconfig(request *ListSofamqKvconfigRequest) (_result *ListSofamqKvconfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqKvconfigResponse{}
	_body, _err := client.ListSofamqKvconfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询kv配置
 * Summary: 查询kv配置
 */
func (client *Client) ListSofamqKvconfigEx(request *ListSofamqKvconfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqKvconfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqKvconfigResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.kvconfig.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建kvconfig
 * Summary: 创建kvconfig
 */
func (client *Client) CreateSofamqKvconfig(request *CreateSofamqKvconfigRequest) (_result *CreateSofamqKvconfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSofamqKvconfigResponse{}
	_body, _err := client.CreateSofamqKvconfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建kvconfig
 * Summary: 创建kvconfig
 */
func (client *Client) CreateSofamqKvconfigEx(request *CreateSofamqKvconfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSofamqKvconfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSofamqKvconfigResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.kvconfig.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除kvconfig
 * Summary: 删除kvconfig
 */
func (client *Client) DeleteSofamqKvconfig(request *DeleteSofamqKvconfigRequest) (_result *DeleteSofamqKvconfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSofamqKvconfigResponse{}
	_body, _err := client.DeleteSofamqKvconfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除kvconfig
 * Summary: 删除kvconfig
 */
func (client *Client) DeleteSofamqKvconfigEx(request *DeleteSofamqKvconfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSofamqKvconfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSofamqKvconfigResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.kvconfig.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 修改kvconfig值
 * Summary: 修改kvconfig值
 */
func (client *Client) UpdateSofamqKvconfig(request *UpdateSofamqKvconfigRequest) (_result *UpdateSofamqKvconfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSofamqKvconfigResponse{}
	_body, _err := client.UpdateSofamqKvconfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 修改kvconfig值
 * Summary: 修改kvconfig值
 */
func (client *Client) UpdateSofamqKvconfigEx(request *UpdateSofamqKvconfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSofamqKvconfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSofamqKvconfigResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.kvconfig.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除config配置
 * Summary: 删除config配置
 */
func (client *Client) DeleteSofamqConfig(request *DeleteSofamqConfigRequest) (_result *DeleteSofamqConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSofamqConfigResponse{}
	_body, _err := client.DeleteSofamqConfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除config配置
 * Summary: 删除config配置
 */
func (client *Client) DeleteSofamqConfigEx(request *DeleteSofamqConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSofamqConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSofamqConfigResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.config.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新config配置
 * Summary: 更新config配置
 */
func (client *Client) UpdateSofamqConfig(request *UpdateSofamqConfigRequest) (_result *UpdateSofamqConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSofamqConfigResponse{}
	_body, _err := client.UpdateSofamqConfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新config配置
 * Summary: 更新config配置
 */
func (client *Client) UpdateSofamqConfigEx(request *UpdateSofamqConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSofamqConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSofamqConfigResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.config.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: update cluster
 * Summary: update cluster
 */
func (client *Client) UpdateSofamqCluster(request *UpdateSofamqClusterRequest) (_result *UpdateSofamqClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSofamqClusterResponse{}
	_body, _err := client.UpdateSofamqClusterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: update cluster
 * Summary: update cluster
 */
func (client *Client) UpdateSofamqClusterEx(request *UpdateSofamqClusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSofamqClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSofamqClusterResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.cluster.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: update dc
 * Summary: update dc
 */
func (client *Client) UpdateSofamqDatacenter(request *UpdateSofamqDatacenterRequest) (_result *UpdateSofamqDatacenterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSofamqDatacenterResponse{}
	_body, _err := client.UpdateSofamqDatacenterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: update dc
 * Summary: update dc
 */
func (client *Client) UpdateSofamqDatacenterEx(request *UpdateSofamqDatacenterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSofamqDatacenterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSofamqDatacenterResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.datacenter.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: update room
 * Summary: update room
 */
func (client *Client) UpdateSofamqRoom(request *UpdateSofamqRoomRequest) (_result *UpdateSofamqRoomResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSofamqRoomResponse{}
	_body, _err := client.UpdateSofamqRoomEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: update room
 * Summary: update room
 */
func (client *Client) UpdateSofamqRoomEx(request *UpdateSofamqRoomRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSofamqRoomResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSofamqRoomResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.room.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: update node
 * Summary: update node
 */
func (client *Client) UpdateSofamqNode(request *UpdateSofamqNodeRequest) (_result *UpdateSofamqNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSofamqNodeResponse{}
	_body, _err := client.UpdateSofamqNodeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: update node
 * Summary: update node
 */
func (client *Client) UpdateSofamqNodeEx(request *UpdateSofamqNodeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSofamqNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSofamqNodeResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.node.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询指定的 Topic 的队列信息。
 * Summary: 查询topic的队列信息
 */
func (client *Client) QuerySofamqTopicqueue(request *QuerySofamqTopicqueueRequest) (_result *QuerySofamqTopicqueueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqTopicqueueResponse{}
	_body, _err := client.QuerySofamqTopicqueueEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询指定的 Topic 的队列信息。
 * Summary: 查询topic的队列信息
 */
func (client *Client) QuerySofamqTopicqueueEx(request *QuerySofamqTopicqueueRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqTopicqueueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqTopicqueueResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.topicqueue.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查看在线订阅topic
 * Summary: 查看在线订阅topic
 */
func (client *Client) QuerySofamqAdmingroupsubdetail(request *QuerySofamqAdmingroupsubdetailRequest) (_result *QuerySofamqAdmingroupsubdetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqAdmingroupsubdetailResponse{}
	_body, _err := client.QuerySofamqAdmingroupsubdetailEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查看在线订阅topic
 * Summary: 查看在线订阅topic
 */
func (client *Client) QuerySofamqAdmingroupsubdetailEx(request *QuerySofamqAdmingroupsubdetailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqAdmingroupsubdetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqAdmingroupsubdetailResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.admingroupsubdetail.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 管理员列表
 * Summary: 管理员列表
 */
func (client *Client) ListSofamqAdminuser(request *ListSofamqAdminuserRequest) (_result *ListSofamqAdminuserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqAdminuserResponse{}
	_body, _err := client.ListSofamqAdminuserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 管理员列表
 * Summary: 管理员列表
 */
func (client *Client) ListSofamqAdminuserEx(request *ListSofamqAdminuserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqAdminuserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqAdminuserResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.adminuser.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 添加用户
 * Summary: 添加用户
 */
func (client *Client) CreateSofamqAdminuser(request *CreateSofamqAdminuserRequest) (_result *CreateSofamqAdminuserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSofamqAdminuserResponse{}
	_body, _err := client.CreateSofamqAdminuserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 添加用户
 * Summary: 添加用户
 */
func (client *Client) CreateSofamqAdminuserEx(request *CreateSofamqAdminuserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSofamqAdminuserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSofamqAdminuserResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.adminuser.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除管理员用户
 * Summary: 删除管理员用户
 */
func (client *Client) DeleteSofamqAdminuser(request *DeleteSofamqAdminuserRequest) (_result *DeleteSofamqAdminuserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSofamqAdminuserResponse{}
	_body, _err := client.DeleteSofamqAdminuserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除管理员用户
 * Summary: 删除管理员用户
 */
func (client *Client) DeleteSofamqAdminuserEx(request *DeleteSofamqAdminuserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSofamqAdminuserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSofamqAdminuserResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.adminuser.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询用户侧接口列表
 * Summary: 查询用户侧接口列表
 */
func (client *Client) ListSofamqAdminapi(request *ListSofamqAdminapiRequest) (_result *ListSofamqAdminapiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqAdminapiResponse{}
	_body, _err := client.ListSofamqAdminapiEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询用户侧接口列表
 * Summary: 查询用户侧接口列表
 */
func (client *Client) ListSofamqAdminapiEx(request *ListSofamqAdminapiRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqAdminapiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqAdminapiResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.adminapi.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: api权限更新
 * Summary: api权限更新
 */
func (client *Client) SwitchSofamqAdminapi(request *SwitchSofamqAdminapiRequest) (_result *SwitchSofamqAdminapiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SwitchSofamqAdminapiResponse{}
	_body, _err := client.SwitchSofamqAdminapiEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: api权限更新
 * Summary: api权限更新
 */
func (client *Client) SwitchSofamqAdminapiEx(request *SwitchSofamqAdminapiRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SwitchSofamqAdminapiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SwitchSofamqAdminapiResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.adminapi.switch"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) AddDmsMsgtype(request *AddDmsMsgtypeRequest) (_result *AddDmsMsgtypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddDmsMsgtypeResponse{}
	_body, _err := client.AddDmsMsgtypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) AddDmsMsgtypeEx(request *AddDmsMsgtypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddDmsMsgtypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddDmsMsgtypeResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.dms.msgtype.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) ListDmsMsgtype(request *ListDmsMsgtypeRequest) (_result *ListDmsMsgtypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListDmsMsgtypeResponse{}
	_body, _err := client.ListDmsMsgtypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) ListDmsMsgtypeEx(request *ListDmsMsgtypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListDmsMsgtypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListDmsMsgtypeResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.dms.msgtype.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) CreateDmsBinding(request *CreateDmsBindingRequest) (_result *CreateDmsBindingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDmsBindingResponse{}
	_body, _err := client.CreateDmsBindingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) CreateDmsBindingEx(request *CreateDmsBindingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDmsBindingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDmsBindingResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.dms.binding.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) ListDmsBinding(request *ListDmsBindingRequest) (_result *ListDmsBindingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListDmsBindingResponse{}
	_body, _err := client.ListDmsBindingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) ListDmsBindingEx(request *ListDmsBindingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListDmsBindingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListDmsBindingResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.dms.binding.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) DeleteDmsMsgtype(request *DeleteDmsMsgtypeRequest) (_result *DeleteDmsMsgtypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteDmsMsgtypeResponse{}
	_body, _err := client.DeleteDmsMsgtypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) DeleteDmsMsgtypeEx(request *DeleteDmsMsgtypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteDmsMsgtypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDmsMsgtypeResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.dms.msgtype.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) DeleteDmsBinding(request *DeleteDmsBindingRequest) (_result *DeleteDmsBindingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteDmsBindingResponse{}
	_body, _err := client.DeleteDmsBindingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) DeleteDmsBindingEx(request *DeleteDmsBindingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteDmsBindingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDmsBindingResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.dms.binding.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) UpdateDmsMsgtype(request *UpdateDmsMsgtypeRequest) (_result *UpdateDmsMsgtypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDmsMsgtypeResponse{}
	_body, _err := client.UpdateDmsMsgtypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) UpdateDmsMsgtypeEx(request *UpdateDmsMsgtypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDmsMsgtypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDmsMsgtypeResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.dms.msgtype.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) UpdateDmsBinding(request *UpdateDmsBindingRequest) (_result *UpdateDmsBindingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDmsBindingResponse{}
	_body, _err := client.UpdateDmsBindingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) UpdateDmsBindingEx(request *UpdateDmsBindingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDmsBindingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDmsBindingResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.dms.binding.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) QueryDmsMsg(request *QueryDmsMsgRequest) (_result *QueryDmsMsgResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDmsMsgResponse{}
	_body, _err := client.QueryDmsMsgEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) QueryDmsMsgEx(request *QueryDmsMsgRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDmsMsgResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDmsMsgResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.dms.msg.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) BatchqueryDmsMsg(request *BatchqueryDmsMsgRequest) (_result *BatchqueryDmsMsgResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchqueryDmsMsgResponse{}
	_body, _err := client.BatchqueryDmsMsgEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) BatchqueryDmsMsgEx(request *BatchqueryDmsMsgRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchqueryDmsMsgResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchqueryDmsMsgResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.dms.msg.batchquery"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) DeleteDmsMsg(request *DeleteDmsMsgRequest) (_result *DeleteDmsMsgResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteDmsMsgResponse{}
	_body, _err := client.DeleteDmsMsgEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) DeleteDmsMsgEx(request *DeleteDmsMsgRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteDmsMsgResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDmsMsgResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.dms.msg.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) BatchdeleteDmsMsg(request *BatchdeleteDmsMsgRequest) (_result *BatchdeleteDmsMsgResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchdeleteDmsMsgResponse{}
	_body, _err := client.BatchdeleteDmsMsgEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) BatchdeleteDmsMsgEx(request *BatchdeleteDmsMsgRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchdeleteDmsMsgResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchdeleteDmsMsgResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.dms.msg.batchdelete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) ExportDmsMsgtype(request *ExportDmsMsgtypeRequest) (_result *ExportDmsMsgtypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExportDmsMsgtypeResponse{}
	_body, _err := client.ExportDmsMsgtypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) ExportDmsMsgtypeEx(request *ExportDmsMsgtypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExportDmsMsgtypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExportDmsMsgtypeResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.dms.msgtype.export"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) ImportDmsMsgtype(request *ImportDmsMsgtypeRequest) (_result *ImportDmsMsgtypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ImportDmsMsgtypeResponse{}
	_body, _err := client.ImportDmsMsgtypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) ImportDmsMsgtypeEx(request *ImportDmsMsgtypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ImportDmsMsgtypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ImportDmsMsgtypeResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.dms.msgtype.import"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) ExportDmsBinding(request *ExportDmsBindingRequest) (_result *ExportDmsBindingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExportDmsBindingResponse{}
	_body, _err := client.ExportDmsBindingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) ExportDmsBindingEx(request *ExportDmsBindingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExportDmsBindingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExportDmsBindingResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.dms.binding.export"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) ImportDmsBinding(request *ImportDmsBindingRequest) (_result *ImportDmsBindingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ImportDmsBindingResponse{}
	_body, _err := client.ImportDmsBindingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) ImportDmsBindingEx(request *ImportDmsBindingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ImportDmsBindingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ImportDmsBindingResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.dms.binding.import"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) ListDmsWhitelist(request *ListDmsWhitelistRequest) (_result *ListDmsWhitelistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListDmsWhitelistResponse{}
	_body, _err := client.ListDmsWhitelistEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) ListDmsWhitelistEx(request *ListDmsWhitelistRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListDmsWhitelistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListDmsWhitelistResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.dms.whitelist.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) AddDmsWhitelist(request *AddDmsWhitelistRequest) (_result *AddDmsWhitelistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddDmsWhitelistResponse{}
	_body, _err := client.AddDmsWhitelistEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) AddDmsWhitelistEx(request *AddDmsWhitelistRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddDmsWhitelistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddDmsWhitelistResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.dms.whitelist.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) DeleteDmsWhitelist(request *DeleteDmsWhitelistRequest) (_result *DeleteDmsWhitelistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteDmsWhitelistResponse{}
	_body, _err := client.DeleteDmsWhitelistEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dms
 * Summary: dms
 */
func (client *Client) DeleteDmsWhitelistEx(request *DeleteDmsWhitelistRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteDmsWhitelistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDmsWhitelistResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.dms.whitelist.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: admin
 * Summary: topics
 */
func (client *Client) GetDmsTopics(request *GetDmsTopicsRequest) (_result *GetDmsTopicsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetDmsTopicsResponse{}
	_body, _err := client.GetDmsTopicsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: admin
 * Summary: topics
 */
func (client *Client) GetDmsTopicsEx(request *GetDmsTopicsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetDmsTopicsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetDmsTopicsResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.dms.topics.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询消费者堆栈信息，便于定位问题。
 * Summary: 查询消费者堆栈信息
 */
func (client *Client) GetSofamqConsumerjstack(request *GetSofamqConsumerjstackRequest) (_result *GetSofamqConsumerjstackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSofamqConsumerjstackResponse{}
	_body, _err := client.GetSofamqConsumerjstackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询消费者堆栈信息，便于定位问题。
 * Summary: 查询消费者堆栈信息
 */
func (client *Client) GetSofamqConsumerjstackEx(request *GetSofamqConsumerjstackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSofamqConsumerjstackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSofamqConsumerjstackResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.consumerjstack.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: uploadurl
 * Summary: uploadurl
 */
func (client *Client) QueryDmsUploadurl(request *QueryDmsUploadurlRequest) (_result *QueryDmsUploadurlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDmsUploadurlResponse{}
	_body, _err := client.QueryDmsUploadurlEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: uploadurl
 * Summary: uploadurl
 */
func (client *Client) QueryDmsUploadurlEx(request *QueryDmsUploadurlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDmsUploadurlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDmsUploadurlResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.dms.uploadurl.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: msgtypetemplate
 * Summary: msgtypetemplate
 */
func (client *Client) GetDmsMsgtypetemplate(request *GetDmsMsgtypetemplateRequest) (_result *GetDmsMsgtypetemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetDmsMsgtypetemplateResponse{}
	_body, _err := client.GetDmsMsgtypetemplateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: msgtypetemplate
 * Summary: msgtypetemplate
 */
func (client *Client) GetDmsMsgtypetemplateEx(request *GetDmsMsgtypetemplateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetDmsMsgtypetemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetDmsMsgtypetemplateResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.dms.msgtypetemplate.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: template
 * Summary: template
 */
func (client *Client) GetDmsBindingtemplate(request *GetDmsBindingtemplateRequest) (_result *GetDmsBindingtemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetDmsBindingtemplateResponse{}
	_body, _err := client.GetDmsBindingtemplateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: template
 * Summary: template
 */
func (client *Client) GetDmsBindingtemplateEx(request *GetDmsBindingtemplateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetDmsBindingtemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetDmsBindingtemplateResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.dms.bindingtemplate.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询msgdump消息同步任务源端资源
 * Summary: 查询msgdump消息同步任务源端资源
 */
func (client *Client) QueryMsgdumpSource(request *QueryMsgdumpSourceRequest) (_result *QueryMsgdumpSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMsgdumpSourceResponse{}
	_body, _err := client.QueryMsgdumpSourceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询msgdump消息同步任务源端资源
 * Summary: 查询msgdump消息同步任务源端资源
 */
func (client *Client) QueryMsgdumpSourceEx(request *QueryMsgdumpSourceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMsgdumpSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMsgdumpSourceResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.msgdump.source.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建 msgdump 同步任务
 * Summary: 创建同步任务
 */
func (client *Client) CreateMsgdumpTask(request *CreateMsgdumpTaskRequest) (_result *CreateMsgdumpTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateMsgdumpTaskResponse{}
	_body, _err := client.CreateMsgdumpTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建 msgdump 同步任务
 * Summary: 创建同步任务
 */
func (client *Client) CreateMsgdumpTaskEx(request *CreateMsgdumpTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateMsgdumpTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateMsgdumpTaskResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.msgdump.task.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询消息同步任务
 * Summary: 查询消息同步任务
 */
func (client *Client) QueryMsgdumpTask(request *QueryMsgdumpTaskRequest) (_result *QueryMsgdumpTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMsgdumpTaskResponse{}
	_body, _err := client.QueryMsgdumpTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询消息同步任务
 * Summary: 查询消息同步任务
 */
func (client *Client) QueryMsgdumpTaskEx(request *QueryMsgdumpTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMsgdumpTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMsgdumpTaskResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.msgdump.task.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除 msgdump 任务
 * Summary: 删除 msgdump 任务
 */
func (client *Client) DeleteMsgdumpTask(request *DeleteMsgdumpTaskRequest) (_result *DeleteMsgdumpTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteMsgdumpTaskResponse{}
	_body, _err := client.DeleteMsgdumpTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除 msgdump 任务
 * Summary: 删除 msgdump 任务
 */
func (client *Client) DeleteMsgdumpTaskEx(request *DeleteMsgdumpTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteMsgdumpTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteMsgdumpTaskResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.msgdump.task.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新msgdump任务状态
 * Summary: 更新msgdump任务状态
 */
func (client *Client) EnableMsgdumpTask(request *EnableMsgdumpTaskRequest) (_result *EnableMsgdumpTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &EnableMsgdumpTaskResponse{}
	_body, _err := client.EnableMsgdumpTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新msgdump任务状态
 * Summary: 更新msgdump任务状态
 */
func (client *Client) EnableMsgdumpTaskEx(request *EnableMsgdumpTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *EnableMsgdumpTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &EnableMsgdumpTaskResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.msgdump.task.enable"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: schema metadata 分页查询
 * Summary: schema metadata 分页查询
 */
func (client *Client) ListSchemaAdminmetadata(request *ListSchemaAdminmetadataRequest) (_result *ListSchemaAdminmetadataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSchemaAdminmetadataResponse{}
	_body, _err := client.ListSchemaAdminmetadataEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: schema metadata 分页查询
 * Summary: schema metadata 分页查询
 */
func (client *Client) ListSchemaAdminmetadataEx(request *ListSchemaAdminmetadataRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSchemaAdminmetadataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSchemaAdminmetadataResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.schema.adminmetadata.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 新增schema的metadata信息
 * Summary: 新增schema的metadata信息
 */
func (client *Client) CreateSchemaAdminmetadata(request *CreateSchemaAdminmetadataRequest) (_result *CreateSchemaAdminmetadataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSchemaAdminmetadataResponse{}
	_body, _err := client.CreateSchemaAdminmetadataEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 新增schema的metadata信息
 * Summary: 新增schema的metadata信息
 */
func (client *Client) CreateSchemaAdminmetadataEx(request *CreateSchemaAdminmetadataRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSchemaAdminmetadataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSchemaAdminmetadataResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.schema.adminmetadata.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新schema元信息
 * Summary: 更新schema元信息
 */
func (client *Client) UpdateSchemaAdminmetadata(request *UpdateSchemaAdminmetadataRequest) (_result *UpdateSchemaAdminmetadataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSchemaAdminmetadataResponse{}
	_body, _err := client.UpdateSchemaAdminmetadataEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新schema元信息
 * Summary: 更新schema元信息
 */
func (client *Client) UpdateSchemaAdminmetadataEx(request *UpdateSchemaAdminmetadataRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSchemaAdminmetadataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSchemaAdminmetadataResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.schema.adminmetadata.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除schema元信息
 * Summary: 删除schema元信息
 */
func (client *Client) DeleteSchemaAdminmetadata(request *DeleteSchemaAdminmetadataRequest) (_result *DeleteSchemaAdminmetadataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSchemaAdminmetadataResponse{}
	_body, _err := client.DeleteSchemaAdminmetadataEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除schema元信息
 * Summary: 删除schema元信息
 */
func (client *Client) DeleteSchemaAdminmetadataEx(request *DeleteSchemaAdminmetadataRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSchemaAdminmetadataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSchemaAdminmetadataResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.schema.adminmetadata.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 分页查看schema详情
 * Summary: 分页查看schema详情
 */
func (client *Client) ListSchemaAdmindetail(request *ListSchemaAdmindetailRequest) (_result *ListSchemaAdmindetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSchemaAdmindetailResponse{}
	_body, _err := client.ListSchemaAdmindetailEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 分页查看schema详情
 * Summary: 分页查看schema详情
 */
func (client *Client) ListSchemaAdmindetailEx(request *ListSchemaAdmindetailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSchemaAdmindetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSchemaAdmindetailResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.schema.admindetail.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 新增schema详情
 * Summary: 新增schema详情
 */
func (client *Client) CreateSchemaAdmindetail(request *CreateSchemaAdmindetailRequest) (_result *CreateSchemaAdmindetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSchemaAdmindetailResponse{}
	_body, _err := client.CreateSchemaAdmindetailEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 新增schema详情
 * Summary: 新增schema详情
 */
func (client *Client) CreateSchemaAdmindetailEx(request *CreateSchemaAdmindetailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSchemaAdmindetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSchemaAdmindetailResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.schema.admindetail.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: admindetail
 * Summary: 删除schema详情
 */
func (client *Client) DeleteSchemaAdmindetail(request *DeleteSchemaAdmindetailRequest) (_result *DeleteSchemaAdmindetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSchemaAdmindetailResponse{}
	_body, _err := client.DeleteSchemaAdmindetailEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: admindetail
 * Summary: 删除schema详情
 */
func (client *Client) DeleteSchemaAdmindetailEx(request *DeleteSchemaAdmindetailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSchemaAdmindetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSchemaAdmindetailResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.schema.admindetail.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询endpoint
 * Summary: 查询endpoint
 */
func (client *Client) QuerySofamqEndpoint(request *QuerySofamqEndpointRequest) (_result *QuerySofamqEndpointResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqEndpointResponse{}
	_body, _err := client.QuerySofamqEndpointEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询endpoint
 * Summary: 查询endpoint
 */
func (client *Client) QuerySofamqEndpointEx(request *QuerySofamqEndpointRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqEndpointResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqEndpointResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.endpoint.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 按照条件查看schema元数据
 * Summary: 按照条件查看schema元数据
 */
func (client *Client) QuerySchemaAdminmetadata(request *QuerySchemaAdminmetadataRequest) (_result *QuerySchemaAdminmetadataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySchemaAdminmetadataResponse{}
	_body, _err := client.QuerySchemaAdminmetadataEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 按照条件查看schema元数据
 * Summary: 按照条件查看schema元数据
 */
func (client *Client) QuerySchemaAdminmetadataEx(request *QuerySchemaAdminmetadataRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySchemaAdminmetadataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySchemaAdminmetadataResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.schema.adminmetadata.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询schema的config配置
 * Summary: 查询schema的config配置
 */
func (client *Client) QuerySchemaAdminconfig(request *QuerySchemaAdminconfigRequest) (_result *QuerySchemaAdminconfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySchemaAdminconfigResponse{}
	_body, _err := client.QuerySchemaAdminconfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询schema的config配置
 * Summary: 查询schema的config配置
 */
func (client *Client) QuerySchemaAdminconfigEx(request *QuerySchemaAdminconfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySchemaAdminconfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySchemaAdminconfigResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.schema.adminconfig.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询console页面的链接
 * Summary: 查询console页面的链接
 */
func (client *Client) QuerySofamqLink(request *QuerySofamqLinkRequest) (_result *QuerySofamqLinkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqLinkResponse{}
	_body, _err := client.QuerySofamqLinkEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询console页面的链接
 * Summary: 查询console页面的链接
 */
func (client *Client) QuerySofamqLinkEx(request *QuerySofamqLinkRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqLinkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqLinkResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.link.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询全部topic名字
 * Summary: 查询全部topic名字
 */
func (client *Client) QuerySofamqTopicname(request *QuerySofamqTopicnameRequest) (_result *QuerySofamqTopicnameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqTopicnameResponse{}
	_body, _err := client.QuerySofamqTopicnameEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询全部topic名字
 * Summary: 查询全部topic名字
 */
func (client *Client) QuerySofamqTopicnameEx(request *QuerySofamqTopicnameRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqTopicnameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqTopicnameResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.topicname.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询全部group名字
 * Summary: 查询全部group名字
 */
func (client *Client) QuerySofamqGroupname(request *QuerySofamqGroupnameRequest) (_result *QuerySofamqGroupnameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqGroupnameResponse{}
	_body, _err := client.QuerySofamqGroupnameEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询全部group名字
 * Summary: 查询全部group名字
 */
func (client *Client) QuerySofamqGroupnameEx(request *QuerySofamqGroupnameRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqGroupnameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqGroupnameResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.groupname.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 管理员创建topic
 * Summary: 管理员创建topic
 */
func (client *Client) CreateSofamqAdmintopic(request *CreateSofamqAdmintopicRequest) (_result *CreateSofamqAdmintopicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSofamqAdmintopicResponse{}
	_body, _err := client.CreateSofamqAdmintopicEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 管理员创建topic
 * Summary: 管理员创建topic
 */
func (client *Client) CreateSofamqAdmintopicEx(request *CreateSofamqAdmintopicRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSofamqAdmintopicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSofamqAdmintopicResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.admintopic.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 管理员创建group
 * Summary: 管理员创建group
 */
func (client *Client) CreateSofamqAdmingroup(request *CreateSofamqAdmingroupRequest) (_result *CreateSofamqAdmingroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSofamqAdmingroupResponse{}
	_body, _err := client.CreateSofamqAdmingroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 管理员创建group
 * Summary: 管理员创建group
 */
func (client *Client) CreateSofamqAdmingroupEx(request *CreateSofamqAdmingroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSofamqAdmingroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSofamqAdmingroupResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.admingroup.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询特定的连接任务详情
 * Summary: 查询特定的连接任务详情
 */
func (client *Client) QuerySofamqConnector(request *QuerySofamqConnectorRequest) (_result *QuerySofamqConnectorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqConnectorResponse{}
	_body, _err := client.QuerySofamqConnectorEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询特定的连接任务详情
 * Summary: 查询特定的连接任务详情
 */
func (client *Client) QuerySofamqConnectorEx(request *QuerySofamqConnectorRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqConnectorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqConnectorResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connector.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 新增一个连接器任务
 * Summary: 新增一个连接器任务
 */
func (client *Client) CreateSofamqConnector(request *CreateSofamqConnectorRequest) (_result *CreateSofamqConnectorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSofamqConnectorResponse{}
	_body, _err := client.CreateSofamqConnectorEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 新增一个连接器任务
 * Summary: 新增一个连接器任务
 */
func (client *Client) CreateSofamqConnectorEx(request *CreateSofamqConnectorRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSofamqConnectorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSofamqConnectorResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connector.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询所有的连接任务，允许携带查询条件
 * Summary: 查询连接任务
 */
func (client *Client) ListSofamqConnector(request *ListSofamqConnectorRequest) (_result *ListSofamqConnectorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqConnectorResponse{}
	_body, _err := client.ListSofamqConnectorEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询所有的连接任务，允许携带查询条件
 * Summary: 查询连接任务
 */
func (client *Client) ListSofamqConnectorEx(request *ListSofamqConnectorRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqConnectorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqConnectorResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connector.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除一个连接器任务
 * Summary: 删除一个连接器任务
 */
func (client *Client) DeleteSofamqConnector(request *DeleteSofamqConnectorRequest) (_result *DeleteSofamqConnectorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSofamqConnectorResponse{}
	_body, _err := client.DeleteSofamqConnectorEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除一个连接器任务
 * Summary: 删除一个连接器任务
 */
func (client *Client) DeleteSofamqConnectorEx(request *DeleteSofamqConnectorRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSofamqConnectorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSofamqConnectorResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connector.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 启动一个连接器的任务
 * Summary: 启动一个连接器的任务
 */
func (client *Client) EnableSofamqConnector(request *EnableSofamqConnectorRequest) (_result *EnableSofamqConnectorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &EnableSofamqConnectorResponse{}
	_body, _err := client.EnableSofamqConnectorEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 启动一个连接器的任务
 * Summary: 启动一个连接器的任务
 */
func (client *Client) EnableSofamqConnectorEx(request *EnableSofamqConnectorRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *EnableSofamqConnectorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &EnableSofamqConnectorResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connector.enable"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 停止一个连接器任务
 * Summary: 停止一个连接器任务
 */
func (client *Client) DisableSofamqConnector(request *DisableSofamqConnectorRequest) (_result *DisableSofamqConnectorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DisableSofamqConnectorResponse{}
	_body, _err := client.DisableSofamqConnectorEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 停止一个连接器任务
 * Summary: 停止一个连接器任务
 */
func (client *Client) DisableSofamqConnectorEx(request *DisableSofamqConnectorRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DisableSofamqConnectorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DisableSofamqConnectorResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connector.disable"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 列出所有任务的调度类型
 * Summary: 列出所有任务的调度类型
 */
func (client *Client) ListSofamqConnectorscheuletype(request *ListSofamqConnectorscheuletypeRequest) (_result *ListSofamqConnectorscheuletypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqConnectorscheuletypeResponse{}
	_body, _err := client.ListSofamqConnectorscheuletypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 列出所有任务的调度类型
 * Summary: 列出所有任务的调度类型
 */
func (client *Client) ListSofamqConnectorscheuletypeEx(request *ListSofamqConnectorscheuletypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqConnectorscheuletypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqConnectorscheuletypeResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectorscheuletype.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 列出所有支持的来源类型
 * Summary: 列出所有支持的来源类型
 */
func (client *Client) ListSofamqConnectorsourcetype(request *ListSofamqConnectorsourcetypeRequest) (_result *ListSofamqConnectorsourcetypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqConnectorsourcetypeResponse{}
	_body, _err := client.ListSofamqConnectorsourcetypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 列出所有支持的来源类型
 * Summary: 列出所有支持的来源类型
 */
func (client *Client) ListSofamqConnectorsourcetypeEx(request *ListSofamqConnectorsourcetypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqConnectorsourcetypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqConnectorsourcetypeResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectorsourcetype.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 列出所有支持的去向类型
 * Summary: 列出所有支持的去向类型
 */
func (client *Client) ListSofamqConnectorsinktype(request *ListSofamqConnectorsinktypeRequest) (_result *ListSofamqConnectorsinktypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqConnectorsinktypeResponse{}
	_body, _err := client.ListSofamqConnectorsinktypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 列出所有支持的去向类型
 * Summary: 列出所有支持的去向类型
 */
func (client *Client) ListSofamqConnectorsinktypeEx(request *ListSofamqConnectorsinktypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqConnectorsinktypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqConnectorsinktypeResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectorsinktype.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据不同的来源或去向的类型，加载出前端需要渲染出来 让用户配置的  配置项控件。
 * Summary: 加载不同数据来源和去向对应的前端配置
 */
func (client *Client) LoadSofamqConnectorconfigs(request *LoadSofamqConnectorconfigsRequest) (_result *LoadSofamqConnectorconfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &LoadSofamqConnectorconfigsResponse{}
	_body, _err := client.LoadSofamqConnectorconfigsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据不同的来源或去向的类型，加载出前端需要渲染出来 让用户配置的  配置项控件。
 * Summary: 加载不同数据来源和去向对应的前端配置
 */
func (client *Client) LoadSofamqConnectorconfigsEx(request *LoadSofamqConnectorconfigsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *LoadSofamqConnectorconfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &LoadSofamqConnectorconfigsResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectorconfigs.load"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: connect按照时间段返回当前任务的执行记录
 * Summary: connect执行记录查询
 */
func (client *Client) QuerySofamqConnectordate(request *QuerySofamqConnectordateRequest) (_result *QuerySofamqConnectordateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqConnectordateResponse{}
	_body, _err := client.QuerySofamqConnectordateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: connect按照时间段返回当前任务的执行记录
 * Summary: connect执行记录查询
 */
func (client *Client) QuerySofamqConnectordateEx(request *QuerySofamqConnectordateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqConnectordateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqConnectordateResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectordate.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据执行时间返回当前的任务记录执行详情
 * Summary: 根据执行时间返回当前的任务记录执行详情
 */
func (client *Client) QuerySofamqConnectorrecord(request *QuerySofamqConnectorrecordRequest) (_result *QuerySofamqConnectorrecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqConnectorrecordResponse{}
	_body, _err := client.QuerySofamqConnectorrecordEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据执行时间返回当前的任务记录执行详情
 * Summary: 根据执行时间返回当前的任务记录执行详情
 */
func (client *Client) QuerySofamqConnectorrecordEx(request *QuerySofamqConnectorrecordRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqConnectorrecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqConnectorrecordResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectorrecord.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 加载数据源对应的结构信息
 * Summary: 加载数据源对应的结构信息
 */
func (client *Client) LoadSofamqConnectorsource(request *LoadSofamqConnectorsourceRequest) (_result *LoadSofamqConnectorsourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &LoadSofamqConnectorsourceResponse{}
	_body, _err := client.LoadSofamqConnectorsourceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 加载数据源对应的结构信息
 * Summary: 加载数据源对应的结构信息
 */
func (client *Client) LoadSofamqConnectorsourceEx(request *LoadSofamqConnectorsourceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *LoadSofamqConnectorsourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &LoadSofamqConnectorsourceResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectorsource.load"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询队列详情信息以及分页信息
 * Summary: 查询队列详情
 */
func (client *Client) QueryMeshQueue(request *QueryMeshQueueRequest) (_result *QueryMeshQueueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMeshQueueResponse{}
	_body, _err := client.QueryMeshQueueEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询队列详情信息以及分页信息
 * Summary: 查询队列详情
 */
func (client *Client) QueryMeshQueueEx(request *QueryMeshQueueRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMeshQueueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMeshQueueResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.queue.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 新增队列
 * Summary: 新增队列
 */
func (client *Client) ImportMeshQueue(request *ImportMeshQueueRequest) (_result *ImportMeshQueueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ImportMeshQueueResponse{}
	_body, _err := client.ImportMeshQueueEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 新增队列
 * Summary: 新增队列
 */
func (client *Client) ImportMeshQueueEx(request *ImportMeshQueueRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ImportMeshQueueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ImportMeshQueueResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.queue.import"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除队列
 * Summary: 删除队列
 */
func (client *Client) DeleteMeshQueue(request *DeleteMeshQueueRequest) (_result *DeleteMeshQueueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteMeshQueueResponse{}
	_body, _err := client.DeleteMeshQueueEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除队列
 * Summary: 删除队列
 */
func (client *Client) DeleteMeshQueueEx(request *DeleteMeshQueueRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteMeshQueueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteMeshQueueResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.queue.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新队列
 * Summary: 更新队列
 */
func (client *Client) UpdateMeshQueue(request *UpdateMeshQueueRequest) (_result *UpdateMeshQueueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateMeshQueueResponse{}
	_body, _err := client.UpdateMeshQueueEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新队列
 * Summary: 更新队列
 */
func (client *Client) UpdateMeshQueueEx(request *UpdateMeshQueueRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateMeshQueueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateMeshQueueResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.queue.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询限流规则
 * Summary: 查询限流规则
 */
func (client *Client) QueryMeshQueuelimitrules(request *QueryMeshQueuelimitrulesRequest) (_result *QueryMeshQueuelimitrulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMeshQueuelimitrulesResponse{}
	_body, _err := client.QueryMeshQueuelimitrulesEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询限流规则
 * Summary: 查询限流规则
 */
func (client *Client) QueryMeshQueuelimitrulesEx(request *QueryMeshQueuelimitrulesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMeshQueuelimitrulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMeshQueuelimitrulesResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.queuelimitrules.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 修改一个连接器任务
 * Summary: 修改一个连接器任务
 */
func (client *Client) UpdateSofamqConnector(request *UpdateSofamqConnectorRequest) (_result *UpdateSofamqConnectorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSofamqConnectorResponse{}
	_body, _err := client.UpdateSofamqConnectorEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 修改一个连接器任务
 * Summary: 修改一个连接器任务
 */
func (client *Client) UpdateSofamqConnectorEx(request *UpdateSofamqConnectorRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSofamqConnectorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSofamqConnectorResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connector.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询限流规则域值
 * Summary: 查询限流规则域值
 */
func (client *Client) QueryMeshQueuelimitvalue(request *QueryMeshQueuelimitvalueRequest) (_result *QueryMeshQueuelimitvalueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMeshQueuelimitvalueResponse{}
	_body, _err := client.QueryMeshQueuelimitvalueEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询限流规则域值
 * Summary: 查询限流规则域值
 */
func (client *Client) QueryMeshQueuelimitvalueEx(request *QueryMeshQueuelimitvalueRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMeshQueuelimitvalueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMeshQueuelimitvalueResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.queuelimitvalue.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新限流规则
 * Summary: 更新限流规则
 */
func (client *Client) UpdateMeshQueuelimit(request *UpdateMeshQueuelimitRequest) (_result *UpdateMeshQueuelimitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateMeshQueuelimitResponse{}
	_body, _err := client.UpdateMeshQueuelimitEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新限流规则
 * Summary: 更新限流规则
 */
func (client *Client) UpdateMeshQueuelimitEx(request *UpdateMeshQueuelimitRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateMeshQueuelimitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateMeshQueuelimitResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.queuelimit.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 添加限流规则
 * Summary: 添加限流规则
 */
func (client *Client) ImportMeshQueuelimit(request *ImportMeshQueuelimitRequest) (_result *ImportMeshQueuelimitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ImportMeshQueuelimitResponse{}
	_body, _err := client.ImportMeshQueuelimitEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 添加限流规则
 * Summary: 添加限流规则
 */
func (client *Client) ImportMeshQueuelimitEx(request *ImportMeshQueuelimitRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ImportMeshQueuelimitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ImportMeshQueuelimitResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.queuelimit.import"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除限流规则
 * Summary: 删除限流规则
 */
func (client *Client) DeleteMeshQueuelimit(request *DeleteMeshQueuelimitRequest) (_result *DeleteMeshQueuelimitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteMeshQueuelimitResponse{}
	_body, _err := client.DeleteMeshQueuelimitEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除限流规则
 * Summary: 删除限流规则
 */
func (client *Client) DeleteMeshQueuelimitEx(request *DeleteMeshQueuelimitRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteMeshQueuelimitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteMeshQueuelimitResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.queuelimit.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除限流域值
 * Summary: 删除规则的限流域值
 */
func (client *Client) DeleteMeshQueuelimitvalue(request *DeleteMeshQueuelimitvalueRequest) (_result *DeleteMeshQueuelimitvalueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteMeshQueuelimitvalueResponse{}
	_body, _err := client.DeleteMeshQueuelimitvalueEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除限流域值
 * Summary: 删除规则的限流域值
 */
func (client *Client) DeleteMeshQueuelimitvalueEx(request *DeleteMeshQueuelimitvalueRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteMeshQueuelimitvalueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteMeshQueuelimitvalueResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.queuelimitvalue.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询路由规则
 * Summary: 查询路由规则
 */
func (client *Client) QueryMeshQueuerouterules(request *QueryMeshQueuerouterulesRequest) (_result *QueryMeshQueuerouterulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMeshQueuerouterulesResponse{}
	_body, _err := client.QueryMeshQueuerouterulesEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询路由规则
 * Summary: 查询路由规则
 */
func (client *Client) QueryMeshQueuerouterulesEx(request *QueryMeshQueuerouterulesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMeshQueuerouterulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMeshQueuerouterulesResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.queuerouterules.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询路由版本
 * Summary: 查询路由版本
 */
func (client *Client) QueryMeshQueuerouteedition(request *QueryMeshQueuerouteeditionRequest) (_result *QueryMeshQueuerouteeditionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMeshQueuerouteeditionResponse{}
	_body, _err := client.QueryMeshQueuerouteeditionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询路由版本
 * Summary: 查询路由版本
 */
func (client *Client) QueryMeshQueuerouteeditionEx(request *QueryMeshQueuerouteeditionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMeshQueuerouteeditionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMeshQueuerouteeditionResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.queuerouteedition.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 添加路由规则
 * Summary: 添加路由规则
 */
func (client *Client) ImportMeshQueueroute(request *ImportMeshQueuerouteRequest) (_result *ImportMeshQueuerouteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ImportMeshQueuerouteResponse{}
	_body, _err := client.ImportMeshQueuerouteEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 添加路由规则
 * Summary: 添加路由规则
 */
func (client *Client) ImportMeshQueuerouteEx(request *ImportMeshQueuerouteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ImportMeshQueuerouteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ImportMeshQueuerouteResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.queueroute.import"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新路由规则
 * Summary: 更新路由规则
 */
func (client *Client) UpdateMeshQueueroute(request *UpdateMeshQueuerouteRequest) (_result *UpdateMeshQueuerouteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateMeshQueuerouteResponse{}
	_body, _err := client.UpdateMeshQueuerouteEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新路由规则
 * Summary: 更新路由规则
 */
func (client *Client) UpdateMeshQueuerouteEx(request *UpdateMeshQueuerouteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateMeshQueuerouteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateMeshQueuerouteResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.queueroute.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除限流规则
 * Summary: 删除限流规则
 */
func (client *Client) DeleteMeshQueueroute(request *DeleteMeshQueuerouteRequest) (_result *DeleteMeshQueuerouteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteMeshQueuerouteResponse{}
	_body, _err := client.DeleteMeshQueuerouteEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除限流规则
 * Summary: 删除限流规则
 */
func (client *Client) DeleteMeshQueuerouteEx(request *DeleteMeshQueuerouteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteMeshQueuerouteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteMeshQueuerouteResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.queueroute.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除路由版本
 * Summary: 删除路由版本
 */
func (client *Client) DeleteMeshQueuerouteedition(request *DeleteMeshQueuerouteeditionRequest) (_result *DeleteMeshQueuerouteeditionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteMeshQueuerouteeditionResponse{}
	_body, _err := client.DeleteMeshQueuerouteeditionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除路由版本
 * Summary: 删除路由版本
 */
func (client *Client) DeleteMeshQueuerouteeditionEx(request *DeleteMeshQueuerouteeditionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteMeshQueuerouteeditionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteMeshQueuerouteeditionResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.queuerouteedition.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询路由规则应用
 * Summary: 查询路由规则应用
 */
func (client *Client) QueryMeshQueuerouteapp(request *QueryMeshQueuerouteappRequest) (_result *QueryMeshQueuerouteappResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMeshQueuerouteappResponse{}
	_body, _err := client.QueryMeshQueuerouteappEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询路由规则应用
 * Summary: 查询路由规则应用
 */
func (client *Client) QueryMeshQueuerouteappEx(request *QueryMeshQueuerouteappRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMeshQueuerouteappResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMeshQueuerouteappResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.queuerouteapp.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据队列id查询队列详情
 * Summary: 根据队列id查询队列详情
 */
func (client *Client) QueryMeshQueuebyid(request *QueryMeshQueuebyidRequest) (_result *QueryMeshQueuebyidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMeshQueuebyidResponse{}
	_body, _err := client.QueryMeshQueuebyidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据队列id查询队列详情
 * Summary: 根据队列id查询队列详情
 */
func (client *Client) QueryMeshQueuebyidEx(request *QueryMeshQueuebyidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMeshQueuebyidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMeshQueuebyidResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.queuebyid.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: zhaolei
 * Summary: 更新限流状态
 */
func (client *Client) UpdateMeshQueuelimitstatus(request *UpdateMeshQueuelimitstatusRequest) (_result *UpdateMeshQueuelimitstatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateMeshQueuelimitstatusResponse{}
	_body, _err := client.UpdateMeshQueuelimitstatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: zhaolei
 * Summary: 更新限流状态
 */
func (client *Client) UpdateMeshQueuelimitstatusEx(request *UpdateMeshQueuelimitstatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateMeshQueuelimitstatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateMeshQueuelimitstatusResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.queuelimitstatus.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新路由规则状态
 * Summary: 更新路由规则状态
 */
func (client *Client) UpdateMeshQueueroutestatus(request *UpdateMeshQueueroutestatusRequest) (_result *UpdateMeshQueueroutestatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateMeshQueueroutestatusResponse{}
	_body, _err := client.UpdateMeshQueueroutestatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新路由规则状态
 * Summary: 更新路由规则状态
 */
func (client *Client) UpdateMeshQueueroutestatusEx(request *UpdateMeshQueueroutestatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateMeshQueueroutestatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateMeshQueueroutestatusResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.queueroutestatus.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 管理员更新topic
 * Summary: 管理员更新topic
 */
func (client *Client) UpdateSofamqAdmintopic(request *UpdateSofamqAdmintopicRequest) (_result *UpdateSofamqAdmintopicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSofamqAdmintopicResponse{}
	_body, _err := client.UpdateSofamqAdmintopicEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 管理员更新topic
 * Summary: 管理员更新topic
 */
func (client *Client) UpdateSofamqAdmintopicEx(request *UpdateSofamqAdmintopicRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSofamqAdmintopicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSofamqAdmintopicResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.admintopic.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 管理员更新group
 * Summary: 管理员更新group
 */
func (client *Client) UpdateSofamqAdmingroup(request *UpdateSofamqAdmingroupRequest) (_result *UpdateSofamqAdmingroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSofamqAdmingroupResponse{}
	_body, _err := client.UpdateSofamqAdmingroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 管理员更新group
 * Summary: 管理员更新group
 */
func (client *Client) UpdateSofamqAdmingroupEx(request *UpdateSofamqAdmingroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSofamqAdmingroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSofamqAdmingroupResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.admingroup.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 手动触发一次任务的执行
 * Summary: 手动触发一次任务的执行
 */
func (client *Client) RunSofamqConnectorjob(request *RunSofamqConnectorjobRequest) (_result *RunSofamqConnectorjobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RunSofamqConnectorjobResponse{}
	_body, _err := client.RunSofamqConnectorjobEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 手动触发一次任务的执行
 * Summary: 手动触发一次任务的执行
 */
func (client *Client) RunSofamqConnectorjobEx(request *RunSofamqConnectorjobRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RunSofamqConnectorjobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RunSofamqConnectorjobResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectorjob.run"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 暂停一个Connector任务
 * Summary: 暂停一个任务
 */
func (client *Client) PauseSofamqConnectorjob(request *PauseSofamqConnectorjobRequest) (_result *PauseSofamqConnectorjobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PauseSofamqConnectorjobResponse{}
	_body, _err := client.PauseSofamqConnectorjobEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 暂停一个Connector任务
 * Summary: 暂停一个任务
 */
func (client *Client) PauseSofamqConnectorjobEx(request *PauseSofamqConnectorjobRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PauseSofamqConnectorjobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PauseSofamqConnectorjobResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectorjob.pause"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 恢复一个暂停的任务
 * Summary: 恢复一个暂停的任务
 */
func (client *Client) ResumeSofamqConnectorjob(request *ResumeSofamqConnectorjobRequest) (_result *ResumeSofamqConnectorjobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ResumeSofamqConnectorjobResponse{}
	_body, _err := client.ResumeSofamqConnectorjobEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 恢复一个暂停的任务
 * Summary: 恢复一个暂停的任务
 */
func (client *Client) ResumeSofamqConnectorjobEx(request *ResumeSofamqConnectorjobRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ResumeSofamqConnectorjobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ResumeSofamqConnectorjobResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectorjob.resume"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 确认覆盖路有规则状态
 * Summary: 确认覆盖路由规则状态
 */
func (client *Client) UpdateMeshQueueroutestatusconfirm(request *UpdateMeshQueueroutestatusconfirmRequest) (_result *UpdateMeshQueueroutestatusconfirmResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateMeshQueueroutestatusconfirmResponse{}
	_body, _err := client.UpdateMeshQueueroutestatusconfirmEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 确认覆盖路有规则状态
 * Summary: 确认覆盖路由规则状态
 */
func (client *Client) UpdateMeshQueueroutestatusconfirmEx(request *UpdateMeshQueueroutestatusconfirmRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateMeshQueueroutestatusconfirmResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateMeshQueueroutestatusconfirmResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.queueroutestatusconfirm.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更细限流状态
 * Summary: 更新限流状态
 */
func (client *Client) UpdateMeshQueuelimitstatusconfirm(request *UpdateMeshQueuelimitstatusconfirmRequest) (_result *UpdateMeshQueuelimitstatusconfirmResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateMeshQueuelimitstatusconfirmResponse{}
	_body, _err := client.UpdateMeshQueuelimitstatusconfirmEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更细限流状态
 * Summary: 更新限流状态
 */
func (client *Client) UpdateMeshQueuelimitstatusconfirmEx(request *UpdateMeshQueuelimitstatusconfirmRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateMeshQueuelimitstatusconfirmResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateMeshQueuelimitstatusconfirmResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.queuelimitstatusconfirm.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 日切检查，验证是否可以完成日切
 * Summary: 日切检查
 */
func (client *Client) ExecSofamqDailycheck(request *ExecSofamqDailycheckRequest) (_result *ExecSofamqDailycheckResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecSofamqDailycheckResponse{}
	_body, _err := client.ExecSofamqDailycheckEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 日切检查，验证是否可以完成日切
 * Summary: 日切检查
 */
func (client *Client) ExecSofamqDailycheckEx(request *ExecSofamqDailycheckRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecSofamqDailycheckResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecSofamqDailycheckResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.dailycheck.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用详情
 * Summary: 查询应用详情
 */
func (client *Client) QueryMeshApplication(request *QueryMeshApplicationRequest) (_result *QueryMeshApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMeshApplicationResponse{}
	_body, _err := client.QueryMeshApplicationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用详情
 * Summary: 查询应用详情
 */
func (client *Client) QueryMeshApplicationEx(request *QueryMeshApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMeshApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMeshApplicationResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.application.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 新增应用
 * Summary: 新增应用
 */
func (client *Client) ImportMeshApplication(request *ImportMeshApplicationRequest) (_result *ImportMeshApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ImportMeshApplicationResponse{}
	_body, _err := client.ImportMeshApplicationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 新增应用
 * Summary: 新增应用
 */
func (client *Client) ImportMeshApplicationEx(request *ImportMeshApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ImportMeshApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ImportMeshApplicationResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.application.import"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新应用
 * Summary: 更新应用
 */
func (client *Client) UpdateMeshApplication(request *UpdateMeshApplicationRequest) (_result *UpdateMeshApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateMeshApplicationResponse{}
	_body, _err := client.UpdateMeshApplicationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新应用
 * Summary: 更新应用
 */
func (client *Client) UpdateMeshApplicationEx(request *UpdateMeshApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateMeshApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateMeshApplicationResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.application.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除应用
 * Summary: 删除应用
 */
func (client *Client) DeleteMeshApplication(request *DeleteMeshApplicationRequest) (_result *DeleteMeshApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteMeshApplicationResponse{}
	_body, _err := client.DeleteMeshApplicationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除应用
 * Summary: 删除应用
 */
func (client *Client) DeleteMeshApplicationEx(request *DeleteMeshApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteMeshApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteMeshApplicationResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.application.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用服务id
 * Summary: 查询应用服务id
 */
func (client *Client) QueryMeshApplicationservice(request *QueryMeshApplicationserviceRequest) (_result *QueryMeshApplicationserviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMeshApplicationserviceResponse{}
	_body, _err := client.QueryMeshApplicationserviceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用服务id
 * Summary: 查询应用服务id
 */
func (client *Client) QueryMeshApplicationserviceEx(request *QueryMeshApplicationserviceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMeshApplicationserviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMeshApplicationserviceResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.applicationservice.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据应用名查应用详情
 * Summary: 根据应用名查应用详情
 */
func (client *Client) QueryMeshApplicationbyname(request *QueryMeshApplicationbynameRequest) (_result *QueryMeshApplicationbynameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMeshApplicationbynameResponse{}
	_body, _err := client.QueryMeshApplicationbynameEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据应用名查应用详情
 * Summary: 根据应用名查应用详情
 */
func (client *Client) QueryMeshApplicationbynameEx(request *QueryMeshApplicationbynameRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMeshApplicationbynameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMeshApplicationbynameResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.applicationbyname.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询队列的应用列表
 * Summary: 查询队列的应用列表
 */
func (client *Client) QueryMeshApplicationlist(request *QueryMeshApplicationlistRequest) (_result *QueryMeshApplicationlistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMeshApplicationlistResponse{}
	_body, _err := client.QueryMeshApplicationlistEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询队列的应用列表
 * Summary: 查询队列的应用列表
 */
func (client *Client) QueryMeshApplicationlistEx(request *QueryMeshApplicationlistRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMeshApplicationlistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMeshApplicationlistResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.applicationlist.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用队列下拉框
 * Summary: 应用队列下拉框
 */
func (client *Client) QueryMeshApplicationqueuenames(request *QueryMeshApplicationqueuenamesRequest) (_result *QueryMeshApplicationqueuenamesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMeshApplicationqueuenamesResponse{}
	_body, _err := client.QueryMeshApplicationqueuenamesEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用队列下拉框
 * Summary: 应用队列下拉框
 */
func (client *Client) QueryMeshApplicationqueuenamesEx(request *QueryMeshApplicationqueuenamesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMeshApplicationqueuenamesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMeshApplicationqueuenamesResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.mesh.applicationqueuenames.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 暂停一个Connector执行计划
 * Summary: 暂停一个Connector执行计划
 */
func (client *Client) PauseSofamqConnectorplan(request *PauseSofamqConnectorplanRequest) (_result *PauseSofamqConnectorplanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PauseSofamqConnectorplanResponse{}
	_body, _err := client.PauseSofamqConnectorplanEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 暂停一个Connector执行计划
 * Summary: 暂停一个Connector执行计划
 */
func (client *Client) PauseSofamqConnectorplanEx(request *PauseSofamqConnectorplanRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PauseSofamqConnectorplanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PauseSofamqConnectorplanResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectorplan.pause"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 恢复一个connector执行计划
 * Summary: 恢复一个connector执行计划
 */
func (client *Client) ResumeSofamqConnectorplan(request *ResumeSofamqConnectorplanRequest) (_result *ResumeSofamqConnectorplanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ResumeSofamqConnectorplanResponse{}
	_body, _err := client.ResumeSofamqConnectorplanEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 恢复一个connector执行计划
 * Summary: 恢复一个connector执行计划
 */
func (client *Client) ResumeSofamqConnectorplanEx(request *ResumeSofamqConnectorplanRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ResumeSofamqConnectorplanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ResumeSofamqConnectorplanResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectorplan.resume"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重启一个已有的connector任务计划，会删除当前的执行计划和执行进度
 * Summary: 重启一个已有的connector任务计划
 */
func (client *Client) RetrySofamqConnectorplan(request *RetrySofamqConnectorplanRequest) (_result *RetrySofamqConnectorplanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RetrySofamqConnectorplanResponse{}
	_body, _err := client.RetrySofamqConnectorplanEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重启一个已有的connector任务计划，会删除当前的执行计划和执行进度
 * Summary: 重启一个已有的connector任务计划
 */
func (client *Client) RetrySofamqConnectorplanEx(request *RetrySofamqConnectorplanRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RetrySofamqConnectorplanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RetrySofamqConnectorplanResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectorplan.retry"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据来源类型或去向类型，查询某个任务的所有配置，包括是否可以修改等
 * Summary: 查询任务不同来源去向的配置
 */
func (client *Client) QuerySofamqConnectorconfigs(request *QuerySofamqConnectorconfigsRequest) (_result *QuerySofamqConnectorconfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqConnectorconfigsResponse{}
	_body, _err := client.QuerySofamqConnectorconfigsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据来源类型或去向类型，查询某个任务的所有配置，包括是否可以修改等
 * Summary: 查询任务不同来源去向的配置
 */
func (client *Client) QuerySofamqConnectorconfigsEx(request *QuerySofamqConnectorconfigsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqConnectorconfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqConnectorconfigsResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectorconfigs.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建消费限流规则
 * Summary: 创建消费限流规则
 */
func (client *Client) CreateSofamqConsumelimiter(request *CreateSofamqConsumelimiterRequest) (_result *CreateSofamqConsumelimiterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSofamqConsumelimiterResponse{}
	_body, _err := client.CreateSofamqConsumelimiterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建消费限流规则
 * Summary: 创建消费限流规则
 */
func (client *Client) CreateSofamqConsumelimiterEx(request *CreateSofamqConsumelimiterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSofamqConsumelimiterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSofamqConsumelimiterResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.consumelimiter.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新限流规则
 * Summary: 更新限流规则
 */
func (client *Client) UpdateSofamqConsumelimiter(request *UpdateSofamqConsumelimiterRequest) (_result *UpdateSofamqConsumelimiterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSofamqConsumelimiterResponse{}
	_body, _err := client.UpdateSofamqConsumelimiterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新限流规则
 * Summary: 更新限流规则
 */
func (client *Client) UpdateSofamqConsumelimiterEx(request *UpdateSofamqConsumelimiterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSofamqConsumelimiterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSofamqConsumelimiterResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.consumelimiter.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除限流规则
 * Summary: 删除限流规则
 */
func (client *Client) DeleteSofamqConsumelimiter(request *DeleteSofamqConsumelimiterRequest) (_result *DeleteSofamqConsumelimiterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSofamqConsumelimiterResponse{}
	_body, _err := client.DeleteSofamqConsumelimiterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除限流规则
 * Summary: 删除限流规则
 */
func (client *Client) DeleteSofamqConsumelimiterEx(request *DeleteSofamqConsumelimiterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSofamqConsumelimiterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSofamqConsumelimiterResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.consumelimiter.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取限流规则
 * Summary: 限流规则获取
 */
func (client *Client) QuerySofamqConsumelimiter(request *QuerySofamqConsumelimiterRequest) (_result *QuerySofamqConsumelimiterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqConsumelimiterResponse{}
	_body, _err := client.QuerySofamqConsumelimiterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取限流规则
 * Summary: 限流规则获取
 */
func (client *Client) QuerySofamqConsumelimiterEx(request *QuerySofamqConsumelimiterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqConsumelimiterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqConsumelimiterResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.consumelimiter.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: dd
 * Summary: dd
 */
func (client *Client) GetDmsInstance(request *GetDmsInstanceRequest) (_result *GetDmsInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetDmsInstanceResponse{}
	_body, _err := client.GetDmsInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: dd
 * Summary: dd
 */
func (client *Client) GetDmsInstanceEx(request *GetDmsInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetDmsInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetDmsInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.dms.instance.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询标签
 * Summary: 查询标签
 */
func (client *Client) QuerySofamqLabels(request *QuerySofamqLabelsRequest) (_result *QuerySofamqLabelsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqLabelsResponse{}
	_body, _err := client.QuerySofamqLabelsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询标签
 * Summary: 查询标签
 */
func (client *Client) QuerySofamqLabelsEx(request *QuerySofamqLabelsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqLabelsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqLabelsResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.labels.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: SofaMQ 创建资源标签
 * Summary: 创建资源标签
 */
func (client *Client) CreateSofamqLabels(request *CreateSofamqLabelsRequest) (_result *CreateSofamqLabelsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSofamqLabelsResponse{}
	_body, _err := client.CreateSofamqLabelsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: SofaMQ 创建资源标签
 * Summary: 创建资源标签
 */
func (client *Client) CreateSofamqLabelsEx(request *CreateSofamqLabelsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSofamqLabelsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSofamqLabelsResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.labels.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除资源标签
 * Summary: 删除资源标签
 */
func (client *Client) DeleteSofamqLabels(request *DeleteSofamqLabelsRequest) (_result *DeleteSofamqLabelsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSofamqLabelsResponse{}
	_body, _err := client.DeleteSofamqLabelsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除资源标签
 * Summary: 删除资源标签
 */
func (client *Client) DeleteSofamqLabelsEx(request *DeleteSofamqLabelsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSofamqLabelsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSofamqLabelsResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.labels.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取特定Topic的Schema列表
 * Summary: 获取Topic的Schema列表
 */
func (client *Client) ListSofamqSchema(request *ListSofamqSchemaRequest) (_result *ListSofamqSchemaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqSchemaResponse{}
	_body, _err := client.ListSofamqSchemaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取特定Topic的Schema列表
 * Summary: 获取Topic的Schema列表
 */
func (client *Client) ListSofamqSchemaEx(request *ListSofamqSchemaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqSchemaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqSchemaResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.schema.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建Topic的Schema
 * Summary: 创建Schema
 */
func (client *Client) CreateSofamqSchema(request *CreateSofamqSchemaRequest) (_result *CreateSofamqSchemaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSofamqSchemaResponse{}
	_body, _err := client.CreateSofamqSchemaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建Topic的Schema
 * Summary: 创建Schema
 */
func (client *Client) CreateSofamqSchemaEx(request *CreateSofamqSchemaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSofamqSchemaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSofamqSchemaResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.schema.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取特定Topic特定版本的Schema
 * Summary: 获取Schema详情
 */
func (client *Client) GetSofamqSchema(request *GetSofamqSchemaRequest) (_result *GetSofamqSchemaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSofamqSchemaResponse{}
	_body, _err := client.GetSofamqSchemaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取特定Topic特定版本的Schema
 * Summary: 获取Schema详情
 */
func (client *Client) GetSofamqSchemaEx(request *GetSofamqSchemaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSofamqSchemaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSofamqSchemaResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.schema.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据Schema生成对应的POJO代码
 * Summary: 获取schema对应的代码
 */
func (client *Client) ExportSofamqSchema(request *ExportSofamqSchemaRequest) (_result *ExportSofamqSchemaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExportSofamqSchemaResponse{}
	_body, _err := client.ExportSofamqSchemaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据Schema生成对应的POJO代码
 * Summary: 获取schema对应的代码
 */
func (client *Client) ExportSofamqSchemaEx(request *ExportSofamqSchemaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExportSofamqSchemaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExportSofamqSchemaResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.schema.export"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新schema信息（schema仅允许更新部分信息，比如描述信息；schema的内容是不能修改的）
 * Summary: 更新schema
 */
func (client *Client) UpdateSofamqSchema(request *UpdateSofamqSchemaRequest) (_result *UpdateSofamqSchemaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSofamqSchemaResponse{}
	_body, _err := client.UpdateSofamqSchemaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新schema信息（schema仅允许更新部分信息，比如描述信息；schema的内容是不能修改的）
 * Summary: 更新schema
 */
func (client *Client) UpdateSofamqSchemaEx(request *UpdateSofamqSchemaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSofamqSchemaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSofamqSchemaResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.schema.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取Schema的版本号列表，结果按版本号大小降序排列
 * Summary: 获取Schema的版本号列表
 */
func (client *Client) AllSofamqSchema(request *AllSofamqSchemaRequest) (_result *AllSofamqSchemaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllSofamqSchemaResponse{}
	_body, _err := client.AllSofamqSchemaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取Schema的版本号列表，结果按版本号大小降序排列
 * Summary: 获取Schema的版本号列表
 */
func (client *Client) AllSofamqSchemaEx(request *AllSofamqSchemaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllSofamqSchemaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllSofamqSchemaResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.schema.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据Schema解析消息体，查看消息体的详细数据
 * Summary: 查看消息内容
 */
func (client *Client) ExportSofamqMessage(request *ExportSofamqMessageRequest) (_result *ExportSofamqMessageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExportSofamqMessageResponse{}
	_body, _err := client.ExportSofamqMessageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据Schema解析消息体，查看消息体的详细数据
 * Summary: 查看消息内容
 */
func (client *Client) ExportSofamqMessageEx(request *ExportSofamqMessageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExportSofamqMessageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExportSofamqMessageResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.message.export"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取系统支持的兼容性策略
 * Summary: 获取系统支持的兼容性策略
 */
func (client *Client) ListSofamqSchemacompatibility(request *ListSofamqSchemacompatibilityRequest) (_result *ListSofamqSchemacompatibilityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqSchemacompatibilityResponse{}
	_body, _err := client.ListSofamqSchemacompatibilityEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取系统支持的兼容性策略
 * Summary: 获取系统支持的兼容性策略
 */
func (client *Client) ListSofamqSchemacompatibilityEx(request *ListSofamqSchemacompatibilityRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqSchemacompatibilityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqSchemacompatibilityResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.schemacompatibility.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取系统支持的序列化方式
 * Summary: 获取系统支持的序列化方式
 */
func (client *Client) ListSofamqSchemaserialization(request *ListSofamqSchemaserializationRequest) (_result *ListSofamqSchemaserializationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqSchemaserializationResponse{}
	_body, _err := client.ListSofamqSchemaserializationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取系统支持的序列化方式
 * Summary: 获取系统支持的序列化方式
 */
func (client *Client) ListSofamqSchemaserializationEx(request *ListSofamqSchemaserializationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqSchemaserializationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqSchemaserializationResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.schemaserialization.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除特定的Schema
 * Summary: 删除特定的Schema
 */
func (client *Client) DeleteSofamqSchema(request *DeleteSofamqSchemaRequest) (_result *DeleteSofamqSchemaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSofamqSchemaResponse{}
	_body, _err := client.DeleteSofamqSchemaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除特定的Schema
 * Summary: 删除特定的Schema
 */
func (client *Client) DeleteSofamqSchemaEx(request *DeleteSofamqSchemaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSofamqSchemaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSofamqSchemaResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.schema.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: Connector工单查询
 * Summary: Connector工单查询
 */
func (client *Client) QuerySofamqConnectorprocess(request *QuerySofamqConnectorprocessRequest) (_result *QuerySofamqConnectorprocessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqConnectorprocessResponse{}
	_body, _err := client.QuerySofamqConnectorprocessEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: Connector工单查询
 * Summary: Connector工单查询
 */
func (client *Client) QuerySofamqConnectorprocessEx(request *QuerySofamqConnectorprocessRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqConnectorprocessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqConnectorprocessResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectorprocess.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: Connector任务撤回审批
 * Summary: Connector任务撤回审批
 */
func (client *Client) CancelSofamqConnectorprocess(request *CancelSofamqConnectorprocessRequest) (_result *CancelSofamqConnectorprocessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelSofamqConnectorprocessResponse{}
	_body, _err := client.CancelSofamqConnectorprocessEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: Connector任务撤回审批
 * Summary: Connector任务撤回审批
 */
func (client *Client) CancelSofamqConnectorprocessEx(request *CancelSofamqConnectorprocessRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelSofamqConnectorprocessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelSofamqConnectorprocessResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectorprocess.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: Connector重新提交工单
 * Summary: Connector重新提交工单
 */
func (client *Client) ResumeSofamqConnectorprocess(request *ResumeSofamqConnectorprocessRequest) (_result *ResumeSofamqConnectorprocessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ResumeSofamqConnectorprocessResponse{}
	_body, _err := client.ResumeSofamqConnectorprocessEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: Connector重新提交工单
 * Summary: Connector重新提交工单
 */
func (client *Client) ResumeSofamqConnectorprocessEx(request *ResumeSofamqConnectorprocessRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ResumeSofamqConnectorprocessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ResumeSofamqConnectorprocessResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectorprocess.resume"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 校验一个connector的操作是否合法
 * Summary: 校验一个connector的操作是否合法
 */
func (client *Client) VerifySofamqConnectoroperation(request *VerifySofamqConnectoroperationRequest) (_result *VerifySofamqConnectoroperationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &VerifySofamqConnectoroperationResponse{}
	_body, _err := client.VerifySofamqConnectoroperationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 校验一个connector的操作是否合法
 * Summary: 校验一个connector的操作是否合法
 */
func (client *Client) VerifySofamqConnectoroperationEx(request *VerifySofamqConnectoroperationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *VerifySofamqConnectoroperationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &VerifySofamqConnectoroperationResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectoroperation.verify"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查看操作审计
 * Summary: 查看操作审计
 */
func (client *Client) ListSofamqAuditor(request *ListSofamqAuditorRequest) (_result *ListSofamqAuditorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSofamqAuditorResponse{}
	_body, _err := client.ListSofamqAuditorEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查看操作审计
 * Summary: 查看操作审计
 */
func (client *Client) ListSofamqAuditorEx(request *ListSofamqAuditorRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSofamqAuditorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSofamqAuditorResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.auditor.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: connector任务对应的应用名称查询
 * Summary: connector任务对应的应用名称查询
 */
func (client *Client) QuerySofamqConnectorjobapp(request *QuerySofamqConnectorjobappRequest) (_result *QuerySofamqConnectorjobappResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqConnectorjobappResponse{}
	_body, _err := client.QuerySofamqConnectorjobappEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: connector任务对应的应用名称查询
 * Summary: connector任务对应的应用名称查询
 */
func (client *Client) QuerySofamqConnectorjobappEx(request *QuerySofamqConnectorjobappRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqConnectorjobappResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqConnectorjobappResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectorjobapp.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 取消Connector运行实例
 * Summary: 取消Connector运行实例
 */
func (client *Client) CancelSofamqConnectorplan(request *CancelSofamqConnectorplanRequest) (_result *CancelSofamqConnectorplanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelSofamqConnectorplanResponse{}
	_body, _err := client.CancelSofamqConnectorplanEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 取消Connector运行实例
 * Summary: 取消Connector运行实例
 */
func (client *Client) CancelSofamqConnectorplanEx(request *CancelSofamqConnectorplanRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelSofamqConnectorplanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelSofamqConnectorplanResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectorplan.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重置任务实例位点
 * Summary: 重置任务实例位点
 */
func (client *Client) SetSofamqConnectorplancheckpoint(request *SetSofamqConnectorplancheckpointRequest) (_result *SetSofamqConnectorplancheckpointResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetSofamqConnectorplancheckpointResponse{}
	_body, _err := client.SetSofamqConnectorplancheckpointEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重置任务实例位点
 * Summary: 重置任务实例位点
 */
func (client *Client) SetSofamqConnectorplancheckpointEx(request *SetSofamqConnectorplancheckpointRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetSofamqConnectorplancheckpointResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetSofamqConnectorplancheckpointResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectorplancheckpoint.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 活跃的conenctor实例【常驻任务】
 * Summary: 活跃的conenctor实例
 */
func (client *Client) QuerySofamqConnectorplansingleton(request *QuerySofamqConnectorplansingletonRequest) (_result *QuerySofamqConnectorplansingletonResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqConnectorplansingletonResponse{}
	_body, _err := client.QuerySofamqConnectorplansingletonEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 活跃的conenctor实例【常驻任务】
 * Summary: 活跃的conenctor实例
 */
func (client *Client) QuerySofamqConnectorplansingletonEx(request *QuerySofamqConnectorplansingletonRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqConnectorplansingletonResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqConnectorplansingletonResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectorplansingleton.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取延迟时间
 * Summary: 获取延迟时间
 */
func (client *Client) QuerySofamqConnectorjobdelay(request *QuerySofamqConnectorjobdelayRequest) (_result *QuerySofamqConnectorjobdelayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqConnectorjobdelayResponse{}
	_body, _err := client.QuerySofamqConnectorjobdelayEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取延迟时间
 * Summary: 获取延迟时间
 */
func (client *Client) QuerySofamqConnectorjobdelayEx(request *QuerySofamqConnectorjobdelayRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqConnectorjobdelayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqConnectorjobdelayResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectorjobdelay.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 常驻任务分区信息详情
 * Summary: 分区状态详情列名
 */
func (client *Client) QuerySofamqConnectorjobpartitionstatuscolumn(request *QuerySofamqConnectorjobpartitionstatuscolumnRequest) (_result *QuerySofamqConnectorjobpartitionstatuscolumnResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqConnectorjobpartitionstatuscolumnResponse{}
	_body, _err := client.QuerySofamqConnectorjobpartitionstatuscolumnEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 常驻任务分区信息详情
 * Summary: 分区状态详情列名
 */
func (client *Client) QuerySofamqConnectorjobpartitionstatuscolumnEx(request *QuerySofamqConnectorjobpartitionstatuscolumnRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqConnectorjobpartitionstatuscolumnResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqConnectorjobpartitionstatuscolumnResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectorjobpartitionstatuscolumn.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 分区状态分页查询
 * Summary: 分区状态分页查询
 */
func (client *Client) QuerySofamqConnectorjobpartitionstatus(request *QuerySofamqConnectorjobpartitionstatusRequest) (_result *QuerySofamqConnectorjobpartitionstatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqConnectorjobpartitionstatusResponse{}
	_body, _err := client.QuerySofamqConnectorjobpartitionstatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 分区状态分页查询
 * Summary: 分区状态分页查询
 */
func (client *Client) QuerySofamqConnectorjobpartitionstatusEx(request *QuerySofamqConnectorjobpartitionstatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqConnectorjobpartitionstatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqConnectorjobpartitionstatusResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectorjobpartitionstatus.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 手动触发UI
 * Summary: 手动触发UI
 */
func (client *Client) QuerySofamqConnectortriggerconfigs(request *QuerySofamqConnectortriggerconfigsRequest) (_result *QuerySofamqConnectortriggerconfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqConnectortriggerconfigsResponse{}
	_body, _err := client.QuerySofamqConnectortriggerconfigsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 手动触发UI
 * Summary: 手动触发UI
 */
func (client *Client) QuerySofamqConnectortriggerconfigsEx(request *QuerySofamqConnectortriggerconfigsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqConnectortriggerconfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqConnectortriggerconfigsResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.connectortriggerconfigs.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 清除消费进度
 * Summary: 清除消费进度
 */
func (client *Client) DeleteSofamqOffset(request *DeleteSofamqOffsetRequest) (_result *DeleteSofamqOffsetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSofamqOffsetResponse{}
	_body, _err := client.DeleteSofamqOffsetEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 清除消费进度
 * Summary: 清除消费进度
 */
func (client *Client) DeleteSofamqOffsetEx(request *DeleteSofamqOffsetRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSofamqOffsetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSofamqOffsetResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.offset.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户端查询消费进度
 * Summary: 用户端查询消费进度
 */
func (client *Client) QuerySofamqConsumption(request *QuerySofamqConsumptionRequest) (_result *QuerySofamqConsumptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySofamqConsumptionResponse{}
	_body, _err := client.QuerySofamqConsumptionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户端查询消费进度
 * Summary: 用户端查询消费进度
 */
func (client *Client) QuerySofamqConsumptionEx(request *QuerySofamqConsumptionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySofamqConsumptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySofamqConsumptionResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.sofamq.consumption.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询用户端topic的queue信息
 * Summary: 查询用户端topic的queue信息
 */
func (client *Client) QueryUserTopicqueue(request *QueryUserTopicqueueRequest) (_result *QueryUserTopicqueueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryUserTopicqueueResponse{}
	_body, _err := client.QueryUserTopicqueueEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询用户端topic的queue信息
 * Summary: 查询用户端topic的queue信息
 */
func (client *Client) QueryUserTopicqueueEx(request *QueryUserTopicqueueRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryUserTopicqueueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryUserTopicqueueResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.user.topicqueue.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: update next delivery time
 * Summary: update delivery time
 */
func (client *Client) UpdateMessageNextdeliverytime(request *UpdateMessageNextdeliverytimeRequest) (_result *UpdateMessageNextdeliverytimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateMessageNextdeliverytimeResponse{}
	_body, _err := client.UpdateMessageNextdeliverytimeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: update next delivery time
 * Summary: update delivery time
 */
func (client *Client) UpdateMessageNextdeliverytimeEx(request *UpdateMessageNextdeliverytimeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateMessageNextdeliverytimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateMessageNextdeliverytimeResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.message.nextdeliverytime.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 统计未投递消息数量
 * Summary: 统计未投递消息数量
 */
func (client *Client) CountMessageUndelivery(request *CountMessageUndeliveryRequest) (_result *CountMessageUndeliveryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CountMessageUndeliveryResponse{}
	_body, _err := client.CountMessageUndeliveryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 统计未投递消息数量
 * Summary: 统计未投递消息数量
 */
func (client *Client) CountMessageUndeliveryEx(request *CountMessageUndeliveryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CountMessageUndeliveryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CountMessageUndeliveryResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.message.undelivery.count"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 加载任务SLO配置页面
 * Summary: 任务SLO配置
 */
func (client *Client) LoadConnectorjobSloview(request *LoadConnectorjobSloviewRequest) (_result *LoadConnectorjobSloviewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &LoadConnectorjobSloviewResponse{}
	_body, _err := client.LoadConnectorjobSloviewEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 加载任务SLO配置页面
 * Summary: 任务SLO配置
 */
func (client *Client) LoadConnectorjobSloviewEx(request *LoadConnectorjobSloviewRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *LoadConnectorjobSloviewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &LoadConnectorjobSloviewResponse{}
	_body, _err := client.DoRequest(tea.String("2.0"), tea.String("sofa.mq.connectorjob.sloview.load"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}
