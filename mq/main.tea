import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '3.8.22',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// schema元数据对象
model SchemaMetadataDO {
  // app名称
  app: string(name='app', example='appName'),
  // 兼容性
  compatibility: string(name='compatibility', example='ALWAYS_COMPATIBLE'),
  // 坐标依赖
  coordinate: string(name='coordinate', example='guava'),
  // 描述
  description: string(name='description', example='helloworld'),
  // 名称
  name: string(name='name', example='TP_DS_TEST'),
  // 命名空间
  namespace: string(name='namespace', example='default'),
  // 操作人
  operator: string(name='operator', example='dongshi'),
  // 状态
  state: string(name='state', example='DRAFT'),
  // 同步站点
  syncSites: string(name='sync_sites', example='alibaba'),
  // 租户
  tenant: string(name='tenant', example='alipay'),
  // 创建时间
  gmtCreate: long(name='gmt_create', example='1570966857000'),
  // 修改时间
  gmtModified: long(name='gmt_modified', example='1570966857000 '),
  // Schema指定的序列化方式
  serialization: string(name='serialization', example='AVRO'),
}

// 切换动作
model SwitchoverAction {
  // 目标单元
  destCell?: string(name='dest_cell', example='GZ00B'),
  // 来源单元
  sourceCell?: string(name='source_cell', example='GZ00A'),
}

// SofaMQ 资源标签
model ResourceLabelsDTO {
  // 实例 ID（命名空间）
  instanceId: string(name='instance_id', example='000001'),
  // 资源类型：TOPIC、GROUP
  resourceType: string(name='resource_type', example='GROUP'),
  // 资源名字
  resourceName: string(name='resource_name', example='GID_XXX'),
  // 标签
  labels: [ string ](name='labels', example='["labelkey:labelvalue"]'),
}

// metedata分页对象
model SchemaMetadataPageDO {
  // Metadata列表内容
  content: [ SchemaMetadataDO ](name='content', example=''),
  // 页号
  pageNum: long(name='page_num', example='1'),
  // 页大小
  pageSize: long(name='page_size', example='10'),
  // 总个数
  total: long(name='total', example='1001'),
}

// 客户端消费记录的明细列表
model SubClientInfoDTO {
  // 消费客户端的客户端地址
  clientHost: string(name='client_host', example='30.5.**.**'),
  // 本次消费耗时，单位毫秒
  costTime: long(name='cost_time', example='43'),
  // 本次消费的投递轮次
  reconsumeTimes: long(name='reconsume_times', example='1'),
  // 消费状态。取值说明如下：
  // 
  // CONSUME_FAILED：消费失败
  // CONSUME_SUCCESS：消费成功
  // CONSUME_NOT_RETURN：消费未返回结果
  // SEND_UNKNOWN：事务消息未提交
  // SEND_DELAY：定时(延时)消息定时中
  status: string(name='status', example='CONSUME_SUCCESS'),
  // 该客户端所属的 Group ID
  subGroupName: string(name='sub_group_name', example='GID_test'),
  // 消费开始时间戳
  subTime: long(name='sub_time', example='1570851590511'),
}

// UIComponent的内容
model ComponentContent {
  // 文本内容
  content: string(name='content', example='请检查是否存在拼写错误'),
  // 超链接
  url?: string(name='url', example='http://www.yueque.com'),
  // 是否粗体
  bold: boolean(name='bold', example='true, false'),
}

// 列值详情
model ColumnValue {
  // 名称
  name: string(name='name', example='consume_offset'),
  // 值
  value: string(name='value', example='100'),
}

// 前端控件中的选择框中每个选项，参见 UIControlModel
model UIOptionModel {
  // 选项展示的中文描述
  display: string(name='display', example='ODPS数据源'),
  // 选项的枚举值
  value: string(name='value', example='ODPS'),
}

// Jstack 堆栈信息
model ThreadTrackDTO {
  // 线程名称
  thread: string(name='thread', example='ConsumeMessageThread_0'),
  // Jstack 堆栈信息字符串
  trackList: [ string ](name='track_list', example=''),
}

// 订阅关系集合
model SubscriptionDTO {
  // 订阅该 Topic 的子类别 Tag 表达式
  subString: string(name='sub_string', example='*'),
  //  订阅关系版本号，为自增 Long 型
  subVersion: long(name='sub_version', example='1570701364301'),
  // 订阅的 Tag 集合
  tagsSet: [ string ](name='tags_set', example='*'),
  // 订阅的 Topic 名称
  topic: string(name='topic', example='test-mq_topic'),
}

// 列表元素
model ItemComponent {
  // 内容
  contents: [ ComponentContent ](name='contents', example=''),
}

// 消息属性列表
model MessagePropertyDTO {
  // Key 名
  name: string(name='name', example='TAGS'),
  // 值
  value: string(name='value', example='TagA'),
}

// 实时状态统计
model ConsumerRunningDataDTO {
  // 堆积量
  diff: long(name='diff', example='100'),
  // 每小时内消费失败的消息数统计
  failedCountPerHour: long(name='failed_count_per_hour', example='0'),
  // 消费消息失败的 TPS 统计
  failedTps: string(name='failed_tps', example='0.1'),
  // 订阅方的 Group ID
  groupId: string(name='group_id', example='000'),
  // 消费消息成功的 TPS 统计
  okTps: string(name='ok_tps', example='0.1'),
  // 消费 RT 时间，单位 ms
  rt: string(name='rt', example='0.1'),
  // 订阅的 Topic 名称
  topic: string(name='topic', example='test-mq_topic'),
}

// 消息的消费轨迹列表
model SubMapDTO {
  // cell name
  cell?: string(name='cell', example='RZ00A'),
  // 该 Group ID 客户端消费记录的明细列表
  // 
  // 
  clientList: [ SubClientInfoDTO ](name='client_list', example=''),
  // 该 Group ID 消费失败次数统计
  failCount: long(name='fail_count', example='0'),
  // 消费方 Group ID
  subGroupName: string(name='sub_group_name', example='GID_test'),
  // 该 Group ID 消费成功次数统计
  successCount: long(name='success_count', example='1'),
}

// instance
model InstanceDTO {
  // 集群名
  cluster: string(name='cluster', example='SINGLE'),
  // 创建时间
  gmtCreate: long(name='gmt_create', example=''),
  // 修改时间
  gmtModified: long(name='gmt_modified', example=''),
  // 实例ID
  instanceId: string(name='instance_id', example='000001'),
  // 实例状态。取值说明如下： 0、部署中 1、已欠费
  instanceStatus: long(name='instance_status', example='0'),
  // 租户id
  tenantId: string(name='tenant_id', example='3123123'),
  // 用户id
  userId: string(name='user_id', example='32132132'),
  // workspace名
  workspaceName: string(name='workspace_name', example='test'),
  // 数据库id
  id: long(name='id', example='1'),
}

// SofamqMessageGetByMsgId和SofamqMessageGetByKey接口返回Data信息
model MessageGetDTO {
  // 消息体
  body: string(name='body', example='SGVsbG8gTVEg5raT7oWf5p6D5ai05ayt55iv'),
  // 消息体 CRC 校验值
  bodyCrc: long(name='body_crc', example='914112295'),
  // 生成该消息的客户端实例
  bornHost: string(name='born_host', example='42.120.**.**:64646'),
  //  生成时间戳
  bornTimestamp: long(name='born_timestamp', example='1570761026630'),
  //  实例 ID
  instanceId: string(name='instance_id', example='MQ_INST_111111111111_DOxxxxxx'),
  // 消息 ID，即 Message ID
  msgId: string(name='msg_id', example='1E0578FE110F18B4AAC235C0C8460BA2'),
  // 消息属性列表
  propertyList: [ MessagePropertyDTO ](name='property_list', example=''),
  //  消息重试消费的次数
  reconsumeTimes: long(name='reconsume_times', example='1'),
  // 存储该消息的服务器实例
  storeHost: string(name='store_host', example='11.220.***.***:10911'),
  // 消息大小
  storeSize: long(name='store_size', example='407'),
  // 被服务端存储的时间戳
  storeTimestamp: long(name='store_timestamp', example='1570761026708'),
  //  消息的 Topic
  topic: string(name='topic', example='test-mq_topic'),
  // 消息的SchemaID
  schemaId: string(name='schema_id', example='7071278368768762234'),
}

// 该查询任务的匹配轨迹列表
model TraceMapDTO {
  // 消息发送方的客户端地址
  bornHost: string(name='born_host', example='30.5.**.**'),
  // 生产端的cell name
  cell?: string(name='cell', example='RZ00A'),
  // 发送耗时，单位毫秒
  costTime: long(name='cost_time', example='24'),
  // 消息的 ID，即 Message ID
  msgId: string(name='msg_id', example='0BC1F01800002A9F000000531246****'),
  //  消息的 Key ，即 Message Key
  msgKey: string(name='msg_key', example='ORDERID_100'),
  // 发送方客户端配置的 Group ID
  pubGroupName: string(name='pub_group_name', example='GID_test'),
  // 消息发送时间
  pubTime: long(name='pub_time', example='1570850870478'),
  // 发送状态。取值说明如下：
  // 
  // SEND_SUCCESS：发送成功
  // SEND_FAILED：发送失败
  // SEND_ROLLBACK：事务消息回滚
  // SEND_UNKNOWN：事务消息未提交
  // SEND_DELAY：定时(延时)消息定时中
  status: string(name='status', example='SEND_SUCCESS'),
  // 消息的消费轨迹列表
  subList: [ SubMapDTO ](name='sub_list', example=''),
  // 消息的 Tag，即 Message Tag
  tag: string(name='tag', example='TagA'),
  // 消息的 Topic
  topic: string(name='topic', example='test'),
}

// TracePageDTO内每行数据
model TraceDTO {
  // 查询的 Cell
  cell?: string(name='cell', example='RZ001'),
  // 创建时间
  gmtCreate: long(name='gmt_create', example=''),
  // 修改时间
  gmtModified: long(name='gmt_modified', example=''),
  // 实例 ID
  instanceId: string(name='instance_id', example='SOFAMQ_INSTANCE_000001'),
  // 消息查询所用的 Message ID
  msgId?: string(name='msg_id', example='1E05791C117818B4AAC23B1BB0CE****'),
  // 消息查询所用的 Message Key
  msgKey?: string(name='msg_key', example='ORDERID_100'),
  // 查询 ID
  queryId: string(name='query_id', example='272967562652883649157096685****'),
  // 状态
  status: string(name='status', example='QUERYING'),
  // 查询的 Topic
  topic: string(name='topic', example='TP_xxx'),
}

// connector事件订阅配置
model EventSubConfig {
  // 配置是否开启
  enabled: boolean(name='enabled', example='true, false'),
  // 事件类型数组
  eventTypes: [ string ](name='event_types', example='EventA,EventB'),
  // 事件触发通知类型
  triggerType: string(name='trigger_type', example='DingTalk'),
  // 钉钉通知的webhook
  webhook?: string(name='webhook', example='http://ssssxxxx'),
  // http 连接
  httpUrl?: string(name='http_url', example='http://xxx'),
  // topic
  topic?: string(name='topic', example='TP_Test'),
  // tag
  tag?: string(name='tag', example='tag'),
}

// 任务执行记录详情
model TaskRecordDTO {
  // 结束时间
  // 
  // 
  end?: string(name='end', example='2018-10-10T10:10:00'),
  // 任务分区名
  name: string(name='name', example='EC_UPDATE_RQGJE'),
  // 开始时间
  // 
  // 
  start: string(name='start', example='2018-10-10T10:10:00'),
  // 耗时 s
  // 
  // 
  time?: string(name='time', example='60'),
  // 任务进度
  // 
  // 
  progress: string(name='progress', example='60'),
  // 执行成功，执行失败，执行中
  type: string(name='type', example='执行成功'),
}

// 四元组，包括 key，value, display，visible
model UIKeyVauleTemplate {
  // 中文，描述这个UI元素的key
  display: string(name='display', example='Topic展示'),
  // 对应ui元素的key
  key: string(name='key', example='topic'),
  // 对应UI元素的值
  value: string(name='value', example='TP_TEST'),
  // 该配置是否对 用户 可见。
  visible: boolean(name='visible', example='true, false'),
}

// router
model RouterConfigDO {
  // 消费端 Group
  consumerId: string(name='consumer_id', example='id'),
  // 消费起始位点。取值范围：0：最小位点；1：最大位点；2：时间戳。
  consumeFromType: long(name='consume_from_type', example=''),
  // 消费起始位点时间戳，时间戳的值，单位是秒
  consumeFromValue: long(name='consume_from_value', example=''),
  // 消费终止位点。取值范围：0：最小位点；1：最大位点；2：时间戳。
  consumeToType: long(name='consume_to_type', example=''),
  // 消费终止位点时间戳，时间戳的值，单位是秒
  consumeToValue: long(name='consume_to_value', example=''),
  // 延迟时间
  delayTime?: string(name='delay_time', example='10000'),
  // 描述信息
  description?: string(name='description', example='desc'),
  // 目标单元
  destinationCell: string(name='destination_cell', example='dest'),
  // 目标实例 ID
  destinationInstanceId: string(name='destination_instance_id', example='dest'),
  // 目标 Topic
  destinationTopic: string(name='destination_topic', example='dest'),
  // 容灾标识
  disaster: boolean(name='disaster', example='true'),
  // 容灾机房
  disasterRecoveryDatacenter: string(name='disaster_recovery_datacenter', example='default'),
  // 创建时间
  gmtCreate: string(name='gmt_create', example='gmt_create'),
  // 修改时间
  gmtModified: string(name='gmt_modified', example='gmt_modified'),
  // 路由任务 ID
  id: long(name='id', example=''),
  // 源单元
  sourceCell: string(name='source_cell', example='cell'),
  // 源实例 ID
  sourceInstanceId: string(name='source_instance_id', example='src'),
  // 源 Topic
  sourceTopic: string(name='source_topic', example='src'),
  // 过滤 Tag
  tag: string(name='tag', example='tag'),
  // 任务状态。取值说明：0：初始化；1：工作中；2：停止。
  taskStatus: long(name='task_status', example='status'),
  // 任务类型。取值范围： 0：LDC 复制；1：非 LDC；2...
  taskType: long(name='task_type', example=''),
}

// 订阅者topic信息
model SubscriptionTopicDTO {
  // 是否在线
  online: boolean(name='online', example='true'),
  // 订阅匹配字符串
  subString: string(name='sub_string', example='*'),
  // Topic 名称
  topic: string(name='topic', example='test-mq_topic'),
}

// 该集群在线客户端详细信息，包含 Jstack、消费 RT 时间等信息
model ConsumerConnectionInfoDTO {
  // 消费实例的 ID
  clientId: string(name='client_id', example='30.5.**.**@25560#-1999745829#-1737591554#458773089270275'),
  // 连接信息
  connection: string(name='connection', example='**'),
  // PUSH/PULL
  consumeType: string(name='consume_type', example='PUSH'),
  // Jstack 堆栈信息
  jstack: [ ThreadTrackDTO ](name='jstack', example=''),
  // 客户端语言
  language: string(name='language', example='JAVA'),
  // 最后更新时间
  lastTimestamp: long(name='last_timestamp', example='1570701368114 '),
  // 消费模型，取值说明如下：CLUSTERING：集群消费模式；BROADCASTING：广播消费模式。
  messageModel: string(name='message_model', example='CLUSTERING '),
  // 实时状态统计
  runningDataList: [ ConsumerRunningDataDTO ](name='running_data_list', example=''),
  // 开始时间
  startTimestamp: long(name='start_timestamp', example='1570701361528'),
  // 订阅关系集合
  subscriptionSet: [ SubscriptionDTO ](name='subscription_set', example=''),
  // 消费线程数
  threadCount: long(name='thread_count', example='20'),
  //  客户端版本号
  version: string(name='version', example='V4_3_6'),
}

// cell
model CellDO {
  // cell
  cell: string(name='cell', example='cell'),
  // cell type
  cellType?: string(name='cell_type', example='cell type'),
  // default
  datacenter?: string(name='datacenter', example='default'),
  // endpoint
  endpoint?: string(name='endpoint', example='endpoint'),
  // endpoint type
  endpointType?: string(name='endpoint_type', example='endpoint type'),
  // gmt_create
  gmtCreate: string(name='gmt_create', example='gmt_create'),
  // gmt_modified
  gmtModified: string(name='gmt_modified', example='gmt_modified'),
  // id
  id: long(name='id', example=''),
  // instance_id
  instanceId?: string(name='instance_id', example='instance_id'),
  // room
  room?: string(name='room', example='room'),
}

// sofa mq
model TopicDTO {
  // 集群名称
  cluster?: string(name='cluster', example='single'),
  // 创建时间
  gmtCreate: long(name='gmt_create', example='1570966857000'),
  // 修改时间
  gmtModified: long(name='gmt_modified', example='1570966857000'),
  // 数据库 ID
  id: long(name='id', example='1'),
  // 实例 ID
  instanceId: string(name='instance_id', example='000001'),
  // 消息类型。取值说明如下：
  // 
  // 0：普通消息
  // 1：分区顺序消息
  // 2：全局顺序消息
  // 4：事务消息
  // 5：定时/延时消息
  messageType: long(name='message_type', example='0:顺序消息'),
  // 创建人
  operator?: string(name='operator', example='alipay'),
  // 设置该 Topic 的读写模式。取值说明如下：
  // 
  // 6：同时支持读写
  // 4：禁写
  // 2：禁读
  perm: long(name='perm', example='6'),
  // 读分区数
  readQueueNum?: long(name='read_queue_num', example='8'),
  // Topic 备注信息
  remark: string(name='remark', example='desc'),
  // Topic 名称
  topic: string(name='topic', example='TP_TEST'),
  // 写分区数
  writeQueueNum?: long(name='write_queue_num', example='8'),
  // 生效范围
  scope?: string(name='scope', example='{"envs":["PREPUB"]}'),
  // 版本号
  version?: long(name='version', example='1'),
  // 删除标志
  deleteMark?: string(name='delete_mark', example='DEL'),
  // true标识该topic带有schema，否则不带schema
  schemaMark?: boolean(name='schema_mark', example='true'),
  // Topic对应Schema配置的序列化方式
  schemaSerialization?: string(name='schema_serialization', example='AVRO'),
  // Topic对应的Schema的兼容性策略
  schemaCompatibility?: string(name='schema_compatibility', example='FULL'),
  // Topic 所属的应用名称，要求 app name 在 zappinfo 上可查
  owner?: string(name='owner', example='sofamqbroker'),
}

// msgtype
model MsgTypeDO {
  // desc
  desc?: string(name='desc', example='desc'),
  // eventcode
  eventcode: string(name='eventcode', example='eventcode'),
  // gmt_create
  gmtCreate?: string(name='gmt_create', example='gmt_create'),
  // gmt_modified
  gmtModified?: string(name='gmt_modified', example='gmt_modified'),
  // instance_id
  instanceId: string(name='instance_id', example='instance_id'),
  // topic
  topic: string(name='topic', example='topic'),
  // id
  id: long(name='id', example=''),
}

// 前端UI展示的模型
model UIControlModel {
  // 展示给用户查看的描述。
  display: string(name='display', example='topic名称'),
  // 提示信息，参照Tooltip
  hint?: string(name='hint', example='cron表达式形如 * * * * * * ？'),
  // 控件名称，也是控件绑定的数据 key
  name: string(name='name', example='tableName'),
  // 如果本控件是 select 或者 radio 选择框类型，本数组是 所有 选项的具体信息。
  options?: [ UIOptionModel ](name='options', example=''),
  // input控件独有字段，代表输入框的place holder
  placeHolder?: string(name='place_holder', example='请输入'),
  // 该控件的value是否是必须的
  required: boolean(name='required', example='true, false'),
  // 本控件的值必须满足的规则，例如input，那么可能输入的文本必须满足全英文等；以正则表达式的形式。
  rule?: string(name='rule', example='^[A-Za-z0-9]+$'),
  // 当 用户输入的 值与 rule不符合时，提醒用户出错的备注。
  ruleRemark?: string(name='rule_remark', example='填写的数据必须是英文和数字'),
  // 控件的类型；支持 Select、Radio、Input、DatePicking
  type: string(name='type', example='select'),
  // 本控件是否未联动控件，联动控件是否展示 与 union_control和union_value 相关，当联动的父控件union_control的值为union_value时，本控件才可见。
  union: boolean(name='union', example='true, false'),
  // 联动的控件名称，即name
  unionControl?: string(name='union_control', example='topicConfig'),
  // 当联动空间union_control的值是本字段的值时，本联动控件可以展示。
  unionValue?: string(name='union_value', example='customized'),
  // 本控件对应的值；如果是input，那么就是输入的值；如果是select/radio，那就是选项的值；如果是option，那么就是自己本身的枚举值。
  value?: string(name='value', example='TP_DEFAULT'),
  // 该控件的值是否可以修改
  immutable: boolean(name='immutable', example='true, false'),
}

// 队列详情信息
model QueueDescDTO {
  // 关联应用名
  assoApp: string(name='asso_app', example='asso_app'),
  // 通道名
  channel: string(name='channel', example='channel'),
  // 队列id
  id: long(name='id', example='1'),
  // 队列管理器ip
  ip: string(name='ip', example='ip'),
  // 队列管理器名
  manager: string(name='manager', example='manager'),
  // 队列名
  name: string(name='name', example='name'),
  // 队列管理器端口
  port: string(name='port', example='port'),
  // 队列类型
  type: string(name='type', example='type'),
}

// 接入点信息
model EndpointsDTO {
  // HTTP 内网接入点
  httpInternalEndpoint: string(name='http_internal_endpoint', example='http://111111111111.mqrest.cn-qingdao-internal.aliyuncs.com'),
  // HTTP 公网接入点
  httpInternetEndpoint: string(name='http_internet_endpoint', example='http://111111111111.mqrest.cn-qingdao-public.aliyuncs.com'),
  // HTTPS 公网接入点
  httpInternetSecureEndpoint: string(name='http_internet_secure_endpoint', example='https://111111111111.mqrest.cn-qingdao-internal.aliyuncs.com'),
  // TCP 协议接入点
  tcpEndpoint: string(name='tcp_endpoint', example='http://MQ_INST_111111111111_DOxxxxxx.mq-internet-access.mq-internet.aliyuncs.com:80'),
}

// 源端 topic
model SourceTopic {
  // 源端 topic
  sourceTopic: string(name='source_topic', example='TP_TEST'),
  // 此源端 topic 所有的 event code列表
  sourceEventCode: [ string ](name='source_event_code', example=''),
}

// 查询结果
model MessageTrackDTO {
  // 订阅该 Topic 的消费者所对应的 Group ID
  consumerGroup: string(name='consumer_group', example='GID_test_group_id'),
  // 需查询的消息所对应的实例 ID
  instanceId: string(name='instance_id', example='MQ_INST_111111111111_DOxxxxxx'),
  // 当前状态。取值说明如下：
  // 
  // CONSUMED：已消费
  // CONSUMED_BUT_FILTERED：已被过滤
  // NOT_CONSUME_YET：暂未消费
  // NOT_ONLINE：客户端不在线
  // UNKNOWN：其他问题
  // 
  trackType: string(name='track_type', example='CONSUMED'),
}

// 一行字段的值
model ColumnsValue {
  // 一行的值
  value: [ ColumnValue ](name='value', example=''),
}

// 告警信息
model WarnDTO {
  // 报警时间段
  alertTime: string(name='alert_time', example='00:00-23:59'),
  // 属性字符串
  attribute: string(name='attribute', example='""'),
  // 消息阻塞时间
  blockTime: long(name='block_time', example='10'),
  // 联系人列表
  contacts: string(name='contacts', example='[["DingTalk", "机器人令牌", "组名"], ["DingTalk", "机器人令牌2", "组名2"]]'),
  // 延迟时间
  delayTime: long(name='delay_time', example='5'),
  // 报警频率，单位分钟
  frequency: long(name='frequency', example='10'),
  // 创建时间
  gmtCreate: long(name='gmt_create', example='1570701259403'),
  // 修改时间
  gmtModified: long(name='gmt_modified', example='1570701259403'),
  // 消费组 ID
  groupId: string(name='group_id', example='GID_TEST'),
  // 报警 ID
  id: long(name='id', example='1'),
  // 实例 ID
  instanceId: string(name='instance_id', example='SOFAMQ_INSTANCE_000001'),
  // 操作者
  operator: string(name='operator', example='alipay'),
  // 阈值
  threshold: long(name='threshold', example='3000'),
  // 报警的 Topic
  topic: string(name='topic', example='TP_TEST'),
  // 报警级别
  warnLevel: long(name='warn_level', example='5'),
  // 报警状态
  warnStatus: long(name='warn_status', example='1'),
  // 报警类型
  warnType: long(name='warn_type', example='5'),
}

// config信息
model ConfigDTO {
  // create time
  gmtCreate: long(name='gmt_create', example=''),
  // modify time
  gmtModified: long(name='gmt_modified', example=''),
  // id
  id: long(name='id', example='1'),
  // operator
  operator: string(name='operator', example='alipay'),
  // key
  property: string(name='property', example='key'),
  // 目标名
  targetName: string(name='target_name', example='SINGLE'),
  // cluster type or broker type
  targetType: long(name='target_type', example=''),
  // value
  value: string(name='value', example='value'),
  // 生效范围
  scope: string(name='scope', example='{"envs":["PREPUB"]}'),
  // 版本号
  version: long(name='version', example='1'),
  // 删除标志
  deleteMark: string(name='delete_mark', example='DEL'),
}

// 告警日志
model WarnLogDTO {
  // 单元名称
  cell: string(name='cell', example='RZ00A'),
  // 创建时间
  gmtCreate: long(name='gmt_create', example=''),
  // 修改时间
  gmtModified: long(name='gmt_modified', example=''),
  // Group ID
  groupId: string(name='group_id', example='GID_TEST'),
  // 实例 ID
  instanceId: string(name='instance_id', example='SOFAMQ_INSTANCE_000001'),
  // Topic 名称
  topic: string(name='topic', example='TP_TEST'),
  // 报警 ID
  warnId: long(name='warn_id', example=''),
  // 报警信息
  warnInfo: string(name='warn_info', example='"Alert: 消息积压: 609 大于阈值: 600, 消息延时: 23478710ms 大于阈值: 10ms, "'),
}

// node
model NodeDO {
  // cluster
  cluster?: string(name='cluster', example='default'),
  // default
  dataCenter?: string(name='data_center', example='default'),
  // hostname
  hostname: string(name='hostname', example='1.1.1.1'),
  // node group
  nodeGroup?: string(name='node_group', example='test'),
  // node type
  nodeType?: string(name='node_type', example='type'),
  // node perm
  perm?: string(name='perm', example='6'),
  // rip
  rip?: string(name='rip', example='rip'),
  // room
  room?: string(name='room', example='GZ001'),
  // vip
  vip?: string(name='vip', example='vip'),
  // id
  id: long(name='id', example=''),
  // gmt_create
  gmtCreate: string(name='gmt_create', example='gmt_create'),
  // gmt_modified
  gmtModified: string(name='gmt_modified', example='gmt_modified'),
  // 节点状态 MASTER|SLAVE|OFFLINE
  status: string(name='status', example='MASTER'),
  // 节点所属环境
  env?: string(name='env', example='STABLE'),
  // 节点所在城市
  city?: string(name='city', example='hangzhou'),
}

// 客户端信息
// 
model ClientInfoDTO {
  // 客户端ID
  clientId: string(name='client_id', example='clientID'),
  // 客户端地址
  clientAddr: string(name='client_addr', example='127.0.0.1'),
  // 订阅详情
  subscriptions: [ SubscriptionDTO ](name='subscriptions', example=''),
}

// 订阅者分组信息
model SubscriptionGroupDTO {
  // 消费者所属消费组
  groupId: string(name='group_id', example='GID_test'),
  // 部署模型
  messageModel: string(name='message_model', example='CLUSTERING'),
  // 订阅字符串
  subString: string(name='sub_string', example='*'),
  // group协议类型
  groupType: string(name='group_type', example='http'),
}

// bind
model BindingDO {
  // app_name
  appName: string(name='app_name', example='app_name'),
  // eventcode
  eventcode: string(name='eventcode', example='eventcode'),
  // exchange_type
  exchangeType: string(name='exchange_type', example='exchange_type'),
  // expression
  expression?: string(name='expression', example='expression'),
  // gmt_create
  gmtCreate: string(name='gmt_create', example='gmt_create'),
  // gmt_modified
  gmtModified: string(name='gmt_modified', example='gmt_modified'),
  // group
  group: string(name='group', example='group'),
  // id
  id: long(name='id', example=''),
  // instance_id
  instanceId: string(name='instance_id', example='instance_id'),
  // persistence
  persistence: boolean(name='persistence', example='true, false'),
  // topic
  topic: string(name='topic', example='topic'),
}

// msgbatch
model MsgQueryBatchDO {
  // eventcode
  eventcode: string(name='eventcode', example='eventcode'),
  // gmt_create
  gmtCreate?: string(name='gmt_create', example='gmt_create'),
  // message_id
  messageId: string(name='message_id', example='message_id'),
  // status
  status?: string(name='status', example='status'),
  // subscriber_group_undelivery
  subscriberGroupUndelivery?: string(name='subscriber_group_undelivery', example='subscriber_group_undelivery'),
}

// kv配置
model KVConfigDTO {
  // 创建时间
  gmtCreate: long(name='gmt_create', example=''),
  // 修改时间
  gmtModified: long(name='gmt_modified', example=''),
  // id
  id: long(name='id', example=''),
  // key
  uniformKey: string(name='uniform_key', example='key'),
  // 命名空间
  namespace: string(name='namespace', example='SINGLE'),
  // 操作人
  operator: string(name='operator', example='alipay'),
  // value
  uniformValue: string(name='uniform_value', example='value'),
}

// 连接器任务信息
model ConnectorJobInfo {
  // 任务名称
  name: string(name='name', example='odps_test'),
  // 任务的调度类型
  type: string(name='type', example='cron：0/10 * * * * * ?'),
  // 创建时间
  gmtCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2019-11-22 12:00:00'),
  // 任务描述
  remark?: string(name='remark', example='这是一段任务描述'),
  // 任务状态
  status: string(name='status', example='RUNNING'),
  // 所属应用
  app: string(name='app', example='Connector'),
  // 工单状态
  processStatus: string(name='process_status', example='PENDING'),
  // 系统标签
  sysLabels?: [ string ](name='sys_labels', example='app:paycore'),
  // 应用标签
  userLabels?: [ string ](name='user_labels', example='app:paycore'),
  // 事件订阅是否开启
  eventSubEnabled?: boolean(name='event_sub_enabled', example='true, false'),
}

// 各个 Topic 的消费情况
model DetailInTopicDTO {
  // 延迟时间
  delayTime: long(name='delay_time', example='0'),
  // 最后更新时间
  lastTimestamp: long(name='last_timestamp', example='1570701259403'),
  // Topic 名称
  topic: string(name='topic', example='test-mq_topic'),
  // 该 Topic 消费总堆积数
  totalDiff: long(name='total_diff', example='0'),
}

// 队列路由规则
model QueueRouteRulesDTO {
  // 应用
  app: string(name='app', example='app'),
  // 修改时间
  gmtModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='gmt_modified'),
  // 队列路由规则id
  id: long(name='id', example='1'),
  // 方法
  meth: string(name='meth', example='{ value:_1_, text: _get_ }'),
  // 路由规则名称
  name: string(name='name', example='name'),
  // 队列id
  queueId: long(name='queue_id', example='1'),
  // 状态
  status: long(name='status', example='1'),
  // 分流开关
  switchStatus: long(name='switch_status', example='switch_status'),
  // 路由类型
  type: string(name='type', example='{ value:_1_, text: _按版本路由_ }'),
}

// WhitelistDO
model WhitelistDO {
  // instance_id
  instanceId: string(name='instance_id', example='instance_id'),
  // topic
  topic: string(name='topic', example='topic'),
  // id
  id: long(name='id', example=''),
  // groupid
  groupid: string(name='groupid', example='groupid'),
  // gmt_create
  gmtCreate?: string(name='gmt_create', example='gmt_create'),
  // gmt_modified
  gmtModified?: string(name='gmt_modified', example='gmt_modified'),
}

// schema详情
model SchemaDetailDO {
  // 注释
  comment?: string(name='comment', example='helloworld'),
  // schema内容
  content: string(name='content', example='{"type":"record","name":"User","namespace":"com.alipay.openmeta.common","fields":[{"name":"name","type":"string"},{"name":"age","type":"int"},{"name":"male","type":"boolean"}]}'),
  // 值校验规则
  fieldValidateRule?: string(name='field_validate_rule', example='a.groovy'),
  // 名称
  name: string(name='name', example='TP_DS_TEST'),
  // 命名空间
  namespace?: string(name='namespace', example='default'),
  // 序列化类型
  serialization: string(name='serialization', example='AVRO'),
  // 状态
  state?: string(name='state', example='DRAFT'),
  // 租户
  tenant?: string(name='tenant', example='alipay'),
  // schema类型
  type: string(name='type', example='AVRO'),
  // 唯一ID
  uniqId?: string(name='uniq_id', example='sasasa'),
  // 版本
  version?: long(name='version', example='1'),
  // 操作人
  operator: string(name='operator', example='dongshi'),
  // 创建时间
  gmtCreate?: long(name='gmt_create', example='1570966857000'),
  // 修改时间
  gmtModified?: long(name='gmt_modified', example='1570966857000'),
}

// 前端展示的UI组件
model UIComponent {
  // UI组件类型
  type: string(name='type', example='title'),
  // UI组件中的 内容组成部分，可以由多个Content对象组成
  contents: [ ComponentContent ](name='contents', example=''),
  // 列表内元素组件集合
  listItems?: [ ItemComponent ](name='list_items', example=''),
}

// 采集点信息
model StatsDataDTO {
  // 横轴，毫秒时间戳
  x: long(name='x', example='0'),
  // 纵轴，数据（TPS 或者总量）
  y: string(name='y', example='1570852800000 '),
}

// 限流规则信息
model QueueLimitRulesDTO {
  // 修改时间
  gmtModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='gmt_modified'),
  // 限流规则id
  id: long(name='id', example='1'),
  // 限流算法
  lAlgorithm: string(name='l_algorithm', example='{ value:_1_, text: _令牌桶算法_ }'),
  // 限流后操作
  lOperation: string(name='l_operation', example='{ value:_1_, text: _抛出异常_ }'),
  // 方法
  meth: string(name='meth', example='meth'),
  // 限流规则名称
  name: string(name='name', example='name'),
  // 队列id
  queueId: long(name='queue_id', example='1'),
  // 运行模式
  rMode: string(name='r_mode', example='{ value:_1_, text: _观察模式_ }, { value: _bbb_, text:_拦截模式_}'),
  // 状态
  status: long(name='status', example='1'),
  // 应用名
  app: string(name='app', example='appname'),
}

// 管理员用户信息
model AdminUserDTO {
  // 创建时间
  gmtCreate: long(name='gmt_create', example=''),
  // 修改时间
  gmtModified: long(name='gmt_modified', example=''),
  // 数据库id
  id: long(name='id', example=''),
  // 登录名
  loginName: string(name='login_name', example='login_name'),
  // 昵称
  nickName: string(name='nick_name', example='nick_name'),
  // 真实姓名
  realName: string(name='real_name', example='real_name'),
  // 用户类型
  userType: long(name='user_type', example=''),
  // 操作人
  operator: string(name='operator', example='alipay'),
}

// 队列的消费offset相关信息
model ConsumeQueueOffset {
  // topic
  topic: string(name='topic', example='TP_001'),
  // queue所在broker的名字
  brokerName: string(name='broker_name', example='00001'),
  // queue id
  queueId: long(name='queue_id', example='1'),
  // 消费位点
  brokerOffset: long(name='broker_offset', example=''),
  // 消费端offset
  consumerOffset: long(name='consumer_offset', example=''),
  // 最后时间（时间戳）
  // 
  lastTimestamp: long(name='last_timestamp', example=''),
  // 消费端地址
  clientAddr: string(name='client_addr', example='127.0.0.1'),
  // 消费者客户端id
  // 
  clientId: string(name='client_id', example='client_001'),
  // 消息堆积数
  // 
  accumulate: long(name='accumulate', example=''),
  // queue位点和消费端位点差
  difference: long(name='difference', example=''),
}

// group
model GroupDTO {
  // 集群名
  cluster?: string(name='cluster', example='SINGLE'),
  // 删除标志
  deleteMark?: string(name='delete_mark', example='DEL'),
  // 创建时间
  gmtCreate: long(name='gmt_create', example=''),
  // 修改时间
  gmtModified: long(name='gmt_modified', example=''),
  // Group ID
  groupId: string(name='group_id', example='test_group_id'),
  // 查询的 Group ID 适用的协议。TCP 协议和 HTTP 协议的 Group ID 不可以共用，需要分别创建。取值说明如下：
  // 
  // tcp：表示该 Group ID 仅适用于 TCP 协议的消息收发。
  // http：表示该 Group ID 仅适用于 HTTP 协议的消息收发。
  groupType: string(name='group_type', example='tcp'),
  // 数据库 ID
  id: long(name='id', example='1'),
  // 实例 ID
  instanceId: string(name='instance_id', example='SOFAMQ_INSTANCE_000001'),
  // 操作人
  operator?: string(name='operator', example='alipay'),
  // 读权限
  readEnable?: boolean(name='read_enable', example='true'),
  // Group 备注信息
  remark: string(name='remark', example='test'),
  // 生效范围
  scope?: string(name='scope', example='{"envs":["PREPUB"]}'),
  // 版本号
  version?: long(name='version', example='1'),
  // retry topic读队列数
  retryReadQueueNum?: long(name='retry_read_queue_num', example='8'),
  // retry topic写队列数
  retryWriteQueueNum?: long(name='retry_write_queue_num', example='8'),
  // retry topic读写权限
  retryPerm?: long(name='retry_perm', example='6'),
  // Group 所属的应用名称，要求应用名在 zappinfo 上可查
  owner?: string(name='owner', example='sofamqbroker'),
}

// 该集群当前在线客户端信息
model ConnectionDTO {
  // 该消费实例的地址和端口
  clientAddr: string(name='client_addr', example='30.5.121.**'),
  // 消费实例的 ID
  clientId: string(name='client_id', example='30.5.121.**@25560#-1999745829#-1737591554#458773089270275'),
  // 消费端语言
  language: string(name='language', example='JAVA'),
  // 宿主机 IP 或公网 IP
  remoteIp: string(name='remote_ip', example='42.120.74.**'),
  // 消费端版本
  version: string(name='version', example='V4_3_6_SNAPSHOT'),
}

// 列配置
model ColumnConfig {
  // 别名
  alias?: string(name='alias', example='userId'),
  // 转化类型
  castType?: string(name='cast_type', example='Integer'),
  // 名称
  name: string(name='name', example='uid'),
  // 列类型
  type: string(name='type', example='String'),
  // 当前字段 可转化成的类型选项
  castTypeOptions?: [ string ](name='cast_type_options', example='{ "STRING", "LONG"}'),
}

// 应用页面
model ApplicationDTO {
  // 创建时间
  gmtCreated: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_created', example='2018-10-10T10:10:00Z'),
  // 应用id
  id: long(name='id', example='1'),
  // 应用名
  name: string(name='name', example='app1'),
  // 服务端get队列
  pubGetQueue?: string(name='pub_get_queue', example='queue4'),
  // 服务端put队列
  pubPutQueue?: string(name='pub_put_queue', example='queue3'),
  // 服务端开关
  pubRpcStatus?: long(name='pub_rpc_status', example='1'),
  // 客户端get队列
  subGetQueue?: string(name='sub_get_queue', example='queue2'),
  // 客户端put队列
  subPutQueue?: string(name='sub_put_queue', example='queue1'),
  // rpc分流比例
  subRpcScale?: long(name='sub_rpc_scale', example='50'),
  // 服务类型
  type: string(name='type', example='[{ value:_sub_, text: _客户端_ },{ value:_pub_, text: _服务端_ },{ value:_sub,pub_, text: _客户端 服务端_ }]'),
}

// nodes
model NodePageDO {
  // nodes
  content: [ NodeDO ](name='content', example='nodes'),
  // page
  pageNum: long(name='page_num', example=''),
  // page size
  pageSize: long(name='page_size', example=''),
  // total
  total: long(name='total', example=''),
}

// 执行记录详情
model JobRecordDTO {
  // 结束时间
  end?: string(name='end', example='2018-10-10T10:10:00'),
  // 任务执行id
  id: string(name='id', example='123234-34232-13414'),
  // 执行总进度
  // 
  // 总的进度为100，这里的进度条如何配置需要，前端同学定一下，我来改
  progress: long(name='progress', example='60'),
  // 任务执行状态
  runType: string(name='run_type', example='执行成功'),
  // 开始时间
  start: string(name='start', example='2018-10-10T10:10:00'),
  // 任务执行记录集合
  taskRecords: [ TaskRecordDTO ](name='task_records', example=''),
  // 执行耗时
  time?: long(name='time', example='60'),
  // 触发类型
  triggerType: string(name='trigger_type', example='自动'),
  // 分区信息
  partition: string(name='partition', example='dt=20201021'),
  // 触发上下文
  context?: string(name='context', example='{"sourcePartition":"dt=20220101", "sinkPartition": "xxd"}'),
}

// room
model RoomDO {
  // cluster
  cluster: string(name='cluster', example='cluster'),
  // endpoint
  endpoint?: string(name='endpoint', example='endpoint'),
  // endpoint_type
  endpointType?: string(name='endpoint_type', example='endpoint_type'),
  // region
  region?: string(name='region', example='region'),
  // room
  room: string(name='room', example='room'),
  // id
  id: long(name='id', example=''),
  // gmt_create
  gmtCreate: string(name='gmt_create', example='gmt_create'),
  // gmt_modified
  gmtModified: string(name='gmt_modified', example='gmt_modified'),
}

// 任务实例摘要信息
model InstanceDigest {
  // job instance id
  id: string(name='id', example='000000001'),
  // 分区信息
  partition: string(name='partition', example='dt=xxxx'),
  // 时间
  gmtCreate: string(name='gmt_create', example='2020-11-20-11:20:12'),
  // 任务状态
  state: string(name='state', example='SUCCESSFUL,FAILED,PAUSED,RUNNING'),
}

// 告警日志查询集合
model WarnLogPageDTO {
  // 报警日志信息
  content: [ WarnLogDTO ](name='content', example=''),
  // 页码
  pageNum: long(name='page_num', example='1'),
  // 每页显示条数
  pageSize: long(name='page_size', example='20'),
  // 总条数
  total: long(name='total', example='10'),
}

// 指定 Group ID 的连接信息
model ConsumerGetConnectionDTO {
  // 指定 Group ID 的连接信息
  // 
  // 
  connectionList: [ ConnectionDTO ](name='connection_list', example=''),
}

// 积压数据点
model BacklogMetricItem {
  // 积压消息量
  backlogCnt: long(name='backlog_cnt', example='12121'),
  // 积压数据的时间戳
  timestamp: long(name='timestamp', example='1576597976000'),
}

// 清除消费进度结果对象
model ClearOffsetResultDTO {
  // GroupId
  groupId: string(name='group_id', example='GID_TEST'),
  // Topic 名称
  topic: string(name='topic', example='TP_XXX'),
  // 操作结果
  result: string(name='result', example='SUCCESS'),
}

// 工单详情
model ProcessDTO {
  // 工单名称
  processName: string(name='process_name', example='Source审批'),
  // 状态
  processStatus: string(name='process_status', example='APPENDING'),
  // 工单链接
  processUrl: string(name='process_url', example='http://www.taobao.com'),
}

// cell页面数据
model CellPageDTO {
  // cell数据
  content: [ CellDO ](name='content', example=''),
  // 页号
  pageNum: long(name='page_num', example='1'),
  // 页面大小
  pageSize: long(name='page_size', example='10'),
  // 总量
  total: long(name='total', example='100'),
}

// Api接口信息
model ApiInfoDTO {
  // api详细描述
  description: string(name='description', example='使用本接口根据 Message Key 查询消息的方式属于模糊查询。由于业务方的 Key 可能不唯一，所以查询结果可能为多条。'),
  // api名
  name: string(name='name', example='sofa.mq.sofamq.messagebykey.query'),
  // 负责人
  owner: string(name='owner', example='子欢'),
  // api路径
  path: string(name='path', example='/openapi/mq/openapi/sofamq/message/getByKey'),
  // api简介
  summary: string(name='summary', example=' 通过传入 Key 进行模糊查询'),
  // 开关
  switchOpen: boolean(name='switch_open', example='true, false'),
  // sofamq action 名称
  sofamqAction?: string(name='sofamq_action', example='topic.create'),
  // 是否默认分配给普通用户
  userDefaultAssign?: boolean(name='user_default_assign', example='true, false'),
  // 是否默认分配给 app owner
  ownerDefaultAssign?: boolean(name='owner_default_assign', example='true, false'),
}

// Consumer 的消费堆积情况信息
model ConsumerAccumulateDTO {
  // 该 Group ID 下消费者实例群组接收消息的总 TPS
  consumeTps: string(name='consume_tps', example='10'),
  // 该 Topic 所发消息的最大消费延迟时间
  delayTime: long(name='delay_time', example='10000'),
  // 各个 Topic 具体情况
  detailInTopicList: [ DetailInTopicDTO ](name='detail_in_topic_list', example=''),
  // 该 Topic 中最近一条被消费的信息的生产时间
  lastTimestamp: long(name='last_timestamp', example='1566231000000'),
  // 该 Group ID 下是否有消费者实例在线；只要有一个消费者实例在线，该 Group ID 状态即为在线。取值说明如下：
  // 
  // true：状态为在线
  // false：状态为不在线
  online: boolean(name='online', example='true'),
  // 该 Topic 的消费堆积数量
  totalDiff: long(name='total_diff', example='100'),
}

// 采集数据集合
model TrendTpsDTO {
  // 数据集合
  records: [ StatsDataDTO ](name='records', example=''),
  // Table 的名称
  title: string(name='title', example='MQ_INST_111111111111_DOxxxxxx%test 接收 总量 趋势图'),
  // 时间戳，单位毫秒
  xUnit: string(name='x_unit', example='time'),
  // 纵轴单位
  // 
  yUnit: string(name='y_unit', example='msg'),
}

// ConsumerTimeSpan查询结果
model ConsumerTimeSpanDTO {
  //  当前 Group 消费该 Topic 的最新的时间
  consumeTimestamp: long(name='consume_timestamp', example='1570761026400'),
  // 需查询的消费端 Group ID 所对应的实例 ID
  instanceId: string(name='instance_id', example='MQ_INST_111111111111_DOxxxxxx'),
  // 整个 Topic 目前存储的最早的消息的时间
  maxTimestamp: long(name='max_timestamp', example='1570761026804'),
  //  整个 Topic 目前存储的最新的消息的时间
  minTimestamp: long(name='min_timestamp', example='1570701231122'),
  // 需查询的 Topic 名称
  topic: string(name='topic', example='test-mq_topic'),
}

// 二元组
model Pair {
  // 键值对中的 键
  key: string(name='key', example='topic_cfg_key'),
  // 键值对中的值
  value: string(name='value', example='TP_Test'),
}

// topic
model Topic {
  // creation_time
  creationTime?: string(name='creation_time', example='2018-04-16T00:01:59Z'),
  // desc
  desc?: string(name='desc', example='eventcode'),
  // eventcode
  eventcode?: string(name='eventcode', example='eventcode'),
  // id
  id?: string(name='id', example='123'),
  // instance_id
  instanceId?: string(name='instance_id', example='instance_id'),
  // topic
  topic?: string(name='topic', example='instance_id'),
  // update_time
  updateTime?: string(name='update_time', example='2018-04-16T00:01:59Z'),
}

// Group 统计列表详情
model GroupStatsItem {
  // 每分钟消息大小
  bpm: long(name='bpm', example=''),
  // 死信数量
  dlq: long(name='dlq', example=''),
  // 消费组 Group ID
  groupId: string(name='group_id', example='GID_XXX'),
  // 当前 Group 消息积压的数量
  msgBacklog: long(name='msg_backlog', example='1000'),
  // 当前每分钟 Group ID 拉请求数量
  ppm: long(name='ppm', example='1000'),
  // Topic 名称
  topic: string(name='topic', example='TP_TEST'),
  // 每分钟拉取的消息数量
  tpm: long(name='tpm', example='1000'),
  // 每天拉取的消息数量
  tpd: long(name='tpd', example='100000'),
}

// 队列详情信息以及分页信息
model QueuePageDescDTO {
  // 总页数
  pageCount: long(name='page_count', example='1'),
  // 当前页面
  pageCurrent: long(name='page_current', example='1'),
  // 页面大小
  pageSize: long(name='page_size', example='1'),
  // 队列详情信息
  records: [ QueueDescDTO ](name='records', example=''),
  // 总记录数
  rowCount: long(name='row_count', example='1'),
}

// config page
model ConfigPageDTO {
  // config page
  content: [ ConfigDTO ](name='content', example=''),
  // 页号
  pageNum: long(name='page_num', example=''),
  // 页面大小
  pageSize: long(name='page_size', example=''),
  // 总量
  total: long(name='total', example=''),
}

// dms
model WhitelistPageDO {
  // content
  content: [ WhitelistDO ](name='content', example=''),
  // page_num
  pageNum?: long(name='page_num', example=''),
  // page_size
  pageSize?: long(name='page_size', example=''),
  // total
  total?: long(name='total', example=''),
}

// sofa mq topic page
model TopicPageDTO {
  // Topic 信息
  content: [ TopicDTO ](name='content', example=''),
  // 页码
  pageNum: long(name='page_num', example='1'),
  // 每页显示条数
  pageSize: long(name='page_size', example='10'),
  // 总条数
  total: long(name='total', example='100'),
}

// trace result返回值
model TraceMapResultDTO {
  // 该查询任务的创建时间
  // 
  // 
  createTime: long(name='create_time', example='1570966857000'),
  //  实例 ID
  instanceId: string(name='instance_id', example='MQ_INST_111111111111_DOxxxxxx'),
  // 该查询任务对应的 Message ID
  msgId: string(name='msg_id', example='1E05791C117818B4AAC23B1BB0CE****'),
  // 该查询任务对应的 Message Key
  msgKey: string(name='msg_key', example='keyA'),
  // 查询任务 ID
  queryId: string(name='query_id', example='272967562652883649157096685****'),
  // 该查询任务的结果。取值说明如下：finish：查询完成；working：查询中；removed：任务已删除。
  status: string(name='status', example='finish'),
  // 该查询任务的 Topic
  topic: string(name='topic', example='topic_a'),
  // 该查询任务的匹配轨迹列表
  // 
  traceList: [ TraceMapDTO ](name='trace_list', example=''),
  // 该查询任务的最后更新时间
  updateTime: long(name='update_time', example='1570966857000'),
  //  查询用户 ID
  userId: string(name='user_id', example='27296756265288**** '),
}

// 延迟信息
model DelayInfo {
  // 延迟时间
  name: string(name='name', example='delayTime'),
  // 值
  value: string(name='value', example='1631000629'),
  // 值类型
  valueType: string(name='value_type', example='TIMESTAMP'),
}

// slo配置
model SloSpec {
  // 是否开启
  enable: boolean(name='enable', example='true, false'),
  // 是否是常驻任务
  longRunningTask: boolean(name='long_running_task', example='true, false'),
  // 默认可接受执行时间
  defaultAcceptableExecutionInterval: long(name='default_acceptable_execution_interval', example='10'),
}

// 队列路由域值
model QueueRouteEditionDTO {
  // 版本
  edition: string(name='edition', example='edition'),
  // 路由版本（插入时可不填）
  id: long(name='id', example='1'),
  // 路由规则id（插入时可不填）
  routeId: long(name='route_id', example='1'),
  // 权重
  scale: long(name='scale', example='20'),
}

// 消息同步任务
model MsgdumpTaskDTO {
  // 描述
  remark: string(name='remark', example='描述'),
  // 源 eventcode
  sourceEventCode: string(name='source_event_code', example='EC_TEST'),
  // 源实例 id
  sourceInstanceId: string(name='source_instance_id', example='INST_SOURCE'),
  // 源 topic
  sourceTopic: string(name='source_topic', example='TP_TEST'),
  // 任务状态
  // 0: 初始化中；1: 运行中；2: 停止中；3: 已停止
  status: long(name='status', example='1/2/3/4'),
  // 目标实例 id
  targetInstanceId: string(name='target_instance_id', example='INST_TARGET'),
  // 目标 tag
  targetTag: string(name='target_tag', example='TAG_A'),
  // 目标 topic
  targetTopic: string(name='target_topic', example='TP_TARGET'),
  // 任务 id
  taskId: long(name='task_id', example='12212'),
  // 消息同步目标 cell
  cell: string(name='cell', example='GZ00B'),
}

// 消息同步任务源端实例、topic、eventcode
model MsgdumpSourceInfo {
  // 源 instance id
  sourceInstanceId: string(name='source_instance_id', example='SOFAMQ_DEFAULT_INS'),
  // 源端 topic 列表
  sourceTopics: [ SourceTopic ](name='source_topics', example=''),
}

// sofamq 审计
model AuditorDTO {
  // 操作名
  action: string(name='action', example='topic.create'),
  // 资源名
  resource: string(name='resource', example='/TOPIC/TP_XXX'),
  // 操作详情
  detail: string(name='detail', example='{"requests":[],"result":"success"}'),
  // 操作人
  operator: string(name='operator', example='xxx'),
  // 时间戳
  timestamp: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='timestamp', example='2018-10-10T10:10:00Z'),
}

// SofamqTopicStatus 返回data
model TopicStatusDTO {
  // Topic 的最后更新时间时间戳
  lastTimestamp: long(name='last_timestamp', example=''),
  // 设置该 Topic 的读写模式。取值说明如下：6：同时支持读写；4：禁写；2：禁读。
  perm: long(name='perm', example='6'),
  // 消息总量
  totalCount: long(name='total_count', example=''),
}

// SofamqTopicSubDetail接口返回的data信息
model TopicSubDetailDTO {
  // 最近发送时间
  latestSendTime: long(name='latest_send_time', example=''),
  // SubscriptionData 数组
  subscriptionDataList: [ SubscriptionGroupDTO ](name='subscription_data_list', example=''),
  // Topic 名称
  topic: string(name='topic', example='test'),
}

// 链接信息
model LinkDTO {
  // demo工程
  demoProject: string(name='demo_project', example='https://help.aliyun.com/document_detail/146986.html'),
  // 产品文档
  productDoc: string(name='product_doc', example='https://help.aliyun.com/document_detail/146936.html'),
  // 快速开始文档
  quickStart: string(name='quick_start', example='https://help.aliyun.com/document_detail/147580.html'),
}

// InstanceCreate返回数据
model InstanceCreateDTO {
  // instance id
  instanceId: string(name='instance_id', example='MQ_INST_111111111111_DOxxxxxx'),
  // 实例类型
  instanceType: long(name='instance_type', example='1'),
}

// topic
model Binding {
  // appName
  appName?: string(name='app_name', example='appName'),
  // creation_time
  creationTime?: string(name='creation_time', example='2018-04-16T00:01:59Z'),
  // eventcode
  eventcode?: string(name='eventcode', example='eventcode'),
  // exchangeType
  exchangeType?: string(name='exchange_type', example='exchange_type'),
  // expression
  expression?: string(name='expression', example='expression'),
  // group
  group?: string(name='group', example='group'),
  // id
  id?: string(name='id', example='123'),
  // instance_id
  instanceId?: string(name='instance_id', example='instance_id'),
  // persistence
  persistence?: boolean(name='persistence', example='true'),
  // topic
  topic?: string(name='topic', example='instance_id'),
  // update_time
  updateTime?: string(name='update_time', example='2018-04-16T00:01:59Z'),
}

// string
model StringDataDo {
  // data
  data: string(name='data', example='datad'),
}

// 返回 Data 对象
// 
model GroupSubDetailDTO {
  // Group ID
  groupId: string(name='group_id', example='GID_test_group_id'),
  // 部署模型
  messageModel: string(name='message_model', example='CLUSTERING'),
  // 是否在线
  online: boolean(name='online', example='true'),
  // 订阅信息列表
  subscriptionDataList: [ SubscriptionTopicDTO ](name='subscription_data_list', example=''),
}

// datacenter
model DataCenterDO {
  // cluster
  cluster: string(name='cluster', example='cluster1'),
  // datacenter
  datacenter: string(name='datacenter', example='default'),
  // room
  room: string(name='room', example='gz01'),
  // id
  id: long(name='id', example=''),
  // gmt_create
  gmtCreate: string(name='gmt_create', example='gmt_create'),
  // gmt_modified
  gmtModified: string(name='gmt_modified', example='gmt_modified'),
}

// 连接器任务
model ConnectorJob {
  // cron表达式描述任务的触发详情。
  cron?: string(name='cron', example='* 0/1 11 * * * ？'),
  // sql过滤
  filter?: string(name='filter', example='uid=_01_'),
  // 任务名称
  name: string(name='name', example='odps_Gplus_mq'),
  // 限流值
  rate?: long(minimum=0, name='rate', example='1000'),
  // 描述这个任务的具体详情
  remark?: string(maxLength=128, name='remark', example='这是一段描述'),
  // 去向信息的配置
  sinkConfigs: [ UIKeyVauleTemplate ](name='sink_configs', example='[{"key":"topic", "value":"TP_TEST", "display":"topic展示"}]'),
  // 去向类型
  sinkType: string(name='sink_type', example='SOFAMQ'),
  // 数据源的配置项列表
  sourceConfigs: [ UIKeyVauleTemplate ](name='source_configs', example='[{"key":"table", "value":"odps_xxx_table", "display":"表名称"}]'),
  // 来源类型
  sourceType: string(name='source_type', example='ODPS'),
  // 当任务类型选择为once时，会有本字段，表示具体执行的时间
  time?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='time', example='2018-10-10T10:10:00Z'),
  // 数据转化
  transformation?: [ ColumnConfig ](name='transformation', example='[{"name":"uid","type":"String","alias":"userId","cast_type":"Long"}]'),
  // 任务的调度类型
  type: string(name='type', example='CRON'),
  // 创建时间
  gmtCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 任务所有者
  app?: string(name='app', example='antconnector'),
  // stepflow平台的某个模板的编号
  stepflowTemplateId?: string(name='stepflow_template_id', example='xxx'),
  // 单例模式
  singleton: boolean(name='singleton', example='true, false'),
  // 事件订阅是否开启
  eventSubEnabled?: boolean(name='event_sub_enabled', example='true, false'),
  // 事件订阅的配置集合
  eventSubConfigs?: [ EventSubConfig ](name='event_sub_configs', example=''),
  // 可接受延迟时间
  acceptableExecutionInterval?: long(name='acceptable_execution_interval', example='10000'),
  // 状态
  status?: string(name='status', example='ENABLE、DISABLE'),
  // 工单状态
  processStatus?: string(name='process_status', example='APPROVED'),
  // 是否自动回收实例
  autoRecycleInstance: boolean(name='auto_recycle_instance', example='true, false'),
}

// 错误报告，包含了错误码，排查指南，请求上下文，支持链接等
model ErrorReport {
  // 组件 数组
  components: [ UIComponent ](name='components', example=''),
}

// 分区详情分页结果
model ConnectorJobPartitionStatusPageResult {
  // 页码
  pageNum: long(name='page_num', example=''),
  // 每页数量
  pageSize: long(name='page_size', example=''),
  // 数据总数
  totalSize?: long(name='total_size', example='10'),
  // 分区状态
  content: [ ColumnsValue ](name='content', example=''),
}

// MessageTrace信息结构
model MessageTraceDTO {
  // 查询结果
  trackList: [ MessageTrackDTO ](name='track_list', example=''),
}

// namespace
model NamespaceDO {
  // gmt_create
  gmtCreate: string(name='gmt_create', example='gmt_create'),
  // gmt_modified
  gmtModified: string(name='gmt_modified', example='gmt_modified'),
  // id
  id: long(name='id', example=''),
  // instance type
  instanceType?: string(name='instance_type', example='instance type'),
  // namespace name
  namespaceName: string(name='namespace_name', example='namespace name'),
  // workspace
  workspace?: string(name='workspace', example='workspace'),
  // workspace group
  workspaceGroup?: string(name='workspace_group', example='workspace group'),
  // ldcMode
  ldcMode: long(name='ldc_mode', example=''),
}

// 联动的UI控件模型
model UnionControlModel {
  // 具体的联动 控件模型
  control: UIControlModel(name='control', example=''),
  // 本联动控件对应的父控件的名称，例如本联动控件是input，父控件是select，想要做到select选择某个特定选项后展示input控件，那么本字段就是 select控件的name。
  unionControl: string(name='union_control', example='topicConfig'),
  // 对应父控件的value为本字段的值时，本联动控件会展示出来。例如：当topicConfig这个select控件的值是 customized时，本联动控件input就能展示了。
  value: string(name='value', example='customized'),
}

// 查询到的trace信息集合
model TracePageDTO {
  // Trace 信息
  content: [ TraceDTO ](name='content', example=''),
  // 页码
  pageNum: long(name='page_num', example='1'),
  // 每页显示条数
  pageSize: long(name='page_size', example='20'),
  // 总条数
  total: long(name='total', example='100'),
}

// msgtype
model MsgTypePageDO {
  // msgtypes
  content: [ MsgTypeDO ](name='content', example=''),
  // page_num
  pageNum?: long(name='page_num', example='page_num'),
  // page_size
  pageSize?: long(name='page_size', example='page_size'),
  // total
  total?: long(name='total', example='total'),
}

// 流程查询请求
model ProcessQueryDTO {
  // 任务名称
  name: string(name='name', example='odps_2_sofamq_test'),
}

// 列名称
model ColumnName {
  // 名称
  name: string(name='name', example='名称'),
  // 唯一ID
  id: string(name='id', example='id'),
  // 值类型
  valueType: string(name='value_type', example='TIMESTAMP'),
}

// MsgTypeDTO
model MsgTypeDTO {
  // topic name
  topic: string(name='topic', example='TP_TEST'),
  // eventcode
  eventcode: string(name='eventcode', example='eventcode'),
  // desc
  desc?: string(name='desc', example='desc'),
}

// schema详情分页类型
model SchemaDetailPageDO {
  // 页面数量
  pageNum: long(name='page_num', example='10'),
  // 页大小
  pageSize: long(name='page_size', example='10'),
  // 总数
  total: long(name='total', example='10001'),
  // 内容
  content: [ SchemaDetailDO ](name='content', example=''),
}

// topic 统计列表详情
model TopicStatsItem {
  // 该 Topic 每分钟发送的消息大小（byte）
  bpm: long(name='bpm', example='1000'),
  // Topic 名称
  topic: string(name='topic', example='TP_XXX'),
  // 该 Topic 每分钟发送的消息数量
  tpm: long(name='tpm', example='1000'),
  // 该 Topic 每天发送的消息数量	
  // 
  tpd: long(name='tpd', example='100000'),
  // 该 Topic 每天发送的消息大小（byte）	
  // 
  bpd: long(name='bpd', example='100000'),
}

// topic 监控数据点的值
model TopicMetricItem {
  // 当前时间点 Topic 消费的消息数量
  recvCnt: long(name='recv_cnt', example='1000'),
  // 当前时间点 Topic 消费的消息流量（byte）
  recvTraffic: long(name='recv_traffic', example='10000'),
  // 当前时间点 Topic 发送的消息数量
  sendCnt: long(name='send_cnt', example='1000'),
  // 当前时间点 Topic 发送的消息流量（byte）
  sendTraffic: long(name='send_traffic', example='1000'),
  // 数据点的时间戳
  timestamp: long(name='timestamp', example=''),
}

// sofa mq group page
model GroupPageDTO {
  // Group 信息
  content: [ GroupDTO ](name='content', example=''),
  // 页码
  pageNum: long(name='page_num', example='1'),
  // 每页显示条数
  pageSize: long(name='page_size', example='20'),
  // 总条数
  total: long(name='total', example='100'),
}

// 接入点信息
model EndpointDTO {
  // endpoint接口相关的文档
  doc?: string(name='doc', example='https://yuque.antfin-inc.com/middleware/sofamq/endpoint'),
  // https类型公网的endpoint接入点
  httpsInternet?: string(name='https_internet', example='https://111111111111.mqrest.cn-qingdao-internal.aliyuncs.com'),
  // http类型内网的endpoint接口
  httpInternal?: string(name='http_internal', example='http://111111111111.mqrest.cn-qingdao-internal.aliyuncs.com'),
  // http类型的公网接入点
  httpInternet?: string(name='http_internet', example='http://111111111111.mqrest.cn-qingdao-public.aliyuncs.com '),
  // tcp类型的endpoint接口
  tcp?: string(name='tcp', example='http://MQ_INST_DO.mq-internet-access.mq-internet.aliyuncs.com:80'),
}

// 消费端堆栈信息
model ConsumerJstackDTO {
  // 消费端 Client ID
  clientId: string(name='client_id', example='10.15.232.86@1129e#e4a224f4#2fa8320f33c4#eyIwIjoienRoIn0='),
  // Jstack 堆栈信息
  jstack: [ ThreadTrackDTO ](name='jstack', example=''),
}

// sofa mq instance page
model InstancePageDTO {
  // topic page
  content: [ InstanceDTO ](name='content', example=''),
  // 页码
  pageNum: long(name='page_num', example='1'),
  // 每页条数
  pageSize: long(name='page_size', example='20'),
  // 总条数
  total: long(name='total', example='100'),
}

// 消费限流DTO
model ConsumeLimiterDTO {
  // 实例ID
  // 
  instanceId: string(name='instance_id', example='000001'),
  // 限流类型
  // - UNIT：单元限流，指定单元/CELL限流
  // 
  limiterType: string(name='limiter_type', example='UNIT'),
  // 限流资源名，由 GROUP@TOPIC 组成
  // 
  name: string(name='name', example='GID_XXX@TP_XXX'),
  // 限流值配置，BASE 为基准限流值。
  tps: string(name='tps', example='BASE:1000;CZ20D:500;RZ00B:400 '),
}

// 队列路由信息和分页信息
model QueueRouteRulesPageDTO {
  // 规则信息
  records: [ QueueRouteRulesDTO ](name='records', example=''),
  // 页面大小
  pageSize: long(name='page_size', example='10'),
  // 当前页
  pageCurrent: long(name='page_current', example='1'),
  // 总页数
  pageCount: long(name='page_count', example='1'),
  // 总记录数
  rowCount: long(name='row_count', example=''),
}

// 告警查询关系集合
model WarnPageDTO {
  // 报警规则信息
  content: [ WarnDTO ](name='content', example=''),
  // 页码
  pageNum: long(name='page_num', example='1'),
  // 每页显示条数
  pageSize: long(name='page_size', example='20'),
  // 总条数
  total: long(name='total', example='100'),
}

// 应用服务
model ApplicationServiceDTO {
  // 应用服务id
  id: long(name='id', example='1'),
  // 应用serviceid
  serviceId: string(name='service_id', example='ad1kd3'),
  // 应用服务名
  name: string(name='name', example='servicename'),
  // 应用id
  appId: long(name='app_id', example='1'),
  // 区分客户端的serviceid和服务端的service_id
  type: string(name='type', example='[{ value:_sub_, text: _客户端_ }, { value: _pub_, text:_服务端_}]'),
}

// 应用详情页面
model ApplicationPageDescDTO {
  // 总页数
  pageCount: long(name='page_count', example='1'),
  // 当前页
  pageCurrent: long(name='page_current', example='1'),
  // 页面显示数
  pageSize: long(name='page_size', example='10'),
  // 页面记录
  records: [ ApplicationDTO ](name='records', example=''),
  // 总记录数
  rowCount: long(name='row_count', example='100'),
}

// Topic Group历史统计数据点
model TopicGroupHistoryStatsItem {
  // 当前时间点的死信数量
  dlq: long(name='dlq', example='1000'),
  // 当前时间点的消息积压量
  msgBacklog: long(name='msg_backlog', example='1000'),
  // 每分钟消费数据大小
  recvBpm: long(name='recv_bpm', example='1000'),
  // 每分钟拉请求数量
  recvPpm: long(name='recv_ppm', example='1000'),
  // 消费 TPM
  recvTpm: long(name='recv_tpm', example='1000'),
  // 每分钟发送消息大小
  sendBpm: long(name='send_bpm', example='1000'),
  // 发送 TPM
  sendTpm: long(name='send_tpm', example='1000'),
  // Unix 时间戳
  timestamp: long(name='timestamp', example='1583592345'),
}

// 连接器任务分页查询结果
model ConnectorJobPageResult {
  // 任务信息列表
  content: [ ConnectorJobInfo ](name='content', example=''),
  // 页码
  pageNum: long(name='page_num', example='0'),
  // 每页的数量
  pageSize: long(name='page_size', example='10'),
  // 数据总数
  totalSize: long(name='total_size', example='1000'),
}

// dms
model MsgQueryPageDO {
  // data
  content: [ MsgQueryBatchDO ](name='content', example=''),
  // page_num
  pageNum?: long(name='page_num', example=''),
  // page_size
  pageSize?: long(name='page_size', example=''),
  // total
  total?: long(name='total', example=''),
}

// config
model ConfigDO {
  // key
  property: string(name='property', example='key'),
  // target name
  targetName: string(name='target_name', example='cluster'),
  // cluster type or broker type
  targetType: string(name='target_type', example='0'),
  // value
  value: string(name='value', example='value'),
  // id
  id: long(name='id', example=''),
  // gmt_create
  gmtCreate: string(name='gmt_create', example='gmt_create'),
  // gmt_modified
  gmtModified: string(name='gmt_modified', example='gmt_modified'),
}

// 连接器任务查询条件
model ConnectorJobQuery {
  // 任务名称
  name?: string(name='name', example='ODPS_TEST'),
  // 任务状态
  status?: string(name='status', example='RUNNING'),
  // 排序的列
  sortColumn?: string(name='sort_column', example='date'),
  // increment代表升序排序，decrement代表降序排序。
  // 
  sortType?: string(name='sort_type', example='increment、decrement'),
  // 应用名
  app?: string(name='app', example='antconnector'),
  // 审批状态
  processStatus?: string(name='process_status', example='PENDING'),
}

// 消息体内容的DTO对象，包含SchemaID和消息体内容反序列化后的字符串
model MessagePayloadDTO {
  // 消息对应的Schema的唯一ID
  schemaId: string(name='schema_id', example='123123786876868'),
  // 消息体内容的展现
  payload: string(name='payload', example='User{name=_Tom_, age=18, city=_null_}'),
}

// 限流域值
model QueueLimitValueDTO {
  // 条件模式
  cMode: string(name='c_mode', example='{ value:_1_, text: _QPS_ }'),
  // 限流域值id(新增限流规则时不填）
  id: long(name='id', example='1'),
  // 限流规则id(新增限流规则时不填）
  limitId: long(name='limit_id', example='rule_id'),
  // 限流域值
  lValue: string(name='l_value', example='l_value'),
  // 单位时间
  uTime: string(name='u_time', example='u_time'),
}

// router
model RouterPageDO {
  // 消息路由信息
  content: [ RouterConfigDO ](name='content', example=''),
  // 页码
  pageNum: long(name='page_num', example='1'),
  // 每页显示条数
  pageSize: long(name='page_size', example=''),
  // 总条数
  total: long(name='total', example=''),
}

// topic队列信息
model TopicQueueDTO {
  // Topic 名称
  topic: string(name='topic', example='TP_xxx'),
  // Broker 名称
  brokerName: string(name='broker_name', example='xxx'),
  // brokerip地址
  brokerAddrStr: string(name='broker_addr_str', example='11.124.10.22:10911'),
  // 最后更新时间
  lastUpdateTimestamp: long(name='last_update_timestamp', example=''),
  // 最大 offset 位点
  maxOffset: long(name='max_offset', example=''),
  // 最小位点
  minOffset: long(name='min_offset', example=''),
  // 队列 ID
  queueId: long(name='queue_id', example=''),
}

// 队列规则信息以及分页信息
model QueueLimitRulesPageDTO {
  // 总页数
  pageCount: long(name='page_count', example='1'),
  // 当前页
  pageCurrent: long(name='page_current', example='1'),
  // 每页条数
  pageSize: long(name='page_size', example='1'),
  // 总记录数
  rowCount: long(name='row_count', example='1'),
  // 队列规则信息
  records: [ QueueLimitRulesDTO ](name='records', example=''),
}

// kv config page
model KVConfigPageDTO {
  // config page
  content: [ KVConfigDTO ](name='content', example=''),
  // 页号
  pageNum: long(name='page_num', example=''),
  // 页面大小
  pageSize: long(name='page_size', example=''),
  // 总量
  total: long(name='total', example=''),
}

// 实例信息对象
model InstanceBaseInfoDTO {
  // 各个协议的接入点
  endpoints: EndpointsDTO(name='endpoints', example=''),
  // 实例是否有命名空间。取值说明如下：
  // 
  // true：拥有独立命名空间，资源命名确保实例内唯一，跨实例之间可重名
  // false：无独立命名空间，实例内或者跨实例之间，资源命名必须全局唯一
  independentNaming: boolean(name='independent_naming', example='true, false'),
  //  实例 ID
  instanceId: string(name='instance_id', example='MQ_INST_111111111111_DOxxxxxx '),
  // 实例名称
  instanceName: string(name='instance_name', example='test  '),
  // 实例状态。取值说明如下：
  // 
  // 0：铂金版实例部署中
  // 2：后付费实例已欠费
  // 5：后付费实例或铂金版实例服务中
  // 7：铂金版实例升级中且服务可用
  instanceStatus: long(name='instance_status', example='5'),
  // 实例类型。取值说明如下：
  // 
  // 1：后付费实例
  // 2：铂金版实例
  instanceType?: long(name='instance_type', example='1'),
  // 铂金版实例过期时间
  // 
  // 
  releaseTime?: long(name='release_time', example='1575392461'),
  // 备注
  remark: string(name='remark', example='test'),
}

// 订阅关系DTO
model BindingDTO {
  // app_name
  appName: string(name='app_name', example='app_name'),
  // group
  group: string(name='group', example='group'),
  // topic
  topic: string(name='topic', example='topic'),
  // eventcode
  eventcode: string(name='eventcode', example='eventcode'),
  // exchange_type
  exchangeType: string(name='exchange_type', example='exchange_type'),
  // expression
  expression?: string(name='expression', example='expression'),
  // persistence
  persistence: boolean(name='persistence', example='true, false'),
}

// 延迟详情
model DelayDetail {
  // 延迟时间
  delayTime?: string(name='delay_time', example='11分11秒'),
  // store拉取延迟时间
  storePullDelay?: string(name='store_pull_delay', example='11分11秒'),
  // 延迟时间
  lightWriteDelay?: string(name='light_write_delay', example='11分11秒'),
  // 积压数量
  backlog?: long(name='backlog', example='12422'),
}

// 连接器中来源去向信息的配置项描述，包括名称、控件、描述、默认值
model ConnectorConfigs {
  // 前端控件类型
  control: string(name='control', example='input、select、radio'),
  // 控件描述：中文、展示给用户
  description: string(name='description', example='表名称'),
  // 配置项名称
  name: string(name='name', example='table'),
  // 选项控件的所有选项
  selectOptions?: [ string ](name='select_options', example='A、B、C'),
  // radio控件的所有选项
  radioOptions?: [ string ](name='radio_options', example='LDC路由，当前zone路由'),
  // 描述本配置的子配置名称，如果本配置是 选项类型，那么如果本选项被选中后，子控件才可见。
  child?: string(name='child', example='table'),
  // 本配置是否可见，也即控件是否被用户可见
  visible: boolean(name='visible', example='true, false'),
  // 代表 本配置 的 父配置名称，便于做 控件间联动
  parent?: string(name='parent', example='routeStagety'),
}

// cluster
model ClusterDO {
  // appkey
  appkey?: string(name='appkey', example='appkey'),
  // cluster
  cluster: string(name='cluster', example='cluster'),
  // cluster cluster
  clusterType?: string(name='cluster_type', example='cluster type'),
  // 0:单机房
  deployMode?: string(name='deploy_mode', example='0'),
  // ldc模式
  ldcMode?: string(name='ldc_mode', example='shared'),
  // remark
  remark?: string(name='remark', example='remark'),
  // id
  id: long(name='id', example=''),
  // create
  gmtCreate: string(name='gmt_create', example='create'),
  // gmt_modified
  gmtModified: string(name='gmt_modified', example='gmt_modified'),
}

// 管理员用户分页信息
model AdminUserPageDTO {
  // admin user page
  content: [ AdminUserDTO ](name='content', example=''),
  // 页号
  pageNum: long(name='page_num', example=''),
  // 页面大小
  pageSize: long(name='page_size', example=''),
  // 总条数
  total: long(name='total', example=''),
}

// 重置任务位点请求
model ResetJobOffsetRequest {
  // 时间戳(单位为s)
  timestamp?: long(name='timestamp', example='1631000629'),
}

// 消费状态查询结果
model ConsumptionStatusDTO {
  // 实例id
  instanceId: string(name='instance_id', example='00001'),
  // 消费端groupId
  groupId: string(name='group_id', example='GID_001'),
  // 单元化cell
  cell: string(name='cell', example='gzone1'),
  // 消费端是否在线
  online: boolean(name='online', example='true, false'),
  // 总的位点差
  totalDiff: long(name='total_diff', example='123'),
  // 所有订阅关系
  subscriptions: [ SubscriptionDTO ](name='subscriptions', example=''),
  // 消费者-队列状态
  consumptionStatus: [ ConsumeQueueOffset ](name='consumption_status', example=''),
  // 消费者客户端状态
  clients: [ ClientInfoDTO ](name='clients', example=''),
}

// SofamqConsumerStatus返回数据
model ConsumerStatusDTO {
  // 该集群当前在线客户端信息
  connectionSet: [ ConnectionDTO ](name='connection_set', example=''),
  // 该集群在线客户端详细信息，包含 Jstack、消费 RT 时间等信息
  consumerConnectionInfoList: [ ConsumerConnectionInfoDTO ](name='consumer_connection_info_list', example=''),
  // 消费模型。取值说明如下：CLUSTERING：集群消费模式；BROADCASTING：广播消费模式。
  consumeModel: string(name='consume_model', example='CLUSTERING'),
  // 总消费 TPS
  consumeTps: string(name='consume_tps', example='0'),
  // 延迟时间
  delayTime: long(name='delay_time', example='100857'),
  // 各个 Topic 的消费情况
  detailInTopicList: [ DetailInTopicDTO ](name='detail_in_topic_list', example=''),
  // 实例 ID
  instanceId: string(name='instance_id', example='MQ_INST_111111111111_DOxxxxxx  '),
  // 最后更新时间
  lastTimestamp: long(name='last_timestamp', example='1566883844954  '),
  // 是否在线
  online: boolean(name='online', example='true'),
  // 客户端 Rebalance 是否正常。取值说明如下：true：正常；false：不正常。
  rebalanceOk: boolean(name='rebalance_ok', example='true, false'),
  // 订阅关系是否一致
  subscriptionSame: boolean(name='subscription_same', example='true, false'),
  // 集群总的消费堆积
  totalDiff: long(name='total_diff', example='197  '),
}

// message page
model MessageGetPageDTO {
  // 消息的详细信息
  content: [ MessageGetDTO ](name='content', example=''),
  // 页码
  pageNum: long(name='page_num', example='1'),
  // 每页显示条数
  pageSize: long(name='page_size', example='10'),
  // 第一次新建查询时返回的查询任务 ID，用于后续获取消息。
  taskId?: string(name='task_id', example='0BC1310300002A9F000021E4D7A48346'),
  // 总页数
  total: long(name='total', example='100'),
}

// 分区状态
model PartitionStatus {
  // 分区ID
  id: string(name='id', example='guid-1'),
  // 消费位点
  consumeOffset?: long(name='consume_offset', example='1297'),
  // 延迟时间
  consumeTime?: string(name='consume_time', example='2021-01-01 11:11:11'),
  // 积压数量
  backlogNum?: long(name='backlog_num', example='123'),
}

// binds
model BindingPageDO {
  // binds
  content?: [ BindingDO ](name='content', example=''),
  // page num
  pageNum?: long(name='page_num', example=''),
  // page size
  pageSize?: long(name='page_size', example=''),
  // total
  total?: long(name='total', example=''),
}

// dms
model MsgQueryDO {
  // delivery_count
  deliveryCount?: long(name='delivery_count', example=''),
  // eventcode
  eventcode: string(name='eventcode', example='eventcode'),
  // gmt_create
  gmtCreate: string(name='gmt_create', example='gmt_create'),
  // gmt_last_delivery
  gmtLastDelivery: string(name='gmt_last_delivery', example='gmt_last_delivery'),
  // gmt_next_delivery
  gmtNextDelivery: string(name='gmt_next_delivery', example='gmt_next_delivery'),
  // message_id
  messageId: string(name='message_id', example='message_id'),
  // publisher_group
  publisherGroup: string(name='publisher_group', example='publisher_group'),
  // status
  status?: string(name='status', example='status'),
  // topic
  topic: string(name='topic', example='topic'),
  // transaction
  transaction?: boolean(name='transaction', example='transaction'),
  // subscriber_group_delivery
  subscriberGroupDelivery?: string(name='subscriber_group_delivery', example='subscriber_group_delivery'),
  // subscriber_group_undelivery
  subscriberGroupUndelivery?: string(name='subscriber_group_undelivery', example='subscriber_group_undelivery'),
}

// cell by type
model CellGroupDO {
  // cell_type
  cellType: string(name='cell_type', example='cell_type'),
  // cells
  data: [ string ](name='data', example=''),
}

model StatusMqMessageUndeliveryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model StatusMqMessageUndeliveryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: Query undelivery message status.
 * Summary: query undelivery message status
 */
async function statusMqMessageUndelivery(request: StatusMqMessageUndeliveryRequest): StatusMqMessageUndeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return statusMqMessageUndeliveryEx(request, headers, runtime);
}

/**
 * Description: Query undelivery message status.
 * Summary: query undelivery message status
 */
async function statusMqMessageUndeliveryEx(request: StatusMqMessageUndeliveryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StatusMqMessageUndeliveryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'mq.message.undelivery.status', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UndeliverMessageStatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // message type: eventcode
  eventcode: string(name='eventcode'),
  // group of subscriber
  group: string(name='group'),
  // middleware instance id
  instanceId: string(name='instance_id'),
  // interval in seconds to the current time
  intervalInSecond: integer(name='interval_in_second'),
  // tenant id
  tenant?: string(name='tenant'),
  // message type: topic
  topic: string(name='topic'),
  // workspace id
  workspace?: string(name='workspace'),
}

model UndeliverMessageStatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // status of undelivery message
  data: string(name='data'),
}

/**
 * Description: Query undelivery message status.
 * Summary: query undelivery message status
 */
async function undeliverMessageStatus(request: UndeliverMessageStatusRequest): UndeliverMessageStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return undeliverMessageStatusEx(request, headers, runtime);
}

/**
 * Description: Query undelivery message status.
 * Summary: query undelivery message status
 */
async function undeliverMessageStatusEx(request: UndeliverMessageStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UndeliverMessageStatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.mq.message.status.undeliver', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddMsgtypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // description of message type
  desc?: string(name='desc'),
  // message type: eventcode
  eventcode: string(name='eventcode'),
  // middleware instance id
  instanceId: string(name='instance_id'),
  // tenant id
  tenant?: string(name='tenant'),
  // message type: topic
  topic: string(name='topic'),
  // workspace id
  workspace?: string(name='workspace'),
}

model AddMsgtypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // request result
  data?: boolean(name='data'),
}

/**
 * Description: Add a message type.
 * Summary: add a message type
 */
async function addMsgtype(request: AddMsgtypeRequest): AddMsgtypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addMsgtypeEx(request, headers, runtime);
}

/**
 * Description: Add a message type.
 * Summary: add a message type
 */
async function addMsgtypeEx(request: AddMsgtypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddMsgtypeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.mq.msgtype.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateMsgtypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // description of message type
  desc?: string(name='desc'),
  // message type: eventcode
  eventcode: string(name='eventcode'),
  // middleware instance id
  instanceId: string(name='instance_id'),
  // tenant id
  tenant?: string(name='tenant'),
  // message type: topic
  topic: string(name='topic'),
  // workspace id
  workspace?: string(name='workspace'),
}

model UpdateMsgtypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // request result
  data?: boolean(name='data'),
}

/**
 * Description: Update a message type.
 * Summary: update a message type
 */
async function updateMsgtype(request: UpdateMsgtypeRequest): UpdateMsgtypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateMsgtypeEx(request, headers, runtime);
}

/**
 * Description: Update a message type.
 * Summary: update a message type
 */
async function updateMsgtypeEx(request: UpdateMsgtypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMsgtypeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.mq.msgtype.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteMsgtypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // message type: eventcode
  eventcode: string(name='eventcode'),
  // middleware instance id
  instanceId: string(name='instance_id'),
  // tenant id
  tenant?: string(name='tenant'),
  // message type: topic
  topic: string(name='topic'),
  // workspace id
  workspace?: string(name='workspace'),
}

model DeleteMsgtypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // request result
  data?: boolean(name='data'),
}

/**
 * Description: Delete a message type.
 * Summary: delete a message type
 */
async function deleteMsgtype(request: DeleteMsgtypeRequest): DeleteMsgtypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteMsgtypeEx(request, headers, runtime);
}

/**
 * Description: Delete a message type.
 * Summary: delete a message type
 */
async function deleteMsgtypeEx(request: DeleteMsgtypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteMsgtypeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.mq.msgtype.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMsgtypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // count value
  count?: integer(name='count'),
  // message type: eventcode
  eventcode: string(name='eventcode'),
  // middleware instance id
  instanceId: string(name='instance_id'),
  // offset value
  offset?: integer(name='offset'),
  // tenant id
  tenant?: string(name='tenant'),
  // message type: topic
  topic: string(name='topic'),
  // workspace id
  workspace?: string(name='workspace'),
}

model QueryMsgtypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // request result
  data?: string(name='data'),
}

/**
 * Description: Query the collection of message type.
 * Summary: query the collection of message type
 */
async function queryMsgtype(request: QueryMsgtypeRequest): QueryMsgtypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMsgtypeEx(request, headers, runtime);
}

/**
 * Description: Query the collection of message type.
 * Summary: query the collection of message type
 */
async function queryMsgtypeEx(request: QueryMsgtypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMsgtypeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.mq.msgtype.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddBindingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // application name
  appName: string(name='app_name'),
  // message type: eventcode
  eventcode: string(name='eventcode'),
  // binding: exchangeType, "DIRECT" or "HEADER"
  exchangeType: string(name='exchange_type'),
  // binding: expression
  expression?: string(name='expression'),
  // group of subscriber
  group: string(name='group'),
  // middleware instance id
  instanceId: string(name='instance_id'),
  // binding: expression
  persistence: boolean(name='persistence'),
  // tenant id
  tenant?: string(name='tenant'),
  // message type: topic
  topic: string(name='topic'),
  // workspace id
  workspace?: string(name='workspace'),
  // zone info
  zone?: string(name='zone'),
  // zone mode
  zoneMode?: string(name='zone_mode'),
}

model AddBindingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // request result
  data?: boolean(name='data'),
}

/**
 * Description: Add a binding.
 * Summary: add a binding
 */
async function addBinding(request: AddBindingRequest): AddBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addBindingEx(request, headers, runtime);
}

/**
 * Description: Add a binding.
 * Summary: add a binding
 */
async function addBindingEx(request: AddBindingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddBindingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.mq.binding.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateBindingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // application name
  appName: string(name='app_name'),
  // message type: eventcode
  eventcode: string(name='eventcode'),
  // binding: exchangeType, "DIRECT" or "HEADER"
  exchangeType: string(name='exchange_type'),
  // binding: expression
  expression?: string(name='expression'),
  // group of subscriber
  group: string(name='group'),
  // middleware instance id
  instanceId: string(name='instance_id'),
  // binding: expression
  persistence: boolean(name='persistence'),
  // tenant id
  tenant?: string(name='tenant'),
  // message type: topic
  topic: string(name='topic'),
  // workspace id
  workspace?: string(name='workspace'),
  // zone info
  zone?: string(name='zone'),
  // zone mode
  zoneMode?: string(name='zone_mode'),
}

model UpdateBindingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // request result
  data?: boolean(name='data'),
}

/**
 * Description: Update a binding.
 * Summary: update a binding
 */
async function updateBinding(request: UpdateBindingRequest): UpdateBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateBindingEx(request, headers, runtime);
}

/**
 * Description: Update a binding.
 * Summary: update a binding
 */
async function updateBindingEx(request: UpdateBindingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateBindingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.mq.binding.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteBindingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // message type: eventcode
  eventcode: string(name='eventcode'),
  // group of subscriber
  group: string(name='group'),
  // middleware instance id
  instanceId: string(name='instance_id'),
  // tenant id
  tenant?: string(name='tenant'),
  // message type: topic
  topic: string(name='topic'),
  // workspace id
  workspace?: string(name='workspace'),
  // zone info
  zone?: string(name='zone'),
}

model DeleteBindingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // request result
  data?: boolean(name='data'),
}

/**
 * Description: Delete a binding.
 * Summary: delete a binding
 */
async function deleteBinding(request: DeleteBindingRequest): DeleteBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteBindingEx(request, headers, runtime);
}

/**
 * Description: Delete a binding.
 * Summary: delete a binding
 */
async function deleteBindingEx(request: DeleteBindingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteBindingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.mq.binding.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBindingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // application name
  appName?: string(name='app_name'),
  // count value
  count?: integer(name='count'),
  // message type: eventcode
  eventcode?: string(name='eventcode'),
  // group of subscriber
  group?: string(name='group'),
  // middleware instance id
  instanceId: string(name='instance_id'),
  // offset value
  offset?: integer(name='offset'),
  // tenant id
  tenant?: string(name='tenant'),
  // message type: topic
  topic?: string(name='topic'),
  // workspace id
  workspace?: string(name='workspace'),
  // zone info
  zone?: string(name='zone'),
}

model QueryBindingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // request result
  data?: string(name='data'),
}

/**
 * Description: Query the collection of binding.
 * Summary: query the collection of binding
 */
async function queryBinding(request: QueryBindingRequest): QueryBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBindingEx(request, headers, runtime);
}

/**
 * Description: Query the collection of binding.
 * Summary: query the collection of binding
 */
async function queryBindingEx(request: QueryBindingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBindingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.mq.binding.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecuteSwitchoverRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // target zone
  destCell: string(name='dest_cell'),
  // instance id
  instanceId: string(name='instance_id'),
  // source zone
  sourceCell: string(name='source_cell'),
}

model ExecuteSwitchoverResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // request result
  success: boolean(name='success'),
}

/**
 * Description: Queue switchover execute.
 * Summary: Queue switchover execute
 */
async function executeSwitchover(request: ExecuteSwitchoverRequest): ExecuteSwitchoverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return executeSwitchoverEx(request, headers, runtime);
}

/**
 * Description: Queue switchover execute.
 * Summary: Queue switchover execute
 */
async function executeSwitchoverEx(request: ExecuteSwitchoverRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecuteSwitchoverResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.mq.switchover.execute', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelSwitchoverRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // target zone
  destCell: string(name='dest_cell'),
  // instance id
  instanceId: string(name='instance_id'),
  // source zone
  sourceCell: string(name='source_cell'),
}

model CancelSwitchoverResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // request result
  success: boolean(name='success'),
}

/**
 * Description: Queue switchover cancel.
 * Summary: Queue switchover cancel
 */
async function cancelSwitchover(request: CancelSwitchoverRequest): CancelSwitchoverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelSwitchoverEx(request, headers, runtime);
}

/**
 * Description: Queue switchover cancel.
 * Summary: Queue switchover cancel
 */
async function cancelSwitchoverEx(request: CancelSwitchoverRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelSwitchoverResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.mq.switchover.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySwitchoverRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // instance id
  instanceId: string(name='instance_id'),
}

model QuerySwitchoverResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // unit list
  actions: [ SwitchoverAction ](name='actions'),
}

/**
 * Description: Queue switchover query.
 * Summary: Queue switchover query
 */
async function querySwitchover(request: QuerySwitchoverRequest): QuerySwitchoverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySwitchoverEx(request, headers, runtime);
}

/**
 * Description: Queue switchover query.
 * Summary: Queue switchover query
 */
async function querySwitchoverEx(request: QuerySwitchoverRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySwitchoverResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.mq.switchover.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetMsgtypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // count value
  count?: integer(name='count'),
  // message type: eventcode
  eventcode: string(name='eventcode'),
  // middleware instance id
  instanceId: string(name='instance_id'),
  // offset value
  offset?: integer(name='offset'),
  // tenant id
  tenant?: string(name='tenant'),
  // message type: topic
  topic: string(name='topic'),
  // workspace id
  workspace?: string(name='workspace'),
}

model GetMsgtypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // request result
  data?: string(name='data'),
}

/**
 * Description: Query the collection of message type.
 * Summary: query the collection of message type
 */
async function getMsgtype(request: GetMsgtypeRequest): GetMsgtypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getMsgtypeEx(request, headers, runtime);
}

/**
 * Description: Query the collection of message type.
 * Summary: query the collection of message type
 */
async function getMsgtypeEx(request: GetMsgtypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetMsgtypeResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.msgtype.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UndeliveryMessageStatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // end time
  endTime: long(name='end_time'),
  // message type: eventcode
  eventcode: string(name='eventcode'),
  // group of subscriber
  group: string(name='group'),
  // middleware instance id
  instanceId: string(name='instance_id'),
  // stauts
  status: string(name='status'),
  // message type: topic
  topic: string(name='topic'),
}

model UndeliveryMessageStatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // count of undelivery message
  totalCount: long(name='total_count'),
}

/**
 * Description: Query undelivery message status.
 * Summary: query undelivery message status
 */
async function undeliveryMessageStatus(request: UndeliveryMessageStatusRequest): UndeliveryMessageStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return undeliveryMessageStatusEx(request, headers, runtime);
}

/**
 * Description: Query undelivery message status.
 * Summary: query undelivery message status
 */
async function undeliveryMessageStatusEx(request: UndeliveryMessageStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UndeliveryMessageStatusResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.message.status.undelivery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTopicsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // eventcode
  eventcode: string(name='eventcode'),
  // instance id
  instanceId: string(name='instance_id'),
  // page num
  pageNum: integer(name='page_num'),
  // page size
  pageSize: integer(name='page_size'),
  // topic
  topic: string(name='topic'),
}

model QueryTopicsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // page num
  pageNum?: integer(name='page_num'),
  // page size
  pageSize?: integer(name='page_size'),
  // list
  topics: [ Topic ](name='topics'),
  // total count
  totalCount?: integer(name='total_count'),
}

/**
 * Description: query topics
 * Summary: query topics
 */
async function queryTopics(request: QueryTopicsRequest): QueryTopicsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTopicsEx(request, headers, runtime);
}

/**
 * Description: query topics
 * Summary: query topics
 */
async function queryTopicsEx(request: QueryTopicsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTopicsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.topics.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model IdTopicQueryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: string(name='id'),
  // instance id
  instanceId: string(name='instance_id'),
}

model IdTopicQueryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // topic
  topic: Topic(name='topic'),
}

/**
 * Description: query topic
 * Summary: query topic
 */
async function idTopicQuery(request: IdTopicQueryRequest): IdTopicQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return idTopicQueryEx(request, headers, runtime);
}

/**
 * Description: query topic
 * Summary: query topic
 */
async function idTopicQueryEx(request: IdTopicQueryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): IdTopicQueryResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.topic.query.id', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddTopicRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // desc
  desc: string(name='desc'),
  // eventcode
  eventcode: string(name='eventcode'),
  // instance id
  instanceId: string(name='instance_id'),
  // topic
  topic: string(name='topic'),
}

model AddTopicResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // id
  id?: string(name='id'),
  // instance id
  instanceId?: string(name='instance_id'),
}

/**
 * Description: add topic
 * Summary: add topic
 */
async function addTopic(request: AddTopicRequest): AddTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addTopicEx(request, headers, runtime);
}

/**
 * Description: add topic
 * Summary: add topic
 */
async function addTopicEx(request: AddTopicRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddTopicResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.topic.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateTopicRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // desc
  desc: string(name='desc'),
  // id
  id: string(name='id'),
  // instance id
  instanceId: string(name='instance_id'),
}

model UpdateTopicResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // id
  id?: string(name='id'),
  // instance id
  instanceId?: string(name='instance_id'),
}

/**
 * Description: update topic
 * Summary: update topic
 */
async function updateTopic(request: UpdateTopicRequest): UpdateTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateTopicEx(request, headers, runtime);
}

/**
 * Description: update topic
 * Summary: update topic
 */
async function updateTopicEx(request: UpdateTopicRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTopicResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.topic.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteTopicRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: string(name='id'),
  // instance id
  instanceId: string(name='instance_id'),
}

model DeleteTopicResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: delete topic
 * Summary: delete topic
 */
async function deleteTopic(request: DeleteTopicRequest): DeleteTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteTopicEx(request, headers, runtime);
}

/**
 * Description: delete topic
 * Summary: delete topic
 */
async function deleteTopicEx(request: DeleteTopicRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTopicResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.topic.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBindingsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // appname
  appName: string(name='app_name'),
  // eventcode
  eventcode: string(name='eventcode'),
  // group
  group: string(name='group'),
  // instance id
  instanceId: string(name='instance_id'),
  // page num
  pageNum: integer(name='page_num'),
  // page size
  pageSize: integer(name='page_size'),
  // topic
  topic: string(name='topic'),
}

model QueryBindingsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // list
  bindings: [ Binding ](name='bindings'),
  // page num
  pageNum?: integer(name='page_num'),
  // page size
  pageSize?: integer(name='page_size'),
  // total count
  totalCount?: integer(name='total_count'),
}

/**
 * Description: query bindings
 * Summary: query bindings
 */
async function queryBindings(request: QueryBindingsRequest): QueryBindingsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBindingsEx(request, headers, runtime);
}

/**
 * Description: query bindings
 * Summary: query bindings
 */
async function queryBindingsEx(request: QueryBindingsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBindingsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.bindings.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model IdBindingQueryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: string(name='id'),
  // instance id
  instanceId: string(name='instance_id'),
}

model IdBindingQueryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // binding
  binding: Binding(name='binding'),
}

/**
 * Description: query binding
 * Summary: query binding
 */
async function idBindingQuery(request: IdBindingQueryRequest): IdBindingQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return idBindingQueryEx(request, headers, runtime);
}

/**
 * Description: query binding
 * Summary: query binding
 */
async function idBindingQueryEx(request: IdBindingQueryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): IdBindingQueryResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.binding.query.id', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqTopicRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需获取的 Topic 信息列表所对应的实例 ID
  instanceId: string(name='instance_id'),
  // 页码
  pageNum: long(name='page_num'),
  // 每页显示条数
  pageSize: long(name='page_size'),
  // 查询指定 Topic 时设置，否则查询所有 Topic
  topic?: string(name='topic'),
}

model ListSofamqTopicResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回所有查询到的 Topic 信息列表
  data?: TopicPageDTO(name='data'),
}

/**
 * Description: 查询指定实例下 Topic 的信息列表。
 * Summary: 查询Topic列表
 */
async function listSofamqTopic(request: ListSofamqTopicRequest): ListSofamqTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqTopicEx(request, headers, runtime);
}

/**
 * Description: 查询指定实例下 Topic 的信息列表。
 * Summary: 查询Topic列表
 */
async function listSofamqTopicEx(request: ListSofamqTopicRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqTopicResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.topic.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSofamqTopicRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需创建的 Topic 所对应的实例 ID
  instanceId: string(name='instance_id'),
  // 消息类型。取值说明如下：0：普通消息；1：分区顺序消息；2：全局顺序消息；4：事务消息；5：定时/延时消息。
  messageType: long(name='message_type'),
  // Topic 的备注信息
  remark?: string(name='remark'),
  // 需创建的 Topic 的名称
  topic: string(name='topic'),
  // Topic对应Schema的兼容性策略
  schemaCompatibility?: string(name='schema_compatibility'),
  // Topic对应Schema的序列化方式
  schemaSerialization?: string(name='schema_serialization'),
  // Topic 所属的应用名称，要求 app name 在 zappinfo 上可查
  owner?: string(name='owner'),
}

model CreateSofamqTopicResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 在指定环境实例下创建一个 Topic，需要指定消息类型与 Topic 名称。
 * Summary: 创建Topic
 */
async function createSofamqTopic(request: CreateSofamqTopicRequest): CreateSofamqTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSofamqTopicEx(request, headers, runtime);
}

/**
 * Description: 在指定环境实例下创建一个 Topic，需要指定消息类型与 Topic 名称。
 * Summary: 创建Topic
 */
async function createSofamqTopicEx(request: CreateSofamqTopicRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSofamqTopicResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.topic.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSofamqTopicRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需删除的 Topic 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
  instanceId: string(name='instance_id'),
  // 指定删除的 Topic
  topic: string(name='topic'),
}

model DeleteSofamqTopicResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除指定的 Topic。删除后，该 Topic 下所有的订阅关系会被清理，需谨慎调用。
 * Summary: 删除Topic
 */
async function deleteSofamqTopic(request: DeleteSofamqTopicRequest): DeleteSofamqTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSofamqTopicEx(request, headers, runtime);
}

/**
 * Description: 删除指定的 Topic。删除后，该 Topic 下所有的订阅关系会被清理，需谨慎调用。
 * Summary: 删除Topic
 */
async function deleteSofamqTopicEx(request: DeleteSofamqTopicRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSofamqTopicResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.topic.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSofamqTopicRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需更新读写权限的 Topic 所对应的实例 ID
  instanceId: string(name='instance_id'),
  // 设置该 Topic 的读写模式。取值说明：6：同时支持读写；4：禁写；2：禁读。
  perm: long(name='perm'),
  // 需更新读写权限的 Topic 名称。一个用户下不可重复。
  topic: string(name='topic'),
}

model UpdateSofamqTopicResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新指定 Topic 的读写权限配置。
 * Summary: 更新Topic读写权限
 */
async function updateSofamqTopic(request: UpdateSofamqTopicRequest): UpdateSofamqTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSofamqTopicEx(request, headers, runtime);
}

/**
 * Description: 更新指定 Topic 的读写权限配置。
 * Summary: 更新Topic读写权限
 */
async function updateSofamqTopicEx(request: UpdateSofamqTopicRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSofamqTopicResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.topic.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 页号
  pageNum: long(name='page_num'),
  // 每页显示条数
  pageSize: long(name='page_size'),
  // 实例ID
  instanceId?: string(name='instance_id'),
  // 用户id
  userId?: string(name='user_id'),
  // 集群名
  cluster?: string(name='cluster'),
}

model ListSofamqInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // instance list
  data?: InstancePageDTO(name='data'),
}

/**
 * Description: sofamq list instance
 * Summary: sofamq list instance
 */
async function listSofamqInstance(request: ListSofamqInstanceRequest): ListSofamqInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqInstanceEx(request, headers, runtime);
}

/**
 * Description: sofamq list instance
 * Summary: sofamq list instance
 */
async function listSofamqInstanceEx(request: ListSofamqInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqInstanceResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.instance.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSofamqInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例名称，长度为 3-64，取值可为中英文
  instanceName: string(name='instance_name'),
  // 备注信息
  remark?: string(name='remark'),
}

model CreateSofamqInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // InstanceCreate返回数据
  data?: InstanceCreateDTO(name='data'),
}

/**
 * Description: sofamq instance create
 * Summary: instance create
 */
async function createSofamqInstance(request: CreateSofamqInstanceRequest): CreateSofamqInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSofamqInstanceEx(request, headers, runtime);
}

/**
 * Description: sofamq instance create
 * Summary: instance create
 */
async function createSofamqInstanceEx(request: CreateSofamqInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSofamqInstanceResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.instance.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSofamqInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例ID
  instanceId: string(name='instance_id'),
}

model DeleteSofamqInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: instance delete
 * Summary: instance delete
 */
async function deleteSofamqInstance(request: DeleteSofamqInstanceRequest): DeleteSofamqInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSofamqInstanceEx(request, headers, runtime);
}

/**
 * Description: instance delete
 * Summary: instance delete
 */
async function deleteSofamqInstanceEx(request: DeleteSofamqInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSofamqInstanceResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.instance.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSofamqInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例ID
  instanceId: string(name='instance_id'),
  // 实例名
  instanceName: string(name='instance_name'),
  // 实例描述
  remark?: string(name='remark'),
}

model UpdateSofamqInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 使用 InstanceUpdate 更新实例名称和描述
 * Summary: instance update
 */
async function updateSofamqInstance(request: UpdateSofamqInstanceRequest): UpdateSofamqInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSofamqInstanceEx(request, headers, runtime);
}

/**
 * Description: 使用 InstanceUpdate 更新实例名称和描述
 * Summary: instance update
 */
async function updateSofamqInstanceEx(request: UpdateSofamqInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSofamqInstanceResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.instance.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSofamqGroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 创建的消息端 Group ID
  groupId: string(name='group_id'),
  // 需创建的 Group ID 所对应的实例 ID
  instanceId: string(name='instance_id'),
  // Group ID 描述信息
  remark?: string(name='remark'),
  // 指定创建的 Group ID 适用的协议。TCP 协议和 HTTP 协议的 Group ID 不可以共用，需要分别创建。取值说明如下：
  // 
  // tcp：默认值，表示创建的 Group ID 仅适用于 TCP 协议的消息收发。
  // http：表示创建的 Group ID 仅适用于 HTTP 协议的消息收发。
  groupType?: string(name='group_type'),
  // Group 所属的应用名称，要求 app name 在 zappinfo 上可查
  owner?: string(name='owner'),
}

model CreateSofamqGroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建 Group ID。创建的 Group ID 用于发布和订阅消息。
 * Summary: 创建Group
 */
async function createSofamqGroup(request: CreateSofamqGroupRequest): CreateSofamqGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSofamqGroupEx(request, headers, runtime);
}

/**
 * Description: 创建 Group ID。创建的 Group ID 用于发布和订阅消息。
 * Summary: 创建Group
 */
async function createSofamqGroupEx(request: CreateSofamqGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSofamqGroupResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.group.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqGroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询指定 Group ID 时设置，否则查询所有 Group ID
  groupId?: string(name='group_id'),
  // 需获取 Group ID 所对应的实例 ID
  instanceId: string(name='instance_id'),
  // 页码
  pageNum: long(name='page_num'),
  // 每页显示数量
  pageSize: long(name='page_size'),
  // 查询的 Group ID 适用的协议。TCP 协议和 HTTP 协议的 Group ID 不可以共用，需要分别创建。取值说明如下：
  // 
  // tcp：默认值，表示该 Group ID 仅适用于 TCP 协议的消息收发。
  // http：表示该 Group ID 仅适用于 HTTP 协议的消息收发。
  groupType?: string(name='group_type'),
}

model ListSofamqGroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询到的订阅关系集合
  data?: GroupPageDTO(name='data'),
}

/**
 * Description: 查询指定环境实例下 Group ID 资源的信息列表。
 * Summary: 查询Group列表
 */
async function listSofamqGroup(request: ListSofamqGroupRequest): ListSofamqGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqGroupEx(request, headers, runtime);
}

/**
 * Description: 查询指定环境实例下 Group ID 资源的信息列表。
 * Summary: 查询Group列表
 */
async function listSofamqGroupEx(request: ListSofamqGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqGroupResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.group.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSofamqGroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需要删除的消息消费集群的 Group ID
  groupId: string(name='group_id'),
  // 需删除的 Group ID 对应的实例 ID
  instanceId: string(name='instance_id'),
}

model DeleteSofamqGroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除指定的 Group。
 * Summary: 删除Group
 */
async function deleteSofamqGroup(request: DeleteSofamqGroupRequest): DeleteSofamqGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSofamqGroupEx(request, headers, runtime);
}

/**
 * Description: 删除指定的 Group。
 * Summary: 删除Group
 */
async function deleteSofamqGroupEx(request: DeleteSofamqGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSofamqGroupResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.group.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSofamqGroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需配置的 Group ID
  groupId: string(name='group_id'),
  // 需配置的 Group ID 所对应的实例 ID
  instanceId: string(name='instance_id'),
  // 设置读消息开关
  readEnable: boolean(name='read_enable'),
}

model UpdateSofamqGroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新指定 Group 的读权限配置。
 * Summary: 更新Group读权限
 */
async function updateSofamqGroup(request: UpdateSofamqGroupRequest): UpdateSofamqGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSofamqGroupEx(request, headers, runtime);
}

/**
 * Description: 更新指定 Group 的读权限配置。
 * Summary: 更新Group读权限
 */
async function updateSofamqGroupEx(request: UpdateSofamqGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSofamqGroupResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.group.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqTopicstatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需查询的 Topic 所在的 Cell
  cell?: string(name='cell'),
  // 需查询的 Topic 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
  instanceId: string(name='instance_id'),
  // 需查询的 Topic 名称
  topic: string(name='topic'),
}

model QuerySofamqTopicstatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询到的 Topic 的信息存储数据结构
  data?: TopicStatusDTO(name='data'),
}

/**
 * Description: 查询指定的 Topic 下的消息总量以及 Topic 的最后更新时间。
 * Summary: 查询Topic状态
 */
async function querySofamqTopicstatus(request: QuerySofamqTopicstatusRequest): QuerySofamqTopicstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqTopicstatusEx(request, headers, runtime);
}

/**
 * Description: 查询指定的 Topic 下的消息总量以及 Topic 的最后更新时间。
 * Summary: 查询Topic状态
 */
async function querySofamqTopicstatusEx(request: QuerySofamqTopicstatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqTopicstatusResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.topicstatus.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqTopicsubdetailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需查询的 Topic 所在的单元
  cell?: string(name='cell'),
  // 需查询的 Topic 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
  instanceId: string(name='instance_id'),
  // 需查询的 Topic 名称
  topic: string(name='topic'),
}

model QuerySofamqTopicsubdetailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回 Data 对象
  data?: TopicSubDetailDTO(name='data'),
}

/**
 * Description: 查询指定的 Topic 被哪些在线的订阅组订阅了。
 * Summary: 查看在线订阅组
 */
async function querySofamqTopicsubdetail(request: QuerySofamqTopicsubdetailRequest): QuerySofamqTopicsubdetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqTopicsubdetailEx(request, headers, runtime);
}

/**
 * Description: 查询指定的 Topic 被哪些在线的订阅组订阅了。
 * Summary: 查看在线订阅组
 */
async function querySofamqTopicsubdetailEx(request: QuerySofamqTopicsubdetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqTopicsubdetailResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.topicsubdetail.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqNodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // cluster
  cluster?: string(name='cluster'),
  // data_center
  dataCenter?: string(name='data_center'),
  // hostname
  hostname?: string(name='hostname'),
  // node_group
  nodeGroup?: string(name='node_group'),
  // room
  room?: string(name='room'),
  // page num
  pageNum: long(name='page_num'),
  // page size
  pageSize: long(name='page_size'),
}

model ListSofamqNodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // node list
  data?: NodePageDO(name='data'),
}

/**
 * Description: node list
 * Summary: node list
 */
async function listSofamqNode(request: ListSofamqNodeRequest): ListSofamqNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqNodeEx(request, headers, runtime);
}

/**
 * Description: node list
 * Summary: node list
 */
async function listSofamqNodeEx(request: ListSofamqNodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqNodeResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.node.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSofamqNodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // cluster
  cluster?: string(name='cluster'),
  // hostname
  hostname: string(name='hostname'),
  // node_group
  nodeGroup?: string(name='node_group'),
  // node_type
  nodeType?: string(name='node_type'),
  // perm
  perm?: string(name='perm'),
  // rip
  rip?: string(name='rip'),
  // room
  room?: string(name='room'),
  // vip
  vip?: string(name='vip'),
  // default
  dataCenter?: string(name='data_center'),
}

model CreateSofamqNodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: create node
 * Summary: create node
 */
async function createSofamqNode(request: CreateSofamqNodeRequest): CreateSofamqNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSofamqNodeEx(request, headers, runtime);
}

/**
 * Description: create node
 * Summary: create node
 */
async function createSofamqNodeEx(request: CreateSofamqNodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSofamqNodeResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.node.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSofamqRoomRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // cluster
  cluster: string(name='cluster'),
  // endpoint
  endpoint?: string(name='endpoint'),
  // endpoint_type
  endpointType?: string(name='endpoint_type'),
  // region
  region?: string(name='region'),
  // room
  room: string(name='room'),
}

model CreateSofamqRoomResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: room create
 * Summary: room create
 */
async function createSofamqRoom(request: CreateSofamqRoomRequest): CreateSofamqRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSofamqRoomEx(request, headers, runtime);
}

/**
 * Description: room create
 * Summary: room create
 */
async function createSofamqRoomEx(request: CreateSofamqRoomRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSofamqRoomResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.room.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSofamqCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // cell
  cell: string(name='cell'),
  // cell_type
  cellType?: string(name='cell_type'),
  // default
  datacenter?: string(name='datacenter'),
  // endpoint
  endpoint?: string(name='endpoint'),
  // endpoint_type
  endpointType?: string(name='endpoint_type'),
  // ns id
  instanceId: string(name='instance_id'),
  // room
  room?: string(name='room'),
}

model CreateSofamqCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: create cell
 * Summary: create cell
 */
async function createSofamqCell(request: CreateSofamqCellRequest): CreateSofamqCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSofamqCellEx(request, headers, runtime);
}

/**
 * Description: create cell
 * Summary: create cell
 */
async function createSofamqCellEx(request: CreateSofamqCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSofamqCellResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.cell.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSofamqClusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // appkey
  appkey?: string(name='appkey'),
  // cluster
  cluster: string(name='cluster'),
  // cluster_type
  clusterType?: string(name='cluster_type'),
  // 0:单机房,1:本地优先,2:交叉部署,3:独占LDC
  deployMode?: string(name='deploy_mode'),
  // unshared: 独占
  // shared: 共享
  ldcMode?: string(name='ldc_mode'),
  // remark
  remark?: string(name='remark'),
}

model CreateSofamqClusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: string(name='data'),
}

/**
 * Description: create cluster
 * Summary: create cluster
 */
async function createSofamqCluster(request: CreateSofamqClusterRequest): CreateSofamqClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSofamqClusterEx(request, headers, runtime);
}

/**
 * Description: create cluster
 * Summary: create cluster
 */
async function createSofamqClusterEx(request: CreateSofamqClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSofamqClusterResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.cluster.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSofamqNamespaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // instance id
  instanceId: string(name='instance_id'),
  // instance_type
  instanceType?: string(name='instance_type'),
  // nsid
  namespaceId: string(name='namespace_id'),
  // namespace_name
  namespaceName: string(name='namespace_name'),
  // workspace
  workspace?: string(name='workspace'),
  // workspace_group
  workspaceGroup?: string(name='workspace_group'),
  // ldcMode
  ldcMode: long(name='ldc_mode'),
}

model CreateSofamqNamespaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: create namespace
 * Summary: create namespace
 */
async function createSofamqNamespace(request: CreateSofamqNamespaceRequest): CreateSofamqNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSofamqNamespaceEx(request, headers, runtime);
}

/**
 * Description: create namespace
 * Summary: create namespace
 */
async function createSofamqNamespaceEx(request: CreateSofamqNamespaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSofamqNamespaceResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.namespace.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqRoomRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // cluster
  cluster?: string(name='cluster'),
  // region
  region?: string(name='region'),
  // room
  room?: string(name='room'),
}

model ListSofamqRoomResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // room
  data?: [ RoomDO ](name='data'),
}

/**
 * Description: room list
 * Summary: room list
 */
async function listSofamqRoom(request: ListSofamqRoomRequest): ListSofamqRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqRoomEx(request, headers, runtime);
}

/**
 * Description: room list
 * Summary: room list
 */
async function listSofamqRoomEx(request: ListSofamqRoomRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqRoomResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.room.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // cell名
  cell: string(name='cell'),
  // 需查询的 Group ID 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
  instanceId: string(name='instance_id'),
  // 页号
  pageNum: long(name='page_num'),
  // 页面大小
  pageSize: long(name='page_size'),
}

model ListSofamqCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // cell
  data?: CellPageDTO(name='data'),
}

/**
 * Description: 查询cell列表
 * Summary: 查询cell列表
 */
async function listSofamqCell(request: ListSofamqCellRequest): ListSofamqCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqCellEx(request, headers, runtime);
}

/**
 * Description: 查询cell列表
 * Summary: 查询cell列表
 */
async function listSofamqCellEx(request: ListSofamqCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqCellResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.cell.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqClusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // cluster
  cluster?: string(name='cluster'),
  // appkey
  appkey?: string(name='appkey'),
}

model ListSofamqClusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // list cell
  data?: [ ClusterDO ](name='data'),
}

/**
 * Description: list cluster
 * Summary: list cluster
 */
async function listSofamqCluster(request: ListSofamqClusterRequest): ListSofamqClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqClusterEx(request, headers, runtime);
}

/**
 * Description: list cluster
 * Summary: list cluster
 */
async function listSofamqClusterEx(request: ListSofamqClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqClusterResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.cluster.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqGroupsubdetailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需查询的 Group ID 所在的 Cell
  cell?: string(name='cell'),
  // 需查询的 Group ID
  groupId: string(name='group_id'),
  // 需查询的 Group ID 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
  instanceId: string(name='instance_id'),
}

model QuerySofamqGroupsubdetailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回 Data 信息
  data?: GroupSubDetailDTO(name='data'),
}

/**
 * Description: 查看指定的 Group ID 订阅了哪些 Topic。如果 Group ID 对应的消费者实例不在线，则查不到数据。
 * Summary: 查看在线订阅组
 */
async function querySofamqGroupsubdetail(request: QuerySofamqGroupsubdetailRequest): QuerySofamqGroupsubdetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqGroupsubdetailEx(request, headers, runtime);
}

/**
 * Description: 查看指定的 Group ID 订阅了哪些 Topic。如果 Group ID 对应的消费者实例不在线，则查不到数据。
 * Summary: 查看在线订阅组
 */
async function querySofamqGroupsubdetailEx(request: QuerySofamqGroupsubdetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqGroupsubdetailResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.groupsubdetail.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSofamqInstancebaseinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需查询的实例 ID
  instanceId: string(name='instance_id'),
}

model GetSofamqInstancebaseinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 实例信息对象
  data?: InstanceBaseInfoDTO(name='data'),
}

/**
 * Description: 查询实例基本信息和收发消息的接入点
 * Summary: 查询实例基本信息
 */
async function getSofamqInstancebaseinfo(request: GetSofamqInstancebaseinfoRequest): GetSofamqInstancebaseinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSofamqInstancebaseinfoEx(request, headers, runtime);
}

/**
 * Description: 查询实例基本信息和收发消息的接入点
 * Summary: 查询实例基本信息
 */
async function getSofamqInstancebaseinfoEx(request: GetSofamqInstancebaseinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSofamqInstancebaseinfoResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.instancebaseinfo.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecSofamqConsumerresetoffsetRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需要查询的单元
  // 
  // 
  cell?: string(name='cell'),
  // 需查询的消费端 Group ID
  groupId: string(name='group_id'),
  // 需查询的 Group ID 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
  instanceId: string(name='instance_id'),
  // 重置位点到指定的时间戳，仅在 Type 为 1 时生效。
  resetTimestamp?: long(name='reset_timestamp'),
  // 需重置位点的 Topic 名称
  topic: string(name='topic'),
  // 消息清理类型。取值说明如下：
  // 
  // 0：清除所有消息
  // 1：清理到指定时间
  type: long(name='type'),
}

model ExecSofamqConsumerresetoffsetResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 重置指定的 Group ID 的消费位点到指定时间戳。本接口一般用于清理堆积消息，或者回溯消费。提供以下两种清理方式：清理所有消息、清理消费进度到指定的时间。
 * Summary: 重置消费位点
 */
async function execSofamqConsumerresetoffset(request: ExecSofamqConsumerresetoffsetRequest): ExecSofamqConsumerresetoffsetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execSofamqConsumerresetoffsetEx(request, headers, runtime);
}

/**
 * Description: 重置指定的 Group ID 的消费位点到指定时间戳。本接口一般用于清理堆积消息，或者回溯消费。提供以下两种清理方式：清理所有消息、清理消费进度到指定的时间。
 * Summary: 重置消费位点
 */
async function execSofamqConsumerresetoffsetEx(request: ExecSofamqConsumerresetoffsetRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecSofamqConsumerresetoffsetResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.consumerresetoffset.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqConsumeraccumulateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需要查询的 Group ID 所在的单元
  cell?: string(name='cell'),
  // 是否查询详细信息。取值说明如下：true：要查询详细信息；false：不查询详细信息（默认值）。
  detail?: boolean(name='detail'),
  // 需查询的消费端 Group ID
  groupId: string(name='group_id'),
  // 实例 ID。针对有独立命名空间的实例，该参数为必填。
  instanceId: string(name='instance_id'),
}

model QuerySofamqConsumeraccumulateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 指定 Consumer 的消费堆积情况
  data?: ConsumerAccumulateDTO(name='data'),
}

/**
 * Description: 消费堆积查询一般在生产环境中需要关注 Group ID 消费进度时使用，用于粗略判断消息消费情况和延迟情况。您不仅可以查到该 Group ID 订阅的所有 Topic 的消息堆积情况，还可以查到每个 Topic 各自的消息堆积情况。
 * Summary: 消费者堆积查询
 */
async function querySofamqConsumeraccumulate(request: QuerySofamqConsumeraccumulateRequest): QuerySofamqConsumeraccumulateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqConsumeraccumulateEx(request, headers, runtime);
}

/**
 * Description: 消费堆积查询一般在生产环境中需要关注 Group ID 消费进度时使用，用于粗略判断消息消费情况和延迟情况。您不仅可以查到该 Group ID 订阅的所有 Topic 的消息堆积情况，还可以查到每个 Topic 各自的消息堆积情况。
 * Summary: 消费者堆积查询
 */
async function querySofamqConsumeraccumulateEx(request: QuerySofamqConsumeraccumulateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqConsumeraccumulateResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.consumeraccumulate.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqConsumerconnectionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需要查询的 Group ID 所在的单元
  cell?: string(name='cell'),
  // 需查询的 Group ID
  groupId: string(name='group_id'),
  // 需查询的 Group ID 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
  instanceId: string(name='instance_id'),
}

model QuerySofamqConsumerconnectionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 指定 Group ID 的连接信息
  // 
  // 
  data?: ConsumerGetConnectionDTO(name='data'),
}

/**
 * Description: 判断指定 Group ID 的消费者是否在线，并获取详细的客户端连接的列表。
 * Summary: 查询指定当前客户端的连接情况。
 */
async function querySofamqConsumerconnection(request: QuerySofamqConsumerconnectionRequest): QuerySofamqConsumerconnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqConsumerconnectionEx(request, headers, runtime);
}

/**
 * Description: 判断指定 Group ID 的消费者是否在线，并获取详细的客户端连接的列表。
 * Summary: 查询指定当前客户端的连接情况。
 */
async function querySofamqConsumerconnectionEx(request: QuerySofamqConsumerconnectionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqConsumerconnectionResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.consumerconnection.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqConsumertimespanRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需查询的消费端 Group ID 所在的 Cell
  cell?: string(name='cell'),
  // 需查询的消费端 Group ID
  groupId: string(name='group_id'),
  // 需查询的消费端 Group ID 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
  instanceId: string(name='instance_id'),
  // 需查询的消费端 Group ID 订阅的 Topic
  topic: string(name='topic'),
}

model QuerySofamqConsumertimespanResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询结果
  data?: ConsumerTimeSpanDTO(name='data'),
}

/**
 * Description: 查询指定的 Group ID 订阅的 Topic 的最新消息时间戳以及消费的最新时间。可以查询某个 Topic 当前服务器上存在的消息的最新时间和最早时间，以及查询消费端最近消费的时间。本接口一般用于展示消费进度的概况，与 QueryMqSofamqConsumerAccumulate 接口配合使用。
 * Summary: 查询时间跨度
 */
async function querySofamqConsumertimespan(request: QuerySofamqConsumertimespanRequest): QuerySofamqConsumertimespanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqConsumertimespanEx(request, headers, runtime);
}

/**
 * Description: 查询指定的 Group ID 订阅的 Topic 的最新消息时间戳以及消费的最新时间。可以查询某个 Topic 当前服务器上存在的消息的最新时间和最早时间，以及查询消费端最近消费的时间。本接口一般用于展示消费进度的概况，与 QueryMqSofamqConsumerAccumulate 接口配合使用。
 * Summary: 查询时间跨度
 */
async function querySofamqConsumertimespanEx(request: QuerySofamqConsumertimespanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqConsumertimespanResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.consumertimespan.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqMessagetraceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需要查询的Cell名
  cell?: string(name='cell'),
  // 需查询的消息所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
  instanceId: string(name='instance_id'),
  // 需查询消息轨迹的消息 ID，即 Message ID
  msgId: string(name='msg_id'),
  // 消息的 Topic
  topic: string(name='topic'),
}

model QuerySofamqMessagetraceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询结果
  data?: MessageTraceDTO(name='data'),
}

/**
 * Description: 本接口的实现基于消息队列 Sofamq的内部位点机制，在大部分场景下判断结果可信，但如果应用方进行过重置位点已经清除消息等操作，则判断结果可能有误。
 * Summary: 判断目标消息是否曾被消费过
 */
async function querySofamqMessagetrace(request: QuerySofamqMessagetraceRequest): QuerySofamqMessagetraceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqMessagetraceEx(request, headers, runtime);
}

/**
 * Description: 本接口的实现基于消息队列 Sofamq的内部位点机制，在大部分场景下判断结果可信，但如果应用方进行过重置位点已经清除消息等操作，则判断结果可能有误。
 * Summary: 判断目标消息是否曾被消费过
 */
async function querySofamqMessagetraceEx(request: QuerySofamqMessagetraceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqMessagetraceResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.messagetrace.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSofamqMessagebymsgidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需查询的消息所在的单元
  cell?: string(name='cell'),
  // 需查询消息所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
  instanceId: string(name='instance_id'),
  // 需查询的消息的 ID，即 Message ID
  msgId: string(name='msg_id'),
  // 需查询的消息的 Topic
  topic: string(name='topic'),
}

model GetSofamqMessagebymsgidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询结果
  data?: MessageGetDTO(name='data'),
}

/**
 * Description: 根据指定的 Message ID，查询消息。该查询方式属于精确查询。查询条件需要的 Message ID 从每次消息发送成功的 SendResult 中获取，因此业务方必须存储每次发送消息的结果。
 * Summary: 按Message ID查询消息
 */
async function getSofamqMessagebymsgid(request: GetSofamqMessagebymsgidRequest): GetSofamqMessagebymsgidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSofamqMessagebymsgidEx(request, headers, runtime);
}

/**
 * Description: 根据指定的 Message ID，查询消息。该查询方式属于精确查询。查询条件需要的 Message ID 从每次消息发送成功的 SendResult 中获取，因此业务方必须存储每次发送消息的结果。
 * Summary: 按Message ID查询消息
 */
async function getSofamqMessagebymsgidEx(request: GetSofamqMessagebymsgidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSofamqMessagebymsgidResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.messagebymsgid.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqMessagebykeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需查询的消息所在的单元
  cell?: string(name='cell'),
  // 需查询的消息所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
  instanceId: string(name='instance_id'),
  // 需查询的消息的 Message Key
  key: string(name='key'),
  // 需查询的消息的 Topic
  topic: string(name='topic'),
}

model QuerySofamqMessagebykeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询结果
  data?: [ MessageGetDTO ](name='data'),
}

/**
 * Description: 根据指定的 Message Key，查询消息，该查询方式属于模糊查询。由于业务方的 Key 可能不唯一，所以查询结果可能为多条。
 * Summary: 按Message Key查询消息
 */
async function querySofamqMessagebykey(request: QuerySofamqMessagebykeyRequest): QuerySofamqMessagebykeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqMessagebykeyEx(request, headers, runtime);
}

/**
 * Description: 根据指定的 Message Key，查询消息，该查询方式属于模糊查询。由于业务方的 Key 可能不唯一，所以查询结果可能为多条。
 * Summary: 按Message Key查询消息
 */
async function querySofamqMessagebykeyEx(request: QuerySofamqMessagebykeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqMessagebykeyResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.messagebykey.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSofamqTracebymsgidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  //  查询的时间范围的起始时间点
  beginTime: long(name='begin_time'),
  // 需要查询的单元
  cell?: string(name='cell'),
  // 查询的时间范围的结束时间点
  endTime: long(name='end_time'),
  // 需查询的消息的 Topic 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
  instanceId: string(name='instance_id'),
  // 需查询的消息的 ID，即 Message ID
  msgId: string(name='msg_id'),
  // 需查询的消息的 Topic
  topic: string(name='topic'),
}

model GetSofamqTracebymsgidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  该查询任务的 ID。可根据该任务 ID，再调用 GetMqSofamqTraceResult 接口获取详细结果。
  queryId?: string(name='query_id'),
}

/**
 * Description: 已记录了某消息的 Message ID，如需根据此 Message ID 查询该消息的投递轨迹信息，可调用本接口创建查询任务。本接口返回任务 ID 后，可调用 GetMqSofamqTraceResult 接口传入任务 ID，以获取轨迹查询结果。
 * Summary: 通过MsgId创建轨迹查询任务
 */
async function getSofamqTracebymsgid(request: GetSofamqTracebymsgidRequest): GetSofamqTracebymsgidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSofamqTracebymsgidEx(request, headers, runtime);
}

/**
 * Description: 已记录了某消息的 Message ID，如需根据此 Message ID 查询该消息的投递轨迹信息，可调用本接口创建查询任务。本接口返回任务 ID 后，可调用 GetMqSofamqTraceResult 接口传入任务 ID，以获取轨迹查询结果。
 * Summary: 通过MsgId创建轨迹查询任务
 */
async function getSofamqTracebymsgidEx(request: GetSofamqTracebymsgidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSofamqTracebymsgidResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.tracebymsgid.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqTracebymsgkeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  //  查询的时间范围的起始时间点
  beginTime: long(name='begin_time'),
  // 需要查询的单元
  cell?: string(name='cell'),
  // 查询的时间范围的结束时间点
  endTime: long(name='end_time'),
  //  需查询的消息的 Topic 所对应的实例 ID
  instanceId: string(name='instance_id'),
  //  需查询的消息的 Message Key
  msgKey: string(name='msg_key'),
  // 需查询的消息的 Topic
  topic: string(name='topic'),
}

model QuerySofamqTracebymsgkeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 该查询任务的 ID。可根据该任务 ID，再调用 GetMqSofamqTraceResult 接口获取详细结果。
  queryId?: string(name='query_id'),
}

/**
 * Description: 已记录了 Message Key ，如需根据此 Message Key 查询该消息的投递轨迹信息，即可调用本接口创建查询任务。
 * Summary: 通过MsgKey创建轨迹查询任务
 */
async function querySofamqTracebymsgkey(request: QuerySofamqTracebymsgkeyRequest): QuerySofamqTracebymsgkeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqTracebymsgkeyEx(request, headers, runtime);
}

/**
 * Description: 已记录了 Message Key ，如需根据此 Message Key 查询该消息的投递轨迹信息，即可调用本接口创建查询任务。
 * Summary: 通过MsgKey创建轨迹查询任务
 */
async function querySofamqTracebymsgkeyEx(request: QuerySofamqTracebymsgkeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqTracebymsgkeyResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.tracebymsgkey.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSofamqTraceresultRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例 ID
  instanceId: string(name='instance_id'),
  // 消息轨迹查询的任务 ID
  queryId: string(name='query_id'),
}

model GetSofamqTraceresultResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 该查询任务的结果明细
  data?: TraceMapResultDTO(name='data'),
}

/**
 * Description: 已根据 Message ID 或者 Message Key 创建了轨迹查询任务，并得到了查询任务的 ID。此时，可调用本接口通过传入该查询任务 ID，获取对应的轨迹查询的结果明细。
 * Summary: 获取轨迹查询结果
 */
async function getSofamqTraceresult(request: GetSofamqTraceresultRequest): GetSofamqTraceresultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSofamqTraceresultEx(request, headers, runtime);
}

/**
 * Description: 已根据 Message ID 或者 Message Key 创建了轨迹查询任务，并得到了查询任务的 ID。此时，可调用本接口通过传入该查询任务 ID，获取对应的轨迹查询的结果明细。
 * Summary: 获取轨迹查询结果
 */
async function getSofamqTraceresultEx(request: GetSofamqTraceresultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSofamqTraceresultResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.traceresult.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqInputtpsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询区间起始毫秒时间戳
  beginTime: long(name='begin_time'),
  // 需要查询的Cell名
  cell?: string(name='cell'),
  // 查询区间终止毫秒时间戳
  endTime: long(name='end_time'),
  // 指定的 Topic 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
  instanceId: string(name='instance_id'),
  // 采样周期，单位分钟，取值可为 1、5、10
  period?: long(name='period'),
  // 需查询的 Topic 名称
  topic: string(name='topic'),
  // 查询的类型。取值说明如下：
  // 
  // 0：查询指定时间段内 Topic 的写入量
  // 1：查询指定时间段内 Topic 的 TPS 曲线数据
  type: long(name='type'),
}

model QuerySofamqInputtpsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据集合
  data?: TrendTpsDTO(name='data'),
}

/**
 * Description: 您可以使用本接口获取在线上环境统计的 Topic 的消息数据信息，可以根据需要择查询指定时间段内 Topic 的写入量或者 TPS 曲线数据。
 * Summary: 查询一段时间写入报表数据
 */
async function querySofamqInputtps(request: QuerySofamqInputtpsRequest): QuerySofamqInputtpsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqInputtpsEx(request, headers, runtime);
}

/**
 * Description: 您可以使用本接口获取在线上环境统计的 Topic 的消息数据信息，可以根据需要择查询指定时间段内 Topic 的写入量或者 TPS 曲线数据。
 * Summary: 查询一段时间写入报表数据
 */
async function querySofamqInputtpsEx(request: QuerySofamqInputtpsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqInputtpsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.inputtps.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqOutputtpsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  //  查询区间起始毫秒时间戳
  beginTime: string(name='begin_time'),
  // 需要查询的Cell名
  cell?: string(name='cell'),
  //  查询区间终止毫秒时间戳
  endTime: string(name='end_time'),
  //  需要查询的 Group ID
  groupId: string(name='group_id'),
  // 需统计数据的 Group ID 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
  instanceId: string(name='instance_id'),
  // 采样周期，单位分钟，取值可为 1、5、10
  period?: long(name='period'),
  //  需要查询的 Topic 名称
  topic: string(name='topic'),
  // 查询的类型。取值说明如下：
  // 
  // 0：查询消费消息总量的统计曲线
  // 1：查询消费消息 TPS 的统计曲线
  type: long(name='type'),
}

model QuerySofamqOutputtpsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据集合
  data?: TrendTpsDTO(name='data'),
}

/**
 * Description: 线上环境生成消费数据报表时，可以使用本接口查询指定的 Group ID 在一段时间内的以下统计信息：

消费消息总量的统计曲线
消费消息 TPS 的统计曲线
 * Summary: 查询一段时间内消费消息统计信息
 */
async function querySofamqOutputtps(request: QuerySofamqOutputtpsRequest): QuerySofamqOutputtpsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqOutputtpsEx(request, headers, runtime);
}

/**
 * Description: 线上环境生成消费数据报表时，可以使用本接口查询指定的 Group ID 在一段时间内的以下统计信息：

消费消息总量的统计曲线
消费消息 TPS 的统计曲线
 * Summary: 查询一段时间内消费消息统计信息
 */
async function querySofamqOutputtpsEx(request: QuerySofamqOutputtpsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqOutputtpsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.outputtps.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSofamqDlqbyidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需要查询的单元
  cell?: string(name='cell'),
  // 需查询的消费端 Group ID
  groupId: string(name='group_id'),
  // 需查询消息所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
  instanceId: string(name='instance_id'),
  // 需查询的消息的 ID，即 Message ID
  msgId: string(name='msg_id'),
}

model GetSofamqDlqbyidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询结果
  data?: MessageGetDTO(name='data'),
}

/**
 * Description: 根据 Message ID，查询死信消息。该查询方式属于精确查询。查询条件需要的 Message ID 从消息发送成功的 SendResult 中获取，或者从批量查询的接口中获取。
 * Summary: 按Message ID查询死信消息
 */
async function getSofamqDlqbyid(request: GetSofamqDlqbyidRequest): GetSofamqDlqbyidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSofamqDlqbyidEx(request, headers, runtime);
}

/**
 * Description: 根据 Message ID，查询死信消息。该查询方式属于精确查询。查询条件需要的 Message ID 从消息发送成功的 SendResult 中获取，或者从批量查询的接口中获取。
 * Summary: 按Message ID查询死信消息
 */
async function getSofamqDlqbyidEx(request: GetSofamqDlqbyidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSofamqDlqbyidResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.dlqbyid.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecSofamqDlqresendbyidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需要查询的单元
  cell?: string(name='cell'),
  // 需查询的消费端 Group ID
  groupId: string(name='group_id'),
  // 需查询消息所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
  instanceId: string(name='instance_id'),
  // 需查询的消息的 ID，即 Message ID
  msgId: string(name='msg_id'),
}

model ExecSofamqDlqresendbyidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 重发指定 Message ID 的死信消息。使该死信消息复活，让消息能够被 Consumer 再消费一次。

死信消息已达最大重试次数，若重发后再次消费失败，则死信队列中将增加一条 Message ID 相同的消息，可通过控制台死信队列的查询页面或者管控 API 查看该结果。您可通过同一 Message ID 的消息出现次数判断重发后依然消费失败的次数。
 * Summary: 重新发送死信消息
 */
async function execSofamqDlqresendbyid(request: ExecSofamqDlqresendbyidRequest): ExecSofamqDlqresendbyidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execSofamqDlqresendbyidEx(request, headers, runtime);
}

/**
 * Description: 重发指定 Message ID 的死信消息。使该死信消息复活，让消息能够被 Consumer 再消费一次。

死信消息已达最大重试次数，若重发后再次消费失败，则死信队列中将增加一条 Message ID 相同的消息，可通过控制台死信队列的查询页面或者管控 API 查看该结果。您可通过同一 Message ID 的消息出现次数判断重发后依然消费失败的次数。
 * Summary: 重新发送死信消息
 */
async function execSofamqDlqresendbyidEx(request: ExecSofamqDlqresendbyidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecSofamqDlqresendbyidResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.dlqresendbyid.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqNamespaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // instance_id
  instanceId?: string(name='instance_id'),
}

model ListSofamqNamespaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // ns
  data?: [ NamespaceDO ](name='data'),
}

/**
 * Description: list ns
 * Summary: list ns
 */
async function listSofamqNamespace(request: ListSofamqNamespaceRequest): ListSofamqNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqNamespaceEx(request, headers, runtime);
}

/**
 * Description: list ns
 * Summary: list ns
 */
async function listSofamqNamespaceEx(request: ListSofamqNamespaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqNamespaceResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.namespace.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendSofamqMessageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 目标单元
  cell?: string(name='cell'),
  // 实例 ID
  instanceId: string(name='instance_id'),
  // 消息的 Message Key
  key?: string(name='key'),
  //  消息内容
  message: string(name='message'),
  // 消息 Tag
  tag?: string(name='tag'),
  // 需要发送的 Topic 名称
  topic: string(name='topic'),
  // 使用的Schema的版本号
  schemaVersion?: long(name='schema_version'),
  // 消息属性 key-value
  properties?: string(name='properties'),
}

model SendSofamqMessageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 消息的 Message ID
  msgId?: string(name='msg_id'),
}

/**
 * Description: 发送测试消息
 * Summary: 发送测试信息
 */
async function sendSofamqMessage(request: SendSofamqMessageRequest): SendSofamqMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendSofamqMessageEx(request, headers, runtime);
}

/**
 * Description: 发送测试消息
 * Summary: 发送测试信息
 */
async function sendSofamqMessageEx(request: SendSofamqMessageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendSofamqMessageResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.message.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushSofamqMessageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 单元名称
  cell?: string(name='cell'),
  // 需要接收消息的 Client ID
  clientId: string(name='client_id'),
  // 需要 push 的消费组 Group ID
  groupId: string(name='group_id'),
  // 实例 ID
  instanceId: string(name='instance_id'),
  // 需要 push 的消息 Message ID
  msgId: string(name='msg_id'),
  // 需要发送的 Topic 名称
  topic: string(name='topic'),
}

model PushSofamqMessageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 消费验证
 * Summary: 消费验证
 */
async function pushSofamqMessage(request: PushSofamqMessageRequest): PushSofamqMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushSofamqMessageEx(request, headers, runtime);
}

/**
 * Description: 消费验证
 * Summary: 消费验证
 */
async function pushSofamqMessageEx(request: PushSofamqMessageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushSofamqMessageResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.message.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqNodebynamespaceidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // instanceid
  instanceId: string(name='instance_id'),
}

model QuerySofamqNodebynamespaceidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // ndoes
  data?: [ NodeDO ](name='data'),
}

/**
 * Description: getNodesByNamespaceId
 * Summary: get nodes by ns id
 */
async function querySofamqNodebynamespaceid(request: QuerySofamqNodebynamespaceidRequest): QuerySofamqNodebynamespaceidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqNodebynamespaceidEx(request, headers, runtime);
}

/**
 * Description: getNodesByNamespaceId
 * Summary: get nodes by ns id
 */
async function querySofamqNodebynamespaceidEx(request: QuerySofamqNodebynamespaceidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqNodebynamespaceidResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.nodebynamespaceid.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqRoombynamespaceidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // instance id
  instanceId: string(name='instance_id'),
}

model QuerySofamqRoombynamespaceidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // rooms
  data?: [ RoomDO ](name='data'),
}

/**
 * Description: query room by ns
 * Summary: query room by ns
 */
async function querySofamqRoombynamespaceid(request: QuerySofamqRoombynamespaceidRequest): QuerySofamqRoombynamespaceidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqRoombynamespaceidEx(request, headers, runtime);
}

/**
 * Description: query room by ns
 * Summary: query room by ns
 */
async function querySofamqRoombynamespaceidEx(request: QuerySofamqRoombynamespaceidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqRoombynamespaceidResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.roombynamespaceid.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqMessagebytopicRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  //  查询范围的起始时间戳
  beginTime: long(name='begin_time'),
  // 需查询的单元
  cell?: string(name='cell'),
  // 查询范围的终止时间戳
  endTime: long(name='end_time'),
  // 需查询的消息所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
  instanceId: string(name='instance_id'),
  // 页码
  pageNum: long(name='page_num'),
  // 每页显示条数
  pageSize: long(name='page_size'),
  // 查询任务的 ID。首次查询不需要输入，后续取消息必须传入，根据前一次的返回结果取出该字段。
  taskId?: string(name='task_id'),
  // 需查询的消息的 Topic 名称
  topic: string(name='topic'),
}

model QuerySofamqMessagebytopicResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分页查询Message
  data?: MessageGetPageDTO(name='data'),
}

/**
 * Description: 通过传入 Topic 名称和时间段，分页查询指定时间段内该 Topic 内存在的所有消息。
 * Summary: 按Topic查询消息
 */
async function querySofamqMessagebytopic(request: QuerySofamqMessagebytopicRequest): QuerySofamqMessagebytopicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqMessagebytopicEx(request, headers, runtime);
}

/**
 * Description: 通过传入 Topic 名称和时间段，分页查询指定时间段内该 Topic 内存在的所有消息。
 * Summary: 按Topic查询消息
 */
async function querySofamqMessagebytopicEx(request: QuerySofamqMessagebytopicRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqMessagebytopicResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.messagebytopic.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqDlqbygroupidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询范围的起始时间戳
  // 
  // 
  beginTime: long(name='begin_time'),
  // 需要查询的单元
  cell?: string(name='cell'),
  // 查询范围的终止时间戳
  endTime: long(name='end_time'),
  // 需查询的消费端 Group ID
  groupId: string(name='group_id'),
  // 需查询的消息所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
  instanceId: string(name='instance_id'),
  // 页码
  pageNum: long(name='page_num'),
  // 每页条数
  pageSize: long(name='page_size'),
  // 查询任务的 ID。首次查询不需要输入，后续获取消息必须传入，根据前一次的返回结果取出该字段。
  taskId?: string(name='task_id'),
}

model QuerySofamqDlqbygroupidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 消息内容
  data?: MessageGetPageDTO(name='data'),
}

/**
 * Description: 通过传入 Group ID 和时间段，分页查询指定时间段内该 Group ID 内存在的所有死信消息。
 * Summary: 按Group ID查询死信消息
 */
async function querySofamqDlqbygroupid(request: QuerySofamqDlqbygroupidRequest): QuerySofamqDlqbygroupidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqDlqbygroupidEx(request, headers, runtime);
}

/**
 * Description: 通过传入 Group ID 和时间段，分页查询指定时间段内该 Group ID 内存在的所有死信消息。
 * Summary: 按Group ID查询死信消息
 */
async function querySofamqDlqbygroupidEx(request: QuerySofamqDlqbygroupidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqDlqbygroupidResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.dlqbygroupid.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSofamqConsumerstatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需要查询的单元
  cell?: string(name='cell'),
  // 是否查询详细信息。取值说明如下：true：要查询详细信息；false：不查询详细信息。
  detail?: boolean(name='detail'),
  // 需要查询的消费端 Group ID
  groupId: string(name='group_id'),
  // 需查询的 Group ID 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
  instanceId: string(name='instance_id'),
  // 是否打印 Jstack 信息
  needJstack?: boolean(name='need_jstack'),
}

model GetSofamqConsumerstatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询结果
  data?: ConsumerStatusDTO(name='data'),
}

/**
 * Description: 查询指定 Group ID 的详细状态数据，包含订阅关系检查、消费 TPS 统计、负载均衡状态、消费端连接等。
 * Summary: 查询消费状态
 */
async function getSofamqConsumerstatus(request: GetSofamqConsumerstatusRequest): GetSofamqConsumerstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSofamqConsumerstatusEx(request, headers, runtime);
}

/**
 * Description: 查询指定 Group ID 的详细状态数据，包含订阅关系检查、消费 TPS 统计、负载均衡状态、消费端连接等。
 * Summary: 查询消费状态
 */
async function getSofamqConsumerstatusEx(request: GetSofamqConsumerstatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSofamqConsumerstatusResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.consumerstatus.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSofamqTopicremarkRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例 ID
  instanceId: string(name='instance_id'),
  // Topic 描述信息
  remark: string(name='remark'),
  // 需更新的 Topic 名称，一个用户下不可重复。
  topic: string(name='topic'),
}

model UpdateSofamqTopicremarkResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新指定 Topic 的描述信息。
 * Summary: 更新Topic的描述
 */
async function updateSofamqTopicremark(request: UpdateSofamqTopicremarkRequest): UpdateSofamqTopicremarkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSofamqTopicremarkEx(request, headers, runtime);
}

/**
 * Description: 更新指定 Topic 的描述信息。
 * Summary: 更新Topic的描述
 */
async function updateSofamqTopicremarkEx(request: UpdateSofamqTopicremarkRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSofamqTopicremarkResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.topicremark.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSofamqDatacenterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // cluster
  cluster?: string(name='cluster'),
  // datacenter
  datacenter?: string(name='datacenter'),
  // room
  room?: string(name='room'),
}

model CreateSofamqDatacenterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: datacenter list
 * Summary: datacenter
 */
async function createSofamqDatacenter(request: CreateSofamqDatacenterRequest): CreateSofamqDatacenterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSofamqDatacenterEx(request, headers, runtime);
}

/**
 * Description: datacenter list
 * Summary: datacenter
 */
async function createSofamqDatacenterEx(request: CreateSofamqDatacenterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSofamqDatacenterResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.datacenter.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqDatacenterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // instance id
  instanceId?: string(name='instance_id'),
  // cluster
  cluster?: string(name='cluster'),
  // datacenter
  datacenter?: string(name='datacenter'),
  // room
  room?: string(name='room'),
}

model ListSofamqDatacenterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // datacenter
  data?: [ DataCenterDO ](name='data'),
}

/**
 * Description: datacenter list
 * Summary: datacenter list
 */
async function listSofamqDatacenter(request: ListSofamqDatacenterRequest): ListSofamqDatacenterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqDatacenterEx(request, headers, runtime);
}

/**
 * Description: datacenter list
 * Summary: datacenter list
 */
async function listSofamqDatacenterEx(request: ListSofamqDatacenterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqDatacenterResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.datacenter.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqConfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 页号
  pageNum: long(name='page_num'),
  // 页面大小
  pageSize: long(name='page_size'),
  // key
  property?: string(name='property'),
  // target name
  targetName?: string(name='target_name'),
  // cluster or broker type
  targetType?: long(name='target_type'),
}

model ListSofamqConfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // configs
  data?: ConfigPageDTO(name='data'),
}

/**
 * Description: config list
 * Summary: config list
 */
async function listSofamqConfig(request: ListSofamqConfigRequest): ListSofamqConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqConfigEx(request, headers, runtime);
}

/**
 * Description: config list
 * Summary: config list
 */
async function listSofamqConfigEx(request: ListSofamqConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqConfigResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.config.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSofamqGroupremarkRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需配置更新的 Group ID
  groupId: string(name='group_id'),
  // 实例 ID
  instanceId: string(name='instance_id'),
  // 描述信息
  remark: string(name='remark'),
}

model UpdateSofamqGroupremarkResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新指定 Group 的描述信息。
 * Summary: 更新Group的描述
 */
async function updateSofamqGroupremark(request: UpdateSofamqGroupremarkRequest): UpdateSofamqGroupremarkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSofamqGroupremarkEx(request, headers, runtime);
}

/**
 * Description: 更新指定 Group 的描述信息。
 * Summary: 更新Group的描述
 */
async function updateSofamqGroupremarkEx(request: UpdateSofamqGroupremarkRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSofamqGroupremarkResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.groupremark.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DownloadSofamqMessageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需配置的 Group ID 所对应的实例 ID
  instanceId: string(name='instance_id'),
  // topic名
  topic: string(name='topic'),
  //  需查询的消息的 ID，即 Message ID
  msgId: string(name='msg_id'),
  // 需要查询的Cell名
  cell?: string(name='cell'),
}

model DownloadSofamqMessageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 下载消息
 * Summary: 下载消息
 */
async function downloadSofamqMessage(request: DownloadSofamqMessageRequest): DownloadSofamqMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return downloadSofamqMessageEx(request, headers, runtime);
}

/**
 * Description: 下载消息
 * Summary: 下载消息
 */
async function downloadSofamqMessageEx(request: DownloadSofamqMessageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DownloadSofamqMessageResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.message.download', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMetricsTopicRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 结束时间
  // 
  endTime: long(name='end_time'),
  // 实例 ID
  instanceId: string(name='instance_id'),
  // 开始时间
  startTime: long(name='start_time'),
  // 需要查询的 Topic 名称。如果 Topic 为 "ALL"，则查询当前租户下所有的 Topic 的数据。
  topic: string(name='topic'),
}

model QueryMetricsTopicResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结束时间
  // 
  endTime?: long(name='end_time'),
  // 每个数据点间隔（毫秒）
  interval?: long(name='interval'),
  // 数据点列表
  // 
  metrics?: [ TopicMetricItem ](name='metrics'),
  // 开始时间
  // 
  startTime?: long(name='start_time'),
  // Topic 名称
  topic?: string(name='topic'),
}

/**
 * Description: 获取指定或全部的 Topic 资源监控统计信息。
 * Summary: 获取 topic 统计信息
 */
async function queryMetricsTopic(request: QueryMetricsTopicRequest): QueryMetricsTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMetricsTopicEx(request, headers, runtime);
}

/**
 * Description: 获取指定或全部的 Topic 资源监控统计信息。
 * Summary: 获取 topic 统计信息
 */
async function queryMetricsTopicEx(request: QueryMetricsTopicRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMetricsTopicResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.metrics.topic.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMetricsBacklogRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 结束时间
  // 
  endTime: long(name='end_time'),
  // 实例 ID
  // 
  instanceId: string(name='instance_id'),
  // 开始时间
  startTime: long(name='start_time'),
}

model QueryMetricsBacklogResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结束时间
  endTime?: long(name='end_time'),
  // 每个时间点间隔（毫秒）
  interval?: long(name='interval'),
  // 数据点
  // 
  metrics?: [ BacklogMetricItem ](name='metrics'),
  // 开始时间
  startTime?: long(name='start_time'),
}

/**
 * Description: 查询指定时间范围内的积压数据。
 * Summary: 查看积压数据
 */
async function queryMetricsBacklog(request: QueryMetricsBacklogRequest): QueryMetricsBacklogResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMetricsBacklogEx(request, headers, runtime);
}

/**
 * Description: 查询指定时间范围内的积压数据。
 * Summary: 查看积压数据
 */
async function queryMetricsBacklogEx(request: QueryMetricsBacklogRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMetricsBacklogResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.metrics.backlog.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMetricsOverviewRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例 ID
  instanceId: string(name='instance_id'),
}

model QueryMetricsOverviewResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 消息堆积数量
  backlogNum?: long(name='backlog_num'),
  // 死信消息数量
  dlqNum?: long(name='dlq_num'),
  // 当前租户消费组数量
  groupNum?: long(name='group_num'),
  // 订阅关系数量
  subscriptionNum?: long(name='subscription_num'),
  // 当前租户下的 Topic 数量
  topicNum?: long(name='topic_num'),
}

/**
 * Description: 查询监控数据概览信息，包括消息堆积数量、死信消息数量、订阅关系数量等。
 * Summary: 监控数据概览
 */
async function queryMetricsOverview(request: QueryMetricsOverviewRequest): QueryMetricsOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMetricsOverviewEx(request, headers, runtime);
}

/**
 * Description: 查询监控数据概览信息，包括消息堆积数量、死信消息数量、订阅关系数量等。
 * Summary: 监控数据概览
 */
async function queryMetricsOverviewEx(request: QueryMetricsOverviewRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMetricsOverviewResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.metrics.overview.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqRouterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 目标单元
  destinationCell?: string(name='destination_cell'),
  // 目标实例 ID
  destinationInstanceId: string(name='destination_instance_id'),
  // 目标 Topic
  destinationTopic?: string(name='destination_topic'),
  // 实例 ID
  instanceId: string(name='instance_id'),
  // 页码
  pageNum: long(name='page_num'),
  // 每页显示条数
  pageSize: long(name='page_size'),
  // 源单元
  sourceCell?: string(name='source_cell'),
  // 源实例 ID
  sourceInstanceId: string(name='source_instance_id'),
  // 源 Topic
  sourceTopic?: string(name='source_topic'),
}

model ListSofamqRouterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 消息路由任务列表页
  data?: RouterPageDO(name='data'),
}

/**
 * Description: 查询消息路由列表信息。
 * Summary: 查询路由列表
 */
async function listSofamqRouter(request: ListSofamqRouterRequest): ListSofamqRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqRouterEx(request, headers, runtime);
}

/**
 * Description: 查询消息路由列表信息。
 * Summary: 查询路由列表
 */
async function listSofamqRouterEx(request: ListSofamqRouterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqRouterResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.router.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSofamqRouterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 消费端 Group
  consumerId?: string(name='consumer_id'),
  // 消费起始位点。取值范围：0：最小位点；1：最大位点；2：时间戳。
  consumeFromType: long(name='consume_from_type'),
  // 消费起始位点时间戳，时间戳的值，单位是秒
  consumeFromValue?: long(name='consume_from_value'),
  // 消费终止位点。取值范围：0：最小位点；1：最大位点；2：时间戳。
  consumeToType?: long(name='consume_to_type'),
  // 消费终止位点时间戳，时间戳的值，单位是秒
  consumeToValue?: long(name='consume_to_value'),
  // 描述信息
  description?: string(name='description'),
  // 目标单元
  destinationCell: string(name='destination_cell'),
  // 目标实例 ID
  destinationInstanceId: string(name='destination_instance_id'),
  // 目标 Topic	
  destinationTopic: string(name='destination_topic'),
  // 容灾标识
  disaster?: boolean(name='disaster'),
  // 容灾机房
  disasterRecoveryDatacenter?: string(name='disaster_recovery_datacenter'),
  // 实例 ID
  instanceId: string(name='instance_id'),
  // 源单元
  sourceCell: string(name='source_cell'),
  // 源实例 ID	
  sourceInstanceId: string(name='source_instance_id'),
  // 源 Topic
  sourceTopic: string(name='source_topic'),
  // 过滤 Tag	
  tag?: string(name='tag'),
  // 任务状态。取值说明：0：初始化；1：工作中；2：停止。
  taskStatus?: long(name='task_status'),
  // 任务类型。取值范围： 0：LDC 复制；1：非 LDC；2：LDC 容灾。	
  taskType: long(name='task_type'),
}

model CreateSofamqRouterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建一个消息路由任务。
 * Summary: 创建路由
 */
async function createSofamqRouter(request: CreateSofamqRouterRequest): CreateSofamqRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSofamqRouterEx(request, headers, runtime);
}

/**
 * Description: 创建一个消息路由任务。
 * Summary: 创建路由
 */
async function createSofamqRouterEx(request: CreateSofamqRouterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSofamqRouterResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.router.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSofamqNodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: long(name='id'),
}

model DeleteSofamqNodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: delete node
 * Summary: delete node
 */
async function deleteSofamqNode(request: DeleteSofamqNodeRequest): DeleteSofamqNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSofamqNodeEx(request, headers, runtime);
}

/**
 * Description: delete node
 * Summary: delete node
 */
async function deleteSofamqNodeEx(request: DeleteSofamqNodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSofamqNodeResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.node.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSofamqRoomRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: long(name='id'),
}

model DeleteSofamqRoomResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: delete room
 * Summary: delete room
 */
async function deleteSofamqRoom(request: DeleteSofamqRoomRequest): DeleteSofamqRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSofamqRoomEx(request, headers, runtime);
}

/**
 * Description: delete room
 * Summary: delete room
 */
async function deleteSofamqRoomEx(request: DeleteSofamqRoomRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSofamqRoomResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.room.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSofamqCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: long(name='id'),
  // instance id
  instanceId: string(name='instance_id'),
}

model DeleteSofamqCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: del cell
 * Summary: del cell
 */
async function deleteSofamqCell(request: DeleteSofamqCellRequest): DeleteSofamqCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSofamqCellEx(request, headers, runtime);
}

/**
 * Description: del cell
 * Summary: del cell
 */
async function deleteSofamqCellEx(request: DeleteSofamqCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSofamqCellResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.cell.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSofamqClusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: long(name='id'),
}

model DeleteSofamqClusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: del cluster
 * Summary: del cluster
 */
async function deleteSofamqCluster(request: DeleteSofamqClusterRequest): DeleteSofamqClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSofamqClusterEx(request, headers, runtime);
}

/**
 * Description: del cluster
 * Summary: del cluster
 */
async function deleteSofamqClusterEx(request: DeleteSofamqClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSofamqClusterResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.cluster.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSofamqNamespaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: long(name='id'),
  // instance id
  instanceId: string(name='instance_id'),
}

model DeleteSofamqNamespaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: del ns
 * Summary: del ns
 */
async function deleteSofamqNamespace(request: DeleteSofamqNamespaceRequest): DeleteSofamqNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSofamqNamespaceEx(request, headers, runtime);
}

/**
 * Description: del ns
 * Summary: del ns
 */
async function deleteSofamqNamespaceEx(request: DeleteSofamqNamespaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSofamqNamespaceResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.namespace.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSofamqDatacenterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: long(name='id'),
}

model DeleteSofamqDatacenterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: del dc
 * Summary: del dc
 */
async function deleteSofamqDatacenter(request: DeleteSofamqDatacenterRequest): DeleteSofamqDatacenterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSofamqDatacenterEx(request, headers, runtime);
}

/**
 * Description: del dc
 * Summary: del dc
 */
async function deleteSofamqDatacenterEx(request: DeleteSofamqDatacenterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSofamqDatacenterResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.datacenter.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSofamqRouterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 路由任务 ID
  routerId: long(name='router_id'),
  // 实例 ID
  instanceId: string(name='instance_id'),
}

model DeleteSofamqRouterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除指定的消息路由任务。
 * Summary: 删除路由
 */
async function deleteSofamqRouter(request: DeleteSofamqRouterRequest): DeleteSofamqRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSofamqRouterEx(request, headers, runtime);
}

/**
 * Description: 删除指定的消息路由任务。
 * Summary: 删除路由
 */
async function deleteSofamqRouterEx(request: DeleteSofamqRouterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSofamqRouterResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.router.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSofamqConfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // property
  property: string(name='property'),
  // target_name
  targetName: string(name='target_name'),
  // target_type
  targetType: long(name='target_type'),
  // value
  value: string(name='value'),
  // 生效范围，三板斧使用
  scope?: string(name='scope'),
}

model CreateSofamqConfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: create config
 * Summary: create config
 */
async function createSofamqConfig(request: CreateSofamqConfigRequest): CreateSofamqConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSofamqConfigEx(request, headers, runtime);
}

/**
 * Description: create config
 * Summary: create config
 */
async function createSofamqConfigEx(request: CreateSofamqConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSofamqConfigResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.config.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // instance_id
  instanceId?: string(name='instance_id'),
}

model QuerySofamqCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // cells
  data?: [ CellDO ](name='data'),
}

/**
 * Description: query cells
 * Summary: query cells
 */
async function querySofamqCell(request: QuerySofamqCellRequest): QuerySofamqCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqCellEx(request, headers, runtime);
}

/**
 * Description: query cells
 * Summary: query cells
 */
async function querySofamqCellEx(request: QuerySofamqCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqCellResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.cell.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqRouterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // instanceId
  instanceId: string(name='instance_id'),
}

model QuerySofamqRouterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // router
  data?: [ RouterConfigDO ](name='data'),
}

/**
 * Description: 查询路由
 * Summary: 查询路由
 */
async function querySofamqRouter(request: QuerySofamqRouterRequest): QuerySofamqRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqRouterEx(request, headers, runtime);
}

/**
 * Description: 查询路由
 * Summary: 查询路由
 */
async function querySofamqRouterEx(request: QuerySofamqRouterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqRouterResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.router.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetMiddlewareInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // curr_tenant
  currTenant: string(name='curr_tenant'),
  // curr_workspace
  currWorkspace: string(name='curr_workspace'),
}

model GetMiddlewareInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // instanceid
  data?: string(name='data'),
}

/**
 * Description: get instance
 * Summary: get instance
 */
async function getMiddlewareInstance(request: GetMiddlewareInstanceRequest): GetMiddlewareInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getMiddlewareInstanceEx(request, headers, runtime);
}

/**
 * Description: get instance
 * Summary: get instance
 */
async function getMiddlewareInstanceEx(request: GetMiddlewareInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetMiddlewareInstanceResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.middleware.instance.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetMiddlewareEndpointRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // instance id
  instanceId: string(name='instance_id'),
}

model GetMiddlewareEndpointResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // endpoint
  data?: string(name='data'),
}

/**
 * Description: get endpoint
 * Summary: get endpoint
 */
async function getMiddlewareEndpoint(request: GetMiddlewareEndpointRequest): GetMiddlewareEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getMiddlewareEndpointEx(request, headers, runtime);
}

/**
 * Description: get endpoint
 * Summary: get endpoint
 */
async function getMiddlewareEndpointEx(request: GetMiddlewareEndpointRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetMiddlewareEndpointResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.middleware.endpoint.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqCellbytypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // instance id
  instanceId: string(name='instance_id'),
}

model QuerySofamqCellbytypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // cells
  data?: [ CellGroupDO ](name='data'),
}

/**
 * Description: cellbytype
 * Summary: cellbytype
 */
async function querySofamqCellbytype(request: QuerySofamqCellbytypeRequest): QuerySofamqCellbytypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqCellbytypeEx(request, headers, runtime);
}

/**
 * Description: cellbytype
 * Summary: cellbytype
 */
async function querySofamqCellbytypeEx(request: QuerySofamqCellbytypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqCellbytypeResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.cellbytype.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqTraceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例 ID
  instanceId: string(name='instance_id'),
  // 页码
  pageNum: long(name='page_num'),
  // 每页显示条数
  pageSize: long(name='page_size'),
  // 模糊查询项，可以为 Topic、Message ID 或 Message Key。
  queryItem?: string(name='query_item'),
}

model ListSofamqTraceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询返回的数据集合
  data?: TracePageDTO(name='data'),
}

/**
 * Description: 查询指定实例下的消息轨迹查询任务列表信息。
 * Summary: 查询trace请求列表
 */
async function listSofamqTrace(request: ListSofamqTraceRequest): ListSofamqTraceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqTraceEx(request, headers, runtime);
}

/**
 * Description: 查询指定实例下的消息轨迹查询任务列表信息。
 * Summary: 查询trace请求列表
 */
async function listSofamqTraceEx(request: ListSofamqTraceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqTraceResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.trace.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSofamqTraceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例 ID
  instanceId: string(name='instance_id'),
  // 待删除的消息轨迹查询任务 ID
  queryId: string(name='query_id'),
}

model DeleteSofamqTraceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除指定的消息轨迹查询任务。
 * Summary: 删除trace查询任务
 */
async function deleteSofamqTrace(request: DeleteSofamqTraceRequest): DeleteSofamqTraceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSofamqTraceEx(request, headers, runtime);
}

/**
 * Description: 删除指定的消息轨迹查询任务。
 * Summary: 删除trace查询任务
 */
async function deleteSofamqTraceEx(request: DeleteSofamqTraceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSofamqTraceResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.trace.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqTracebytopicRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询的时间范围的起始时间点
  beginTime: long(name='begin_time'),
  // 需要查询的单元
  cell?: string(name='cell'),
  // 查询的时间范围的结束时间点
  endTime: long(name='end_time'),
  // 实例 ID
  instanceId: string(name='instance_id'),
  // 需查询的消息的 Topic
  topic: string(name='topic'),
}

model QuerySofamqTracebytopicResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 该消息轨迹查询任务的 ID
  queryId?: string(name='query_id'),
}

/**
 * Description: 通过传入 Topic 名称创建消息轨迹查询任务，得到该查询任务的 ID。
 * Summary: 通过Topic创建轨迹查询任务
 */
async function querySofamqTracebytopic(request: QuerySofamqTracebytopicRequest): QuerySofamqTracebytopicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqTracebytopicEx(request, headers, runtime);
}

/**
 * Description: 通过传入 Topic 名称创建消息轨迹查询任务，得到该查询任务的 ID。
 * Summary: 通过Topic创建轨迹查询任务
 */
async function querySofamqTracebytopicEx(request: QuerySofamqTracebytopicRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqTracebytopicResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.tracebytopic.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushSpiPaycallbackRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // JSON data
  data: string(name='data'),
  // request_id
  requestId: string(name='request_id'),
}

model PushSpiPaycallbackResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回 code
  code?: string(name='code'),
  // json data
  data?: string(name='data'),
  // 返回 message
  message?: string(name='message'),
  // 请求是否成功
  success?: boolean(name='success'),
  // synchro
  synchro?: string(name='synchro'),
  // request_id
  requestId?: string(name='request_id'),
}

/**
 * Description: sofamq 支付后回调
 * Summary: sofamq 支付后回调
 */
async function pushSpiPaycallback(request: PushSpiPaycallbackRequest): PushSpiPaycallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushSpiPaycallbackEx(request, headers, runtime);
}

/**
 * Description: sofamq 支付后回调
 * Summary: sofamq 支付后回调
 */
async function pushSpiPaycallbackEx(request: PushSpiPaycallbackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushSpiPaycallbackResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.spi.paycallback.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushSpiCompletecommodityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // data
  data: string(name='data'),
}

model PushSpiCompletecommodityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // code
  code?: string(name='code'),
  // data
  data?: string(name='data'),
  // message
  message?: string(name='message'),
  // success
  success?: boolean(name='success'),
  // synchro
  synchro?: string(name='synchro'),
}

/**
 * Description: 补全商品信息
 * Summary: 补全商品信息
 */
async function pushSpiCompletecommodity(request: PushSpiCompletecommodityRequest): PushSpiCompletecommodityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushSpiCompletecommodityEx(request, headers, runtime);
}

/**
 * Description: 补全商品信息
 * Summary: 补全商品信息
 */
async function pushSpiCompletecommodityEx(request: PushSpiCompletecommodityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushSpiCompletecommodityResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.spi.completecommodity.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushSpiOrderverifyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // data
  data: string(name='data'),
}

model PushSpiOrderverifyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // success
  success?: boolean(name='success'),
  // code
  code?: string(name='code'),
  // message
  message?: string(name='message'),
  // data
  data?: string(name='data'),
  // synchro
  synchro?: string(name='synchro'),
}

/**
 * Description: 订单校验
 * Summary: 订单校验
 */
async function pushSpiOrderverify(request: PushSpiOrderverifyRequest): PushSpiOrderverifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushSpiOrderverifyEx(request, headers, runtime);
}

/**
 * Description: 订单校验
 * Summary: 订单校验
 */
async function pushSpiOrderverifyEx(request: PushSpiOrderverifyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushSpiOrderverifyResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.spi.orderverify.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushSpiOpencallbackRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // data
  data: string(name='data'),
}

model PushSpiOpencallbackResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // success
  success?: boolean(name='success'),
  // code
  code?: string(name='code'),
  // message
  message?: string(name='message'),
  // data
  data?: string(name='data'),
  // synchro
  synchro?: string(name='synchro'),
}

/**
 * Description: 生命周期回调
 * Summary: 生命周期回调
 */
async function pushSpiOpencallback(request: PushSpiOpencallbackRequest): PushSpiOpencallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushSpiOpencallbackEx(request, headers, runtime);
}

/**
 * Description: 生命周期回调
 * Summary: 生命周期回调
 */
async function pushSpiOpencallbackEx(request: PushSpiOpencallbackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushSpiOpencallbackResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.spi.opencallback.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSofamqLdcbynamespaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // namespace_id
  instanceId: string(name='instance_id'),
}

model GetSofamqLdcbynamespaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // true
  data?: boolean(name='data'),
}

/**
 * Description: getldcbynamespace
 * Summary: getldcbynamespace
 */
async function getSofamqLdcbynamespace(request: GetSofamqLdcbynamespaceRequest): GetSofamqLdcbynamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSofamqLdcbynamespaceEx(request, headers, runtime);
}

/**
 * Description: getldcbynamespace
 * Summary: getldcbynamespace
 */
async function getSofamqLdcbynamespaceEx(request: GetSofamqLdcbynamespaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSofamqLdcbynamespaceResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.ldcbynamespace.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSofamqRouterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 当前状态
  currentStatus: long(name='current_status'),
  // 路由任务描述信息
  description: string(name='description'),
  // 路由任务 ID
  routerId: long(name='router_id'),
  // 实例 ID
  instanceId: string(name='instance_id'),
  // 目标状态
  targetStatus: long(name='target_status'),
}

model UpdateSofamqRouterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新指定的消息路由任务的配置信息。
 * Summary: 更新路由配置
 */
async function updateSofamqRouter(request: UpdateSofamqRouterRequest): UpdateSofamqRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSofamqRouterEx(request, headers, runtime);
}

/**
 * Description: 更新指定的消息路由任务的配置信息。
 * Summary: 更新路由配置
 */
async function updateSofamqRouterEx(request: UpdateSofamqRouterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSofamqRouterResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.router.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecSofamqDlqresendbatchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需要查询的单元
  cell?: string(name='cell'),
  // 需查询的消费端 Group ID
  groupId: string(name='group_id'),
  // 需查询消息所对应的实例 ID。
  instanceId: string(name='instance_id'),
  // 需重发的消息的 ID，即 Message ID，多个消息使用英文逗号分隔
  msgIds: string(name='msg_ids'),
}

model ExecSofamqDlqresendbatchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发送失败的消息的 ID，即 Message ID
  data?: string(name='data'),
}

/**
 * Description: 批量重发指定 Message ID 的死信消息，使这些消息能够被 Consumer 再次消费。
 * Summary: 批量重发死信消息
 */
async function execSofamqDlqresendbatch(request: ExecSofamqDlqresendbatchRequest): ExecSofamqDlqresendbatchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execSofamqDlqresendbatchEx(request, headers, runtime);
}

/**
 * Description: 批量重发指定 Message ID 的死信消息，使这些消息能够被 Consumer 再次消费。
 * Summary: 批量重发死信消息
 */
async function execSofamqDlqresendbatchEx(request: ExecSofamqDlqresendbatchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecSofamqDlqresendbatchResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.dlqresendbatch.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqWarnRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询指定 Group 的报警规则时设置
  groupId?: string(name='group_id'),
  // 实例 ID
  instanceId: string(name='instance_id'),
  // 页码
  pageNum: long(name='page_num'),
  // 每页显示条数
  pageSize: long(name='page_size'),
  // 查询指定 Topic 的报警规则时设置
  topic?: string(name='topic'),
}

model ListSofamqWarnResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询到的告警规则集合
  data?: WarnPageDTO(name='data'),
}

/**
 * Description: 获取报警规则列表信息。
 * Summary: 获取告警列表
 */
async function listSofamqWarn(request: ListSofamqWarnRequest): ListSofamqWarnResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqWarnEx(request, headers, runtime);
}

/**
 * Description: 获取报警规则列表信息。
 * Summary: 获取告警列表
 */
async function listSofamqWarnEx(request: ListSofamqWarnRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqWarnResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.warn.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSofamqWarnRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 报警时间范围
  alertTime: string(name='alert_time'),
  // 报警通知人信息
  contacts: string(name='contacts'),
  // 延迟多少秒报报警
  delayTime: long(name='delay_time'),
  // 报警频率
  frequency: long(name='frequency'),
  // 查询指定 Group 时设置
  groupId?: string(name='group_id'),
  // 实例 ID
  instanceId: string(name='instance_id'),
  // 堆积阈值
  threshold: long(name='threshold'),
  // 查询指定 Topic 时设置
  topic?: string(name='topic'),
}

model CreateSofamqWarnResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建一条报警规则。
 * Summary: 创建告警规则
 */
async function createSofamqWarn(request: CreateSofamqWarnRequest): CreateSofamqWarnResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSofamqWarnEx(request, headers, runtime);
}

/**
 * Description: 创建一条报警规则。
 * Summary: 创建告警规则
 */
async function createSofamqWarnEx(request: CreateSofamqWarnRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSofamqWarnResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.warn.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSofamqWarnRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例 ID
  instanceId: string(name='instance_id'),
  // 待删除的报警规则 ID
  warnId: long(name='warn_id'),
}

model DeleteSofamqWarnResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 通过传入报警规则 ID，删除指定的报警规则。
 * Summary: 删除告警规则
 */
async function deleteSofamqWarn(request: DeleteSofamqWarnRequest): DeleteSofamqWarnResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSofamqWarnEx(request, headers, runtime);
}

/**
 * Description: 通过传入报警规则 ID，删除指定的报警规则。
 * Summary: 删除告警规则
 */
async function deleteSofamqWarnEx(request: DeleteSofamqWarnRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSofamqWarnResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.warn.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSofamqWarnRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 报警时间范围
  alertTime?: string(name='alert_time'),
  // 报警通知人信息
  contacts?: string(name='contacts'),
  // 延迟多少秒报警
  delayTime?: long(name='delay_time'),
  // 报警频率
  frequency?: long(name='frequency'),
  // 实例 ID
  instanceId: string(name='instance_id'),
  // 阈值
  threshold?: long(name='threshold'),
  // 指定修改的报警规则
  warnId: long(name='warn_id'),
}

model UpdateSofamqWarnResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新指定报警规则的配置信息。
 * Summary: 更新告警规则
 */
async function updateSofamqWarn(request: UpdateSofamqWarnRequest): UpdateSofamqWarnResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSofamqWarnEx(request, headers, runtime);
}

/**
 * Description: 更新指定报警规则的配置信息。
 * Summary: 更新告警规则
 */
async function updateSofamqWarnEx(request: UpdateSofamqWarnRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSofamqWarnResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.warn.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model EnableSofamqWarnRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例 ID
  instanceId: string(name='instance_id'),
  // 待开启的报警规则 ID
  warnId: long(name='warn_id'),
}

model EnableSofamqWarnResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 通过传入报警规则 ID，启用指定的报警规则。
 * Summary: 打开告警开关
 */
async function enableSofamqWarn(request: EnableSofamqWarnRequest): EnableSofamqWarnResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return enableSofamqWarnEx(request, headers, runtime);
}

/**
 * Description: 通过传入报警规则 ID，启用指定的报警规则。
 * Summary: 打开告警开关
 */
async function enableSofamqWarnEx(request: EnableSofamqWarnRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EnableSofamqWarnResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.warn.enable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DisableSofamqWarnRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例 ID
  instanceId: string(name='instance_id'),
  // 待关闭的报警规则 ID
  warnId: long(name='warn_id'),
}

model DisableSofamqWarnResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 通过传入报警规则 ID，禁用指定的报警规则。
 * Summary: 关闭告警开关
 */
async function disableSofamqWarn(request: DisableSofamqWarnRequest): DisableSofamqWarnResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return disableSofamqWarnEx(request, headers, runtime);
}

/**
 * Description: 通过传入报警规则 ID，禁用指定的报警规则。
 * Summary: 关闭告警开关
 */
async function disableSofamqWarnEx(request: DisableSofamqWarnRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DisableSofamqWarnResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.warn.disable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqWarnlogRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 目标单元
  cell?: string(name='cell'),
  // Group ID
  groupId?: string(name='group_id'),
  // 实例 ID
  instanceId: string(name='instance_id'),
  // 页码
  pageNum: long(name='page_num'),
  // 每页显示条数
  pageSize: long(name='page_size'),
  // Topic 名称
  topic?: string(name='topic'),
  // 报警规则 ID
  warnId?: long(name='warn_id'),
}

model ListSofamqWarnlogResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询到的报警日志集合
  data?: WarnLogPageDTO(name='data'),
}

/**
 * Description: 可以通过本接口查询历史报警记录，目前默认保存 30 天以内的报警信息。
 * Summary: 查询告警日志
 */
async function listSofamqWarnlog(request: ListSofamqWarnlogRequest): ListSofamqWarnlogResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqWarnlogEx(request, headers, runtime);
}

/**
 * Description: 可以通过本接口查询历史报警记录，目前默认保存 30 天以内的报警信息。
 * Summary: 查询告警日志
 */
async function listSofamqWarnlogEx(request: ListSofamqWarnlogRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqWarnlogResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.warnlog.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqAdmintopicRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例ID
  instanceId?: string(name='instance_id'),
  // 集群名
  cluster?: string(name='cluster'),
  // topic名
  topic?: string(name='topic'),
  // 页号
  pageNum: long(name='page_num'),
  //  页面大小
  pageSize: long(name='page_size'),
}

model ListSofamqAdmintopicResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // topic list
  data?: TopicPageDTO(name='data'),
}

/**
 * Description: 管理员查看topic
 * Summary: 管理员查看topic
 */
async function listSofamqAdmintopic(request: ListSofamqAdmintopicRequest): ListSofamqAdmintopicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqAdmintopicEx(request, headers, runtime);
}

/**
 * Description: 管理员查看topic
 * Summary: 管理员查看topic
 */
async function listSofamqAdmintopicEx(request: ListSofamqAdmintopicRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqAdmintopicResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.admintopic.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMetricsTginstantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 要查询的单元
  cell?: string(name='cell'),
  // Group ID
  group: string(name='group'),
  // 实例 ID
  instanceId: string(name='instance_id'),
  // Topic 名称
  topic: string(name='topic'),
}

model QueryMetricsTginstantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前 Group 死信
  dlq?: long(name='dlq'),
  // 当前消息积压
  msgBacklog?: long(name='msg_backlog'),
  // 每分钟消费数据大小
  recvBpm?: long(name='recv_bpm'),
  // 每分钟拉请求数量
  recvPpm?: long(name='recv_ppm'),
  // 消费 TPM
  recvTpm?: long(name='recv_tpm'),
  // 每分钟发送消息大小
  sendBpm?: long(name='send_bpm'),
  // 发送 TPM
  sendTpm?: long(name='send_tpm'),
}

/**
 * Description: 查询 Topic、Group 实时的发送消费速度。
 * Summary: topicgroup实时的发送消费速度
 */
async function queryMetricsTginstant(request: QueryMetricsTginstantRequest): QueryMetricsTginstantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMetricsTginstantEx(request, headers, runtime);
}

/**
 * Description: 查询 Topic、Group 实时的发送消费速度。
 * Summary: topicgroup实时的发送消费速度
 */
async function queryMetricsTginstantEx(request: QueryMetricsTginstantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMetricsTginstantResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.metrics.tginstant.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMetricsTghistoryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 要查询的单元
  cell?: string(name='cell'),
  // 结束时间
  endTime: long(name='end_time'),
  // 消费组 Group ID
  group: string(name='group'),
  // 实例 ID
  instanceId: string(name='instance_id'),
  // 开始时间
  startTime: long(name='start_time'),
  // Topic 名称
  topic: string(name='topic'),
}

model QueryMetricsTghistoryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结束时间
  endTime?: long(name='end_time'),
  // 消息点之间的时间间隔（秒），默认为 1
  interval?: long(name='interval'),
  // 具体的统计值
  metrics?: [ TopicGroupHistoryStatsItem ](name='metrics'),
  // 开始时间
  startTime?: long(name='start_time'),
}

/**
 * Description: 查询指定时间端内 Topic、Group 的历史统计数据。
 * Summary: 获取 topic、group 的历史数据
 */
async function queryMetricsTghistory(request: QueryMetricsTghistoryRequest): QueryMetricsTghistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMetricsTghistoryEx(request, headers, runtime);
}

/**
 * Description: 查询指定时间端内 Topic、Group 的历史统计数据。
 * Summary: 获取 topic、group 的历史数据
 */
async function queryMetricsTghistoryEx(request: QueryMetricsTghistoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMetricsTghistoryResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.metrics.tghistory.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMetricsInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例 ID
  instanceId: string(name='instance_id'),
}

model QueryMetricsInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 消息积压数量
  backlogNum?: long(name='backlog_num'),
  // 死信数量
  dlqNum?: long(name='dlq_num'),
  // 消费组数量
  groupNum?: long(name='group_num'),
  // 订阅关系数量
  subscriptionNum?: long(name='subscription_num'),
  // Topic 数量
  topicNum?: long(name='topic_num'),
  // 数据更新时间戳
  updateAt?: long(name='update_at'),
}

/**
 * Description: 根据实例 ID，查询该实例的资源统计信息，包括 Topic 数量、订阅关系数量、死信数量等。
 * Summary: 获取实例的基本信息
 */
async function queryMetricsInstance(request: QueryMetricsInstanceRequest): QueryMetricsInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMetricsInstanceEx(request, headers, runtime);
}

/**
 * Description: 根据实例 ID，查询该实例的资源统计信息，包括 Topic 数量、订阅关系数量、死信数量等。
 * Summary: 获取实例的基本信息
 */
async function queryMetricsInstanceEx(request: QueryMetricsInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMetricsInstanceResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.metrics.instance.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMetricsInstancehistoryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 结束时间（Unix 时间戳）
  endTime: long(name='end_time'),
  // 实例 ID
  instanceId: string(name='instance_id'),
  // 开始时间（Unix 时间戳）
  startTime: long(name='start_time'),
}

model QueryMetricsInstancehistoryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 历史统计数据
  metrics?: [ TopicGroupHistoryStatsItem ](name='metrics'),
}

/**
 * Description: 查询指定实例下的历史统计数据，包括每分钟消费数据大小、每分钟发送消息大小等。
 * Summary: 获取实例的历史统计数据
 */
async function queryMetricsInstancehistory(request: QueryMetricsInstancehistoryRequest): QueryMetricsInstancehistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMetricsInstancehistoryEx(request, headers, runtime);
}

/**
 * Description: 查询指定实例下的历史统计数据，包括每分钟消费数据大小、每分钟发送消息大小等。
 * Summary: 获取实例的历史统计数据
 */
async function queryMetricsInstancehistoryEx(request: QueryMetricsInstancehistoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMetricsInstancehistoryResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.metrics.instancehistory.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryStatsTopicRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 是否降序
  desc?: boolean(name='desc'),
  // 实例 ID
  instanceId: string(name='instance_id'),
  // 排序字段
  orderIndex?: long(name='order_index'),
  // 页码
  pageNum: long(name='page_num'),
  // 每页显示条数
  pageSize: long(name='page_size'),
  // Unix 时间戳
  timestampSec: long(name='timestamp_sec'),
  // 过滤查询的 Topic
  topic?: string(name='topic'),
}

model QueryStatsTopicResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // Topic 统计详情
  metrics?: [ TopicStatsItem ](name='metrics'),
  // 页码
  pageNum?: long(name='page_num'),
  // 每页显示条数
  pageSize?: long(name='page_size'),
  // 总条数
  totalCount?: long(name='total_count'),
  // 报表数据更新的 Unix 时间戳
  updatedAt?: long(name='updated_at'),
}

/**
 * Description: 查询指定实例下 Topic 的统计列表信息。
 * Summary: 查询 topic 统计列表
 */
async function queryStatsTopic(request: QueryStatsTopicRequest): QueryStatsTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryStatsTopicEx(request, headers, runtime);
}

/**
 * Description: 查询指定实例下 Topic 的统计列表信息。
 * Summary: 查询 topic 统计列表
 */
async function queryStatsTopicEx(request: QueryStatsTopicRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryStatsTopicResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.stats.topic.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryStatsGroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 是否降序，默认为降序
  desc?: boolean(name='desc'),
  // Group ID 过滤
  groupId?: string(name='group_id'),
  // 实例 ID
  instanceId: string(name='instance_id'),
  // 排序字段
  orderIndex?: long(name='order_index'),
  // 页码
  pageNum: long(name='page_num'),
  // 每页显示条数
  pageSize: long(name='page_size'),
  // Unix 时间戳
  timestampSec: long(name='timestamp_sec'),
  // Topic 过滤
  topic?: string(name='topic'),
}

model QueryStatsGroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前实例的所有 Group 统计信息
  metrics?: [ GroupStatsItem ](name='metrics'),
  // 页码
  pageNum?: long(name='page_num'),
  // 每页显示条数
  pageSize?: long(name='page_size'),
  // 总条数
  totalCount?: long(name='total_count'),
  // 报表数据更新的 Unix 时间戳
  updatedAt?: long(name='updated_at'),
}

/**
 * Description: 获取指定实例下 Group 的统计信息。
 * Summary: 获取当前实例的 group 统计信息
 */
async function queryStatsGroup(request: QueryStatsGroupRequest): QueryStatsGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryStatsGroupEx(request, headers, runtime);
}

/**
 * Description: 获取指定实例下 Group 的统计信息。
 * Summary: 获取当前实例的 group 统计信息
 */
async function queryStatsGroupEx(request: QueryStatsGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryStatsGroupResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.stats.group.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqAdmingroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 集群名
  cluster?: string(name='cluster'),
  // 组名
  groupId?: string(name='group_id'),
  // 实例ID
  instanceId?: string(name='instance_id'),
  // 页号
  pageNum: long(name='page_num'),
  // 页面大小
  pageSize: long(name='page_size'),
  // 是否显示router group
  showRouter?: boolean(name='show_router'),
}

model ListSofamqAdmingroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // group list
  data?: GroupPageDTO(name='data'),
}

/**
 * Description: 管理员查看group
 * Summary: 管理员查看group
 */
async function listSofamqAdmingroup(request: ListSofamqAdmingroupRequest): ListSofamqAdmingroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqAdmingroupEx(request, headers, runtime);
}

/**
 * Description: 管理员查看group
 * Summary: 管理员查看group
 */
async function listSofamqAdmingroupEx(request: ListSofamqAdmingroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqAdmingroupResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.admingroup.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqKvconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // key
  key?: string(name='key'),
  // 命名空间
  namespace?: string(name='namespace'),
  // 页号
  pageNum: long(name='page_num'),
  // 页面大小
  pageSize: long(name='page_size'),
}

model ListSofamqKvconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // kv config page
  data?: KVConfigPageDTO(name='data'),
}

/**
 * Description: 查询kv配置
 * Summary: 查询kv配置
 */
async function listSofamqKvconfig(request: ListSofamqKvconfigRequest): ListSofamqKvconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqKvconfigEx(request, headers, runtime);
}

/**
 * Description: 查询kv配置
 * Summary: 查询kv配置
 */
async function listSofamqKvconfigEx(request: ListSofamqKvconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqKvconfigResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.kvconfig.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSofamqKvconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 命名空间
  namespace: string(name='namespace'),
  // key
  key: string(name='key'),
  // value
  value: string(name='value'),
}

model CreateSofamqKvconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建kvconfig
 * Summary: 创建kvconfig
 */
async function createSofamqKvconfig(request: CreateSofamqKvconfigRequest): CreateSofamqKvconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSofamqKvconfigEx(request, headers, runtime);
}

/**
 * Description: 创建kvconfig
 * Summary: 创建kvconfig
 */
async function createSofamqKvconfigEx(request: CreateSofamqKvconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSofamqKvconfigResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.kvconfig.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSofamqKvconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 命名空间
  namespace: string(name='namespace'),
  // key
  key: string(name='key'),
}

model DeleteSofamqKvconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除kvconfig
 * Summary: 删除kvconfig
 */
async function deleteSofamqKvconfig(request: DeleteSofamqKvconfigRequest): DeleteSofamqKvconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSofamqKvconfigEx(request, headers, runtime);
}

/**
 * Description: 删除kvconfig
 * Summary: 删除kvconfig
 */
async function deleteSofamqKvconfigEx(request: DeleteSofamqKvconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSofamqKvconfigResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.kvconfig.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSofamqKvconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 命名空间
  namespace: string(name='namespace'),
  // key
  key: string(name='key'),
  // 值
  value: string(name='value'),
}

model UpdateSofamqKvconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 修改kvconfig值
 * Summary: 修改kvconfig值
 */
async function updateSofamqKvconfig(request: UpdateSofamqKvconfigRequest): UpdateSofamqKvconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSofamqKvconfigEx(request, headers, runtime);
}

/**
 * Description: 修改kvconfig值
 * Summary: 修改kvconfig值
 */
async function updateSofamqKvconfigEx(request: UpdateSofamqKvconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSofamqKvconfigResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.kvconfig.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSofamqConfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 目标名
  targetName: string(name='target_name'),
  // 目标类型
  targetType: long(name='target_type'),
  // 属性名
  property: string(name='property'),
}

model DeleteSofamqConfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除config配置
 * Summary: 删除config配置
 */
async function deleteSofamqConfig(request: DeleteSofamqConfigRequest): DeleteSofamqConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSofamqConfigEx(request, headers, runtime);
}

/**
 * Description: 删除config配置
 * Summary: 删除config配置
 */
async function deleteSofamqConfigEx(request: DeleteSofamqConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSofamqConfigResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.config.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSofamqConfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 目标名
  targetName: string(name='target_name'),
  // 目标类型
  targetType: long(name='target_type'),
  // 配置名
  property: string(name='property'),
  // 配置值
  value: string(name='value'),
}

model UpdateSofamqConfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新config配置
 * Summary: 更新config配置
 */
async function updateSofamqConfig(request: UpdateSofamqConfigRequest): UpdateSofamqConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSofamqConfigEx(request, headers, runtime);
}

/**
 * Description: 更新config配置
 * Summary: 更新config配置
 */
async function updateSofamqConfigEx(request: UpdateSofamqConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSofamqConfigResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.config.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSofamqClusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: long(name='id'),
  // appkey
  appkey?: string(name='appkey'),
  // cluster
  cluster?: string(name='cluster'),
  // deploy_mode
  deployMode?: string(name='deploy_mode'),
  // remark
  remark?: string(name='remark'),
}

model UpdateSofamqClusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: update cluster
 * Summary: update cluster
 */
async function updateSofamqCluster(request: UpdateSofamqClusterRequest): UpdateSofamqClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSofamqClusterEx(request, headers, runtime);
}

/**
 * Description: update cluster
 * Summary: update cluster
 */
async function updateSofamqClusterEx(request: UpdateSofamqClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSofamqClusterResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.cluster.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSofamqDatacenterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: long(name='id'),
  // datacenter
  datacenter?: string(name='datacenter'),
  // room
  room?: string(name='room'),
  // cluster
  cluster?: string(name='cluster'),
}

model UpdateSofamqDatacenterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: update dc
 * Summary: update dc
 */
async function updateSofamqDatacenter(request: UpdateSofamqDatacenterRequest): UpdateSofamqDatacenterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSofamqDatacenterEx(request, headers, runtime);
}

/**
 * Description: update dc
 * Summary: update dc
 */
async function updateSofamqDatacenterEx(request: UpdateSofamqDatacenterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSofamqDatacenterResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.datacenter.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSofamqRoomRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: long(name='id'),
  // cluster
  cluster?: string(name='cluster'),
  // endpoint
  endpoint?: string(name='endpoint'),
  // region
  region?: string(name='region'),
  // room
  room?: string(name='room'),
}

model UpdateSofamqRoomResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: update room
 * Summary: update room
 */
async function updateSofamqRoom(request: UpdateSofamqRoomRequest): UpdateSofamqRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSofamqRoomEx(request, headers, runtime);
}

/**
 * Description: update room
 * Summary: update room
 */
async function updateSofamqRoomEx(request: UpdateSofamqRoomRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSofamqRoomResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.room.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSofamqNodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: long(name='id'),
  // cluster
  cluster?: string(name='cluster'),
  // data_center
  dataCenter?: string(name='data_center'),
  // hostname
  hostname?: string(name='hostname'),
  // node_group
  nodeGroup?: string(name='node_group'),
  // perm
  perm?: string(name='perm'),
  // rip
  rip?: string(name='rip'),
  // vip
  vip?: string(name='vip'),
  // room
  room?: string(name='room'),
}

model UpdateSofamqNodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: update node
 * Summary: update node
 */
async function updateSofamqNode(request: UpdateSofamqNodeRequest): UpdateSofamqNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSofamqNodeEx(request, headers, runtime);
}

/**
 * Description: update node
 * Summary: update node
 */
async function updateSofamqNodeEx(request: UpdateSofamqNodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSofamqNodeResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.node.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqTopicqueueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需查询的 Topic 所在的 Cell
  cell?: string(name='cell'),
  // 需查询的 Topic 所对应的实例 ID
  instanceId: string(name='instance_id'),
  // Topic 名称
  topic: string(name='topic'),
}

model QuerySofamqTopicqueueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // Topic 队列列表
  data?: [ TopicQueueDTO ](name='data'),
}

/**
 * Description: 查询指定的 Topic 的队列信息。
 * Summary: 查询topic的队列信息
 */
async function querySofamqTopicqueue(request: QuerySofamqTopicqueueRequest): QuerySofamqTopicqueueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqTopicqueueEx(request, headers, runtime);
}

/**
 * Description: 查询指定的 Topic 的队列信息。
 * Summary: 查询topic的队列信息
 */
async function querySofamqTopicqueueEx(request: QuerySofamqTopicqueueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqTopicqueueResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.topicqueue.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqAdmingroupsubdetailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // cell名
  cell: string(name='cell'),
  // 需查询的 Group ID
  groupId: string(name='group_id'),
  // 需查询的 Topic 所对应的实例 ID。
  instanceId: string(name='instance_id'),
}

model QuerySofamqAdmingroupsubdetailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回data信息
  data?: GroupSubDetailDTO(name='data'),
}

/**
 * Description: 查看在线订阅topic
 * Summary: 查看在线订阅topic
 */
async function querySofamqAdmingroupsubdetail(request: QuerySofamqAdmingroupsubdetailRequest): QuerySofamqAdmingroupsubdetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqAdmingroupsubdetailEx(request, headers, runtime);
}

/**
 * Description: 查看在线订阅topic
 * Summary: 查看在线订阅topic
 */
async function querySofamqAdmingroupsubdetailEx(request: QuerySofamqAdmingroupsubdetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqAdmingroupsubdetailResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.admingroupsubdetail.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqAdminuserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户名
  loginName?: string(name='login_name'),
  // 页号
  pageNum: long(name='page_num'),
  // 页面大小
  pageSize: long(name='page_size'),
}

model ListSofamqAdminuserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 管理员用户分页数据
  data?: AdminUserPageDTO(name='data'),
}

/**
 * Description: 管理员列表
 * Summary: 管理员列表
 */
async function listSofamqAdminuser(request: ListSofamqAdminuserRequest): ListSofamqAdminuserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqAdminuserEx(request, headers, runtime);
}

/**
 * Description: 管理员列表
 * Summary: 管理员列表
 */
async function listSofamqAdminuserEx(request: ListSofamqAdminuserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqAdminuserResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.adminuser.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSofamqAdminuserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 登录名
  loginName: string(name='login_name'),
  // 用户密码
  password: string(name='password'),
  // 用户类型
  userType: long(name='user_type'),
}

model CreateSofamqAdminuserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 添加用户
 * Summary: 添加用户
 */
async function createSofamqAdminuser(request: CreateSofamqAdminuserRequest): CreateSofamqAdminuserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSofamqAdminuserEx(request, headers, runtime);
}

/**
 * Description: 添加用户
 * Summary: 添加用户
 */
async function createSofamqAdminuserEx(request: CreateSofamqAdminuserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSofamqAdminuserResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.adminuser.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSofamqAdminuserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 管理员用户名
  loginName: string(name='login_name'),
}

model DeleteSofamqAdminuserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除管理员用户
 * Summary: 删除管理员用户
 */
async function deleteSofamqAdminuser(request: DeleteSofamqAdminuserRequest): DeleteSofamqAdminuserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSofamqAdminuserEx(request, headers, runtime);
}

/**
 * Description: 删除管理员用户
 * Summary: 删除管理员用户
 */
async function deleteSofamqAdminuserEx(request: DeleteSofamqAdminuserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSofamqAdminuserResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.adminuser.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqAdminapiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 是否显示创建接口
  showCreate?: boolean(name='show_create'),
  // 是否显示删除接口
  showDelete?: boolean(name='show_delete'),
  // 是否显示查询接口
  showRetrieve?: boolean(name='show_retrieve'),
  // 是否显示更新接口
  showUpdate?: boolean(name='show_update'),
  // 是否显示操作类接口
  showOperation?: boolean(name='show_operation'),
}

model ListSofamqAdminapiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询结果
  data?: [ ApiInfoDTO ](name='data'),
}

/**
 * Description: 查询用户侧接口列表
 * Summary: 查询用户侧接口列表
 */
async function listSofamqAdminapi(request: ListSofamqAdminapiRequest): ListSofamqAdminapiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqAdminapiEx(request, headers, runtime);
}

/**
 * Description: 查询用户侧接口列表
 * Summary: 查询用户侧接口列表
 */
async function listSofamqAdminapiEx(request: ListSofamqAdminapiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqAdminapiResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.adminapi.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SwitchSofamqAdminapiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // api接口名
  name: string(name='name'),
  // 开关是否打开
  switchOpen: boolean(name='switch_open'),
}

model SwitchSofamqAdminapiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: api权限更新
 * Summary: api权限更新
 */
async function switchSofamqAdminapi(request: SwitchSofamqAdminapiRequest): SwitchSofamqAdminapiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return switchSofamqAdminapiEx(request, headers, runtime);
}

/**
 * Description: api权限更新
 * Summary: api权限更新
 */
async function switchSofamqAdminapiEx(request: SwitchSofamqAdminapiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SwitchSofamqAdminapiResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.adminapi.switch', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddDmsMsgtypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // instance_id
  instanceId: string(name='instance_id'),
  // topic
  topic: string(name='topic'),
  // eventcode
  eventcode: string(name='eventcode'),
  // desc
  desc?: string(name='desc'),
}

model AddDmsMsgtypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: dms
 * Summary: dms
 */
async function addDmsMsgtype(request: AddDmsMsgtypeRequest): AddDmsMsgtypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addDmsMsgtypeEx(request, headers, runtime);
}

/**
 * Description: dms
 * Summary: dms
 */
async function addDmsMsgtypeEx(request: AddDmsMsgtypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddDmsMsgtypeResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.dms.msgtype.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDmsMsgtypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // currentPage
  pageNum: long(name='page_num'),
  // eventcode
  eventcode?: string(name='eventcode'),
  // instance_id
  instanceId: string(name='instance_id'),
  // page size
  pageSize: long(name='page_size'),
  // topic
  topic?: string(name='topic'),
}

model ListDmsMsgtypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // msgtypes
  data?: MsgTypePageDO(name='data'),
}

/**
 * Description: dms
 * Summary: dms
 */
async function listDmsMsgtype(request: ListDmsMsgtypeRequest): ListDmsMsgtypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDmsMsgtypeEx(request, headers, runtime);
}

/**
 * Description: dms
 * Summary: dms
 */
async function listDmsMsgtypeEx(request: ListDmsMsgtypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDmsMsgtypeResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.dms.msgtype.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDmsBindingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // appname
  appName: string(name='app_name'),
  // eventcode
  eventcode: string(name='eventcode'),
  // exchange_type
  exchangeType: string(name='exchange_type'),
  // expression
  expression?: string(name='expression'),
  // groupid
  group: string(name='group'),
  // instance_id
  instanceId: string(name='instance_id'),
  // persistence
  persistence: boolean(name='persistence'),
  // topic
  topic: string(name='topic'),
}

model CreateDmsBindingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: dms
 * Summary: dms
 */
async function createDmsBinding(request: CreateDmsBindingRequest): CreateDmsBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDmsBindingEx(request, headers, runtime);
}

/**
 * Description: dms
 * Summary: dms
 */
async function createDmsBindingEx(request: CreateDmsBindingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDmsBindingResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.dms.binding.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDmsBindingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // appname
  appName?: string(name='app_name'),
  // eventcode
  eventcode?: string(name='eventcode'),
  // groupid
  group?: string(name='group'),
  // current_page
  pageNum?: long(name='page_num'),
  // page_size
  pageSize?: long(name='page_size'),
  // topic
  topic?: string(name='topic'),
  // ins
  instanceId: string(name='instance_id'),
}

model ListDmsBindingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: BindingPageDO(name='data'),
}

/**
 * Description: dms
 * Summary: dms
 */
async function listDmsBinding(request: ListDmsBindingRequest): ListDmsBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDmsBindingEx(request, headers, runtime);
}

/**
 * Description: dms
 * Summary: dms
 */
async function listDmsBindingEx(request: ListDmsBindingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDmsBindingResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.dms.binding.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDmsMsgtypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: string(name='id'),
  // instance_id
  instanceId: string(name='instance_id'),
}

model DeleteDmsMsgtypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: dms
 * Summary: dms
 */
async function deleteDmsMsgtype(request: DeleteDmsMsgtypeRequest): DeleteDmsMsgtypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDmsMsgtypeEx(request, headers, runtime);
}

/**
 * Description: dms
 * Summary: dms
 */
async function deleteDmsMsgtypeEx(request: DeleteDmsMsgtypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDmsMsgtypeResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.dms.msgtype.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDmsBindingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: string(name='id'),
  // instance_id
  instanceId: string(name='instance_id'),
}

model DeleteDmsBindingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: dms
 * Summary: dms
 */
async function deleteDmsBinding(request: DeleteDmsBindingRequest): DeleteDmsBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDmsBindingEx(request, headers, runtime);
}

/**
 * Description: dms
 * Summary: dms
 */
async function deleteDmsBindingEx(request: DeleteDmsBindingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDmsBindingResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.dms.binding.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDmsMsgtypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: long(name='id'),
  // instance_id
  instanceId: string(name='instance_id'),
  // eventcode
  eventcode: string(name='eventcode'),
  // desc
  desc?: string(name='desc'),
}

model UpdateDmsMsgtypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: dms
 * Summary: dms
 */
async function updateDmsMsgtype(request: UpdateDmsMsgtypeRequest): UpdateDmsMsgtypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDmsMsgtypeEx(request, headers, runtime);
}

/**
 * Description: dms
 * Summary: dms
 */
async function updateDmsMsgtypeEx(request: UpdateDmsMsgtypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDmsMsgtypeResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.dms.msgtype.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDmsBindingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: string(name='id'),
  // instance_id
  instanceId: string(name='instance_id'),
  // eventcode
  eventcode: string(name='eventcode'),
  // exchange_type
  exchangeType: string(name='exchange_type'),
  // expression
  expression?: string(name='expression'),
  // persistence
  persistence: boolean(name='persistence'),
}

model UpdateDmsBindingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: dms
 * Summary: dms
 */
async function updateDmsBinding(request: UpdateDmsBindingRequest): UpdateDmsBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDmsBindingEx(request, headers, runtime);
}

/**
 * Description: dms
 * Summary: dms
 */
async function updateDmsBindingEx(request: UpdateDmsBindingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDmsBindingResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.dms.binding.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDmsMsgRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: string(name='id'),
  // instance_id
  instanceId: string(name='instance_id'),
}

model QueryDmsMsgResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: MsgQueryDO(name='data'),
}

/**
 * Description: dms
 * Summary: dms
 */
async function queryDmsMsg(request: QueryDmsMsgRequest): QueryDmsMsgResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDmsMsgEx(request, headers, runtime);
}

/**
 * Description: dms
 * Summary: dms
 */
async function queryDmsMsgEx(request: QueryDmsMsgRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDmsMsgResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.dms.msg.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryDmsMsgRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // born_time_begin
  bornTimeBegin: string(name='born_time_begin'),
  // born_time_end
  bornTimeEnd: string(name='born_time_end'),
  // current_page
  pageNum?: long(name='page_num'),
  // eventcode
  eventcode: string(name='eventcode'),
  // instance_id
  instanceId: string(name='instance_id'),
  // page_size
  pageSize?: long(name='page_size'),
  // topic
  topic: string(name='topic'),
}

model BatchqueryDmsMsgResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: MsgQueryPageDO(name='data'),
}

/**
 * Description: dms
 * Summary: dms
 */
async function batchqueryDmsMsg(request: BatchqueryDmsMsgRequest): BatchqueryDmsMsgResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryDmsMsgEx(request, headers, runtime);
}

/**
 * Description: dms
 * Summary: dms
 */
async function batchqueryDmsMsgEx(request: BatchqueryDmsMsgRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryDmsMsgResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.dms.msg.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDmsMsgRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: string(name='id'),
  // instance_id
  instanceId: string(name='instance_id'),
}

model DeleteDmsMsgResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: dms
 * Summary: dms
 */
async function deleteDmsMsg(request: DeleteDmsMsgRequest): DeleteDmsMsgResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDmsMsgEx(request, headers, runtime);
}

/**
 * Description: dms
 * Summary: dms
 */
async function deleteDmsMsgEx(request: DeleteDmsMsgRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDmsMsgResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.dms.msg.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchdeleteDmsMsgRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: string(name='id'),
  // instance_id
  instanceId: string(name='instance_id'),
}

model BatchdeleteDmsMsgResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: dms
 * Summary: dms
 */
async function batchdeleteDmsMsg(request: BatchdeleteDmsMsgRequest): BatchdeleteDmsMsgResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchdeleteDmsMsgEx(request, headers, runtime);
}

/**
 * Description: dms
 * Summary: dms
 */
async function batchdeleteDmsMsgEx(request: BatchdeleteDmsMsgRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchdeleteDmsMsgResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.dms.msg.batchdelete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExportDmsMsgtypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // instance_id
  instanceId: string(name='instance_id'),
  // id列表，为空则表示导出当前instance_id全部数据
  ids?: string(name='ids'),
  // field
  field?: string(name='field'),
  // order
  order?: string(name='order'),
  // topic
  topic?: string(name='topic'),
  // eventcode
  eventcode?: string(name='eventcode'),
}

model ExportDmsMsgtypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回的导出结果具体数据
  msgTypeList?: [ MsgTypeDTO ](name='msg_type_list'),
}

/**
 * Description: dms
 * Summary: dms
 */
async function exportDmsMsgtype(request: ExportDmsMsgtypeRequest): ExportDmsMsgtypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return exportDmsMsgtypeEx(request, headers, runtime);
}

/**
 * Description: dms
 * Summary: dms
 */
async function exportDmsMsgtypeEx(request: ExportDmsMsgtypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExportDmsMsgtypeResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.dms.msgtype.export', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportDmsMsgtypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 导入的excel文件转换成的具体json字符串内容
  content: string(name='content'),
  // instance_id
  instanceId: string(name='instance_id'),
}

model ImportDmsMsgtypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 导入内容总条数
  totalCount?: long(name='total_count'),
  // 导入成功数量
  successCount?: long(name='success_count'),
  // 已经存在的记录总数
  existRecords?: [ MsgTypeDTO ](name='exist_records'),
  // 导入失败的记录详情
  processErrorRecords?: [ MsgTypeDTO ](name='process_error_records'),
  // 格式错误的记录
  formatErrorRecords?: [ MsgTypeDTO ](name='format_error_records'),
}

/**
 * Description: dms
 * Summary: dms
 */
async function importDmsMsgtype(request: ImportDmsMsgtypeRequest): ImportDmsMsgtypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importDmsMsgtypeEx(request, headers, runtime);
}

/**
 * Description: dms
 * Summary: dms
 */
async function importDmsMsgtypeEx(request: ImportDmsMsgtypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportDmsMsgtypeResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.dms.msgtype.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExportDmsBindingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // instance_id
  instanceId: string(name='instance_id'),
  // ids
  ids?: string(name='ids'),
  // field
  field?: string(name='field'),
  // order
  order?: string(name='order'),
  // appname
  appName?: string(name='app_name'),
  // groupid
  group?: string(name='group'),
  // topic
  topic?: string(name='topic'),
  // eventcode
  eventcode?: string(name='eventcode'),
}

model ExportDmsBindingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 导出数据列表
  bindingList?: [ BindingDTO ](name='binding_list'),
}

/**
 * Description: dms
 * Summary: dms
 */
async function exportDmsBinding(request: ExportDmsBindingRequest): ExportDmsBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return exportDmsBindingEx(request, headers, runtime);
}

/**
 * Description: dms
 * Summary: dms
 */
async function exportDmsBindingEx(request: ExportDmsBindingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExportDmsBindingResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.dms.binding.export', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportDmsBindingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // instance_id
  instanceId: string(name='instance_id'),
  // 导入的excel文件转换成的具体json字符串内容
  content: string(name='content'),
}

model ImportDmsBindingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 导入总数
  totalCount?: long(name='total_count'),
  // 导入成功总数
  successCount?: long(name='success_count'),
  // 格式化或者参数错误元素列表
  formatErrorRecords?: [ BindingDTO ](name='format_error_records'),
  // 导入错误元素列表
  processErrorRecords?: [ BindingDTO ](name='process_error_records'),
  // 已存在元素列表
  existRecords?: [ BindingDTO ](name='exist_records'),
}

/**
 * Description: dms
 * Summary: dms
 */
async function importDmsBinding(request: ImportDmsBindingRequest): ImportDmsBindingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importDmsBindingEx(request, headers, runtime);
}

/**
 * Description: dms
 * Summary: dms
 */
async function importDmsBindingEx(request: ImportDmsBindingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportDmsBindingResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.dms.binding.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDmsWhitelistRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // groupid
  group?: string(name='group'),
  // instance_id
  instanceId: string(name='instance_id'),
  // page_num
  pageNum?: long(name='page_num'),
  // page_size
  pageSize?: long(name='page_size'),
  // topic
  topic?: string(name='topic'),
}

model ListDmsWhitelistResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: WhitelistPageDO(name='data'),
}

/**
 * Description: dms
 * Summary: dms
 */
async function listDmsWhitelist(request: ListDmsWhitelistRequest): ListDmsWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDmsWhitelistEx(request, headers, runtime);
}

/**
 * Description: dms
 * Summary: dms
 */
async function listDmsWhitelistEx(request: ListDmsWhitelistRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDmsWhitelistResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.dms.whitelist.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddDmsWhitelistRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // groupid
  group: string(name='group'),
  // instance_id
  instanceId: string(name='instance_id'),
  // topic
  topic: string(name='topic'),
}

model AddDmsWhitelistResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: dms
 * Summary: dms
 */
async function addDmsWhitelist(request: AddDmsWhitelistRequest): AddDmsWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addDmsWhitelistEx(request, headers, runtime);
}

/**
 * Description: dms
 * Summary: dms
 */
async function addDmsWhitelistEx(request: AddDmsWhitelistRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddDmsWhitelistResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.dms.whitelist.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDmsWhitelistRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // instance_id
  instanceId: string(name='instance_id'),
  // id
  id: long(name='id'),
}

model DeleteDmsWhitelistResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: dms
 * Summary: dms
 */
async function deleteDmsWhitelist(request: DeleteDmsWhitelistRequest): DeleteDmsWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDmsWhitelistEx(request, headers, runtime);
}

/**
 * Description: dms
 * Summary: dms
 */
async function deleteDmsWhitelistEx(request: DeleteDmsWhitelistRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDmsWhitelistResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.dms.whitelist.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDmsTopicsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ins
  instanceId: string(name='instance_id'),
  // group
  group: string(name='group'),
}

model GetDmsTopicsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ string ](name='data'),
}

/**
 * Description: admin
 * Summary: topics
 */
async function getDmsTopics(request: GetDmsTopicsRequest): GetDmsTopicsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDmsTopicsEx(request, headers, runtime);
}

/**
 * Description: admin
 * Summary: topics
 */
async function getDmsTopicsEx(request: GetDmsTopicsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDmsTopicsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.dms.topics.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSofamqConsumerjstackRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需要查询的单元
  cell: string(name='cell'),
  // 需要查询的消费端 Client ID
  clientId: string(name='client_id'),
  // 需要查询的消费端的 Group ID
  groupId: string(name='group_id'),
  // 需要查询的消费者对应的实例 ID
  instanceId: string(name='instance_id'),
}

model GetSofamqConsumerjstackResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 消费端 Jstack 堆栈信息
  data?: ConsumerJstackDTO(name='data'),
}

/**
 * Description: 查询消费者堆栈信息，便于定位问题。
 * Summary: 查询消费者堆栈信息
 */
async function getSofamqConsumerjstack(request: GetSofamqConsumerjstackRequest): GetSofamqConsumerjstackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSofamqConsumerjstackEx(request, headers, runtime);
}

/**
 * Description: 查询消费者堆栈信息，便于定位问题。
 * Summary: 查询消费者堆栈信息
 */
async function getSofamqConsumerjstackEx(request: GetSofamqConsumerjstackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSofamqConsumerjstackResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.consumerjstack.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDmsUploadurlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // file_name
  fileName: string(name='file_name'),
  // instance_id
  instanceId: string(name='instance_id'),
  // type
  type: string(name='type'),
}

model QueryDmsUploadurlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: string(name='data'),
}

/**
 * Description: uploadurl
 * Summary: uploadurl
 */
async function queryDmsUploadurl(request: QueryDmsUploadurlRequest): QueryDmsUploadurlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDmsUploadurlEx(request, headers, runtime);
}

/**
 * Description: uploadurl
 * Summary: uploadurl
 */
async function queryDmsUploadurlEx(request: QueryDmsUploadurlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDmsUploadurlResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.dms.uploadurl.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDmsMsgtypetemplateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // instance_id
  instanceId: string(name='instance_id'),
}

model GetDmsMsgtypetemplateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: string(name='data'),
}

/**
 * Description: msgtypetemplate
 * Summary: msgtypetemplate
 */
async function getDmsMsgtypetemplate(request: GetDmsMsgtypetemplateRequest): GetDmsMsgtypetemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDmsMsgtypetemplateEx(request, headers, runtime);
}

/**
 * Description: msgtypetemplate
 * Summary: msgtypetemplate
 */
async function getDmsMsgtypetemplateEx(request: GetDmsMsgtypetemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDmsMsgtypetemplateResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.dms.msgtypetemplate.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDmsBindingtemplateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ins
  instanceId: string(name='instance_id'),
}

model GetDmsBindingtemplateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: string(name='data'),
}

/**
 * Description: template
 * Summary: template
 */
async function getDmsBindingtemplate(request: GetDmsBindingtemplateRequest): GetDmsBindingtemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDmsBindingtemplateEx(request, headers, runtime);
}

/**
 * Description: template
 * Summary: template
 */
async function getDmsBindingtemplateEx(request: GetDmsBindingtemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDmsBindingtemplateResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.dms.bindingtemplate.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMsgdumpSourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 当前 instance id
  instanceId: string(name='instance_id'),
}

model QueryMsgdumpSourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 消息同步源端信息
  data?: [ MsgdumpSourceInfo ](name='data'),
}

/**
 * Description: 查询msgdump消息同步任务源端资源
 * Summary: 查询msgdump消息同步任务源端资源
 */
async function queryMsgdumpSource(request: QueryMsgdumpSourceRequest): QueryMsgdumpSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMsgdumpSourceEx(request, headers, runtime);
}

/**
 * Description: 查询msgdump消息同步任务源端资源
 * Summary: 查询msgdump消息同步任务源端资源
 */
async function queryMsgdumpSourceEx(request: QueryMsgdumpSourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMsgdumpSourceResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.msgdump.source.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateMsgdumpTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // cell
  cell: string(name='cell'),
  // 对消息同步任务的描述
  remark: string(name='remark'),
  // 源端 event code
  sourceEventCode: string(name='source_event_code'),
  // 源端实例 id
  sourceInstanceId: string(name='source_instance_id'),
  // 源端 topic
  sourceTopic: string(name='source_topic'),
  // 目标 tag
  targetTag: string(name='target_tag'),
  // 目标 topic
  targetTopic: string(name='target_topic'),
  // 目标 instance id 
  targetInstanceId: string(name='target_instance_id'),
}

model CreateMsgdumpTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建 msgdump 同步任务
 * Summary: 创建同步任务
 */
async function createMsgdumpTask(request: CreateMsgdumpTaskRequest): CreateMsgdumpTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createMsgdumpTaskEx(request, headers, runtime);
}

/**
 * Description: 创建 msgdump 同步任务
 * Summary: 创建同步任务
 */
async function createMsgdumpTaskEx(request: CreateMsgdumpTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateMsgdumpTaskResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.msgdump.task.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMsgdumpTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 源 event code
  sourceEventCode?: string(name='source_event_code'),
  // 源实例 id
  sourceInstanceId?: string(name='source_instance_id'),
  // 源 topic
  sourceTopic?: string(name='source_topic'),
  // 任务状态
  status?: long(name='status'),
  // 目标 instance id
  targetInstanceId?: string(name='target_instance_id'),
  // 目标 tag
  targetTag?: string(name='target_tag'),
  // 目标 topic
  targetTopic?: string(name='target_topic'),
}

model QueryMsgdumpTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 任务列表
  data?: [ MsgdumpTaskDTO ](name='data'),
}

/**
 * Description: 查询消息同步任务
 * Summary: 查询消息同步任务
 */
async function queryMsgdumpTask(request: QueryMsgdumpTaskRequest): QueryMsgdumpTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMsgdumpTaskEx(request, headers, runtime);
}

/**
 * Description: 查询消息同步任务
 * Summary: 查询消息同步任务
 */
async function queryMsgdumpTaskEx(request: QueryMsgdumpTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMsgdumpTaskResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.msgdump.task.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteMsgdumpTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务 id
  taskId: long(name='task_id'),
}

model DeleteMsgdumpTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除 msgdump 任务
 * Summary: 删除 msgdump 任务
 */
async function deleteMsgdumpTask(request: DeleteMsgdumpTaskRequest): DeleteMsgdumpTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteMsgdumpTaskEx(request, headers, runtime);
}

/**
 * Description: 删除 msgdump 任务
 * Summary: 删除 msgdump 任务
 */
async function deleteMsgdumpTaskEx(request: DeleteMsgdumpTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteMsgdumpTaskResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.msgdump.task.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model EnableMsgdumpTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务 id
  taskId: long(name='task_id'),
  // true: 启动任务
  // false: 停止任务
  enable: boolean(name='enable'),
}

model EnableMsgdumpTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新msgdump任务状态
 * Summary: 更新msgdump任务状态
 */
async function enableMsgdumpTask(request: EnableMsgdumpTaskRequest): EnableMsgdumpTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return enableMsgdumpTaskEx(request, headers, runtime);
}

/**
 * Description: 更新msgdump任务状态
 * Summary: 更新msgdump任务状态
 */
async function enableMsgdumpTaskEx(request: EnableMsgdumpTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EnableMsgdumpTaskResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.msgdump.task.enable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSchemaAdminmetadataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // SOFAMQ的实例ID
  instanceId: string(name='instance_id'),
  // 名称
  name: string(name='name'),
  // 页号
  pageNum: long(name='page_num'),
  // 页大小
  pageSize: long(name='page_size'),
  // schema的租户信息
  schemaTenant?: string(name='schema_tenant'),
  // schema的命名空间
  schemaNamespace?: string(name='schema_namespace'),
}

model ListSchemaAdminmetadataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据
  data?: SchemaMetadataPageDO(name='data'),
}

/**
 * Description: schema metadata 分页查询
 * Summary: schema metadata 分页查询
 */
async function listSchemaAdminmetadata(request: ListSchemaAdminmetadataRequest): ListSchemaAdminmetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSchemaAdminmetadataEx(request, headers, runtime);
}

/**
 * Description: schema metadata 分页查询
 * Summary: schema metadata 分页查询
 */
async function listSchemaAdminmetadataEx(request: ListSchemaAdminmetadataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSchemaAdminmetadataResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.schema.adminmetadata.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSchemaAdminmetadataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // SOFAMQ实例ID
  instanceId: string(name='instance_id'),
  // 应用名称
  app: string(name='app'),
  // 兼容性策略
  compatibility: string(name='compatibility'),
  // 描述
  // 
  description: string(name='description'),
  // 名称
  name: string(name='name'),
  // 命名空间
  namespace?: string(name='namespace'),
  // 租户
  schemaTenant?: string(name='schema_tenant'),
}

model CreateSchemaAdminmetadataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 新增schema的metadata信息
 * Summary: 新增schema的metadata信息
 */
async function createSchemaAdminmetadata(request: CreateSchemaAdminmetadataRequest): CreateSchemaAdminmetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSchemaAdminmetadataEx(request, headers, runtime);
}

/**
 * Description: 新增schema的metadata信息
 * Summary: 新增schema的metadata信息
 */
async function createSchemaAdminmetadataEx(request: CreateSchemaAdminmetadataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSchemaAdminmetadataResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.schema.adminmetadata.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSchemaAdminmetadataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // SOFAMQ实例ID
  instanceId: string(name='instance_id'),
  // 应用名
  app?: string(name='app'),
  // 兼容性
  compatibility?: string(name='compatibility'),
  // 依赖坐标
  coordinate?: string(name='coordinate'),
  // 描述
  description?: string(name='description'),
  // 名称
  name: string(name='name'),
  // 命名空间
  namespace?: string(name='namespace'),
  // 租户
  schemaTenant?: string(name='schema_tenant'),
  // 状态
  state?: string(name='state'),
  // 同步站点
  syncSites?: string(name='sync_sites'),
}

model UpdateSchemaAdminmetadataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新schema元信息
 * Summary: 更新schema元信息
 */
async function updateSchemaAdminmetadata(request: UpdateSchemaAdminmetadataRequest): UpdateSchemaAdminmetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSchemaAdminmetadataEx(request, headers, runtime);
}

/**
 * Description: 更新schema元信息
 * Summary: 更新schema元信息
 */
async function updateSchemaAdminmetadataEx(request: UpdateSchemaAdminmetadataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSchemaAdminmetadataResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.schema.adminmetadata.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSchemaAdminmetadataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // SOFAMQ的实例ID
  instanceId: string(name='instance_id'),
  // 名称
  name: string(name='name'),
  // 命名空间
  namespace?: string(name='namespace'),
  // 租户
  schemaTenant?: string(name='schema_tenant'),
}

model DeleteSchemaAdminmetadataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除schema元信息
 * Summary: 删除schema元信息
 */
async function deleteSchemaAdminmetadata(request: DeleteSchemaAdminmetadataRequest): DeleteSchemaAdminmetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSchemaAdminmetadataEx(request, headers, runtime);
}

/**
 * Description: 删除schema元信息
 * Summary: 删除schema元信息
 */
async function deleteSchemaAdminmetadataEx(request: DeleteSchemaAdminmetadataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSchemaAdminmetadataResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.schema.adminmetadata.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSchemaAdmindetailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // SOFAMQ的实例ID
  instanceId: string(name='instance_id'),
  // schema 名称
  name: string(name='name'),
  // 页面编号
  pageNum: long(name='page_num'),
  // 页面大小
  pageSize: long(name='page_size'),
}

model ListSchemaAdmindetailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分页返回值
  data?: SchemaDetailPageDO(name='data'),
}

/**
 * Description: 分页查看schema详情
 * Summary: 分页查看schema详情
 */
async function listSchemaAdmindetail(request: ListSchemaAdmindetailRequest): ListSchemaAdmindetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSchemaAdmindetailEx(request, headers, runtime);
}

/**
 * Description: 分页查看schema详情
 * Summary: 分页查看schema详情
 */
async function listSchemaAdmindetailEx(request: ListSchemaAdmindetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSchemaAdmindetailResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.schema.admindetail.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSchemaAdmindetailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // SOFAMQ的实例ID
  instanceId: string(name='instance_id'),
  // 内容
  content: string(name='content'),
  // 值校验
  fieldValidateRule?: string(name='field_validate_rule'),
  // 名称
  name: string(name='name'),
  // 命名空间
  namespace?: string(name='namespace'),
  // 租户
  schemaTenant?: string(name='schema_tenant'),
  // 序列化方式
  serialization: string(name='serialization'),
  // 类型
  schemaType: string(name='schema_type'),
}

model CreateSchemaAdmindetailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 新增schema详情
 * Summary: 新增schema详情
 */
async function createSchemaAdmindetail(request: CreateSchemaAdmindetailRequest): CreateSchemaAdmindetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSchemaAdmindetailEx(request, headers, runtime);
}

/**
 * Description: 新增schema详情
 * Summary: 新增schema详情
 */
async function createSchemaAdmindetailEx(request: CreateSchemaAdmindetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSchemaAdmindetailResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.schema.admindetail.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSchemaAdmindetailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // uniq_id
  uniqId: long(name='uniq_id'),
}

model DeleteSchemaAdmindetailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: admindetail
 * Summary: 删除schema详情
 */
async function deleteSchemaAdmindetail(request: DeleteSchemaAdmindetailRequest): DeleteSchemaAdmindetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSchemaAdmindetailEx(request, headers, runtime);
}

/**
 * Description: admindetail
 * Summary: 删除schema详情
 */
async function deleteSchemaAdmindetailEx(request: DeleteSchemaAdmindetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSchemaAdmindetailResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.schema.admindetail.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqEndpointRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例ID
  instanceId: string(name='instance_id'),
}

model QuerySofamqEndpointResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 接入点列表信息
  data?: EndpointDTO(name='data'),
}

/**
 * Description: 查询endpoint
 * Summary: 查询endpoint
 */
async function querySofamqEndpoint(request: QuerySofamqEndpointRequest): QuerySofamqEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqEndpointEx(request, headers, runtime);
}

/**
 * Description: 查询endpoint
 * Summary: 查询endpoint
 */
async function querySofamqEndpointEx(request: QuerySofamqEndpointRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqEndpointResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.endpoint.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySchemaAdminmetadataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // SOFAMQ实例ID
  instanceId: string(name='instance_id'),
  // schema名称
  name: string(name='name'),
  // 命名空间
  namespace?: string(name='namespace'),
  // 租户
  schemaTenant?: string(name='schema_tenant'),
}

model QuerySchemaAdminmetadataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // schema元数据
  data?: SchemaMetadataDO(name='data'),
}

/**
 * Description: 按照条件查看schema元数据
 * Summary: 按照条件查看schema元数据
 */
async function querySchemaAdminmetadata(request: QuerySchemaAdminmetadataRequest): QuerySchemaAdminmetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySchemaAdminmetadataEx(request, headers, runtime);
}

/**
 * Description: 按照条件查看schema元数据
 * Summary: 按照条件查看schema元数据
 */
async function querySchemaAdminmetadataEx(request: QuerySchemaAdminmetadataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySchemaAdminmetadataResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.schema.adminmetadata.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySchemaAdminconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 配置类型
  configType: string(name='config_type'),
}

model QuerySchemaAdminconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 配置列表
  data?: [ string ](name='data'),
}

/**
 * Description: 查询schema的config配置
 * Summary: 查询schema的config配置
 */
async function querySchemaAdminconfig(request: QuerySchemaAdminconfigRequest): QuerySchemaAdminconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySchemaAdminconfigEx(request, headers, runtime);
}

/**
 * Description: 查询schema的config配置
 * Summary: 查询schema的config配置
 */
async function querySchemaAdminconfigEx(request: QuerySchemaAdminconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySchemaAdminconfigResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.schema.adminconfig.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqLinkRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例ID
  instanceId?: string(name='instance_id'),
}

model QuerySofamqLinkResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链接信息
  data?: LinkDTO(name='data'),
}

/**
 * Description: 查询console页面的链接
 * Summary: 查询console页面的链接
 */
async function querySofamqLink(request: QuerySofamqLinkRequest): QuerySofamqLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqLinkEx(request, headers, runtime);
}

/**
 * Description: 查询console页面的链接
 * Summary: 查询console页面的链接
 */
async function querySofamqLinkEx(request: QuerySofamqLinkRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqLinkResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.link.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqTopicnameRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例ID
  instanceId: string(name='instance_id'),
  // 查询数量
  num?: long(name='num'),
  // 用于模糊搜索的 topic 关键字
  topic?: string(name='topic'),
}

model QuerySofamqTopicnameResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // topic列表
  data?: [ string ](name='data'),
}

/**
 * Description: 查询全部topic名字
 * Summary: 查询全部topic名字
 */
async function querySofamqTopicname(request: QuerySofamqTopicnameRequest): QuerySofamqTopicnameResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqTopicnameEx(request, headers, runtime);
}

/**
 * Description: 查询全部topic名字
 * Summary: 查询全部topic名字
 */
async function querySofamqTopicnameEx(request: QuerySofamqTopicnameRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqTopicnameResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.topicname.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqGroupnameRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 查询最大数量
  num?: long(name='num'),
  // 用于模糊搜索的 groupId 关键字
  groupId?: string(name='group_id'),
}

model QuerySofamqGroupnameResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // group列表
  data?: [ string ](name='data'),
}

/**
 * Description: 查询全部group名字
 * Summary: 查询全部group名字
 */
async function querySofamqGroupname(request: QuerySofamqGroupnameRequest): QuerySofamqGroupnameResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqGroupnameEx(request, headers, runtime);
}

/**
 * Description: 查询全部group名字
 * Summary: 查询全部group名字
 */
async function querySofamqGroupnameEx(request: QuerySofamqGroupnameRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqGroupnameResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.groupname.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSofamqAdmintopicRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 集群名
  cluster: string(name='cluster'),
  // 需创建的 Topic 所对应的实例 ID
  instanceId: string(name='instance_id'),
  // 消息类型。取值说明如下：0：普通消息；1：分区顺序消息；2：全局顺序消息；4：事务消息；5：定时/延时消息。
  messageType: long(name='message_type'),
  // Topic 的备注信息
  remark?: string(name='remark'),
  // 生效范围，为三板斧使用
  scope?: string(name='scope'),
  // 需创建的 Topic 的名称
  topic: string(name='topic'),
  // Topic 权限，6为可读可写，4为可读
  perm?: string(name='perm'),
  // Topic 所属的应用名称，要求 app name 在 appinfo 上可查
  owner?: string(name='owner'),
  // 标识该 topic 的消息是否具有优先级
  priority?: boolean(name='priority'),
}

model CreateSofamqAdmintopicResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 管理员创建topic
 * Summary: 管理员创建topic
 */
async function createSofamqAdmintopic(request: CreateSofamqAdmintopicRequest): CreateSofamqAdmintopicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSofamqAdmintopicEx(request, headers, runtime);
}

/**
 * Description: 管理员创建topic
 * Summary: 管理员创建topic
 */
async function createSofamqAdmintopicEx(request: CreateSofamqAdmintopicRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSofamqAdmintopicResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.admintopic.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSofamqAdmingroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 集群名
  cluster: string(name='cluster'),
  // Group ID
  groupId: string(name='group_id'),
  // group协议类型
  groupType?: string(name='group_type'),
  // 实例ID
  instanceId: string(name='instance_id'),
  // Group ID 描述信息
  remark?: string(name='remark'),
  // 生效范围，三板斧使用
  scope?: string(name='scope'),
  // Group 所属的应用名称，要求 app name 在 zappinfo 上可查
  owner?: string(name='owner'),
}

model CreateSofamqAdmingroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 管理员创建group
 * Summary: 管理员创建group
 */
async function createSofamqAdmingroup(request: CreateSofamqAdmingroupRequest): CreateSofamqAdmingroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSofamqAdmingroupEx(request, headers, runtime);
}

/**
 * Description: 管理员创建group
 * Summary: 管理员创建group
 */
async function createSofamqAdmingroupEx(request: CreateSofamqAdmingroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSofamqAdmingroupResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.admingroup.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqConnectorRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务名称
  name: string(name='name'),
}

model QuerySofamqConnectorResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 连接器任务实体
  data?: ConnectorJob(name='data'),
  // 错误报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: 查询特定的连接任务详情
 * Summary: 查询特定的连接任务详情
 */
async function querySofamqConnector(request: QuerySofamqConnectorRequest): QuerySofamqConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqConnectorEx(request, headers, runtime);
}

/**
 * Description: 查询特定的连接任务详情
 * Summary: 查询特定的连接任务详情
 */
async function querySofamqConnectorEx(request: QuerySofamqConnectorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqConnectorResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connector.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSofamqConnectorRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // cron表达式描述任务触发，如果类型是cron的话
  cron?: string(name='cron'),
  // 数据过滤，支持SQL92过滤
  filter?: string(name='filter'),
  // 实例编号
  instanceId: string(name='instance_id'),
  // 任务名称
  name: string(name='name'),
  // 限流值
  rate?: long(minimum=0, name='rate'),
  // 描述任务
  remark?: string(name='remark'),
  // 去向信息的配置, kv结构的数组 的 JSON String
  sinkConfigs: string(name='sink_configs'),
  // 去向类型
  sinkType: string(name='sink_type'),
  // 来源的配置项列表， kv结构数组 的 JSON String
  sourceConfigs: string(name='source_configs'),
  // 来源类型
  sourceType: string(name='source_type'),
  // 如果类型是once的话，给定一个unix时间戳
  time?: long(name='time'),
  // 数据转化配置。数据转化配置的数组 的JSON String
  transformation?: string(name='transformation'),
  // 任务调度类型
  type: string(name='type'),
  // 任务所有者，一般是app维度
  app: string(name='app'),
  // stepflow平台上的某个 模板编号
  stepflowTemplateId?: string(name='stepflow_template_id'),
  // 时间订阅的配置，json格式
  eventSubConfigs?: string(name='event_sub_configs'),
  // 事件订阅是否开启
  eventSubEnabled: boolean(name='event_sub_enabled'),
  // 预期完成时间(s)
  acceptableExecutionInterval?: long(name='acceptable_execution_interval'),
  // 是否自动回收实例
  autoRecycleInstance?: boolean(name='auto_recycle_instance'),
}

model CreateSofamqConnectorResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: 新增一个连接器任务
 * Summary: 新增一个连接器任务
 */
async function createSofamqConnector(request: CreateSofamqConnectorRequest): CreateSofamqConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSofamqConnectorEx(request, headers, runtime);
}

/**
 * Description: 新增一个连接器任务
 * Summary: 新增一个连接器任务
 */
async function createSofamqConnectorEx(request: CreateSofamqConnectorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSofamqConnectorResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connector.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqConnectorRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 页码
  pageNum: long(name='page_num'),
  // 每页大小
  pageSize: long(name='page_size'),
  // 任务查询条件
  query?: ConnectorJobQuery(name='query'),
  // 租户实例编号
  instanceId: string(name='instance_id'),
}

model ListSofamqConnectorResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 连接器分页查询结果
  data?: ConnectorJobPageResult(name='data'),
  // 错误报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: 查询所有的连接任务，允许携带查询条件
 * Summary: 查询连接任务
 */
async function listSofamqConnector(request: ListSofamqConnectorRequest): ListSofamqConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqConnectorEx(request, headers, runtime);
}

/**
 * Description: 查询所有的连接任务，允许携带查询条件
 * Summary: 查询连接任务
 */
async function listSofamqConnectorEx(request: ListSofamqConnectorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqConnectorResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connector.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSofamqConnectorRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务名称
  name: string(name='name'),
  // 租户实例编号
  instanceId: string(name='instance_id'),
}

model DeleteSofamqConnectorResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: 删除一个连接器任务
 * Summary: 删除一个连接器任务
 */
async function deleteSofamqConnector(request: DeleteSofamqConnectorRequest): DeleteSofamqConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSofamqConnectorEx(request, headers, runtime);
}

/**
 * Description: 删除一个连接器任务
 * Summary: 删除一个连接器任务
 */
async function deleteSofamqConnectorEx(request: DeleteSofamqConnectorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSofamqConnectorResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connector.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model EnableSofamqConnectorRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务名称
  name: string(name='name'),
}

model EnableSofamqConnectorResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 任务名称
  name?: string(name='name'),
  // 租户实例编号
  instanceId?: string(name='instance_id'),
  // 错误报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: 启动一个连接器的任务
 * Summary: 启动一个连接器的任务
 */
async function enableSofamqConnector(request: EnableSofamqConnectorRequest): EnableSofamqConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return enableSofamqConnectorEx(request, headers, runtime);
}

/**
 * Description: 启动一个连接器的任务
 * Summary: 启动一个连接器的任务
 */
async function enableSofamqConnectorEx(request: EnableSofamqConnectorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EnableSofamqConnectorResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connector.enable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DisableSofamqConnectorRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务名称
  name: string(name='name'),
  // 租户实例
  instanceId: string(name='instance_id'),
}

model DisableSofamqConnectorResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: 停止一个连接器任务
 * Summary: 停止一个连接器任务
 */
async function disableSofamqConnector(request: DisableSofamqConnectorRequest): DisableSofamqConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return disableSofamqConnectorEx(request, headers, runtime);
}

/**
 * Description: 停止一个连接器任务
 * Summary: 停止一个连接器任务
 */
async function disableSofamqConnectorEx(request: DisableSofamqConnectorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DisableSofamqConnectorResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connector.disable', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqConnectorscheuletypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model ListSofamqConnectorscheuletypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 任务的调度类型 列表
  data?: [ string ](name='data'),
}

/**
 * Description: 列出所有任务的调度类型
 * Summary: 列出所有任务的调度类型
 */
async function listSofamqConnectorscheuletype(request: ListSofamqConnectorscheuletypeRequest): ListSofamqConnectorscheuletypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqConnectorscheuletypeEx(request, headers, runtime);
}

/**
 * Description: 列出所有任务的调度类型
 * Summary: 列出所有任务的调度类型
 */
async function listSofamqConnectorscheuletypeEx(request: ListSofamqConnectorscheuletypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqConnectorscheuletypeResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectorscheuletype.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqConnectorsourcetypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model ListSofamqConnectorsourcetypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 所有支持的来源类型
  data?: [ string ](name='data'),
}

/**
 * Description: 列出所有支持的来源类型
 * Summary: 列出所有支持的来源类型
 */
async function listSofamqConnectorsourcetype(request: ListSofamqConnectorsourcetypeRequest): ListSofamqConnectorsourcetypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqConnectorsourcetypeEx(request, headers, runtime);
}

/**
 * Description: 列出所有支持的来源类型
 * Summary: 列出所有支持的来源类型
 */
async function listSofamqConnectorsourcetypeEx(request: ListSofamqConnectorsourcetypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqConnectorsourcetypeResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectorsourcetype.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqConnectorsinktypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model ListSofamqConnectorsinktypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 所有支持的去向类型
  data?: [ string ](name='data'),
}

/**
 * Description: 列出所有支持的去向类型
 * Summary: 列出所有支持的去向类型
 */
async function listSofamqConnectorsinktype(request: ListSofamqConnectorsinktypeRequest): ListSofamqConnectorsinktypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqConnectorsinktypeEx(request, headers, runtime);
}

/**
 * Description: 列出所有支持的去向类型
 * Summary: 列出所有支持的去向类型
 */
async function listSofamqConnectorsinktypeEx(request: ListSofamqConnectorsinktypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqConnectorsinktypeResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectorsinktype.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model LoadSofamqConnectorconfigsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据源的类型，代表是来源还是去向，只有两种，对应的值是source 和 sink
  type: string(name='type'),
  // 具体的来源或者去向的类型
  value: string(name='value'),
}

model LoadSofamqConnectorconfigsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 连接器来源或者去向的 配置详情
  data?: [ UIControlModel ](name='data'),
  // 错误报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: 根据不同的来源或去向的类型，加载出前端需要渲染出来 让用户配置的  配置项控件。
 * Summary: 加载不同数据来源和去向对应的前端配置
 */
async function loadSofamqConnectorconfigs(request: LoadSofamqConnectorconfigsRequest): LoadSofamqConnectorconfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return loadSofamqConnectorconfigsEx(request, headers, runtime);
}

/**
 * Description: 根据不同的来源或去向的类型，加载出前端需要渲染出来 让用户配置的  配置项控件。
 * Summary: 加载不同数据来源和去向对应的前端配置
 */
async function loadSofamqConnectorconfigsEx(request: LoadSofamqConnectorconfigsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): LoadSofamqConnectorconfigsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectorconfigs.load', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqConnectordateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务名称
  name: string(name='name'),
}

model QuerySofamqConnectordateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回该任务的执行计划的实例摘要
  data?: [ InstanceDigest ](name='data'),
  // 时间列表
  dateList?: [ string ](name='date_list'),
  // 错误报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: connect按照时间段返回当前任务的执行记录
 * Summary: connect执行记录查询
 */
async function querySofamqConnectordate(request: QuerySofamqConnectordateRequest): QuerySofamqConnectordateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqConnectordateEx(request, headers, runtime);
}

/**
 * Description: connect按照时间段返回当前任务的执行记录
 * Summary: connect执行记录查询
 */
async function querySofamqConnectordateEx(request: QuerySofamqConnectordateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqConnectordateResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectordate.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqConnectorrecordRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务执行摘要
  digest: InstanceDigest(name='digest'),
  // 任务名称
  name: string(name='name'),
  // 时间，本字段已经废除，不需要传递
  date?: string(name='date'),
}

model QuerySofamqConnectorrecordResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 任务执行记录
  records?: JobRecordDTO(name='records'),
  // 错误报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: 根据执行时间返回当前的任务记录执行详情
 * Summary: 根据执行时间返回当前的任务记录执行详情
 */
async function querySofamqConnectorrecord(request: QuerySofamqConnectorrecordRequest): QuerySofamqConnectorrecordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqConnectorrecordEx(request, headers, runtime);
}

/**
 * Description: 根据执行时间返回当前的任务记录执行详情
 * Summary: 根据执行时间返回当前的任务记录执行详情
 */
async function querySofamqConnectorrecordEx(request: QuerySofamqConnectorrecordRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqConnectorrecordResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectorrecord.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model LoadSofamqConnectorsourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 来源的配置信息。source kv结构配置 数组 的 JSON String
  sourceConfigs: string(name='source_configs'),
  // 数据源类型
  sourceType: string(name='source_type'),
  // 任务名称，仅仅在任务修改时需要传递
  name?: string(name='name'),
}

model LoadSofamqConnectorsourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 来源的数据结构信息，包括名称、类型、别名、转化类型
  data?: [ ColumnConfig ](name='data'),
  // 错误报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: 加载数据源对应的结构信息
 * Summary: 加载数据源对应的结构信息
 */
async function loadSofamqConnectorsource(request: LoadSofamqConnectorsourceRequest): LoadSofamqConnectorsourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return loadSofamqConnectorsourceEx(request, headers, runtime);
}

/**
 * Description: 加载数据源对应的结构信息
 * Summary: 加载数据源对应的结构信息
 */
async function loadSofamqConnectorsourceEx(request: LoadSofamqConnectorsourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): LoadSofamqConnectorsourceResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectorsource.load', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMeshQueueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 队列名称
  name?: string(name='name'),
  // 当前页码值
  pageCurrent: long(name='page_current'),
  // 页面显示数
  pageSize: long(name='page_size'),
}

model QueryMeshQueueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 队列详情以及分页信息
  data?: QueuePageDescDTO(name='data'),
  // 状态
  state?: long(name='state'),
}

/**
 * Description: 查询队列详情信息以及分页信息
 * Summary: 查询队列详情
 */
async function queryMeshQueue(request: QueryMeshQueueRequest): QueryMeshQueueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMeshQueueEx(request, headers, runtime);
}

/**
 * Description: 查询队列详情信息以及分页信息
 * Summary: 查询队列详情
 */
async function queryMeshQueueEx(request: QueryMeshQueueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMeshQueueResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.queue.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportMeshQueueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 关联应用名
  assoApp: string(name='asso_app'),
  // 通道名
  channel: string(name='channel'),
  // 队列管理器ip
  ip: string(name='ip'),
  // 队列管理器名
  manager: string(name='manager'),
  // 队列名称
  name: string(name='name'),
  // 队列管理器端口
  port: string(name='port'),
  // 队列类型
  type: string(name='type'),
}

model ImportMeshQueueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态
  state?: long(name='state'),
}

/**
 * Description: 新增队列
 * Summary: 新增队列
 */
async function importMeshQueue(request: ImportMeshQueueRequest): ImportMeshQueueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importMeshQueueEx(request, headers, runtime);
}

/**
 * Description: 新增队列
 * Summary: 新增队列
 */
async function importMeshQueueEx(request: ImportMeshQueueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportMeshQueueResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.queue.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteMeshQueueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 队列id
  id: long(name='id'),
}

model DeleteMeshQueueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态
  state?: long(name='state'),
}

/**
 * Description: 删除队列
 * Summary: 删除队列
 */
async function deleteMeshQueue(request: DeleteMeshQueueRequest): DeleteMeshQueueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteMeshQueueEx(request, headers, runtime);
}

/**
 * Description: 删除队列
 * Summary: 删除队列
 */
async function deleteMeshQueueEx(request: DeleteMeshQueueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteMeshQueueResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.queue.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateMeshQueueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 关联应用名
  assoApp: string(name='asso_app'),
  // 通道名
  channel: string(name='channel'),
  // 队列id
  id: long(name='id'),
  // 队列管理器ip
  ip: string(name='ip'),
  // 队列管理器名
  manager: string(name='manager'),
  // 队列名称
  name: string(name='name'),
  // 队列管理器端口
  port: string(name='port'),
  // 队列类型
  type: string(name='type'),
}

model UpdateMeshQueueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回状态码
  state?: long(name='state'),
}

/**
 * Description: 更新队列
 * Summary: 更新队列
 */
async function updateMeshQueue(request: UpdateMeshQueueRequest): UpdateMeshQueueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateMeshQueueEx(request, headers, runtime);
}

/**
 * Description: 更新队列
 * Summary: 更新队列
 */
async function updateMeshQueueEx(request: UpdateMeshQueueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMeshQueueResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.queue.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMeshQueuelimitrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 队列id
  id: string(name='id'),
  // 限流规则名称
  name?: string(name='name'),
  // 当前页
  pageCurrent: long(name='page_current'),
  // 每页记录数
  pageSize: long(name='page_size'),
}

model QueryMeshQueuelimitrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 队列规则信息和分页信息
  data?: [ QueueLimitRulesPageDTO ](name='data'),
  // 状态
  state?: long(name='state'),
}

/**
 * Description: 查询限流规则
 * Summary: 查询限流规则
 */
async function queryMeshQueuelimitrules(request: QueryMeshQueuelimitrulesRequest): QueryMeshQueuelimitrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMeshQueuelimitrulesEx(request, headers, runtime);
}

/**
 * Description: 查询限流规则
 * Summary: 查询限流规则
 */
async function queryMeshQueuelimitrulesEx(request: QueryMeshQueuelimitrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMeshQueuelimitrulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.queuelimitrules.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSofamqConnectorRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // cron表达式描述任务触发，如果类型是cron的话
  cron?: string(name='cron'),
  // 数据过滤，支持SQL92过滤
  filter?: string(name='filter'),
  // 实例编号
  instanceId: string(name='instance_id'),
  // 任务名称
  name: string(name='name'),
  // 限流值
  rate?: long(minimum=0, name='rate'),
  // 任务描述
  remark?: string(name='remark'),
  // 去向信息的配置，配置信息数组的 jsonString
  sinkConfigs: string(name='sink_configs'),
  // 去向类型
  sinkType: string(name='sink_type'),
  // 	
  // 来源的配置项列表，配置数据数组 的JSONString
  sourceConfigs: string(name='source_configs'),
  // 来源类型
  sourceType: string(name='source_type'),
  // 如果类型是once的话，给定一个unix时间戳
  time?: long(name='time'),
  // 数据转化配置，转化配置数组的 JSONString
  transformation?: string(name='transformation'),
  // 任务调度类型
  type: string(name='type'),
  // 所属应用
  app: string(name='app'),
  // stepflow_template_id 
  stepflowTemplateId?: string(name='stepflow_template_id'),
  // 事件订阅的配置，json格式
  eventSubConfigs?: string(name='event_sub_configs'),
  // 事件订阅是否生效
  eventSubEnabled: boolean(name='event_sub_enabled'),
  // SLO时间
  acceptableExecutionInterval: long(name='acceptable_execution_interval'),
  // 是否自动回收实例
  autoRecycleInstance?: boolean(name='auto_recycle_instance'),
}

model UpdateSofamqConnectorResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: 修改一个连接器任务
 * Summary: 修改一个连接器任务
 */
async function updateSofamqConnector(request: UpdateSofamqConnectorRequest): UpdateSofamqConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSofamqConnectorEx(request, headers, runtime);
}

/**
 * Description: 修改一个连接器任务
 * Summary: 修改一个连接器任务
 */
async function updateSofamqConnectorEx(request: UpdateSofamqConnectorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSofamqConnectorResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connector.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMeshQueuelimitvalueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 限流规则id
  id: long(name='id'),
}

model QueryMeshQueuelimitvalueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 限流域值
  data?: [ QueueLimitValueDTO ](name='data'),
  // 状态
  state?: long(name='state'),
}

/**
 * Description: 查询限流规则域值
 * Summary: 查询限流规则域值
 */
async function queryMeshQueuelimitvalue(request: QueryMeshQueuelimitvalueRequest): QueryMeshQueuelimitvalueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMeshQueuelimitvalueEx(request, headers, runtime);
}

/**
 * Description: 查询限流规则域值
 * Summary: 查询限流规则域值
 */
async function queryMeshQueuelimitvalueEx(request: QueryMeshQueuelimitvalueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMeshQueuelimitvalueResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.queuelimitvalue.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateMeshQueuelimitRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 限流规则id
  id: long(name='id'),
  // 队列限流域值
  list: [ QueueLimitValueDTO ](name='list'),
  // 限流算法
  lAlgorithm: string(name='l_algorithm'),
  // 限流后操作
  lOperation: string(name='l_operation'),
  // 方法
  meth: string(name='meth'),
  // 限流规则名称
  name: string(name='name'),
  // 队列id
  queueId: long(name='queue_id'),
  // 运行模式
  rMode: string(name='r_mode'),
  // 状态
  status: long(name='status'),
  // 应用名
  app: string(name='app'),
}

model UpdateMeshQueuelimitResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回信息
  message?: string(name='message'),
  // 状态
  state?: long(name='state'),
}

/**
 * Description: 更新限流规则
 * Summary: 更新限流规则
 */
async function updateMeshQueuelimit(request: UpdateMeshQueuelimitRequest): UpdateMeshQueuelimitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateMeshQueuelimitEx(request, headers, runtime);
}

/**
 * Description: 更新限流规则
 * Summary: 更新限流规则
 */
async function updateMeshQueuelimitEx(request: UpdateMeshQueuelimitRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMeshQueuelimitResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.queuelimit.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportMeshQueuelimitRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id和rule_id为空
  list: [ QueueLimitValueDTO ](name='list'),
  // 限流算法
  lAlgorithm: string(name='l_algorithm'),
  // 限流后操作
  lOperation: string(name='l_operation'),
  // 方法
  meth: string(name='meth'),
  // 规则名称
  name: string(name='name'),
  // 队列id
  queueId: long(name='queue_id'),
  // 运行模式
  rMode: string(name='r_mode'),
  // 应用名
  app: string(name='app'),
}

model ImportMeshQueuelimitResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态
  state?: long(name='state'),
}

/**
 * Description: 添加限流规则
 * Summary: 添加限流规则
 */
async function importMeshQueuelimit(request: ImportMeshQueuelimitRequest): ImportMeshQueuelimitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importMeshQueuelimitEx(request, headers, runtime);
}

/**
 * Description: 添加限流规则
 * Summary: 添加限流规则
 */
async function importMeshQueuelimitEx(request: ImportMeshQueuelimitRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportMeshQueuelimitResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.queuelimit.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteMeshQueuelimitRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 队列规则id
  id: long(name='id'),
}

model DeleteMeshQueuelimitResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码
  state?: long(name='state'),
}

/**
 * Description: 删除限流规则
 * Summary: 删除限流规则
 */
async function deleteMeshQueuelimit(request: DeleteMeshQueuelimitRequest): DeleteMeshQueuelimitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteMeshQueuelimitEx(request, headers, runtime);
}

/**
 * Description: 删除限流规则
 * Summary: 删除限流规则
 */
async function deleteMeshQueuelimitEx(request: DeleteMeshQueuelimitRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteMeshQueuelimitResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.queuelimit.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteMeshQueuelimitvalueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 限流域值id
  id: long(name='id'),
}

model DeleteMeshQueuelimitvalueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态
  state?: long(name='state'),
}

/**
 * Description: 删除限流域值
 * Summary: 删除规则的限流域值
 */
async function deleteMeshQueuelimitvalue(request: DeleteMeshQueuelimitvalueRequest): DeleteMeshQueuelimitvalueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteMeshQueuelimitvalueEx(request, headers, runtime);
}

/**
 * Description: 删除限流域值
 * Summary: 删除规则的限流域值
 */
async function deleteMeshQueuelimitvalueEx(request: DeleteMeshQueuelimitvalueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteMeshQueuelimitvalueResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.queuelimitvalue.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMeshQueuerouterulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 队列id
  id: long(name='id'),
  // 路由规则名称
  name?: string(name='name'),
  // 当前页码值
  pagecurrent: long(name='pagecurrent'),
  // 页面大小
  pagesize: long(name='pagesize'),
}

model QueryMeshQueuerouterulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 路由规则信息
  data?: QueueRouteRulesPageDTO(name='data'),
  // 状态
  state?: long(name='state'),
}

/**
 * Description: 查询路由规则
 * Summary: 查询路由规则
 */
async function queryMeshQueuerouterules(request: QueryMeshQueuerouterulesRequest): QueryMeshQueuerouterulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMeshQueuerouterulesEx(request, headers, runtime);
}

/**
 * Description: 查询路由规则
 * Summary: 查询路由规则
 */
async function queryMeshQueuerouterulesEx(request: QueryMeshQueuerouterulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMeshQueuerouterulesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.queuerouterules.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMeshQueuerouteeditionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 路由规则id
  id: long(name='id'),
}

model QueryMeshQueuerouteeditionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 路由版本
  data?: [ QueueRouteEditionDTO ](name='data'),
  // 状态
  state?: long(name='state'),
}

/**
 * Description: 查询路由版本
 * Summary: 查询路由版本
 */
async function queryMeshQueuerouteedition(request: QueryMeshQueuerouteeditionRequest): QueryMeshQueuerouteeditionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMeshQueuerouteeditionEx(request, headers, runtime);
}

/**
 * Description: 查询路由版本
 * Summary: 查询路由版本
 */
async function queryMeshQueuerouteeditionEx(request: QueryMeshQueuerouteeditionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMeshQueuerouteeditionResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.queuerouteedition.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportMeshQueuerouteRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用
  app: string(name='app'),
  // 队列版本
  list: [ QueueRouteEditionDTO ](name='list'),
  // 方法
  meth: string(name='meth'),
  // 路由规则名称
  name: string(name='name'),
  // 队列id
  queueId: long(name='queue_id'),
  // 路由类型
  type: string(name='type'),
}

model ImportMeshQueuerouteResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态
  state?: long(name='state'),
}

/**
 * Description: 添加路由规则
 * Summary: 添加路由规则
 */
async function importMeshQueueroute(request: ImportMeshQueuerouteRequest): ImportMeshQueuerouteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importMeshQueuerouteEx(request, headers, runtime);
}

/**
 * Description: 添加路由规则
 * Summary: 添加路由规则
 */
async function importMeshQueuerouteEx(request: ImportMeshQueuerouteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportMeshQueuerouteResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.queueroute.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateMeshQueuerouteRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用
  app: string(name='app'),
  // 路由规则id
  id: long(name='id'),
  // 版本
  list: [ QueueRouteEditionDTO ](name='list'),
  // 方法
  meth: string(name='meth'),
  // 路由规则名称
  name: string(name='name'),
  // 队列id
  queueId: long(name='queue_id'),
  // 状态
  status: long(name='status'),
  // 分流开关
  switchStatus: long(name='switch_status'),
  // 路由类型
  type: string(name='type'),
}

model UpdateMeshQueuerouteResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态
  state?: long(name='state'),
}

/**
 * Description: 更新路由规则
 * Summary: 更新路由规则
 */
async function updateMeshQueueroute(request: UpdateMeshQueuerouteRequest): UpdateMeshQueuerouteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateMeshQueuerouteEx(request, headers, runtime);
}

/**
 * Description: 更新路由规则
 * Summary: 更新路由规则
 */
async function updateMeshQueuerouteEx(request: UpdateMeshQueuerouteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMeshQueuerouteResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.queueroute.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteMeshQueuerouteRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 路由规则id
  id: long(name='id'),
}

model DeleteMeshQueuerouteResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态
  state?: long(name='state'),
}

/**
 * Description: 删除限流规则
 * Summary: 删除限流规则
 */
async function deleteMeshQueueroute(request: DeleteMeshQueuerouteRequest): DeleteMeshQueuerouteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteMeshQueuerouteEx(request, headers, runtime);
}

/**
 * Description: 删除限流规则
 * Summary: 删除限流规则
 */
async function deleteMeshQueuerouteEx(request: DeleteMeshQueuerouteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteMeshQueuerouteResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.queueroute.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteMeshQueuerouteeditionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 路由版本id
  id: long(name='id'),
}

model DeleteMeshQueuerouteeditionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态
  state?: long(name='state'),
}

/**
 * Description: 删除路由版本
 * Summary: 删除路由版本
 */
async function deleteMeshQueuerouteedition(request: DeleteMeshQueuerouteeditionRequest): DeleteMeshQueuerouteeditionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteMeshQueuerouteeditionEx(request, headers, runtime);
}

/**
 * Description: 删除路由版本
 * Summary: 删除路由版本
 */
async function deleteMeshQueuerouteeditionEx(request: DeleteMeshQueuerouteeditionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteMeshQueuerouteeditionResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.queuerouteedition.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMeshQueuerouteappRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 队列id
  id: long(name='id'),
}

model QueryMeshQueuerouteappResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用名
  data?: [ string ](name='data'),
  // 状态
  state?: long(name='state'),
}

/**
 * Description: 查询路由规则应用
 * Summary: 查询路由规则应用
 */
async function queryMeshQueuerouteapp(request: QueryMeshQueuerouteappRequest): QueryMeshQueuerouteappResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMeshQueuerouteappEx(request, headers, runtime);
}

/**
 * Description: 查询路由规则应用
 * Summary: 查询路由规则应用
 */
async function queryMeshQueuerouteappEx(request: QueryMeshQueuerouteappRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMeshQueuerouteappResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.queuerouteapp.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMeshQueuebyidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 队列id
  id: long(name='id'),
}

model QueryMeshQueuebyidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 关联应用
  assoApp?: string(name='asso_app'),
  // 通道名
  channel?: string(name='channel'),
  // 队列管理器ip
  ip?: string(name='ip'),
  // 队列管理器名
  manager?: string(name='manager'),
  // 队列名
  name?: string(name='name'),
  // 队列管理器端口
  port?: string(name='port'),
  // 状态码
  state?: long(name='state'),
  // 类型
  type?: string(name='type'),
}

/**
 * Description: 根据队列id查询队列详情
 * Summary: 根据队列id查询队列详情
 */
async function queryMeshQueuebyid(request: QueryMeshQueuebyidRequest): QueryMeshQueuebyidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMeshQueuebyidEx(request, headers, runtime);
}

/**
 * Description: 根据队列id查询队列详情
 * Summary: 根据队列id查询队列详情
 */
async function queryMeshQueuebyidEx(request: QueryMeshQueuebyidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMeshQueuebyidResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.queuebyid.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateMeshQueuelimitstatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 限流规则id
  id: long(name='id'),
  // 状态
  status: long(name='status'),
}

model UpdateMeshQueuelimitstatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态
  state?: long(name='state'),
}

/**
 * Description: zhaolei
 * Summary: 更新限流状态
 */
async function updateMeshQueuelimitstatus(request: UpdateMeshQueuelimitstatusRequest): UpdateMeshQueuelimitstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateMeshQueuelimitstatusEx(request, headers, runtime);
}

/**
 * Description: zhaolei
 * Summary: 更新限流状态
 */
async function updateMeshQueuelimitstatusEx(request: UpdateMeshQueuelimitstatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMeshQueuelimitstatusResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.queuelimitstatus.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateMeshQueueroutestatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 路由规则id
  id: long(name='id'),
  // 队列id
  queueId: long(name='queue_id'),
  // 状态
  status: long(name='status'),
  // 应用
  app: string(name='app'),
}

model UpdateMeshQueueroutestatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态
  state?: long(name='state'),
}

/**
 * Description: 更新路由规则状态
 * Summary: 更新路由规则状态
 */
async function updateMeshQueueroutestatus(request: UpdateMeshQueueroutestatusRequest): UpdateMeshQueueroutestatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateMeshQueueroutestatusEx(request, headers, runtime);
}

/**
 * Description: 更新路由规则状态
 * Summary: 更新路由规则状态
 */
async function updateMeshQueueroutestatusEx(request: UpdateMeshQueueroutestatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMeshQueueroutestatusResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.queueroutestatus.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSofamqAdmintopicRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 集群名
  cluster: string(name='cluster'),
  // 需创建的 Topic 所对应的实例 ID
  instanceId: string(name='instance_id'),
  // 设置该 Topic 的读写模式。取值说明：6：同时支持读写；4：禁写；2：禁读。
  perm?: long(name='perm'),
  // 读队列数
  readQueueNum?: long(name='read_queue_num'),
  // topic名
  topic: string(name='topic'),
  // 写队列数
  writeQueueNum?: long(name='write_queue_num'),
  // 生效范围，三板斧使用
  scope?: string(name='scope'),
  // 标识该 topic 的消息是否具有优先级
  priority?: boolean(name='priority'),
}

model UpdateSofamqAdmintopicResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 管理员更新topic
 * Summary: 管理员更新topic
 */
async function updateSofamqAdmintopic(request: UpdateSofamqAdmintopicRequest): UpdateSofamqAdmintopicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSofamqAdmintopicEx(request, headers, runtime);
}

/**
 * Description: 管理员更新topic
 * Summary: 管理员更新topic
 */
async function updateSofamqAdmintopicEx(request: UpdateSofamqAdmintopicRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSofamqAdmintopicResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.admintopic.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSofamqAdmingroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 集群名
  cluster: string(name='cluster'),
  // group名
  groupId: string(name='group_id'),
  // 需创建的 Topic 所对应的实例 ID
  instanceId: string(name='instance_id'),
  // 设置读消息开关
  readEnable: boolean(name='read_enable'),
  // 生效范围，三板斧使用
  scope?: string(name='scope'),
  // 重试队列读队列数
  retryReadQueueNum?: long(name='retry_read_queue_num'),
  // 重试队列写队列数
  retryWriteQueueNum?: long(name='retry_write_queue_num'),
  // 设置该重试队列的读写模式。取值说明：6：同时支持读写；4：禁写；2：禁读。
  retryPerm?: long(name='retry_perm'),
}

model UpdateSofamqAdmingroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 管理员更新group
 * Summary: 管理员更新group
 */
async function updateSofamqAdmingroup(request: UpdateSofamqAdmingroupRequest): UpdateSofamqAdmingroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSofamqAdmingroupEx(request, headers, runtime);
}

/**
 * Description: 管理员更新group
 * Summary: 管理员更新group
 */
async function updateSofamqAdmingroupEx(request: UpdateSofamqAdmingroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSofamqAdmingroupResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.admingroup.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RunSofamqConnectorjobRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 期望任务执行时间的unix 时间戳，精度是毫秒
  executionTime?: long(name='execution_time'),
  // 任务名
  job: string(name='job'),
  // 分区描述
  partition?: string(name='partition'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // Sink开发分组
  sinkDevGroup?: string(name='sink_dev_group'),
  // dt=20210910
  sourcePartition?: string(name='source_partition'),
  // 目标分组
  sinkPartition?: string(name='sink_partition'),
  // Source开发分组
  sourceDevGroup?: string(name='source_dev_group'),
}

model RunSofamqConnectorjobResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: 手动触发一次任务的执行
 * Summary: 手动触发一次任务的执行
 */
async function runSofamqConnectorjob(request: RunSofamqConnectorjobRequest): RunSofamqConnectorjobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return runSofamqConnectorjobEx(request, headers, runtime);
}

/**
 * Description: 手动触发一次任务的执行
 * Summary: 手动触发一次任务的执行
 */
async function runSofamqConnectorjobEx(request: RunSofamqConnectorjobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RunSofamqConnectorjobResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectorjob.run', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PauseSofamqConnectorjobRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务id
  taskId: string(name='task_id'),
  // 所属Connector任务名
  job: string(name='job'),
}

model PauseSofamqConnectorjobResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: 暂停一个Connector任务
 * Summary: 暂停一个任务
 */
async function pauseSofamqConnectorjob(request: PauseSofamqConnectorjobRequest): PauseSofamqConnectorjobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pauseSofamqConnectorjobEx(request, headers, runtime);
}

/**
 * Description: 暂停一个Connector任务
 * Summary: 暂停一个任务
 */
async function pauseSofamqConnectorjobEx(request: PauseSofamqConnectorjobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PauseSofamqConnectorjobResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectorjob.pause', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ResumeSofamqConnectorjobRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务id
  taskId: string(name='task_id'),
  // Connector任务
  job: string(name='job'),
}

model ResumeSofamqConnectorjobResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: 恢复一个暂停的任务
 * Summary: 恢复一个暂停的任务
 */
async function resumeSofamqConnectorjob(request: ResumeSofamqConnectorjobRequest): ResumeSofamqConnectorjobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return resumeSofamqConnectorjobEx(request, headers, runtime);
}

/**
 * Description: 恢复一个暂停的任务
 * Summary: 恢复一个暂停的任务
 */
async function resumeSofamqConnectorjobEx(request: ResumeSofamqConnectorjobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ResumeSofamqConnectorjobResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectorjob.resume', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateMeshQueueroutestatusconfirmRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 路由规则id
  id: long(name='id'),
  // 队列id
  queueId: long(name='queue_id'),
  // 状态
  status: long(name='status'),
  // 应用
  app: string(name='app'),
}

model UpdateMeshQueueroutestatusconfirmResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态
  state?: long(name='state'),
}

/**
 * Description: 确认覆盖路有规则状态
 * Summary: 确认覆盖路由规则状态
 */
async function updateMeshQueueroutestatusconfirm(request: UpdateMeshQueueroutestatusconfirmRequest): UpdateMeshQueueroutestatusconfirmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateMeshQueueroutestatusconfirmEx(request, headers, runtime);
}

/**
 * Description: 确认覆盖路有规则状态
 * Summary: 确认覆盖路由规则状态
 */
async function updateMeshQueueroutestatusconfirmEx(request: UpdateMeshQueueroutestatusconfirmRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMeshQueueroutestatusconfirmResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.queueroutestatusconfirm.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateMeshQueuelimitstatusconfirmRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 限流规则id
  id: long(name='id'),
  // 限流规则状态
  status: long(name='status'),
  // 队列id
  queueId: long(name='queue_id'),
  // 方法
  meth: string(name='meth'),
}

model UpdateMeshQueuelimitstatusconfirmResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态
  state?: long(name='state'),
}

/**
 * Description: 更细限流状态
 * Summary: 更新限流状态
 */
async function updateMeshQueuelimitstatusconfirm(request: UpdateMeshQueuelimitstatusconfirmRequest): UpdateMeshQueuelimitstatusconfirmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateMeshQueuelimitstatusconfirmEx(request, headers, runtime);
}

/**
 * Description: 更细限流状态
 * Summary: 更新限流状态
 */
async function updateMeshQueuelimitstatusconfirmEx(request: UpdateMeshQueuelimitstatusconfirmRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMeshQueuelimitstatusconfirmResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.queuelimitstatusconfirm.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecSofamqDailycheckRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 单元名
  cell?: string(name='cell'),
  // group名
  groupId: string(name='group_id'),
  // 实例ID
  instanceId: string(name='instance_id'),
  // 日切时间点
  checkTime: long(name='check_time'),
  // topic名
  topic: string(name='topic'),
}

model ExecSofamqDailycheckResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否满足日切条件
  checkStatus?: boolean(name='check_status'),
}

/**
 * Description: 日切检查，验证是否可以完成日切
 * Summary: 日切检查
 */
async function execSofamqDailycheck(request: ExecSofamqDailycheckRequest): ExecSofamqDailycheckResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execSofamqDailycheckEx(request, headers, runtime);
}

/**
 * Description: 日切检查，验证是否可以完成日切
 * Summary: 日切检查
 */
async function execSofamqDailycheckEx(request: ExecSofamqDailycheckRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecSofamqDailycheckResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.dailycheck.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMeshApplicationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名
  name?: string(name='name'),
  // 当前页
  pageCurrent: long(name='page_current'),
  // 页面大小
  pageSize: long(name='page_size'),
}

model QueryMeshApplicationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 页面记录
  data?: [ ApplicationPageDescDTO ](name='data'),
  // 状态
  state?: long(name='state'),
}

/**
 * Description: 查询应用详情
 * Summary: 查询应用详情
 */
async function queryMeshApplication(request: QueryMeshApplicationRequest): QueryMeshApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMeshApplicationEx(request, headers, runtime);
}

/**
 * Description: 查询应用详情
 * Summary: 查询应用详情
 */
async function queryMeshApplicationEx(request: QueryMeshApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMeshApplicationResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.application.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportMeshApplicationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用id
  id: long(name='id'),
  // 应用名
  name: string(name='name'),
  // 服务端get队列
  pubGetQueue?: string(name='pub_get_queue'),
  // 服务端put队列
  pubPutQueue?: string(name='pub_put_queue'),
  // 服务端rpc开关
  pubRpcStatus?: long(name='pub_rpc_status'),
  // 客户端get队列
  subGetQueue?: string(name='sub_get_queue'),
  // 客户端put队列
  subPutQueue?: string(name='sub_put_queue'),
  // 客户端rpc分流比例
  subRpcScale?: long(name='sub_rpc_scale'),
  // 服务类型
  type: string(name='type'),
  // 服务id列表
  list: [ ApplicationServiceDTO ](name='list'),
}

model ImportMeshApplicationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态
  state?: long(name='state'),
}

/**
 * Description: 新增应用
 * Summary: 新增应用
 */
async function importMeshApplication(request: ImportMeshApplicationRequest): ImportMeshApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importMeshApplicationEx(request, headers, runtime);
}

/**
 * Description: 新增应用
 * Summary: 新增应用
 */
async function importMeshApplicationEx(request: ImportMeshApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportMeshApplicationResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.application.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateMeshApplicationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用id
  id: long(name='id'),
  // 服务id
  list: [ ApplicationServiceDTO ](name='list'),
  // 应用名
  name: string(name='name'),
  // 服务度get队列
  pubGetQueue?: string(name='pub_get_queue'),
  // 服务端put队列
  pubPutQueue?: string(name='pub_put_queue'),
  // 服务端开关
  pubRpcStatus?: long(name='pub_rpc_status'),
  // 客户端get队列
  subGetQueue?: string(name='sub_get_queue'),
  // 客户端put队列
  subPutQueue?: string(name='sub_put_queue'),
  // 客户端rpc比例
  subRpcScale?: long(name='sub_rpc_scale'),
  // 服务类型
  type: string(name='type'),
}

model UpdateMeshApplicationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回状态
  state?: long(name='state'),
}

/**
 * Description: 更新应用
 * Summary: 更新应用
 */
async function updateMeshApplication(request: UpdateMeshApplicationRequest): UpdateMeshApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateMeshApplicationEx(request, headers, runtime);
}

/**
 * Description: 更新应用
 * Summary: 更新应用
 */
async function updateMeshApplicationEx(request: UpdateMeshApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMeshApplicationResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.application.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteMeshApplicationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用id
  id: long(name='id'),
}

model DeleteMeshApplicationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回状态
  state?: long(name='state'),
}

/**
 * Description: 删除应用
 * Summary: 删除应用
 */
async function deleteMeshApplication(request: DeleteMeshApplicationRequest): DeleteMeshApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteMeshApplicationEx(request, headers, runtime);
}

/**
 * Description: 删除应用
 * Summary: 删除应用
 */
async function deleteMeshApplicationEx(request: DeleteMeshApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteMeshApplicationResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.application.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMeshApplicationserviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用id
  id: long(name='id'),
}

model QueryMeshApplicationserviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 服务信息
  data?: [ ApplicationServiceDTO ](name='data'),
  // 返回状态
  state?: long(name='state'),
}

/**
 * Description: 查询应用服务id
 * Summary: 查询应用服务id
 */
async function queryMeshApplicationservice(request: QueryMeshApplicationserviceRequest): QueryMeshApplicationserviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMeshApplicationserviceEx(request, headers, runtime);
}

/**
 * Description: 查询应用服务id
 * Summary: 查询应用服务id
 */
async function queryMeshApplicationserviceEx(request: QueryMeshApplicationserviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMeshApplicationserviceResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.applicationservice.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMeshApplicationbynameRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 应用名
  name: string(name='name'),
}

model QueryMeshApplicationbynameResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 创建日期
  gmtCreated?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_created'),
  // 应用id
  id?: long(name='id'),
  // 应用名
  name?: string(name='name'),
  // 服务端get队列
  pubGetQueue?: string(name='pub_get_queue'),
  // 服务端put队列
  pubPutQueue?: string(name='pub_put_queue'),
  // 服务端rpc开关
  pubRpcStatus?: long(name='pub_rpc_status'),
  // 返回状态
  state?: long(name='state'),
  // 客户端get队列
  subGetQueue?: string(name='sub_get_queue'),
  // 客户端put队列
  subPutQueue?: string(name='sub_put_queue'),
  // 客户端rpc比例
  subRpcScale?: long(name='sub_rpc_scale'),
  // 服务类型
  type?: string(name='type'),
}

/**
 * Description: 根据应用名查应用详情
 * Summary: 根据应用名查应用详情
 */
async function queryMeshApplicationbyname(request: QueryMeshApplicationbynameRequest): QueryMeshApplicationbynameResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMeshApplicationbynameEx(request, headers, runtime);
}

/**
 * Description: 根据应用名查应用详情
 * Summary: 根据应用名查应用详情
 */
async function queryMeshApplicationbynameEx(request: QueryMeshApplicationbynameRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMeshApplicationbynameResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.applicationbyname.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMeshApplicationlistRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 队列id
  id: long(name='id'),
  // 队列名
  name: string(name='name'),
}

model QueryMeshApplicationlistResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 队列应用列表
  list?: [ string ](name='list'),
  // 返回状态
  state?: long(name='state'),
}

/**
 * Description: 查询队列的应用列表
 * Summary: 查询队列的应用列表
 */
async function queryMeshApplicationlist(request: QueryMeshApplicationlistRequest): QueryMeshApplicationlistResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMeshApplicationlistEx(request, headers, runtime);
}

/**
 * Description: 查询队列的应用列表
 * Summary: 查询队列的应用列表
 */
async function queryMeshApplicationlistEx(request: QueryMeshApplicationlistRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMeshApplicationlistResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.applicationlist.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMeshApplicationqueuenamesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryMeshApplicationqueuenamesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用列表
  list?: [ string ](name='list'),
}

/**
 * Description: 应用队列下拉框
 * Summary: 应用队列下拉框
 */
async function queryMeshApplicationqueuenames(request: QueryMeshApplicationqueuenamesRequest): QueryMeshApplicationqueuenamesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMeshApplicationqueuenamesEx(request, headers, runtime);
}

/**
 * Description: 应用队列下拉框
 * Summary: 应用队列下拉框
 */
async function queryMeshApplicationqueuenamesEx(request: QueryMeshApplicationqueuenamesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMeshApplicationqueuenamesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.mesh.applicationqueuenames.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PauseSofamqConnectorplanRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 执行计划的Id
  planId: string(name='plan_id'),
  // Connector任务名
  job: string(name='job'),
}

model PauseSofamqConnectorplanResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: 暂停一个Connector执行计划
 * Summary: 暂停一个Connector执行计划
 */
async function pauseSofamqConnectorplan(request: PauseSofamqConnectorplanRequest): PauseSofamqConnectorplanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pauseSofamqConnectorplanEx(request, headers, runtime);
}

/**
 * Description: 暂停一个Connector执行计划
 * Summary: 暂停一个Connector执行计划
 */
async function pauseSofamqConnectorplanEx(request: PauseSofamqConnectorplanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PauseSofamqConnectorplanResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectorplan.pause', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ResumeSofamqConnectorplanRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // connector任务执行计划Id
  planId: string(name='plan_id'),
  // Connector任务名
  job: string(name='job'),
}

model ResumeSofamqConnectorplanResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: 恢复一个connector执行计划
 * Summary: 恢复一个connector执行计划
 */
async function resumeSofamqConnectorplan(request: ResumeSofamqConnectorplanRequest): ResumeSofamqConnectorplanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return resumeSofamqConnectorplanEx(request, headers, runtime);
}

/**
 * Description: 恢复一个connector执行计划
 * Summary: 恢复一个connector执行计划
 */
async function resumeSofamqConnectorplanEx(request: ResumeSofamqConnectorplanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ResumeSofamqConnectorplanResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectorplan.resume', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RetrySofamqConnectorplanRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // connector任务执行计划
  planId: string(name='plan_id'),
  // Connector任务
  job: string(name='job'),
}

model RetrySofamqConnectorplanResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: 重启一个已有的connector任务计划，会删除当前的执行计划和执行进度
 * Summary: 重启一个已有的connector任务计划
 */
async function retrySofamqConnectorplan(request: RetrySofamqConnectorplanRequest): RetrySofamqConnectorplanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return retrySofamqConnectorplanEx(request, headers, runtime);
}

/**
 * Description: 重启一个已有的connector任务计划，会删除当前的执行计划和执行进度
 * Summary: 重启一个已有的connector任务计划
 */
async function retrySofamqConnectorplanEx(request: RetrySofamqConnectorplanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetrySofamqConnectorplanResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectorplan.retry', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqConnectorconfigsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户名称
  instanceId: string(name='instance_id'),
  // 任务名称
  name: string(name='name'),
  // 代表查询的配置 是source还是sink
  type: string(name='type'),
  // 是否是克隆模式
  clone?: boolean(name='clone'),
}

model QuerySofamqConnectorconfigsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 该任务 来源或去向的配置信息，包括是否可以修改，已经每个配置项如何修改的控件
  configs?: [ UIControlModel ](name='configs'),
  // 错误报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: 根据来源类型或去向类型，查询某个任务的所有配置，包括是否可以修改等
 * Summary: 查询任务不同来源去向的配置
 */
async function querySofamqConnectorconfigs(request: QuerySofamqConnectorconfigsRequest): QuerySofamqConnectorconfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqConnectorconfigsEx(request, headers, runtime);
}

/**
 * Description: 根据来源类型或去向类型，查询某个任务的所有配置，包括是否可以修改等
 * Summary: 查询任务不同来源去向的配置
 */
async function querySofamqConnectorconfigsEx(request: QuerySofamqConnectorconfigsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqConnectorconfigsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectorconfigs.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSofamqConsumelimiterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例ID
  instanceId: string(name='instance_id'),
  // 限流资源名，由 GROUP@TOPIC 组成
  name: string(name='name'),
  // 限流类型
  // - UNIT：单元限流，指定单元/CELL限流
  limiterType: string(name='limiter_type'),
  // 限流值配置，BASE 为基准限流值。
  tps: string(name='tps'),
}

model CreateSofamqConsumelimiterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建消费限流规则
 * Summary: 创建消费限流规则
 */
async function createSofamqConsumelimiter(request: CreateSofamqConsumelimiterRequest): CreateSofamqConsumelimiterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSofamqConsumelimiterEx(request, headers, runtime);
}

/**
 * Description: 创建消费限流规则
 * Summary: 创建消费限流规则
 */
async function createSofamqConsumelimiterEx(request: CreateSofamqConsumelimiterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSofamqConsumelimiterResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.consumelimiter.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSofamqConsumelimiterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例ID
  // 
  instanceId: string(name='instance_id'),
  // 限流类型 - UNIT：单元限流，指定单元/CELL限流
  // 
  limiterType: string(name='limiter_type'),
  // 限流资源名，由 GROUP@TOPIC 组成
  // 
  name: string(name='name'),
  // 限流值配置，BASE 为基准限流值。
  tps: string(name='tps'),
}

model UpdateSofamqConsumelimiterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新限流规则
 * Summary: 更新限流规则
 */
async function updateSofamqConsumelimiter(request: UpdateSofamqConsumelimiterRequest): UpdateSofamqConsumelimiterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSofamqConsumelimiterEx(request, headers, runtime);
}

/**
 * Description: 更新限流规则
 * Summary: 更新限流规则
 */
async function updateSofamqConsumelimiterEx(request: UpdateSofamqConsumelimiterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSofamqConsumelimiterResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.consumelimiter.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSofamqConsumelimiterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例ID
  instanceId: string(name='instance_id'),
  // 限流资源名，由 GROUP@TOPIC 组成
  name: string(name='name'),
}

model DeleteSofamqConsumelimiterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除限流规则
 * Summary: 删除限流规则
 */
async function deleteSofamqConsumelimiter(request: DeleteSofamqConsumelimiterRequest): DeleteSofamqConsumelimiterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSofamqConsumelimiterEx(request, headers, runtime);
}

/**
 * Description: 删除限流规则
 * Summary: 删除限流规则
 */
async function deleteSofamqConsumelimiterEx(request: DeleteSofamqConsumelimiterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSofamqConsumelimiterResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.consumelimiter.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqConsumelimiterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 消费限流资源所属的group
  group: string(name='group'),
  // 实例ID
  instanceId: string(name='instance_id'),
}

model QuerySofamqConsumelimiterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 消费限流列表
  data?: [ ConsumeLimiterDTO ](name='data'),
}

/**
 * Description: 获取限流规则
 * Summary: 限流规则获取
 */
async function querySofamqConsumelimiter(request: QuerySofamqConsumelimiterRequest): QuerySofamqConsumelimiterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqConsumelimiterEx(request, headers, runtime);
}

/**
 * Description: 获取限流规则
 * Summary: 限流规则获取
 */
async function querySofamqConsumelimiterEx(request: QuerySofamqConsumelimiterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqConsumelimiterResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.consumelimiter.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDmsInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ddd
  currTenant: string(name='curr_tenant'),
  // ss
  currWorkspace: string(name='curr_workspace'),
}

model GetDmsInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // dd
  data?: string(name='data'),
}

/**
 * Description: dd
 * Summary: dd
 */
async function getDmsInstance(request: GetDmsInstanceRequest): GetDmsInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDmsInstanceEx(request, headers, runtime);
}

/**
 * Description: dd
 * Summary: dd
 */
async function getDmsInstanceEx(request: GetDmsInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDmsInstanceResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.dms.instance.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqLabelsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例 ID（命名空间）
  instanceId?: string(name='instance_id'),
  // 资源类型：TOPIC、GROUP
  resourceType?: string(name='resource_type'),
  // 资源名，like _resource_name_ 匹配
  resourceName?: string(name='resource_name'),
  // 标签 KEY
  labelKey?: string(name='label_key'),
  // 标签值，like _label_value_ 匹配
  labelValue: string(name='label_value'),
}

model QuerySofamqLabelsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 资源标签
  labels?: [ ResourceLabelsDTO ](name='labels'),
}

/**
 * Description: 查询标签
 * Summary: 查询标签
 */
async function querySofamqLabels(request: QuerySofamqLabelsRequest): QuerySofamqLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqLabelsEx(request, headers, runtime);
}

/**
 * Description: 查询标签
 * Summary: 查询标签
 */
async function querySofamqLabelsEx(request: QuerySofamqLabelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqLabelsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.labels.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSofamqLabelsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例 ID（命名空间）
  instanceId: string(name='instance_id'),
  // 资源类型：TOPIC、GROUP
  resourceType: string(name='resource_type'),
  // 资源名
  resourceName: string(name='resource_name'),
  // 标签
  labels: [ string ](name='labels'),
}

model CreateSofamqLabelsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: SofaMQ 创建资源标签
 * Summary: 创建资源标签
 */
async function createSofamqLabels(request: CreateSofamqLabelsRequest): CreateSofamqLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSofamqLabelsEx(request, headers, runtime);
}

/**
 * Description: SofaMQ 创建资源标签
 * Summary: 创建资源标签
 */
async function createSofamqLabelsEx(request: CreateSofamqLabelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSofamqLabelsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.labels.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSofamqLabelsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例 ID（命名空间）
  instanceId: string(name='instance_id'),
  // 资源类型：TOPIC、GROUP
  resourceType: string(name='resource_type'),
  // 资源名
  resourceName: string(name='resource_name'),
  // 标签
  labels: [ string ](name='labels'),
}

model DeleteSofamqLabelsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除资源标签
 * Summary: 删除资源标签
 */
async function deleteSofamqLabels(request: DeleteSofamqLabelsRequest): DeleteSofamqLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSofamqLabelsEx(request, headers, runtime);
}

/**
 * Description: 删除资源标签
 * Summary: 删除资源标签
 */
async function deleteSofamqLabelsEx(request: DeleteSofamqLabelsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSofamqLabelsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.labels.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqSchemaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需获取的 Topic 信息列表所对应的实例 ID
  instanceId: string(name='instance_id'),
  // 页码
  pageNum: long(name='page_num'),
  // 每页的条数
  pageSize: long(name='page_size'),
  // schema的subject，在sofamq就中就是topic名称
  topic: string(name='topic'),
  // schema的唯一ID
  schemaId?: long(name='schema_id'),
}

model ListSofamqSchemaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // Schema信息
  data?: SchemaDetailPageDO(name='data'),
}

/**
 * Description: 获取特定Topic的Schema列表
 * Summary: 获取Topic的Schema列表
 */
async function listSofamqSchema(request: ListSofamqSchemaRequest): ListSofamqSchemaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqSchemaEx(request, headers, runtime);
}

/**
 * Description: 获取特定Topic的Schema列表
 * Summary: 获取Topic的Schema列表
 */
async function listSofamqSchemaEx(request: ListSofamqSchemaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqSchemaResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.schema.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSofamqSchemaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 创建Schema时的instanceId
  instanceId: string(name='instance_id'),
  // SOFAMQ的Topic
  topic: string(name='topic'),
  // Topic的Schema内容
  schemaContent: string(name='schema_content'),
  // Schema的描述信息
  schemaComment: string(name='schema_comment'),
  // Schema的兼容性策略
  schemaCompatibility: string(name='schema_compatibility'),
  // schema的序列化方式
  schemaSerialization: string(name='schema_serialization'),
}

model CreateSofamqSchemaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建Topic的Schema
 * Summary: 创建Schema
 */
async function createSofamqSchema(request: CreateSofamqSchemaRequest): CreateSofamqSchemaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSofamqSchemaEx(request, headers, runtime);
}

/**
 * Description: 创建Topic的Schema
 * Summary: 创建Schema
 */
async function createSofamqSchemaEx(request: CreateSofamqSchemaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSofamqSchemaResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.schema.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSofamqSchemaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // instance id
  instanceId: string(name='instance_id'),
  // sofamq的topic名称
  topic: string(name='topic'),
  // schema的版本号
  schemaVersion: long(name='schema_version'),
}

model GetSofamqSchemaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回特定某个Schema的信息
  data?: SchemaDetailDO(name='data'),
}

/**
 * Description: 获取特定Topic特定版本的Schema
 * Summary: 获取Schema详情
 */
async function getSofamqSchema(request: GetSofamqSchemaRequest): GetSofamqSchemaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSofamqSchemaEx(request, headers, runtime);
}

/**
 * Description: 获取特定Topic特定版本的Schema
 * Summary: 获取Schema详情
 */
async function getSofamqSchemaEx(request: GetSofamqSchemaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSofamqSchemaResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.schema.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExportSofamqSchemaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // sofamq instance id
  instanceId: string(name='instance_id'),
  // schema的唯一ID
  schemaId: string(name='schema_id'),
  // 实例代码的变成语言类型，空缺时使用Java
  language?: string(name='language'),
}

model ExportSofamqSchemaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 代码示例
  data?: string(name='data'),
}

/**
 * Description: 根据Schema生成对应的POJO代码
 * Summary: 获取schema对应的代码
 */
async function exportSofamqSchema(request: ExportSofamqSchemaRequest): ExportSofamqSchemaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return exportSofamqSchemaEx(request, headers, runtime);
}

/**
 * Description: 根据Schema生成对应的POJO代码
 * Summary: 获取schema对应的代码
 */
async function exportSofamqSchemaEx(request: ExportSofamqSchemaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExportSofamqSchemaResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.schema.export', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSofamqSchemaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // sofamq的instance id
  instanceId: string(name='instance_id'),
  // schema的唯一id
  schemaId: string(name='schema_id'),
  // schema的描述信息
  description?: string(name='description'),
  // 消息主题
  topic: string(name='topic'),
}

model UpdateSofamqSchemaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新schema信息（schema仅允许更新部分信息，比如描述信息；schema的内容是不能修改的）
 * Summary: 更新schema
 */
async function updateSofamqSchema(request: UpdateSofamqSchemaRequest): UpdateSofamqSchemaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSofamqSchemaEx(request, headers, runtime);
}

/**
 * Description: 更新schema信息（schema仅允许更新部分信息，比如描述信息；schema的内容是不能修改的）
 * Summary: 更新schema
 */
async function updateSofamqSchemaEx(request: UpdateSofamqSchemaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSofamqSchemaResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.schema.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllSofamqSchemaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // sofamq的instance id
  instanceId: string(name='instance_id'),
  // 查询Schema的Topic名称
  topic: string(name='topic'),
}

model AllSofamqSchemaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回某个Topic的Schema的版本号列表，版本号降序排列
  data?: [ long ](name='data'),
}

/**
 * Description: 获取Schema的版本号列表，结果按版本号大小降序排列
 * Summary: 获取Schema的版本号列表
 */
async function allSofamqSchema(request: AllSofamqSchemaRequest): AllSofamqSchemaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allSofamqSchemaEx(request, headers, runtime);
}

/**
 * Description: 获取Schema的版本号列表，结果按版本号大小降序排列
 * Summary: 获取Schema的版本号列表
 */
async function allSofamqSchemaEx(request: AllSofamqSchemaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllSofamqSchemaResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.schema.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExportSofamqMessageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // sofamq的instance id
  instanceId: string(name='instance_id'),
  // 消息的唯一ID
  messageId: string(name='message_id'),
  // 消息的Topic
  topic: string(name='topic'),
  // 消息所属的ZONE
  cell?: string(name='cell'),
}

model ExportSofamqMessageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 消息体反序列化后的数据，包含
  data?: MessagePayloadDTO(name='data'),
}

/**
 * Description: 根据Schema解析消息体，查看消息体的详细数据
 * Summary: 查看消息内容
 */
async function exportSofamqMessage(request: ExportSofamqMessageRequest): ExportSofamqMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return exportSofamqMessageEx(request, headers, runtime);
}

/**
 * Description: 根据Schema解析消息体，查看消息体的详细数据
 * Summary: 查看消息内容
 */
async function exportSofamqMessageEx(request: ExportSofamqMessageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExportSofamqMessageResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.message.export', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqSchemacompatibilityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model ListSofamqSchemacompatibilityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回系统支持的兼容性，key为兼容性的值，比如FULL，对应的value为前端下拉列表中展现的内容，比如“全兼容”
  data?: [ Pair ](name='data'),
}

/**
 * Description: 获取系统支持的兼容性策略
 * Summary: 获取系统支持的兼容性策略
 */
async function listSofamqSchemacompatibility(request: ListSofamqSchemacompatibilityRequest): ListSofamqSchemacompatibilityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqSchemacompatibilityEx(request, headers, runtime);
}

/**
 * Description: 获取系统支持的兼容性策略
 * Summary: 获取系统支持的兼容性策略
 */
async function listSofamqSchemacompatibilityEx(request: ListSofamqSchemacompatibilityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqSchemacompatibilityResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.schemacompatibility.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqSchemaserializationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model ListSofamqSchemaserializationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回系统支持的序列化方式
  data?: [ string ](name='data'),
}

/**
 * Description: 获取系统支持的序列化方式
 * Summary: 获取系统支持的序列化方式
 */
async function listSofamqSchemaserialization(request: ListSofamqSchemaserializationRequest): ListSofamqSchemaserializationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqSchemaserializationEx(request, headers, runtime);
}

/**
 * Description: 获取系统支持的序列化方式
 * Summary: 获取系统支持的序列化方式
 */
async function listSofamqSchemaserializationEx(request: ListSofamqSchemaserializationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqSchemaserializationResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.schemaserialization.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSofamqSchemaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // sofamq的instance id
  instanceId: string(name='instance_id'),
  // schema的唯一id
  schemaId: string(name='schema_id'),
  // 消息主题
  topic: string(name='topic'),
}

model DeleteSofamqSchemaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除特定的Schema
 * Summary: 删除特定的Schema
 */
async function deleteSofamqSchema(request: DeleteSofamqSchemaRequest): DeleteSofamqSchemaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSofamqSchemaEx(request, headers, runtime);
}

/**
 * Description: 删除特定的Schema
 * Summary: 删除特定的Schema
 */
async function deleteSofamqSchemaEx(request: DeleteSofamqSchemaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSofamqSchemaResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.schema.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqConnectorprocessRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务名称
  jobName: string(name='job_name'),
}

model QuerySofamqConnectorprocessResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 工单详情
  processInfos?: [ ProcessDTO ](name='process_infos'),
}

/**
 * Description: Connector工单查询
 * Summary: Connector工单查询
 */
async function querySofamqConnectorprocess(request: QuerySofamqConnectorprocessRequest): QuerySofamqConnectorprocessResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqConnectorprocessEx(request, headers, runtime);
}

/**
 * Description: Connector工单查询
 * Summary: Connector工单查询
 */
async function querySofamqConnectorprocessEx(request: QuerySofamqConnectorprocessRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqConnectorprocessResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectorprocess.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelSofamqConnectorprocessRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务名称
  jobName: string(name='job_name'),
}

model CancelSofamqConnectorprocessResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: Connector任务撤回审批
 * Summary: Connector任务撤回审批
 */
async function cancelSofamqConnectorprocess(request: CancelSofamqConnectorprocessRequest): CancelSofamqConnectorprocessResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelSofamqConnectorprocessEx(request, headers, runtime);
}

/**
 * Description: Connector任务撤回审批
 * Summary: Connector任务撤回审批
 */
async function cancelSofamqConnectorprocessEx(request: CancelSofamqConnectorprocessRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelSofamqConnectorprocessResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectorprocess.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ResumeSofamqConnectorprocessRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务名称
  jobName: string(name='job_name'),
}

model ResumeSofamqConnectorprocessResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: Connector重新提交工单
 * Summary: Connector重新提交工单
 */
async function resumeSofamqConnectorprocess(request: ResumeSofamqConnectorprocessRequest): ResumeSofamqConnectorprocessResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return resumeSofamqConnectorprocessEx(request, headers, runtime);
}

/**
 * Description: Connector重新提交工单
 * Summary: Connector重新提交工单
 */
async function resumeSofamqConnectorprocessEx(request: ResumeSofamqConnectorprocessRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ResumeSofamqConnectorprocessResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectorprocess.resume', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifySofamqConnectoroperationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务名称
  job: string(name='job'),
}

model VerifySofamqConnectoroperationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 校验一个connector的操作是否合法
 * Summary: 校验一个connector的操作是否合法
 */
async function verifySofamqConnectoroperation(request: VerifySofamqConnectoroperationRequest): VerifySofamqConnectoroperationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifySofamqConnectoroperationEx(request, headers, runtime);
}

/**
 * Description: 校验一个connector的操作是否合法
 * Summary: 校验一个connector的操作是否合法
 */
async function verifySofamqConnectoroperationEx(request: VerifySofamqConnectoroperationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifySofamqConnectoroperationResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectoroperation.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSofamqAuditorRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 起始时间
  closedStart?: long(name='closed_start'),
  // 结束时间戳
  openEnd?: long(name='open_end'),
  // 模糊资源名
  resource?: string(name='resource'),
}

model ListSofamqAuditorResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 操作审计数据
  data?: [ AuditorDTO ](name='data'),
}

/**
 * Description: 查看操作审计
 * Summary: 查看操作审计
 */
async function listSofamqAuditor(request: ListSofamqAuditorRequest): ListSofamqAuditorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSofamqAuditorEx(request, headers, runtime);
}

/**
 * Description: 查看操作审计
 * Summary: 查看操作审计
 */
async function listSofamqAuditorEx(request: ListSofamqAuditorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSofamqAuditorResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.auditor.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqConnectorjobappRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实例ID
  instanceId: string(name='instance_id'),
}

model QuerySofamqConnectorjobappResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用名称
  appNames?: [ string ](name='app_names'),
  // 报错信息
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: connector任务对应的应用名称查询
 * Summary: connector任务对应的应用名称查询
 */
async function querySofamqConnectorjobapp(request: QuerySofamqConnectorjobappRequest): QuerySofamqConnectorjobappResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqConnectorjobappEx(request, headers, runtime);
}

/**
 * Description: connector任务对应的应用名称查询
 * Summary: connector任务对应的应用名称查询
 */
async function querySofamqConnectorjobappEx(request: QuerySofamqConnectorjobappRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqConnectorjobappResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectorjobapp.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelSofamqConnectorplanRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // connector任务执行计划Id
  planId: string(name='plan_id'),
  // Connector任务名
  job: string(name='job'),
}

model CancelSofamqConnectorplanResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 报错报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: 取消Connector运行实例
 * Summary: 取消Connector运行实例
 */
async function cancelSofamqConnectorplan(request: CancelSofamqConnectorplanRequest): CancelSofamqConnectorplanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelSofamqConnectorplanEx(request, headers, runtime);
}

/**
 * Description: 取消Connector运行实例
 * Summary: 取消Connector运行实例
 */
async function cancelSofamqConnectorplanEx(request: CancelSofamqConnectorplanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelSofamqConnectorplanResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectorplan.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetSofamqConnectorplancheckpointRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // connector任务执行计划Id	
  // 
  planId: string(name='plan_id'),
  // Connector任务名	
  // 
  job: string(name='job'),
  // 重置任务请求
  resetOffsetRequest: ResetJobOffsetRequest(name='reset_offset_request'),
}

model SetSofamqConnectorplancheckpointResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: 重置任务实例位点
 * Summary: 重置任务实例位点
 */
async function setSofamqConnectorplancheckpoint(request: SetSofamqConnectorplancheckpointRequest): SetSofamqConnectorplancheckpointResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setSofamqConnectorplancheckpointEx(request, headers, runtime);
}

/**
 * Description: 重置任务实例位点
 * Summary: 重置任务实例位点
 */
async function setSofamqConnectorplancheckpointEx(request: SetSofamqConnectorplancheckpointRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetSofamqConnectorplancheckpointResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectorplancheckpoint.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqConnectorplansingletonRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务名称
  job: string(name='job'),
}

model QuerySofamqConnectorplansingletonResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 实例详情
  jobInstance?: JobRecordDTO(name='job_instance'),
  // 报错报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: 活跃的conenctor实例【常驻任务】
 * Summary: 活跃的conenctor实例
 */
async function querySofamqConnectorplansingleton(request: QuerySofamqConnectorplansingletonRequest): QuerySofamqConnectorplansingletonResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqConnectorplansingletonEx(request, headers, runtime);
}

/**
 * Description: 活跃的conenctor实例【常驻任务】
 * Summary: 活跃的conenctor实例
 */
async function querySofamqConnectorplansingletonEx(request: QuerySofamqConnectorplansingletonRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqConnectorplansingletonResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectorplansingleton.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqConnectorjobdelayRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 任务名称
  job: string(name='job'),
  // connector任务执行计划Id
  // 
  planId: string(name='plan_id'),
}

model QuerySofamqConnectorjobdelayResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 延迟详情
  delayDetail?: [ DelayInfo ](name='delay_detail'),
  // 报错报告
  errorDetail?: ErrorReport(name='error_detail'),
}

/**
 * Description: 获取延迟时间
 * Summary: 获取延迟时间
 */
async function querySofamqConnectorjobdelay(request: QuerySofamqConnectorjobdelayRequest): QuerySofamqConnectorjobdelayResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqConnectorjobdelayEx(request, headers, runtime);
}

/**
 * Description: 获取延迟时间
 * Summary: 获取延迟时间
 */
async function querySofamqConnectorjobdelayEx(request: QuerySofamqConnectorjobdelayRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqConnectorjobdelayResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectorjobdelay.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqConnectorjobpartitionstatuscolumnRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // connector任务执行计划Id
  // 
  job: string(name='job'),
  // connector任务执行计划Id
  // 
  planId: string(name='plan_id'),
}

model QuerySofamqConnectorjobpartitionstatuscolumnResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 列名称
  columnName?: [ ColumnName ](name='column_name'),
  // 错误报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: 常驻任务分区信息详情
 * Summary: 分区状态详情列名
 */
async function querySofamqConnectorjobpartitionstatuscolumn(request: QuerySofamqConnectorjobpartitionstatuscolumnRequest): QuerySofamqConnectorjobpartitionstatuscolumnResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqConnectorjobpartitionstatuscolumnEx(request, headers, runtime);
}

/**
 * Description: 常驻任务分区信息详情
 * Summary: 分区状态详情列名
 */
async function querySofamqConnectorjobpartitionstatuscolumnEx(request: QuerySofamqConnectorjobpartitionstatuscolumnRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqConnectorjobpartitionstatuscolumnResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectorjobpartitionstatuscolumn.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqConnectorjobpartitionstatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 页码
  pageNum: long(name='page_num'),
  // 每页大小
  pageSize: long(name='page_size'),
  // 作业名称
  job: string(name='job'),
  // 实例id
  planId?: string(name='plan_id'),
}

model QuerySofamqConnectorjobpartitionstatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分区分页状态
  data?: ConnectorJobPartitionStatusPageResult(name='data'),
  // 错误报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: 分区状态分页查询
 * Summary: 分区状态分页查询
 */
async function querySofamqConnectorjobpartitionstatus(request: QuerySofamqConnectorjobpartitionstatusRequest): QuerySofamqConnectorjobpartitionstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqConnectorjobpartitionstatusEx(request, headers, runtime);
}

/**
 * Description: 分区状态分页查询
 * Summary: 分区状态分页查询
 */
async function querySofamqConnectorjobpartitionstatusEx(request: QuerySofamqConnectorjobpartitionstatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqConnectorjobpartitionstatusResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectorjobpartitionstatus.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqConnectortriggerconfigsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // source类型
  sourceType: string(name='source_type'),
  // sink类型
  sinkType: string(name='sink_type'),
}

model QuerySofamqConnectortriggerconfigsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 页面渲染配置
  configs?: [ UIControlModel ](name='configs'),
  // 错误报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: 手动触发UI
 * Summary: 手动触发UI
 */
async function querySofamqConnectortriggerconfigs(request: QuerySofamqConnectortriggerconfigsRequest): QuerySofamqConnectortriggerconfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqConnectortriggerconfigsEx(request, headers, runtime);
}

/**
 * Description: 手动触发UI
 * Summary: 手动触发UI
 */
async function querySofamqConnectortriggerconfigsEx(request: QuerySofamqConnectortriggerconfigsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqConnectortriggerconfigsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.connectortriggerconfigs.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSofamqOffsetRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需清除消费进度的 Group ID 所对应的实例 ID。针对有独立命名空间的实例，该参数为必填。
  instanceId: string(name='instance_id'),
  // 需清除消费进度的消费端 Group ID
  groupId: string(name='group_id'),
  // 需清除消费进度的 Topic 名称
  topic: string(name='topic'),
  // 需要清除消费进度的单元
  cells: string(name='cells'),
}

model DeleteSofamqOffsetResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 清除消费进度
 * Summary: 清除消费进度
 */
async function deleteSofamqOffset(request: DeleteSofamqOffsetRequest): DeleteSofamqOffsetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSofamqOffsetEx(request, headers, runtime);
}

/**
 * Description: 清除消费进度
 * Summary: 清除消费进度
 */
async function deleteSofamqOffsetEx(request: DeleteSofamqOffsetRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSofamqOffsetResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.offset.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySofamqConsumptionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例ID
  // 
  instanceId: string(name='instance_id'),
  // ldc模式下的cell
  // 
  cell: string(name='cell'),
  // 消费者groupID
  groupId: string(name='group_id'),
  // 订阅的topic
  // 
  topic: string(name='topic'),
  // 是否带上客户端信息
  // 
  needClientDetail: boolean(name='need_client_detail'),
}

model QuerySofamqConsumptionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询结果
  data?: ConsumptionStatusDTO(name='data'),
}

/**
 * Description: 用户端查询消费进度
 * Summary: 用户端查询消费进度
 */
async function querySofamqConsumption(request: QuerySofamqConsumptionRequest): QuerySofamqConsumptionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySofamqConsumptionEx(request, headers, runtime);
}

/**
 * Description: 用户端查询消费进度
 * Summary: 用户端查询消费进度
 */
async function querySofamqConsumptionEx(request: QuerySofamqConsumptionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySofamqConsumptionResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.sofamq.consumption.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUserTopicqueueRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需查询的 Topic 所在的 Cell
  // 
  cell: string(name='cell'),
  // 需要查询的Topic对应的实例ID
  instanceId: string(name='instance_id'),
  // Topic名称
  topic: string(name='topic'),
}

model QueryUserTopicqueueResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // Topic队列列表信息
  data?: [ TopicQueueDTO ](name='data'),
}

/**
 * Description: 查询用户端topic的queue信息
 * Summary: 查询用户端topic的queue信息
 */
async function queryUserTopicqueue(request: QueryUserTopicqueueRequest): QueryUserTopicqueueResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUserTopicqueueEx(request, headers, runtime);
}

/**
 * Description: 查询用户端topic的queue信息
 * Summary: 查询用户端topic的queue信息
 */
async function queryUserTopicqueueEx(request: QueryUserTopicqueueRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUserTopicqueueResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.user.topicqueue.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateMessageNextdeliverytimeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户实例id
  instanceId: string(name='instance_id'),
  // topic
  topic: string(name='topic'),
  // eventcode
  eventcode: string(name='eventcode'),
  // subscriber group
  group: string(name='group'),
  // next delivery time
  deliveryTime?: long(name='delivery_time'),
}

model UpdateMessageNextdeliverytimeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 更新结果
  updateResults?: [ long ](name='update_results'),
}

/**
 * Description: update next delivery time
 * Summary: update delivery time
 */
async function updateMessageNextdeliverytime(request: UpdateMessageNextdeliverytimeRequest): UpdateMessageNextdeliverytimeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateMessageNextdeliverytimeEx(request, headers, runtime);
}

/**
 * Description: update next delivery time
 * Summary: update delivery time
 */
async function updateMessageNextdeliverytimeEx(request: UpdateMessageNextdeliverytimeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMessageNextdeliverytimeResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.message.nextdeliverytime.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CountMessageUndeliveryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // middleware instance id
  instanceId: string(name='instance_id'),
  // topic
  topic: string(name='topic'),
  // eventcode
  eventcode: string(name='eventcode'),
  // subscriber group
  group: string(name='group'),
  // end time
  endTime: string(name='end_time'),
}

model CountMessageUndeliveryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // count of undelivered messages
  totalCount?: long(name='total_count'),
}

/**
 * Description: 统计未投递消息数量
 * Summary: 统计未投递消息数量
 */
async function countMessageUndelivery(request: CountMessageUndeliveryRequest): CountMessageUndeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return countMessageUndeliveryEx(request, headers, runtime);
}

/**
 * Description: 统计未投递消息数量
 * Summary: 统计未投递消息数量
 */
async function countMessageUndeliveryEx(request: CountMessageUndeliveryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CountMessageUndeliveryResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.message.undelivery.count', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model LoadConnectorjobSloviewRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // source类型
  sourceType: string(name='source_type'),
  // 触发类型
  triggerType: string(name='trigger_type'),
  // cron表达式的值
  triggerValue: string(name='trigger_value'),
}

model LoadConnectorjobSloviewResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // Slo配置
  data?: SloSpec(name='data'),
  // 错误报告
  errorReport?: ErrorReport(name='error_report'),
}

/**
 * Description: 加载任务SLO配置页面
 * Summary: 任务SLO配置
 */
async function loadConnectorjobSloview(request: LoadConnectorjobSloviewRequest): LoadConnectorjobSloviewResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return loadConnectorjobSloviewEx(request, headers, runtime);
}

/**
 * Description: 加载任务SLO配置页面
 * Summary: 任务SLO配置
 */
async function loadConnectorjobSloviewEx(request: LoadConnectorjobSloviewRequest, headers: map[string]string, runtime: Util.RuntimeOptions): LoadConnectorjobSloviewResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.mq.connectorjob.sloview.load', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

