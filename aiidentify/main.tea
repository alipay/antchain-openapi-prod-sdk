import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.4',
    _prod_code = 'AIIDENTIFY',
    _prod_channel = 'undefined'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 提交AI鉴定时鉴定点信息
model IdentifyPointReq {
  // 鉴定点名称
  identifyPointName: string(name='identify_point_name', example='产地标'),
  // 鉴定点编号
  identifyPointCode: string(name='identify_point_code', example='353gdfgdgge'),
  // 鉴定商品此鉴定点的图片
  identifyPointImg: string(name='identify_point_img', example='sdfkjsnjkgk.jpg'),
}

// 鉴定点信息
model IdentifyPointResp {
  // 鉴定点名称
  identifyPointName: string(name='identify_point_name', example='外观'),
  // 鉴定点序号
  order: long(name='order', example='1'),
  // 鉴定点编号
  identifyPointCode: string(name='identify_point_code', example='43jkhjb'),
  // 标签图片oss链接
  labelImg: string(name='label_img', example='http://...skfnkj.png'),
  // 示例图片oss链接
  exampleImg: string(name='example_img', example='http://....sklnkg.png'),
  // 是否必传鉴定点
  isRequired: boolean(name='is_required', example='true, false'),
}

// 鉴定点结果
model IdentifyPointResultResp {
  // 234
  identifyPointName: string(name='identify_point_name', example='正面'),
  // 鉴定点唯一编号
  identifyPointCode: string(name='identify_point_code', example='sklmfj234'),
  // 鉴定点图片
  identifyPointImg: string(name='identify_point_img', example='http://34345.jpg'),
  // 鉴定点的鉴定结果
  // SUCCESS：符合鉴定标准
  // FAILED：不符合鉴定标准
  // NOT_IDENTIFY：无法鉴定
  identifyPointResult: string(name='identify_point_result', example='SUCCESS'),
}

model QueryIdentifypointRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 品类名称
  categoryName: string(name='category_name'),
  // 品牌名称
  brandName: string(name='brand_name'),
  // 款式名称
  styleName: string(name='style_name'),
}

model QueryIdentifypointResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 品类名称
  categoryName?: string(name='category_name'),
  // 品牌名称
  brandName?: string(name='brand_name'),
  // 款式名称
  styleName?: string(name='style_name'),
  // 款式编号
  styleCode?: string(name='style_code'),
  // 至少上传鉴定点数量
  atLeastNum?: long(name='at_least_num'),
  // 鉴定点信息列表
  identifyPointList?: [ IdentifyPointResp ](name='identify_point_list'),
}

/**
 * Description: 查询AI鉴定点
 * Summary: 查询AI鉴定点
 */
async function queryIdentifypoint(request: QueryIdentifypointRequest): QueryIdentifypointResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIdentifypointEx(request, headers, runtime);
}

/**
 * Description: 查询AI鉴定点
 * Summary: 查询AI鉴定点
 */
async function queryIdentifypointEx(request: QueryIdentifypointRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIdentifypointResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.aiidentify.identifypoint.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateIdentifyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 品类名称
  categoryName: string(name='category_name'),
  // 品牌名称
  brandName: string(name='brand_name'),
  // 款式名称
  styleName: string(name='style_name'),
  // 款式编号
  styleCode?: string(name='style_code'),
  // 鉴定点信息列表
  identifyPointList?: [ IdentifyPointReq ](name='identify_point_list'),
  // 鉴定点图片列表，当不能提供完整鉴定点信息列表时，可根据鉴定点查询接口出参中order字段将图片直接放入列表中
  identifyPointImgList?: [ string ](name='identify_point_img_list'),
}

model OperateIdentifyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 鉴定单编号
  identifyNumber?: string(name='identify_number'),
  // 品类名称
  categoryName?: string(name='category_name'),
  // 品牌名称
  brandName?: string(name='brand_name'),
  // 款式名称
  styleName?: string(name='style_name'),
  //  整体鉴定结果
  // SUCCESS：符合鉴定标准
  // FAILED：不符合鉴定标准
  // NOT_IDENTIFY：无法鉴定
  identifyResult?: string(name='identify_result'),
  // 鉴定描述
  identifyDesc?: string(name='identify_desc'),
  // 鉴定点结果列表
  identifyPointResultList?: [ IdentifyPointResultResp ](name='identify_point_result_list'),
}

/**
 * Description: 提交数据进行AI鉴定
 * Summary: 提交数据进行AI鉴定
 */
async function operateIdentify(request: OperateIdentifyRequest): OperateIdentifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateIdentifyEx(request, headers, runtime);
}

/**
 * Description: 提交数据进行AI鉴定
 * Summary: 提交数据进行AI鉴定
 */
async function operateIdentifyEx(request: OperateIdentifyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateIdentifyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.aiidentify.identify.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateFileuploadGetsignedurlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model OperateFileuploadGetsignedurlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 文件ID(用于 提交数据进行AI鉴定 时图片对应的属性值)
  fileId?: string(name='file_id'),
  // oss上传文件链接
  ossUrl?: string(name='oss_url'),
  // oss上传文件时的ossKey值 
  ossKey?: string(name='oss_key'),
}

/**
 * Description: 获取oss文件上传签名URL，可通过此url跟oss交互上传文件
 * Summary: 获取oss文件上传签名URL
 */
async function operateFileuploadGetsignedurl(request: OperateFileuploadGetsignedurlRequest): OperateFileuploadGetsignedurlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateFileuploadGetsignedurlEx(request, headers, runtime);
}

/**
 * Description: 获取oss文件上传签名URL，可通过此url跟oss交互上传文件
 * Summary: 获取oss文件上传签名URL
 */
async function operateFileuploadGetsignedurlEx(request: OperateFileuploadGetsignedurlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateFileuploadGetsignedurlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.aiidentify.fileupload.getsignedurl.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

