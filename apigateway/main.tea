import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.1.312',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 注册中心详情
model RegistryInfoVO {
  // workspace_id
  workspaceId?: string(name='workspace_id', example='workspace_id'),
  // tenant_id
  tenantId?: string(name='tenant_id', example='tenant_id'),
  // 注册中心标识
  registryId?: string(name='registry_id', example='registry_id'),
  // 注册中心类型
  registryType?: string(name='registry_type', example='registry_type'),
  // 名称
  registryName?: string(name='registry_name', example='registry_name'),
  // access_key
  accessKey?: string(name='access_key', example='access_key'),
  // secret_key
  secretKey?: string(name='secret_key', example='secret_key'),
  // 集群数量
  sysCount?: long(name='sys_count', example='1'),
  // host
  host?: [ string ](name='host', example='host'),
  // can_delete
  canDelete?: boolean(name='can_delete', example='true, false'),
  // port
  port?: long(name='port', example=''),
  // gmt_create
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // gmt_modified
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // operator
  operator?: string(name='operator', example='operator'),
  // pub协议标识
  pubProtocol?: string(name='pub_protocol', example='pub_protocol'),
  // can_update
  canUpdate?: boolean(name='can_update', example='true, false'),
  // 注册中心分组
  registryGroup?: string(name='registry_group', example='registry_group'),
  // 协议版本
  protocolVersion?: string(name='protocol_version', example='1.0.0'),
  // 命名空间
  nameSpace?: string(name='name_space', example='name_space'),
  // 集群名称
  clusterName?: string(name='cluster_name', example='cluster_name'),
}

// AuthenticationConfigVO
model AuthenticationConfigVO {
  // access_key
  accessKey?: string(name='access_key', example='key1'),
  // secret_key
  secretKey?: string(name='secret_key', example='key1'),
}

// SystemClusterVO
model SystemClusterVO {
  // api数
  apiCount?: long(name='api_count', example=''),
  // 认证配置
  authenticationConfig?: AuthenticationConfigVO(name='authentication_config', example=''),
  // 认证方式
  authenticationType?: string(name='authentication_type', example='SECRET/NONE'),
  // 是否可以删除
  canDelete?: boolean(name='can_delete', example='true, false'),
  // 描述
  description?: string(name='description', example='测试系统'),
  // 绑定的外部授权数量
  externalAuthCount?: long(name='external_auth_count', example=''),
  // gmt_create
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // gmt_modified
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 系统host地址
  host?: [ string ](name='host', example=''),
  // 负载均衡策略类型
  lbType?: string(name='lb_type', example='RAMDOM / ROUND_ROBIN'),
  // 创建人
  operator?: string(name='operator', example='scott'),
  // 端口
  port?: long(name='port', example='8080'),
  // 实例id
  instanceId?: string(name='instance_id', example='instance_id'),
  // sys_id
  sysId?: string(name='sys_id', example='8Amfi67dmE9wpY46'),
  // sys_name
  sysName?: string(name='sys_name', example='test_sys'),
  // 系统类型(手工配置/sofa注册中心/zk)
  sysType?: string(name='sys_type', example='URL / SOFA'),
  // tenant_id
  tenantId?: string(name='tenant_id', example='TSCPDICNT'),
  // unique_id
  uniqueId?: string(name='unique_id', example='unique_id'),
  // upstream_protocol
  upstreamProtocol?: string(name='upstream_protocol', example='HTTP / MRPC / SOFA'),
  // 下发协议的开头
  urlType?: string(name='url_type', example='url_type'),
  // vpc_id
  vpcId?: string(name='vpc_id', example='vpc_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='default'),
  // registry_id
  registryId?: string(name='registry_id', example='registry_id'),
  // registry_info
  registryInfo?: RegistryInfoVO(name='registry_info', example=''),
  // triple域名
  tripleHost?: string(name='triple_host', example='triple_host'),
  // need_tls
  needTls?: boolean(name='need_tls', example='true, false'),
  // 证书类型
  tlsType?: string(name='tls_type', example='DEV/PROD'),
}

// ProtocolVO
model ProtocolVO {
  // 协议类型
  protocol?: string(name='protocol', example='HTTP、RPC、DUBBO'),
  // 端口
  port?: string(name='port', example='80'),
}

// EncryptConfigVO
model EncryptConfigVO {
  // app_id
  appId?: string(name='app_id', example='app1'),
  // 加密状态
  encryptionStatus?: string(name='encryption_status', example='OPENED/CLOSED'),
  // 加密类型
  encryptType?: string(name='encrypt_type', example='ECC/RSA/SM'),
  // key_pair
  keyPair?: string(name='key_pair', example='keypair1'),
  // private_key
  privateKey?: string(name='private_key', example='key1'),
  // pub_key
  pubKey?: string(name='pub_key', example='key1'),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='default'),
}

// RouterConfigVO
model RouterConfigVO {
  // argKey
  argKey?: string(name='arg_key', example='arg_key1'),
  // argValue
  argValue?: string(name='arg_value', example='arg_value1'),
  // matchType
  matchType?: string(name='match_type', example='IN / EQUAL'),
  // param_location
  paramLocation?: string(name='param_location', example='HEADER/COOKIE/PARAM'),
  // router_type
  routerType?: string(name='router_type', example='PATH / HEADER / WEIGHT'),
  // systemCluster
  systemCluster?: SystemClusterVO(name='system_cluster', example=''),
  // sys_id
  sysId?: string(name='sys_id', example='z8qkEoU6QlfNQlsQ'),
  // weight
  weight?: long(name='weight', example=''),
  // interceptionRule
  interceptionRule?: string(name='interception_rule', example='interception_rule1'),
}

// ApiRspCodeVO
model ApiRspCodeVO {
  // error_code
  errorCode?: string(name='error_code', example='error_code'),
  // error_msg
  errorMsg?: string(name='error_msg', example='error_msg'),
  // error_desc
  errorDesc?: string(name='error_desc', example='error_desc'),
}

// ApiGroupDomainVO
model ApiGroupDomainVO {
  // gmt_create
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // gmt_modified
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // api_group_id
  apiGroupId?: string(name='api_group_id', example='api_group_id'),
  // domain_name
  domainName?: string(name='domain_name', example='domain_name'),
}

// RouterInfoVO
model RouterInfoVO {
  // api数
  apiCount?: long(name='api_count', example=''),
  // 是否可以删除
  canDelete?: boolean(name='can_delete', example='true, false'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更改时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // operator
  operator?: string(name='operator', example='scott'),
  // routerConfigs
  routerConfigs?: [ RouterConfigVO ](name='router_configs', example=''),
  // router_id
  routerId?: string(name='router_id', example='8Amfi67dmE9wpY46'),
  // routerName
  routerName?: string(name='router_name', example='router_name1'),
  // routerType
  routerType?: string(name='router_type', example='PATH / HEADER / WEIGHT / LDC'),
  // upstream_protocol
  upstreamProtocol?: string(name='upstream_protocol', example='HTTP / MRPC / SOFA / SOFA_VPC'),
  // tenant_id
  tenantId?: string(name='tenant_id', example='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='workspace_id'),
}

// AppInfoVO
model AppInfoVO {
  // api_count
  apiCount?: long(name='api_count', example=''),
  // app_id
  appId?: string(name='app_id', example='app_id'),
  // app_name
  appName?: string(name='app_name', example='app_name'),
  // appSecret
  appSecret?: string(name='app_secret', example='app_secret1'),
  // app类型
  appType?: string(name='app_type', example='STANDARD / MPAAS'),
  // authenticationConfig
  authenticationConfig?: AuthenticationConfigVO(name='authentication_config', example=''),
  // 是否可以删除
  canDelete?: boolean(name='can_delete', example='true, false'),
  // description
  description?: string(name='description', example='description'),
  // encryptConfig
  encryptConfig?: EncryptConfigVO(name='encrypt_config', example=''),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更改时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // operator
  operator?: string(name='operator', example='scott'),
  // tenant_id
  tenantId?: string(name='tenant_id', example='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='workspace_id'),
}

// RegistryVO
model RegistryVO {
  // host
  host?: string(name='host', example='hz-gw-host-egress'),
  // protocol_support
  protocolSupport?: [ ProtocolVO ](name='protocol_support', example='[{“protocol”:“HTTP”,"port":"80"}]'),
  // 注册中心类型
  type?: string(name='type', example='dsr 、nacos、 none'),
}

// ApiParamVO
model ApiParamVO {
  // API标识
  apiId?: string(name='api_id', example='api_id1'),
  // default_value
  defaultValue?: string(name='default_value', example='value1'),
  // description
  description?: string(name='description', example='description1'),
  // failure_demo
  failureDemo?: string(name='failure_demo', example='failure_demo'),
  // location
  location?: string(name='location', example='Query / Path / Header / ...'),
  // name
  name?: string(name='name', example='name1'),
  // 引用的模型类型	
  refType?: string(name='ref_type', example='String'),
  // 是否必填
  required?: boolean(name='required', example=''),
  // rsp_code_list
  rspCodeList?: [ ApiRspCodeVO ](name='rsp_code_list', example=''),
  // success_demo
  successDemo?: string(name='success_demo', example='success_demo'),
  // 数据类型
  type?: string(name='type', example='String / Int / Long / Float / Double / Boolean / ...'),
  // upstreamLocation
  upstreamLocation?: string(name='upstream_location', example='Query / Path / Header / ...'),
  // upstream_name
  upstreamName?: string(name='upstream_name', example='upstream_name1'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id', example='default'),
  // tenant_id
  tenantId?: string(name='tenant_id', example='tenant_id'),
}

// 数据模型参数VO
model ApiModelParamVO {
  // 默认值
  defaultValue?: string(name='default_value', example='default_value'),
  // 描述
  description?: string(name='description', example='description'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 修改时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 模型id
  modelId?: string(name='model_id', example='model_id'),
  // 模型提交 操作
  operation?: string(name='operation', example='delete，update，add'),
  // 模型参数id（唯一标识）
  paramId?: string(name='param_id', example='param_id'),
  // 参数名
  paramName?: string(name='param_name', example='param_name'),
  // 参数类型
  paramType?: string(name='param_type', example='String，Int，Long，Float，Double，Boolean，Object，List，Map'),
  // 引用模型id
  refModelId?: string(name='ref_model_id', example='ref_param_id'),
  // 工作空间标识
  tenantId?: string(name='tenant_id', example='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='workspace id'),
}

// ApiCacheKeyVO
model ApiCacheKeyVO {
  // key
  key?: string(name='key', example='key1'),
  // location
  location?: string(name='location', example='HEADER/QUERY/BODY'),
}

// ApiGroupVO
model ApiGroupVO {
  // api数
  apiCount?: long(name='api_count', example=''),
  // 分组标识(全局唯一)
  apiGroupId?: string(name='api_group_id', example='3778911001abc'),
  // 用户授权开关
  authUserSwitch?: string(name='auth_user_switch', example='ON/OFF'),
  // 是否可以删除
  canDelete?: boolean(name='can_delete', example='true, false'),
  // 描述
  description?: string(name='description', example='这是一段描述信息'),
  // 域名
  domainName?: string(name='domain_name', example='https://3grofekygwdqrddt.shprod.antfinapigw.com-east-2'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更改时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 分组名
  groupName?: string(name='group_name', example='test_group'),
  // need_api_auth_user
  needApiAuthUser?: boolean(name='need_api_auth_user', example='true, false'),
  // 创建人
  operator?: string(name='operator', example='scott'),
  // 租户标识
  tenantId?: string(name='tenant_id', example='TSCPDICNT'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id', example='default'),
  // 是否可操作
  operationPermission?: boolean(name='operation_permission', example=''),
  // DEFAULT|CUSTOM
  domainType?: string(name='domain_type', example='DEFAULT|CUSTOM'),
  // 自定义域名
  domainList?: [ ApiGroupDomainVO ](name='domain_list', example=''),
}

// AuthAppInfoVO
model AuthAppInfoVO {
  // api数
  apiCount?: long(name='api_count', example=''),
  // 应用类型
  appType?: string(name='app_type', example='MPAAS/STANDARD'),
  // auth_app_info_id
  authAppInfoId?: string(name='auth_app_info_id', example='8Amfi67dmE9wpY46'),
  // authAppType
  authAppType?: string(name='auth_app_type', example='OUTER / INNER'),
  // 是否可以删除
  canDelete?: boolean(name='can_delete', example='true, false'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更改时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // operator
  operator?: string(name='operator', example='scott'),
  // subAppCompany
  subAppCompany?: string(name='sub_app_company', example='sub_app_company1'),
  // subAppDesc
  subAppDesc?: string(name='sub_app_desc', example='sub_app_desc1'),
  // 订阅方appid
  subAppId?: string(name='sub_app_id', example='sub_app_id'),
  // sub_app_info
  subAppInfo?: AppInfoVO(name='sub_app_info', example=''),
  // subTenantId
  subTenantId?: string(name='sub_tenant_id', example='sub_tenant_id1'),
  // subWorkspaceId
  subWorkspaceId?: string(name='sub_workspace_id', example='sub_workspace_id1'),
  // api标识
  apiId?: string(name='api_id', example='api_id'),
  // 应用名称
  appName?: string(name='app_name', example='app_name'),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='workspace_id'),
  // tenant_id
  tenantId?: string(name='tenant_id', example='tenant_id'),
}

// ApiCrossZoneVO
model ApiCrossZoneVO {
  // workspace_id
  workspaceId?: string(name='workspace_id', example='default'),
  // tenant_id
  tenantId?: string(name='tenant_id', example='TSCPDICNT'),
  // api_id
  apiId?: string(name='api_id', example='api_id'),
  // gw_id
  gwId?: string(name='gw_id', example='gw_id'),
  // 注册中心类型
  sysType?: string(name='sys_type', example='DSR、SOFA、NONE'),
  // 网关类型
  type?: string(name='type', example='egress、ingress'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更新时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // registry_id
  registryId?: string(name='registry_id', example='registry_id'),
}

// ApiMockConfigVO
model ApiMockConfigVO {
  // mock_data
  mockData?: string(name='mock_data', example='mock_data'),
}

// 外部授权信息
model ExternalAuthInfoVO {
  // 绑定api数量
  apiCount?: long(name='api_count', example='0'),
  // 缓存开关
  cacheSwitch?: string(name='cache_switch', example='OFF/ON'),
  // 缓存时间
  cacheTtl?: long(name='cache_ttl', example=''),
  // 能否删除
  canDelete?: boolean(name='can_delete', example='true, false'),
  // description
  description?: string(name='description', example='description1'),
  // 外部系统标识
  externalAuthId?: string(name='external_auth_id', example='8Amfi67dmE9wpY46'),
  // 外部授权名称
  externalAuthName?: string(name='external_auth_name', example='external_auth_name1'),
  // 	
  // 方法名
  functionName?: string(name='function_name', example='getUserID'),
  // 	
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 	
  // 更改时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 后端接口名
  interfaceName?: string(name='interface_name', example='com.alipay.HelloFacade:1.0@DEFAULT'),
  // 请求方法
  method?: string(name='method', example='GET/POST'),
  // operationtype
  operationType?: string(name='operation_type', example='operation_type1'),
  // 		
  // 创建人
  operator?: string(name='operator', example='operator'),
  // 外部api参数
  params?: [ ApiParamVO ](name='params', example='params'),
  // 路由标识
  routerId?: string(name='router_id', example='8Amfi67dmE9wpY46'),
  // 路由规则
  routerInfo?: RouterInfoVO(name='router_info', example=''),
  // 路由策略类型
  routerType?: string(name='router_type', example='PATH / HEADER / WEIGHT/LDC'),
  // SystemClusterVO
  systemCluster?: SystemClusterVO(name='system_cluster', example=''),
  // 系统集群标识
  sysId?: string(name='sys_id', example='8Amfi67dmE9wpY46'),
  // 	
  // 租户标识
  tenantId?: string(name='tenant_id', example='tenant1'),
  // timeout
  timeout?: long(name='timeout', example='123'),
  // 服务标识
  uniqueId?: string(name='unique_id', example='unique_id'),
  // 后端路径
  upstreamPath?: string(name='upstream_path', example='upstream_path1'),
  // 后端协议类型
  upstreamProtocol?: string(name='upstream_protocol', example='HTTP / MRPC / SOFA / SOFA_VPC'),
  // 后端服务类型
  upstreamType?: string(name='upstream_type', example='NONE / MOCK / SYSTEM_CLUSTER'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id', example='default'),
}

// SwitchVO
model SwitchVO {
  // 唯一标识
  id?: string(name='id', example='8Amfi67dmE9wpY46'),
  // 键值
  key?: string(name='key', example='key'),
  // 名称
  name?: string(name='name', example='name'),
  // 开关
  value?: string(name='value', example='ON/OFF'),
}

// ApiflowOutputVO
model ApiflowOutputVO {
  // name
  name?: string(name='name', example='name'),
  // mapping_name
  mappingName?: string(name='mapping_name', example='mapping_name'),
}

// GateWayConfigVO
model GateWayConfigVO {
  // 唯一标识
  gatewayId?: string(name='gateway_id', example='gatewayId'),
  // host
  host?: string(name='host', example='host'),
  // 唯一性标识
  id?: string(name='id', example='id'),
  // zone名称、网关名称
  name?: string(name='name', example='name'),
  // 注册中心
  routers?: [ RegistryVO ](name='routers', example=''),
  // tenant_id
  tenantId?: string(name='tenant_id', example='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='workspace_id'),
  // zone
  zone?: string(name='zone', example='hz | sh'),
  // 流量比例
  weight?: long(name='weight', example=''),
}

// CorsInfoVO
model CorsInfoVO {
  // 是否允许发送COOKIE
  allowCredentials?: boolean(name='allow_credentials', example='true, false'),
  // 允许的 request headers
  allowHeaders?: [ string ](name='allow_headers', example=''),
  // 允许的http method
  allowMethods?: [ string ](name='allow_methods', example=''),
  // 允许的 ORIGIN
  allowOrigins?: [ string ](name='allow_origins', example=''),
  // API数量
  apiCount?: long(name='api_count', example=''),
  // cors标识
  corsId?: string(name='cors_id', example='cors_id1'),
  // cors名称
  corsName?: string(name='cors_name', example='cors_name1'),
  // cors_scop
  corsScop?: string(name='cors_scop', example='WORKSPACE/API'),
  // cors状态
  corsStatus?: string(name='cors_status', example='CLOSED/OPENED'),
  // 允许暴露的 reponse header
  exposeHeaders?: [ string ](name='expose_headers', example=''),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更新时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 预检请求的有效期
  maxAge?: long(name='max_age', example=''),
  // 创建人
  operator?: string(name='operator', example='scott'),
  // 租户标识
  tenantId?: string(name='tenant_id', example='TSCPDICNT'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id', example='default'),
}

// 策略管理
model StrategyInfoVO {
  // workspace_id
  workspaceId?: string(name='workspace_id', example='workspace_id'),
  // tenant_id
  tenantId?: string(name='tenant_id', example='tenant_id'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更新时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 策略唯一标识
  strategyId?: string(name='strategy_id', example='strategy_id'),
  // 策略名称
  strategyName?: string(name='strategy_name', example='strategy_name'),
  // 策略状态
  strategyStatus?: string(name='strategy_status', example='CLOSED/OPENED'),
  // 操作人
  operator?: string(name='operator', example='operator'),
  // 	
  // API数量
  apiCount?: long(name='api_count', example='api_count'),
  // 策略描述
  description?: string(name='description', example='description'),
  // 策略类型
  strategyType?: string(name='strategy_type', example='BLACK/WHITE'),
  // 名单集合
  host?: [ string ](name='host', example=''),
  // true, false
  canDelete?: boolean(name='can_delete', example='true, false'),
}

// ActionResult
model ActionResult {
  // 错误码
  code?: string(name='code', example='code1'),
  // 报错信息
  errorMessage?: string(name='error_message', example='error_message1'),
  // id
  id?: string(name='id', example='id1'),
  // 是否挂载成功
  success?: boolean(name='success', example='true, false'),
}

// ApiModelVO
model ApiModelVO {
  // 绑定的api数量
  apiCount?: long(name='api_count', example='10'),
  // 模板id(全局唯一)
  apiModelId?: string(name='api_model_id', example='8Amfi67dmE9wpY46'),
  // 是否可以删除
  canDelete?: boolean(name='can_delete', example='true, false'),
  // API模型描述
  description?: string(name='description', example='description'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 	
  // 更改时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 模型配置
  modelConfig?: string(name='model_config', example='model_config'),
  // 模型名称
  modelName?: string(name='model_name', example='model_name'),
  // 数据模型参数
  modelParams?: [ ApiModelParamVO ](name='model_params', example='model_params'),
  // 创建人
  // 
  operator?: string(name='operator', example='operator'),
  // 租户id
  tenantId?: string(name='tenant_id', example='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='workspace_id'),
  // children
  children?: string(name='children', example='children'),
  // option 表示模型是多参数
  modelType?: string(name='model_type', example='option'),
}

// LimitConfigVO
model LimitConfigVO {
  // 是否需要限制
  needLimit?: boolean(name='need_limit', example='true, false'),
  // 限制阈值
  limit?: long(name='limit', example=''),
  // 限制响应类型
  limitRspType?: string(name='limit_rsp_type', example='DEFAULT/MSG'),
  // 响应信息
  rspMsg?: string(name='rsp_msg', example='rsp_msg1'),
}

// ApiCacheVO
model ApiCacheVO {
  // 是否需要缓存
  needCache?: boolean(name='need_cache', example='true, false'),
  // TTL
  ttl?: long(name='ttl', example='10000'),
  // cacheKeys
  cacheKeys?: [ ApiCacheKeyVO ](name='cache_keys', example=''),
}

// ParamMappingInfoVO
model ParamMappingInfoVO {
  // api_count
  apiCount?: long(name='api_count', example=''),
  // can_delete
  canDelete?: boolean(name='can_delete', example='true/false'),
  // 配置模板
  configTemplate?: string(name='config_template', example='config_template'),
  // 描述
  description?: string(name='description', example='description'),
  // gmt_create
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // gmt_modified
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 映射类型
  mappingType?: string(name='mapping_type', example='request\response'),
  // 创建人
  operator?: string(name='operator', example='operator'),
  // param_mapping_id
  paramMappingId?: string(name='param_mapping_id', example='8Amfi67dmE9wpY46'),
  // 参数映射名称
  paramMappingName?: string(name='param_mapping_name', example='param_mapping_name'),
  // 脚本配置
  scriptConfig?: string(name='script_config', example='script_config'),
  // tenant_id
  tenantId?: string(name='tenant_id', example='TSCPDICNT'),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='default'),
  // 配置模板名称
  configTemplateName?: string(name='config_template_name', example='config_template_name'),
}

// 排序信息
model OrderInfo {
  // 要排序的字段
  key: string(name='key', example='groupName'),
  // 升序or降序
  order: string(name='order', example='asc / desc'),
}

// ApiVersionVO
model ApiVersionVO {
  // API标识
  apiId?: string(name='api_id', example='api_id1'),
  // editOperator
  editOperator?: string(name='edit_operator', example='scott'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 编辑时间
  gmtEdit?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_edit', example='2018-10-10T10:10:00Z'),
  // 更改时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // gmtOffline
  gmtOffline?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_offline', example='2018-10-10T10:10:00Z'),
  // gmtOnline
  gmtOnline?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_online', example='2018-10-10T10:10:00Z'),
  // offlineDesc
  offlineDesc?: string(name='offline_desc', example='offline_desc1'),
  // offlineOperator
  offlineOperator?: string(name='offline_operator', example='scott'),
  // onlineDesc
  onlineDesc?: string(name='online_desc', example='online_desc1'),
  // onlineOperator
  onlineOperator?: string(name='online_operator', example='online_operator1'),
  // versionId
  versionId?: string(name='version_id', example='4438Y8yXxU0cYrgS'),
  // 版本号
  versionNo?: string(name='version_no', example='1.2'),
  // versionStatus
  versionStatus?: string(name='version_status', example='EDIT / ONLINE / OFFLINE'),
  // 能否发布
  canOnline?: boolean(name='can_online', example='true, false'),
}

// 授权信息
model SofaGwAuthenticationVO {
  // 		
  // access key
  // 
  // 
  authAccessKey?: string(name='auth_access_key', example='xxx'),
  // secret key
  authSecretKey?: string(name='auth_secret_key', example='yyy'),
  // id
  id?: long(name='id', example='100'),
}

// 编排VO
model ApiflowMachineDefVO {
  // 	
  // api数
  apiCount?: long(name='api_count', example=''),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='workspace_id'),
  // tenant_id
  tenantId?: string(name='tenant_id', example='tenant_id'),
  // instance_id
  instanceId?: string(name='instance_id', example='instance_id'),
  // can_delete
  canDelete?: boolean(name='can_delete', example='true, false'),
  // id
  id?: string(name='id', example='id'),
  // name
  name?: string(name='name', example='name'),
  // app_name
  appName?: string(name='app_name', example='app_name'),
  // type
  type?: string(name='type', example='type'),
  // comment
  comment?: string(name='comment', example='comment'),
  // ver
  ver?: string(name='ver', example='ver'),
  // gmt_create
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // status
  status?: string(name='status', example='status'),
  // recover_strategy
  recoverStrategy?: string(name='recover_strategy', example='recover_strategy'),
  // content
  content?: string(name='content', example='content'),
  // machine_status
  machineStatus?: string(name='machine_status', example='machine_status'),
  // field_mapping
  fieldMapping?: string(name='field_mapping', example='field_mapping'),
}

// SystemConfigVO
model SystemConfigVO {
  // config_key
  configKey?: string(name='config_key', example='config_key'),
  // config_value
  configValue?: string(name='config_value', example='config_value'),
  // 描述
  description?: string(name='description', example='description'),
  // gateway_list
  gatewayList?: [ GateWayConfigVO ](name='gateway_list', example=''),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更改时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // instance_id
  instanceId?: string(name='instance_id', example='instance_id'),
  // 创建人
  operator?: string(name='operator', example='operator'),
  // switch_list
  switchList?: [ SwitchVO ](name='switch_list', example=''),
}

// ApiTransferVO
model ApiTransferVO {
  // API缓存模型
  apiCacheModel?: ApiCacheVO(name='api_cache_model', example=''),
  // api_group
  apiGroup?: ApiGroupVO(name='api_group', example=''),
  // API分组标识
  apiGroupId?: string(name='api_group_id', example='api_group_id1'),
  // 所属API分组名称
  apiGroupName?: string(name='api_group_name', example='api_group_name1'),
  // API标识
  apiId?: string(name='api_id', example='api_id'),
  // API限流配置
  apiLimitConfig?: LimitConfigVO(name='api_limit_config', example=''),
  // api_mock_config
  apiMockConfig?: ApiMockConfigVO(name='api_mock_config', example='api_mock_config'),
  // API名称
  apiName?: string(name='api_name', example='apiname1'),
  // apiStatus
  apiStatus?: string(name='api_status', example='OPENED / CLOSED'),
  // 授权应用类型
  appType?: string(name='app_type', example='MPAAS/STANDARD/STANDARD_AND_MPAAS'),
  // authentication_type
  authenticationType?: string(name='authentication_type', example='NONE / SECRET'),
  // auth_app_count
  authAppCount?: long(name='auth_app_count', example=''),
  // 是否可以删除
  canDelete?: boolean(name='can_delete', example='true, false'),
  // charset
  charset?: string(name='charset', example='UTF-8'),
  // 重复的配置  信息详情
  checkResult?: string(name='check_result', example='{}'),
  // 完整interface_name
  completeInterfaceName?: string(name='complete_interface_name', example='com.example.dubbo.demo.UserService:1.0:asds@DEFAULT'),
  // contentType
  contentType?: string(name='content_type', example='content_type1'),
  // cors_id
  corsId?: string(name='cors_id', example='cors_id'),
  // cors_info
  corsInfo?: CorsInfoVO(name='cors_info', example=''),
  // 当前显示的版本
  currentVersionNo?: string(name='current_version_no', example='current_version_no'),
  // description
  description?: string(name='description', example='description1'),
  // API分组域名
  domainName?: string(name='domain_name', example='test.apigateway.com'),
  // downstreamProtocol
  downstreamProtocol?: string(name='downstream_protocol', example='HTTP / SOFA / SOFA_VPC'),
  // 编辑中的版本
  editVersion?: ApiVersionVO(name='edit_version', example='edit_version'),
  // 编辑中的API版本号
  editVersionNo?: string(name='edit_version_no', example='edit_version_no1'),
  // external_auth
  externalAuth?: ExternalAuthInfoVO(name='external_auth', example=''),
  // 外部系统标识
  externalAuthId?: string(name='external_auth_id', example='8Amfi67dmE9wpY46'),
  // 方法名
  functionName?: string(name='function_name', example='getUserID'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更改时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 接口名称
  interfaceName?: string(name='interface_name', example='com.alipay.HelloFacade:1.0@DEFAULT'),
  // method
  method?: string(name='method', example='GET / POST'),
  // onlineVersion
  onlineVersion?: ApiVersionVO(name='online_version', example=''),
  // 发布中的API版本号
  onlineVersionNo?: string(name='online_version_no', example='online_version_no'),
  // operation_type
  operationType?: string(name='operation_type', example='operation_type'),
  // 创建人
  operator?: string(name='operator', example='operator'),
  // path
  path?: string(name='path', example='path1'),
  // 路径匹配类型
  pathMatchType?: string(name='path_match_type', example='ABSOLUTE / PREFIX'),
  // reqParams
  reqParams?: [ ApiParamVO ](name='req_params', example=''),
  // reqparammapping
  reqParamMapping?: ParamMappingInfoVO(name='req_param_mapping', example=''),
  // 请求参数映射标识
  reqParamMappingId?: string(name='req_param_mapping_id', example='8Amfi67dmE9wpY46'),
  // 参数映射类型（普通\高级）
  reqParamMappingType?: string(name='req_param_mapping_type', example='ORDINARY/SENIOR'),
  // respparammapping
  respParamMapping?: ParamMappingInfoVO(name='resp_param_mapping', example=''),
  // 响应参数标识
  respParamMappingId?: string(name='resp_param_mapping_id', example='8Amfi67dmE9wpY46'),
  // router_id
  routerId?: string(name='router_id', example='8Amfi67dmE9wpY46'),
  // 	
  // 路由规则
  routerInfo?: RouterInfoVO(name='router_info', example=''),
  // 路由策略类型
  routerType?: string(name='router_type', example='PATH / HEADER / WEIGHT/LDC'),
  // rsqParam
  rsqParam?: ApiParamVO(name='rsq_param', example=''),
  // 	
  // 后端集群
  systemCluster?: SystemClusterVO(name='system_cluster', example=''),
  // sys_id
  sysId?: string(name='sys_id', example='8Amfi67dmE9wpY46'),
  // 目标工作空间标识
  targetWorkspaceId?: string(name='target_workspace_id', example='target_workspace_id'),
  // 租户标识
  tenantId?: string(name='tenant_id', example='tenant1'),
  // timeout
  timeout?: long(name='timeout', example='123'),
  // 服务标识
  uniqueId?: string(name='unique_id', example='unique_id'),
  // 需要覆盖的配置
  updateConfigList?: [ string ](name='update_config_list', example='["apiGroup","systemCluster","routerInfo","corsInfo","reqParamMapping","respParamMapping","externalAuth"]'),
  // upstreamParamMappings
  upstreamParamMappings?: [ ApiParamVO ](name='upstream_param_mappings', example=''),
  // upstreamPath
  upstreamPath?: string(name='upstream_path', example='upstream_path1'),
  // upstreamProtocol
  upstreamProtocol?: string(name='upstream_protocol', example='HTTP / MRPC / SOFA / SOFA_VPC'),
  // 后端服务类型
  upstreamType?: string(name='upstream_type', example='NONE / MOCK / SYSTEM_CLUSTER'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id', example='default'),
  // 导入失败的原因
  importResult?: string(name='import_result', example='{}'),
  // domain_list
  domainList?: [ ApiGroupDomainVO ](name='domain_list', example=''),
  // 策略ID
  strategyId?: string(name='strategy_id', example='strategy_id'),
  // 策略详情
  strategyInfo?: StrategyInfoVO(name='strategy_info', example=''),
  // crossZone双网关 (api 类型)
  apiType?: string(name='api_type', example='crossZone'),
  // api的网关配置列表
  apiCrossZoneList?: [ ApiCrossZoneVO ](name='api_cross_zone_list', example=''),
  // registry_group
  registryGroup?: string(name='registry_group', example='registry_group'),
  // parameter
  parameter?: [ string ](name='parameter', example=''),
  // up_function_name
  upFunctionName?: string(name='up_function_name', example='up_function_name'),
  // param_path_list
  paramPathList?: [ string ](name='param_path_list', example='参数路径'),
  // dubbo发布服务版本
  serviceVersion?: string(name='service_version', example='1.0.0'),
  // auth_app_info_id
  authAppInfoId?: string(name='auth_app_info_id', example='auth_app_info_id'),
  // operation_permission
  operationPermission?: boolean(name='operation_permission', example='true, false'),
  // data_encryption
  dataEncryption?: string(name='data_encryption', example='data_encryption'),
  // egress_list
  egressList?: [ GateWayConfigVO ](name='egress_list', example=''),
  // history_version_list
  historyVersionList?: [ ApiVersionVO ](name='history_version_list', example=''),
  // GateWayConfigVO
  ingress?: string(name='ingress', example='GateWayConfigVO'),
  // model
  model?: string(name='model', example='model'),
  // req_model_id
  reqModelId?: string(name='req_model_id', example='req_model_id'),
  // req_model_name	
  reqModelName?: string(name='req_model_name', example='req_model_name '),
  // req_type
  reqType?: string(name='req_type', example='req_type'),
  // resp_model_id
  respModelId?: string(name='resp_model_id', example='resp_model_id'),
  // resp_model_name
  respModelName?: string(name='resp_model_name', example='resp_model_name'),
  // resp_type
  respType?: string(name='resp_type', example='resp_type'),
  // ingress_list
  ingressList?: [ GateWayConfigVO ](name='ingress_list', example='ingress_list'),
  // content
  content?: string(name='content', example='content'),
  // api_count
  apiCount?: long(name='api_count', example='api_count'),
  // field_mapping
  fieldMapping?: [ ApiflowOutputVO ](name='field_mapping', example='field_mapping'),
  // need_tls
  needTls?: boolean(name='need_tls', example='true, false'),
}

// ApiInfoVO
model ApiInfoVO {
  // API缓存模型
  apiCacheModel?: ApiCacheVO(name='api_cache_model', example=''),
  // api的网关配置列表
  apiCrossZoneList?: [ ApiCrossZoneVO ](name='api_cross_zone_list', example=''),
  // API分组标识
  apiGroupId?: string(name='api_group_id', example='api_group_id1'),
  // 所属API分组名称
  apiGroupName?: string(name='api_group_name', example='api_group_name1'),
  // API标识
  apiId?: string(name='api_id', example='8Amfi67dmE9wpY46'),
  // API限流配置
  apiLimitConfig?: LimitConfigVO(name='api_limit_config', example=''),
  // api_mock_config
  apiMockConfig?: ApiMockConfigVO(name='api_mock_config', example='api_mock_config'),
  // API名称
  apiName?: string(name='api_name', example='apiname1'),
  // apiStatus
  apiStatus?: string(name='api_status', example='OPENED / CLOSED'),
  // crossZone双网关 (api 类型)
  apiType?: string(name='api_type', example='crossZone'),
  // 授权应用类型
  appType?: string(name='app_type', example='MPAAS/STANDARD/STANDARD_AND_MPAAS'),
  // authentication_type
  authenticationType?: string(name='authentication_type', example='NONE / SECRET'),
  // auth_app_count
  authAppCount?: long(name='auth_app_count', example=''),
  // 授权应用Id
  authAppInfoId?: string(name='auth_app_info_id', example='8Amfi67dmE9wpY46'),
  // 是否可以删除
  canDelete?: boolean(name='can_delete', example='true, false'),
  // 操作权限
  operationPermission?: boolean(name='operation_permission', example='true, false'),
  // charset
  charset?: string(name='charset', example='UTF-8'),
  // 完整interfacename
  completeInterfaceName?: string(name='complete_interface_name', example='com.example.dubbo.demo.UserService:1.0:asds@DEFAULT'),
  // contentType
  contentType?: string(name='content_type', example='content_type1'),
  // cors_id
  corsId?: string(name='cors_id', example='cors_id'),
  // cors_info
  corsInfo?: CorsInfoVO(name='cors_info', example=''),
  // 当前显示的版本
  currentVersionNo?: string(name='current_version_no', example='current_version_no'),
  // 数据加密
  dataEncryption?: string(name='data_encryption', example='CLOSED/OPENED'),
  // description
  description?: string(name='description', example='description1'),
  // API分组域名
  domainName?: string(name='domain_name', example='test.apigateway.com'),
  // downstreamProtocol
  downstreamProtocol?: string(name='downstream_protocol', example='HTTP / SOFA / SOFA_VPC'),
  // edit_version
  editVersion?: ApiVersionVO(name='edit_version', example='编辑中的版本'),
  // 编辑中的API版本号
  editVersionNo?: string(name='edit_version_no', example='edit_version_no1'),
  // 出口网关列表
  egressList?: [ GateWayConfigVO ](name='egress_list', example='[]'),
  // external_auth
  externalAuth?: ExternalAuthInfoVO(name='external_auth', example=''),
  // 外部系统标识
  externalAuthId?: string(name='external_auth_id', example='8Amfi67dmE9wpY46'),
  // 方法名
  functionName?: string(name='function_name', example='getUserID'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更改时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // history_version
  historyVersionList?: [ ApiVersionVO ](name='history_version_list', example='历史版本列表'),
  // 入口网关
  ingress?: GateWayConfigVO(name='ingress', example=''),
  // 接口名称
  interfaceName?: string(name='interface_name', example='com.alipay.HelloFacade:1.0@DEFAULT'),
  // method
  method?: string(name='method', example='GET / POST'),
  // 网关模式
  model?: string(name='model', example='stand（标准模式）/proxy'),
  // onlineVersion
  onlineVersion?: ApiVersionVO(name='online_version', example=''),
  // 发布中的API版本号
  onlineVersionNo?: string(name='online_version_no', example='online_version_no1'),
  // operationType
  operationType?: string(name='operation_type', example='operation_type1'),
  // 创建人
  operator?: string(name='operator', example='operator'),
  // path
  path?: string(name='path', example='path1'),
  // 路径匹配类型
  pathMatchType?: string(name='path_match_type', example='ABSOLUTE / PREFIX'),
  // 请求body模型id
  reqModelId?: string(name='req_model_id', example='8Amfi67dmE9wpY46'),
  // 请求模型名称
  reqModelName?: string(name='req_model_name', example='req_model_name'),
  // reqParams
  reqParams?: [ ApiParamVO ](name='req_params', example=''),
  // reqparammapping
  reqParamMapping?: ParamMappingInfoVO(name='req_param_mapping', example=''),
  // 请求参数映射标识
  reqParamMappingId?: string(name='req_param_mapping_id', example='8Amfi67dmE9wpY46'),
  // 参数映射类型（普通\高级）
  reqParamMappingType?: string(name='req_param_mapping_type', example='ORDINARY/SENIOR'),
  // body类型一级参数
  reqType?: string(name='req_type', example='String，Int，Long，Float，Double，Boolean，Object，List，Map'),
  // 响应参数模型
  respModelId?: string(name='resp_model_id', example='CAeDOObODjexy41K'),
  // 响应模型名称
  respModelName?: string(name='resp_model_name', example='resp_model_name'),
  // respparammapping
  respParamMapping?: ParamMappingInfoVO(name='resp_param_mapping', example=''),
  // 响应参数标识
  respParamMappingId?: string(name='resp_param_mapping_id', example='8Amfi67dmE9wpY46'),
  // 响应参数一级类型
  respType?: string(name='resp_type', example='String，Int，Long，Float，Double，Boolean，Object，List，Map'),
  // router_id
  routerId?: string(name='router_id', example='8Amfi67dmE9wpY46'),
  // 路由规则
  routerInfo?: RouterInfoVO(name='router_info', example=''),
  // 路由策略类型
  routerType?: string(name='router_type', example='PATH / HEADER / WEIGHT/LDC'),
  // rsqParam
  rsqParam?: ApiParamVO(name='rsq_param', example=''),
  // 后端集群
  systemCluster?: SystemClusterVO(name='system_cluster', example=''),
  // sys_id
  sysId?: string(name='sys_id', example='8Amfi67dmE9wpY46'),
  // 租户标识
  tenantId?: string(name='tenant_id', example='tenant1'),
  // timeout
  timeout?: long(name='timeout', example='123'),
  // unique_id
  uniqueId?: string(name='unique_id', example='unique_id'),
  // upstreamParamMappings
  upstreamParamMappings?: [ ApiParamVO ](name='upstream_param_mappings', example=''),
  // upstreamPath
  upstreamPath?: string(name='upstream_path', example='upstream_path1'),
  // upstreamProtocol
  upstreamProtocol?: string(name='upstream_protocol', example='HTTP / MRPC / SOFA / SOFA_VPC'),
  // 后端服务类型
  upstreamType?: string(name='upstream_type', example='NONE / MOCK / SYSTEM_CLUSTER'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id', example='default'),
  // 策略ID
  strategyId?: string(name='strategy_id', example='strategy_id'),
  // 策略详情
  strategyInfo?: StrategyInfoVO(name='strategy_info', example=''),
  // domain_list
  domainList?: [ ApiGroupDomainVO ](name='domain_list', example=''),
  // registry_group
  registryGroup?: string(name='registry_group', example='dubbo分组'),
  // param_path_list
  paramPathList?: [ string ](name='param_path_list', example='参数路径'),
  // 后端方法名
  upFunctionName?: string(name='up_function_name', example='up_function_name'),
  // dubbo发布服务版本
  serviceVersion?: string(name='service_version', example='1.0.0'),
  // 入口网关
  ingressList?: [ GateWayConfigVO ](name='ingress_list', example=''),
  // content
  content?: string(name='content', example='content'),
  // api_count
  apiCount?: long(name='api_count', example='api_count'),
  // 流程编排的返回参数映射
  fieldMapping?: [ ApiflowOutputVO ](name='field_mapping', example=''),
  // triple协议证书开关
  needTls?: boolean(name='need_tls', example='true, false'),
  // api_group_info
  apiGroupInfo?: ApiGroupVO(name='api_group_info', example='api_group_info'),
  // 授权对象列表
  authAppInfoList?: [ AuthAppInfoVO ](name='auth_app_info_list', example='auth_app_info_list'),
  // 请求body数据模型
  reqModelInfo?: ApiModelVO(name='req_model_info', example=''),
  // 返回body数据模型
  rspModelInfo?: ApiModelVO(name='rsp_model_info', example='rsp_model_info'),
  // 实例ID
  upstreamInstanceId?: string(name='upstream_instance_id', example='upstream_instance_id'),
}

// 集群里的服务器信息
model SofaGwHostVO {
  // 服务器地址，域名或ip(:端口)
  address?: string(name='address', example='dsrconsole.alipay.com:8080'),
  // host name
  hostName?: string(name='host_name', example='dsrconsole_01'),
  // 元信息
  metaData?: string(name='meta_data', example='dsrconsole.alipay.com'),
}

// 后端配置
model SofaGwUpstreamVO {
  // GET/POST/PUT/DELETE
  method?: string(name='method', example='GET'),
  // 协议
  schema?: string(name='schema', example='http'),
  // timeout
  timeout?: long(name='timeout', example='3000'),
  // url
  url?: string(name='url', example='/resources'),
  // 是否签名
  verify?: boolean(name='verify', example='true, false'),
}

// ApiflowMachineInstVO
model ApiflowMachineInstVO {
  // id
  id?: string(name='id', example='id'),
  // machine_id
  machineId?: string(name='machine_id', example='machine_id'),
  // tenant_id
  tenantId?: string(name='tenant_id', example='tenant_id'),
  // parent_id
  parentId?: string(name='parent_id', example='parent_id'),
  // gmt_started
  gmtStarted?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_started', example='2018-10-10T10:10:00Z'),
  // business_key
  businessKey?: string(name='business_key', example='business_key'),
  // start_params
  startParams?: string(name='start_params', example='start_params'),
  // gmt_end
  gmtEnd?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_end', example='2018-10-10T10:10:00Z'),
  // excep
  excep?: string(name='excep', example='excep'),
  // end_params
  endParams?: string(name='end_params', example='end_params'),
  // status
  status?: string(name='status', example='status'),
  // compensation_status
  compensationStatus?: string(name='compensation_status', example='compensation_status'),
  // is_running
  isRunning?: boolean(name='is_running', example='true, false'),
  // gmt_updated
  gmtUpdated?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_updated', example=''),
}

// BatchActionResult
model BatchActionResult {
  // 批量挂载结果
  results?: [ ActionResult ](name='results', example=''),
  // total_count
  totalCount?: long(name='total_count', example='10'),
  // success_count
  successCount?: long(name='success_count', example='5'),
  // failed_count
  failedCount?: long(name='failed_count', example='5'),
}

// ImportResult
model ImportResult {
  // code
  code?: string(name='code', example='code'),
  // 覆盖报错的配置
  errorConfig?: string(name='error_config', example='apiGroup，systemCluster，externalAuth，paramMapping，routerInfo，corsInfo'),
  // error_message
  errorMessage?: string(name='error_message', example='error_message'),
  // API的ID
  id?: string(name='id', example='id'),
  // API的名称
  name?: string(name='name', example='name'),
  // 覆盖成功的标识
  success?: boolean(name='success', example='true, false'),
  // 覆盖失败的配置名称
  configName?: string(name='config_name', example='config_name'),
}

// ApiTestParamVO
model ApiTestParamVO {
  // location
  location?: string(name='location', example='HEADER/QUERY'),
  // key
  key?: string(name='key', example='key1'),
  // value
  value?: string(name='value', example='value1'),
}

// ApiflowInstVO
model ApiflowInstVO {
  // id
  id?: string(name='id', example='id'),
  // machine_inst_id
  machineInstId?: string(name='machine_inst_id', example='machine_inst_id'),
  // name
  name?: string(name='name', example='name'),
  // type
  type?: string(name='type', example='type'),
  // service_name
  serviceName?: string(name='service_name', example='service_name'),
  // service_method
  serviceMethod?: string(name='service_method', example='service_method'),
  // service_type
  serviceType?: string(name='service_type', example='service_type'),
  // business_key
  businessKey?: string(name='business_key', example='business_key'),
  // state_id_compensated_for
  stateIdCompensatedFor?: string(name='state_id_compensated_for', example='state_id_compensated_for'),
  // state_id_retried_for
  stateIdRetriedFor?: string(name='state_id_retried_for', example='state_id_retried_for'),
  // gmt_started
  gmtStarted?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_started', example='2018-10-10T10:10:00Z'),
  // is_for_update
  isForUpdate?: boolean(name='is_for_update', example='true, false'),
  // input_params
  inputParams?: string(name='input_params', example='input_params'),
  // output_params
  outputParams?: string(name='output_params', example='output_params'),
  // status
  status?: string(name='status', example='status'),
  // excep
  excep?: string(name='excep', example='excep'),
  // gmt_updated
  gmtUpdated?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_updated', example='2018-10-10T10:10:00Z'),
  // gmt_end
  gmtEnd?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_end', example='2018-10-10T10:10:00Z'),
}

// 操作人
model OperatorVO {
  // 创建时间
  createTime?: string(name='create_time', example='2018-10-10T10:10:00Z'),
  // 企业的唯一标识
  customer?: string(name='customer', example='QWERTYUIO'),
  // 邮箱
  email?: string(name='email', example='AAA@AA'),
  // 操作员ID
  id?: string(name='id', example='id'),
  // 登录名
  loginName?: string(name='login_name', example='login_name'),
  // 手机号
  mobile?: string(name='mobile', example='13245678901'),
  // 昵称
  nickName?: string(name='nick_name', example='nick_name'),
  // 真实姓名
  realName?: string(name='real_name', example='real_name'),
  // 操作员状态
  status?: string(name='status', example='(INACTIVE：未激活，NORMAL：正常状态，FROZEN：冻结状态'),
  // 租户
  tenants?: [ string ](name='tenants', example=''),
  // 操作员最近一次修改时间，ISO8601格式
  updateTime?: string(name='update_time', example='update_time'),
  // 操作员工号
  workNo?: string(name='work_no', example='work_no'),
  // tenant_id
  tenantId?: string(name='tenant_id', example='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='workspace_id'),
}

// 联系方式
model ContactInfoVO {
  // 授权App标识
  authAppInfoId?: string(name='auth_app_info_id', example='a0VIPBXUI4rc25gR'),
  // 公司名称
  company?: string(name='company', example='antfinancial'),
  // 联系方式标识
  contactId?: string(name='contact_id', example='a0VIPBcUI4rd25gR'),
  // 电子邮箱
  mail?: string(name='mail', example='kelly.cq@antfin.com'),
  // 联系人姓名
  name?: string(name='name', example='kelly'),
  // 电话号码
  tel?: string(name='tel', example='0571-81234567'),
  // 租户标识
  tenantId?: string(name='tenant_id', example='TSCPDICNT'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id', example='default'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 更新时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
}

// 访问控制
model SofaGwControlVO {
  // 要添加的授权的app_name列表
  addItems?: [ string ](name='add_items', example=''),
  // 实例标识
  instanceId?: string(name='instance_id', example='abcdEFGH1234'),
  // 授权的app_name列表
  items?: [ string ](name='items', example=''),
  // 固定值：app
  match?: string(name='match', example='app'),
  // 要删除的授权的app_name列表
  removeItems?: [ string ](name='remove_items', example=''),
  // service name
  serviceName?: string(name='service_name', example='demoservice'),
  // 子类型，固定值：whitelist
  subType?: string(name='sub_type', example='whitelist'),
  // 控制类型，固定值：access-control
  type?: string(name='type', example='access-control'),
}

// MonitorData
model MonitorData {
  // 时间点
  timestamp?: long(name='timestamp', example=''),
  // value
  value?: long(name='value', example=''),
}

// PageInfo
model PageInfo {
  // 排序信息
  orderInfos?: [ OrderInfo ](name='order_infos', example=''),
  // 当前页
  pageIndex?: long(name='page_index', example=''),
  // 每页记录数
  pageSize?: long(name='page_size', example=''),
  // 总数
  total?: long(name='total', example=''),
}

// 前端配置
model SofaGwDownstream {
  // 认证信息
  auth?: [ SofaGwAuthenticationVO ](name='auth', example=''),
  // GET/POST/PUT/DELETE
  method?: string(name='method', example='GET'),
  // 协议
  schema?: string(name='schema', example='http'),
  // url
  url?: string(name='url', example='/dsrconsole/resources'),
  // 是否签名
  verify?: boolean(name='verify', example='true, false'),
}

// AuthUserInfoVO
model AuthUserInfoVO {
  // api分组标识符
  apiGroupId?: string(name='api_group_id', example='api_group_id'),
  // api标识符
  apiId?: string(name='api_id', example='api_id'),
  // 授权状态
  authStatus?: string(name='auth_status', example='AUTH/UNAUTH'),
  // 授权用户唯一标识
  authUserId?: string(name='auth_user_id', example='auth_user_id'),
  // 企业的唯一标识
  customer?: string(name='customer', example='QWERTYUIO'),
  // 邮箱
  email?: string(name='email', example='AAA@AA'),
  // 创建日期
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 修改时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 登录名
  loginName?: string(name='login_name', example='login_name'),
  // 手机号
  mobile?: string(name='mobile', example='13245678901'),
  // 昵称
  nickName?: string(name='nick_name', example='nick_name'),
  // operator
  operator?: string(name='operator', example='operator'),
  // 真实性名
  realName?: string(name='real_name', example='real_name'),
  // 操作员状态
  status?: string(name='status', example='(INACTIVE：未激活，NORMAL：正常状态，FROZEN：冻结状态'),
  // 租户ID
  tenantId?: string(name='tenant_id', example='tenant_id'),
  // 用户标识
  userId?: string(name='user_id', example='user_id'),
  // workspace id
  workspaceId?: string(name='workspace_id', example='workspace id'),
  // 工号
  workNo?: string(name='work_no', example='work_no'),
  // 能否操作授权
  canAuth?: boolean(name='can_auth', example='true, false'),
}

// AppInfoPagedListVO
model AppInfoPagedListVO {
  // list
  list?: [ AppInfoVO ](name='list', example=''),
  // pageInfo
  pageInfo?: PageInfo(name='page_info', example=''),
}

// RegistryInfoQueryVO
model RegistryInfoQueryVO {
  // 是否模糊搜索
  fuzzySearch?: boolean(name='fuzzy_search', example='true, false'),
  // page_info
  pageInfo?: PageInfo(name='page_info', example=''),
  // query
  query?: RegistryInfoVO(name='query', example=''),
}

// RouterInfoPagedListVO
model RouterInfoPagedListVO {
  // list
  list?: [ RouterInfoVO ](name='list', example=''),
  // pageInfo
  pageInfo?: PageInfo(name='page_info', example=''),
}

// ApiGroupAuthUserConfigVO
model ApiGroupAuthUserConfigVO {
  // api授权管理开关
  apiAuthUserSwitch?: string(name='api_auth_user_switch', example='api_auth_user_switch'),
  // 是否是管理员
  checkMaster?: boolean(name='check_master', example=''),
  // 需要api授权管理
  needApiAuthUser?: boolean(name='need_api_auth_user', example='true/false'),
  // tenant_id
  tenantId?: string(name='tenant_id', example='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='workspace_id'),
}

// AuthAppInfoPagedListVO
model AuthAppInfoPagedListVO {
  // list
  list?: [ AuthAppInfoVO ](name='list', example=''),
  // pageInfo
  pageInfo?: PageInfo(name='page_info', example=''),
}

// ParamMappingInfoPagedListVO
model ParamMappingInfoPagedListVO {
  // list
  list?: [ ParamMappingInfoVO ](name='list', example=''),
  // pageInfo
  pageInfo?: PageInfo(name='page_info', example=''),
}

// 集群信息
model SofaGwClusterVO {
  // app name
  appName?: string(name='app_name', example='dsrconsole'),
  // hosts
  hosts?: [ SofaGwHostVO ](name='hosts', example=''),
  // id
  id?: long(name='id', example='100'),
  // 实例标识
  instanceId?: string(name='instance_id', example='abcdEFGH1234'),
  // 集群名
  name?: string(name='name', example='dsrconsole_cluster'),
}

// RegistryInfoPagedListVO
model RegistryInfoPagedListVO {
  // list
  list?: [ RegistryInfoVO ](name='list', example=''),
  // page_info
  pageInfo?: PageInfo(name='page_info', example=''),
}

// MonitoryRequest
model MonitoryRequest {
  // API标识
  apiId?: string(name='api_id', example='h4ZWfWe9anCJn4Tye3tPMiGJZJ2PeGWq'),
  // App标识
  appId?: string(name='app_id', example='Oo2llCf0MkkhGtgL'),
  // code
  code?: string(name='code', example='code1'),
  // 开始时间
  startTime?: long(name='start_time', example=''),
  // end_time
  endTime?: long(name='end_time', example=''),
}

// 联系方式分页列表
model ContactInfoPagedListVO {
  // 分页信息
  pageInfo?: PageInfo(name='page_info', example=''),
  // 联系方式列表
  list?: [ ContactInfoVO ](name='list', example=''),
}

// 策略分页信息
model StrategyPagedListVO {
  // list
  list?: [ StrategyInfoVO ](name='list', example=''),
  // 分页信息
  pageInfo?: PageInfo(name='page_info', example=''),
}

// SystemClusterPagedListVO
model SystemClusterPagedListVO {
  // list
  list?: [ SystemClusterVO ](name='list', example=''),
  // page_info
  pageInfo?: PageInfo(name='page_info', example=''),
}

// AppInfoQueryVO
model AppInfoQueryVO {
  // pageInfo
  pageInfo?: PageInfo(name='page_info', example=''),
  // query
  query?: AppInfoVO(name='query', example=''),
}

// ApiflowMachineDefQueryVO
model ApiflowMachineDefQueryVO {
  // fuzzy_search
  fuzzySearch?: boolean(name='fuzzy_search', example='true, false'),
  // page_info
  pageInfo?: PageInfo(name='page_info', example=''),
  // query
  query?: ApiflowMachineDefVO(name='query', example=''),
}

// ldc信息
model LdcInfoVO {
  // 是否开启
  enable?: boolean(name='enable', example='true, false'),
  // 参数位置
  paramLocation?: string(name='param_location', example='header'),
  // 参数名
  paramKey?: string(name='param_key', example='uid'),
  // tenant_id
  tenantId?: string(name='tenant_id', example='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='workspace_id'),
}

// 查询联系方式
model ContactInfoQueryVO {
  // 分页信息
  pageInfo?: PageInfo(name='page_info', example=''),
  // query
  query?: ContactInfoVO(name='query', example=''),
  // 是否模糊搜索
  fuzzySearch?: boolean(name='fuzzy_search', example='true, false'),
}

// ApiGroupQueryVO
model ApiGroupQueryVO {
  // page_info
  pageInfo?: PageInfo(name='page_info', example=''),
  // query
  query?: ApiGroupVO(name='query', example=''),
  // 是否模糊搜索
  fuzzySearch?: boolean(name='fuzzy_search', example='true, false'),
}

// 入参
model EngineVO {
  // tenant_id
  tenantId?: string(name='tenant_id', example='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='workspace_id'),
  // 流程编排标识
  templateId?: string(name='template_id', example='template_id'),
  // 内嵌模式、云端模式
  engineType?: string(name='engine_type', example='simple、cafeflow'),
  // add_request
  addRequest?: boolean(name='add_request', example='true'),
  // add_timestamp
  addTimestamp?: boolean(name='add_timestamp', example='true, false'),
  // save_to_db
  saveToDb?: boolean(name='save_to_db', example='true, false'),
  // 流程编排  （内嵌模式）初始化的入参
  params?: string(name='params', example='{"person":2}'),
}

// ParamMappingInfoQueryVO
model ParamMappingInfoQueryVO {
  // pageInfo
  pageInfo?: PageInfo(name='page_info', example=''),
  // query
  query?: ParamMappingInfoVO(name='query', example=''),
  // 支持模糊查询
  fuzzySearch?: boolean(name='fuzzy_search', example='true, false'),
}

// ApiTestReqVO
model ApiTestReqVO {
  // API标识
  apiId?: string(name='api_id', example='api_id1'),
  // 应用标识
  appId?: string(name='app_id', example='app_id1'),
  // params
  params?: [ ApiTestParamVO ](name='params', example=''),
  // payload
  payload?: string(name='payload', example='payload1'),
  // tenant_id
  tenantId?: string(name='tenant_id', example='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id', example='default'),
}

// SystemClusterQueryVO
model SystemClusterQueryVO {
  // 是否模糊搜索
  fuzzySearch?: boolean(name='fuzzy_search', example='true, false'),
  // page_info
  pageInfo?: PageInfo(name='page_info', example=''),
  // query
  query?: SystemClusterVO(name='query', example=''),
}

// AuthAppInfoQueryVO
model AuthAppInfoQueryVO {
  // pageInfo
  pageInfo?: PageInfo(name='page_info', example=''),
  // query
  query?: AuthAppInfoVO(name='query', example=''),
  // 自定义查询条件
  queryCondition?: string(name='query_condition', example='API_MOUNT_APP_AUTH'),
  // 是否支持模糊查询
  fuzzySearch?: boolean(name='fuzzy_search', example='true, false'),
}

// AuthUserInfoQueryVO
model AuthUserInfoQueryVO {
  // pageInfo
  pageInfo?: PageInfo(name='page_info', example=''),
  // OperatorVO
  query?: AuthUserInfoVO(name='query', example=''),
  // 是否模糊搜索
  fuzzySearch?: boolean(name='fuzzy_search', example='true, false'),
}

// HomePageVO
model HomePageVO {
  // api分组数量
  apiGroupCount?: long(name='api_group_count', example=''),
  // api数量
  apiCount?: long(name='api_count', example='api_count'),
  // app数量
  appCount?: long(name='app_count', example=''),
}

// ApiflowMachineInstQueryVO
model ApiflowMachineInstQueryVO {
  // fuzzy_search
  fuzzySearch?: boolean(name='fuzzy_search', example='true, false'),
  // page_info
  pageInfo?: PageInfo(name='page_info', example=''),
  // query
  query?: ApiflowMachineInstVO(name='query', example=''),
}

// ApiModelQueryVO
model ApiModelQueryVO {
  // 支持模糊查询
  fuzzySearch?: boolean(name='fuzzy_search', example='true, false'),
  // page_info
  pageInfo?: PageInfo(name='page_info', example=''),
  // query
  query?: ApiModelVO(name='query', example=''),
}

// ExternalAuthInfoQueryVO
model ExternalAuthInfoQueryVO {
  // 是否模糊搜索
  fuzzySearch?: boolean(name='fuzzy_search', example='true, false'),
  // pageInfo
  pageInfo?: PageInfo(name='page_info', example=''),
  // query
  query?: ExternalAuthInfoVO(name='query', example=''),
}

// Api信息
model SofaGwService {
  // app name
  appName?: string(name='app_name', example='dsrconsole'),
  // cluster name
  clusterName?: string(name='cluster_name', example='dsrcluster'),
  // controls
  controls?: [ SofaGwControlVO ](name='controls', example=''),
  // downstream
  downstream?: SofaGwDownstream(name='downstream', example=''),
  // id
  id?: long(name='id', example='100'),
  // 实例标识
  instanceId?: string(name='instance_id', example='abcdEFGH1234'),
  // service name
  name?: string(name='name', example='dsr service'),
  // service_version
  serviceVersion?: string(name='service_version', example='1.0.0'),
  // 上线:online, 下线:offline
  status?: string(name='status', example='online'),
  // upstream
  upstream?: SofaGwUpstreamVO(name='upstream', example=''),
}

// ApiTransferResult
model ApiTransferResult {
  // api配置
  apiTransferList?: [ ApiInfoVO ](name='api_transfer_list', example=''),
  // 批量转移结果
  batchActionResult?: BatchActionResult(name='batch_action_result', example=''),
  // file_name
  fileName?: string(name='file_name', example='file_name'),
  // 流程编排列表
  apiflowList?: [ ApiInfoVO ](name='apiflow_list', example='apiflow_list'),
}

// BatchImportResult
model BatchImportResult {
  // failed_count
  failedCount?: long(name='failed_count', example='1'),
  // 重复的API列表
  repeatApiList?: [ ApiTransferVO ](name='repeat_api_list', example=''),
  // results
  results?: [ ImportResult ](name='results', example=''),
  // success_count
  successCount?: long(name='success_count', example='3'),
  // total_count
  totalCount?: long(name='total_count', example='4'),
  // 导入成功的API列表
  successApiList?: [ ApiInfoVO ](name='success_api_list', example=''),
}

// ApiflowMachineDefPagedListVO
model ApiflowMachineDefPagedListVO {
  // list
  list?: [ ApiflowMachineDefVO ](name='list', example=''),
  // page_info
  pageInfo?: PageInfo(name='page_info', example=''),
}

// OperatorPagedListVO
model OperatorPagedListVO {
  // 当前页的数据
  list?: [ OperatorVO ](name='list', example=''),
  // page_info
  pageInfo?: PageInfo(name='page_info', example=''),
}

// cors分页信息
model CorsInfoPagedListVO {
  // cors列表
  list?: [ CorsInfoVO ](name='list', example=''),
  // 分页信息
  pageInfo?: PageInfo(name='page_info', example=''),
}

// ApiInfoPagedListVO
model ApiInfoPagedListVO {
  // list
  list?: [ ApiInfoVO ](name='list', example=''),
  // pageInfo
  pageInfo?: PageInfo(name='page_info', example=''),
}

// OperatorQueryVO
model OperatorQueryVO {
  // pageInfo
  pageInfo?: PageInfo(name='page_info', example=''),
  // query
  query?: OperatorVO(name='query', example=''),
}

// api导入 效验返回体
model CheckApiResult {
  // 导入的所有的API集合
  allApiList?: [ ApiTransferVO ](name='all_api_list', example='[{transfer},{transfer}]'),
  // API或者配置中有重复的集合
  failedApiList?: [ ApiTransferVO ](name='failed_api_list', example='[{transfer},{transfer}]'),
  // 	
  // API包括配置无重复的集合
  successApiList?: [ ApiTransferVO ](name='success_api_list', example='[{transfer},{transfer}]'),
  // 失败api配置详情
  checkResult?: string(name='check_result', example='[{},{}]'),
}

// ApiflowTestReqVO
model ApiflowTestReqVO {
  // api_id
  apiId?: string(name='api_id', example='api_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='workspace_id'),
  // tenant_id
  tenantId?: string(name='tenant_id', example='tenant_id'),
  // machine_name
  machineName?: string(name='machine_name', example='machine_name'),
  // params
  inputParams?: [ ApiTestParamVO ](name='input_params', example=''),
  // output_params
  outputParams?: [ ApiflowOutputVO ](name='output_params', example=''),
}

// MonitoryAggregationVO
model MonitoryAggregationVO {
  // invoke_num
  invokeNum?: [ MonitorData ](name='invoke_num', example=''),
  // qps
  qps?: [ MonitorData ](name='qps', example=''),
  // rt
  rt?: [ MonitorData ](name='rt', example=''),
  // 错误码
  errCode?: [ MonitorData ](name='err_code', example=''),
  // 错误率
  errRate?: [ MonitorData ](name='err_rate', example=''),
  // byte_in
  byteIn?: [ MonitorData ](name='byte_in', example=''),
  // byte_out
  byteOut?: [ MonitorData ](name='byte_out', example=''),
}

// ApiGroupPagedListVO
model ApiGroupPagedListVO {
  // 当前页的数据
  list?: [ ApiGroupVO ](name='list', example=''),
  // page_info
  pageInfo?: PageInfo(name='page_info', example=''),
}

// ApiTestRspVO
model ApiTestRspVO {
  // code
  code?: string(name='code', example='code1'),
  // cost
  cost?: long(name='cost', example='1000'),
  // size
  size?: long(name='size', example='1000'),
  // payload
  payload?: string(name='payload', example='payload1'),
  // headers
  headers?: [ ApiTestParamVO ](name='headers', example=''),
}

// ApiflowInstPagedListVO
model ApiflowInstPagedListVO {
  // list
  list?: [ ApiflowInstVO ](name='list', example=''),
  // page_info
  pageInfo?: PageInfo(name='page_info', example=''),
}

// API分组 或 应用
model SofaGwAppVO {
  // 应用认证信息
  authentications?: [ SofaGwAuthenticationVO ](name='authentications', example=''),
  // 应用描述信息
  description?: string(name='description', example='description'),
  // 实例标识
  id?: long(name='id', example='abcdEFGH1234'),
  // 实例标识
  instanceId?: string(name='instance_id', example='abcdEFGH1234'),
  // 名称
  name?: string(name='name', example='dsrconsole'),
  // services
  services?: [ string ](name='services', example='1'),
  // api分组(服务提供方)用 PUBLISHER，应用(服务使用方)用 SUBSCRIBER
  type?: string(name='type', example='PUBLISHER/SUBSCRIBER'),
}

// ApiInfoQueryVO
model ApiInfoQueryVO {
  // 是否模糊搜索
  fuzzySearch?: boolean(name='fuzzy_search', example='true, false'),
  // pageInfo
  pageInfo?: PageInfo(name='page_info', example=''),
  // query
  query?: ApiInfoVO(name='query', example=''),
  // 自定义查询条件
  queryCondition?: string(name='query_condition', example='queryCondition'),
}

// AuthUserInfoPagedListVO
model AuthUserInfoPagedListVO {
  // 当前页的数据
  list?: [ AuthUserInfoVO ](name='list', example=''),
  // page_info
  pageInfo?: PageInfo(name='page_info', example=''),
}

// ApiModelPagedListVO
model ApiModelPagedListVO {
  // list
  list?: [ ApiModelVO ](name='list', example=''),
  // page_info
  pageInfo?: PageInfo(name='page_info', example=''),
}

// ApiflowInstQueryVO
model ApiflowInstQueryVO {
  // fuzzy_search
  fuzzySearch?: boolean(name='fuzzy_search', example='true, false'),
  // page_info
  pageInfo?: PageInfo(name='page_info', example=''),
  // query
  query?: ApiflowInstVO(name='query', example=''),
}

// CorsInfoQueryVO
model CorsInfoQueryVO {
  // 分页信息
  pageInfo?: PageInfo(name='page_info', example=''),
  // query
  query?: CorsInfoVO(name='query', example=''),
  // 是否模糊搜索
  fuzzySearch?: boolean(name='fuzzy_search', example='true, false'),
}

// ApiflowMachineInstPagedListVO
model ApiflowMachineInstPagedListVO {
  // list
  list?: [ ApiflowMachineInstVO ](name='list', example=''),
  // page_info
  pageInfo?: PageInfo(name='page_info', example=''),
}

// StrategyInfoQueryVO
model StrategyInfoQueryVO {
  // 分页信息
  pageInfo?: PageInfo(name='page_info', example=''),
  // query
  query?: StrategyInfoVO(name='query', example=''),
  // 是否模糊搜索
  fuzzySearch?: boolean(name='fuzzy_search', example='true, false'),
}

// ExternalAuthInfoPagedListVO
model ExternalAuthInfoPagedListVO {
  // list
  list?: [ ExternalAuthInfoVO ](name='list', example=''),
  // pageInfo
  pageInfo?: PageInfo(name='page_info', example=''),
}

// RouterInfoQueryVO
model RouterInfoQueryVO {
  // pageInfo
  pageInfo?: PageInfo(name='page_info', example=''),
  // query
  query?: RouterInfoVO(name='query', example=''),
  // 是否模糊搜索
  fuzzySearch?: boolean(name='fuzzy_search', example='true, false'),
}

// SystemConfigQueryVO
model SystemConfigQueryVO {
  // 是否模糊搜索
  fuzzySearch?: boolean(name='fuzzy_search', example='true, false'),
  // page_info
  pageInfo?: PageInfo(name='page_info', example=''),
  // query
  query?: SystemConfigVO(name='query', example=''),
}

model CreateApigroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiGroupVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model CreateApigroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiGroupVO(name='data'),
}

/**
 * Description: 创建API分组
 * Summary: 创建API分组
 */
async function createApigroup(request: CreateApigroupRequest): CreateApigroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createApigroupEx(request, headers, runtime);
}

/**
 * Description: 创建API分组
 * Summary: 创建API分组
 */
async function createApigroupEx(request: CreateApigroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateApigroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apigroup.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllApigroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiGroupQueryVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model AllApigroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ ApiGroupVO ](name='data'),
}

/**
 * Description: 查询API分组列表
 * Summary: 查询API分组列表
 */
async function allApigroup(request: AllApigroupRequest): AllApigroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allApigroupEx(request, headers, runtime);
}

/**
 * Description: 查询API分组列表
 * Summary: 查询API分组列表
 */
async function allApigroupEx(request: AllApigroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllApigroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apigroup.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListApigroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiGroupQueryVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model ListApigroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiGroupPagedListVO(name='data'),
}

/**
 * Description: 查询API分组分页列表
 * Summary: 查询API分组分页列表
 */
async function listApigroup(request: ListApigroupRequest): ListApigroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listApigroupEx(request, headers, runtime);
}

/**
 * Description: 查询API分组分页列表
 * Summary: 查询API分组分页列表
 */
async function listApigroupEx(request: ListApigroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListApigroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apigroup.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSysRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: SystemClusterVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model CreateSysResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: SystemClusterVO(name='data'),
}

/**
 * Description: 创建后端集群
 * Summary: 创建后端集群
 */
async function createSys(request: CreateSysRequest): CreateSysResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSysEx(request, headers, runtime);
}

/**
 * Description: 创建后端集群
 * Summary: 创建后端集群
 */
async function createSysEx(request: CreateSysRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSysResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.sys.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllSysRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: SystemClusterQueryVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model AllSysResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ SystemClusterVO ](name='data'),
}

/**
 * Description: 查询后端集群列表
 * Summary: 查询后端集群列表
 */
async function allSys(request: AllSysRequest): AllSysResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allSysEx(request, headers, runtime);
}

/**
 * Description: 查询后端集群列表
 * Summary: 查询后端集群列表
 */
async function allSysEx(request: AllSysRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllSysResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.sys.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSysRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: SystemClusterQueryVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model ListSysResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: SystemClusterPagedListVO(name='data'),
}

/**
 * Description: 查询后端集群分页列表
 * Summary: 查询后端集群分页列表
 */
async function listSys(request: ListSysRequest): ListSysResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSysEx(request, headers, runtime);
}

/**
 * Description: 查询后端集群分页列表
 * Summary: 查询后端集群分页列表
 */
async function listSysEx(request: ListSysRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSysResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.sys.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetApigroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // api_group_id
  apiGroupId: string(name='api_group_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model GetApigroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiGroupVO(name='data'),
}

/**
 * Description: 通过ID查询API分组
 * Summary: 通过ID查询API分组
 */
async function getApigroup(request: GetApigroupRequest): GetApigroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getApigroupEx(request, headers, runtime);
}

/**
 * Description: 通过ID查询API分组
 * Summary: 通过ID查询API分组
 */
async function getApigroupEx(request: GetApigroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetApigroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apigroup.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateApigroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiGroupVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model UpdateApigroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 更新API分组
 * Summary: 更新API分组
 */
async function updateApigroup(request: UpdateApigroupRequest): UpdateApigroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateApigroupEx(request, headers, runtime);
}

/**
 * Description: 更新API分组
 * Summary: 更新API分组
 */
async function updateApigroupEx(request: UpdateApigroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateApigroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apigroup.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteApigroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // api_group_id
  apiGroupId: string(name='api_group_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model DeleteApigroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 删除API分组
 * Summary: 删除API分组
 */
async function deleteApigroup(request: DeleteApigroupRequest): DeleteApigroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteApigroupEx(request, headers, runtime);
}

/**
 * Description: 删除API分组
 * Summary: 删除API分组
 */
async function deleteApigroupEx(request: DeleteApigroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteApigroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apigroup.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiInfoVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model CreateApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiInfoVO(name='data'),
}

/**
 * Description: 创建API信息
 * Summary: 创建API信息
 */
async function createApi(request: CreateApiRequest): CreateApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createApiEx(request, headers, runtime);
}

/**
 * Description: 创建API信息
 * Summary: 创建API信息
 */
async function createApiEx(request: CreateApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiInfoVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model UpdateApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 更新API信息
 * Summary: 更新API信息
 */
async function updateApi(request: UpdateApiRequest): UpdateApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateApiEx(request, headers, runtime);
}

/**
 * Description: 更新API信息
 * Summary: 更新API信息
 */
async function updateApiEx(request: UpdateApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiInfoQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model AllApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ ApiInfoVO ](name='data'),
}

/**
 * Description: 查询API列表
 * Summary: 查询API列表
 */
async function allApi(request: AllApiRequest): AllApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allApiEx(request, headers, runtime);
}

/**
 * Description: 查询API列表
 * Summary: 查询API列表
 */
async function allApiEx(request: AllApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiInfoQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model ListApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiInfoPagedListVO(name='data'),
}

/**
 * Description: 查询API分页列表
 * Summary: 查询API分页列表
 */
async function listApi(request: ListApiRequest): ListApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listApiEx(request, headers, runtime);
}

/**
 * Description: 查询API分页列表
 * Summary: 查询API分页列表
 */
async function listApiEx(request: ListApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // API标识
  apiId: string(name='api_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
  // api_type
  apiType?: string(name='api_type'),
}

model GetApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiInfoVO(name='data'),
}

/**
 * Description: 通过ID查询API
 * Summary: 通过ID查询API
 */
async function getApi(request: GetApiRequest): GetApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getApiEx(request, headers, runtime);
}

/**
 * Description: 通过ID查询API
 * Summary: 通过ID查询API
 */
async function getApiEx(request: GetApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAppRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: AppInfoVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model CreateAppResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: AppInfoVO(name='data'),
}

/**
 * Description: 创建App
 * Summary: 创建App
 */
async function createApp(request: CreateAppRequest): CreateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAppEx(request, headers, runtime);
}

/**
 * Description: 创建App
 * Summary: 创建App
 */
async function createAppEx(request: CreateAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.app.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateAppRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: AppInfoVO(name='param'),
  // 租户 标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model UpdateAppResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 更新App信息
 * Summary: 更新App信息
 */
async function updateApp(request: UpdateAppRequest): UpdateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateAppEx(request, headers, runtime);
}

/**
 * Description: 更新App信息
 * Summary: 更新App信息
 */
async function updateAppEx(request: UpdateAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.app.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllAppRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: AppInfoQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model AllAppResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ AppInfoVO ](name='data'),
}

/**
 * Description: 查询App列表
 * Summary: 查询App列表
 */
async function allApp(request: AllAppRequest): AllAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allAppEx(request, headers, runtime);
}

/**
 * Description: 查询App列表
 * Summary: 查询App列表
 */
async function allAppEx(request: AllAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.app.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAppRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: AppInfoQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model ListAppResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: AppInfoPagedListVO(name='data'),
}

/**
 * Description: 查询App分页列表
 * Summary: 查询App分页列表
 */
async function listApp(request: ListAppRequest): ListAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAppEx(request, headers, runtime);
}

/**
 * Description: 查询App分页列表
 * Summary: 查询App分页列表
 */
async function listAppEx(request: ListAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.app.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAppRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // App标识
  appId: string(name='app_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
  // 查询类型，不填默认查询传递的wsId的appId,填写outer可以查询跨租户app
  queryType?: string(name='query_type'),
}

model GetAppResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: AppInfoVO(name='data'),
}

/**
 * Description: 通过ID查询App
 * Summary: 通过ID查询App
 */
async function getApp(request: GetAppRequest): GetAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAppEx(request, headers, runtime);
}

/**
 * Description: 通过ID查询App
 * Summary: 通过ID查询App
 */
async function getAppEx(request: GetAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.app.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAuthappRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: AuthAppInfoVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model CreateAuthappResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: AuthAppInfoVO(name='data'),
}

/**
 * Description: 创建授权App
 * Summary: 创建授权App
 */
async function createAuthapp(request: CreateAuthappRequest): CreateAuthappResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAuthappEx(request, headers, runtime);
}

/**
 * Description: 创建授权App
 * Summary: 创建授权App
 */
async function createAuthappEx(request: CreateAuthappRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAuthappResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.authapp.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateAuthappRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: AuthAppInfoVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model UpdateAuthappResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 更新授权App
 * Summary: 更新授权App
 */
async function updateAuthapp(request: UpdateAuthappRequest): UpdateAuthappResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateAuthappEx(request, headers, runtime);
}

/**
 * Description: 更新授权App
 * Summary: 更新授权App
 */
async function updateAuthappEx(request: UpdateAuthappRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAuthappResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.authapp.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteAuthappRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权App信息标识
  authAppInfoId: string(name='auth_app_info_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model DeleteAuthappResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 删除授权App
 * Summary: 删除授权App
 */
async function deleteAuthapp(request: DeleteAuthappRequest): DeleteAuthappResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteAuthappEx(request, headers, runtime);
}

/**
 * Description: 删除授权App
 * Summary: 删除授权App
 */
async function deleteAuthappEx(request: DeleteAuthappRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAuthappResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.authapp.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllAuthappRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: AuthAppInfoQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model AllAuthappResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ AuthAppInfoVO ](name='data'),
}

/**
 * Description: 查询授权App列表
 * Summary: 查询授权App列表
 */
async function allAuthapp(request: AllAuthappRequest): AllAuthappResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allAuthappEx(request, headers, runtime);
}

/**
 * Description: 查询授权App列表
 * Summary: 查询授权App列表
 */
async function allAuthappEx(request: AllAuthappRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllAuthappResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.authapp.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAuthappRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: AuthAppInfoQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间 标识
  workspaceId?: string(name='workspace_id'),
}

model ListAuthappResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: AuthAppInfoPagedListVO(name='data'),
}

/**
 * Description: 查询获取授权App分页列表
 * Summary: 查询授权App分页列表
 */
async function listAuthapp(request: ListAuthappRequest): ListAuthappResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAuthappEx(request, headers, runtime);
}

/**
 * Description: 查询获取授权App分页列表
 * Summary: 查询授权App分页列表
 */
async function listAuthappEx(request: ListAuthappRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAuthappResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.authapp.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAuthappRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权App信息标识
  authAppInfoId: string(name='auth_app_info_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model GetAuthappResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: AuthAppInfoVO(name='data'),
}

/**
 * Description: 通过ID查询授权App
 * Summary: 通过ID查询授权App
 */
async function getAuthapp(request: GetAuthappRequest): GetAuthappResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAuthappEx(request, headers, runtime);
}

/**
 * Description: 通过ID查询授权App
 * Summary: 通过ID查询授权App
 */
async function getAuthappEx(request: GetAuthappRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAuthappResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.authapp.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateRouterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: RouterInfoVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model CreateRouterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: RouterInfoVO(name='data'),
}

/**
 * Description: 创建路由规则
 * Summary: 创建路由规则
 */
async function createRouter(request: CreateRouterRequest): CreateRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createRouterEx(request, headers, runtime);
}

/**
 * Description: 创建路由规则
 * Summary: 创建路由规则
 */
async function createRouterEx(request: CreateRouterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateRouterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.router.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateRouterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: RouterInfoVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model UpdateRouterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 更新路由规则
 * Summary: 更新路由规则
 */
async function updateRouter(request: UpdateRouterRequest): UpdateRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateRouterEx(request, headers, runtime);
}

/**
 * Description: 更新路由规则
 * Summary: 更新路由规则
 */
async function updateRouterEx(request: UpdateRouterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateRouterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.router.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteRouterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 路由规则标识
  routerId: string(name='router_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model DeleteRouterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 通过ID删除路由规则
 * Summary: 通过ID删除路由规则
 */
async function deleteRouter(request: DeleteRouterRequest): DeleteRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteRouterEx(request, headers, runtime);
}

/**
 * Description: 通过ID删除路由规则
 * Summary: 通过ID删除路由规则
 */
async function deleteRouterEx(request: DeleteRouterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteRouterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.router.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllRouterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: RouterInfoQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model AllRouterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ RouterInfoVO ](name='data'),
}

/**
 * Description: 查询路由信息列表
 * Summary: 查询路由信息列表
 */
async function allRouter(request: AllRouterRequest): AllRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allRouterEx(request, headers, runtime);
}

/**
 * Description: 查询路由信息列表
 * Summary: 查询路由信息列表
 */
async function allRouterEx(request: AllRouterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllRouterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.router.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListRouterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: RouterInfoQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model ListRouterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: RouterInfoPagedListVO(name='data'),
}

/**
 * Description: 查询路由规则分页列表
 * Summary: 查询路由规则分页列表
 */
async function listRouter(request: ListRouterRequest): ListRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listRouterEx(request, headers, runtime);
}

/**
 * Description: 查询路由规则分页列表
 * Summary: 查询路由规则分页列表
 */
async function listRouterEx(request: ListRouterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRouterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.router.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetRouterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 路由规则标识
  routerId: string(name='router_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model GetRouterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: RouterInfoVO(name='data'),
}

/**
 * Description: 通过ID查询路由规则
 * Summary: 通过ID查询路由规则
 */
async function getRouter(request: GetRouterRequest): GetRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getRouterEx(request, headers, runtime);
}

/**
 * Description: 通过ID查询路由规则
 * Summary: 通过ID查询路由规则
 */
async function getRouterEx(request: GetRouterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetRouterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.router.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSysRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: SystemClusterVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model UpdateSysResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 更新后端集群
 * Summary: 更新后端集群
 */
async function updateSys(request: UpdateSysRequest): UpdateSysResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSysEx(request, headers, runtime);
}

/**
 * Description: 更新后端集群
 * Summary: 更新后端集群
 */
async function updateSysEx(request: UpdateSysRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSysResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.sys.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSysRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 后端集群标识
  sysId: string(name='sys_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model DeleteSysResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 通过ID删除后端集群
 * Summary: 通过ID删除后端集群
 */
async function deleteSys(request: DeleteSysRequest): DeleteSysResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSysEx(request, headers, runtime);
}

/**
 * Description: 通过ID删除后端集群
 * Summary: 通过ID删除后端集群
 */
async function deleteSysEx(request: DeleteSysRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSysResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.sys.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSysRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 后端集群标识
  sysId: string(name='sys_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model GetSysResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: SystemClusterVO(name='data'),
}

/**
 * Description: 通过ID查询后端集群
 * Summary: 通过ID查询后端集群
 */
async function getSys(request: GetSysRequest): GetSysResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSysEx(request, headers, runtime);
}

/**
 * Description: 通过ID查询后端集群
 * Summary: 通过ID查询后端集群
 */
async function getSysEx(request: GetSysRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSysResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.sys.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllApigroupApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // API分组标识
  apiGroupId: string(name='api_group_id'),
  // param
  param?: ApiInfoQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model AllApigroupApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ ApiInfoVO ](name='data'),
}

/**
 * Description: 通过API分组ID查询API列表
 * Summary: 通过API分组ID查询API列表
 */
async function allApigroupApi(request: AllApigroupApiRequest): AllApigroupApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allApigroupApiEx(request, headers, runtime);
}

/**
 * Description: 通过API分组ID查询API列表
 * Summary: 通过API分组ID查询API列表
 */
async function allApigroupApiEx(request: AllApigroupApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllApigroupApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apigroup.api.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteAppRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // App标识
  appId: string(name='app_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model DeleteAppResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 通过ID删除App
 * Summary: 通过ID删除App
 */
async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteAppEx(request, headers, runtime);
}

/**
 * Description: 通过ID删除App
 * Summary: 通过ID删除App
 */
async function deleteAppEx(request: DeleteAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.app.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // API标识
  apiId: string(name='api_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
  // api_type
  apiType?: string(name='api_type'),
}

model DeleteApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 通过ID删除API
 * Summary: 通过ID删除API
 */
async function deleteApi(request: DeleteApiRequest): DeleteApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteApiEx(request, headers, runtime);
}

/**
 * Description: 通过ID删除API
 * Summary: 通过ID删除API
 */
async function deleteApiEx(request: DeleteApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListApigroupApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // API分组标识
  apiGroupId: string(name='api_group_id'),
  // param
  param?: ApiInfoQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model ListApigroupApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiInfoPagedListVO(name='data'),
}

/**
 * Description: 通过API分组ID查询API分页列表
 * Summary: 通过API分组ID查询API分页列表
 */
async function listApigroupApi(request: ListApigroupApiRequest): ListApigroupApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listApigroupApiEx(request, headers, runtime);
}

/**
 * Description: 通过API分组ID查询API分页列表
 * Summary: 通过API分组ID查询API分页列表
 */
async function listApigroupApiEx(request: ListApigroupApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListApigroupApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apigroup.api.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAuthappApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权API标识
  authAppInfoId: string(name='auth_app_info_id'),
  // param
  param?: ApiInfoQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model ListAuthappApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiInfoPagedListVO(name='data'),
}

/**
 * Description: 通过授权App ID查询API分页列表
 * Summary: 通过授权App ID查询API分页列表
 */
async function listAuthappApi(request: ListAuthappApiRequest): ListAuthappApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAuthappApiEx(request, headers, runtime);
}

/**
 * Description: 通过授权App ID查询API分页列表
 * Summary: 通过授权App ID查询API分页列表
 */
async function listAuthappApiEx(request: ListAuthappApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAuthappApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.authapp.api.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllSysApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiInfoQueryVO(name='param'),
  // 后端集群标识
  sysId: string(name='sys_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model AllSysApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ ApiInfoVO ](name='data'),
}

/**
 * Description: 通过后端集群ID查询API列表
 * Summary: 通过后端集群ID查询API列表
 */
async function allSysApi(request: AllSysApiRequest): AllSysApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allSysApiEx(request, headers, runtime);
}

/**
 * Description: 通过后端集群ID查询API列表
 * Summary: 通过后端集群ID查询API列表
 */
async function allSysApiEx(request: AllSysApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllSysApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.sys.api.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSysApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiInfoQueryVO(name='param'),
  // 后端集群标识
  sysId: string(name='sys_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model ListSysApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiInfoPagedListVO(name='data'),
}

/**
 * Description: 通过后端集群ID查询API分页列表
 * Summary: 通过后端集群ID查询API分页列表
 */
async function listSysApi(request: ListSysApiRequest): ListSysApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSysApiEx(request, headers, runtime);
}

/**
 * Description: 通过后端集群ID查询API分页列表
 * Summary: 通过后端集群ID查询API分页列表
 */
async function listSysApiEx(request: ListSysApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSysApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.sys.api.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllRouterApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiInfoQueryVO(name='param'),
  // 路由规则ID
  routerId?: string(name='router_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model AllRouterApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ ApiInfoVO ](name='data'),
}

/**
 * Description: 通过路由规则ID查询API列表
 * Summary: 通过路由规则ID查询API列表
 */
async function allRouterApi(request: AllRouterApiRequest): AllRouterApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allRouterApiEx(request, headers, runtime);
}

/**
 * Description: 通过路由规则ID查询API列表
 * Summary: 通过路由规则ID查询API列表
 */
async function allRouterApiEx(request: AllRouterApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllRouterApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.router.api.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListRouterApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiInfoQueryVO(name='param'),
  // 路由规则ID
  routerId?: string(name='router_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model ListRouterApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiInfoPagedListVO(name='data'),
}

/**
 * Description: 通过路由规则ID查询API分页列表
 * Summary: 通过路由规则ID查询API分页列表
 */
async function listRouterApi(request: ListRouterApiRequest): ListRouterApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listRouterApiEx(request, headers, runtime);
}

/**
 * Description: 通过路由规则ID查询API分页列表
 * Summary: 通过路由规则ID查询API分页列表
 */
async function listRouterApiEx(request: ListRouterApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRouterApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.router.api.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateApiVersionnoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // API标识
  apiId?: string(name='api_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 版本号
  versionNo?: string(name='version_no'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
  // api_type
  apiType?: string(name='api_type'),
}

model UpdateApiVersionnoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 更新API版本号
 * Summary: 更新API版本号
 */
async function updateApiVersionno(request: UpdateApiVersionnoRequest): UpdateApiVersionnoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateApiVersionnoEx(request, headers, runtime);
}

/**
 * Description: 更新API版本号
 * Summary: 更新API版本号
 */
async function updateApiVersionnoEx(request: UpdateApiVersionnoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateApiVersionnoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.versionno.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OfflineApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // API标识
  apiIdList: [ string ](name='api_id_list'),
  // 下线描述
  offlineDesc?: string(name='offline_desc'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
  // api_type
  apiType?: string(name='api_type'),
}

model OfflineApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: BatchActionResult(name='data'),
}

/**
 * Description: 下线API
 * Summary: 下线API
 */
async function offlineApi(request: OfflineApiRequest): OfflineApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return offlineApiEx(request, headers, runtime);
}

/**
 * Description: 下线API
 * Summary: 下线API
 */
async function offlineApiEx(request: OfflineApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OfflineApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.offline', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllAuthappApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权App标识
  authAppInfoId: string(name='auth_app_info_id'),
  // param
  param?: ApiInfoQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model AllAuthappApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ ApiInfoVO ](name='data'),
}

/**
 * Description: 通过授权App ID查询API列表
 * Summary: 通过授权App ID查询API列表
 */
async function allAuthappApi(request: AllAuthappApiRequest): AllAuthappApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allAuthappApiEx(request, headers, runtime);
}

/**
 * Description: 通过授权App ID查询API列表
 * Summary: 通过授权App ID查询API列表
 */
async function allAuthappApiEx(request: AllAuthappApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllAuthappApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.authapp.api.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model MountApiAuthappRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // API标识
  apiId: string(name='api_id'),
  // 授权App标识列表
  authAppInfoIdList: [ string ](name='auth_app_info_id_list'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model MountApiAuthappResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: BatchActionResult(name='data'),
}

/**
 * Description: api挂载授权App
 * Summary: api挂载授权App
 */
async function mountApiAuthapp(request: MountApiAuthappRequest): MountApiAuthappResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return mountApiAuthappEx(request, headers, runtime);
}

/**
 * Description: api挂载授权App
 * Summary: api挂载授权App
 */
async function mountApiAuthappEx(request: MountApiAuthappRequest, headers: map[string]string, runtime: Util.RuntimeOptions): MountApiAuthappResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.authapp.mount', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OnlineApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // API标识
  apiIdList: [ string ](name='api_id_list'),
  // 上线描述
  onlineDesc?: string(name='online_desc'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
  // api_type
  apiType?: string(name='api_type'),
}

model OnlineApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: BatchActionResult(name='data'),
}

/**
 * Description: 上线API
 * Summary: 上线API
 */
async function onlineApi(request: OnlineApiRequest): OnlineApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return onlineApiEx(request, headers, runtime);
}

/**
 * Description: 上线API
 * Summary: 上线API
 */
async function onlineApiEx(request: OnlineApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OnlineApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.online', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllApiAuthappRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // API标识
  apiId: string(name='api_id'),
  // param
  param?: AuthAppInfoQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model AllApiAuthappResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ AuthAppInfoVO ](name='data'),
}

/**
 * Description: 通过API ID查询授权App列表
 * Summary: 通过API ID查询授权App列表
 */
async function allApiAuthapp(request: AllApiAuthappRequest): AllApiAuthappResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allApiAuthappEx(request, headers, runtime);
}

/**
 * Description: 通过API ID查询授权App列表
 * Summary: 通过API ID查询授权App列表
 */
async function allApiAuthappEx(request: AllApiAuthappRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllApiAuthappResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.authapp.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListApiAuthappRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // API标识
  apiId: string(name='api_id'),
  // param
  param?: AuthAppInfoQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model ListApiAuthappResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: AuthAppInfoPagedListVO(name='data'),
}

/**
 * Description: 通过API ID查询授权App分页列表
 * Summary: 通过API ID查询授权App分页列表
 */
async function listApiAuthapp(request: ListApiAuthappRequest): ListApiAuthappResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listApiAuthappEx(request, headers, runtime);
}

/**
 * Description: 通过API ID查询授权App分页列表
 * Summary: 通过API ID查询授权App分页列表
 */
async function listApiAuthappEx(request: ListApiAuthappRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListApiAuthappResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.authapp.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllAppApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // App标识
  appId: string(name='app_id'),
  // param
  param?: ApiInfoQueryVO(name='param'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
}

model AllAppApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ ApiInfoVO ](name='data'),
}

/**
 * Description: 通过App ID查询API列表
 * Summary: 通过App ID查询API列表
 */
async function allAppApi(request: AllAppApiRequest): AllAppApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allAppApiEx(request, headers, runtime);
}

/**
 * Description: 通过App ID查询API列表
 * Summary: 通过App ID查询API列表
 */
async function allAppApiEx(request: AllAppApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllAppApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.app.api.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAppApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // App标识
  appId: string(name='app_id'),
  // param
  param?: ApiInfoQueryVO(name='param'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
}

model ListAppApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiInfoPagedListVO(name='data'),
}

/**
 * Description: 通过App ID查询API分页列表
 * Summary: 通过App ID查询API分页列表
 */
async function listAppApi(request: ListAppApiRequest): ListAppApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAppApiEx(request, headers, runtime);
}

/**
 * Description: 通过App ID查询API分页列表
 * Summary: 通过App ID查询API分页列表
 */
async function listAppApiEx(request: ListAppApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.app.api.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetCommonRandomakskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model GetCommonRandomakskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: AuthenticationConfigVO(name='data'),
}

/**
 * Description: 获取随机密钥
 * Summary: 获取随机密钥
 */
async function getCommonRandomaksk(request: GetCommonRandomakskRequest): GetCommonRandomakskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getCommonRandomakskEx(request, headers, runtime);
}

/**
 * Description: 获取随机密钥
 * Summary: 获取随机密钥
 */
async function getCommonRandomakskEx(request: GetCommonRandomakskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetCommonRandomakskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.common.randomaksk.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContactRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ContactInfoVO(name='param'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
}

model CreateContactResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ContactInfoVO(name='data'),
}

/**
 * Description: 创建联系方式
 * Summary: 创建联系方式
 */
async function createContact(request: CreateContactRequest): CreateContactResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContactEx(request, headers, runtime);
}

/**
 * Description: 创建联系方式
 * Summary: 创建联系方式
 */
async function createContactEx(request: CreateContactRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContactResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.contact.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateContactRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ContactInfoVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model UpdateContactResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 更新联系方式
 * Summary: 更新联系方式
 */
async function updateContact(request: UpdateContactRequest): UpdateContactResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateContactEx(request, headers, runtime);
}

/**
 * Description: 更新联系方式
 * Summary: 更新联系方式
 */
async function updateContactEx(request: UpdateContactRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateContactResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.contact.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteContactRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
  // 联系方式标识
  contactId?: string(name='contact_id'),
}

model DeleteContactResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 删除联系方式
 * Summary: 删除联系方式
 */
async function deleteContact(request: DeleteContactRequest): DeleteContactResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteContactEx(request, headers, runtime);
}

/**
 * Description: 删除联系方式
 * Summary: 删除联系方式
 */
async function deleteContactEx(request: DeleteContactRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteContactResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.contact.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetContactRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 联系方式标识
  contactId?: string(name='contact_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
}

model GetContactResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ContactInfoVO(name='data'),
}

/**
 * Description: 通过ID查询联系方式
 * Summary: 通过ID查询联系方式
 */
async function getContact(request: GetContactRequest): GetContactResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getContactEx(request, headers, runtime);
}

/**
 * Description: 通过ID查询联系方式
 * Summary: 通过ID查询联系方式
 */
async function getContactEx(request: GetContactRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetContactResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.contact.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListContactRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ContactInfoQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model ListContactResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ContactInfoPagedListVO(name='data'),
}

/**
 * Description: 查询联系方式分页列表
 * Summary: 查询联系方式分页列表
 */
async function listContact(request: ListContactRequest): ListContactResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listContactEx(request, headers, runtime);
}

/**
 * Description: 查询联系方式分页列表
 * Summary: 查询联系方式分页列表
 */
async function listContactEx(request: ListContactRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListContactResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.contact.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListContactAuthappRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权App ID
  authAppInfoId?: string(name='auth_app_info_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
  // param
  param?: ContactInfoQueryVO(name='param'),
}

model ListContactAuthappResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ContactInfoPagedListVO(name='data'),
}

/**
 * Description: 通过授权App ID查询联系方式列表
 * Summary: 通过授权App ID查询联系方式列表
 */
async function listContactAuthapp(request: ListContactAuthappRequest): ListContactAuthappResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listContactAuthappEx(request, headers, runtime);
}

/**
 * Description: 通过授权App ID查询联系方式列表
 * Summary: 通过授权App ID查询联系方式列表
 */
async function listContactAuthappEx(request: ListContactAuthappRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListContactAuthappResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.contact.authapp.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UnmountApiAuthappRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // api_id
  apiId: string(name='api_id'),
  // auth_app_info_id_list
  authAppInfoIdList: [ string ](name='auth_app_info_id_list'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model UnmountApiAuthappResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: BatchActionResult(name='data'),
}

/**
 * Description: api解除授权App
 * Summary: api解除授权App
 */
async function unmountApiAuthapp(request: UnmountApiAuthappRequest): UnmountApiAuthappResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return unmountApiAuthappEx(request, headers, runtime);
}

/**
 * Description: api解除授权App
 * Summary: api解除授权App
 */
async function unmountApiAuthappEx(request: UnmountApiAuthappRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UnmountApiAuthappResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.authapp.unmount', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetApiVersionapiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // api_id
  apiId: string(name='api_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // version_id
  versionId: string(name='version_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
  // api_type
  apiType?: string(name='api_type'),
}

model GetApiVersionapiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiInfoVO(name='data'),
}

/**
 * Description: 获取指定版本的api
 * Summary: 获取指定版本的api
 */
async function getApiVersionapi(request: GetApiVersionapiRequest): GetApiVersionapiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getApiVersionapiEx(request, headers, runtime);
}

/**
 * Description: 获取指定版本的api
 * Summary: 获取指定版本的api
 */
async function getApiVersionapiEx(request: GetApiVersionapiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetApiVersionapiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.versionapi.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCorsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: CorsInfoVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model CreateCorsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: CorsInfoVO(name='data'),
}

/**
 * Description: 创建cors
 * Summary: 创建cors
 */
async function createCors(request: CreateCorsRequest): CreateCorsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCorsEx(request, headers, runtime);
}

/**
 * Description: 创建cors
 * Summary: 创建cors
 */
async function createCorsEx(request: CreateCorsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCorsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.cors.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateCorsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: CorsInfoVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model UpdateCorsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 编辑cors
 * Summary: 编辑cors
 */
async function updateCors(request: UpdateCorsRequest): UpdateCorsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateCorsEx(request, headers, runtime);
}

/**
 * Description: 编辑cors
 * Summary: 编辑cors
 */
async function updateCorsEx(request: UpdateCorsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateCorsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.cors.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteCorsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 路由规则标识
  corsId?: string(name='cors_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model DeleteCorsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 删除cors
 * Summary: 删除cors
 */
async function deleteCors(request: DeleteCorsRequest): DeleteCorsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteCorsEx(request, headers, runtime);
}

/**
 * Description: 删除cors
 * Summary: 删除cors
 */
async function deleteCorsEx(request: DeleteCorsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteCorsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.cors.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllCorsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: CorsInfoQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model AllCorsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ CorsInfoVO ](name='data'),
}

/**
 * Description: 查询cors列表
 * Summary: 查询cors列表
 */
async function allCors(request: AllCorsRequest): AllCorsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allCorsEx(request, headers, runtime);
}

/**
 * Description: 查询cors列表
 * Summary: 查询cors列表
 */
async function allCorsEx(request: AllCorsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllCorsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.cors.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListCorsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: CorsInfoQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model ListCorsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: CorsInfoPagedListVO(name='data'),
}

/**
 * Description: 查询cors分页列表
 * Summary: 查询cors分页列表
 */
async function listCors(request: ListCorsRequest): ListCorsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listCorsEx(request, headers, runtime);
}

/**
 * Description: 查询cors分页列表
 * Summary: 查询cors分页列表
 */
async function listCorsEx(request: ListCorsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListCorsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.cors.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetCorsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 路由规则标识
  corsId?: string(name='cors_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model GetCorsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: CorsInfoVO(name='data'),
}

/**
 * Description: 根据ID查询cors
 * Summary: 根据ID查询cors
 */
async function getCors(request: GetCorsRequest): GetCorsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getCorsEx(request, headers, runtime);
}

/**
 * Description: 根据ID查询cors
 * Summary: 根据ID查询cors
 */
async function getCorsEx(request: GetCorsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetCorsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.cors.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllCorsApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiInfoQueryVO(name='param'),
  // cors标识
  corsId?: string(name='cors_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model AllCorsApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ ApiInfoVO ](name='data'),
}

/**
 * Description: 根据 cors ID 查询 API 列表
 * Summary: 根据 cors ID 查询 API 列表
 */
async function allCorsApi(request: AllCorsApiRequest): AllCorsApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allCorsApiEx(request, headers, runtime);
}

/**
 * Description: 根据 cors ID 查询 API 列表
 * Summary: 根据 cors ID 查询 API 列表
 */
async function allCorsApiEx(request: AllCorsApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllCorsApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.cors.api.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListCorsApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiInfoQueryVO(name='param'),
  // cors标识
  corsId?: string(name='cors_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model ListCorsApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiInfoPagedListVO(name='data'),
}

/**
 * Description: 根据cors ID查询API分页列表
 * Summary: 根据cors ID查询API分页列表
 */
async function listCorsApi(request: ListCorsApiRequest): ListCorsApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listCorsApiEx(request, headers, runtime);
}

/**
 * Description: 根据cors ID查询API分页列表
 * Summary: 根据cors ID查询API分页列表
 */
async function listCorsApiEx(request: ListCorsApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListCorsApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.cors.api.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model MountCorsApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 绑定的API ID列表
  apiIdList?: [ string ](name='api_id_list'),
  // cors标识
  corsId?: string(name='cors_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model MountCorsApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: BatchActionResult(name='data'),
}

/**
 * Description: 根据cors ID绑定API
 * Summary: 根据cors ID绑定API
 */
async function mountCorsApi(request: MountCorsApiRequest): MountCorsApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return mountCorsApiEx(request, headers, runtime);
}

/**
 * Description: 根据cors ID绑定API
 * Summary: 根据cors ID绑定API
 */
async function mountCorsApiEx(request: MountCorsApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): MountCorsApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.cors.api.mount', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UnmountCorsApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 绑定的API ID列表
  apiIdList?: [ string ](name='api_id_list'),
  // cors标识
  corsId?: string(name='cors_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model UnmountCorsApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: BatchActionResult(name='data'),
}

/**
 * Description: 根据cors ID 解绑API
 * Summary: 根据cors ID 解绑API
 */
async function unmountCorsApi(request: UnmountCorsApiRequest): UnmountCorsApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return unmountCorsApiEx(request, headers, runtime);
}

/**
 * Description: 根据cors ID 解绑API
 * Summary: 根据cors ID 解绑API
 */
async function unmountCorsApiEx(request: UnmountCorsApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UnmountCorsApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.cors.api.unmount', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecTestHttpRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiTestReqVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model ExecTestHttpResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiTestRspVO(name='data'),
}

/**
 * Description: API调试
 * Summary: API调试
 */
async function execTestHttp(request: ExecTestHttpRequest): ExecTestHttpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execTestHttpEx(request, headers, runtime);
}

/**
 * Description: API调试
 * Summary: API调试
 */
async function execTestHttpEx(request: ExecTestHttpRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecTestHttpResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.test.http.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateApiAuthapplimitRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // API标识
  apiId?: string(name='api_id'),
  // 授权应用标识
  authAppInfoId?: string(name='auth_app_info_id'),
  // 限流配置
  limitConfig?: LimitConfigVO(name='limit_config'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model UpdateApiAuthapplimitResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 更新授权应用限流
 * Summary: 更新授权应用限流
 */
async function updateApiAuthapplimit(request: UpdateApiAuthapplimitRequest): UpdateApiAuthapplimitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateApiAuthapplimitEx(request, headers, runtime);
}

/**
 * Description: 更新授权应用限流
 * Summary: 更新授权应用限流
 */
async function updateApiAuthapplimitEx(request: UpdateApiAuthapplimitRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateApiAuthapplimitResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.authapplimit.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetApiAuthapplimitRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // api_id
  apiId?: string(name='api_id'),
  // 授权应用标识
  authAppInfoId?: string(name='auth_app_info_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model GetApiAuthapplimitResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: LimitConfigVO(name='data'),
}

/**
 * Description: 查询授权应用限制
 * Summary: 查询授权应用限制
 */
async function getApiAuthapplimit(request: GetApiAuthapplimitRequest): GetApiAuthapplimitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getApiAuthapplimitEx(request, headers, runtime);
}

/**
 * Description: 查询授权应用限制
 * Summary: 查询授权应用限制
 */
async function getApiAuthapplimitEx(request: GetApiAuthapplimitRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetApiAuthapplimitResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.authapplimit.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateApiLimitconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // API标识
  apiId: string(name='api_id'),
  // 限流配置
  limitConfig?: LimitConfigVO(name='limit_config'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model UpdateApiLimitconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 编辑限流配置
 * Summary: 编辑限流配置
 */
async function updateApiLimitconfig(request: UpdateApiLimitconfigRequest): UpdateApiLimitconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateApiLimitconfigEx(request, headers, runtime);
}

/**
 * Description: 编辑限流配置
 * Summary: 编辑限流配置
 */
async function updateApiLimitconfigEx(request: UpdateApiLimitconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateApiLimitconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.limitconfig.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateApiCacheinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // API标识
  apiId?: string(name='api_id'),
  // param
  param?: ApiCacheVO(name='param'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
}

model UpdateApiCacheinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 更新缓存信息
 * Summary: 更新缓存信息
 */
async function updateApiCacheinfo(request: UpdateApiCacheinfoRequest): UpdateApiCacheinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateApiCacheinfoEx(request, headers, runtime);
}

/**
 * Description: 更新缓存信息
 * Summary: 更新缓存信息
 */
async function updateApiCacheinfoEx(request: UpdateApiCacheinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateApiCacheinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.cacheinfo.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMonitorRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
  // param
  param?: MonitoryRequest(name='param'),
}

model QueryMonitorResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: MonitoryAggregationVO(name='data'),
}

/**
 * Description: 查询监控
 * Summary: 查询监控
 */
async function queryMonitor(request: QueryMonitorRequest): QueryMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMonitorEx(request, headers, runtime);
}

/**
 * Description: 查询监控
 * Summary: 查询监控
 */
async function queryMonitorEx(request: QueryMonitorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMonitorResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.monitor.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryResultcodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
}

model QueryResultcodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ string ](name='data'),
}

/**
 * Description: 查询结果码
 * Summary: 查询结果码
 */
async function queryResultcode(request: QueryResultcodeRequest): QueryResultcodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryResultcodeEx(request, headers, runtime);
}

/**
 * Description: 查询结果码
 * Summary: 查询结果码
 */
async function queryResultcodeEx(request: QueryResultcodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryResultcodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.resultcode.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OnlineApiVersionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // api_id
  apiId?: string(name='api_id'),
  // online_desc
  onlineDesc?: string(name='online_desc'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // version_id
  versionId?: string(name='version_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
  // api_type
  apiType?: string(name='api_type'),
}

model OnlineApiVersionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 上线指定版本api
 * Summary: 上线指定版本api
 */
async function onlineApiVersion(request: OnlineApiVersionRequest): OnlineApiVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return onlineApiVersionEx(request, headers, runtime);
}

/**
 * Description: 上线指定版本api
 * Summary: 上线指定版本api
 */
async function onlineApiVersionEx(request: OnlineApiVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OnlineApiVersionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.version.online', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLdcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: LdcInfoVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model CreateLdcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: LdcInfoVO(name='data'),
}

/**
 * Description: 创建LDC规则
 * Summary: 创建LDC规则
 */
async function createLdc(request: CreateLdcRequest): CreateLdcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLdcEx(request, headers, runtime);
}

/**
 * Description: 创建LDC规则
 * Summary: 创建LDC规则
 */
async function createLdcEx(request: CreateLdcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLdcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.ldc.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateLdcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: LdcInfoVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model UpdateLdcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 修改 LDC规则
 * Summary: 修改 LDC规则
 */
async function updateLdc(request: UpdateLdcRequest): UpdateLdcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateLdcEx(request, headers, runtime);
}

/**
 * Description: 修改 LDC规则
 * Summary: 修改 LDC规则
 */
async function updateLdcEx(request: UpdateLdcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateLdcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.ldc.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteLdcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // tenant_id
  tenantId: string(name='tenant_id'),
  // workspace_id
  workspaceId: string(name='workspace_id'),
}

model DeleteLdcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 删除LDC规则
 * Summary: 删除LDC规则
 */
async function deleteLdc(request: DeleteLdcRequest): DeleteLdcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteLdcEx(request, headers, runtime);
}

/**
 * Description: 删除LDC规则
 * Summary: 删除LDC规则
 */
async function deleteLdcEx(request: DeleteLdcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteLdcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.ldc.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetLdcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // tenant_id
  tenantId: string(name='tenant_id'),
  // workspace_id
  workspaceId: string(name='workspace_id'),
}

model GetLdcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: LdcInfoVO(name='data'),
}

/**
 * Description: 查询ldc规则
 * Summary: 查询ldc规则
 */
async function getLdc(request: GetLdcRequest): GetLdcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getLdcEx(request, headers, runtime);
}

/**
 * Description: 查询ldc规则
 * Summary: 查询ldc规则
 */
async function getLdcEx(request: GetLdcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetLdcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.ldc.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveLdcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: LdcInfoVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model SaveLdcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: LdcInfoVO(name='data'),
}

/**
 * Description: 保存ldc规则
 * Summary: 保存ldc规则
 */
async function saveLdc(request: SaveLdcRequest): SaveLdcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveLdcEx(request, headers, runtime);
}

/**
 * Description: 保存ldc规则
 * Summary: 保存ldc规则
 */
async function saveLdcEx(request: SaveLdcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveLdcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.ldc.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model MountAuthappApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // api标识列表
  apiInfoIdList: [ string ](name='api_info_id_list'),
  // 授权APP标识
  authAppInfoId: string(name='auth_app_info_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model MountAuthappApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: BatchActionResult(name='data'),
}

/**
 * Description: 授权APP绑定API
 * Summary: 授权APP绑定API
 */
async function mountAuthappApi(request: MountAuthappApiRequest): MountAuthappApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return mountAuthappApiEx(request, headers, runtime);
}

/**
 * Description: 授权APP绑定API
 * Summary: 授权APP绑定API
 */
async function mountAuthappApiEx(request: MountAuthappApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): MountAuthappApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.authapp.api.mount', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UnmountAuthappApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // api标识列表
  apiInfoIdList: [ string ](name='api_info_id_list'),
  // 授权APP标识
  authAppInfoId: string(name='auth_app_info_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model UnmountAuthappApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: BatchActionResult(name='data'),
}

/**
 * Description: 授权app解除绑定Api
 * Summary: 授权app解除绑定Api
 */
async function unmountAuthappApi(request: UnmountAuthappApiRequest): UnmountAuthappApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return unmountAuthappApiEx(request, headers, runtime);
}

/**
 * Description: 授权app解除绑定Api
 * Summary: 授权app解除绑定Api
 */
async function unmountAuthappApiEx(request: UnmountAuthappApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UnmountAuthappApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.authapp.api.unmount', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 分组id
  apiGroupId?: string(name='api_group_id'),
  // api_transfer_list字符串
  apiTransferList?: string(name='api_transfer_list'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // null效验api及配置是否重复，true覆盖，false跳过
  updateFlag?: boolean(name='update_flag'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model ImportApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: BatchImportResult(name='data'),
}

/**
 * Description: 导入 API
 * Summary: 导入 API
 */
async function importApi(request: ImportApiRequest): ImportApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importApiEx(request, headers, runtime);
}

/**
 * Description: 导入 API
 * Summary: 导入 API
 */
async function importApiEx(request: ImportApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExportApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // apiId集合
  apiInfoIdList: [ string ](name='api_info_id_list'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model ExportApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiTransferResult(name='data'),
}

/**
 * Description: api批量导出
 * Summary: api批量导出
 */
async function exportApi(request: ExportApiRequest): ExportApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return exportApiEx(request, headers, runtime);
}

/**
 * Description: api批量导出
 * Summary: api批量导出
 */
async function exportApiEx(request: ExportApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExportApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.export', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExportApigroupApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // API分组标识
  apiGroupId: string(name='api_group_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model ExportApigroupApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiTransferResult(name='data'),
}

/**
 * Description: 根据API分组ID导出API
 * Summary: 根据API分组ID导出API
 */
async function exportApigroupApi(request: ExportApigroupApiRequest): ExportApigroupApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return exportApigroupApiEx(request, headers, runtime);
}

/**
 * Description: 根据API分组ID导出API
 * Summary: 根据API分组ID导出API
 */
async function exportApigroupApiEx(request: ExportApigroupApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExportApigroupApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apigroup.api.export', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateParammappingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ParamMappingInfoVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model CreateParammappingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ParamMappingInfoVO(name='data'),
}

/**
 * Description: 创建参数映射
 * Summary: 创建参数映射
 */
async function createParammapping(request: CreateParammappingRequest): CreateParammappingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createParammappingEx(request, headers, runtime);
}

/**
 * Description: 创建参数映射
 * Summary: 创建参数映射
 */
async function createParammappingEx(request: CreateParammappingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateParammappingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.parammapping.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateParammappingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ParamMappingInfoVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model UpdateParammappingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description:  更新参数映射
 * Summary:  更新参数映射
 */
async function updateParammapping(request: UpdateParammappingRequest): UpdateParammappingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateParammappingEx(request, headers, runtime);
}

/**
 * Description:  更新参数映射
 * Summary:  更新参数映射
 */
async function updateParammappingEx(request: UpdateParammappingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateParammappingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.parammapping.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteParammappingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 参数映射标识
  paramMappingId: string(name='param_mapping_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model DeleteParammappingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 删除参数映射
 * Summary: 删除参数映射
 */
async function deleteParammapping(request: DeleteParammappingRequest): DeleteParammappingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteParammappingEx(request, headers, runtime);
}

/**
 * Description: 删除参数映射
 * Summary: 删除参数映射
 */
async function deleteParammappingEx(request: DeleteParammappingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteParammappingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.parammapping.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListParammappingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ParamMappingInfoQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model ListParammappingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ParamMappingInfoPagedListVO(name='data'),
}

/**
 * Description: 查询参数映射分页列表
 * Summary: 查询参数映射分页列表
 */
async function listParammapping(request: ListParammappingRequest): ListParammappingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listParammappingEx(request, headers, runtime);
}

/**
 * Description: 查询参数映射分页列表
 * Summary: 查询参数映射分页列表
 */
async function listParammappingEx(request: ListParammappingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListParammappingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.parammapping.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllParammappingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ParamMappingInfoQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model AllParammappingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ ParamMappingInfoVO ](name='data'),
}

/**
 * Description: 查询API列表
 * Summary: 查询API列表
 */
async function allParammapping(request: AllParammappingRequest): AllParammappingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allParammappingEx(request, headers, runtime);
}

/**
 * Description: 查询API列表
 * Summary: 查询API列表
 */
async function allParammappingEx(request: AllParammappingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllParammappingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.parammapping.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetParammappingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 参数映射标识
  paramMappingId: string(name='param_mapping_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  // 
  workspaceId?: string(name='workspace_id'),
}

model GetParammappingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ParamMappingInfoVO(name='data'),
}

/**
 * Description: 通过IDF查询参数映射
 * Summary: 通过IDF查询参数映射
 */
async function getParammapping(request: GetParammappingRequest): GetParammappingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getParammappingEx(request, headers, runtime);
}

/**
 * Description: 通过IDF查询参数映射
 * Summary: 通过IDF查询参数映射
 */
async function getParammappingEx(request: GetParammappingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetParammappingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.parammapping.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListParammappingApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiInfoQueryVO(name='param'),
  // 参数映射标识
  paramMappingId: string(name='param_mapping_id'),
  // 	
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model ListParammappingApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiInfoPagedListVO(name='data'),
}

/**
 * Description: 根据映射参数ID查询api分页列表
 * Summary: 根据映射参数ID查询api分页列表
 */
async function listParammappingApi(request: ListParammappingApiRequest): ListParammappingApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listParammappingApiEx(request, headers, runtime);
}

/**
 * Description: 根据映射参数ID查询api分页列表
 * Summary: 根据映射参数ID查询api分页列表
 */
async function listParammappingApiEx(request: ListParammappingApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListParammappingApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.parammapping.api.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllApimodelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiModelQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识	
  // 
  workspaceId?: string(name='workspace_id'),
}

model AllApimodelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ ApiModelVO ](name='data'),
}

/**
 * Description: 查询模型列表
 * Summary: 查询模型列表
 */
async function allApimodel(request: AllApimodelRequest): AllApimodelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allApimodelEx(request, headers, runtime);
}

/**
 * Description: 查询模型列表
 * Summary: 查询模型列表
 */
async function allApimodelEx(request: AllApimodelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllApimodelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apimodel.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListApimodelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiModelQueryVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model ListApimodelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiModelPagedListVO(name='data'),
}

/**
 * Description: 查询api模板分页列表
 * Summary: 查询模型分页列表
 */
async function listApimodel(request: ListApimodelRequest): ListApimodelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listApimodelEx(request, headers, runtime);
}

/**
 * Description: 查询api模板分页列表
 * Summary: 查询模型分页列表
 */
async function listApimodelEx(request: ListApimodelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListApimodelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apimodel.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateApimodelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiModelVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model CreateApimodelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiModelVO(name='data'),
}

/**
 * Description: 创建api模型
 * Summary: 创建api模型
 */
async function createApimodel(request: CreateApimodelRequest): CreateApimodelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createApimodelEx(request, headers, runtime);
}

/**
 * Description: 创建api模型
 * Summary: 创建api模型
 */
async function createApimodelEx(request: CreateApimodelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateApimodelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apimodel.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteApimodelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // api_model_id
  apiModelId: string(name='api_model_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model DeleteApimodelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 删除api模型
 * Summary: 删除api模型
 */
async function deleteApimodel(request: DeleteApimodelRequest): DeleteApimodelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteApimodelEx(request, headers, runtime);
}

/**
 * Description: 删除api模型
 * Summary: 删除api模型
 */
async function deleteApimodelEx(request: DeleteApimodelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteApimodelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apimodel.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetApimodelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // api_model_id
  apiModelId: string(name='api_model_id'),
  // 查询模型的名称
  modelName?: string(name='model_name'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model GetApimodelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiModelVO(name='data'),
}

/**
 * Description: 根据模型ID查询模型
 * Summary: 根据模型ID查询模型
 */
async function getApimodel(request: GetApimodelRequest): GetApimodelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getApimodelEx(request, headers, runtime);
}

/**
 * Description: 根据模型ID查询模型
 * Summary: 根据模型ID查询模型
 */
async function getApimodelEx(request: GetApimodelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetApimodelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apimodel.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateApimodelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiModelVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model UpdateApimodelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 更新模型
 * Summary: 更新模型
 */
async function updateApimodel(request: UpdateApimodelRequest): UpdateApimodelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateApimodelEx(request, headers, runtime);
}

/**
 * Description: 更新模型
 * Summary: 更新模型
 */
async function updateApimodelEx(request: UpdateApimodelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateApimodelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apimodel.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllApimodelApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 模型id
  apiModelId: string(name='api_model_id'),
  // param
  param?: ApiInfoQueryVO(name='param'),
  // 	
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model AllApimodelApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ ApiInfoVO ](name='data'),
}

/**
 * Description: 通过模型ID查询使用的API列表
 * Summary: 通过模型ID查询使用的API列表
 */
async function allApimodelApi(request: AllApimodelApiRequest): AllApimodelApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allApimodelApiEx(request, headers, runtime);
}

/**
 * Description: 通过模型ID查询使用的API列表
 * Summary: 通过模型ID查询使用的API列表
 */
async function allApimodelApiEx(request: AllApimodelApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllApimodelApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apimodel.api.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListApimodelApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 模型ID
  apiModelId: string(name='api_model_id'),
  // param
  param?: ApiInfoQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model ListApimodelApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiInfoPagedListVO(name='data'),
}

/**
 * Description: 通过模型ID查询使用的API分页列表
 * Summary: 通过模型ID查询使用的API分页列表
 */
async function listApimodelApi(request: ListApimodelApiRequest): ListApimodelApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listApimodelApiEx(request, headers, runtime);
}

/**
 * Description: 通过模型ID查询使用的API分页列表
 * Summary: 通过模型ID查询使用的API分页列表
 */
async function listApimodelApiEx(request: ListApimodelApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListApimodelApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apimodel.api.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateExternalauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ExternalAuthInfoVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model CreateExternalauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ExternalAuthInfoVO(name='data'),
}

/**
 * Description: 创建外部授权
 * Summary: 创建外部授权
 */
async function createExternalauth(request: CreateExternalauthRequest): CreateExternalauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createExternalauthEx(request, headers, runtime);
}

/**
 * Description: 创建外部授权
 * Summary: 创建外部授权
 */
async function createExternalauthEx(request: CreateExternalauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateExternalauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.externalauth.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateExternalauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ExternalAuthInfoVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model UpdateExternalauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 更新外部系统
 * Summary: 更新外部系统
 */
async function updateExternalauth(request: UpdateExternalauthRequest): UpdateExternalauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateExternalauthEx(request, headers, runtime);
}

/**
 * Description: 更新外部系统
 * Summary: 更新外部系统
 */
async function updateExternalauthEx(request: UpdateExternalauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateExternalauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.externalauth.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteExternalauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部授权标识
  externalAuthId: string(name='external_auth_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model DeleteExternalauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 删除外部授权
 * Summary: 删除外部授权
 */
async function deleteExternalauth(request: DeleteExternalauthRequest): DeleteExternalauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteExternalauthEx(request, headers, runtime);
}

/**
 * Description: 删除外部授权
 * Summary: 删除外部授权
 */
async function deleteExternalauthEx(request: DeleteExternalauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteExternalauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.externalauth.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetExternalauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部授权标识
  externalAuthId: string(name='external_auth_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model GetExternalauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ExternalAuthInfoVO(name='data'),
}

/**
 * Description: 通过ID查询外部授权
 * Summary: 通过ID查询外部授权
 */
async function getExternalauth(request: GetExternalauthRequest): GetExternalauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getExternalauthEx(request, headers, runtime);
}

/**
 * Description: 通过ID查询外部授权
 * Summary: 通过ID查询外部授权
 */
async function getExternalauthEx(request: GetExternalauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetExternalauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.externalauth.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListExternalauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ExternalAuthInfoQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model ListExternalauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ExternalAuthInfoPagedListVO(name='data'),
}

/**
 * Description: 查询外部授权分页列表
 * Summary: 查询外部授权分页列表
 */
async function listExternalauth(request: ListExternalauthRequest): ListExternalauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listExternalauthEx(request, headers, runtime);
}

/**
 * Description: 查询外部授权分页列表
 * Summary: 查询外部授权分页列表
 */
async function listExternalauthEx(request: ListExternalauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListExternalauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.externalauth.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllExternalauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ExternalAuthInfoQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model AllExternalauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ ExternalAuthInfoVO ](name='data'),
}

/**
 * Description:  查询外部系统列表
 * Summary:  查询外部系统列表
 */
async function allExternalauth(request: AllExternalauthRequest): AllExternalauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allExternalauthEx(request, headers, runtime);
}

/**
 * Description:  查询外部系统列表
 * Summary:  查询外部系统列表
 */
async function allExternalauthEx(request: AllExternalauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllExternalauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.externalauth.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model MountExternalauthApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // api标识列表
  apiInfoIdList: [ string ](name='api_info_id_list'),
  // 外部授权标识
  externalAuthId: string(name='external_auth_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model MountExternalauthApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: BatchActionResult(name='data'),
}

/**
 * Description: 外部授权绑定api
 * Summary: 外部授权绑定api
 */
async function mountExternalauthApi(request: MountExternalauthApiRequest): MountExternalauthApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return mountExternalauthApiEx(request, headers, runtime);
}

/**
 * Description: 外部授权绑定api
 * Summary: 外部授权绑定api
 */
async function mountExternalauthApiEx(request: MountExternalauthApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): MountExternalauthApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.externalauth.api.mount', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UnmountExternalauthApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // api标识列表
  apiInfoIdList: [ string ](name='api_info_id_list'),
  // 外部授权标识
  externalAuthId: string(name='external_auth_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model UnmountExternalauthApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: BatchActionResult(name='data'),
}

/**
 * Description: 外部授权解绑api
 * Summary: 外部授权解绑api
 */
async function unmountExternalauthApi(request: UnmountExternalauthApiRequest): UnmountExternalauthApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return unmountExternalauthApiEx(request, headers, runtime);
}

/**
 * Description: 外部授权解绑api
 * Summary: 外部授权解绑api
 */
async function unmountExternalauthApiEx(request: UnmountExternalauthApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UnmountExternalauthApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.externalauth.api.unmount', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteApimodelParamRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 模型参数id
  paramId: string(name='param_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
  // 最外层的父类模型id
  apiModelId: string(name='api_model_id'),
}

model DeleteApimodelParamResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 删除模型参数
 * Summary: 删除模型参数
 */
async function deleteApimodelParam(request: DeleteApimodelParamRequest): DeleteApimodelParamResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteApimodelParamEx(request, headers, runtime);
}

/**
 * Description: 删除模型参数
 * Summary: 删除模型参数
 */
async function deleteApimodelParamEx(request: DeleteApimodelParamRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteApimodelParamResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apimodel.param.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateApimodelParamRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiModelParamVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model UpdateApimodelParamResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 更新模型参数
 * Summary: 更新模型参数
 */
async function updateApimodelParam(request: UpdateApimodelParamRequest): UpdateApimodelParamResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateApimodelParamEx(request, headers, runtime);
}

/**
 * Description: 更新模型参数
 * Summary: 更新模型参数
 */
async function updateApimodelParamEx(request: UpdateApimodelParamRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateApimodelParamResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apimodel.param.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateApimodelParamRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiModelParamVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model CreateApimodelParamResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiModelParamVO(name='data'),
}

/**
 * Description: 新增模型参数
 * Summary: 新增模型参数
 */
async function createApimodelParam(request: CreateApimodelParamRequest): CreateApimodelParamResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createApimodelParamEx(request, headers, runtime);
}

/**
 * Description: 新增模型参数
 * Summary: 新增模型参数
 */
async function createApimodelParamEx(request: CreateApimodelParamRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateApimodelParamResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apimodel.param.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListExternalauthApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部授权标识符
  externalAuthId: string(name='external_auth_id'),
  // param
  param?: ApiInfoQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model ListExternalauthApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiInfoPagedListVO(name='data'),
}

/**
 * Description: 通过外部授权ID查询API分页列表
 * Summary: 通过外部授权ID查询API分页列表
 */
async function listExternalauthApi(request: ListExternalauthApiRequest): ListExternalauthApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listExternalauthApiEx(request, headers, runtime);
}

/**
 * Description: 通过外部授权ID查询API分页列表
 * Summary: 通过外部授权ID查询API分页列表
 */
async function listExternalauthApiEx(request: ListExternalauthApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListExternalauthApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.externalauth.api.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckApimodelParamRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
  // 校检的模型id
  modelId: string(name='model_id'),
  // 模型引用的id
  refModelId: string(name='ref_model_id'),
}

model CheckApimodelParamResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 校检 模型引用是否死循环
 * Summary: 校检 模型引用是否死循环
 */
async function checkApimodelParam(request: CheckApimodelParamRequest): CheckApimodelParamResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkApimodelParamEx(request, headers, runtime);
}

/**
 * Description: 校检 模型引用是否死循环
 * Summary: 校检 模型引用是否死循环
 */
async function checkApimodelParamEx(request: CheckApimodelParamRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckApimodelParamResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apimodel.param.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ResolveApimodelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 待解析的父类模型名称
  modelName?: string(name='model_name'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
  // description
  description?: string(name='description'),
  // 包名
  packageName?: string(name='package_name'),
  // json
  json?: string(name='json'),
  // type
  type?: string(name='type'),
}

model ResolveApimodelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据模型
  data?: ApiModelVO(name='data'),
}

/**
 * Description: 解析数据模型
 * Summary: 解析数据模型
 */
async function resolveApimodel(request: ResolveApimodelRequest): ResolveApimodelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return resolveApimodelEx(request, headers, runtime);
}

/**
 * Description: 解析数据模型
 * Summary: 解析数据模型
 */
async function resolveApimodelEx(request: ResolveApimodelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ResolveApimodelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apimodel.resolve', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportApimodelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // apimodelVO
  param?: ApiModelVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model ImportApimodelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 导入后的模型
  data?: ApiModelVO(name='data'),
}

/**
 * Description: 侯志波
 * Summary: 导入数据模型
 */
async function importApimodel(request: ImportApimodelRequest): ImportApimodelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importApimodelEx(request, headers, runtime);
}

/**
 * Description: 侯志波
 * Summary: 导入数据模型
 */
async function importApimodelEx(request: ImportApimodelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportApimodelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apimodel.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyApimodelMgsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // modelDataSource指mgs平台  get模型返回的json字符串
  modelList: [ string ](name='model_list'),
}

model ApplyApimodelMgsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据迁移成功失败
  data?: boolean(name='data'),
}

/**
 * Description: mgs模型转换 为网关模型
 * Summary: （mgs模型数据迁移）转换 为网关模型
 */
async function applyApimodelMgs(request: ApplyApimodelMgsRequest): ApplyApimodelMgsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyApimodelMgsEx(request, headers, runtime);
}

/**
 * Description: mgs模型转换 为网关模型
 * Summary: （mgs模型数据迁移）转换 为网关模型
 */
async function applyApimodelMgsEx(request: ApplyApimodelMgsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyApimodelMgsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apimodel.mgs.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListOperatorRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: OperatorQueryVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model ListOperatorResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: OperatorPagedListVO(name='data'),
}

/**
 * Description: 查询操作人分页列表
 * Summary: 查询操作人分页列表
 */
async function listOperator(request: ListOperatorRequest): ListOperatorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listOperatorEx(request, headers, runtime);
}

/**
 * Description: 查询操作人分页列表
 * Summary: 查询操作人分页列表
 */
async function listOperatorEx(request: ListOperatorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListOperatorResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.operator.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateApigroupAuthuserconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // api_auth_user_config
  param?: ApiGroupAuthUserConfigVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model UpdateApigroupAuthuserconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 更新api分组授权用户配置
 * Summary: 更新api分组授权用户配置
 */
async function updateApigroupAuthuserconfig(request: UpdateApigroupAuthuserconfigRequest): UpdateApigroupAuthuserconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateApigroupAuthuserconfigEx(request, headers, runtime);
}

/**
 * Description: 更新api分组授权用户配置
 * Summary: 更新api分组授权用户配置
 */
async function updateApigroupAuthuserconfigEx(request: UpdateApigroupAuthuserconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateApigroupAuthuserconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apigroup.authuserconfig.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetApigroupAuthuserconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model GetApigroupAuthuserconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiGroupAuthUserConfigVO(name='data'),
}

/**
 * Description: 查询api分组授权用户配置
 * Summary: 查询api分组授权用户配置
 */
async function getApigroupAuthuserconfig(request: GetApigroupAuthuserconfigRequest): GetApigroupAuthuserconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getApigroupAuthuserconfigEx(request, headers, runtime);
}

/**
 * Description: 查询api分组授权用户配置
 * Summary: 查询api分组授权用户配置
 */
async function getApigroupAuthuserconfigEx(request: GetApigroupAuthuserconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetApigroupAuthuserconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apigroup.authuserconfig.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddApigroupAuthuserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 	
  // API标识
  apiGroupId: string(name='api_group_id'),
  // 用户标识列表
  operatorIdList: [ string ](name='operator_id_list'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model AddApigroupAuthuserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: BatchActionResult(name='data'),
}

/**
 * Description: api分组添加用户
 * Summary: api分组添加用户
 */
async function addApigroupAuthuser(request: AddApigroupAuthuserRequest): AddApigroupAuthuserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addApigroupAuthuserEx(request, headers, runtime);
}

/**
 * Description: api分组添加用户
 * Summary: api分组添加用户
 */
async function addApigroupAuthuserEx(request: AddApigroupAuthuserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddApigroupAuthuserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apigroup.authuser.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model MountApigroupAuthuserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // api标识
  apiGroupId: string(name='api_group_id'),
  // 授权状态
  authStatus: string(name='auth_status'),
  // 授权用户Id列表
  authUserIdList: [ string ](name='auth_user_id_list'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model MountApigroupAuthuserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: BatchActionResult(name='data'),
}

/**
 * Description:  api分组授权用户使用权限
 * Summary:  api分组授权用户使用权限
 */
async function mountApigroupAuthuser(request: MountApigroupAuthuserRequest): MountApigroupAuthuserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return mountApigroupAuthuserEx(request, headers, runtime);
}

/**
 * Description:  api分组授权用户使用权限
 * Summary:  api分组授权用户使用权限
 */
async function mountApigroupAuthuserEx(request: MountApigroupAuthuserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): MountApigroupAuthuserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apigroup.authuser.mount', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UnmountApigroupAuthuserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // api分组标识
  apiGroupId: string(name='api_group_id'),
  // 授权用户Id列表
  authUserIdList: [ string ](name='auth_user_id_list'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
  // 授权状态
  authStatus: string(name='auth_status'),
}

model UnmountApigroupAuthuserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: BatchActionResult(name='data'),
}

/**
 * Description: 
api解除用户使用权限
 * Summary:  api解除用户使用权限
 */
async function unmountApigroupAuthuser(request: UnmountApigroupAuthuserRequest): UnmountApigroupAuthuserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return unmountApigroupAuthuserEx(request, headers, runtime);
}

/**
 * Description: 
api解除用户使用权限
 * Summary:  api解除用户使用权限
 */
async function unmountApigroupAuthuserEx(request: UnmountApigroupAuthuserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UnmountApigroupAuthuserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apigroup.authuser.unmount', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListApigroupAuthuserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: AuthUserInfoQueryVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model ListApigroupAuthuserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: AuthUserInfoPagedListVO(name='data'),
}

/**
 * Description: 查询api分组授权用户分页列表
 * Summary: 查询api分组授权用户分页列表
 */
async function listApigroupAuthuser(request: ListApigroupAuthuserRequest): ListApigroupAuthuserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listApigroupAuthuserEx(request, headers, runtime);
}

/**
 * Description: 查询api分组授权用户分页列表
 * Summary: 查询api分组授权用户分页列表
 */
async function listApigroupAuthuserEx(request: ListApigroupAuthuserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListApigroupAuthuserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apigroup.authuser.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteApigroupAuthuserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // api分组标识
  apiGroupId: string(name='api_group_id'),
  // 用户id列表
  userIdList: [ string ](name='user_id_list'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model DeleteApigroupAuthuserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: BatchActionResult(name='data'),
}

/**
 * Description: api分组删除用户
 * Summary: api分组删除用户
 */
async function deleteApigroupAuthuser(request: DeleteApigroupAuthuserRequest): DeleteApigroupAuthuserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteApigroupAuthuserEx(request, headers, runtime);
}

/**
 * Description: api分组删除用户
 * Summary: api分组删除用户
 */
async function deleteApigroupAuthuserEx(request: DeleteApigroupAuthuserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteApigroupAuthuserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apigroup.authuser.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyApiApigroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
  // api分组标识
  apiGroupId: string(name='api_group_id'),
}

model VerifyApiApigroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // api
  data?: boolean(name='data'),
}

/**
 * Description: 校验是否有api分组权限
 * Summary: 校验是否有api分组权限
 */
async function verifyApiApigroup(request: VerifyApiApigroupRequest): VerifyApiApigroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyApiApigroupEx(request, headers, runtime);
}

/**
 * Description: 校验是否有api分组权限
 * Summary: 校验是否有api分组权限
 */
async function verifyApiApigroupEx(request: VerifyApiApigroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyApiApigroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.apigroup.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateAppAuthapiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // api标识列表
  apiInfoIdList: [ string ](name='api_info_id_list'),
  // app标识
  appId: string(name='app_id'),
  // 加密状态
  encryptionStatus: string(name='encryption_status'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model UpdateAppAuthapiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app
  data?: BatchActionResult(name='data'),
}

/**
 * Description: 修改app绑定api加密状态
 * Summary: 修改app绑定api加密状态
 */
async function updateAppAuthapi(request: UpdateAppAuthapiRequest): UpdateAppAuthapiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateAppAuthapiEx(request, headers, runtime);
}

/**
 * Description: 修改app绑定api加密状态
 * Summary: 修改app绑定api加密状态
 */
async function updateAppAuthapiEx(request: UpdateAppAuthapiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAppAuthapiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.app.authapi.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateGwconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: SystemConfigVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 	
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model CreateGwconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: SystemConfigVO(name='data'),
}

/**
 * Description: 配置zone
 * Summary: 全局配置zone
 */
async function createGwconfig(request: CreateGwconfigRequest): CreateGwconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createGwconfigEx(request, headers, runtime);
}

/**
 * Description: 配置zone
 * Summary: 全局配置zone
 */
async function createGwconfigEx(request: CreateGwconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateGwconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.gwconfig.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetGwconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // config_key
  configKey?: string(name='config_key'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model GetGwconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: SystemConfigVO(name='data'),
}

/**
 * Description: 查询全局网关配置
 * Summary: 查询全局网关配置
 */
async function getGwconfig(request: GetGwconfigRequest): GetGwconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getGwconfigEx(request, headers, runtime);
}

/**
 * Description: 查询全局网关配置
 * Summary: 查询全局网关配置
 */
async function getGwconfigEx(request: GetGwconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetGwconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.gwconfig.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateGwconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: SystemConfigVO(name='param'),
  // 	
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
  // 更新的网关id
  gwIdList?: [ string ](name='gw_id_list'),
}

model UpdateGwconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 更新全局网关配置
 * Summary: 更新全局网关配置
 */
async function updateGwconfig(request: UpdateGwconfigRequest): UpdateGwconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateGwconfigEx(request, headers, runtime);
}

/**
 * Description: 更新全局网关配置
 * Summary: 更新全局网关配置
 */
async function updateGwconfigEx(request: UpdateGwconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateGwconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.gwconfig.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllGwconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 	
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // param
  param?: SystemConfigQueryVO(name='param'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model AllGwconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ GateWayConfigVO ](name='data'),
}

/**
 * Description: 查询全局网关列表
 * Summary: 查询全局网关列表
 */
async function allGwconfig(request: AllGwconfigRequest): AllGwconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allGwconfigEx(request, headers, runtime);
}

/**
 * Description: 查询全局网关列表
 * Summary: 查询全局网关列表
 */
async function allGwconfigEx(request: AllGwconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllGwconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.gwconfig.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model GetInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // instance_id
  data?: string(name='data'),
}

/**
 * Description: 查询instance_id
 * Summary: 查询instance_id
 */
async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getInstanceEx(request, headers, runtime);
}

/**
 * Description: 查询instance_id
 * Summary: 查询instance_id
 */
async function getInstanceEx(request: GetInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetInstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.instance.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckGwconfigDeleteRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // zone和网关标识
  configKey?: string(name='config_key'),
  // param
  param?: GateWayConfigVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model CheckGwconfigDeleteResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // true, false
  data?: boolean(name='data'),
}

/**
 * Description: 删除zone、网关效验
 * Summary: 删除zone、网关效验
 */
async function checkGwconfigDelete(request: CheckGwconfigDeleteRequest): CheckGwconfigDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkGwconfigDeleteEx(request, headers, runtime);
}

/**
 * Description: 删除zone、网关效验
 * Summary: 删除zone、网关效验
 */
async function checkGwconfigDeleteEx(request: CheckGwconfigDeleteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckGwconfigDeleteResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.gwconfig.delete.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckGwconfigUpdateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 	
  // zone和网关标识
  configKey?: string(name='config_key'),
  // param
  gatewayIdList?: [ string ](name='gateway_id_list'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model CheckGwconfigUpdateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 更新zone、网关效验
 * Summary: 更新zone、网关效验
 */
async function checkGwconfigUpdate(request: CheckGwconfigUpdateRequest): CheckGwconfigUpdateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkGwconfigUpdateEx(request, headers, runtime);
}

/**
 * Description: 更新zone、网关效验
 * Summary: 更新zone、网关效验
 */
async function checkGwconfigUpdateEx(request: CheckGwconfigUpdateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckGwconfigUpdateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.gwconfig.update.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateApiGwconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiInfoVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model CreateApiGwconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiInfoVO(name='data'),
}

/**
 * Description: 创建跨云互通代理模式
 * Summary: 创建跨云互通代理模式
 */
async function createApiGwconfig(request: CreateApiGwconfigRequest): CreateApiGwconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createApiGwconfigEx(request, headers, runtime);
}

/**
 * Description: 创建跨云互通代理模式
 * Summary: 创建跨云互通代理模式
 */
async function createApiGwconfigEx(request: CreateApiGwconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateApiGwconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.gwconfig.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateApiGwconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiInfoVO(name='param'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
}

model UpdateApiGwconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 更新跨云互通API
 * Summary: 更新跨云互通API
 */
async function updateApiGwconfig(request: UpdateApiGwconfigRequest): UpdateApiGwconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateApiGwconfigEx(request, headers, runtime);
}

/**
 * Description: 更新跨云互通API
 * Summary: 更新跨云互通API
 */
async function updateApiGwconfigEx(request: UpdateApiGwconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateApiGwconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.gwconfig.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // api参数
  param?: ApiInfoVO(name='param'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model CheckApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // true成功，false失败
  data?: boolean(name='data'),
}

/**
 * Description: 录入api时的参数效验
 * Summary: 录入api时的参数效验
 */
async function checkApi(request: CheckApiRequest): CheckApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkApiEx(request, headers, runtime);
}

/**
 * Description: 录入api时的参数效验
 * Summary: 录入api时的参数效验
 */
async function checkApiEx(request: CheckApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckSysUpdateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  sysId?: string(name='sys_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model CheckSysUpdateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 系统集群修改校验
 * Summary: 系统集群修改校验是否可修改
 */
async function checkSysUpdate(request: CheckSysUpdateRequest): CheckSysUpdateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkSysUpdateEx(request, headers, runtime);
}

/**
 * Description: 系统集群修改校验
 * Summary: 系统集群修改校验是否可修改
 */
async function checkSysUpdateEx(request: CheckSysUpdateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckSysUpdateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.sys.update.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetApiHistoryversionapiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // api_id
  apiId: string(name='api_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // version_id
  versionId: string(name='version_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model GetApiHistoryversionapiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiInfoVO(name='data'),
}

/**
 * Description: api查看历史版本信息
 * Summary: api查看历史版本信息
 */
async function getApiHistoryversionapi(request: GetApiHistoryversionapiRequest): GetApiHistoryversionapiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getApiHistoryversionapiEx(request, headers, runtime);
}

/**
 * Description: api查看历史版本信息
 * Summary: api查看历史版本信息
 */
async function getApiHistoryversionapiEx(request: GetApiHistoryversionapiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetApiHistoryversionapiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.historyversionapi.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllStrategyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: StrategyInfoQueryVO(name='param'),
  // 	
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
}

model AllStrategyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ StrategyInfoVO ](name='data'),
}

/**
 * Description: 查询策略列表
 * Summary: 查询策略列表
 */
async function allStrategy(request: AllStrategyRequest): AllStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allStrategyEx(request, headers, runtime);
}

/**
 * Description: 查询策略列表
 * Summary: 查询策略列表
 */
async function allStrategyEx(request: AllStrategyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllStrategyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.strategy.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllStrategyApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiInfoQueryVO(name='param'),
  // strategy_id
  strategyId?: string(name='strategy_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model AllStrategyApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ ApiInfoVO ](name='data'),
}

/**
 * Description: 根据strategyID查询API列表
 * Summary: 根据strategyID查询API列表
 */
async function allStrategyApi(request: AllStrategyApiRequest): AllStrategyApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allStrategyApiEx(request, headers, runtime);
}

/**
 * Description: 根据strategyID查询API列表
 * Summary: 根据strategyID查询API列表
 */
async function allStrategyApiEx(request: AllStrategyApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllStrategyApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.strategy.api.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListStrategyApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiInfoQueryVO(name='param'),
  // strategy_id
  strategyId?: string(name='strategy_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model ListStrategyApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiInfoPagedListVO(name='data'),
}

/**
 * Description: 根据strategyID查询API分页
 * Summary: 根据strategyID查询API分页
 */
async function listStrategyApi(request: ListStrategyApiRequest): ListStrategyApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listStrategyApiEx(request, headers, runtime);
}

/**
 * Description: 根据strategyID查询API分页
 * Summary: 根据strategyID查询API分页
 */
async function listStrategyApiEx(request: ListStrategyApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListStrategyApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.strategy.api.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model MountStrategyApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 绑定的API ID列表
  apiIdList?: [ string ](name='api_id_list'),
  // strategy_id
  strategyId?: string(name='strategy_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model MountStrategyApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: BatchActionResult(name='data'),
}

/**
 * Description:  根据strategy ID绑定API
 * Summary:  根据strategy ID绑定API
 */
async function mountStrategyApi(request: MountStrategyApiRequest): MountStrategyApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return mountStrategyApiEx(request, headers, runtime);
}

/**
 * Description:  根据strategy ID绑定API
 * Summary:  根据strategy ID绑定API
 */
async function mountStrategyApiEx(request: MountStrategyApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): MountStrategyApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.strategy.api.mount', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UnmountStrategyApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 绑定的API ID列表
  apiIdList?: [ string ](name='api_id_list'),
  // strategy_id
  strategyId?: string(name='strategy_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
}

model UnmountStrategyApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: BatchActionResult(name='data'),
}

/**
 * Description: 根据strategyID 解绑API
 * Summary: 根据strategyID 解绑API
 */
async function unmountStrategyApi(request: UnmountStrategyApiRequest): UnmountStrategyApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return unmountStrategyApiEx(request, headers, runtime);
}

/**
 * Description: 根据strategyID 解绑API
 * Summary: 根据strategyID 解绑API
 */
async function unmountStrategyApiEx(request: UnmountStrategyApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UnmountStrategyApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.strategy.api.unmount', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateStrategyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: StrategyInfoVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model CreateStrategyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: StrategyInfoVO(name='data'),
}

/**
 * Description:  创建策略
 * Summary:  创建策略
 */
async function createStrategy(request: CreateStrategyRequest): CreateStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createStrategyEx(request, headers, runtime);
}

/**
 * Description:  创建策略
 * Summary:  创建策略
 */
async function createStrategyEx(request: CreateStrategyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateStrategyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.strategy.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteStrategyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // strategy_id
  strategyId?: string(name='strategy_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model DeleteStrategyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 删除策略
 * Summary: 删除策略
 */
async function deleteStrategy(request: DeleteStrategyRequest): DeleteStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteStrategyEx(request, headers, runtime);
}

/**
 * Description: 删除策略
 * Summary: 删除策略
 */
async function deleteStrategyEx(request: DeleteStrategyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteStrategyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.strategy.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetStrategyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // strategy_id
  strategyId?: string(name='strategy_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model GetStrategyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: StrategyInfoVO(name='data'),
}

/**
 * Description: 根据ID查询strategy
 * Summary: 根据ID查询strategy
 */
async function getStrategy(request: GetStrategyRequest): GetStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getStrategyEx(request, headers, runtime);
}

/**
 * Description: 根据ID查询strategy
 * Summary: 根据ID查询strategy
 */
async function getStrategyEx(request: GetStrategyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetStrategyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.strategy.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListStrategyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: StrategyInfoQueryVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model ListStrategyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: StrategyPagedListVO(name='data'),
}

/**
 * Description: 查询strategy分页列表
 * Summary: 查询strategy分页列表
 */
async function listStrategy(request: ListStrategyRequest): ListStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listStrategyEx(request, headers, runtime);
}

/**
 * Description: 查询strategy分页列表
 * Summary: 查询strategy分页列表
 */
async function listStrategyEx(request: ListStrategyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListStrategyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.strategy.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateStrategyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: StrategyInfoVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model UpdateStrategyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description:  编辑strategy
 * Summary:  编辑strategy
 */
async function updateStrategy(request: UpdateStrategyRequest): UpdateStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateStrategyEx(request, headers, runtime);
}

/**
 * Description:  编辑strategy
 * Summary:  编辑strategy
 */
async function updateStrategyEx(request: UpdateStrategyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateStrategyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.strategy.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetHomeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model GetHomeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: HomePageVO(name='data'),
}

/**
 * Description: 查询数量
 * Summary: 查询数量
 */
async function getHome(request: GetHomeRequest): GetHomeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getHomeEx(request, headers, runtime);
}

/**
 * Description: 查询数量
 * Summary: 查询数量
 */
async function getHomeEx(request: GetHomeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetHomeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.home.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckApigroupDomainRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiGroupDomainVO(name='param'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
}

model CheckApigroupDomainResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 	
  // true成功，false失败
  data?: boolean(name='data'),
}

/**
 * Description: 录入域名时的效验
 * Summary: 录入域名时的效验
 */
async function checkApigroupDomain(request: CheckApigroupDomainRequest): CheckApigroupDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkApigroupDomainEx(request, headers, runtime);
}

/**
 * Description: 录入域名时的效验
 * Summary: 录入域名时的效验
 */
async function checkApigroupDomainEx(request: CheckApigroupDomainRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckApigroupDomainResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apigroup.domain.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetApigroupDomainRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
}

model GetApigroupDomainResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: string(name='data'),
}

/**
 * Description: 查询域名后缀
 * Summary: 查询域名后缀
 */
async function getApigroupDomain(request: GetApigroupDomainRequest): GetApigroupDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getApigroupDomainEx(request, headers, runtime);
}

/**
 * Description: 查询域名后缀
 * Summary: 查询域名后缀
 */
async function getApigroupDomainEx(request: GetApigroupDomainRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetApigroupDomainResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apigroup.domain.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetApiSwaggerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // API标识列表
  apiInfoIdList: [ string ](name='api_info_id_list'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model GetApiSwaggerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // swaggerJson
  data?: string(name='data'),
}

/**
 * Description: 查看api生成的swagger文档
 * Summary: 查看api生成的swagger文档
 */
async function getApiSwagger(request: GetApiSwaggerRequest): GetApiSwaggerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getApiSwaggerEx(request, headers, runtime);
}

/**
 * Description: 查看api生成的swagger文档
 * Summary: 查看api生成的swagger文档
 */
async function getApiSwaggerEx(request: GetApiSwaggerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetApiSwaggerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.swagger.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DownloadApiSwaggerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // API标识列表
  apiInfoIdList?: [ string ](name='api_info_id_list'),
  // swaggerJson
  swaggerJsonStr?: string(name='swagger_json_str'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model DownloadApiSwaggerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: string(name='data'),
}

/**
 * Description: api文档下载
 * Summary: api文档下载
 */
async function downloadApiSwagger(request: DownloadApiSwaggerRequest): DownloadApiSwaggerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return downloadApiSwaggerEx(request, headers, runtime);
}

/**
 * Description: api文档下载
 * Summary: api文档下载
 */
async function downloadApiSwaggerEx(request: DownloadApiSwaggerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DownloadApiSwaggerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.api.swagger.download', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DownloadApimodelCodegenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // APp标识列表
  appId?: string(name='app_id'),
  // 租户标识
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
  // api_group_id
  apiGroupId?: string(name='api_group_id'),
  // package_name
  packageName?: string(name='package_name'),
}

model DownloadApimodelCodegenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: string(name='data'),
}

/**
 * Description: 代码生成
 * Summary: 代码生成
 */
async function downloadApimodelCodegen(request: DownloadApimodelCodegenRequest): DownloadApimodelCodegenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return downloadApimodelCodegenEx(request, headers, runtime);
}

/**
 * Description: 代码生成
 * Summary: 代码生成
 */
async function downloadApimodelCodegenEx(request: DownloadApimodelCodegenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DownloadApimodelCodegenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apimodel.codegen.download', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetGwconfigGatewayswitchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model GetGwconfigGatewayswitchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 获取双网模块开关
 * Summary: 获取双网模块开关
 */
async function getGwconfigGatewayswitch(request: GetGwconfigGatewayswitchRequest): GetGwconfigGatewayswitchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getGwconfigGatewayswitchEx(request, headers, runtime);
}

/**
 * Description: 获取双网模块开关
 * Summary: 获取双网模块开关
 */
async function getGwconfigGatewayswitchEx(request: GetGwconfigGatewayswitchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetGwconfigGatewayswitchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.gwconfig.gatewayswitch.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllRegistryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: RegistryInfoQueryVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model AllRegistryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ RegistryInfoVO ](name='data'),
}

/**
 * Description: 查询注册中心列表
 * Summary: 查询注册中心列表
 */
async function allRegistry(request: AllRegistryRequest): AllRegistryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allRegistryEx(request, headers, runtime);
}

/**
 * Description: 查询注册中心列表
 * Summary: 查询注册中心列表
 */
async function allRegistryEx(request: AllRegistryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllRegistryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.registry.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllRegistrySysRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: SystemClusterQueryVO(name='param'),
  // registry_id
  registryId?: string(name='registry_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
}

model AllRegistrySysResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ SystemClusterVO ](name='data'),
}

/**
 * Description: 查询注册中心绑定的集群列表
 * Summary: 查询注册中心绑定的集群列表
 */
async function allRegistrySys(request: AllRegistrySysRequest): AllRegistrySysResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allRegistrySysEx(request, headers, runtime);
}

/**
 * Description: 查询注册中心绑定的集群列表
 * Summary: 查询注册中心绑定的集群列表
 */
async function allRegistrySysEx(request: AllRegistrySysRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllRegistrySysResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.registry.sys.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListRegistrySysRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: SystemClusterQueryVO(name='param'),
  // registry_id
  registryId?: string(name='registry_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model ListRegistrySysResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: SystemClusterPagedListVO(name='data'),
}

/**
 * Description: 分页查询注册中心绑定的集群列表
 * Summary: 分页查询注册中心绑定的集群列表
 */
async function listRegistrySys(request: ListRegistrySysRequest): ListRegistrySysResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listRegistrySysEx(request, headers, runtime);
}

/**
 * Description: 分页查询注册中心绑定的集群列表
 * Summary: 分页查询注册中心绑定的集群列表
 */
async function listRegistrySysEx(request: ListRegistrySysRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRegistrySysResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.registry.sys.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateRegistryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: RegistryInfoVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model CreateRegistryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: RegistryInfoVO(name='data'),
}

/**
 * Description: 创建注册中心
 * Summary: 创建注册中心
 */
async function createRegistry(request: CreateRegistryRequest): CreateRegistryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createRegistryEx(request, headers, runtime);
}

/**
 * Description: 创建注册中心
 * Summary: 创建注册中心
 */
async function createRegistryEx(request: CreateRegistryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateRegistryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.registry.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteRegistryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // registry_id
  registryId: string(name='registry_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
}

model DeleteRegistryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description:  通过ID删除注册中心
 * Summary:  通过ID删除注册中心
 */
async function deleteRegistry(request: DeleteRegistryRequest): DeleteRegistryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteRegistryEx(request, headers, runtime);
}

/**
 * Description:  通过ID删除注册中心
 * Summary:  通过ID删除注册中心
 */
async function deleteRegistryEx(request: DeleteRegistryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteRegistryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.registry.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetRegistryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // registry_id
  registryId: string(name='registry_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model GetRegistryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: RegistryInfoVO(name='data'),
}

/**
 * Description: 通过ID查询注册中心
 * Summary: 通过ID查询注册中心
 */
async function getRegistry(request: GetRegistryRequest): GetRegistryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getRegistryEx(request, headers, runtime);
}

/**
 * Description: 通过ID查询注册中心
 * Summary: 通过ID查询注册中心
 */
async function getRegistryEx(request: GetRegistryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetRegistryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.registry.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListRegistryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: RegistryInfoQueryVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model ListRegistryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: RegistryInfoPagedListVO(name='data'),
}

/**
 * Description:  查询注册中心分页列表
 * Summary:  查询注册中心分页列表
 */
async function listRegistry(request: ListRegistryRequest): ListRegistryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listRegistryEx(request, headers, runtime);
}

/**
 * Description:  查询注册中心分页列表
 * Summary:  查询注册中心分页列表
 */
async function listRegistryEx(request: ListRegistryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRegistryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.registry.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateRegistryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: RegistryInfoVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model UpdateRegistryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 更新注册中心
 * Summary: 更新注册中心
 */
async function updateRegistry(request: UpdateRegistryRequest): UpdateRegistryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateRegistryEx(request, headers, runtime);
}

/**
 * Description: 更新注册中心
 * Summary: 更新注册中心
 */
async function updateRegistryEx(request: UpdateRegistryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateRegistryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.registry.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecApiflowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
  // param
  param?: ApiflowTestReqVO(name='param'),
}

model ExecApiflowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiTestRspVO(name='data'),
}

/**
 * Description: 执行流程编排
 * Summary: 执行流程编排
 */
async function execApiflow(request: ExecApiflowRequest): ExecApiflowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execApiflowEx(request, headers, runtime);
}

/**
 * Description: 执行流程编排
 * Summary: 执行流程编排
 */
async function execApiflowEx(request: ExecApiflowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecApiflowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apiflow.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteApiflowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // api_id
  apiId: string(name='api_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model DeleteApiflowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 通过ID删除编排
 * Summary: 通过ID删除编排
 */
async function deleteApiflow(request: DeleteApiflowRequest): DeleteApiflowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteApiflowEx(request, headers, runtime);
}

/**
 * Description: 通过ID删除编排
 * Summary: 通过ID删除编排
 */
async function deleteApiflowEx(request: DeleteApiflowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteApiflowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apiflow.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllApiflowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiflowMachineDefQueryVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model AllApiflowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ ApiflowMachineDefVO ](name='data'),
}

/**
 * Description: 查询全部编排列表
 * Summary: 查询全部编排列表
 */
async function allApiflow(request: AllApiflowRequest): AllApiflowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allApiflowEx(request, headers, runtime);
}

/**
 * Description: 查询全部编排列表
 * Summary: 查询全部编排列表
 */
async function allApiflowEx(request: AllApiflowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllApiflowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apiflow.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListApiflowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiflowMachineDefQueryVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model ListApiflowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiflowMachineDefPagedListVO(name='data'),
}

/**
 * Description: 查询编排分页列表
 * Summary: 查询编排分页列表
 */
async function listApiflow(request: ListApiflowRequest): ListApiflowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listApiflowEx(request, headers, runtime);
}

/**
 * Description: 查询编排分页列表
 * Summary: 查询编排分页列表
 */
async function listApiflowEx(request: ListApiflowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListApiflowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apiflow.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateApiflowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiInfoVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model CreateApiflowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiInfoVO(name='data'),
}

/**
 * Description: 创建API形式的编排
 * Summary: 创建API形式的编排
 */
async function createApiflow(request: CreateApiflowRequest): CreateApiflowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createApiflowEx(request, headers, runtime);
}

/**
 * Description: 创建API形式的编排
 * Summary: 创建API形式的编排
 */
async function createApiflowEx(request: CreateApiflowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateApiflowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apiflow.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetApiflowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // API标识
  apiId: string(name='api_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
  // api_type
  apiType?: string(name='api_type'),
}

model GetApiflowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: ApiInfoVO(name='data'),
}

/**
 * Description: 通过ID查询编排
 * Summary: 通过ID查询编排
 */
async function getApiflow(request: GetApiflowRequest): GetApiflowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getApiflowEx(request, headers, runtime);
}

/**
 * Description: 通过ID查询编排
 * Summary: 通过ID查询编排
 */
async function getApiflowEx(request: GetApiflowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetApiflowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apiflow.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateApiflowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // param
  param?: ApiInfoVO(name='param'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model UpdateApiflowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 更新编排信息
 * Summary: 更新编排信息
 */
async function updateApiflow(request: UpdateApiflowRequest): UpdateApiflowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateApiflowEx(request, headers, runtime);
}

/**
 * Description: 更新编排信息
 * Summary: 更新编排信息
 */
async function updateApiflowEx(request: UpdateApiflowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateApiflowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apiflow.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetApimodelJsonRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // api_model_id
  apiModelId: string(name='api_model_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
  // model_type
  modelType?: string(name='model_type'),
  // 是否使用默认值
  useDefault?: boolean(name='use_default'),
}

model GetApimodelJsonResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: string(name='data'),
  // req_params
  reqParams?: [ ApiParamVO ](name='req_params'),
}

/**
 * Description: 数据模型转json
 * Summary: 数据模型转json
 */
async function getApimodelJson(request: GetApimodelJsonRequest): GetApimodelJsonResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getApimodelJsonEx(request, headers, runtime);
}

/**
 * Description: 数据模型转json
 * Summary: 数据模型转json
 */
async function getApimodelJsonEx(request: GetApimodelJsonRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetApimodelJsonResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apimodel.json.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReplaceApimodelJsonRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // ApiTestParamVO
  param?: [ ApiTestParamVO ](name='param'),
  // json
  json?: string(name='json'),
}

model ReplaceApimodelJsonResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: string(name='data'),
}

/**
 * Description: 替换成apiflow所需的json
 * Summary: 替换成apiflow所需的json
 */
async function replaceApimodelJson(request: ReplaceApimodelJsonRequest): ReplaceApimodelJsonResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return replaceApimodelJsonEx(request, headers, runtime);
}

/**
 * Description: 替换成apiflow所需的json
 * Summary: 替换成apiflow所需的json
 */
async function replaceApimodelJsonEx(request: ReplaceApimodelJsonRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReplaceApimodelJsonResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.apimodel.json.replace', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetGwconfigTripleswitchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model GetGwconfigTripleswitchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 获取triple协议开关
 * Summary: 获取triple协议开关
 */
async function getGwconfigTripleswitch(request: GetGwconfigTripleswitchRequest): GetGwconfigTripleswitchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getGwconfigTripleswitchEx(request, headers, runtime);
}

/**
 * Description: 获取triple协议开关
 * Summary: 获取triple协议开关
 */
async function getGwconfigTripleswitchEx(request: GetGwconfigTripleswitchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetGwconfigTripleswitchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.gwconfig.tripleswitch.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGwconfigTripleswitchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
}

model QueryGwconfigTripleswitchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 专有云triple查询开关
 * Summary: 专有云triple查询开关
 */
async function queryGwconfigTripleswitch(request: QueryGwconfigTripleswitchRequest): QueryGwconfigTripleswitchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGwconfigTripleswitchEx(request, headers, runtime);
}

/**
 * Description: 专有云triple查询开关
 * Summary: 专有云triple查询开关
 */
async function queryGwconfigTripleswitchEx(request: QueryGwconfigTripleswitchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGwconfigTripleswitchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.gwconfig.tripleswitch.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllGwconfigRegionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户id
  tenantId?: string(name='tenant_id'),
  // 工作空间标识
  workspaceId?: string(name='workspace_id'),
}

model AllGwconfigRegionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ string ](name='data'),
}

/**
 * Description: 查询所以region名称
 * Summary: 查询所以region名称
 */
async function allGwconfigRegion(request: AllGwconfigRegionRequest): AllGwconfigRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allGwconfigRegionEx(request, headers, runtime);
}

/**
 * Description: 查询所以region名称
 * Summary: 查询所以region名称
 */
async function allGwconfigRegionEx(request: AllGwconfigRegionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllGwconfigRegionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.apigateway.gwconfig.region.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

