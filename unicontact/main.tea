import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.3',
    _prod_code = 'UNICONTACT',
    _prod_channel = 'default'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 场景构建结果体
model StrategyUploadResult {
  // 元数据id
  ruleMetaId: long(name='rule_meta_id', example=''),
  // 场景id
  sceneId: long(name='scene_id', example=''),
  // 租户场景id
  tenantSceneId: long(name='tenant_scene_id', example=''),
  // 圈客规则id
  decisionRuleId: long(name='decision_rule_id', example=''),
  // 场景策略id
  sceneStrategyId: long(name='scene_strategy_id', example=''),
}

model CallbackSmsStatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // TEXT_SMS_REPORT
  type: string(name='type'),
  // 手机号
  phoneNumber: string(name='phone_number'),
  // 发送时间
  sendTime: string(name='send_time'),
  // 状态报告时间。
  reportTime: string(name='report_time'),
  // 是否接收成功。取值：true：接收成功false：接收失败
  success: boolean(name='success'),
  // 状态报告编码。发送成功情况下为“DELIVERED”
  errCode: string(name='err_code'),
  // 状态报告说明。发送成功情况下为“用户接收成功”
  errMsg: string(name='err_msg'),
  // 短信长度。
  smsSize: string(name='sms_size'),
  // 发送回执ID，即发送流水号。
  bizId: string(name='biz_id'),
  // 业务扩展字段，回执时透传，JSON格式
  bizProperties: string(name='biz_properties'),
  // 发送卡片短信时，文本短信状态报告中才会有该字段，且取值为CARD_SMS，发送纯文本短信时，状态报告中没有该字段
  smsType?: string(name='sms_type'),
  // 运营商
  serviceProvider: string(name='service_provider'),
  // 手机号归属地
  city: string(name='city'),
}

model CallbackSmsStatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 短信状态回执
 * Summary: 短信状态回执
 */
async function callbackSmsStatus(request: CallbackSmsStatusRequest): CallbackSmsStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return callbackSmsStatusEx(request, headers, runtime);
}

/**
 * Description: 短信状态回执
 * Summary: 短信状态回执
 */
async function callbackSmsStatusEx(request: CallbackSmsStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CallbackSmsStatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.unicontact.sms.status.callback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CallbackSmsUpRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 回执类型
  type: string(name='type'),
  // 手机号码
  phoneNumber: string(name='phone_number'),
  // 发送时间
  sendTime: string(name='send_time'),
  // 发送内容
  content: string(name='content'),
  // 签名
  signName: string(name='sign_name'),
  // 由通信平台提供的短信发送账号ak
  appKey: string(name='app_key'),
  // 上行短信扩展号码
  destCode: string(name='dest_code'),
  // 序列
  sequenceId: long(name='sequence_id'),
}

model CallbackSmsUpResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 短信上行回执
 * Summary: 短信上行回执
 */
async function callbackSmsUp(request: CallbackSmsUpRequest): CallbackSmsUpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return callbackSmsUpEx(request, headers, runtime);
}

/**
 * Description: 短信上行回执
 * Summary: 短信上行回执
 */
async function callbackSmsUpEx(request: CallbackSmsUpRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CallbackSmsUpResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.unicontact.sms.up.callback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CallbackRobotcallRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外呼号码，支持密文
  // 
  customerKey: string(name='customer_key'),
  // 当前呼叫次数 Integer
  // 
  currentCallTimes: long(name='current_call_times'),
  // 号码的模版类型
  // 
  keyTemplate: string(name='key_template'),
  // 导入号码时返回的批次号
  // 
  batchId: string(name='batch_id'),
  // 外呼类型 建议按照如下约定给到 2001:批量-预测外呼 ...
  // 
  callType: long(name='call_type'),
  // 用户自定义标签
  // 
  tag?: string(name='tag'),
  // 外呼呼叫实例id
  // 
  callId: string(name='call_id'),
  // 外呼任务编号
  // 
  taskId: long(name='task_id'),
  // 外呼任务名称
  // 
  taskName: string(name='task_name'),
  // 外呼的话术模板ID，可以为空
  // 
  templateId?: long(name='template_id'),
  // 外呼状态编码
  // 
  statusCode: long(name='status_code'),
  // 外呼状态编码对应描述
  // 
  statusDescription: string(name='status_description'),
  // 转人工状态编码
  // 
  transferStatusCode: string(name='transfer_status_code'),
  // 转人工状态编码对应描述
  // 
  transferStatus: string(name='transfer_status'),
  // 分配坐席ID,可以为空
  // 
  agentId?: long(name='agent_id'),
  // 建议填写坐席在贵司业务系统唯一标识，用于查询对应agent...
  // 
  agentTag?: string(name='agent_tag'),
  // 坐席分机号，可以为空
  // 
  agentExtension?: string(name='agent_extension'),
  // 导入时间，格式:2019-01-09 14:14:19
  // 
  importTime: string(name='import_time'),
  // 开始通话时间，格式：2019-01-09 14:14:19
  // 
  callBeginTime: string(name='call_begin_time'),
  // 振铃时长,单位毫秒
  // 
  ringTime: long(name='ring_time'),
  // 接通时间
  // 
  answerTime?: string(name='answer_time'),
  // 通话时长，单位：大于1分钟，显示分钟秒，小于1分钟，显示秒
  // 
  speakingTime: string(name='speaking_time'),
  // 通话时长，单位：秒
  // 
  speakingDuration: long(name='speaking_duration'),
  // 通话挂断时间
  // 
  hangupTime: string(name='hangup_time'),
  // 对话轮次
  // 
  speakingTurns: long(name='speaking_turns'),
  // 坐席通话时长，单位：大于1分钟，显示分钟秒，小于1分钟，显示秒
  // 
  agentSpeakingTime: string(name='agent_speaking_time'),
  // 坐席通话时长，单位：秒
  // 
  agentSpeakingDuration: long(name='agent_speaking_duration'),
  // 意向标签
  // 
  intentTag: string(name='intent_tag'),
  // 意向说明
  // 
  intentDescription: string(name='intent_description'),
  // 个性标签
  // 
  individualTag?: string(name='individual_tag'),
  // 回复关键词
  // 
  keywords?: string(name='keywords'),
  // 挂机方式
  // 1
  hungupType: long(name='hungup_type'),
  // 挂机短信，1:发送，2:不发送
  // 
  sms: long(name='sms'),
  // 对话录音,url
  // 
  chatRecord?: string(name='chat_record'),
  // 对话记录
  // 
  chats?: string(name='chats'),
  // 0:不添加，1:添加
  // 
  addWx?: long(name='add_wx'),
  // 加微进度可选值：已申请、加微成功
  // 
  addWxStatus?: string(name='add_wx_status'),
  // 是否接通重呼 0正常外呼，1接通重呼
  // 
  answerRecall: long(name='answer_recall'),
  // 导入号码时的参数值
  properties?: string(name='properties'),
  // 导入号码时的业务参数值
  // 
  bizProperties?: string(name='biz_properties'),
  // 拦截原因 可选值：黑名单拦截，灰名单拦截，异常号码拦截
  // 
  interceptReason?: string(name='intercept_reason'),
  // 回调冗余字段
  // 
  extInfo?: string(name='ext_info'),
}

model CallbackRobotcallResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 外呼回执
 * Summary: 外呼回执
 */
async function callbackRobotcall(request: CallbackRobotcallRequest): CallbackRobotcallResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return callbackRobotcallEx(request, headers, runtime);
}

/**
 * Description: 外呼回执
 * Summary: 外呼回执
 */
async function callbackRobotcallEx(request: CallbackRobotcallRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CallbackRobotcallResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.unicontact.robotcall.callback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportInitUploadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需要刷新的key
  key: string(name='key'),
  // 需要刷新的value，可能是json格式
  value: string(name='value'),
}

model ImportInitUploadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求结果
  success?: boolean(name='success'),
  // 场景结构体
  uploadResult?: StrategyUploadResult(name='upload_result'),
}

/**
 * Description: 初始化数据上传or更新
 * Summary: 初始化数据上传or更新
 */
async function importInitUpload(request: ImportInitUploadRequest): ImportInitUploadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importInitUploadEx(request, headers, runtime);
}

/**
 * Description: 初始化数据上传or更新
 * Summary: 初始化数据上传or更新
 */
async function importInitUploadEx(request: ImportInitUploadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportInitUploadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.unicontact.init.upload.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReplaceRobotcallPhoneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求ID
  reqId: string(name='req_id'),
  // 当前时间戳毫秒值
  timestamp: long(name='timestamp'),
  // 待解密号码
  aesphone: string(name='aesphone'),
}

model ReplaceRobotcallPhoneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 解密后的手机号
  data?: string(name='data'),
}

/**
 * Description: 外呼手机号解密
 * Summary: 外呼手机号解密
 */
async function replaceRobotcallPhone(request: ReplaceRobotcallPhoneRequest): ReplaceRobotcallPhoneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return replaceRobotcallPhoneEx(request, headers, runtime);
}

/**
 * Description: 外呼手机号解密
 * Summary: 外呼手机号解密
 */
async function replaceRobotcallPhoneEx(request: ReplaceRobotcallPhoneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReplaceRobotcallPhoneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.unicontact.robotcall.phone.replace', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

