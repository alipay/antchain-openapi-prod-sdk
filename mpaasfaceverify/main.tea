import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.1.5',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

model InitFaceauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户请求的唯一标志，该标识作为对账的关键信息，商户要保证其唯一性
  bizId: string(name='biz_id'),
  // 预留扩展业务参数
  externParam?: string(name='extern_param'),
  // 用户身份信息
  identityParam: string(name='identity_param'),
  // metainfo环境参数
  metainfo?: string(name='metainfo'),
  // 操作类型
  // 
  operationType?: string(name='operation_type'),
  // 比对源图片
  // 
  refImg?: string(name='ref_img'),
}

model InitFaceauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 预留扩展结果
  externInfo?: string(name='extern_info'),
  // 产品结果明细，不影响决策
  resultCodeSub?: string(name='result_code_sub'),
  // result_code_sub对应的文案
  // 
  resultMsgSub?: string(name='result_msg_sub'),
  // 实人认证id
  zimId?: string(name='zim_id'),
}

/**
 * Description: 调用“实人认证初始化”接口初始化认证服务并得到zimId，zimId用于唯一标识一次认证请求，后续通过zimId可以查询本次实人认证的结果
 * Summary: 实人认证初始化
 */
async function initFaceauth(request: InitFaceauthRequest): InitFaceauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initFaceauthEx(request, headers, runtime);
}

/**
 * Description: 调用“实人认证初始化”接口初始化认证服务并得到zimId，zimId用于唯一标识一次认证请求，后续通过zimId可以查询本次实人认证的结果
 * Summary: 实人认证初始化
 */
async function initFaceauthEx(request: InitFaceauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitFaceauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antfin.mpaasfaceverify.faceauth.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryFaceauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务单据号，用于核对和排查
  bizId: string(name='biz_id'),
  // 预留扩展业务参数
  externParam?: string(name='extern_param'),
  // zimId，用于查询认证结果
  zimId: string(name='zim_id'),
}

model QueryFaceauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 预留扩展结果
  externInfo?: string(name='extern_info'),
  // 产品结果明细，不影响决策
  resultCodeSub?: string(name='result_code_sub'),
  // result_code_sub对应的文案
  resultMsgSub?: string(name='result_msg_sub'),
}

/**
 * Description: 调用“实人认证结果查询”接口可以通过zimId查询当次认证的结果
 * Summary: 实人认证查询
 */
async function queryFaceauth(request: QueryFaceauthRequest): QueryFaceauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFaceauthEx(request, headers, runtime);
}

/**
 * Description: 调用“实人认证结果查询”接口可以通过zimId查询当次认证的结果
 * Summary: 实人认证查询
 */
async function queryFaceauthEx(request: QueryFaceauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFaceauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antfin.mpaasfaceverify.faceauth.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitFaceplusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务唯一单号
  bizId: string(name='biz_id'),
  // 身份，需要公钥加密
  identityParam: string(name='identity_param'),
  // 客户端采集
  metainfo: string(name='metainfo'),
  // 外部参数
  externParam?: string(name='extern_param'),
  // 操作类型
  operationType?: string(name='operation_type'),
  // 比对源图片
  refImg?: string(name='ref_img'),
}

model InitFaceplusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 认证会话唯一标识
  zimId?: string(name='zim_id'),
  // 结果码
  resultCodeSub?: string(name='result_code_sub'),
  // 结果信息
  // 
  resultMsgSub?: string(name='result_msg_sub'),
  // 外部参数
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 人脸双因子认证服务端初始化
 * Summary: 人脸双因子认证服务端初始化
 */
async function initFaceplus(request: InitFaceplusRequest): InitFaceplusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initFaceplusEx(request, headers, runtime);
}

/**
 * Description: 人脸双因子认证服务端初始化
 * Summary: 人脸双因子认证服务端初始化
 */
async function initFaceplusEx(request: InitFaceplusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitFaceplusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antfin.mpaasfaceverify.faceplus.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryFaceplusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 认证会话唯一标识
  zimId: string(name='zim_id'),
  // 唯一单号
  bizId: string(name='biz_id'),
  // 外部参数
  // 
  externParam?: string(name='extern_param'),
}

model QueryFaceplusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果码
  resultCodeSub?: string(name='result_code_sub'),
  // 结果信息
  resultMsgSub?: string(name='result_msg_sub'),
  // 外部参数
  // 
  externInfo?: string(name='extern_info'),
}

/**
 * Description: 人脸双因子认证服务端查询
 * Summary: 人脸双因子认证服务端查询
 */
async function queryFaceplus(request: QueryFaceplusRequest): QueryFaceplusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFaceplusEx(request, headers, runtime);
}

/**
 * Description: 人脸双因子认证服务端查询
 * Summary: 人脸双因子认证服务端查询
 */
async function queryFaceplusEx(request: QueryFaceplusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFaceplusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antfin.mpaasfaceverify.faceplus.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryFaceauthFileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // zoloz认证会话主键
  zimId: string(name='zim_id'),
  // 预留扩展业务参数
  externParam?: string(name='extern_param'),
}

model QueryFaceauthFileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 预留扩展结果
  externInfo?: string(name='extern_info'),
  // 结果码
  resultCodeSub?: string(name='result_code_sub'),
  // result_code_sub对应的文案
  resultMsgSub?: string(name='result_msg_sub'),
}

/**
 * Description: zoloz提供具备权限控制的人脸图片获取接口，提供于支付宝会员等上游，控制数据风险
 * Summary: 获取认证资料
 */
async function queryFaceauthFile(request: QueryFaceauthFileRequest): QueryFaceauthFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFaceauthFileEx(request, headers, runtime);
}

/**
 * Description: zoloz提供具备权限控制的人脸图片获取接口，提供于支付宝会员等上游，控制数据风险
 * Summary: 获取认证资料
 */
async function queryFaceauthFileEx(request: QueryFaceauthFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFaceauthFileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antfin.mpaasfaceverify.faceauth.file.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CertifyServermodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户请求的唯一标志，该标识作为对账的关键信息，商户要保证其唯一性
  bizId: string(name='biz_id'),
  // 预留扩展业务参数
  externParam: string(name='extern_param'),
  // 用户身份信息
  identityParam: string(name='identity_param'),
  // 待认证图片，默认base64格式
  authImg: string(name='auth_img'),
  // 待认证图片类型，不传默认为base64后的图片，可以扩展Blob/video等类型
  authImgType?: string(name='auth_img_type'),
  // 操作类型，operation_type为custom时表示自定义模式，需要用户上传比对源图片
  operationType?: string(name='operation_type'),
  // 比对源图片
  refImg?: string(name='ref_img'),
}

model CertifyServermodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 预留扩展结果
  externInfo?: string(name='extern_info'),
  // 产品结果明细，不影响决策
  resultCodeSub?: string(name='result_code_sub'),
  // result_code_sub对应的文案
  resultMsgSub?: string(name='result_msg_sub'),
}

/**
 * Description: 调用”实人认证核验源服务“接口，可获取权威源的人脸比对结果，认证链路不依赖客户端
 * Summary: 实人认证核验源服务
 */
async function certifyServermode(request: CertifyServermodeRequest): CertifyServermodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return certifyServermodeEx(request, headers, runtime);
}

/**
 * Description: 调用”实人认证核验源服务“接口，可获取权威源的人脸比对结果，认证链路不依赖客户端
 * Summary: 实人认证核验源服务
 */
async function certifyServermodeEx(request: CertifyServermodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CertifyServermodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antfin.mpaasfaceverify.servermode.certify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

