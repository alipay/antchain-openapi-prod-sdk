import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.1',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 收集信息
model CollectContent {
  // 链上设备Id
  // 
  chainDeviceId: string(name='chain_device_id', example='12321321'),
  // 收集的内容
  // 
  content: string(name='content', example='{"name","1"}'),
  // 对内容的签名
  // 
  signature: string(name='signature', example='21321@d123dasa'),
  // 服务端发送的扩展数据（非可信设备直接产生的数据）
  extraData?: string(name='extra_data', example='{"extraKey":"extraValue"} '),
}

// 收集数据(免签名)
model CollectContentNoSign {
  // 链上设备Id
  // 
  chainDeviceId: string(name='chain_device_id', example='12321321'),
  // 收集内容
  content: string(name='content', example='{"name","1"} '),
  // 服务端发送的扩展数据（非可信设备直接产生的数据）
  extraData?: string(name='extra_data', example='{"extraKey":"extraValue"} '),
}

// 收集数据返回的上链结果
model SendCollectorResult {
  // 数据内容content的上链交易哈希
  txHash: string(name='tx_hash', example='2c952456827828cdedad06afccef75a9f2c2840cbb6b0b659f653da1e5916cb2'),
}

// 收集标签数据
model CollectLabelContent {
  // 链上设备ID
  chainDeviceId: string(name='chain_device_id', example='12321321'),
  // 1.设备端上报数据内容 2.与设备上报的数据一致，服务...
  // 
  content: string(name='content', example='{"name","1"}'),
  // content的签名 与设备上报的签名保持一致，服务端不可修改
  signature: string(name='signature', example='xxxxx'),
  // 未经设备签名的附加数据JSON String 注意：如果 content 批量解析 ，extraData也会批量复制融入解析后的content
  extraData?: string(name='extra_data', example='xxxx'),
}

model CreateDeviceBydeviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备ID
  deviceId: string(name='device_id'),
  // 项目编码 -对应acs iot管控后台项目code
  projectCode: string(name='project_code'),
  // 设备类型编码-对应acs iot管控后台设备类型code
  classCode: string(name='class_code'),
  // 注册内容
  content: string(name='content'),
  // 设备名称
  deviceName: string(name='device_name'),
  // 设备单价 单位：分
  // 
  initialPrice?: long(name='initial_price'),
  // 出厂时间
  factoryTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='factory_time'),
  // 投放时间
  releaseTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='release_time'),
}

model CreateDeviceBydeviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 链上唯一身份ID
  chainDeviceDid?: string(name='chain_device_did'),
  // 设备激活文本-设备直连上链方式使用
  // 
  activeData?: string(name='active_data'),
}

/**
 * Description: biot设备注册-创建设备链账号
 * Summary: biot设备注册-创建设备链账号
 */
async function createDeviceBydevice(request: CreateDeviceBydeviceRequest): CreateDeviceBydeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDeviceBydeviceEx(request, headers, runtime);
}

/**
 * Description: biot设备注册-创建设备链账号
 * Summary: biot设备注册-创建设备链账号
 */
async function createDeviceBydeviceEx(request: CreateDeviceBydeviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDeviceBydeviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'acs.iot.device.bydevice.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDeviceBychainidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备ID
  deviceId: string(name='device_id'),
  // 项目编码-对应acs iot管控后台项目code
  projectCode: string(name='project_code'),
  // 设备类型编码-对应acs iot管控后台设备类型code
  classCode: string(name='class_code'),
  // 设备注册内容
  content: string(name='content'),
  // 设备注册内容签名
  signature: string(name='signature'),
  // 设备名称
  deviceName: string(name='device_name'),
  // 设备单价 单位：分
  // 
  initialPrice?: long(name='initial_price'),
  // 设备出厂时间
  factoryTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='factory_time'),
  // 设备投放时间
  releaseTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='release_time'),
}

model CreateDeviceBychainidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 设备链上ID
  // 
  chainDeviceId?: string(name='chain_device_id'),
}

/**
 * Description: biot设备注册-通过项目链账号上链
 * Summary: biot设备注册-通过项目链账号上链
 */
async function createDeviceBychainid(request: CreateDeviceBychainidRequest): CreateDeviceBychainidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDeviceBychainidEx(request, headers, runtime);
}

/**
 * Description: biot设备注册-通过项目链账号上链
 * Summary: biot设备注册-通过项目链账号上链
 */
async function createDeviceBychainidEx(request: CreateDeviceBychainidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDeviceBychainidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'acs.iot.device.bychainid.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendCollectorBychainidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 设备链id
  chainDeviceId: string(name='chain_device_id'),
  // [{"name","1"},{"name","1"}]
  collectContentList: [ CollectContent ](name='collect_content_list'),
  // 随机数，防重放
  // 
  nonce: string(name='nonce'),
}

model SendCollectorBychainidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 收集数据返回的上链结果
  resultList?: [ SendCollectorResult ](name='result_list'),
}

/**
 * Description: biot 私有化 业务数据上报
 * Summary: biot 私有化 业务数据上报
 */
async function sendCollectorBychainid(request: SendCollectorBychainidRequest): SendCollectorBychainidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendCollectorBychainidEx(request, headers, runtime);
}

/**
 * Description: biot 私有化 业务数据上报
 * Summary: biot 私有化 业务数据上报
 */
async function sendCollectorBychainidEx(request: SendCollectorBychainidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendCollectorBychainidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'acs.iot.collector.bychainid.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

