import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.8.6',
    _prod_code = 'NFTX',
    _prod_channel = 'undefined'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// nft发行的文件
model File {
  // 原文件的可访问路径
  originalFilePath: string(name='original_file_path', example='原文件的可访问路径'),
  // 缩略图的可访问路径
  miniImagePath: string(name='mini_image_path', example='缩略图的可访问路径'),
  // 文件名称
  name: string(name='name', example='文件名称'),
  //     IMAGE("IMAGE", "图片"),
  //     VIDEO("VIDEO", "视频"),
  //     AUDIO("AUDIO","音频"),
  //     THREE_DIMENSIONS("THREE_DIMENSIONS","3D模型")
  type: string(name='type', example='文件类型'),
}

// 资源图片
model CToMResourceImg {
  // 预览图
  thumbnailUrl: string(name='thumbnail_url', example='预览图'),
  // 高清图
  highDefinitionUrl: string(name='high_definition_url', example='高清图'),
  // key
  key: string(name='key', example='key'),
}

// 用户资产
model UserAsset {
  // NFT商品的商品编码
  skuId: long(name='sku_id', example='1234'),
  // NFT资产的唯一编码
  nftId: string(name='nft_id', example='AC1234#001/150'),
  // NFT商品的名称
  skuName: string(name='sku_name', example='敦煌飞天九色鹿'),
  // NFT的创作者名称
  authorName: string(name='author_name', example='敦煌'),
  // NFT的发行方名称
  issuerName: string(name='issuer_name', example='支付宝'),
  // 缩略图url，带5分钟鉴权
  miniImagePath: string(name='mini_image_path', example='http://www.abc.com'),
}

model ImportNftCreateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 对端自己的项目id；用作幂等字段
  projectId: string(name='project_id'),
  // NFT艺术品的名称
  skuName: string(name='sku_name'),
  // IMAGE("IMAGE","图片"),
  // VIDEO("VIDEO","视频"),
  // ;
  skuType: string(name='sku_type'),
  // 发行数量
  quantity: long(name='quantity'),
  // 艺术品作者
  author: string(name='author'),
  // 艺术品拥有者
  owner: string(name='owner'),
  // 艺术品创作时间
  creationTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='creation_time'),
  // 用于标识NFT资产来自特定的产品，用作特殊的交互跳转需求，非必填字段
  bizType?: string(name='biz_type'),
  // nft简介信息
  description: string(name='description'),
  // 跳转链接
  jumpUrl?: string(name='jump_url'),
  // nft发行的艺术品文件
  files: [ File ](name='files'),
}

model ImportNftCreateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // NFT发行成功的商品id
  skuId?: long(name='sku_id'),
}

/**
 * Description: B端商户的NFT发行以及铸造
 * Summary: B端商户的NFT铸造 (废弃)
 */
async function importNftCreate(request: ImportNftCreateRequest): ImportNftCreateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importNftCreateEx(request, headers, runtime);
}

/**
 * Description: B端商户的NFT发行以及铸造
 * Summary: B端商户的NFT铸造 (废弃)
 */
async function importNftCreateEx(request: ImportNftCreateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportNftCreateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftx.nft.create.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryNftCreateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 对端自己的项目id；NFT发行时用作幂等字段
  projectId: string(name='project_id'),
  // NFT发行成功的商品id，传入sku_id时以此为准做查询
  skuId?: long(name='sku_id'),
}

model QueryNftCreateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // NFT发行成功的商品id
  skuId?: long(name='sku_id'),
  // INIT("INIT", "初始化"),
  // PROCESSING("PROCESSING", "资产创建中"),
  // FINISH("FINISH", "资产初始化完毕"),
  // ;
  skuStatus?: string(name='sku_status'),
  // NFT商品的名称
  skuName?: string(name='sku_name'),
  // 作者的名称
  authorName?: string(name='author_name'),
  // 发行方的名称
  issuerName?: string(name='issuer_name'),
  // 缩略图展示路径
  miniImagePath?: string(name='mini_image_path'),
}

/**
 * Description: B端商户的NFT发行后查询，包含状态、NFT商品的概要信息
 * Summary: B端商户的NFT发行铸造后查询
 */
async function queryNftCreate(request: QueryNftCreateRequest): QueryNftCreateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryNftCreateEx(request, headers, runtime);
}

/**
 * Description: B端商户的NFT发行后查询，包含状态、NFT商品的概要信息
 * Summary: B端商户的NFT发行铸造后查询
 */
async function queryNftCreateEx(request: QueryNftCreateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryNftCreateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftx.nft.create.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecNftTransferRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // NFT发行成功的商品id
  skuId: long(name='sku_id'),
  // C端用户的支付宝uid
  toIdNo: string(name='to_id_no'),
  // C端用户的支付宝账号类型
  toIdType: string(name='to_id_type'),
  // 用户在商户购买的订单号，用作幂等字段
  orderNo: string(name='order_no'),
  // 用户购买订单的时间
  orderTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='order_time'),
  // 用户购买订单的价格，可以为0；用户的购买历史记录会展示
  priceCent?: long(name='price_cent'),
}

model ExecNftTransferResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // NFT发行成功的商品id
  skuId?: long(name='sku_id'),
  // NFT发行成功的商品，其中转给C端用户的特定一个token
  nftId?: string(name='nft_id'),
}

/**
 * Description: 按商品编码（skuid）B2C发放NFT
 * Summary: 按商品编码B2C发放NFT
 */
async function execNftTransfer(request: ExecNftTransferRequest): ExecNftTransferResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execNftTransferEx(request, headers, runtime);
}

/**
 * Description: 按商品编码（skuid）B2C发放NFT
 * Summary: 按商品编码B2C发放NFT
 */
async function execNftTransferEx(request: ExecNftTransferRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecNftTransferResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftx.nft.transfer.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendNftTransferRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // NFT租户下唯一的项目编号
  projectId: string(name='project_id'),
  // 支付宝2088开头账号
  toIdNo: string(name='to_id_no'),
  // 账号类型，当前只支持支付宝账号
  toIdType: string(name='to_id_type'),
  // 交易NFT时租户的唯一订单号
  orderNo: string(name='order_no'),
  // 用户购买订单时间
  orderTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='order_time'),
  // 购买NFT的金额，单位分
  priceCent?: long(name='price_cent'),
}

model SendNftTransferResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // NFT商品编码
  skuId?: string(name='sku_id'),
  // 发放的NFT编码
  nftId?: string(name='nft_id'),
}

/**
 * Description: 按项目表编码B2C发放NFT
 * Summary: 按项目表编码B2C发放NFT
 */
async function sendNftTransfer(request: SendNftTransferRequest): SendNftTransferResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendNftTransferEx(request, headers, runtime);
}

/**
 * Description: 按项目表编码B2C发放NFT
 * Summary: 按项目表编码B2C发放NFT
 */
async function sendNftTransferEx(request: SendNftTransferRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendNftTransferResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftx.nft.transfer.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryNftCustomerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户支付宝2088账号编码，16位
  idNo: string(name='id_no'),
  // 用户的账户类型
  idType: string(name='id_type'),
  // NFT资产唯一编码
  nftId: string(name='nft_id'),
}

model QueryNftCustomerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // NFT商品的商品编码
  skuId?: long(name='sku_id'),
  // NFT资产的唯一编码
  nftId?: string(name='nft_id'),
  // NFT商品的名称
  skuName?: string(name='sku_name'),
  // NFT的创作者名称
  authorName?: string(name='author_name'),
  // NFT的发行方名称
  issuerName?: string(name='issuer_name'),
  // 缩略图url，带5分钟鉴权
  miniImagePath?: string(name='mini_image_path'),
}

/**
 * Description: 根据nftId查询客户NFT资产
 * Summary: 根据nftId查询客户NFT资产
 */
async function queryNftCustomer(request: QueryNftCustomerRequest): QueryNftCustomerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryNftCustomerEx(request, headers, runtime);
}

/**
 * Description: 根据nftId查询客户NFT资产
 * Summary: 根据nftId查询客户NFT资产
 */
async function queryNftCustomerEx(request: QueryNftCustomerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryNftCustomerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftx.nft.customer.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryNftOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 支付宝的2088账号
  idNo: string(name='id_no'),
  // 支付账号类型，该版本仅支持支付宝账号
  idType: string(name='id_type'),
  // 租户的唯一映射订单号
  orderNo: string(name='order_no'),
}

model QueryNftOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // NFT商品编码
  skuId?: long(name='sku_id'),
  // NFT资产的唯一id
  nftId?: string(name='nft_id'),
}

/**
 * Description: 根据外部订单号查询该订单的NFT流水记录
 * Summary: 根据外部订单号查询该订单的NFT流水记录
 */
async function queryNftOrder(request: QueryNftOrderRequest): QueryNftOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryNftOrderEx(request, headers, runtime);
}

/**
 * Description: 根据外部订单号查询该订单的NFT流水记录
 * Summary: 根据外部订单号查询该订单的NFT流水记录
 */
async function queryNftOrderEx(request: QueryNftOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryNftOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftx.nft.order.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateNftIssuerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户发行NFT的唯一编号
  projectId: string(name='project_id'),
  // NFT商品的名称
  skuName: string(name='sku_name'),
  // NFT资产类型, 含IMAGE、VIDEO、FILE、AUDIO、THREE_DIMENSIONS等
  skuType: string(name='sku_type'),
  // 铸造数量，100起
  quantity: long(name='quantity'),
  // NFT创作者
  author: string(name='author'),
  // 发行方名称
  issuerName: string(name='issuer_name'),
  // NFT商品的描述
  skuDescrption: string(name='sku_descrption'),
  // 跳转链接
  jumpUrl?: string(name='jump_url'),
  // 业务类型：PAY_CODE，DEFAULT，EUROPEAN_CUP，TAOBAO_AUCTION，NFT_CUSTOMIZE（NFT定制）
  bizType?: string(name='biz_type'),
  // 素材文件结构
  files: [ File ](name='files'),
}

model CreateNftIssuerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发行任务编号
  taskId?: string(name='task_id'),
  // 业务方发行NFT对应的唯一项目编号
  projectId?: string(name='project_id'),
}

/**
 * Description: NFT发行审核&铸造
 * Summary: NFT发行审核&铸造
 */
async function createNftIssuer(request: CreateNftIssuerRequest): CreateNftIssuerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createNftIssuerEx(request, headers, runtime);
}

/**
 * Description: NFT发行审核&铸造
 * Summary: NFT发行审核&铸造
 */
async function createNftIssuerEx(request: CreateNftIssuerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateNftIssuerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftx.nft.issuer.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PagequeryNftCustomerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 当前页码
  page: long(name='page'),
  // 页长
  pageSize: long(name='page_size'),
  // 用户手机号或支付宝UID
  idNo: string(name='id_no'),
  // 用户ID类型，和id_no对应
  idType: string(name='id_type'),
}

model PagequeryNftCustomerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 页码，查询时传入
  page?: long(name='page'),
  // 页长，查询时传入
  pageSize?: long(name='page_size'),
  // 列表总数
  totalCount?: long(name='total_count'),
  // fans uid
  uid?: string(name='uid'),
  // 用户资产列表
  assetList?: [ UserAsset ](name='asset_list'),
}

/**
 * Description: B端用户资产列表查询
 * Summary: 用户资产列表查询
 */
async function pagequeryNftCustomer(request: PagequeryNftCustomerRequest): PagequeryNftCustomerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pagequeryNftCustomerEx(request, headers, runtime);
}

/**
 * Description: B端用户资产列表查询
 * Summary: 用户资产列表查询
 */
async function pagequeryNftCustomerEx(request: PagequeryNftCustomerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PagequeryNftCustomerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftx.nft.customer.pagequery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateNftPublishRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户发行NFT的唯一编号
  projectId: string(name='project_id'),
  // NFT商品的名称
  skuName: string(name='sku_name'),
  // NFT资产类型, 含IMAGE(图片)、VIDEO(视频)、AUDIO(音频)、THREE_DIMENSIONS(3D模型)等
  skuType: string(name='sku_type'),
  // 铸造数量，至少为1
  quantity: long(name='quantity'),
  // NFT创作者。中文或手机号和author_type对应
  author: string(name='author'),
  // 创作者类型。手机号或中文类型，和author对应
  authorType: string(name='author_type'),
  // 发行方名称
  issuerName: string(name='issuer_name'),
  // NFT商品的描述
  skuDescrption: string(name='sku_descrption'),
  // 监制方。中文名或手机号，和producer_type对应
  producer: string(name='producer'),
  // 监制方类型。手机号或中文类型，和producer对应
  producerType: string(name='producer_type'),
  // 跳转链接
  jumpUrl?: string(name='jump_url'),
  // 业务类型：PAY_CODE，DEFAULT，EUROPEAN_CUP，TAOBAO_AUCTION，
  bizType?: string(name='biz_type'),
  // 渠道租户
  channelTenant: string(name='channel_tenant'),
  // 素材文件结构
  files: [ File ](name='files'),
  // 备注信息
  memo?: string(name='memo'),
}

model CreateNftPublishResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发行任务编号
  taskId?: string(name='task_id'),
  // 业务方发行NFT对应的唯一项目编号
  projectId?: string(name='project_id'),
}

/**
 * Description: NFT铸造, 带监制方和渠道租户
 * Summary: NFT铸造, 带监制方和渠道租户
 */
async function createNftPublish(request: CreateNftPublishRequest): CreateNftPublishResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createNftPublishEx(request, headers, runtime);
}

/**
 * Description: NFT铸造, 带监制方和渠道租户
 * Summary: NFT铸造, 带监制方和渠道租户
 */
async function createNftPublishEx(request: CreateNftPublishRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateNftPublishResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftx.nft.publish.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RunNftTransferRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // NFT租户下唯一的项目编号
  projectId: string(name='project_id'),
  // 支付宝2088开头账号
  toIdNo: string(name='to_id_no'),
  // 账号类型，当前只支持支付宝账号
  toIdType: string(name='to_id_type'),
  // 交易NFT时租户的唯一订单号
  orderNo: string(name='order_no'),
  // 购买NFT的金额，单位分
  priceCent?: long(name='price_cent'),
  // 渠道租户
  channelTenant: string(name='channel_tenant'),
}

model RunNftTransferResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // NFT商品编码
  skuId?: string(name='sku_id'),
  // 发放的NFT编码
  nftId?: string(name='nft_id'),
}

/**
 * Description: 按项目表编码B2C发放NFT,带渠道租户
 * Summary: 按项目表编码B2C发放NFT, (废弃)
 */
async function runNftTransfer(request: RunNftTransferRequest): RunNftTransferResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return runNftTransferEx(request, headers, runtime);
}

/**
 * Description: 按项目表编码B2C发放NFT,带渠道租户
 * Summary: 按项目表编码B2C发放NFT, (废弃)
 */
async function runNftTransferEx(request: RunNftTransferRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RunNftTransferResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftx.nft.transfer.run', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyNftTransferRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // NFT发行成功的商品id
  skuId: long(name='sku_id'),
  // C端用户的支付宝uid
  toIdNo: string(name='to_id_no'),
  // 仅支持 支付宝账号类型
  toIdType: string(name='to_id_type'),
  // 用户在商户购买的订单号，用作幂等字段
  orderNo: string(name='order_no'),
  // 用户购买订单的价格，单位为分，可以为0；
  priceCent?: long(name='price_cent'),
  // 渠道租户
  channelTenant: string(name='channel_tenant'),
}

model ApplyNftTransferResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // NFT发行成功的商品id
  skuId?: long(name='sku_id'),
  // NFT发行成功的商品，其中转给C端用户的特定一个token
  nftId?: string(name='nft_id'),
  // fans uid
  uid?: string(name='uid'),
}

/**
 * Description: 按商品编码B2C发放NFT 带渠道租户
 * Summary: 按商品编码B2C发放NFT 带渠道租户
 */
async function applyNftTransfer(request: ApplyNftTransferRequest): ApplyNftTransferResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyNftTransferEx(request, headers, runtime);
}

/**
 * Description: 按商品编码B2C发放NFT 带渠道租户
 * Summary: 按商品编码B2C发放NFT 带渠道租户
 */
async function applyNftTransferEx(request: ApplyNftTransferRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyNftTransferResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftx.nft.transfer.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyNftTransferbyprojectwithchanneltenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // NFT租户下唯一的项目编号
  projectId: string(name='project_id'),
  // 支付宝2088开头账号
  toIdNo: string(name='to_id_no'),
  // 账号类型，当前只支持支付宝账号
  toIdType: string(name='to_id_type'),
  // 交易NFT时租户的唯一订单号
  orderNo: string(name='order_no'),
  // 购买NFT的金额，单位分
  priceCent?: long(name='price_cent'),
  // 渠道租户
  channelTenant: string(name='channel_tenant'),
}

model ApplyNftTransferbyprojectwithchanneltenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // NFT商品编码
  skuId?: string(name='sku_id'),
  // 发放的NFT编码
  nftId?: string(name='nft_id'),
}

/**
 * Description: 按项目表编码B2C发放NFT,带渠道租户
 * Summary: 按项目表编码B2C发放NFT,带渠道租户
 */
async function applyNftTransferbyprojectwithchanneltenant(request: ApplyNftTransferbyprojectwithchanneltenantRequest): ApplyNftTransferbyprojectwithchanneltenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyNftTransferbyprojectwithchanneltenantEx(request, headers, runtime);
}

/**
 * Description: 按项目表编码B2C发放NFT,带渠道租户
 * Summary: 按项目表编码B2C发放NFT,带渠道租户
 */
async function applyNftTransferbyprojectwithchanneltenantEx(request: ApplyNftTransferbyprojectwithchanneltenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyNftTransferbyprojectwithchanneltenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftx.nft.transferbyprojectwithchanneltenant.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryNftAssetRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 基于租户Id生成的对应访问服务端的accessToken
  accessToken: string(name='access_token'),
  // 对应此藏品的nftId
  nftId: string(name='nft_id'),
}

model QueryNftAssetResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 藏品ID
  nftId?: string(name='nft_id'),
  // 藏品名称
  skuName?: string(name='sku_name'),
  // 藏品SKU ID
  skuId?: long(name='sku_id'),
  // 此藏品对应的uniHash值
  uniHash?: string(name='uni_hash'),
  // 藏品铸造时间
  creationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='creation_time'),
}

/**
 * Description: 第三方通过accessToken和nftId校验藏品归属及查询相应藏品信息
 * Summary: 校验藏品归属及查询相应藏品信息
 */
async function queryNftAsset(request: QueryNftAssetRequest): QueryNftAssetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryNftAssetEx(request, headers, runtime);
}

/**
 * Description: 第三方通过accessToken和nftId校验藏品归属及查询相应藏品信息
 * Summary: 校验藏品归属及查询相应藏品信息
 */
async function queryNftAssetEx(request: QueryNftAssetRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryNftAssetResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftx.nft.asset.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PayOrderDataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 接入方测订单号，保证全局唯一
  externalOrderNo: string(name='external_order_no'),
  // 订单金额，单位为分
  amountCent: long(name='amount_cent'),
  // ALIPAY 表示小程序支付，ALIPAY_APP表示App支付, ALIPAY_WAP表示手机网站支付
  payChannel: string(name='pay_channel'),
  // 订单标题，支付宝账单会展示
  subject: string(name='subject'),
  // 订单超时时间，秒级
  timeoutExpireSecond: long(name='timeout_expire_second'),
  // 接入方存储的accessToken
  accessToken: string(name='access_token'),
  // 支付完成后的回跳地址
  returnUrl?: string(name='return_url'),
  // AC编码
  nftId?: string(name='nft_id'),
  // 鲸探测分配的实物规格编码
  itemCode?: string(name='item_code'),
  // 用户购买的商品个数
  itemNum?: long(name='item_num'),
  // 商品单价，单位分
  itemPriceCent?: long(name='item_price_cent'),
  // 资源ID
  resourceId?: string(name='resource_id'),
  // 根据实际情况传递
  resourceType?: string(name='resource_type'),
  // 是否使用GET方法支持wap支付
  wapPayUseGet?: boolean(name='wap_pay_use_get'),
}

model PayOrderDataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 鲸探开放平台内部订单号
  openOrderNo?: string(name='open_order_no'),
  // json字符串
  payParams?: string(name='pay_params'),
}

/**
 * Description: 基于直付通模式的开放订单支付接口
 * Summary: 开放订单支付接口
 */
async function payOrderData(request: PayOrderDataRequest): PayOrderDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return payOrderDataEx(request, headers, runtime);
}

/**
 * Description: 基于直付通模式的开放订单支付接口
 * Summary: 开放订单支付接口
 */
async function payOrderDataEx(request: PayOrderDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PayOrderDataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftx.order.data.pay', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncOrderDataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 接入方的订单号
  externalOrderNo: string(name='external_order_no'),
  // 目前支持两种状态 PAID、PAY_CANCEL 
  externalOrderStatus: string(name='external_order_status'),
  // 鲸探开放平台订单号
  openOrderNo?: string(name='open_order_no'),
  // 鲸探授权的用户加密的uid
  openUserId: string(name='open_user_id'),
  // 同步改状态时的事件毫秒时间戳
  updateTime: long(name='update_time'),
}

model SyncOrderDataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 外部订单数据同步，包括取消、完成，未来会扩展额外数据
 * Summary: 外部订单数据同步
 */
async function syncOrderData(request: SyncOrderDataRequest): SyncOrderDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncOrderDataEx(request, headers, runtime);
}

/**
 * Description: 外部订单数据同步，包括取消、完成，未来会扩展额外数据
 * Summary: 外部订单数据同步
 */
async function syncOrderDataEx(request: SyncOrderDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncOrderDataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftx.order.data.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryResourceImageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // access_token
  accessToken: string(name='access_token'),
  // 素材的类型（AIGC/NFT）
  type: string(name='type'),
  // 资源ID
  resourceId: string(name='resource_id'),
  // type为NFT必填
  nftId?: string(name='nft_id'),
  // 是否需要高清图
  needHdImg: boolean(name='need_hd_img'),
}

model QueryResourceImageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // nftID 藏品素材nftId，type为NFT时有值
  nftId?: string(name='nft_id'),
  // 具体藏品名称，type为NFT时有值
  skuName?: string(name='sku_name'),
  // nftId 的 算法计算的hash，该藏品唯一标识，type为NFT时有值
  uniHash?: string(name='uni_hash'),
  // Date	藏品铸造上链生成时间，例如2021.09.22 20:22:19，type为NFT时有值
  creationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='creation_time'),
  // url列表
  imgUrls?: [ CToMResourceImg ](name='img_urls'),
  // int	高清图状态
  // 0 需要等待
  // 1 已完成
  highDefinitionStatus?: long(name='high_definition_status'),
}

/**
 * Description: 查询实物定制图片
 * Summary: 查询实物定制图片
 */
async function queryResourceImage(request: QueryResourceImageRequest): QueryResourceImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryResourceImageEx(request, headers, runtime);
}

/**
 * Description: 查询实物定制图片
 * Summary: 查询实物定制图片
 */
async function queryResourceImageEx(request: QueryResourceImageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryResourceImageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftx.resource.image.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyOauthTokenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 1.authorization_code，表示换取使用用户授权码code换取授权令牌access_token。
  // 2.refresh_token，表示使用refresh_token刷新获取新授权令牌。
  // 本期只支持authorization_code
  grantType: string(name='grant_type'),
  // 授权码，用户对应用授权后得到。
  // 本参数在 grant_type 为 authorization_code 时必填；为 refresh_token 时不填。
  authCode?: string(name='auth_code'),
  // 刷新令牌，上次换取访问令牌时得到。本参数在 grant_type 为 authorization_code 时不填；为 refresh_token 时必填
  refreshToken?: string(name='refresh_token'),
}

model ApplyOauthTokenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 后续调用接口鉴权的token
  accessToken?: string(name='access_token'),
  // 到期时间
  expireTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='expire_time'),
  // openuid
  openUserId?: string(name='open_user_id'),
  // 预留字段，本期不使用
  refreshToken?: string(name='refresh_token'),
  // 预留字段，本期不使用
  refreshExpireTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='refresh_expire_time'),
}

/**
 * Description: 拿authcode换token
 * Summary: 拿authcode换token
 */
async function applyOauthToken(request: ApplyOauthTokenRequest): ApplyOauthTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyOauthTokenEx(request, headers, runtime);
}

/**
 * Description: 拿authcode换token
 * Summary: 拿authcode换token
 */
async function applyOauthTokenEx(request: ApplyOauthTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyOauthTokenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftx.oauth.token.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryOauthUserinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权token
  accessToken: string(name='access_token'),
}

model QueryOauthUserinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户昵称
  nickName?: string(name='nick_name'),
  // 头像链接
  avatar?: string(name='avatar'),
  // open_user_id
  openUserId?: string(name='open_user_id'),
}

/**
 * Description: 获取用户信息
 * Summary: 获取用户信息
 */
async function queryOauthUserinfo(request: QueryOauthUserinfoRequest): QueryOauthUserinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryOauthUserinfoEx(request, headers, runtime);
}

/**
 * Description: 获取用户信息
 * Summary: 获取用户信息
 */
async function queryOauthUserinfoEx(request: QueryOauthUserinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryOauthUserinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftx.oauth.userinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

