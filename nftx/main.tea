import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.8',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// nft发行的文件
model File {
  // 原文件的可访问路径
  originalFilePath: string(name='original_file_path', example='原文件的可访问路径'),
  // 缩略图的可访问路径
  miniImagePath: string(name='mini_image_path', example='缩略图的可访问路径'),
  // 文件名称
  name: string(name='name', example='文件名称'),
  // IMAGE("IMAGE","图片"),
  // VIDEO("VIDEO","视频"),
  // ;
  type: string(name='type', example='文件类型'),
}

model ImportNftCreateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 对端自己的项目id；用作幂等字段
  projectId: string(name='project_id'),
  // NFT艺术品的名称
  skuName: string(name='sku_name'),
  // IMAGE("IMAGE","图片"),
  // VIDEO("VIDEO","视频"),
  // ;
  skuType: string(name='sku_type'),
  // 发行数量
  quantity: long(name='quantity'),
  // 艺术品作者
  author: string(name='author'),
  // 艺术品拥有者
  owner: string(name='owner'),
  // 艺术品创作时间
  createTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='create_time'),
  // 用于标识NFT资产来自特定的产品，用作特殊的交互跳转需求，非必填字段
  bizType?: string(name='biz_type'),
  // nft简介信息
  description: string(name='description'),
  // 跳转链接
  jumpUrl?: string(name='jump_url'),
  // nft发行的艺术品文件
  files: [ File ](name='files'),
}

model ImportNftCreateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // NFT发行成功的商品id
  skuId?: long(name='sku_id'),
}

/**
 * Description: B端商户的NFT发行
 * Summary: B端商户的NFT发行
 */
async function importNftCreate(request: ImportNftCreateRequest): ImportNftCreateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importNftCreateEx(request, headers, runtime);
}

/**
 * Description: B端商户的NFT发行
 * Summary: B端商户的NFT发行
 */
async function importNftCreateEx(request: ImportNftCreateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportNftCreateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftx.nft.create.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryNftCreateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 对端自己的项目id；NFT发行时用作幂等字段
  projectId: string(name='project_id'),
  // NFT发行成功的商品id，传入sku_id时以此为准做查询
  skuId?: long(name='sku_id'),
}

model QueryNftCreateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // NFT发行成功的商品id
  skuId?: long(name='sku_id'),
  // INIT("INIT", "初始化"),
  // PROCESSING("PROCESSING", "资产创建中"),
  // FINISH("FINISH", "资产初始化完毕"),
  // ;
  skuStatus?: string(name='sku_status'),
}

/**
 * Description: B端商户的NFT发行后查询
 * Summary: B端商户的NFT发行后查询
 */
async function queryNftCreate(request: QueryNftCreateRequest): QueryNftCreateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryNftCreateEx(request, headers, runtime);
}

/**
 * Description: B端商户的NFT发行后查询
 * Summary: B端商户的NFT发行后查询
 */
async function queryNftCreateEx(request: QueryNftCreateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryNftCreateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftx.nft.create.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecNftTransferRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // NFT发行成功的商品id
  skuId: long(name='sku_id'),
  // C端用户的支付宝uid
  toIdNo: string(name='to_id_no'),
  // C端用户的支付宝账号类型
  toIdType: string(name='to_id_type'),
  // 用户在商户购买的订单号，用作幂等字段
  orderNo: string(name='order_no'),
  // 用户购买订单的时间
  orderTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='order_time'),
  // 用户购买订单的价格，可以为0；用户的购买历史记录会展示
  priceCent?: long(name='price_cent'),
}

model ExecNftTransferResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // NFT发行成功的商品id
  skuId?: long(name='sku_id'),
  // NFT发行成功的商品，其中转给C端用户的特定一个token
  nftId?: string(name='nft_id'),
}

/**
 * Description: 单个token由B端商户转C端用户
 * Summary: 单个token由B端商户转C端用户
 */
async function execNftTransfer(request: ExecNftTransferRequest): ExecNftTransferResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execNftTransferEx(request, headers, runtime);
}

/**
 * Description: 单个token由B端商户转C端用户
 * Summary: 单个token由B端商户转C端用户
 */
async function execNftTransferEx(request: ExecNftTransferRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecNftTransferResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.nftx.nft.transfer.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

