import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.3.16',
    _prod_code = 'DEMOSDK',
    _prod_channel = 'default'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// Demo类1
model DemoClass {
  // 字符串测试
  someString: string(name='some_string', example='some string'),
  // 日期测试
  someDate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='some_date', example='3'),
  // Boolean测试
  someBoolean: boolean(name='some_boolean', example='true'),
  // 整数测试
  someInt: long(maximum=2000, minimum=1, name='some_int', example='3'),
  // 列表测试
  someList: [ string ](name='some_list', example=''),
}

// 返回结果测试类
model ResultTest {
  // 姓名
  name?: string(name='name', example='张三'),
}

// 键值对
model XNameValuePair {
  // 键名
  name: string(name='name', example='key'),
  // 键值
  value: string(name='value', example='value'),
}

model QueryBbbCccRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询条件
  name: string(maxLength=32, name='name'),
}

model QueryBbbCccResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 测试sdk打包用
 * Summary: shiyi.cj
 */
async function queryBbbCcc(request: QueryBbbCccRequest): QueryBbbCccResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBbbCccEx(request, headers, runtime);
}

/**
 * Description: 测试sdk打包用
 * Summary: shiyi.cj
 */
async function queryBbbCccEx(request: QueryBbbCccRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBbbCccResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.demosdk.bbb.ccc.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportBbbCciRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // test
  fileObject?: readable(description='待上传文件', ignore='true'),
  fileObjectName?: string(description='待上传文件名', ignore='true'),
  fileId?: string(name='file_id'),
}

model ImportBbbCciResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 测试用
 * Summary: 测试用
 */
async function importBbbCci(request: ImportBbbCciRequest): ImportBbbCciResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importBbbCciEx(request, headers, runtime);
}

/**
 * Description: 测试用
 * Summary: 测试用
 */
async function importBbbCciEx(request: ImportBbbCciRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportBbbCciResponse {
  if (!Util.isUnset(request.fileObject)) {
    var uploadReq = new CreateAntcloudGatewayxFileUploadRequest{
      authToken = request.authToken,
      apiCode = 'antchain.demosdk.bbb.cci.import',
      fileName = request.fileObjectName,
    };
    var uploadResp = createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
    if (!AntchainUtil.isSuccess(uploadResp.resultCode, "ok")) {
      var importBbbCciResponse = new ImportBbbCciResponse{
        reqMsgId = uploadResp.reqMsgId,
        resultCode = uploadResp.resultCode,
        resultMsg = uploadResp.resultMsg,
      };
      return importBbbCciResponse;
    }
    var uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
    AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
    request.fileId = uploadResp.fileId;
    request.fileObject = null;
  }
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.demosdk.bbb.cci.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTimeLimitRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // file_id
  fileObject?: readable(description='待上传文件', ignore='true'),
  fileObjectName?: string(description='待上传文件名', ignore='true'),
  fileId: string(name='file_id'),
}

model QueryTimeLimitResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 个人工作台二期全链路测试接口1
 * Summary: 个人工作台二期全链路测试接口1
 */
async function queryTimeLimit(request: QueryTimeLimitRequest): QueryTimeLimitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTimeLimitEx(request, headers, runtime);
}

/**
 * Description: 个人工作台二期全链路测试接口1
 * Summary: 个人工作台二期全链路测试接口1
 */
async function queryTimeLimitEx(request: QueryTimeLimitRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTimeLimitResponse {
  if (!Util.isUnset(request.fileObject)) {
    var uploadReq = new CreateAntcloudGatewayxFileUploadRequest{
      authToken = request.authToken,
      apiCode = 'antchain.demosdk.time.limit.query',
      fileName = request.fileObjectName,
    };
    var uploadResp = createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
    if (!AntchainUtil.isSuccess(uploadResp.resultCode, "ok")) {
      var queryTimeLimitResponse = new QueryTimeLimitResponse{
        reqMsgId = uploadResp.reqMsgId,
        resultCode = uploadResp.resultCode,
        resultMsg = uploadResp.resultMsg,
      };
      return queryTimeLimitResponse;
    }
    var uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
    AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
    request.fileId = uploadResp.fileId;
    request.fileObject = null;
  }
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.demosdk.time.limit.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCacheLimitRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryCacheLimitResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 个人工作台二期测试接口2
 * Summary: 个人工作台二期测试接口2
 */
async function queryCacheLimit(request: QueryCacheLimitRequest): QueryCacheLimitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCacheLimitEx(request, headers, runtime);
}

/**
 * Description: 个人工作台二期测试接口2
 * Summary: 个人工作台二期测试接口2
 */
async function queryCacheLimitEx(request: QueryCacheLimitRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCacheLimitResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.demosdk.cache.limit.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ResetBbbCccRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model ResetBbbCccResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 测试接口
 * Summary: 测试接口
 */
async function resetBbbCcc(request: ResetBbbCccRequest): ResetBbbCccResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return resetBbbCccEx(request, headers, runtime);
}

/**
 * Description: 测试接口
 * Summary: 测试接口
 */
async function resetBbbCccEx(request: ResetBbbCccRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ResetBbbCccResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.demosdk.bbb.ccc.reset', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindAaaBbbCccRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 123
  date: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='date'),
  // 123
  data: string(name='data'),
  // 测试参数
  demoClass: DemoClass(name='demo_class'),
}

model BindAaaBbbCccResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 自动化测试创建test，请勿修改、删除
 * Summary: 自动化测试创建test1
 */
async function bindAaaBbbCcc(request: BindAaaBbbCccRequest): BindAaaBbbCccResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindAaaBbbCccEx(request, headers, runtime);
}

/**
 * Description: 自动化测试创建test，请勿修改、删除
 * Summary: 自动化测试创建test1
 */
async function bindAaaBbbCccEx(request: BindAaaBbbCccRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindAaaBbbCccResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.demosdk.aaa.bbb.ccc.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAaaCcdRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryAaaCcdResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 自动化测试创建test，请勿修改、删除
 * Summary: 自动化测试创建test1
 */
async function queryAaaCcd(request: QueryAaaCcdRequest): QueryAaaCcdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAaaCcdEx(request, headers, runtime);
}

/**
 * Description: 自动化测试创建test，请勿修改、删除
 * Summary: 自动化测试创建test1
 */
async function queryAaaCcdEx(request: QueryAaaCcdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAaaCcdResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.demosdk.aaa.ccd.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindXxxRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 123
  date: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='date'),
  // 123
  data: string(name='data'),
}

model BindXxxResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 自动化测试创建test，请勿修改、删除
 * Summary: 自动化测试创建test1
 */
async function bindXxx(request: BindXxxRequest): BindXxxResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindXxxEx(request, headers, runtime);
}

/**
 * Description: 自动化测试创建test，请勿修改、删除
 * Summary: 自动化测试创建test1
 */
async function bindXxxEx(request: BindXxxRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindXxxResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.demosdk.xxx.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCcXxRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // aa
  name: string(name='name'),
  // 测试
  msg: ResultTest(name='msg'),
}

model QueryCcXxResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 1213
  test?: string(name='test'),
}

/**
 * Description: 测试
 * Summary: 测试
 */
async function queryCcXx(request: QueryCcXxRequest): QueryCcXxResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCcXxEx(request, headers, runtime);
}

/**
 * Description: 测试
 * Summary: 测试
 */
async function queryCcXxEx(request: QueryCcXxRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCcXxResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.demosdk.cc.xx.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyApiListRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 3000
  timeout?: string(name='timeout'),
  // 请求编号
  count?: long(name='count'),
  // 请求时间
  time?: string(name='time'),
  // 请求描述
  desc?: string(name='desc'),
  // 操作人
  operator?: string(name='operator'),
}

model VerifyApiListResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态
  stauts?: string(name='stauts'),
  // 描述
  msg?: string(name='msg'),
}

/**
 * Description: 用于个人工作台二期测试使用
 * Summary: 用于个人工作台二期测试使用
 */
async function verifyApiList(request: VerifyApiListRequest): VerifyApiListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyApiListEx(request, headers, runtime);
}

/**
 * Description: 用于个人工作台二期测试使用
 * Summary: 用于个人工作台二期测试使用
 */
async function verifyApiListEx(request: VerifyApiListRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyApiListResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.demosdk.api.list.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryWorkbenchTestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 3000
  timeout?: string(name='timeout'),
  // 请求编号
  count?: long(name='count'),
  // 请求时间
  time?: string(name='time'),
  // 请求描述
  desc?: string(name='desc'),
  // 操作人
  operator?: string(name='operator'),
}

model QueryWorkbenchTestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态
  stauts?: string(name='stauts'),
  // 描述
  msg?: string(name='msg'),
}

/**
 * Description: 用于个人工作台二期测试使用
 * Summary: 用于个人工作台二期测试使用
 */
async function queryWorkbenchTest(request: QueryWorkbenchTestRequest): QueryWorkbenchTestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryWorkbenchTestEx(request, headers, runtime);
}

/**
 * Description: 用于个人工作台二期测试使用
 * Summary: 用于个人工作台二期测试使用
 */
async function queryWorkbenchTestEx(request: QueryWorkbenchTestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryWorkbenchTestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.demosdk.workbench.test.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportCreateTestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model ImportCreateTestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 用于个人工作台二期测试使用
 * Summary: 用于个人工作台二期测试使用
 */
async function importCreateTest(request: ImportCreateTestRequest): ImportCreateTestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importCreateTestEx(request, headers, runtime);
}

/**
 * Description: 用于个人工作台二期测试使用
 * Summary: 用于个人工作台二期测试使用
 */
async function importCreateTestEx(request: ImportCreateTestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportCreateTestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.demosdk.create.test.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAbcdOneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryAbcdOneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态
  stauts?: string(name='stauts'),
  // 描述
  msg?: string(name='msg'),
}

/**
 * Description: 个人工作台二期测试接口
 * Summary: 个人工作台二期测试接口
 */
async function queryAbcdOne(request: QueryAbcdOneRequest): QueryAbcdOneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAbcdOneEx(request, headers, runtime);
}

/**
 * Description: 个人工作台二期测试接口
 * Summary: 个人工作台二期测试接口
 */
async function queryAbcdOneEx(request: QueryAbcdOneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAbcdOneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.demosdk.abcd.one.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportAbcdOneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model ImportAbcdOneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 描述
  stauts?: string(name='stauts'),
  // 描述
  msg?: string(name='msg'),
}

/**
 * Description: 个人工作台二期测试接口
 * Summary: 个人工作台二期测试接口
 */
async function importAbcdOne(request: ImportAbcdOneRequest): ImportAbcdOneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importAbcdOneEx(request, headers, runtime);
}

/**
 * Description: 个人工作台二期测试接口
 * Summary: 个人工作台二期测试接口
 */
async function importAbcdOneEx(request: ImportAbcdOneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportAbcdOneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.demosdk.abcd.one.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAntcloudGatewayxFileUploadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 上传文件作用的openapi method
  apiCode: string(name='api_code'),
  // 文件标签，多个标签;分割
  fileLabel?: string(maxLength=100, name='file_label'),
  // 自定义的文件元数据
  fileMetadata?: string(maxLength=1000, name='file_metadata'),
  // 文件名，不传则随机生成文件名
  fileName?: string(maxLength=100, name='file_name'),
  // 文件的多媒体类型
  mimeType?: string(name='mime_type'),
  // 产品方的api归属集群，即productInstanceId
  apiCluster?: string(name='api_cluster'),
}

model CreateAntcloudGatewayxFileUploadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 上传有效期
  expiredTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='expired_time'),
  // 32位文件唯一id
  fileId?: string(name='file_id'),
  // 放入http请求头里
  uploadHeaders?: [ XNameValuePair ](name='upload_headers'),
  // 文件上传地址
  uploadUrl?: string(name='upload_url'),
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUpload(request: CreateAntcloudGatewayxFileUploadRequest): CreateAntcloudGatewayxFileUploadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAntcloudGatewayxFileUploadEx(request, headers, runtime);
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUploadEx(request: CreateAntcloudGatewayxFileUploadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAntcloudGatewayxFileUploadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.gatewayx.file.upload.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

