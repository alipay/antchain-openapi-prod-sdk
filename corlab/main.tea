import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.18',
    _prod_code = 'CORLAB',
    _prod_channel = 'default'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 产品对应模版字段
model TemplateContext {
  // 模版header头
  headName: string(name='head_name', example='bizCode'),
  // 字段描述
  remark?: string(name='remark', example='加密身份id'),
  // 是否为必填:REQUIRED,ONE_OF
  requireType: string(name='require_type', example='ONE_OF'),
}

// 产品信息
model ProductContext {
  // 产品code
  productCode: string(name='product_code', example='aft_v4'),
  // 模版code
  templateCode: string(name='template_code', example='tb-default'),
  // 模版内容,数组
  templateContext: [ TemplateContext ](name='template_context', example=''),
  // 产品模型结果字段
  scoreFields: [ string ](name='score_fields', example='["aft_v3_score","aft_v4_score"]'),
}

// corlab任务查询结果信息
model ResultContext {
  // 产品码
  productCode?: string(name='product_code', example='aft_v4'),
  // 结果文件名
  fileName?: string(name='file_name', example='结果文件名'),
  // 结果文件下载地址
  fileUrl?: string(name='file_url', example='oss://xxxxx/xxxx'),
}

// 键值对
model XNameValuePair {
  // 键名
  name: string(name='name', example='key'),
  // 键值
  value: string(name='value', example='value'),
}

model RecognizeModelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部业务唯一标识id
  bizId: string(name='biz_id'),
  // 业务域
  domainCode: string(name='domain_code'),
  // 模型状态
  status: string(name='status'),
  // 待计算的模型uuid
  modelUuid: string(name='model_uuid'),
  // map的映射的json字符串
  inputContext: string(name='input_context'),
}

model RecognizeModelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 操作成功结果
  success?: boolean(name='success'),
  // 业务码
  responseCode?: string(name='response_code'),
  // 数据对象结构体字符串
  data?: string(name='data'),
}

/**
 * Description: 单次模型预测
 * Summary: 模型预测
 */
async function recognizeModel(request: RecognizeModelRequest): RecognizeModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return recognizeModelEx(request, headers, runtime);
}

/**
 * Description: 单次模型预测
 * Summary: 模型预测
 */
async function recognizeModelEx(request: RecognizeModelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RecognizeModelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.corlab.model.recognize', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddModelTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 客户号
  customerId: string(name='customer_id'),
  // 回执单号
  receiptNo: string(name='receipt_no'),
  // 模型名称
  modelName: string(name='model_name'),
  // 模型文件的路径
  modelFileOssPath: string(name='model_file_oss_path'),
  // 验证文件的oss路径	
  validateFileOssPath: string(name='validate_file_oss_path'),
  // 模型输出参数名称
  modelOutputLableName: string(name='model_output_lable_name'),
  // 验证文件的输出列名
  csvOutputLableName: string(name='csv_output_lable_name'),
  // 验签字段
  signInfo: string(name='sign_info'),
}

model AddModelTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 生成的任务id
  taskId?: string(name='task_id'),
  // 执行的状态
  status?: string(name='status'),
  // 错误信息
  errorInfo?: string(name='error_info'),
}

/**
 * Description: 模型投产任务新增
 * Summary: 模型投产任务新增
 */
async function addModelTask(request: AddModelTaskRequest): AddModelTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addModelTaskEx(request, headers, runtime);
}

/**
 * Description: 模型投产任务新增
 * Summary: 模型投产任务新增
 */
async function addModelTaskEx(request: AddModelTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddModelTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.corlab.model.task.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateModelbackTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 文件唯一ID
  fileObject?: readable(description='待上传文件', ignore='true'),
  fileObjectName?: string(description='待上传文件名', ignore='true'),
  fileId: string(name='file_id'),
  // 创建任务时回溯的产品
  productCodes: [ string ](name='product_codes'),
  // 样本记录名，不传为file_id
  sampleFileName: string(name='sample_file_name'),
  // 目前只支持MD5,SHA_256两种加密方式
  keyType: string(name='key_type'),
  // 客户方唯一code
  uniqueCode: string(name='unique_code'),
}

model CreateModelbackTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 任务唯一标识
  bizCode?: string(name='biz_code'),
  // 任务状态：SUCCESS/RUNNING/FAIL
  status?: string(name='status'),
}

/**
 * Description: corlab模型回溯任务创建
 * Summary: corlab模型回溯任务创建
 */
async function createModelbackTask(request: CreateModelbackTaskRequest): CreateModelbackTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createModelbackTaskEx(request, headers, runtime);
}

/**
 * Description: corlab模型回溯任务创建
 * Summary: corlab模型回溯任务创建
 */
async function createModelbackTaskEx(request: CreateModelbackTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateModelbackTaskResponse {
  if (!Util.isUnset(request.fileObject)) {
    var uploadReq = new CreateAntcloudGatewayxFileUploadRequest{
      authToken = request.authToken,
      apiCode = 'antdigital.corlab.modelback.task.create',
      fileName = request.fileObjectName,
    };
    var uploadResp = createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
    if (!AntchainUtil.isSuccess(uploadResp.resultCode, "ok")) {
      var createModelbackTaskResponse = new CreateModelbackTaskResponse{
        reqMsgId = uploadResp.reqMsgId,
        resultCode = uploadResp.resultCode,
        resultMsg = uploadResp.resultMsg,
      };
      return createModelbackTaskResponse;
    }
    var uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
    AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
    request.fileId = uploadResp.fileId;
    request.fileObject = null;
  }
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.corlab.modelback.task.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryModelbackTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 根据任务唯一id查询
  bizCode: string(name='biz_code'),
}

model QueryModelbackTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 任务唯一id
  bizCode?: string(name='biz_code'),
  // 任务状态
  status?: string(name='status'),
  // 任务对应产品结果信息
  resultContexts?: [ ResultContext ](name='result_contexts'),
  // 任务完成时间
  finishTime?: string(name='finish_time'),
  // 异步任务失败后，响应客户任务失败原因错误码，任务正常值为空
  errorCode?: string(name='error_code'),
  // 异步任务失败后，响应客户错误失败原因，任务正常值为空
  errorMsg?: string(name='error_msg'),
}

/**
 * Description: corlab模型回溯任务查询
 * Summary: corlab模型回溯任务查询
 */
async function queryModelbackTask(request: QueryModelbackTaskRequest): QueryModelbackTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryModelbackTaskEx(request, headers, runtime);
}

/**
 * Description: corlab模型回溯任务查询
 * Summary: corlab模型回溯任务查询
 */
async function queryModelbackTaskEx(request: QueryModelbackTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryModelbackTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.corlab.modelback.task.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryModelbackProductRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 产品码，数组形式
  productCodes?: [ string ](name='product_codes'),
}

model QueryModelbackProductResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 产品模版信息
  productContext?: [ ProductContext ](name='product_context'),
}

/**
 * Description: corlab产品以及产品模版查询
 * Summary: corlab产品以及产品模版查询
 */
async function queryModelbackProduct(request: QueryModelbackProductRequest): QueryModelbackProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryModelbackProductEx(request, headers, runtime);
}

/**
 * Description: corlab产品以及产品模版查询
 * Summary: corlab产品以及产品模版查询
 */
async function queryModelbackProductEx(request: QueryModelbackProductRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryModelbackProductResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.corlab.modelback.product.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAntcloudGatewayxFileUploadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 上传文件作用的openapi method
  apiCode: string(name='api_code'),
  // 文件标签，多个标签;分割
  fileLabel?: string(maxLength=100, name='file_label'),
  // 自定义的文件元数据
  fileMetadata?: string(maxLength=1000, name='file_metadata'),
  // 文件名，不传则随机生成文件名
  fileName?: string(maxLength=100, name='file_name'),
  // 文件的多媒体类型
  mimeType?: string(name='mime_type'),
  // 产品方的api归属集群，即productInstanceId
  apiCluster?: string(name='api_cluster'),
}

model CreateAntcloudGatewayxFileUploadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 上传有效期
  expiredTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='expired_time'),
  // 32位文件唯一id
  fileId?: string(name='file_id'),
  // 放入http请求头里
  uploadHeaders?: [ XNameValuePair ](name='upload_headers'),
  // 文件上传地址
  uploadUrl?: string(name='upload_url'),
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUpload(request: CreateAntcloudGatewayxFileUploadRequest): CreateAntcloudGatewayxFileUploadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAntcloudGatewayxFileUploadEx(request, headers, runtime);
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUploadEx(request: CreateAntcloudGatewayxFileUploadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAntcloudGatewayxFileUploadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.gatewayx.file.upload.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

