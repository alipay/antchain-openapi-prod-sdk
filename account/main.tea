import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.9',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 金额类
model MultiCurrencyMoneyOpenApi {
  // 最小币种单位
  cent: string(name='cent', example='123'),
  // 币种
  currencyValue: string(name='currency_value', example='156'),
}

// 测试
model TestTv {
  // 租户ID
  tenantId: string(name='tenant_id', example='2088X'),
}

// 充值记录VO
model ChargeRecordVO {
  // 充值凭证号
  voucherNo: string(name='voucher_no', example='2019032510730500001400640000000001'),
  // 外部单据号
  outBizNo: string(name='out_biz_no', example='2019032510730500001400640000000001'),
  // 充值时间
  rechargeTime: string(name='recharge_time', example='2020-01-01 22:22:22'),
  // 支付状态（INIT-创建订单/SUCCESS-充值成功/FAIL-充值失败）
  rechargeStatus: string(name='recharge_status', example='SUCCESS'),
  // 金额
  multiCurrencyMoneyOpenApi: MultiCurrencyMoneyOpenApi(name='multi_currency_money_open_api', example=' '),
}

model QueryBalanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 租户ID
  tenantId: string(name='tenant_id'),
  // 调用系统来源
  source: string(name='source'),
}

model QueryBalanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 余额
  balance?: MultiCurrencyMoneyOpenApi(name='balance'),
  // ALIPAY-客资账户 FINANCE-财资账户
  accountType?: string(name='account_type'),
}

/**
 * Description: 账户余额查询，根据租户ID判断是否支付宝账号，支付宝账号返回客资户余额，非支付宝账号返回财资户余额
 * Summary: 智能科技客资账户余额查询
 */
async function queryBalance(request: QueryBalanceRequest): QueryBalanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBalanceEx(request, headers, runtime);
}

/**
 * Description: 账户余额查询，根据租户ID判断是否支付宝账号，支付宝账号返回客资户余额，非支付宝账号返回财资户余额
 * Summary: 智能科技客资账户余额查询
 */
async function queryBalanceEx(request: QueryBalanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBalanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.account.balance.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ChargeCustomerBalanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 租户ID
  tenantId: string(name='tenant_id'),
  // 充值金额，单位分
  rechargeAmt: string(name='recharge_amt'),
  // 币种
  currencyValue: string(name='currency_value'),
  // 用户充值后跳转的地址链接，若不填，则默认跳到中台费用中心页面
  returnUrl?: string(name='return_url'),
  // 调用系统appName
  source: string(name='source'),
  // 充值渠道，默认传"01"
  rechargeChannel: string(name='recharge_channel'),
  // 外部单据号，用于幂等
  outBizNo: string(name='out_biz_no'),
}

model ChargeCustomerBalanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 收银台URI
  cashierUrl?: string(name='cashier_url'),
}

/**
 * Description: 智能科技客资账号收银台充值
 * Summary: 智能科技客资账号收银台充值
 */
async function chargeCustomerBalance(request: ChargeCustomerBalanceRequest): ChargeCustomerBalanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return chargeCustomerBalanceEx(request, headers, runtime);
}

/**
 * Description: 智能科技客资账号收银台充值
 * Summary: 智能科技客资账号收银台充值
 */
async function chargeCustomerBalanceEx(request: ChargeCustomerBalanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ChargeCustomerBalanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.account.customer.balance.charge', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryInfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 租户ID
  tenantId: string(name='tenant_id'),
  // 调用系统名称
  source: string(name='source'),
  // 主体信息，不填默认ZL6
  ou?: string(name='ou'),
}

model QueryInfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户的银行打款卡号
  cardId?: string(name='card_id'),
  // 银行户名
  accountName?: string(name='account_name'),
  // 开户银行
  bankName?: string(name='bank_name'),
  // 网点/支行 （客资特有）
  branchBankName?: string(name='branch_bank_name'),
  // 联行号（客资特有）
  bankLineNumber?: string(name='bank_line_number'),
  // 开户地（客资特有）
  bankLocation?: string(name='bank_location'),
  // ALIPAY-客资账户 FINANCE-财资账户
  accountType?: string(name='account_type'),
}

/**
 * Description: 根据租户ID判断，支付宝账号返回客资线下打款渠道，非支付宝账号返回财资线下打款渠道，展示的时候只展示非空的字段
 * Summary: 智能科技线下打款渠道查询
 */
async function queryInfo(request: QueryInfoRequest): QueryInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryInfoEx(request, headers, runtime);
}

/**
 * Description: 根据租户ID判断，支付宝账号返回客资线下打款渠道，非支付宝账号返回财资线下打款渠道，展示的时候只展示非空的字段
 * Summary: 智能科技线下打款渠道查询
 */
async function queryInfoEx(request: QueryInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryInfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.account.info.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCustomerChargeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 租户ID
  tenantId: string(name='tenant_id'),
  // 若有，则返回相应的状态，INIT/SUCCESS/FAIL
  status?: string(name='status'),
  // 访问的页码数
  pageNo: long(name='page_no'),
  // 每页的数量
  pageSize: long(name='page_size'),
  // 调用系统来源
  source: string(name='source'),
  // 1- 按时间升序
  // 2-按时间倒序
  // 不填默认2
  sortType?: long(name='sort_type'),
}

model QueryCustomerChargeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 充值记录
  result?: [ ChargeRecordVO ](name='result'),
  // 总的数量
  totalItems?: long(name='total_items'),
}

/**
 * Description: 仅有客资线上充值记录
 * Summary: 智能科技客资账户线上充值记录查询
 */
async function queryCustomerCharge(request: QueryCustomerChargeRequest): QueryCustomerChargeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCustomerChargeEx(request, headers, runtime);
}

/**
 * Description: 仅有客资线上充值记录
 * Summary: 智能科技客资账户线上充值记录查询
 */
async function queryCustomerChargeEx(request: QueryCustomerChargeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCustomerChargeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.account.customer.charge.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

