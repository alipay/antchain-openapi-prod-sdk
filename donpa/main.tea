import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.14',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 修复数据
model RepairData {
  // 修复结果状态：“RPS001”: 不可外呼，”RPS002":可以 外呼
  repairStatus: string(name='repair_status', example='RPS001,RPS002'),
  // 身份证号
  idCard: string(name='id_card', example='1311xxxx'),
  // 姓名：显示的姓名为修复请求的 待修复人名
  userName: string(name='user_name', example='刘猫本'),
  // 案件编号，特定使用运营商页面平台产生
  caseNo?: string(name='case_no', example='xxxx'),
  // 修复号码数量
  resultListNumber: long(name='result_list_number', example='2'),
}

// 预测请求结构体
model PredictRequest {
  // 资产明细ID
  assetDetailId?: string(name='asset_detail_id', example='111'),
  // 身份证号码MD5
  certNoMd5: string(name='cert_no_md5', example='5a0a52d01fa9304e8dba7170'),
  // 已还总额,默认0
  paybackAmount?: string(name='payback_amount', example='100.00'),
  // 已还期数，默认0
  paybackNum?: string(name='payback_num', example='2'),
  // 逾期月数
  overdueMonth?: string(name='overdue_month', example='2'),
  // 身份证号
  certNo?: string(name='cert_no', example='131124111111110111'),
}

// 预测结果响应体
model PredictResponse {
  // 资产明细ID
  assetDetailId?: string(name='asset_detail_id', example='112'),
  // 反向指标
  probability0?: string(name='probability0', example='0.9123'),
  // 正向指标
  probability1?: string(name='probability1', example='0.123'),
  // 身份证号码MD5
  certNoMd5?: string(name='cert_no_md5', example='5a0a52d01fa9304e8dba7170'),
  // 身份证号码MD5
  mobileMd5?: string(name='mobile_md5', example='5a0a52d01fa9304e8dba7170'),
  // 可选值，A,B,C
  level?: string(name='level', example='分类类型'),
  // 内部特征预测分数
  predictionScore?: string(name='prediction_score', example='0.99'),
  // 身份证号码
  certNo?: string(name='cert_no', example='131124111111110111'),
}

// 修复批次状态
model BatchRepairData {
  // "RPBS001":待修复,"RPBS002": 修 复 中 "RPBS003": 已 修 复,"RPBS004":修复失败
  repairBatchStatus: string(name='repair_batch_status', example='RPBS001'),
  // 修复时间
  repairTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='repair_time', example='格式：yyyy-MM-dd HH:mm:ss'),
  // 参见RepairData
  repairDatas: [ RepairData ](name='repair_datas', example=''),
}

// 绑定接口返回的绑定信息
model BindData {
  // 虚拟小号（实际拨打以返回的 telX 为主）
  telX: string(name='tel_x', example='17718750001'),
  // 该次绑定唯一 id
  bindId: string(name='bind_id', example='5a0a52d01fa9304e8dba7170'),
}

// 发起修复的响应对象，
model BatchInfo {
  // 修复的批次号
  batchId: string(name='batch_id', example='5a0a52d01fa9304e8dba7170'),
}

// 待修复的债务人信息
model PersonData {
  // 姓名
  userName: string(name='user_name', example='刘猫本'),
  // 待修复 sha256 加密身份证号
  idCard: string(name='id_card', example='384a3bdc4347348b9cfd74eb33a3daa43054f461a0e5ad01a97f912eaa6799ef'),
  // 手机号
  phone?: string(name='phone', example='13718750000'),
}

model QueryPredictRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 待预测请求体列表
  data: [ PredictRequest ](name='data'),
}

model QueryPredictResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 预测结果返回列表
  data?: [ PredictResponse ](name='data'),
  // 资产包的回款率
  returnRate?: string(name='return_rate'),
}

/**
 * Description: 资产定价处置预测 
 * Summary: 资产定价处置预测
 */
async function queryPredict(request: QueryPredictRequest): QueryPredictResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryPredictEx(request, headers, runtime);
}

/**
 * Description: 资产定价处置预测 
 * Summary: 资产定价处置预测
 */
async function queryPredictEx(request: QueryPredictRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryPredictResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.donpa.predict.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartSlxfRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 待修复人list
  data: [ PersonData ](name='data'),
}

model StartSlxfResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回批次，JSON对象， 比如：{batchId:xxxxx}
  data?: BatchInfo(name='data'),
}

/**
 * Description: 失联修复发起API接口
 * Summary: 失联修复发起API接口
 */
async function startSlxf(request: StartSlxfRequest): StartSlxfResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startSlxfEx(request, headers, runtime);
}

/**
 * Description: 失联修复发起API接口
 * Summary: 失联修复发起API接口
 */
async function startSlxfEx(request: StartSlxfRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartSlxfResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.donpa.slxf.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PullSlxfRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // {"batchId":"xxx"}
  batchId: string(name='batch_id'),
}

model PullSlxfResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 参考结构体类型
  data?: BatchRepairData(name='data'),
}

/**
 * Description: 通过修复批次号获取修复结果，判断是否可以外呼。修复是异步的，一般需要 2 个小时。建议客户半小时 定时轮询一次，直至批次状态为终态（已修复或者修 复失败）
 * Summary: 获取修复结果接口
 */
async function pullSlxf(request: PullSlxfRequest): PullSlxfResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pullSlxfEx(request, headers, runtime);
}

/**
 * Description: 通过修复批次号获取修复结果，判断是否可以外呼。修复是异步的，一般需要 2 个小时。建议客户半小时 定时轮询一次，直至批次状态为终态（已修复或者修 复失败）
 * Summary: 获取修复结果接口
 */
async function pullSlxfEx(request: PullSlxfRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PullSlxfResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.donpa.slxf.pull', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySlxfRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 修复批次号
  batchId: string(name='batch_id'),
  // Sha256 加密后的身 份证号
  idCard: string(name='id_card'),
}

model QuerySlxfResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 其中数组中的每一项 为 脱 敏 手 机 号 码 unicomCustomerId ，请求外呼 时使用
  data?: [ string ](name='data'),
}

/**
 * Description: 根据身份证号查询修复的脱敏手机号码
 * Summary: 查询修复结果
 */
async function querySlxf(request: QuerySlxfRequest): QuerySlxfResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySlxfEx(request, headers, runtime);
}

/**
 * Description: 根据身份证号查询修复的脱敏手机号码
 * Summary: 查询修复结果
 */
async function querySlxfEx(request: QuerySlxfRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySlxfResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.donpa.slxf.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindSlxfRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 修复批次号
  batchId: string(name='batch_id'),
  // 待 修 复 sha256 加 密身份证号
  idCard: string(name='id_card'),
  // 脱敏后手机号码加密串， 需要拨打的该手机号码
  unicomCustomerId: string(name='unicom_customer_id'),
  // 主叫号码，号码要求备案
  seatNumber: string(name='seat_number'),
  // 外显号，外显号要求在外 显号池中
  showNumber: string(name='show_number'),
  // 虚拟小号， 线下分 配
  telX: string(name='tel_x'),
}

model BindSlxfResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // "data": {"telX": "xxx","bindId": "xxx" }
  data?: BindData(name='data'),
}

/**
 * Description: 绑定虚拟小号，绑定的虚拟小号失效时间为 1 个小时，1 个小时后自动解绑
 * Summary: 绑定虚拟小号接口
 */
async function bindSlxf(request: BindSlxfRequest): BindSlxfResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindSlxfEx(request, headers, runtime);
}

/**
 * Description: 绑定虚拟小号，绑定的虚拟小号失效时间为 1 个小时，1 个小时后自动解绑
 * Summary: 绑定虚拟小号接口
 */
async function bindSlxfEx(request: BindSlxfRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindSlxfResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.donpa.slxf.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UnbindSlxfRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 绑定唯一 id
  bindId: string(name='bind_id'),
}

model UnbindSlxfResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 解绑虚拟小号
 * Summary: 解绑虚拟小号接口
 */
async function unbindSlxf(request: UnbindSlxfRequest): UnbindSlxfResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return unbindSlxfEx(request, headers, runtime);
}

/**
 * Description: 解绑虚拟小号
 * Summary: 解绑虚拟小号接口
 */
async function unbindSlxfEx(request: UnbindSlxfRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UnbindSlxfResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.donpa.slxf.unbind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

