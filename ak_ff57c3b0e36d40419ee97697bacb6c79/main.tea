import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.0',
    _prod_code = 'ak_ff57c3b0e36d40419ee97697bacb6c79',
    _prod_channel = 'saas'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 授权协议
model AuthAgreement {
  // 授权协议code
  authAgreementCode: string(name='auth_agreement_code', example='000000000001'),
  // 授权协议类型：
  // TIME、时间授权
  // COUNT、次数授权
  // TIME_COUNT、时间范围内次数授权
  authAgreementType: string(name='auth_agreement_type', example='TIME'),
  // 授权开始ishi见
  authBeginTime?: string(name='auth_begin_time', example='2020-07-24 03:07:50'),
  // 授权截止日期
  // 
  // 
  authEndTime?: string(name='auth_end_time', example='2020-07-24 03:07:50'),
  // 授权次数
  // 
  // 
  authCount?: long(name='auth_count', example='10'),
  // 剩余授权次数
  authBalanceCount?: long(name='auth_balance_count', example='1'),
}

// 链的信息
model ChainInfo {
  // 块高
  blockHeight?: string(name='block_height', example='13232424234'),
  // 交易时间
  translateDate?: string(name='translate_date', example='2020-07-24 03:07:50'),
  // hash(64位)
  txHash?: string(name='tx_hash', example='0x233242342'),
}

// 核身信息, 授权时传入
model CertificationInfo {
  // 是否授权
  certificationFlag?: boolean(name='certification_flag', example='true, false'),
  // 实人认证唯一标识
  certifyId?: string(name='certify_id', example='11410000005184603J'),
}

// 授权记录
model AuthRecord {
  // 被授权租户名称：
  // 身份证号/统一社会组织机构信用码
  authorizedName: string(name='authorized_name', example='xxxx农商行'),
  // 授权协议规则
  authAgreement: AuthAgreement(name='auth_agreement', example=''),
  // 授权码
  // 
  // 
  authCode: string(name='auth_code', example='02xeeewr'),
  // 授权时间	
  // 
  authDate: string(name='auth_date', example='2014-07-24 03:07:50'),
  // 授权有效状态：
  // 1、生效中、
  // 0、失效
  // 
  // 
  authStatus: string(name='auth_status', example='1'),
  // 链的信息
  chainInfo: ChainInfo(name='chain_info', example=''),
  // 授权租户身份ID：
  // 身份证号/统一社会组织机构信用码
  dataOwnerIdentity: string(name='data_owner_identity', example='3408012000xxxxx/95xxxxxxx'),
  // 授权用户名称
  dataOwnerName: string(name='data_owner_name', example='张三/张三集团有限公司'),
  // 扩展字段，与target_name拼成可见的授权详情name
  // 
  // 
  extendParams: string(name='extend_params', example='{  "district":"太原",  "file":"",  "assets":""  }'),
  // 标的物名称
  // 
  // 
  targetName: string(name='target_name', example='公积金缴存证明'),
  // 授权可信数据
  teeData?: string(name='tee_data', example='dsfsfds'),
}

// 属性
model AuthProperty {
  // 地区
  key: string(name='key', example='district'),
  // {"山西","广东"}
  value: [ string ](name='value', example='{"山西","广东"}'),
}

model CheckAntchainTdmCpfAuthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 流水ID
  requestId: string(name='request_id'),
  // 用户ID
  dataOwnerIdentity: string(name='data_owner_identity'),
  // 授权机构ID
  authorizedIdentity: string(name='authorized_identity'),
  // 授权端ID
  authorizedPlatformIdentity?: string(name='authorized_platform_identity'),
  // 授权业务码
  targetCode: string(name='target_code'),
  // 授权协议
  authAgreement?: AuthAgreement(name='auth_agreement'),
  // 扩展字段
  content: AuthProperty(name='content'),
}

model CheckAntchainTdmCpfAuthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否授权
  ifAuth?: boolean(name='if_auth'),
}

/**
 * Description: 鉴权、权限查询
 * Summary: 鉴权接口
 */
async function checkAntchainTdmCpfAuth(request: CheckAntchainTdmCpfAuthRequest): CheckAntchainTdmCpfAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkAntchainTdmCpfAuthEx(request, headers, runtime);
}

/**
 * Description: 鉴权、权限查询
 * Summary: 鉴权接口
 */
async function checkAntchainTdmCpfAuthEx(request: CheckAntchainTdmCpfAuthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckAntchainTdmCpfAuthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.tdm.cpf.auth.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecAntchainTdmCpfAuthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 流水号
  requestId: string(name='request_id'),
  // 用户身份证ID
  dataOwnerIdentity: string(name='data_owner_identity'),
  // 用户姓名
  dataOwnerName?: string(name='data_owner_name'),
  // 被授权机构ID
  authorizedIdentity: string(name='authorized_identity'),
  // 被授权机构名称
  authorizedName?: string(name='authorized_name'),
  // 端ID
  authorizedPlatformIdentity?: string(name='authorized_platform_identity'),
  // 授权标的
  targetCode: string(name='target_code'),
  // 授权协议
  authAgreement: AuthAgreement(name='auth_agreement'),
  // 核身信息
  certificationInfo?: CertificationInfo(name='certification_info'),
  // 扩展字段
  content?: string(name='content'),
}

model ExecAntchainTdmCpfAuthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 授权码
  authCode?: string(name='auth_code'),
}

/**
 * Description: 公积金业务授权接口
 * Summary: 授权接口
 */
async function execAntchainTdmCpfAuth(request: ExecAntchainTdmCpfAuthRequest): ExecAntchainTdmCpfAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execAntchainTdmCpfAuthEx(request, headers, runtime);
}

/**
 * Description: 公积金业务授权接口
 * Summary: 授权接口
 */
async function execAntchainTdmCpfAuthEx(request: ExecAntchainTdmCpfAuthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecAntchainTdmCpfAuthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.tdm.cpf.auth.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAntchainTdmCpfAuthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 身份证ID
  dataOwnerIdentity: string(name='data_owner_identity'),
  // 被授权机构ID
  authorizedIdentity?: string(name='authorized_identity'),
  // 端ID
  authorizedPlatformIdentity?: string(name='authorized_platform_identity'),
  // 标的产品码
  targetCode?: string(name='target_code'),
  // 扩展字段
  extendParams?: string(name='extend_params'),
  // 授权状态
  authState: string(name='auth_state'),
}

model QueryAntchainTdmCpfAuthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 授权记录列表
  authRecords?: [ AuthRecord ](name='auth_records'),
}

/**
 * Description: 个人授权记录查询
 * Summary: 个人授权记录查询
 */
async function queryAntchainTdmCpfAuth(request: QueryAntchainTdmCpfAuthRequest): QueryAntchainTdmCpfAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAntchainTdmCpfAuthEx(request, headers, runtime);
}

/**
 * Description: 个人授权记录查询
 * Summary: 个人授权记录查询
 */
async function queryAntchainTdmCpfAuthEx(request: QueryAntchainTdmCpfAuthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAntchainTdmCpfAuthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.tdm.cpf.auth.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckAntchainTdmCpfCertRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部业务流水
  bizId?: string(name='biz_id'),
  // 扫码验真类型
  type: string(name='type'),
  // 端ID
  terminalIdentity: string(name='terminal_identity'),
  // 证明ID
  issueId: string(name='issue_id'),
  // 身份证ID
  dataOwnerIdentity: string(name='data_owner_identity'),
  // 使用方ID
  dataUserIdentity?: string(name='data_user_identity'),
  // 使用方名称
  dataUserName?: string(name='data_user_name'),
  // 用途
  purpose?: string(name='purpose'),
  // 使用时间
  useTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='use_time'),
  // 扩展字段
  extendParams?: string(name='extend_params'),
}

model CheckAntchainTdmCpfCertResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 证明ID
  issueId?: string(name='issue_id'),
  // 证明文件获取地址
  depositCert?: string(name='deposit_cert'),
}

/**
 * Description: 扫码验真
 * Summary: 扫码验真
 */
async function checkAntchainTdmCpfCert(request: CheckAntchainTdmCpfCertRequest): CheckAntchainTdmCpfCertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkAntchainTdmCpfCertEx(request, headers, runtime);
}

/**
 * Description: 扫码验真
 * Summary: 扫码验真
 */
async function checkAntchainTdmCpfCertEx(request: CheckAntchainTdmCpfCertRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckAntchainTdmCpfCertResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.tdm.cpf.cert.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

