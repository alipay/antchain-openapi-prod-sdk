import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.1.0',
    _prod_code = 'DUANKA',
    _prod_channel = 'undefined'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 查询结果
model QueryResult {
  // 工号
  workNo: string(name='work_no', example='WB0136222X'),
  // 花名
  nickName?: string(name='nick_name', example='花名'),
  // 姓名
  name: string(name='name', example='张三'),
  // 域账号
  loginAccount: string(name='login_account', example='XXX.xxx'),
  // 企业邮箱
  buMail: string(name='bu_mail', example='XXX@antgroup.com'),
  // 人员类型
  empType: string(name='emp_type', example='全职/其他人员/外包/实习/正式'),
}

// Zhx ir 结果
model ZhxIrResultStruct {
  // 日合计交易金额指数
  amtIndexV?: string(name='amt_index_v', example='13.34374889'),
  // 日合计交易笔数指标
  transNumIndexV?: string(name='trans_num_index_v', example='17.09792805'),
  // 日合计交易人数指数
  userNumIndexV?: string(name='user_num_index_v', example='user_num_index'),
  // 时间
  dt?: string(name='dt', example='20240321'),
  // 城市等级
  cityLevel?: string(name='city_level', example='4线'),
}

// 用户信息查询结果
model UserInfoResult {
  // hr主数据接口调用结果
  success: boolean(name='success', example='true'),
  // 调用信息
  message?: string(name='message', example='workNoList:[] must not null'),
  // 错误码
  errorCode?: string(name='error_code', example='错误码'),
  // 查询结果
  queryResultList: [ QueryResult ](name='query_result_list', example=''),
}

// 模型结果
model ModelResult {
  // 分数
  score: string(name='score', example='0.91'),
  // 模型id
  modelId: string(name='model_id', example='20230701_001'),
}

model QueryDuankaEvaluationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 请求流水ID
  requestId: string(name='request_id'),
  // 用户关联订单号
  orderId: string(name='order_id'),
  // 请求模型ID列表（目前仅支持每次请求一个模型），逗号分割
  modelList: string(name='model_list'),
  // 用户id
  userId: string(name='user_id'),
  // 用户id类型：
  // "ID_NO"： 身份证号,
  userIdType: string(name='user_id_type'),
  // 加密类型(目前只支持SHA256):
  // "MD5"：MD5（32位小写）,
  // "SHA256" ： SHA256（密文小写），              "SM3"： SM3（密文小写）
  encryptType: string(name='encrypt_type'),
  // 用户授权模版编号
  authTemplateNo: string(name='auth_template_no'),
  // 用户授权编码
  authNo: string(name='auth_no'),
  // 客户发起请求时间, 格式："yyyy-MM-dd HH:mm:ss"
  requestTime: string(name='request_time'),
}

model QueryDuankaEvaluationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 模型结果，数组返回
  result?: [ ModelResult ](name='result'),
  // 请求流水ID
  requestId?: string(name='request_id'),
}

/**
 * Description: 查询断卡结果
 * Summary: 查询断卡结果
 */
async function queryDuankaEvaluation(request: QueryDuankaEvaluationRequest): QueryDuankaEvaluationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDuankaEvaluationEx(request, headers, runtime);
}

/**
 * Description: 查询断卡结果
 * Summary: 查询断卡结果
 */
async function queryDuankaEvaluationEx(request: QueryDuankaEvaluationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDuankaEvaluationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.duanka.duanka.evaluation.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryHrUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 花名列表
  nickNameList?: [ string ](name='nick_name_list'),
  // 域账户列表
  loginAccountList?: [ string ](name='login_account_list'),
}

model QueryHrUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询用户信息结果
  userInfoResult?: UserInfoResult(name='user_info_result'),
}

/**
 * Description: hr主数据用户信息查询接口
 * Summary: hr主数据用户信息查询接口
 */
async function queryHrUser(request: QueryHrUserRequest): QueryHrUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryHrUserEx(request, headers, runtime);
}

/**
 * Description: hr主数据用户信息查询接口
 * Summary: hr主数据用户信息查询接口
 */
async function queryHrUserEx(request: QueryHrUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryHrUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.duanka.hr.user.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySkyholdResRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 业务biz_code
  bizCode: string(name='biz_code'),
  // 查询key
  keyId: string(name='key_id'),
  // 渠道code
  channelCode: string(name='channel_code'),
  // 客户id
  customerId: string(name='customer_id'),
  // 授权码
  authCode?: string(name='auth_code'),
}

model QuerySkyholdResResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询结果
  jsonRes?: string(name='json_res'),
}

/**
 * Description: 天擎数据接口查询
 * Summary: 天擎数据接口查询
 */
async function querySkyholdRes(request: QuerySkyholdResRequest): QuerySkyholdResResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySkyholdResEx(request, headers, runtime);
}

/**
 * Description: 天擎数据接口查询
 * Summary: 天擎数据接口查询
 */
async function querySkyholdResEx(request: QuerySkyholdResRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySkyholdResResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.duanka.skyhold.res.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCommonScoreRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 用户授权编码
  authNo: string(name='auth_no'),
  // 模型id
  modelId: string(name='model_id'),
  // 用户id（客户身份证号/手机号的md5/sha256散列值）
  userId: string(name='user_id'),
  // 用户id类型（身份证号：ID_NO；手机号：MOBILE_NO）
  userIdType: string(name='user_id_type'),
  // user_id 散列类型: "MD5"：MD5（小写）, "SHA256" ： SHA256（小写）， "SM3"： SM3（小写）
  encryptType: string(name='encrypt_type'),
  // 客户编码
  customerCode: string(name='customer_code'),
  // 流水号，串联链路用，非必填
  transNo?: string(name='trans_no'),
  // encrypt_type类型的散列后的操作，默认为空不加密。
  // 如启用，需要对散列后的user_id 加密，可选用如下算法，类型1、AES/ECB/PKCS5PADDING 
  // 在加密后的二进制需要以字符集UTF-8，编码base64 方式赋值给user_id传输。
  // 示例：AES秘钥：base64_aes_key = "CZqWzQ5JL8s5Zx2XVpGZGw=="，报文：plaintext = "Hello, 蚂蚁。" ，使用算法： AES/ECB/PKCS5PADDING ；密文：SI1wU1ePSFoMy5YzuxclFkbZ/FIXUHPRDbKBW85WolY=，配置了此项user_id应该传输此密文。
  userIdHashEncrypt?: string(name='user_id_hash_encrypt'),
}

model QueryCommonScoreResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 模型分数
  score?: string(name='score'),
  // 流水号
  transNo?: string(name='trans_no'),
}

/**
 * Description: 通用查询
 * Summary: 通用查询
 */
async function queryCommonScore(request: QueryCommonScoreRequest): QueryCommonScoreResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCommonScoreEx(request, headers, runtime);
}

/**
 * Description: 通用查询
 * Summary: 通用查询
 */
async function queryCommonScoreEx(request: QueryCommonScoreRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCommonScoreResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.duanka.common.score.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SubmitYunfengdieAuditRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 接口调用参数
  params: string(name='params'),
  // 请求头参数
  headers: string(name='headers'),
}

model SubmitYunfengdieAuditResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 云凤蝶工单提交相应JSON
  result?: string(name='result'),
}

/**
 * Description: 云凤蝶工单提交接口
 * Summary: 云凤蝶工单提交接口
 */
async function submitYunfengdieAudit(request: SubmitYunfengdieAuditRequest): SubmitYunfengdieAuditResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return submitYunfengdieAuditEx(request, headers, runtime);
}

/**
 * Description: 云凤蝶工单提交接口
 * Summary: 云凤蝶工单提交接口
 */
async function submitYunfengdieAuditEx(request: SubmitYunfengdieAuditRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitYunfengdieAuditResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.duanka.yunfengdie.audit.submit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportAistudioOssRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 阿里云oss路径
  aliyunOssPath: string(name='aliyun_oss_path'),
  // 主站oss路径
  antOssPath: string(name='ant_oss_path'),
}

model ImportAistudioOssResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 文件转存接口
 * Summary: 文件转存接口
 */
async function importAistudioOss(request: ImportAistudioOssRequest): ImportAistudioOssResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importAistudioOssEx(request, headers, runtime);
}

/**
 * Description: 文件转存接口
 * Summary: 文件转存接口
 */
async function importAistudioOssEx(request: ImportAistudioOssRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportAistudioOssResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.duanka.aistudio.oss.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckAistudioModelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 业务唯一码（可填model_id）
  bizCode: string(name='biz_code'),
  // 业务类型（TDI平台填TDI）
  bizType: string(name='biz_type'),
  // 模型类型（1：离线模型，2：在线模型，3：既是离线也是在线）
  modelType: long(name='model_type'),
  // 所需要验收服务的list
  // 1. PRESSURE
  // 2. RUNTIMUE
  // 3. SAFETY
  serviceSelector: string(name='service_selector'),
  // 离线模型oss路径
  offlineModelPath?: string(name='offline_model_path'),
  // 在线模型oss路径
  onlineModelPath?: string(name='online_model_path'),
  // 模型脚本oss路径
  scriptPath: string(name='script_path'),
  // 验证样本（csv格式，包括保留列、特征列和分数）的OSS路径
  samplePath: string(name='sample_path'),
  // 验证样本保留列的list
  remainList: string(name='remain_list'),
  // 验证样本特征列的list
  featureList: string(name='feature_list'),
  // 验证样本分数列
  scoreCol: string(name='score_col'),
  // aistudio docker镜像指定，若未指定，则默认为
  // reg.docker.alibaba-inc.com/aii/aistudio:aistudio-108521006-1633157052-1690290565806
  dockerImage?: string(name='docker_image'),
  // 在线模型压测核数，默认为1
  pmCore?: long(name='pm_core'),
  // 在线模型压测内存大小（GB），默认为2
  pmMem?: long(name='pm_mem'),
  // 离线模型批次大小，默认2000
  batchSize?: string(name='batch_size'),
}

model CheckAistudioModelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 异步任务id
  taskId?: string(name='task_id'),
}

/**
 * Description: 模型验收服务
 * Summary: 模型验收服务
 */
async function checkAistudioModel(request: CheckAistudioModelRequest): CheckAistudioModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkAistudioModelEx(request, headers, runtime);
}

/**
 * Description: 模型验收服务
 * Summary: 模型验收服务
 */
async function checkAistudioModelEx(request: CheckAistudioModelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckAistudioModelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.duanka.aistudio.model.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAistudioModelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 任务id
  taskId: string(name='task_id'),
}

model QueryAistudioModelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务唯一id
  bizCode?: string(name='biz_code'),
  // 压测报告
  pressureReport?: string(name='pressure_report'),
  // 运行态报告
  runtimeReport?: string(name='runtime_report'),
  // 安全报告
  safetyReport?: string(name='safety_report'),
}

/**
 * Description: 模型验收服务结果查询
 * Summary: 模型验收服务结果查询
 */
async function queryAistudioModel(request: QueryAistudioModelRequest): QueryAistudioModelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAistudioModelEx(request, headers, runtime);
}

/**
 * Description: 模型验收服务结果查询
 * Summary: 模型验收服务结果查询
 */
async function queryAistudioModelEx(request: QueryAistudioModelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAistudioModelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.duanka.aistudio.model.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBacktrackScoreRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 用户授权编码
  authNo: string(name='auth_no'),
  // 模型id
  modelId: string(name='model_id'),
  // 用户id（客户身份证号/手机号的md5/sha256/sm3散列值）
  userId: string(name='user_id'),
  // 用户id类型（身份证号：ID_NO；手机号：MOBILE_NO）
  userIdType: string(name='user_id_type'),
  // user_id 散列类型: "MD5"：MD5（小写）, "SHA256" ： SHA256（小写）， "SM3"： SM3（小写）
  encryptType: string(name='encrypt_type'),
  // 	
  // 客户编码
  customerCode: string(name='customer_code'),
  // 流水号，串联链路用，非必填
  transNo?: string(name='trans_no'),
  // encrypt_type类型的散列后的操作，默认为空不加密。 如启用，需要对散列后的user_id 加密，可选用如下算法，类型1、AES/ECB/PKCS5PADDING 在加密后的二进制需要以字符集UTF-8，编码base64 方式赋值给user_id传输。 示例：AES秘钥：base64_aes_key = "CZqWzQ5JL8s5Zx2XVpGZGw=="，报文：plaintext = "Hello, 蚂蚁。" ，使用算法： AES/ECB/PKCS5PADDING ；密文：SI1wU1ePSFoMy5YzuxclFkbZ/FIXUHPRDbKBW85WolY=，配置了此项user_id应该传输此密文。
  userIdHashEncrypt?: string(name='user_id_hash_encrypt'),
  // 回溯采样日期
  sampleDate: string(name='sample_date'),
}

model QueryBacktrackScoreResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 模型分数
  score?: string(name='score'),
  // 流水号
  transNo?: string(name='trans_no'),
}

/**
 * Description: 通用查询-回溯
 * Summary: 通用查询-回溯
 */
async function queryBacktrackScore(request: QueryBacktrackScoreRequest): QueryBacktrackScoreResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBacktrackScoreEx(request, headers, runtime);
}

/**
 * Description: 通用查询-回溯
 * Summary: 通用查询-回溯
 */
async function queryBacktrackScoreEx(request: QueryBacktrackScoreRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBacktrackScoreResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.duanka.backtrack.score.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIrBrandRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 品牌MD5的 32位小写
  brandmd5: string(name='brandmd5'),
  // 开始日期，包含填写时间 ，目前与end_date最大间隔不大于7天
  beginDate: string(name='begin_date'),
  // 结束日期，包含填写时间， 目前与start_date最大间隔不大于7天
  endDate: string(name='end_date'),
  // 场景码,brand_overview 品牌汇总；brand_citylevel 品牌城市汇总
  scene: string(name='scene'),
}

model QueryIrBrandResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果
  dataList?: [ ZhxIrResultStruct ](name='data_list'),
}

/**
 * Description: 品牌研究数据查询
 * Summary: 品牌研究数据查询
 */
async function queryIrBrand(request: QueryIrBrandRequest): QueryIrBrandResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIrBrandEx(request, headers, runtime);
}

/**
 * Description: 品牌研究数据查询
 * Summary: 品牌研究数据查询
 */
async function queryIrBrandEx(request: QueryIrBrandRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIrBrandResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.duanka.ir.brand.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

