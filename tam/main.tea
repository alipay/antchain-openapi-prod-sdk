import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.3.4',
    _prod_code = 'TAM',
    _prod_channel = 'undefined'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 附件上传表单参数
model FormParam {
  //  
  ossAccessKeyId: string(name='oss_access_key_id', example=' '),
  //  
  callback: string(name='callback', example=' '),
  //  
  key: string(name='key', example=' '),
  //  
  policy: string(name='policy', example=' '),
  //  
  signature: string(name='signature', example=' '),
  //  
  successActionStatus: string(name='success_action_status', example=' '),
  //  
  appName: string(name='app_name', example=' '),
}

// 附件上传
model UploadRequest {
  // 文件流/文件地址
  stream: string(name='stream', example='http://actamweb.oss-cn-hzfinance.aliyuncs.com/tmp/2021-09-'),
  // 文件名称
  filename: string(name='filename', example='项目说明'),
  // 内外工号
  user: string(name='user', example='00124314'),
  // 附件的关联对象类型
  targetType: string(name='target_type', example='Issue'),
  // 附件的关联对象ID
  targetId: long(name='target_id', example='12412'),
}

// 返回结果
model ResultMap {
  // name
  name: string(name='name', example='name'),
  // value
  value: string(name='value', example='value'),
}

// 文件集合
model UploadRequestArray {
  // 文件数据
  uploadArray: UploadRequest(name='upload_array', example='[uploadResult,uploadResult]'),
}

// 事件详情
model Emergency {
  // 标题
  title: string(name='title', example=' '),
  // 账号
  account: string(name='account', example=' '),
  // 姓名
  name: string(name='name', example=' '),
  // 手机号
  phone: string(name='phone', example=' '),
  // 邮箱
  email: string(name='email', example=' '),
  // 钉钉群
  group: string(name='group', example=' '),
  // 当前记录状态
  status: string(name='status', example='当前记录状态( SUCCESS_START发起成功， FAIL_STAT发起失败， FAIL_CONN未接通， SUCCESS_CONN已接通)'),
}

// aces产品
model AcesProduct {
  //  
  cnName: string(name='cn_name', example='测试产品'),
  //  
  enName?: string(name='en_name', example='testName'),
  //  
  code: string(name='code', example='BJXY'),
  // 产品owner
  owner?: string(name='owner', example=' '),
  // 产品创建时间
  createTime: string(name='create_time', example=' '),
  // 产品修改时间
  updateTime: string(name='update_time', example=' '),
  //  
  description?: string(name='description', example=' '),
  //  
  l1?: string(name='l1', example=' '),
  //  
  l2?: string(name='l2', example=' '),
}

// 返回结果
model ResultOncall {
  // 是否成功
  success: string(name='success', example=' '),
  // 提示信息
  resultMsg: string(name='result_msg', example=' '),
  // 保存的工单主键id（成功才有）
  id?: string(name='id', example=' '),
}

// 商务中心项目基础结构
model ProjectBase {
  // 项目记录ID
  id?: string(name='id', example='1000111'),
  // 项目可读编码
  projectCode?: string(name='project_code', example='xxx'),
  // 项目名称
  title?: string(name='title', example='杭州大数据局项目'),
  // 项目来源：蚂蚁、阿里云、合作伙伴 ProjectSource.getKey() ANTCLOUD("ANTCLOUD", "蚂蚁区块链"), ALIYUN("ALIYUN", "阿里云"), PARTNER("PARTNER", "合作伙伴");
  source?: string(name='source', example='蚂蚁'),
  // 签约方（总包方）。蚂蚁、阿里云 ANTCLOUD("ANTCLOUD", "蚂蚁区块链"), ALIYUN("ALIYUN", "阿里云"),
  contractor?: string(name='contractor', example='ANTCLOUD'),
  // 项目所在阶段
  stage?: string(name='stage', example='xxx'),
  // 项目状态
  status?: string(name='status', example='xxx'),
  // 预计签约日期
  expectConDate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='expect_con_date', example='2018-10-10T10:10:00Z'),
  // 预估签约金额
  expectConAmt?: string(name='expect_con_amt', example='100'),
  // 是否需要交付。1需要，0不需要
  needPm?: string(name='need_pm', example='1'),
  // 是否需要提前”进场“。1需要，0不需要。
  needAdEntry?: string(name='need_ad_entry', example='1'),
  // 合作伙伴Id
  partnerId?: string(name='partner_id', example='111'),
  // partnerName
  partnerName?: string(name='partner_name', example='阿里云'),
  // 阿里云Bpid
  aliyunBpid?: string(name='aliyun_bpid', example='1'),
  // 客户ID
  customerId?: string(name='customer_id', example='111'),
  // 客户名称
  customerName?: string(name='customer_name', example='阿里云'),
  // BD
  bdWorkNo?: string(name='bd_work_no', example='111'),
  // PM
  pmWorkNos?: [ string ](name='pm_work_nos', example=''),
  //  
  tamList?: [ string ](name='tam_list', example=''),
  //  
  bdList?: [ string ](name='bd_list', example=''),
  //  
  tmList?: [ string ](name='tm_list', example=''),
  //  
  pmList?: [ string ](name='pm_list', example=''),
}

// 返回结构
model ResultData {
  // data
  data: ResultMap(name='data', example='data'),
}

// ACES系统接收的项目信息
model AcesProject {
  // 项目id
  projectId: string(name='project_id', example='1000231'),
  // 项目名称
  projectName: string(name='project_name', example='测试'),
  // 客户id
  customerId: string(name='customer_id', example='200003020121'),
  // 客户名称
  customerName: string(name='customer_name', example='测试'),
  // 产品线
  projectLine?: string(name='project_line', example='测试'),
  // 业务线
  workLine?: string(name='work_line', example='测试'),
  // 业务分类
  bizType?: string(name='biz_type', example='Baas'),
  // 项目大阶段
  projectBigStage?: string(name='project_big_stage', example='售后'),
  // 转维状态
  opStatus?: string(name='op_status', example='A1'),
  // 交付阶段
  deliver?: string(name='deliver', example='交付完成'),
  // 是否售后
  afterSale?: boolean(name='after_sale', example='true, false'),
  //  
  aliyunBpid?: string(name='aliyun_bpid', example=' '),
  // 解决方案架构师
  sa: string(name='sa', example='康乐'),
  // 项目经理
  pm: string(name='pm', example='康乐'),
  // 商务经理
  bd: string(name='bd', example='康乐'),
  // 交付经理
  tm: string(name='tm', example='康乐'),
  // 项目状态
  projectStage?: string(name='project_stage', example='1b 未签-POC-已完成'),
  // 项目交付状态（未启动、已启动等）
  projectStatus?: string(name='project_status', example='NOT_START'),
  // 是否需要交付 1需要 0不需要
  needDeliver: string(name='need_deliver', example='1'),
  // 是否需要提前进场 1需要 0不需要
  needAdEntry: string(name='need_ad_entry', example='1'),
  // 是否需要竞标 1需要 0不需要
  needTender: string(name='need_tender', example='1'),
  // 张三
  cre?: string(name='cre', example='张三'),
}

//  
model Upload {
  //  
  endpoint: string(name='endpoint', example=' '),
  //  
  fileUniqueId: string(name='file_unique_id', example=' '),
  //  
  fileUrl: string(name='file_url', example=' '),
  //  
  formParam: FormParam(name='form_param', example=''),
}

// 提交表单入参
model SubmitRequest {
  // 测试
  title: string(name='title', example='测试'),
  // 问题描述（富文本）
  description: string(name='description', example='无'),
  // 影响
  influence: string(name='influence', example='影响'),
  // 账号
  account: string(name='account', example=' '),
  // 姓名
  name: string(name='name', example=' '),
  // 手机号
  phone?: string(name='phone', example=' '),
  // 邮箱
  email?: string(name='email', example=' '),
  // 钉钉群
  group: string(name='group', example=' '),
  // 校验令牌（接入RDS校验）
  token: string(name='token', example=' '),
  // ip
  ip: string(name='ip', example=' '),
  // 验证码
  verifyCode: string(name='verify_code', example=' '),
  // RDS的bizNo
  bizNo: string(name='biz_no', example=' '),
  // 公有化PUBLIC、私有化PRIVATE
  type: string(name='type', example=' '),
  // 上传附件的URL
  fileUrl?: [ string ](name='file_url', example=' '),
}

// 返回值
model ResultArray {
  // 数组
  resultArray: [ string ](name='result_array', example='[1,2,3]'),
}

model QueryCustomRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 分页页码
  pageNo: long(name='page_no'),
  // 分页长度，最大不超过50
  pageSize: long(maximum=50, minimum=10, name='page_size'),
  // 项目id，非必填；可通过项目id查询单个项目
  projectId?: string(name='project_id'),
}

model QueryCustomResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 调用结果是否成功标识
  success?: boolean(name='success'),
  // 项目数组
  data?: [ AcesProject ](name='data'),
  // 项目总数
  total?: long(name='total'),
}

/**
 * Description: 查询售后中心项目信息
 * Summary: 查询售后中心项目信息
 */
async function queryCustom(request: QueryCustomRequest): QueryCustomResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCustomEx(request, headers, runtime);
}

/**
 * Description: 查询售后中心项目信息
 * Summary: 查询售后中心项目信息
 */
async function queryCustomEx(request: QueryCustomRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCustomResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.tam.custom.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  l5codeList: [ string ](name='l5code_list'),
}

model QueryCodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  l3codeList?: [ string ](name='l3code_list'),
  //  
  success?: boolean(name='success'),
}

/**
 * Description:  
 * Summary: 查询双百L3code
 */
async function queryCode(request: QueryCodeRequest): QueryCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCodeEx(request, headers, runtime);
}

/**
 * Description:  
 * Summary: 查询双百L3code
 */
async function queryCodeEx(request: QueryCodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.tam.code.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryProductRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // l3code的数组
  l3codeList: [ string ](name='l3code_list'),
}

model QueryProductResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  productList?: [ AcesProduct ](name='product_list'),
  //  
  success?: boolean(name='success'),
}

/**
 * Description:  
 * Summary: 根据l3code列表查询产品信息
 */
async function queryProduct(request: QueryProductRequest): QueryProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryProductEx(request, headers, runtime);
}

/**
 * Description:  
 * Summary: 根据l3code列表查询产品信息
 */
async function queryProductEx(request: QueryProductRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryProductResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.tam.product.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryProjectPagequeryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 兼容BD待客下单对外暴露项目Id查询
  id?: string(name='id'),
  // 项目唯一编码
  projectCode?: string(name='project_code'),
  // 项目名称，支持模糊
  title?: string(name='title'),
  // 客户id
  customerId?: string(name='customer_id'),
  // 客户名称
  customerName?: string(name='customer_name'),
  // 项目阶段，支持多个过滤
  status?: [ string ](name='status'),
  // 项目阶段，支持多个过滤
  stages?: [ string ](name='stages'),
  // 项目BD工号列表
  bdWorkNos?: [ string ](name='bd_work_nos'),
  // 交付项目经理工号列表
  pmWorkNos?: [ string ](name='pm_work_nos'),
  // 页面大小
  pageSize?: long(name='page_size'),
  // 当前页面
  currentPage?: long(name='current_page'),
}

model QueryProjectPagequeryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据
  projectList?: [ ProjectBase ](name='project_list'),
  // 是否成功
  success?: boolean(name='success'),
}

/**
 * Description: 查询商务中心项目，便于获取增值服务项目
 * Summary: 查询商务中心项目，便于获取增值服务项目
 */
async function queryProjectPagequery(request: QueryProjectPagequeryRequest): QueryProjectPagequeryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryProjectPagequeryEx(request, headers, runtime);
}

/**
 * Description: 查询商务中心项目，便于获取增值服务项目
 * Summary: 查询商务中心项目，便于获取增值服务项目
 */
async function queryProjectPagequeryEx(request: QueryProjectPagequeryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryProjectPagequeryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.tam.project.pagequery.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryProjectGetprojectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 项目id
  projectId?: string(name='project_id'),
}

model QueryProjectGetprojectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  //  
  projectList?: ProjectBase(name='project_list'),
  //  
  success?: boolean(name='success'),
}

/**
 * Description: 查询商务中心项目信息
 * Summary: 查询商务中心项目信息
 */
async function queryProjectGetproject(request: QueryProjectGetprojectRequest): QueryProjectGetprojectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryProjectGetprojectEx(request, headers, runtime);
}

/**
 * Description: 查询商务中心项目信息
 * Summary: 查询商务中心项目信息
 */
async function queryProjectGetprojectEx(request: QueryProjectGetprojectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryProjectGetprojectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.tam.project.getproject.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveAoneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 产品线
  productLine: string(name='product_line'),
  // 产品名称
  productName: string(name='product_name'),
  // 问题类型
  issueType: string(name='issue_type'),
  // 期望日期
  expectedAt?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='expected_at'),
  // 创建者的工号
  author: string(name='author'),
  // 解决者/指派者的工号
  assignedTo: string(name='assigned_to'),
  // 标题
  subject: string(name='subject'),
  // 描述
  description: string(name='description'),
  // 跟踪者的工号
  watcherUsers: [ string ](name='watcher_users'),
  // 优先级
  priorityId: long(name='priority_id'),
}

model SaveAoneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回数据
  result?: string(name='result'),
}

/**
 * Description: 提交到aone
 * Summary: 提交到aone
 */
async function saveAone(request: SaveAoneRequest): SaveAoneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveAoneEx(request, headers, runtime);
}

/**
 * Description: 提交到aone
 * Summary: 提交到aone
 */
async function saveAoneEx(request: SaveAoneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveAoneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.tam.aone.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAoneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 项目id
  id: long(name='id'),
}

model QueryAoneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回值
  data?: string(name='data'),
}

/**
 * Description: 查询aone详情
 * Summary: 查询aone详情
 */
async function queryAone(request: QueryAoneRequest): QueryAoneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAoneEx(request, headers, runtime);
}

/**
 * Description: 查询aone详情
 * Summary: 查询aone详情
 */
async function queryAoneEx(request: QueryAoneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAoneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.tam.aone.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportScOperationcenterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 提交表单入参
  submitRequest: SubmitRequest(name='submit_request'),
  // 站位
  flagId?: string(name='flag_id'),
}

model ImportScOperationcenterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
  // 保存的工单主键id（成功才有）
  id?: string(name='id'),
}

/**
 * Description: 智能外呼需求，前端提交表单后调用此接口将数据落入售后中心
 * Summary: 前端提交需求表单
 */
async function importScOperationcenter(request: ImportScOperationcenterRequest): ImportScOperationcenterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importScOperationcenterEx(request, headers, runtime);
}

/**
 * Description: 智能外呼需求，前端提交表单后调用此接口将数据落入售后中心
 * Summary: 前端提交需求表单
 */
async function importScOperationcenterEx(request: ImportScOperationcenterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportScOperationcenterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.tam.sc.operationcenter.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateScOperationcenterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 手机号/邮箱
  receiver: string(name='receiver'),
}

model OperateScOperationcenterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
}

/**
 * Description: 发送验证码
 * Summary: 发送验证码
 */
async function operateScOperationcenter(request: OperateScOperationcenterRequest): OperateScOperationcenterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateScOperationcenterEx(request, headers, runtime);
}

/**
 * Description: 发送验证码
 * Summary: 发送验证码
 */
async function operateScOperationcenterEx(request: OperateScOperationcenterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateScOperationcenterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.tam.sc.operationcenter.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryScOperationcenterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // id
  id: string(name='id'),
}

model QueryScOperationcenterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
  // 事件详情
  data?: Emergency(name='data'),
}

/**
 * Description: 查询跟进情况
 * Summary: 查询跟进情况
 */
async function queryScOperationcenter(request: QueryScOperationcenterRequest): QueryScOperationcenterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryScOperationcenterEx(request, headers, runtime);
}

/**
 * Description: 查询跟进情况
 * Summary: 查询跟进情况
 */
async function queryScOperationcenterEx(request: QueryScOperationcenterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryScOperationcenterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.tam.sc.operationcenter.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportScFileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  
  key: string(name='key'),
  //  
  fileName: string(name='file_name'),
  //  
  businessName: string(name='business_name'),
}

model ImportScFileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
  //  
  data?: Upload(name='data'),
}

/**
 * Description: 附件上传
 * Summary: 附件上传
 */
async function importScFile(request: ImportScFileRequest): ImportScFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importScFileEx(request, headers, runtime);
}

/**
 * Description: 附件上传
 * Summary: 附件上传
 */
async function importScFileEx(request: ImportScFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportScFileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.tam.sc.file.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryScTestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model QueryScTestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description:  
 * Summary: 测试
 */
async function queryScTest(request: QueryScTestRequest): QueryScTestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryScTestEx(request, headers, runtime);
}

/**
 * Description:  
 * Summary: 测试
 */
async function queryScTestEx(request: QueryScTestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryScTestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.tam.sc.test.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

