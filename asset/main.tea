import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.12',
    _prod_code = 'ASSET',
    _prod_channel = 'default'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 子指标结构体
model SubMetricData {
  // 日期
  date: string(name='date', example='2024-09-11'),
  // 指标类型:OPERATING_INCOME, REPAY_AMOUNT, REPAY_NUMBER, REPAY_USER_NUMBER, REPAY_AVG_AMOUNT, ALI_DST_AMT,OPERATING_COST, GROSS_PROFIT_MARGIN,VOUCHER_CONVERSION, USER_CONVERSION
  type: string(name='type', example='OPERATING_INCOME'),
  // 指标值
  value: string(name='value', example='891762.89'),
}

// 查询数据统计指标结果
model MetricData {
  // 租户指标: OPERATING_INCOME, REPAY_AMOUNT, REPAY_NUMBER, REPAY_USER_NUMBER, REPAY_AVG_AMOUNT, ALI_DST_AMT
  type: string(name='type', example='OPERATING_INCOME'),
  // 指标值
  total: string(name='total', example='ds190c968e87a001b951spfinassetopprod'),
  // 子指标列表
  subList: [ SubMetricData ](name='sub_list', example='[{"date":"2024-09-11","type":"OPERATING_INCOME","value":"634744.89"},{"date":"2024-09-12","type":"OPERATING_INCOME","value":"891762.89"}]'),
}

// 过程转化指标结果
model ProcessConversionMetricData {
  // 发放数
  send: long(name='send', example='24765874'),
  // 核销数
  used: long(name='used', example='140302'),
  // 核销转化率
  rate: string(name='rate', example='0.005665'),
}

// 核销明细月文件
model BenefitWriteOffMonthFileData {
  // 所属月份
  billingMonth: string(name='billing_month', example='202409'),
  // AFTS 上传到文件 id
  fileFiledId: string(name='file_filed_id', example='A*ydC-QapBk8gAAAAAAAAAAAAAT-iRAw'),
}

model QuerySupplierMonthwriteofffileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 云站租户 id
  cloudTenantId: string(name='cloud_tenant_id'),
  // 请求唯一id	
  // 
  requestUniqueId?: string(name='request_unique_id'),
  // 202408
  billingMonth?: string(name='billing_month'),
}

model QuerySupplierMonthwriteofffileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 月度核销文件列表
  data?: [ BenefitWriteOffMonthFileData ](name='data'),
}

/**
 * Description: 获取核销明细文件
 * Summary: 获取核销明细文件
 */
async function querySupplierMonthwriteofffile(request: QuerySupplierMonthwriteofffileRequest): QuerySupplierMonthwriteofffileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySupplierMonthwriteofffileEx(request, headers, runtime);
}

/**
 * Description: 获取核销明细文件
 * Summary: 获取核销明细文件
 */
async function querySupplierMonthwriteofffileEx(request: QuerySupplierMonthwriteofffileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySupplierMonthwriteofffileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.asset.supplier.monthwriteofffile.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySupplierFundamtRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求唯一id	
  // 
  requestUniqueId?: string(name='request_unique_id'),
  // 云站供应商 租户 id
  cloudTenantId: string(name='cloud_tenant_id'),
}

model QuerySupplierFundamtResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 出资账户
  fundAccount?: string(name='fund_account'),
  // 核销金额
  writeOffAmount?: long(name='write_off_amount'),
  // 供应商被占用总金额，单位分
  totalAmount?: long(name='total_amount'),
}

/**
 * Description: 供应商资金池金额明细
 * Summary: 供应商资金池金额明细
 */
async function querySupplierFundamt(request: QuerySupplierFundamtRequest): QuerySupplierFundamtResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySupplierFundamtEx(request, headers, runtime);
}

/**
 * Description: 供应商资金池金额明细
 * Summary: 供应商资金池金额明细
 */
async function querySupplierFundamtEx(request: QuerySupplierFundamtRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySupplierFundamtResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.asset.supplier.fundamt.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddSupplierPaymentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 云上租户id 
  cloudTenantId: string(name='cloud_tenant_id'),
  // 打款金额，单位分
  paymentAmount: long(name='payment_amount'),
  // 服务商名称 - 即云租户名称，比如南京飞翰
  supplierName: string(name='supplier_name'),
  // 打款日期
  paymentDate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='payment_date'),
  // 唯一请求id
  requestUniqueId: string(name='request_unique_id'),
}

model AddSupplierPaymentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 添加打款记录成功
  data?: boolean(name='data'),
}

/**
 * Description: 用于录入供应商打款金额
 * Summary: 供应商资金打款接口
 */
async function addSupplierPayment(request: AddSupplierPaymentRequest): AddSupplierPaymentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addSupplierPaymentEx(request, headers, runtime);
}

/**
 * Description: 用于录入供应商打款金额
 * Summary: 供应商资金打款接口
 */
async function addSupplierPaymentEx(request: AddSupplierPaymentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddSupplierPaymentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.asset.supplier.payment.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryStatisticsBudgetRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户id
  // 
  tenantId: string(name='tenant_id'),
  // 请求唯一id
  requestUniqueId?: string(name='request_unique_id'),
}

model QueryStatisticsBudgetResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前租户总预算金额
  data?: string(name='data'),
}

/**
 * Description: 查询数据统计预算金额
 * Summary: 查询数据统计预算金额
 */
async function queryStatisticsBudget(request: QueryStatisticsBudgetRequest): QueryStatisticsBudgetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryStatisticsBudgetEx(request, headers, runtime);
}

/**
 * Description: 查询数据统计预算金额
 * Summary: 查询数据统计预算金额
 */
async function queryStatisticsBudgetEx(request: QueryStatisticsBudgetRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryStatisticsBudgetResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.asset.statistics.budget.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryStatisticsMetricsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户id
  tenantId: string(name='tenant_id'),
  // 请求唯一id
  requestUniqueId?: string(name='request_unique_id'),
  // 租户指标: OPERATING_INCOME, REPAY_AMOUNT, REPAY_NUMBER, REPAY_USER_NUMBER, REPAY_AVG_AMOUNT, ALI_DST_AMT
  type: string(name='type'),
  // 查询开始时间: DAY:20240911; MONTH:202409
  startDate: string(name='start_date'),
  // 查询结束日期
  endDate: string(name='end_date'),
  // 日期单位: DAY,MONTH
  dateUnit: string(name='date_unit'),
}

model QueryStatisticsMetricsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 统计指标结果
  data?: MetricData(name='data'),
}

/**
 * Description: 查询数据统计指标
 * Summary: 查询数据统计指标
 */
async function queryStatisticsMetrics(request: QueryStatisticsMetricsRequest): QueryStatisticsMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryStatisticsMetricsEx(request, headers, runtime);
}

/**
 * Description: 查询数据统计指标
 * Summary: 查询数据统计指标
 */
async function queryStatisticsMetricsEx(request: QueryStatisticsMetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryStatisticsMetricsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.asset.statistics.metrics.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryStatisticsConversionmetricsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户id
  // 
  tenantId: string(name='tenant_id'),
  // 请求唯一id
  // 
  requestUniqueId?: string(name='request_unique_id'),
  // VOUCHER_CONVERSION, USER_CONVERSION
  type: string(name='type'),
}

model QueryStatisticsConversionmetricsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 统计过程转化指标结果
  data?: ProcessConversionMetricData(name='data'),
}

/**
 * Description: 查询数据统计过程转化指标
 * Summary: 统计过程转化指标
 */
async function queryStatisticsConversionmetrics(request: QueryStatisticsConversionmetricsRequest): QueryStatisticsConversionmetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryStatisticsConversionmetricsEx(request, headers, runtime);
}

/**
 * Description: 查询数据统计过程转化指标
 * Summary: 统计过程转化指标
 */
async function queryStatisticsConversionmetricsEx(request: QueryStatisticsConversionmetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryStatisticsConversionmetricsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.asset.statistics.conversionmetrics.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

