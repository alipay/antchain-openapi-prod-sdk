import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.1.6',
    _prod_code = 'ADOM',
    _prod_channel = 'undefined'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

model UploadAppmarketOcrfileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 所购商品实例id
  instanceId: string(name='instance_id'),
  // 文件名
  fileName: string(name='file_name'),
}

model UploadAppmarketOcrfileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 文件上传url
  uploadUrl?: string(name='upload_url'),
  // 文件key
  fileKey?: string(name='file_key'),
}

/**
 * Description: 应用开放市场OCR服务-文件上传
 * Summary: 应用开放市场OCR服务-文件上传
 */
async function uploadAppmarketOcrfile(request: UploadAppmarketOcrfileRequest): UploadAppmarketOcrfileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadAppmarketOcrfileEx(request, headers, runtime);
}

/**
 * Description: 应用开放市场OCR服务-文件上传
 * Summary: 应用开放市场OCR服务-文件上传
 */
async function uploadAppmarketOcrfileEx(request: UploadAppmarketOcrfileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadAppmarketOcrfileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.adom.appmarket.ocrfile.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecAppmarketBusinesslicenseocrRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 商品实例id
  instanceId: string(name='instance_id'),
  // 文件key
  fileKey?: string(name='file_key'),
  // 文件url
  fileUrl?: string(name='file_url'),
  // 扩展信息
  ext?: string(name='ext'),
}

model ExecAppmarketBusinesslicenseocrResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 地址
  address?: string(name='address'),
  // 经营范围
  business?: string(name='business'),
  // 注册资本
  captial?: string(name='captial'),
  // 企业成立日期
  establishDate?: string(name='establish_date'),
  // 名称，控股股东名称
  name?: string(name='name'),
  // 法定代表人
  person?: string(name='person'),
  // 统一社会信用代码，控股股东证件号码
  regNum?: string(name='reg_num'),
  // 印章
  stamp?: string(name='stamp'),
  // 类型，如：有限责任公司(自然人独资)
  type?: string(name='type'),
  // 营业期限，营业执照有效期，控股股东证件有效期
  validPeriod?: string(name='valid_period'),
  // 标题，如"营业执照"
  title?: string(name='title'),
  // 颁发日期
  date?: string(name='date'),
  // 编号
  num?: string(name='num'),
  // 投资人
  investors?: string(name='investors'),
  // 组成形式
  formation?: string(name='formation'),
  // 注册日期
  dateOfRegistration?: string(name='date_of_registration'),
  // 经营者
  operators?: string(name='operators'),
}

/**
 * Description: 应用开放市场OCR服务-营业执照识别
 * Summary: 应用开放市场OCR服务-营业执照识别
 */
async function execAppmarketBusinesslicenseocr(request: ExecAppmarketBusinesslicenseocrRequest): ExecAppmarketBusinesslicenseocrResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execAppmarketBusinesslicenseocrEx(request, headers, runtime);
}

/**
 * Description: 应用开放市场OCR服务-营业执照识别
 * Summary: 应用开放市场OCR服务-营业执照识别
 */
async function execAppmarketBusinesslicenseocrEx(request: ExecAppmarketBusinesslicenseocrRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecAppmarketBusinesslicenseocrResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.adom.appmarket.businesslicenseocr.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppmarketPrivacyresultRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 商品实例id
  instanceId: string(name='instance_id'),
  // 执行记录id
  recordId: string(name='record_id'),
}

model QueryAppmarketPrivacyresultResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 隐私计算模型执行状态
  status?: string(name='status'),
  // 结果文件路径
  resultUrl?: string(name='result_url'),
  // 失败的原因
  failedReason?: string(name='failed_reason'),
  // 结构化出参
  structOutput?: string(name='struct_output'),
}

/**
 * Description: 应用开放市场隐私模型运行时链路-结果查询
 * Summary: 应用开放市场隐私模型运行时链路-结果查询
 */
async function queryAppmarketPrivacyresult(request: QueryAppmarketPrivacyresultRequest): QueryAppmarketPrivacyresultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppmarketPrivacyresultEx(request, headers, runtime);
}

/**
 * Description: 应用开放市场隐私模型运行时链路-结果查询
 * Summary: 应用开放市场隐私模型运行时链路-结果查询
 */
async function queryAppmarketPrivacyresultEx(request: QueryAppmarketPrivacyresultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppmarketPrivacyresultResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.adom.appmarket.privacyresult.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadAppmarketFileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 所购商品实例id
  instanceId: string(name='instance_id'),
  // 文件标识，用作文件名
  fileId: string(name='file_id'),
}

model UploadAppmarketFileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 文件上传url
  uploadUrl?: string(name='upload_url'),
}

/**
 * Description: 应用开放市场隐私模型运行时链路-文件上传
 * Summary: 应用开放市场隐私模型运行时链路-文件上传
 */
async function uploadAppmarketFile(request: UploadAppmarketFileRequest): UploadAppmarketFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadAppmarketFileEx(request, headers, runtime);
}

/**
 * Description: 应用开放市场隐私模型运行时链路-文件上传
 * Summary: 应用开放市场隐私模型运行时链路-文件上传
 */
async function uploadAppmarketFileEx(request: UploadAppmarketFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadAppmarketFileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.adom.appmarket.file.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecAppmarketPrivacymodelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 商品实例id
  instanceId: string(name='instance_id'),
  // 文件标识，文件上传时的入参
  fileId?: string(name='file_id'),
  // 结构化入参
  structInput?: string(name='struct_input'),
}

model ExecAppmarketPrivacymodelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 执行状态
  status?: string(name='status'),
  // 结果文件url
  resultUrl?: string(name='result_url'),
  // 执行失败原因
  failedReason?: string(name='failed_reason'),
  // 结构化出参
  structOutput?: string(name='struct_output'),
}

/**
 * Description: 应用开放市场隐私模型运行时链路-同步执行
 * Summary: 应用开放市场隐私模型运行时链路-同步执行
 */
async function execAppmarketPrivacymodel(request: ExecAppmarketPrivacymodelRequest): ExecAppmarketPrivacymodelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execAppmarketPrivacymodelEx(request, headers, runtime);
}

/**
 * Description: 应用开放市场隐私模型运行时链路-同步执行
 * Summary: 应用开放市场隐私模型运行时链路-同步执行
 */
async function execAppmarketPrivacymodelEx(request: ExecAppmarketPrivacymodelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecAppmarketPrivacymodelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.adom.appmarket.privacymodel.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SubmitAppmarketPrivacymodelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 商品实例id
  instanceId: string(name='instance_id'),
  // 文件名称
  fileId?: string(name='file_id'),
  // 结构化入参
  structInput?: string(name='struct_input'),
}

model SubmitAppmarketPrivacymodelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 异步提交执行记录id
  recordId?: string(name='record_id'),
}

/**
 * Description: 应用开放市场隐私模型运行时链路-提交执行
 * Summary: 应用开放市场隐私模型运行时链路-提交执行
 */
async function submitAppmarketPrivacymodel(request: SubmitAppmarketPrivacymodelRequest): SubmitAppmarketPrivacymodelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return submitAppmarketPrivacymodelEx(request, headers, runtime);
}

/**
 * Description: 应用开放市场隐私模型运行时链路-提交执行
 * Summary: 应用开放市场隐私模型运行时链路-提交执行
 */
async function submitAppmarketPrivacymodelEx(request: SubmitAppmarketPrivacymodelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitAppmarketPrivacymodelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.adom.appmarket.privacymodel.submit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

