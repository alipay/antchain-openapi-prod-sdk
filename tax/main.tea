import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.1.6',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 发票明细
model InvoiceItem {
  // 税收分类编码	
  spbm: string(name='spbm', example='xxx'),
  // 项目名称, 如果为折扣行，商品名称须与被折扣行的商品名称相同，不能多行折扣。
  mc: string(name='mc', example='xxx'),
  // 单位
  jldw?: string(name='jldw', example='xxx'),
  // 数量
  shul?: string(name='shul', example='10'),
  // 含税金额,2位小数
  je: string(name='je', example='10.11'),
  // 税率,当fplx!=51or53时，必填,3位小数，例1%为0.010；
  sl?: string(name='sl', example='0.01'),
  // 税额,当fplx!=51or53时，必填
  se?: string(name='se', example='10.11'),
  // 明细序号,从1开始递增
  mxxh: string(name='mxxh', example='2'),
  // 单价
  dj: string(name='dj', example='10.11'),
  // 规格型号
  ggxh?: string(name='ggxh', example='xxx'),
}

// 发票标准模型
model Invoice {
  // 备注
  bz?: string(name='bz', example='xxx'),
  // 复核人
  fhr?: string(name='fhr', example='xxx'),
  // 发票代码, 发票代码+发票号码唯一
  fpdm: string(name='fpdm', example='xxx'),
  // 发票号码,发票代码+发票号码唯一
  fphm: string(name='fphm', example='xxx'),
  // 发票类型代码,
  // 默认填:20:广东电子普通发票
  // 01：增值税专用发票
  // 04：增值税普通发票
  // 10：增值税电子普通发票
  // 51：重庆通用机打一联发票76
  // 53：重庆通用机打三联发票210
  // 90：重庆通用机打三联发票190
  fplx: string(name='fplx', example='20'),
  // 发票明细集合
  fpxxmxs?: [ InvoiceItem ](name='fpxxmxs', example='xxx'),
  // 发票状态代码,0 正常 1 失控 2 作废 3 红字 4 异常票
  fpztdm: string(name='fpztdm', example='0'),
  // 购买方地址、电话
  gfdzdh?: string(name='gfdzdh', example='xxx'),
  // 购买方名称
  gfmc: string(name='gfmc', example='xxx'),
  // 购买方纳税人识别号
  gfsh?: string(name='gfsh', example='xxx'),
  // 购买方银行账号
  gfyhzh?: string(name='gfyhzh', example='xxx'),
  // 购买方类型,1企业 2个人 3其他
  gmflx?: string(name='gmflx', example='1'),
  // 金额
  je: string(name='je', example='20.11'),
  // 价税合计	， 单位：元（2 位小数）
  jshj: string(name='jshj', example='10.11'),
  // 开票类型,0-蓝字发票；1-红字发票；
  kplx: string(name='kplx', example='1'),
  // 开票人
  kpr: string(name='kpr', example='xxx'),
  // 开票日期
  kprq: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='kprq', example='xxx'),
  // 清单标志,00:无清单 01:有清单
  qdbz?: string(name='qdbz', example='00'),
  // 认证状态
  rzdklbdjgdm?: string(name='rzdklbdjgdm', example='xxx'),
  // 认证日期
  rzdklbdrq?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='rzdklbdrq', example='2018-10-10T10:10:00Z'),
  // 税额,当发票类型代码	 fplx!=51or fplx!=53时，必填
  se?: string(name='se', example='10.11'),
  // 收款人
  skr?: string(name='skr', example='xxx'),
  // 税率标识,0不含税税率；1含税税率
  slbz: string(name='slbz', example='0'),
  // 所属税务机关代码:
  // 山东省343
  // 重庆市350
  // 广东省347
  ssdq: string(name='ssdq', example='343'),
  // 销售方地址、电话
  xfdzdh?: string(name='xfdzdh', example='xxx'),
  // 销售方名称
  xfmc: string(name='xfmc', example='xxx'),
  // 销售方纳税人识别号
  xfsh: string(name='xfsh', example='xxx'),
  // 销售方银行账号
  xfyhzh?: string(name='xfyhzh', example='xxx'),
  // 原发票代码, kplx开票类型为1时必填
  yfpdm?: string(name='yfpdm', example='xxx'),
  // 原发票号码,kplx开票类型为1时必填
  yfphm?: string(name='yfphm', example='xxx'),
  // 作废标志,0:未作废，1作废
  zfbz: string(name='zfbz', example='0'),
  // 作废时间
  zfsj?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='zfsj', example='xxx'),
  // 扩展字段
  extFiled: string(name='ext_filed', example='{abc:123,def:456}'),
}

model AuthCorpRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业注册地址和电话号码
  corpAddressPhoneNo: string(name='corp_address_phone_no'),
  // 企业银行账号
  corpBankNo: string(name='corp_bank_no'),
  // 填写公司名称
  corpName: string(name='corp_name'),
  // 企业授权秘钥
  corpPrivateKey: string(name='corp_private_key'),
  // 企业纳税人识别号
  corpTaxId: string(name='corp_tax_id'),
}

model AuthCorpResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 目前仅用于广州区块链发票开通企业信息推送
 * Summary: 区块链发票开通企业信息推送
 */
async function authCorp(request: AuthCorpRequest): AuthCorpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return authCorpEx(request, headers, runtime);
}

/**
 * Description: 目前仅用于广州区块链发票开通企业信息推送
 * Summary: 区块链发票开通企业信息推送
 */
async function authCorpEx(request: AuthCorpRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AuthCorpResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.tax.corp.auth', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushChargeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户
  bizTenant: string(name='biz_tenant'),
  // 平台分发,子业务类型，对应原来的authType.
  bizType: string(name='biz_type'),
  // 用户ID，根据业务对主体定义决定，比如票据业务的纳税人识别号
  customerId: string(name='customer_id'),
  // 系统编码,平台分发，定义枚举，全局用
  systemCode: string(name='system_code'),
  // 请求id
  taskRequestId: string(name='task_request_id'),
}

model PushChargeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 目前用于浙江票据的计费推送，其他主站环境还是继续使用msg。
 * Summary: 计费推送
 */
async function pushCharge(request: PushChargeRequest): PushChargeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushChargeEx(request, headers, runtime);
}

/**
 * Description: 目前用于浙江票据的计费推送，其他主站环境还是继续使用msg。
 * Summary: 计费推送
 */
async function pushChargeEx(request: PushChargeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushChargeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.tax.charge.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryChargeAuthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户
  bizTenant: string(name='biz_tenant'),
  // 授权类型,业务类型
  bizType: string(name='biz_type'),
}

model QueryChargeAuthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // OPEN:开通
  // STOP：停止
  // NOT_SALE：未授权
  authType?: string(name='auth_type'),
}

/**
 * Description: 查询计收费授权情况
 * Summary: 查询计收费授权情况
 */
async function queryChargeAuth(request: QueryChargeAuthRequest): QueryChargeAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryChargeAuthEx(request, headers, runtime);
}

/**
 * Description: 查询计收费授权情况
 * Summary: 查询计收费授权情况
 */
async function queryChargeAuthEx(request: QueryChargeAuthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryChargeAuthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.tax.charge.auth.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushIcmInvoiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 批次号
  pch: string(name='pch'),
  // 发票信息（json格式）
  fpxx: string(name='fpxx'),
  // 发票类型
  // 01：增值税专用发票
  // 04：增值税普通发票
  // 10：增值税电子普通发票
  fplx: string(name='fplx'),
  // 是否是历史数据推送
  islsp: boolean(name='islsp'),
}

model PushIcmInvoiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 目前仅用于广州区块链发票信息推送
 * Summary:  区块链发票信息推送
 */
async function pushIcmInvoice(request: PushIcmInvoiceRequest): PushIcmInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushIcmInvoiceEx(request, headers, runtime);
}

/**
 * Description: 目前仅用于广州区块链发票信息推送
 * Summary:  区块链发票信息推送
 */
async function pushIcmInvoiceEx(request: PushIcmInvoiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushIcmInvoiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.tax.icm.invoice.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIcmInvoiceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // ISV名称，用于标识合作的企业
  appId: string(name='app_id'),
  // 授权类型
  // 01:发票归集授权; 02:记账; 03:报销; 11:发票贷授权; （0X发票相关授权，1X金融类授权）
  authType: string(name='auth_type'),
  //  数据通知地址接口 (当type=02或者03时必填) 用于数据采集完毕后通知该接口如何取发票数据
  // 
  callbackUrl?: string(name='callback_url'),
  // java long型
  // 起始金额，当type=03（报销查询）时必填
  endAmount?: long(name='end_amount'),
  // 查询起始时间(当auth_type=02或者03时必填)
  // 当auth_type=02(记账查询)时，查询起始时间和查询截止时间必须在同一个月内，如查询起始日期是6.31，截止日期为7.1，则会提示查询时间不能跨月，最长时间为一个月
  // 最大查询范围为6.1-6.30
  endDate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='end_date'),
  // 非必填，不填则查询所有类型发票
  // "01": "增值税专用发票"
  // "04": "增值税普通发票"
  // "10": "增值税电子普通发票"
  invoiceType?: string(name='invoice_type'),
  // 查询的企业纳税人识别号
  nsrsbh: string(name='nsrsbh'),
  // 请求号，调用方企业保证每次调用唯一，蚂蚁发票平台通过该字段和app_id两个字段做幂等判断
  requestId: string(name='request_id'),
  // java long型
  // 起始金额，当type=03（报销查询）时必填
  startAmount?: long(name='start_amount'),
  // 查询起始时间(当auth_type=02或者03时必填)
  // 当auth_type=02(记账查询)时，查询起始时间和查询截止时间必须在同一个月内，如查询起始日期是6.31，截止日期为7.1，则会提示查询时间不能跨月，最长时间为一个月
  // 最大查询范围为6.1-6.30
  startDate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='start_date'),
  // 地区编码
  cityCode: string(name='city_code'),
}

model QueryIcmInvoiceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 区块链发票信息查询接口-该接口为异步查询接口，查询结果通过回调调用方提供的callUrl方式进行通知
 * Summary:  区块链发票信息查询
 */
async function queryIcmInvoice(request: QueryIcmInvoiceRequest): QueryIcmInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIcmInvoiceEx(request, headers, runtime);
}

/**
 * Description: 区块链发票信息查询接口-该接口为异步查询接口，查询结果通过回调调用方提供的callUrl方式进行通知
 * Summary:  区块链发票信息查询
 */
async function queryIcmInvoiceEx(request: QueryIcmInvoiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIcmInvoiceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.tax.icm.invoice.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushIcmInvoiceinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 上票ISV app_id即secret_id
  appId: string(name='app_id'),
  // 发票号码	
  invoice: Invoice(name='invoice'),
}

model PushIcmInvoiceinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 标准发票推送
 * Summary: 标准发票推送
 */
async function pushIcmInvoiceinfo(request: PushIcmInvoiceinfoRequest): PushIcmInvoiceinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushIcmInvoiceinfoEx(request, headers, runtime);
}

/**
 * Description: 标准发票推送
 * Summary: 标准发票推送
 */
async function pushIcmInvoiceinfoEx(request: PushIcmInvoiceinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushIcmInvoiceinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'blockchain.tax.icm.invoiceinfo.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

