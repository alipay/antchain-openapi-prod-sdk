import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.6.5',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 企业风险等级分布统计
model RtopLevelDistribution {
  // 统计值
  count: integer(name='count', example='10'),
  // 等级
  level: string(name='level', example='EX_HIGH_RISK'),
}

// 涉众风险企业特征
model RtopCrowdRiskFeatureTag {
  // 标签描述
  tagExplanation: string(name='tag_explanation', example='XXX公司法人发生变更'),
  // 标签名称
  tagName: string(name='tag_name', example='法人变更'),
}

// 企业类型分布统计
model RtopTypeDistribution {
  // 统计值
  count: integer(name='count', example='10'),
  // 当前类型下的等级分布
  levelDistribution: [ RtopLevelDistribution ](name='levelDistribution', example='undefined'),
  // 类型
  type: string(name='type', example='MLM'),
}

// 监管风险标签
model RtopRiskTag {
  // 线索明细类型
  clueDetailType?: string(name='clue_detail_type', example='01'),
  // 线索概览
  tagClue?: string(name='tag_clue', example='企业已列入经营异常名录'),
  // 线索明细
  tagClueDetail?: string(name='tag_clue_detail', example='通过登记的住所或者经营场所无法联系'),
  // 标签ID
  tagId: string(name='tag_id', example='CMN00010'),
  // 标签名称
  tagName: string(name='tag_name', example='网站失联'),
  // 标签文本
  tagText?: string(name='tag_text', example='网站失联'),
  // 标签类型
  tagType?: string(name='tag_type', example='CMN'),
}

// 安全数据服务请求参数
model SecurityDataQueryStruct {
  // 请求数据参数
  params: string(name='params', example='{}'),
  // 请求数据类型
  type: string(name='type', example='IP'),
  // 请求数据版本
  version: string(name='version', example='1.0'),
}

// 企业舆情数量
model RtopCompanyOpinionCount {
  // 企业名称
  companyName: string(name='company_name', example='福州北辰智创投资中心'),
  // 企业对应的舆情数量
  count: integer(name='count', example='10'),
}

// 安全场景参数
model SecurityScene {
  // 接入渠道
  accessChannel?: string(name='access_channel', example='web'),
  // 事件信息
  ctuParams?: string(name='ctu_params', example=''),
  // 产品名称
  productName?: string(name='product_name', example='mobile_cashier'),
  // 产品节点
  productNode?: string(name='product_node', example='code'),
  // 扩展参数
  securitySceneParams?: string(name='security_scene_params', example='1234'),
  // 系统名称
  systemName?: string(name='system_name', example='mobilecashier'),
  // 总金额
  totalFee?: string(name='total_fee', example='10.0'),
}

// 企业影响人数年龄分布统计
model RtopAgeDistribution {
  // 年龄
  age: string(name='age', example='above20'),
  // 统计值
  count: integer(name='count', example='10'),
}

// 企业地区分布统计
model RtopRegionalDistribution {
  // 统计值
  count: long(name='count', example='10'),
  // 地区
  place: string(name='place', example='​西湖区'),
  // 当前地区的涉众风险类型分布，即非法集资有多少企业，传销有多少企业
  typeDistribution?: [ RtopTypeDistribution ](name='type_distribution', example=''),
}

// 企业信息
model CompanyInfo {
  // 活跃地json
  activeAddrJson: string(name='active_addr_json', example='活跃地json'),
  // 活跃市(字段停用)
  activeCity: string(name='active_city', example='活跃市(字段停用)'),
  // 活跃县(字段停用)
  activeCounty: string(name='active_county', example='活跃县(字段停用)'),
  // 活跃省(字段停用)
  activeProvince: string(name='active_province', example='活跃省(字段停用)'),
  // 类经融行业分类
  categories: string(name='categories', example='类金融'),
  // 核准日期
  checkDate: string(name='check_date', example='20191023'),
  // 删除标志
  delFlag: string(name='del_flag', example='0'),
  // odps数据产生时间，业务上不关心
  dt: string(name='dt', example='20190922'),
  // 企业曾用名
  formerOrgNames: string(name='former_org_names', example='[123,45tee]'),
  // {"mct_one_id":"ID1","org_name":"总公司名称1"}
  headOffice: string(name='head_office', example='总公司,json格式'),
  // 记录ID
  id: long(name='id', example='1'),
  // 影响金额
  involvedAmount: long(name='involved_amount', example='300'),
  // 影响人数
  involvedPeople: long(name='involved_people', example='100'),
  // 重要关联企业,json格式
  keyRelaOrgs: string(name='key_rela_orgs', example='[{"mct_one_id":"ID1","org_name":"企业名称1","relation_desc":"关联描述1"},{"mct_one_id":"ID2","org_name":"企业名称2","relation_desc":"关联描述2"}]'),
  // 法人
  legalRepresentative: string(name='legal_representative', example='张三'),
  // 企业ID
  mctOneId: string(name='mct_one_id', example='12'),
  // 经营地json
  operatingAddrJson: string(name='operating_addr_json', example='经营地json'),
  // 经营市(字段停用)
  operatingCity: string(name='operating_city', example='经营市(字段停用)'),
  // 经营县(字段停用)
  operatingCounty: string(name='operating_county', example='经营县(字段停用)'),
  // 经营地址(字段停用)
  operatingPlace: string(name='operating_place', example='经营地址(字段停用)'),
  // 经营省(字段停用)
  operatingProvince: string(name='operating_province', example='operating_province'),
  // 营运状态(1:营运0:不营运)
  oprtActvState: string(name='oprt_actv_state', example='1'),
  // 经营期限至
  oprtEndDate: string(name='oprt_end_date', example='20210201'),
  // 经营范围
  oprtScope: string(name='oprt_scope', example='工商'),
  // 经营期限自
  oprtStartDate: string(name='oprt_start_date', example='20190201'),
  // 操作类型
  // 
  opType: string(name='op_type', example='add、delete、update'),
  // 组织机构代码
  orgCode: string(name='org_code', example='246667'),
  // 电子邮箱
  orgEmail: string(name='org_email', example='werr@163.com'),
  // 企业名
  orgName: string(name='org_name', example='恒生电子'),
  // 注册资本折人民币(万元)
  orgRegCptlRmb: string(name='org_reg_cptl_rmb', example='3000000000'),
  // 企业状态
  orgState: string(name='org_state', example='正常'),
  // 联系电话
  orgTel: string(name='org_tel', example='1234567'),
  // 企业类型
  orgType: string(name='org_type', example='工商'),
  // 平台json  
  platform: string(name='platform', example=' [{"platform_name":"ptp","platform_states":"平台状态"}]'),
  // 平台名
  platformName: string(name='platform_name', example='p2p平台'),
  // 平台状态
  platformStates: string(name='platform_states', example='平台状态'),
  // 注册资本币种
  registerCapitalCurrency: string(name='register_capital_currency', example='人名币'),
  // 注册资本值
  registerCapitalValue: string(name='register_capital_value', example='2300000'),
  // 注册市
  registerCity: string(name='register_city', example='宣城市'),
  // 注册区县
  registerCounty: string(name='register_county', example='南海区'),
  // 注册时间
  registerDate: string(name='register_date', example='20110203'),
  // 注册地址
  registerPlace: string(name='register_place', example='江苏省'),
  // 注册省
  registerProvince: string(name='register_province', example='安徽省'),
  // 登记机关
  registrationAuthority: string(name='registration_authority', example='XX金融办'),
  // 工商注册号
  regNo: string(name='reg_no', example='23456667'),
  // 风报企业ID
  riskstormCompanyId: string(name='riskstorm_company_id', example='1234'),
  // 风险维度
  riskFactors: string(name='risk_factors', example='风险维度'),
  // 风险图谱可视化数据
  riskGraphJson: string(name='risk_graph_json', example='风险图谱可视化数据'),
  // 风险报文
  riskMessage: string(name='risk_message', example='风险报文'),
  // 风险指数
  riskScore: long(name='risk_score', example='80'),
  // 风险指数，按日的趋势图
  riskScoreTrend: string(name='risk_score_trend', example='风险指数'),
  // 风险指数周波动
  riskScoreWeeklyFloat: long(name='risk_score_weekly_float', example='2.3'),
  // 风险标签(字段停用)
  riskTags: string(name='risk_tags', example='经营异常'),
  // 风险标签ID
  riskTagsId: string(name='risk_tags_id', example='NM12,NM34'),
  // 风险定性
  riskType: string(name='risk_type', example='风险定性'),
  // 搜索内容
  searchContent: string(name='search_content', example='隐隐科技'),
  // 传播人次
  spreadNumber: long(name='spread_number', example='传播人次'),
  // 影响地区人次分布,json格式如下
  spreadNumDistribution: string(name='spread_num_distribution', example='[{"place_type":"prov","active_info":[{"place_name":"省1","num":3690},{"place_name":"省2","num":3680}]},{"place_type":"city","active_info":[{"place_name":"市1","num":3690},{"place_name":"市2","num":3680}]}]'),
  // 社会统一信用代码
  ucCode: string(name='uc_code', example='2456787878'),
  // 公有云数据库产生时间
  updateDate: string(name='update_date', example='20190923'),
}

// 标签信息
model RiskLabelInfo {
  // 线索明细类型(字段停用)
  clueDetailType: string(name='clue_detail_type', example='s d d f d f'),
  // odps数据产出时间，冗余字段，业务上不需要，以备错误排查
  dt?: string(name='dt', example='20190823'),
  // 数据产生时间
  gmtCreate: string(name='gmt_create', example='yyyy-MM-dd hh:mm:ss'),
  // 记录唯一ID
  id: long(name='id', example='1'),
  // 0-正常 1-删除
  isDeleted: long(name='is_deleted', example='is_deleted'),
  // 企业ID
  mctOneId: string(name='mct_one_id', example='A123445'),
  // 操作人ID
  operatorId: string(name='operator_id', example='123'),
  // 操作类型
  // add、delete、update
  opType: string(name='op_type', example='add'),
  // 企业名称
  orgName: string(name='org_name', example='东方财富公司'),
  // 线索类型
  riskDetailType: string(name='risk_detail_type', example='列表'),
  // 风险维度
  // 
  riskDimensionType: string(name='risk_dimension_type', example='风险维度'),
  // 线索概览
  tagClue: string(name='tag_clue', example='s d f g'),
  // 线索明细
  tagClueDetail: string(name='tag_clue_detail', example='11'),
  // 标签ID
  tagId: string(name='tag_id', example='NM23'),
  // 线索列表表头，英文逗号分隔
  // 
  tagListHeaders: string(name='tag_list_headers', example='日期'),
  // 标签列表，排序字段
  tagListOrderColumn: string(name='tag_list_order_column', example='日期'),
  // 标签列表排序方式
  tagListOrderType: string(name='tag_list_order_type', example='顺序'),
  // 标签文本
  tagText: string(name='tag_text', example='1233'),
  // 趋势图表名
  tagTrendChartName: string(name='tag_trend_chart_name', example='XX趋势图 '),
  // 数据同步到公有云时间(业务上赋值当天)
  updateDate: string(name='update_date', example='20190823'),
}

// 标签配置全量信息
model RiskLabelConfigInfo {
  // 创建时间
  gmtCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 修改时间
  gmtModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // id
  id: long(name='id', example='1'),
  // 标记删除
  isDelete: long(name='is_delete', example='0'),
  // 操作人ID
  operatorId: string(name='operator_id', example='1233'),
  // 线索类型
  riskDetailType: string(name='risk_detail_type', example='列表'),
  // 风险维度
  riskDimensionType: string(name='risk_dimension_type', example='风险维度'),
  // 线索ID
  tagId: string(name='tag_id', example='124'),
  // 线索列表表头，英文逗号分隔
  tagListHeaders: string(name='tag_list_headers', example='日期'),
  // 标签列表，排序字段
  tagListOrderColumn: string(name='tag_list_order_column', example='日期'),
  // 标签列表排序方式
  tagListOrderType: string(name='tag_list_order_type', example='顺序'),
  // 标签文本
  tagText: string(name='tag_text', example='233444'),
  // 趋势图表名
  tagTrendChartName: string(name='tag_trend_chart_name', example='XX趋势图'),
}

// 风报接口返回结构体
model RtopCompanyRiskInfo {
  // 企业唯一id
  mctOneId?: string(name='mct_one_id', example='mct_one_id'),
  // 组织机构代码
  orgCode?: string(name='org_code', example='org_code'),
  // 企业名
  orgName?: string(name='org_name', example='org_name'),
  // 区域
  placeName?: string(name='place_name', example='天津市'),
  // 区域类型
  placeType?: string(name='place_type', example='place_type'),
  // 工商注册号
  regNo?: string(name='reg_no', example='reg_no'),
  // 风险评分
  riskScore?: string(name='risk_score', example='risk_score'),
  // 风险变化程度排序，根据分值波动大小，标签变更次数排序
  riskShiftRank?: string(name='risk_shift_rank', example='risk_shift_rank'),
  // 风险标签id列表
  riskTagsId?: [ string ](name='risk_tags_id', example=''),
  // 风险定性
  riskType?: string(name='risk_type', example='risk_type'),
  // 线索
  tagsClue?: string(name='tags_clue', example='tags_clue'),
  // 风险线索明细
  tagsClueDetail?: string(name='tags_clue_detail', example='tags_clue_detail'),
  // 企业统一社会信用代码
  ucCode?: string(name='uc_code', example='uc_code'),
}

// 服务上下文包括环境信息和用户信息
model ServiceContext {
  // 客户端IP
  clientIp?: string(name='client_ip', example='10.214.138.14'),
  // 客户端UMID
  clientPcidguid?: string(name='client_pcidguid', example='WV1bz5927da956db072d3001792dcc67e'),
  // 服务器名
  serverName?: string(name='server_name', example='server'),
  // 会话ID
  sessionId?: string(name='session_id', example='RZ1 2cz9oSg1GTGtGp9CwYtBbZMcD8DmobilecashierRZ12'),
  // 用户ID
  userId?: string(name='user_id', example='2088522384403582'),
}

// 企业影响人数性别分布统计
model RtopGenderDistribution {
  // 统计值
  count: integer(name='count', example='10'),
  // 性别
  gender: string(name='gender', example='MALE'),
}

// zhima.customer.ep.identification.query
// 在认证完成后,商户可以查询认证的状态和结果
// 
model ZhimaQueryResp {
  // 认证的企业证件号
  epCertNo?: string(name='ep_cert_no', example='91330000327827106L'),
  // 认证的企业名
  epName?: string(name='ep_name', example='芝麻信用管理有限公司'),
  // 认证不通过的错误码
  failedCode?: string(name='failed_code', example='BIZ_LICENSE_LEGAL_INFO_NO_MATCH'),
  // 认证是否通过，通过为true，不通过为false
  passed?: string(name='passed', example='“true“,”false”'),
  //  10000是成功，其余是失败
  resultCode: string(name='result_code', example='OK/40002'),
  //  
  resultMsg: string(name='result_msg', example='Success/Invalid Arguments'),
  //  
  subCode?: string(name='sub_code', example='isv.invalid-app-id'),
  //  
  subMsg?: string(name='sub_msg', example='无效的AppID参数'),
}

// 全局动态中的企业
model RtopRiskyCompany {
  // 异动程度
  changeLevel: string(name='change_level', example='1'),
  // 异动分数
  changeScore: string(name='change_score', example='1'),
  // 企业ID
  companyId: string(name='company_id', example='1'),
  // 数据的时间
  dataTime: string(name='data_time', example='1'),
  // 总公司注册地
  headRegisterPlace: string(name='head_register_place', example='1'),
  // 新增企业的时间
  newAddedTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='new_added_time', example='2018-10-10T10:10:00Z'),
}

// 企业影响人数分布统计
model RtopPopulationDistribution {
  // 市
  city: string(name='city', example='杭州市'),
  // 统计值
  count: integer(name='count', example='10'),
}

// 预警企业
model RtopCompanyAlarm {
  // 预警日期
  alarmDate: string(name='alarm_date', example='1'),
  // 预警标识，是否需要预警
  alarmFlag: string(name='alarm_flag', example='1'),
  // 预警序号
  alarmIdx: string(name='alarm_idx', example='1'),
  // 预警类型
  alarmType: string(name='alarm_type', example='1'),
  // 企业ID
  companyId: string(name='company_id', example='1'),
}

// 企业反馈
model RtopCompanyFeedback {
  // 评论
  comment: string(name='comment', example='1'),
  // 企业ID
  companyId: string(name='company_id', example='1'),
  // 反馈原因
  feedbackReason: string(name='feedback_reason', example='1'),
  // 反馈原因详情
  feedbackReasonDetail: string(name='feedback_reason_detail', example='1'),
  // 主键
  id: long(name='id', example=''),
}

// 风险维度
model RtopCompanyRiskFactor {
  // 维度名称
  name?: string(name='name', example='1'),
  // 维度分数
  score?: long(name='score', example=''),
}

// 企业年报信息
model RtopRiskStormCompanyAnnualReport {
  // 年报个数
  annualReportCount?: integer(name='annual_report_count', example='2'),
  // 年报是否发生股权转让
  annualReportHasEquityTransfer?: boolean(name='annual_report_has_equity_transfer', example='true'),
  // 年报是否对外提供担保
  annualReportHasExternalGuarantee?: boolean(name='annual_report_has_external_guarantee', example='true'),
  // 年报是否对外投资
  annualReportHasExternalInvest?: boolean(name='annual_report_has_external_invest', example='true'),
  // 营业总收入中主营业务收入
  annualReportMainBusinessIncome?: string(name='annual_report_main_business_income', example='1000'),
  // 年报净利润
  annualReportNetProfit?: string(name='annual_report_net_profit', example='1000'),
  // 年报发布日期
  annualReportReleaseDate?: string(name='annual_report_release_date', example='2018-09-09'),
  // 年报股东实缴出资额（万元（实缴出资额用两个冒号::分割）
  annualReportShActualPaid?: string(name='annual_report_sh_actual_paid', example='100::200:2'),
  // 年报公司人数
  annualReportStaffCount?: integer(name='annual_report_staff_count', example='200'),
  // 资产总额
  annualReportTotalAssets?: string(name='annual_report_total_assets', example='1000'),
  // 负债总额
  annualReportTotalLiabilities?: string(name='annual_report_total_liabilities', example='1000'),
  // 营业总收入
  annualReportTotalOperatingIncome?: string(name='annual_report_total_operating_income', example='1000'),
  // 年报所有者权益合计
  annualReportTotalOwnerEquity?: string(name='annual_report_total_owner_equity', example='1000'),
  // 年报利润总额
  annualReportTotalProfit?: string(name='annual_report_total_profit', example='1000'),
  // 纳税总额
  annualReportTotalTax?: string(name='annual_report_total_tax', example='1000'),
  // 年报报送年度
  annualReportYear?: string(name='annual_report_year', example='2018'),
}

// 企业日期趋势统计
model RtopDateDistribution {
  // 统计值
  count: integer(name='count', example='10'),
  // 年龄
  date: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='date', example='2018-09-09'),
}

// 舆情的详情
model RtopCompanyOpinionDetail {
  // 具体的舆情内容
  docContent: string(name='doc_content', example='行业整体趋势仍向好,白酒2Q18营收增速略回落,大众品龙头竞争力强化'),
  // 舆情的id
  docId: string(name='doc_id', example='1843266597720304871'),
  // 舆情的标题
  docTitle: string(name='doc_title', example='扫IC网获金证引擎战略投资;产业+互联网+金融;推进电子产业资源整合_搜狐科技_搜狐网'),
  // 舆情的url
  docUrl: string(name='doc_url', example='http://istock.jrj.com.cn/article,yanbao,30483668.html'),
  // 情感得分
  emotionScore?: string(name='emotion_score', example='2.80'),
  // 实体相关度得分
  entityRelevancyScore?: string(name='entity_relevancy_score', example='0.71'),
  // 命中的关键词
  hitKeywords?: string(name='hit_keywords', example=''),
  // 媒体影响力得分
  mediaInfluenceScore?: string(name='media_influence_score', example='6.90'),
  // 来源媒体
  mediaName: string(name='media_name', example='东方媒体'),
  // 媒体传播得分
  mediaPropagationScore?: string(name='media_propagation_score', example='0.60'),
  // 舆情的发布时间
  publishTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='publish_time', example='2018-07-15'),
  // 相似文章数
  similarDocs?: integer(name='similar_docs', example='2'),
}

// 策略详情
model StrategyDetails {
  // 决策结果
  decision: string(name='decision', example='accept'),
  // 策略id
  id: string(name='id', example='1'),
  // 策略名称
  name: string(name='name', example='策略名称'),
  // 场景码
  sceneCode: string(name='scene_code', example='scene_code'),
}

// 通用响应结构体
model RpcommonResp {
  // 具体返回值.jsonString形式
  data: string(name='data', example='{"a":1}'),
  // 结果码
  responseCode: string(name='response_code', example='0'),
  // 结果描述
  resultMsg: string(name='result_msg', example='success'),
  // 调用是否成功
  success: boolean(name='success', example='true, false'),
}

// 风报风险标签统计
model RiskStormLabelResp {
  // 标签次数
  labelCount: integer(name='label_count', example='10'),
  // 标签id
  labelId: string(name='label_id', example='cancelled'),
  // 标签名称
  labelName: string(name='label_name', example='注销'),
}

// 模型结果详情
// 
model ModelDetails {
  // 风险场景编码
  sceneCode: string(name='scene_code', example='scene_code'),
  // 该风险场景的风险分值
  // 
  score: string(name='score', example='90'),
}

// 芝麻四要素认证接口
model ZhimaIdentifyResp {
  // 唯一ID，接口正常的话有此字段
  bizNo?: string(name='biz_no', example='ZM201505190ad422641448624704506270407'),
  // 带参数的回调地址，接口正常的话有此字段
  certifyUrl?: string(name='certify_url', example='http://zmmcportal.stable.zhimaxy.net/index.htm?biz_content=%7B%22biz_no%22%3A%225f491814480fafe7dc0779a1c452c9f7%22%7D&sign=dsgdsfhgdsfh'),
  // 蚂蚁调用芝麻的错误码
  resultCode: string(name='result_code', example='OK'),
  // 蚂蚁调用芝麻的结果描述
  resultMsg: string(name='result_msg', example='Success/Invalid Arguments'),
  // 蚂蚁调用芝麻的错误码
  subCode?: string(name='sub_code', example='isv.invalid-app-id'),
  // 蚂蚁调用芝麻信息
  subMsg?: string(name='sub_msg', example='无效的AppID参数'),
}

// 涉众风险企业特征
model RtopCrowdRiskFeatureResp {
  // 特征标签列表
  clueTags?: [ RtopCrowdRiskFeatureTag ](name='clue_tags', example=''),
  // 特征名称
  featureName: string(name='feature_name', example='工商风险维度'),
  // 特征​分数
  score: integer(name='score', example='10'),
}

// 企业涉众风险详细信息
model RtopCrowdRiskSummaryResp {
  // 活跃市
  activeCity?: string(name='active_city', example='杭州市'),
  // 活跃县
  activeCounty?: string(name='active_county', example='西湖区'),
  // 活跃省
  activeProvince?: string(name='active_province', example='浙江省'),
  // 风险标签
  clueTags?: [ string ](name='clue_tags', example=''),
  // 企业ID
  companyId: string(name='company_id', example='123456789'),
  // 企业名称
  companyName: string(name='company_name', example='XXXXX有限公司'),
  // 风险等级
  crowdRiskLevel?: string(name='crowd_risk_level', example='EX_HIGH_RISK'),
  // 涉众风险分数
  crowdRiskScore?: long(name='crowd_risk_score', example='80'),
  // 涉众风险类型
  crowdRiskType?: string(name='crowd_risk_type', example='MLM'),
  // 发现时间
  detectedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='detected_time', example='2018-07-15'),
  // 影响金额
  moneyInvolved?: long(name='money_involved', example='100'),
  // 影响人数
  peopleInvolved?: long(name='people_involved', example='100'),
  // 注册市
  registeredCity?: string(name='registered_city', example='杭州市'),
  // 注册县
  registeredCounty?: string(name='registered_county', example='西湖区'),
  // 注册省
  registeredProvince?: string(name='registered_province', example='浙江省'),
}

// 标签过滤配置
model RiskLabelFilterConfigInfo {
  // 创建时间
  gmtCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 修改时间
  gmtModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // id
  id: long(name='id', example='1'),
  // 是否为基本筛选标签
  isBase: long(name='is_base', example='1'),
  // 标记删除
  isDelete: long(name='is_delete', example='0'),
  // 操作人员ID
  operatorId: string(name='operator_id', example='1'),
  // 地区名
  placeName: string(name='place_name', example='place_name'),
  // 地区类型
  placeType: string(name='place_type', example='place_type'),
  // 标签ID
  tagId: string(name='tag_id', example='1'),
}

// 收藏的企业信息
model RtopStarCompanyInfo {
  // 行业
  categories?: [ string ](name='categories', example=''),
  // 经营地址
  operatingPlace?: string(name='operating_place', example='广东省珠海市前山金鸡西路'),
  // 经营省份
  operatingProvince?: string(name='operating_province', example='湖北省'),
  // 企业名称
  orgName?: string(name='org_name', example='珠海格力电器股份有限公司'),
  // 风险分数
  riskScore?: long(name='risk_score', example='80'),
  // 风险标签
  riskTags?: [ string ](name='risk_tags', example='["内部被投诉","法定代表人名下企业超过6家"]'),
  // 风险线索
  riskTagDetails?: [ RtopRiskTag ](name='risk_tag_details', example=''),
  // 风险标签Id集合
  riskTagIds?: [ string ](name='risk_tag_ids', example='["CMN00025", "CMN00011"]'),
  // 统一社会信用代码
  ucCode?: string(name='uc_code', example='91440400192548256N'),
}

// 标签图片
model RtopTagImage {
  // 标签图片表主键
  id: long(name='id', example=''),
  // 图片
  image?: string(name='image', example='1'),
}

// 风险基因-点
model RtopRiskGeneNode {
  // 主企业唯一ID
  mainCompanyId?: string(name='main_company_id', example='1'),
  // 主企业名称
  mainCompanyName?: string(name='main_company_name', example='1'),
  // 节点证件号码
  nodeCertNo?: string(name='node_cert_no', example='1'),
  // 节点扩展信息
  nodeExtJson?: string(name='node_ext_json', example='节点扩展信息'),
  // 节点唯一ID
  nodeId?: string(name='node_id', example='1'),
  // 节点名称
  nodeName?: string(name='node_name', example='1'),
  // 节点类型，枚举值
  nodeType?: string(name='node_type', example='company'),
  // 基因模式
  riskLabel?: string(name='risk_label', example='risk_label'),
  // 基因模式
  riskMode?: string(name='risk_mode', example='基因模式'),
}

// 监测企业的特征信息
model RtopMonitorCompanyFeature {
  // 特征的描述
  description?: string(name='description', example='有企业地址变更历史，变更过经营范围'),
  // 特征的名称
  name: string(name='name', example='关联风险'),
  // 特征里的风险标签列表
  riskTags?: [ string ](name='risk_tags', example=''),
  // 特征的评分
  score: integer(name='score', example='80'),
}

model QuerySecurityPolicyRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 风险类型：表示风险处理或风险咨询——process/advice
  riskType: string(name='risk_type'),
  securityScene: SecurityScene(name='security_scene'),
  serviceContext: ServiceContext(name='service_context'),
}

model QuerySecurityPolicyResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 风险咨询情况下返回的风险等级，风险处理不会返回该值
  level?: integer(name='level'),
  // 反馈成功之后的id
  securityId?: string(name='security_id'),
  // 安全处理结果，枚举值为：reject[拒绝],validate[校验],accept[放过]
  securityResult?: string(name='security_result'),
  // 是否成功
  success: string(name='success'),
  // 有风险需要失败业务情况下的返回码
  templateCode?: string(name='template_code'),
  // 有风险需要失败业务情况下的返回码描述
  templateDesc?: string(name='template_desc'),
  // native场景下的核身id
  verifyId?: string(name='verify_id'),
  // h5场景下的核身地址
  verifyUrl?: string(name='verify_url'),
}

/**
 * Description: 外部客户业务接入风控+，进行风险识别和风险决策。
 * Summary: 策略咨询服务输出
 */
async function querySecurityPolicy(request: QuerySecurityPolicyRequest): QuerySecurityPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySecurityPolicyEx(request, headers, runtime);
}

/**
 * Description: 外部客户业务接入风控+，进行风险识别和风险决策。
 * Summary: 策略咨询服务输出
 */
async function querySecurityPolicyEx(request: QuerySecurityPolicyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySecurityPolicyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.security.policy.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendSecurityDataRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 安全累计属性列表字段，安全属性列表
  securityContent: string(name='security_content'),
  // 代码发送给安全核心的事件编码
  securitySign: string(name='security_sign'),
}

model SendSecurityDataResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success: string(name='success'),
}

/**
 * Description: 向风控发送异步安全数据
 * Summary: 异步发送安全数据
 */
async function sendSecurityData(request: SendSecurityDataRequest): SendSecurityDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendSecurityDataEx(request, headers, runtime);
}

/**
 * Description: 向风控发送异步安全数据
 * Summary: 异步发送安全数据
 */
async function sendSecurityDataEx(request: SendSecurityDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendSecurityDataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.security.data.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmSecurityPolicyRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 二次确认参数，防止篡改
  confirmParams: string(name='confirm_params'),
  // 代码发送给安全核心的事件编码
  securityId: string(name='security_id'),
}

model ConfirmSecurityPolicyResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success: string(name='success'),
}

/**
 * Description: 外部客户业务接入蚂蚁风控，进行风险识别和风险决策输出核身后，进行二次确认
 * Summary: 安全策略确认服务输出
 */
async function confirmSecurityPolicy(request: ConfirmSecurityPolicyRequest): ConfirmSecurityPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmSecurityPolicyEx(request, headers, runtime);
}

/**
 * Description: 外部客户业务接入蚂蚁风控，进行风险识别和风险决策输出核身后，进行二次确认
 * Summary: 安全策略确认服务输出
 */
async function confirmSecurityPolicyEx(request: ConfirmSecurityPolicyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmSecurityPolicyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.security.policy.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckSecurityRdsRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 输入大字段，具体见接入文档
  rdsContent: string(name='rds_content'),
}

model CheckSecurityRdsResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 是否成功
  result: integer(name='result'),
}

/**
 * Description: 外部客户业务接入风控+，进行人机识别判断。
 * Summary: 策略咨询服务输出
 */
async function checkSecurityRds(request: CheckSecurityRdsRequest): CheckSecurityRdsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkSecurityRdsEx(request, headers, runtime);
}

/**
 * Description: 外部客户业务接入风控+，进行人机识别判断。
 * Summary: 策略咨询服务输出
 */
async function checkSecurityRdsEx(request: CheckSecurityRdsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckSecurityRdsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.security.rds.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySecurityDataRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  reqInfo: [ SecurityDataQueryStruct ](name='req_info'),
}

model QuerySecurityDataResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success: string(name='success'),
}

/**
 * Description: 外部客户业务接入风控+，请求安全数据如ip画像等。
 * Summary: 安全数据服务输出
 */
async function querySecurityData(request: QuerySecurityDataRequest): QuerySecurityDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySecurityDataEx(request, headers, runtime);
}

/**
 * Description: 外部客户业务接入风控+，请求安全数据如ip画像等。
 * Summary: 安全数据服务输出
 */
async function querySecurityDataEx(request: QuerySecurityDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySecurityDataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.security.data.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckSecurityDataRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 入参为Map转换后的String
  reqInfo: string(name='req_info'),
}

model CheckSecurityDataResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // code表示状态，message为提示，data为返回结果
  response?: string(name='response'),
}

/**
 * Description: 外部客户数据校验接口，比如端防护
 * Summary: 安全数据服务校验
 */
async function checkSecurityData(request: CheckSecurityDataRequest): CheckSecurityDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkSecurityDataEx(request, headers, runtime);
}

/**
 * Description: 外部客户数据校验接口，比如端防护
 * Summary: 安全数据服务校验
 */
async function checkSecurityDataEx(request: CheckSecurityDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckSecurityDataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.security.data.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyFinserviceZhimaIdentifyRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需要校验的人姓名
  legalPersonCertName: string(name='legal_person_cert_name'),
  // 需要校验的人身份证号
  legalPersonCertNo: string(name='legal_person_cert_no'),
  // 认证结束后的商户回调地址。
  merchantUrl: string(name='merchant_url'),
}

model VerifyFinserviceZhimaIdentifyResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 本次认证的唯一标识，商户需要记录，后续的操作都需要用到。
  data?: ZhimaIdentifyResp(name='data'),
}

/**
 * Description: 四要素认证首先调用此接口
 * Summary: 芝麻四要素接口
 */
async function verifyFinserviceZhimaIdentify(request: VerifyFinserviceZhimaIdentifyRequest): VerifyFinserviceZhimaIdentifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyFinserviceZhimaIdentifyEx(request, headers, runtime);
}

/**
 * Description: 四要素认证首先调用此接口
 * Summary: 芝麻四要素接口
 */
async function verifyFinserviceZhimaIdentifyEx(request: VerifyFinserviceZhimaIdentifyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyFinserviceZhimaIdentifyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.finservice.zhima.identify.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryFinserviceZhimaIdentifyRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 初始化时候返回的唯一标识
  bizNo: string(name='biz_no'),
}

model QueryFinserviceZhimaIdentifyResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  //  
  data?: ZhimaQueryResp(name='data'),
}

/**
 * Description:  
 * Summary: 芝麻四要素认证结果查询
 */
async function queryFinserviceZhimaIdentify(request: QueryFinserviceZhimaIdentifyRequest): QueryFinserviceZhimaIdentifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFinserviceZhimaIdentifyEx(request, headers, runtime);
}

/**
 * Description:  
 * Summary: 芝麻四要素认证结果查询
 */
async function queryFinserviceZhimaIdentifyEx(request: QueryFinserviceZhimaIdentifyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFinserviceZhimaIdentifyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.finservice.zhima.identify.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRbbGenericInvokeRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // {"platformId":1234,"method":"riskQuery"}
  content: string(name='content'),
  // 账号的所有权限点，逗号分隔
  permission: string(name='permission'),
  // 标题备用
  title: string(name='title'),
}

model QueryRbbGenericInvokeResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 返回数据内容
  data?: string(name='data'),
}

/**
 * Description: 风险大脑企业版通用查询接口
 * Summary: 【已废弃】
 */
async function queryRbbGenericInvoke(request: QueryRbbGenericInvokeRequest): QueryRbbGenericInvokeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRbbGenericInvokeEx(request, headers, runtime);
}

/**
 * Description: 风险大脑企业版通用查询接口
 * Summary: 【已废弃】
 */
async function queryRbbGenericInvokeEx(request: QueryRbbGenericInvokeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRbbGenericInvokeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rbb.generic.invoke.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateRbbTokenRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 扩展字段
  content: string(name='content'),
  // 新人用户密码，用来做映射生成token
  password: string(name='password'),
  // 用户
  username: string(name='username'),
}

model CreateRbbTokenResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 返回数据
  data?: string(name='data'),
}

/**
 * Description: 风险大脑企业版token生成
 * Summary: 【已废弃】
 */
async function createRbbToken(request: CreateRbbTokenRequest): CreateRbbTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createRbbTokenEx(request, headers, runtime);
}

/**
 * Description: 风险大脑企业版token生成
 * Summary: 【已废弃】
 */
async function createRbbTokenEx(request: CreateRbbTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateRbbTokenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rbb.token.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateRbbApiGwtokenRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 扩展字段
  extension?: string(name='extension'),
  // 新人用户密码，用来做映射生成token
  password: string(name='password'),
  // 用户
  username: string(name='username'),
}

model CreateRbbApiGwtokenResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 返回登录token
  logintoken?: string(name='logintoken'),
}

/**
 * Description: 获取风险大脑企业版登录token
 * Summary: 【已废弃】
 */
async function createRbbApiGwtoken(request: CreateRbbApiGwtokenRequest): CreateRbbApiGwtokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createRbbApiGwtokenEx(request, headers, runtime);
}

/**
 * Description: 获取风险大脑企业版登录token
 * Summary: 【已废弃】
 */
async function createRbbApiGwtokenEx(request: CreateRbbApiGwtokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateRbbApiGwtokenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rbb.api.gwtoken.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRbbGeneralRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 额外参数json
  extension?: string(name='extension'),
  // 通用查询名称
  queryname: string(maxLength=200, minLength=2, name='queryname'),
  // 查询参数JSON字符串
  queryparas?: string(name='queryparas'),
}

model QueryRbbGeneralResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // json字符串表示的通用查询结果
  data?: string(name='data'),
}

/**
 * Description: 风险大脑企业版通用查询OpenAPI
 * Summary: 风险大脑企业版通用查询OpenAPI
 */
async function queryRbbGeneral(request: QueryRbbGeneralRequest): QueryRbbGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRbbGeneralEx(request, headers, runtime);
}

/**
 * Description: 风险大脑企业版通用查询OpenAPI
 * Summary: 风险大脑企业版通用查询OpenAPI
 */
async function queryRbbGeneralEx(request: QueryRbbGeneralRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRbbGeneralResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rbb.general.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetRbbLoginTokenRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 扩展json字符串
  extension?: string(name='extension'),
  // 密码
  password: string(name='password'),
  // 用户名
  username: string(name='username'),
}

model GetRbbLoginTokenResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 登录token，5分钟有效
  logintoken?: string(name='logintoken'),
}

/**
 * Description: 获取登录Token
 * Summary: 获取登录Token
 */
async function getRbbLoginToken(request: GetRbbLoginTokenRequest): GetRbbLoginTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getRbbLoginTokenEx(request, headers, runtime);
}

/**
 * Description: 获取登录Token
 * Summary: 获取登录Token
 */
async function getRbbLoginTokenEx(request: GetRbbLoginTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetRbbLoginTokenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rbb.login.token.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateRbbTenantRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户过期时间，不填表示永不过期
  effectiveEndDate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='effective_end_date'),
  // 租户编码，必须全局唯一
  tenantCode: string(maxLength=64, minLength=2, name='tenant_code'),
  // 租户名称
  tenantName: string(maxLength=64, minLength=2, name='tenant_name'),
  // 租户自定义属性，JSON格式，可以为空
  tenantPropertyJson?: string(name='tenant_property_json'),
}

model CreateRbbTenantResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 风险大脑企业版创建租户
 * Summary: 风险大脑企业版创建租户
 */
async function createRbbTenant(request: CreateRbbTenantRequest): CreateRbbTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createRbbTenantEx(request, headers, runtime);
}

/**
 * Description: 风险大脑企业版创建租户
 * Summary: 风险大脑企业版创建租户
 */
async function createRbbTenantEx(request: CreateRbbTenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateRbbTenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rbb.tenant.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateRbbUserRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户邮箱，非必填
  email?: string(maxLength=128, minLength=3, name='email'),
  // 用户姓名、真实名称，不要求全局唯一
  fullName: string(maxLength=64, minLength=1, name='full_name'),
  // 用户密码
  password: string(maxLength=200, minLength=8, name='password'),
  // 用户电话号码，非必填
  phone?: string(maxLength=64, minLength=4, name='phone'),
  // 用户所属租户编码
  tenantCode?: string(maxLength=64, minLength=2, name='tenant_code'),
  // 用户名，必须全局唯一
  userName: string(name='user_name'),
  // 用户属性扩展字段，json格式，可以为空
  userPropertyJson?: string(name='user_property_json'),
}

model CreateRbbUserResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 风险大脑企业版创建用户
 * Summary: 风险大脑企业版创建用户
 */
async function createRbbUser(request: CreateRbbUserRequest): CreateRbbUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createRbbUserEx(request, headers, runtime);
}

/**
 * Description: 风险大脑企业版创建用户
 * Summary: 风险大脑企业版创建用户
 */
async function createRbbUserEx(request: CreateRbbUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateRbbUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rbb.user.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRtopCompanyOpinionRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 结束时间
  endTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='end_time'),
  // 页码
  pageNum: long(name='page_num'),
  // 一页的数量
  pageSize: long(name='page_size'),
  // 所在地的名称
  placeName: string(name='place_name'),
  // 地区类型
  placeType: string(name='place_type'),
  // 开始时间
  startTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_time'),
}

model QueryRtopCompanyOpinionResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  companyOpinionCount: [ RtopCompanyOpinionCount ](name='company_opinion_count'),
  // 页码
  pageNum: long(name='page_num'),
  // 一页的数量
  pageSize: long(name='page_size'),
  // 总的记录数
  totalCount: long(name='total_count'),
}

/**
 * Description: 查询所在地的负面舆情企业列表
 * Summary: 查询所在地的负面舆情企业列表
 */
async function queryRtopCompanyOpinion(request: QueryRtopCompanyOpinionRequest): QueryRtopCompanyOpinionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRtopCompanyOpinionEx(request, headers, runtime);
}

/**
 * Description: 查询所在地的负面舆情企业列表
 * Summary: 查询所在地的负面舆情企业列表
 */
async function queryRtopCompanyOpinionEx(request: QueryRtopCompanyOpinionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRtopCompanyOpinionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rtop.company.opinion.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListRtopCompanyOpinionsRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 地区类型
  companyName: string(name='company_name'),
  // 页码
  pageNum: long(name='page_num'),
  // 一页的数量
  pageSize: long(name='page_size'),
}

model ListRtopCompanyOpinionsResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  companyOpinionDetails: [ RtopCompanyOpinionDetail ](name='company_opinion_details'),
  // 页码
  pageNum: long(name='page_num'),
  // 一页的数量
  pageSize: long(name='page_size'),
  // 总的记录数
  totalCount: long(name='total_count'),
}

/**
 * Description: 查询企业的舆情详情信息
 * Summary: 查询企业的舆情详情信息
 */
async function listRtopCompanyOpinions(request: ListRtopCompanyOpinionsRequest): ListRtopCompanyOpinionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listRtopCompanyOpinionsEx(request, headers, runtime);
}

/**
 * Description: 查询企业的舆情详情信息
 * Summary: 查询企业的舆情详情信息
 */
async function listRtopCompanyOpinionsEx(request: ListRtopCompanyOpinionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRtopCompanyOpinionsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rtop.company.opinions.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetRtopCompanyMonitorRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 地区类型
  companyName: string(name='company_name'),
}

model GetRtopCompanyMonitorResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 活跃市，不带国家和地区的代码
  activeCity: string(name='active_city'),
  // 监测企业的行业
  companyCategory?: string(name='company_category'),
  // 涉众风险类型
  crowdRiskType: string(name='crowd_risk_type'),
  features: [ RtopMonitorCompanyFeature ](name='features'),
  // 影响金额
  moneyInvolved: long(name='money_involved'),
  monitorRiskTags: [ string ](name='monitor_risk_tags'),
  // 监测企业的评分
  monitorScore: long(name='monitor_score'),
  // 影响人数
  peopleInvolved: long(name='people_involved'),
  // 注册市，不带国家和地区的代码
  registeredCity: string(name='registered_city'),
}

/**
 * Description: 查询监测企业的详情
 * Summary: 查询监测企业的详情
 */
async function getRtopCompanyMonitor(request: GetRtopCompanyMonitorRequest): GetRtopCompanyMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getRtopCompanyMonitorEx(request, headers, runtime);
}

/**
 * Description: 查询监测企业的详情
 * Summary: 查询监测企业的详情
 */
async function getRtopCompanyMonitorEx(request: GetRtopCompanyMonitorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetRtopCompanyMonitorResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rtop.company.monitor.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRtopCrowdriskStatisticRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 结束时间
  endTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='end_time'),
  // 所在地的名称
  placeName?: string(name='place_name'),
  // 地区类型
  placeType?: string(name='place_type'),
  // 开始时间
  startTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_time'),
}

model QueryRtopCrowdriskStatisticResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  levelDistribution?: [ RtopLevelDistribution ](name='level_distribution'),
  // 按地区统计
  regionDistribution?: [ RtopRegionalDistribution ](name='region_distribution'),
  typeDistribution?: [ RtopTypeDistribution ](name='type_distribution'),
}

/**
 * Description: 查询所在地的涉众风险企业统计信息
 * Summary: 查询所在地的涉众风险企业统计信息
 */
async function queryRtopCrowdriskStatistic(request: QueryRtopCrowdriskStatisticRequest): QueryRtopCrowdriskStatisticResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRtopCrowdriskStatisticEx(request, headers, runtime);
}

/**
 * Description: 查询所在地的涉众风险企业统计信息
 * Summary: 查询所在地的涉众风险企业统计信息
 */
async function queryRtopCrowdriskStatisticEx(request: QueryRtopCrowdriskStatisticRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRtopCrowdriskStatisticResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rtop.crowdrisk.statistic.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListRtopCrowdriskRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 活跃地筛选
  activePlaces?: [ string ](name='active_places'),
  // 风险等级
  crowdRiskLevels?: [ string ](name='crowd_risk_levels'),
  // 风险类型
  crowdRiskTypes?: [ string ](name='crowd_risk_types'),
  // 结束时间
  endTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='end_time'),
  // 页码
  pageNum?: long(name='page_num'),
  // 每页条数
  pageSize?: long(name='page_size'),
  // 所在地的名称
  placeName?: string(name='place_name'),
  // 地区类型
  placeType?: string(name='place_type'),
  // 注册地筛选
  regPlaces?: [ string ](name='reg_places'),
  // 排序字段
  sortBy?: string(name='sort_by'),
  // 排序方式
  sortType?: string(name='sort_type'),
  // 开始时间
  startTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='start_time'),
}

model ListRtopCrowdriskResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 企业列表
  companys?: [ RtopCrowdRiskSummaryResp ](name='companys'),
  // 页码
  pageNum?: long(name='page_num'),
  // 每页条数
  pageSize?: long(name='page_size'),
  // 总数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询涉众风险企业的列表
 * Summary: 查询涉众风险企业的列表
 */
async function listRtopCrowdrisk(request: ListRtopCrowdriskRequest): ListRtopCrowdriskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listRtopCrowdriskEx(request, headers, runtime);
}

/**
 * Description: 查询涉众风险企业的列表
 * Summary: 查询涉众风险企业的列表
 */
async function listRtopCrowdriskEx(request: ListRtopCrowdriskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRtopCrowdriskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rtop.crowdrisk.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRtopCrowdriskDetailRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业ID
  companyId?: string(name='company_id'),
  // 所在地的名称
  placeName?: string(name='place_name'),
  // 地区类型
  placeType?: string(name='place_type'),
}

model QueryRtopCrowdriskDetailResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 活跃市
  activeCity?: string(name='active_city'),
  // 活跃县
  activeCounty?: string(name='active_county'),
  // 活跃省
  activeProvince?: string(name='active_province'),
  // 年龄分布
  ageDistribution?: [ RtopAgeDistribution ](name='age_distribution'),
  // 线索标签
  clueTags?: [ string ](name='clue_tags'),
  // 报文
  conclusion?: string(name='conclusion'),
  // 风险等级
  crowdRiskLevel?: string(name='crowd_risk_level'),
  // 涉众风险分析的分数
  crowdRiskScore?: long(name='crowd_risk_score'),
  // 风险类型
  crowdRiskType?: string(name='crowd_risk_type'),
  // 发现时间
  detectedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='detected_time'),
  // 特征
  features?: [ RtopCrowdRiskFeatureResp ](name='features'),
  // 性别分布
  genderDistribution?: [ RtopGenderDistribution ](name='gender_distribution'),
  // 上次活跃时间
  lastActiveTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='last_active_time'),
  // 涉案金额
  moneyInvolved?: long(name='money_involved'),
  // 影响金额的历史曲线
  moneyInvolvedHistory?: [ RtopDateDistribution ](name='money_involved_history'),
  // 涉案人数
  peopleInvolved?: long(name='people_involved'),
  // 影响人数的历史曲线
  peopleInvolvedHistory?: [ RtopDateDistribution ](name='people_involved_history'),
  // 影响的人数分布，key为地区城市，value为影响的人数
  populationDistribution?: [ RtopPopulationDistribution ](name='population_distribution'),
  // 注册市
  registeredCity?: string(name='registered_city'),
  // 注册县
  registeredCounty?: string(name='registered_county'),
  // 注册省
  registeredProvince?: string(name='registered_province'),
}

/**
 * Description: 查询涉众风险企业的详细信息
 * Summary: 查询涉众风险企业的详细信息
 */
async function queryRtopCrowdriskDetail(request: QueryRtopCrowdriskDetailRequest): QueryRtopCrowdriskDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRtopCrowdriskDetailEx(request, headers, runtime);
}

/**
 * Description: 查询涉众风险企业的详细信息
 * Summary: 查询涉众风险企业的详细信息
 */
async function queryRtopCrowdriskDetailEx(request: QueryRtopCrowdriskDetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRtopCrowdriskDetailResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rtop.crowdrisk.detail.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRtopRiskstormRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业ID
  companyId?: string(name='company_id'),
  // 数据类型
  type?: string(name='type'),
}

model QueryRtopRiskstormResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 年报数据
  annualReports?: [ RtopRiskStormCompanyAnnualReport ](name='annual_reports'),
  // 风险标签数据
  riskLabels?: [ RiskStormLabelResp ](name='risk_labels'),
}

/**
 * Description: 查询风报的详细信息
 * Summary: 查询风报的详细信息
 */
async function queryRtopRiskstorm(request: QueryRtopRiskstormRequest): QueryRtopRiskstormResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRtopRiskstormEx(request, headers, runtime);
}

/**
 * Description: 查询风报的详细信息
 * Summary: 查询风报的详细信息
 */
async function queryRtopRiskstormEx(request: QueryRtopRiskstormRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRtopRiskstormResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rtop.riskstorm.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRtopCrowdriskSumRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 指定的企业ID列表，企业ID数量不超过100个。
  companyIds: [ string ](name='company_ids'),
  // 指定的地区名称，例如温州市、鹿城区等
  placeName: string(name='place_name'),
  // 地区类型，PROVINCE表示省，CITY表示市，COUNTY表示县
  placeType: string(name='place_type'),
}

model QueryRtopCrowdriskSumResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 查询企业的影响金额之和
  moneyInvolved?: long(name='money_involved'),
  // 查询企业的影响人数之和
  peopleInvolved?: long(name='people_involved'),
}

/**
 * Description: 监管涉众风险指定的一批企业的影响人数之和、影响金额之和
 * Summary: 监管涉众风险一批企业的影响人数影响金额
 */
async function queryRtopCrowdriskSum(request: QueryRtopCrowdriskSumRequest): QueryRtopCrowdriskSumResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRtopCrowdriskSumEx(request, headers, runtime);
}

/**
 * Description: 监管涉众风险指定的一批企业的影响人数之和、影响金额之和
 * Summary: 监管涉众风险一批企业的影响人数影响金额
 */
async function queryRtopCrowdriskSumEx(request: QueryRtopCrowdriskSumRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRtopCrowdriskSumResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rtop.crowdrisk.sum.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetRtopCompanyDetailRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业ID
  companyId: string(name='company_id'),
}

model GetRtopCompanyDetailResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 风险维度特征
  riskFeatures?: string(name='risk_features'),
  // 风险分数
  riskScore?: long(name='risk_score'),
  // 风险标签列表
  riskTags?: [ RtopRiskTag ](name='risk_tags'),
}

/**
 * Description: 监管企业详情获取，包括风险分数、风险标签。
 * Summary: 监管企业详情获取
 */
async function getRtopCompanyDetail(request: GetRtopCompanyDetailRequest): GetRtopCompanyDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getRtopCompanyDetailEx(request, headers, runtime);
}

/**
 * Description: 监管企业详情获取，包括风险分数、风险标签。
 * Summary: 监管企业详情获取
 */
async function getRtopCompanyDetailEx(request: GetRtopCompanyDetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetRtopCompanyDetailResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rtop.company.detail.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRtopCompanyRiskinfoRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户access key
  ak: string(name='ak'),
  // 业务场景 ""
  bizType?: string(name='biz_type'),
  // 预留字段
  memo?: string(name='memo'),
  // 区域中文名称
  placeName: string(name='place_name'),
  // 区域类型
  placeType: string(name='place_type'),
  // 租户seceret key
  sk: string(name='sk'),
}

model QueryRtopCompanyRiskinfoResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 企业列表
  data?: [ RtopCompanyRiskInfo ](name='data'),
}

/**
 * Description: 企业风险查询接口
 * Summary: 企业风险查询接口
 */
async function queryRtopCompanyRiskinfo(request: QueryRtopCompanyRiskinfoRequest): QueryRtopCompanyRiskinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRtopCompanyRiskinfoEx(request, headers, runtime);
}

/**
 * Description: 企业风险查询接口
 * Summary: 企业风险查询接口
 */
async function queryRtopCompanyRiskinfoEx(request: QueryRtopCompanyRiskinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRtopCompanyRiskinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rtop.company.riskinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecRtopGenericInvokeRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // {"platformId":1234}
  content: string(name='content'),
  // 这个账号的所有权限点，逗号分隔
  permission: string(name='permission'),
  // title
  title: string(name='title'),
}

model ExecRtopGenericInvokeResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 接口数据
  data?: string(name='data'),
  // response_code
  responseCode?: string(name='response_code'),
  // 是否请求成功
  success?: boolean(name='success'),
}

/**
 * Description: 公有云通用风险信息接口
 * Summary: 公有云通用风险信息接口
 */
async function execRtopGenericInvoke(request: ExecRtopGenericInvokeRequest): ExecRtopGenericInvokeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execRtopGenericInvokeEx(request, headers, runtime);
}

/**
 * Description: 公有云通用风险信息接口
 * Summary: 公有云通用风险信息接口
 */
async function execRtopGenericInvokeEx(request: ExecRtopGenericInvokeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecRtopGenericInvokeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rtop.generic.invoke.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateRtopTokenRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model CreateRtopTokenResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 返回数据
  data?: string(name='data'),
  // 返回码
  responseCode?: string(name='response_code'),
  // 成功，失败
  success?: boolean(name='success'),
}

/**
 * Description: 公有云生成token
 * Summary: 公有云生成token
 */
async function createRtopToken(request: CreateRtopTokenRequest): CreateRtopTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createRtopTokenEx(request, headers, runtime);
}

/**
 * Description: 公有云生成token
 * Summary: 公有云生成token
 */
async function createRtopTokenEx(request: CreateRtopTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateRtopTokenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rtop.token.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRtopRisklabelRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // mct_one_id  -- search after使用
  mctOneId?: string(name='mct_one_id'),
  // pageNo
  pageNo: long(name='page_no'),
  // pageSize
  pageSize: long(name='page_size'),
  // scroll_id
  scrollId?: string(name='scroll_id'),
  // tag_id  -- search after使用
  tagId?: string(name='tag_id'),
  // 数据更新日期
  updateDate: string(name='update_date'),
}

model QueryRtopRisklabelResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 返回码
  responseCode?: string(name='response_code'),
  // 标签信息
  riskLabelInfos?: [ RiskLabelInfo ](name='risk_label_infos'),
  // scroll_id
  scrollId?: string(name='scroll_id'),
  // 是否调用成功
  success?: boolean(name='success'),
  // total
  total?: long(name='total'),
}

/**
 * Description: 标签全量信息获取
 * Summary: 标签全量信息获取
 */
async function queryRtopRisklabel(request: QueryRtopRisklabelRequest): QueryRtopRisklabelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRtopRisklabelEx(request, headers, runtime);
}

/**
 * Description: 标签全量信息获取
 * Summary: 标签全量信息获取
 */
async function queryRtopRisklabelEx(request: QueryRtopRisklabelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRtopRisklabelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rtop.risklabel.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRtopCompanyRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 公司ID集合
  companyIds: [ string ](name='company_ids'),
  // 数据同步到公有云时间(业务上赋值当天)
  updateDate: string(name='update_date'),
}

model QueryRtopCompanyResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 企业信息列表
  companyInfos?: [ CompanyInfo ](name='company_infos'),
  // 返回码
  responseCode?: string(name='response_code'),
  // 是否调用成功
  success?: boolean(name='success'),
}

/**
 * Description: 企业全量信息获取
 * Summary: 企业全量信息获取
 */
async function queryRtopCompany(request: QueryRtopCompanyRequest): QueryRtopCompanyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRtopCompanyEx(request, headers, runtime);
}

/**
 * Description: 企业全量信息获取
 * Summary: 企业全量信息获取
 */
async function queryRtopCompanyEx(request: QueryRtopCompanyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRtopCompanyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rtop.company.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRtopRisklabelFilterRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // pageNo
  pageNo: long(name='page_no'),
  // page_size
  pageSize: long(name='page_size'),
  // 成都市
  placeName: string(name='place_name'),
  // CITY
  placeType: string(name='place_type'),
}

model QueryRtopRisklabelFilterResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 返回码
  responseCode?: string(name='response_code'),
  // 标签配置全量信息
  riskLabelFilterConfigInfo?: [ RiskLabelFilterConfigInfo ](name='risk_label_filter_config_info'),
  // 是否调用成功
  success?: boolean(name='success'),
  // 总数
  total?: long(name='total'),
}

/**
 * Description: 标签配置全量信息获取
rtop_company_tag_filter_config
 * Summary: 标签配置全量信息获取
 */
async function queryRtopRisklabelFilter(request: QueryRtopRisklabelFilterRequest): QueryRtopRisklabelFilterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRtopRisklabelFilterEx(request, headers, runtime);
}

/**
 * Description: 标签配置全量信息获取
rtop_company_tag_filter_config
 * Summary: 标签配置全量信息获取
 */
async function queryRtopRisklabelFilterEx(request: QueryRtopRisklabelFilterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRtopRisklabelFilterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rtop.risklabel.filter.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PullRegtechNewsRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 表示本地数据库中舆情数据中的最大id
  newsMaxId: string(name='news_max_id'),
}

model PullRegtechNewsResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 返回的数据体
  data?: string(name='data'),
}

/**
 * Description: 用于鹰眼项目舆情同步
 * Summary: 鹰眼项目舆情同步
 */
async function pullRegtechNews(request: PullRegtechNewsRequest): PullRegtechNewsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pullRegtechNewsEx(request, headers, runtime);
}

/**
 * Description: 用于鹰眼项目舆情同步
 * Summary: 鹰眼项目舆情同步
 */
async function pullRegtechNewsEx(request: PullRegtechNewsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PullRegtechNewsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.regtech.news.pull', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRtopCompanyFeedbackRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 当前是第几页
  pageNo: long(name='page_no'),
  // 每一页的记录条数
  pageSize: long(name='page_size'),
  // 用户属地
  userPlace: string(name='user_place'),
  // 用户所在地类型
  userPlaceType: string(name='user_place_type'),
}

model QueryRtopCompanyFeedbackResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 企业反馈列表
  companyFeedbacks?: [ RtopCompanyFeedback ](name='company_feedbacks'),
  // 返回码
  responseCode?: string(name='response_code'),
  // 是否调用成功
  success?: boolean(name='success'),
  // 总条数
  totalNum?: long(name='total_num'),
}

/**
 * Description: 查看企业反馈
 * Summary: 查看企业反馈
 */
async function queryRtopCompanyFeedback(request: QueryRtopCompanyFeedbackRequest): QueryRtopCompanyFeedbackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRtopCompanyFeedbackEx(request, headers, runtime);
}

/**
 * Description: 查看企业反馈
 * Summary: 查看企业反馈
 */
async function queryRtopCompanyFeedbackEx(request: QueryRtopCompanyFeedbackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRtopCompanyFeedbackResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rtop.company.feedback.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRtopCompanyAlarmRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据的时间
  dataTime: string(name='data_time'),
  // 当前是第几页
  pageNo: long(name='page_no'),
  // 每一页的记录条数
  pageSize: long(name='page_size'),
  // 用户属地
  userPlace: string(name='user_place'),
  // 用户所在地类型
  userPlaceType: string(name='user_place_type'),
}

model QueryRtopCompanyAlarmResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 预警企业列表
  companyAlarms?: [ RtopCompanyAlarm ](name='company_alarms'),
  // 返回码
  responseCode?: string(name='response_code'),
  // 是否调用成功
  success?: boolean(name='success'),
  // 总条数
  totalNum?: long(name='total_num'),
}

/**
 * Description: 全局动态中的预警企业详细列表查询
 * Summary: 全局动态中的预警企业详细列表查询
 */
async function queryRtopCompanyAlarm(request: QueryRtopCompanyAlarmRequest): QueryRtopCompanyAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRtopCompanyAlarmEx(request, headers, runtime);
}

/**
 * Description: 全局动态中的预警企业详细列表查询
 * Summary: 全局动态中的预警企业详细列表查询
 */
async function queryRtopCompanyAlarmEx(request: QueryRtopCompanyAlarmRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRtopCompanyAlarmResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rtop.company.alarm.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRtopCompanyRiskyRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据时间
  dataTime: string(name='data_time'),
  // 全局态势中的列表 类型
  listType: string(name='list_type'),
  // 当前是第几页
  pageNo: long(name='page_no'),
  // 每一页的记录条数
  pageSize: long(name='page_size'),
  // 全局动态类型
  type: string(name='type'),
  // 用户属地
  userPlace: string(name='user_place'),
  // 用户所在地类型
  userPlaceType: string(name='user_place_type'),
}

model QueryRtopCompanyRiskyResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 返回码
  responseCode?: string(name='response_code'),
  // 全局动态中的企业列表
  riskyCompanies?: [ RtopRiskyCompany ](name='risky_companies'),
  // 是否调用成功
  success?: boolean(name='success'),
  // 总条数
  totalNum?: long(name='total_num'),
}

/**
 * Description: 查询全局动态中的企业列表里的全部列表
 * Summary: 查询全局动态中的企业列表里的全部列表
 */
async function queryRtopCompanyRisky(request: QueryRtopCompanyRiskyRequest): QueryRtopCompanyRiskyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRtopCompanyRiskyEx(request, headers, runtime);
}

/**
 * Description: 查询全局动态中的企业列表里的全部列表
 * Summary: 查询全局动态中的企业列表里的全部列表
 */
async function queryRtopCompanyRiskyEx(request: QueryRtopCompanyRiskyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRtopCompanyRiskyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rtop.company.risky.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRtopCompanyListRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 活跃地区
  activeAreas?: [ string ](name='active_areas'),
  // 企业类型
  categories?: [ string ](name='categories'),
  // 企业状态
  companyStates?: [ string ](name='company_states'),
  // 反馈
  feedback?: [ string ](name='feedback'),
  // 风险指数最大值
  maxRiskScore?: long(name='max_risk_score'),
  // 指数周波动最大值
  maxRiskScoreWeeklyFloat?: string(name='max_risk_score_weekly_float'),
  // 传播人次最大值
  maxSpreadNumber?: long(name='max_spread_number'),
  // 风险指数最小值
  minRiskScore?: long(name='min_risk_score'),
  // 指数周波动最小值
  minRiskScoreWeeklyFloat?: string(name='min_risk_score_weekly_float'),
  // 传播人次最小值
  minSpreadNumber?: long(name='min_spread_number'),
  // 正常营运状态
  normalOperation?: boolean(name='normal_operation'),
  // 经营地区
  operateAreas?: [ string ](name='operate_areas'),
  // 当前是第几页
  pageNo: long(name='page_no'),
  // 每一页的记录条数
  pageSize: long(name='page_size'),
  // 平台状态
  platformStates?: [ string ](name='platform_states'),
  // 注册地区
  registerAreas?: [ string ](name='register_areas'),
  // 高风险维度
  riskyDimensions?: [ string ](name='risky_dimensions'),
  // 风险标签
  riskTags?: [ string ](name='risk_tags'),
  // 风险定性
  riskTypes?: [ string ](name='risk_types'),
  // 排序字段
  sortField?: string(name='sort_field'),
  // 排序类型
  sortType?: string(name='sort_type'),
  // 用户属地
  userPlace: string(name='user_place'),
  // 用户所在地类型
  userPlaceType: string(name='user_place_type'),
}

model QueryRtopCompanyListResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 企业id列表
  companyIds?: [ string ](name='company_ids'),
  // 返回码
  responseCode?: string(name='response_code'),
  // 是否调用成功
  success?: boolean(name='success'),
  // 总条数
  totalNum?: long(name='total_num'),
}

/**
 * Description: 查询企业列表
 * Summary: 查询企业列表
 */
async function queryRtopCompanyList(request: QueryRtopCompanyListRequest): QueryRtopCompanyListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRtopCompanyListEx(request, headers, runtime);
}

/**
 * Description: 查询企业列表
 * Summary: 查询企业列表
 */
async function queryRtopCompanyListEx(request: QueryRtopCompanyListRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRtopCompanyListResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rtop.company.list.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRtopRisklabelConfigRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // page_no
  pageNo: long(name='page_no'),
  // page_size
  pageSize: long(name='page_size'),
}

model QueryRtopRisklabelConfigResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 返回码	
  // 
  responseCode?: string(name='response_code'),
  // 是否调用成功	
  // 
  success?: boolean(name='success'),
  // 列表
  tagConfig?: [ RiskLabelConfigInfo ](name='tag_config'),
  // 总数
  total?: long(name='total'),
}

/**
 * Description: 标签配置全量信息获取
 * Summary: 标签配置全量信息获取
 */
async function queryRtopRisklabelConfig(request: QueryRtopRisklabelConfigRequest): QueryRtopRisklabelConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRtopRisklabelConfigEx(request, headers, runtime);
}

/**
 * Description: 标签配置全量信息获取
 * Summary: 标签配置全量信息获取
 */
async function queryRtopRisklabelConfigEx(request: QueryRtopRisklabelConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRtopRisklabelConfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rtop.risklabel.config.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRtopCompanyRiskRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业id
  companyId: string(name='company_id'),
}

model QueryRtopCompanyRiskResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 风险维度
  riskFactors?: [ RtopCompanyRiskFactor ](name='risk_factors'),
  // 风险等级
  riskLevel?: string(name='risk_level'),
  // 风险报文
  riskMessage?: string(name='risk_message'),
  // 风险分数
  riskScore?: long(name='risk_score'),
  // 风险标签
  riskTags?: [ string ](name='risk_tags'),
}

/**
 * Description: 企业风险标签信息查询
 * Summary: 企业风险标签信息查询
 */
async function queryRtopCompanyRisk(request: QueryRtopCompanyRiskRequest): QueryRtopCompanyRiskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRtopCompanyRiskEx(request, headers, runtime);
}

/**
 * Description: 企业风险标签信息查询
 * Summary: 企业风险标签信息查询
 */
async function queryRtopCompanyRiskEx(request: QueryRtopCompanyRiskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRtopCompanyRiskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rtop.company.risk.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListRtopCompanyRelatedRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业id
  companyId: string(name='company_id'),
}

model ListRtopCompanyRelatedResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // node
  companies?: [ RtopRiskGeneNode ](name='companies'),
  // 返回码
  // 
  responseCode?: string(name='response_code'),
  // 是否调用成功
  // 
  success?: boolean(name='success'),
}

/**
 * Description: 查看重点关联企业
 * Summary: 重点关联企业
 */
async function listRtopCompanyRelated(request: ListRtopCompanyRelatedRequest): ListRtopCompanyRelatedResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listRtopCompanyRelatedEx(request, headers, runtime);
}

/**
 * Description: 查看重点关联企业
 * Summary: 重点关联企业
 */
async function listRtopCompanyRelatedEx(request: ListRtopCompanyRelatedRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRtopCompanyRelatedResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rtop.company.related.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRtopTagImageRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业ID
  companyId: string(name='company_id'),
  // 标签ID
  tagId: string(name='tag_id'),
}

model QueryRtopTagImageResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 标签图片列表
  riskImages?: [ RtopTagImage ](name='risk_images'),
}

/**
 * Description: 风险标签图片查询
 * Summary: 风险标签图片查询
 */
async function queryRtopTagImage(request: QueryRtopTagImageRequest): QueryRtopTagImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRtopTagImageEx(request, headers, runtime);
}

/**
 * Description: 风险标签图片查询
 * Summary: 风险标签图片查询
 */
async function queryRtopTagImageEx(request: QueryRtopTagImageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRtopTagImageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rtop.tag.image.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListRtopStarCompanyRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 页码
  pageNo: long(name='page_no'),
  // 一页条数
  pageSize: long(name='page_size'),
}

model ListRtopStarCompanyResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 企业列表
  companyInfos?: [ RtopStarCompanyInfo ](name='company_infos'),
  // 页码
  pageNo?: long(name='page_no'),
  // 一页条数
  pageSize?: long(name='page_size'),
  // 总的记录数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询用户收藏企业列表
 * Summary: 查询用户收藏企业列表
 */
async function listRtopStarCompany(request: ListRtopStarCompanyRequest): ListRtopStarCompanyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listRtopStarCompanyEx(request, headers, runtime);
}

/**
 * Description: 查询用户收藏企业列表
 * Summary: 查询用户收藏企业列表
 */
async function listRtopStarCompanyEx(request: ListRtopStarCompanyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRtopStarCompanyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rtop.star.company.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRpSecurityPolicyRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 风险类型：表示风险处理或风险咨询——process/advice
  riskType: string(name='risk_type'),
  // security_scene
  securityScene: SecurityScene(name='security_scene'),
  // service_context
  serviceContext: ServiceContext(name='service_context'),
}

model QueryRpSecurityPolicyResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 模型结果详情
  // 
  modelDetails?: [ ModelDetails ](name='model_details'),
  // 反馈成功之后的id
  securityId?: string(name='security_id'),
  // 安全处理结果，枚举值为：reject[拒绝],validate[校验],accept[放过]
  securityResult?: string(name='security_result'),
  // 策略结果详情
  // 
  strategyDetails?: [ StrategyDetails ](name='strategy_details'),
}

/**
 * Description: 策略咨询服务输出(saas)
 * Summary: 策略咨询服务输出(saas)
 */
async function queryRpSecurityPolicy(request: QueryRpSecurityPolicyRequest): QueryRpSecurityPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRpSecurityPolicyEx(request, headers, runtime);
}

/**
 * Description: 策略咨询服务输出(saas)
 * Summary: 策略咨询服务输出(saas)
 */
async function queryRpSecurityPolicyEx(request: QueryRpSecurityPolicyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRpSecurityPolicyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'riskplus.rp.security.policy.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

