import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.4.59',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 资源所属的App
model AssignedApp {
  // workspace_id
  workspaceId: string(name='workspace_id', example='workspace_id'),
  // app_id
  appId: string(name='app_id', example='app_id'),
}

// RegionView
model RegionView {
  // id
  id: string(name='id', example='id'),
  // identity
  identity: string(name='identity', example='identity'),
  // providerId
  providerId: string(name='provider_id', example='providerId'),
  // name
  name: string(name='name', example='name'),
  // state
  state: string(name='state', example='state'),
  // description
  description: string(name='description', example='description'),
  // networkType
  networkType: string(name='network_type', example='networkType'),
  // availableNetworkTypes
  availableNetworkTypes: [ string ](name='available_network_types', example='availableNetworkTypes'),
}

// WorkspaceZoneView
model WorkspaceZoneView {
  // id
  id: string(name='id', example='id'),
  // identity
  identity: string(name='identity', example='identity'),
  // name
  name: string(name='name', example='name'),
  // state
  state: string(name='state', example='state'),
  // description
  description: string(name='description', example='description'),
}

// 数据库
model Database {
  // app_ids
  appIds?: [ string ](name='app_ids', example=''),
  // app_service_ids
  appServiceIds?: [ string ](name='app_service_ids', example=''),
  // assignedApps
  assignedApps?: [ AssignedApp ](name='assigned_apps', example=''),
  // assigned_app_service_ids
  assignedAppServiceIds?: [ string ](name='assigned_app_service_ids', example=''),
  // autoRenew
  autoRenew?: boolean(name='auto_renew', example=''),
  // auto_renew_period
  autoRenewPeriod?: long(name='auto_renew_period', example=''),
  // connection_address
  connectionAddress?: string(name='connection_address', example='connection_address'),
  // cpu
  cpu?: long(name='cpu', example=''),
  // description
  description?: string(name='description', example='description'),
  // engine
  engine?: string(name='engine', example='engine'),
  // engine_version
  engineVersion?: string(name='engine_version', example='engine_version'),
  // iaasId
  iaasId?: string(name='iaas_id', example='iaasId'),
  // iaas_type
  iaasType?: string(name='iaas_type', example='iaas_type'),
  // id
  id: string(name='id', example='id'),
  // master_zone_id
  masterZoneId?: string(name='master_zone_id', example='master_zone_id'),
  // max_connections
  maxConnections?: long(name='max_connections', example=''),
  // max_iops
  maxIops?: long(name='max_iops', example=''),
  // memory
  memory?: long(name='memory', example=''),
  // name
  name: string(name='name', example='name'),
  // network_type
  networkType?: string(name='network_type', example='network_type'),
  // net_type
  netType?: string(name='net_type', example='net_type'),
  // port
  port?: long(name='port', example=''),
  // shared_workspace_ids
  sharedWorkspaceIds?: [ string ](name='shared_workspace_ids', example=''),
  // spec_iaas_id
  specIaasId?: string(name='spec_iaas_id', example='spec_iaas_id'),
  // status
  status: string(name='status', example='status'),
  // storage
  storage?: long(name='storage', example=''),
  // type
  type?: string(name='type', example='type'),
  // utc_create
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // utc_modified
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
  // vpc_id
  vpcId?: string(name='vpc_id', example='vpc_id'),
  // v_switch_iaas_id
  vSwitchIaasId?: string(name='v_switch_iaas_id', example='v_switch_iaas_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='workspace_id'),
}

// 一个 key-value 键值对
model MapStringToStringEntity {
  // 键名
  key: string(name='key', example='key'),
  // 键值
  value: string(name='value', example='value'),
}

// scope
model Scope {
  // cell identity
  cell?: string(name='cell', example='cell identity'),
  // region identity
  region?: string(name='region', example='region identity'),
  // tenant name
  tenant?: string(name='tenant', example='tenant identity'),
  // workspace
  workspace?: string(name='workspace', example='workspace identity'),
  // workspace_group
  workspaceGroup?: string(name='workspace_group', example='workspace_group identity'),
  // zone identity
  zone?: string(name='zone', example='zone identity'),
  // cluster identity
  cluster?: string(name='cluster', example='cluster identity'),
}

// CloudPlatform
model CloudPlatform {
  // host
  host?: string(name='host', example='host'),
  // login_name
  loginName?: string(name='login_name', example='login_name'),
  // name
  name?: string(name='name', example='name'),
  // password
  password?: string(name='password', example='password'),
}

// 用户信息
model UserInfo {
  // ID
  id: string(name='id', example='123'),
  // 用户来源系统，例如BUC,LDAP
  sourceSystem?: string(name='source_system', example='BUC'),
  // 用户在源系统的id
  sourceUserId?: string(name='source_user_id', example='123'),
  // 登录名
  loginName?: string(name='login_name', example='test'),
  // 真实名
  realName?: string(name='real_name', example='test'),
  // 昵称
  nickName?: string(name='nick_name', example='test'),
  // 客户ID
  customerId?: string(name='customer_id', example='123'),
  // 是否超级管理员
  type?: string(name='type', example='admin'),
  // 用户状态
  status?: string(name='status', example='CREATED'),
  // 即时通信账号
  imAccount?: string(name='im_account', example='test'),
  // 邮箱
  email?: string(name='email', example='test@alipay.com'),
  // 联系座机
  phone?: string(name='phone', example='021-6666666'),
  // 手机号
  mobile?: string(name='mobile', example='13666666666'),
  // 工号
  workNo?: string(name='work_no', example='123'),
  // 英文名
  enName?: string(name='en_name', example='test'),
  // 性别
  sex?: string(name='sex', example='MALE'),
  // 国籍
  nationCountry?: string(name='nation_country', example='CN'),
  // 民族
  nation?: string(name='nation', example='汉'),
  // 个人照片路径
  personalPhoto?: string(name='personal_photo', example='http://*/*.png'),
  // 上次登录时间.
  lastLogonTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='last_logon_time', example='2018-10-10T10:10:00Z'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 修改时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
}

// WorkspaceView
model WorkspaceView {
  // id
  id: string(name='id', example='id'),
  // identity
  identity: string(name='identity', example='identity'),
  // name
  name: string(name='name', example='name'),
  // status
  status: string(name='status', example='status'),
  // region
  region: RegionView(name='region', example='region'),
  // zones
  zones: [ WorkspaceZoneView ](name='zones', example=''),
}

// disk related computer infos
model DiskComputer {
  // name
  name?: string(name='name', example='name'),
  // id
  id?: string(name='id', example='id'),
  // iaas id
  iaasId?: string(name='iaas_id', example='i-aksfu8asufoisf***'),
  // status
  status?: string(name='status', example='STOP'),
}

// db account
model DatabaseAccount {
  // database
  database?: Database(name='database', example=''),
  // description
  description?: string(name='description', example='description'),
  // iaas_type
  iaasType?: string(name='iaas_type', example='iaas_type'),
  // id
  id: string(name='id', example='id'),
  // 名称
  name: string(name='name', example='haha'),
  // 密码
  password: string(name='password', example='xxd@#xd'),
  // 权限
  privilege: string(name='privilege', example='READONLY'),
  // status
  status?: string(name='status', example='status'),
  // utc_create
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // utc_modified
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
}

// Zone视图
model ZoneView {
  // id
  id?: string(name='id', example='id'),
  // name
  name?: string(name='name', example='name'),
  // displayName
  displayName?: string(name='display_name', example='displayName'),
}

// Cloud
model Cloud {
  // id
  id?: long(name='id', example='id'),
  // identity
  identity?: string(name='identity', example='identity'),
  // name
  name?: string(name='name', example='name'),
  // platforms
  platforms?: [ CloudPlatform ](name='platforms', example=''),
}

// 代码提交
model CodeCommit {
  // 作者
  author?: string(name='author', example='author'),
  // 分支
  branch?: string(name='branch', example='branch'),
  // 代码版本
  codeVersion?: string(name='code_version', example='code_version'),
  // 时间
  date?: string(name='date', example='date'),
  // id
  id?: string(name='id', example='id'),
  // 消息
  msg?: string(name='msg', example='msg'),
  // 仓库名称
  repoName?: string(name='repo_name', example='repo_name'),
  // 创建时间
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // 修改时间
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
}

// 解决DbSchema结构嵌套用的，其他人不要用这个，用grant
model DbSchemaGrant {
  // privilege
  privilege: string(name='privilege', example='privilege'),
  // account
  account?: DatabaseAccount(name='account', example=''),
}

// Sofa arche type
model ScmSofaArchetype {
  // 用户创建archetype必须要的参数
  generateCode?: boolean(name='generate_code', example='true, false'),
  // Maven代码框架使用 groupId
  groupId?: string(name='group_id', example='123'),
  // Maven代码框架使用 artifactId
  artifactId: string(name='artifact_id', example='123'),
  // Maven代码框架使用 codePackage
  codePackage?: string(name='code_package', example='test'),
  // Sofa代码框架使用 projectType
  projectType?: string(name='project_type', example='test'),
  // Sofa代码框架使用 版本号
  version: string(name='version', example='123'),
  // Sofa代码框架使用 编码方式
  encoding?: string(name='encoding', example='utf-8'),
  // 是否使用私有maven
  usePrivateRepo?: boolean(name='use_private_repo', example='true, false'),
  // 提供给快速研发平台使用，格式为JSON字符串
  metaData?: string(name='meta_data', example='"{}"'),
}

// 应用生命周期
model AppLifeCycle {
  // ID
  id?: string(name='id', example='123'),
  // 应用ID
  appId?: string(name='app_id', example='123'),
  // 工作空间ID
  workspaceId?: string(name='workspace_id', example='123'),
  // 应用状态
  state?: string(name='state', example='DEV | ONLINE | OFFLINE'),
  // 最近运维单号
  lastOpsorderId?: string(name='last_opsorder_id', example='123'),
  // 上次发布版本
  lastDeployVersion: string(name='last_deploy_version', example='123'),
  // 上次发布时间
  lastDeployTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='last_deploy_time', example='2018-10-10T10:10:00Z'),
  // 上线时间
  onlineTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='online_time', example='2018-10-10T10:10:00Z'),
  // 创建时间
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 最近修改时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
}

// LoadBalancer
model LoadBalancer {
  // app_id
  appId?: string(name='app_id', example='app_id'),
  // app_service_ids
  appServiceIds?: [ string ](name='app_service_ids', example=''),
  // assigned_app_ids
  assignedAppIds?: [ string ](name='assigned_app_ids', example='assigned_app_ids'),
  // assigned_app_service_ids
  assignedAppServiceIds?: [ string ](name='assigned_app_service_ids', example=''),
  // auto_renew
  autoRenew?: boolean(name='auto_renew', example='true, false'),
  // auto_renew_period
  autoRenewPeriod?: long(name='auto_renew_period', example='auto_renew_period'),
  // bandwidth
  bandwidth?: long(name='bandwidth', example='1'),
  // cluster_id
  clusterId?: string(name='cluster_id', example='cluster_id'),
  // cluster_mode
  clusterMode?: boolean(name='cluster_mode', example='true, false'),
  // domains
  domains?: [ string ](name='domains', example=''),
  // iaas_id
  iaasId?: string(name='iaas_id', example='iaas_id'),
  // iaas_type
  iaasType?: string(name='iaas_type', example='iaas_type'),
  // lb id
  id: string(name='id', example='id'),
  // internet_charge_type
  internetChargeType?: string(name='internet_charge_type', example='internet_charge_type'),
  // lb名称
  name?: string(name='name', example='name'),
  // network_type
  networkType?: string(name='network_type', example='network_type'),
  // provider_id
  providerId?: string(name='provider_id', example='provider_id'),
  // regionId
  regionId?: string(name='region_id', example='regionId'),
  // scope
  scope?: Scope(name='scope', example='scope'),
  // share_mode
  shareMode?: boolean(name='share_mode', example='true, false'),
  // lb状态
  status?: string(name='status', example='status'),
  // utc_create
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // utc_modified
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
  // vip_addresses
  vipAddresses?: [ string ](name='vip_addresses', example=''),
  // vip_address_type
  vipAddressType?: string(name='vip_address_type', example='vip_address_type'),
  // vip_type
  vipType?: string(name='vip_type', example='vip_type'),
  // vpc_id
  vpcId?: string(name='vpc_id', example='vpc_id'),
  // v_switch_iaas_id
  vSwitchIaasId?: string(name='v_switch_iaas_id', example='v_switch_iaas_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='workspace_id'),
  // zone_id
  zoneId?: string(name='zone_id', example='zone_id'),
  // options，扩展字段
  options?: [ MapStringToStringEntity ](name='options', example=''),
  // load_balancer_spec
  loadBalancerSpec?: string(name='load_balancer_spec', example='load_balancer_spec'),
}

// 应用负责人
model AppOwner {
  // 研发负责人
  devOwner?: UserInfo(name='dev_owner', example=''),
  // backup开发人员
  backupDevOwners?: [ UserInfo ](name='backup_dev_owners', example=''),
  // 测试负责人
  testOwner?: UserInfo(name='test_owner', example=''),
  // 备用测试人员
  backupTestOwners?: [ UserInfo ](name='backup_test_owners', example=''),
  // 运维负责人
  ops?: UserInfo(name='ops', example=''),
  // 备用SRE人员
  backupOpses?: [ UserInfo ](name='backup_opses', example=''),
  // 开发architect负责人
  devArchitect?: UserInfo(name='dev_architect', example=''),
  // 备用Architects联系人
  backupDevArchitects?: [ UserInfo ](name='backup_dev_architects', example=''),
  // 测试architect
  testArchitect?: UserInfo(name='test_architect', example=''),
  // 备用测试architects
  backupTestArchitects?: [ UserInfo ](name='backup_test_architects', example=''),
}

// 代码仓库
model CodeRepository {
  // 代码仓库ID
  id: string(name='id', example='123'),
  // 名称
  name: string(name='name', example='gitlab'),
  // VCS源代码管理系统
  type?: string(name='type', example='git | svn'),
  // 负责人
  owner?: string(name='owner', example='owner name'),
  // 源代码地址
  sourceLocation?: string(name='source_location', example='gitlab'),
  // 被SCM管理的远程仓库ID
  remoteRepoId?: string(name='remote_repo_id', example='123'),
  // 流程标记id(可选参数)
  instanceId?: string(name='instance_id', example='1234'),
  // 是否初始化目录(可选参数，目前金融云传与不传都不初始化)
  isInitStandardPath?: boolean(name='is_init_standard_path', example='true, false'),
  // 代码库是否可复用(默认为不复用 0)
  repoReuse?: string(name='repo_reuse', example='"0"'),
  // 父代码库名称(reposReuse为0时可以不传)
  parentReposName?: string(name='parent_repos_name', example='test'),
  // 代码仓库状态
  status?: string(name='status', example='CREATING, CREATE_FAILED, GENERATING_CODE, GENERATING_CODE_FAILED, FINISHED'),
  // 扩展参数，JSON字符串
  extraParams?: string(name='extra_params', example='"{}"'),
  // 是否使用已有仓库
  useExist?: boolean(name='use_exist', example='true, false'),
  // 分组名称
  groupName?: string(name='group_name', example='test'),
}

// disk
model Disk {
  // ssd, cloud_efficiency
  category?: string(name='category', example='ssd'),
  // disk related computer info
  computer?: DiskComputer(name='computer', example=''),
  // 是否同时删除自动快照
  deleteAutoSnapshot?: boolean(name='delete_auto_snapshot', example='true, false'),
  // 磁盘是否随container一起释放
  deleteWithComputer?: boolean(name='delete_with_computer', example='true, false'),
  // device info
  device?: string(name='device', example='/dev/xvdb'),
  // 磁盘是否执行自动快照策略
  enableAutoSnapshot?: boolean(name='enable_auto_snapshot', example='true, false'),
  // iaasId
  iaasId?: string(name='iaas_id', example='d-dsf8usduiufsid***'),
  // id
  id?: string(name='id', example='0000000001'),
  // 创建磁盘的镜像
  imageId?: string(name='image_id', example='d-dafjlakgh23424hhkjh***'),
  // name
  name?: string(name='name', example='name'),
  // 磁盘是否可卸载
  portable?: boolean(name='portable', example='true, false'),
  // providerId
  providerId?: string(name='provider_id', example='0000000001'),
  // regionId
  regionId?: string(name='region_id', example='0000000001'),
  // disk size
  size?: long(name='size', example=''),
  // disk status
  status?: string(name='status', example='AVAILABLE'),
  // tenantId
  tenantId?: string(name='tenant_id', example='0000000001'),
  // SYSTEM, DATA
  type?: string(name='type', example='SYSTEM'),
  // utcCreate
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // utcModified
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
  // workspaceId
  workspaceId?: string(name='workspace_id', example='000000001'),
  // zoneId
  zoneId?: string(name='zone_id', example='000000001'),
}

// workspace zone
model WorkspaceZoneDto {
  // id
  id: string(name='id', example='001'),
  // workspace_id
  workspaceId: string(name='workspace_id', example='001'),
  // zone_id
  zoneId: string(name='zone_id', example='001'),
  // zone name
  zoneName?: string(name='zone_name', example='shanghai'),
}

// WorkspaceGroupView
model WorkspaceGroupView {
  // id
  id: string(name='id', example='id'),
  // name
  name: string(name='name', example='name'),
  // displayName
  displayName: string(name='display_name', example='displayName'),
  // tenantId
  tenantId: string(name='tenant_id', example='tenantId'),
  // properties
  properties: string(name='properties', example='properties'),
  // status
  status: string(name='status', example='status'),
  // workspaces
  workspaces: [ WorkspaceView ](name='workspaces', example='workspaces'),
}

// 用于Task的嵌套Request，其他API请直接使用Request
model TaskRequest {
  // id
  id: string(name='id', example='id'),
  // operator
  operator?: string(name='operator', example='operator'),
  // token
  token?: string(name='token', example='token'),
  // type
  type: string(name='type', example='type'),
  // status
  status?: string(name='status', example='status'),
}

// 应用等级
model AppLevel {
  // ID
  id: string(name='id', example='1234'),
  // 应用等级名称
  name?: string(name='name', example='test'),
  // 创建者
  creatorId?: string(name='creator_id', example='tester'),
  // 租户ID
  tenantId?: string(name='tenant_id', example='123'),
  // 创建时间
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // 最近修改时间
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
}

// 路由的下一跳详细信息。
model NextHopItem {
  // 	
  // 下一跳的类型。
  // 
  // Instance：ECS实例。
  // HaVip：高可用虚拟IP。
  // VpnGateway：VPN网关。
  // NatGateway：NAT网关。
  // NetworkInterface：辅助弹性网卡。
  // RouterInterface：路由器接口。
  // IPv6Gateway：IPv6网关。
  nextHopType?: string(name='next_hop_type', example='HaVip'),
  // 下一跳实例的ID。
  nextHopId?: string(name='next_hop_id', example='ri-2zeo3xzyf38r4urzdpvqw'),
  // 是否启用下一跳。
  // 
  // 0：不启用。
  // 1：启用。
  enable?: long(name='enable', example='0'),
  // 下一跳的路由权重。
  weight?: long(name='weight', example='80'),
}

// 应用扩展信息
model AppExtraInfo {
  // ID
  id?: string(name='id', example='123'),
  // 名称
  name?: string(name='name', example='test'),
  // 值
  value?: string(name='value', example='test'),
  // 描述
  description?: string(name='description', example='test'),
  // 模板ID
  templateId?: string(name='template_id', example='123'),
  // 模板类型
  type?: string(name='type', example='TEXT, AppTemplateTypeEnum, USER'),
  // 创建时间
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // 最近修改时间
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
  // 应用扩展信息ID
  appExtrainfoId?: string(name='app_extrainfo_id', example='123'),
  // 应用ID
  appId?: string(name='app_id', example='123'),
  // 模板数据ID
  templateDataId?: string(name='template_data_id', example='123'),
}

// 阿里云日志服务(SLS)-脱敏功能配置
model SLSConfigSensitiveKey {
  // 是否替换该字段中所有的敏感内容。建议设置为true
  all: boolean(name='all', example='true, false'),
  // 当type设置为const时必须填写
  constValue?: string(name='const_value', example='const'),
  // 日志Key名称
  key: string(name='key', example='key'),
  // 敏感内容的前缀
  regexBegin: string(name='regex_begin', example='regex_begin'),
  // 敏感内容正则表达式。
  regexContent: string(name='regex_content', example='regex_content'),
  // 脱敏方式，取值为const、md5。
  // 若取值为const，则将敏感内容替换成const字段取值内容。
  // 若取值为md5，则将敏感内容替换为其对应的MD5值。
  type: string(name='type', example='const、md5'),
}

// JoinedSecurityGroupVO
model JoinedSecurityGroupVO {
  // iaas id
  iaasId?: string(name='iaas_id', example='sg-slg4s5f4sf43s54f***'),
  // name
  name?: string(name='name', example='name'),
  // workspace id
  workspaceId?: string(name='workspace_id', example='12345678'),
  // workspace name
  workspaceName?: string(name='workspace_name', example='wsName'),
}

// 分页查询基类
model PaginationQuery {
  // 当前页数
  currentPage?: long(name='current_page', example='1'),
  // isLocaleEnabled
  isLocaleEnabled?: boolean(name='is_locale_enabled', example='isLocaleEnabled'),
  // local
  local?: string(name='local', example='local'),
  // 分页大小
  pageSize?: long(name='page_size', example='10'),
  // paging
  paging?: boolean(name='paging', example='true, false'),
  // 查询类型
  queryType?: string(name='query_type', example='FUZZY'),
  // search
  search?: boolean(name='search', example='true, false'),
  // 排序关键字列表
  orders?: [ string ](name='orders', example=''),
}

// IaasErrorInfo
model IaasErrorInfo {
  // error_code
  errorCode?: string(name='error_code', example='error_code'),
  // error_message
  errorMessage?: string(name='error_message', example='error_message'),
  // status_code
  statusCode?: long(name='status_code', example=''),
  // host_id
  hostId?: string(name='host_id', example='host_id'),
  // requestId
  requestId?: string(name='request_id', example='requestId'),
}

// 单个维度实例，例如WORKSPACE_A
model DimInstance {
  // ID字段，实际不会使用，只是数据库中的索引
  dimId: string(name='dim_id', example='0000000001'),
  // dim_identity
  dimIdentity: string(name='dim_identity', example='WORKSPACE'),
  // value
  value: string(name='value', example='0000000001'),
  // description
  description?: string(name='description', example='description'),
}

// 技术栈运行时属性
model BuildpackInstances {
  // ecs个数
  ecses?: long(name='ecses', example='123'),
  // 绑定应用个数
  appBinded?: long(name='app_binded', example='123'),
}

// WorkspaceDc
model WorkspaceDc {
  // id
  id: string(name='id', example='001'),
  // datacenterId
  datacenterId: string(name='datacenter_id', example='001'),
  // workspaceId
  workspaceId: string(name='workspace_id', example='001'),
  // datacenterType
  datacenterType: string(name='datacenter_type', example='MAIN'),
  // gmtCreate
  gmtCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // gmtModified
  gmtModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
}

// 安全组规则
model SecurityGroupRule {
  // 规则描述信息
  description?: string(name='description', example='规则描述信息'),
  // 目的端IP地址范围。支持CIDR格式和IPv4格式的IP地址范围。
  destCidrIp?: string(name='dest_cidr_ip', example='10.0.0.0/8'),
  // 传输层协议。不区分大小写。取值范围：
  // 
  // icmp
  // gre
  // tcp
  // udp
  // all：支持所有协议
  ipProtocol?: string(name='ip_protocol', example='all'),
  // 经典网络类型安全组规则的网卡类型。取值范围：
  // 
  // internet：公网。
  // intranet：内网。
  // 默认值：internet。
  // 
  // 在以下情况中，参数NicType取值只能为intranet：
  // 
  // 安全组规则的网络类型为专有网络VPC时，您无需设置NicType参数，默认并且只能为intranet。
  // 当设置安全组之间互相访问时，即指定了DestGroupId且没有指定DestCidrIp时。
  nicType?: string(name='nic_type', example='intranet'),
  // 访问权限。取值范围：
  // 
  // accept：接受访问。
  // drop：拒绝访问，不返回拒绝信息。
  // 默认值：accept。
  policy?: string(name='policy', example='accept'),
  // 目的端安全组开放的传输层协议相关的端口范围。取值范围：
  // 
  // TCP/UDP协议：取值范围为1~65535。使用斜线（/）隔开起始端口和终止端口。正确示范：1/200；错误示范：200/1。
  // ICMP协议：-1/-1。
  // GRE协议：-1/-1。
  // all：-1/-1。
  portRange?: string(name='port_range', example=' 80/80'),
  // 安全组规则优先级。取值范围：1~100
  // 
  // 默认值：1。
  priority?: string(name='priority', example='1'),
  // 源端IP地址范围。支持CIDR格式和IPv4格式的IP地址范围。
  // 
  // 默认值：0.0.0.0/0。
  sourceCidrIp?: string(name='source_cidr_ip', example='10.0.0.0/8'),
}

// 应用画像应用ECS节点列表
model AppPortraitAppNodeEcsList {
  // id
  id?: string(name='id', example='id'),
  // zone_id
  zoneId?: string(name='zone_id', example='zone_id'),
  // ip
  ip?: string(name='ip', example='ip'),
  // 实例规格
  instSpec?: string(name='inst_spec', example='4核8g'),
  // cpu
  cpu?: string(name='cpu', example='cpu'),
  // memory
  memory?: string(name='memory', example='memory'),
  // version
  version?: string(name='version', example='version'),
  // name
  name?: string(name='name', example='name'),
  // status
  status?: string(name='status', example='running'),
}

// 查询用的DbSchema
model DbSchema {
  // charSet
  charSet?: string(name='char_set', example='charSet'),
  // database
  database?: Database(name='database', example='database'),
  // description
  description?: string(name='description', example='description'),
  // grants
  grants: [ DbSchemaGrant ](name='grants', example=''),
  // iaas_type
  iaasType?: string(name='iaas_type', example='iaas_type'),
  // id
  id: string(name='id', example='id'),
  // name
  name: string(name='name', example='name'),
  // status
  status: string(name='status', example='status'),
  // utc_create
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // utc_modified
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
}

// ZoneDto
model ZoneDto {
  // id
  id: string(name='id', example='001'),
  // identity
  identity: string(name='identity', example='shanghai'),
  // iaasProviderId
  iaasProviderId: string(name='iaas_provider_id', example='001'),
  // displayName
  displayName: string(name='display_name', example='shanghai'),
  // state
  state: string(name='state', example='state'),
  // regionId
  regionId: string(name='region_id', example='001'),
  // no
  no: long(name='no', example=''),
  // name
  name: string(name='name', example='name'),
  // description
  description: string(name='description', example='description'),
  // utcCreate
  utcCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // utcModified
  utcModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
}

// 一个部署起来提供服务的应用实例信息
model AppService {
  // app_id
  appId?: string(name='app_id', example='app_id'),
  // app_name
  appName?: string(name='app_name', example='app_name'),
  // buildpack_full_version
  buildpackFullVersion?: string(name='buildpack_full_version', example='buildpack_full_version'),
  // buildpack_id
  buildpackId?: string(name='buildpack_id', example='buildpack_id'),
  // cell_ids
  cellIds?: [ string ](name='cell_ids', example='cell_ids'),
  // description
  description?: string(name='description', example='description'),
  // extend_properties
  extendProperties?: string(name='extend_properties', example='extend_properties'),
  // id
  id?: string(name='id', example='id'),
  // is_default
  isDefault?: boolean(name='is_default', example='true, false'),
  // is_service
  isService?: boolean(name='is_service', example='true, false'),
  // last_deploy_status
  lastDeployStatus?: string(name='last_deploy_status', example='last_deploy_status'),
  // last_deploy_version
  lastDeployVersion?: string(name='last_deploy_version', example='last_deploy_version'),
  // last_ops_order_id
  lastOpsOrderId?: string(name='last_ops_order_id', example='last_ops_order_id'),
  // name
  name?: string(name='name', example='name'),
  // owner_id
  ownerId?: string(name='owner_id', example='owner_id'),
  // techstack_id
  techstackId?: long(name='techstack_id', example=''),
  // techstack_identity
  techstackIdentity?: string(name='techstack_identity', example='techstack_identity'),
  // techstack_name
  techstackName?: string(name='techstack_name', example='techstack_name'),
  // utc_create
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // utc_modified
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='workspace_id'),
}

// 阿里云日志服务(SLS)-日志配置-输出类型配置
model SLSConfigOutputDetail {
  // 项目名称，必须为请求的project名。
  projectName: string(name='project_name', example='k8s-log-custom-pbyyzncn-aks1128test-test'),
  // 日志库名称
  logstoreName: string(name='logstore_name', example='testLogStore'),
}

// 应用分组
model AppDomain {
  // 创建人id
  creatorId?: string(name='creator_id', example='creatorId'),
  // id
  id?: string(name='id', example='id'),
  // 名称
  name?: string(name='name', example='name'),
  // parentId
  parentId?: string(name='parent_id', example='parentId'),
  // 租户id
  tenantId?: string(name='tenant_id', example='tenantId'),
  // toRootPath
  toRootPath?: string(name='to_root_path', example='toRootPath'),
  // utcCreate
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // utcModified
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
}

// IaasResponse
model IaasResponse {
  // response_body
  responseBody?: string(name='response_body', example='response_body'),
  // response_headers
  responseHeaders?: [ MapStringToStringEntity ](name='response_headers', example=''),
}

// 阿里云日志服务(SLS)-日志配置-输入类型配置
model SLSConfigInputDetail {
  // 用于过滤日志的key，只有key的值满足对应filterRegex列中设定的正则表达式，该日志数据才会被采集。
  filterKey?: [ string ](name='filter_key', example='key1'),
  // 与filterKey对应的正则表达式， filterRegex的长度和filterKey的长度必须相同。
  filterRegex?: [ string ](name='filter_regex', example='regex1'),
  // 数据写入的模式。默认按照写入，开启后按照写入。支持的值包括 __topic__，__hostname__, __source__。
  shardHashKey?: [ string ](name='shard_hash_key', example='__topic__，__hostname__, __source__。'),
  // 是否上传原始日志。
  enableRawLog?: boolean(name='enable_raw_log', example='true, false'),
  // 脱敏功能配置，类型为数组
  sensitiveKeys?: [ SLSConfigSensitiveKey ](name='sensitive_keys', example=''),
  // 聚合方式，默认为topic，表示按照Topic方式聚合。支持的值为 topic、logstore。
  mergeType?: string(name='merge_type', example='topic, logstore'),
  // 采集进度落后的告警阈值，默认为209715200，即200MB。
  delayAlarmBytes?: long(name='delay_alarm_bytes', example='209715200'),
  // 是否调整日志时区，仅在配置时间解析的情况下使用。
  adjustTimezone?: boolean(name='adjust_timezone', example='true, false'),
  // 时区偏移量，例如日志时间为东八区，则该值为GMT+08:00
  logTimezone?: string(name='log_timezone', example='GMT+08:00'),
  // 日志发送优先级，默认为0，若需设置为高优先级，则设置为1。
  priority?: long(name='priority', example='0'),
  // 日志的采集模式。如果Logtail配置参数inputType选择为file，则该参数为必填项。目前可选：
  // json_log：JSON模式。
  // apsara_log：飞天模式。
  // common_reg_log：完整正则模式。
  // delimiter_log：分隔符模式。
  logType: string(name='log_type', example='json_log, apsara_log, common_reg_log, delimiter_log'),
  // 日志所在的父目录，例如/var/logs/。
  logPath: string(name='log_path', example='/var/logs/'),
  // 日志文件的Pattern，例如access*.log。
  filePattern: string(name='file_pattern', example='access*.log'),
  // Topic生成方式，支持以下四种类型：
  // none，表示topic为空。
  // default，表示将日志文件路径作为topic。
  // group_topic，表示将应用该配置的机器组topic属性作为topic。
  // 也可以将日志文件路径的某一部分作为topic，如/var/log/(.*).log。
  topicFormat: string(name='topic_format', example='none, default, group_topic, /var/log/(.*).log...'),
  // 日志时间格式，如%Y/%m/%d %H:%M:%S。
  timeFormat?: string(name='time_format', example='%Y/%m/%d %H:%M:%S'),
  // 监控目录超时设置。默认为true，代表监控目录永不超时，false代表监控目录超过30分钟则超时。
  preserve?: boolean(name='preserve', example='true, false'),
  // 当设置preserve为false时，指定监控不超时目录的深度，最大深度支持3。
  preserveDepth?: long(name='preserve_depth', example='3'),
  // 支持两种类型：utf8、gbk
  fileEncoding?: string(name='file_encoding', example='utf8, gbk'),
  // 是否丢弃匹配失败的日志。
  discardUnmatch?: boolean(name='discard_unmatch', example='true, false'),
  // 最大目录监控深度范围0-1000，0代表只监控本层目录。
  maxDepth?: long(name='max_depth', example='0'),
  // 采集落后时是否丢弃落后数据的阈值，默认为0，即不丢弃。当采集落后超过该值时，则直接丢弃落后的数据
  delaySkipBytes?: long(name='delay_skip_bytes', example='0'),
  // 采集的目标文件是否为容器内文件，默认为false。
  dockerFile?: boolean(name='docker_file', example='true, false'),
  // 容器Label白名单，采集包含白名单中Label的Docker容器日志，为空表示全部采集。
  dockerIncludeLabel?: [ MapStringToStringEntity ](name='docker_include_label', example=''),
  // 容器Label黑名单，不采集包含黑名单中Label的Docker容器日志，为空表示全部采集。
  dockerExcludeLabel?: [ MapStringToStringEntity ](name='docker_exclude_label', example=''),
  // 容器环境变量白名单，采集包含白名单中的环境变量的日志，为空表示全部采集。
  dockerIncludeEnv?: [ MapStringToStringEntity ](name='docker_include_env', example=''),
  // 容器环境变量黑名单，采集不包含黑名单中的环境变量的日志，为空表示全部采集。
  dockerExcludeEnv?: [ MapStringToStringEntity ](name='docker_exclude_env', example=''),
  // 完整正则/极简模式特有配置，日志内容提取结果的key列表。
  // 完整正则/极简模式 下 必填
  // 分隔符模式特有配置，日志内容提取结果的key列表。
  // 分隔符模式 下 必填
  key?: [ string ](name='key', example='["content"]'),
  // 完整正则/极简模式特有配置，行首正则表达式。
  // 完整正则/极简模式 下 非必填。
  // 飞天模式特有配置，行首正则表达式。
  // 飞天模式 下 非必填。
  logBeginRegex?: string(name='log_begin_regex', example='.*'),
  // 完整正则/极简模式特有配置，提取字段的正则表达式。
  // 完整正则/极简模式 下 非必填
  regex?: string(name='regex', example='(.*)'),
  // JSON模式特有配置，指定时间字段的key名称。
  // JSON模式 下 非必填。
  // 分隔符模式特有配置，指定时间字段key名称，必须在key列表里面。
  // 分割符模式 下 必填。
  timeKey?: string(name='time_key', example='key'),
  // 分隔符模式特有配置，分隔符
  // 分隔符模式 下 非必填
  separator?: string(name='separator', example=','),
  // 分隔符模式特有配置，引用符。
  // 分隔符模式 下 必填
  quote?: string(name='quote', example='\"'),
  // 分隔符模式特有配置，当日志中实际的key数量大于配置的key数量时，是否自动扩展。
  // 分隔符模式 下 非必填。
  autoExtend?: boolean(name='auto_extend', example='true, false'),
  // 插件所需JSON对象字符串，具体请参见。
  plugin?: string(name='plugin', example='{"xxx":"xxx"}'),
}

// TaskVO用Resource字段
model Resource {
  // name
  name: string(name='name', example='name'),
  // description
  description?: string(name='description', example='description'),
  // instance_charge_type
  instanceChargeType?: string(name='instance_charge_type', example='instance_charge_type'),
  // expiredTime
  expiredTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='expired_time', example='expiredTime'),
  // auto_renew
  autoRenew?: boolean(name='auto_renew', example='true, false'),
  // autoRenewPeriod
  autoRenewPeriod?: long(name='auto_renew_period', example='autoRenewPeriod'),
  // iaas_id
  iaasId?: string(name='iaas_id', example='iaas_id'),
  // iaas_type
  iaasType?: string(name='iaas_type', example='iaas_type'),
  // region_id
  regionId?: string(name='region_id', example='region_id'),
  // zone_id
  zoneId: string(name='zone_id', example='zone_id'),
  // id
  id: string(name='id', example='id'),
  // utc_create
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // utc_modified
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
}

// 应用信息
model AppView {
  // 应用组id
  appDomainId?: string(name='app_domain_id', example='123'),
  // 应用扩展信息
  appExtraInfos?: [ AppExtraInfo ](name='app_extra_infos', example=''),
  // 应用等级
  appLevel?: AppLevel(name='app_level', example='{}'),
  // 应用负责人
  appOwner?: AppOwner(name='app_owner', example=''),
  // scm sofa archetype
  archetype?: ScmSofaArchetype(name='archetype', example=''),
  // 技术栈版本
  buildpackVersion?: string(name='buildpack_version', example='123'),
  // 中文名称
  chineseName?: string(name='chinese_name', example='test'),
  // 代码仓库
  codeRepository?: CodeRepository(name='code_repository', example='gitlab'),
  // 描述信息
  description?: string(name='description', example='描述信息'),
  // 扩展参数，JSOn字符串
  extraParams?: string(name='extra_params', example='"{}"'),
  // 应用ID
  id: string(name='id', example='123'),
  // 是否组件中心应用
  isService?: boolean(name='is_service', example='true, false'),
  // 应用名称
  name: string(name='name', example='test'),
  // 负责人ID
  ownerId?: string(name='owner_id', example='123'),
  // 技术栈所属分类ID
  stackId: string(name='stack_id', example='123'),
  // 应用状态
  status?: string(name='status', example='CREATING, CREATED, CREATE_FAILED, DELETING, DELETED, DELETE_FAILED, UPDATING, UPDATE_CODE_REPO_FAILED, INIT_CODE_REPO_FAILED'),
  // 应用标签，JSOn字符串
  tags?: string(name='tags', example='"{}"'),
  // 租户ID
  tenantId?: string(name='tenant_id', example='123'),
  // 创建时间
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // 修改时间
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
  // 工作空间ID
  workspaceId?: string(name='workspace_id', example='123'),
  // 负责人名称
  ownerName?: string(name='owner_name', example='test'),
  // 应用负责人真实名称
  realOwnerName: string(name='real_owner_name', example='test'),
  // 应用域路径名
  domainNames?: [ string ](name='domain_names', example=''),
  // 应用分组名称
  appDomainName: string(name='app_domain_name', example='test'),
  // 应用等级名称
  appLevelName: string(name='app_level_name', example='test'),
  // 技术栈名称
  stackName?: string(name='stack_name', example='test'),
  // 技术栈版本
  stackVersion?: string(name='stack_version', example='test'),
  // 服务器数量
  containerCount?: long(name='container_count', example=''),
  // 数据库个数
  databaseCount?: long(name='database_count', example=''),
  // SLB个数
  slbCount?: long(name='slb_count', example=''),
  // ocs个数
  ocsCount?: long(name='ocs_count', example=''),
  // 发布包个数
  packageCount?: long(name='package_count', example=''),
  // 生命周期信息
  lifeCycle?: AppLifeCycle(name='life_cycle', example=''),
}

// DnsZones
model DnsZones {
  // id
  id: string(name='id', example='id'),
  // name
  name: string(name='name', example='name'),
}

// AppManifest
model AppManifest {
  // app_id
  appId?: string(name='app_id', example='app_id'),
  // app_version
  appVersion?: string(name='app_version', example='app_version'),
  // code_commit
  codeCommit?: CodeCommit(name='code_commit', example='code_commit'),
  // etag
  etag?: string(name='etag', example='etag'),
  // id
  id?: string(name='id', example='id'),
  // location
  location?: string(name='location', example='location'),
  // name
  name?: string(name='name', example='name'),
  // remark
  remark?: string(name='remark', example='remark'),
  // store_location
  storeLocation?: string(name='store_location', example='store_location'),
  // utc_create
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // utc_modified
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='utc_modified'),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='workspace_id'),
}

// Database ImportVO
model ImportVO {
  // is_imported
  isImported: boolean(name='is_imported', example='true, false'),
  // imported_workspace_name
  importedWorkspaceName: string(name='imported_workspace_name', example='imported_workspace_name'),
  // is_unimportable
  isUnimportable?: boolean(name='is_unimportable', example='true, false'),
  // unimportable_reason
  unimportableReason?: string(name='unimportable_reason', example='unimportable_reason'),
}

// 监听器健康检查配置
model ListenerHealthMonitor {
  // check_type
  checkType?: string(name='check_type', example='check_type'),
  // 默认 80
  connectPort?: long(name='connect_port', example=''),
  // 域名
  domain?: string(name='domain', example='xx.com'),
  // 健康阈值
  healthyThreshold?: long(name='healthy_threshold', example=''),
  // health_check_http_code
  healthCheckHttpCode?: [ string ](name='health_check_http_code', example=''),
  // http_method
  httpMethod?: string(name='http_method', example='http_method'),
  // id
  id?: string(name='id', example='id'),
  // 监控检查间隔
  interval: long(name='interval', example=''),
  // 超时时间
  timeout: long(name='timeout', example=''),
  // 不健康阈值
  unHealthyThreshold?: long(name='un_healthy_threshold', example=''),
  // uri
  uri?: string(name='uri', example='/'),
}

// request中的单个任务
model Task {
  // context
  context?: string(name='context', example='context'),
  // execution_times
  executionTimes?: long(name='execution_times', example=''),
  // id
  id?: string(name='id', example='id'),
  // resource_id
  resourceId?: string(name='resource_id', example='resource_id'),
  // resource_type
  resourceType?: string(name='resource_type', example='resource_type'),
  // status
  status?: string(name='status', example='status'),
  // utc_create
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='utc_create'),
  // utc_modified
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='utc_modified'),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='workspace_id'),
  // request
  request?: TaskRequest(name='request', example=''),
}

// WorkspaceRegion
model WorkspaceRegion {
  // id
  id: string(name='id', example='001'),
  // workspaceId
  workspaceId: string(name='workspace_id', example='001'),
  // regionId
  regionId: string(name='region_id', example='001'),
  // type
  type: string(name='type', example='type'),
  // securedIsolationIdentity
  securedIsolationIdentity: string(name='secured_isolation_identity', example='securedIsolationIdentity'),
  // securedIsolationName
  securedIsolationName: string(name='secured_isolation_name', example='securedIsolationName'),
  // securedZoneId
  securedZoneId: string(name='secured_zone_id', example='securedZoneId'),
}

// LB后端专用的vComputerGroup
model VComputerGroup {
  // name
  name: string(name='name', example='name'),
  // id
  id: string(name='id', example='id'),
  // workspace_id
  workspaceId: string(name='workspace_id', example='workspace_id'),
  // load_balancer
  loadBalancer: LoadBalancer(name='load_balancer', example=''),
  // status
  status: string(name='status', example='status'),
}

// 部署单元（Cell）
model CellView {
  // 部署单元对应的paas id
  id?: string(name='id', example='id'),
  // 部署单元名称
  name?: string(name='name', example='name'),
  // 部署单元显示名称
  displayName?: string(name='display_name', example='displayName'),
  // 部署单元描述
  description?: string(name='description', example='description'),
  // deploymentZoneId
  deploymentZoneId?: string(name='deployment_zone_id', example='deploymentZoneId'),
  // workspaceId
  workspaceId?: string(name='workspace_id', example='workspaceId'),
  // workspaceGroupId
  workspaceGroupId?: string(name='workspace_group_id', example='workspaceGroupId'),
  // status
  status?: string(name='status', example='status'),
  // masterZoneId
  masterZoneId?: string(name='master_zone_id', example='masterZoneId'),
  // appendedZoneIds
  appendedZoneIds?: [ string ](name='appended_zone_ids', example='appendedZoneIds'),
  // List<ZoneView> zones
  zones?: [ ZoneView ](name='zones', example=''),
}

// vpc import info
model ImportInfo {
  // 已导入的workspace name
  importedWorkspaceName?: string(name='imported_workspace_name', example='wsName'),
  // vpc是否已导入workspace
  isImported?: boolean(name='is_imported', example='true, false'),
  // 是否可以删除已导入的workspace
  isUnimportable?: boolean(name='is_unimportable', example='true, false'),
  // 不可删除已导入workspace的原因
  unimportableReason?: string(name='unimportable_reason', example='true, false'),
}

// IaasRequest
model IaasRequest {
  // requestMethod
  requestMethod?: string(name='request_method', example='requestMethod'),
  // requestUrl
  requestUrl?: string(name='request_url', example='requestUrl'),
  // requestBody
  requestBody?: string(name='request_body', example='requestBody'),
  // request_headers
  requestHeaders?: [ MapStringToStringEntity ](name='request_headers', example=''),
}

// property
model Property {
  // key
  key: string(name='key', example='key'),
  // value
  value?: string(name='value', example='value'),
}

// WorkspaceWithGroupView
model WorkspaceWithGroupView {
  // id
  id: string(name='id', example='id'),
  // identity
  identity: string(name='identity', example='identity'),
  // name
  name: string(name='name', example='name'),
  // networkType
  networkType: string(name='network_type', example='networkType'),
  // region
  region: RegionView(name='region', example=''),
  // status
  status: string(name='status', example='status'),
  // tenantId
  tenantId: string(name='tenant_id', example='tenantId'),
  // zones
  zones: [ WorkspaceZoneView ](name='zones', example=''),
  // workspaceGroup
  workspaceGroup: WorkspaceGroupView(name='workspace_group', example=''),
}

// AcsClusterUnit
model AcsClusterUnit {
  // cluster_id
  clusterId: string(name='cluster_id', example='cluster_id'),
  // address
  address?: string(name='address', example='address'),
  // unit_status
  unitStatus?: long(name='unit_status', example='1'),
  // create_time
  createTime?: string(name='create_time', example='create_time'),
  // modify_time
  modifyTime?: string(name='modify_time', example='modify_time'),
  // container_id
  containerId?: string(name='container_id', example='container_id'),
}

// ConnectionStub
model ConnectionStub {
  // cloud
  cloud?: Cloud(name='cloud', example=''),
  // id
  id?: long(name='id', example='id'),
  // tenant_id
  tenantId?: string(name='tenant_id', example='tenant_id'),
  // tenant_name
  tenantName?: string(name='tenant_name', example='tenant_name'),
  // type
  type?: string(name='type', example='PLUG, SOCKET'),
}

// 阿里云日志服务(SLS) - 日志内容，是一个键值对
model SLSLogContent {
  // 键名
  key: string(name='key', example='keyname'),
  // 键值
  value: string(name='value', example='value'),
}

// WorkspaceRegionDto
model WorkspaceRegionDto {
  // id
  id: string(name='id', example='001'),
  // networkType
  networkType?: string(name='network_type', example='vpc'),
  // region id
  regionId: string(name='region_id', example='001'),
  // regionName
  regionName?: string(name='region_name', example='shanghai'),
  // 安全域id
  securedZoneId?: string(name='secured_zone_id', example='001'),
  // workspace_id
  workspaceId: string(name='workspace_id', example='001'),
  // workspaceLogicRegionStatus
  workspaceLogicRegionStatus?: string(name='workspace_logic_region_status', example='CREATED'),
  // workspaceLogicRegionType
  workspaceLogicRegionType?: string(name='workspace_logic_region_type', example='LIVE'),
  // workspaceZoneDtos
  workspaceZoneDtos?: [ WorkspaceZoneDto ](name='workspace_zone_dtos', example=''),
}

// 表示单个云服务器
model Computer {
  // app_id
  appId?: string(name='app_id', example='app_id'),
  // appServiceIds
  appServiceIds?: [ string ](name='app_service_ids', example=''),
  // assignedAppServiceIds
  assignedAppServiceIds?: [ string ](name='assigned_app_service_ids', example=''),
  // 是否自动续费
  autoRenew?: boolean(name='auto_renew', example=''),
  // 每次自动续费的时长，当参数AutoRenew取值True时为必填。
  autoRenewPeriod?: long(name='auto_renew_period', example=''),
  // bandwidth
  bandwidth?: long(name='bandwidth', example='bandwidth'),
  // common_image
  commonImage?: boolean(name='common_image', example='true, false'),
  // vCPU数。
  cpu?: long(name='cpu', example='8'),
  // cpu_shared
  cpuShared?: boolean(name='cpu_shared', example='true, false'),
  // 实例创建时间
  creationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='creation_time', example='2018-10-10T10:10:00Z'),
  // data_disk
  dataDisks?: [ Disk ](name='data_disks', example=''),
  // 这是SIGMA模式下的专用字段，阿里云模式下无意义
  deployMode?: string(name='deploy_mode', example='package or image'),
  // 服务器描述
  description?: string(name='description', example='description '),
  // elastic_ip
  elasticIp?: string(name='elastic_ip', example='elastic_ip'),
  // 过期时间
  expiredTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='expired_time', example='2018-10-10T10:10:00Z'),
  // ecs iaas id
  iaasId?: string(name='iaas_id', example='i-salf23rjnjk23***'),
  // iaasStatus
  iaasStatus?: string(name='iaas_status', example='RUNNING'),
  // iaasType
  iaasType?: string(name='iaas_type', example='COMPUTER'),
  // 主机id
  id: string(name='id', example='xxxxxx'),
  // image_iaas_id
  imageIaasId?: string(name='image_iaas_id', example='image_iaas_id'),
  // image_id
  imageId?: string(name='image_id', example='image_id'),
  // image_name
  imageName?: string(name='image_name', example='image_name'),
  // initialized
  initialized?: boolean(name='initialized', example='true, false'),
  // instanceChargeType
  instanceChargeType?: string(name='instance_charge_type', example='PostPaid'),
  // io_optimized
  ioOptimized?: boolean(name='io_optimized', example='io_optimized'),
  // last_ops_order_id
  lastOpsOrderId?: string(name='last_ops_order_id', example='last_ops_order_id'),
  // last_ops_type
  lastOpsType?: string(name='last_ops_type', example='last_ops_type'),
  // memory
  memory?: long(name='memory', example='memory'),
  // name
  name?: string(name='name', example='name'),
  // networkType
  networkType?: string(name='network_type', example='VPC'),
  // Options字段
  options?: [ MapStringToStringEntity ](name='options', example=''),
  // os
  os?: string(name='os', example='os'),
  // os_bit
  osBit?: long(name='os_bit', example='os_bit'),
  // os_version
  osVersion?: string(name='os_version', example='os_version'),
  // paas_status
  paasStatus?: string(name='paas_status', example='paas_status'),
  // password
  password?: string(name='password', example='password'),
  // private_ip
  privateIp?: string(name='private_ip', example='private_ip'),
  // providerId
  providerId?: string(name='provider_id', example='000000001'),
  // public_ip
  publicIp?: string(name='public_ip', example='public_ip'),
  // regionId
  regionId?: string(name='region_id', example='0000000001'),
  // serial_number
  serialNumber?: string(name='serial_number', example='serial_number'),
  // spec_iaas_id
  specIaasId?: string(name='spec_iaas_id', example='spec_iaas_id'),
  // 实例状态。
  status?: string(name='status', example='Running'),
  // system_disk
  systemDisk?: Disk(name='system_disk', example=''),
  // Tags
  tags?: [ MapStringToStringEntity ](name='tags', example=''),
  // tenantId
  tenantId?: string(name='tenant_id', example='0000000001'),
  // tenantId2
  tenantId2?: string(name='tenant_id2', example='0000000001'),
  // CPU线程数。
  threadsPerCore?: long(name='threads_per_core', example='2'),
  // utcCreate
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // utcModified
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
  // vpcId
  vpcId?: string(name='vpc_id', example='0000000001'),
  // vSwitchIaasId
  vSwitchIaasId?: string(name='v_switch_iaas_id', example='vsw-s8fusoufso899s***'),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='workspace_id'),
  // zoneId
  zoneId?: string(name='zone_id', example='0000000001'),
  // CELLA
  cellRef?: string(name='cell_ref', example='CELLA'),
}

// 路由条目的详细信息。
model VRouteEntry {
  // 路由条目的目标网段。
  desinationCidrBlock?: string(name='desination_cidr_block', example='192.168.0.1/24'),
  // 下一跳的实例ID。
  instanceId?: string(name='instance_id', example='ri-2zeo3xzyf38r4urzd****'),
  // 下一跳的实例名称。
  instanceName?: string(name='instance_name', example='instanceName'),
  // 路由条目ID。
  nextHopId?: string(name='next_hop_id', example='rte-bp1mnnr2al0naomnpxxx'),
  // 路由的下一跳列表。
  nextHopItemList?: [ NextHopItem ](name='next_hop_item_list', example=''),
  // 路由类型。
  // 
  // local：交换机路由。
  // service：云服务路由。
  // classicLink：开启ClassicLink功能后系统自动添加的路由。
  nextHopType?: string(name='next_hop_type', example='local'),
  // 路由条目所属路由表的ID。
  routeTableId?: string(name='route_table_id', example='vtb-bp145q7glnuzdvzu2****'),
  // 	
  // 路由条目的状态。
  // 
  // Pending：配置中。
  // Available：可用。
  // Modifying：修改中。
  status?: string(name='status', example='Pending'),
  // 路由条目的类型。
  // 
  // System：系统路由。
  // Custom：自定义路由。
  // BGP：BGP路由。
  // 
  type?: string(name='type', example='System'),
}

// 工作空间
model Workspace {
  // id
  id?: string(name='id', example='12345'),
  // 名称
  name?: string(name='name', example='prod'),
  // 网络类型
  networkType?: string(name='network_type', example='VPC'),
  // 租户
  tenant?: string(name='tenant', example='XDOE'),
  // 可用区 id
  zoneIds?: string(name='zone_ids', example='["12345"]'),
  // region id
  regionId?: string(name='region_id', example='123456'),
}

// getfinaltask专用数据解雇，包含resource的详细信息
model TaskVO {
  // context
  context: string(name='context', example='context'),
  // execution_times
  executionTimes?: long(name='execution_times', example=''),
  // id
  id?: string(name='id', example='id'),
  // request
  request?: TaskRequest(name='request', example=''),
  // resource_id
  resourceId?: string(name='resource_id', example='resource_id'),
  // resource_type
  resourceType?: string(name='resource_type', example='resource_type'),
  // status
  status: string(name='status', example='status'),
  // utc_create
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // utc_modified
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
  // workspace_id
  workspaceId: string(name='workspace_id', example='workspace_id'),
  // resource
  resource: Resource(name='resource', example=''),
}

// 应用查询
model AppQuery {
  // id
  id?: string(name='id', example='id'),
  // tenantId
  tenantId?: string(name='tenant_id', example='tenantId'),
  // name
  name?: string(name='name', example='name'),
  // chineseName
  chineseName?: string(name='chinese_name', example='chineseName'),
  // stackId
  stackId?: string(name='stack_id', example='stackId'),
  // startVersion
  startVersion?: string(name='start_version', example='startVersion'),
  // endVersion
  endVersion?: string(name='end_version', example='endVersion'),
  // appIds
  appIds?: [ string ](name='app_ids', example='appIds'),
  // appDomainId
  appDomainId?: string(name='app_domain_id', example='appDomainId'),
  // appDomainIds
  appDomainIds?: [ string ](name='app_domain_ids', example='appDomainIds'),
  // appDomainName
  appDomainName?: string(name='app_domain_name', example='appDomainName'),
  // appLevelId
  appLevelId?: string(name='app_level_id', example='appLevelId'),
  // ownerId
  ownerId?: string(name='owner_id', example='ownerId'),
  // isComponent
  isComponent?: boolean(name='is_component', example='true, false'),
  // simpleQuery
  simpleQuery?: boolean(name='simple_query', example='simpleQuery'),
  // workspaceId
  workspaceId?: string(name='workspace_id', example='workspaceId'),
  // containerCount
  containerCount?: string(name='container_count', example='containerCount'),
  // databaseCount
  databaseCount?: string(name='database_count', example='databaseCount'),
  // slbCount
  slbCount?: string(name='slb_count', example='slbCount'),
  // utcCreate
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // isOnePartyRequest
  isOnePartyRequest?: boolean(name='is_one_party_request', example='true, false'),
  // 分页大小
  pageSize?: long(name='page_size', example=''),
  // 当前页数
  currentPage?: long(name='current_page', example=''),
  // orders
  orders?: [ string ](name='orders', example=''),
  // queryType
  queryType?: string(name='query_type', example='FUZZY, ACCURATE, START_WITH'),
}

// 应用画像可用性结构体
model AppPortraitAppUsability {
  // 应用id
  appId: string(name='app_id', example='app_id'),
  // 应用名称
  appName: string(name='app_name', example='app_name'),
  // 应用可用性
  appUsability?: string(name='app_usability', example='0.9998'),
  // 年同比
  y2y?: string(name='y2y', example='0.06'),
  // 原因列表
  reasonList?: [ string ](name='reason_list', example='["2022-01-01 发生端口8080不可用", "2022-03-01 发生端口8080不可用"]'),
}

// 应用分级查询
model AppLevelQuery {
  // appCountInclude
  appCountInclude?: boolean(name='app_count_include', example='true, false'),
  // creator_id
  creatorId?: string(name='creator_id', example='creator_id'),
  // is_one_party_request
  isOnePartyRequest?: boolean(name='is_one_party_request', example='true, false'),
  // name
  name?: string(name='name', example='name'),
  // tenant_id
  tenantId?: string(name='tenant_id', example='tenant_id'),
  // utc_create
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='utc_create'),
  // 当前页数
  currentPage?: long(name='current_page', example=''),
  // orders
  orders?: [ string ](name='orders', example=''),
  // 分页大小
  pageSize?: long(name='page_size', example=''),
  // query_type
  queryType?: string(name='query_type', example='FUZZY, ACCURATE, START_WITH'),
}

// ComputerType
model ComputerType {
  // cpu core count
  cpuCoreCount?: long(name='cpu_core_count', example='4'),
  // instance type id
  id: string(name='id', example='ecs.d1ne.xlarge'),
  // 实例规格族
  instanceTypeFamily?: string(name='instance_type_family', example='ecs.ic5'),
  // memory size
  memorySize?: long(name='memory_size', example='4.0'),
  // 实例状态，可能值： Available：资源充足 Sold...
  status: string(name='status', example='Available'),
}

// computer 数据盘
model DataDisk {
  // 磁盘大小
  size: long(name='size', example=''),
  // 若使用磁盘创建，需填写此字段
  snapshotSequence?: string(name='snapshot_sequence', example='123456'),
  // 磁盘规格
  specId: string(name='spec_id', example='cloud_efficiency'),
  // 数据盘设备
  device: string(name='device', example='/dev/xvdb'),
}

// LB后端健康状态
model LoadBalanceHealthStatus {
  // server_id
  serverId: string(name='server_id', example='server_id'),
  // status
  status: string(name='status', example='status'),
}

// DnsRecordParam
model DnsRecordParam {
  // workspace_id
  workspaceId: string(name='workspace_id', example='workspace_id'),
  // value
  value: string(name='value', example='value'),
  // ttl
  ttl: long(name='ttl', example='60'),
  // regionId
  regionId: string(name='region_id', example='regionId'),
  // zoneId
  zoneId?: string(name='zone_id', example='zoneId'),
  // description
  description?: string(name='description', example='description'),
  // resource_type
  resourceType: string(name='resource_type', example='COMPUTER'),
}

// 机房信息
model Zone {
  // name
  name: string(name='name', example='name'),
  // identity
  identity: string(name='identity', example='identity'),
  // description
  description?: string(name='description', example='description'),
  // instanceStatus: AVAILABLE  UNAVAILABLE  RETIRED  DELETED
  instancestatus: string(name='instancestatus', example='AVAILABLE'),
  // region name
  region: string(name='region', example='shanghai'),
  // properties
  properties: [ Property ](name='properties', example='properties'),
}

// 应用画像容器利用率列表结构体
model AppPortraitContainerUsageList {
  // namespace
  namespace: string(name='namespace', example='dev'),
  // request_cpu
  requestCpu: string(name='request_cpu', example='200m'),
  // request_mem
  requestMem: string(name='request_mem', example='200Gi'),
  // limit_cpu
  limitCpu: string(name='limit_cpu', example='200m'),
  // limit_mem
  limitMem: string(name='limit_mem', example='200Gi'),
  // average_cpu
  averageCpu: string(name='average_cpu', example='0.1'),
  // average_mem
  averageMem: string(name='average_mem', example='0.7'),
  // 建议1：xxxxx
  tips: string(name='tips', example='建议1：xxxxx'),
}

// 应用画像告警数趋势结构体
model AppPortraitAlertCountTrend {
  // 日期
  day: string(name='day', example='2022-01-03'),
  // 本周期
  nowCycle: long(name='now_cycle', example='80'),
  // 上周期
  lastCycle: long(name='last_cycle', example='30'),
}

// 数据库Grant
model Grant {
  // account
  account: DatabaseAccount(name='account', example=''),
  // privilege
  privilege: string(name='privilege', example='privilege'),
  // schema
  schema: DbSchema(name='schema', example=''),
}

// 应用画像操作记录查询
model AppPortraitActionTrailQuery {
  // 操作时间
  actiontrailTimestamp: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='actiontrail_timestamp', example='2018-10-10T10:10:00Z'),
  // 状态
  status: string(name='status', example='成功'),
  // 发布单id
  id: string(name='id', example='CNSH_NJ202205111559258629'),
  // 应用服务
  appService: string(name='app_service', example='medicalscore'),
  // 操作内容
  operateType: string(name='operate_type', example='发布'),
  // 执行人
  operator: string(name='operator', example='周大侠'),
}

// 旧版应用管理-发布包上传策略
model PackageUploadPolicy {
  // accessKey
  accessKey?: string(name='access_key', example='accessKey'),
  // 策略
  policy?: string(name='policy', example='policy'),
  // 签名
  signature?: string(name='signature', example='signature'),
  // 路径前缀
  pathPrefix?: string(name='path_prefix', example='pathPrefix'),
  // endpoint
  endpoint?: string(name='endpoint', example='endpoint'),
  // expire
  expire?: string(name='expire', example='expire'),
  // bucket
  bucket?: string(name='bucket', example='bucket'),
}

// TenantWorkspace
model TenantWorkspace {
  // displayName
  displayName: string(name='display_name', example='test'),
  // gmtCreate
  gmtCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // gmtModified
  gmtModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // id
  id: string(name='id', example='001'),
  // name
  name: string(name='name', example='test'),
  // networkType
  networkType: string(name='network_type', example='vpc'),
  // status
  status: string(name='status', example='CREATED'),
  // tenantId
  tenantId: string(name='tenant_id', example='001'),
  // type
  type: string(name='type', example='NORMAL'),
  // workspaceDcs
  workspaceDcs: [ WorkspaceDc ](name='workspace_dcs', example=''),
  // workspaceRegions
  workspaceRegions: [ WorkspaceRegion ](name='workspace_regions', example=''),
}

// 应用分组视图
model AppDomainView {
  // ownerName
  ownerName?: string(name='owner_name', example='ownerName'),
  // fatherDomainName
  fatherDomainName?: string(name='father_domain_name', example='fatherDomainName'),
  // 应用列表
  apps?: [ AppView ](name='apps', example=''),
  // AppDomainView 的父类 AppDomain
  baseAppDomain?: [ AppDomain ](name='base_app_domain', example=''),
}

// computer quota
model ComputerQuota {
  // cpu shared
  cpuShared?: long(name='cpu_shared', example=''),
  // cpu
  cpu?: long(name='cpu', example=''),
  // memory
  memory?: long(name='memory', example=''),
  // disk
  disk?: long(name='disk', example=''),
}

// 可用性趋势查询
model AppPortraitAppUsabilityTrendQuery {
  // 时间以天为单位
  day?: string(name='day', example='2018-10-10'),
  // 应用可用性
  appUsability?: string(name='app_usability', example='0.9999'),
}

// RegionDto
model RegionDto {
  // availableNetworkTypes
  availableNetworkTypes: [ string ](name='available_network_types', example=''),
  // description
  description: string(name='description', example='description'),
  // displayName
  displayName: string(name='display_name', example='shanghai'),
  // iaasProviderId
  iaasProviderId: string(name='iaas_provider_id', example='001'),
  // id
  id: string(name='id', example='001'),
  // identity
  identity: string(name='identity', example='shanghai'),
  // networkType
  networkType: string(name='network_type', example='vpc'),
  // state
  state: string(name='state', example='state'),
  // utcCreate
  utcCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // utcModified
  utcModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
  // zoneDtos
  zoneDtos: [ ZoneDto ](name='zone_dtos', example=''),
}

// WorkspaceDto
model WorkspaceDto {
  // displayName
  displayName?: string(name='display_name', example='test'),
  // id
  id: string(name='id', example='001'),
  // name
  name: string(name='name', example='name'),
  // networkType
  networkType: string(name='network_type', example='vpc'),
  // projectId
  projectId: string(name='project_id', example='002'),
  // status
  status: string(name='status', example='CREATED'),
  // type
  type?: string(name='type', example='NORMAL'),
  // utcCreate
  utcCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // utcModified
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
  // workspaceRegionDto
  workspaceRegionDto?: WorkspaceRegionDto(name='workspace_region_dto', example=''),
}

// RegionWorkspaceVO
model RegionWorkspaceVO {
  // availableNetworkTypes
  availableNetworkTypes: [ string ](name='available_network_types', example=''),
  // description
  description: string(name='description', example='description'),
  // id
  id: string(name='id', example='id'),
  // identity
  identity: string(name='identity', example='identity'),
  // name
  name: string(name='name', example='name'),
  // networkType
  networkType: string(name='network_type', example='networkType'),
  // providerId
  providerId: string(name='provider_id', example='providerId'),
  // state
  state: string(name='state', example='state'),
  // workspaces
  workspaces: [ WorkspaceWithGroupView ](name='workspaces', example=''),
}

// 任务日志
model ResourceLog {
  // host
  host?: string(name='host', example='host'),
  // log_time
  logTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='log_time', example='2018-10-10T10:10:00Z'),
  // message
  message: string(name='message', example='message'),
  // resource_id
  resourceId?: string(name='resource_id', example='resource_id'),
  // resource_type
  resourceType?: string(name='resource_type', example='resource_type'),
  // severity
  severity?: string(name='severity', example='severity'),
  // source
  source?: string(name='source', example='source'),
  // task_id
  taskId: string(name='task_id', example='task_id'),
  // task_times
  taskTimes: long(name='task_times', example='task_times'),
  // type
  type?: string(name='type', example='type'),
  // iaas_error_info
  iaasErrorInfo?: IaasErrorInfo(name='iaas_error_info', example=''),
  // iaas_request
  iaasRequest?: IaasRequest(name='iaas_request', example=''),
  // iaas_response
  iaasResponse?: IaasResponse(name='iaas_response', example=''),
}

// 专有网络
model VPC {
  // VPC的IPv4网段
  cidrBlock: string(name='cidr_block', example='10.0.0.0/24'),
  // VPC的创建时间
  creationTime: string(name='creation_time', example='2018-04-18T15:02:37Z'),
  // VPC的描述信息
  description?: string(name='description', example='This is my VPC'),
  // VPC所在的地域
  regionId: string(name='region_id', example='cn-hangzhou'),
  // 路由表ID
  routerTableIds: [ string ](name='router_table_ids', example='[vtb-bp1krxxzp0c29fmon****]'),
  // VPC的状态，取值：
  // 
  // Pending：配置中。
  // Available：可用。
  status: string(name='status', example='Available'),
  // 用户侧网段的列表
  userCidrs?: string(name='user_cidrs', example='10.0.0.0/8'),
  // VPC的id
  vpcId: string(name='vpc_id', example='vpc-bp1qpo0kug3a20qqe****'),
  // VPC的名称
  vpcName: string(name='vpc_name', example='vpc1'),
  // VPC路由器的ID
  vRouterId: string(name='v_router_id', example='vrt-bp1jcg5cmxjbl9xgc****'),
  // 关联的workspace id
  workspaceId?: string(name='workspace_id', example='0000000001'),
  // vpc是否已导入workspace
  importInfo?: ImportInfo(name='import_info', example=''),
  // vpc在CAFE测的唯一ID
  vpcPaasId?: string(name='vpc_paas_id', example='0000000001'),
}

// VpcParam
model VPCParam {
  // cidr_block
  cidrBlock?: string(name='cidr_block', example='cidr_block'),
  // description
  description?: string(name='description', example='description'),
  // region id
  regionId?: string(name='region_id', example='region id'),
  // vpc_name
  vpcName?: string(name='vpc_name', example='vpc_name'),
}

// lb 监听器
model Listener {
  // 后端服务器端口
  backendServerPort: long(name='backend_server_port', example=''),
  // 带宽
  bandwidth?: long(name='bandwidth', example=''),
  // certificate_iaas_id
  certificateIaasId?: string(name='certificate_iaas_id', example='certificate_iaas_id'),
  // 证书 id
  certificateId?: string(name='certificate_id', example='adsfadsfdas'),
  // cookie
  cookie?: string(name='cookie', example='xxx'),
  // cookie 超时时间
  cookieTimeout?: long(name='cookie_timeout', example=''),
  // description
  description?: string(name='description', example='description'),
  // 连接超时时间
  establishedTimeout?: long(name='established_timeout', example=''),
  // gm_crypto_cert_iaas_id
  gmCryptoCertIaasId?: string(name='gm_crypto_cert_iaas_id', example='gm_crypto_cert_iaas_id'),
  // 健康检查
  healthMonitor?: ListenerHealthMonitor(name='health_monitor', example=''),
  // iaas_id
  iaasId?: string(name='iaas_id', example='iaas_id'),
  // iaasType
  iaasType?: string(name='iaas_type', example='iaasType'),
  // id
  id?: string(name='id', example='id'),
  // is_health_monitor
  isHealthMonitor?: string(name='is_health_monitor', example='is_health_monitor'),
  // 监听器端口
  listenerPort: long(name='listener_port', example='443'),
  // load_balancer
  loadBalancer?: LoadBalancer(name='load_balancer', example=''),
  // name
  name: string(name='name', example='name'),
  // 会话保持的超时时间
  persistTimeout?: long(name='persist_timeout', example=''),
  // 转发规则
  scheduler?: string(name='scheduler', example='WRR'),
  // status
  status: string(name='status', example='status'),
  // sticky_session
  stickySession?: string(name='sticky_session', example='sticky_session'),
  // cookie 处理方式
  stickySessionType?: string(name='sticky_session_type', example='SERVER'),
  // 监听类型
  type: string(name='type', example='HTTPS'),
  // url_path
  urlPath?: string(name='url_path', example='url_path'),
  // x_forwarded_for
  xForwardedFor?: string(name='x_forwarded_for', example='x_forwarded_for'),
}

// LoadBalancerRule
model LoadBalancerRule {
  // load_balancer
  loadBalancer?: LoadBalancer(name='load_balancer', example=''),
  // name
  name: string(name='name', example='name'),
  // id
  id?: string(name='id', example='id'),
  // listener_port
  listenerPort?: long(name='listener_port', example='listener_port'),
  // status
  status?: string(name='status', example='status'),
  // domain
  domain?: string(name='domain', example='domain'),
  // url
  url: string(name='url', example='url'),
  // cookie
  cookie?: string(name='cookie', example='cookie'),
  // is_health_monitor
  isHealthMonitor?: string(name='is_health_monitor', example='is_health_monitor'),
  // health_monitor
  healthMonitor?: ListenerHealthMonitor(name='health_monitor', example=''),
  // sticky_session
  stickySession?: string(name='sticky_session', example='sticky_session'),
  // app_id
  appId?: string(name='app_id', example='app_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id', example='workspace_id'),
}

// 地域信息
model Region {
  // description
  description?: string(name='description', example='shanghai'),
  // identity
  identity: string(name='identity', example='cn-shanghai'),
  // instanceStatus: AVAILABLE  UNAVAILABLE  RETIRED  DELETED
  instancestatus: string(name='instancestatus', example='AVAILABLE'),
  // name
  name: string(name='name', example='shanghai'),
  // properties
  properties?: [ Property ](name='properties', example=''),
}

// 云服务器规格族
model ComputerTypeFamily {
  // computer type family id
  id: string(name='id', example='ecs.g6'),
  // 实例规格族所属代数。
  generation: string(name='generation', example='ecs-5'),
}

// 工作空间DNS Provider属性
model WorkspaceDnsProvider {
  // id
  id: string(name='id', example='id'),
  // workspace_id
  workspaceId: string(name='workspace_id', example='workspace_id'),
  // provider_id
  providerId: string(name='provider_id', example='provider_id'),
  // region_id
  regionId: string(name='region_id', example='region_id'),
  // zoneId
  zoneId: string(name='zone_id', example='zoneId'),
  // dns_provider_id
  dnsProviderId: string(name='dns_provider_id', example='dns_provider_id'),
  // dns_network_type
  dnsNetworkType: string(name='dns_network_type', example='dns_network_type'),
  // sub_domain_name
  subDomainName: string(name='sub_domain_name', example='sub_domain_name'),
  // utc_create
  utcCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // utc_modified
  utcModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
  // description
  description: string(name='description', example='description'),
}

// 应用健康分查询
model AppPortraitAppHealthScoreQuery {
  // 应用id
  appId?: string(name='app_id', example='app_id'),
  // app_name
  appName?: string(name='app_name', example='app_name'),
  // health_score
  healthScore?: long(name='health_score', example='95'),
  // 同比上升下降分数
  y2y?: long(name='y2y', example='20'),
  // 上升下降原因列表
  reasonList?: [ string ](name='reason_list', example='["2022-01-01 发生端口8080不可用", "2022-03-01 发生端口8080不可用"]'),
}

// rmc vpc 详细信息
model VpcVO {
  // VPC的状态，取值： Pending：配置中。 Available：可用。
  status?: string(name='status', example='Available'),
  // VPC的IPv4网段
  cidrBlock?: string(name='cidr_block', example='10.0.0.0/24'),
  // VPC路由器的ID
  vRouterIaasId?: string(name='v_router_iaas_id', example='vrt-bp1jcg5cmxjbl9xgc****'),
  // workspace id
  workspaceId?: string(name='workspace_id', example='123456425'),
  // vpc name
  name?: string(name='name', example='vpcName'),
  // 描述信息
  description?: string(name='description', example='description'),
  // 计费类型
  instanceChargeType?: string(name='instance_charge_type', example='按年'),
  // vpc iaas id
  iaasId?: string(name='iaas_id', example='vpc-bp1qpo0kug3a20qqe****'),
  // provider id
  providerId?: string(name='provider_id', example='0000000001'),
  // iaas 底座类型
  iaasType?: string(name='iaas_type', example='Aliyun'),
  // region id
  regionId?: string(name='region_id', example='0000000001'),
  // zone id
  zoneId?: string(name='zone_id', example='0000000001'),
  // vpc id
  id?: string(name='id', example='0000000001'),
  // 创建时间
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // 最近一次修改时间
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
}

// LB查询对应的VComputer
model VComputer {
  // v_computer_group
  vComputerGroup?: VComputerGroup(name='v_computer_group', example=''),
  // ip
  ip?: string(name='ip', example='ip'),
  // computer
  computer?: Computer(name='computer', example=''),
  // port
  port?: long(name='port', example=''),
  // weight
  weight?: long(name='weight', example='weight'),
  // 是否是EIP
  isEip?: boolean(name='is_eip', example='true, false'),
  // is_managed_computer
  isManagedComputer?: boolean(name='is_managed_computer', example='true, false'),
  // iaas_id
  iaasId?: string(name='iaas_id', example='iaas_id'),
}

// 路由表信息
model RouteTable {
  // 路由表的创建时间。
  creationTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='creation_time', example='2018-10-10T10:10:00Z'),
  // 路由表所属的路由器类型，取值：
  // 
  // VRouter：VPC路由器。
  // VBR：边界路由器。
  routerType?: string(name='router_type', example='VRouter'),
  // 	
  // 路由条目的详细信息。
  entryVOs?: [ VRouteEntry ](name='entry_v_os', example=''),
  // 要查询的路由表的ID。
  routeTableId?: string(name='route_table_id', example='rtb-bp12mw1f8k3jgygk9****'),
  // 要查询的路由表所属的VPC路由器的ID。
  vRouterId?: string(name='v_router_id', example='vtb-bp1krxxzp0c29fmon****'),
}

// 阿里云日志服务(SLS)-日志配置
model SLSConfig {
  // Logtail配置名称，同一Project下配置名必须唯一。
  // 只能包括小写字母、数字、连字符（-）和下划线（_）。
  // 必须以小写字母或者数字开头和结尾。
  // 长度必须为2~128字节。
  name: string(name='name', example='testLogConfig'),
  // 配置类型，支持plugin、file。
  inputType: string(name='input_type', example='file, plugin'),
  // 输出类型，目前只支持LogService。
  outputType?: string(name='output_type', example='LogService'),
  // 日志样例
  logSample?: string(name='log_sample', example='无'),
  // 输入类型配置
  inputDetail: SLSConfigInputDetail(name='input_detail', example=''),
  // 输出类型配置
  outputDetail: SLSConfigOutputDetail(name='output_detail', example=''),
}

// 安全组详细信息
model SecurityGroup {
  // 创建时间。按照ISO8601标准表示，并需要使用UTC时间。格式为：yyyy-MM-ddThh:mmZ。
  creationTime: string(name='creation_time', example='2017-12-05T22:40:00Z'),
  // 安全组的描述信息。
  description?: string(name='description', example='描述信息'),
  // region_id
  regionId: string(name='region_id', example='region_id'),
  // 安全组ID。
  securityGroupId: string(name='security_group_id', example='sg-bp67acfmxazb4ph***'),
  // 安全组名称。
  securityGroupName: string(name='security_group_name', example='sgName'),
  // 安全组所属的专有网络。
  vpcId: string(name='vpc_id', example='vpc-bp67acfmxazb4ph***'),
  // 安全组入方向规则
  ingressRules?: [ SecurityGroupRule ](name='ingress_rules', example=''),
  // 安全组出方向规则
  egressRules?: [ SecurityGroupRule ](name='egress_rules', example=''),
}

// map <String,integer>
model MapStringToIntegerEntity {
  // key
  key: string(name='key', example='key'),
  // value
  value: long(name='value', example=''),
}

// 单维度实例的配额信息
model SingleDimGroupQuotaInstance {
  // 配额实例所属的 配额id
  quotaId: string(name='quota_id', example='0000000001'),
  // 配额实例id
  quotaInsId: string(name='quota_ins_id', example='0000000001'),
  // 维度实例组合id
  dimInsGroupId?: string(name='dim_ins_group_id', example='0000000001'),
  // 维度标识
  dimIdentity?: string(name='dim_identity', example='WORKSPACE'),
  // 维度实例的值，比如某个具体的workspace_id
  dimInsValue?: string(name='dim_ins_value', example='0000000001'),
  // resource
  resource: string(name='resource', example='CPU'),
  // 表示是无限大还是无限小
  status?: string(name='status', example='INFINITE'),
  // 限额值
  hardLimit: long(name='hard_limit', example='1'),
  // 已经使用的额度
  inUse: long(name='in_use', example='1'),
  // 预分配的额度
  reserved?: long(name='reserved', example='1'),
  // 保留额度
  remain?: long(name='remain', example=''),
  // utc_create
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // utc_modified
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
  // quota乘数因子，用以解决k8s资源可以用小数表示的问题。由于OP不支持浮点数，请用字符串表示
  quotaFactor: string(name='quota_factor', example='0.1'),
}

// 一组具有依赖关系的 AppDomain，可以转换为一个树形结构
model AppDomainFlatten {
  // 一组具有依赖关系的 AppDomain
  appDomains?: [ AppDomain ](name='app_domains', example=''),
}

// 一次异步请求
model RequestVO {
  // context
  context?: string(name='context', example='context'),
  // id
  id: string(name='id', example='id'),
  // operator
  operator?: string(name='operator', example='operator'),
  // operator_name
  operatorName: string(name='operator_name', example='operator_name'),
  // operator_type
  operatorType?: string(name='operator_type', example='operator_type'),
  // status
  status?: string(name='status', example='status'),
  // token
  token?: string(name='token', example='token'),
  // type
  type?: string(name='type', example='type'),
  // utc_create
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // utc_modified
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
  // tasks
  tasks?: [ Task ](name='tasks', example=''),
}

// VSwitchParam
model VSwitchParam {
  // cidr_block
  cidrBlock?: string(name='cidr_block', example='cidr_block'),
  // description
  description?: string(name='description', example='description'),
  // region_id
  regionId?: string(name='region_id', example='region_id'),
  // vpc_id
  vpcId?: string(name='vpc_id', example='vpc_id'),
  // vswitch_name
  vswitchName?: string(name='vswitch_name', example='vswitch_name'),
  // zone_id
  zoneId?: string(name='zone_id', example='zone_id'),
}

// rmc 交换机详细信息
model VSwitchVO {
  // 交换机的iaas ID
  iaasId?: string(name='iaas_id', example='vsw-25bcdxs7pv1****'),
  // 交换机名称
  name?: string(name='name', example='vswitchName'),
  // 交换机描述信息
  description?: string(name='description', example='description'),
  // 交换机的状态，取值： Pending：配置中。 Available：可用。
  status?: string(name='status', example='Available'),
  // vpc id
  vpcId?: string(name='vpc_id', example='0000000001'),
  // workspace id
  workspaceId?: string(name='workspace_id', example='0002321004'),
  // zone id
  zoneId?: string(name='zone_id', example='0435324900'),
  // zone iaas id
  zoneIaasId?: string(name='zone_iaas_id', example='cn-hangzhou-d'),
  // region id
  regionId?: string(name='region_id', example='0000000001'),
  // 换机的IPv4网段
  cidrBlock?: string(name='cidr_block', example='172.16.0.0/24'),
  // 交换机创建时间
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // 可用ip数目
  availableIpAddressCount?: long(name='available_ip_address_count', example=''),
}

// disk spec
model DiskSpec {
  // id
  id?: string(name='id', example='0000000001'),
  // name
  name?: string(name='name', example='name'),
  // description
  description?: string(name='description', example='description'),
  // iaas id
  iaasId?: string(name='iaas_id', example='0000000001'),
  // providerId
  providerId?: string(name='provider_id', example='0000000001'),
  // iaasType
  iaasType?: string(name='iaas_type', example='Aliyun'),
  // enable
  enable?: boolean(name='enable', example='true, false'),
  // minSize
  minSize?: long(name='min_size', example=''),
  // maxSize
  maxSize?: long(name='max_size', example=''),
}

// LB后端挂载的主机
model MountComputer {
  // computer
  computer?: Computer(name='computer', example=''),
  // domain
  domain?: string(name='domain', example='domain'),
  // loadbalancer
  loadbalancer?: LoadBalancer(name='loadbalancer', example=''),
  // status
  status?: string(name='status', example='status'),
  // weight
  weight: long(name='weight', example='weight'),
}

// vpc import info
model VpcImport {
  // cidr block
  cidrBlock?: string(name='cidr_block', example='192.168.0.1/24'),
  // vpc描述信息
  description?: string(name='description', example='description'),
  // vpc iaas id
  iaasId: string(name='iaas_id', example='vpc-gx6g87kvj8cv0p7rq7nj8'),
  // import workspace info
  importInfo: ImportInfo(name='import_info', example=''),
  // vpc name
  name: string(name='name', example='vpcName'),
  // vpc status
  status: string(name='status', example='Available'),
}

// 技术栈
model Buildpack {
  // 技术栈标识ID
  id?: string(name='id', example='12345'),
  // 技术栈名称
  name?: string(name='name', example='sofa4'),
  // 技术栈描述
  des?: string(name='des', example='sofa4 描述'),
  // 技术栈版本
  version?: string(name='version', example='sofa4456'),
  // 技术栈类别
  stack?: string(name='stack', example='java'),
  // 部署脚本id
  deployScriptId?: string(name='deploy_script_id', example='sss'),
  // 构建脚本ID
  buildScriptId?: string(name='build_script_id', example='1234'),
  // 配置id
  configId?: string(name='config_id', example='12345'),
  // 组件id
  componentId?: string(name='component_id', example='12345'),
  // 命令id
  commandId?: string(name='command_id', example='12345'),
  // 启用蓝绿
  bgEnable?: boolean(name='bg_enable', example='true, false'),
  // 创建人
  creator?: string(name='creator', example='creator name'),
  // 租户ID
  tenantId?: string(name='tenant_id', example='1234'),
  // 客户id列表
  customerIds?: [ string ](name='customer_ids', example='["1234", "12345"]'),
  // 技术栈定义类型
  // 系统模板 TEMPLATE
  // 用户自定义 CUSTOM
  // 后台服务 BACKGROUND_SERVICE
  type?: string(name='type', example='TEMPLATE | CUSTOM | BACKGROUND_SERVICE'),
  // 技术栈状态
  // 草稿 DRAFT
  // 已提交 COMMITED 
  // 已对外发布 PUBLISHED
  // 已退役 RETIRED
  status?: string(name='status', example='DRAFT | COMMITED | PUBLISHED | RETIRED'),
  // 创建日期
  gmtCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_create', example='2018-10-10T10:10:00Z'),
  // 最近修改时间
  gmtModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_modified', example='2018-10-10T10:10:00Z'),
  // 技术栈信息汇总
  resultMsg?: string(name='result_msg', example='message content'),
  // 可用 USABLE
  // 不可用 UNUSABLE
  versionStatus?: string(name='version_status', example='USABLE | UNUSABLE'),
  // 运行时属性
  instances?: BuildpackInstances(name='instances', example='{}'),
}

// 应用分组查询
model AppDomainQuery {
  // creatorId
  creatorId?: string(name='creator_id', example='creatorId'),
  // 是否为一方化请求
  isOnePartyRequest?: boolean(name='is_one_party_request', example='true, false'),
  // name
  name?: string(name='name', example='name'),
  // parentId
  parentId?: string(name='parent_id', example='parentId'),
  // tenantId
  tenantId?: string(name='tenant_id', example='tenantId'),
  // utcCreate
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='utcCreate'),
  // 分页大小
  pageSize?: long(name='page_size', example=''),
  // query_type
  queryType?: string(name='query_type', example='FUZZY, ACCURATE, START_WITH'),
  // orders
  orders?: [ string ](name='orders', example=''),
  // 当前页数
  currentPage?: long(name='current_page', example=''),
}

// 交换机详细信息
model VSwitch {
  // 交换机的IPv4网段
  cidrBlock?: string(name='cidr_block', example='172.16.0.0/24'),
  // 交换机的创建时间
  creationTime?: string(name='creation_time', example='2018-01-18T12:43:57Z'),
  // 交换机的描述信息
  description?: string(name='description', example='VSwitchDescription'),
  // cn-hangzhou
  regionId?: string(name='region_id', example='cn-hangzhou'),
  // 交换机的状态，取值：
  // 
  // Pending：配置中。
  // Available：可用。
  status?: string(name='status', example='Available'),
  // 交换机所属VPC的ID
  vpcId?: string(name='vpc_id', example='vpc-257gcdcdq64****'),
  // 交换机的ID
  vSwitchId?: string(name='v_switch_id', example='vsw-25bcdxs7pv1****'),
  // 交换机的名称
  vSwitchName?: string(name='v_switch_name', example='VSwitch-1'),
  // 交换机所属的可用区
  zoneId?: string(name='zone_id', example='cn-hangzhou-d '),
  // zone iaas id
  zoneIaasId?: string(name='zone_iaas_id', example='hangzhou-a'),
}

// WorkspaceDnsRecordset
model WorkspaceDnsRecordset {
  // id
  id: string(name='id', example='id'),
  // iaasId
  iaasId: string(name='iaas_id', example='iaasId'),
  // name
  name: string(name='name', example='name'),
  // dns_provider_id
  dnsProviderId: string(name='dns_provider_id', example='dns_provider_id'),
  // dns_network_type
  dnsNetworkType?: string(name='dns_network_type', example='dns_network_type'),
  // device_network_address_type
  deviceNetworkAddressType?: string(name='device_network_address_type', example='VIP'),
  // 绑定的资源的类型COMPUTER或LOAD_BALANCER
  resourceType: string(name='resource_type', example='resource_type'),
  // description
  description?: string(name='description', example='description'),
  // type
  type: string(name='type', example='A'),
  // status
  status: string(name='status', example='status'),
  // value
  value: string(name='value', example='1.1.1.1'),
  // ttl
  ttl: long(name='ttl', example='ttl'),
  // workspace_id
  workspaceId: string(name='workspace_id', example='workspace_id'),
  // resource_id
  resourceId?: string(name='resource_id', example='resource_id'),
  // resource_iaas_id
  resourceIaasId?: string(name='resource_iaas_id', example='resource_iaas_id'),
  // utc_create
  utcCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // utc_modified
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
}

// IAM用户信息
model UserDTO {
  // 用户ID
  id?: string(name='id', example='123'),
  // 创建时间
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // 最近修改时间
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
  // 客户ID
  customerId?: string(name='customer_id', example='123'),
  // 用户类型
  type?: string(name='type', example='test'),
  // 用户显示名称
  realName?: string(name='real_name', example='tester'),
  // 用户名
  name?: string(name='name', example='tester'),
}

// DatabaseSpec
model DatabaseSpec {
  // cpu
  cpu?: long(name='cpu', example=''),
  // custom_storage
  customStorage?: boolean(name='custom_storage', example='true, false'),
  // engine
  engine?: string(name='engine', example='engine'),
  // engine_version
  engineVersion?: [ string ](name='engine_version', example=''),
  // iaas_id
  iaasId?: string(name='iaas_id', example='iaas_id'),
  // id
  id?: string(name='id', example='id'),
  // max_connections
  maxConnections?: long(name='max_connections', example=''),
  // max_iops
  maxIops?: long(name='max_iops', example=''),
  // max_storage
  maxStorage?: long(name='max_storage', example=''),
  // memory
  memory?: long(name='memory', example='memory'),
  // min_storage
  minStorage?: long(name='min_storage', example='min_storage'),
  // name
  name?: string(name='name', example='name'),
  // supported_storages
  supportedStorages?: [ long ](name='supported_storages', example=''),
  // type
  type?: string(name='type', example='type'),
}

// DatabaseImportVO
model DatabaseImportVO {
  // iaas_id
  iaasId?: string(name='iaas_id', example='iaas_id'),
  // description
  description?: string(name='description', example='description'),
  // type
  type?: string(name='type', example='type'),
  // status
  status?: string(name='status', example='status'),
  // engine
  engine?: string(name='engine', example='engine'),
  // net_type
  netType?: string(name='net_type', example='net_type'),
  // utc_create
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // importInfo
  importInfo: ImportVO(name='import_info', example=''),
}

// 一个应用发布包视图
model AppPackageListView {
  // app_id
  appId?: string(name='app_id', example='app_id'),
  // app_name
  appName?: string(name='app_name', example='app_name'),
  // app_owner_id
  appOwnerId?: string(name='app_owner_id', example='app_owner_id'),
  // app_owner_name
  appOwnerName?: string(name='app_owner_name', example='app_owner_name'),
  // app_status
  appStatus?: string(name='app_status', example='app_status'),
  // buildpack_id
  buildpackId?: string(name='buildpack_id', example='buildpack_id'),
  // buildpack_name
  buildpackName?: string(name='buildpack_name', example='buildpack_name'),
  // buildpack_version
  buildpackVersion?: string(name='buildpack_version', example='buildpack_version'),
  // latest_package
  latestPackage?: AppManifest(name='latest_package', example=''),
  // package_count
  packageCount?: long(name='package_count', example=''),
}

// PermissionVO
model PermissionVO {
  // authorizedCidrIp
  authorizedCidrIp?: string(name='authorized_cidr_ip', example='0.0.0.0'),
  // authorize_type
  authorizeType?: string(name='authorize_type', example='CIDR_IP'),
  // direction
  direction?: string(name='direction', example='in'),
  // endPort
  endPort?: long(name='end_port', example='-1'),
  // ipProtocol
  ipProtocol?: string(name='ip_protocol', example='ALL'),
  // nicType
  nicType?: string(name='nic_type', example='INTRANET'),
  // policy
  policy?: string(name='policy', example='ACCEPT'),
  // priority
  priority?: long(name='priority', example=''),
  // securityGroupId
  securityGroupId?: string(name='security_group_id', example='0304856523'),
  // startPort
  startPort?: long(name='start_port', example='-1'),
  // id
  id: string(name='id', example='asfd8suf998sdf8sf9sd8 '),
}

// ComputerImportVO
model ComputerImportVO {
  // computer iaaas id
  iaasId?: string(name='iaas_id', example='i-464864321sagfasd***'),
  // name
  name?: string(name='name', example='name'),
  // zone identity
  zoneIaasId?: string(name='zone_iaas_id', example='hangzhou-a'),
  // zone name
  zoneName?: string(name='zone_name', example='hangzhou-a'),
  // description
  description?: string(name='description', example='description'),
  // private ip
  privateIp?: string(name='private_ip', example='10.167.5.194'),
  // public ip
  publicIp?: string(name='public_ip', example='10.167.5.194'),
  // elasticIp
  elasticIp?: string(name='elastic_ip', example='10.167.5.194'),
  // vpcIaasId
  vpcIaasId?: string(name='vpc_iaas_id', example='vpc24sfs4fs354fs***'),
  // joined security group infos
  joinedSecurityGroup?: [ JoinedSecurityGroupVO ](name='joined_security_group', example=''),
  // creation time
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // import info
  importInfo?: ImportVO(name='import_info', example=''),
}

// 用户查询
model UserQuery {
  // 基础查询
  baseQuery?: PaginationQuery(name='base_query', example=''),
  // id
  id?: string(name='id', example='id'),
  // customerId
  customerId?: string(name='customer_id', example='customerId'),
  // tenantId
  tenantId?: string(name='tenant_id', example='tenantId'),
  // type
  type?: string(name='type', example='type'),
  // types
  types?: [ string ](name='types', example=''),
  // email
  email?: string(name='email', example='email'),
  // mobile
  mobile?: string(name='mobile', example='mobile'),
  // realName
  realName?: string(name='real_name', example='realName'),
  // loginName
  loginName?: string(name='login_name', example='loginName'),
}

// 服务器规格
model ComputerSpec {
  // cpu个数
  cpu?: long(name='cpu', example='1'),
  // 可以挂载的磁盘类型
  diskSpecIds?: [ string ](name='disk_spec_ids', example=''),
  // 服务器规格名称
  group: string(name='group', example='group'),
  // 是否有IO优化
  ioOptimized?: boolean(name='io_optimized', example='true, false'),
  // 内存大小
  memory?: long(name='memory', example='12'),
  // description
  description?: string(name='description', example='description'),
  // enable
  enable?: boolean(name='enable', example='true, false'),
  // iaasId
  iaasId?: string(name='iaas_id', example='iaasId'),
  // COMPUTER_ECS
  iaasType?: string(name='iaas_type', example='COMPUTER_ECS'),
  // id
  id?: string(name='id', example='0000000001'),
  // name
  name?: string(name='name', example='name'),
  // providerId
  providerId?: string(name='provider_id', example='0000000001'),
}

// Staragent Operation Task info
model OperationTask {
  // id
  id?: string(name='id', example='00001'),
  // computer id
  computerId?: string(name='computer_id', example='00001'),
  // computer ip
  computerIp?: string(name='computer_ip', example='11.167.13.98'),
  // command
  command?: string(name='command', example='ls'),
  // 状态取值：INIT，PROCESSING，SUCCEEDED，FAILED，TIMEOUT，NOT_FOUND
  status?: string(name='status', example='INIT'),
  // errorCode
  errorCode?: string(name='error_code', example='errorCode'),
  // resultMsg
  resultMsg?: string(name='result_msg', example='resultMsg'),
}

// 应用画像应用节点列表结构体
model AppPortraitAppNodeList {
  // 返回ecs节点数据
  ecs?: [ AppPortraitAppNodeEcsList ](name='ecs', example=''),
  // 返回slb节点数据
  slb?: [ AppPortraitAppNodeEcsList ](name='slb', example=''),
  // 返回rds节点数据
  rds?: [ AppPortraitAppNodeEcsList ](name='rds', example=''),
  // 返回pod节点数据
  pod?: [ AppPortraitAppNodeEcsList ](name='pod', example=''),
}

// 阿里云日志服务(SLS)-日志项目
model SLSProject {
  // 项目描述
  description?: string(name='description', example='项目描述'),
  // 项目名称
  name: string(name='name', example='k8s-log-custom-pbyyzncn-aks1128test-test'),
  // 阿里云返回的regionName，仅作展示用
  region?: string(name='region', example='region'),
}

// 维度组合实例，类似表示WORKSPACE_A下的APP_B
model DimInstanceGroup {
  // dim_group_id
  dimGroupId: string(name='dim_group_id', example='0000000001'),
  // dim_instances
  dimInstances: [ DimInstance ](name='dim_instances', example=''),
}

// 查询应用画像ecs利用率
model AppPortraitEcsUsageGet {
  // cpu平均利用率
  averageCpu: string(name='average_cpu', example='0.6'),
  // 内存平均利用率
  averageMem: string(name='average_mem', example='0.7'),
  // 磁盘平均利用率
  averageDisk: string(name='average_disk', example='0.2'),
  // 建议1：xxxxx
  tips: string(name='tips', example='建议1：xxxxx'),
}

// 阿里云日志服务(SLS)-日志库
model SLSLogStore {
  // 日志库名称
  name: string(name='name', example='testLogStore'),
  // Shard个数，单位为个，范围为1~100。
  shardCount: long(name='shard_count', example='10'),
  // 数据的保存时间，单位为天，范围1~3600。
  ttl: long(name='ttl', example='30'),
}

// Connection
model Connection {
  // access_key
  accessKey?: string(name='access_key', example='access_key'),
  // access_secret
  accessSecret?: string(name='access_secret', example='access_secret'),
  // created_time
  createdTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='created_time', example='2018-10-10T10:10:00Z'),
  // executor
  executor?: string(name='executor', example='executor'),
  // id
  id?: long(name='id', example='id'),
  // identity
  identity?: string(name='identity', example='identity'),
  // 修改时间
  modifiedTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='modified_time', example='2018-10-10T10:10:00Z'),
  // name
  name?: string(name='name', example='name'),
  // plug
  plug?: ConnectionStub(name='plug', example=''),
  // socket
  socket?: ConnectionStub(name='socket', example=''),
  // status
  status?: string(name='status', example='NORMAL'),
  // tenant_id
  tenantId?: string(name='tenant_id', example='tenant_id'),
}

// IaasDnsProvider
model IaasDnsProvider {
  // id
  id: string(name='id', example='id'),
  // service_config_id
  serviceConfigId: string(name='service_config_id', example='service_config_id'),
  // name
  name: string(name='name', example='name'),
  // description
  description: string(name='description', example='description'),
  // type
  type: string(name='type', example='type'),
  // status
  status: string(name='status', example='status'),
  // regionId
  regionId: string(name='region_id', example='regionId'),
  // zoneId
  zoneId?: string(name='zone_id', example='zoneId'),
  // utc_create
  utcCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // utc_modified
  utcModified: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
  // dns_zones
  dnsZones: [ DnsZones ](name='dns_zones', example=''),
}

// computer common image
model CommonImage {
  // description
  description?: string(name='description', example='description'),
  // is enable
  enable?: boolean(name='enable', example='true, false'),
  // iaas id
  iaasId?: string(name='iaas_id', example='m-zm0e1v58t0rxikjh58***'),
  // iaas type
  iaasType?: string(name='iaas_type', example='Aliyun'),
  // id
  id?: string(name='id', example='0100310001'),
  // 是否仅杭州金区 vpc 可用镜像
  onlyHzFinVpcSupported?: boolean(name='only_hz_fin_vpc_supported', example='true, false'),
  // name
  name?: string(name='name', example='name'),
  // os
  os?: string(name='os', example='centos'),
  // os bit取值：32，64
  osBit?: long(name='os_bit', example='64'),
  // os version
  osVersion?: string(name='os_version', example='7.2'),
  // provider id
  providerId?: string(name='provider_id', example='0000000001'),
  // region id
  regionId?: string(name='region_id', example='0000000001'),
  // status
  status?: string(name='status', example='AVAILABLE'),
  // system disk size(GB)
  systemDiskSize?: long(name='system_disk_size', example='100'),
}

// SecurityGroupVO
model SecurityGroupVO {
  // id
  id?: string(name='id', example='0000000001'),
  // iaasIds
  iaasIds?: [ string ](name='iaas_ids', example=''),
  // name
  name?: string(name='name', example='name'),
  // description
  description?: string(name='description', example='description'),
  // status
  status?: string(name='status', example='status'),
  // type
  type?: string(name='type', example='type'),
  // utcCreate
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // instanceCount
  instanceCount?: long(name='instance_count', example=''),
}

// 应用画像应用列表返回数据
model AppPortraitAppList {
  // 应用id
  id: string(name='id', example='app_id'),
  // 应用名称
  name: string(name='name', example='app_name'),
  // 应用分组名称
  appGroupName?: string(name='app_group_name', example='app_group_name'),
  // 应用所属分组id
  appGroupId?: string(name='app_group_id', example='app_group_id'),
  // 应用负责人
  ownerDisplayName?: string(name='owner_display_name', example='owner_display_name'),
  // 应用描述
  description?: string(name='description', example='description'),
  // 技术栈名称
  buildpackName?: string(name='buildpack_name', example='buildpack_name'),
  // 技术栈版本
  buildpackVersion?: string(name='buildpack_version', example='buildpack_version'),
}

// staragent info
model StarAgentInfo {
  // computer serial number
  sn?: string(name='sn', example='12345678'),
  // hostname
  hostname?: string(name='hostname', example='hostname'),
  // ip
  ip?: string(name='ip', example='10.167.32.9'),
  // ip list
  ipList?: string(name='ip_list', example='iplist'),
  // 状态取值：RUNNING，ERROR，REGISTER，NOFIND
  status?: string(name='status', example='RUNNING'),
}

// 应用画像健康分趋势查询结构体
model AppPortraitAppHealthScoreTrendQuery {
  // 日期
  day?: string(name='day', example='2020-01-01'),
  // 健康分分值
  healthScore?: long(name='health_score', example='88'),
}

// CellGroup
model CellGroup {
  // identity
  identity: string(name='identity', example='identity'),
  // name
  name: string(name='name', example='name'),
  // description
  description?: string(name='description', example='description'),
  // properties
  properties?: [ Property ](name='properties', example='properties'),
  // instancestatus
  instancestatus: string(name='instancestatus', example='instancestatus'),
}

// AppPortraitAppGroupList
model AppPortraitAppGroupList {
  // 应用分组id
  id: string(name='id', example='id'),
  // 应用分组名称
  name: string(name='name', example='name'),
}

// SecurityGroupParam
model SecurityGroupParam {
  // description
  description?: string(name='description', example='description'),
  // region id
  regionId?: string(name='region_id', example='region id'),
  // security_group_name
  securityGroupName?: string(name='security_group_name', example='security_group_name'),
  // vpc_id
  vpcId?: string(name='vpc_id', example='vpc_id'),
}

// 应用等级视图
model AppLevelView {
  // 应用等级基类
  baseAppLevel?: AppLevel(name='base_app_level', example=''),
  // 应用数量
  appCount?: long(name='app_count', example=''),
  // 创建者名称
  creatorName?: string(name='creator_name', example='创建者名称'),
}

// 阿里云日志服务(SLS) - 日志结果数组
model SLSLogItem {
  // 日志的时间戳（精度为秒，从 1970-1-1 00:00:00 UTC 计算起的秒数）。
  logTime: long(name='log_time', example='1409529660'),
  // 日志的来源，写入日志时指定。
  source: string(name='source', example='10.237.0.17'),
  // 日志原始内容
  contents: [ SLSLogContent ](name='contents', example=''),
}

// 动态查询
model DynamicQuery {
  // 分页规则-currentPage
  currentPage?: long(name='current_page', example=''),
  // 字段过滤
  filter?: string(name='filter', example='字段过滤'),
  // 分页规则-pageSize
  pageSize?: long(name='page_size', example=''),
  // 具体的查询条件字符串
  query: string(name='query', example='具体的查询条件字符串'),
  // 查询结果的排序规则
  sort?: string(name='sort', example='查询结果的排序规则'),
}

// IaasConnMetadata
model IaasConnMetadata {
  // id
  id: string(name='id', example='id'),
  // iaas_provider_id
  iaasProviderId: string(name='iaas_provider_id', example='iaas_provider_id'),
  // name
  name: string(name='name', example='name'),
  // iaas_conn_type
  iaasConnType: string(name='iaas_conn_type', example='iaas_conn_type'),
  // description
  description: string(name='description', example='description'),
  // available_features
  availableFeatures?: [ string ](name='available_features', example=''),
  // endpoint
  endpoint: string(name='endpoint', example='endpoint'),
  // region_ids
  regionIds: [ string ](name='region_ids', example=''),
  // is_default
  isDefault: boolean(name='is_default', example='true, false'),
  // utc_create
  utcCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
}

// 应用画像告警明细列表
model AppPortraitAlertList {
  // 标题
  title: string(name='title', example='点餐码校验'),
  // 告警事件ID
  eventId: string(name='event_id', example='367_1653287760000_450529734'),
  // 应用名
  appName: string(name='app_name', example='应用名'),
  // 告警级别
  severity: string(name='severity', example='INFO'),
  // 告警内容
  alertContent: string(name='alert_content', example='告警内容'),
  // 告警时间
  gmtOccurTimestamp: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmt_occur_timestamp', example='2018-10-10T10:10:00Z'),
  // 相关链接
  alarmUrl: string(name='alarm_url', example='https://sofa.console.aliyun.com/business/product/multiMinute/preview/3076?workspaceName=eco0shbpaas0prod&tenantName=DIVIXWCN'),
  //      * HEALTHY(0), // 健康
  //      * PENDING(1), // 触发中
  //      * FIRING(2), // 告警中
  //      * SUSPENDED(3), // 已暂停
  //      * SILENCED(4), // 已静默
  //      * RECOVERED(5), // 已恢复
  // 
  status: long(name='status', example='1'),
}

// 应用服务查询
model AppServiceQuery {
  // 根据 id 查询
  id?: string(name='id', example='id'),
  // workspaceId
  workspaceId?: string(name='workspace_id', example='workspaceId'),
  // appId
  appId?: string(name='app_id', example='appId'),
  // name
  name?: string(name='name', example='name'),
  // deployStatus
  deployStatus?: string(name='deploy_status', example='deployStatus'),
  // ownerId
  ownerId?: string(name='owner_id', example='ownerId'),
  // workspaceIds
  workspaceIds?: [ string ](name='workspace_ids', example=''),
  // appIds
  appIds?: [ string ](name='app_ids', example=''),
  // 是否为一方化查询请求
  isOnePartyRequest?: boolean(name='is_one_party_request', example='true, false'),
  // startIndex
  startIndex?: long(name='start_index', example=''),
  // pageSize
  pageSize?: long(name='page_size', example=''),
  // currentPage
  currentPage?: long(name='current_page', example=''),
  // orders
  orders?: [ string ](name='orders', example=''),
  // 查询类型
  queryType?: string(name='query_type', example='FUZZY,  ACCURATE, START_WITH'),
  // Map<String, String>
  conditions?: string(name='conditions', example='"{}"'),
}

// 获取应用详情信息包括对应workspace下的appservices
model AppPortraitAppGet {
  // 应用id
  id: string(name='id', example='id'),
  // 应用名称
  name: string(name='name', example='name'),
  // 应用分组名称
  appGroupName?: string(name='app_group_name', example='app_group_name'),
  // 应用所属分组id
  appGroupId?: string(name='app_group_id', example='app_group_id'),
  // 应用负责人
  ownerDisplayName?: string(name='owner_display_name', example='owner_display_name'),
  // description
  description?: string(name='description', example='description'),
  // 技术栈名称
  buildpackName?: string(name='buildpack_name', example='buildpack_name'),
  // 技术栈版本
  buildpackVersion?: string(name='buildpack_version', example='buildpack_version'),
  // workspace下应用所关联的应用服务列表
  appservices?: [ string ](name='appservices', example='["应用服务1","应用服务2"]'),
}

// ListenerSecurityIp
model ListenerSecurityIp {
  // access_control
  accessControl: boolean(name='access_control', example='true, false'),
  // ips
  ips: [ string ](name='ips', example=''),
}

// LbCluster
model LbCluster {
  // container_cpu
  containerCpu?: long(name='container_cpu', example='1'),
  // container_cpu_exclusive
  containerCpuExclusive?: boolean(name='container_cpu_exclusive', example=''),
  // container_device_type
  containerDeviceType?: string(name='container_device_type', example='container_device_type'),
  // container_disk
  containerDisk?: long(name='container_disk', example='1'),
  // container_mem
  containerMem?: long(name='container_mem', example='1'),
  // id
  id: string(name='id', example='id'),
  // image
  image: string(name='image', example='image'),
  // name
  name: string(name='name', example='name'),
  // status
  status: long(name='status', example='status'),
  // unit_infos
  unitInfos?: [ AcsClusterUnit ](name='unit_infos', example=''),
  // unit_type
  unitType?: long(name='unit_type', example='1'),
  // used_ports
  usedPorts?: [ long ](name='used_ports', example=''),
}

// QuotaKv
model QuotaKv {
  // type
  type: string(name='type', example='type'),
  // quota
  quota: long(name='quota', example=''),
}

// BasicCertificate
model BasicCertificate {
  // serverCertificateId
  serverCertificateId: string(name='server_certificate_id', example='serverCertificateId'),
  // serverCertificateName
  serverCertificateName: string(name='server_certificate_name', example='serverCertificateName'),
  // fingerprint
  fingerprint?: string(name='fingerprint', example='fingerprint'),
  // cert_type
  certType: long(name='cert_type', example=''),
  // 标记这个证书的Provider
  providerId?: string(name='provider_id', example='provider_id'),
}

// <String, Boolean> 映射
model MapStringToBooleanEntity {
  // key
  key: string(name='key', example='key'),
  // value
  value: boolean(name='value', example='true, false'),
}

// db schema
model DatabaseSchema {
  // 字符集
  charSet: string(name='char_set', example='MYSQLUTF8'),
  // 数量
  count?: long(name='count', example=''),
  // 是否自动生成名称。默认为 true
  isAutoName?: boolean(name='is_auto_name', example='false'),
  // 名称
  name: string(name='name', example='ddd'),
  // 序列号是否连续。默认为 false
  isSerial?: boolean(name='is_serial', example='true, false'),
}

// 中间件集群实例
model MiddlewareClusterInstance {
  // cluster_id
  clusterId: string(name='cluster_id', example='cluster_id'),
  // cluster_name
  clusterName: string(name='cluster_name', example='cluster_name'),
  // region_ids
  regionIds: [ string ](name='region_ids', example=''),
  // zone_ids
  zoneIds?: [ string ](name='zone_ids', example=''),
  // acvip_endpoint
  acvipEndpoint: string(name='acvip_endpoint', example='1.1.1.1'),
  // instance_id
  instanceId?: string(name='instance_id', example='instance_id'),
  // workspace_group_name
  workspaceGroupName?: string(name='workspace_group_name', example='workspace_group_name'),
}

// LoadBalancerImportVO
model LoadBalancerImportVO {
  // iaas_id
  iaasId?: string(name='iaas_id', example='iaas_id'),
  // name
  name: string(name='name', example='name'),
  // network_type
  networkType?: string(name='network_type', example='network_type'),
  // inner_ip_address
  innerIpAddress?: [ string ](name='inner_ip_address', example=''),
  // public_ip_address
  publicIpAddress?: [ string ](name='public_ip_address', example=''),
  // utc_create
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // import_info
  importInfo: ImportVO(name='import_info', example=''),
}

// 旧版-应用服务放入前端展示内容
model AppServiceViewModel {
  // 基类
  baseAppService?: AppService(name='base_app_service', example=''),
  // 应用负责人姓名
  ownerName?: string(name='owner_name', example='ownerName'),
  // 技术栈名称
  buildpackName?: string(name='buildpack_name', example='buildpack_name'),
  // App的别名
  chineseName?: string(name='chinese_name', example='chinese_name'),
  // buildpackVersion
  buildpackVersion?: string(name='buildpack_version', example='buildpackVersion'),
  // computerCount
  computerCount?: long(name='computer_count', example=''),
  // databaseCount
  databaseCount?: long(name='database_count', example=''),
  // loadBalancerCount
  loadBalancerCount?: long(name='load_balancer_count', example=''),
  // cacheCount
  cacheCount?: long(name='cache_count', example=''),
  // cellViewList
  cellViewList?: [ CellView ](name='cell_view_list', example=''),
}

// DatabaseSecurityIp
model DatabaseSecurityIp {
  // id
  id: string(name='id', example='id'),
  // resource_id
  resourceId?: string(name='resource_id', example='resource_id'),
  // resource_type
  resourceType?: string(name='resource_type', example='resource_type'),
  // ip
  ip?: string(name='ip', example='ip'),
  // status
  status?: string(name='status', example='status'),
  // type
  type?: string(name='type', example='type'),
}

// 系统配置项
model Feature {
  // id
  id: string(name='id', example='id'),
  // cloud_name
  cloudName: string(name='cloud_name', example='cloud_name'),
  // region_id
  regionId: string(name='region_id', example='region_id'),
  // description
  description: string(name='description', example='description'),
  // feature_name
  featureName: string(name='feature_name', example='feature_name'),
  // content
  content: string(name='content', example='content'),
  // conditional_content
  conditionalContent?: string(name='conditional_content', example='conditional_content'),
  // utc_create
  // 
  utcCreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // utc_modified
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
}

// 单维度配额
model SingleDimGroup {
  // 维度标识, 如: WORKSPACE
  dimIdentity: string(name='dim_identity', example='WORKSPACE'),
  // 维度实例的值, 如: 0000000001
  dimInsValue: string(name='dim_ins_value', example='0000000001'),
  // resource_identity
  resourceIdentity: string(name='resource_identity', example='CPU'),
  // 申请的数量，要注意quota_factor，比如当quota_factor=0.1时，申请实际为1的资源时，这里要填10
  count: long(name='count', example=''),
}

// DatabaseEngine
model DatabaseEngine {
  // iaas_type
  iaasType?: string(name='iaas_type', example='iaas_type'),
  // engine
  engine?: string(name='engine', example='engine'),
  // engine_versions
  engineVersions?: [ string ](name='engine_versions', example=''),
}

// ComputerParam
model ComputerParam {
  // description
  description?: string(name='description', example='description'),
  // name
  name?: string(name='name', example='name'),
  // image_id
  imageId?: string(name='image_id', example='image_id'),
  // instance_type
  instanceType?: string(name='instance_type', example='instance_type'),
  // region_id
  regionId?: string(name='region_id', example='region_id'),
  // security_group_id
  securityGroupId?: string(name='security_group_id', example='security_group_id'),
  // instance_name
  instanceName?: string(name='instance_name', example='instance_name'),
  // zone_id
  zoneId?: string(name='zone_id', example='zone_id'),
}

// 单维度配额信息
model SingleDimGroupQuota {
  // quota_id
  quotaId: string(name='quota_id', example='0000000001'),
  // 后端用，前端无需关心
  dimGroupId?: string(name='dim_group_id', example='0000000001'),
  // dim_identity
  dimIdentity: string(name='dim_identity', example='WORKSPACE'),
  // resource_identity
  resourceIdentity: string(name='resource_identity', example='CPU'),
  // 配额最大值，注意:1. hardLimit为 -1时 表时无限大2. hardLimit为 -2时 表时无限小
  hardLimit: long(name='hard_limit', example=''),
  // 后端用，前端无需关心
  syncInterface?: string(name='sync_interface', example='同步接口'),
  // 创建者
  creatorName?: string(name='creator_name', example='yushan'),
  // utc_create
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create', example='2018-10-10T10:10:00Z'),
  // utc_modified
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified', example='2018-10-10T10:10:00Z'),
  // 维度实例的值，比如某个workspace的ID
  dimInsValue: string(name='dim_ins_value', example='00000001'),
  // 由于额度只支持整数，用这个浮点数factor表示乘数因子，
  quotaFactor?: string(name='quota_factor', example='1'),
}

// LB的vip类型
model VipType {
  // name
  name: string(name='name', example='name'),
  // vip_address_type
  vipAddressType: string(name='vip_address_type', example='vip_address_type'),
  // vip_type
  vipType: string(name='vip_type', example='vip_type'),
}

model BatchdeleteApplicationBuildRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app_id
  appId: string(name='app_id'),
  // build_ids
  buildIds: [ string ](name='build_ids'),
}

model BatchdeleteApplicationBuildResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // Map<String, Boolean>
  data?: [ MapStringToBooleanEntity ](name='data'),
}

/**
 * Description: 批量删除构建记录
 * Summary: 批量删除构建记录
 */
async function batchdeleteApplicationBuild(request: BatchdeleteApplicationBuildRequest): BatchdeleteApplicationBuildResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchdeleteApplicationBuildEx(request, headers, runtime);
}

/**
 * Description: 批量删除构建记录
 * Summary: 批量删除构建记录
 */
async function batchdeleteApplicationBuildEx(request: BatchdeleteApplicationBuildRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchdeleteApplicationBuildResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.application.build.batchdelete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListApplicationManifestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app_id
  appId: string(name='app_id'),
  // DynamicQuery
  query: DynamicQuery(name='query'),
  // workspace_id
  workspaceId: string(name='workspace_id'),
}

model ListApplicationManifestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // List<AppManifest>
  data?: [ AppManifest ](name='data'),
  // 总数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 批量查询应用明细
 * Summary: 批量查询应用明细
 */
async function listApplicationManifest(request: ListApplicationManifestRequest): ListApplicationManifestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listApplicationManifestEx(request, headers, runtime);
}

/**
 * Description: 批量查询应用明细
 * Summary: 批量查询应用明细
 */
async function listApplicationManifestEx(request: ListApplicationManifestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListApplicationManifestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.application.manifest.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchdeleteApplicationPackageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app_id
  appId: string(name='app_id'),
  // List<String> versionIds
  versionIds: [ string ](name='version_ids'),
}

model BatchdeleteApplicationPackageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // Map<String, Boolean>
  data?: [ MapStringToBooleanEntity ](name='data'),
}

/**
 * Description: 批量删除应用发布包
 * Summary: 批量删除应用发布包
 */
async function batchdeleteApplicationPackage(request: BatchdeleteApplicationPackageRequest): BatchdeleteApplicationPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchdeleteApplicationPackageEx(request, headers, runtime);
}

/**
 * Description: 批量删除应用发布包
 * Summary: 批量删除应用发布包
 */
async function batchdeleteApplicationPackageEx(request: BatchdeleteApplicationPackageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchdeleteApplicationPackageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.application.package.batchdelete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateApplicationPackageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app_id
  appId: string(name='app_id'),
  // manifest
  manifest: AppManifest(name='manifest'),
}

model CreateApplicationPackageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: string(name='data'),
}

/**
 * Description: 创建应用发布包
 * Summary: 创建应用发布包
 */
async function createApplicationPackage(request: CreateApplicationPackageRequest): CreateApplicationPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createApplicationPackageEx(request, headers, runtime);
}

/**
 * Description: 创建应用发布包
 * Summary: 创建应用发布包
 */
async function createApplicationPackageEx(request: CreateApplicationPackageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateApplicationPackageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.application.package.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteApplicationPackageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // version_id
  versionId: string(name='version_id'),
  // 应用id，用于鉴权
  appId: string(name='app_id'),
}

model DeleteApplicationPackageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 删除结果
  data?: boolean(name='data'),
}

/**
 * Description: 删除应用发布包
 * Summary: 删除应用发布包
 */
async function deleteApplicationPackage(request: DeleteApplicationPackageRequest): DeleteApplicationPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteApplicationPackageEx(request, headers, runtime);
}

/**
 * Description: 删除应用发布包
 * Summary: 删除应用发布包
 */
async function deleteApplicationPackageEx(request: DeleteApplicationPackageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteApplicationPackageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.application.package.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListApplicationPackageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间id，用于做鉴权
  workspaceId: string(name='workspace_id'),
  // 动态查询
  dynamicQuery?: DynamicQuery(name='dynamic_query'),
  // 应用查询
  query?: AppQuery(name='query'),
}

model ListApplicationPackageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // List<AppPackageListView>
  data?: [ AppPackageListView ](name='data'),
  // 总数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 批量获取应用发布包
 * Summary: 批量获取应用发布包
 */
async function listApplicationPackage(request: ListApplicationPackageRequest): ListApplicationPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listApplicationPackageEx(request, headers, runtime);
}

/**
 * Description: 批量获取应用发布包
 * Summary: 批量获取应用发布包
 */
async function listApplicationPackageEx(request: ListApplicationPackageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListApplicationPackageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.application.package.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadApplicationPackageconfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_id
  workspaceId: string(name='workspace_id'),
  // 应用id，用于鉴权
  appId: string(name='app_id'),
}

model UploadApplicationPackageconfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // Map<String, Boolean>
  data?: [ MapStringToBooleanEntity ](name='data'),
}

/**
 * Description: 获取上传应用发布包下载配置
 * Summary: 获取上传应用发布包下载配置
 */
async function uploadApplicationPackageconfig(request: UploadApplicationPackageconfigRequest): UploadApplicationPackageconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadApplicationPackageconfigEx(request, headers, runtime);
}

/**
 * Description: 获取上传应用发布包下载配置
 * Summary: 获取上传应用发布包下载配置
 */
async function uploadApplicationPackageconfigEx(request: UploadApplicationPackageconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadApplicationPackageconfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.application.packageconfig.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAppserviceCellRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_id
  workspaceId: string(name='workspace_id'),
}

model ListAppserviceCellResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // List<CellView>
  data?: [ CellView ](name='data'),
}

/**
 * Description: 批量获取应用实例的 cell
 * Summary: 批量获取应用实例的 cell
 */
async function listAppserviceCell(request: ListAppserviceCellRequest): ListAppserviceCellResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAppserviceCellEx(request, headers, runtime);
}

/**
 * Description: 批量获取应用实例的 cell
 * Summary: 批量获取应用实例的 cell
 */
async function listAppserviceCellEx(request: ListAppserviceCellRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppserviceCellResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appservice.cell.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAppserviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app_service
  appService: AppService(name='app_service'),
  // 工作空间id，用于鉴权
  workspaceId: string(name='workspace_id'),
}

model CreateAppserviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 创建结果
  data?: string(name='data'),
}

/**
 * Description: 创建应用实例
 * Summary: 创建应用实例
 */
async function createAppservice(request: CreateAppserviceRequest): CreateAppserviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAppserviceEx(request, headers, runtime);
}

/**
 * Description: 创建应用实例
 * Summary: 创建应用实例
 */
async function createAppserviceEx(request: CreateAppserviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAppserviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appservice.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAppserviceDefaultRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app_id
  appId: string(name='app_id'),
  // workspace_id
  workspaceId: string(name='workspace_id'),
}

model GetAppserviceDefaultResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // AppService
  data?: AppService(name='data'),
}

/**
 * Description: 旧版应用管理-根据appId获得默认的APPService,只有当isCreateDefault为true并且没有默认AppService时才会创建默认AppService
 * Summary: 旧版应用管理-获取默认的应用服务
 */
async function getAppserviceDefault(request: GetAppserviceDefaultRequest): GetAppserviceDefaultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAppserviceDefaultEx(request, headers, runtime);
}

/**
 * Description: 旧版应用管理-根据appId获得默认的APPService,只有当isCreateDefault为true并且没有默认AppService时才会创建默认AppService
 * Summary: 旧版应用管理-获取默认的应用服务
 */
async function getAppserviceDefaultEx(request: GetAppserviceDefaultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAppserviceDefaultResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appservice.default.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExistAppserviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app_id
  appId: string(name='app_id'),
  // name
  name: string(name='name'),
  // workspace_id
  workspaceId: string(name='workspace_id'),
}

model ExistAppserviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否存在
  data?: boolean(name='data'),
}

/**
 * Description: 判断应用实例是否存在
 * Summary: 判断应用实例是否存在
 */
async function existAppservice(request: ExistAppserviceRequest): ExistAppserviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return existAppserviceEx(request, headers, runtime);
}

/**
 * Description: 判断应用实例是否存在
 * Summary: 判断应用实例是否存在
 */
async function existAppserviceEx(request: ExistAppserviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExistAppserviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appservice.exist', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateAppserviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app_service
  appService: AppService(name='app_service'),
  // 工作空间id，用于鉴权
  workspaceId: string(name='workspace_id'),
}

model UpdateAppserviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 更新结果
  data?: boolean(name='data'),
}

/**
 * Description: 更新应用实例
 * Summary: 更新应用实例
 */
async function updateAppservice(request: UpdateAppserviceRequest): UpdateAppserviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateAppserviceEx(request, headers, runtime);
}

/**
 * Description: 更新应用实例
 * Summary: 更新应用实例
 */
async function updateAppserviceEx(request: UpdateAppserviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAppserviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appservice.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBuildpackRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 技术栈版本
  bpVersion?: string(name='bp_version'),
  // 是否分页，默认为true
  byPage?: boolean(name='by_page'),
  // 组件ID
  componentId?: string(name='component_id'),
  // 配置ID
  configId?: string(name='config_id'),
  // 页码：默认值为1，表示第一页
  currentPage?: long(name='current_page'),
  // 部署脚本id
  deployScriptId?: string(name='deploy_script_id'),
  // 技术栈ID标识
  id?: string(name='id'),
  // 是否包含模板
  includeTemplate?: boolean(name='include_template'),
  // 技术栈名称
  name?: string(name='name'),
  // 每页返回个数
  pageSize?: long(name='page_size'),
  // 查询名称过滤方式
  // 模糊查询 FUZZY
  // 精准匹配 ACCURATE
  // 前缀查询 START_WITH
  queryType?: string(name='query_type'),
  // 所属技术栈类别ID
  stackId?: string(name='stack_id'),
  // 技术栈状态
  status?: string(name='status'),
  // 技术栈定义类型
  // 系统模板 TEMPLATE,
  // 用户自定义 CUSTOM,
  // 后台服务 BACKGROUND_SERVICE
  types?: [ string ](name='types'),
  // 工作空间
  workspace?: string(name='workspace'),
}

model QueryBuildpackResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页码
  currentPage?: long(name='current_page'),
  // 技术栈列表
  list?: [ Buildpack ](name='list'),
  // 每页个数
  pageSize?: long(name='page_size'),
  // 起始位置
  startIndex?: long(name='start_index'),
  // 总计
  totalSize?: long(name='total_size'),
}

/**
 * Description: 技术栈1.0查询（opsware）
 * Summary: 技术栈查询
 */
async function queryBuildpack(request: QueryBuildpackRequest): QueryBuildpackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBuildpackEx(request, headers, runtime);
}

/**
 * Description: 技术栈1.0查询（opsware）
 * Summary: 技术栈查询
 */
async function queryBuildpackEx(request: QueryBuildpackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBuildpackResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.buildpack.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetApplicationDetailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用ID
  appId: string(name='app_id'),
  // 工作空间ID
  workspaceId: string(name='workspace_id'),
}

model GetApplicationDetailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用详情信息
  data?: AppView(name='data'),
}

/**
 * Description: 旧版应用管理-获取指定应用详情
 * Summary: 旧版应用管理-获取应用详情
 */
async function getApplicationDetail(request: GetApplicationDetailRequest): GetApplicationDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getApplicationDetailEx(request, headers, runtime);
}

/**
 * Description: 旧版应用管理-获取指定应用详情
 * Summary: 旧版应用管理-获取应用详情
 */
async function getApplicationDetailEx(request: GetApplicationDetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetApplicationDetailResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.application.detail.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 当前页码
  currentPage?: long(name='current_page'),
  // customer_id
  customerId?: string(name='customer_id'),
  // 邮箱
  email?: string(name='email'),
  // 用户ID
  id?: string(name='id'),
  // is_locale_enabled
  isLocaleEnabled?: boolean(name='is_locale_enabled'),
  // local
  local?: string(name='local'),
  // 登录名称
  loginName?: string(name='login_name'),
  // 手机号
  mobile?: string(name='mobile'),
  // 排序关键字列表
  orders?: [ string ](name='orders'),
  // 每页个数
  pageSize?: long(name='page_size'),
  // 是否分页
  paging?: boolean(name='paging'),
  // 查询类型
  // 模糊查询 FUZZY
  // 精准查询 ACCURATE,
  //  前缀查询 START_WITH
  queryType?: string(name='query_type'),
  // 实际名称
  realName?: string(name='real_name'),
  // search
  search?: boolean(name='search'),
  // 账户类型
  // MASTER 主账号
  // OPERATOR 操作员
  // SERVICE 服务账号
  // STS_ACTOR 虚拟身份
  type?: string(name='type'),
  // 账户类型列表
  types?: [ string ](name='types'),
}

model QueryUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户列表
  data?: [ UserDTO ](name='data'),
  // 页数
  pageNum?: long(name='page_num'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 总数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询用户信息
 * Summary: 查询用户信息
 */
async function queryUser(request: QueryUserRequest): QueryUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUserEx(request, headers, runtime);
}

/**
 * Description: 查询用户信息
 * Summary: 查询用户信息
 */
async function queryUserEx(request: QueryUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.user.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAppgroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 动态查询
  dynamicQuery?: DynamicQuery(name='dynamic_query'),
  // 应用分组查询
  query?: AppDomainQuery(name='query'),
}

model ListAppgroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ AppDomainView ](name='data'),
  // totalCount
  totalCount?: long(name='total_count'),
}

/**
 * Description: 获取应用分组列表
 * Summary: 获取应用分组列表
 */
async function listAppgroup(request: ListAppgroupRequest): ListAppgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAppgroupEx(request, headers, runtime);
}

/**
 * Description: 获取应用分组列表
 * Summary: 获取应用分组列表
 */
async function listAppgroupEx(request: ListAppgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appgroup.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExistAppgroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // name
  name: string(name='name'),
  // parentId
  parentId?: string(name='parent_id'),
}

model ExistAppgroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否存在
  data?: boolean(name='data'),
}

/**
 * Description: 检查应用分组是否存在
 * Summary: 检查应用分组是否存在
 */
async function existAppgroup(request: ExistAppgroupRequest): ExistAppgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return existAppgroupEx(request, headers, runtime);
}

/**
 * Description: 检查应用分组是否存在
 * Summary: 检查应用分组是否存在
 */
async function existAppgroupEx(request: ExistAppgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExistAppgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appgroup.exist', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAppgroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // domain tree
  domain: AppDomainFlatten(name='domain'),
  // 占位
  tenantId?: string(name='tenant_id'),
}

model CreateAppgroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: string(name='data'),
}

/**
 * Description: 创建应用分组
 * Summary: 创建应用分组
 */
async function createAppgroup(request: CreateAppgroupRequest): CreateAppgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAppgroupEx(request, headers, runtime);
}

/**
 * Description: 创建应用分组
 * Summary: 创建应用分组
 */
async function createAppgroupEx(request: CreateAppgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAppgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appgroup.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAppgroupOwnerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 用户查询
  query: UserQuery(name='query'),
  // 占位
  tenantId?: string(name='tenant_id'),
}

model ListAppgroupOwnerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户列表
  data?: [ UserDTO ](name='data'),
  // 总数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 获取应用owner列表
 * Summary: 获取应用owner列表
 */
async function listAppgroupOwner(request: ListAppgroupOwnerRequest): ListAppgroupOwnerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAppgroupOwnerEx(request, headers, runtime);
}

/**
 * Description: 获取应用owner列表
 * Summary: 获取应用owner列表
 */
async function listAppgroupOwnerEx(request: ListAppgroupOwnerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppgroupOwnerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appgroup.owner.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAppgroupTreeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model GetAppgroupTreeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用列表，包含依赖关系
  data?: [ AppDomainFlatten ](name='data'),
}

/**
 * Description: 应用分组结构查询
 * Summary: 应用分组结构查询
 */
async function getAppgroupTree(request: GetAppgroupTreeRequest): GetAppgroupTreeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAppgroupTreeEx(request, headers, runtime);
}

/**
 * Description: 应用分组结构查询
 * Summary: 应用分组结构查询
 */
async function getAppgroupTreeEx(request: GetAppgroupTreeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAppgroupTreeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appgroup.tree.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAppgroupSystemtreeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model GetAppgroupSystemtreeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用分组结构
  data?: [ AppDomainFlatten ](name='data'),
}

/**
 * Description: 应用分组结构查询
 * Summary: 应用分组结构查询
 */
async function getAppgroupSystemtree(request: GetAppgroupSystemtreeRequest): GetAppgroupSystemtreeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAppgroupSystemtreeEx(request, headers, runtime);
}

/**
 * Description: 应用分组结构查询
 * Summary: 应用分组结构查询
 */
async function getAppgroupSystemtreeEx(request: GetAppgroupSystemtreeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAppgroupSystemtreeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appgroup.systemtree.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteAppgroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 分组 id
  id: string(name='id'),
}

model DeleteAppgroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 删除结果
  data?: boolean(name='data'),
}

/**
 * Description: 删除分组
 * Summary: 删除分组
 */
async function deleteAppgroup(request: DeleteAppgroupRequest): DeleteAppgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteAppgroupEx(request, headers, runtime);
}

/**
 * Description: 删除分组
 * Summary: 删除分组
 */
async function deleteAppgroupEx(request: DeleteAppgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAppgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appgroup.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateAppgroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 更新内容
  domain: AppDomainFlatten(name='domain'),
  // 应用分组id
  id: string(name='id'),
}

model UpdateAppgroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 更新结果
  data?: boolean(name='data'),
}

/**
 * Description: 更新分组
 * Summary: 更新分组
 */
async function updateAppgroup(request: UpdateAppgroupRequest): UpdateAppgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateAppgroupEx(request, headers, runtime);
}

/**
 * Description: 更新分组
 * Summary: 更新分组
 */
async function updateAppgroupEx(request: UpdateAppgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAppgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appgroup.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListApplevelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 动态查询
  dynamicQuery?: DynamicQuery(name='dynamic_query'),
  // 应用分级查询
  query?: AppLevelQuery(name='query'),
}

model ListApplevelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用等级列表
  data?: [ AppLevelView ](name='data'),
  // 总数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 列出所有应用等级
 * Summary: 列出所有应用等级
 */
async function listApplevel(request: ListApplevelRequest): ListApplevelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listApplevelEx(request, headers, runtime);
}

/**
 * Description: 列出所有应用等级
 * Summary: 列出所有应用等级
 */
async function listApplevelEx(request: ListApplevelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListApplevelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.applevel.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExistApplevelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用等级名称
  name: string(name='name'),
}

model ExistApplevelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否存在
  data?: boolean(name='data'),
}

/**
 * Description: 应用等级是否存在
 * Summary: 应用等级是否存在
 */
async function existApplevel(request: ExistApplevelRequest): ExistApplevelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return existApplevelEx(request, headers, runtime);
}

/**
 * Description: 应用等级是否存在
 * Summary: 应用等级是否存在
 */
async function existApplevelEx(request: ExistApplevelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExistApplevelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.applevel.exist', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateApplevelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用等级
  level: AppLevel(name='level'),
  // 占位，因为入参不能只有一个结构体
  tenantId?: string(name='tenant_id'),
}

model CreateApplevelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 创建结果
  data?: string(name='data'),
}

/**
 * Description: 创建应用等级
 * Summary: 创建应用等级
 */
async function createApplevel(request: CreateApplevelRequest): CreateApplevelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createApplevelEx(request, headers, runtime);
}

/**
 * Description: 创建应用等级
 * Summary: 创建应用等级
 */
async function createApplevelEx(request: CreateApplevelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateApplevelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.applevel.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteApplevelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用等级 id
  id: string(name='id'),
}

model DeleteApplevelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 删除结果
  data?: boolean(name='data'),
}

/**
 * Description: 删除应用分组
 * Summary: 删除应用分组
 */
async function deleteApplevel(request: DeleteApplevelRequest): DeleteApplevelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteApplevelEx(request, headers, runtime);
}

/**
 * Description: 删除应用分组
 * Summary: 删除应用分组
 */
async function deleteApplevelEx(request: DeleteApplevelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteApplevelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.applevel.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateApplevelRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用等级id
  id: string(name='id'),
  // 应用等级名称
  name: string(name='name'),
}

model UpdateApplevelResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 更新结果
  data?: boolean(name='data'),
}

/**
 * Description: 更新应用等级
 * Summary: 更新应用等级
 */
async function updateApplevel(request: UpdateApplevelRequest): UpdateApplevelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateApplevelEx(request, headers, runtime);
}

/**
 * Description: 更新应用等级
 * Summary: 更新应用等级
 */
async function updateApplevelEx(request: UpdateApplevelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateApplevelResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.applevel.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListApplicationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 动态查询
  dynamicQuery?: DynamicQuery(name='dynamic_query'),
  // 应用查询
  query?: AppQuery(name='query'),
}

model ListApplicationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用列表
  data?: [ AppView ](name='data'),
  // 总数量
  totalCount?: long(name='total_count'),
  // 当前页码
  pageNum?: long(name='page_num'),
  // 分页大小
  pageSize?: long(name='page_size'),
}

/**
 * Description: 旧版应用管理-获取应用列表
 * Summary: 旧版应用管理-获取应用列表
 */
async function listApplication(request: ListApplicationRequest): ListApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listApplicationEx(request, headers, runtime);
}

/**
 * Description: 旧版应用管理-获取应用列表
 * Summary: 旧版应用管理-获取应用列表
 */
async function listApplicationEx(request: ListApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListApplicationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.application.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateApplicationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // appDomainId
  appDomainId?: string(name='app_domain_id'),
  // appExtraInfos
  appExtraInfos?: [ AppExtraInfo ](name='app_extra_infos'),
  // 应用等级
  appLevel?: AppLevel(name='app_level'),
  // appOwner
  appOwner?: AppOwner(name='app_owner'),
  // archetype
  archetype?: ScmSofaArchetype(name='archetype'),
  // buildpackVersion
  buildpackVersion?: string(name='buildpack_version'),
  // 中文名称
  chineseName?: string(name='chinese_name'),
  // 代码库
  codeRepository?: CodeRepository(name='code_repository'),
  // 描述
  description?: string(name='description'),
  // 额外信息
  extraParams?: string(name='extra_params'),
  // id
  id?: string(name='id'),
  // isService
  isService?: boolean(name='is_service'),
  // name
  name?: string(name='name'),
  // ownerId
  ownerId?: string(name='owner_id'),
  // stack_id
  stackId?: string(name='stack_id'),
  // 状态
  status?: string(name='status'),
  // tags
  tags?: string(name='tags'),
  // 创建时间
  utcCreate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_create'),
  // 修改时间
  utcModified?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='utc_modified'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model UpdateApplicationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 更新结果
  data?: boolean(name='data'),
}

/**
 * Description: 旧版应用管理-更新应用
 * Summary: 旧版应用管理-更新应用
 */
async function updateApplication(request: UpdateApplicationRequest): UpdateApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateApplicationEx(request, headers, runtime);
}

/**
 * Description: 旧版应用管理-更新应用
 * Summary: 旧版应用管理-更新应用
 */
async function updateApplicationEx(request: UpdateApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateApplicationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.application.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAppserviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 动态查询
  dynamicQuery?: DynamicQuery(name='dynamic_query'),
  // 应用服务查询
  query?: AppServiceQuery(name='query'),
  // 工作空间id，用于鉴权
  workspaceId: string(name='workspace_id'),
}

model ListAppserviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前页面
  currentPage?: long(name='current_page'),
  // PaginationResult<AppServiceViewModel>
  data?: [ AppServiceViewModel ](name='data'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 总数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 旧版应用管理-批量查询应用服务
 * Summary: 旧版应用管理-批量查询应用服务
 */
async function listAppservice(request: ListAppserviceRequest): ListAppserviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAppserviceEx(request, headers, runtime);
}

/**
 * Description: 旧版应用管理-批量查询应用服务
 * Summary: 旧版应用管理-批量查询应用服务
 */
async function listAppserviceEx(request: ListAppserviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppserviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appservice.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteAppserviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // id
  id: string(name='id'),
  // 工作空间id，用于鉴权
  workspaceId: string(name='workspace_id'),
}

model DeleteAppserviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: long(name='data'),
}

/**
 * Description: 旧版应用管理-删除应用服务
 * Summary: 旧版应用管理-删除应用服务
 */
async function deleteAppservice(request: DeleteAppserviceRequest): DeleteAppserviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteAppserviceEx(request, headers, runtime);
}

/**
 * Description: 旧版应用管理-删除应用服务
 * Summary: 旧版应用管理-删除应用服务
 */
async function deleteAppserviceEx(request: DeleteAppserviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAppserviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appservice.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAppserviceDetailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用服务id
  appServiceId: string(name='app_service_id'),
  // 工作空间id，用于鉴权
  workspaceId: string(name='workspace_id'),
}

model GetAppserviceDetailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用服务详情
  data?: AppServiceViewModel(name='data'),
}

/**
 * Description: 旧版应用管理-获取应用服务详情
 * Summary: 旧版应用管理-获取应用服务详情
 */
async function getAppserviceDetail(request: GetAppserviceDetailRequest): GetAppserviceDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAppserviceDetailEx(request, headers, runtime);
}

/**
 * Description: 旧版应用管理-获取应用服务详情
 * Summary: 旧版应用管理-获取应用服务详情
 */
async function getAppserviceDetailEx(request: GetAppserviceDetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAppserviceDetailResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appservice.detail.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExistApplicationPackageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // appId
  appId: string(name='app_id'),
  // version
  appVersion: string(name='app_version'),
  // workspaceId
  workspaceId: string(name='workspace_id'),
}

model ExistApplicationPackageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: boolean(name='data'),
}

/**
 * Description: 旧版应用管理-检查应用发布包是否存在
 * Summary: 旧版应用管理-检查应用发布包是否存在
 */
async function existApplicationPackage(request: ExistApplicationPackageRequest): ExistApplicationPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return existApplicationPackageEx(request, headers, runtime);
}

/**
 * Description: 旧版应用管理-检查应用发布包是否存在
 * Summary: 旧版应用管理-检查应用发布包是否存在
 */
async function existApplicationPackageEx(request: ExistApplicationPackageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExistApplicationPackageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.application.package.exist', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetApplicationPackageuploadpolicyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // appId
  appId: string(name='app_id'),
  // workspaceId
  workspaceId: string(name='workspace_id'),
  // version
  appVersion: string(name='app_version'),
}

model GetApplicationPackageuploadpolicyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发布包上传策略
  data?: PackageUploadPolicy(name='data'),
}

/**
 * Description: 旧版应用管理-获取应用包上传策略
 * Summary: 旧版应用管理-获取应用包上传策略
 */
async function getApplicationPackageuploadpolicy(request: GetApplicationPackageuploadpolicyRequest): GetApplicationPackageuploadpolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getApplicationPackageuploadpolicyEx(request, headers, runtime);
}

/**
 * Description: 旧版应用管理-获取应用包上传策略
 * Summary: 旧版应用管理-获取应用包上传策略
 */
async function getApplicationPackageuploadpolicyEx(request: GetApplicationPackageuploadpolicyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetApplicationPackageuploadpolicyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.application.packageuploadpolicy.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetApplicationPackagedownloadurlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // versionId
  versionId: string(name='version_id'),
  // 应用id，用于鉴权
  appId: string(name='app_id'),
}

model GetApplicationPackagedownloadurlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 下载链接
  data?: string(name='data'),
}

/**
 * Description: 旧版应用管理-获取发布包下载链接
 * Summary: 旧版应用管理-获取发布包下载链接
 */
async function getApplicationPackagedownloadurl(request: GetApplicationPackagedownloadurlRequest): GetApplicationPackagedownloadurlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getApplicationPackagedownloadurlEx(request, headers, runtime);
}

/**
 * Description: 旧版应用管理-获取发布包下载链接
 * Summary: 旧版应用管理-获取发布包下载链接
 */
async function getApplicationPackagedownloadurlEx(request: GetApplicationPackagedownloadurlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetApplicationPackagedownloadurlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.application.packagedownloadurl.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExistApplicationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用名称
  appName: string(name='app_name'),
}

model ExistApplicationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否存在
  data?: boolean(name='data'),
}

/**
 * Description: 旧版应用管理-判断应用是否存在
 * Summary: 旧版应用管理-判断应用是否存在
 */
async function existApplication(request: ExistApplicationRequest): ExistApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return existApplicationEx(request, headers, runtime);
}

/**
 * Description: 旧版应用管理-判断应用是否存在
 * Summary: 旧版应用管理-判断应用是否存在
 */
async function existApplicationEx(request: ExistApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExistApplicationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.application.exist', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppserviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用服务 id 数组
  ids: [ string ](name='ids'),
  // workspaceId 用于鉴权
  workspaceId: string(name='workspace_id'),
}

model QueryAppserviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用服务数组
  data?: [ AppService ](name='data'),
}

/**
 * Description: 旧版应用管理-根据 appServiceIds 查询应用服务
 * Summary: 根据应用服务ids查询应用服务
 */
async function queryAppservice(request: QueryAppserviceRequest): QueryAppserviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppserviceEx(request, headers, runtime);
}

/**
 * Description: 旧版应用管理-根据 appServiceIds 查询应用服务
 * Summary: 根据应用服务ids查询应用服务
 */
async function queryAppserviceEx(request: QueryAppserviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppserviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appservice.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAppgrayconfigsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model GetAppgrayconfigsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 开关配置清单
  data?: [ MapStringToBooleanEntity ](name='data'),
}

/**
 * Description: 历史遗留接口-获取开关配置清单
 * Summary: 历史遗留接口-获取开关配置清单
 */
async function getAppgrayconfigs(request: GetAppgrayconfigsRequest): GetAppgrayconfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAppgrayconfigsEx(request, headers, runtime);
}

/**
 * Description: 历史遗留接口-获取开关配置清单
 * Summary: 历史遗留接口-获取开关配置清单
 */
async function getAppgrayconfigsEx(request: GetAppgrayconfigsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAppgrayconfigsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appgrayconfigs.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryOptestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // string
  str: string(name='str'),
  // long
  lon: long(name='lon'),
  // arr_str
  arrStr?: [ string ](name='arr_str'),
  // stru
  stru?: Zone(name='stru'),
  // arr_stru
  arrStru?: [ VPC ](name='arr_stru'),
}

model QueryOptestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // str
  str?: string(name='str'),
  // lon
  lon?: long(name='lon'),
  // stru
  stru?: VPC(name='stru'),
  // arr_str
  arrStr?: [ string ](name='arr_str'),
  // arr_stru
  arrStru?: [ VPC ](name='arr_stru'),
}

/**
 * Description: 测试api元数据自动录入
 * Summary: 测试api元数据自动录入
 */
async function queryOptest(request: QueryOptestRequest): QueryOptestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryOptestEx(request, headers, runtime);
}

/**
 * Description: 测试api元数据自动录入
 * Summary: 测试api元数据自动录入
 */
async function queryOptestEx(request: QueryOptestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryOptestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.optest.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindOptestplusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // optestplus
  optestplus: string(name='optestplus'),
}

model BindOptestplusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: optestplus
 * Summary: optestplus
 */
async function bindOptestplus(request: BindOptestplusRequest): BindOptestplusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindOptestplusEx(request, headers, runtime);
}

/**
 * Description: optestplus
 * Summary: optestplus
 */
async function bindOptestplusEx(request: BindOptestplusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindOptestplusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.optestplus.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAppportraitAppRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用名称
  name?: string(name='name'),
  // 应用分组名称
  appGroupName?: string(name='app_group_name'),
  // 应用负责人
  ownerDisplayName?: string(name='owner_display_name'),
  // 技术栈名称
  buildpackName?: string(name='buildpack_name'),
  // 技术栈版本
  buildpackVersion?: string(name='buildpack_version'),
  // TenantId
  tenantId?: string(name='tenant_id'),
  // TenantName
  tenantName?: string(name='tenant_name'),
}

model ListAppportraitAppResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用名称列表数据
  data?: [ AppPortraitAppList ](name='data'),
}

/**
 * Description: 应用画像获取应用名称列表
 * Summary: 应用画像获取应用名称列表
 */
async function listAppportraitApp(request: ListAppportraitAppRequest): ListAppportraitAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAppportraitAppEx(request, headers, runtime);
}

/**
 * Description: 应用画像获取应用名称列表
 * Summary: 应用画像获取应用名称列表
 */
async function listAppportraitAppEx(request: ListAppportraitAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppportraitAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appportrait.app.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAppportraitAppRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 待查询的应用名称
  name: string(name='name'),
  // TenantId
  tenantId?: string(name='tenant_id'),
  // TenantName
  tenantName?: string(name='tenant_name'),
  // 工作空间id
  workspaceId: string(name='workspace_id'),
}

model GetAppportraitAppResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回应用详情信息
  data?: AppPortraitAppGet(name='data'),
}

/**
 * Description: 获取应用详情信息
 * Summary: 获取应用详情信息
 */
async function getAppportraitApp(request: GetAppportraitAppRequest): GetAppportraitAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAppportraitAppEx(request, headers, runtime);
}

/**
 * Description: 获取应用详情信息
 * Summary: 获取应用详情信息
 */
async function getAppportraitAppEx(request: GetAppportraitAppRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAppportraitAppResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appportrait.app.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAppportraitYearusabilityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间名称
  workspaceName: string(name='workspace_name'),
  // 租户id
  tenantId?: string(name='tenant_id'),
  // 租户名称
  tenantName?: string(name='tenant_name'),
  // app_name
  appName: string(name='app_name'),
  // 查询的年份
  year: long(name='year'),
}

model GetAppportraitYearusabilityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回数据
  data?: AppPortraitAppUsability(name='data'),
}

/**
 * Description: 年维度应用可用性查询
 * Summary: 年维度应用可用性查询
 */
async function getAppportraitYearusability(request: GetAppportraitYearusabilityRequest): GetAppportraitYearusabilityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAppportraitYearusabilityEx(request, headers, runtime);
}

/**
 * Description: 年维度应用可用性查询
 * Summary: 年维度应用可用性查询
 */
async function getAppportraitYearusabilityEx(request: GetAppportraitYearusabilityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAppportraitYearusabilityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appportrait.yearusability.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAppportraitMonthusabilityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间名称
  workspaceName: string(name='workspace_name'),
  // 租户id
  tenantId?: string(name='tenant_id'),
  // 租户名称
  tenantName?: string(name='tenant_name'),
  // app_name
  appName: string(name='app_name'),
  // 查询的月份
  month: string(name='month'),
}

model GetAppportraitMonthusabilityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回数据
  data?: AppPortraitAppUsability(name='data'),
}

/**
 * Description: 月维度应用可用性查询
 * Summary: 月维度应用可用性查询
 */
async function getAppportraitMonthusability(request: GetAppportraitMonthusabilityRequest): GetAppportraitMonthusabilityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAppportraitMonthusabilityEx(request, headers, runtime);
}

/**
 * Description: 月维度应用可用性查询
 * Summary: 月维度应用可用性查询
 */
async function getAppportraitMonthusabilityEx(request: GetAppportraitMonthusabilityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAppportraitMonthusabilityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appportrait.monthusability.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppportraitUsabilitytrendRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_name
  workspaceName: string(name='workspace_name'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // app_name
  appName: string(name='app_name'),
  // 查询开始时间utc毫秒
  startTimestamp: long(name='start_timestamp'),
  // 查询结束时间utc毫秒
  endTimestamp: long(name='end_timestamp'),
}

model QueryAppportraitUsabilitytrendResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用可用性趋势列表
  data?: [ AppPortraitAppUsabilityTrendQuery ](name='data'),
}

/**
 * Description: 可用性趋势
 * Summary: 可用性趋势
 */
async function queryAppportraitUsabilitytrend(request: QueryAppportraitUsabilitytrendRequest): QueryAppportraitUsabilitytrendResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppportraitUsabilitytrendEx(request, headers, runtime);
}

/**
 * Description: 可用性趋势
 * Summary: 可用性趋势
 */
async function queryAppportraitUsabilitytrendEx(request: QueryAppportraitUsabilitytrendRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppportraitUsabilitytrendResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appportrait.usabilitytrend.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppportraitHealthscoreRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_name
  workspaceName: string(name='workspace_name'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // app_name
  appName: string(name='app_name'),
  // 查询开始时间
  startTimestamp: long(name='start_timestamp'),
  // 查询结束时间
  endTimestamp: long(name='end_timestamp'),
}

model QueryAppportraitHealthscoreResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用健康分查询结果
  data?: AppPortraitAppHealthScoreQuery(name='data'),
}

/**
 * Description: 应用画像健康分
 * Summary: 应用画像健康分
 */
async function queryAppportraitHealthscore(request: QueryAppportraitHealthscoreRequest): QueryAppportraitHealthscoreResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppportraitHealthscoreEx(request, headers, runtime);
}

/**
 * Description: 应用画像健康分
 * Summary: 应用画像健康分
 */
async function queryAppportraitHealthscoreEx(request: QueryAppportraitHealthscoreRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppportraitHealthscoreResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appportrait.healthscore.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppportraitHealthscoretrendRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间name
  workspaceName: string(name='workspace_name'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // 租户名称
  tenantName?: string(name='tenant_name'),
  // 应用name
  appName: string(name='app_name'),
  // 查询开始时间
  startTimestamp: long(name='start_timestamp'),
  // 查询结束时间
  endTimestamp: long(name='end_timestamp'),
}

model QueryAppportraitHealthscoretrendResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用画像健康分趋势
  data?: [ AppPortraitAppHealthScoreTrendQuery ](name='data'),
}

/**
 * Description: 应用健康分趋势查询
 * Summary: 应用健康分趋势查询
 */
async function queryAppportraitHealthscoretrend(request: QueryAppportraitHealthscoretrendRequest): QueryAppportraitHealthscoretrendResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppportraitHealthscoretrendEx(request, headers, runtime);
}

/**
 * Description: 应用健康分趋势查询
 * Summary: 应用健康分趋势查询
 */
async function queryAppportraitHealthscoretrendEx(request: QueryAppportraitHealthscoretrendRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppportraitHealthscoretrendResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appportrait.healthscoretrend.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppportraitAlertcounttrendRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_name
  workspaceName: string(name='workspace_name'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // app_name
  appName: string(name='app_name'),
  // 查询开始时间,utc毫秒
  startTimestamp: long(name='start_timestamp'),
  // 查询结束时间，utc毫秒
  endTimestamp: long(name='end_timestamp'),
}

model QueryAppportraitAlertcounttrendResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用画像告警数趋势
  data?: [ AppPortraitAlertCountTrend ](name='data'),
}

/**
 * Description: 应用画像告警数趋势查询
 * Summary: 应用画像告警数趋势查询
 */
async function queryAppportraitAlertcounttrend(request: QueryAppportraitAlertcounttrendRequest): QueryAppportraitAlertcounttrendResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppportraitAlertcounttrendEx(request, headers, runtime);
}

/**
 * Description: 应用画像告警数趋势查询
 * Summary: 应用画像告警数趋势查询
 */
async function queryAppportraitAlertcounttrendEx(request: QueryAppportraitAlertcounttrendRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppportraitAlertcounttrendResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appportrait.alertcounttrend.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAppportraitAlertRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // eco0sh0prod
  workspaceName: string(name='workspace_name'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // 应用名
  appName: string(name='app_name'),
  // 查询开始时间，utc毫秒
  startTimestamp: long(name='start_timestamp'),
  // 查询结束时间，utc毫秒
  endTimestamp: long(name='end_timestamp'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 当前页码，从1开始
  pageNum?: long(name='page_num'),
}

model ListAppportraitAlertResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回数据
  data?: [ AppPortraitAlertList ](name='data'),
  // 当前页码
  pageNum?: long(name='page_num'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 总数
  total?: long(name='total'),
}

/**
 * Description: 查询应用画像告警明细列表
 * Summary: 应用画像告警明细列表
 */
async function listAppportraitAlert(request: ListAppportraitAlertRequest): ListAppportraitAlertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAppportraitAlertEx(request, headers, runtime);
}

/**
 * Description: 查询应用画像告警明细列表
 * Summary: 应用画像告警明细列表
 */
async function listAppportraitAlertEx(request: ListAppportraitAlertRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppportraitAlertResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appportrait.alert.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAppportraitEcsusageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_name
  workspaceName: string(name='workspace_name'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // app_name
  appName: string(name='app_name'),
  // 查询开始时间 utc毫秒
  startTimestamp: long(name='start_timestamp'),
  // 查询结束时间utc毫秒
  endTimestamp: long(name='end_timestamp'),
}

model GetAppportraitEcsusageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回数据
  data?: AppPortraitEcsUsageGet(name='data'),
}

/**
 * Description: 应用画像应用ecs利用率
 * Summary: 应用画像应用ecs利用率
 */
async function getAppportraitEcsusage(request: GetAppportraitEcsusageRequest): GetAppportraitEcsusageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAppportraitEcsusageEx(request, headers, runtime);
}

/**
 * Description: 应用画像应用ecs利用率
 * Summary: 应用画像应用ecs利用率
 */
async function getAppportraitEcsusageEx(request: GetAppportraitEcsusageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAppportraitEcsusageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appportrait.ecsusage.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAppportraitContainerusageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_name
  workspaceName: string(name='workspace_name'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // app_name
  appName: string(name='app_name'),
  // 查询开始时间utc毫秒
  startTimestamp: long(name='start_timestamp'),
  // 查询结束时间 utc毫秒
  endTimestamp: long(name='end_timestamp'),
}

model QueryAppportraitContainerusageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回数据
  data?: [ AppPortraitContainerUsageList ](name='data'),
}

/**
 * Description: 查询应用画像容器利用率
 * Summary: 应用画像容器利用率
 */
async function queryAppportraitContainerusage(request: QueryAppportraitContainerusageRequest): QueryAppportraitContainerusageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAppportraitContainerusageEx(request, headers, runtime);
}

/**
 * Description: 查询应用画像容器利用率
 * Summary: 应用画像容器利用率
 */
async function queryAppportraitContainerusageEx(request: QueryAppportraitContainerusageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAppportraitContainerusageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appportrait.containerusage.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAppportraitActiontrailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_name
  workspaceName: string(name='workspace_name'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
  // app_name
  appName: string(name='app_name'),
  // 查询开始时间，毫秒
  startTimestamp: long(name='start_timestamp'),
  // 查询结束时间，毫秒
  endTimestamp: long(name='end_timestamp'),
  // 分页大小，默认为10，默
  pageSize: long(name='page_size'),
  // 当前页码，从1开始
  pageNum: long(name='page_num'),
}

model ListAppportraitActiontrailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回数据
  data?: [ AppPortraitActionTrailQuery ](name='data'),
  // 页数
  pageNum?: long(name='page_num'),
  // 每页大小，默认10
  pageSize?: long(name='page_size'),
  // 总数
  total?: long(name='total'),
}

/**
 * Description: 应用画像应用操作记录
 * Summary: 应用画像应用操作记录
 */
async function listAppportraitActiontrail(request: ListAppportraitActiontrailRequest): ListAppportraitActiontrailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAppportraitActiontrailEx(request, headers, runtime);
}

/**
 * Description: 应用画像应用操作记录
 * Summary: 应用画像应用操作记录
 */
async function listAppportraitActiontrailEx(request: ListAppportraitActiontrailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppportraitActiontrailResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appportrait.actiontrail.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAppportraitNodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间名称
  workspaceName: string(name='workspace_name'),
  // 应用名
  appName: string(name='app_name'),
  // tenant_id
  tenantId?: string(name='tenant_id'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model ListAppportraitNodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回数据
  data?: AppPortraitAppNodeList(name='data'),
}

/**
 * Description: 应用画像应用服务关联资源节点信息
 * Summary: 应用画像应用服务关联资源节点信息
 */
async function listAppportraitNode(request: ListAppportraitNodeRequest): ListAppportraitNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAppportraitNodeEx(request, headers, runtime);
}

/**
 * Description: 应用画像应用服务关联资源节点信息
 * Summary: 应用画像应用服务关联资源节点信息
 */
async function listAppportraitNodeEx(request: ListAppportraitNodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppportraitNodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appportrait.node.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAppportraitAppgroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // tenant_id
  tenantId: string(name='tenant_id'),
  // tenant_name
  tenantName?: string(name='tenant_name'),
}

model ListAppportraitAppgroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用分组列表
  data?: [ AppPortraitAppGroupList ](name='data'),
}

/**
 * Description: 查询应用画像应用分组列表
 * Summary: 应用画像应用分组列表
 */
async function listAppportraitAppgroup(request: ListAppportraitAppgroupRequest): ListAppportraitAppgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAppportraitAppgroupEx(request, headers, runtime);
}

/**
 * Description: 查询应用画像应用分组列表
 * Summary: 应用画像应用分组列表
 */
async function listAppportraitAppgroupEx(request: ListAppportraitAppgroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppportraitAppgroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appportrait.appgroup.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAppportraitEcsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_name
  workspaceName: string(name='workspace_name'),
  // app_name
  appName: string(name='app_name'),
  // page_size
  pageSize?: long(name='page_size'),
  // page_number
  pageNumber?: long(name='page_number'),
}

model ListAppportraitEcsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 1
  data?: [ AppPortraitAppNodeEcsList ](name='data'),
  // 1
  pageNum?: long(name='page_num'),
  // 10
  pageSize?: long(name='page_size'),
  // 100
  total?: long(name='total'),
}

/**
 * Description: 111
 * Summary: ece列表
 */
async function listAppportraitEcs(request: ListAppportraitEcsRequest): ListAppportraitEcsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAppportraitEcsEx(request, headers, runtime);
}

/**
 * Description: 111
 * Summary: ece列表
 */
async function listAppportraitEcsEx(request: ListAppportraitEcsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppportraitEcsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appportrait.ecs.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAppportraitRdsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_name
  workspaceName: string(name='workspace_name'),
  // app_name
  appName: string(name='app_name'),
  // page_size
  pageSize?: long(name='page_size'),
  // page_num
  pageNum?: long(name='page_num'),
}

model ListAppportraitRdsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 1
  data?: [ AppPortraitAppNodeEcsList ](name='data'),
  // 1
  pageNum?: long(name='page_num'),
  // 10
  pageSize?: long(name='page_size'),
  // 100
  total?: long(name='total'),
}

/**
 * Description: 1
 * Summary: rds列表
 */
async function listAppportraitRds(request: ListAppportraitRdsRequest): ListAppportraitRdsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAppportraitRdsEx(request, headers, runtime);
}

/**
 * Description: 1
 * Summary: rds列表
 */
async function listAppportraitRdsEx(request: ListAppportraitRdsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppportraitRdsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appportrait.rds.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAppportraitSlbRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_name
  workspaceName: string(name='workspace_name'),
  // app_name
  appName: string(name='app_name'),
  // 1
  pageSize?: long(name='page_size'),
  // 10
  pageNum?: long(name='page_num'),
}

model ListAppportraitSlbResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 1
  data?: [ AppPortraitAppNodeEcsList ](name='data'),
  // 1
  pageNum?: long(name='page_num'),
  // 10
  pageSize?: long(name='page_size'),
  // 100
  total?: long(name='total'),
}

/**
 * Description: 1
 * Summary: slb列表
 */
async function listAppportraitSlb(request: ListAppportraitSlbRequest): ListAppportraitSlbResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAppportraitSlbEx(request, headers, runtime);
}

/**
 * Description: 1
 * Summary: slb列表
 */
async function listAppportraitSlbEx(request: ListAppportraitSlbRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppportraitSlbResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appportrait.slb.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAppportraitPodRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_name
  workspaceName: string(name='workspace_name'),
  // app_name
  appName: string(name='app_name'),
  // 1
  pageSize?: long(name='page_size'),
  // 10
  pageNum?: long(name='page_num'),
}

model ListAppportraitPodResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 1
  data?: [ AppPortraitAppNodeEcsList ](name='data'),
  // 1
  pageNum?: long(name='page_num'),
  // 1
  pageSize?: long(name='page_size'),
  // 200
  total?: long(name='total'),
}

/**
 * Description: 1
 * Summary: pod列表
 */
async function listAppportraitPod(request: ListAppportraitPodRequest): ListAppportraitPodResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAppportraitPodEx(request, headers, runtime);
}

/**
 * Description: 1
 * Summary: pod列表
 */
async function listAppportraitPodEx(request: ListAppportraitPodRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAppportraitPodResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.appportrait.pod.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateComputerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app id
  appId?: string(name='app_id'),
  // app service id
  appServiceId?: string(name='app_service_id'),
  // 是否自动续费
  autoRenew?: boolean(name='auto_renew'),
  // 每次自动续费的时长，当参数AutoRenew取值True时为必填取值范围：
  //    1
  //      2
  //      3
  //       6
  //      12
  //     
  autoRenewPeriod?: long(name='auto_renew_period'),
  // cell id
  cellId?: string(name='cell_id'),
  // 通用镜像文件ID，启动实例时选择的镜像资源。
  // 
  commonImageSequence?: string(name='common_image_sequence'),
  // AKE模式下可以指定此值
  cpuShared?: boolean(name='cpu_shared'),
  // 数据盘信息
  dataDisks?: [ DataDisk ](name='data_disks'),
  // sigma模式取值，公有云模式下无意义
  deployMode?: string(name='deploy_mode'),
  // 实例描述
  // 
  description?: string(name='description'),
  // 是否使用全局唯一名称
  distinctName?: boolean(name='distinct_name'),
  // 自定义镜像文件ID，启动实例时选择的镜像资源。
  // 
  imageSequence?: string(name='image_sequence'),
  // 计费方式，默认按量计费
  instanceChargeType?: string(name='instance_charge_type'),
  // 创建的实例数量。默认为 1 台
  instanceCount?: long(name='instance_count'),
  // 实例名称前缀。可包含小写字母(a-z)，数字(0-9) 和中划线(-)，以字母开头，中划线不能结尾或连续使用，2 ~ 40 个字符。
  name?: string(maxLength=40, minLength=2, name='name'),
  // 实例的密码。长度为8至30个字符，必须同时包含大小写英文字母、数字和特殊符号中的三类字符。特殊符号可以是： ()`~!@#^&*-_+=|{}[]:;_<>,.?/ 其中，Windows实例不能以斜线号（/）为密码首字符。
  password?: string(maxLength=30, minLength=8, name='password'),
  // 购买资源的时长，单位为：月。当参数 InstanceChargeType 取值为 PrePaid 时才生效且为必选值。取值范围：1 - 9
  //      12
  //      24
  //      36
  //      48
  //      60
  // 
  period?: long(name='period'),
  //  购买资源的时长。可选值Week | Month。
  //  PeriodUnit 为 Week 时：
  //  Period 取值 {“1”, “2”, “3”, “4”}
  // AutoRenewPeriod 取值 {“1”, “2”, “3”}
  //  Period 取值 { “1”, “2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”, “12”, “24”, “36”,”48”,”60”}
  //    AutoRenewPeriod 取值 {“1”, “2”, “3”, “6”, “12”}
  //     默认值：Month
  periodUnit?: string(name='period_unit'),
  // 新创建实例所属于的安全组/域序列号，同一个安全组内的实例之间可以互相访问。
  securityGroupSequence: string(name='security_group_sequence'),
  // 实例的资源规格。
  // 
  specId: string(name='spec_id'),
  // 单位 G。系统盘大小，需根据选择的 image 类型决定。
  systemDiskSize: long(name='system_disk_size'),
  // 系统盘类型
  // 
  systemDiskType: string(name='system_disk_type'),
  // VPC类型的实例，需要指定虚拟交换机ID。
  vSwitchId?: string(name='v_switch_id'),
  // 实例所在工作空间
  workspace: string(name='workspace'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
  // 实例所在可用区的 zone identity
  zone: string(name='zone'),
  // zone_id如果为空，则zone必填，建议使用zone_id
  zoneId?: string(name='zone_id'),
  // 公有云上标签
  tags?: [ MapStringToStringEntity ](name='tags'),
  // cmp模式下使用的vpc，一般场景勿用
  vpcIaasId?: string(name='vpc_iaas_id'),
  // cmp模式下传的token，一般场景勿用
  cloudManageToken?: string(name='cloud_manage_token'),
}

model CreateComputerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // computer_sequences
  computerSequences?: [ string ](name='computer_sequences'),
  // paas_request_id，可以根据这个值查询日志
  paasRequestId?: string(name='paas_request_id'),
}

/**
 * Description: 创建 computer 实例
 * Summary: 创建 computer 实例
 */
async function createComputer(request: CreateComputerRequest): CreateComputerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createComputerEx(request, headers, runtime);
}

/**
 * Description: 创建 computer 实例
 * Summary: 创建 computer 实例
 */
async function createComputerEx(request: CreateComputerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateComputerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.computer.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteComputerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // computer_sequences
  computerSequences: [ string ](name='computer_sequences'),
  // 后续这个字段必填
  workspaceId?: string(name='workspace_id'),
  // 是否强制删除
  force?: boolean(name='force'),
}

model DeleteComputerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // paas_request_id
  paasRequestId?: string(name='paas_request_id'),
}

/**
 * Description: computer 删除
 * Summary: computer 删除
 */
async function deleteComputer(request: DeleteComputerRequest): DeleteComputerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteComputerEx(request, headers, runtime);
}

/**
 * Description: computer 删除
 * Summary: computer 删除
 */
async function deleteComputerEx(request: DeleteComputerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteComputerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.computer.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportComputerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // computer iaas ids
  computerIds: [ string ](name='computer_ids'),
  // workspace 名称
  workspace: string(name='workspace'),
  // computer 所在的 zone identity。可不填。
  zone?: string(name='zone'),
}

model ImportComputerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 导入的 computer 序列号
  computerIdMapping?: string(name='computer_id_mapping'),
}

/**
 * Description: computer 导入
 * Summary: computer 导入
 */
async function importComputer(request: ImportComputerRequest): ImportComputerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importComputerEx(request, headers, runtime);
}

/**
 * Description: computer 导入
 * Summary: computer 导入
 */
async function importComputerEx(request: ImportComputerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportComputerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.computer.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDatabaseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 数据库账户
  databaseAccounts?: [ DatabaseAccount ](name='database_accounts'),
  // db schema
  databaseSchema?: DatabaseSchema(name='database_schema'),
  // db 引擎，默认为在 MYSQL
  engine?: string(name='engine'),
  // 引擎版本，默认为 MYSQL6
  engineVersion?: string(name='engine_version'),
  // 创建的实例数量。默认为 1 台
  instanceCount?: long(name='instance_count'),
  // database 名称
  name?: string(name='name'),
  // db 规格。
  specId: string(name='spec_id'),
  // db 存储空间大小
  storageSize: long(name='storage_size'),
  // database 类型，默认为 DATABASE 类型
  type?: string(name='type'),
  // VPC类型的实例，需要指定虚拟交换机ID。
  vSwitchId?: string(name='v_switch_id'),
  // database 所在工作空间
  workspace: string(name='workspace'),
  // app service ids
  appServiceIds?: [ string ](name='app_service_ids'),
  // app ids
  appIds?: [ string ](name='app_ids'),
}

model CreateDatabaseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // database 实例 ids
  databaseSequences?: [ string ](name='database_sequences'),
}

/**
 * Description: database 创建
 * Summary: database 创建
 */
async function createDatabase(request: CreateDatabaseRequest): CreateDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDatabaseEx(request, headers, runtime);
}

/**
 * Description: database 创建
 * Summary: database 创建
 */
async function createDatabaseEx(request: CreateDatabaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDatabaseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportDatabaseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // database iaas ids
  databaseIds: [ string ](name='database_ids'),
  // database 类型，默认为 DATABASE 类型
  type?: string(name='type'),
  // 工作空间
  workspace: string(name='workspace'),
}

model ImportDatabaseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 导入的 computer 序列号
  databaseIdMapping?: string(name='database_id_mapping'),
}

/**
 * Description: database 导入
 * Summary: database 导入
 */
async function importDatabase(request: ImportDatabaseRequest): ImportDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importDatabaseEx(request, headers, runtime);
}

/**
 * Description: database 导入
 * Summary: database 导入
 */
async function importDatabaseEx(request: ImportDatabaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportDatabaseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDatabaseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // database 序列号
  databaseSequences: [ string ](name='database_sequences'),
}

model DeleteDatabaseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: database 删除
 * Summary: database 删除
 */
async function deleteDatabase(request: DeleteDatabaseRequest): DeleteDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDatabaseEx(request, headers, runtime);
}

/**
 * Description: database 删除
 * Summary: database 删除
 */
async function deleteDatabaseEx(request: DeleteDatabaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDatabaseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLoadbalanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 负载均衡实例的网络类型。有 INTERNET 和 INTRANET
  addressType?: string(name='address_type'),
  // app id
  appId?: string(name='app_id'),
  // app service id
  appServiceId?: string(name='app_service_id'),
  // cluster_mode
  clusterMode?: boolean(name='cluster_mode'),
  // 	
  // 创建的实例数量。默认为 1 台
  instanceCount?: long(name='instance_count'),
  // 公网类型实例的付费方式。取值：
  // PAY_BY_BANDWIDTH：按带宽计费。
  // PAY_BY_TRAFFIC：按流量计费（默认值）。
  internetChargeType?: string(name='internet_charge_type'),
  // listener JSON Array
  listeners?: [ string ](name='listeners'),
  // 名称
  name?: string(name='name'),
  // 共享模式
  shareMode: boolean(name='share_mode'),
  // ALB模式专用
  vipType?: string(name='vip_type'),
  // VPC类型的实例，需要指定虚拟交换机ID。
  vSwitchId?: string(name='v_switch_id'),
  // 工作空间
  workspace: string(name='workspace'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
  // 可用区
  zoneId?: string(name='zone_id'),
  // 负载均衡实例的规格。取值：
  // 
  // slb.s1.small
  // slb.s2.small
  // slb.s2.medium
  // slb.s3.small
  // slb.s3.medium
  // slb.s3.large
  // 每个地域支持的规格不同。
  // 
  // 目前支持性能保障型实例的地域有：华北 1（青岛）、华北 2（北京）、华东 1（杭州）、华东 2（上海）、华南 1（深圳）、华北 3（张家口）、华北 5 （呼和浩特）、亚太东南 1（新加坡）、英国（伦敦）、欧洲中部 1（法兰克福）、亚太东南 2（悉尼）、亚太东南 3（吉隆坡）、中东东部 1（迪拜）、亚太东南 5（雅加达）、美西 1（硅谷）、亚太南部 1（孟买）、亚太东北 1（东京）、中国香港和美东 1（弗吉尼亚）
  loadBalancerSpec?: string(name='load_balancer_spec'),
}

model CreateLoadbalanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 实例 id
  loadbalanceSequences?: [ string ](name='loadbalance_sequences'),
  // paas_request_id
  paasRequestId?: string(name='paas_request_id'),
}

/**
 * Description: loadbalance 创建
 * Summary: loadbalance 创建
 */
async function createLoadbalance(request: CreateLoadbalanceRequest): CreateLoadbalanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLoadbalanceEx(request, headers, runtime);
}

/**
 * Description: loadbalance 创建
 * Summary: loadbalance 创建
 */
async function createLoadbalanceEx(request: CreateLoadbalanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLoadbalanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteLoadbalanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // loadbalance 序列号
  loadbalanceSequences: [ string ](name='loadbalance_sequences'),
}

model DeleteLoadbalanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // paas_request_id
  paasRequestId?: string(name='paas_request_id'),
}

/**
 * Description: loadbalance 删除
 * Summary: loadbalance 删除
 */
async function deleteLoadbalance(request: DeleteLoadbalanceRequest): DeleteLoadbalanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteLoadbalanceEx(request, headers, runtime);
}

/**
 * Description: loadbalance 删除
 * Summary: loadbalance 删除
 */
async function deleteLoadbalanceEx(request: DeleteLoadbalanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteLoadbalanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportLoadbalanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // loadbalance iaas ids
  loadbalanceIds: [ string ](name='loadbalance_ids'),
  // 工作空间
  workspace: string(name='workspace'),
}

model ImportLoadbalanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 导入的 loadbalance 序列号
  loadbalanceIdMapping?: string(name='loadbalance_id_mapping'),
  // paas_request_id
  paasRequestId?: string(name='paas_request_id'),
}

/**
 * Description: loadbalance 导入
 * Summary: loadbalance 导入
 */
async function importLoadbalance(request: ImportLoadbalanceRequest): ImportLoadbalanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importLoadbalanceEx(request, headers, runtime);
}

/**
 * Description: loadbalance 导入
 * Summary: loadbalance 导入
 */
async function importLoadbalanceEx(request: ImportLoadbalanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportLoadbalanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateVpcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 专有网络网段
  cidrLock: string(name='cidr_lock'),
  // 名称
  name: string(name='name'),
  // 工作空间
  workspace: string(name='workspace'),
}

model CreateVpcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 专有网络序列号
  vpcSequence?: string(name='vpc_sequence'),
}

/**
 * Description: vpc 创建
 * Summary: vpc 创建
 */
async function createVpc(request: CreateVpcRequest): CreateVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createVpcEx(request, headers, runtime);
}

/**
 * Description: vpc 创建
 * Summary: vpc 创建
 */
async function createVpcEx(request: CreateVpcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateVpcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.vpc.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteVpcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 专有网络序列号
  vpcSequence: string(name='vpc_sequence'),
}

model DeleteVpcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: vpc 删除
 * Summary: vpc 删除
 */
async function deleteVpc(request: DeleteVpcRequest): DeleteVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteVpcEx(request, headers, runtime);
}

/**
 * Description: vpc 删除
 * Summary: vpc 删除
 */
async function deleteVpcEx(request: DeleteVpcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteVpcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.vpc.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReleaseComputerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 需要释放的 computer ids
  computerSequences: [ string ](name='computer_sequences'),
}

model ReleaseComputerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: computer 从应用中释放
 * Summary: computer 从应用中释放
 */
async function releaseComputer(request: ReleaseComputerRequest): ReleaseComputerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return releaseComputerEx(request, headers, runtime);
}

/**
 * Description: computer 从应用中释放
 * Summary: computer 从应用中释放
 */
async function releaseComputerEx(request: ReleaseComputerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReleaseComputerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.computer.release', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReinitComputerPasswordRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // computer_sequence
  computerSequence: string(name='computer_sequence'),
  // 密码
  password: string(name='password'),
}

model ReinitComputerPasswordResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 重置 computer 密码
 * Summary: 重置 computer 密码
 */
async function reinitComputerPassword(request: ReinitComputerPasswordRequest): ReinitComputerPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return reinitComputerPasswordEx(request, headers, runtime);
}

/**
 * Description: 重置 computer 密码
 * Summary: 重置 computer 密码
 */
async function reinitComputerPasswordEx(request: ReinitComputerPasswordRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReinitComputerPasswordResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.computer.password.reinit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReleaseDatabaseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 需要释放的应用 ids
  appIds?: [ string ](name='app_ids'),
  // 应用实例 ids
  appServiceIds?: [ string ](name='app_service_ids'),
  // 需要释放应用的 database sequence
  databaseSequences: [ string ](name='database_sequences'),
}

model ReleaseDatabaseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: database 从应用中释放
 * Summary: database 从应用中释放
 */
async function releaseDatabase(request: ReleaseDatabaseRequest): ReleaseDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return releaseDatabaseEx(request, headers, runtime);
}

/**
 * Description: database 从应用中释放
 * Summary: database 从应用中释放
 */
async function releaseDatabaseEx(request: ReleaseDatabaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReleaseDatabaseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.release', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RemoveComputerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // computer ids
  computerSequences: [ string ](name='computer_sequences'),
}

model RemoveComputerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 移除 computer 
 * Summary: 移除 computer 
 */
async function removeComputer(request: RemoveComputerRequest): RemoveComputerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return removeComputerEx(request, headers, runtime);
}

/**
 * Description: 移除 computer 
 * Summary: 移除 computer 
 */
async function removeComputerEx(request: RemoveComputerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveComputerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.computer.remove', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RemoveLoadbalanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // lb ids
  loadbalanceSequences: [ string ](name='loadbalance_sequences'),
}

model RemoveLoadbalanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: loadbalance 移除
 * Summary: loadbalance 移除
 */
async function removeLoadbalance(request: RemoveLoadbalanceRequest): RemoveLoadbalanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return removeLoadbalanceEx(request, headers, runtime);
}

/**
 * Description: loadbalance 移除
 * Summary: loadbalance 移除
 */
async function removeLoadbalanceEx(request: RemoveLoadbalanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveLoadbalanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.remove', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RemoveDatabaseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // database ids
  databaseSequences: [ string ](name='database_sequences'),
}

model RemoveDatabaseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: database 移除
 * Summary: database 移除
 */
async function removeDatabase(request: RemoveDatabaseRequest): RemoveDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return removeDatabaseEx(request, headers, runtime);
}

/**
 * Description: database 移除
 * Summary: database 移除
 */
async function removeDatabaseEx(request: RemoveDatabaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveDatabaseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.remove', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReleaseLoadbalanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // loadbalance ids
  loadbalanceSequences: [ string ](name='loadbalance_sequences'),
}

model ReleaseLoadbalanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: loadbalance 从应用中释放
 * Summary: loadbalance 从应用中释放
 */
async function releaseLoadbalance(request: ReleaseLoadbalanceRequest): ReleaseLoadbalanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return releaseLoadbalanceEx(request, headers, runtime);
}

/**
 * Description: loadbalance 从应用中释放
 * Summary: loadbalance 从应用中释放
 */
async function releaseLoadbalanceEx(request: ReleaseLoadbalanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReleaseLoadbalanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.release', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDatabaseAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // database 序列号
  databaseSequence: string(name='database_sequence'),
  // 账户名称
  name: string(name='name'),
  // 账户密码
  password: string(name='password'),
}

model CreateDatabaseAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 账户序列号
  accountSequence?: string(name='account_sequence'),
}

/**
 * Description: database account 创建
 * Summary: database account 创建
 */
async function createDatabaseAccount(request: CreateDatabaseAccountRequest): CreateDatabaseAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDatabaseAccountEx(request, headers, runtime);
}

/**
 * Description: database account 创建
 * Summary: database account 创建
 */
async function createDatabaseAccountEx(request: CreateDatabaseAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDatabaseAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.account.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSecuritygroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 描述
  description?: string(name='description'),
  // 安全域/组 名称
  name: string(name='name'),
  // 所在区域
  region: string(name='region'),
  // 工作空间名称
  workspace: string(name='workspace'),
  // SECURITY_GROUP | SECURITY_ZONE
  // 默认为安全组
  type?: string(name='type'),
}

model CreateSecuritygroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 安全组/域 序列号
  securityGroupSequence?: string(name='security_group_sequence'),
}

/**
 * Description: 安全域/组 创建
 * Summary: 安全域/组 创建
 */
async function createSecuritygroup(request: CreateSecuritygroupRequest): CreateSecuritygroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSecuritygroupEx(request, headers, runtime);
}

/**
 * Description: 安全域/组 创建
 * Summary: 安全域/组 创建
 */
async function createSecuritygroupEx(request: CreateSecuritygroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSecuritygroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.securitygroup.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportSecuritygroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // sg-zm042uh9f8gb1lfcsng6 的 iaas 层 id
  securitygroupId: string(name='securitygroup_id'),
  // securityGroup 名称
  name: string(name='name'),
  // 工作空间
  workspace: string(name='workspace'),
}

model ImportSecuritygroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: securitygroup 导入
 * Summary: securitygroup 导入
 */
async function importSecuritygroup(request: ImportSecuritygroupRequest): ImportSecuritygroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importSecuritygroupEx(request, headers, runtime);
}

/**
 * Description: securitygroup 导入
 * Summary: securitygroup 导入
 */
async function importSecuritygroupEx(request: ImportSecuritygroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportSecuritygroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.securitygroup.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RemoveSecuritygroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 安全组 id
  securityGroupSequence: string(name='security_group_sequence'),
}

model RemoveSecuritygroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: securitygroup 移除
 * Summary: securitygroup 移除
 */
async function removeSecuritygroup(request: RemoveSecuritygroupRequest): RemoveSecuritygroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return removeSecuritygroupEx(request, headers, runtime);
}

/**
 * Description: securitygroup 移除
 * Summary: securitygroup 移除
 */
async function removeSecuritygroupEx(request: RemoveSecuritygroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveSecuritygroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.securitygroup.remove', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSecuritygroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 需要删除的 security group id
  securityGroupSequence: string(name='security_group_sequence'),
}

model DeleteSecuritygroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: securitygroup 删除
 * Summary: securitygroup 删除
 */
async function deleteSecuritygroup(request: DeleteSecuritygroupRequest): DeleteSecuritygroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSecuritygroupEx(request, headers, runtime);
}

/**
 * Description: securitygroup 删除
 * Summary: securitygroup 删除
 */
async function deleteSecuritygroupEx(request: DeleteSecuritygroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSecuritygroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.securitygroup.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDatabaseSchemaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 欲删除的的 schema id
  schemaSequence: string(name='schema_sequence'),
}

model DeleteDatabaseSchemaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: schema 删除
 * Summary: schema 删除
 */
async function deleteDatabaseSchema(request: DeleteDatabaseSchemaRequest): DeleteDatabaseSchemaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDatabaseSchemaEx(request, headers, runtime);
}

/**
 * Description: schema 删除
 * Summary: schema 删除
 */
async function deleteDatabaseSchemaEx(request: DeleteDatabaseSchemaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDatabaseSchemaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.schema.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDatabaseAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // account id
  accountSequence: string(name='account_sequence'),
}

model DeleteDatabaseAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: account 删除
 * Summary: account 删除
 */
async function deleteDatabaseAccount(request: DeleteDatabaseAccountRequest): DeleteDatabaseAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDatabaseAccountEx(request, headers, runtime);
}

/**
 * Description: account 删除
 * Summary: account 删除
 */
async function deleteDatabaseAccountEx(request: DeleteDatabaseAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDatabaseAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.account.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteVpcVswitchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // vpc id
  vpcSequence: string(name='vpc_sequence'),
  // vswitch 的 iaasIds
  vswitchIds: [ string ](name='vswitch_ids'),
}

model DeleteVpcVswitchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: vswitch 删除
 * Summary: vswitch 删除
 */
async function deleteVpcVswitch(request: DeleteVpcVswitchRequest): DeleteVpcVswitchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteVpcVswitchEx(request, headers, runtime);
}

/**
 * Description: vswitch 删除
 * Summary: vswitch 删除
 */
async function deleteVpcVswitchEx(request: DeleteVpcVswitchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteVpcVswitchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.vpc.vswitch.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteLoadbalanceListenerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // listener 端口
  listenerPort: long(name='listener_port'),
  // lb id
  loadbalanceSequence: string(name='loadbalance_sequence'),
}

model DeleteLoadbalanceListenerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // paas_request_id
  paasRequestId?: string(name='paas_request_id'),
}

/**
 * Description: listener 删除
 * Summary: listener 删除
 */
async function deleteLoadbalanceListener(request: DeleteLoadbalanceListenerRequest): DeleteLoadbalanceListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteLoadbalanceListenerEx(request, headers, runtime);
}

/**
 * Description: listener 删除
 * Summary: listener 删除
 */
async function deleteLoadbalanceListenerEx(request: DeleteLoadbalanceListenerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteLoadbalanceListenerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.listener.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteVpcVroutertableRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 目标网段
  destinationCidrBlock: string(name='destination_cidr_block'),
  // 下一跳实例 iaas id
  nextHopId: string(name='next_hop_id'),
  // 路由表 iaasId
  vRouteTableId: string(name='v_route_table_id'),
  // vpc paas id
  vpcSequence: string(name='vpc_sequence'),
}

model DeleteVpcVroutertableResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 路由表删除
 * Summary: 路由表删除
 */
async function deleteVpcVroutertable(request: DeleteVpcVroutertableRequest): DeleteVpcVroutertableResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteVpcVroutertableEx(request, headers, runtime);
}

/**
 * Description: 路由表删除
 * Summary: 路由表删除
 */
async function deleteVpcVroutertableEx(request: DeleteVpcVroutertableRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteVpcVroutertableResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.vpc.vroutertable.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RemoveSecuritygroupInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 安全组 paas id
  securityGroupSequence: string(name='security_group_sequence'),
  // 要移除的实例序列号
  instanceSequences: [ string ](name='instance_sequences'),
}

model RemoveSecuritygroupInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 安全组中实例移除
 * Summary: 安全组中实例移除
 */
async function removeSecuritygroupInstance(request: RemoveSecuritygroupInstanceRequest): RemoveSecuritygroupInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return removeSecuritygroupInstanceEx(request, headers, runtime);
}

/**
 * Description: 安全组中实例移除
 * Summary: 安全组中实例移除
 */
async function removeSecuritygroupInstanceEx(request: RemoveSecuritygroupInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveSecuritygroupInstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.securitygroup.instance.remove', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSecuritygroupPermissionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 安全组 paas id
  securityGroupSequence: string(name='security_group_sequence'),
  // 12345
  permissionHash: string(name='permission_hash'),
}

model DeleteSecuritygroupPermissionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 安全组 permission 删除
 * Summary: 安全组 permission 删除
 */
async function deleteSecuritygroupPermission(request: DeleteSecuritygroupPermissionRequest): DeleteSecuritygroupPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSecuritygroupPermissionEx(request, headers, runtime);
}

/**
 * Description: 安全组 permission 删除
 * Summary: 安全组 permission 删除
 */
async function deleteSecuritygroupPermissionEx(request: DeleteSecuritygroupPermissionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSecuritygroupPermissionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.securitygroup.permission.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RemoveLoadbalanceSecurityipRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 要删除的 ip
  ips: [ string ](name='ips'),
  // 监听器端口
  listenerPort: long(name='listener_port'),
  // lb paas id
  loadbalanceSequence: string(name='loadbalance_sequence'),
}

model RemoveLoadbalanceSecurityipResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: lb 监听器访问 ip 删除
 * Summary: lb 监听器访问 ip 删除
 */
async function removeLoadbalanceSecurityip(request: RemoveLoadbalanceSecurityipRequest): RemoveLoadbalanceSecurityipResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return removeLoadbalanceSecurityipEx(request, headers, runtime);
}

/**
 * Description: lb 监听器访问 ip 删除
 * Summary: lb 监听器访问 ip 删除
 */
async function removeLoadbalanceSecurityipEx(request: RemoveLoadbalanceSecurityipRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveLoadbalanceSecurityipResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.securityip.remove', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateApplicationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 应用分组 id
  appDomainId?: string(name='app_domain_id'),
  // 应用等级 id
  appLevelId?: string(name='app_level_id'),
  // 页面请求用户无需自行填写此字段。此字段用于代码库的创建权限认证。为 iam 返回的 authorization 值。
  authorization?: string(name='authorization'),
  // 技术栈版本
  buildpackVersion?: string(name='buildpack_version'),
  // 应用中文名称
  chineseName?: string(name='chinese_name'),
  // 使用已有的代码库。默认为否。
  codeRepositoryExisted?: boolean(name='code_repository_existed'),
  // 代码库 group 名称
  codeRepositoryGroupName?: string(name='code_repository_group_name'),
  // 默认无需填写。代码库名称。默认无需关联代码库。
  codeRepositoryName?: string(name='code_repository_name'),
  // 默认为 GITLAB。无代码库时，无需填写。
  codeRepositoryType?: string(name='code_repository_type'),
  // 应用描述
  description?: string(name='description'),
  // 应用名称
  name: string(name='name'),
  // 应用负责人 id
  ownerId?: string(name='owner_id'),
  // 技术栈 id
  stackId?: string(name='stack_id'),
  // 当设置代码库时，需设置此字段
  workspace?: string(name='workspace'),
}

model CreateApplicationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 应用 id
  applicationId?: string(name='application_id'),
}

/**
 * Description: 应用创建
 * Summary: 应用创建
 */
async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createApplicationEx(request, headers, runtime);
}

/**
 * Description: 应用创建
 * Summary: 应用创建
 */
async function createApplicationEx(request: CreateApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateApplicationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.application.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteApplicationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 欲删除的应用 id
  applicationIds?: [ string ](name='application_ids'),
  // 是否删除绑定的代码库。默认为 false
  deleteCodeRepo?: boolean(name='delete_code_repo'),
}

model DeleteApplicationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 应用删除
 * Summary: 应用删除
 */
async function deleteApplication(request: DeleteApplicationRequest): DeleteApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteApplicationEx(request, headers, runtime);
}

/**
 * Description: 应用删除
 * Summary: 应用删除
 */
async function deleteApplicationEx(request: DeleteApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteApplicationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.application.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateVpcVswitchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 网段
  cidrBlock: string(name='cidr_block'),
  // 描述
  description: string(name='description'),
  // switch 名称
  name: string(name='name'),
  // vpc paas id
  vpcSequence: string(name='vpc_sequence'),
  // zone
  zone: string(name='zone'),
}

model CreateVpcVswitchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // switch paas id
  vswitchSequence?: string(name='vswitch_sequence'),
}

/**
 * Description: vswitch 创建
 * Summary: vswitch 创建
 */
async function createVpcVswitch(request: CreateVpcVswitchRequest): CreateVpcVswitchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createVpcVswitchEx(request, headers, runtime);
}

/**
 * Description: vswitch 创建
 * Summary: vswitch 创建
 */
async function createVpcVswitchEx(request: CreateVpcVswitchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateVpcVswitchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.vpc.vswitch.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateVpcVroutertableRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 目标网端
  destinationCidrBlock: string(name='destination_cidr_block'),
  // 下一跳资源 id
  nextHopId: string(name='next_hop_id'),
  // 下一跳类型
  nextHopType: string(name='next_hop_type'),
  // 路由表 id
  vRouteTableId: string(name='v_route_table_id'),
  // vpc paas id
  vpcSequence: string(name='vpc_sequence'),
}

model CreateVpcVroutertableResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: vRouterTable 创建
 * Summary: vRouterTable 创建
 */
async function createVpcVroutertable(request: CreateVpcVroutertableRequest): CreateVpcVroutertableResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createVpcVroutertableEx(request, headers, runtime);
}

/**
 * Description: vRouterTable 创建
 * Summary: vRouterTable 创建
 */
async function createVpcVroutertableEx(request: CreateVpcVroutertableRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateVpcVroutertableResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.vpc.vroutertable.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddSecuritygroupInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 需向安全组中添加的实例 paas 序列号
  instanceSequences: [ string ](name='instance_sequences'),
  // 安全组 paas id
  securityGroupSequence: string(name='security_group_sequence'),
}

model AddSecuritygroupInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 安全组添加实例
 * Summary: 安全组添加实例
 */
async function addSecuritygroupInstance(request: AddSecuritygroupInstanceRequest): AddSecuritygroupInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addSecuritygroupInstanceEx(request, headers, runtime);
}

/**
 * Description: 安全组添加实例
 * Summary: 安全组添加实例
 */
async function addSecuritygroupInstanceEx(request: AddSecuritygroupInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddSecuritygroupInstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.securitygroup.instance.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDatabaseSpecRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // db paas id
  databaseSequences: [ string ](name='database_sequences'),
  // 实例规格 id
  specId: string(name='spec_id'),
  // 存储空间大小
  storageSize: long(name='storage_size'),
}

model UpdateDatabaseSpecResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: db 规格修改
 * Summary: db 规格修改
 */
async function updateDatabaseSpec(request: UpdateDatabaseSpecRequest): UpdateDatabaseSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDatabaseSpecEx(request, headers, runtime);
}

/**
 * Description: db 规格修改
 * Summary: db 规格修改
 */
async function updateDatabaseSpecEx(request: UpdateDatabaseSpecRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDatabaseSpecResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.spec.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateLoadbalanceAccesscontrolRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // lb paas id
  loadbalanceSequence: string(name='loadbalance_sequence'),
  // 监听器端口
  listenerPort: long(name='listener_port'),
  // 是否打开访问控制
  accessControl: boolean(name='access_control'),
}

model UpdateLoadbalanceAccesscontrolResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: lb 访问控制修改
 * Summary: lb 访问控制修改
 */
async function updateLoadbalanceAccesscontrol(request: UpdateLoadbalanceAccesscontrolRequest): UpdateLoadbalanceAccesscontrolResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateLoadbalanceAccesscontrolEx(request, headers, runtime);
}

/**
 * Description: lb 访问控制修改
 * Summary: lb 访问控制修改
 */
async function updateLoadbalanceAccesscontrolEx(request: UpdateLoadbalanceAccesscontrolRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateLoadbalanceAccesscontrolResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.accesscontrol.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateLoadbalanceSpecRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 公网类型实例的付费方式。取值： PAY_BY_BANDWIDTH：按带宽计费。 PAY_BY_TRAFFIC：按流量计费（默认值）。
  internetChargeType: string(name='internet_charge_type'),
  // 若为按带宽计费类型需填写此字段
  bandwidth?: long(name='bandwidth'),
  // lb paas id
  loadbalanceSequence: string(name='loadbalance_sequence'),
}

model UpdateLoadbalanceSpecResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: lb 规格修改
 * Summary: lb 规格修改
 */
async function updateLoadbalanceSpec(request: UpdateLoadbalanceSpecRequest): UpdateLoadbalanceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateLoadbalanceSpecEx(request, headers, runtime);
}

/**
 * Description: lb 规格修改
 * Summary: lb 规格修改
 */
async function updateLoadbalanceSpecEx(request: UpdateLoadbalanceSpecRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateLoadbalanceSpecResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.spec.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateVpcVswitchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 修改会的 vswitch 名称
  name: string(name='name'),
  // vswitch id
  vswitchId: string(name='vswitch_id'),
  // vpc paas id
  vpcSequence: string(name='vpc_sequence'),
  // 描述
  description?: string(name='description'),
}

model UpdateVpcVswitchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: vswitch 信息修改
 * Summary: vswitch 信息修改
 */
async function updateVpcVswitch(request: UpdateVpcVswitchRequest): UpdateVpcVswitchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateVpcVswitchEx(request, headers, runtime);
}

/**
 * Description: vswitch 信息修改
 * Summary: vswitch 信息修改
 */
async function updateVpcVswitchEx(request: UpdateVpcVswitchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateVpcVswitchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.vpc.vswitch.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateWorkspaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace 显示名称
  displayName: string(name='display_name'),
  // workspace 唯一标识符。
  name: string(name='name'),
  // VPC ｜ Classic
  networkType: string(name='network_type'),
  // 地域
  region: string(name='region'),
  // 可用区
  zones?: [ string ](name='zones'),
}

model CreateWorkspaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // workspace id
  workspaceId?: string(name='workspace_id'),
}

/**
 * Description: 创建 workspace
 * Summary: 创建 workspace
 */
async function createWorkspace(request: CreateWorkspaceRequest): CreateWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createWorkspaceEx(request, headers, runtime);
}

/**
 * Description: 创建 workspace
 * Summary: 创建 workspace
 */
async function createWorkspaceEx(request: CreateWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateWorkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.workspace.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateMetaWorkspaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace 显示名称
  displayName: string(name='display_name'),
  // workspace 唯一标识符
  name: string(name='name'),
  // VPC ｜ Classic
  networkType: string(name='network_type'),
  // 地域
  region: string(name='region'),
  // 可用区
  zones?: [ string ](name='zones'),
}

model CreateMetaWorkspaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // workspace id
  workspaceId?: string(name='workspace_id'),
}

/**
 * Description: 元数据workspace创建
 * Summary: 元数据workspace创建
 */
async function createMetaWorkspace(request: CreateMetaWorkspaceRequest): CreateMetaWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createMetaWorkspaceEx(request, headers, runtime);
}

/**
 * Description: 元数据workspace创建
 * Summary: 元数据workspace创建
 */
async function createMetaWorkspaceEx(request: CreateMetaWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateMetaWorkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.meta.workspace.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMetaWorkspaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace id
  workspaceId: string(name='workspace_id'),
}

model QueryMetaWorkspaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // workspace 信息
  data?: Workspace(name='data'),
}

/**
 * Description: workspace查询
 * Summary: workspace查询
 */
async function queryMetaWorkspace(request: QueryMetaWorkspaceRequest): QueryMetaWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMetaWorkspaceEx(request, headers, runtime);
}

/**
 * Description: workspace查询
 * Summary: workspace查询
 */
async function queryMetaWorkspaceEx(request: QueryMetaWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMetaWorkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.meta.workspace.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteMetaWorkspaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace id
  workspaceId: string(name='workspace_id'),
}

model DeleteMetaWorkspaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 删除是否成功
  success?: boolean(name='success'),
}

/**
 * Description: 元数据workspace删除
 * Summary: 元数据workspace删除
 */
async function deleteMetaWorkspace(request: DeleteMetaWorkspaceRequest): DeleteMetaWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteMetaWorkspaceEx(request, headers, runtime);
}

/**
 * Description: 元数据workspace删除
 * Summary: 元数据workspace删除
 */
async function deleteMetaWorkspaceEx(request: DeleteMetaWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteMetaWorkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.meta.workspace.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateResourceVpcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // VPC的网段。您可以使用以下网段或其子集作为VPC的网段：
  // 
  // 172.16.0.0/12（默认值）。
  // 10.0.0.0/8。
  // 192.168.0.0/16。
  cidrBlock?: string(name='cidr_block'),
  // 描述信息
  description?: string(name='description'),
  // VPC的名称
  name: string(name='name'),
  // VPC所在的地域
  region: string(name='region'),
  // 用户侧网络的网段
  userCidr?: string(name='user_cidr'),
  // 所属工作空间 identity
  workspace: string(name='workspace'),
}

model CreateResourceVpcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 创建VPC后，系统自动创建的路由表的ID。
  routeTableId?: string(name='route_table_id'),
  // 创建的VPC的ID
  vpcId?: string(name='vpc_id'),
  // 创建VPC后，系统自动创建的路由器的ID。
  vRouterId?: string(name='v_router_id'),
}

/**
 * Description: 资源VPC创建
 * Summary: 资源VPC创建
 */
async function createResourceVpc(request: CreateResourceVpcRequest): CreateResourceVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createResourceVpcEx(request, headers, runtime);
}

/**
 * Description: 资源VPC创建
 * Summary: 资源VPC创建
 */
async function createResourceVpcEx(request: CreateResourceVpcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateResourceVpcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resource.vpc.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryResourceVpcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 是否使用缓存进行查询，默认false，使用缓存查询
  disableCache?: boolean(name='disable_cache'),
  // 地域identity
  region: string(name='region'),
  // VPC的id
  vpcId?: string(name='vpc_id'),
}

model QueryResourceVpcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 列表条目数
  totalCount?: long(name='total_count'),
  // VPC详细信息
  vpcs?: [ VPC ](name='vpcs'),
}

/**
 * Description: 资源VPC查询
 * Summary: 资源VPC查询
 */
async function queryResourceVpc(request: QueryResourceVpcRequest): QueryResourceVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryResourceVpcEx(request, headers, runtime);
}

/**
 * Description: 资源VPC查询
 * Summary: 资源VPC查询
 */
async function queryResourceVpcEx(request: QueryResourceVpcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryResourceVpcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resource.vpc.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteResourceVpcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 要删除的VPC所在的地域identity
  region: string(name='region'),
  // 要删除的VPC ID
  vpcId?: string(name='vpc_id'),
  // workspace id
  workspace: string(name='workspace'),
  // unbind_only
  unbindOnly?: boolean(name='unbind_only'),
  // vpc_paas_id,vcp_id不存在时可用。建议用这个
  vpcPaasId?: string(name='vpc_paas_id'),
}

model DeleteResourceVpcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 删除VPC是否成功
  success?: boolean(name='success'),
}

/**
 * Description: 资源VPC删除
 * Summary: 资源VPC删除
 */
async function deleteResourceVpc(request: DeleteResourceVpcRequest): DeleteResourceVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteResourceVpcEx(request, headers, runtime);
}

/**
 * Description: 资源VPC删除
 * Summary: 资源VPC删除
 */
async function deleteResourceVpcEx(request: DeleteResourceVpcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteResourceVpcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resource.vpc.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateResourceVswitchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 交换机的网段。交换机网段要求如下：
  // 
  // 交换机的网段的掩码长度范围为16~29位。
  // 交换机的网段必须从属于所在VPC的网段。
  // 交换机的网段不能与所在VPC中路由条目的目标网段相同，但可以是目标网段的子集。
  cidrBlock: string(name='cidr_block'),
  // 描述信息
  description?: string(name='description'),
  // 交换机的名称。
  // 
  // 名称长度为2~128个字符，必须以字母或中文开头，但不能以http://或https://开头。
  name: string(name='name'),
  // 要创建的交换机的地域 identity
  region: string(name='region'),
  // 要创建的交换机所属的VPC ID。
  vpcId: string(name='vpc_id'),
  // workspace name
  workspace: string(name='workspace'),
  // 要创建的交换机所属的可用区 identity
  zone: string(name='zone'),
}

model CreateResourceVswitchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 创建的交换机的ID。
  vSwitchId?: string(name='v_switch_id'),
}

/**
 * Description: 资源vswitch创建
 * Summary: 资源vswitch创建
 */
async function createResourceVswitch(request: CreateResourceVswitchRequest): CreateResourceVswitchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createResourceVswitchEx(request, headers, runtime);
}

/**
 * Description: 资源vswitch创建
 * Summary: 资源vswitch创建
 */
async function createResourceVswitchEx(request: CreateResourceVswitchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateResourceVswitchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resource.vswitch.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryResourceVswitchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 交换机所属地域的identity
  region: string(name='region'),
  // 要查询的交换机所属VPC的ID
  vpcId?: string(name='vpc_id'),
  // 要查询的交换机的ID
  vSwitchId?: string(name='v_switch_id'),
}

model QueryResourceVswitchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 列表条目数
  totalCount?: long(name='total_count'),
  // 交换机的详细信息
  vSwitches?: [ VSwitch ](name='v_switches'),
}

/**
 * Description: 资源vswitch查询
 * Summary: 资源vswitch查询
 */
async function queryResourceVswitch(request: QueryResourceVswitchRequest): QueryResourceVswitchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryResourceVswitchEx(request, headers, runtime);
}

/**
 * Description: 资源vswitch查询
 * Summary: 资源vswitch查询
 */
async function queryResourceVswitchEx(request: QueryResourceVswitchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryResourceVswitchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resource.vswitch.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteResourceVswitchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 要删除的交换机的地域identity
  region: string(name='region'),
  // 要删除的交换机所处专有网络的ID
  vpcId: string(name='vpc_id'),
  // 要删除的交换机的ID
  vSwitchId: string(name='v_switch_id'),
}

model DeleteResourceVswitchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 删除交换机是否成功
  success?: boolean(name='success'),
}

/**
 * Description: 资源vswitch删除
 * Summary: 资源vswitch删除
 */
async function deleteResourceVswitch(request: DeleteResourceVswitchRequest): DeleteResourceVswitchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteResourceVswitchEx(request, headers, runtime);
}

/**
 * Description: 资源vswitch删除
 * Summary: 资源vswitch删除
 */
async function deleteResourceVswitchEx(request: DeleteResourceVswitchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteResourceVswitchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resource.vswitch.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryResourceSecuritygroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // disable cache
  disableCache?: boolean(name='disable_cache'),
  // 地域identity
  region: string(name='region'),
  // 安全组ID。
  securityGroupId?: string(name='security_group_id'),
  // 安全组所在的专有网络ID。
  vpcId?: string(name='vpc_id'),
}

model QueryResourceSecuritygroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 安全组详细信息。
  securityGroups?: [ SecurityGroup ](name='security_groups'),
  // 安全组的总数。
  totalCount?: long(name='total_count'),
}

/**
 * Description: 资源securitygroup查询
 * Summary: 资源securitygroup查询
 */
async function queryResourceSecuritygroup(request: QueryResourceSecuritygroupRequest): QueryResourceSecuritygroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryResourceSecuritygroupEx(request, headers, runtime);
}

/**
 * Description: 资源securitygroup查询
 * Summary: 资源securitygroup查询
 */
async function queryResourceSecuritygroupEx(request: QueryResourceSecuritygroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryResourceSecuritygroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resource.securitygroup.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListMetaWorkspaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model ListMetaWorkspaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 工作空间详细信息列表
  data?: [ Workspace ](name='data'),
}

/**
 * Description: workspace 列表
 * Summary: workspace 列表
 */
async function listMetaWorkspace(request: ListMetaWorkspaceRequest): ListMetaWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listMetaWorkspaceEx(request, headers, runtime);
}

/**
 * Description: workspace 列表
 * Summary: workspace 列表
 */
async function listMetaWorkspaceEx(request: ListMetaWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMetaWorkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.meta.workspace.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateResourceSecuritygroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 安全组描述信息。长度为2~256个英文或中文字符，不能以http://和https://开头。
  // 
  // 默认值：空。
  description?: string(name='description'),
  // 安全组入方向规则
  ingressRules?: [ SecurityGroupRule ](name='ingress_rules'),
  // 安全组出方向规则
  egressRules?: [ SecurityGroupRule ](name='egress_rules'),
  // 安全组名称。长度为2~128个英文或中文字符。必须以大小字母或中文开头，不能以 http://和https://开头。可以包含数字、半角冒号（:）、下划线（_）或者连字符（-）。默认值：空。
  name: string(name='name'),
  // 安全组所属地域identity
  region: string(name='region'),
  // 安全组所属VPC ID。
  vpcId: string(name='vpc_id'),
  // workspace name
  workspace: string(name='workspace'),
}

model CreateResourceSecuritygroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 安全组ID。
  securityGroupId?: string(name='security_group_id'),
}

/**
 * Description: 创建安全组资源
 * Summary: 创建安全组
 */
async function createResourceSecuritygroup(request: CreateResourceSecuritygroupRequest): CreateResourceSecuritygroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createResourceSecuritygroupEx(request, headers, runtime);
}

/**
 * Description: 创建安全组资源
 * Summary: 创建安全组
 */
async function createResourceSecuritygroupEx(request: CreateResourceSecuritygroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateResourceSecuritygroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resource.securitygroup.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteResourceSecuritygroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 地域identity
  region: string(name='region'),
  // 安全组ID。
  securityGroupId: string(name='security_group_id'),
  // 要删除的安全组所处专有网络的ID
  vpcId: string(name='vpc_id'),
}

model DeleteResourceSecuritygroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 删除安全组是否成功
  success?: boolean(name='success'),
}

/**
 * Description: 删除安全组
 * Summary: 删除安全组
 */
async function deleteResourceSecuritygroup(request: DeleteResourceSecuritygroupRequest): DeleteResourceSecuritygroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteResourceSecuritygroupEx(request, headers, runtime);
}

/**
 * Description: 删除安全组
 * Summary: 删除安全组
 */
async function deleteResourceSecuritygroupEx(request: DeleteResourceSecuritygroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteResourceSecuritygroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resource.securitygroup.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateResourceComputerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 实例所属的部署单元
  cell: string(name='cell'),
  // 数据盘的云盘种类。取值范围：
  // 
  // cloud_efficiency：高效云盘
  // cloud_ssd：SSD云盘
  // ephemeral_ssd：本地SSD盘
  // cloud_essd：ESSD云盘
  // cloud：普通云盘
  // I/O优化实例的默认值为cloud_efficiency，非I/O优化实例的默认值为cloud。
  dataDiskCategory?: string(name='data_disk_category'),
  // 数据盘的容量大小，n的取值范围为1~16，内存单位为GiB。取值范围：
  // 
  // cloud_efficiency：20~32768
  // cloud_ssd：20~32768
  // cloud_essd：20~32768
  // ephemeral_ssd：5~800
  // cloud：5~2000
  // 该参数的取值必须大于等于参数SnapshotId指定的快照的大小。
  dataDiskSize?: long(name='data_disk_size'),
  // 实例的描述信息
  description?: string(name='description'),
  // 云服务器的主机名。
  // 
  // 点号（.）和短横线（-）不能作为首尾字符，更不能连续使用。
  // Windows实例：字符长度为2~15，不支持点号（.），不能全是数字。允许大小写英文字母、数字和短横线（-）。
  // 其他类型实例（Linux等）：字符长度为2~64，支持多个点号（.），点之间为一段，每段允许大小写英文字母、数字和短横线（-）。
  hostName: string(name='host_name'),
  // 镜像文件ID，启动实例时选择的镜像资源。
  imageId: string(name='image_id'),
  // 实例的资源规格。
  instanceType: string(name='instance_type'),
  // 实例的密码。长度为8至30个字符，必须同时包含大小写英文字母、数字和特殊符号中的三类字符。
  password: string(name='password'),
  // 实例所属的地域ID。
  regionId: string(name='region_id'),
  // 系统盘的云盘种类。取值范围：
  // 
  // cloud_efficiency：高效云盘
  // cloud_ssd：SSD云盘
  // cloud：普通云盘
  systemDiskCategory: string(name='system_disk_category'),
  // 系统盘大小，单位为GiB。取值范围：20~500
  // 
  // 该参数的取值必须大于或者等于max{20, ImageSize}。
  systemDiskSize: long(name='system_disk_size'),
}

model CreateResourceComputerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 实例ID。
  instanceId?: string(name='instance_id'),
  // 异步任务ID
  jobId?: string(name='job_id'),
  // 0表示正常，非0表示异常
  retCode?: long(name='ret_code'),
  // 错误描述信息
  message?: string(name='message'),
}

/**
 * Description: 创建云主机instance
 * Summary: 创建云主机instance
 */
async function createResourceComputer(request: CreateResourceComputerRequest): CreateResourceComputerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createResourceComputerEx(request, headers, runtime);
}

/**
 * Description: 创建云主机instance
 * Summary: 创建云主机instance
 */
async function createResourceComputerEx(request: CreateResourceComputerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateResourceComputerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resource.computer.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryResourceComputerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // iaas id
  iaasId?: string(name='iaas_id'),
  // 逗号分隔的实例ID，最多支持100个
  instanceIds?: [ string ](name='instance_ids'),
  // 实例名称，支持使用通配符*进行模糊搜索。
  instanceName?: string(name='instance_name'),
  // 实例的规格
  instanceType?: string(name='instance_type'),
  // 主机的内网ip，取值可以由多个IP组成一个JSON数组，最多支持100个IP，IP之间用半角逗号（,）隔开。
  privateIpAddresses?: [ string ](name='private_ip_addresses'),
  // 供应商id
  providerId?: string(name='provider_id'),
  // 实例所属的地域ID
  regionId: string(name='region_id'),
  // 实例所在的企业资源组ID。
  resourceGroupId?: string(name='resource_group_id'),
  // 实例状态。取值范围：
  // 
  // Running：运行中
  // Starting：启动中
  // Stopping：停止中
  // Stopped：已停止
  status?: string(name='status'),
  // 主机所在工作空间
  workspace?: string(name='workspace'),
}

model QueryResourceComputerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询的实例集合
  instances?: [ Computer ](name='instances'),
  // 实例列表的页码。
  pageNumber?: long(name='page_number'),
  // 输入时设置的每页行数。
  pageSize?: long(name='page_size'),
  // 请求ID
  requestId?: string(name='request_id'),
  // 查询到的实例总数。
  totalCount?: long(name='total_count'),
}

/**
 * Description: computer 查询
 * Summary: computer 查询
 */
async function queryResourceComputer(request: QueryResourceComputerRequest): QueryResourceComputerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryResourceComputerEx(request, headers, runtime);
}

/**
 * Description: computer 查询
 * Summary: computer 查询
 */
async function queryResourceComputerEx(request: QueryResourceComputerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryResourceComputerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resource.computer.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryResourceComputerspecRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 机器规格族
  instanceTypeGroups?: string(name='instance_type_groups'),
  // CPU最大值
  maxCpu?: long(name='max_cpu'),
  // 最大内存
  maxMem?: long(name='max_mem'),
  // CPU最小值
  minCpu?: long(name='min_cpu'),
  // 最小内存
  minMem?: long(name='min_mem'),
}

model QueryResourceComputerspecResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 符合筛选条件的机器规格
  computerSpecs?: [ ComputerSpec ](name='computer_specs'),
  // 返回的数量
  totalCount?: long(name='total_count'),
}

/**
 * Description: 根据CPU内存机器规格查询api
 * Summary: 机器规格查询api
 */
async function queryResourceComputerspec(request: QueryResourceComputerspecRequest): QueryResourceComputerspecResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryResourceComputerspecEx(request, headers, runtime);
}

/**
 * Description: 根据CPU内存机器规格查询api
 * Summary: 机器规格查询api
 */
async function queryResourceComputerspecEx(request: QueryResourceComputerspecRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryResourceComputerspecResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resource.computerspec.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteResourceComputerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 要删除的机器ID
  instanceId: string(name='instance_id'),
  // 是否强制删除
  force?: boolean(name='force'),
}

model DeleteResourceComputerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 0表示正常，非0表示异常
  retCode?: long(name='ret_code'),
  // 错误描述信息
  message?: string(name='message'),
  // 异步执行任务id
  jobId?: string(name='job_id'),
}

/**
 * Description: 删除computer
 * Summary: 删除computer
 */
async function deleteResourceComputer(request: DeleteResourceComputerRequest): DeleteResourceComputerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteResourceComputerEx(request, headers, runtime);
}

/**
 * Description: 删除computer
 * Summary: 删除computer
 */
async function deleteResourceComputerEx(request: DeleteResourceComputerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteResourceComputerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resource.computer.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReinitResourceComputerpasswordRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 需要修改的机器Id
  instanceId: string(name='instance_id'),
  // 重置的密码
  password: string(name='password'),
}

model ReinitResourceComputerpasswordResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 0表示正常，非0表示异常
  retCode?: long(name='ret_code'),
  // 错误描述信息
  message?: string(name='message'),
  // 异步任务ID
  jobId?: string(name='job_id'),
}

/**
 * Description: 重置computer密码
 * Summary: 重置computer密码
 */
async function reinitResourceComputerpassword(request: ReinitResourceComputerpasswordRequest): ReinitResourceComputerpasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return reinitResourceComputerpasswordEx(request, headers, runtime);
}

/**
 * Description: 重置computer密码
 * Summary: 重置computer密码
 */
async function reinitResourceComputerpasswordEx(request: ReinitResourceComputerpasswordRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReinitResourceComputerpasswordResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resource.computerpassword.reinit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartResourceComputerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 机器id
  instanceId: string(name='instance_id'),
}

model StartResourceComputerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 0表示正常，非0表示异常
  retCode?: long(name='ret_code'),
  // 异步任务执行id
  jobId?: string(name='job_id'),
  // 错误描述信息
  message?: string(name='message'),
}

/**
 * Description: 启动computer
 * Summary: 启动computer
 */
async function startResourceComputer(request: StartResourceComputerRequest): StartResourceComputerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startResourceComputerEx(request, headers, runtime);
}

/**
 * Description: 启动computer
 * Summary: 启动computer
 */
async function startResourceComputerEx(request: StartResourceComputerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartResourceComputerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resource.computer.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StopResourceComputerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 需要停止的机器id
  instanceId: string(name='instance_id'),
  // 是否强制停止
  force?: boolean(name='force'),
}

model StopResourceComputerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 非0表示异常，0表示正常
  retCode?: long(name='ret_code'),
  // 异步执行的任务ID
  jobId?: string(name='job_id'),
  // 错误信息
  message?: string(name='message'),
}

/**
 * Description: 停止机器
 * Summary: 停止机器
 */
async function stopResourceComputer(request: StopResourceComputerRequest): StopResourceComputerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return stopResourceComputerEx(request, headers, runtime);
}

/**
 * Description: 停止机器
 * Summary: 停止机器
 */
async function stopResourceComputerEx(request: StopResourceComputerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StopResourceComputerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resource.computer.stop', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSlsProjectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 日志项目名称
  projectName: string(name='project_name'),
  // 区域id
  slsRegionId?: string(name='sls_region_id'),
  // 租户id
  tenantId?: string(name='tenant_id'),
}

model CreateSlsProjectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 创建日志项目结果
  data?: boolean(name='data'),
}

/**
 * Description: 阿里云日志服务(SLS)-创建日志项目
 * Summary: 创建日志项目
 */
async function createSlsProject(request: CreateSlsProjectRequest): CreateSlsProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSlsProjectEx(request, headers, runtime);
}

/**
 * Description: 阿里云日志服务(SLS)-创建日志项目
 * Summary: 创建日志项目
 */
async function createSlsProjectEx(request: CreateSlsProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSlsProjectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.sls.project.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSlsProjectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 区域id
  slsRegionId?: string(name='sls_region_id'),
  // 租户id
  tenantId?: string(name='tenant_id'),
}

model ListSlsProjectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 日志项目数组
  data?: [ SLSProject ](name='data'),
}

/**
 * Description: 阿里云日志服务(SLS)-获取日志项目列表
 * Summary: 获取日志项目列表
 */
async function listSlsProject(request: ListSlsProjectRequest): ListSlsProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSlsProjectEx(request, headers, runtime);
}

/**
 * Description: 阿里云日志服务(SLS)-获取日志项目列表
 * Summary: 获取日志项目列表
 */
async function listSlsProjectEx(request: ListSlsProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSlsProjectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.sls.project.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSlsLogstoreRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 日志库名称，在Project下必须唯一
  logstoreName: string(name='logstore_name'),
  // 日志项目名称
  projectName: string(name='project_name'),
  // 区域id
  slsRegionId?: string(name='sls_region_id'),
  // Shard个数，单位为个，范围为1~100
  shardCount: long(name='shard_count'),
  // 租户id
  tenantId?: string(name='tenant_id'),
  // 数据的保存时间，单位为天，范围1~3600。
  ttl: long(name='ttl'),
  // 是否添加索引
  addIndex?: boolean(name='add_index'),
  // 是否自动分裂Shard。
  // 
  // true：自动分裂Shard。
  // false：不自动分裂Shard。
  autoSplit?: boolean(name='auto_split'),
  // 自动分裂时最大的Shard个数，最小值是1，最大值是64。
  maxSplitShard?: long(name='max_split_shard'),
}

model CreateSlsLogstoreResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 日志库创建结果
  data?: boolean(name='data'),
}

/**
 * Description: 阿里云日志服务(SLS)-创建日志库
 * Summary: 创建日志库
 */
async function createSlsLogstore(request: CreateSlsLogstoreRequest): CreateSlsLogstoreResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSlsLogstoreEx(request, headers, runtime);
}

/**
 * Description: 阿里云日志服务(SLS)-创建日志库
 * Summary: 创建日志库
 */
async function createSlsLogstoreEx(request: CreateSlsLogstoreRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSlsLogstoreResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.sls.logstore.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSlsLogstoreRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 用于请求的 Logstore 名称（支持部分匹配）。
  logstoreName?: string(name='logstore_name'),
  // 日志项目名称
  projectName: string(name='project_name'),
  // 区域id
  slsRegionId?: string(name='sls_region_id'),
  // 租户id
  tenantId?: string(name='tenant_id'),
}

model ListSlsLogstoreResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 日志库名称列表
  data?: [ string ](name='data'),
}

/**
 * Description: 阿里云日志服务(SLS)-获取日志库列表
 * Summary: 获取日志库列表
 */
async function listSlsLogstore(request: ListSlsLogstoreRequest): ListSlsLogstoreResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSlsLogstoreEx(request, headers, runtime);
}

/**
 * Description: 阿里云日志服务(SLS)-获取日志库列表
 * Summary: 获取日志库列表
 */
async function listSlsLogstoreEx(request: ListSlsLogstoreRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSlsLogstoreResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.sls.logstore.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSlsLogstoreRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 日志库名称，在Project下必须唯一
  logstoreName: string(name='logstore_name'),
  // 日志项目名称
  projectName: string(name='project_name'),
  // 区域id
  slsRegionId?: string(name='sls_region_id'),
  // 租户id
  tenantId?: string(name='tenant_id'),
}

model GetSlsLogstoreResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 单个日志库信息
  data?: SLSLogStore(name='data'),
}

/**
 * Description: 阿里云日志服务(SLS)-获取单个日志库
 * Summary: 获取单个日志库
 */
async function getSlsLogstore(request: GetSlsLogstoreRequest): GetSlsLogstoreResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSlsLogstoreEx(request, headers, runtime);
}

/**
 * Description: 阿里云日志服务(SLS)-获取单个日志库
 * Summary: 获取单个日志库
 */
async function getSlsLogstoreEx(request: GetSlsLogstoreRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSlsLogstoreResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.sls.logstore.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSlsConfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 日志配置详情
  config: SLSConfig(name='config'),
  // 日志项目名称
  projectName: string(name='project_name'),
  // 区域id
  slsRegionId?: string(name='sls_region_id'),
  // 租户id
  tenantId?: string(name='tenant_id'),
}

model CreateSlsConfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 创建日志配置结果
  data?: boolean(name='data'),
}

/**
 * Description: 阿里云日志服务(SLS)-创建日志配置
 * Summary: 创建日志配置
 */
async function createSlsConfig(request: CreateSlsConfigRequest): CreateSlsConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSlsConfigEx(request, headers, runtime);
}

/**
 * Description: 阿里云日志服务(SLS)-创建日志配置
 * Summary: 创建日志配置
 */
async function createSlsConfigEx(request: CreateSlsConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSlsConfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.sls.config.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListSlsConfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 日志项目名称
  projectName: string(name='project_name'),
  // 区域id
  slsRegionId?: string(name='sls_region_id'),
  // 租户id
  tenantId?: string(name='tenant_id'),
}

model ListSlsConfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 日志配置名称列表
  data?: [ string ](name='data'),
}

/**
 * Description: 阿里云日志服务(SLS)-获取日志配置列表
 * Summary: 获取日志配置列表
 */
async function listSlsConfig(request: ListSlsConfigRequest): ListSlsConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listSlsConfigEx(request, headers, runtime);
}

/**
 * Description: 阿里云日志服务(SLS)-获取日志配置列表
 * Summary: 获取日志配置列表
 */
async function listSlsConfigEx(request: ListSlsConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSlsConfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.sls.config.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSlsConfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 要更新的日志配置详情
  config: SLSConfig(name='config'),
  // 日志项目名称
  projectName: string(name='project_name'),
  // 区域id
  slsRegionId?: string(name='sls_region_id'),
  // 租户id
  tenantId?: string(name='tenant_id'),
}

model UpdateSlsConfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 更新日志配置是否成功
  data?: boolean(name='data'),
}

/**
 * Description: 阿里云日志服务(SLS)-更新日志配置
 * Summary: 更新日志配置
 */
async function updateSlsConfig(request: UpdateSlsConfigRequest): UpdateSlsConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSlsConfigEx(request, headers, runtime);
}

/**
 * Description: 阿里云日志服务(SLS)-更新日志配置
 * Summary: 更新日志配置
 */
async function updateSlsConfigEx(request: UpdateSlsConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSlsConfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.sls.config.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSlsConfigRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 要删除的日志配置名称
  name: string(name='name'),
  // 日志项目名称
  projectName: string(name='project_name'),
  // 区域id
  slsRegionId?: string(name='sls_region_id'),
  // 租户id
  tenantId?: string(name='tenant_id'),
}

model DeleteSlsConfigResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 删除日志配置是否成功
  data?: boolean(name='data'),
}

/**
 * Description: 阿里云日志服务(SLS)-删除日志配置
 * Summary: 删除日志配置
 */
async function deleteSlsConfig(request: DeleteSlsConfigRequest): DeleteSlsConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSlsConfigEx(request, headers, runtime);
}

/**
 * Description: 阿里云日志服务(SLS)-删除日志配置
 * Summary: 删除日志配置
 */
async function deleteSlsConfigEx(request: DeleteSlsConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSlsConfigResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.sls.config.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySlsLogRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 查询开始时间点（精度为秒，从 1970-1-1 00:00:00 UTC 计算起的秒数）。
  from: long(name='from'),
  // 请求返回的最大日志条数。取值范围为 0~100，默认值为 100。
  line?: long(name='line'),
  // 需要查询日志的 Logstore 名称。
  logstoreName: string(name='logstore_name'),
  // 请求返回日志的起始点。取值范围为 0 或正整数，默认值为 0。
  offset?: long(name='offset'),
  // 日志项目名称
  projectName: string(name='project_name'),
  // 查询表达式。关于查询表达式的详细语法，请参见 。
  query?: string(name='query'),
  // 区域id
  slsRegionId?: string(name='sls_region_id'),
  // 是否按日志时间戳逆序返回日志，精确到分钟级别。true 表示逆序，false 表示顺序，默认值为 false。
  reverse?: boolean(name='reverse'),
  // 租户id
  tenantId?: string(name='tenant_id'),
  // 查询结束时间点（精度为秒，从 1970-1-1 00:00:00 UTC 计算起的秒数）。
  to: long(name='to'),
  // 查询日志主题。
  topic?: string(name='topic'),
  // 查询 Logstore 数据的类型。在 GetLogs 接口中该参数必须为 log。
  type?: string(name='type'),
}

model QuerySlsLogResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // GetLogs的响应body是一个数组，数组中每个元素是一条日志结果
  data?: [ SLSLogItem ](name='data'),
  // 页数
  pageNum?: long(name='page_num'),
  // 分页大小
  pageSize?: long(name='page_size'),
  // 结果总数
  total?: long(name='total'),
}

/**
 * Description: 阿里云日志服务(SLS) - 查询日志
 * Summary: 查询日志
 */
async function querySlsLog(request: QuerySlsLogRequest): QuerySlsLogResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySlsLogEx(request, headers, runtime);
}

/**
 * Description: 阿里云日志服务(SLS) - 查询日志
 * Summary: 查询日志
 */
async function querySlsLogEx(request: QuerySlsLogRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySlsLogResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.sls.log.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateResourceIngressrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 安全组入口规则
  ingressRules: [ SecurityGroupRule ](name='ingress_rules'),
  // region identity
  region: string(name='region'),
  // 安全组id
  securityGroupId: string(name='security_group_id'),
}

model BatchcreateResourceIngressrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 安全组入方向规则是否添加成功
  success?: boolean(name='success'),
}

/**
 * Description: 批量添加安全组入规则
 * Summary: 批量添加安全组规则
 */
async function batchcreateResourceIngressrules(request: BatchcreateResourceIngressrulesRequest): BatchcreateResourceIngressrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateResourceIngressrulesEx(request, headers, runtime);
}

/**
 * Description: 批量添加安全组入规则
 * Summary: 批量添加安全组规则
 */
async function batchcreateResourceIngressrulesEx(request: BatchcreateResourceIngressrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateResourceIngressrulesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resource.ingressrules.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateResourceEgressrulesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 安全组出方向规则
  egressRules: [ SecurityGroupRule ](name='egress_rules'),
  // region identity
  region: string(name='region'),
  // 安全组id
  securityGroupId: string(name='security_group_id'),
}

model BatchcreateResourceEgressrulesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 安全组出方向规则是否添加成功
  success?: boolean(name='success'),
}

/**
 * Description: 批量添加安全组出方向规则
 * Summary: 批量添加安全组出方向规则
 */
async function batchcreateResourceEgressrules(request: BatchcreateResourceEgressrulesRequest): BatchcreateResourceEgressrulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateResourceEgressrulesEx(request, headers, runtime);
}

/**
 * Description: 批量添加安全组出方向规则
 * Summary: 批量添加安全组出方向规则
 */
async function batchcreateResourceEgressrulesEx(request: BatchcreateResourceEgressrulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateResourceEgressrulesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resource.egressrules.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLoadbalanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app_ids
  appIds?: [ string ](name='app_ids'),
  // app_service_ids
  appServiceIds?: [ string ](name='app_service_ids'),
  // cluster_ids
  clusterIds?: [ string ](name='cluster_ids'),
  // cluster_mode
  clusterMode?: boolean(name='cluster_mode'),
  // current_page
  currentPage?: long(name='current_page'),
  // domains
  domains?: [ string ](name='domains'),
  // health_levels 
  healthLevels?: [ string ](name='health_levels'),
  // iaas_ids
  iaasIds?: [ string ](name='iaas_ids'),
  // name
  name?: string(name='name'),
  // 网络类型
  networkType?: string(name='network_type'),
  // page_size
  pageSize?: long(name='page_size'),
  // share_mode
  shareMode?: boolean(name='share_mode'),
  // lb状态
  statuses?: [ string ](name='statuses'),
  // vip地址
  vipAddresses?: [ string ](name='vip_addresses'),
  // vip地址类型
  vipAddressType?: string(name='vip_address_type'),
  // vip类型
  vipType?: string(name='vip_type'),
  // vpc_ids
  vpcIds?: [ string ](name='vpc_ids'),
  // vswitch_iaas_ids
  vswitchIaasIds?: [ string ](name='vswitch_iaas_ids'),
  // workspace
  workspace: string(name='workspace'),
}

model QueryLoadbalanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回的lb
  data?: [ LoadBalancer ](name='data'),
  // total_count
  totalCount?: long(name='total_count'),
  // current_page
  currentPage?: long(name='current_page'),
  // page_size
  pageSize?: long(name='page_size'),
}

/**
 * Description: loadbalance查询
 * Summary: loadbalance查询
 */
async function queryLoadbalance(request: QueryLoadbalanceRequest): QueryLoadbalanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLoadbalanceEx(request, headers, runtime);
}

/**
 * Description: loadbalance查询
 * Summary: loadbalance查询
 */
async function queryLoadbalanceEx(request: QueryLoadbalanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLoadbalanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetLoadbalanceHealthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // lb_id
  lbId: string(name='lb_id'),
}

model GetLoadbalanceHealthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // statuses
  data?: [ LoadBalanceHealthStatus ](name='data'),
}

/**
 * Description: 获取单个LB的健康状态
 * Summary: 获取单个LB的健康状态
 */
async function getLoadbalanceHealth(request: GetLoadbalanceHealthRequest): GetLoadbalanceHealthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getLoadbalanceHealthEx(request, headers, runtime);
}

/**
 * Description: 获取单个LB的健康状态
 * Summary: 获取单个LB的健康状态
 */
async function getLoadbalanceHealthEx(request: GetLoadbalanceHealthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetLoadbalanceHealthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.health.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllLoadbalanceViptypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model AllLoadbalanceViptypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // vip_types
  data?: [ VipType ](name='data'),
}

/**
 * Description: 获取所有的vip类型
 * Summary: 获取所有的vip类型
 */
async function allLoadbalanceViptype(request: AllLoadbalanceViptypeRequest): AllLoadbalanceViptypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allLoadbalanceViptypeEx(request, headers, runtime);
}

/**
 * Description: 获取所有的vip类型
 * Summary: 获取所有的vip类型
 */
async function allLoadbalanceViptypeEx(request: AllLoadbalanceViptypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllLoadbalanceViptypeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.viptype.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllLoadbalanceClusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace
  workspace: string(name='workspace'),
  // zone_id
  zoneId?: string(name='zone_id'),
}

model AllLoadbalanceClusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ LbCluster ](name='data'),
}

/**
 * Description: 获取所有的LB集群
 * Summary: 获取所有的LB集群
 */
async function allLoadbalanceCluster(request: AllLoadbalanceClusterRequest): AllLoadbalanceClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allLoadbalanceClusterEx(request, headers, runtime);
}

/**
 * Description: 获取所有的LB集群
 * Summary: 获取所有的LB集群
 */
async function allLoadbalanceClusterEx(request: AllLoadbalanceClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllLoadbalanceClusterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.cluster.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryVpcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // vpc id
  id?: string(name='id'),
  // workspace name
  workspace?: string(name='workspace'),
}

model QueryVpcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // vpc detail info
  data?: VpcVO(name='data'),
}

/**
 * Description: 查询vpc详细信息
 * Summary: 查询vpc详细信息
 */
async function queryVpc(request: QueryVpcRequest): QueryVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryVpcEx(request, headers, runtime);
}

/**
 * Description: 查询vpc详细信息
 * Summary: 查询vpc详细信息
 */
async function queryVpcEx(request: QueryVpcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryVpcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.vpc.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListVpcImportRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // region name
  region: string(name='region'),
  // workspace name
  workspace: string(name='workspace'),
}

model ListVpcImportResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // vpc import infos
  data?: [ VpcImport ](name='data'),
}

/**
 * Description: 查询已导入workspace的vpc
 * Summary: 查询已导入workspace的vpc
 */
async function listVpcImport(request: ListVpcImportRequest): ListVpcImportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listVpcImportEx(request, headers, runtime);
}

/**
 * Description: 查询已导入workspace的vpc
 * Summary: 查询已导入workspace的vpc
 */
async function listVpcImportEx(request: ListVpcImportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListVpcImportResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.vpc.import.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListVpcCidrblockRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // region
  region?: string(name='region'),
}

model ListVpcCidrblockResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // cidr block list
  data?: [ string ](name='data'),
}

/**
 * Description: 查询vpc cidrblock信息
 * Summary: 查询vpc cidrblock信息
 */
async function listVpcCidrblock(request: ListVpcCidrblockRequest): ListVpcCidrblockResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listVpcCidrblockEx(request, headers, runtime);
}

/**
 * Description: 查询vpc cidrblock信息
 * Summary: 查询vpc cidrblock信息
 */
async function listVpcCidrblockEx(request: ListVpcCidrblockRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListVpcCidrblockResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.vpc.cidrblock.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryVpcVswitchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // vpc paas id
  vpcId: string(name='vpc_id'),
  // vswitch iaas id
  vswitchId?: string(name='vswitch_id'),
  // 起始页，1为起点
  pageNumber?: long(name='page_number'),
  // 最大50，默认值50
  pageSize?: long(name='page_size'),
}

model QueryVpcVswitchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // vswitch detail infos
  data?: [ VSwitchVO ](name='data'),
  // 总数
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询交换机信息
 * Summary: 查询交换机信息
 */
async function queryVpcVswitch(request: QueryVpcVswitchRequest): QueryVpcVswitchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryVpcVswitchEx(request, headers, runtime);
}

/**
 * Description: 查询交换机信息
 * Summary: 查询交换机信息
 */
async function queryVpcVswitchEx(request: QueryVpcVswitchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryVpcVswitchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.vpc.vswitch.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryVpcVroutertableRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // vpc id
  vpcId: string(name='vpc_id'),
  // 路由器id
  vRouterId: string(name='v_router_id'),
  // workspace name
  workspace: string(name='workspace'),
}

model QueryVpcVroutertableResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 	
  // 路由表的详细信息。
  data?: [ RouteTable ](name='data'),
}

/**
 * Description: 查询路由表信息
 * Summary: 查询路由表信息
 */
async function queryVpcVroutertable(request: QueryVpcVroutertableRequest): QueryVpcVroutertableResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryVpcVroutertableEx(request, headers, runtime);
}

/**
 * Description: 查询路由表信息
 * Summary: 查询路由表信息
 */
async function queryVpcVroutertableEx(request: QueryVpcVroutertableRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryVpcVroutertableResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.vpc.vroutertable.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetLoadbalanceRuleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // rule id
  id: string(name='id'),
  // workspace
  workspace: string(name='workspace'),
}

model GetLoadbalanceRuleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // rule
  data?: LoadBalancerRule(name='data'),
}

/**
 * Description: 获取单个rule
 * Summary: 获取单个rule
 */
async function getLoadbalanceRule(request: GetLoadbalanceRuleRequest): GetLoadbalanceRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getLoadbalanceRuleEx(request, headers, runtime);
}

/**
 * Description: 获取单个rule
 * Summary: 获取单个rule
 */
async function getLoadbalanceRuleEx(request: GetLoadbalanceRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetLoadbalanceRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.rule.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLoadbalanceRuleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app_ids
  appIds?: [ string ](name='app_ids'),
  // cookies
  cookies?: [ string ](name='cookies'),
  // current_page
  currentPage?: long(name='current_page'),
  // domains
  domains?: [ string ](name='domains'),
  // domain_urls
  domainUrls?: [ string ](name='domain_urls'),
  // health_monitor_ids
  healthMonitorIds?: [ string ](name='health_monitor_ids'),
  // listener_ports
  listenerPorts?: [ long ](name='listener_ports'),
  // loadbalancer_ids
  loadbalancerIds?: [ string ](name='loadbalancer_ids'),
  // page_size
  pageSize?: long(name='page_size'),
  // statuses
  statuses?: [ string ](name='statuses'),
  // urls
  urls?: [ string ](name='urls'),
  // vcomputer_group_ids
  vcomputerGroupIds?: [ string ](name='vcomputer_group_ids'),
  // workspace
  workspace: string(name='workspace'),
}

model QueryLoadbalanceRuleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // rules
  data?: [ LoadBalancerRule ](name='data'),
}

/**
 * Description: 批量查询Lb rule
 * Summary: 批量查询Lb rule
 */
async function queryLoadbalanceRule(request: QueryLoadbalanceRuleRequest): QueryLoadbalanceRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLoadbalanceRuleEx(request, headers, runtime);
}

/**
 * Description: 批量查询Lb rule
 * Summary: 批量查询Lb rule
 */
async function queryLoadbalanceRuleEx(request: QueryLoadbalanceRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLoadbalanceRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.rule.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetLoadbalanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // id
  id: string(name='id'),
}

model GetLoadbalanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: LoadBalancer(name='data'),
}

/**
 * Description: 获取单个Lb ById
 * Summary: 获取单个Lb ById
 */
async function getLoadbalance(request: GetLoadbalanceRequest): GetLoadbalanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getLoadbalanceEx(request, headers, runtime);
}

/**
 * Description: 获取单个Lb ById
 * Summary: 获取单个Lb ById
 */
async function getLoadbalanceEx(request: GetLoadbalanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetLoadbalanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllLoadbalanceMountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // loadbalance_id
  loadbalanceId: string(name='loadbalance_id'),
  // workspace
  workspace: string(name='workspace'),
}

model AllLoadbalanceMountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ MountComputer ](name='data'),
}

/**
 * Description: 获取LB后端所有主机
 * Summary: 获取LB后端所有主机
 */
async function allLoadbalanceMount(request: AllLoadbalanceMountRequest): AllLoadbalanceMountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allLoadbalanceMountEx(request, headers, runtime);
}

/**
 * Description: 获取LB后端所有主机
 * Summary: 获取LB后端所有主机
 */
async function allLoadbalanceMountEx(request: AllLoadbalanceMountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllLoadbalanceMountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.mount.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLoadbalanceMountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app_ids
  appIds?: [ string ](name='app_ids'),
  // current_page
  currentPage?: long(name='current_page'),
  // domains
  domains?: [ string ](name='domains'),
  // iaas_ids_exclude
  iaasIdsExclude?: [ string ](name='iaas_ids_exclude'),
  // initialized
  initialized?: boolean(name='initialized'),
  // loadbalance_ids
  loadbalanceIds: [ string ](name='loadbalance_ids'),
  // mounted
  mounted?: boolean(name='mounted'),
  // page_size
  pageSize?: long(name='page_size'),
  // statuses
  statuses?: [ string ](name='statuses'),
  // workspace
  workspace: string(name='workspace'),
  // region_ids
  regionIds?: [ string ](name='region_ids'),
  // zone_ids
  zoneIds?: [ string ](name='zone_ids'),
  // name
  name?: string(name='name'),
}

model QueryLoadbalanceMountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // current_page
  currentPage?: long(name='current_page'),
  // data
  data?: [ MountComputer ](name='data'),
  // page_size
  pageSize?: long(name='page_size'),
  // total_count
  totalCount?: long(name='total_count'),
}

/**
 * Description: 根据条件查询后端的主机
 * Summary: 根据条件查询后端的主机
 */
async function queryLoadbalanceMount(request: QueryLoadbalanceMountRequest): QueryLoadbalanceMountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLoadbalanceMountEx(request, headers, runtime);
}

/**
 * Description: 根据条件查询后端的主机
 * Summary: 根据条件查询后端的主机
 */
async function queryLoadbalanceMountEx(request: QueryLoadbalanceMountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLoadbalanceMountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.mount.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetLoadbalanceVcomputergroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // id
  id: string(name='id'),
  // workspace
  workspace: string(name='workspace'),
}

model GetLoadbalanceVcomputergroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: VComputerGroup(name='data'),
}

/**
 * Description: 获取单个vcomputergroup
 * Summary: 获取单个vcomputergroup
 */
async function getLoadbalanceVcomputergroup(request: GetLoadbalanceVcomputergroupRequest): GetLoadbalanceVcomputergroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getLoadbalanceVcomputergroupEx(request, headers, runtime);
}

/**
 * Description: 获取单个vcomputergroup
 * Summary: 获取单个vcomputergroup
 */
async function getLoadbalanceVcomputergroupEx(request: GetLoadbalanceVcomputergroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetLoadbalanceVcomputergroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.vcomputergroup.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLoadbalanceVcomputergroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // load_balance_ids
  loadBalanceIds: [ string ](name='load_balance_ids'),
  // name
  name?: string(name='name'),
  // statuses
  statuses?: [ string ](name='statuses'),
  // workspace
  workspace: string(name='workspace'),
  // v_computer_group_ids
  vComputerGroupIds?: [ string ](name='v_computer_group_ids'),
}

model QueryLoadbalanceVcomputergroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ VComputerGroup ](name='data'),
}

/**
 * Description: 查询vcomputergroup
 * Summary: 查询vcomputergroup
 */
async function queryLoadbalanceVcomputergroup(request: QueryLoadbalanceVcomputergroupRequest): QueryLoadbalanceVcomputergroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLoadbalanceVcomputergroupEx(request, headers, runtime);
}

/**
 * Description: 查询vcomputergroup
 * Summary: 查询vcomputergroup
 */
async function queryLoadbalanceVcomputergroupEx(request: QueryLoadbalanceVcomputergroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLoadbalanceVcomputergroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.vcomputergroup.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllLoadbalanceVcomputergroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace
  workspace: string(name='workspace'),
}

model AllLoadbalanceVcomputergroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ VComputerGroup ](name='data'),
}

/**
 * Description: 获取所有vcomputergroup
 * Summary: 获取所有vcomputergroup
 */
async function allLoadbalanceVcomputergroup(request: AllLoadbalanceVcomputergroupRequest): AllLoadbalanceVcomputergroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allLoadbalanceVcomputergroupEx(request, headers, runtime);
}

/**
 * Description: 获取所有vcomputergroup
 * Summary: 获取所有vcomputergroup
 */
async function allLoadbalanceVcomputergroupEx(request: AllLoadbalanceVcomputergroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllLoadbalanceVcomputergroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.vcomputergroup.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLoadbalanceVcomputerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // computer_ids
  computerIds?: [ string ](name='computer_ids'),
  // computer_ports
  computerPorts?: [ string ](name='computer_ports'),
  // current_page
  currentPage?: long(name='current_page'),
  // ips
  ips?: [ string ](name='ips'),
  // ip_ports
  ipPorts?: [ string ](name='ip_ports'),
  // max_weight
  maxWeight?: long(name='max_weight'),
  // min_weight
  minWeight?: long(name='min_weight'),
  // page_size
  pageSize?: long(name='page_size'),
  // ports
  ports?: [ string ](name='ports'),
  // v_computer_group_ids
  vComputerGroupIds?: [ string ](name='v_computer_group_ids'),
  // workspace
  workspace: string(name='workspace'),
}

model QueryLoadbalanceVcomputerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // v_computers
  data?: [ VComputer ](name='data'),
  // total_count
  totalCount?: long(name='total_count'),
}

/**
 * Description: 获取vcomputer
 * Summary: 获取vcomputer
 */
async function queryLoadbalanceVcomputer(request: QueryLoadbalanceVcomputerRequest): QueryLoadbalanceVcomputerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLoadbalanceVcomputerEx(request, headers, runtime);
}

/**
 * Description: 获取vcomputer
 * Summary: 获取vcomputer
 */
async function queryLoadbalanceVcomputerEx(request: QueryLoadbalanceVcomputerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLoadbalanceVcomputerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.vcomputer.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLoadbalanceListenerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // backend_server_ports
  backendServerPorts?: [ long ](name='backend_server_ports'),
  // certificate_iaas_ids
  certificateIaasIds?: [ string ](name='certificate_iaas_ids'),
  // certificate_ids
  certificateIds?: [ string ](name='certificate_ids'),
  // current_page
  currentPage?: long(name='current_page'),
  // gm_crypto_cert_iaas_ids
  gmCryptoCertIaasIds?: [ string ](name='gm_crypto_cert_iaas_ids'),
  // gm_sign_cert_iaas_ids
  gmSignCertIaasIds?: [ string ](name='gm_sign_cert_iaas_ids'),
  // listener_ports
  listenerPorts?: [ long ](name='listener_ports'),
  // load_balancer_ids
  loadBalancerIds?: [ string ](name='load_balancer_ids'),
  // page_size
  pageSize?: long(name='page_size'),
  // types
  types?: [ string ](name='types'),
  // v_computer_group_ids
  vComputerGroupIds?: [ string ](name='v_computer_group_ids'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryLoadbalanceListenerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // listeners
  data?: [ Listener ](name='data'),
  // total_count
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询listener
 * Summary: 查询listener
 */
async function queryLoadbalanceListener(request: QueryLoadbalanceListenerRequest): QueryLoadbalanceListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLoadbalanceListenerEx(request, headers, runtime);
}

/**
 * Description: 查询listener
 * Summary: 查询listener
 */
async function queryLoadbalanceListenerEx(request: QueryLoadbalanceListenerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLoadbalanceListenerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.listener.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllLoadbalanceListenerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // lb_id
  lbId: string(name='lb_id'),
  // workspace
  workspace: string(name='workspace'),
}

model AllLoadbalanceListenerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ Listener ](name='data'),
}

/**
 * Description: 获取所有listener
 * Summary: 获取所有listener
 */
async function allLoadbalanceListener(request: AllLoadbalanceListenerRequest): AllLoadbalanceListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allLoadbalanceListenerEx(request, headers, runtime);
}

/**
 * Description: 获取所有listener
 * Summary: 获取所有listener
 */
async function allLoadbalanceListenerEx(request: AllLoadbalanceListenerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllLoadbalanceListenerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.listener.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLoadbalanceSecurityipRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // listener_port
  listenerPort: long(name='listener_port'),
  // load_balancer_id
  loadBalancerId: string(name='load_balancer_id'),
  // workspace
  workspace: string(name='workspace'),
}

model QueryLoadbalanceSecurityipResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // security_ips
  data?: ListenerSecurityIp(name='data'),
}

/**
 * Description: 查询securityip
 * Summary: 查询securityip
 */
async function queryLoadbalanceSecurityip(request: QueryLoadbalanceSecurityipRequest): QueryLoadbalanceSecurityipResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLoadbalanceSecurityipEx(request, headers, runtime);
}

/**
 * Description: 查询securityip
 * Summary: 查询securityip
 */
async function queryLoadbalanceSecurityipEx(request: QueryLoadbalanceSecurityipRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLoadbalanceSecurityipResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.securityip.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDatabaseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // id
  id: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model GetDatabaseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: Database(name='data'),
}

/**
 * Description: 获取单个database
 * Summary: 获取单个database
 */
async function getDatabase(request: GetDatabaseRequest): GetDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDatabaseEx(request, headers, runtime);
}

/**
 * Description: 获取单个database
 * Summary: 获取单个database
 */
async function getDatabaseEx(request: GetDatabaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDatabaseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllDatabaseMasterzoneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace
  workspace: string(name='workspace'),
}

model AllDatabaseMasterzoneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // master_zones
  masterZones?: [ string ](name='master_zones'),
}

/**
 * Description: 获取所有masterzone
 * Summary: 获取所有masterzone
 */
async function allDatabaseMasterzone(request: AllDatabaseMasterzoneRequest): AllDatabaseMasterzoneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allDatabaseMasterzoneEx(request, headers, runtime);
}

/**
 * Description: 获取所有masterzone
 * Summary: 获取所有masterzone
 */
async function allDatabaseMasterzoneEx(request: AllDatabaseMasterzoneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllDatabaseMasterzoneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.masterzone.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDatabaseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app_ids
  appIds?: [ string ](name='app_ids'),
  // app_service_ids
  appServiceIds?: [ string ](name='app_service_ids'),
  // connection_addresses
  connectionAddresses?: [ string ](name='connection_addresses'),
  // current_page
  currentPage?: long(name='current_page'),
  // engines
  engines?: [ string ](name='engines'),
  // engine_versions
  engineVersions?: [ string ](name='engine_versions'),
  // include_shared
  includeShared?: boolean(name='include_shared'),
  // master_ids
  masterIds?: [ string ](name='master_ids'),
  // max_cpu
  maxCpu?: long(name='max_cpu'),
  // max_max_connections
  maxMaxConnections?: long(name='max_max_connections'),
  // max_max_iops
  maxMaxIops?: long(name='max_max_iops'),
  // max_memory
  maxMemory?: long(name='max_memory'),
  // max_port
  maxPort?: long(name='max_port'),
  // max_storage
  maxStorage?: long(name='max_storage'),
  // min_cpu
  minCpu?: long(name='min_cpu'),
  // min_max_connections
  minMaxConnections?: long(name='min_max_connections'),
  // min_max_iops
  minMaxIops?: long(name='min_max_iops'),
  // min_memory
  minMemory?: long(name='min_memory'),
  // min_port
  minPort?: long(name='min_port'),
  // min_storage
  minStorage?: long(name='min_storage'),
  // name
  name?: string(name='name'),
  // network_type
  networkType?: string(name='network_type'),
  // net_type
  netType?: string(name='net_type'),
  // page_size
  pageSize?: long(name='page_size'),
  // spec_iaas_ids
  specIaasIds?: [ string ](name='spec_iaas_ids'),
  // statuses
  statuses?: [ string ](name='statuses'),
  // types
  types?: [ string ](name='types'),
  // vpc_ids
  vpcIds?: [ string ](name='vpc_ids'),
  // v_switch_iaas_ids
  vSwitchIaasIds?: [ string ](name='v_switch_iaas_ids'),
  // workspace_ids
  workspaceIds?: [ string ](name='workspace_ids'),
}

model QueryDatabaseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ Database ](name='data'),
  // total_count
  totalCount?: long(name='total_count'),
  // current_page
  currentPage?: long(name='current_page'),
  // page_size
  pageSize?: long(name='page_size'),
}

/**
 * Description: 查询数据库
 * Summary: 查询数据库
 */
async function queryDatabase(request: QueryDatabaseRequest): QueryDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDatabaseEx(request, headers, runtime);
}

/**
 * Description: 查询数据库
 * Summary: 查询数据库
 */
async function queryDatabaseEx(request: QueryDatabaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDatabaseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDatabaseSpecRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // current_page
  currentPage?: long(name='current_page'),
  // custom_storage
  customStorage?: boolean(name='custom_storage'),
  // engines
  engines?: [ string ](name='engines'),
  // engine_versions
  engineVersions?: [ string ](name='engine_versions'),
  // iaas_ids
  iaasIds?: [ string ](name='iaas_ids'),
  // ids
  ids?: [ string ](name='ids'),
  // max_cpu
  maxCpu?: long(name='max_cpu'),
  // max_max_connections
  maxMaxConnections?: long(name='max_max_connections'),
  // max_max_iops
  maxMaxIops?: long(name='max_max_iops'),
  // max_memory
  maxMemory?: long(name='max_memory'),
  // min_cpu
  minCpu?: long(name='min_cpu'),
  // min_max_connections
  minMaxConnections?: long(name='min_max_connections'),
  // min_max_iops
  minMaxIops?: long(name='min_max_iops'),
  // min_memory
  minMemory?: long(name='min_memory'),
  // pageSize
  pageSize?: long(name='page_size'),
  // types
  types?: [ string ](name='types'),
  // provider_ids
  providerIds?: [ string ](name='provider_ids'),
  // enable
  enable?: boolean(name='enable'),
  // iaas_types
  iaasTypes?: [ string ](name='iaas_types'),
}

model QueryDatabaseSpecResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ DatabaseSpec ](name='data'),
}

/**
 * Description: 查询数据库规格
 * Summary: 查询数据库规格
 */
async function queryDatabaseSpec(request: QueryDatabaseSpecRequest): QueryDatabaseSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDatabaseSpecEx(request, headers, runtime);
}

/**
 * Description: 查询数据库规格
 * Summary: 查询数据库规格
 */
async function queryDatabaseSpecEx(request: QueryDatabaseSpecRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDatabaseSpecResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.spec.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllDatabaseEngineRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model AllDatabaseEngineResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ DatabaseEngine ](name='data'),
}

/**
 * Description: 查询数据引擎
 * Summary: 查询数据引擎
 */
async function allDatabaseEngine(request: AllDatabaseEngineRequest): AllDatabaseEngineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allDatabaseEngineEx(request, headers, runtime);
}

/**
 * Description: 查询数据引擎
 * Summary: 查询数据引擎
 */
async function allDatabaseEngineEx(request: AllDatabaseEngineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllDatabaseEngineResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.engine.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllDatabaseQuotaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace
  workspace: string(name='workspace'),
}

model AllDatabaseQuotaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // quotas
  quotas?: [ QuotaKv ](name='quotas'),
}

/**
 * Description: 查询数据库quota
 * Summary: 查询数据库quota
 */
async function allDatabaseQuota(request: AllDatabaseQuotaRequest): AllDatabaseQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allDatabaseQuotaEx(request, headers, runtime);
}

/**
 * Description: 查询数据库quota
 * Summary: 查询数据库quota
 */
async function allDatabaseQuotaEx(request: AllDatabaseQuotaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllDatabaseQuotaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.quota.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllDatabaseSecurityipRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 数据库id
  id: string(name='id'),
  // workspace
  workspace?: string(name='workspace'),
}

model AllDatabaseSecurityipResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // security_ips
  data?: [ DatabaseSecurityIp ](name='data'),
}

/**
 * Description: 查询数据库所有securityip
 * Summary: 查询数据库所有securityip
 */
async function allDatabaseSecurityip(request: AllDatabaseSecurityipRequest): AllDatabaseSecurityipResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allDatabaseSecurityipEx(request, headers, runtime);
}

/**
 * Description: 查询数据库所有securityip
 * Summary: 查询数据库所有securityip
 */
async function allDatabaseSecurityipEx(request: AllDatabaseSecurityipRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllDatabaseSecurityipResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.securityip.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDatabaseSchemeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // char_sets
  charSets?: [ string ](name='char_sets'),
  // current_page
  currentPage?: long(name='current_page'),
  // database_id
  databaseId: string(name='database_id'),
  // iaas_ids
  iaasIds?: [ string ](name='iaas_ids'),
  // ids
  ids?: [ string ](name='ids'),
  // name
  name?: string(name='name'),
  // page_size
  pageSize?: long(name='page_size'),
  // statuses
  statuses?: [ string ](name='statuses'),
  // workspace
  workspace: string(name='workspace'),
}

model QueryDatabaseSchemeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ DbSchema ](name='data'),
}

/**
 * Description: ！！！！不要用，typo
 * Summary: ！！！！不要用，typo
 */
async function queryDatabaseScheme(request: QueryDatabaseSchemeRequest): QueryDatabaseSchemeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDatabaseSchemeEx(request, headers, runtime);
}

/**
 * Description: ！！！！不要用，typo
 * Summary: ！！！！不要用，typo
 */
async function queryDatabaseSchemeEx(request: QueryDatabaseSchemeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDatabaseSchemeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.scheme.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllDatabaseImportRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace
  workspace: string(name='workspace'),
}

model AllDatabaseImportResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // imports
  imports?: [ DatabaseImportVO ](name='imports'),
}

/**
 * Description: 获取数据库导入记录
 * Summary: 获取数据库导入记录
 */
async function allDatabaseImport(request: AllDatabaseImportRequest): AllDatabaseImportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allDatabaseImportEx(request, headers, runtime);
}

/**
 * Description: 获取数据库导入记录
 * Summary: 获取数据库导入记录
 */
async function allDatabaseImportEx(request: AllDatabaseImportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllDatabaseImportResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.import.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryComputerAgentstatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // computer serial numbers
  sn?: [ string ](name='sn'),
  // workspace name
  workspace?: string(name='workspace'),
  // iaas_ids
  iaasIds?: [ string ](name='iaas_ids'),
  // zone_iaas_id
  zoneIaasId?: string(name='zone_iaas_id'),
}

model QueryComputerAgentstatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // staragent info
  data?: [ StarAgentInfo ](name='data'),
}

/**
 * Description: 查询computer agent状态
 * Summary: 查询computer agent状态
 */
async function queryComputerAgentstatus(request: QueryComputerAgentstatusRequest): QueryComputerAgentstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryComputerAgentstatusEx(request, headers, runtime);
}

/**
 * Description: 查询computer agent状态
 * Summary: 查询computer agent状态
 */
async function queryComputerAgentstatusEx(request: QueryComputerAgentstatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryComputerAgentstatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.computer.agentstatus.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryComputerAgentsetupcommandRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // computer serial numbers
  sn?: [ string ](name='sn'),
  // workspace name
  workspace: string(name='workspace'),
  // iaas_id
  iaasId?: string(name='iaas_id'),
  // zone_iaas_id
  zoneIaasId?: string(name='zone_iaas_id'),
}

model QueryComputerAgentsetupcommandResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // operation tasks
  results?: [ OperationTask ](name='results'),
}

/**
 * Description: 查询computer staragent 启动命令
 * Summary: 查询 staragent 启动命令
 */
async function queryComputerAgentsetupcommand(request: QueryComputerAgentsetupcommandRequest): QueryComputerAgentsetupcommandResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryComputerAgentsetupcommandEx(request, headers, runtime);
}

/**
 * Description: 查询computer staragent 启动命令
 * Summary: 查询 staragent 启动命令
 */
async function queryComputerAgentsetupcommandEx(request: QueryComputerAgentsetupcommandRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryComputerAgentsetupcommandResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.computer.agentsetupcommand.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryComputerImportRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace name
  workspace: string(name='workspace'),
  // zone identity
  zone?: string(name='zone'),
  // page size
  pageSize: long(name='page_size'),
  // current page
  currentPage: long(name='current_page'),
  // 机器名称
  name?: string(name='name'),
  // 是否只查询可导入的
  importableOnly?: boolean(name='importable_only'),
  // iaas_id
  iaasId?: string(name='iaas_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model QueryComputerImportResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // computer import infos
  data?: [ ComputerImportVO ](name='data'),
  // total count
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询可以导入的computer信息
 * Summary: 查询可以导入的computer信息
 */
async function queryComputerImport(request: QueryComputerImportRequest): QueryComputerImportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryComputerImportEx(request, headers, runtime);
}

/**
 * Description: 查询可以导入的computer信息
 * Summary: 查询可以导入的computer信息
 */
async function queryComputerImportEx(request: QueryComputerImportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryComputerImportResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.computer.import.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListComputerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // appserviceIds
  appServiceIds?: [ string ](name='app_service_ids'),
  // current page
  currentPage?: long(name='current_page'),
  // name
  name?: string(name='name'),
  // current page
  pageSize?: long(name='page_size'),
  // workspace name
  workspace: string(name='workspace'),
  // CMP模式下使用的token，一般场景勿用
  cloudManageToken?: string(name='cloud_manage_token'),
  // vpc_iaas_id
  vpcIaasId?: string(name='vpc_iaas_id'),
  // private_ips
  privateIps?: [ string ](name='private_ips'),
  // iaas_ids
  iaasIds?: [ string ](name='iaas_ids'),
}

model ListComputerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // computer infos
  data?: [ Computer ](name='data'),
  // total count
  totalCount?: long(name='total_count'),
  // page size
  pageSize?: long(name='page_size'),
  // current page
  currentPage?: long(name='current_page'),
}

/**
 * Description: list computers
 * Summary: list computers
 */
async function listComputer(request: ListComputerRequest): ListComputerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listComputerEx(request, headers, runtime);
}

/**
 * Description: list computers
 * Summary: list computers
 */
async function listComputerEx(request: ListComputerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListComputerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.computer.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryComputerSpecRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // prviderIds
  providerIds: [ string ](name='provider_ids'),
  // zoneIds
  zoneIds: [ string ](name='zone_ids'),
  // workspace name
  workspace: string(name='workspace'),
}

model QueryComputerSpecResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // computer spec list
  data?: [ ComputerSpec ](name='data'),
}

/**
 * Description: query computer specs
 * Summary: query computer specs
 */
async function queryComputerSpec(request: QueryComputerSpecRequest): QueryComputerSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryComputerSpecEx(request, headers, runtime);
}

/**
 * Description: query computer specs
 * Summary: query computer specs
 */
async function queryComputerSpecEx(request: QueryComputerSpecRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryComputerSpecResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.computer.spec.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryComputerCommonimageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // providerIds
  providerIds: [ string ](name='provider_ids'),
  // regionIds
  regionIds: [ string ](name='region_ids'),
}

model QueryComputerCommonimageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // common images
  data?: [ CommonImage ](name='data'),
}

/**
 * Description: query computer common image
 * Summary: query common image
 */
async function queryComputerCommonimage(request: QueryComputerCommonimageRequest): QueryComputerCommonimageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryComputerCommonimageEx(request, headers, runtime);
}

/**
 * Description: query computer common image
 * Summary: query common image
 */
async function queryComputerCommonimageEx(request: QueryComputerCommonimageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryComputerCommonimageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.computer.commonimage.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AllLoadbalanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_ids
  workspaceIds: [ string ](name='workspace_ids'),
}

model AllLoadbalanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ LoadBalancer ](name='data'),
}

/**
 * Description: 获取所有loadbalance
 * Summary: 获取所有loadbalance
 */
async function allLoadbalance(request: AllLoadbalanceRequest): AllLoadbalanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return allLoadbalanceEx(request, headers, runtime);
}

/**
 * Description: 获取所有loadbalance
 * Summary: 获取所有loadbalance
 */
async function allLoadbalanceEx(request: AllLoadbalanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AllLoadbalanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.all', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLoadbalanceImportRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // current_page
  currentPage?: long(name='current_page'),
  // page_size
  pageSize?: long(name='page_size'),
  // workspace
  workspace?: string(name='workspace'),
  // zone_id
  zoneId?: string(name='zone_id'),
}

model QueryLoadbalanceImportResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ LoadBalancerImportVO ](name='data'),
  // total_count
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询导入信息
 * Summary: 查询导入信息
 */
async function queryLoadbalanceImport(request: QueryLoadbalanceImportRequest): QueryLoadbalanceImportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLoadbalanceImportEx(request, headers, runtime);
}

/**
 * Description: 查询导入信息
 * Summary: 查询导入信息
 */
async function queryLoadbalanceImportEx(request: QueryLoadbalanceImportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLoadbalanceImportResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.import.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDatabaseImportRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // current_page
  currentPage?: long(name='current_page'),
  // iaas_type
  iaasType: string(name='iaas_type'),
  // page_size
  pageSize?: long(name='page_size'),
  // workspace
  workspace: string(name='workspace'),
}

model QueryDatabaseImportResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ DatabaseImportVO ](name='data'),
  // total_count
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询数据库导入记录
 * Summary: 查询数据库导入记录
 */
async function queryDatabaseImport(request: QueryDatabaseImportRequest): QueryDatabaseImportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDatabaseImportEx(request, headers, runtime);
}

/**
 * Description: 查询数据库导入记录
 * Summary: 查询数据库导入记录
 */
async function queryDatabaseImportEx(request: QueryDatabaseImportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDatabaseImportResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.import.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDatabaseMasterzoneRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace
  workspace: string(name='workspace'),
}

model QueryDatabaseMasterzoneResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ string ](name='data'),
}

/**
 * Description: 查询masterzone
 * Summary: 查询masterzone
 */
async function queryDatabaseMasterzone(request: QueryDatabaseMasterzoneRequest): QueryDatabaseMasterzoneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDatabaseMasterzoneEx(request, headers, runtime);
}

/**
 * Description: 查询masterzone
 * Summary: 查询masterzone
 */
async function queryDatabaseMasterzoneEx(request: QueryDatabaseMasterzoneRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDatabaseMasterzoneResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.masterzone.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDatabaseQuotaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace
  workspace: string(name='workspace'),
}

model QueryDatabaseQuotaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ QuotaKv ](name='data'),
}

/**
 * Description: 查询数据库额度
 * Summary: 查询数据库额度
 */
async function queryDatabaseQuota(request: QueryDatabaseQuotaRequest): QueryDatabaseQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDatabaseQuotaEx(request, headers, runtime);
}

/**
 * Description: 查询数据库额度
 * Summary: 查询数据库额度
 */
async function queryDatabaseQuotaEx(request: QueryDatabaseQuotaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDatabaseQuotaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.quota.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDatabaseSecurityipRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // id
  id: string(name='id'),
  // workspace
  workspace: string(name='workspace'),
}

model QueryDatabaseSecurityipResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ DatabaseSecurityIp ](name='data'),
}

/**
 * Description: 查询securityip
 * Summary: 查询securityip
 */
async function queryDatabaseSecurityip(request: QueryDatabaseSecurityipRequest): QueryDatabaseSecurityipResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDatabaseSecurityipEx(request, headers, runtime);
}

/**
 * Description: 查询securityip
 * Summary: 查询securityip
 */
async function queryDatabaseSecurityipEx(request: QueryDatabaseSecurityipRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDatabaseSecurityipResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.securityip.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDatabaseSchemaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // char_sets
  charSets?: [ string ](name='char_sets'),
  // current_page
  currentPage?: long(name='current_page'),
  // database_id
  databaseId: string(name='database_id'),
  // iaas_ids
  iaasIds?: [ string ](name='iaas_ids'),
  // ids
  ids?: [ string ](name='ids'),
  // name
  name?: string(name='name'),
  // page_size
  pageSize?: long(name='page_size'),
  // statuses
  statuses?: [ string ](name='statuses'),
  // workspace
  workspace?: string(name='workspace'),
}

model QueryDatabaseSchemaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ DbSchema ](name='data'),
  // total_count
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询当前数据库的schema
 * Summary: 查询当前数据库的schema
 */
async function queryDatabaseSchema(request: QueryDatabaseSchemaRequest): QueryDatabaseSchemaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDatabaseSchemaEx(request, headers, runtime);
}

/**
 * Description: 查询当前数据库的schema
 * Summary: 查询当前数据库的schema
 */
async function queryDatabaseSchemaEx(request: QueryDatabaseSchemaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDatabaseSchemaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.schema.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDatabaseAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // current_page
  currentPage?: long(name='current_page'),
  // database_id
  databaseId: string(name='database_id'),
  // page_size
  pageSize?: long(name='page_size'),
}

model QueryDatabaseAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ DatabaseAccount ](name='data'),
  // total_count
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询数据库的账号
 * Summary: 查询数据库的账号
 */
async function queryDatabaseAccount(request: QueryDatabaseAccountRequest): QueryDatabaseAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDatabaseAccountEx(request, headers, runtime);
}

/**
 * Description: 查询数据库的账号
 * Summary: 查询数据库的账号
 */
async function queryDatabaseAccountEx(request: QueryDatabaseAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDatabaseAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.account.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetWorkspaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // id
  id: string(name='id'),
}

model GetWorkspaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // workspaceDto
  data?: WorkspaceDto(name='data'),
}

/**
 * Description: 查询workspace
 * Summary: 查询workspace
 */
async function getWorkspace(request: GetWorkspaceRequest): GetWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getWorkspaceEx(request, headers, runtime);
}

/**
 * Description: 查询workspace
 * Summary: 查询workspace
 */
async function getWorkspaceEx(request: GetWorkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetWorkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.workspace.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListRegionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model ListRegionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // list
  data?: [ RegionDto ](name='data'),
}

/**
 * Description: 查询region
 * Summary: 查询region
 */
async function listRegion(request: ListRegionRequest): ListRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listRegionEx(request, headers, runtime);
}

/**
 * Description: 查询region
 * Summary: 查询region
 */
async function listRegionEx(request: ListRegionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRegionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.region.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListRegionAccessibleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model ListRegionAccessibleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ RegionDto ](name='data'),
}

/**
 * Description: 租户可用region
 * Summary: 租户可用region
 */
async function listRegionAccessible(request: ListRegionAccessibleRequest): ListRegionAccessibleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listRegionAccessibleEx(request, headers, runtime);
}

/**
 * Description: 租户可用region
 * Summary: 租户可用region
 */
async function listRegionAccessibleEx(request: ListRegionAccessibleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRegionAccessibleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.region.accessible.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDatabaseInfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // name
  name?: string(name='name'),
  // description
  description?: string(name='description'),
  // id
  id: string(name='id'),
}

model UpdateDatabaseInfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新基本信息
 * Summary: 更新基本信息
 */
async function updateDatabaseInfo(request: UpdateDatabaseInfoRequest): UpdateDatabaseInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDatabaseInfoEx(request, headers, runtime);
}

/**
 * Description: 更新基本信息
 * Summary: 更新基本信息
 */
async function updateDatabaseInfoEx(request: UpdateDatabaseInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDatabaseInfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.info.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetDatabaseAssignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app_service_ids
  appServiceIds?: [ string ](name='app_service_ids'),
  // app_ids
  appIds?: [ string ](name='app_ids'),
  // workspace
  workspace?: string(name='workspace'),
  // ids
  ids?: [ string ](name='ids'),
}

model SetDatabaseAssignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 把数据库分配给应用
 * Summary: 把数据库分配给应用
 */
async function setDatabaseAssign(request: SetDatabaseAssignRequest): SetDatabaseAssignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setDatabaseAssignEx(request, headers, runtime);
}

/**
 * Description: 把数据库分配给应用
 * Summary: 把数据库分配给应用
 */
async function setDatabaseAssignEx(request: SetDatabaseAssignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetDatabaseAssignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.assign.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetDatabaseShareRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_ids
  workspaceIds: [ string ](name='workspace_ids'),
  // ids
  ids: [ string ](name='ids'),
}

model SetDatabaseShareResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 共享数据库给其他workspace
 * Summary: 共享数据库给其他workspace
 */
async function setDatabaseShare(request: SetDatabaseShareRequest): SetDatabaseShareResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setDatabaseShareEx(request, headers, runtime);
}

/**
 * Description: 共享数据库给其他workspace
 * Summary: 共享数据库给其他workspace
 */
async function setDatabaseShareEx(request: SetDatabaseShareRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetDatabaseShareResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.share.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RebootDatabaseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // id
  id: string(name='id'),
}

model RebootDatabaseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 重启数据库
 * Summary: 重启数据库
 */
async function rebootDatabase(request: RebootDatabaseRequest): RebootDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return rebootDatabaseEx(request, headers, runtime);
}

/**
 * Description: 重启数据库
 * Summary: 重启数据库
 */
async function rebootDatabaseEx(request: RebootDatabaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RebootDatabaseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.reboot', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDatabaseAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // description
  description?: string(name='description'),
  // id
  id: string(name='id'),
}

model UpdateDatabaseAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新账户信息
 * Summary: 更新账户信息
 */
async function updateDatabaseAccount(request: UpdateDatabaseAccountRequest): UpdateDatabaseAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDatabaseAccountEx(request, headers, runtime);
}

/**
 * Description: 更新账户信息
 * Summary: 更新账户信息
 */
async function updateDatabaseAccountEx(request: UpdateDatabaseAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDatabaseAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.account.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetDatabaseAccountpasswordRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // id
  id: string(name='id'),
  // password
  password: string(name='password'),
}

model SetDatabaseAccountpasswordResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 重设databaseaccount密码
 * Summary: 重设databaseaccount密码
 */
async function setDatabaseAccountpassword(request: SetDatabaseAccountpasswordRequest): SetDatabaseAccountpasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setDatabaseAccountpasswordEx(request, headers, runtime);
}

/**
 * Description: 重设databaseaccount密码
 * Summary: 重设databaseaccount密码
 */
async function setDatabaseAccountpasswordEx(request: SetDatabaseAccountpasswordRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetDatabaseAccountpasswordResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.accountpassword.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AuthDatabaseAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // schema_id
  schemaId: string(name='schema_id'),
  // privilege
  privilege: string(name='privilege'),
  // id
  id: string(name='id'),
}

model AuthDatabaseAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 数据库账户授权schema
 * Summary: 数据库账户授权schema
 */
async function authDatabaseAccount(request: AuthDatabaseAccountRequest): AuthDatabaseAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return authDatabaseAccountEx(request, headers, runtime);
}

/**
 * Description: 数据库账户授权schema
 * Summary: 数据库账户授权schema
 */
async function authDatabaseAccountEx(request: AuthDatabaseAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AuthDatabaseAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.account.auth', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetRegionTenantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
}

model GetRegionTenantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // regionDto
  data?: RegionDto(name='data'),
}

/**
 * Description: 查询tenantRegion
 * Summary: 查询tenantRegion
 */
async function getRegionTenant(request: GetRegionTenantRequest): GetRegionTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getRegionTenantEx(request, headers, runtime);
}

/**
 * Description: 查询tenantRegion
 * Summary: 查询tenantRegion
 */
async function getRegionTenantEx(request: GetRegionTenantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetRegionTenantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.region.tenant.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetRegionAliasbyidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // region_id
  regionId: string(name='region_id'),
  // providerId
  providerId: string(name='provider_id'),
  // iaasConnType
  iaasConnType: string(name='iaas_conn_type'),
}

model GetRegionAliasbyidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // region alias
  data?: string(name='data'),
}

/**
 * Description: getRegionAliasById
 * Summary: getRegionAliasById
 */
async function getRegionAliasbyid(request: GetRegionAliasbyidRequest): GetRegionAliasbyidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getRegionAliasbyidEx(request, headers, runtime);
}

/**
 * Description: getRegionAliasById
 * Summary: getRegionAliasById
 */
async function getRegionAliasbyidEx(request: GetRegionAliasbyidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetRegionAliasbyidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.region.aliasbyid.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDiskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // current page
  currentPage?: long(name='current_page'),
  // page size
  pageSize?: long(name='page_size'),
  // workspace name
  workspace: string(name='workspace'),
  // statuses
  statuses?: [ string ](name='statuses'),
  // type
  type?: string(name='type'),
  // computer_ids
  computerIds?: [ string ](name='computer_ids'),
  // devices
  devices?: [ string ](name='devices'),
  // max_size
  maxSize?: long(name='max_size'),
  // min_size
  minSize?: long(name='min_size'),
  // workspace_ids
  workspaceIds?: [ string ](name='workspace_ids'),
  // name
  name?: string(name='name'),
}

model QueryDiskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // disk detail infos
  data?: [ Disk ](name='data'),
  // total count
  totalCount?: long(name='total_count'),
  // page size
  pageSize?: long(name='page_size'),
  // current page
  currentPage?: long(name='current_page'),
}

/**
 * Description: 查询disk信息
 * Summary: 查询disk信息
 */
async function queryDisk(request: QueryDiskRequest): QueryDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDiskEx(request, headers, runtime);
}

/**
 * Description: 查询disk信息
 * Summary: 查询disk信息
 */
async function queryDiskEx(request: QueryDiskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDiskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.disk.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryImageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // current page
  currentPage?: long(name='current_page'),
  // page size
  pageSize?: long(name='page_size'),
  // workspace name
  workspace: string(name='workspace'),
  // status
  statuses?: string(name='statuses'),
}

model QueryImageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // image infos
  data?: [ CommonImage ](name='data'),
  // total count
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询computer image信息
 * Summary: 查询computer image信息
 */
async function queryImage(request: QueryImageRequest): QueryImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryImageEx(request, headers, runtime);
}

/**
 * Description: 查询computer image信息
 * Summary: 查询computer image信息
 */
async function queryImageEx(request: QueryImageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryImageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.image.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDatabaseSchemaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // char_set
  charSet: string(name='char_set'),
  // description
  description?: string(name='description'),
  // grant_map
  grantMap?: [ MapStringToStringEntity ](name='grant_map'),
  // 数据库id
  id: string(name='id'),
  // name
  name: string(name='name'),
}

model CreateDatabaseSchemaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回的schemaid
  data?: string(name='data'),
}

/**
 * Description: 创建数据库schema
 * Summary: 创建数据库schema
 */
async function createDatabaseSchema(request: CreateDatabaseSchemaRequest): CreateDatabaseSchemaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDatabaseSchemaEx(request, headers, runtime);
}

/**
 * Description: 创建数据库schema
 * Summary: 创建数据库schema
 */
async function createDatabaseSchemaEx(request: CreateDatabaseSchemaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDatabaseSchemaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.schema.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLoadbalanceMountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // mount_map
  mountMap: [ MapStringToIntegerEntity ](name='mount_map'),
  // domain
  domain?: string(name='domain'),
  // id
  id: string(name='id'),
}

model CreateLoadbalanceMountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: LB挂载后端主机
 * Summary: LB挂载后端主机
 */
async function createLoadbalanceMount(request: CreateLoadbalanceMountRequest): CreateLoadbalanceMountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLoadbalanceMountEx(request, headers, runtime);
}

/**
 * Description: LB挂载后端主机
 * Summary: LB挂载后端主机
 */
async function createLoadbalanceMountEx(request: CreateLoadbalanceMountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLoadbalanceMountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.mount.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLoadbalanceListenerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // backend_server_port
  backendServerPort?: long(name='backend_server_port'),
  // bandwidth
  bandwidth?: long(name='bandwidth'),
  // certificate_iaas_id
  certificateIaasId?: string(name='certificate_iaas_id'),
  // certificate_id
  certificateId?: string(name='certificate_id'),
  // cookie
  cookie?: string(name='cookie'),
  // cookie_timeout
  cookieTimeout?: long(name='cookie_timeout'),
  // established_timeout
  establishedTimeout?: long(name='established_timeout'),
  // gm_crypto_cert_iaas_id
  gmCryptoCertIaasId?: string(name='gm_crypto_cert_iaas_id'),
  // gm_sign_cert_iaas_id
  gmSignCertIaasId?: string(name='gm_sign_cert_iaas_id'),
  // health_monitor
  healthMonitor?: ListenerHealthMonitor(name='health_monitor'),
  // lb id
  id: string(name='id'),
  // listener_port
  listenerPort: long(name='listener_port'),
  // persist_timeout
  persistTimeout?: long(name='persist_timeout'),
  // scheduler
  scheduler?: string(name='scheduler'),
  // sticky_session_type
  stickySessionType?: string(name='sticky_session_type'),
  // tls_cipher_policy
  tlsCipherPolicy?: string(name='tls_cipher_policy'),
  // type
  type?: string(name='type'),
  // v_computer_group_id
  vComputerGroupId?: string(name='v_computer_group_id'),
  // x_forwarded_for
  xForwardedFor?: string(name='x_forwarded_for'),
}

model CreateLoadbalanceListenerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: string(name='data'),
}

/**
 * Description: 创建监听器
 * Summary: 创建监听器
 */
async function createLoadbalanceListener(request: CreateLoadbalanceListenerRequest): CreateLoadbalanceListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLoadbalanceListenerEx(request, headers, runtime);
}

/**
 * Description: 创建监听器
 * Summary: 创建监听器
 */
async function createLoadbalanceListenerEx(request: CreateLoadbalanceListenerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLoadbalanceListenerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.listener.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StopLoadbalanceListenerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // load_balancer_id
  loadBalancerId: string(name='load_balancer_id'),
  // listener_port
  listenerPort: long(name='listener_port'),
}

model StopLoadbalanceListenerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 停止监听器
 * Summary: 停止监听器
 */
async function stopLoadbalanceListener(request: StopLoadbalanceListenerRequest): StopLoadbalanceListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return stopLoadbalanceListenerEx(request, headers, runtime);
}

/**
 * Description: 停止监听器
 * Summary: 停止监听器
 */
async function stopLoadbalanceListenerEx(request: StopLoadbalanceListenerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StopLoadbalanceListenerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.listener.stop', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartLoadbalanceListenerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // load_balancer_id
  loadBalancerId: string(name='load_balancer_id'),
  // listener_port
  listenerPort: long(name='listener_port'),
}

model StartLoadbalanceListenerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 启动lb
 * Summary: 启动lb
 */
async function startLoadbalanceListener(request: StartLoadbalanceListenerRequest): StartLoadbalanceListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startLoadbalanceListenerEx(request, headers, runtime);
}

/**
 * Description: 启动lb
 * Summary: 启动lb
 */
async function startLoadbalanceListenerEx(request: StartLoadbalanceListenerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartLoadbalanceListenerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.listener.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateLoadbalanceListenerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // bandwidth
  bandwidth?: long(name='bandwidth'),
  // certificate_iaas_id
  certificateIaasId?: string(name='certificate_iaas_id'),
  // certificate_id
  certificateId?: string(name='certificate_id'),
  // cookie
  cookie?: string(name='cookie'),
  // cookie_timeout
  cookieTimeout?: long(name='cookie_timeout'),
  // established_timeout
  establishedTimeout?: long(name='established_timeout'),
  // gm_crypto_cert_iaas_id
  gmCryptoCertIaasId?: string(name='gm_crypto_cert_iaas_id'),
  // gm_sign_cert_iaas_id
  gmSignCertIaasId?: string(name='gm_sign_cert_iaas_id'),
  // health_monitor
  healthMonitor?: ListenerHealthMonitor(name='health_monitor'),
  // listener_port
  listenerPort: long(name='listener_port'),
  // load_balancer_id
  loadBalancerId: string(name='load_balancer_id'),
  // persist_timeout
  persistTimeout?: long(name='persist_timeout'),
  // scheduler
  scheduler?: string(name='scheduler'),
  // sticky_session_type
  stickySessionType?: string(name='sticky_session_type'),
  // tls_cipher_policy
  tlsCipherPolicy?: string(name='tls_cipher_policy'),
  // use_v_computer_group
  useVComputerGroup?: boolean(name='use_v_computer_group'),
  // v_computer_group_id
  vComputerGroupId?: string(name='v_computer_group_id'),
}

model UpdateLoadbalanceListenerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新listener配置
 * Summary: 更新listener配置
 */
async function updateLoadbalanceListener(request: UpdateLoadbalanceListenerRequest): UpdateLoadbalanceListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateLoadbalanceListenerEx(request, headers, runtime);
}

/**
 * Description: 更新listener配置
 * Summary: 更新listener配置
 */
async function updateLoadbalanceListenerEx(request: UpdateLoadbalanceListenerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateLoadbalanceListenerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.listener.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDiskspecRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // provider id
  providerId?: string(name='provider_id'),
  // enable
  enable?: boolean(name='enable'),
}

model QueryDiskspecResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // disk spec infos
  data?: [ DiskSpec ](name='data'),
}

/**
 * Description: 查询disk spec信息
 * Summary: 查询disk spec信息
 */
async function queryDiskspec(request: QueryDiskspecRequest): QueryDiskspecResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDiskspecEx(request, headers, runtime);
}

/**
 * Description: 查询disk spec信息
 * Summary: 查询disk spec信息
 */
async function queryDiskspecEx(request: QueryDiskspecRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDiskspecResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.diskspec.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryComputerquotaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace name
  workspace: string(name='workspace'),
}

model QueryComputerquotaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // computer quota info jsonstring
  data?: string(name='data'),
}

/**
 * Description: 查询computer quota
 * Summary: 查询computer quota
 */
async function queryComputerquota(request: QueryComputerquotaRequest): QueryComputerquotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryComputerquotaEx(request, headers, runtime);
}

/**
 * Description: 查询computer quota
 * Summary: 查询computer quota
 */
async function queryComputerquotaEx(request: QueryComputerquotaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryComputerquotaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.computerquota.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StopComputerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // computer ids
  ids: [ string ](name='ids'),
  // 后续版本必填
  workspaceId?: string(name='workspace_id'),
}

model StopComputerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // paas_request_id
  paasRequestId?: string(name='paas_request_id'),
}

/**
 * Description: 停止computer
 * Summary: 停止computer
 */
async function stopComputer(request: StopComputerRequest): StopComputerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return stopComputerEx(request, headers, runtime);
}

/**
 * Description: 停止computer
 * Summary: 停止computer
 */
async function stopComputerEx(request: StopComputerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StopComputerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.computer.stop', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RebootComputerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // ids
  ids: [ string ](name='ids'),
  // 后续必填
  workspaceId?: string(name='workspace_id'),
}

model RebootComputerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // paas_request_id
  paasRequestId?: string(name='paas_request_id'),
}

/**
 * Description: 重启computer
 * Summary: 重启computer
 */
async function rebootComputer(request: RebootComputerRequest): RebootComputerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return rebootComputerEx(request, headers, runtime);
}

/**
 * Description: 重启computer
 * Summary: 重启computer
 */
async function rebootComputerEx(request: RebootComputerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RebootComputerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.computer.reboot', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryComputerSecuritygroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // computer id
  id: string(name='id'),
}

model QueryComputerSecuritygroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // security group info
  data?: [ JoinedSecurityGroupVO ](name='data'),
}

/**
 * Description: 查询computer所属安全组
 * Summary: 查询computer所属安全组
 */
async function queryComputerSecuritygroup(request: QueryComputerSecuritygroupRequest): QueryComputerSecuritygroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryComputerSecuritygroupEx(request, headers, runtime);
}

/**
 * Description: 查询computer所属安全组
 * Summary: 查询computer所属安全组
 */
async function queryComputerSecuritygroupEx(request: QueryComputerSecuritygroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryComputerSecuritygroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.computer.securitygroup.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySecuritygroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace name
  workspace: string(name='workspace'),
  // current page
  currentPage?: long(name='current_page'),
  // page size
  pageSize?: long(name='page_size'),
}

model QuerySecuritygroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // currentPage
  currentPage?: long(name='current_page'),
  // pageSize
  pageSize?: long(name='page_size'),
  // totalCount
  totalCount?: long(name='total_count'),
  // security group infos
  data?: [ SecurityGroupVO ](name='data'),
}

/**
 * Description: 查询安全组信息
 * Summary: 查询安全组信息
 */
async function querySecuritygroup(request: QuerySecuritygroupRequest): QuerySecuritygroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySecuritygroupEx(request, headers, runtime);
}

/**
 * Description: 查询安全组信息
 * Summary: 查询安全组信息
 */
async function querySecuritygroupEx(request: QuerySecuritygroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySecuritygroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.securitygroup.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSecuritygroupPermissionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // PermissionVO
  permission: PermissionVO(name='permission'),
  // securityGroupId
  securityGroupId: string(name='security_group_id'),
}

model CreateSecuritygroupPermissionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: string(name='data'),
}

/**
 * Description: 创建安全组规则
 * Summary: 创建安全组规则
 */
async function createSecuritygroupPermission(request: CreateSecuritygroupPermissionRequest): CreateSecuritygroupPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSecuritygroupPermissionEx(request, headers, runtime);
}

/**
 * Description: 创建安全组规则
 * Summary: 创建安全组规则
 */
async function createSecuritygroupPermissionEx(request: CreateSecuritygroupPermissionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSecuritygroupPermissionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.securitygroup.permission.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySecuritygroupPermissionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // securityGroupId
  securityGroupId: string(name='security_group_id'),
  // autoRefresh
  autoRefresh?: boolean(name='auto_refresh'),
  // nicType
  nicType?: string(name='nic_type'),
  // direction
  direction?: string(name='direction'),
}

model QuerySecuritygroupPermissionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // securitygroup permission infos
  data?: [ PermissionVO ](name='data'),
}

/**
 * Description: 查询安全组规则信息
 * Summary: 查询安全组规则信息
 */
async function querySecuritygroupPermission(request: QuerySecuritygroupPermissionRequest): QuerySecuritygroupPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySecuritygroupPermissionEx(request, headers, runtime);
}

/**
 * Description: 查询安全组规则信息
 * Summary: 查询安全组规则信息
 */
async function querySecuritygroupPermissionEx(request: QuerySecuritygroupPermissionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySecuritygroupPermissionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.securitygroup.permission.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateLoadbalanaceSecurityipRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // lb id
  id: string(name='id'),
  // listener_port
  listenerPort: long(name='listener_port'),
  // access_control
  accessControl: boolean(name='access_control'),
}

model UpdateLoadbalanaceSecurityipResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新监听器的安全控制
 * Summary: 更新监听器的安全控制
 */
async function updateLoadbalanaceSecurityip(request: UpdateLoadbalanaceSecurityipRequest): UpdateLoadbalanaceSecurityipResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateLoadbalanaceSecurityipEx(request, headers, runtime);
}

/**
 * Description: 更新监听器的安全控制
 * Summary: 更新监听器的安全控制
 */
async function updateLoadbalanaceSecurityipEx(request: UpdateLoadbalanaceSecurityipRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateLoadbalanaceSecurityipResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalanace.securityip.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLoadbalanceSecurityipRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // lb id
  id: string(name='id'),
  // listener_port
  listenerPort: long(name='listener_port'),
  // ips
  ips: [ string ](name='ips'),
}

model CreateLoadbalanceSecurityipResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建lb监听器的安全控制
 * Summary: 创建lb监听器的安全控制
 */
async function createLoadbalanceSecurityip(request: CreateLoadbalanceSecurityipRequest): CreateLoadbalanceSecurityipResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLoadbalanceSecurityipEx(request, headers, runtime);
}

/**
 * Description: 创建lb监听器的安全控制
 * Summary: 创建lb监听器的安全控制
 */
async function createLoadbalanceSecurityipEx(request: CreateLoadbalanceSecurityipRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLoadbalanceSecurityipResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.securityip.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDatabaseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // id
  id: string(name='id'),
  // name
  name?: string(name='name'),
  // description
  description?: string(name='description'),
}

model UpdateDatabaseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 编辑数据库的基本属性
 * Summary: 编辑数据库的基本属性
 */
async function updateDatabase(request: UpdateDatabaseRequest): UpdateDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDatabaseEx(request, headers, runtime);
}

/**
 * Description: 编辑数据库的基本属性
 * Summary: 编辑数据库的基本属性
 */
async function updateDatabaseEx(request: UpdateDatabaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDatabaseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.database.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateLoadbalanceMountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // id
  id: string(name='id'),
  // mountMap
  mountMap?: [ MapStringToIntegerEntity ](name='mount_map'),
  // domain
  domain?: string(name='domain'),
  // 是否是同步操作
  isSync?: boolean(name='is_sync'),
}

model UpdateLoadbalanceMountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新后端权重
 * Summary: 更新后端权重
 */
async function updateLoadbalanceMount(request: UpdateLoadbalanceMountRequest): UpdateLoadbalanceMountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateLoadbalanceMountEx(request, headers, runtime);
}

/**
 * Description: 更新后端权重
 * Summary: 更新后端权重
 */
async function updateLoadbalanceMountEx(request: UpdateLoadbalanceMountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateLoadbalanceMountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.mount.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteLoadbalanceMountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // id
  id: string(name='id'),
  // computer_ids
  computerIds: [ string ](name='computer_ids'),
}

model DeleteLoadbalanceMountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除LB后端挂载主机
 * Summary: 删除LB后端挂载主机
 */
async function deleteLoadbalanceMount(request: DeleteLoadbalanceMountRequest): DeleteLoadbalanceMountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteLoadbalanceMountEx(request, headers, runtime);
}

/**
 * Description: 删除LB后端挂载主机
 * Summary: 删除LB后端挂载主机
 */
async function deleteLoadbalanceMountEx(request: DeleteLoadbalanceMountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteLoadbalanceMountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.mount.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRequestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // current_page
  currentPage?: long(name='current_page'),
  // ids
  ids?: [ string ](name='ids'),
  // max_time
  maxTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='max_time'),
  // min_time
  minTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='min_time'),
  // operators
  operators?: [ string ](name='operators'),
  // operator_type
  operatorType?: string(name='operator_type'),
  // page_size
  pageSize?: long(name='page_size'),
  // parent_ids
  parentIds?: [ string ](name='parent_ids'),
  // resource_ids
  resourceIds?: [ string ](name='resource_ids'),
  // resource_types
  resourceTypes?: [ string ](name='resource_types'),
  // statuses
  statuses?: [ string ](name='statuses'),
  // task_statuses
  taskStatuses?: [ string ](name='task_statuses'),
  // tokens
  tokens?: [ string ](name='tokens'),
  // types
  types?: [ string ](name='types'),
  // workspace_ids
  workspaceIds?: [ string ](name='workspace_ids'),
}

model QueryRequestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ RequestVO ](name='data'),
  // total_count
  totalCount?: long(name='total_count'),
  // current_page
  currentPage?: long(name='current_page'),
  // page_size
  pageSize?: long(name='page_size'),
}

/**
 * Description: 查询任务记录
 * Summary: 查询任务记录
 */
async function queryRequest(request: QueryRequestRequest): QueryRequestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRequestEx(request, headers, runtime);
}

/**
 * Description: 查询任务记录
 * Summary: 查询任务记录
 */
async function queryRequestEx(request: QueryRequestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRequestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.request.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetRequestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace
  workspace: string(name='workspace'),
  // id
  id: string(name='id'),
}

model GetRequestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: RequestVO(name='data'),
}

/**
 * Description: 获取单个request
 * Summary: 获取单个request
 */
async function getRequest(request: GetRequestRequest): GetRequestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getRequestEx(request, headers, runtime);
}

/**
 * Description: 获取单个request
 * Summary: 获取单个request
 */
async function getRequestEx(request: GetRequestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetRequestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.request.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRequestTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // current_page
  currentPage?: long(name='current_page'),
  // ids
  ids?: [ string ](name='ids'),
  // max_time
  maxTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='max_time'),
  // min_time
  minTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='min_time'),
  // operators
  operators?: [ string ](name='operators'),
  // operatorType
  operatorType?: string(name='operator_type'),
  // page_size
  pageSize?: long(name='page_size'),
  // requestIds
  requestIds?: [ string ](name='request_ids'),
  // request_statuses
  requestStatuses?: [ string ](name='request_statuses'),
  // request_types
  requestTypes?: [ string ](name='request_types'),
  // resource_ids
  resourceIds?: [ string ](name='resource_ids'),
  // resource_types
  resourceTypes?: [ string ](name='resource_types'),
  // statuses
  statuses?: [ string ](name='statuses'),
  // workspace_ids
  workspaceIds?: [ string ](name='workspace_ids'),
}

model QueryRequestTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ Task ](name='data'),
  // total_count
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询task
 * Summary: 查询task
 */
async function queryRequestTask(request: QueryRequestTaskRequest): QueryRequestTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRequestTaskEx(request, headers, runtime);
}

/**
 * Description: 查询task
 * Summary: 查询task
 */
async function queryRequestTaskEx(request: QueryRequestTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRequestTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.request.task.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTaskLogRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // execution_times
  executionTimes?: long(name='execution_times'),
  // task_id
  taskId: string(name='task_id'),
}

model QueryTaskLogResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ ResourceLog ](name='data'),
}

/**
 * Description: 查询任务日志
 * Summary: 查询任务日志
 */
async function queryTaskLog(request: QueryTaskLogRequest): QueryTaskLogResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTaskLogEx(request, headers, runtime);
}

/**
 * Description: 查询任务日志
 * Summary: 查询任务日志
 */
async function queryTaskLogEx(request: QueryTaskLogRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTaskLogResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.task.log.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListTenantworkspaceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // status
  status?: string(name='status'),
}

model ListTenantworkspaceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // worksapce列表
  data?: [ TenantWorkspace ](name='data'),
}

/**
 * Description: /webapi/apconsole/v2/tenant/0069443310/workspaces?status=CREATED
 * Summary: 列出 tenant workspace
 */
async function listTenantworkspace(request: ListTenantworkspaceRequest): ListTenantworkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listTenantworkspaceEx(request, headers, runtime);
}

/**
 * Description: /webapi/apconsole/v2/tenant/0069443310/workspaces?status=CREATED
 * Summary: 列出 tenant workspace
 */
async function listTenantworkspaceEx(request: ListTenantworkspaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTenantworkspaceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.tenantworkspace.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryTenantworkspaceFilterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // statuses
  statuses?: string(name='statuses'),
}

model QueryTenantworkspaceFilterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // workspaces
  data?: [ TenantWorkspace ](name='data'),
}

/**
 * Description: /webapi/tenants/0069443310/workspaces/filterStatus?projectUniqueId=0069443310&statuses=CREATED
 * Summary: 环境filterStatus
 */
async function queryTenantworkspaceFilter(request: QueryTenantworkspaceFilterRequest): QueryTenantworkspaceFilterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryTenantworkspaceFilterEx(request, headers, runtime);
}

/**
 * Description: /webapi/tenants/0069443310/workspaces/filterStatus?projectUniqueId=0069443310&statuses=CREATED
 * Summary: 环境filterStatus
 */
async function queryTenantworkspaceFilterEx(request: QueryTenantworkspaceFilterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTenantworkspaceFilterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.tenantworkspace.filter.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListRegionGroupbyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // status
  status?: string(name='status'),
}

model ListRegionGroupbyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // RegionWorkspaceVO
  data?: [ RegionWorkspaceVO ](name='data'),
}

/**
 * Description: group by region列表
 * Summary: group by region列表
 */
async function listRegionGroupby(request: ListRegionGroupbyRequest): ListRegionGroupbyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listRegionGroupbyEx(request, headers, runtime);
}

/**
 * Description: group by region列表
 * Summary: group by region列表
 */
async function listRegionGroupbyEx(request: ListRegionGroupbyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRegionGroupbyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.region.groupby.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryRequestFinaltaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // request_id
  id: string(name='id'),
  // workspace_id
  workspaceId: string(name='workspace_id'),
}

model QueryRequestFinaltaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ TaskVO ](name='data'),
}

/**
 * Description: 查询任务最后的步骤
 * Summary: 查询任务最后的步骤
 */
async function queryRequestFinaltask(request: QueryRequestFinaltaskRequest): QueryRequestFinaltaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryRequestFinaltaskEx(request, headers, runtime);
}

/**
 * Description: 查询任务最后的步骤
 * Summary: 查询任务最后的步骤
 */
async function queryRequestFinaltaskEx(request: QueryRequestFinaltaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryRequestFinaltaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.request.finaltask.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryFeatureRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // paas_region_id cafe的region_id，是一串数字
  paasRegionId: string(name='paas_region_id'),
  // project_id
  projectId: string(name='project_id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
  // 要查询的功能
  featureName?: string(name='feature_name'),
}

model QueryFeatureResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: string(name='data'),
}

/**
 * Description: 查询当前支持的功能
 * Summary: 查询当前支持的功能
 */
async function queryFeature(request: QueryFeatureRequest): QueryFeatureResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFeatureEx(request, headers, runtime);
}

/**
 * Description: 查询当前支持的功能
 * Summary: 查询当前支持的功能
 */
async function queryFeatureEx(request: QueryFeatureRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFeatureResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.feature.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartComputerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // computer ids
  ids: [ string ](name='ids'),
  // workspace_id，后续版本会变成必填
  workspaceId?: string(name='workspace_id'),
}

model StartComputerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // paas_request_id
  paasRequestId?: string(name='paas_request_id'),
}

/**
 * Description: start computer
 * Summary: start computer
 */
async function startComputer(request: StartComputerRequest): StartComputerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startComputerEx(request, headers, runtime);
}

/**
 * Description: start computer
 * Summary: start computer
 */
async function startComputerEx(request: StartComputerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartComputerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.computer.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartLoadbalanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // ids
  ids: [ string ](name='ids'),
}

model StartLoadbalanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 开启lb
 * Summary: 开启lb
 */
async function startLoadbalance(request: StartLoadbalanceRequest): StartLoadbalanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startLoadbalanceEx(request, headers, runtime);
}

/**
 * Description: 开启lb
 * Summary: 开启lb
 */
async function startLoadbalanceEx(request: StartLoadbalanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartLoadbalanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StopLoadbalanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // ids
  ids: [ string ](name='ids'),
}

model StopLoadbalanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 停止lb
 * Summary: 停止lb
 */
async function stopLoadbalance(request: StopLoadbalanceRequest): StopLoadbalanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return stopLoadbalanceEx(request, headers, runtime);
}

/**
 * Description: 停止lb
 * Summary: 停止lb
 */
async function stopLoadbalanceEx(request: StopLoadbalanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StopLoadbalanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.stop', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateLoadbalanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // id
  id: string(name='id'),
  // name
  name: string(name='name'),
  // description
  description: string(name='description'),
}

model UpdateLoadbalanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新lb信息
 * Summary: 更新lb信息
 */
async function updateLoadbalance(request: UpdateLoadbalanceRequest): UpdateLoadbalanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateLoadbalanceEx(request, headers, runtime);
}

/**
 * Description: 更新lb信息
 * Summary: 更新lb信息
 */
async function updateLoadbalanceEx(request: UpdateLoadbalanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateLoadbalanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddLoadbalanceAssignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app_id
  appId?: string(name='app_id'),
  // appServiceId
  appServiceId?: string(name='app_service_id'),
  // ids
  ids: [ string ](name='ids'),
}

model AddLoadbalanceAssignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 异步返回ID，用于查询当前任务的状态
  paasRequestId?: string(name='paas_request_id'),
}

/**
 * Description: 把LB分配给应用
 * Summary: 把LB分配给应用
 */
async function addLoadbalanceAssign(request: AddLoadbalanceAssignRequest): AddLoadbalanceAssignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addLoadbalanceAssignEx(request, headers, runtime);
}

/**
 * Description: 把LB分配给应用
 * Summary: 把LB分配给应用
 */
async function addLoadbalanceAssignEx(request: AddLoadbalanceAssignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddLoadbalanceAssignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.assign.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCertificateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_id
  workspaceId: string(name='workspace_id'),
  // zone_id
  zoneId: string(name='zone_id'),
  // provider_ids
  providerIds?: [ string ](name='provider_ids'),
}

model QueryCertificateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ BasicCertificate ](name='data'),
  // total_count
  totalCount?: long(name='total_count'),
}

/**
 * Description: 证书查询
 * Summary: 证书查询
 */
async function queryCertificate(request: QueryCertificateRequest): QueryCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCertificateEx(request, headers, runtime);
}

/**
 * Description: 证书查询
 * Summary: 证书查询
 */
async function queryCertificateEx(request: QueryCertificateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCertificateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.certificate.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCertificateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_id
  workspaceId: string(name='workspace_id'),
  // zoneId
  zoneId?: string(name='zone_id'),
  // name
  name: string(name='name'),
  // paas_region_id
  paasRegionId: string(name='paas_region_id'),
  // certificate
  certificate: string(name='certificate'),
  // privateKey
  privateKey: string(name='private_key'),
  // cert_type
  certType?: long(name='cert_type'),
  // 多provider时选填
  providerId?: string(name='provider_id'),
}

model CreateCertificateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: string(name='data'),
}

/**
 * Description: 创建证书
 * Summary: 创建证书
 */
async function createCertificate(request: CreateCertificateRequest): CreateCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCertificateEx(request, headers, runtime);
}

/**
 * Description: 创建证书
 * Summary: 创建证书
 */
async function createCertificateEx(request: CreateCertificateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCertificateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.certificate.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteCertificateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // id
  id: string(name='id'),
  // workspace_id
  workspaceId: string(name='workspace_id'),
  // zone_id
  zoneId: string(name='zone_id'),
  // 多provider时选填
  providerId?: string(name='provider_id'),
}

model DeleteCertificateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除证书
 * Summary: 删除证书
 */
async function deleteCertificate(request: DeleteCertificateRequest): DeleteCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteCertificateEx(request, headers, runtime);
}

/**
 * Description: 删除证书
 * Summary: 删除证书
 */
async function deleteCertificateEx(request: DeleteCertificateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteCertificateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.certificate.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DescribeUnifiedresourceVpcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 提供商类型
  providerType: string(name='provider_type'),
  // region
  region: string(name='region'),
  // 工作空间
  workspace: string(name='workspace'),
}

model DescribeUnifiedresourceVpcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // vpc对象
  vpc?: VPC(name='vpc'),
}

/**
 * Description: 查询已创建的VPC
 * Summary: 查询已创建的VPC
 */
async function describeUnifiedresourceVpc(request: DescribeUnifiedresourceVpcRequest): DescribeUnifiedresourceVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return describeUnifiedresourceVpcEx(request, headers, runtime);
}

/**
 * Description: 查询已创建的VPC
 * Summary: 查询已创建的VPC
 */
async function describeUnifiedresourceVpcEx(request: DescribeUnifiedresourceVpcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeUnifiedresourceVpcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.unifiedresource.vpc.describe', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListUnifiedresourceInstancefamiliesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // region id
  regionId: string(name='region_id'),
  // 提供商类型
  providerType: string(name='provider_type'),
}

model ListUnifiedresourceInstancefamiliesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 查询实例规格族列表
 * Summary: 查询实例规格族列表
 */
async function listUnifiedresourceInstancefamilies(request: ListUnifiedresourceInstancefamiliesRequest): ListUnifiedresourceInstancefamiliesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listUnifiedresourceInstancefamiliesEx(request, headers, runtime);
}

/**
 * Description: 查询实例规格族列表
 * Summary: 查询实例规格族列表
 */
async function listUnifiedresourceInstancefamiliesEx(request: ListUnifiedresourceInstancefamiliesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListUnifiedresourceInstancefamiliesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.unifiedresource.instancefamilies.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListUnifiedresourceInstancetypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // region name
  region: string(name='region'),
}

model ListUnifiedresourceInstancetypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // instancetype详细信息，jsonstring
  data?: string(name='data'),
}

/**
 * Description: 查询所有实例规格详细信息
 * Summary: 查询实例规格资源
 */
async function listUnifiedresourceInstancetype(request: ListUnifiedresourceInstancetypeRequest): ListUnifiedresourceInstancetypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listUnifiedresourceInstancetypeEx(request, headers, runtime);
}

/**
 * Description: 查询所有实例规格详细信息
 * Summary: 查询实例规格资源
 */
async function listUnifiedresourceInstancetypeEx(request: ListUnifiedresourceInstancetypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListUnifiedresourceInstancetypeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.unifiedresource.instancetype.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryComputerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // computer id
  id: string(name='id'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model QueryComputerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // computer info
  data?: Computer(name='data'),
}

/**
 * Description: query cas computer detail info by id
 * Summary: 获取单个computer的详细信息
 */
async function queryComputer(request: QueryComputerRequest): QueryComputerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryComputerEx(request, headers, runtime);
}

/**
 * Description: query cas computer detail info by id
 * Summary: 获取单个computer的详细信息
 */
async function queryComputerEx(request: QueryComputerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryComputerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.computer.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListResourceComputertypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // region name
  region: string(name='region'),
  // zone name
  zone?: string(name='zone'),
  // 实例规格族
  instanceTypeFamily: string(name='instance_type_family'),
}

model ListResourceComputertypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可用computer type列表
  data?: [ ComputerType ](name='data'),
}

/**
 * Description: 列出iaas提供商在当前可用区的所有可使用的实例类型
 * Summary: 查询可用实例类型
 */
async function listResourceComputertype(request: ListResourceComputertypeRequest): ListResourceComputertypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listResourceComputertypeEx(request, headers, runtime);
}

/**
 * Description: 列出iaas提供商在当前可用区的所有可使用的实例类型
 * Summary: 查询可用实例类型
 */
async function listResourceComputertypeEx(request: ListResourceComputertypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListResourceComputertypeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resource.computertype.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListResourceDiskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 要查询的云盘或本地盘类型。取值范围：
  // 
  // all：同时查询系统盘与数据盘
  // system：只查询系统盘
  // data：只查询数据盘
  // 默认值：all。
  diskType?: string(name='disk_type'),
  // 实例规格
  instanceType: string(name='instance_type'),
  // region name
  region: string(name='region'),
}

model ListResourceDiskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // disk infos
  data?: [ Disk ](name='data'),
}

/**
 * Description: 查询ecs disk 列表
 * Summary: 查询ecs disk info
 */
async function listResourceDisk(request: ListResourceDiskRequest): ListResourceDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listResourceDiskEx(request, headers, runtime);
}

/**
 * Description: 查询ecs disk 列表
 * Summary: 查询ecs disk info
 */
async function listResourceDiskEx(request: ListResourceDiskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListResourceDiskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resource.disk.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListResourceComputertypefamilyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // region name
  region: string(name='region'),
}

model ListResourceComputertypefamilyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // computer 规格族
  data?: [ ComputerTypeFamily ](name='data'),
}

/**
 * Description: 查询云服务器规格族列表
 * Summary: 查询云服务器规格族列表
 */
async function listResourceComputertypefamily(request: ListResourceComputertypefamilyRequest): ListResourceComputertypefamilyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listResourceComputertypefamilyEx(request, headers, runtime);
}

/**
 * Description: 查询云服务器规格族列表
 * Summary: 查询云服务器规格族列表
 */
async function listResourceComputertypefamilyEx(request: ListResourceComputertypefamilyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListResourceComputertypefamilyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resource.computertypefamily.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListUnifiedresourceVswitchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // region name
  region: string(name='region'),
  // 要查询的交换机所属VPC的ID
  vpcId?: string(name='vpc_id'),
  // 要查询的交换机的ID
  vSwitchId?: string(name='v_switch_id'),
  // 最大50
  pageSize?: long(name='page_size'),
  // 以1为起点
  pageNumber?: long(name='page_number'),
}

model ListUnifiedresourceVswitchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交换机的详细信息
  data?: [ VSwitch ](name='data'),
  // 总量
  totalCount?: long(name='total_count'),
}

/**
 * Description: 查询交换机信息
 * Summary: 查询交换机信息
 */
async function listUnifiedresourceVswitch(request: ListUnifiedresourceVswitchRequest): ListUnifiedresourceVswitchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listUnifiedresourceVswitchEx(request, headers, runtime);
}

/**
 * Description: 查询交换机信息
 * Summary: 查询交换机信息
 */
async function listUnifiedresourceVswitchEx(request: ListUnifiedresourceVswitchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListUnifiedresourceVswitchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.unifiedresource.vswitch.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListUnifiedresourceVpcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // region name
  region: string(name='region'),
}

model ListUnifiedresourceVpcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // vpc list
  data?: [ VPC ](name='data'),
}

/**
 * Description: 查询当前region的vpc列表
 * Summary: 查询region vpc列表
 */
async function listUnifiedresourceVpc(request: ListUnifiedresourceVpcRequest): ListUnifiedresourceVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listUnifiedresourceVpcEx(request, headers, runtime);
}

/**
 * Description: 查询当前region的vpc列表
 * Summary: 查询region vpc列表
 */
async function listUnifiedresourceVpcEx(request: ListUnifiedresourceVpcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListUnifiedresourceVpcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.unifiedresource.vpc.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportResourceVpcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // region identity
  region?: string(name='region'),
  // vpc iaas id
  vpcId: string(name='vpc_id'),
  // workspace identity
  workspace: string(name='workspace'),
  // vrouter id
  vrouterId: string(name='vrouter_id'),
  // vpc name
  vpcName: string(name='vpc_name'),
  // cidr block
  cidrBlock?: string(name='cidr_block'),
  // paas_region_id
  paasRegionId: string(name='paas_region_id'),
}

model ImportResourceVpcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // vpc关联到workspace是否成功
  success?: boolean(name='success'),
}

/**
 * Description: 导入vpc到workspace
 * Summary: 导入vpc
 */
async function importResourceVpc(request: ImportResourceVpcRequest): ImportResourceVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importResourceVpcEx(request, headers, runtime);
}

/**
 * Description: 导入vpc到workspace
 * Summary: 导入vpc
 */
async function importResourceVpcEx(request: ImportResourceVpcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportResourceVpcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resource.vpc.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteResourceRuleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 传输层协议。参数值大小写敏感。取值范围：
  // 
  // icmp
  // gre
  // tcp
  // udp
  // all：支持所有协议
  ipProtocol: string(name='ip_protocol'),
  // 目的端安全组开放的传输层协议相关的端口范围。取值范围：
  // 
  // TCP/UDP协议：取值范围为1~65535。使用斜线（/）隔开起始端口和终止端口。例如：1/200
  // ICMP协议：-1/-1
  // GRE协议：-1/-1
  // all：-1/-1
  portRange: string(name='port_range'),
  // CN-HANGZHOU_FINANCE
  region: string(name='region'),
  // 枚举值：
  // ingress：入口规则
  // egress：出口规则
  ruleType: string(name='rule_type'),
  // 目的端安全组ID。
  securityGroupId: string(name='security_group_id'),
  // 源端IP地址范围。支持CIDR格式和IPv4格式的IP地址范围。默认值：0.0.0.0/0
  sourceCidrIp?: string(name='source_cidr_ip'),
  // 目的端IP地址范围。支持CIDR格式和IPv4格式的IP地址范围。默认值：0.0.0.0/0
  destCidrIp?: string(name='dest_cidr_ip'),
}

model DeleteResourceRuleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 操作是否成功
  success?: boolean(name='success'),
}

/**
 * Description: 删除安全组规则
 * Summary: 删除安全组规则
 */
async function deleteResourceRule(request: DeleteResourceRuleRequest): DeleteResourceRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteResourceRuleEx(request, headers, runtime);
}

/**
 * Description: 删除安全组规则
 * Summary: 删除安全组规则
 */
async function deleteResourceRuleEx(request: DeleteResourceRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteResourceRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resource.rule.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListRouteEntryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 所属地域
  region: string(name='region'),
  // 要查询的路由条目所属路由表的所属路由器的ID。
  routerId: string(name='router_id'),
}

model ListRouteEntryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 路由条目信息
  data?: [ VRouteEntry ](name='data'),
}

/**
 * Description: 查询路由表条目列表
 * Summary: 查询路由表条目列表
 */
async function listRouteEntry(request: ListRouteEntryRequest): ListRouteEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listRouteEntryEx(request, headers, runtime);
}

/**
 * Description: 查询路由表条目列表
 * Summary: 查询路由表条目列表
 */
async function listRouteEntryEx(request: ListRouteEntryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRouteEntryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.route.entry.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAvailableDiskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // region name
  region: string(name='region'),
  // 磁盘类型：
  // SystemDisk;
  // DataDisk
  diskType: string(name='disk_type'),
  // 实例规格
  instanceType: string(name='instance_type'),
}

model ListAvailableDiskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 磁盘类型详细信息，jsonstring
  data?: string(name='data'),
}

/**
 * Description: 查询可用disk资源详细信息
 * Summary: 查询可用disk资源详细信息
 */
async function listAvailableDisk(request: ListAvailableDiskRequest): ListAvailableDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAvailableDiskEx(request, headers, runtime);
}

/**
 * Description: 查询可用disk资源详细信息
 * Summary: 查询可用disk资源详细信息
 */
async function listAvailableDiskEx(request: ListAvailableDiskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAvailableDiskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.available.disk.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAvailableInstancetypeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // region name
  region: string(name='region'),
}

model ListAvailableInstancetypeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 实例类型详细信息，jsonstring
  data?: string(name='data'),
}

/**
 * Description: 查询可用实例类型信息
 * Summary: 查询可用实例类型信息
 */
async function listAvailableInstancetype(request: ListAvailableInstancetypeRequest): ListAvailableInstancetypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAvailableInstancetypeEx(request, headers, runtime);
}

/**
 * Description: 查询可用实例类型信息
 * Summary: 查询可用实例类型信息
 */
async function listAvailableInstancetypeEx(request: ListAvailableInstancetypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAvailableInstancetypeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.available.instancetype.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryResourcemetaNodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace name
  workspace: string(name='workspace'),
}

model QueryResourcemetaNodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // node meta list jsonstring
  data?: string(name='data'),
}

/**
 * Description: 查询node meta数据
 * Summary: 查询node meta数据
 */
async function queryResourcemetaNode(request: QueryResourcemetaNodeRequest): QueryResourcemetaNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryResourcemetaNodeEx(request, headers, runtime);
}

/**
 * Description: 查询node meta数据
 * Summary: 查询node meta数据
 */
async function queryResourcemetaNodeEx(request: QueryResourcemetaNodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryResourcemetaNodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resourcemeta.node.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryResourcemetaAppserviceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace name
  workspace: string(name='workspace'),
  // app_names
  appNames?: [ string ](name='app_names'),
}

model QueryResourcemetaAppserviceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // app service metadata json
  data?: string(name='data'),
}

/**
 * Description: 查询应用服务meta数据
 * Summary: 查询应用服务meta数据
 */
async function queryResourcemetaAppservice(request: QueryResourcemetaAppserviceRequest): QueryResourcemetaAppserviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryResourcemetaAppserviceEx(request, headers, runtime);
}

/**
 * Description: 查询应用服务meta数据
 * Summary: 查询应用服务meta数据
 */
async function queryResourcemetaAppserviceEx(request: QueryResourcemetaAppserviceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryResourcemetaAppserviceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.resourcemeta.appservice.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncComputerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间
  workspaceId: string(name='workspace_id'),
  // computer_id
  computerId: string(name='computer_id'),
}

model SyncComputerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 调用底层API同步状态，如果底层是删除的，则直接置为删除
 * Summary: 同步机器状态
 */
async function syncComputer(request: SyncComputerRequest): SyncComputerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncComputerEx(request, headers, runtime);
}

/**
 * Description: 调用底层API同步状态，如果底层是删除的，则直接置为删除
 * Summary: 同步机器状态
 */
async function syncComputerEx(request: SyncComputerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncComputerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.computer.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncLoadbalanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_id
  workspaceId: string(name='workspace_id'),
  // lb_id
  lbId: string(name='lb_id'),
}

model SyncLoadbalanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 同步LB状态
 * Summary: 同步LB状态
 */
async function syncLoadbalance(request: SyncLoadbalanceRequest): SyncLoadbalanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncLoadbalanceEx(request, headers, runtime);
}

/**
 * Description: 同步LB状态
 * Summary: 同步LB状态
 */
async function syncLoadbalanceEx(request: SyncLoadbalanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncLoadbalanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateComputerInfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // name
  name: string(name='name'),
  // description
  description?: string(name='description'),
  // workspace_id
  workspaceId: string(name='workspace_id'),
  // computer_id
  computerId: string(name='computer_id'),
}

model UpdateComputerInfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新机器基本信息
 * Summary: 更新机器基本信息
 */
async function updateComputerInfo(request: UpdateComputerInfoRequest): UpdateComputerInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateComputerInfoEx(request, headers, runtime);
}

/**
 * Description: 更新机器基本信息
 * Summary: 更新机器基本信息
 */
async function updateComputerInfoEx(request: UpdateComputerInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateComputerInfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.computer.info.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetComputerAssignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // app_id
  appId?: string(name='app_id'),
  // 应用服务实例
  appServiceId: string(name='app_service_id'),
  // computer_ids
  computerIds: [ string ](name='computer_ids'),
  // workspace_id
  workspaceId: string(name='workspace_id'),
  // cell信息
  cell?: [ MapStringToStringEntity ](name='cell'),
}

model SetComputerAssignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 将机器分配给应用
 * Summary: 将机器分配给应用
 */
async function setComputerAssign(request: SetComputerAssignRequest): SetComputerAssignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setComputerAssignEx(request, headers, runtime);
}

/**
 * Description: 将机器分配给应用
 * Summary: 将机器分配给应用
 */
async function setComputerAssignEx(request: SetComputerAssignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetComputerAssignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.computer.assign.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecRequestTaskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // rmc_request_id，注意区分OPENAPI自身的request_id
  rmcRequestId: string(name='rmc_request_id'),
  // task_ids
  taskIds: [ string ](name='task_ids'),
}

model ExecRequestTaskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 执行任务
 * Summary: 执行任务
 */
async function execRequestTask(request: ExecRequestTaskRequest): ExecRequestTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execRequestTaskEx(request, headers, runtime);
}

/**
 * Description: 执行任务
 * Summary: 执行任务
 */
async function execRequestTaskEx(request: ExecRequestTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecRequestTaskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.request.task.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ReinitDiskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // ids
  ids: [ string ](name='ids'),
  // workspace_id
  workspaceId?: string(name='workspace_id'),
}

model ReinitDiskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 重新初始化机器
 * Summary: 重新初始化机器
 */
async function reinitDisk(request: ReinitDiskRequest): ReinitDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return reinitDiskEx(request, headers, runtime);
}

/**
 * Description: 重新初始化机器
 * Summary: 重新初始化机器
 */
async function reinitDiskEx(request: ReinitDiskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReinitDiskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.disk.reinit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDiskStrategyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // delete_with_computer
  deleteWithComputer?: boolean(name='delete_with_computer'),
  // delete_auto_snapshot
  deleteAutoSnapshot?: boolean(name='delete_auto_snapshot'),
  // enable_auto_snapshot
  enableAutoSnapshot?: boolean(name='enable_auto_snapshot'),
  // ids
  ids: [ string ](name='ids'),
}

model UpdateDiskStrategyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 修改磁盘策略
 * Summary: 修改磁盘策略
 */
async function updateDiskStrategy(request: UpdateDiskStrategyRequest): UpdateDiskStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDiskStrategyEx(request, headers, runtime);
}

/**
 * Description: 修改磁盘策略
 * Summary: 修改磁盘策略
 */
async function updateDiskStrategyEx(request: UpdateDiskStrategyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDiskStrategyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.disk.strategy.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLoadbalanceVcomputergroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // load_balancer_id
  loadBalancerId: string(name='load_balancer_id'),
  // name
  name: string(name='name'),
  // computer_ids
  computerIds: [ string ](name='computer_ids'),
  // ports
  ports: [ long ](name='ports'),
  // weights
  weights: [ long ](name='weights'),
  // is_eip
  isEip?: boolean(name='is_eip'),
  // eips
  eips?: [ string ](name='eips'),
}

model CreateLoadbalanceVcomputergroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // request_ids
  data?: [ string ](name='data'),
}

/**
 * Description: 创建虚拟服务器组
 * Summary: 创建虚拟服务器组
 */
async function createLoadbalanceVcomputergroup(request: CreateLoadbalanceVcomputergroupRequest): CreateLoadbalanceVcomputergroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLoadbalanceVcomputergroupEx(request, headers, runtime);
}

/**
 * Description: 创建虚拟服务器组
 * Summary: 创建虚拟服务器组
 */
async function createLoadbalanceVcomputergroupEx(request: CreateLoadbalanceVcomputergroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLoadbalanceVcomputergroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.vcomputergroup.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateLoadbalanceVcomputergroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // v_computergroup_id
  vComputergroupId: string(name='v_computergroup_id'),
  // is_eip
  isEip?: boolean(name='is_eip'),
  // eips
  eips: [ string ](name='eips'),
  // computer_ids
  computerIds?: [ string ](name='computer_ids'),
  // weights
  weights: [ long ](name='weights'),
  // ports
  ports: [ long ](name='ports'),
  // 是否只是调整权重，不增删后端服务器
  updateWeightOnly?: boolean(name='update_weight_only'),
}

model UpdateLoadbalanceVcomputergroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 在VComputerGroup里更新后端服务器
 * Summary: 增加VCompute
 */
async function updateLoadbalanceVcomputergroup(request: UpdateLoadbalanceVcomputergroupRequest): UpdateLoadbalanceVcomputergroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateLoadbalanceVcomputergroupEx(request, headers, runtime);
}

/**
 * Description: 在VComputerGroup里更新后端服务器
 * Summary: 增加VCompute
 */
async function updateLoadbalanceVcomputergroupEx(request: UpdateLoadbalanceVcomputergroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateLoadbalanceVcomputergroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.vcomputergroup.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteLoadbalanceVcomputergroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 虚拟服务器ID，PAAS ID非IAAS ID
  vComputerGroupId: string(name='v_computer_group_id'),
}

model DeleteLoadbalanceVcomputergroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // paas_request_id
  paasRequestId?: string(name='paas_request_id'),
}

/**
 * Description: 删除VComputerGroup
 * Summary: 删除VComputerGroup
 */
async function deleteLoadbalanceVcomputergroup(request: DeleteLoadbalanceVcomputergroupRequest): DeleteLoadbalanceVcomputergroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteLoadbalanceVcomputergroupEx(request, headers, runtime);
}

/**
 * Description: 删除VComputerGroup
 * Summary: 删除VComputerGroup
 */
async function deleteLoadbalanceVcomputergroupEx(request: DeleteLoadbalanceVcomputergroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteLoadbalanceVcomputergroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.vcomputergroup.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddLoadbalanceVcomputergroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_id
  workspaceId: string(name='workspace_id'),
  // v_computer_group_id
  vComputerGroupId: string(name='v_computer_group_id'),
  // is_eip
  isEip?: boolean(name='is_eip'),
  // computer 的id数组
  computerIds?: [ string ](name='computer_ids'),
  // 权重
  weights: [ long ](name='weights'),
  // ports
  ports: [ string ](name='ports'),
  // 当is_eip时必填
  eips?: [ string ](name='eips'),
}

model AddLoadbalanceVcomputergroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // paas_request_id
  paasRequestId?: string(name='paas_request_id'),
}

/**
 * Description: 在虚拟服务器组中增加服务器
 * Summary: 在虚拟服务器组中增加服务器
 */
async function addLoadbalanceVcomputergroup(request: AddLoadbalanceVcomputergroupRequest): AddLoadbalanceVcomputergroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addLoadbalanceVcomputergroupEx(request, headers, runtime);
}

/**
 * Description: 在虚拟服务器组中增加服务器
 * Summary: 在虚拟服务器组中增加服务器
 */
async function addLoadbalanceVcomputergroupEx(request: AddLoadbalanceVcomputergroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddLoadbalanceVcomputergroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.vcomputergroup.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RemoveLoadbalanceVcomputergroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // computer_ids
  computerIds: [ string ](name='computer_ids'),
  // 后端是否是弹性网卡
  isEip?: boolean(name='is_eip'),
  // ports
  ports: [ long ](name='ports'),
  // weights
  weights: [ long ](name='weights'),
  // eips
  eips?: [ string ](name='eips'),
  // v_computer_group_id
  vComputerGroupId: string(name='v_computer_group_id'),
  // workspace_id
  workspaceId: string(name='workspace_id'),
}

model RemoveLoadbalanceVcomputergroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // paas_request_id
  paasRequestId?: string(name='paas_request_id'),
}

/**
 * Description: 从虚拟服务器组中删除服务器
 * Summary: 从虚拟服务器组中删除服务器
 */
async function removeLoadbalanceVcomputergroup(request: RemoveLoadbalanceVcomputergroupRequest): RemoveLoadbalanceVcomputergroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return removeLoadbalanceVcomputergroupEx(request, headers, runtime);
}

/**
 * Description: 从虚拟服务器组中删除服务器
 * Summary: 从虚拟服务器组中删除服务器
 */
async function removeLoadbalanceVcomputergroupEx(request: RemoveLoadbalanceVcomputergroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveLoadbalanceVcomputergroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.loadbalance.vcomputergroup.remove', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddDnsRecordsetRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // name
  name: string(name='name'),
  // description
  description?: string(name='description'),
  // type: 记录类型，默认为A, 仅支持 A, CName, 见DnsRecordSetType
  type: string(name='type'),
  // type: 类型, PUBLIC(外部域名) 或者 PRIVATE (域名) 见DnsNetworkType
  dnsNetworkType?: string(name='dns_network_type'),
  // tenant_id
  tenantId: string(name='tenant_id'),
  // dns_records
  dnsRecords: [ DnsRecordParam ](name='dns_records'),
}

model AddDnsRecordsetResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // xxxxxxx
  data?: string(name='data'),
}

/**
 * Description: 添加域名记录
 * Summary: 添加域名记录
 */
async function addDnsRecordset(request: AddDnsRecordsetRequest): AddDnsRecordsetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addDnsRecordsetEx(request, headers, runtime);
}

/**
 * Description: 添加域名记录
 * Summary: 添加域名记录
 */
async function addDnsRecordsetEx(request: AddDnsRecordsetRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddDnsRecordsetResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.dns.recordset.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDnsRecordRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // dns_recordset_id
  dnsRecordsetId: string(name='dns_recordset_id'),
  // dns_record_ip
  dnsRecordIp: string(name='dns_record_ip'),
  // workspace_id
  workspaceId: string(name='workspace_id'),
}

model DeleteDnsRecordResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除一条DNS记录
 * Summary: 删除一条DNS记录
 */
async function deleteDnsRecord(request: DeleteDnsRecordRequest): DeleteDnsRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDnsRecordEx(request, headers, runtime);
}

/**
 * Description: 删除一条DNS记录
 * Summary: 删除一条DNS记录
 */
async function deleteDnsRecordEx(request: DeleteDnsRecordRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDnsRecordResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.dns.record.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDnsRecordsetRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_id
  workspaceId: string(name='workspace_id'),
  // resource_type
  resourceType?: string(name='resource_type'),
  // ip
  // 
  ip?: string(name='ip'),
  // dns_recordset_name
  dnsRecordsetName?: string(name='dns_recordset_name'),
  // resource_name
  resourceName?: string(name='resource_name'),
  // resource_iaas_ids
  resourceIaasIds?: [ string ](name='resource_iaas_ids'),
  // dns_recordset_ids
  dnsRecordsetIds?: [ string ](name='dns_recordset_ids'),
  // page_size
  pageSize: long(name='page_size'),
  // current_page
  currentPage: long(name='current_page'),
}

model QueryDnsRecordsetResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ WorkspaceDnsRecordset ](name='data'),
  // total_count
  totalCount?: long(name='total_count'),
  // page_size
  pageSize?: long(name='page_size'),
  // current_page
  currentPage?: long(name='current_page'),
}

/**
 * Description: 查询当前recordset
 * Summary: 查询当前recordset
 */
async function queryDnsRecordset(request: QueryDnsRecordsetRequest): QueryDnsRecordsetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDnsRecordsetEx(request, headers, runtime);
}

/**
 * Description: 查询当前recordset
 * Summary: 查询当前recordset
 */
async function queryDnsRecordsetEx(request: QueryDnsRecordsetRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDnsRecordsetResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.dns.recordset.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindDnsProviderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_id
  workspaceId: string(name='workspace_id'),
  // 部分环境绑定到机房机房
  zoneId?: string(name='zone_id'),
  // dns_provider_id
  dnsProviderId: string(name='dns_provider_id'),
  // default_sub_domain_name
  defaultSubDomainName?: string(name='default_sub_domain_name'),
}

model BindDnsProviderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: workspace绑定指定DNS服务商
 * Summary: workspace绑定指定DNS服务商
 */
async function bindDnsProvider(request: BindDnsProviderRequest): BindDnsProviderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindDnsProviderEx(request, headers, runtime);
}

/**
 * Description: workspace绑定指定DNS服务商
 * Summary: workspace绑定指定DNS服务商
 */
async function bindDnsProviderEx(request: BindDnsProviderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindDnsProviderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.dns.provider.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListDnsProviderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // regionId
  regionId: string(name='region_id'),
  // zone_id
  zoneId?: string(name='zone_id'),
}

model ListDnsProviderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ IaasDnsProvider ](name='data'),
}

/**
 * Description: 获取当前环境的DNS provider
 * Summary: 获取当前环境的DNS provider
 */
async function listDnsProvider(request: ListDnsProviderRequest): ListDnsProviderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listDnsProviderEx(request, headers, runtime);
}

/**
 * Description: 获取当前环境的DNS provider
 * Summary: 获取当前环境的DNS provider
 */
async function listDnsProviderEx(request: ListDnsProviderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDnsProviderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.dns.provider.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryProviderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // LB，COMPUTE，VPC,OBJECT_STORAGE等
  resourceType: string(name='resource_type'),
  // paas_region_id
  paasRegionId: string(name='paas_region_id'),
}

model QueryProviderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ IaasConnMetadata ](name='data'),
}

/**
 * Description: 查询当前环境资源供应商信息
 * Summary: 查询当前环境资源供应商信息
 */
async function queryProvider(request: QueryProviderRequest): QueryProviderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryProviderEx(request, headers, runtime);
}

/**
 * Description: 查询当前环境资源供应商信息
 * Summary: 查询当前环境资源供应商信息
 */
async function queryProviderEx(request: QueryProviderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryProviderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.provider.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDnsWorkspaceproviderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_id
  workspaceId: string(name='workspace_id'),
  // zoneId
  zoneId?: string(name='zone_id'),
  // dns_network_type
  dnsNetworkType: string(name='dns_network_type'),
}

model GetDnsWorkspaceproviderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ WorkspaceDnsProvider ](name='data'),
}

/**
 * Description: 获取当前工作空间的DNSProvider
 * Summary: 获取当前工作空间的DNSProvider
 */
async function getDnsWorkspaceprovider(request: GetDnsWorkspaceproviderRequest): GetDnsWorkspaceproviderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDnsWorkspaceproviderEx(request, headers, runtime);
}

/**
 * Description: 获取当前工作空间的DNSProvider
 * Summary: 获取当前工作空间的DNSProvider
 */
async function getDnsWorkspaceproviderEx(request: GetDnsWorkspaceproviderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDnsWorkspaceproviderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.dns.workspaceprovider.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateUniworkspacegroupRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 工作空间组名称
  name: string(name='name'),
  // 显示名字，可以中文
  displayName: string(name='display_name'),
  // 租户ID
  tenantId: string(name='tenant_id'),
  // namespace
  namespace?: string(name='namespace'),
  // json格式的字符串，工作空间组属性 
  properties?: string(name='properties'),
  // release_mode
  releaseMode?: string(name='release_mode'),
  // 工作空间的名称
  workspaces: [ string ](name='workspaces'),
  // workspaces_create_param
  workspacesCreateParam: [ string ](name='workspaces_create_param'),
  // cell_group_create_params
  cellGroupCreateParams?: [ string ](name='cell_group_create_params'),
  // cell_create_params
  cellCreateParams?: [ string ](name='cell_create_params'),
  // 域名前缀
  domainSuffix?: string(name='domain_suffix'),
  // VPC创建参数
  vpcCreateParams: [ string ](name='vpc_create_params'),
  // 导入的VPCIDs
  importVpcs?: [ string ](name='import_vpcs'),
}

model CreateUniworkspacegroupResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // paas_request_id，异步任务ID
  paasRequestId?: string(name='paas_request_id'),
}

/**
 * Description: [异步]创建工作空间组，包括了VPC，交换机，单元化架构的一体化创建
 * Summary: [异步]创建工作空间组
 */
async function createUniworkspacegroup(request: CreateUniworkspacegroupRequest): CreateUniworkspacegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createUniworkspacegroupEx(request, headers, runtime);
}

/**
 * Description: [异步]创建工作空间组，包括了VPC，交换机，单元化架构的一体化创建
 * Summary: [异步]创建工作空间组
 */
async function createUniworkspacegroupEx(request: CreateUniworkspacegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateUniworkspacegroupResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.uniworkspacegroup.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ImportMiddlewareclusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_id
  workspaceId: string(name='workspace_id'),
  // cluster_id，OSP上的ID
  clusterId: string(name='cluster_id'),
}

model ImportMiddlewareclusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 导入一个中间件集群
 * Summary: 导入一个中间件集群
 */
async function importMiddlewarecluster(request: ImportMiddlewareclusterRequest): ImportMiddlewareclusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return importMiddlewareclusterEx(request, headers, runtime);
}

/**
 * Description: 导入一个中间件集群
 * Summary: 导入一个中间件集群
 */
async function importMiddlewareclusterEx(request: ImportMiddlewareclusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportMiddlewareclusterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.middlewarecluster.import', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMiddlewareclusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_id 和workspace_group_id至少要填一个
  workspaceId?: string(name='workspace_id'),
  // cluster_id OSP上的ID
  clusterId?: string(name='cluster_id'),
  // cluster_name
  clusterName?: string(name='cluster_name'),
  // workspace_group_name和workspace_id必须至少传入一个
  workspaceGroupName?: string(name='workspace_group_name'),
  // app_service_id
  appServiceId?: string(name='app_service_id'),
}

model QueryMiddlewareclusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ MiddlewareClusterInstance ](name='data'),
}

/**
 * Description: 查询当前工作空间中间件集群
 * Summary: 查询当前工作空间中间件集群
 */
async function queryMiddlewarecluster(request: QueryMiddlewareclusterRequest): QueryMiddlewareclusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMiddlewareclusterEx(request, headers, runtime);
}

/**
 * Description: 查询当前工作空间中间件集群
 * Summary: 查询当前工作空间中间件集群
 */
async function queryMiddlewareclusterEx(request: QueryMiddlewareclusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMiddlewareclusterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.middlewarecluster.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RemoveMiddlewareclusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // workspace_id
  workspaceId: string(name='workspace_id'),
  // cluster_id
  clusterId: string(name='cluster_id'),
}

model RemoveMiddlewareclusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 移除一个中间件集群
 * Summary: 移除一个中间件集群
 */
async function removeMiddlewarecluster(request: RemoveMiddlewareclusterRequest): RemoveMiddlewareclusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return removeMiddlewareclusterEx(request, headers, runtime);
}

/**
 * Description: 移除一个中间件集群
 * Summary: 移除一个中间件集群
 */
async function removeMiddlewareclusterEx(request: RemoveMiddlewareclusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveMiddlewareclusterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.middlewarecluster.remove', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryQuotaInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // quota类的ID，请使用Quota API查询获取
  quotaId?: string(name='quota_id'),
  // 接入配额的时候,在配额中注册的资源标识
  resourceIdentity?: string(name='resource_identity'),
  // 当状态为INFINITE,即无限大.当状态为INFINITESIMAL时,即为无限小
  status?: string(name='status'),
  // 上限值
  hardLimit?: long(name='hard_limit'),
  // in_use
  inUse?: long(name='in_use'),
  // 维度实例组合ID
  dimInstanceGroupId?: string(name='dim_instance_group_id'),
  // page_number
  pageNumber: long(name='page_number'),
  // page_size
  pageSize: long(name='page_size'),
  // 维度标记
  dimIdentity?: string(name='dim_identity'),
  // 维度的值
  dimInsValue?: string(name='dim_ins_value'),
}

model QueryQuotaInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回值
  data?: [ SingleDimGroupQuotaInstance ](name='data'),
  // total_count
  totalCount?: long(name='total_count'),
  // page_number
  pageNumber?: long(name='page_number'),
  // page_size
  pageSize?: long(name='page_size'),
}

/**
 * Description: 配额实例指的就是某个工作空间或者某个APP的关于某个资源的额度
 * Summary: 查询当前配额实例的额度
 */
async function queryQuotaInstance(request: QueryQuotaInstanceRequest): QueryQuotaInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryQuotaInstanceEx(request, headers, runtime);
}

/**
 * Description: 配额实例指的就是某个工作空间或者某个APP的关于某个资源的额度
 * Summary: 查询当前配额实例的额度
 */
async function queryQuotaInstanceEx(request: QueryQuotaInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryQuotaInstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.quota.instance.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySingledimquotaInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // single_dim_groups
  singleDimGroups: [ SingleDimGroup ](name='single_dim_groups'),
}

model QuerySingledimquotaInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回值
  data?: [ SingleDimGroupQuotaInstance ](name='data'),
}

/**
 * Description: 查询单实例维度的配额实例信息,如果没有该维度实例时则会先创建该维度实例
 * Summary: 查询单实例维度的配额实例信息
 */
async function querySingledimquotaInstance(request: QuerySingledimquotaInstanceRequest): QuerySingledimquotaInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySingledimquotaInstanceEx(request, headers, runtime);
}

/**
 * Description: 查询单实例维度的配额实例信息,如果没有该维度实例时则会先创建该维度实例
 * Summary: 查询单实例维度的配额实例信息
 */
async function querySingledimquotaInstanceEx(request: QuerySingledimquotaInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySingledimquotaInstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.singledimquota.instance.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryQuotaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  //  维度标识, 可选
  dimIdentity?: string(name='dim_identity'),
  // resource_identity
  resourceIdentity?: string(name='resource_identity'),
}

model QueryQuotaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ SingleDimGroupQuota ](name='data'),
}

/**
 * Description: 查询限额对象，非限额实例。限额对象仅仅包含资源组合描述信息。请根据返回的QuotaId查询具体的实例信息
 * Summary: 查询限额对象
 */
async function queryQuota(request: QueryQuotaRequest): QueryQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryQuotaEx(request, headers, runtime);
}

/**
 * Description: 查询限额对象，非限额实例。限额对象仅仅包含资源组合描述信息。请根据返回的QuotaId查询具体的实例信息
 * Summary: 查询限额对象
 */
async function queryQuotaEx(request: QueryQuotaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryQuotaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.quota.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateQuotaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 维度标记
  dimIdentity: string(name='dim_identity'),
  // resource
  resource: string(name='resource'),
  // 额度值，实际值还需要乘上quota_factor
  hardLimit: long(name='hard_limit'),
  // 同步资源用
  syncInterface?: string(name='sync_interface'),
  // 关于配额的描述信息
  quotaDesc?: string(name='quota_desc'),
  // 由于OP不支持浮点数，请用字符串表示浮点数，比如”0.1“-带双引号
  quotaFactor?: string(name='quota_factor'),
}

model CreateQuotaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // ID，用于后续删除更新操作
  quotaId?: string(name='quota_id'),
}

/**
 * Description: 注意概念，额度对某个资源从哪些维度限定的数量，举个例子，给所有workspace都配置一个默认值，而非某个单独实例
 * Summary: 创建一个额度，用于某个维度的默认额度
 */
async function createQuota(request: CreateQuotaRequest): CreateQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createQuotaEx(request, headers, runtime);
}

/**
 * Description: 注意概念，额度对某个资源从哪些维度限定的数量，举个例子，给所有workspace都配置一个默认值，而非某个单独实例
 * Summary: 创建一个额度，用于某个维度的默认额度
 */
async function createQuotaEx(request: CreateQuotaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateQuotaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.quota.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateQuotaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 从Query接口找到此ID
  quotaId: string(name='quota_id'),
  // 额度，不更新请保持原值，不要留空
  hardLimit: long(name='hard_limit'),
}

model UpdateQuotaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新维度配额，非维度实例，这个一般是全站级别的额度。
 * Summary: 更新维度配额
 */
async function updateQuota(request: UpdateQuotaRequest): UpdateQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateQuotaEx(request, headers, runtime);
}

/**
 * Description: 更新维度配额，非维度实例，这个一般是全站级别的额度。
 * Summary: 更新维度配额
 */
async function updateQuotaEx(request: UpdateQuotaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateQuotaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.quota.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model FindcreateQuotaInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // single_dim_groups
  singleDimGroups: [ SingleDimGroup ](name='single_dim_groups'),
}

model FindcreateQuotaInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ SingleDimGroupQuotaInstance ](name='data'),
}

/**
 * Description: 创建一个额度实例，用于某个维度实例，如果已经存在。返回已经存在。请用用这个接口查询当前额度
 * Summary: 创建一个额度实例，用于某个维度实例
 */
async function findcreateQuotaInstance(request: FindcreateQuotaInstanceRequest): FindcreateQuotaInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return findcreateQuotaInstanceEx(request, headers, runtime);
}

/**
 * Description: 创建一个额度实例，用于某个维度实例，如果已经存在。返回已经存在。请用用这个接口查询当前额度
 * Summary: 创建一个额度实例，用于某个维度实例
 */
async function findcreateQuotaInstanceEx(request: FindcreateQuotaInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FindcreateQuotaInstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.quota.instance.findcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateQuotaInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // params
  params: [ SingleDimGroupQuota ](name='params'),
}

model UpdateQuotaInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新一个额度实例，用于某个维度实例
 * Summary: 更新一个额度实例，用于某个维度实例
 */
async function updateQuotaInstance(request: UpdateQuotaInstanceRequest): UpdateQuotaInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateQuotaInstanceEx(request, headers, runtime);
}

/**
 * Description: 更新一个额度实例，用于某个维度实例
 * Summary: 更新一个额度实例，用于某个维度实例
 */
async function updateQuotaInstanceEx(request: UpdateQuotaInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateQuotaInstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.quota.instance.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckQuotaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 检查的值
  dimGroups: [ SingleDimGroup ](name='dim_groups'),
}

model CheckQuotaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是够超额
  quotaExceed?: boolean(name='quota_exceed'),
  // quota实例ID
  quotaInsId?: string(name='quota_ins_id'),
  // dim_identity
  dimIdentity?: string(name='dim_identity'),
  // 维度值
  dimInsValue?: string(name='dim_ins_value'),
  // resource
  resource?: string(name='resource'),
  // 申请的资源的数量
  count?: long(name='count'),
  // 当前剩余的量
  remain?: long(name='remain'),
}

/**
 * Description: 检查额度是否够
 * Summary: 检查额度是否够
 */
async function checkQuota(request: CheckQuotaRequest): CheckQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkQuotaEx(request, headers, runtime);
}

/**
 * Description: 检查额度是否够
 * Summary: 检查额度是否够
 */
async function checkQuotaEx(request: CheckQuotaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckQuotaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.quota.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OpenTokenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 申请事项，描述一个事情即可，
  action: string(name='action'),
  // 单位为秒
  timeout?: long(name='timeout'),
  // 额外的描述信息
  options?: [ MapStringToStringEntity ](name='options'),
  // 此Token用途API对应的入参，应该是一个简单Object
  param: string(name='param'),
}

model OpenTokenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // dddd
  token?: string(name='token'),
}

/**
 * Description: 创建一个任务用Token，用于保证任务的幂等性
 * Summary: 创建一个任务用Token
 */
async function openToken(request: OpenTokenRequest): OpenTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return openTokenEx(request, headers, runtime);
}

/**
 * Description: 创建一个任务用Token，用于保证任务的幂等性
 * Summary: 创建一个任务用Token
 */
async function openTokenEx(request: OpenTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OpenTokenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.token.open', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncQuotaInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // quota_instance_ids，从quota.instance.query返回
  quotaInstanceIds: [ string ](name='quota_instance_ids'),
}

model SyncQuotaInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 依次返回成功与否
  data?: [ boolean ](name='data'),
}

/**
 * Description: 同步当前数据库记录的额度与实际使用的额度
 * Summary: 同步当前数据库记录的额度与实际使用的额度
 */
async function syncQuotaInstance(request: SyncQuotaInstanceRequest): SyncQuotaInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncQuotaInstanceEx(request, headers, runtime);
}

/**
 * Description: 同步当前数据库记录的额度与实际使用的额度
 * Summary: 同步当前数据库记录的额度与实际使用的额度
 */
async function syncQuotaInstanceEx(request: SyncQuotaInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncQuotaInstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.quota.instance.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateFeatureRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // feature_id
  id: string(name='id'),
  // 可以序列化成Map的Json字符串
  content?: string(name='content'),
  // 详情参考 https://velocity.apache.org/engine/
  conditionalContent?: string(name='conditional_content'),
}

model UpdateFeatureResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新某个开关
 * Summary: 更新某个开关
 */
async function updateFeature(request: UpdateFeatureRequest): UpdateFeatureResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateFeatureEx(request, headers, runtime);
}

/**
 * Description: 更新某个开关
 * Summary: 更新某个开关
 */
async function updateFeatureEx(request: UpdateFeatureRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateFeatureResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.feature.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListFeatureRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // region_id
  regionId: string(name='region_id'),
  // feature_name
  featureName?: string(name='feature_name'),
}

model ListFeatureResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // data
  data?: [ Feature ](name='data'),
}

/**
 * Description: 获取当前系统配置项
 * Summary: 获取当前系统配置项
 */
async function listFeature(request: ListFeatureRequest): ListFeatureResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listFeatureEx(request, headers, runtime);
}

/**
 * Description: 获取当前系统配置项
 * Summary: 获取当前系统配置项
 */
async function listFeatureEx(request: ListFeatureRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFeatureResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.cas.feature.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

