# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from Tea.model import TeaModel
from typing import List


class Config(TeaModel):
    """
    Model for initing client
    """
    def __init__(
        self,
        access_key_id: str = None,
        access_key_secret: str = None,
        security_token: str = None,
        protocol: str = None,
        read_timeout: int = None,
        connect_timeout: int = None,
        http_proxy: str = None,
        https_proxy: str = None,
        endpoint: str = None,
        no_proxy: str = None,
        max_idle_conns: int = None,
        user_agent: str = None,
        socks_5proxy: str = None,
        socks_5net_work: str = None,
        max_idle_time_millis: int = None,
        keep_alive_duration_millis: int = None,
        max_requests: int = None,
        max_requests_per_host: int = None,
    ):
        # accesskey id
        self.access_key_id = access_key_id
        # accesskey secret
        self.access_key_secret = access_key_secret
        # security token
        self.security_token = security_token
        # http protocol
        self.protocol = protocol
        # read timeout
        self.read_timeout = read_timeout
        # connect timeout
        self.connect_timeout = connect_timeout
        # http proxy
        self.http_proxy = http_proxy
        # https proxy
        self.https_proxy = https_proxy
        # endpoint
        self.endpoint = endpoint
        # proxy white list
        self.no_proxy = no_proxy
        # max idle conns
        self.max_idle_conns = max_idle_conns
        # user agent
        self.user_agent = user_agent
        # socks5 proxy
        self.socks_5proxy = socks_5proxy
        # socks5 network
        self.socks_5net_work = socks_5net_work
        # 长链接最大空闲时长
        self.max_idle_time_millis = max_idle_time_millis
        # 长链接最大连接时长
        self.keep_alive_duration_millis = keep_alive_duration_millis
        # 最大连接数（长链接最大总数）
        self.max_requests = max_requests
        # 每个目标主机的最大连接数（分主机域名的长链接最大总数
        self.max_requests_per_host = max_requests_per_host

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.access_key_id is not None:
            result['accessKeyId'] = self.access_key_id
        if self.access_key_secret is not None:
            result['accessKeySecret'] = self.access_key_secret
        if self.security_token is not None:
            result['securityToken'] = self.security_token
        if self.protocol is not None:
            result['protocol'] = self.protocol
        if self.read_timeout is not None:
            result['readTimeout'] = self.read_timeout
        if self.connect_timeout is not None:
            result['connectTimeout'] = self.connect_timeout
        if self.http_proxy is not None:
            result['httpProxy'] = self.http_proxy
        if self.https_proxy is not None:
            result['httpsProxy'] = self.https_proxy
        if self.endpoint is not None:
            result['endpoint'] = self.endpoint
        if self.no_proxy is not None:
            result['noProxy'] = self.no_proxy
        if self.max_idle_conns is not None:
            result['maxIdleConns'] = self.max_idle_conns
        if self.user_agent is not None:
            result['userAgent'] = self.user_agent
        if self.socks_5proxy is not None:
            result['socks5Proxy'] = self.socks_5proxy
        if self.socks_5net_work is not None:
            result['socks5NetWork'] = self.socks_5net_work
        if self.max_idle_time_millis is not None:
            result['maxIdleTimeMillis'] = self.max_idle_time_millis
        if self.keep_alive_duration_millis is not None:
            result['keepAliveDurationMillis'] = self.keep_alive_duration_millis
        if self.max_requests is not None:
            result['maxRequests'] = self.max_requests
        if self.max_requests_per_host is not None:
            result['maxRequestsPerHost'] = self.max_requests_per_host
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('accessKeyId') is not None:
            self.access_key_id = m.get('accessKeyId')
        if m.get('accessKeySecret') is not None:
            self.access_key_secret = m.get('accessKeySecret')
        if m.get('securityToken') is not None:
            self.security_token = m.get('securityToken')
        if m.get('protocol') is not None:
            self.protocol = m.get('protocol')
        if m.get('readTimeout') is not None:
            self.read_timeout = m.get('readTimeout')
        if m.get('connectTimeout') is not None:
            self.connect_timeout = m.get('connectTimeout')
        if m.get('httpProxy') is not None:
            self.http_proxy = m.get('httpProxy')
        if m.get('httpsProxy') is not None:
            self.https_proxy = m.get('httpsProxy')
        if m.get('endpoint') is not None:
            self.endpoint = m.get('endpoint')
        if m.get('noProxy') is not None:
            self.no_proxy = m.get('noProxy')
        if m.get('maxIdleConns') is not None:
            self.max_idle_conns = m.get('maxIdleConns')
        if m.get('userAgent') is not None:
            self.user_agent = m.get('userAgent')
        if m.get('socks5Proxy') is not None:
            self.socks_5proxy = m.get('socks5Proxy')
        if m.get('socks5NetWork') is not None:
            self.socks_5net_work = m.get('socks5NetWork')
        if m.get('maxIdleTimeMillis') is not None:
            self.max_idle_time_millis = m.get('maxIdleTimeMillis')
        if m.get('keepAliveDurationMillis') is not None:
            self.keep_alive_duration_millis = m.get('keepAliveDurationMillis')
        if m.get('maxRequests') is not None:
            self.max_requests = m.get('maxRequests')
        if m.get('maxRequestsPerHost') is not None:
            self.max_requests_per_host = m.get('maxRequestsPerHost')
        return self


class AssignedApp(TeaModel):
    def __init__(
        self,
        workspace_id: str = None,
        app_id: str = None,
    ):
        # workspace_id
        self.workspace_id = workspace_id
        # app_id
        self.app_id = app_id

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.app_id, 'app_id')

    def to_map(self):
        result = dict()
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.app_id is not None:
            result['app_id'] = self.app_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        return self


class RegionView(TeaModel):
    def __init__(
        self,
        id: str = None,
        identity: str = None,
        provider_id: str = None,
        name: str = None,
        state: str = None,
        description: str = None,
        network_type: str = None,
        available_network_types: List[str] = None,
    ):
        # id
        self.id = id
        # identity
        self.identity = identity
        # providerId
        self.provider_id = provider_id
        # name
        self.name = name
        # state
        self.state = state
        # description
        self.description = description
        # networkType
        self.network_type = network_type
        # availableNetworkTypes
        self.available_network_types = available_network_types

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.identity, 'identity')
        self.validate_required(self.provider_id, 'provider_id')
        self.validate_required(self.name, 'name')
        self.validate_required(self.state, 'state')
        self.validate_required(self.description, 'description')
        self.validate_required(self.network_type, 'network_type')
        self.validate_required(self.available_network_types, 'available_network_types')

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.identity is not None:
            result['identity'] = self.identity
        if self.provider_id is not None:
            result['provider_id'] = self.provider_id
        if self.name is not None:
            result['name'] = self.name
        if self.state is not None:
            result['state'] = self.state
        if self.description is not None:
            result['description'] = self.description
        if self.network_type is not None:
            result['network_type'] = self.network_type
        if self.available_network_types is not None:
            result['available_network_types'] = self.available_network_types
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('identity') is not None:
            self.identity = m.get('identity')
        if m.get('provider_id') is not None:
            self.provider_id = m.get('provider_id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('state') is not None:
            self.state = m.get('state')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('network_type') is not None:
            self.network_type = m.get('network_type')
        if m.get('available_network_types') is not None:
            self.available_network_types = m.get('available_network_types')
        return self


class WorkspaceZoneView(TeaModel):
    def __init__(
        self,
        id: str = None,
        identity: str = None,
        name: str = None,
        state: str = None,
        description: str = None,
    ):
        # id
        self.id = id
        # identity
        self.identity = identity
        # name
        self.name = name
        # state
        self.state = state
        # description
        self.description = description

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.identity, 'identity')
        self.validate_required(self.name, 'name')
        self.validate_required(self.state, 'state')
        self.validate_required(self.description, 'description')

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.identity is not None:
            result['identity'] = self.identity
        if self.name is not None:
            result['name'] = self.name
        if self.state is not None:
            result['state'] = self.state
        if self.description is not None:
            result['description'] = self.description
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('identity') is not None:
            self.identity = m.get('identity')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('state') is not None:
            self.state = m.get('state')
        if m.get('description') is not None:
            self.description = m.get('description')
        return self


class Database(TeaModel):
    def __init__(
        self,
        app_ids: List[str] = None,
        app_service_ids: List[str] = None,
        assigned_apps: List[AssignedApp] = None,
        assigned_app_service_ids: List[str] = None,
        auto_renew: bool = None,
        auto_renew_period: int = None,
        connection_address: str = None,
        cpu: int = None,
        description: str = None,
        engine: str = None,
        engine_version: str = None,
        iaas_id: str = None,
        iaas_type: str = None,
        id: str = None,
        master_zone_id: str = None,
        max_connections: int = None,
        max_iops: int = None,
        memory: int = None,
        name: str = None,
        network_type: str = None,
        net_type: str = None,
        port: int = None,
        shared_workspace_ids: List[str] = None,
        spec_iaas_id: str = None,
        status: str = None,
        storage: int = None,
        type: str = None,
        utc_create: str = None,
        utc_modified: str = None,
        vpc_id: str = None,
        v_switch_iaas_id: str = None,
        workspace_id: str = None,
    ):
        # app_ids
        self.app_ids = app_ids
        # app_service_ids
        self.app_service_ids = app_service_ids
        # assignedApps
        self.assigned_apps = assigned_apps
        # assigned_app_service_ids
        self.assigned_app_service_ids = assigned_app_service_ids
        # autoRenew
        self.auto_renew = auto_renew
        # auto_renew_period
        self.auto_renew_period = auto_renew_period
        # connection_address
        self.connection_address = connection_address
        # cpu
        self.cpu = cpu
        # description
        self.description = description
        # engine
        self.engine = engine
        # engine_version
        self.engine_version = engine_version
        # iaasId
        self.iaas_id = iaas_id
        # iaas_type
        self.iaas_type = iaas_type
        # id
        self.id = id
        # master_zone_id
        self.master_zone_id = master_zone_id
        # max_connections
        self.max_connections = max_connections
        # max_iops
        self.max_iops = max_iops
        # memory
        self.memory = memory
        # name
        self.name = name
        # network_type
        self.network_type = network_type
        # net_type
        self.net_type = net_type
        # port
        self.port = port
        # shared_workspace_ids
        self.shared_workspace_ids = shared_workspace_ids
        # spec_iaas_id
        self.spec_iaas_id = spec_iaas_id
        # status
        self.status = status
        # storage
        self.storage = storage
        # type
        self.type = type
        # utc_create
        self.utc_create = utc_create
        # utc_modified
        self.utc_modified = utc_modified
        # vpc_id
        self.vpc_id = vpc_id
        # v_switch_iaas_id
        self.v_switch_iaas_id = v_switch_iaas_id
        # workspace_id
        self.workspace_id = workspace_id

    def validate(self):
        if self.assigned_apps:
            for k in self.assigned_apps:
                if k:
                    k.validate()
        self.validate_required(self.id, 'id')
        self.validate_required(self.name, 'name')
        self.validate_required(self.status, 'status')
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.app_ids is not None:
            result['app_ids'] = self.app_ids
        if self.app_service_ids is not None:
            result['app_service_ids'] = self.app_service_ids
        result['assigned_apps'] = []
        if self.assigned_apps is not None:
            for k in self.assigned_apps:
                result['assigned_apps'].append(k.to_map() if k else None)
        if self.assigned_app_service_ids is not None:
            result['assigned_app_service_ids'] = self.assigned_app_service_ids
        if self.auto_renew is not None:
            result['auto_renew'] = self.auto_renew
        if self.auto_renew_period is not None:
            result['auto_renew_period'] = self.auto_renew_period
        if self.connection_address is not None:
            result['connection_address'] = self.connection_address
        if self.cpu is not None:
            result['cpu'] = self.cpu
        if self.description is not None:
            result['description'] = self.description
        if self.engine is not None:
            result['engine'] = self.engine
        if self.engine_version is not None:
            result['engine_version'] = self.engine_version
        if self.iaas_id is not None:
            result['iaas_id'] = self.iaas_id
        if self.iaas_type is not None:
            result['iaas_type'] = self.iaas_type
        if self.id is not None:
            result['id'] = self.id
        if self.master_zone_id is not None:
            result['master_zone_id'] = self.master_zone_id
        if self.max_connections is not None:
            result['max_connections'] = self.max_connections
        if self.max_iops is not None:
            result['max_iops'] = self.max_iops
        if self.memory is not None:
            result['memory'] = self.memory
        if self.name is not None:
            result['name'] = self.name
        if self.network_type is not None:
            result['network_type'] = self.network_type
        if self.net_type is not None:
            result['net_type'] = self.net_type
        if self.port is not None:
            result['port'] = self.port
        if self.shared_workspace_ids is not None:
            result['shared_workspace_ids'] = self.shared_workspace_ids
        if self.spec_iaas_id is not None:
            result['spec_iaas_id'] = self.spec_iaas_id
        if self.status is not None:
            result['status'] = self.status
        if self.storage is not None:
            result['storage'] = self.storage
        if self.type is not None:
            result['type'] = self.type
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        if self.vpc_id is not None:
            result['vpc_id'] = self.vpc_id
        if self.v_switch_iaas_id is not None:
            result['v_switch_iaas_id'] = self.v_switch_iaas_id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('app_ids') is not None:
            self.app_ids = m.get('app_ids')
        if m.get('app_service_ids') is not None:
            self.app_service_ids = m.get('app_service_ids')
        self.assigned_apps = []
        if m.get('assigned_apps') is not None:
            for k in m.get('assigned_apps'):
                temp_model = AssignedApp()
                self.assigned_apps.append(temp_model.from_map(k))
        if m.get('assigned_app_service_ids') is not None:
            self.assigned_app_service_ids = m.get('assigned_app_service_ids')
        if m.get('auto_renew') is not None:
            self.auto_renew = m.get('auto_renew')
        if m.get('auto_renew_period') is not None:
            self.auto_renew_period = m.get('auto_renew_period')
        if m.get('connection_address') is not None:
            self.connection_address = m.get('connection_address')
        if m.get('cpu') is not None:
            self.cpu = m.get('cpu')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('engine') is not None:
            self.engine = m.get('engine')
        if m.get('engine_version') is not None:
            self.engine_version = m.get('engine_version')
        if m.get('iaas_id') is not None:
            self.iaas_id = m.get('iaas_id')
        if m.get('iaas_type') is not None:
            self.iaas_type = m.get('iaas_type')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('master_zone_id') is not None:
            self.master_zone_id = m.get('master_zone_id')
        if m.get('max_connections') is not None:
            self.max_connections = m.get('max_connections')
        if m.get('max_iops') is not None:
            self.max_iops = m.get('max_iops')
        if m.get('memory') is not None:
            self.memory = m.get('memory')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('network_type') is not None:
            self.network_type = m.get('network_type')
        if m.get('net_type') is not None:
            self.net_type = m.get('net_type')
        if m.get('port') is not None:
            self.port = m.get('port')
        if m.get('shared_workspace_ids') is not None:
            self.shared_workspace_ids = m.get('shared_workspace_ids')
        if m.get('spec_iaas_id') is not None:
            self.spec_iaas_id = m.get('spec_iaas_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('storage') is not None:
            self.storage = m.get('storage')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        if m.get('vpc_id') is not None:
            self.vpc_id = m.get('vpc_id')
        if m.get('v_switch_iaas_id') is not None:
            self.v_switch_iaas_id = m.get('v_switch_iaas_id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class MapStringToStringEntity(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        # 键名
        self.key = key
        # 键值
        self.value = value

    def validate(self):
        self.validate_required(self.key, 'key')
        self.validate_required(self.value, 'value')

    def to_map(self):
        result = dict()
        if self.key is not None:
            result['key'] = self.key
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('key') is not None:
            self.key = m.get('key')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class Scope(TeaModel):
    def __init__(
        self,
        cell: str = None,
        region: str = None,
        tenant: str = None,
        workspace: str = None,
        workspace_group: str = None,
        zone: str = None,
        cluster: str = None,
    ):
        # cell identity
        self.cell = cell
        # region identity
        self.region = region
        # tenant name
        self.tenant = tenant
        # workspace
        self.workspace = workspace
        # workspace_group
        self.workspace_group = workspace_group
        # zone identity
        self.zone = zone
        # cluster identity
        self.cluster = cluster

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.cell is not None:
            result['cell'] = self.cell
        if self.region is not None:
            result['region'] = self.region
        if self.tenant is not None:
            result['tenant'] = self.tenant
        if self.workspace is not None:
            result['workspace'] = self.workspace
        if self.workspace_group is not None:
            result['workspace_group'] = self.workspace_group
        if self.zone is not None:
            result['zone'] = self.zone
        if self.cluster is not None:
            result['cluster'] = self.cluster
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cell') is not None:
            self.cell = m.get('cell')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('tenant') is not None:
            self.tenant = m.get('tenant')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        if m.get('workspace_group') is not None:
            self.workspace_group = m.get('workspace_group')
        if m.get('zone') is not None:
            self.zone = m.get('zone')
        if m.get('cluster') is not None:
            self.cluster = m.get('cluster')
        return self


class CloudPlatform(TeaModel):
    def __init__(
        self,
        host: str = None,
        login_name: str = None,
        name: str = None,
        password: str = None,
    ):
        # host
        self.host = host
        # login_name
        self.login_name = login_name
        # name
        self.name = name
        # password
        self.password = password

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.host is not None:
            result['host'] = self.host
        if self.login_name is not None:
            result['login_name'] = self.login_name
        if self.name is not None:
            result['name'] = self.name
        if self.password is not None:
            result['password'] = self.password
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('host') is not None:
            self.host = m.get('host')
        if m.get('login_name') is not None:
            self.login_name = m.get('login_name')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('password') is not None:
            self.password = m.get('password')
        return self


class UserInfo(TeaModel):
    def __init__(
        self,
        id: str = None,
        source_system: str = None,
        source_user_id: str = None,
        login_name: str = None,
        real_name: str = None,
        nick_name: str = None,
        customer_id: str = None,
        type: str = None,
        status: str = None,
        im_account: str = None,
        email: str = None,
        phone: str = None,
        mobile: str = None,
        work_no: str = None,
        en_name: str = None,
        sex: str = None,
        nation_country: str = None,
        nation: str = None,
        personal_photo: str = None,
        last_logon_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
    ):
        # ID
        self.id = id
        # 用户来源系统，例如BUC,LDAP
        self.source_system = source_system
        # 用户在源系统的id
        self.source_user_id = source_user_id
        # 登录名
        self.login_name = login_name
        # 真实名
        self.real_name = real_name
        # 昵称
        self.nick_name = nick_name
        # 客户ID
        self.customer_id = customer_id
        # 是否超级管理员
        self.type = type
        # 用户状态
        self.status = status
        # 即时通信账号
        self.im_account = im_account
        # 邮箱
        self.email = email
        # 联系座机
        self.phone = phone
        # 手机号
        self.mobile = mobile
        # 工号
        self.work_no = work_no
        # 英文名
        self.en_name = en_name
        # 性别
        self.sex = sex
        # 国籍
        self.nation_country = nation_country
        # 民族
        self.nation = nation
        # 个人照片路径
        self.personal_photo = personal_photo
        # 上次登录时间.
        self.last_logon_time = last_logon_time
        # 创建时间
        self.gmt_create = gmt_create
        # 修改时间
        self.gmt_modified = gmt_modified

    def validate(self):
        self.validate_required(self.id, 'id')
        if self.last_logon_time is not None:
            self.validate_pattern(self.last_logon_time, 'last_logon_time', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.gmt_create is not None:
            self.validate_pattern(self.gmt_create, 'gmt_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.gmt_modified is not None:
            self.validate_pattern(self.gmt_modified, 'gmt_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.source_system is not None:
            result['source_system'] = self.source_system
        if self.source_user_id is not None:
            result['source_user_id'] = self.source_user_id
        if self.login_name is not None:
            result['login_name'] = self.login_name
        if self.real_name is not None:
            result['real_name'] = self.real_name
        if self.nick_name is not None:
            result['nick_name'] = self.nick_name
        if self.customer_id is not None:
            result['customer_id'] = self.customer_id
        if self.type is not None:
            result['type'] = self.type
        if self.status is not None:
            result['status'] = self.status
        if self.im_account is not None:
            result['im_account'] = self.im_account
        if self.email is not None:
            result['email'] = self.email
        if self.phone is not None:
            result['phone'] = self.phone
        if self.mobile is not None:
            result['mobile'] = self.mobile
        if self.work_no is not None:
            result['work_no'] = self.work_no
        if self.en_name is not None:
            result['en_name'] = self.en_name
        if self.sex is not None:
            result['sex'] = self.sex
        if self.nation_country is not None:
            result['nation_country'] = self.nation_country
        if self.nation is not None:
            result['nation'] = self.nation
        if self.personal_photo is not None:
            result['personal_photo'] = self.personal_photo
        if self.last_logon_time is not None:
            result['last_logon_time'] = self.last_logon_time
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('source_system') is not None:
            self.source_system = m.get('source_system')
        if m.get('source_user_id') is not None:
            self.source_user_id = m.get('source_user_id')
        if m.get('login_name') is not None:
            self.login_name = m.get('login_name')
        if m.get('real_name') is not None:
            self.real_name = m.get('real_name')
        if m.get('nick_name') is not None:
            self.nick_name = m.get('nick_name')
        if m.get('customer_id') is not None:
            self.customer_id = m.get('customer_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('im_account') is not None:
            self.im_account = m.get('im_account')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('mobile') is not None:
            self.mobile = m.get('mobile')
        if m.get('work_no') is not None:
            self.work_no = m.get('work_no')
        if m.get('en_name') is not None:
            self.en_name = m.get('en_name')
        if m.get('sex') is not None:
            self.sex = m.get('sex')
        if m.get('nation_country') is not None:
            self.nation_country = m.get('nation_country')
        if m.get('nation') is not None:
            self.nation = m.get('nation')
        if m.get('personal_photo') is not None:
            self.personal_photo = m.get('personal_photo')
        if m.get('last_logon_time') is not None:
            self.last_logon_time = m.get('last_logon_time')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        return self


class WorkspaceView(TeaModel):
    def __init__(
        self,
        id: str = None,
        identity: str = None,
        name: str = None,
        status: str = None,
        region: RegionView = None,
        zones: List[WorkspaceZoneView] = None,
    ):
        # id
        self.id = id
        # identity
        self.identity = identity
        # name
        self.name = name
        # status
        self.status = status
        # region
        self.region = region
        # zones
        self.zones = zones

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.identity, 'identity')
        self.validate_required(self.name, 'name')
        self.validate_required(self.status, 'status')
        self.validate_required(self.region, 'region')
        if self.region:
            self.region.validate()
        self.validate_required(self.zones, 'zones')
        if self.zones:
            for k in self.zones:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.identity is not None:
            result['identity'] = self.identity
        if self.name is not None:
            result['name'] = self.name
        if self.status is not None:
            result['status'] = self.status
        if self.region is not None:
            result['region'] = self.region.to_map()
        result['zones'] = []
        if self.zones is not None:
            for k in self.zones:
                result['zones'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('identity') is not None:
            self.identity = m.get('identity')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('region') is not None:
            temp_model = RegionView()
            self.region = temp_model.from_map(m['region'])
        self.zones = []
        if m.get('zones') is not None:
            for k in m.get('zones'):
                temp_model = WorkspaceZoneView()
                self.zones.append(temp_model.from_map(k))
        return self


class DiskComputer(TeaModel):
    def __init__(
        self,
        name: str = None,
        id: str = None,
        iaas_id: str = None,
        status: str = None,
    ):
        # name
        self.name = name
        # id
        self.id = id
        # iaas id
        self.iaas_id = iaas_id
        # status
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.name is not None:
            result['name'] = self.name
        if self.id is not None:
            result['id'] = self.id
        if self.iaas_id is not None:
            result['iaas_id'] = self.iaas_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('iaas_id') is not None:
            self.iaas_id = m.get('iaas_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class DatabaseAccount(TeaModel):
    def __init__(
        self,
        database: Database = None,
        description: str = None,
        iaas_type: str = None,
        id: str = None,
        name: str = None,
        password: str = None,
        privilege: str = None,
        status: str = None,
        utc_create: str = None,
        utc_modified: str = None,
    ):
        # database
        self.database = database
        # description
        self.description = description
        # iaas_type
        self.iaas_type = iaas_type
        # id
        self.id = id
        # 名称
        self.name = name
        # 密码
        self.password = password
        # 权限
        self.privilege = privilege
        # status
        self.status = status
        # utc_create
        self.utc_create = utc_create
        # utc_modified
        self.utc_modified = utc_modified

    def validate(self):
        if self.database:
            self.database.validate()
        self.validate_required(self.id, 'id')
        self.validate_required(self.name, 'name')
        self.validate_required(self.password, 'password')
        self.validate_required(self.privilege, 'privilege')
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.database is not None:
            result['database'] = self.database.to_map()
        if self.description is not None:
            result['description'] = self.description
        if self.iaas_type is not None:
            result['iaas_type'] = self.iaas_type
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.password is not None:
            result['password'] = self.password
        if self.privilege is not None:
            result['privilege'] = self.privilege
        if self.status is not None:
            result['status'] = self.status
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('database') is not None:
            temp_model = Database()
            self.database = temp_model.from_map(m['database'])
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('iaas_type') is not None:
            self.iaas_type = m.get('iaas_type')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('password') is not None:
            self.password = m.get('password')
        if m.get('privilege') is not None:
            self.privilege = m.get('privilege')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        return self


class ZoneView(TeaModel):
    def __init__(
        self,
        id: str = None,
        name: str = None,
        display_name: str = None,
    ):
        # id
        self.id = id
        # name
        self.name = name
        # displayName
        self.display_name = display_name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.display_name is not None:
            result['display_name'] = self.display_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('display_name') is not None:
            self.display_name = m.get('display_name')
        return self


class Cloud(TeaModel):
    def __init__(
        self,
        id: int = None,
        identity: str = None,
        name: str = None,
        platforms: List[CloudPlatform] = None,
    ):
        # id
        self.id = id
        # identity
        self.identity = identity
        # name
        self.name = name
        # platforms
        self.platforms = platforms

    def validate(self):
        if self.platforms:
            for k in self.platforms:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.identity is not None:
            result['identity'] = self.identity
        if self.name is not None:
            result['name'] = self.name
        result['platforms'] = []
        if self.platforms is not None:
            for k in self.platforms:
                result['platforms'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('identity') is not None:
            self.identity = m.get('identity')
        if m.get('name') is not None:
            self.name = m.get('name')
        self.platforms = []
        if m.get('platforms') is not None:
            for k in m.get('platforms'):
                temp_model = CloudPlatform()
                self.platforms.append(temp_model.from_map(k))
        return self


class CodeCommit(TeaModel):
    def __init__(
        self,
        author: str = None,
        branch: str = None,
        code_version: str = None,
        date: str = None,
        id: str = None,
        msg: str = None,
        repo_name: str = None,
        utc_create: str = None,
        utc_modified: str = None,
    ):
        # 作者
        self.author = author
        # 分支
        self.branch = branch
        # 代码版本
        self.code_version = code_version
        # 时间
        self.date = date
        # id
        self.id = id
        # 消息
        self.msg = msg
        # 仓库名称
        self.repo_name = repo_name
        # 创建时间
        self.utc_create = utc_create
        # 修改时间
        self.utc_modified = utc_modified

    def validate(self):
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.author is not None:
            result['author'] = self.author
        if self.branch is not None:
            result['branch'] = self.branch
        if self.code_version is not None:
            result['code_version'] = self.code_version
        if self.date is not None:
            result['date'] = self.date
        if self.id is not None:
            result['id'] = self.id
        if self.msg is not None:
            result['msg'] = self.msg
        if self.repo_name is not None:
            result['repo_name'] = self.repo_name
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('author') is not None:
            self.author = m.get('author')
        if m.get('branch') is not None:
            self.branch = m.get('branch')
        if m.get('code_version') is not None:
            self.code_version = m.get('code_version')
        if m.get('date') is not None:
            self.date = m.get('date')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('msg') is not None:
            self.msg = m.get('msg')
        if m.get('repo_name') is not None:
            self.repo_name = m.get('repo_name')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        return self


class DbSchemaGrant(TeaModel):
    def __init__(
        self,
        privilege: str = None,
        account: DatabaseAccount = None,
    ):
        # privilege
        self.privilege = privilege
        # account
        self.account = account

    def validate(self):
        self.validate_required(self.privilege, 'privilege')
        if self.account:
            self.account.validate()

    def to_map(self):
        result = dict()
        if self.privilege is not None:
            result['privilege'] = self.privilege
        if self.account is not None:
            result['account'] = self.account.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('privilege') is not None:
            self.privilege = m.get('privilege')
        if m.get('account') is not None:
            temp_model = DatabaseAccount()
            self.account = temp_model.from_map(m['account'])
        return self


class ScmSofaArchetype(TeaModel):
    def __init__(
        self,
        generate_code: bool = None,
        group_id: str = None,
        artifact_id: str = None,
        code_package: str = None,
        project_type: str = None,
        version: str = None,
        encoding: str = None,
        use_private_repo: bool = None,
        meta_data: str = None,
    ):
        # 用户创建archetype必须要的参数
        self.generate_code = generate_code
        # Maven代码框架使用 groupId
        self.group_id = group_id
        # Maven代码框架使用 artifactId
        self.artifact_id = artifact_id
        # Maven代码框架使用 codePackage
        self.code_package = code_package
        # Sofa代码框架使用 projectType
        self.project_type = project_type
        # Sofa代码框架使用 版本号
        self.version = version
        # Sofa代码框架使用 编码方式
        self.encoding = encoding
        # 是否使用私有maven
        self.use_private_repo = use_private_repo
        # 提供给快速研发平台使用，格式为JSON字符串
        self.meta_data = meta_data

    def validate(self):
        self.validate_required(self.artifact_id, 'artifact_id')
        self.validate_required(self.version, 'version')

    def to_map(self):
        result = dict()
        if self.generate_code is not None:
            result['generate_code'] = self.generate_code
        if self.group_id is not None:
            result['group_id'] = self.group_id
        if self.artifact_id is not None:
            result['artifact_id'] = self.artifact_id
        if self.code_package is not None:
            result['code_package'] = self.code_package
        if self.project_type is not None:
            result['project_type'] = self.project_type
        if self.version is not None:
            result['version'] = self.version
        if self.encoding is not None:
            result['encoding'] = self.encoding
        if self.use_private_repo is not None:
            result['use_private_repo'] = self.use_private_repo
        if self.meta_data is not None:
            result['meta_data'] = self.meta_data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('generate_code') is not None:
            self.generate_code = m.get('generate_code')
        if m.get('group_id') is not None:
            self.group_id = m.get('group_id')
        if m.get('artifact_id') is not None:
            self.artifact_id = m.get('artifact_id')
        if m.get('code_package') is not None:
            self.code_package = m.get('code_package')
        if m.get('project_type') is not None:
            self.project_type = m.get('project_type')
        if m.get('version') is not None:
            self.version = m.get('version')
        if m.get('encoding') is not None:
            self.encoding = m.get('encoding')
        if m.get('use_private_repo') is not None:
            self.use_private_repo = m.get('use_private_repo')
        if m.get('meta_data') is not None:
            self.meta_data = m.get('meta_data')
        return self


class AppLifeCycle(TeaModel):
    def __init__(
        self,
        id: str = None,
        app_id: str = None,
        workspace_id: str = None,
        state: str = None,
        last_opsorder_id: str = None,
        last_deploy_version: str = None,
        last_deploy_time: str = None,
        online_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
    ):
        # ID
        self.id = id
        # 应用ID
        self.app_id = app_id
        # 工作空间ID
        self.workspace_id = workspace_id
        # 应用状态
        self.state = state
        # 最近运维单号
        self.last_opsorder_id = last_opsorder_id
        # 上次发布版本
        self.last_deploy_version = last_deploy_version
        # 上次发布时间
        self.last_deploy_time = last_deploy_time
        # 上线时间
        self.online_time = online_time
        # 创建时间
        self.gmt_create = gmt_create
        # 最近修改时间
        self.gmt_modified = gmt_modified

    def validate(self):
        self.validate_required(self.last_deploy_version, 'last_deploy_version')
        self.validate_required(self.last_deploy_time, 'last_deploy_time')
        if self.last_deploy_time is not None:
            self.validate_pattern(self.last_deploy_time, 'last_deploy_time', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.online_time is not None:
            self.validate_pattern(self.online_time, 'online_time', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.gmt_create is not None:
            self.validate_pattern(self.gmt_create, 'gmt_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.gmt_modified is not None:
            self.validate_pattern(self.gmt_modified, 'gmt_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.state is not None:
            result['state'] = self.state
        if self.last_opsorder_id is not None:
            result['last_opsorder_id'] = self.last_opsorder_id
        if self.last_deploy_version is not None:
            result['last_deploy_version'] = self.last_deploy_version
        if self.last_deploy_time is not None:
            result['last_deploy_time'] = self.last_deploy_time
        if self.online_time is not None:
            result['online_time'] = self.online_time
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('state') is not None:
            self.state = m.get('state')
        if m.get('last_opsorder_id') is not None:
            self.last_opsorder_id = m.get('last_opsorder_id')
        if m.get('last_deploy_version') is not None:
            self.last_deploy_version = m.get('last_deploy_version')
        if m.get('last_deploy_time') is not None:
            self.last_deploy_time = m.get('last_deploy_time')
        if m.get('online_time') is not None:
            self.online_time = m.get('online_time')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        return self


class LoadBalancer(TeaModel):
    def __init__(
        self,
        app_id: str = None,
        app_service_ids: List[str] = None,
        assigned_app_ids: List[str] = None,
        assigned_app_service_ids: List[str] = None,
        auto_renew: bool = None,
        auto_renew_period: int = None,
        bandwidth: int = None,
        cluster_id: str = None,
        cluster_mode: bool = None,
        domains: List[str] = None,
        iaas_id: str = None,
        iaas_type: str = None,
        id: str = None,
        internet_charge_type: str = None,
        name: str = None,
        network_type: str = None,
        provider_id: str = None,
        region_id: str = None,
        scope: Scope = None,
        share_mode: bool = None,
        status: str = None,
        utc_create: str = None,
        utc_modified: str = None,
        vip_addresses: List[str] = None,
        vip_address_type: str = None,
        vip_type: str = None,
        vpc_id: str = None,
        v_switch_iaas_id: str = None,
        workspace_id: str = None,
        zone_id: str = None,
        options: List[MapStringToStringEntity] = None,
        load_balancer_spec: str = None,
    ):
        # app_id
        self.app_id = app_id
        # app_service_ids
        self.app_service_ids = app_service_ids
        # assigned_app_ids
        self.assigned_app_ids = assigned_app_ids
        # assigned_app_service_ids
        self.assigned_app_service_ids = assigned_app_service_ids
        # auto_renew
        self.auto_renew = auto_renew
        # auto_renew_period
        self.auto_renew_period = auto_renew_period
        # bandwidth
        self.bandwidth = bandwidth
        # cluster_id
        self.cluster_id = cluster_id
        # cluster_mode
        self.cluster_mode = cluster_mode
        # domains
        self.domains = domains
        # iaas_id
        self.iaas_id = iaas_id
        # iaas_type
        self.iaas_type = iaas_type
        # lb id
        self.id = id
        # internet_charge_type
        self.internet_charge_type = internet_charge_type
        # lb名称
        self.name = name
        # network_type
        self.network_type = network_type
        # provider_id
        self.provider_id = provider_id
        # regionId
        self.region_id = region_id
        # scope
        self.scope = scope
        # share_mode
        self.share_mode = share_mode
        # lb状态
        self.status = status
        # utc_create
        self.utc_create = utc_create
        # utc_modified
        self.utc_modified = utc_modified
        # vip_addresses
        self.vip_addresses = vip_addresses
        # vip_address_type
        self.vip_address_type = vip_address_type
        # vip_type
        self.vip_type = vip_type
        # vpc_id
        self.vpc_id = vpc_id
        # v_switch_iaas_id
        self.v_switch_iaas_id = v_switch_iaas_id
        # workspace_id
        self.workspace_id = workspace_id
        # zone_id
        self.zone_id = zone_id
        # options，扩展字段
        self.options = options
        # load_balancer_spec
        self.load_balancer_spec = load_balancer_spec

    def validate(self):
        self.validate_required(self.id, 'id')
        if self.scope:
            self.scope.validate()
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.options:
            for k in self.options:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.app_service_ids is not None:
            result['app_service_ids'] = self.app_service_ids
        if self.assigned_app_ids is not None:
            result['assigned_app_ids'] = self.assigned_app_ids
        if self.assigned_app_service_ids is not None:
            result['assigned_app_service_ids'] = self.assigned_app_service_ids
        if self.auto_renew is not None:
            result['auto_renew'] = self.auto_renew
        if self.auto_renew_period is not None:
            result['auto_renew_period'] = self.auto_renew_period
        if self.bandwidth is not None:
            result['bandwidth'] = self.bandwidth
        if self.cluster_id is not None:
            result['cluster_id'] = self.cluster_id
        if self.cluster_mode is not None:
            result['cluster_mode'] = self.cluster_mode
        if self.domains is not None:
            result['domains'] = self.domains
        if self.iaas_id is not None:
            result['iaas_id'] = self.iaas_id
        if self.iaas_type is not None:
            result['iaas_type'] = self.iaas_type
        if self.id is not None:
            result['id'] = self.id
        if self.internet_charge_type is not None:
            result['internet_charge_type'] = self.internet_charge_type
        if self.name is not None:
            result['name'] = self.name
        if self.network_type is not None:
            result['network_type'] = self.network_type
        if self.provider_id is not None:
            result['provider_id'] = self.provider_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.scope is not None:
            result['scope'] = self.scope.to_map()
        if self.share_mode is not None:
            result['share_mode'] = self.share_mode
        if self.status is not None:
            result['status'] = self.status
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        if self.vip_addresses is not None:
            result['vip_addresses'] = self.vip_addresses
        if self.vip_address_type is not None:
            result['vip_address_type'] = self.vip_address_type
        if self.vip_type is not None:
            result['vip_type'] = self.vip_type
        if self.vpc_id is not None:
            result['vpc_id'] = self.vpc_id
        if self.v_switch_iaas_id is not None:
            result['v_switch_iaas_id'] = self.v_switch_iaas_id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.zone_id is not None:
            result['zone_id'] = self.zone_id
        result['options'] = []
        if self.options is not None:
            for k in self.options:
                result['options'].append(k.to_map() if k else None)
        if self.load_balancer_spec is not None:
            result['load_balancer_spec'] = self.load_balancer_spec
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('app_service_ids') is not None:
            self.app_service_ids = m.get('app_service_ids')
        if m.get('assigned_app_ids') is not None:
            self.assigned_app_ids = m.get('assigned_app_ids')
        if m.get('assigned_app_service_ids') is not None:
            self.assigned_app_service_ids = m.get('assigned_app_service_ids')
        if m.get('auto_renew') is not None:
            self.auto_renew = m.get('auto_renew')
        if m.get('auto_renew_period') is not None:
            self.auto_renew_period = m.get('auto_renew_period')
        if m.get('bandwidth') is not None:
            self.bandwidth = m.get('bandwidth')
        if m.get('cluster_id') is not None:
            self.cluster_id = m.get('cluster_id')
        if m.get('cluster_mode') is not None:
            self.cluster_mode = m.get('cluster_mode')
        if m.get('domains') is not None:
            self.domains = m.get('domains')
        if m.get('iaas_id') is not None:
            self.iaas_id = m.get('iaas_id')
        if m.get('iaas_type') is not None:
            self.iaas_type = m.get('iaas_type')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('internet_charge_type') is not None:
            self.internet_charge_type = m.get('internet_charge_type')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('network_type') is not None:
            self.network_type = m.get('network_type')
        if m.get('provider_id') is not None:
            self.provider_id = m.get('provider_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('scope') is not None:
            temp_model = Scope()
            self.scope = temp_model.from_map(m['scope'])
        if m.get('share_mode') is not None:
            self.share_mode = m.get('share_mode')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        if m.get('vip_addresses') is not None:
            self.vip_addresses = m.get('vip_addresses')
        if m.get('vip_address_type') is not None:
            self.vip_address_type = m.get('vip_address_type')
        if m.get('vip_type') is not None:
            self.vip_type = m.get('vip_type')
        if m.get('vpc_id') is not None:
            self.vpc_id = m.get('vpc_id')
        if m.get('v_switch_iaas_id') is not None:
            self.v_switch_iaas_id = m.get('v_switch_iaas_id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('zone_id') is not None:
            self.zone_id = m.get('zone_id')
        self.options = []
        if m.get('options') is not None:
            for k in m.get('options'):
                temp_model = MapStringToStringEntity()
                self.options.append(temp_model.from_map(k))
        if m.get('load_balancer_spec') is not None:
            self.load_balancer_spec = m.get('load_balancer_spec')
        return self


class AppOwner(TeaModel):
    def __init__(
        self,
        dev_owner: UserInfo = None,
        backup_dev_owners: List[UserInfo] = None,
        test_owner: UserInfo = None,
        backup_test_owners: List[UserInfo] = None,
        ops: UserInfo = None,
        backup_opses: List[UserInfo] = None,
        dev_architect: UserInfo = None,
        backup_dev_architects: List[UserInfo] = None,
        test_architect: UserInfo = None,
        backup_test_architects: List[UserInfo] = None,
    ):
        # 研发负责人
        self.dev_owner = dev_owner
        # backup开发人员
        self.backup_dev_owners = backup_dev_owners
        # 测试负责人
        self.test_owner = test_owner
        # 备用测试人员
        self.backup_test_owners = backup_test_owners
        # 运维负责人
        self.ops = ops
        # 备用SRE人员
        self.backup_opses = backup_opses
        # 开发architect负责人
        self.dev_architect = dev_architect
        # 备用Architects联系人
        self.backup_dev_architects = backup_dev_architects
        # 测试architect
        self.test_architect = test_architect
        # 备用测试architects
        self.backup_test_architects = backup_test_architects

    def validate(self):
        if self.dev_owner:
            self.dev_owner.validate()
        if self.backup_dev_owners:
            for k in self.backup_dev_owners:
                if k:
                    k.validate()
        if self.test_owner:
            self.test_owner.validate()
        if self.backup_test_owners:
            for k in self.backup_test_owners:
                if k:
                    k.validate()
        if self.ops:
            self.ops.validate()
        if self.backup_opses:
            for k in self.backup_opses:
                if k:
                    k.validate()
        if self.dev_architect:
            self.dev_architect.validate()
        if self.backup_dev_architects:
            for k in self.backup_dev_architects:
                if k:
                    k.validate()
        if self.test_architect:
            self.test_architect.validate()
        if self.backup_test_architects:
            for k in self.backup_test_architects:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.dev_owner is not None:
            result['dev_owner'] = self.dev_owner.to_map()
        result['backup_dev_owners'] = []
        if self.backup_dev_owners is not None:
            for k in self.backup_dev_owners:
                result['backup_dev_owners'].append(k.to_map() if k else None)
        if self.test_owner is not None:
            result['test_owner'] = self.test_owner.to_map()
        result['backup_test_owners'] = []
        if self.backup_test_owners is not None:
            for k in self.backup_test_owners:
                result['backup_test_owners'].append(k.to_map() if k else None)
        if self.ops is not None:
            result['ops'] = self.ops.to_map()
        result['backup_opses'] = []
        if self.backup_opses is not None:
            for k in self.backup_opses:
                result['backup_opses'].append(k.to_map() if k else None)
        if self.dev_architect is not None:
            result['dev_architect'] = self.dev_architect.to_map()
        result['backup_dev_architects'] = []
        if self.backup_dev_architects is not None:
            for k in self.backup_dev_architects:
                result['backup_dev_architects'].append(k.to_map() if k else None)
        if self.test_architect is not None:
            result['test_architect'] = self.test_architect.to_map()
        result['backup_test_architects'] = []
        if self.backup_test_architects is not None:
            for k in self.backup_test_architects:
                result['backup_test_architects'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dev_owner') is not None:
            temp_model = UserInfo()
            self.dev_owner = temp_model.from_map(m['dev_owner'])
        self.backup_dev_owners = []
        if m.get('backup_dev_owners') is not None:
            for k in m.get('backup_dev_owners'):
                temp_model = UserInfo()
                self.backup_dev_owners.append(temp_model.from_map(k))
        if m.get('test_owner') is not None:
            temp_model = UserInfo()
            self.test_owner = temp_model.from_map(m['test_owner'])
        self.backup_test_owners = []
        if m.get('backup_test_owners') is not None:
            for k in m.get('backup_test_owners'):
                temp_model = UserInfo()
                self.backup_test_owners.append(temp_model.from_map(k))
        if m.get('ops') is not None:
            temp_model = UserInfo()
            self.ops = temp_model.from_map(m['ops'])
        self.backup_opses = []
        if m.get('backup_opses') is not None:
            for k in m.get('backup_opses'):
                temp_model = UserInfo()
                self.backup_opses.append(temp_model.from_map(k))
        if m.get('dev_architect') is not None:
            temp_model = UserInfo()
            self.dev_architect = temp_model.from_map(m['dev_architect'])
        self.backup_dev_architects = []
        if m.get('backup_dev_architects') is not None:
            for k in m.get('backup_dev_architects'):
                temp_model = UserInfo()
                self.backup_dev_architects.append(temp_model.from_map(k))
        if m.get('test_architect') is not None:
            temp_model = UserInfo()
            self.test_architect = temp_model.from_map(m['test_architect'])
        self.backup_test_architects = []
        if m.get('backup_test_architects') is not None:
            for k in m.get('backup_test_architects'):
                temp_model = UserInfo()
                self.backup_test_architects.append(temp_model.from_map(k))
        return self


class CodeRepository(TeaModel):
    def __init__(
        self,
        id: str = None,
        name: str = None,
        type: str = None,
        owner: str = None,
        source_location: str = None,
        remote_repo_id: str = None,
        instance_id: str = None,
        is_init_standard_path: bool = None,
        repo_reuse: str = None,
        parent_repos_name: str = None,
        status: str = None,
        extra_params: str = None,
        use_exist: bool = None,
        group_name: str = None,
    ):
        # 代码仓库ID
        self.id = id
        # 名称
        self.name = name
        # VCS源代码管理系统
        self.type = type
        # 负责人
        self.owner = owner
        # 源代码地址
        self.source_location = source_location
        # 被SCM管理的远程仓库ID
        self.remote_repo_id = remote_repo_id
        # 流程标记id(可选参数)
        self.instance_id = instance_id
        # 是否初始化目录(可选参数，目前金融云传与不传都不初始化)
        self.is_init_standard_path = is_init_standard_path
        # 代码库是否可复用(默认为不复用 0)
        self.repo_reuse = repo_reuse
        # 父代码库名称(reposReuse为0时可以不传)
        self.parent_repos_name = parent_repos_name
        # 代码仓库状态
        self.status = status
        # 扩展参数，JSON字符串
        self.extra_params = extra_params
        # 是否使用已有仓库
        self.use_exist = use_exist
        # 分组名称
        self.group_name = group_name

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.type is not None:
            result['type'] = self.type
        if self.owner is not None:
            result['owner'] = self.owner
        if self.source_location is not None:
            result['source_location'] = self.source_location
        if self.remote_repo_id is not None:
            result['remote_repo_id'] = self.remote_repo_id
        if self.instance_id is not None:
            result['instance_id'] = self.instance_id
        if self.is_init_standard_path is not None:
            result['is_init_standard_path'] = self.is_init_standard_path
        if self.repo_reuse is not None:
            result['repo_reuse'] = self.repo_reuse
        if self.parent_repos_name is not None:
            result['parent_repos_name'] = self.parent_repos_name
        if self.status is not None:
            result['status'] = self.status
        if self.extra_params is not None:
            result['extra_params'] = self.extra_params
        if self.use_exist is not None:
            result['use_exist'] = self.use_exist
        if self.group_name is not None:
            result['group_name'] = self.group_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('owner') is not None:
            self.owner = m.get('owner')
        if m.get('source_location') is not None:
            self.source_location = m.get('source_location')
        if m.get('remote_repo_id') is not None:
            self.remote_repo_id = m.get('remote_repo_id')
        if m.get('instance_id') is not None:
            self.instance_id = m.get('instance_id')
        if m.get('is_init_standard_path') is not None:
            self.is_init_standard_path = m.get('is_init_standard_path')
        if m.get('repo_reuse') is not None:
            self.repo_reuse = m.get('repo_reuse')
        if m.get('parent_repos_name') is not None:
            self.parent_repos_name = m.get('parent_repos_name')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('extra_params') is not None:
            self.extra_params = m.get('extra_params')
        if m.get('use_exist') is not None:
            self.use_exist = m.get('use_exist')
        if m.get('group_name') is not None:
            self.group_name = m.get('group_name')
        return self


class Disk(TeaModel):
    def __init__(
        self,
        category: str = None,
        computer: DiskComputer = None,
        delete_auto_snapshot: bool = None,
        delete_with_computer: bool = None,
        device: str = None,
        enable_auto_snapshot: bool = None,
        iaas_id: str = None,
        id: str = None,
        image_id: str = None,
        name: str = None,
        portable: bool = None,
        provider_id: str = None,
        region_id: str = None,
        size: int = None,
        status: str = None,
        tenant_id: str = None,
        type: str = None,
        utc_create: str = None,
        utc_modified: str = None,
        workspace_id: str = None,
        zone_id: str = None,
    ):
        # ssd, cloud_efficiency
        self.category = category
        # disk related computer info
        self.computer = computer
        # 是否同时删除自动快照
        self.delete_auto_snapshot = delete_auto_snapshot
        # 磁盘是否随container一起释放
        self.delete_with_computer = delete_with_computer
        # device info
        self.device = device
        # 磁盘是否执行自动快照策略
        self.enable_auto_snapshot = enable_auto_snapshot
        # iaasId
        self.iaas_id = iaas_id
        # id
        self.id = id
        # 创建磁盘的镜像
        self.image_id = image_id
        # name
        self.name = name
        # 磁盘是否可卸载
        self.portable = portable
        # providerId
        self.provider_id = provider_id
        # regionId
        self.region_id = region_id
        # disk size
        self.size = size
        # disk status
        self.status = status
        # tenantId
        self.tenant_id = tenant_id
        # SYSTEM, DATA
        self.type = type
        # utcCreate
        self.utc_create = utc_create
        # utcModified
        self.utc_modified = utc_modified
        # workspaceId
        self.workspace_id = workspace_id
        # zoneId
        self.zone_id = zone_id

    def validate(self):
        if self.computer:
            self.computer.validate()
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.category is not None:
            result['category'] = self.category
        if self.computer is not None:
            result['computer'] = self.computer.to_map()
        if self.delete_auto_snapshot is not None:
            result['delete_auto_snapshot'] = self.delete_auto_snapshot
        if self.delete_with_computer is not None:
            result['delete_with_computer'] = self.delete_with_computer
        if self.device is not None:
            result['device'] = self.device
        if self.enable_auto_snapshot is not None:
            result['enable_auto_snapshot'] = self.enable_auto_snapshot
        if self.iaas_id is not None:
            result['iaas_id'] = self.iaas_id
        if self.id is not None:
            result['id'] = self.id
        if self.image_id is not None:
            result['image_id'] = self.image_id
        if self.name is not None:
            result['name'] = self.name
        if self.portable is not None:
            result['portable'] = self.portable
        if self.provider_id is not None:
            result['provider_id'] = self.provider_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.size is not None:
            result['size'] = self.size
        if self.status is not None:
            result['status'] = self.status
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.type is not None:
            result['type'] = self.type
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.zone_id is not None:
            result['zone_id'] = self.zone_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('computer') is not None:
            temp_model = DiskComputer()
            self.computer = temp_model.from_map(m['computer'])
        if m.get('delete_auto_snapshot') is not None:
            self.delete_auto_snapshot = m.get('delete_auto_snapshot')
        if m.get('delete_with_computer') is not None:
            self.delete_with_computer = m.get('delete_with_computer')
        if m.get('device') is not None:
            self.device = m.get('device')
        if m.get('enable_auto_snapshot') is not None:
            self.enable_auto_snapshot = m.get('enable_auto_snapshot')
        if m.get('iaas_id') is not None:
            self.iaas_id = m.get('iaas_id')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('image_id') is not None:
            self.image_id = m.get('image_id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('portable') is not None:
            self.portable = m.get('portable')
        if m.get('provider_id') is not None:
            self.provider_id = m.get('provider_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('size') is not None:
            self.size = m.get('size')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('zone_id') is not None:
            self.zone_id = m.get('zone_id')
        return self


class WorkspaceZoneDto(TeaModel):
    def __init__(
        self,
        id: str = None,
        workspace_id: str = None,
        zone_id: str = None,
        zone_name: str = None,
    ):
        # id
        self.id = id
        # workspace_id
        self.workspace_id = workspace_id
        # zone_id
        self.zone_id = zone_id
        # zone name
        self.zone_name = zone_name

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.zone_id, 'zone_id')

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.zone_id is not None:
            result['zone_id'] = self.zone_id
        if self.zone_name is not None:
            result['zone_name'] = self.zone_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('zone_id') is not None:
            self.zone_id = m.get('zone_id')
        if m.get('zone_name') is not None:
            self.zone_name = m.get('zone_name')
        return self


class WorkspaceGroupView(TeaModel):
    def __init__(
        self,
        id: str = None,
        name: str = None,
        display_name: str = None,
        tenant_id: str = None,
        properties: str = None,
        status: str = None,
        workspaces: List[WorkspaceView] = None,
    ):
        # id
        self.id = id
        # name
        self.name = name
        # displayName
        self.display_name = display_name
        # tenantId
        self.tenant_id = tenant_id
        # properties
        self.properties = properties
        # status
        self.status = status
        # workspaces
        self.workspaces = workspaces

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.name, 'name')
        self.validate_required(self.display_name, 'display_name')
        self.validate_required(self.tenant_id, 'tenant_id')
        self.validate_required(self.properties, 'properties')
        self.validate_required(self.status, 'status')
        self.validate_required(self.workspaces, 'workspaces')
        if self.workspaces:
            for k in self.workspaces:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.display_name is not None:
            result['display_name'] = self.display_name
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.properties is not None:
            result['properties'] = self.properties
        if self.status is not None:
            result['status'] = self.status
        result['workspaces'] = []
        if self.workspaces is not None:
            for k in self.workspaces:
                result['workspaces'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('display_name') is not None:
            self.display_name = m.get('display_name')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('properties') is not None:
            self.properties = m.get('properties')
        if m.get('status') is not None:
            self.status = m.get('status')
        self.workspaces = []
        if m.get('workspaces') is not None:
            for k in m.get('workspaces'):
                temp_model = WorkspaceView()
                self.workspaces.append(temp_model.from_map(k))
        return self


class TaskRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
        operator: str = None,
        token: str = None,
        type: str = None,
        status: str = None,
    ):
        # id
        self.id = id
        # operator
        self.operator = operator
        # token
        self.token = token
        # type
        self.type = type
        # status
        self.status = status

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.type, 'type')

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.operator is not None:
            result['operator'] = self.operator
        if self.token is not None:
            result['token'] = self.token
        if self.type is not None:
            result['type'] = self.type
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('operator') is not None:
            self.operator = m.get('operator')
        if m.get('token') is not None:
            self.token = m.get('token')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class AppLevel(TeaModel):
    def __init__(
        self,
        id: str = None,
        name: str = None,
        creator_id: str = None,
        tenant_id: str = None,
        utc_create: str = None,
        utc_modified: str = None,
    ):
        # ID
        self.id = id
        # 应用等级名称
        self.name = name
        # 创建者
        self.creator_id = creator_id
        # 租户ID
        self.tenant_id = tenant_id
        # 创建时间
        self.utc_create = utc_create
        # 最近修改时间
        self.utc_modified = utc_modified

    def validate(self):
        self.validate_required(self.id, 'id')
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.creator_id is not None:
            result['creator_id'] = self.creator_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('creator_id') is not None:
            self.creator_id = m.get('creator_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        return self


class NextHopItem(TeaModel):
    def __init__(
        self,
        next_hop_type: str = None,
        next_hop_id: str = None,
        enable: int = None,
        weight: int = None,
    ):
        # 
        # 下一跳的类型。
        # 
        # Instance：ECS实例。
        # HaVip：高可用虚拟IP。
        # VpnGateway：VPN网关。
        # NatGateway：NAT网关。
        # NetworkInterface：辅助弹性网卡。
        # RouterInterface：路由器接口。
        # IPv6Gateway：IPv6网关。
        self.next_hop_type = next_hop_type
        # 下一跳实例的ID。
        self.next_hop_id = next_hop_id
        # 是否启用下一跳。
        # 
        # 0：不启用。
        # 1：启用。
        self.enable = enable
        # 下一跳的路由权重。
        self.weight = weight

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.next_hop_type is not None:
            result['next_hop_type'] = self.next_hop_type
        if self.next_hop_id is not None:
            result['next_hop_id'] = self.next_hop_id
        if self.enable is not None:
            result['enable'] = self.enable
        if self.weight is not None:
            result['weight'] = self.weight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('next_hop_type') is not None:
            self.next_hop_type = m.get('next_hop_type')
        if m.get('next_hop_id') is not None:
            self.next_hop_id = m.get('next_hop_id')
        if m.get('enable') is not None:
            self.enable = m.get('enable')
        if m.get('weight') is not None:
            self.weight = m.get('weight')
        return self


class AppExtraInfo(TeaModel):
    def __init__(
        self,
        id: str = None,
        name: str = None,
        value: str = None,
        description: str = None,
        template_id: str = None,
        type: str = None,
        utc_create: str = None,
        utc_modified: str = None,
        app_extrainfo_id: str = None,
        app_id: str = None,
        template_data_id: str = None,
    ):
        # ID
        self.id = id
        # 名称
        self.name = name
        # 值
        self.value = value
        # 描述
        self.description = description
        # 模板ID
        self.template_id = template_id
        # 模板类型
        self.type = type
        # 创建时间
        self.utc_create = utc_create
        # 最近修改时间
        self.utc_modified = utc_modified
        # 应用扩展信息ID
        self.app_extrainfo_id = app_extrainfo_id
        # 应用ID
        self.app_id = app_id
        # 模板数据ID
        self.template_data_id = template_data_id

    def validate(self):
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.value is not None:
            result['value'] = self.value
        if self.description is not None:
            result['description'] = self.description
        if self.template_id is not None:
            result['template_id'] = self.template_id
        if self.type is not None:
            result['type'] = self.type
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        if self.app_extrainfo_id is not None:
            result['app_extrainfo_id'] = self.app_extrainfo_id
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.template_data_id is not None:
            result['template_data_id'] = self.template_data_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('value') is not None:
            self.value = m.get('value')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('template_id') is not None:
            self.template_id = m.get('template_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        if m.get('app_extrainfo_id') is not None:
            self.app_extrainfo_id = m.get('app_extrainfo_id')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('template_data_id') is not None:
            self.template_data_id = m.get('template_data_id')
        return self


class SLSConfigSensitiveKey(TeaModel):
    def __init__(
        self,
        all: bool = None,
        const_value: str = None,
        key: str = None,
        regex_begin: str = None,
        regex_content: str = None,
        type: str = None,
    ):
        # 是否替换该字段中所有的敏感内容。建议设置为true
        self.all = all
        # 当type设置为const时必须填写
        self.const_value = const_value
        # 日志Key名称
        self.key = key
        # 敏感内容的前缀
        self.regex_begin = regex_begin
        # 敏感内容正则表达式。
        self.regex_content = regex_content
        # 脱敏方式，取值为const、md5。
        # 若取值为const，则将敏感内容替换成const字段取值内容。
        # 若取值为md5，则将敏感内容替换为其对应的MD5值。
        self.type = type

    def validate(self):
        self.validate_required(self.all, 'all')
        self.validate_required(self.key, 'key')
        self.validate_required(self.regex_begin, 'regex_begin')
        self.validate_required(self.regex_content, 'regex_content')
        self.validate_required(self.type, 'type')

    def to_map(self):
        result = dict()
        if self.all is not None:
            result['all'] = self.all
        if self.const_value is not None:
            result['const_value'] = self.const_value
        if self.key is not None:
            result['key'] = self.key
        if self.regex_begin is not None:
            result['regex_begin'] = self.regex_begin
        if self.regex_content is not None:
            result['regex_content'] = self.regex_content
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('all') is not None:
            self.all = m.get('all')
        if m.get('const_value') is not None:
            self.const_value = m.get('const_value')
        if m.get('key') is not None:
            self.key = m.get('key')
        if m.get('regex_begin') is not None:
            self.regex_begin = m.get('regex_begin')
        if m.get('regex_content') is not None:
            self.regex_content = m.get('regex_content')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class JoinedSecurityGroupVO(TeaModel):
    def __init__(
        self,
        iaas_id: str = None,
        name: str = None,
        workspace_id: str = None,
        workspace_name: str = None,
    ):
        # iaas id
        self.iaas_id = iaas_id
        # name
        self.name = name
        # workspace id
        self.workspace_id = workspace_id
        # workspace name
        self.workspace_name = workspace_name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.iaas_id is not None:
            result['iaas_id'] = self.iaas_id
        if self.name is not None:
            result['name'] = self.name
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.workspace_name is not None:
            result['workspace_name'] = self.workspace_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('iaas_id') is not None:
            self.iaas_id = m.get('iaas_id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('workspace_name') is not None:
            self.workspace_name = m.get('workspace_name')
        return self


class PaginationQuery(TeaModel):
    def __init__(
        self,
        current_page: int = None,
        is_locale_enabled: bool = None,
        local: str = None,
        page_size: int = None,
        paging: bool = None,
        query_type: str = None,
        search: bool = None,
        orders: List[str] = None,
    ):
        # 当前页数
        self.current_page = current_page
        # isLocaleEnabled
        self.is_locale_enabled = is_locale_enabled
        # local
        self.local = local
        # 分页大小
        self.page_size = page_size
        # paging
        self.paging = paging
        # 查询类型
        self.query_type = query_type
        # search
        self.search = search
        # 排序关键字列表
        self.orders = orders

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.is_locale_enabled is not None:
            result['is_locale_enabled'] = self.is_locale_enabled
        if self.local is not None:
            result['local'] = self.local
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.paging is not None:
            result['paging'] = self.paging
        if self.query_type is not None:
            result['query_type'] = self.query_type
        if self.search is not None:
            result['search'] = self.search
        if self.orders is not None:
            result['orders'] = self.orders
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('is_locale_enabled') is not None:
            self.is_locale_enabled = m.get('is_locale_enabled')
        if m.get('local') is not None:
            self.local = m.get('local')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('paging') is not None:
            self.paging = m.get('paging')
        if m.get('query_type') is not None:
            self.query_type = m.get('query_type')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('orders') is not None:
            self.orders = m.get('orders')
        return self


class IaasErrorInfo(TeaModel):
    def __init__(
        self,
        error_code: str = None,
        error_message: str = None,
        status_code: int = None,
        host_id: str = None,
        request_id: str = None,
    ):
        # error_code
        self.error_code = error_code
        # error_message
        self.error_message = error_message
        # status_code
        self.status_code = status_code
        # host_id
        self.host_id = host_id
        # requestId
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.error_code is not None:
            result['error_code'] = self.error_code
        if self.error_message is not None:
            result['error_message'] = self.error_message
        if self.status_code is not None:
            result['status_code'] = self.status_code
        if self.host_id is not None:
            result['host_id'] = self.host_id
        if self.request_id is not None:
            result['request_id'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('error_code') is not None:
            self.error_code = m.get('error_code')
        if m.get('error_message') is not None:
            self.error_message = m.get('error_message')
        if m.get('status_code') is not None:
            self.status_code = m.get('status_code')
        if m.get('host_id') is not None:
            self.host_id = m.get('host_id')
        if m.get('request_id') is not None:
            self.request_id = m.get('request_id')
        return self


class BuildpackInstances(TeaModel):
    def __init__(
        self,
        ecses: int = None,
        app_binded: int = None,
    ):
        # ecs个数
        self.ecses = ecses
        # 绑定应用个数
        self.app_binded = app_binded

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.ecses is not None:
            result['ecses'] = self.ecses
        if self.app_binded is not None:
            result['app_binded'] = self.app_binded
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ecses') is not None:
            self.ecses = m.get('ecses')
        if m.get('app_binded') is not None:
            self.app_binded = m.get('app_binded')
        return self


class WorkspaceDc(TeaModel):
    def __init__(
        self,
        id: str = None,
        datacenter_id: str = None,
        workspace_id: str = None,
        datacenter_type: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
    ):
        # id
        self.id = id
        # datacenterId
        self.datacenter_id = datacenter_id
        # workspaceId
        self.workspace_id = workspace_id
        # datacenterType
        self.datacenter_type = datacenter_type
        # gmtCreate
        self.gmt_create = gmt_create
        # gmtModified
        self.gmt_modified = gmt_modified

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.datacenter_id, 'datacenter_id')
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.datacenter_type, 'datacenter_type')
        self.validate_required(self.gmt_create, 'gmt_create')
        if self.gmt_create is not None:
            self.validate_pattern(self.gmt_create, 'gmt_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.gmt_modified, 'gmt_modified')
        if self.gmt_modified is not None:
            self.validate_pattern(self.gmt_modified, 'gmt_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.datacenter_id is not None:
            result['datacenter_id'] = self.datacenter_id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.datacenter_type is not None:
            result['datacenter_type'] = self.datacenter_type
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('datacenter_id') is not None:
            self.datacenter_id = m.get('datacenter_id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('datacenter_type') is not None:
            self.datacenter_type = m.get('datacenter_type')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        return self


class SecurityGroupRule(TeaModel):
    def __init__(
        self,
        description: str = None,
        dest_cidr_ip: str = None,
        ip_protocol: str = None,
        nic_type: str = None,
        policy: str = None,
        port_range: str = None,
        priority: str = None,
        source_cidr_ip: str = None,
    ):
        # 规则描述信息
        self.description = description
        # 目的端IP地址范围。支持CIDR格式和IPv4格式的IP地址范围。
        self.dest_cidr_ip = dest_cidr_ip
        # 传输层协议。不区分大小写。取值范围：
        # 
        # icmp
        # gre
        # tcp
        # udp
        # all：支持所有协议
        self.ip_protocol = ip_protocol
        # 经典网络类型安全组规则的网卡类型。取值范围：
        # 
        # internet：公网。
        # intranet：内网。
        # 默认值：internet。
        # 
        # 在以下情况中，参数NicType取值只能为intranet：
        # 
        # 安全组规则的网络类型为专有网络VPC时，您无需设置NicType参数，默认并且只能为intranet。
        # 当设置安全组之间互相访问时，即指定了DestGroupId且没有指定DestCidrIp时。
        self.nic_type = nic_type
        # 访问权限。取值范围：
        # 
        # accept：接受访问。
        # drop：拒绝访问，不返回拒绝信息。
        # 默认值：accept。
        self.policy = policy
        # 目的端安全组开放的传输层协议相关的端口范围。取值范围：
        # 
        # TCP/UDP协议：取值范围为1~65535。使用斜线（/）隔开起始端口和终止端口。正确示范：1/200；错误示范：200/1。
        # ICMP协议：-1/-1。
        # GRE协议：-1/-1。
        # all：-1/-1。
        self.port_range = port_range
        # 安全组规则优先级。取值范围：1~100
        # 
        # 默认值：1。
        self.priority = priority
        # 源端IP地址范围。支持CIDR格式和IPv4格式的IP地址范围。
        # 
        # 默认值：0.0.0.0/0。
        self.source_cidr_ip = source_cidr_ip

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.description is not None:
            result['description'] = self.description
        if self.dest_cidr_ip is not None:
            result['dest_cidr_ip'] = self.dest_cidr_ip
        if self.ip_protocol is not None:
            result['ip_protocol'] = self.ip_protocol
        if self.nic_type is not None:
            result['nic_type'] = self.nic_type
        if self.policy is not None:
            result['policy'] = self.policy
        if self.port_range is not None:
            result['port_range'] = self.port_range
        if self.priority is not None:
            result['priority'] = self.priority
        if self.source_cidr_ip is not None:
            result['source_cidr_ip'] = self.source_cidr_ip
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('dest_cidr_ip') is not None:
            self.dest_cidr_ip = m.get('dest_cidr_ip')
        if m.get('ip_protocol') is not None:
            self.ip_protocol = m.get('ip_protocol')
        if m.get('nic_type') is not None:
            self.nic_type = m.get('nic_type')
        if m.get('policy') is not None:
            self.policy = m.get('policy')
        if m.get('port_range') is not None:
            self.port_range = m.get('port_range')
        if m.get('priority') is not None:
            self.priority = m.get('priority')
        if m.get('source_cidr_ip') is not None:
            self.source_cidr_ip = m.get('source_cidr_ip')
        return self


class AppPortraitAppNodeEcsList(TeaModel):
    def __init__(
        self,
        id: str = None,
        zone_id: str = None,
        ip: str = None,
        load_balancer_spec: str = None,
        cpu: str = None,
        memory: str = None,
        version: str = None,
        name: str = None,
        status: str = None,
    ):
        # id
        self.id = id
        # zone_id
        self.zone_id = zone_id
        # ip
        self.ip = ip
        # load_balancer_spec
        self.load_balancer_spec = load_balancer_spec
        # cpu
        self.cpu = cpu
        # memory
        self.memory = memory
        # version
        self.version = version
        # name
        self.name = name
        # status
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.zone_id is not None:
            result['zone_id'] = self.zone_id
        if self.ip is not None:
            result['ip'] = self.ip
        if self.load_balancer_spec is not None:
            result['load_balancer_spec'] = self.load_balancer_spec
        if self.cpu is not None:
            result['cpu'] = self.cpu
        if self.memory is not None:
            result['memory'] = self.memory
        if self.version is not None:
            result['version'] = self.version
        if self.name is not None:
            result['name'] = self.name
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('zone_id') is not None:
            self.zone_id = m.get('zone_id')
        if m.get('ip') is not None:
            self.ip = m.get('ip')
        if m.get('load_balancer_spec') is not None:
            self.load_balancer_spec = m.get('load_balancer_spec')
        if m.get('cpu') is not None:
            self.cpu = m.get('cpu')
        if m.get('memory') is not None:
            self.memory = m.get('memory')
        if m.get('version') is not None:
            self.version = m.get('version')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class DbSchema(TeaModel):
    def __init__(
        self,
        char_set: str = None,
        database: Database = None,
        description: str = None,
        grants: List[DbSchemaGrant] = None,
        iaas_type: str = None,
        id: str = None,
        name: str = None,
        status: str = None,
        utc_create: str = None,
        utc_modified: str = None,
    ):
        # charSet
        self.char_set = char_set
        # database
        self.database = database
        # description
        self.description = description
        # grants
        self.grants = grants
        # iaas_type
        self.iaas_type = iaas_type
        # id
        self.id = id
        # name
        self.name = name
        # status
        self.status = status
        # utc_create
        self.utc_create = utc_create
        # utc_modified
        self.utc_modified = utc_modified

    def validate(self):
        if self.database:
            self.database.validate()
        self.validate_required(self.grants, 'grants')
        if self.grants:
            for k in self.grants:
                if k:
                    k.validate()
        self.validate_required(self.id, 'id')
        self.validate_required(self.name, 'name')
        self.validate_required(self.status, 'status')
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.char_set is not None:
            result['char_set'] = self.char_set
        if self.database is not None:
            result['database'] = self.database.to_map()
        if self.description is not None:
            result['description'] = self.description
        result['grants'] = []
        if self.grants is not None:
            for k in self.grants:
                result['grants'].append(k.to_map() if k else None)
        if self.iaas_type is not None:
            result['iaas_type'] = self.iaas_type
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.status is not None:
            result['status'] = self.status
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('char_set') is not None:
            self.char_set = m.get('char_set')
        if m.get('database') is not None:
            temp_model = Database()
            self.database = temp_model.from_map(m['database'])
        if m.get('description') is not None:
            self.description = m.get('description')
        self.grants = []
        if m.get('grants') is not None:
            for k in m.get('grants'):
                temp_model = DbSchemaGrant()
                self.grants.append(temp_model.from_map(k))
        if m.get('iaas_type') is not None:
            self.iaas_type = m.get('iaas_type')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        return self


class ZoneDto(TeaModel):
    def __init__(
        self,
        id: str = None,
        identity: str = None,
        iaas_provider_id: str = None,
        display_name: str = None,
        state: str = None,
        region_id: str = None,
        no: int = None,
        name: str = None,
        description: str = None,
        utc_create: str = None,
        utc_modified: str = None,
    ):
        # id
        self.id = id
        # identity
        self.identity = identity
        # iaasProviderId
        self.iaas_provider_id = iaas_provider_id
        # displayName
        self.display_name = display_name
        # state
        self.state = state
        # regionId
        self.region_id = region_id
        # no
        self.no = no
        # name
        self.name = name
        # description
        self.description = description
        # utcCreate
        self.utc_create = utc_create
        # utcModified
        self.utc_modified = utc_modified

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.identity, 'identity')
        self.validate_required(self.iaas_provider_id, 'iaas_provider_id')
        self.validate_required(self.display_name, 'display_name')
        self.validate_required(self.state, 'state')
        self.validate_required(self.region_id, 'region_id')
        self.validate_required(self.no, 'no')
        self.validate_required(self.name, 'name')
        self.validate_required(self.description, 'description')
        self.validate_required(self.utc_create, 'utc_create')
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.utc_modified, 'utc_modified')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.identity is not None:
            result['identity'] = self.identity
        if self.iaas_provider_id is not None:
            result['iaas_provider_id'] = self.iaas_provider_id
        if self.display_name is not None:
            result['display_name'] = self.display_name
        if self.state is not None:
            result['state'] = self.state
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.no is not None:
            result['no'] = self.no
        if self.name is not None:
            result['name'] = self.name
        if self.description is not None:
            result['description'] = self.description
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('identity') is not None:
            self.identity = m.get('identity')
        if m.get('iaas_provider_id') is not None:
            self.iaas_provider_id = m.get('iaas_provider_id')
        if m.get('display_name') is not None:
            self.display_name = m.get('display_name')
        if m.get('state') is not None:
            self.state = m.get('state')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('no') is not None:
            self.no = m.get('no')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        return self


class AppService(TeaModel):
    def __init__(
        self,
        app_id: str = None,
        app_name: str = None,
        buildpack_full_version: str = None,
        buildpack_id: str = None,
        cell_ids: List[str] = None,
        description: str = None,
        extend_properties: str = None,
        id: str = None,
        is_default: bool = None,
        is_service: bool = None,
        last_deploy_status: str = None,
        last_deploy_version: str = None,
        last_ops_order_id: str = None,
        name: str = None,
        owner_id: str = None,
        techstack_id: int = None,
        techstack_identity: str = None,
        techstack_name: str = None,
        utc_create: str = None,
        utc_modified: str = None,
        workspace_id: str = None,
    ):
        # app_id
        self.app_id = app_id
        # app_name
        self.app_name = app_name
        # buildpack_full_version
        self.buildpack_full_version = buildpack_full_version
        # buildpack_id
        self.buildpack_id = buildpack_id
        # cell_ids
        self.cell_ids = cell_ids
        # description
        self.description = description
        # extend_properties
        self.extend_properties = extend_properties
        # id
        self.id = id
        # is_default
        self.is_default = is_default
        # is_service
        self.is_service = is_service
        # last_deploy_status
        self.last_deploy_status = last_deploy_status
        # last_deploy_version
        self.last_deploy_version = last_deploy_version
        # last_ops_order_id
        self.last_ops_order_id = last_ops_order_id
        # name
        self.name = name
        # owner_id
        self.owner_id = owner_id
        # techstack_id
        self.techstack_id = techstack_id
        # techstack_identity
        self.techstack_identity = techstack_identity
        # techstack_name
        self.techstack_name = techstack_name
        # utc_create
        self.utc_create = utc_create
        # utc_modified
        self.utc_modified = utc_modified
        # workspace_id
        self.workspace_id = workspace_id

    def validate(self):
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.app_name is not None:
            result['app_name'] = self.app_name
        if self.buildpack_full_version is not None:
            result['buildpack_full_version'] = self.buildpack_full_version
        if self.buildpack_id is not None:
            result['buildpack_id'] = self.buildpack_id
        if self.cell_ids is not None:
            result['cell_ids'] = self.cell_ids
        if self.description is not None:
            result['description'] = self.description
        if self.extend_properties is not None:
            result['extend_properties'] = self.extend_properties
        if self.id is not None:
            result['id'] = self.id
        if self.is_default is not None:
            result['is_default'] = self.is_default
        if self.is_service is not None:
            result['is_service'] = self.is_service
        if self.last_deploy_status is not None:
            result['last_deploy_status'] = self.last_deploy_status
        if self.last_deploy_version is not None:
            result['last_deploy_version'] = self.last_deploy_version
        if self.last_ops_order_id is not None:
            result['last_ops_order_id'] = self.last_ops_order_id
        if self.name is not None:
            result['name'] = self.name
        if self.owner_id is not None:
            result['owner_id'] = self.owner_id
        if self.techstack_id is not None:
            result['techstack_id'] = self.techstack_id
        if self.techstack_identity is not None:
            result['techstack_identity'] = self.techstack_identity
        if self.techstack_name is not None:
            result['techstack_name'] = self.techstack_name
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('app_name') is not None:
            self.app_name = m.get('app_name')
        if m.get('buildpack_full_version') is not None:
            self.buildpack_full_version = m.get('buildpack_full_version')
        if m.get('buildpack_id') is not None:
            self.buildpack_id = m.get('buildpack_id')
        if m.get('cell_ids') is not None:
            self.cell_ids = m.get('cell_ids')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('extend_properties') is not None:
            self.extend_properties = m.get('extend_properties')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('is_default') is not None:
            self.is_default = m.get('is_default')
        if m.get('is_service') is not None:
            self.is_service = m.get('is_service')
        if m.get('last_deploy_status') is not None:
            self.last_deploy_status = m.get('last_deploy_status')
        if m.get('last_deploy_version') is not None:
            self.last_deploy_version = m.get('last_deploy_version')
        if m.get('last_ops_order_id') is not None:
            self.last_ops_order_id = m.get('last_ops_order_id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('owner_id') is not None:
            self.owner_id = m.get('owner_id')
        if m.get('techstack_id') is not None:
            self.techstack_id = m.get('techstack_id')
        if m.get('techstack_identity') is not None:
            self.techstack_identity = m.get('techstack_identity')
        if m.get('techstack_name') is not None:
            self.techstack_name = m.get('techstack_name')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class SLSConfigOutputDetail(TeaModel):
    def __init__(
        self,
        project_name: str = None,
        logstore_name: str = None,
    ):
        # 项目名称，必须为请求的project名。
        self.project_name = project_name
        # 日志库名称
        self.logstore_name = logstore_name

    def validate(self):
        self.validate_required(self.project_name, 'project_name')
        self.validate_required(self.logstore_name, 'logstore_name')

    def to_map(self):
        result = dict()
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.logstore_name is not None:
            result['logstore_name'] = self.logstore_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('logstore_name') is not None:
            self.logstore_name = m.get('logstore_name')
        return self


class AppDomain(TeaModel):
    def __init__(
        self,
        creator_id: str = None,
        id: str = None,
        name: str = None,
        parent_id: str = None,
        tenant_id: str = None,
        to_root_path: str = None,
        utc_create: str = None,
        utc_modified: str = None,
    ):
        # 创建人id
        self.creator_id = creator_id
        # id
        self.id = id
        # 名称
        self.name = name
        # parentId
        self.parent_id = parent_id
        # 租户id
        self.tenant_id = tenant_id
        # toRootPath
        self.to_root_path = to_root_path
        # utcCreate
        self.utc_create = utc_create
        # utcModified
        self.utc_modified = utc_modified

    def validate(self):
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.creator_id is not None:
            result['creator_id'] = self.creator_id
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.parent_id is not None:
            result['parent_id'] = self.parent_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.to_root_path is not None:
            result['to_root_path'] = self.to_root_path
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('creator_id') is not None:
            self.creator_id = m.get('creator_id')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('parent_id') is not None:
            self.parent_id = m.get('parent_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('to_root_path') is not None:
            self.to_root_path = m.get('to_root_path')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        return self


class IaasResponse(TeaModel):
    def __init__(
        self,
        response_body: str = None,
        response_headers: List[MapStringToStringEntity] = None,
    ):
        # response_body
        self.response_body = response_body
        # response_headers
        self.response_headers = response_headers

    def validate(self):
        if self.response_headers:
            for k in self.response_headers:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.response_body is not None:
            result['response_body'] = self.response_body
        result['response_headers'] = []
        if self.response_headers is not None:
            for k in self.response_headers:
                result['response_headers'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('response_body') is not None:
            self.response_body = m.get('response_body')
        self.response_headers = []
        if m.get('response_headers') is not None:
            for k in m.get('response_headers'):
                temp_model = MapStringToStringEntity()
                self.response_headers.append(temp_model.from_map(k))
        return self


class SLSConfigInputDetail(TeaModel):
    def __init__(
        self,
        filter_key: List[str] = None,
        filter_regex: List[str] = None,
        shard_hash_key: List[str] = None,
        enable_raw_log: bool = None,
        sensitive_keys: List[SLSConfigSensitiveKey] = None,
        merge_type: str = None,
        delay_alarm_bytes: int = None,
        adjust_timezone: bool = None,
        log_timezone: str = None,
        priority: int = None,
        log_type: str = None,
        log_path: str = None,
        file_pattern: str = None,
        topic_format: str = None,
        time_format: str = None,
        preserve: bool = None,
        preserve_depth: int = None,
        file_encoding: str = None,
        discard_unmatch: bool = None,
        max_depth: int = None,
        delay_skip_bytes: int = None,
        docker_file: bool = None,
        docker_include_label: List[MapStringToStringEntity] = None,
        docker_exclude_label: List[MapStringToStringEntity] = None,
        docker_include_env: List[MapStringToStringEntity] = None,
        docker_exclude_env: List[MapStringToStringEntity] = None,
        key: List[str] = None,
        log_begin_regex: str = None,
        regex: str = None,
        time_key: str = None,
        separator: str = None,
        quote: str = None,
        auto_extend: bool = None,
        plugin: str = None,
    ):
        # 用于过滤日志的key，只有key的值满足对应filterRegex列中设定的正则表达式，该日志数据才会被采集。
        self.filter_key = filter_key
        # 与filterKey对应的正则表达式， filterRegex的长度和filterKey的长度必须相同。
        self.filter_regex = filter_regex
        # 数据写入的模式。默认按照写入，开启后按照写入。支持的值包括 __topic__，__hostname__, __source__。
        self.shard_hash_key = shard_hash_key
        # 是否上传原始日志。
        self.enable_raw_log = enable_raw_log
        # 脱敏功能配置，类型为数组
        self.sensitive_keys = sensitive_keys
        # 聚合方式，默认为topic，表示按照Topic方式聚合。支持的值为 topic、logstore。
        self.merge_type = merge_type
        # 采集进度落后的告警阈值，默认为209715200，即200MB。
        self.delay_alarm_bytes = delay_alarm_bytes
        # 是否调整日志时区，仅在配置时间解析的情况下使用。
        self.adjust_timezone = adjust_timezone
        # 时区偏移量，例如日志时间为东八区，则该值为GMT+08:00
        self.log_timezone = log_timezone
        # 日志发送优先级，默认为0，若需设置为高优先级，则设置为1。
        self.priority = priority
        # 日志的采集模式。如果Logtail配置参数inputType选择为file，则该参数为必填项。目前可选：
        # json_log：JSON模式。
        # apsara_log：飞天模式。
        # common_reg_log：完整正则模式。
        # delimiter_log：分隔符模式。
        self.log_type = log_type
        # 日志所在的父目录，例如/var/logs/。
        self.log_path = log_path
        # 日志文件的Pattern，例如access*.log。
        self.file_pattern = file_pattern
        # Topic生成方式，支持以下四种类型：
        # none，表示topic为空。
        # default，表示将日志文件路径作为topic。
        # group_topic，表示将应用该配置的机器组topic属性作为topic。
        # 也可以将日志文件路径的某一部分作为topic，如/var/log/(.*).log。
        self.topic_format = topic_format
        # 日志时间格式，如%Y/%m/%d %H:%M:%S。
        self.time_format = time_format
        # 监控目录超时设置。默认为true，代表监控目录永不超时，false代表监控目录超过30分钟则超时。
        self.preserve = preserve
        # 当设置preserve为false时，指定监控不超时目录的深度，最大深度支持3。
        self.preserve_depth = preserve_depth
        # 支持两种类型：utf8、gbk
        self.file_encoding = file_encoding
        # 是否丢弃匹配失败的日志。
        self.discard_unmatch = discard_unmatch
        # 最大目录监控深度范围0-1000，0代表只监控本层目录。
        self.max_depth = max_depth
        # 采集落后时是否丢弃落后数据的阈值，默认为0，即不丢弃。当采集落后超过该值时，则直接丢弃落后的数据
        self.delay_skip_bytes = delay_skip_bytes
        # 采集的目标文件是否为容器内文件，默认为false。
        self.docker_file = docker_file
        # 容器Label白名单，采集包含白名单中Label的Docker容器日志，为空表示全部采集。
        self.docker_include_label = docker_include_label
        # 容器Label黑名单，不采集包含黑名单中Label的Docker容器日志，为空表示全部采集。
        self.docker_exclude_label = docker_exclude_label
        # 容器环境变量白名单，采集包含白名单中的环境变量的日志，为空表示全部采集。
        self.docker_include_env = docker_include_env
        # 容器环境变量黑名单，采集不包含黑名单中的环境变量的日志，为空表示全部采集。
        self.docker_exclude_env = docker_exclude_env
        # 完整正则/极简模式特有配置，日志内容提取结果的key列表。
        # 完整正则/极简模式 下 必填
        # 分隔符模式特有配置，日志内容提取结果的key列表。
        # 分隔符模式 下 必填
        self.key = key
        # 完整正则/极简模式特有配置，行首正则表达式。
        # 完整正则/极简模式 下 非必填。
        # 飞天模式特有配置，行首正则表达式。
        # 飞天模式 下 非必填。
        self.log_begin_regex = log_begin_regex
        # 完整正则/极简模式特有配置，提取字段的正则表达式。
        # 完整正则/极简模式 下 非必填
        self.regex = regex
        # JSON模式特有配置，指定时间字段的key名称。
        # JSON模式 下 非必填。
        # 分隔符模式特有配置，指定时间字段key名称，必须在key列表里面。
        # 分割符模式 下 必填。
        self.time_key = time_key
        # 分隔符模式特有配置，分隔符
        # 分隔符模式 下 非必填
        self.separator = separator
        # 分隔符模式特有配置，引用符。
        # 分隔符模式 下 必填
        self.quote = quote
        # 分隔符模式特有配置，当日志中实际的key数量大于配置的key数量时，是否自动扩展。
        # 分隔符模式 下 非必填。
        self.auto_extend = auto_extend
        # 插件所需JSON对象字符串，具体请参见。
        self.plugin = plugin

    def validate(self):
        if self.sensitive_keys:
            for k in self.sensitive_keys:
                if k:
                    k.validate()
        self.validate_required(self.log_type, 'log_type')
        self.validate_required(self.log_path, 'log_path')
        self.validate_required(self.file_pattern, 'file_pattern')
        self.validate_required(self.topic_format, 'topic_format')
        if self.docker_include_label:
            for k in self.docker_include_label:
                if k:
                    k.validate()
        if self.docker_exclude_label:
            for k in self.docker_exclude_label:
                if k:
                    k.validate()
        if self.docker_include_env:
            for k in self.docker_include_env:
                if k:
                    k.validate()
        if self.docker_exclude_env:
            for k in self.docker_exclude_env:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.filter_key is not None:
            result['filter_key'] = self.filter_key
        if self.filter_regex is not None:
            result['filter_regex'] = self.filter_regex
        if self.shard_hash_key is not None:
            result['shard_hash_key'] = self.shard_hash_key
        if self.enable_raw_log is not None:
            result['enable_raw_log'] = self.enable_raw_log
        result['sensitive_keys'] = []
        if self.sensitive_keys is not None:
            for k in self.sensitive_keys:
                result['sensitive_keys'].append(k.to_map() if k else None)
        if self.merge_type is not None:
            result['merge_type'] = self.merge_type
        if self.delay_alarm_bytes is not None:
            result['delay_alarm_bytes'] = self.delay_alarm_bytes
        if self.adjust_timezone is not None:
            result['adjust_timezone'] = self.adjust_timezone
        if self.log_timezone is not None:
            result['log_timezone'] = self.log_timezone
        if self.priority is not None:
            result['priority'] = self.priority
        if self.log_type is not None:
            result['log_type'] = self.log_type
        if self.log_path is not None:
            result['log_path'] = self.log_path
        if self.file_pattern is not None:
            result['file_pattern'] = self.file_pattern
        if self.topic_format is not None:
            result['topic_format'] = self.topic_format
        if self.time_format is not None:
            result['time_format'] = self.time_format
        if self.preserve is not None:
            result['preserve'] = self.preserve
        if self.preserve_depth is not None:
            result['preserve_depth'] = self.preserve_depth
        if self.file_encoding is not None:
            result['file_encoding'] = self.file_encoding
        if self.discard_unmatch is not None:
            result['discard_unmatch'] = self.discard_unmatch
        if self.max_depth is not None:
            result['max_depth'] = self.max_depth
        if self.delay_skip_bytes is not None:
            result['delay_skip_bytes'] = self.delay_skip_bytes
        if self.docker_file is not None:
            result['docker_file'] = self.docker_file
        result['docker_include_label'] = []
        if self.docker_include_label is not None:
            for k in self.docker_include_label:
                result['docker_include_label'].append(k.to_map() if k else None)
        result['docker_exclude_label'] = []
        if self.docker_exclude_label is not None:
            for k in self.docker_exclude_label:
                result['docker_exclude_label'].append(k.to_map() if k else None)
        result['docker_include_env'] = []
        if self.docker_include_env is not None:
            for k in self.docker_include_env:
                result['docker_include_env'].append(k.to_map() if k else None)
        result['docker_exclude_env'] = []
        if self.docker_exclude_env is not None:
            for k in self.docker_exclude_env:
                result['docker_exclude_env'].append(k.to_map() if k else None)
        if self.key is not None:
            result['key'] = self.key
        if self.log_begin_regex is not None:
            result['log_begin_regex'] = self.log_begin_regex
        if self.regex is not None:
            result['regex'] = self.regex
        if self.time_key is not None:
            result['time_key'] = self.time_key
        if self.separator is not None:
            result['separator'] = self.separator
        if self.quote is not None:
            result['quote'] = self.quote
        if self.auto_extend is not None:
            result['auto_extend'] = self.auto_extend
        if self.plugin is not None:
            result['plugin'] = self.plugin
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('filter_key') is not None:
            self.filter_key = m.get('filter_key')
        if m.get('filter_regex') is not None:
            self.filter_regex = m.get('filter_regex')
        if m.get('shard_hash_key') is not None:
            self.shard_hash_key = m.get('shard_hash_key')
        if m.get('enable_raw_log') is not None:
            self.enable_raw_log = m.get('enable_raw_log')
        self.sensitive_keys = []
        if m.get('sensitive_keys') is not None:
            for k in m.get('sensitive_keys'):
                temp_model = SLSConfigSensitiveKey()
                self.sensitive_keys.append(temp_model.from_map(k))
        if m.get('merge_type') is not None:
            self.merge_type = m.get('merge_type')
        if m.get('delay_alarm_bytes') is not None:
            self.delay_alarm_bytes = m.get('delay_alarm_bytes')
        if m.get('adjust_timezone') is not None:
            self.adjust_timezone = m.get('adjust_timezone')
        if m.get('log_timezone') is not None:
            self.log_timezone = m.get('log_timezone')
        if m.get('priority') is not None:
            self.priority = m.get('priority')
        if m.get('log_type') is not None:
            self.log_type = m.get('log_type')
        if m.get('log_path') is not None:
            self.log_path = m.get('log_path')
        if m.get('file_pattern') is not None:
            self.file_pattern = m.get('file_pattern')
        if m.get('topic_format') is not None:
            self.topic_format = m.get('topic_format')
        if m.get('time_format') is not None:
            self.time_format = m.get('time_format')
        if m.get('preserve') is not None:
            self.preserve = m.get('preserve')
        if m.get('preserve_depth') is not None:
            self.preserve_depth = m.get('preserve_depth')
        if m.get('file_encoding') is not None:
            self.file_encoding = m.get('file_encoding')
        if m.get('discard_unmatch') is not None:
            self.discard_unmatch = m.get('discard_unmatch')
        if m.get('max_depth') is not None:
            self.max_depth = m.get('max_depth')
        if m.get('delay_skip_bytes') is not None:
            self.delay_skip_bytes = m.get('delay_skip_bytes')
        if m.get('docker_file') is not None:
            self.docker_file = m.get('docker_file')
        self.docker_include_label = []
        if m.get('docker_include_label') is not None:
            for k in m.get('docker_include_label'):
                temp_model = MapStringToStringEntity()
                self.docker_include_label.append(temp_model.from_map(k))
        self.docker_exclude_label = []
        if m.get('docker_exclude_label') is not None:
            for k in m.get('docker_exclude_label'):
                temp_model = MapStringToStringEntity()
                self.docker_exclude_label.append(temp_model.from_map(k))
        self.docker_include_env = []
        if m.get('docker_include_env') is not None:
            for k in m.get('docker_include_env'):
                temp_model = MapStringToStringEntity()
                self.docker_include_env.append(temp_model.from_map(k))
        self.docker_exclude_env = []
        if m.get('docker_exclude_env') is not None:
            for k in m.get('docker_exclude_env'):
                temp_model = MapStringToStringEntity()
                self.docker_exclude_env.append(temp_model.from_map(k))
        if m.get('key') is not None:
            self.key = m.get('key')
        if m.get('log_begin_regex') is not None:
            self.log_begin_regex = m.get('log_begin_regex')
        if m.get('regex') is not None:
            self.regex = m.get('regex')
        if m.get('time_key') is not None:
            self.time_key = m.get('time_key')
        if m.get('separator') is not None:
            self.separator = m.get('separator')
        if m.get('quote') is not None:
            self.quote = m.get('quote')
        if m.get('auto_extend') is not None:
            self.auto_extend = m.get('auto_extend')
        if m.get('plugin') is not None:
            self.plugin = m.get('plugin')
        return self


class Resource(TeaModel):
    def __init__(
        self,
        name: str = None,
        description: str = None,
        instance_charge_type: str = None,
        expired_time: str = None,
        auto_renew: bool = None,
        auto_renew_period: int = None,
        iaas_id: str = None,
        iaas_type: str = None,
        region_id: str = None,
        zone_id: str = None,
        id: str = None,
        utc_create: str = None,
        utc_modified: str = None,
    ):
        # name
        self.name = name
        # description
        self.description = description
        # instance_charge_type
        self.instance_charge_type = instance_charge_type
        # expiredTime
        self.expired_time = expired_time
        # auto_renew
        self.auto_renew = auto_renew
        # autoRenewPeriod
        self.auto_renew_period = auto_renew_period
        # iaas_id
        self.iaas_id = iaas_id
        # iaas_type
        self.iaas_type = iaas_type
        # region_id
        self.region_id = region_id
        # zone_id
        self.zone_id = zone_id
        # id
        self.id = id
        # utc_create
        self.utc_create = utc_create
        # utc_modified
        self.utc_modified = utc_modified

    def validate(self):
        self.validate_required(self.name, 'name')
        if self.expired_time is not None:
            self.validate_pattern(self.expired_time, 'expired_time', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.zone_id, 'zone_id')
        self.validate_required(self.id, 'id')
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.name is not None:
            result['name'] = self.name
        if self.description is not None:
            result['description'] = self.description
        if self.instance_charge_type is not None:
            result['instance_charge_type'] = self.instance_charge_type
        if self.expired_time is not None:
            result['expired_time'] = self.expired_time
        if self.auto_renew is not None:
            result['auto_renew'] = self.auto_renew
        if self.auto_renew_period is not None:
            result['auto_renew_period'] = self.auto_renew_period
        if self.iaas_id is not None:
            result['iaas_id'] = self.iaas_id
        if self.iaas_type is not None:
            result['iaas_type'] = self.iaas_type
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.zone_id is not None:
            result['zone_id'] = self.zone_id
        if self.id is not None:
            result['id'] = self.id
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('instance_charge_type') is not None:
            self.instance_charge_type = m.get('instance_charge_type')
        if m.get('expired_time') is not None:
            self.expired_time = m.get('expired_time')
        if m.get('auto_renew') is not None:
            self.auto_renew = m.get('auto_renew')
        if m.get('auto_renew_period') is not None:
            self.auto_renew_period = m.get('auto_renew_period')
        if m.get('iaas_id') is not None:
            self.iaas_id = m.get('iaas_id')
        if m.get('iaas_type') is not None:
            self.iaas_type = m.get('iaas_type')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('zone_id') is not None:
            self.zone_id = m.get('zone_id')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        return self


class AppView(TeaModel):
    def __init__(
        self,
        app_domain_id: str = None,
        app_extra_infos: List[AppExtraInfo] = None,
        app_level: AppLevel = None,
        app_owner: AppOwner = None,
        archetype: ScmSofaArchetype = None,
        buildpack_version: str = None,
        chinese_name: str = None,
        code_repository: CodeRepository = None,
        description: str = None,
        extra_params: str = None,
        id: str = None,
        is_service: bool = None,
        name: str = None,
        owner_id: str = None,
        stack_id: str = None,
        status: str = None,
        tags: str = None,
        tenant_id: str = None,
        utc_create: str = None,
        utc_modified: str = None,
        workspace_id: str = None,
        owner_name: str = None,
        real_owner_name: str = None,
        domain_names: List[str] = None,
        app_domain_name: str = None,
        app_level_name: str = None,
        stack_name: str = None,
        stack_version: str = None,
        container_count: int = None,
        database_count: int = None,
        slb_count: int = None,
        ocs_count: int = None,
        package_count: int = None,
        life_cycle: AppLifeCycle = None,
    ):
        # 应用组id
        self.app_domain_id = app_domain_id
        # 应用扩展信息
        self.app_extra_infos = app_extra_infos
        # 应用等级
        self.app_level = app_level
        # 应用负责人
        self.app_owner = app_owner
        # scm sofa archetype
        self.archetype = archetype
        # 技术栈版本
        self.buildpack_version = buildpack_version
        # 中文名称
        self.chinese_name = chinese_name
        # 代码仓库
        self.code_repository = code_repository
        # 描述信息
        self.description = description
        # 扩展参数，JSOn字符串
        self.extra_params = extra_params
        # 应用ID
        self.id = id
        # 是否组件中心应用
        self.is_service = is_service
        # 应用名称
        self.name = name
        # 负责人ID
        self.owner_id = owner_id
        # 技术栈所属分类ID
        self.stack_id = stack_id
        # 应用状态
        self.status = status
        # 应用标签，JSOn字符串
        self.tags = tags
        # 租户ID
        self.tenant_id = tenant_id
        # 创建时间
        self.utc_create = utc_create
        # 修改时间
        self.utc_modified = utc_modified
        # 工作空间ID
        self.workspace_id = workspace_id
        # 负责人名称
        self.owner_name = owner_name
        # 应用负责人真实名称
        self.real_owner_name = real_owner_name
        # 应用域路径名
        self.domain_names = domain_names
        # 应用分组名称
        self.app_domain_name = app_domain_name
        # 应用等级名称
        self.app_level_name = app_level_name
        # 技术栈名称
        self.stack_name = stack_name
        # 技术栈版本
        self.stack_version = stack_version
        # 服务器数量
        self.container_count = container_count
        # 数据库个数
        self.database_count = database_count
        # SLB个数
        self.slb_count = slb_count
        # ocs个数
        self.ocs_count = ocs_count
        # 发布包个数
        self.package_count = package_count
        # 生命周期信息
        self.life_cycle = life_cycle

    def validate(self):
        if self.app_extra_infos:
            for k in self.app_extra_infos:
                if k:
                    k.validate()
        if self.app_level:
            self.app_level.validate()
        if self.app_owner:
            self.app_owner.validate()
        if self.archetype:
            self.archetype.validate()
        if self.code_repository:
            self.code_repository.validate()
        self.validate_required(self.id, 'id')
        self.validate_required(self.name, 'name')
        self.validate_required(self.stack_id, 'stack_id')
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.real_owner_name, 'real_owner_name')
        self.validate_required(self.app_domain_name, 'app_domain_name')
        self.validate_required(self.app_level_name, 'app_level_name')
        if self.life_cycle:
            self.life_cycle.validate()

    def to_map(self):
        result = dict()
        if self.app_domain_id is not None:
            result['app_domain_id'] = self.app_domain_id
        result['app_extra_infos'] = []
        if self.app_extra_infos is not None:
            for k in self.app_extra_infos:
                result['app_extra_infos'].append(k.to_map() if k else None)
        if self.app_level is not None:
            result['app_level'] = self.app_level.to_map()
        if self.app_owner is not None:
            result['app_owner'] = self.app_owner.to_map()
        if self.archetype is not None:
            result['archetype'] = self.archetype.to_map()
        if self.buildpack_version is not None:
            result['buildpack_version'] = self.buildpack_version
        if self.chinese_name is not None:
            result['chinese_name'] = self.chinese_name
        if self.code_repository is not None:
            result['code_repository'] = self.code_repository.to_map()
        if self.description is not None:
            result['description'] = self.description
        if self.extra_params is not None:
            result['extra_params'] = self.extra_params
        if self.id is not None:
            result['id'] = self.id
        if self.is_service is not None:
            result['is_service'] = self.is_service
        if self.name is not None:
            result['name'] = self.name
        if self.owner_id is not None:
            result['owner_id'] = self.owner_id
        if self.stack_id is not None:
            result['stack_id'] = self.stack_id
        if self.status is not None:
            result['status'] = self.status
        if self.tags is not None:
            result['tags'] = self.tags
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.owner_name is not None:
            result['owner_name'] = self.owner_name
        if self.real_owner_name is not None:
            result['real_owner_name'] = self.real_owner_name
        if self.domain_names is not None:
            result['domain_names'] = self.domain_names
        if self.app_domain_name is not None:
            result['app_domain_name'] = self.app_domain_name
        if self.app_level_name is not None:
            result['app_level_name'] = self.app_level_name
        if self.stack_name is not None:
            result['stack_name'] = self.stack_name
        if self.stack_version is not None:
            result['stack_version'] = self.stack_version
        if self.container_count is not None:
            result['container_count'] = self.container_count
        if self.database_count is not None:
            result['database_count'] = self.database_count
        if self.slb_count is not None:
            result['slb_count'] = self.slb_count
        if self.ocs_count is not None:
            result['ocs_count'] = self.ocs_count
        if self.package_count is not None:
            result['package_count'] = self.package_count
        if self.life_cycle is not None:
            result['life_cycle'] = self.life_cycle.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('app_domain_id') is not None:
            self.app_domain_id = m.get('app_domain_id')
        self.app_extra_infos = []
        if m.get('app_extra_infos') is not None:
            for k in m.get('app_extra_infos'):
                temp_model = AppExtraInfo()
                self.app_extra_infos.append(temp_model.from_map(k))
        if m.get('app_level') is not None:
            temp_model = AppLevel()
            self.app_level = temp_model.from_map(m['app_level'])
        if m.get('app_owner') is not None:
            temp_model = AppOwner()
            self.app_owner = temp_model.from_map(m['app_owner'])
        if m.get('archetype') is not None:
            temp_model = ScmSofaArchetype()
            self.archetype = temp_model.from_map(m['archetype'])
        if m.get('buildpack_version') is not None:
            self.buildpack_version = m.get('buildpack_version')
        if m.get('chinese_name') is not None:
            self.chinese_name = m.get('chinese_name')
        if m.get('code_repository') is not None:
            temp_model = CodeRepository()
            self.code_repository = temp_model.from_map(m['code_repository'])
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('extra_params') is not None:
            self.extra_params = m.get('extra_params')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('is_service') is not None:
            self.is_service = m.get('is_service')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('owner_id') is not None:
            self.owner_id = m.get('owner_id')
        if m.get('stack_id') is not None:
            self.stack_id = m.get('stack_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tags') is not None:
            self.tags = m.get('tags')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('owner_name') is not None:
            self.owner_name = m.get('owner_name')
        if m.get('real_owner_name') is not None:
            self.real_owner_name = m.get('real_owner_name')
        if m.get('domain_names') is not None:
            self.domain_names = m.get('domain_names')
        if m.get('app_domain_name') is not None:
            self.app_domain_name = m.get('app_domain_name')
        if m.get('app_level_name') is not None:
            self.app_level_name = m.get('app_level_name')
        if m.get('stack_name') is not None:
            self.stack_name = m.get('stack_name')
        if m.get('stack_version') is not None:
            self.stack_version = m.get('stack_version')
        if m.get('container_count') is not None:
            self.container_count = m.get('container_count')
        if m.get('database_count') is not None:
            self.database_count = m.get('database_count')
        if m.get('slb_count') is not None:
            self.slb_count = m.get('slb_count')
        if m.get('ocs_count') is not None:
            self.ocs_count = m.get('ocs_count')
        if m.get('package_count') is not None:
            self.package_count = m.get('package_count')
        if m.get('life_cycle') is not None:
            temp_model = AppLifeCycle()
            self.life_cycle = temp_model.from_map(m['life_cycle'])
        return self


class DnsZones(TeaModel):
    def __init__(
        self,
        id: str = None,
        name: str = None,
    ):
        # id
        self.id = id
        # name
        self.name = name

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class AppManifest(TeaModel):
    def __init__(
        self,
        app_id: str = None,
        app_version: str = None,
        code_commit: CodeCommit = None,
        etag: str = None,
        id: str = None,
        location: str = None,
        name: str = None,
        remark: str = None,
        store_location: str = None,
        utc_create: str = None,
        utc_modified: str = None,
        workspace_id: str = None,
    ):
        # app_id
        self.app_id = app_id
        # app_version
        self.app_version = app_version
        # code_commit
        self.code_commit = code_commit
        # etag
        self.etag = etag
        # id
        self.id = id
        # location
        self.location = location
        # name
        self.name = name
        # remark
        self.remark = remark
        # store_location
        self.store_location = store_location
        # utc_create
        self.utc_create = utc_create
        # utc_modified
        self.utc_modified = utc_modified
        # workspace_id
        self.workspace_id = workspace_id

    def validate(self):
        if self.code_commit:
            self.code_commit.validate()
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.app_version is not None:
            result['app_version'] = self.app_version
        if self.code_commit is not None:
            result['code_commit'] = self.code_commit.to_map()
        if self.etag is not None:
            result['etag'] = self.etag
        if self.id is not None:
            result['id'] = self.id
        if self.location is not None:
            result['location'] = self.location
        if self.name is not None:
            result['name'] = self.name
        if self.remark is not None:
            result['remark'] = self.remark
        if self.store_location is not None:
            result['store_location'] = self.store_location
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('app_version') is not None:
            self.app_version = m.get('app_version')
        if m.get('code_commit') is not None:
            temp_model = CodeCommit()
            self.code_commit = temp_model.from_map(m['code_commit'])
        if m.get('etag') is not None:
            self.etag = m.get('etag')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('location') is not None:
            self.location = m.get('location')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('store_location') is not None:
            self.store_location = m.get('store_location')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class ImportVO(TeaModel):
    def __init__(
        self,
        is_imported: bool = None,
        imported_workspace_name: str = None,
        is_unimportable: bool = None,
        unimportable_reason: str = None,
    ):
        # is_imported
        self.is_imported = is_imported
        # imported_workspace_name
        self.imported_workspace_name = imported_workspace_name
        # is_unimportable
        self.is_unimportable = is_unimportable
        # unimportable_reason
        self.unimportable_reason = unimportable_reason

    def validate(self):
        self.validate_required(self.is_imported, 'is_imported')
        self.validate_required(self.imported_workspace_name, 'imported_workspace_name')

    def to_map(self):
        result = dict()
        if self.is_imported is not None:
            result['is_imported'] = self.is_imported
        if self.imported_workspace_name is not None:
            result['imported_workspace_name'] = self.imported_workspace_name
        if self.is_unimportable is not None:
            result['is_unimportable'] = self.is_unimportable
        if self.unimportable_reason is not None:
            result['unimportable_reason'] = self.unimportable_reason
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('is_imported') is not None:
            self.is_imported = m.get('is_imported')
        if m.get('imported_workspace_name') is not None:
            self.imported_workspace_name = m.get('imported_workspace_name')
        if m.get('is_unimportable') is not None:
            self.is_unimportable = m.get('is_unimportable')
        if m.get('unimportable_reason') is not None:
            self.unimportable_reason = m.get('unimportable_reason')
        return self


class ListenerHealthMonitor(TeaModel):
    def __init__(
        self,
        check_type: str = None,
        connect_port: int = None,
        domain: str = None,
        healthy_threshold: int = None,
        health_check_http_code: List[str] = None,
        http_method: str = None,
        id: str = None,
        interval: int = None,
        timeout: int = None,
        un_healthy_threshold: int = None,
        uri: str = None,
    ):
        # check_type
        self.check_type = check_type
        # 默认 80
        self.connect_port = connect_port
        # 域名
        self.domain = domain
        # 健康阈值
        self.healthy_threshold = healthy_threshold
        # health_check_http_code
        self.health_check_http_code = health_check_http_code
        # http_method
        self.http_method = http_method
        # id
        self.id = id
        # 监控检查间隔
        self.interval = interval
        # 超时时间
        self.timeout = timeout
        # 不健康阈值
        self.un_healthy_threshold = un_healthy_threshold
        # uri
        self.uri = uri

    def validate(self):
        self.validate_required(self.interval, 'interval')
        self.validate_required(self.timeout, 'timeout')

    def to_map(self):
        result = dict()
        if self.check_type is not None:
            result['check_type'] = self.check_type
        if self.connect_port is not None:
            result['connect_port'] = self.connect_port
        if self.domain is not None:
            result['domain'] = self.domain
        if self.healthy_threshold is not None:
            result['healthy_threshold'] = self.healthy_threshold
        if self.health_check_http_code is not None:
            result['health_check_http_code'] = self.health_check_http_code
        if self.http_method is not None:
            result['http_method'] = self.http_method
        if self.id is not None:
            result['id'] = self.id
        if self.interval is not None:
            result['interval'] = self.interval
        if self.timeout is not None:
            result['timeout'] = self.timeout
        if self.un_healthy_threshold is not None:
            result['un_healthy_threshold'] = self.un_healthy_threshold
        if self.uri is not None:
            result['uri'] = self.uri
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('check_type') is not None:
            self.check_type = m.get('check_type')
        if m.get('connect_port') is not None:
            self.connect_port = m.get('connect_port')
        if m.get('domain') is not None:
            self.domain = m.get('domain')
        if m.get('healthy_threshold') is not None:
            self.healthy_threshold = m.get('healthy_threshold')
        if m.get('health_check_http_code') is not None:
            self.health_check_http_code = m.get('health_check_http_code')
        if m.get('http_method') is not None:
            self.http_method = m.get('http_method')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('interval') is not None:
            self.interval = m.get('interval')
        if m.get('timeout') is not None:
            self.timeout = m.get('timeout')
        if m.get('un_healthy_threshold') is not None:
            self.un_healthy_threshold = m.get('un_healthy_threshold')
        if m.get('uri') is not None:
            self.uri = m.get('uri')
        return self


class Task(TeaModel):
    def __init__(
        self,
        context: str = None,
        execution_times: int = None,
        id: str = None,
        resource_id: str = None,
        resource_type: str = None,
        status: str = None,
        utc_create: str = None,
        utc_modified: str = None,
        workspace_id: str = None,
        request: TaskRequest = None,
    ):
        # context
        self.context = context
        # execution_times
        self.execution_times = execution_times
        # id
        self.id = id
        # resource_id
        self.resource_id = resource_id
        # resource_type
        self.resource_type = resource_type
        # status
        self.status = status
        # utc_create
        self.utc_create = utc_create
        # utc_modified
        self.utc_modified = utc_modified
        # workspace_id
        self.workspace_id = workspace_id
        # request
        self.request = request

    def validate(self):
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.request:
            self.request.validate()

    def to_map(self):
        result = dict()
        if self.context is not None:
            result['context'] = self.context
        if self.execution_times is not None:
            result['execution_times'] = self.execution_times
        if self.id is not None:
            result['id'] = self.id
        if self.resource_id is not None:
            result['resource_id'] = self.resource_id
        if self.resource_type is not None:
            result['resource_type'] = self.resource_type
        if self.status is not None:
            result['status'] = self.status
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.request is not None:
            result['request'] = self.request.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('context') is not None:
            self.context = m.get('context')
        if m.get('execution_times') is not None:
            self.execution_times = m.get('execution_times')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('resource_id') is not None:
            self.resource_id = m.get('resource_id')
        if m.get('resource_type') is not None:
            self.resource_type = m.get('resource_type')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('request') is not None:
            temp_model = TaskRequest()
            self.request = temp_model.from_map(m['request'])
        return self


class WorkspaceRegion(TeaModel):
    def __init__(
        self,
        id: str = None,
        workspace_id: str = None,
        region_id: str = None,
        type: str = None,
        secured_isolation_identity: str = None,
        secured_isolation_name: str = None,
        secured_zone_id: str = None,
    ):
        # id
        self.id = id
        # workspaceId
        self.workspace_id = workspace_id
        # regionId
        self.region_id = region_id
        # type
        self.type = type
        # securedIsolationIdentity
        self.secured_isolation_identity = secured_isolation_identity
        # securedIsolationName
        self.secured_isolation_name = secured_isolation_name
        # securedZoneId
        self.secured_zone_id = secured_zone_id

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.region_id, 'region_id')
        self.validate_required(self.type, 'type')
        self.validate_required(self.secured_isolation_identity, 'secured_isolation_identity')
        self.validate_required(self.secured_isolation_name, 'secured_isolation_name')
        self.validate_required(self.secured_zone_id, 'secured_zone_id')

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.type is not None:
            result['type'] = self.type
        if self.secured_isolation_identity is not None:
            result['secured_isolation_identity'] = self.secured_isolation_identity
        if self.secured_isolation_name is not None:
            result['secured_isolation_name'] = self.secured_isolation_name
        if self.secured_zone_id is not None:
            result['secured_zone_id'] = self.secured_zone_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('secured_isolation_identity') is not None:
            self.secured_isolation_identity = m.get('secured_isolation_identity')
        if m.get('secured_isolation_name') is not None:
            self.secured_isolation_name = m.get('secured_isolation_name')
        if m.get('secured_zone_id') is not None:
            self.secured_zone_id = m.get('secured_zone_id')
        return self


class VComputerGroup(TeaModel):
    def __init__(
        self,
        name: str = None,
        id: str = None,
        workspace_id: str = None,
        load_balancer: LoadBalancer = None,
        status: str = None,
    ):
        # name
        self.name = name
        # id
        self.id = id
        # workspace_id
        self.workspace_id = workspace_id
        # load_balancer
        self.load_balancer = load_balancer
        # status
        self.status = status

    def validate(self):
        self.validate_required(self.name, 'name')
        self.validate_required(self.id, 'id')
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.load_balancer, 'load_balancer')
        if self.load_balancer:
            self.load_balancer.validate()
        self.validate_required(self.status, 'status')

    def to_map(self):
        result = dict()
        if self.name is not None:
            result['name'] = self.name
        if self.id is not None:
            result['id'] = self.id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.load_balancer is not None:
            result['load_balancer'] = self.load_balancer.to_map()
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('load_balancer') is not None:
            temp_model = LoadBalancer()
            self.load_balancer = temp_model.from_map(m['load_balancer'])
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class CellView(TeaModel):
    def __init__(
        self,
        id: str = None,
        name: str = None,
        display_name: str = None,
        description: str = None,
        deployment_zone_id: str = None,
        workspace_id: str = None,
        workspace_group_id: str = None,
        status: str = None,
        master_zone_id: str = None,
        appended_zone_ids: List[str] = None,
        zones: List[ZoneView] = None,
    ):
        # 部署单元对应的paas id
        self.id = id
        # 部署单元名称
        self.name = name
        # 部署单元显示名称
        self.display_name = display_name
        # 部署单元描述
        self.description = description
        # deploymentZoneId
        self.deployment_zone_id = deployment_zone_id
        # workspaceId
        self.workspace_id = workspace_id
        # workspaceGroupId
        self.workspace_group_id = workspace_group_id
        # status
        self.status = status
        # masterZoneId
        self.master_zone_id = master_zone_id
        # appendedZoneIds
        self.appended_zone_ids = appended_zone_ids
        # List<ZoneView> zones
        self.zones = zones

    def validate(self):
        if self.zones:
            for k in self.zones:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.display_name is not None:
            result['display_name'] = self.display_name
        if self.description is not None:
            result['description'] = self.description
        if self.deployment_zone_id is not None:
            result['deployment_zone_id'] = self.deployment_zone_id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.workspace_group_id is not None:
            result['workspace_group_id'] = self.workspace_group_id
        if self.status is not None:
            result['status'] = self.status
        if self.master_zone_id is not None:
            result['master_zone_id'] = self.master_zone_id
        if self.appended_zone_ids is not None:
            result['appended_zone_ids'] = self.appended_zone_ids
        result['zones'] = []
        if self.zones is not None:
            for k in self.zones:
                result['zones'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('display_name') is not None:
            self.display_name = m.get('display_name')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('deployment_zone_id') is not None:
            self.deployment_zone_id = m.get('deployment_zone_id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('workspace_group_id') is not None:
            self.workspace_group_id = m.get('workspace_group_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('master_zone_id') is not None:
            self.master_zone_id = m.get('master_zone_id')
        if m.get('appended_zone_ids') is not None:
            self.appended_zone_ids = m.get('appended_zone_ids')
        self.zones = []
        if m.get('zones') is not None:
            for k in m.get('zones'):
                temp_model = ZoneView()
                self.zones.append(temp_model.from_map(k))
        return self


class ImportInfo(TeaModel):
    def __init__(
        self,
        imported_workspace_name: str = None,
        is_imported: bool = None,
        is_unimportable: bool = None,
        unimportable_reason: str = None,
    ):
        # 已导入的workspace name
        self.imported_workspace_name = imported_workspace_name
        # vpc是否已导入workspace
        self.is_imported = is_imported
        # 是否可以删除已导入的workspace
        self.is_unimportable = is_unimportable
        # 不可删除已导入workspace的原因
        self.unimportable_reason = unimportable_reason

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.imported_workspace_name is not None:
            result['imported_workspace_name'] = self.imported_workspace_name
        if self.is_imported is not None:
            result['is_imported'] = self.is_imported
        if self.is_unimportable is not None:
            result['is_unimportable'] = self.is_unimportable
        if self.unimportable_reason is not None:
            result['unimportable_reason'] = self.unimportable_reason
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('imported_workspace_name') is not None:
            self.imported_workspace_name = m.get('imported_workspace_name')
        if m.get('is_imported') is not None:
            self.is_imported = m.get('is_imported')
        if m.get('is_unimportable') is not None:
            self.is_unimportable = m.get('is_unimportable')
        if m.get('unimportable_reason') is not None:
            self.unimportable_reason = m.get('unimportable_reason')
        return self


class IaasRequest(TeaModel):
    def __init__(
        self,
        request_method: str = None,
        request_url: str = None,
        request_body: str = None,
        request_headers: List[MapStringToStringEntity] = None,
    ):
        # requestMethod
        self.request_method = request_method
        # requestUrl
        self.request_url = request_url
        # requestBody
        self.request_body = request_body
        # request_headers
        self.request_headers = request_headers

    def validate(self):
        if self.request_headers:
            for k in self.request_headers:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.request_method is not None:
            result['request_method'] = self.request_method
        if self.request_url is not None:
            result['request_url'] = self.request_url
        if self.request_body is not None:
            result['request_body'] = self.request_body
        result['request_headers'] = []
        if self.request_headers is not None:
            for k in self.request_headers:
                result['request_headers'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('request_method') is not None:
            self.request_method = m.get('request_method')
        if m.get('request_url') is not None:
            self.request_url = m.get('request_url')
        if m.get('request_body') is not None:
            self.request_body = m.get('request_body')
        self.request_headers = []
        if m.get('request_headers') is not None:
            for k in m.get('request_headers'):
                temp_model = MapStringToStringEntity()
                self.request_headers.append(temp_model.from_map(k))
        return self


class Property(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        # key
        self.key = key
        # value
        self.value = value

    def validate(self):
        self.validate_required(self.key, 'key')

    def to_map(self):
        result = dict()
        if self.key is not None:
            result['key'] = self.key
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('key') is not None:
            self.key = m.get('key')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class WorkspaceWithGroupView(TeaModel):
    def __init__(
        self,
        id: str = None,
        identity: str = None,
        name: str = None,
        network_type: str = None,
        region: RegionView = None,
        status: str = None,
        tenant_id: str = None,
        zones: List[WorkspaceZoneView] = None,
        workspace_group: WorkspaceGroupView = None,
    ):
        # id
        self.id = id
        # identity
        self.identity = identity
        # name
        self.name = name
        # networkType
        self.network_type = network_type
        # region
        self.region = region
        # status
        self.status = status
        # tenantId
        self.tenant_id = tenant_id
        # zones
        self.zones = zones
        # workspaceGroup
        self.workspace_group = workspace_group

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.identity, 'identity')
        self.validate_required(self.name, 'name')
        self.validate_required(self.network_type, 'network_type')
        self.validate_required(self.region, 'region')
        if self.region:
            self.region.validate()
        self.validate_required(self.status, 'status')
        self.validate_required(self.tenant_id, 'tenant_id')
        self.validate_required(self.zones, 'zones')
        if self.zones:
            for k in self.zones:
                if k:
                    k.validate()
        self.validate_required(self.workspace_group, 'workspace_group')
        if self.workspace_group:
            self.workspace_group.validate()

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.identity is not None:
            result['identity'] = self.identity
        if self.name is not None:
            result['name'] = self.name
        if self.network_type is not None:
            result['network_type'] = self.network_type
        if self.region is not None:
            result['region'] = self.region.to_map()
        if self.status is not None:
            result['status'] = self.status
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        result['zones'] = []
        if self.zones is not None:
            for k in self.zones:
                result['zones'].append(k.to_map() if k else None)
        if self.workspace_group is not None:
            result['workspace_group'] = self.workspace_group.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('identity') is not None:
            self.identity = m.get('identity')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('network_type') is not None:
            self.network_type = m.get('network_type')
        if m.get('region') is not None:
            temp_model = RegionView()
            self.region = temp_model.from_map(m['region'])
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        self.zones = []
        if m.get('zones') is not None:
            for k in m.get('zones'):
                temp_model = WorkspaceZoneView()
                self.zones.append(temp_model.from_map(k))
        if m.get('workspace_group') is not None:
            temp_model = WorkspaceGroupView()
            self.workspace_group = temp_model.from_map(m['workspace_group'])
        return self


class AcsClusterUnit(TeaModel):
    def __init__(
        self,
        cluster_id: str = None,
        address: str = None,
        unit_status: int = None,
        create_time: str = None,
        modify_time: str = None,
        container_id: str = None,
    ):
        # cluster_id
        self.cluster_id = cluster_id
        # address
        self.address = address
        # unit_status
        self.unit_status = unit_status
        # create_time
        self.create_time = create_time
        # modify_time
        self.modify_time = modify_time
        # container_id
        self.container_id = container_id

    def validate(self):
        self.validate_required(self.cluster_id, 'cluster_id')

    def to_map(self):
        result = dict()
        if self.cluster_id is not None:
            result['cluster_id'] = self.cluster_id
        if self.address is not None:
            result['address'] = self.address
        if self.unit_status is not None:
            result['unit_status'] = self.unit_status
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.modify_time is not None:
            result['modify_time'] = self.modify_time
        if self.container_id is not None:
            result['container_id'] = self.container_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cluster_id') is not None:
            self.cluster_id = m.get('cluster_id')
        if m.get('address') is not None:
            self.address = m.get('address')
        if m.get('unit_status') is not None:
            self.unit_status = m.get('unit_status')
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('modify_time') is not None:
            self.modify_time = m.get('modify_time')
        if m.get('container_id') is not None:
            self.container_id = m.get('container_id')
        return self


class ConnectionStub(TeaModel):
    def __init__(
        self,
        cloud: Cloud = None,
        id: int = None,
        tenant_id: str = None,
        tenant_name: str = None,
        type: str = None,
    ):
        # cloud
        self.cloud = cloud
        # id
        self.id = id
        # tenant_id
        self.tenant_id = tenant_id
        # tenant_name
        self.tenant_name = tenant_name
        # type
        self.type = type

    def validate(self):
        if self.cloud:
            self.cloud.validate()

    def to_map(self):
        result = dict()
        if self.cloud is not None:
            result['cloud'] = self.cloud.to_map()
        if self.id is not None:
            result['id'] = self.id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.tenant_name is not None:
            result['tenant_name'] = self.tenant_name
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cloud') is not None:
            temp_model = Cloud()
            self.cloud = temp_model.from_map(m['cloud'])
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('tenant_name') is not None:
            self.tenant_name = m.get('tenant_name')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class SLSLogContent(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        # 键名
        self.key = key
        # 键值
        self.value = value

    def validate(self):
        self.validate_required(self.key, 'key')
        self.validate_required(self.value, 'value')

    def to_map(self):
        result = dict()
        if self.key is not None:
            result['key'] = self.key
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('key') is not None:
            self.key = m.get('key')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class WorkspaceRegionDto(TeaModel):
    def __init__(
        self,
        id: str = None,
        network_type: str = None,
        region_id: str = None,
        region_name: str = None,
        secured_zone_id: str = None,
        workspace_id: str = None,
        workspace_logic_region_status: str = None,
        workspace_logic_region_type: str = None,
        workspace_zone_dtos: List[WorkspaceZoneDto] = None,
    ):
        # id
        self.id = id
        # networkType
        self.network_type = network_type
        # region id
        self.region_id = region_id
        # regionName
        self.region_name = region_name
        # 安全域id
        self.secured_zone_id = secured_zone_id
        # workspace_id
        self.workspace_id = workspace_id
        # workspaceLogicRegionStatus
        self.workspace_logic_region_status = workspace_logic_region_status
        # workspaceLogicRegionType
        self.workspace_logic_region_type = workspace_logic_region_type
        # workspaceZoneDtos
        self.workspace_zone_dtos = workspace_zone_dtos

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.region_id, 'region_id')
        self.validate_required(self.workspace_id, 'workspace_id')
        if self.workspace_zone_dtos:
            for k in self.workspace_zone_dtos:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.network_type is not None:
            result['network_type'] = self.network_type
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.region_name is not None:
            result['region_name'] = self.region_name
        if self.secured_zone_id is not None:
            result['secured_zone_id'] = self.secured_zone_id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.workspace_logic_region_status is not None:
            result['workspace_logic_region_status'] = self.workspace_logic_region_status
        if self.workspace_logic_region_type is not None:
            result['workspace_logic_region_type'] = self.workspace_logic_region_type
        result['workspace_zone_dtos'] = []
        if self.workspace_zone_dtos is not None:
            for k in self.workspace_zone_dtos:
                result['workspace_zone_dtos'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('network_type') is not None:
            self.network_type = m.get('network_type')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('region_name') is not None:
            self.region_name = m.get('region_name')
        if m.get('secured_zone_id') is not None:
            self.secured_zone_id = m.get('secured_zone_id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('workspace_logic_region_status') is not None:
            self.workspace_logic_region_status = m.get('workspace_logic_region_status')
        if m.get('workspace_logic_region_type') is not None:
            self.workspace_logic_region_type = m.get('workspace_logic_region_type')
        self.workspace_zone_dtos = []
        if m.get('workspace_zone_dtos') is not None:
            for k in m.get('workspace_zone_dtos'):
                temp_model = WorkspaceZoneDto()
                self.workspace_zone_dtos.append(temp_model.from_map(k))
        return self


class Computer(TeaModel):
    def __init__(
        self,
        app_id: str = None,
        app_service_ids: List[str] = None,
        assigned_app_service_ids: List[str] = None,
        auto_renew: bool = None,
        auto_renew_period: int = None,
        bandwidth: int = None,
        common_image: bool = None,
        cpu: int = None,
        cpu_shared: bool = None,
        creation_time: str = None,
        data_disks: List[Disk] = None,
        deploy_mode: str = None,
        description: str = None,
        elastic_ip: str = None,
        expired_time: str = None,
        iaas_id: str = None,
        iaas_status: str = None,
        iaas_type: str = None,
        id: str = None,
        image_iaas_id: str = None,
        image_id: str = None,
        image_name: str = None,
        initialized: bool = None,
        instance_charge_type: str = None,
        io_optimized: bool = None,
        last_ops_order_id: str = None,
        last_ops_type: str = None,
        memory: int = None,
        name: str = None,
        network_type: str = None,
        options: List[MapStringToStringEntity] = None,
        os: str = None,
        os_bit: int = None,
        os_version: str = None,
        paas_status: str = None,
        password: str = None,
        private_ip: str = None,
        provider_id: str = None,
        public_ip: str = None,
        region_id: str = None,
        serial_number: str = None,
        spec_iaas_id: str = None,
        status: str = None,
        system_disk: Disk = None,
        tags: List[MapStringToStringEntity] = None,
        tenant_id: str = None,
        tenant_id_2: str = None,
        threads_per_core: int = None,
        utc_create: str = None,
        utc_modified: str = None,
        vpc_id: str = None,
        v_switch_iaas_id: str = None,
        workspace_id: str = None,
        zone_id: str = None,
    ):
        # app_id
        self.app_id = app_id
        # appServiceIds
        self.app_service_ids = app_service_ids
        # assignedAppServiceIds
        self.assigned_app_service_ids = assigned_app_service_ids
        # 是否自动续费
        self.auto_renew = auto_renew
        # 每次自动续费的时长，当参数AutoRenew取值True时为必填。
        self.auto_renew_period = auto_renew_period
        # bandwidth
        self.bandwidth = bandwidth
        # common_image
        self.common_image = common_image
        # vCPU数。
        self.cpu = cpu
        # cpu_shared
        self.cpu_shared = cpu_shared
        # 实例创建时间
        self.creation_time = creation_time
        # data_disk
        self.data_disks = data_disks
        # 这是SIGMA模式下的专用字段，阿里云模式下无意义
        self.deploy_mode = deploy_mode
        # 服务器描述
        self.description = description
        # elastic_ip
        self.elastic_ip = elastic_ip
        # 过期时间
        self.expired_time = expired_time
        # ecs iaas id
        self.iaas_id = iaas_id
        # iaasStatus
        self.iaas_status = iaas_status
        # iaasType
        self.iaas_type = iaas_type
        # 主机id
        self.id = id
        # image_iaas_id
        self.image_iaas_id = image_iaas_id
        # image_id
        self.image_id = image_id
        # image_name
        self.image_name = image_name
        # initialized
        self.initialized = initialized
        # instanceChargeType
        self.instance_charge_type = instance_charge_type
        # io_optimized
        self.io_optimized = io_optimized
        # last_ops_order_id
        self.last_ops_order_id = last_ops_order_id
        # last_ops_type
        self.last_ops_type = last_ops_type
        # memory
        self.memory = memory
        # name
        self.name = name
        # networkType
        self.network_type = network_type
        # Options字段
        self.options = options
        # os
        self.os = os
        # os_bit
        self.os_bit = os_bit
        # os_version
        self.os_version = os_version
        # paas_status
        self.paas_status = paas_status
        # password
        self.password = password
        # private_ip
        self.private_ip = private_ip
        # providerId
        self.provider_id = provider_id
        # public_ip
        self.public_ip = public_ip
        # regionId
        self.region_id = region_id
        # serial_number
        self.serial_number = serial_number
        # spec_iaas_id
        self.spec_iaas_id = spec_iaas_id
        # 实例状态。
        self.status = status
        # system_disk
        self.system_disk = system_disk
        # Tags
        self.tags = tags
        # tenantId
        self.tenant_id = tenant_id
        # tenantId2
        self.tenant_id_2 = tenant_id_2
        # CPU线程数。
        self.threads_per_core = threads_per_core
        # utcCreate
        self.utc_create = utc_create
        # utcModified
        self.utc_modified = utc_modified
        # vpcId
        self.vpc_id = vpc_id
        # vSwitchIaasId
        self.v_switch_iaas_id = v_switch_iaas_id
        # workspace_id
        self.workspace_id = workspace_id
        # zoneId
        self.zone_id = zone_id

    def validate(self):
        if self.creation_time is not None:
            self.validate_pattern(self.creation_time, 'creation_time', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.data_disks:
            for k in self.data_disks:
                if k:
                    k.validate()
        if self.expired_time is not None:
            self.validate_pattern(self.expired_time, 'expired_time', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.id, 'id')
        if self.options:
            for k in self.options:
                if k:
                    k.validate()
        if self.system_disk:
            self.system_disk.validate()
        if self.tags:
            for k in self.tags:
                if k:
                    k.validate()
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.app_service_ids is not None:
            result['app_service_ids'] = self.app_service_ids
        if self.assigned_app_service_ids is not None:
            result['assigned_app_service_ids'] = self.assigned_app_service_ids
        if self.auto_renew is not None:
            result['auto_renew'] = self.auto_renew
        if self.auto_renew_period is not None:
            result['auto_renew_period'] = self.auto_renew_period
        if self.bandwidth is not None:
            result['bandwidth'] = self.bandwidth
        if self.common_image is not None:
            result['common_image'] = self.common_image
        if self.cpu is not None:
            result['cpu'] = self.cpu
        if self.cpu_shared is not None:
            result['cpu_shared'] = self.cpu_shared
        if self.creation_time is not None:
            result['creation_time'] = self.creation_time
        result['data_disks'] = []
        if self.data_disks is not None:
            for k in self.data_disks:
                result['data_disks'].append(k.to_map() if k else None)
        if self.deploy_mode is not None:
            result['deploy_mode'] = self.deploy_mode
        if self.description is not None:
            result['description'] = self.description
        if self.elastic_ip is not None:
            result['elastic_ip'] = self.elastic_ip
        if self.expired_time is not None:
            result['expired_time'] = self.expired_time
        if self.iaas_id is not None:
            result['iaas_id'] = self.iaas_id
        if self.iaas_status is not None:
            result['iaas_status'] = self.iaas_status
        if self.iaas_type is not None:
            result['iaas_type'] = self.iaas_type
        if self.id is not None:
            result['id'] = self.id
        if self.image_iaas_id is not None:
            result['image_iaas_id'] = self.image_iaas_id
        if self.image_id is not None:
            result['image_id'] = self.image_id
        if self.image_name is not None:
            result['image_name'] = self.image_name
        if self.initialized is not None:
            result['initialized'] = self.initialized
        if self.instance_charge_type is not None:
            result['instance_charge_type'] = self.instance_charge_type
        if self.io_optimized is not None:
            result['io_optimized'] = self.io_optimized
        if self.last_ops_order_id is not None:
            result['last_ops_order_id'] = self.last_ops_order_id
        if self.last_ops_type is not None:
            result['last_ops_type'] = self.last_ops_type
        if self.memory is not None:
            result['memory'] = self.memory
        if self.name is not None:
            result['name'] = self.name
        if self.network_type is not None:
            result['network_type'] = self.network_type
        result['options'] = []
        if self.options is not None:
            for k in self.options:
                result['options'].append(k.to_map() if k else None)
        if self.os is not None:
            result['os'] = self.os
        if self.os_bit is not None:
            result['os_bit'] = self.os_bit
        if self.os_version is not None:
            result['os_version'] = self.os_version
        if self.paas_status is not None:
            result['paas_status'] = self.paas_status
        if self.password is not None:
            result['password'] = self.password
        if self.private_ip is not None:
            result['private_ip'] = self.private_ip
        if self.provider_id is not None:
            result['provider_id'] = self.provider_id
        if self.public_ip is not None:
            result['public_ip'] = self.public_ip
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.serial_number is not None:
            result['serial_number'] = self.serial_number
        if self.spec_iaas_id is not None:
            result['spec_iaas_id'] = self.spec_iaas_id
        if self.status is not None:
            result['status'] = self.status
        if self.system_disk is not None:
            result['system_disk'] = self.system_disk.to_map()
        result['tags'] = []
        if self.tags is not None:
            for k in self.tags:
                result['tags'].append(k.to_map() if k else None)
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.tenant_id_2 is not None:
            result['tenant_id2'] = self.tenant_id_2
        if self.threads_per_core is not None:
            result['threads_per_core'] = self.threads_per_core
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        if self.vpc_id is not None:
            result['vpc_id'] = self.vpc_id
        if self.v_switch_iaas_id is not None:
            result['v_switch_iaas_id'] = self.v_switch_iaas_id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.zone_id is not None:
            result['zone_id'] = self.zone_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('app_service_ids') is not None:
            self.app_service_ids = m.get('app_service_ids')
        if m.get('assigned_app_service_ids') is not None:
            self.assigned_app_service_ids = m.get('assigned_app_service_ids')
        if m.get('auto_renew') is not None:
            self.auto_renew = m.get('auto_renew')
        if m.get('auto_renew_period') is not None:
            self.auto_renew_period = m.get('auto_renew_period')
        if m.get('bandwidth') is not None:
            self.bandwidth = m.get('bandwidth')
        if m.get('common_image') is not None:
            self.common_image = m.get('common_image')
        if m.get('cpu') is not None:
            self.cpu = m.get('cpu')
        if m.get('cpu_shared') is not None:
            self.cpu_shared = m.get('cpu_shared')
        if m.get('creation_time') is not None:
            self.creation_time = m.get('creation_time')
        self.data_disks = []
        if m.get('data_disks') is not None:
            for k in m.get('data_disks'):
                temp_model = Disk()
                self.data_disks.append(temp_model.from_map(k))
        if m.get('deploy_mode') is not None:
            self.deploy_mode = m.get('deploy_mode')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('elastic_ip') is not None:
            self.elastic_ip = m.get('elastic_ip')
        if m.get('expired_time') is not None:
            self.expired_time = m.get('expired_time')
        if m.get('iaas_id') is not None:
            self.iaas_id = m.get('iaas_id')
        if m.get('iaas_status') is not None:
            self.iaas_status = m.get('iaas_status')
        if m.get('iaas_type') is not None:
            self.iaas_type = m.get('iaas_type')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('image_iaas_id') is not None:
            self.image_iaas_id = m.get('image_iaas_id')
        if m.get('image_id') is not None:
            self.image_id = m.get('image_id')
        if m.get('image_name') is not None:
            self.image_name = m.get('image_name')
        if m.get('initialized') is not None:
            self.initialized = m.get('initialized')
        if m.get('instance_charge_type') is not None:
            self.instance_charge_type = m.get('instance_charge_type')
        if m.get('io_optimized') is not None:
            self.io_optimized = m.get('io_optimized')
        if m.get('last_ops_order_id') is not None:
            self.last_ops_order_id = m.get('last_ops_order_id')
        if m.get('last_ops_type') is not None:
            self.last_ops_type = m.get('last_ops_type')
        if m.get('memory') is not None:
            self.memory = m.get('memory')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('network_type') is not None:
            self.network_type = m.get('network_type')
        self.options = []
        if m.get('options') is not None:
            for k in m.get('options'):
                temp_model = MapStringToStringEntity()
                self.options.append(temp_model.from_map(k))
        if m.get('os') is not None:
            self.os = m.get('os')
        if m.get('os_bit') is not None:
            self.os_bit = m.get('os_bit')
        if m.get('os_version') is not None:
            self.os_version = m.get('os_version')
        if m.get('paas_status') is not None:
            self.paas_status = m.get('paas_status')
        if m.get('password') is not None:
            self.password = m.get('password')
        if m.get('private_ip') is not None:
            self.private_ip = m.get('private_ip')
        if m.get('provider_id') is not None:
            self.provider_id = m.get('provider_id')
        if m.get('public_ip') is not None:
            self.public_ip = m.get('public_ip')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('serial_number') is not None:
            self.serial_number = m.get('serial_number')
        if m.get('spec_iaas_id') is not None:
            self.spec_iaas_id = m.get('spec_iaas_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('system_disk') is not None:
            temp_model = Disk()
            self.system_disk = temp_model.from_map(m['system_disk'])
        self.tags = []
        if m.get('tags') is not None:
            for k in m.get('tags'):
                temp_model = MapStringToStringEntity()
                self.tags.append(temp_model.from_map(k))
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('tenant_id2') is not None:
            self.tenant_id_2 = m.get('tenant_id2')
        if m.get('threads_per_core') is not None:
            self.threads_per_core = m.get('threads_per_core')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        if m.get('vpc_id') is not None:
            self.vpc_id = m.get('vpc_id')
        if m.get('v_switch_iaas_id') is not None:
            self.v_switch_iaas_id = m.get('v_switch_iaas_id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('zone_id') is not None:
            self.zone_id = m.get('zone_id')
        return self


class VRouteEntry(TeaModel):
    def __init__(
        self,
        desination_cidr_block: str = None,
        instance_id: str = None,
        instance_name: str = None,
        next_hop_id: str = None,
        next_hop_item_list: List[NextHopItem] = None,
        next_hop_type: str = None,
        route_table_id: str = None,
        status: str = None,
        type: str = None,
    ):
        # 路由条目的目标网段。
        self.desination_cidr_block = desination_cidr_block
        # 下一跳的实例ID。
        self.instance_id = instance_id
        # 下一跳的实例名称。
        self.instance_name = instance_name
        # 路由条目ID。
        self.next_hop_id = next_hop_id
        # 路由的下一跳列表。
        self.next_hop_item_list = next_hop_item_list
        # 路由类型。
        # 
        # local：交换机路由。
        # service：云服务路由。
        # classicLink：开启ClassicLink功能后系统自动添加的路由。
        self.next_hop_type = next_hop_type
        # 路由条目所属路由表的ID。
        self.route_table_id = route_table_id
        # 
        # 路由条目的状态。
        # 
        # Pending：配置中。
        # Available：可用。
        # Modifying：修改中。
        self.status = status
        # 路由条目的类型。
        # 
        # System：系统路由。
        # Custom：自定义路由。
        # BGP：BGP路由。
        # 
        self.type = type

    def validate(self):
        if self.next_hop_item_list:
            for k in self.next_hop_item_list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.desination_cidr_block is not None:
            result['desination_cidr_block'] = self.desination_cidr_block
        if self.instance_id is not None:
            result['instance_id'] = self.instance_id
        if self.instance_name is not None:
            result['instance_name'] = self.instance_name
        if self.next_hop_id is not None:
            result['next_hop_id'] = self.next_hop_id
        result['next_hop_item_list'] = []
        if self.next_hop_item_list is not None:
            for k in self.next_hop_item_list:
                result['next_hop_item_list'].append(k.to_map() if k else None)
        if self.next_hop_type is not None:
            result['next_hop_type'] = self.next_hop_type
        if self.route_table_id is not None:
            result['route_table_id'] = self.route_table_id
        if self.status is not None:
            result['status'] = self.status
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('desination_cidr_block') is not None:
            self.desination_cidr_block = m.get('desination_cidr_block')
        if m.get('instance_id') is not None:
            self.instance_id = m.get('instance_id')
        if m.get('instance_name') is not None:
            self.instance_name = m.get('instance_name')
        if m.get('next_hop_id') is not None:
            self.next_hop_id = m.get('next_hop_id')
        self.next_hop_item_list = []
        if m.get('next_hop_item_list') is not None:
            for k in m.get('next_hop_item_list'):
                temp_model = NextHopItem()
                self.next_hop_item_list.append(temp_model.from_map(k))
        if m.get('next_hop_type') is not None:
            self.next_hop_type = m.get('next_hop_type')
        if m.get('route_table_id') is not None:
            self.route_table_id = m.get('route_table_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class Workspace(TeaModel):
    def __init__(
        self,
        id: str = None,
        name: str = None,
        network_type: str = None,
        tenant: str = None,
        zone_ids: str = None,
        region_id: str = None,
    ):
        # id
        self.id = id
        # 名称
        self.name = name
        # 网络类型
        self.network_type = network_type
        # 租户
        self.tenant = tenant
        # 可用区 id
        self.zone_ids = zone_ids
        # region id
        self.region_id = region_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.network_type is not None:
            result['network_type'] = self.network_type
        if self.tenant is not None:
            result['tenant'] = self.tenant
        if self.zone_ids is not None:
            result['zone_ids'] = self.zone_ids
        if self.region_id is not None:
            result['region_id'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('network_type') is not None:
            self.network_type = m.get('network_type')
        if m.get('tenant') is not None:
            self.tenant = m.get('tenant')
        if m.get('zone_ids') is not None:
            self.zone_ids = m.get('zone_ids')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        return self


class TaskVO(TeaModel):
    def __init__(
        self,
        context: str = None,
        execution_times: int = None,
        id: str = None,
        request: TaskRequest = None,
        resource_id: str = None,
        resource_type: str = None,
        status: str = None,
        utc_create: str = None,
        utc_modified: str = None,
        workspace_id: str = None,
        resource: Resource = None,
    ):
        # context
        self.context = context
        # execution_times
        self.execution_times = execution_times
        # id
        self.id = id
        # request
        self.request = request
        # resource_id
        self.resource_id = resource_id
        # resource_type
        self.resource_type = resource_type
        # status
        self.status = status
        # utc_create
        self.utc_create = utc_create
        # utc_modified
        self.utc_modified = utc_modified
        # workspace_id
        self.workspace_id = workspace_id
        # resource
        self.resource = resource

    def validate(self):
        self.validate_required(self.context, 'context')
        if self.request:
            self.request.validate()
        self.validate_required(self.status, 'status')
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.resource, 'resource')
        if self.resource:
            self.resource.validate()

    def to_map(self):
        result = dict()
        if self.context is not None:
            result['context'] = self.context
        if self.execution_times is not None:
            result['execution_times'] = self.execution_times
        if self.id is not None:
            result['id'] = self.id
        if self.request is not None:
            result['request'] = self.request.to_map()
        if self.resource_id is not None:
            result['resource_id'] = self.resource_id
        if self.resource_type is not None:
            result['resource_type'] = self.resource_type
        if self.status is not None:
            result['status'] = self.status
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.resource is not None:
            result['resource'] = self.resource.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('context') is not None:
            self.context = m.get('context')
        if m.get('execution_times') is not None:
            self.execution_times = m.get('execution_times')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('request') is not None:
            temp_model = TaskRequest()
            self.request = temp_model.from_map(m['request'])
        if m.get('resource_id') is not None:
            self.resource_id = m.get('resource_id')
        if m.get('resource_type') is not None:
            self.resource_type = m.get('resource_type')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('resource') is not None:
            temp_model = Resource()
            self.resource = temp_model.from_map(m['resource'])
        return self


class AppQuery(TeaModel):
    def __init__(
        self,
        id: str = None,
        tenant_id: str = None,
        name: str = None,
        chinese_name: str = None,
        stack_id: str = None,
        start_version: str = None,
        end_version: str = None,
        app_ids: List[str] = None,
        app_domain_id: str = None,
        app_domain_ids: List[str] = None,
        app_domain_name: str = None,
        app_level_id: str = None,
        owner_id: str = None,
        is_component: bool = None,
        simple_query: bool = None,
        workspace_id: str = None,
        container_count: str = None,
        database_count: str = None,
        slb_count: str = None,
        utc_create: str = None,
        is_one_party_request: bool = None,
        page_size: int = None,
        current_page: int = None,
        orders: List[str] = None,
        query_type: str = None,
    ):
        # id
        self.id = id
        # tenantId
        self.tenant_id = tenant_id
        # name
        self.name = name
        # chineseName
        self.chinese_name = chinese_name
        # stackId
        self.stack_id = stack_id
        # startVersion
        self.start_version = start_version
        # endVersion
        self.end_version = end_version
        # appIds
        self.app_ids = app_ids
        # appDomainId
        self.app_domain_id = app_domain_id
        # appDomainIds
        self.app_domain_ids = app_domain_ids
        # appDomainName
        self.app_domain_name = app_domain_name
        # appLevelId
        self.app_level_id = app_level_id
        # ownerId
        self.owner_id = owner_id
        # isComponent
        self.is_component = is_component
        # simpleQuery
        self.simple_query = simple_query
        # workspaceId
        self.workspace_id = workspace_id
        # containerCount
        self.container_count = container_count
        # databaseCount
        self.database_count = database_count
        # slbCount
        self.slb_count = slb_count
        # utcCreate
        self.utc_create = utc_create
        # isOnePartyRequest
        self.is_one_party_request = is_one_party_request
        # 分页大小
        self.page_size = page_size
        # 当前页数
        self.current_page = current_page
        # orders
        self.orders = orders
        # queryType
        self.query_type = query_type

    def validate(self):
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.name is not None:
            result['name'] = self.name
        if self.chinese_name is not None:
            result['chinese_name'] = self.chinese_name
        if self.stack_id is not None:
            result['stack_id'] = self.stack_id
        if self.start_version is not None:
            result['start_version'] = self.start_version
        if self.end_version is not None:
            result['end_version'] = self.end_version
        if self.app_ids is not None:
            result['app_ids'] = self.app_ids
        if self.app_domain_id is not None:
            result['app_domain_id'] = self.app_domain_id
        if self.app_domain_ids is not None:
            result['app_domain_ids'] = self.app_domain_ids
        if self.app_domain_name is not None:
            result['app_domain_name'] = self.app_domain_name
        if self.app_level_id is not None:
            result['app_level_id'] = self.app_level_id
        if self.owner_id is not None:
            result['owner_id'] = self.owner_id
        if self.is_component is not None:
            result['is_component'] = self.is_component
        if self.simple_query is not None:
            result['simple_query'] = self.simple_query
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.container_count is not None:
            result['container_count'] = self.container_count
        if self.database_count is not None:
            result['database_count'] = self.database_count
        if self.slb_count is not None:
            result['slb_count'] = self.slb_count
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.is_one_party_request is not None:
            result['is_one_party_request'] = self.is_one_party_request
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.orders is not None:
            result['orders'] = self.orders
        if self.query_type is not None:
            result['query_type'] = self.query_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('chinese_name') is not None:
            self.chinese_name = m.get('chinese_name')
        if m.get('stack_id') is not None:
            self.stack_id = m.get('stack_id')
        if m.get('start_version') is not None:
            self.start_version = m.get('start_version')
        if m.get('end_version') is not None:
            self.end_version = m.get('end_version')
        if m.get('app_ids') is not None:
            self.app_ids = m.get('app_ids')
        if m.get('app_domain_id') is not None:
            self.app_domain_id = m.get('app_domain_id')
        if m.get('app_domain_ids') is not None:
            self.app_domain_ids = m.get('app_domain_ids')
        if m.get('app_domain_name') is not None:
            self.app_domain_name = m.get('app_domain_name')
        if m.get('app_level_id') is not None:
            self.app_level_id = m.get('app_level_id')
        if m.get('owner_id') is not None:
            self.owner_id = m.get('owner_id')
        if m.get('is_component') is not None:
            self.is_component = m.get('is_component')
        if m.get('simple_query') is not None:
            self.simple_query = m.get('simple_query')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('container_count') is not None:
            self.container_count = m.get('container_count')
        if m.get('database_count') is not None:
            self.database_count = m.get('database_count')
        if m.get('slb_count') is not None:
            self.slb_count = m.get('slb_count')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('is_one_party_request') is not None:
            self.is_one_party_request = m.get('is_one_party_request')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('orders') is not None:
            self.orders = m.get('orders')
        if m.get('query_type') is not None:
            self.query_type = m.get('query_type')
        return self


class AppPortraitAppUsability(TeaModel):
    def __init__(
        self,
        app_id: str = None,
        app_name: str = None,
        app_usability: int = None,
        y_2y: str = None,
        reason_list: List[str] = None,
    ):
        # 应用id
        self.app_id = app_id
        # 应用名称
        self.app_name = app_name
        # 应用可用性
        self.app_usability = app_usability
        # 年同比
        self.y_2y = y_2y
        # 原因列表
        self.reason_list = reason_list

    def validate(self):
        self.validate_required(self.app_id, 'app_id')
        self.validate_required(self.app_name, 'app_name')

    def to_map(self):
        result = dict()
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.app_name is not None:
            result['app_name'] = self.app_name
        if self.app_usability is not None:
            result['app_usability'] = self.app_usability
        if self.y_2y is not None:
            result['y2y'] = self.y_2y
        if self.reason_list is not None:
            result['reason_list'] = self.reason_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('app_name') is not None:
            self.app_name = m.get('app_name')
        if m.get('app_usability') is not None:
            self.app_usability = m.get('app_usability')
        if m.get('y2y') is not None:
            self.y_2y = m.get('y2y')
        if m.get('reason_list') is not None:
            self.reason_list = m.get('reason_list')
        return self


class AppLevelQuery(TeaModel):
    def __init__(
        self,
        app_count_include: bool = None,
        creator_id: str = None,
        is_one_party_request: bool = None,
        name: str = None,
        tenant_id: str = None,
        utc_create: str = None,
        current_page: int = None,
        orders: List[str] = None,
        page_size: int = None,
        query_type: str = None,
    ):
        # appCountInclude
        self.app_count_include = app_count_include
        # creator_id
        self.creator_id = creator_id
        # is_one_party_request
        self.is_one_party_request = is_one_party_request
        # name
        self.name = name
        # tenant_id
        self.tenant_id = tenant_id
        # utc_create
        self.utc_create = utc_create
        # 当前页数
        self.current_page = current_page
        # orders
        self.orders = orders
        # 分页大小
        self.page_size = page_size
        # query_type
        self.query_type = query_type

    def validate(self):
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.app_count_include is not None:
            result['app_count_include'] = self.app_count_include
        if self.creator_id is not None:
            result['creator_id'] = self.creator_id
        if self.is_one_party_request is not None:
            result['is_one_party_request'] = self.is_one_party_request
        if self.name is not None:
            result['name'] = self.name
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.orders is not None:
            result['orders'] = self.orders
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.query_type is not None:
            result['query_type'] = self.query_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('app_count_include') is not None:
            self.app_count_include = m.get('app_count_include')
        if m.get('creator_id') is not None:
            self.creator_id = m.get('creator_id')
        if m.get('is_one_party_request') is not None:
            self.is_one_party_request = m.get('is_one_party_request')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('orders') is not None:
            self.orders = m.get('orders')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('query_type') is not None:
            self.query_type = m.get('query_type')
        return self


class ComputerType(TeaModel):
    def __init__(
        self,
        cpu_core_count: int = None,
        id: str = None,
        instance_type_family: str = None,
        memory_size: int = None,
        status: str = None,
    ):
        # cpu core count
        self.cpu_core_count = cpu_core_count
        # instance type id
        self.id = id
        # 实例规格族
        self.instance_type_family = instance_type_family
        # memory size
        self.memory_size = memory_size
        # 实例状态，可能值： Available：资源充足 Sold...
        self.status = status

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.status, 'status')

    def to_map(self):
        result = dict()
        if self.cpu_core_count is not None:
            result['cpu_core_count'] = self.cpu_core_count
        if self.id is not None:
            result['id'] = self.id
        if self.instance_type_family is not None:
            result['instance_type_family'] = self.instance_type_family
        if self.memory_size is not None:
            result['memory_size'] = self.memory_size
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cpu_core_count') is not None:
            self.cpu_core_count = m.get('cpu_core_count')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('instance_type_family') is not None:
            self.instance_type_family = m.get('instance_type_family')
        if m.get('memory_size') is not None:
            self.memory_size = m.get('memory_size')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class DataDisk(TeaModel):
    def __init__(
        self,
        size: int = None,
        snapshot_sequence: str = None,
        spec_id: str = None,
        device: str = None,
    ):
        # 磁盘大小
        self.size = size
        # 若使用磁盘创建，需填写此字段
        self.snapshot_sequence = snapshot_sequence
        # 磁盘规格
        self.spec_id = spec_id
        # 数据盘设备
        self.device = device

    def validate(self):
        self.validate_required(self.size, 'size')
        self.validate_required(self.spec_id, 'spec_id')
        self.validate_required(self.device, 'device')

    def to_map(self):
        result = dict()
        if self.size is not None:
            result['size'] = self.size
        if self.snapshot_sequence is not None:
            result['snapshot_sequence'] = self.snapshot_sequence
        if self.spec_id is not None:
            result['spec_id'] = self.spec_id
        if self.device is not None:
            result['device'] = self.device
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('size') is not None:
            self.size = m.get('size')
        if m.get('snapshot_sequence') is not None:
            self.snapshot_sequence = m.get('snapshot_sequence')
        if m.get('spec_id') is not None:
            self.spec_id = m.get('spec_id')
        if m.get('device') is not None:
            self.device = m.get('device')
        return self


class LoadBalanceHealthStatus(TeaModel):
    def __init__(
        self,
        server_id: str = None,
        status: str = None,
    ):
        # server_id
        self.server_id = server_id
        # status
        self.status = status

    def validate(self):
        self.validate_required(self.server_id, 'server_id')
        self.validate_required(self.status, 'status')

    def to_map(self):
        result = dict()
        if self.server_id is not None:
            result['server_id'] = self.server_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('server_id') is not None:
            self.server_id = m.get('server_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class DnsRecordParam(TeaModel):
    def __init__(
        self,
        workspace_id: str = None,
        value: str = None,
        ttl: int = None,
        region_id: str = None,
        zone_id: str = None,
        description: str = None,
        resource_type: str = None,
    ):
        # workspace_id
        self.workspace_id = workspace_id
        # value
        self.value = value
        # ttl
        self.ttl = ttl
        # regionId
        self.region_id = region_id
        # zoneId
        self.zone_id = zone_id
        # description
        self.description = description
        # resource_type
        self.resource_type = resource_type

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.value, 'value')
        self.validate_required(self.ttl, 'ttl')
        self.validate_required(self.region_id, 'region_id')
        self.validate_required(self.resource_type, 'resource_type')

    def to_map(self):
        result = dict()
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.value is not None:
            result['value'] = self.value
        if self.ttl is not None:
            result['ttl'] = self.ttl
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.zone_id is not None:
            result['zone_id'] = self.zone_id
        if self.description is not None:
            result['description'] = self.description
        if self.resource_type is not None:
            result['resource_type'] = self.resource_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('value') is not None:
            self.value = m.get('value')
        if m.get('ttl') is not None:
            self.ttl = m.get('ttl')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('zone_id') is not None:
            self.zone_id = m.get('zone_id')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('resource_type') is not None:
            self.resource_type = m.get('resource_type')
        return self


class Zone(TeaModel):
    def __init__(
        self,
        name: str = None,
        identity: str = None,
        description: str = None,
        instancestatus: str = None,
        region: str = None,
        properties: List[Property] = None,
    ):
        # name
        self.name = name
        # identity
        self.identity = identity
        # description
        self.description = description
        # instanceStatus: AVAILABLE  UNAVAILABLE  RETIRED  DELETED
        self.instancestatus = instancestatus
        # region name
        self.region = region
        # properties
        self.properties = properties

    def validate(self):
        self.validate_required(self.name, 'name')
        self.validate_required(self.identity, 'identity')
        self.validate_required(self.instancestatus, 'instancestatus')
        self.validate_required(self.region, 'region')
        self.validate_required(self.properties, 'properties')
        if self.properties:
            for k in self.properties:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.name is not None:
            result['name'] = self.name
        if self.identity is not None:
            result['identity'] = self.identity
        if self.description is not None:
            result['description'] = self.description
        if self.instancestatus is not None:
            result['instancestatus'] = self.instancestatus
        if self.region is not None:
            result['region'] = self.region
        result['properties'] = []
        if self.properties is not None:
            for k in self.properties:
                result['properties'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('identity') is not None:
            self.identity = m.get('identity')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('instancestatus') is not None:
            self.instancestatus = m.get('instancestatus')
        if m.get('region') is not None:
            self.region = m.get('region')
        self.properties = []
        if m.get('properties') is not None:
            for k in m.get('properties'):
                temp_model = Property()
                self.properties.append(temp_model.from_map(k))
        return self


class AppPortraitContainerUsageList(TeaModel):
    def __init__(
        self,
        namespace: str = None,
        request_cpu: int = None,
        request_mem: int = None,
        limit_cpu: int = None,
        limit_mem: int = None,
        average_cpu: int = None,
        average_mem: int = None,
    ):
        # namespace
        self.namespace = namespace
        # request_cpu
        self.request_cpu = request_cpu
        # request_mem
        self.request_mem = request_mem
        # limit_cpu
        self.limit_cpu = limit_cpu
        # limit_mem
        self.limit_mem = limit_mem
        # average_cpu
        self.average_cpu = average_cpu
        # average_mem
        self.average_mem = average_mem

    def validate(self):
        self.validate_required(self.namespace, 'namespace')
        self.validate_required(self.request_cpu, 'request_cpu')
        self.validate_required(self.request_mem, 'request_mem')
        self.validate_required(self.limit_cpu, 'limit_cpu')
        self.validate_required(self.limit_mem, 'limit_mem')
        self.validate_required(self.average_cpu, 'average_cpu')
        self.validate_required(self.average_mem, 'average_mem')

    def to_map(self):
        result = dict()
        if self.namespace is not None:
            result['namespace'] = self.namespace
        if self.request_cpu is not None:
            result['request_cpu'] = self.request_cpu
        if self.request_mem is not None:
            result['request_mem'] = self.request_mem
        if self.limit_cpu is not None:
            result['limit_cpu'] = self.limit_cpu
        if self.limit_mem is not None:
            result['limit_mem'] = self.limit_mem
        if self.average_cpu is not None:
            result['average_cpu'] = self.average_cpu
        if self.average_mem is not None:
            result['average_mem'] = self.average_mem
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('namespace') is not None:
            self.namespace = m.get('namespace')
        if m.get('request_cpu') is not None:
            self.request_cpu = m.get('request_cpu')
        if m.get('request_mem') is not None:
            self.request_mem = m.get('request_mem')
        if m.get('limit_cpu') is not None:
            self.limit_cpu = m.get('limit_cpu')
        if m.get('limit_mem') is not None:
            self.limit_mem = m.get('limit_mem')
        if m.get('average_cpu') is not None:
            self.average_cpu = m.get('average_cpu')
        if m.get('average_mem') is not None:
            self.average_mem = m.get('average_mem')
        return self


class AppPortraitAlertCountTrend(TeaModel):
    def __init__(
        self,
        day: str = None,
        now_cycle: str = None,
        last_cycle: str = None,
    ):
        # 日期
        self.day = day
        # 本周期
        self.now_cycle = now_cycle
        # 上周期
        self.last_cycle = last_cycle

    def validate(self):
        self.validate_required(self.day, 'day')
        if self.day is not None:
            self.validate_pattern(self.day, 'day', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.now_cycle, 'now_cycle')
        self.validate_required(self.last_cycle, 'last_cycle')

    def to_map(self):
        result = dict()
        if self.day is not None:
            result['day'] = self.day
        if self.now_cycle is not None:
            result['now_cycle'] = self.now_cycle
        if self.last_cycle is not None:
            result['last_cycle'] = self.last_cycle
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('day') is not None:
            self.day = m.get('day')
        if m.get('now_cycle') is not None:
            self.now_cycle = m.get('now_cycle')
        if m.get('last_cycle') is not None:
            self.last_cycle = m.get('last_cycle')
        return self


class Grant(TeaModel):
    def __init__(
        self,
        account: DatabaseAccount = None,
        privilege: str = None,
        schema: DbSchema = None,
    ):
        # account
        self.account = account
        # privilege
        self.privilege = privilege
        # schema
        self.schema = schema

    def validate(self):
        self.validate_required(self.account, 'account')
        if self.account:
            self.account.validate()
        self.validate_required(self.privilege, 'privilege')
        self.validate_required(self.schema, 'schema')
        if self.schema:
            self.schema.validate()

    def to_map(self):
        result = dict()
        if self.account is not None:
            result['account'] = self.account.to_map()
        if self.privilege is not None:
            result['privilege'] = self.privilege
        if self.schema is not None:
            result['schema'] = self.schema.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('account') is not None:
            temp_model = DatabaseAccount()
            self.account = temp_model.from_map(m['account'])
        if m.get('privilege') is not None:
            self.privilege = m.get('privilege')
        if m.get('schema') is not None:
            temp_model = DbSchema()
            self.schema = temp_model.from_map(m['schema'])
        return self


class AppPortraitActionTrailQuery(TeaModel):
    def __init__(
        self,
        actiontrail_timestamp: str = None,
        title: str = None,
        status: str = None,
    ):
        # 操作时间
        self.actiontrail_timestamp = actiontrail_timestamp
        # title
        self.title = title
        # 状态
        self.status = status

    def validate(self):
        self.validate_required(self.actiontrail_timestamp, 'actiontrail_timestamp')
        if self.actiontrail_timestamp is not None:
            self.validate_pattern(self.actiontrail_timestamp, 'actiontrail_timestamp', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.title, 'title')
        self.validate_required(self.status, 'status')

    def to_map(self):
        result = dict()
        if self.actiontrail_timestamp is not None:
            result['actiontrail_timestamp'] = self.actiontrail_timestamp
        if self.title is not None:
            result['title'] = self.title
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('actiontrail_timestamp') is not None:
            self.actiontrail_timestamp = m.get('actiontrail_timestamp')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class PackageUploadPolicy(TeaModel):
    def __init__(
        self,
        access_key: str = None,
        policy: str = None,
        signature: str = None,
        path_prefix: str = None,
        endpoint: str = None,
        expire: str = None,
        bucket: str = None,
    ):
        # accessKey
        self.access_key = access_key
        # 策略
        self.policy = policy
        # 签名
        self.signature = signature
        # 路径前缀
        self.path_prefix = path_prefix
        # endpoint
        self.endpoint = endpoint
        # expire
        self.expire = expire
        # bucket
        self.bucket = bucket

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.access_key is not None:
            result['access_key'] = self.access_key
        if self.policy is not None:
            result['policy'] = self.policy
        if self.signature is not None:
            result['signature'] = self.signature
        if self.path_prefix is not None:
            result['path_prefix'] = self.path_prefix
        if self.endpoint is not None:
            result['endpoint'] = self.endpoint
        if self.expire is not None:
            result['expire'] = self.expire
        if self.bucket is not None:
            result['bucket'] = self.bucket
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('access_key') is not None:
            self.access_key = m.get('access_key')
        if m.get('policy') is not None:
            self.policy = m.get('policy')
        if m.get('signature') is not None:
            self.signature = m.get('signature')
        if m.get('path_prefix') is not None:
            self.path_prefix = m.get('path_prefix')
        if m.get('endpoint') is not None:
            self.endpoint = m.get('endpoint')
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('bucket') is not None:
            self.bucket = m.get('bucket')
        return self


class TenantWorkspace(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: str = None,
        name: str = None,
        network_type: str = None,
        status: str = None,
        tenant_id: str = None,
        type: str = None,
        workspace_dcs: List[WorkspaceDc] = None,
        workspace_regions: List[WorkspaceRegion] = None,
    ):
        # displayName
        self.display_name = display_name
        # gmtCreate
        self.gmt_create = gmt_create
        # gmtModified
        self.gmt_modified = gmt_modified
        # id
        self.id = id
        # name
        self.name = name
        # networkType
        self.network_type = network_type
        # status
        self.status = status
        # tenantId
        self.tenant_id = tenant_id
        # type
        self.type = type
        # workspaceDcs
        self.workspace_dcs = workspace_dcs
        # workspaceRegions
        self.workspace_regions = workspace_regions

    def validate(self):
        self.validate_required(self.display_name, 'display_name')
        self.validate_required(self.gmt_create, 'gmt_create')
        if self.gmt_create is not None:
            self.validate_pattern(self.gmt_create, 'gmt_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.gmt_modified, 'gmt_modified')
        if self.gmt_modified is not None:
            self.validate_pattern(self.gmt_modified, 'gmt_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.id, 'id')
        self.validate_required(self.name, 'name')
        self.validate_required(self.network_type, 'network_type')
        self.validate_required(self.status, 'status')
        self.validate_required(self.tenant_id, 'tenant_id')
        self.validate_required(self.type, 'type')
        self.validate_required(self.workspace_dcs, 'workspace_dcs')
        if self.workspace_dcs:
            for k in self.workspace_dcs:
                if k:
                    k.validate()
        self.validate_required(self.workspace_regions, 'workspace_regions')
        if self.workspace_regions:
            for k in self.workspace_regions:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.display_name is not None:
            result['display_name'] = self.display_name
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.network_type is not None:
            result['network_type'] = self.network_type
        if self.status is not None:
            result['status'] = self.status
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.type is not None:
            result['type'] = self.type
        result['workspace_dcs'] = []
        if self.workspace_dcs is not None:
            for k in self.workspace_dcs:
                result['workspace_dcs'].append(k.to_map() if k else None)
        result['workspace_regions'] = []
        if self.workspace_regions is not None:
            for k in self.workspace_regions:
                result['workspace_regions'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('display_name') is not None:
            self.display_name = m.get('display_name')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('network_type') is not None:
            self.network_type = m.get('network_type')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        self.workspace_dcs = []
        if m.get('workspace_dcs') is not None:
            for k in m.get('workspace_dcs'):
                temp_model = WorkspaceDc()
                self.workspace_dcs.append(temp_model.from_map(k))
        self.workspace_regions = []
        if m.get('workspace_regions') is not None:
            for k in m.get('workspace_regions'):
                temp_model = WorkspaceRegion()
                self.workspace_regions.append(temp_model.from_map(k))
        return self


class AppDomainView(TeaModel):
    def __init__(
        self,
        owner_name: str = None,
        father_domain_name: str = None,
        apps: List[AppView] = None,
        base_app_domain: List[AppDomain] = None,
    ):
        # ownerName
        self.owner_name = owner_name
        # fatherDomainName
        self.father_domain_name = father_domain_name
        # 应用列表
        self.apps = apps
        # AppDomainView 的父类 AppDomain
        self.base_app_domain = base_app_domain

    def validate(self):
        if self.apps:
            for k in self.apps:
                if k:
                    k.validate()
        if self.base_app_domain:
            for k in self.base_app_domain:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.owner_name is not None:
            result['owner_name'] = self.owner_name
        if self.father_domain_name is not None:
            result['father_domain_name'] = self.father_domain_name
        result['apps'] = []
        if self.apps is not None:
            for k in self.apps:
                result['apps'].append(k.to_map() if k else None)
        result['base_app_domain'] = []
        if self.base_app_domain is not None:
            for k in self.base_app_domain:
                result['base_app_domain'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('owner_name') is not None:
            self.owner_name = m.get('owner_name')
        if m.get('father_domain_name') is not None:
            self.father_domain_name = m.get('father_domain_name')
        self.apps = []
        if m.get('apps') is not None:
            for k in m.get('apps'):
                temp_model = AppView()
                self.apps.append(temp_model.from_map(k))
        self.base_app_domain = []
        if m.get('base_app_domain') is not None:
            for k in m.get('base_app_domain'):
                temp_model = AppDomain()
                self.base_app_domain.append(temp_model.from_map(k))
        return self


class ComputerQuota(TeaModel):
    def __init__(
        self,
        cpu_shared: int = None,
        cpu: int = None,
        memory: int = None,
        disk: int = None,
    ):
        # cpu shared
        self.cpu_shared = cpu_shared
        # cpu
        self.cpu = cpu
        # memory
        self.memory = memory
        # disk
        self.disk = disk

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.cpu_shared is not None:
            result['cpu_shared'] = self.cpu_shared
        if self.cpu is not None:
            result['cpu'] = self.cpu
        if self.memory is not None:
            result['memory'] = self.memory
        if self.disk is not None:
            result['disk'] = self.disk
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cpu_shared') is not None:
            self.cpu_shared = m.get('cpu_shared')
        if m.get('cpu') is not None:
            self.cpu = m.get('cpu')
        if m.get('memory') is not None:
            self.memory = m.get('memory')
        if m.get('disk') is not None:
            self.disk = m.get('disk')
        return self


class AppPortraitAppUsabilityTrendQuery(TeaModel):
    def __init__(
        self,
        day: str = None,
        app_usability: int = None,
    ):
        # 时间以天为单位
        self.day = day
        # 应用可用性
        self.app_usability = app_usability

    def validate(self):
        if self.day is not None:
            self.validate_pattern(self.day, 'day', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.day is not None:
            result['day'] = self.day
        if self.app_usability is not None:
            result['app_usability'] = self.app_usability
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('day') is not None:
            self.day = m.get('day')
        if m.get('app_usability') is not None:
            self.app_usability = m.get('app_usability')
        return self


class RegionDto(TeaModel):
    def __init__(
        self,
        available_network_types: List[str] = None,
        description: str = None,
        display_name: str = None,
        iaas_provider_id: str = None,
        id: str = None,
        identity: str = None,
        network_type: str = None,
        state: str = None,
        utc_create: str = None,
        utc_modified: str = None,
        zone_dtos: List[ZoneDto] = None,
    ):
        # availableNetworkTypes
        self.available_network_types = available_network_types
        # description
        self.description = description
        # displayName
        self.display_name = display_name
        # iaasProviderId
        self.iaas_provider_id = iaas_provider_id
        # id
        self.id = id
        # identity
        self.identity = identity
        # networkType
        self.network_type = network_type
        # state
        self.state = state
        # utcCreate
        self.utc_create = utc_create
        # utcModified
        self.utc_modified = utc_modified
        # zoneDtos
        self.zone_dtos = zone_dtos

    def validate(self):
        self.validate_required(self.available_network_types, 'available_network_types')
        self.validate_required(self.description, 'description')
        self.validate_required(self.display_name, 'display_name')
        self.validate_required(self.iaas_provider_id, 'iaas_provider_id')
        self.validate_required(self.id, 'id')
        self.validate_required(self.identity, 'identity')
        self.validate_required(self.network_type, 'network_type')
        self.validate_required(self.state, 'state')
        self.validate_required(self.utc_create, 'utc_create')
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.utc_modified, 'utc_modified')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.zone_dtos, 'zone_dtos')
        if self.zone_dtos:
            for k in self.zone_dtos:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.available_network_types is not None:
            result['available_network_types'] = self.available_network_types
        if self.description is not None:
            result['description'] = self.description
        if self.display_name is not None:
            result['display_name'] = self.display_name
        if self.iaas_provider_id is not None:
            result['iaas_provider_id'] = self.iaas_provider_id
        if self.id is not None:
            result['id'] = self.id
        if self.identity is not None:
            result['identity'] = self.identity
        if self.network_type is not None:
            result['network_type'] = self.network_type
        if self.state is not None:
            result['state'] = self.state
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        result['zone_dtos'] = []
        if self.zone_dtos is not None:
            for k in self.zone_dtos:
                result['zone_dtos'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('available_network_types') is not None:
            self.available_network_types = m.get('available_network_types')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('display_name') is not None:
            self.display_name = m.get('display_name')
        if m.get('iaas_provider_id') is not None:
            self.iaas_provider_id = m.get('iaas_provider_id')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('identity') is not None:
            self.identity = m.get('identity')
        if m.get('network_type') is not None:
            self.network_type = m.get('network_type')
        if m.get('state') is not None:
            self.state = m.get('state')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        self.zone_dtos = []
        if m.get('zone_dtos') is not None:
            for k in m.get('zone_dtos'):
                temp_model = ZoneDto()
                self.zone_dtos.append(temp_model.from_map(k))
        return self


class WorkspaceDto(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        id: str = None,
        name: str = None,
        network_type: str = None,
        project_id: str = None,
        status: str = None,
        type: str = None,
        utc_create: str = None,
        utc_modified: str = None,
        workspace_region_dto: WorkspaceRegionDto = None,
    ):
        # displayName
        self.display_name = display_name
        # id
        self.id = id
        # name
        self.name = name
        # networkType
        self.network_type = network_type
        # projectId
        self.project_id = project_id
        # status
        self.status = status
        # type
        self.type = type
        # utcCreate
        self.utc_create = utc_create
        # utcModified
        self.utc_modified = utc_modified
        # workspaceRegionDto
        self.workspace_region_dto = workspace_region_dto

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.name, 'name')
        self.validate_required(self.network_type, 'network_type')
        self.validate_required(self.project_id, 'project_id')
        self.validate_required(self.status, 'status')
        self.validate_required(self.utc_create, 'utc_create')
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.workspace_region_dto:
            self.workspace_region_dto.validate()

    def to_map(self):
        result = dict()
        if self.display_name is not None:
            result['display_name'] = self.display_name
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.network_type is not None:
            result['network_type'] = self.network_type
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.status is not None:
            result['status'] = self.status
        if self.type is not None:
            result['type'] = self.type
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        if self.workspace_region_dto is not None:
            result['workspace_region_dto'] = self.workspace_region_dto.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('display_name') is not None:
            self.display_name = m.get('display_name')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('network_type') is not None:
            self.network_type = m.get('network_type')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        if m.get('workspace_region_dto') is not None:
            temp_model = WorkspaceRegionDto()
            self.workspace_region_dto = temp_model.from_map(m['workspace_region_dto'])
        return self


class RegionWorkspaceVO(TeaModel):
    def __init__(
        self,
        available_network_types: List[str] = None,
        description: str = None,
        id: str = None,
        identity: str = None,
        name: str = None,
        network_type: str = None,
        provider_id: str = None,
        state: str = None,
        workspaces: List[WorkspaceWithGroupView] = None,
    ):
        # availableNetworkTypes
        self.available_network_types = available_network_types
        # description
        self.description = description
        # id
        self.id = id
        # identity
        self.identity = identity
        # name
        self.name = name
        # networkType
        self.network_type = network_type
        # providerId
        self.provider_id = provider_id
        # state
        self.state = state
        # workspaces
        self.workspaces = workspaces

    def validate(self):
        self.validate_required(self.available_network_types, 'available_network_types')
        self.validate_required(self.description, 'description')
        self.validate_required(self.id, 'id')
        self.validate_required(self.identity, 'identity')
        self.validate_required(self.name, 'name')
        self.validate_required(self.network_type, 'network_type')
        self.validate_required(self.provider_id, 'provider_id')
        self.validate_required(self.state, 'state')
        self.validate_required(self.workspaces, 'workspaces')
        if self.workspaces:
            for k in self.workspaces:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.available_network_types is not None:
            result['available_network_types'] = self.available_network_types
        if self.description is not None:
            result['description'] = self.description
        if self.id is not None:
            result['id'] = self.id
        if self.identity is not None:
            result['identity'] = self.identity
        if self.name is not None:
            result['name'] = self.name
        if self.network_type is not None:
            result['network_type'] = self.network_type
        if self.provider_id is not None:
            result['provider_id'] = self.provider_id
        if self.state is not None:
            result['state'] = self.state
        result['workspaces'] = []
        if self.workspaces is not None:
            for k in self.workspaces:
                result['workspaces'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('available_network_types') is not None:
            self.available_network_types = m.get('available_network_types')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('identity') is not None:
            self.identity = m.get('identity')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('network_type') is not None:
            self.network_type = m.get('network_type')
        if m.get('provider_id') is not None:
            self.provider_id = m.get('provider_id')
        if m.get('state') is not None:
            self.state = m.get('state')
        self.workspaces = []
        if m.get('workspaces') is not None:
            for k in m.get('workspaces'):
                temp_model = WorkspaceWithGroupView()
                self.workspaces.append(temp_model.from_map(k))
        return self


class ResourceLog(TeaModel):
    def __init__(
        self,
        host: str = None,
        log_time: str = None,
        message: str = None,
        resource_id: str = None,
        resource_type: str = None,
        severity: str = None,
        source: str = None,
        task_id: str = None,
        task_times: int = None,
        type: str = None,
        iaas_error_info: IaasErrorInfo = None,
        iaas_request: IaasRequest = None,
        iaas_response: IaasResponse = None,
    ):
        # host
        self.host = host
        # log_time
        self.log_time = log_time
        # message
        self.message = message
        # resource_id
        self.resource_id = resource_id
        # resource_type
        self.resource_type = resource_type
        # severity
        self.severity = severity
        # source
        self.source = source
        # task_id
        self.task_id = task_id
        # task_times
        self.task_times = task_times
        # type
        self.type = type
        # iaas_error_info
        self.iaas_error_info = iaas_error_info
        # iaas_request
        self.iaas_request = iaas_request
        # iaas_response
        self.iaas_response = iaas_response

    def validate(self):
        self.validate_required(self.log_time, 'log_time')
        if self.log_time is not None:
            self.validate_pattern(self.log_time, 'log_time', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.message, 'message')
        self.validate_required(self.task_id, 'task_id')
        self.validate_required(self.task_times, 'task_times')
        if self.iaas_error_info:
            self.iaas_error_info.validate()
        if self.iaas_request:
            self.iaas_request.validate()
        if self.iaas_response:
            self.iaas_response.validate()

    def to_map(self):
        result = dict()
        if self.host is not None:
            result['host'] = self.host
        if self.log_time is not None:
            result['log_time'] = self.log_time
        if self.message is not None:
            result['message'] = self.message
        if self.resource_id is not None:
            result['resource_id'] = self.resource_id
        if self.resource_type is not None:
            result['resource_type'] = self.resource_type
        if self.severity is not None:
            result['severity'] = self.severity
        if self.source is not None:
            result['source'] = self.source
        if self.task_id is not None:
            result['task_id'] = self.task_id
        if self.task_times is not None:
            result['task_times'] = self.task_times
        if self.type is not None:
            result['type'] = self.type
        if self.iaas_error_info is not None:
            result['iaas_error_info'] = self.iaas_error_info.to_map()
        if self.iaas_request is not None:
            result['iaas_request'] = self.iaas_request.to_map()
        if self.iaas_response is not None:
            result['iaas_response'] = self.iaas_response.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('host') is not None:
            self.host = m.get('host')
        if m.get('log_time') is not None:
            self.log_time = m.get('log_time')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('resource_id') is not None:
            self.resource_id = m.get('resource_id')
        if m.get('resource_type') is not None:
            self.resource_type = m.get('resource_type')
        if m.get('severity') is not None:
            self.severity = m.get('severity')
        if m.get('source') is not None:
            self.source = m.get('source')
        if m.get('task_id') is not None:
            self.task_id = m.get('task_id')
        if m.get('task_times') is not None:
            self.task_times = m.get('task_times')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('iaas_error_info') is not None:
            temp_model = IaasErrorInfo()
            self.iaas_error_info = temp_model.from_map(m['iaas_error_info'])
        if m.get('iaas_request') is not None:
            temp_model = IaasRequest()
            self.iaas_request = temp_model.from_map(m['iaas_request'])
        if m.get('iaas_response') is not None:
            temp_model = IaasResponse()
            self.iaas_response = temp_model.from_map(m['iaas_response'])
        return self


class VPC(TeaModel):
    def __init__(
        self,
        cidr_block: str = None,
        creation_time: str = None,
        description: str = None,
        region_id: str = None,
        router_table_ids: List[str] = None,
        status: str = None,
        user_cidrs: str = None,
        vpc_id: str = None,
        vpc_name: str = None,
        v_router_id: str = None,
        workspace_id: str = None,
        import_info: ImportInfo = None,
        vpc_paas_id: str = None,
    ):
        # VPC的IPv4网段
        self.cidr_block = cidr_block
        # VPC的创建时间
        self.creation_time = creation_time
        # VPC的描述信息
        self.description = description
        # VPC所在的地域
        self.region_id = region_id
        # 路由表ID
        self.router_table_ids = router_table_ids
        # VPC的状态，取值：
        # 
        # Pending：配置中。
        # Available：可用。
        self.status = status
        # 用户侧网段的列表
        self.user_cidrs = user_cidrs
        # VPC的id
        self.vpc_id = vpc_id
        # VPC的名称
        self.vpc_name = vpc_name
        # VPC路由器的ID
        self.v_router_id = v_router_id
        # 关联的workspace id
        self.workspace_id = workspace_id
        # vpc是否已导入workspace
        self.import_info = import_info
        # vpc在CAFE测的唯一ID
        self.vpc_paas_id = vpc_paas_id

    def validate(self):
        self.validate_required(self.cidr_block, 'cidr_block')
        self.validate_required(self.creation_time, 'creation_time')
        self.validate_required(self.region_id, 'region_id')
        self.validate_required(self.router_table_ids, 'router_table_ids')
        self.validate_required(self.status, 'status')
        self.validate_required(self.vpc_id, 'vpc_id')
        self.validate_required(self.vpc_name, 'vpc_name')
        self.validate_required(self.v_router_id, 'v_router_id')
        if self.import_info:
            self.import_info.validate()

    def to_map(self):
        result = dict()
        if self.cidr_block is not None:
            result['cidr_block'] = self.cidr_block
        if self.creation_time is not None:
            result['creation_time'] = self.creation_time
        if self.description is not None:
            result['description'] = self.description
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.router_table_ids is not None:
            result['router_table_ids'] = self.router_table_ids
        if self.status is not None:
            result['status'] = self.status
        if self.user_cidrs is not None:
            result['user_cidrs'] = self.user_cidrs
        if self.vpc_id is not None:
            result['vpc_id'] = self.vpc_id
        if self.vpc_name is not None:
            result['vpc_name'] = self.vpc_name
        if self.v_router_id is not None:
            result['v_router_id'] = self.v_router_id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.import_info is not None:
            result['import_info'] = self.import_info.to_map()
        if self.vpc_paas_id is not None:
            result['vpc_paas_id'] = self.vpc_paas_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cidr_block') is not None:
            self.cidr_block = m.get('cidr_block')
        if m.get('creation_time') is not None:
            self.creation_time = m.get('creation_time')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('router_table_ids') is not None:
            self.router_table_ids = m.get('router_table_ids')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('user_cidrs') is not None:
            self.user_cidrs = m.get('user_cidrs')
        if m.get('vpc_id') is not None:
            self.vpc_id = m.get('vpc_id')
        if m.get('vpc_name') is not None:
            self.vpc_name = m.get('vpc_name')
        if m.get('v_router_id') is not None:
            self.v_router_id = m.get('v_router_id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('import_info') is not None:
            temp_model = ImportInfo()
            self.import_info = temp_model.from_map(m['import_info'])
        if m.get('vpc_paas_id') is not None:
            self.vpc_paas_id = m.get('vpc_paas_id')
        return self


class VPCParam(TeaModel):
    def __init__(
        self,
        cidr_block: str = None,
        description: str = None,
        region_id: str = None,
        vpc_name: str = None,
    ):
        # cidr_block
        self.cidr_block = cidr_block
        # description
        self.description = description
        # region id
        self.region_id = region_id
        # vpc_name
        self.vpc_name = vpc_name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.cidr_block is not None:
            result['cidr_block'] = self.cidr_block
        if self.description is not None:
            result['description'] = self.description
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.vpc_name is not None:
            result['vpc_name'] = self.vpc_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cidr_block') is not None:
            self.cidr_block = m.get('cidr_block')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('vpc_name') is not None:
            self.vpc_name = m.get('vpc_name')
        return self


class Listener(TeaModel):
    def __init__(
        self,
        backend_server_port: int = None,
        bandwidth: int = None,
        certificate_iaas_id: str = None,
        certificate_id: str = None,
        cookie: str = None,
        cookie_timeout: int = None,
        description: str = None,
        established_timeout: int = None,
        gm_crypto_cert_iaas_id: str = None,
        health_monitor: ListenerHealthMonitor = None,
        iaas_id: str = None,
        iaas_type: str = None,
        id: str = None,
        is_health_monitor: str = None,
        listener_port: int = None,
        load_balancer: LoadBalancer = None,
        name: str = None,
        persist_timeout: int = None,
        scheduler: str = None,
        status: str = None,
        sticky_session: str = None,
        sticky_session_type: str = None,
        type: str = None,
        url_path: str = None,
        x_forwarded_for: str = None,
    ):
        # 后端服务器端口
        self.backend_server_port = backend_server_port
        # 带宽
        self.bandwidth = bandwidth
        # certificate_iaas_id
        self.certificate_iaas_id = certificate_iaas_id
        # 证书 id
        self.certificate_id = certificate_id
        # cookie
        self.cookie = cookie
        # cookie 超时时间
        self.cookie_timeout = cookie_timeout
        # description
        self.description = description
        # 连接超时时间
        self.established_timeout = established_timeout
        # gm_crypto_cert_iaas_id
        self.gm_crypto_cert_iaas_id = gm_crypto_cert_iaas_id
        # 健康检查
        self.health_monitor = health_monitor
        # iaas_id
        self.iaas_id = iaas_id
        # iaasType
        self.iaas_type = iaas_type
        # id
        self.id = id
        # is_health_monitor
        self.is_health_monitor = is_health_monitor
        # 监听器端口
        self.listener_port = listener_port
        # load_balancer
        self.load_balancer = load_balancer
        # name
        self.name = name
        # 会话保持的超时时间
        self.persist_timeout = persist_timeout
        # 转发规则
        self.scheduler = scheduler
        # status
        self.status = status
        # sticky_session
        self.sticky_session = sticky_session
        # cookie 处理方式
        self.sticky_session_type = sticky_session_type
        # 监听类型
        self.type = type
        # url_path
        self.url_path = url_path
        # x_forwarded_for
        self.x_forwarded_for = x_forwarded_for

    def validate(self):
        self.validate_required(self.backend_server_port, 'backend_server_port')
        if self.health_monitor:
            self.health_monitor.validate()
        self.validate_required(self.listener_port, 'listener_port')
        if self.load_balancer:
            self.load_balancer.validate()
        self.validate_required(self.name, 'name')
        self.validate_required(self.status, 'status')
        self.validate_required(self.type, 'type')

    def to_map(self):
        result = dict()
        if self.backend_server_port is not None:
            result['backend_server_port'] = self.backend_server_port
        if self.bandwidth is not None:
            result['bandwidth'] = self.bandwidth
        if self.certificate_iaas_id is not None:
            result['certificate_iaas_id'] = self.certificate_iaas_id
        if self.certificate_id is not None:
            result['certificate_id'] = self.certificate_id
        if self.cookie is not None:
            result['cookie'] = self.cookie
        if self.cookie_timeout is not None:
            result['cookie_timeout'] = self.cookie_timeout
        if self.description is not None:
            result['description'] = self.description
        if self.established_timeout is not None:
            result['established_timeout'] = self.established_timeout
        if self.gm_crypto_cert_iaas_id is not None:
            result['gm_crypto_cert_iaas_id'] = self.gm_crypto_cert_iaas_id
        if self.health_monitor is not None:
            result['health_monitor'] = self.health_monitor.to_map()
        if self.iaas_id is not None:
            result['iaas_id'] = self.iaas_id
        if self.iaas_type is not None:
            result['iaas_type'] = self.iaas_type
        if self.id is not None:
            result['id'] = self.id
        if self.is_health_monitor is not None:
            result['is_health_monitor'] = self.is_health_monitor
        if self.listener_port is not None:
            result['listener_port'] = self.listener_port
        if self.load_balancer is not None:
            result['load_balancer'] = self.load_balancer.to_map()
        if self.name is not None:
            result['name'] = self.name
        if self.persist_timeout is not None:
            result['persist_timeout'] = self.persist_timeout
        if self.scheduler is not None:
            result['scheduler'] = self.scheduler
        if self.status is not None:
            result['status'] = self.status
        if self.sticky_session is not None:
            result['sticky_session'] = self.sticky_session
        if self.sticky_session_type is not None:
            result['sticky_session_type'] = self.sticky_session_type
        if self.type is not None:
            result['type'] = self.type
        if self.url_path is not None:
            result['url_path'] = self.url_path
        if self.x_forwarded_for is not None:
            result['x_forwarded_for'] = self.x_forwarded_for
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('backend_server_port') is not None:
            self.backend_server_port = m.get('backend_server_port')
        if m.get('bandwidth') is not None:
            self.bandwidth = m.get('bandwidth')
        if m.get('certificate_iaas_id') is not None:
            self.certificate_iaas_id = m.get('certificate_iaas_id')
        if m.get('certificate_id') is not None:
            self.certificate_id = m.get('certificate_id')
        if m.get('cookie') is not None:
            self.cookie = m.get('cookie')
        if m.get('cookie_timeout') is not None:
            self.cookie_timeout = m.get('cookie_timeout')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('established_timeout') is not None:
            self.established_timeout = m.get('established_timeout')
        if m.get('gm_crypto_cert_iaas_id') is not None:
            self.gm_crypto_cert_iaas_id = m.get('gm_crypto_cert_iaas_id')
        if m.get('health_monitor') is not None:
            temp_model = ListenerHealthMonitor()
            self.health_monitor = temp_model.from_map(m['health_monitor'])
        if m.get('iaas_id') is not None:
            self.iaas_id = m.get('iaas_id')
        if m.get('iaas_type') is not None:
            self.iaas_type = m.get('iaas_type')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('is_health_monitor') is not None:
            self.is_health_monitor = m.get('is_health_monitor')
        if m.get('listener_port') is not None:
            self.listener_port = m.get('listener_port')
        if m.get('load_balancer') is not None:
            temp_model = LoadBalancer()
            self.load_balancer = temp_model.from_map(m['load_balancer'])
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('persist_timeout') is not None:
            self.persist_timeout = m.get('persist_timeout')
        if m.get('scheduler') is not None:
            self.scheduler = m.get('scheduler')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sticky_session') is not None:
            self.sticky_session = m.get('sticky_session')
        if m.get('sticky_session_type') is not None:
            self.sticky_session_type = m.get('sticky_session_type')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('url_path') is not None:
            self.url_path = m.get('url_path')
        if m.get('x_forwarded_for') is not None:
            self.x_forwarded_for = m.get('x_forwarded_for')
        return self


class LoadBalancerRule(TeaModel):
    def __init__(
        self,
        load_balancer: LoadBalancer = None,
        name: str = None,
        id: str = None,
        listener_port: int = None,
        status: str = None,
        domain: str = None,
        url: str = None,
        cookie: str = None,
        is_health_monitor: str = None,
        health_monitor: ListenerHealthMonitor = None,
        sticky_session: str = None,
        app_id: str = None,
        workspace_id: str = None,
    ):
        # load_balancer
        self.load_balancer = load_balancer
        # name
        self.name = name
        # id
        self.id = id
        # listener_port
        self.listener_port = listener_port
        # status
        self.status = status
        # domain
        self.domain = domain
        # url
        self.url = url
        # cookie
        self.cookie = cookie
        # is_health_monitor
        self.is_health_monitor = is_health_monitor
        # health_monitor
        self.health_monitor = health_monitor
        # sticky_session
        self.sticky_session = sticky_session
        # app_id
        self.app_id = app_id
        # workspace_id
        self.workspace_id = workspace_id

    def validate(self):
        if self.load_balancer:
            self.load_balancer.validate()
        self.validate_required(self.name, 'name')
        self.validate_required(self.url, 'url')
        if self.health_monitor:
            self.health_monitor.validate()

    def to_map(self):
        result = dict()
        if self.load_balancer is not None:
            result['load_balancer'] = self.load_balancer.to_map()
        if self.name is not None:
            result['name'] = self.name
        if self.id is not None:
            result['id'] = self.id
        if self.listener_port is not None:
            result['listener_port'] = self.listener_port
        if self.status is not None:
            result['status'] = self.status
        if self.domain is not None:
            result['domain'] = self.domain
        if self.url is not None:
            result['url'] = self.url
        if self.cookie is not None:
            result['cookie'] = self.cookie
        if self.is_health_monitor is not None:
            result['is_health_monitor'] = self.is_health_monitor
        if self.health_monitor is not None:
            result['health_monitor'] = self.health_monitor.to_map()
        if self.sticky_session is not None:
            result['sticky_session'] = self.sticky_session
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('load_balancer') is not None:
            temp_model = LoadBalancer()
            self.load_balancer = temp_model.from_map(m['load_balancer'])
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('listener_port') is not None:
            self.listener_port = m.get('listener_port')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('domain') is not None:
            self.domain = m.get('domain')
        if m.get('url') is not None:
            self.url = m.get('url')
        if m.get('cookie') is not None:
            self.cookie = m.get('cookie')
        if m.get('is_health_monitor') is not None:
            self.is_health_monitor = m.get('is_health_monitor')
        if m.get('health_monitor') is not None:
            temp_model = ListenerHealthMonitor()
            self.health_monitor = temp_model.from_map(m['health_monitor'])
        if m.get('sticky_session') is not None:
            self.sticky_session = m.get('sticky_session')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class Region(TeaModel):
    def __init__(
        self,
        description: str = None,
        identity: str = None,
        instancestatus: str = None,
        name: str = None,
        properties: List[Property] = None,
    ):
        # description
        self.description = description
        # identity
        self.identity = identity
        # instanceStatus: AVAILABLE  UNAVAILABLE  RETIRED  DELETED
        self.instancestatus = instancestatus
        # name
        self.name = name
        # properties
        self.properties = properties

    def validate(self):
        self.validate_required(self.identity, 'identity')
        self.validate_required(self.instancestatus, 'instancestatus')
        self.validate_required(self.name, 'name')
        if self.properties:
            for k in self.properties:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.description is not None:
            result['description'] = self.description
        if self.identity is not None:
            result['identity'] = self.identity
        if self.instancestatus is not None:
            result['instancestatus'] = self.instancestatus
        if self.name is not None:
            result['name'] = self.name
        result['properties'] = []
        if self.properties is not None:
            for k in self.properties:
                result['properties'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('identity') is not None:
            self.identity = m.get('identity')
        if m.get('instancestatus') is not None:
            self.instancestatus = m.get('instancestatus')
        if m.get('name') is not None:
            self.name = m.get('name')
        self.properties = []
        if m.get('properties') is not None:
            for k in m.get('properties'):
                temp_model = Property()
                self.properties.append(temp_model.from_map(k))
        return self


class ComputerTypeFamily(TeaModel):
    def __init__(
        self,
        id: str = None,
        generation: str = None,
    ):
        # computer type family id
        self.id = id
        # 实例规格族所属代数。
        self.generation = generation

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.generation, 'generation')

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.generation is not None:
            result['generation'] = self.generation
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('generation') is not None:
            self.generation = m.get('generation')
        return self


class WorkspaceDnsProvider(TeaModel):
    def __init__(
        self,
        id: str = None,
        workspace_id: str = None,
        provider_id: str = None,
        region_id: str = None,
        zone_id: str = None,
        dns_provider_id: str = None,
        dns_network_type: str = None,
        sub_domain_name: str = None,
        utc_create: str = None,
        utc_modified: str = None,
        description: str = None,
    ):
        # id
        self.id = id
        # workspace_id
        self.workspace_id = workspace_id
        # provider_id
        self.provider_id = provider_id
        # region_id
        self.region_id = region_id
        # zoneId
        self.zone_id = zone_id
        # dns_provider_id
        self.dns_provider_id = dns_provider_id
        # dns_network_type
        self.dns_network_type = dns_network_type
        # sub_domain_name
        self.sub_domain_name = sub_domain_name
        # utc_create
        self.utc_create = utc_create
        # utc_modified
        self.utc_modified = utc_modified
        # description
        self.description = description

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.provider_id, 'provider_id')
        self.validate_required(self.region_id, 'region_id')
        self.validate_required(self.zone_id, 'zone_id')
        self.validate_required(self.dns_provider_id, 'dns_provider_id')
        self.validate_required(self.dns_network_type, 'dns_network_type')
        self.validate_required(self.sub_domain_name, 'sub_domain_name')
        self.validate_required(self.utc_create, 'utc_create')
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.utc_modified, 'utc_modified')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.description, 'description')

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.provider_id is not None:
            result['provider_id'] = self.provider_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.zone_id is not None:
            result['zone_id'] = self.zone_id
        if self.dns_provider_id is not None:
            result['dns_provider_id'] = self.dns_provider_id
        if self.dns_network_type is not None:
            result['dns_network_type'] = self.dns_network_type
        if self.sub_domain_name is not None:
            result['sub_domain_name'] = self.sub_domain_name
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        if self.description is not None:
            result['description'] = self.description
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('provider_id') is not None:
            self.provider_id = m.get('provider_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('zone_id') is not None:
            self.zone_id = m.get('zone_id')
        if m.get('dns_provider_id') is not None:
            self.dns_provider_id = m.get('dns_provider_id')
        if m.get('dns_network_type') is not None:
            self.dns_network_type = m.get('dns_network_type')
        if m.get('sub_domain_name') is not None:
            self.sub_domain_name = m.get('sub_domain_name')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        if m.get('description') is not None:
            self.description = m.get('description')
        return self


class AppPortraitAppHealthScoreQuery(TeaModel):
    def __init__(
        self,
        app_id: str = None,
        app_name: str = None,
        health_score: int = None,
        y_2y: int = None,
        reason_list: List[str] = None,
    ):
        # 应用id
        self.app_id = app_id
        # app_name
        self.app_name = app_name
        # health_score
        self.health_score = health_score
        # 同比上升下降分数
        self.y_2y = y_2y
        # 上升下降原因列表
        self.reason_list = reason_list

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.app_name is not None:
            result['app_name'] = self.app_name
        if self.health_score is not None:
            result['health_score'] = self.health_score
        if self.y_2y is not None:
            result['y2y'] = self.y_2y
        if self.reason_list is not None:
            result['reason_list'] = self.reason_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('app_name') is not None:
            self.app_name = m.get('app_name')
        if m.get('health_score') is not None:
            self.health_score = m.get('health_score')
        if m.get('y2y') is not None:
            self.y_2y = m.get('y2y')
        if m.get('reason_list') is not None:
            self.reason_list = m.get('reason_list')
        return self


class VpcVO(TeaModel):
    def __init__(
        self,
        status: str = None,
        cidr_block: str = None,
        v_router_iaas_id: str = None,
        workspace_id: str = None,
        name: str = None,
        description: str = None,
        instance_charge_type: str = None,
        iaas_id: str = None,
        provider_id: str = None,
        iaas_type: str = None,
        region_id: str = None,
        zone_id: str = None,
        id: str = None,
        utc_create: str = None,
        utc_modified: str = None,
    ):
        # VPC的状态，取值： Pending：配置中。 Available：可用。
        self.status = status
        # VPC的IPv4网段
        self.cidr_block = cidr_block
        # VPC路由器的ID
        self.v_router_iaas_id = v_router_iaas_id
        # workspace id
        self.workspace_id = workspace_id
        # vpc name
        self.name = name
        # 描述信息
        self.description = description
        # 计费类型
        self.instance_charge_type = instance_charge_type
        # vpc iaas id
        self.iaas_id = iaas_id
        # provider id
        self.provider_id = provider_id
        # iaas 底座类型
        self.iaas_type = iaas_type
        # region id
        self.region_id = region_id
        # zone id
        self.zone_id = zone_id
        # vpc id
        self.id = id
        # 创建时间
        self.utc_create = utc_create
        # 最近一次修改时间
        self.utc_modified = utc_modified

    def validate(self):
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.status is not None:
            result['status'] = self.status
        if self.cidr_block is not None:
            result['cidr_block'] = self.cidr_block
        if self.v_router_iaas_id is not None:
            result['v_router_iaas_id'] = self.v_router_iaas_id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.name is not None:
            result['name'] = self.name
        if self.description is not None:
            result['description'] = self.description
        if self.instance_charge_type is not None:
            result['instance_charge_type'] = self.instance_charge_type
        if self.iaas_id is not None:
            result['iaas_id'] = self.iaas_id
        if self.provider_id is not None:
            result['provider_id'] = self.provider_id
        if self.iaas_type is not None:
            result['iaas_type'] = self.iaas_type
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.zone_id is not None:
            result['zone_id'] = self.zone_id
        if self.id is not None:
            result['id'] = self.id
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('cidr_block') is not None:
            self.cidr_block = m.get('cidr_block')
        if m.get('v_router_iaas_id') is not None:
            self.v_router_iaas_id = m.get('v_router_iaas_id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('instance_charge_type') is not None:
            self.instance_charge_type = m.get('instance_charge_type')
        if m.get('iaas_id') is not None:
            self.iaas_id = m.get('iaas_id')
        if m.get('provider_id') is not None:
            self.provider_id = m.get('provider_id')
        if m.get('iaas_type') is not None:
            self.iaas_type = m.get('iaas_type')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('zone_id') is not None:
            self.zone_id = m.get('zone_id')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        return self


class VComputer(TeaModel):
    def __init__(
        self,
        v_computer_group: VComputerGroup = None,
        ip: str = None,
        computer: Computer = None,
        port: int = None,
        weight: int = None,
        is_eip: bool = None,
        is_managed_computer: bool = None,
        iaas_id: str = None,
    ):
        # v_computer_group
        self.v_computer_group = v_computer_group
        # ip
        self.ip = ip
        # computer
        self.computer = computer
        # port
        self.port = port
        # weight
        self.weight = weight
        # 是否是EIP
        self.is_eip = is_eip
        # is_managed_computer
        self.is_managed_computer = is_managed_computer
        # iaas_id
        self.iaas_id = iaas_id

    def validate(self):
        if self.v_computer_group:
            self.v_computer_group.validate()
        if self.computer:
            self.computer.validate()

    def to_map(self):
        result = dict()
        if self.v_computer_group is not None:
            result['v_computer_group'] = self.v_computer_group.to_map()
        if self.ip is not None:
            result['ip'] = self.ip
        if self.computer is not None:
            result['computer'] = self.computer.to_map()
        if self.port is not None:
            result['port'] = self.port
        if self.weight is not None:
            result['weight'] = self.weight
        if self.is_eip is not None:
            result['is_eip'] = self.is_eip
        if self.is_managed_computer is not None:
            result['is_managed_computer'] = self.is_managed_computer
        if self.iaas_id is not None:
            result['iaas_id'] = self.iaas_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('v_computer_group') is not None:
            temp_model = VComputerGroup()
            self.v_computer_group = temp_model.from_map(m['v_computer_group'])
        if m.get('ip') is not None:
            self.ip = m.get('ip')
        if m.get('computer') is not None:
            temp_model = Computer()
            self.computer = temp_model.from_map(m['computer'])
        if m.get('port') is not None:
            self.port = m.get('port')
        if m.get('weight') is not None:
            self.weight = m.get('weight')
        if m.get('is_eip') is not None:
            self.is_eip = m.get('is_eip')
        if m.get('is_managed_computer') is not None:
            self.is_managed_computer = m.get('is_managed_computer')
        if m.get('iaas_id') is not None:
            self.iaas_id = m.get('iaas_id')
        return self


class RouteTable(TeaModel):
    def __init__(
        self,
        creation_time: str = None,
        router_type: str = None,
        entry_vos: List[VRouteEntry] = None,
        route_table_id: str = None,
        v_router_id: str = None,
    ):
        # 路由表的创建时间。
        self.creation_time = creation_time
        # 路由表所属的路由器类型，取值：
        # 
        # VRouter：VPC路由器。
        # VBR：边界路由器。
        self.router_type = router_type
        # 
        # 路由条目的详细信息。
        self.entry_vos = entry_vos
        # 要查询的路由表的ID。
        self.route_table_id = route_table_id
        # 要查询的路由表所属的VPC路由器的ID。
        self.v_router_id = v_router_id

    def validate(self):
        if self.creation_time is not None:
            self.validate_pattern(self.creation_time, 'creation_time', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.entry_vos:
            for k in self.entry_vos:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.creation_time is not None:
            result['creation_time'] = self.creation_time
        if self.router_type is not None:
            result['router_type'] = self.router_type
        result['entry_v_os'] = []
        if self.entry_vos is not None:
            for k in self.entry_vos:
                result['entry_v_os'].append(k.to_map() if k else None)
        if self.route_table_id is not None:
            result['route_table_id'] = self.route_table_id
        if self.v_router_id is not None:
            result['v_router_id'] = self.v_router_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('creation_time') is not None:
            self.creation_time = m.get('creation_time')
        if m.get('router_type') is not None:
            self.router_type = m.get('router_type')
        self.entry_vos = []
        if m.get('entry_v_os') is not None:
            for k in m.get('entry_v_os'):
                temp_model = VRouteEntry()
                self.entry_vos.append(temp_model.from_map(k))
        if m.get('route_table_id') is not None:
            self.route_table_id = m.get('route_table_id')
        if m.get('v_router_id') is not None:
            self.v_router_id = m.get('v_router_id')
        return self


class SLSConfig(TeaModel):
    def __init__(
        self,
        name: str = None,
        input_type: str = None,
        output_type: str = None,
        log_sample: str = None,
        input_detail: SLSConfigInputDetail = None,
        output_detail: SLSConfigOutputDetail = None,
    ):
        # Logtail配置名称，同一Project下配置名必须唯一。
        # 只能包括小写字母、数字、连字符（-）和下划线（_）。
        # 必须以小写字母或者数字开头和结尾。
        # 长度必须为2~128字节。
        self.name = name
        # 配置类型，支持plugin、file。
        self.input_type = input_type
        # 输出类型，目前只支持LogService。
        self.output_type = output_type
        # 日志样例
        self.log_sample = log_sample
        # 输入类型配置
        self.input_detail = input_detail
        # 输出类型配置
        self.output_detail = output_detail

    def validate(self):
        self.validate_required(self.name, 'name')
        self.validate_required(self.input_type, 'input_type')
        self.validate_required(self.input_detail, 'input_detail')
        if self.input_detail:
            self.input_detail.validate()
        self.validate_required(self.output_detail, 'output_detail')
        if self.output_detail:
            self.output_detail.validate()

    def to_map(self):
        result = dict()
        if self.name is not None:
            result['name'] = self.name
        if self.input_type is not None:
            result['input_type'] = self.input_type
        if self.output_type is not None:
            result['output_type'] = self.output_type
        if self.log_sample is not None:
            result['log_sample'] = self.log_sample
        if self.input_detail is not None:
            result['input_detail'] = self.input_detail.to_map()
        if self.output_detail is not None:
            result['output_detail'] = self.output_detail.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('input_type') is not None:
            self.input_type = m.get('input_type')
        if m.get('output_type') is not None:
            self.output_type = m.get('output_type')
        if m.get('log_sample') is not None:
            self.log_sample = m.get('log_sample')
        if m.get('input_detail') is not None:
            temp_model = SLSConfigInputDetail()
            self.input_detail = temp_model.from_map(m['input_detail'])
        if m.get('output_detail') is not None:
            temp_model = SLSConfigOutputDetail()
            self.output_detail = temp_model.from_map(m['output_detail'])
        return self


class SecurityGroup(TeaModel):
    def __init__(
        self,
        creation_time: str = None,
        description: str = None,
        region_id: str = None,
        security_group_id: str = None,
        security_group_name: str = None,
        vpc_id: str = None,
        ingress_rules: List[SecurityGroupRule] = None,
        egress_rules: List[SecurityGroupRule] = None,
    ):
        # 创建时间。按照ISO8601标准表示，并需要使用UTC时间。格式为：yyyy-MM-ddThh:mmZ。
        self.creation_time = creation_time
        # 安全组的描述信息。
        self.description = description
        # region_id
        self.region_id = region_id
        # 安全组ID。
        self.security_group_id = security_group_id
        # 安全组名称。
        self.security_group_name = security_group_name
        # 安全组所属的专有网络。
        self.vpc_id = vpc_id
        # 安全组入方向规则
        self.ingress_rules = ingress_rules
        # 安全组出方向规则
        self.egress_rules = egress_rules

    def validate(self):
        self.validate_required(self.creation_time, 'creation_time')
        self.validate_required(self.region_id, 'region_id')
        self.validate_required(self.security_group_id, 'security_group_id')
        self.validate_required(self.security_group_name, 'security_group_name')
        self.validate_required(self.vpc_id, 'vpc_id')
        if self.ingress_rules:
            for k in self.ingress_rules:
                if k:
                    k.validate()
        if self.egress_rules:
            for k in self.egress_rules:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.creation_time is not None:
            result['creation_time'] = self.creation_time
        if self.description is not None:
            result['description'] = self.description
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.security_group_id is not None:
            result['security_group_id'] = self.security_group_id
        if self.security_group_name is not None:
            result['security_group_name'] = self.security_group_name
        if self.vpc_id is not None:
            result['vpc_id'] = self.vpc_id
        result['ingress_rules'] = []
        if self.ingress_rules is not None:
            for k in self.ingress_rules:
                result['ingress_rules'].append(k.to_map() if k else None)
        result['egress_rules'] = []
        if self.egress_rules is not None:
            for k in self.egress_rules:
                result['egress_rules'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('creation_time') is not None:
            self.creation_time = m.get('creation_time')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('security_group_id') is not None:
            self.security_group_id = m.get('security_group_id')
        if m.get('security_group_name') is not None:
            self.security_group_name = m.get('security_group_name')
        if m.get('vpc_id') is not None:
            self.vpc_id = m.get('vpc_id')
        self.ingress_rules = []
        if m.get('ingress_rules') is not None:
            for k in m.get('ingress_rules'):
                temp_model = SecurityGroupRule()
                self.ingress_rules.append(temp_model.from_map(k))
        self.egress_rules = []
        if m.get('egress_rules') is not None:
            for k in m.get('egress_rules'):
                temp_model = SecurityGroupRule()
                self.egress_rules.append(temp_model.from_map(k))
        return self


class MapStringToIntegerEntity(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: int = None,
    ):
        # key
        self.key = key
        # value
        self.value = value

    def validate(self):
        self.validate_required(self.key, 'key')
        self.validate_required(self.value, 'value')

    def to_map(self):
        result = dict()
        if self.key is not None:
            result['key'] = self.key
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('key') is not None:
            self.key = m.get('key')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class AppDomainFlatten(TeaModel):
    def __init__(
        self,
        app_domains: List[AppDomain] = None,
    ):
        # 一组具有依赖关系的 AppDomain
        self.app_domains = app_domains

    def validate(self):
        if self.app_domains:
            for k in self.app_domains:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['app_domains'] = []
        if self.app_domains is not None:
            for k in self.app_domains:
                result['app_domains'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.app_domains = []
        if m.get('app_domains') is not None:
            for k in m.get('app_domains'):
                temp_model = AppDomain()
                self.app_domains.append(temp_model.from_map(k))
        return self


class RequestVO(TeaModel):
    def __init__(
        self,
        context: str = None,
        id: str = None,
        operator: str = None,
        operator_name: str = None,
        operator_type: str = None,
        status: str = None,
        token: str = None,
        type: str = None,
        utc_create: str = None,
        utc_modified: str = None,
        tasks: List[Task] = None,
    ):
        # context
        self.context = context
        # id
        self.id = id
        # operator
        self.operator = operator
        # operator_name
        self.operator_name = operator_name
        # operator_type
        self.operator_type = operator_type
        # status
        self.status = status
        # token
        self.token = token
        # type
        self.type = type
        # utc_create
        self.utc_create = utc_create
        # utc_modified
        self.utc_modified = utc_modified
        # tasks
        self.tasks = tasks

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.operator_name, 'operator_name')
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.tasks:
            for k in self.tasks:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.context is not None:
            result['context'] = self.context
        if self.id is not None:
            result['id'] = self.id
        if self.operator is not None:
            result['operator'] = self.operator
        if self.operator_name is not None:
            result['operator_name'] = self.operator_name
        if self.operator_type is not None:
            result['operator_type'] = self.operator_type
        if self.status is not None:
            result['status'] = self.status
        if self.token is not None:
            result['token'] = self.token
        if self.type is not None:
            result['type'] = self.type
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        result['tasks'] = []
        if self.tasks is not None:
            for k in self.tasks:
                result['tasks'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('context') is not None:
            self.context = m.get('context')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('operator') is not None:
            self.operator = m.get('operator')
        if m.get('operator_name') is not None:
            self.operator_name = m.get('operator_name')
        if m.get('operator_type') is not None:
            self.operator_type = m.get('operator_type')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('token') is not None:
            self.token = m.get('token')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        self.tasks = []
        if m.get('tasks') is not None:
            for k in m.get('tasks'):
                temp_model = Task()
                self.tasks.append(temp_model.from_map(k))
        return self


class VSwitchParam(TeaModel):
    def __init__(
        self,
        cidr_block: str = None,
        description: str = None,
        region_id: str = None,
        vpc_id: str = None,
        vswitch_name: str = None,
        zone_id: str = None,
    ):
        # cidr_block
        self.cidr_block = cidr_block
        # description
        self.description = description
        # region_id
        self.region_id = region_id
        # vpc_id
        self.vpc_id = vpc_id
        # vswitch_name
        self.vswitch_name = vswitch_name
        # zone_id
        self.zone_id = zone_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.cidr_block is not None:
            result['cidr_block'] = self.cidr_block
        if self.description is not None:
            result['description'] = self.description
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.vpc_id is not None:
            result['vpc_id'] = self.vpc_id
        if self.vswitch_name is not None:
            result['vswitch_name'] = self.vswitch_name
        if self.zone_id is not None:
            result['zone_id'] = self.zone_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cidr_block') is not None:
            self.cidr_block = m.get('cidr_block')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('vpc_id') is not None:
            self.vpc_id = m.get('vpc_id')
        if m.get('vswitch_name') is not None:
            self.vswitch_name = m.get('vswitch_name')
        if m.get('zone_id') is not None:
            self.zone_id = m.get('zone_id')
        return self


class VSwitchVO(TeaModel):
    def __init__(
        self,
        iaas_id: str = None,
        name: str = None,
        description: str = None,
        status: str = None,
        vpc_id: str = None,
        workspace_id: str = None,
        zone_id: str = None,
        zone_iaas_id: str = None,
        region_id: str = None,
        cidr_block: str = None,
        utc_create: str = None,
        available_ip_address_count: int = None,
    ):
        # 交换机的iaas ID
        self.iaas_id = iaas_id
        # 交换机名称
        self.name = name
        # 交换机描述信息
        self.description = description
        # 交换机的状态，取值： Pending：配置中。 Available：可用。
        self.status = status
        # vpc id
        self.vpc_id = vpc_id
        # workspace id
        self.workspace_id = workspace_id
        # zone id
        self.zone_id = zone_id
        # zone iaas id
        self.zone_iaas_id = zone_iaas_id
        # region id
        self.region_id = region_id
        # 换机的IPv4网段
        self.cidr_block = cidr_block
        # 交换机创建时间
        self.utc_create = utc_create
        # 可用ip数目
        self.available_ip_address_count = available_ip_address_count

    def validate(self):
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.iaas_id is not None:
            result['iaas_id'] = self.iaas_id
        if self.name is not None:
            result['name'] = self.name
        if self.description is not None:
            result['description'] = self.description
        if self.status is not None:
            result['status'] = self.status
        if self.vpc_id is not None:
            result['vpc_id'] = self.vpc_id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.zone_id is not None:
            result['zone_id'] = self.zone_id
        if self.zone_iaas_id is not None:
            result['zone_iaas_id'] = self.zone_iaas_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.cidr_block is not None:
            result['cidr_block'] = self.cidr_block
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.available_ip_address_count is not None:
            result['available_ip_address_count'] = self.available_ip_address_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('iaas_id') is not None:
            self.iaas_id = m.get('iaas_id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('vpc_id') is not None:
            self.vpc_id = m.get('vpc_id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('zone_id') is not None:
            self.zone_id = m.get('zone_id')
        if m.get('zone_iaas_id') is not None:
            self.zone_iaas_id = m.get('zone_iaas_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('cidr_block') is not None:
            self.cidr_block = m.get('cidr_block')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('available_ip_address_count') is not None:
            self.available_ip_address_count = m.get('available_ip_address_count')
        return self


class DiskSpec(TeaModel):
    def __init__(
        self,
        id: str = None,
        name: str = None,
        description: str = None,
        iaas_id: str = None,
        provider_id: str = None,
        iaas_type: str = None,
        enable: bool = None,
        min_size: int = None,
        max_size: int = None,
    ):
        # id
        self.id = id
        # name
        self.name = name
        # description
        self.description = description
        # iaas id
        self.iaas_id = iaas_id
        # providerId
        self.provider_id = provider_id
        # iaasType
        self.iaas_type = iaas_type
        # enable
        self.enable = enable
        # minSize
        self.min_size = min_size
        # maxSize
        self.max_size = max_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.description is not None:
            result['description'] = self.description
        if self.iaas_id is not None:
            result['iaas_id'] = self.iaas_id
        if self.provider_id is not None:
            result['provider_id'] = self.provider_id
        if self.iaas_type is not None:
            result['iaas_type'] = self.iaas_type
        if self.enable is not None:
            result['enable'] = self.enable
        if self.min_size is not None:
            result['min_size'] = self.min_size
        if self.max_size is not None:
            result['max_size'] = self.max_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('iaas_id') is not None:
            self.iaas_id = m.get('iaas_id')
        if m.get('provider_id') is not None:
            self.provider_id = m.get('provider_id')
        if m.get('iaas_type') is not None:
            self.iaas_type = m.get('iaas_type')
        if m.get('enable') is not None:
            self.enable = m.get('enable')
        if m.get('min_size') is not None:
            self.min_size = m.get('min_size')
        if m.get('max_size') is not None:
            self.max_size = m.get('max_size')
        return self


class MountComputer(TeaModel):
    def __init__(
        self,
        computer: Computer = None,
        domain: str = None,
        loadbalancer: LoadBalancer = None,
        status: str = None,
        weight: int = None,
    ):
        # computer
        self.computer = computer
        # domain
        self.domain = domain
        # loadbalancer
        self.loadbalancer = loadbalancer
        # status
        self.status = status
        # weight
        self.weight = weight

    def validate(self):
        if self.computer:
            self.computer.validate()
        if self.loadbalancer:
            self.loadbalancer.validate()
        self.validate_required(self.weight, 'weight')

    def to_map(self):
        result = dict()
        if self.computer is not None:
            result['computer'] = self.computer.to_map()
        if self.domain is not None:
            result['domain'] = self.domain
        if self.loadbalancer is not None:
            result['loadbalancer'] = self.loadbalancer.to_map()
        if self.status is not None:
            result['status'] = self.status
        if self.weight is not None:
            result['weight'] = self.weight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('computer') is not None:
            temp_model = Computer()
            self.computer = temp_model.from_map(m['computer'])
        if m.get('domain') is not None:
            self.domain = m.get('domain')
        if m.get('loadbalancer') is not None:
            temp_model = LoadBalancer()
            self.loadbalancer = temp_model.from_map(m['loadbalancer'])
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('weight') is not None:
            self.weight = m.get('weight')
        return self


class VpcImport(TeaModel):
    def __init__(
        self,
        cidr_block: str = None,
        description: str = None,
        iaas_id: str = None,
        import_info: ImportInfo = None,
        name: str = None,
        status: str = None,
    ):
        # cidr block
        self.cidr_block = cidr_block
        # vpc描述信息
        self.description = description
        # vpc iaas id
        self.iaas_id = iaas_id
        # import workspace info
        self.import_info = import_info
        # vpc name
        self.name = name
        # vpc status
        self.status = status

    def validate(self):
        self.validate_required(self.iaas_id, 'iaas_id')
        self.validate_required(self.import_info, 'import_info')
        if self.import_info:
            self.import_info.validate()
        self.validate_required(self.name, 'name')
        self.validate_required(self.status, 'status')

    def to_map(self):
        result = dict()
        if self.cidr_block is not None:
            result['cidr_block'] = self.cidr_block
        if self.description is not None:
            result['description'] = self.description
        if self.iaas_id is not None:
            result['iaas_id'] = self.iaas_id
        if self.import_info is not None:
            result['import_info'] = self.import_info.to_map()
        if self.name is not None:
            result['name'] = self.name
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cidr_block') is not None:
            self.cidr_block = m.get('cidr_block')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('iaas_id') is not None:
            self.iaas_id = m.get('iaas_id')
        if m.get('import_info') is not None:
            temp_model = ImportInfo()
            self.import_info = temp_model.from_map(m['import_info'])
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class Buildpack(TeaModel):
    def __init__(
        self,
        id: str = None,
        name: str = None,
        des: str = None,
        version: str = None,
        stack: str = None,
        deploy_script_id: str = None,
        build_script_id: str = None,
        config_id: str = None,
        component_id: str = None,
        command_id: str = None,
        bg_enable: bool = None,
        creator: str = None,
        tenant_id: str = None,
        customer_ids: List[str] = None,
        type: str = None,
        status: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        result_msg: str = None,
        version_status: str = None,
        instances: BuildpackInstances = None,
    ):
        # 技术栈标识ID
        self.id = id
        # 技术栈名称
        self.name = name
        # 技术栈描述
        self.des = des
        # 技术栈版本
        self.version = version
        # 技术栈类别
        self.stack = stack
        # 部署脚本id
        self.deploy_script_id = deploy_script_id
        # 构建脚本ID
        self.build_script_id = build_script_id
        # 配置id
        self.config_id = config_id
        # 组件id
        self.component_id = component_id
        # 命令id
        self.command_id = command_id
        # 启用蓝绿
        self.bg_enable = bg_enable
        # 创建人
        self.creator = creator
        # 租户ID
        self.tenant_id = tenant_id
        # 客户id列表
        self.customer_ids = customer_ids
        # 技术栈定义类型
        # 系统模板 TEMPLATE
        # 用户自定义 CUSTOM
        # 后台服务 BACKGROUND_SERVICE
        self.type = type
        # 技术栈状态
        # 草稿 DRAFT
        # 已提交 COMMITED
        # 已对外发布 PUBLISHED
        # 已退役 RETIRED
        self.status = status
        # 创建日期
        self.gmt_create = gmt_create
        # 最近修改时间
        self.gmt_modified = gmt_modified
        # 技术栈信息汇总
        self.result_msg = result_msg
        # 可用 USABLE
        # 不可用 UNUSABLE
        self.version_status = version_status
        # 运行时属性
        self.instances = instances

    def validate(self):
        if self.gmt_create is not None:
            self.validate_pattern(self.gmt_create, 'gmt_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.gmt_modified is not None:
            self.validate_pattern(self.gmt_modified, 'gmt_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.instances:
            self.instances.validate()

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.des is not None:
            result['des'] = self.des
        if self.version is not None:
            result['version'] = self.version
        if self.stack is not None:
            result['stack'] = self.stack
        if self.deploy_script_id is not None:
            result['deploy_script_id'] = self.deploy_script_id
        if self.build_script_id is not None:
            result['build_script_id'] = self.build_script_id
        if self.config_id is not None:
            result['config_id'] = self.config_id
        if self.component_id is not None:
            result['component_id'] = self.component_id
        if self.command_id is not None:
            result['command_id'] = self.command_id
        if self.bg_enable is not None:
            result['bg_enable'] = self.bg_enable
        if self.creator is not None:
            result['creator'] = self.creator
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.customer_ids is not None:
            result['customer_ids'] = self.customer_ids
        if self.type is not None:
            result['type'] = self.type
        if self.status is not None:
            result['status'] = self.status
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.version_status is not None:
            result['version_status'] = self.version_status
        if self.instances is not None:
            result['instances'] = self.instances.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('des') is not None:
            self.des = m.get('des')
        if m.get('version') is not None:
            self.version = m.get('version')
        if m.get('stack') is not None:
            self.stack = m.get('stack')
        if m.get('deploy_script_id') is not None:
            self.deploy_script_id = m.get('deploy_script_id')
        if m.get('build_script_id') is not None:
            self.build_script_id = m.get('build_script_id')
        if m.get('config_id') is not None:
            self.config_id = m.get('config_id')
        if m.get('component_id') is not None:
            self.component_id = m.get('component_id')
        if m.get('command_id') is not None:
            self.command_id = m.get('command_id')
        if m.get('bg_enable') is not None:
            self.bg_enable = m.get('bg_enable')
        if m.get('creator') is not None:
            self.creator = m.get('creator')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('customer_ids') is not None:
            self.customer_ids = m.get('customer_ids')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('version_status') is not None:
            self.version_status = m.get('version_status')
        if m.get('instances') is not None:
            temp_model = BuildpackInstances()
            self.instances = temp_model.from_map(m['instances'])
        return self


class AppDomainQuery(TeaModel):
    def __init__(
        self,
        creator_id: str = None,
        is_one_party_request: bool = None,
        name: str = None,
        parent_id: str = None,
        tenant_id: str = None,
        utc_create: str = None,
        page_size: int = None,
        query_type: str = None,
        orders: List[str] = None,
        current_page: int = None,
    ):
        # creatorId
        self.creator_id = creator_id
        # 是否为一方化请求
        self.is_one_party_request = is_one_party_request
        # name
        self.name = name
        # parentId
        self.parent_id = parent_id
        # tenantId
        self.tenant_id = tenant_id
        # utcCreate
        self.utc_create = utc_create
        # 分页大小
        self.page_size = page_size
        # query_type
        self.query_type = query_type
        # orders
        self.orders = orders
        # 当前页数
        self.current_page = current_page

    def validate(self):
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.creator_id is not None:
            result['creator_id'] = self.creator_id
        if self.is_one_party_request is not None:
            result['is_one_party_request'] = self.is_one_party_request
        if self.name is not None:
            result['name'] = self.name
        if self.parent_id is not None:
            result['parent_id'] = self.parent_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.query_type is not None:
            result['query_type'] = self.query_type
        if self.orders is not None:
            result['orders'] = self.orders
        if self.current_page is not None:
            result['current_page'] = self.current_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('creator_id') is not None:
            self.creator_id = m.get('creator_id')
        if m.get('is_one_party_request') is not None:
            self.is_one_party_request = m.get('is_one_party_request')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('parent_id') is not None:
            self.parent_id = m.get('parent_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('query_type') is not None:
            self.query_type = m.get('query_type')
        if m.get('orders') is not None:
            self.orders = m.get('orders')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        return self


class VSwitch(TeaModel):
    def __init__(
        self,
        cidr_block: str = None,
        creation_time: str = None,
        description: str = None,
        region_id: str = None,
        status: str = None,
        vpc_id: str = None,
        v_switch_id: str = None,
        v_switch_name: str = None,
        zone_id: str = None,
        zone_iaas_id: str = None,
    ):
        # 交换机的IPv4网段
        self.cidr_block = cidr_block
        # 交换机的创建时间
        self.creation_time = creation_time
        # 交换机的描述信息
        self.description = description
        # cn-hangzhou
        self.region_id = region_id
        # 交换机的状态，取值：
        # 
        # Pending：配置中。
        # Available：可用。
        self.status = status
        # 交换机所属VPC的ID
        self.vpc_id = vpc_id
        # 交换机的ID
        self.v_switch_id = v_switch_id
        # 交换机的名称
        self.v_switch_name = v_switch_name
        # 交换机所属的可用区
        self.zone_id = zone_id
        # zone iaas id
        self.zone_iaas_id = zone_iaas_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.cidr_block is not None:
            result['cidr_block'] = self.cidr_block
        if self.creation_time is not None:
            result['creation_time'] = self.creation_time
        if self.description is not None:
            result['description'] = self.description
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.status is not None:
            result['status'] = self.status
        if self.vpc_id is not None:
            result['vpc_id'] = self.vpc_id
        if self.v_switch_id is not None:
            result['v_switch_id'] = self.v_switch_id
        if self.v_switch_name is not None:
            result['v_switch_name'] = self.v_switch_name
        if self.zone_id is not None:
            result['zone_id'] = self.zone_id
        if self.zone_iaas_id is not None:
            result['zone_iaas_id'] = self.zone_iaas_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cidr_block') is not None:
            self.cidr_block = m.get('cidr_block')
        if m.get('creation_time') is not None:
            self.creation_time = m.get('creation_time')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('vpc_id') is not None:
            self.vpc_id = m.get('vpc_id')
        if m.get('v_switch_id') is not None:
            self.v_switch_id = m.get('v_switch_id')
        if m.get('v_switch_name') is not None:
            self.v_switch_name = m.get('v_switch_name')
        if m.get('zone_id') is not None:
            self.zone_id = m.get('zone_id')
        if m.get('zone_iaas_id') is not None:
            self.zone_iaas_id = m.get('zone_iaas_id')
        return self


class WorkspaceDnsRecordset(TeaModel):
    def __init__(
        self,
        id: str = None,
        iaas_id: str = None,
        name: str = None,
        dns_provider_id: str = None,
        dns_network_type: str = None,
        device_network_address_type: str = None,
        resource_type: str = None,
        description: str = None,
        type: str = None,
        status: str = None,
        value: str = None,
        ttl: int = None,
        workspace_id: str = None,
        resource_id: str = None,
        resource_iaas_id: str = None,
        utc_create: str = None,
        utc_modified: str = None,
    ):
        # id
        self.id = id
        # iaasId
        self.iaas_id = iaas_id
        # name
        self.name = name
        # dns_provider_id
        self.dns_provider_id = dns_provider_id
        # dns_network_type
        self.dns_network_type = dns_network_type
        # device_network_address_type
        self.device_network_address_type = device_network_address_type
        # 绑定的资源的类型COMPUTER或LOAD_BALANCER
        self.resource_type = resource_type
        # description
        self.description = description
        # type
        self.type = type
        # status
        self.status = status
        # value
        self.value = value
        # ttl
        self.ttl = ttl
        # workspace_id
        self.workspace_id = workspace_id
        # resource_id
        self.resource_id = resource_id
        # resource_iaas_id
        self.resource_iaas_id = resource_iaas_id
        # utc_create
        self.utc_create = utc_create
        # utc_modified
        self.utc_modified = utc_modified

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.iaas_id, 'iaas_id')
        self.validate_required(self.name, 'name')
        self.validate_required(self.dns_provider_id, 'dns_provider_id')
        self.validate_required(self.resource_type, 'resource_type')
        self.validate_required(self.type, 'type')
        self.validate_required(self.status, 'status')
        self.validate_required(self.value, 'value')
        self.validate_required(self.ttl, 'ttl')
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.utc_create, 'utc_create')
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.iaas_id is not None:
            result['iaas_id'] = self.iaas_id
        if self.name is not None:
            result['name'] = self.name
        if self.dns_provider_id is not None:
            result['dns_provider_id'] = self.dns_provider_id
        if self.dns_network_type is not None:
            result['dns_network_type'] = self.dns_network_type
        if self.device_network_address_type is not None:
            result['device_network_address_type'] = self.device_network_address_type
        if self.resource_type is not None:
            result['resource_type'] = self.resource_type
        if self.description is not None:
            result['description'] = self.description
        if self.type is not None:
            result['type'] = self.type
        if self.status is not None:
            result['status'] = self.status
        if self.value is not None:
            result['value'] = self.value
        if self.ttl is not None:
            result['ttl'] = self.ttl
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.resource_id is not None:
            result['resource_id'] = self.resource_id
        if self.resource_iaas_id is not None:
            result['resource_iaas_id'] = self.resource_iaas_id
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('iaas_id') is not None:
            self.iaas_id = m.get('iaas_id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('dns_provider_id') is not None:
            self.dns_provider_id = m.get('dns_provider_id')
        if m.get('dns_network_type') is not None:
            self.dns_network_type = m.get('dns_network_type')
        if m.get('device_network_address_type') is not None:
            self.device_network_address_type = m.get('device_network_address_type')
        if m.get('resource_type') is not None:
            self.resource_type = m.get('resource_type')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('value') is not None:
            self.value = m.get('value')
        if m.get('ttl') is not None:
            self.ttl = m.get('ttl')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('resource_id') is not None:
            self.resource_id = m.get('resource_id')
        if m.get('resource_iaas_id') is not None:
            self.resource_iaas_id = m.get('resource_iaas_id')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        return self


class UserDTO(TeaModel):
    def __init__(
        self,
        id: str = None,
        utc_create: str = None,
        utc_modified: str = None,
        customer_id: str = None,
        type: str = None,
        real_name: str = None,
        name: str = None,
    ):
        # 用户ID
        self.id = id
        # 创建时间
        self.utc_create = utc_create
        # 最近修改时间
        self.utc_modified = utc_modified
        # 客户ID
        self.customer_id = customer_id
        # 用户类型
        self.type = type
        # 用户显示名称
        self.real_name = real_name
        # 用户名
        self.name = name

    def validate(self):
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        if self.customer_id is not None:
            result['customer_id'] = self.customer_id
        if self.type is not None:
            result['type'] = self.type
        if self.real_name is not None:
            result['real_name'] = self.real_name
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        if m.get('customer_id') is not None:
            self.customer_id = m.get('customer_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('real_name') is not None:
            self.real_name = m.get('real_name')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class DatabaseSpec(TeaModel):
    def __init__(
        self,
        cpu: int = None,
        custom_storage: bool = None,
        engine: str = None,
        engine_version: List[str] = None,
        iaas_id: str = None,
        id: str = None,
        max_connections: int = None,
        max_iops: int = None,
        max_storage: int = None,
        memory: int = None,
        min_storage: int = None,
        name: str = None,
        supported_storages: List[int] = None,
        type: str = None,
    ):
        # cpu
        self.cpu = cpu
        # custom_storage
        self.custom_storage = custom_storage
        # engine
        self.engine = engine
        # engine_version
        self.engine_version = engine_version
        # iaas_id
        self.iaas_id = iaas_id
        # id
        self.id = id
        # max_connections
        self.max_connections = max_connections
        # max_iops
        self.max_iops = max_iops
        # max_storage
        self.max_storage = max_storage
        # memory
        self.memory = memory
        # min_storage
        self.min_storage = min_storage
        # name
        self.name = name
        # supported_storages
        self.supported_storages = supported_storages
        # type
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.cpu is not None:
            result['cpu'] = self.cpu
        if self.custom_storage is not None:
            result['custom_storage'] = self.custom_storage
        if self.engine is not None:
            result['engine'] = self.engine
        if self.engine_version is not None:
            result['engine_version'] = self.engine_version
        if self.iaas_id is not None:
            result['iaas_id'] = self.iaas_id
        if self.id is not None:
            result['id'] = self.id
        if self.max_connections is not None:
            result['max_connections'] = self.max_connections
        if self.max_iops is not None:
            result['max_iops'] = self.max_iops
        if self.max_storage is not None:
            result['max_storage'] = self.max_storage
        if self.memory is not None:
            result['memory'] = self.memory
        if self.min_storage is not None:
            result['min_storage'] = self.min_storage
        if self.name is not None:
            result['name'] = self.name
        if self.supported_storages is not None:
            result['supported_storages'] = self.supported_storages
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cpu') is not None:
            self.cpu = m.get('cpu')
        if m.get('custom_storage') is not None:
            self.custom_storage = m.get('custom_storage')
        if m.get('engine') is not None:
            self.engine = m.get('engine')
        if m.get('engine_version') is not None:
            self.engine_version = m.get('engine_version')
        if m.get('iaas_id') is not None:
            self.iaas_id = m.get('iaas_id')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('max_connections') is not None:
            self.max_connections = m.get('max_connections')
        if m.get('max_iops') is not None:
            self.max_iops = m.get('max_iops')
        if m.get('max_storage') is not None:
            self.max_storage = m.get('max_storage')
        if m.get('memory') is not None:
            self.memory = m.get('memory')
        if m.get('min_storage') is not None:
            self.min_storage = m.get('min_storage')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('supported_storages') is not None:
            self.supported_storages = m.get('supported_storages')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class DatabaseImportVO(TeaModel):
    def __init__(
        self,
        iaas_id: str = None,
        description: str = None,
        type: str = None,
        status: str = None,
        engine: str = None,
        net_type: str = None,
        utc_create: str = None,
        import_info: ImportVO = None,
    ):
        # iaas_id
        self.iaas_id = iaas_id
        # description
        self.description = description
        # type
        self.type = type
        # status
        self.status = status
        # engine
        self.engine = engine
        # net_type
        self.net_type = net_type
        # utc_create
        self.utc_create = utc_create
        # importInfo
        self.import_info = import_info

    def validate(self):
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.import_info, 'import_info')
        if self.import_info:
            self.import_info.validate()

    def to_map(self):
        result = dict()
        if self.iaas_id is not None:
            result['iaas_id'] = self.iaas_id
        if self.description is not None:
            result['description'] = self.description
        if self.type is not None:
            result['type'] = self.type
        if self.status is not None:
            result['status'] = self.status
        if self.engine is not None:
            result['engine'] = self.engine
        if self.net_type is not None:
            result['net_type'] = self.net_type
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.import_info is not None:
            result['import_info'] = self.import_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('iaas_id') is not None:
            self.iaas_id = m.get('iaas_id')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('engine') is not None:
            self.engine = m.get('engine')
        if m.get('net_type') is not None:
            self.net_type = m.get('net_type')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('import_info') is not None:
            temp_model = ImportVO()
            self.import_info = temp_model.from_map(m['import_info'])
        return self


class AppPackageListView(TeaModel):
    def __init__(
        self,
        app_id: str = None,
        app_name: str = None,
        app_owner_id: str = None,
        app_owner_name: str = None,
        app_status: str = None,
        buildpack_id: str = None,
        buildpack_name: str = None,
        buildpack_version: str = None,
        latest_package: AppManifest = None,
        package_count: int = None,
    ):
        # app_id
        self.app_id = app_id
        # app_name
        self.app_name = app_name
        # app_owner_id
        self.app_owner_id = app_owner_id
        # app_owner_name
        self.app_owner_name = app_owner_name
        # app_status
        self.app_status = app_status
        # buildpack_id
        self.buildpack_id = buildpack_id
        # buildpack_name
        self.buildpack_name = buildpack_name
        # buildpack_version
        self.buildpack_version = buildpack_version
        # latest_package
        self.latest_package = latest_package
        # package_count
        self.package_count = package_count

    def validate(self):
        if self.latest_package:
            self.latest_package.validate()

    def to_map(self):
        result = dict()
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.app_name is not None:
            result['app_name'] = self.app_name
        if self.app_owner_id is not None:
            result['app_owner_id'] = self.app_owner_id
        if self.app_owner_name is not None:
            result['app_owner_name'] = self.app_owner_name
        if self.app_status is not None:
            result['app_status'] = self.app_status
        if self.buildpack_id is not None:
            result['buildpack_id'] = self.buildpack_id
        if self.buildpack_name is not None:
            result['buildpack_name'] = self.buildpack_name
        if self.buildpack_version is not None:
            result['buildpack_version'] = self.buildpack_version
        if self.latest_package is not None:
            result['latest_package'] = self.latest_package.to_map()
        if self.package_count is not None:
            result['package_count'] = self.package_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('app_name') is not None:
            self.app_name = m.get('app_name')
        if m.get('app_owner_id') is not None:
            self.app_owner_id = m.get('app_owner_id')
        if m.get('app_owner_name') is not None:
            self.app_owner_name = m.get('app_owner_name')
        if m.get('app_status') is not None:
            self.app_status = m.get('app_status')
        if m.get('buildpack_id') is not None:
            self.buildpack_id = m.get('buildpack_id')
        if m.get('buildpack_name') is not None:
            self.buildpack_name = m.get('buildpack_name')
        if m.get('buildpack_version') is not None:
            self.buildpack_version = m.get('buildpack_version')
        if m.get('latest_package') is not None:
            temp_model = AppManifest()
            self.latest_package = temp_model.from_map(m['latest_package'])
        if m.get('package_count') is not None:
            self.package_count = m.get('package_count')
        return self


class PermissionVO(TeaModel):
    def __init__(
        self,
        authorized_cidr_ip: str = None,
        authorize_type: str = None,
        direction: str = None,
        end_port: int = None,
        ip_protocol: str = None,
        nic_type: str = None,
        policy: str = None,
        priority: int = None,
        security_group_id: str = None,
        start_port: int = None,
        id: str = None,
    ):
        # authorizedCidrIp
        self.authorized_cidr_ip = authorized_cidr_ip
        # authorize_type
        self.authorize_type = authorize_type
        # direction
        self.direction = direction
        # endPort
        self.end_port = end_port
        # ipProtocol
        self.ip_protocol = ip_protocol
        # nicType
        self.nic_type = nic_type
        # policy
        self.policy = policy
        # priority
        self.priority = priority
        # securityGroupId
        self.security_group_id = security_group_id
        # startPort
        self.start_port = start_port
        # id
        self.id = id

    def validate(self):
        self.validate_required(self.id, 'id')

    def to_map(self):
        result = dict()
        if self.authorized_cidr_ip is not None:
            result['authorized_cidr_ip'] = self.authorized_cidr_ip
        if self.authorize_type is not None:
            result['authorize_type'] = self.authorize_type
        if self.direction is not None:
            result['direction'] = self.direction
        if self.end_port is not None:
            result['end_port'] = self.end_port
        if self.ip_protocol is not None:
            result['ip_protocol'] = self.ip_protocol
        if self.nic_type is not None:
            result['nic_type'] = self.nic_type
        if self.policy is not None:
            result['policy'] = self.policy
        if self.priority is not None:
            result['priority'] = self.priority
        if self.security_group_id is not None:
            result['security_group_id'] = self.security_group_id
        if self.start_port is not None:
            result['start_port'] = self.start_port
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('authorized_cidr_ip') is not None:
            self.authorized_cidr_ip = m.get('authorized_cidr_ip')
        if m.get('authorize_type') is not None:
            self.authorize_type = m.get('authorize_type')
        if m.get('direction') is not None:
            self.direction = m.get('direction')
        if m.get('end_port') is not None:
            self.end_port = m.get('end_port')
        if m.get('ip_protocol') is not None:
            self.ip_protocol = m.get('ip_protocol')
        if m.get('nic_type') is not None:
            self.nic_type = m.get('nic_type')
        if m.get('policy') is not None:
            self.policy = m.get('policy')
        if m.get('priority') is not None:
            self.priority = m.get('priority')
        if m.get('security_group_id') is not None:
            self.security_group_id = m.get('security_group_id')
        if m.get('start_port') is not None:
            self.start_port = m.get('start_port')
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class ComputerImportVO(TeaModel):
    def __init__(
        self,
        iaas_id: str = None,
        name: str = None,
        zone_iaas_id: str = None,
        zone_name: str = None,
        description: str = None,
        private_ip: str = None,
        public_ip: str = None,
        elastic_ip: str = None,
        vpc_iaas_id: str = None,
        joined_security_group: List[JoinedSecurityGroupVO] = None,
        utc_create: str = None,
        import_info: ImportVO = None,
    ):
        # computer iaaas id
        self.iaas_id = iaas_id
        # name
        self.name = name
        # zone identity
        self.zone_iaas_id = zone_iaas_id
        # zone name
        self.zone_name = zone_name
        # description
        self.description = description
        # private ip
        self.private_ip = private_ip
        # public ip
        self.public_ip = public_ip
        # elasticIp
        self.elastic_ip = elastic_ip
        # vpcIaasId
        self.vpc_iaas_id = vpc_iaas_id
        # joined security group infos
        self.joined_security_group = joined_security_group
        # creation time
        self.utc_create = utc_create
        # import info
        self.import_info = import_info

    def validate(self):
        if self.joined_security_group:
            for k in self.joined_security_group:
                if k:
                    k.validate()
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.import_info:
            self.import_info.validate()

    def to_map(self):
        result = dict()
        if self.iaas_id is not None:
            result['iaas_id'] = self.iaas_id
        if self.name is not None:
            result['name'] = self.name
        if self.zone_iaas_id is not None:
            result['zone_iaas_id'] = self.zone_iaas_id
        if self.zone_name is not None:
            result['zone_name'] = self.zone_name
        if self.description is not None:
            result['description'] = self.description
        if self.private_ip is not None:
            result['private_ip'] = self.private_ip
        if self.public_ip is not None:
            result['public_ip'] = self.public_ip
        if self.elastic_ip is not None:
            result['elastic_ip'] = self.elastic_ip
        if self.vpc_iaas_id is not None:
            result['vpc_iaas_id'] = self.vpc_iaas_id
        result['joined_security_group'] = []
        if self.joined_security_group is not None:
            for k in self.joined_security_group:
                result['joined_security_group'].append(k.to_map() if k else None)
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.import_info is not None:
            result['import_info'] = self.import_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('iaas_id') is not None:
            self.iaas_id = m.get('iaas_id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('zone_iaas_id') is not None:
            self.zone_iaas_id = m.get('zone_iaas_id')
        if m.get('zone_name') is not None:
            self.zone_name = m.get('zone_name')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('private_ip') is not None:
            self.private_ip = m.get('private_ip')
        if m.get('public_ip') is not None:
            self.public_ip = m.get('public_ip')
        if m.get('elastic_ip') is not None:
            self.elastic_ip = m.get('elastic_ip')
        if m.get('vpc_iaas_id') is not None:
            self.vpc_iaas_id = m.get('vpc_iaas_id')
        self.joined_security_group = []
        if m.get('joined_security_group') is not None:
            for k in m.get('joined_security_group'):
                temp_model = JoinedSecurityGroupVO()
                self.joined_security_group.append(temp_model.from_map(k))
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('import_info') is not None:
            temp_model = ImportVO()
            self.import_info = temp_model.from_map(m['import_info'])
        return self


class UserQuery(TeaModel):
    def __init__(
        self,
        base_query: PaginationQuery = None,
        id: str = None,
        customer_id: str = None,
        tenant_id: str = None,
        type: str = None,
        types: List[str] = None,
        email: str = None,
        mobile: str = None,
        real_name: str = None,
        login_name: str = None,
    ):
        # 基础查询
        self.base_query = base_query
        # id
        self.id = id
        # customerId
        self.customer_id = customer_id
        # tenantId
        self.tenant_id = tenant_id
        # type
        self.type = type
        # types
        self.types = types
        # email
        self.email = email
        # mobile
        self.mobile = mobile
        # realName
        self.real_name = real_name
        # loginName
        self.login_name = login_name

    def validate(self):
        if self.base_query:
            self.base_query.validate()

    def to_map(self):
        result = dict()
        if self.base_query is not None:
            result['base_query'] = self.base_query.to_map()
        if self.id is not None:
            result['id'] = self.id
        if self.customer_id is not None:
            result['customer_id'] = self.customer_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.type is not None:
            result['type'] = self.type
        if self.types is not None:
            result['types'] = self.types
        if self.email is not None:
            result['email'] = self.email
        if self.mobile is not None:
            result['mobile'] = self.mobile
        if self.real_name is not None:
            result['real_name'] = self.real_name
        if self.login_name is not None:
            result['login_name'] = self.login_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('base_query') is not None:
            temp_model = PaginationQuery()
            self.base_query = temp_model.from_map(m['base_query'])
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('customer_id') is not None:
            self.customer_id = m.get('customer_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('types') is not None:
            self.types = m.get('types')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('mobile') is not None:
            self.mobile = m.get('mobile')
        if m.get('real_name') is not None:
            self.real_name = m.get('real_name')
        if m.get('login_name') is not None:
            self.login_name = m.get('login_name')
        return self


class ComputerSpec(TeaModel):
    def __init__(
        self,
        cpu: int = None,
        disk_spec_ids: List[str] = None,
        group: str = None,
        io_optimized: bool = None,
        memory: int = None,
        description: str = None,
        enable: bool = None,
        iaas_id: str = None,
        iaas_type: str = None,
        id: str = None,
        name: str = None,
        provider_id: str = None,
    ):
        # cpu个数
        self.cpu = cpu
        # 可以挂载的磁盘类型
        self.disk_spec_ids = disk_spec_ids
        # 服务器规格名称
        self.group = group
        # 是否有IO优化
        self.io_optimized = io_optimized
        # 内存大小
        self.memory = memory
        # description
        self.description = description
        # enable
        self.enable = enable
        # iaasId
        self.iaas_id = iaas_id
        # COMPUTER_ECS
        self.iaas_type = iaas_type
        # id
        self.id = id
        # name
        self.name = name
        # providerId
        self.provider_id = provider_id

    def validate(self):
        self.validate_required(self.group, 'group')

    def to_map(self):
        result = dict()
        if self.cpu is not None:
            result['cpu'] = self.cpu
        if self.disk_spec_ids is not None:
            result['disk_spec_ids'] = self.disk_spec_ids
        if self.group is not None:
            result['group'] = self.group
        if self.io_optimized is not None:
            result['io_optimized'] = self.io_optimized
        if self.memory is not None:
            result['memory'] = self.memory
        if self.description is not None:
            result['description'] = self.description
        if self.enable is not None:
            result['enable'] = self.enable
        if self.iaas_id is not None:
            result['iaas_id'] = self.iaas_id
        if self.iaas_type is not None:
            result['iaas_type'] = self.iaas_type
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.provider_id is not None:
            result['provider_id'] = self.provider_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cpu') is not None:
            self.cpu = m.get('cpu')
        if m.get('disk_spec_ids') is not None:
            self.disk_spec_ids = m.get('disk_spec_ids')
        if m.get('group') is not None:
            self.group = m.get('group')
        if m.get('io_optimized') is not None:
            self.io_optimized = m.get('io_optimized')
        if m.get('memory') is not None:
            self.memory = m.get('memory')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('enable') is not None:
            self.enable = m.get('enable')
        if m.get('iaas_id') is not None:
            self.iaas_id = m.get('iaas_id')
        if m.get('iaas_type') is not None:
            self.iaas_type = m.get('iaas_type')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('provider_id') is not None:
            self.provider_id = m.get('provider_id')
        return self


class OperationTask(TeaModel):
    def __init__(
        self,
        id: str = None,
        computer_id: str = None,
        computer_ip: str = None,
        command: str = None,
        status: str = None,
        error_code: str = None,
        result_msg: str = None,
    ):
        # id
        self.id = id
        # computer id
        self.computer_id = computer_id
        # computer ip
        self.computer_ip = computer_ip
        # command
        self.command = command
        # 状态取值：INIT，PROCESSING，SUCCEEDED，FAILED，TIMEOUT，NOT_FOUND
        self.status = status
        # errorCode
        self.error_code = error_code
        # resultMsg
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.computer_id is not None:
            result['computer_id'] = self.computer_id
        if self.computer_ip is not None:
            result['computer_ip'] = self.computer_ip
        if self.command is not None:
            result['command'] = self.command
        if self.status is not None:
            result['status'] = self.status
        if self.error_code is not None:
            result['error_code'] = self.error_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('computer_id') is not None:
            self.computer_id = m.get('computer_id')
        if m.get('computer_ip') is not None:
            self.computer_ip = m.get('computer_ip')
        if m.get('command') is not None:
            self.command = m.get('command')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('error_code') is not None:
            self.error_code = m.get('error_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class AppPortraitAppNodeList(TeaModel):
    def __init__(
        self,
        ecs: List[AppPortraitAppNodeEcsList] = None,
        slb: AppPortraitAppNodeEcsList = None,
        rds: AppPortraitAppNodeEcsList = None,
        pod: AppPortraitAppNodeEcsList = None,
    ):
        # 返回ecs节点数据
        self.ecs = ecs
        # 返回slb节点数据
        self.slb = slb
        # 返回rds节点数据
        self.rds = rds
        # 返回pod节点数据
        self.pod = pod

    def validate(self):
        if self.ecs:
            for k in self.ecs:
                if k:
                    k.validate()
        if self.slb:
            self.slb.validate()
        if self.rds:
            self.rds.validate()
        if self.pod:
            self.pod.validate()

    def to_map(self):
        result = dict()
        result['ecs'] = []
        if self.ecs is not None:
            for k in self.ecs:
                result['ecs'].append(k.to_map() if k else None)
        if self.slb is not None:
            result['slb'] = self.slb.to_map()
        if self.rds is not None:
            result['rds'] = self.rds.to_map()
        if self.pod is not None:
            result['pod'] = self.pod.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.ecs = []
        if m.get('ecs') is not None:
            for k in m.get('ecs'):
                temp_model = AppPortraitAppNodeEcsList()
                self.ecs.append(temp_model.from_map(k))
        if m.get('slb') is not None:
            temp_model = AppPortraitAppNodeEcsList()
            self.slb = temp_model.from_map(m['slb'])
        if m.get('rds') is not None:
            temp_model = AppPortraitAppNodeEcsList()
            self.rds = temp_model.from_map(m['rds'])
        if m.get('pod') is not None:
            temp_model = AppPortraitAppNodeEcsList()
            self.pod = temp_model.from_map(m['pod'])
        return self


class SLSProject(TeaModel):
    def __init__(
        self,
        description: str = None,
        name: str = None,
        region: str = None,
    ):
        # 项目描述
        self.description = description
        # 项目名称
        self.name = name
        # 阿里云返回的regionName，仅作展示用
        self.region = region

    def validate(self):
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.description is not None:
            result['description'] = self.description
        if self.name is not None:
            result['name'] = self.name
        if self.region is not None:
            result['region'] = self.region
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('region') is not None:
            self.region = m.get('region')
        return self


class AppPortraitEcsUsageGet(TeaModel):
    def __init__(
        self,
        average_cpu: int = None,
        average_mem: int = None,
        average_disk: int = None,
    ):
        # cpu平均利用率
        self.average_cpu = average_cpu
        # 内存平均利用率
        self.average_mem = average_mem
        # 磁盘平均利用率
        self.average_disk = average_disk

    def validate(self):
        self.validate_required(self.average_cpu, 'average_cpu')
        self.validate_required(self.average_mem, 'average_mem')
        self.validate_required(self.average_disk, 'average_disk')

    def to_map(self):
        result = dict()
        if self.average_cpu is not None:
            result['average_cpu'] = self.average_cpu
        if self.average_mem is not None:
            result['average_mem'] = self.average_mem
        if self.average_disk is not None:
            result['average_disk'] = self.average_disk
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('average_cpu') is not None:
            self.average_cpu = m.get('average_cpu')
        if m.get('average_mem') is not None:
            self.average_mem = m.get('average_mem')
        if m.get('average_disk') is not None:
            self.average_disk = m.get('average_disk')
        return self


class SLSLogStore(TeaModel):
    def __init__(
        self,
        name: str = None,
        shard_count: int = None,
        ttl: int = None,
    ):
        # 日志库名称
        self.name = name
        # Shard个数，单位为个，范围为1~100。
        self.shard_count = shard_count
        # 数据的保存时间，单位为天，范围1~3600。
        self.ttl = ttl

    def validate(self):
        self.validate_required(self.name, 'name')
        self.validate_required(self.shard_count, 'shard_count')
        self.validate_required(self.ttl, 'ttl')

    def to_map(self):
        result = dict()
        if self.name is not None:
            result['name'] = self.name
        if self.shard_count is not None:
            result['shard_count'] = self.shard_count
        if self.ttl is not None:
            result['ttl'] = self.ttl
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('shard_count') is not None:
            self.shard_count = m.get('shard_count')
        if m.get('ttl') is not None:
            self.ttl = m.get('ttl')
        return self


class Connection(TeaModel):
    def __init__(
        self,
        access_key: str = None,
        access_secret: str = None,
        created_time: str = None,
        executor: str = None,
        id: int = None,
        identity: str = None,
        modified_time: str = None,
        name: str = None,
        plug: ConnectionStub = None,
        socket: ConnectionStub = None,
        status: str = None,
        tenant_id: str = None,
    ):
        # access_key
        self.access_key = access_key
        # access_secret
        self.access_secret = access_secret
        # created_time
        self.created_time = created_time
        # executor
        self.executor = executor
        # id
        self.id = id
        # identity
        self.identity = identity
        # 修改时间
        self.modified_time = modified_time
        # name
        self.name = name
        # plug
        self.plug = plug
        # socket
        self.socket = socket
        # status
        self.status = status
        # tenant_id
        self.tenant_id = tenant_id

    def validate(self):
        if self.created_time is not None:
            self.validate_pattern(self.created_time, 'created_time', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.modified_time is not None:
            self.validate_pattern(self.modified_time, 'modified_time', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.plug:
            self.plug.validate()
        if self.socket:
            self.socket.validate()

    def to_map(self):
        result = dict()
        if self.access_key is not None:
            result['access_key'] = self.access_key
        if self.access_secret is not None:
            result['access_secret'] = self.access_secret
        if self.created_time is not None:
            result['created_time'] = self.created_time
        if self.executor is not None:
            result['executor'] = self.executor
        if self.id is not None:
            result['id'] = self.id
        if self.identity is not None:
            result['identity'] = self.identity
        if self.modified_time is not None:
            result['modified_time'] = self.modified_time
        if self.name is not None:
            result['name'] = self.name
        if self.plug is not None:
            result['plug'] = self.plug.to_map()
        if self.socket is not None:
            result['socket'] = self.socket.to_map()
        if self.status is not None:
            result['status'] = self.status
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('access_key') is not None:
            self.access_key = m.get('access_key')
        if m.get('access_secret') is not None:
            self.access_secret = m.get('access_secret')
        if m.get('created_time') is not None:
            self.created_time = m.get('created_time')
        if m.get('executor') is not None:
            self.executor = m.get('executor')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('identity') is not None:
            self.identity = m.get('identity')
        if m.get('modified_time') is not None:
            self.modified_time = m.get('modified_time')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('plug') is not None:
            temp_model = ConnectionStub()
            self.plug = temp_model.from_map(m['plug'])
        if m.get('socket') is not None:
            temp_model = ConnectionStub()
            self.socket = temp_model.from_map(m['socket'])
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        return self


class IaasDnsProvider(TeaModel):
    def __init__(
        self,
        id: str = None,
        service_config_id: str = None,
        name: str = None,
        description: str = None,
        type: str = None,
        status: str = None,
        region_id: str = None,
        zone_id: str = None,
        utc_create: str = None,
        utc_modified: str = None,
        dns_zones: List[DnsZones] = None,
    ):
        # id
        self.id = id
        # service_config_id
        self.service_config_id = service_config_id
        # name
        self.name = name
        # description
        self.description = description
        # type
        self.type = type
        # status
        self.status = status
        # regionId
        self.region_id = region_id
        # zoneId
        self.zone_id = zone_id
        # utc_create
        self.utc_create = utc_create
        # utc_modified
        self.utc_modified = utc_modified
        # dns_zones
        self.dns_zones = dns_zones

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.service_config_id, 'service_config_id')
        self.validate_required(self.name, 'name')
        self.validate_required(self.description, 'description')
        self.validate_required(self.type, 'type')
        self.validate_required(self.status, 'status')
        self.validate_required(self.region_id, 'region_id')
        self.validate_required(self.utc_create, 'utc_create')
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.utc_modified, 'utc_modified')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.dns_zones, 'dns_zones')
        if self.dns_zones:
            for k in self.dns_zones:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.service_config_id is not None:
            result['service_config_id'] = self.service_config_id
        if self.name is not None:
            result['name'] = self.name
        if self.description is not None:
            result['description'] = self.description
        if self.type is not None:
            result['type'] = self.type
        if self.status is not None:
            result['status'] = self.status
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.zone_id is not None:
            result['zone_id'] = self.zone_id
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        result['dns_zones'] = []
        if self.dns_zones is not None:
            for k in self.dns_zones:
                result['dns_zones'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('service_config_id') is not None:
            self.service_config_id = m.get('service_config_id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('zone_id') is not None:
            self.zone_id = m.get('zone_id')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        self.dns_zones = []
        if m.get('dns_zones') is not None:
            for k in m.get('dns_zones'):
                temp_model = DnsZones()
                self.dns_zones.append(temp_model.from_map(k))
        return self


class CommonImage(TeaModel):
    def __init__(
        self,
        description: str = None,
        enable: bool = None,
        iaas_id: str = None,
        iaas_type: str = None,
        id: str = None,
        only_hz_fin_vpc_supported: bool = None,
        name: str = None,
        os: str = None,
        os_bit: int = None,
        os_version: str = None,
        provider_id: str = None,
        region_id: str = None,
        status: str = None,
        system_disk_size: int = None,
    ):
        # description
        self.description = description
        # is enable
        self.enable = enable
        # iaas id
        self.iaas_id = iaas_id
        # iaas type
        self.iaas_type = iaas_type
        # id
        self.id = id
        # 是否仅杭州金区 vpc 可用镜像
        self.only_hz_fin_vpc_supported = only_hz_fin_vpc_supported
        # name
        self.name = name
        # os
        self.os = os
        # os bit取值：32，64
        self.os_bit = os_bit
        # os version
        self.os_version = os_version
        # provider id
        self.provider_id = provider_id
        # region id
        self.region_id = region_id
        # status
        self.status = status
        # system disk size(GB)
        self.system_disk_size = system_disk_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.description is not None:
            result['description'] = self.description
        if self.enable is not None:
            result['enable'] = self.enable
        if self.iaas_id is not None:
            result['iaas_id'] = self.iaas_id
        if self.iaas_type is not None:
            result['iaas_type'] = self.iaas_type
        if self.id is not None:
            result['id'] = self.id
        if self.only_hz_fin_vpc_supported is not None:
            result['only_hz_fin_vpc_supported'] = self.only_hz_fin_vpc_supported
        if self.name is not None:
            result['name'] = self.name
        if self.os is not None:
            result['os'] = self.os
        if self.os_bit is not None:
            result['os_bit'] = self.os_bit
        if self.os_version is not None:
            result['os_version'] = self.os_version
        if self.provider_id is not None:
            result['provider_id'] = self.provider_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.status is not None:
            result['status'] = self.status
        if self.system_disk_size is not None:
            result['system_disk_size'] = self.system_disk_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('enable') is not None:
            self.enable = m.get('enable')
        if m.get('iaas_id') is not None:
            self.iaas_id = m.get('iaas_id')
        if m.get('iaas_type') is not None:
            self.iaas_type = m.get('iaas_type')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('only_hz_fin_vpc_supported') is not None:
            self.only_hz_fin_vpc_supported = m.get('only_hz_fin_vpc_supported')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('os') is not None:
            self.os = m.get('os')
        if m.get('os_bit') is not None:
            self.os_bit = m.get('os_bit')
        if m.get('os_version') is not None:
            self.os_version = m.get('os_version')
        if m.get('provider_id') is not None:
            self.provider_id = m.get('provider_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('system_disk_size') is not None:
            self.system_disk_size = m.get('system_disk_size')
        return self


class SecurityGroupVO(TeaModel):
    def __init__(
        self,
        id: str = None,
        iaas_ids: List[str] = None,
        name: str = None,
        description: str = None,
        status: str = None,
        type: str = None,
        utc_create: str = None,
        instance_count: int = None,
    ):
        # id
        self.id = id
        # iaasIds
        self.iaas_ids = iaas_ids
        # name
        self.name = name
        # description
        self.description = description
        # status
        self.status = status
        # type
        self.type = type
        # utcCreate
        self.utc_create = utc_create
        # instanceCount
        self.instance_count = instance_count

    def validate(self):
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.iaas_ids is not None:
            result['iaas_ids'] = self.iaas_ids
        if self.name is not None:
            result['name'] = self.name
        if self.description is not None:
            result['description'] = self.description
        if self.status is not None:
            result['status'] = self.status
        if self.type is not None:
            result['type'] = self.type
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.instance_count is not None:
            result['instance_count'] = self.instance_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('iaas_ids') is not None:
            self.iaas_ids = m.get('iaas_ids')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('instance_count') is not None:
            self.instance_count = m.get('instance_count')
        return self


class AppPortraitAppList(TeaModel):
    def __init__(
        self,
        id: str = None,
        name: str = None,
        app_group_name: str = None,
        app_group_id: str = None,
        owner_display_name: str = None,
        description: str = None,
        buildpack_name: str = None,
        buildpack_version: str = None,
    ):
        # 应用id
        self.id = id
        # 应用名称
        self.name = name
        # 应用分组名称
        self.app_group_name = app_group_name
        # 应用所属分组id
        self.app_group_id = app_group_id
        # 应用负责人
        self.owner_display_name = owner_display_name
        # 应用描述
        self.description = description
        # 技术栈名称
        self.buildpack_name = buildpack_name
        # 技术栈版本
        self.buildpack_version = buildpack_version

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.app_group_name is not None:
            result['app_group_name'] = self.app_group_name
        if self.app_group_id is not None:
            result['app_group_id'] = self.app_group_id
        if self.owner_display_name is not None:
            result['owner_display_name'] = self.owner_display_name
        if self.description is not None:
            result['description'] = self.description
        if self.buildpack_name is not None:
            result['buildpack_name'] = self.buildpack_name
        if self.buildpack_version is not None:
            result['buildpack_version'] = self.buildpack_version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('app_group_name') is not None:
            self.app_group_name = m.get('app_group_name')
        if m.get('app_group_id') is not None:
            self.app_group_id = m.get('app_group_id')
        if m.get('owner_display_name') is not None:
            self.owner_display_name = m.get('owner_display_name')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('buildpack_name') is not None:
            self.buildpack_name = m.get('buildpack_name')
        if m.get('buildpack_version') is not None:
            self.buildpack_version = m.get('buildpack_version')
        return self


class StarAgentInfo(TeaModel):
    def __init__(
        self,
        sn: str = None,
        hostname: str = None,
        ip: str = None,
        ip_list: str = None,
        status: str = None,
    ):
        # computer serial number
        self.sn = sn
        # hostname
        self.hostname = hostname
        # ip
        self.ip = ip
        # ip list
        self.ip_list = ip_list
        # 状态取值：RUNNING，ERROR，REGISTER，NOFIND
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.sn is not None:
            result['sn'] = self.sn
        if self.hostname is not None:
            result['hostname'] = self.hostname
        if self.ip is not None:
            result['ip'] = self.ip
        if self.ip_list is not None:
            result['ip_list'] = self.ip_list
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('sn') is not None:
            self.sn = m.get('sn')
        if m.get('hostname') is not None:
            self.hostname = m.get('hostname')
        if m.get('ip') is not None:
            self.ip = m.get('ip')
        if m.get('ip_list') is not None:
            self.ip_list = m.get('ip_list')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class AppPortraitAppHealthScoreTrendQuery(TeaModel):
    def __init__(
        self,
        day: str = None,
        health_score: int = None,
    ):
        # 日期
        self.day = day
        # 健康分分值
        self.health_score = health_score

    def validate(self):
        if self.day is not None:
            self.validate_pattern(self.day, 'day', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.day is not None:
            result['day'] = self.day
        if self.health_score is not None:
            result['health_score'] = self.health_score
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('day') is not None:
            self.day = m.get('day')
        if m.get('health_score') is not None:
            self.health_score = m.get('health_score')
        return self


class CellGroup(TeaModel):
    def __init__(
        self,
        identity: str = None,
        name: str = None,
        description: str = None,
        properties: List[Property] = None,
        instancestatus: str = None,
    ):
        # identity
        self.identity = identity
        # name
        self.name = name
        # description
        self.description = description
        # properties
        self.properties = properties
        # instancestatus
        self.instancestatus = instancestatus

    def validate(self):
        self.validate_required(self.identity, 'identity')
        self.validate_required(self.name, 'name')
        if self.properties:
            for k in self.properties:
                if k:
                    k.validate()
        self.validate_required(self.instancestatus, 'instancestatus')

    def to_map(self):
        result = dict()
        if self.identity is not None:
            result['identity'] = self.identity
        if self.name is not None:
            result['name'] = self.name
        if self.description is not None:
            result['description'] = self.description
        result['properties'] = []
        if self.properties is not None:
            for k in self.properties:
                result['properties'].append(k.to_map() if k else None)
        if self.instancestatus is not None:
            result['instancestatus'] = self.instancestatus
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('identity') is not None:
            self.identity = m.get('identity')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('description') is not None:
            self.description = m.get('description')
        self.properties = []
        if m.get('properties') is not None:
            for k in m.get('properties'):
                temp_model = Property()
                self.properties.append(temp_model.from_map(k))
        if m.get('instancestatus') is not None:
            self.instancestatus = m.get('instancestatus')
        return self


class SecurityGroupParam(TeaModel):
    def __init__(
        self,
        description: str = None,
        region_id: str = None,
        security_group_name: str = None,
        vpc_id: str = None,
    ):
        # description
        self.description = description
        # region id
        self.region_id = region_id
        # security_group_name
        self.security_group_name = security_group_name
        # vpc_id
        self.vpc_id = vpc_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.description is not None:
            result['description'] = self.description
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.security_group_name is not None:
            result['security_group_name'] = self.security_group_name
        if self.vpc_id is not None:
            result['vpc_id'] = self.vpc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('security_group_name') is not None:
            self.security_group_name = m.get('security_group_name')
        if m.get('vpc_id') is not None:
            self.vpc_id = m.get('vpc_id')
        return self


class AppLevelView(TeaModel):
    def __init__(
        self,
        base_app_level: AppLevel = None,
        app_count: int = None,
        creator_name: str = None,
    ):
        # 应用等级基类
        self.base_app_level = base_app_level
        # 应用数量
        self.app_count = app_count
        # 创建者名称
        self.creator_name = creator_name

    def validate(self):
        if self.base_app_level:
            self.base_app_level.validate()

    def to_map(self):
        result = dict()
        if self.base_app_level is not None:
            result['base_app_level'] = self.base_app_level.to_map()
        if self.app_count is not None:
            result['app_count'] = self.app_count
        if self.creator_name is not None:
            result['creator_name'] = self.creator_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('base_app_level') is not None:
            temp_model = AppLevel()
            self.base_app_level = temp_model.from_map(m['base_app_level'])
        if m.get('app_count') is not None:
            self.app_count = m.get('app_count')
        if m.get('creator_name') is not None:
            self.creator_name = m.get('creator_name')
        return self


class SLSLogItem(TeaModel):
    def __init__(
        self,
        log_time: int = None,
        source: str = None,
        contents: List[SLSLogContent] = None,
    ):
        # 日志的时间戳（精度为秒，从 1970-1-1 00:00:00 UTC 计算起的秒数）。
        self.log_time = log_time
        # 日志的来源，写入日志时指定。
        self.source = source
        # 日志原始内容
        self.contents = contents

    def validate(self):
        self.validate_required(self.log_time, 'log_time')
        self.validate_required(self.source, 'source')
        self.validate_required(self.contents, 'contents')
        if self.contents:
            for k in self.contents:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.log_time is not None:
            result['log_time'] = self.log_time
        if self.source is not None:
            result['source'] = self.source
        result['contents'] = []
        if self.contents is not None:
            for k in self.contents:
                result['contents'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('log_time') is not None:
            self.log_time = m.get('log_time')
        if m.get('source') is not None:
            self.source = m.get('source')
        self.contents = []
        if m.get('contents') is not None:
            for k in m.get('contents'):
                temp_model = SLSLogContent()
                self.contents.append(temp_model.from_map(k))
        return self


class DynamicQuery(TeaModel):
    def __init__(
        self,
        current_page: int = None,
        filter: str = None,
        page_size: int = None,
        query: str = None,
        sort: str = None,
    ):
        # 分页规则-currentPage
        self.current_page = current_page
        # 字段过滤
        self.filter = filter
        # 分页规则-pageSize
        self.page_size = page_size
        # 具体的查询条件字符串
        self.query = query
        # 查询结果的排序规则
        self.sort = sort

    def validate(self):
        self.validate_required(self.query, 'query')

    def to_map(self):
        result = dict()
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.filter is not None:
            result['filter'] = self.filter
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.query is not None:
            result['query'] = self.query
        if self.sort is not None:
            result['sort'] = self.sort
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('filter') is not None:
            self.filter = m.get('filter')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('query') is not None:
            self.query = m.get('query')
        if m.get('sort') is not None:
            self.sort = m.get('sort')
        return self


class IaasConnMetadata(TeaModel):
    def __init__(
        self,
        id: str = None,
        iaas_provider_id: str = None,
        name: str = None,
        iaas_conn_type: str = None,
        description: str = None,
        available_features: List[str] = None,
        endpoint: str = None,
        region_ids: List[str] = None,
        is_default: bool = None,
        utc_create: str = None,
    ):
        # id
        self.id = id
        # iaas_provider_id
        self.iaas_provider_id = iaas_provider_id
        # name
        self.name = name
        # iaas_conn_type
        self.iaas_conn_type = iaas_conn_type
        # description
        self.description = description
        # available_features
        self.available_features = available_features
        # endpoint
        self.endpoint = endpoint
        # region_ids
        self.region_ids = region_ids
        # is_default
        self.is_default = is_default
        # utc_create
        self.utc_create = utc_create

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.iaas_provider_id, 'iaas_provider_id')
        self.validate_required(self.name, 'name')
        self.validate_required(self.iaas_conn_type, 'iaas_conn_type')
        self.validate_required(self.description, 'description')
        self.validate_required(self.endpoint, 'endpoint')
        self.validate_required(self.region_ids, 'region_ids')
        self.validate_required(self.is_default, 'is_default')
        self.validate_required(self.utc_create, 'utc_create')
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.iaas_provider_id is not None:
            result['iaas_provider_id'] = self.iaas_provider_id
        if self.name is not None:
            result['name'] = self.name
        if self.iaas_conn_type is not None:
            result['iaas_conn_type'] = self.iaas_conn_type
        if self.description is not None:
            result['description'] = self.description
        if self.available_features is not None:
            result['available_features'] = self.available_features
        if self.endpoint is not None:
            result['endpoint'] = self.endpoint
        if self.region_ids is not None:
            result['region_ids'] = self.region_ids
        if self.is_default is not None:
            result['is_default'] = self.is_default
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('iaas_provider_id') is not None:
            self.iaas_provider_id = m.get('iaas_provider_id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('iaas_conn_type') is not None:
            self.iaas_conn_type = m.get('iaas_conn_type')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('available_features') is not None:
            self.available_features = m.get('available_features')
        if m.get('endpoint') is not None:
            self.endpoint = m.get('endpoint')
        if m.get('region_ids') is not None:
            self.region_ids = m.get('region_ids')
        if m.get('is_default') is not None:
            self.is_default = m.get('is_default')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        return self


class AppPortraitAlertList(TeaModel):
    def __init__(
        self,
        node_id: str = None,
        node_name: str = None,
        metric: str = None,
        severity: str = None,
        alert_content: str = None,
        gmt_occur_timestamp: str = None,
    ):
        # 告警节点ID
        self.node_id = node_id
        # 节点名
        self.node_name = node_name
        # 告警指标
        self.metric = metric
        # 告警级别
        self.severity = severity
        # 告警内容
        self.alert_content = alert_content
        # 告警时间
        self.gmt_occur_timestamp = gmt_occur_timestamp

    def validate(self):
        self.validate_required(self.node_id, 'node_id')
        self.validate_required(self.node_name, 'node_name')
        self.validate_required(self.metric, 'metric')
        self.validate_required(self.severity, 'severity')
        self.validate_required(self.alert_content, 'alert_content')
        self.validate_required(self.gmt_occur_timestamp, 'gmt_occur_timestamp')
        if self.gmt_occur_timestamp is not None:
            self.validate_pattern(self.gmt_occur_timestamp, 'gmt_occur_timestamp', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.node_id is not None:
            result['node_id'] = self.node_id
        if self.node_name is not None:
            result['node_name'] = self.node_name
        if self.metric is not None:
            result['metric'] = self.metric
        if self.severity is not None:
            result['severity'] = self.severity
        if self.alert_content is not None:
            result['alert_content'] = self.alert_content
        if self.gmt_occur_timestamp is not None:
            result['gmt_occur_timestamp'] = self.gmt_occur_timestamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('node_id') is not None:
            self.node_id = m.get('node_id')
        if m.get('node_name') is not None:
            self.node_name = m.get('node_name')
        if m.get('metric') is not None:
            self.metric = m.get('metric')
        if m.get('severity') is not None:
            self.severity = m.get('severity')
        if m.get('alert_content') is not None:
            self.alert_content = m.get('alert_content')
        if m.get('gmt_occur_timestamp') is not None:
            self.gmt_occur_timestamp = m.get('gmt_occur_timestamp')
        return self


class AppServiceQuery(TeaModel):
    def __init__(
        self,
        id: str = None,
        workspace_id: str = None,
        app_id: str = None,
        name: str = None,
        deploy_status: str = None,
        owner_id: str = None,
        workspace_ids: List[str] = None,
        app_ids: List[str] = None,
        is_one_party_request: bool = None,
        start_index: int = None,
        page_size: int = None,
        current_page: int = None,
        orders: List[str] = None,
        query_type: str = None,
        conditions: str = None,
    ):
        # 根据 id 查询
        self.id = id
        # workspaceId
        self.workspace_id = workspace_id
        # appId
        self.app_id = app_id
        # name
        self.name = name
        # deployStatus
        self.deploy_status = deploy_status
        # ownerId
        self.owner_id = owner_id
        # workspaceIds
        self.workspace_ids = workspace_ids
        # appIds
        self.app_ids = app_ids
        # 是否为一方化查询请求
        self.is_one_party_request = is_one_party_request
        # startIndex
        self.start_index = start_index
        # pageSize
        self.page_size = page_size
        # currentPage
        self.current_page = current_page
        # orders
        self.orders = orders
        # 查询类型
        self.query_type = query_type
        # Map<String, String>
        self.conditions = conditions

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.name is not None:
            result['name'] = self.name
        if self.deploy_status is not None:
            result['deploy_status'] = self.deploy_status
        if self.owner_id is not None:
            result['owner_id'] = self.owner_id
        if self.workspace_ids is not None:
            result['workspace_ids'] = self.workspace_ids
        if self.app_ids is not None:
            result['app_ids'] = self.app_ids
        if self.is_one_party_request is not None:
            result['is_one_party_request'] = self.is_one_party_request
        if self.start_index is not None:
            result['start_index'] = self.start_index
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.orders is not None:
            result['orders'] = self.orders
        if self.query_type is not None:
            result['query_type'] = self.query_type
        if self.conditions is not None:
            result['conditions'] = self.conditions
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('deploy_status') is not None:
            self.deploy_status = m.get('deploy_status')
        if m.get('owner_id') is not None:
            self.owner_id = m.get('owner_id')
        if m.get('workspace_ids') is not None:
            self.workspace_ids = m.get('workspace_ids')
        if m.get('app_ids') is not None:
            self.app_ids = m.get('app_ids')
        if m.get('is_one_party_request') is not None:
            self.is_one_party_request = m.get('is_one_party_request')
        if m.get('start_index') is not None:
            self.start_index = m.get('start_index')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('orders') is not None:
            self.orders = m.get('orders')
        if m.get('query_type') is not None:
            self.query_type = m.get('query_type')
        if m.get('conditions') is not None:
            self.conditions = m.get('conditions')
        return self


class AppPortraitAppGet(TeaModel):
    def __init__(
        self,
        id: str = None,
        name: str = None,
        app_group_name: str = None,
        app_group_id: str = None,
        owner_display_name: str = None,
        description: str = None,
        buildpack_name: str = None,
        buildpack_version: str = None,
        appservices: List[str] = None,
    ):
        # 应用id
        self.id = id
        # 应用名称
        self.name = name
        # 应用分组名称
        self.app_group_name = app_group_name
        # 应用所属分组id
        self.app_group_id = app_group_id
        # 应用负责人
        self.owner_display_name = owner_display_name
        # description
        self.description = description
        # 技术栈名称
        self.buildpack_name = buildpack_name
        # 技术栈版本
        self.buildpack_version = buildpack_version
        # workspace下应用所关联的应用服务列表
        self.appservices = appservices

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.app_group_name is not None:
            result['app_group_name'] = self.app_group_name
        if self.app_group_id is not None:
            result['app_group_id'] = self.app_group_id
        if self.owner_display_name is not None:
            result['owner_display_name'] = self.owner_display_name
        if self.description is not None:
            result['description'] = self.description
        if self.buildpack_name is not None:
            result['buildpack_name'] = self.buildpack_name
        if self.buildpack_version is not None:
            result['buildpack_version'] = self.buildpack_version
        if self.appservices is not None:
            result['appservices'] = self.appservices
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('app_group_name') is not None:
            self.app_group_name = m.get('app_group_name')
        if m.get('app_group_id') is not None:
            self.app_group_id = m.get('app_group_id')
        if m.get('owner_display_name') is not None:
            self.owner_display_name = m.get('owner_display_name')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('buildpack_name') is not None:
            self.buildpack_name = m.get('buildpack_name')
        if m.get('buildpack_version') is not None:
            self.buildpack_version = m.get('buildpack_version')
        if m.get('appservices') is not None:
            self.appservices = m.get('appservices')
        return self


class ListenerSecurityIp(TeaModel):
    def __init__(
        self,
        access_control: bool = None,
        ips: List[str] = None,
    ):
        # access_control
        self.access_control = access_control
        # ips
        self.ips = ips

    def validate(self):
        self.validate_required(self.access_control, 'access_control')
        self.validate_required(self.ips, 'ips')

    def to_map(self):
        result = dict()
        if self.access_control is not None:
            result['access_control'] = self.access_control
        if self.ips is not None:
            result['ips'] = self.ips
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('access_control') is not None:
            self.access_control = m.get('access_control')
        if m.get('ips') is not None:
            self.ips = m.get('ips')
        return self


class LbCluster(TeaModel):
    def __init__(
        self,
        container_cpu: int = None,
        container_cpu_exclusive: bool = None,
        container_device_type: str = None,
        container_disk: int = None,
        container_mem: int = None,
        id: str = None,
        image: str = None,
        name: str = None,
        status: int = None,
        unit_infos: List[AcsClusterUnit] = None,
        unit_type: int = None,
        used_ports: List[int] = None,
    ):
        # container_cpu
        self.container_cpu = container_cpu
        # container_cpu_exclusive
        self.container_cpu_exclusive = container_cpu_exclusive
        # container_device_type
        self.container_device_type = container_device_type
        # container_disk
        self.container_disk = container_disk
        # container_mem
        self.container_mem = container_mem
        # id
        self.id = id
        # image
        self.image = image
        # name
        self.name = name
        # status
        self.status = status
        # unit_infos
        self.unit_infos = unit_infos
        # unit_type
        self.unit_type = unit_type
        # used_ports
        self.used_ports = used_ports

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.image, 'image')
        self.validate_required(self.name, 'name')
        self.validate_required(self.status, 'status')
        if self.unit_infos:
            for k in self.unit_infos:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.container_cpu is not None:
            result['container_cpu'] = self.container_cpu
        if self.container_cpu_exclusive is not None:
            result['container_cpu_exclusive'] = self.container_cpu_exclusive
        if self.container_device_type is not None:
            result['container_device_type'] = self.container_device_type
        if self.container_disk is not None:
            result['container_disk'] = self.container_disk
        if self.container_mem is not None:
            result['container_mem'] = self.container_mem
        if self.id is not None:
            result['id'] = self.id
        if self.image is not None:
            result['image'] = self.image
        if self.name is not None:
            result['name'] = self.name
        if self.status is not None:
            result['status'] = self.status
        result['unit_infos'] = []
        if self.unit_infos is not None:
            for k in self.unit_infos:
                result['unit_infos'].append(k.to_map() if k else None)
        if self.unit_type is not None:
            result['unit_type'] = self.unit_type
        if self.used_ports is not None:
            result['used_ports'] = self.used_ports
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('container_cpu') is not None:
            self.container_cpu = m.get('container_cpu')
        if m.get('container_cpu_exclusive') is not None:
            self.container_cpu_exclusive = m.get('container_cpu_exclusive')
        if m.get('container_device_type') is not None:
            self.container_device_type = m.get('container_device_type')
        if m.get('container_disk') is not None:
            self.container_disk = m.get('container_disk')
        if m.get('container_mem') is not None:
            self.container_mem = m.get('container_mem')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('status') is not None:
            self.status = m.get('status')
        self.unit_infos = []
        if m.get('unit_infos') is not None:
            for k in m.get('unit_infos'):
                temp_model = AcsClusterUnit()
                self.unit_infos.append(temp_model.from_map(k))
        if m.get('unit_type') is not None:
            self.unit_type = m.get('unit_type')
        if m.get('used_ports') is not None:
            self.used_ports = m.get('used_ports')
        return self


class QuotaKv(TeaModel):
    def __init__(
        self,
        type: str = None,
        quota: int = None,
    ):
        # type
        self.type = type
        # quota
        self.quota = quota

    def validate(self):
        self.validate_required(self.type, 'type')
        self.validate_required(self.quota, 'quota')

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['type'] = self.type
        if self.quota is not None:
            result['quota'] = self.quota
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('quota') is not None:
            self.quota = m.get('quota')
        return self


class BasicCertificate(TeaModel):
    def __init__(
        self,
        server_certificate_id: str = None,
        server_certificate_name: str = None,
        fingerprint: str = None,
        cert_type: int = None,
        provider_id: str = None,
    ):
        # serverCertificateId
        self.server_certificate_id = server_certificate_id
        # serverCertificateName
        self.server_certificate_name = server_certificate_name
        # fingerprint
        self.fingerprint = fingerprint
        # cert_type
        self.cert_type = cert_type
        # 标记这个证书的Provider
        self.provider_id = provider_id

    def validate(self):
        self.validate_required(self.server_certificate_id, 'server_certificate_id')
        self.validate_required(self.server_certificate_name, 'server_certificate_name')
        self.validate_required(self.cert_type, 'cert_type')

    def to_map(self):
        result = dict()
        if self.server_certificate_id is not None:
            result['server_certificate_id'] = self.server_certificate_id
        if self.server_certificate_name is not None:
            result['server_certificate_name'] = self.server_certificate_name
        if self.fingerprint is not None:
            result['fingerprint'] = self.fingerprint
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.provider_id is not None:
            result['provider_id'] = self.provider_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('server_certificate_id') is not None:
            self.server_certificate_id = m.get('server_certificate_id')
        if m.get('server_certificate_name') is not None:
            self.server_certificate_name = m.get('server_certificate_name')
        if m.get('fingerprint') is not None:
            self.fingerprint = m.get('fingerprint')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('provider_id') is not None:
            self.provider_id = m.get('provider_id')
        return self


class MapStringToBooleanEntity(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: bool = None,
    ):
        # key
        self.key = key
        # value
        self.value = value

    def validate(self):
        self.validate_required(self.key, 'key')
        self.validate_required(self.value, 'value')

    def to_map(self):
        result = dict()
        if self.key is not None:
            result['key'] = self.key
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('key') is not None:
            self.key = m.get('key')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class DatabaseSchema(TeaModel):
    def __init__(
        self,
        char_set: str = None,
        count: int = None,
        is_auto_name: bool = None,
        name: str = None,
        is_serial: bool = None,
    ):
        # 字符集
        self.char_set = char_set
        # 数量
        self.count = count
        # 是否自动生成名称。默认为 true
        self.is_auto_name = is_auto_name
        # 名称
        self.name = name
        # 序列号是否连续。默认为 false
        self.is_serial = is_serial

    def validate(self):
        self.validate_required(self.char_set, 'char_set')
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.char_set is not None:
            result['char_set'] = self.char_set
        if self.count is not None:
            result['count'] = self.count
        if self.is_auto_name is not None:
            result['is_auto_name'] = self.is_auto_name
        if self.name is not None:
            result['name'] = self.name
        if self.is_serial is not None:
            result['is_serial'] = self.is_serial
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('char_set') is not None:
            self.char_set = m.get('char_set')
        if m.get('count') is not None:
            self.count = m.get('count')
        if m.get('is_auto_name') is not None:
            self.is_auto_name = m.get('is_auto_name')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('is_serial') is not None:
            self.is_serial = m.get('is_serial')
        return self


class MiddlewareClusterInstance(TeaModel):
    def __init__(
        self,
        cluster_id: str = None,
        cluster_name: str = None,
        region_ids: List[str] = None,
        zone_ids: List[str] = None,
        acvip_endpoint: str = None,
        instance_id: str = None,
        workspace_group_name: str = None,
    ):
        # cluster_id
        self.cluster_id = cluster_id
        # cluster_name
        self.cluster_name = cluster_name
        # region_ids
        self.region_ids = region_ids
        # zone_ids
        self.zone_ids = zone_ids
        # acvip_endpoint
        self.acvip_endpoint = acvip_endpoint
        # instance_id
        self.instance_id = instance_id
        # workspace_group_name
        self.workspace_group_name = workspace_group_name

    def validate(self):
        self.validate_required(self.cluster_id, 'cluster_id')
        self.validate_required(self.cluster_name, 'cluster_name')
        self.validate_required(self.region_ids, 'region_ids')
        self.validate_required(self.acvip_endpoint, 'acvip_endpoint')

    def to_map(self):
        result = dict()
        if self.cluster_id is not None:
            result['cluster_id'] = self.cluster_id
        if self.cluster_name is not None:
            result['cluster_name'] = self.cluster_name
        if self.region_ids is not None:
            result['region_ids'] = self.region_ids
        if self.zone_ids is not None:
            result['zone_ids'] = self.zone_ids
        if self.acvip_endpoint is not None:
            result['acvip_endpoint'] = self.acvip_endpoint
        if self.instance_id is not None:
            result['instance_id'] = self.instance_id
        if self.workspace_group_name is not None:
            result['workspace_group_name'] = self.workspace_group_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cluster_id') is not None:
            self.cluster_id = m.get('cluster_id')
        if m.get('cluster_name') is not None:
            self.cluster_name = m.get('cluster_name')
        if m.get('region_ids') is not None:
            self.region_ids = m.get('region_ids')
        if m.get('zone_ids') is not None:
            self.zone_ids = m.get('zone_ids')
        if m.get('acvip_endpoint') is not None:
            self.acvip_endpoint = m.get('acvip_endpoint')
        if m.get('instance_id') is not None:
            self.instance_id = m.get('instance_id')
        if m.get('workspace_group_name') is not None:
            self.workspace_group_name = m.get('workspace_group_name')
        return self


class LoadBalancerImportVO(TeaModel):
    def __init__(
        self,
        iaas_id: str = None,
        name: str = None,
        network_type: str = None,
        inner_ip_address: List[str] = None,
        public_ip_address: List[str] = None,
        utc_create: str = None,
        import_info: ImportVO = None,
    ):
        # iaas_id
        self.iaas_id = iaas_id
        # name
        self.name = name
        # network_type
        self.network_type = network_type
        # inner_ip_address
        self.inner_ip_address = inner_ip_address
        # public_ip_address
        self.public_ip_address = public_ip_address
        # utc_create
        self.utc_create = utc_create
        # import_info
        self.import_info = import_info

    def validate(self):
        self.validate_required(self.name, 'name')
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.import_info, 'import_info')
        if self.import_info:
            self.import_info.validate()

    def to_map(self):
        result = dict()
        if self.iaas_id is not None:
            result['iaas_id'] = self.iaas_id
        if self.name is not None:
            result['name'] = self.name
        if self.network_type is not None:
            result['network_type'] = self.network_type
        if self.inner_ip_address is not None:
            result['inner_ip_address'] = self.inner_ip_address
        if self.public_ip_address is not None:
            result['public_ip_address'] = self.public_ip_address
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.import_info is not None:
            result['import_info'] = self.import_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('iaas_id') is not None:
            self.iaas_id = m.get('iaas_id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('network_type') is not None:
            self.network_type = m.get('network_type')
        if m.get('inner_ip_address') is not None:
            self.inner_ip_address = m.get('inner_ip_address')
        if m.get('public_ip_address') is not None:
            self.public_ip_address = m.get('public_ip_address')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('import_info') is not None:
            temp_model = ImportVO()
            self.import_info = temp_model.from_map(m['import_info'])
        return self


class AppServiceViewModel(TeaModel):
    def __init__(
        self,
        base_app_service: AppService = None,
        owner_name: str = None,
        buildpack_name: str = None,
        chinese_name: str = None,
        buildpack_version: str = None,
        computer_count: int = None,
        database_count: int = None,
        load_balancer_count: int = None,
        cache_count: int = None,
        cell_view_list: List[CellView] = None,
    ):
        # 基类
        self.base_app_service = base_app_service
        # 应用负责人姓名
        self.owner_name = owner_name
        # 技术栈名称
        self.buildpack_name = buildpack_name
        # App的别名
        self.chinese_name = chinese_name
        # buildpackVersion
        self.buildpack_version = buildpack_version
        # computerCount
        self.computer_count = computer_count
        # databaseCount
        self.database_count = database_count
        # loadBalancerCount
        self.load_balancer_count = load_balancer_count
        # cacheCount
        self.cache_count = cache_count
        # cellViewList
        self.cell_view_list = cell_view_list

    def validate(self):
        if self.base_app_service:
            self.base_app_service.validate()
        if self.cell_view_list:
            for k in self.cell_view_list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.base_app_service is not None:
            result['base_app_service'] = self.base_app_service.to_map()
        if self.owner_name is not None:
            result['owner_name'] = self.owner_name
        if self.buildpack_name is not None:
            result['buildpack_name'] = self.buildpack_name
        if self.chinese_name is not None:
            result['chinese_name'] = self.chinese_name
        if self.buildpack_version is not None:
            result['buildpack_version'] = self.buildpack_version
        if self.computer_count is not None:
            result['computer_count'] = self.computer_count
        if self.database_count is not None:
            result['database_count'] = self.database_count
        if self.load_balancer_count is not None:
            result['load_balancer_count'] = self.load_balancer_count
        if self.cache_count is not None:
            result['cache_count'] = self.cache_count
        result['cell_view_list'] = []
        if self.cell_view_list is not None:
            for k in self.cell_view_list:
                result['cell_view_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('base_app_service') is not None:
            temp_model = AppService()
            self.base_app_service = temp_model.from_map(m['base_app_service'])
        if m.get('owner_name') is not None:
            self.owner_name = m.get('owner_name')
        if m.get('buildpack_name') is not None:
            self.buildpack_name = m.get('buildpack_name')
        if m.get('chinese_name') is not None:
            self.chinese_name = m.get('chinese_name')
        if m.get('buildpack_version') is not None:
            self.buildpack_version = m.get('buildpack_version')
        if m.get('computer_count') is not None:
            self.computer_count = m.get('computer_count')
        if m.get('database_count') is not None:
            self.database_count = m.get('database_count')
        if m.get('load_balancer_count') is not None:
            self.load_balancer_count = m.get('load_balancer_count')
        if m.get('cache_count') is not None:
            self.cache_count = m.get('cache_count')
        self.cell_view_list = []
        if m.get('cell_view_list') is not None:
            for k in m.get('cell_view_list'):
                temp_model = CellView()
                self.cell_view_list.append(temp_model.from_map(k))
        return self


class DatabaseSecurityIp(TeaModel):
    def __init__(
        self,
        id: str = None,
        resource_id: str = None,
        resource_type: str = None,
        ip: str = None,
        status: str = None,
        type: str = None,
    ):
        # id
        self.id = id
        # resource_id
        self.resource_id = resource_id
        # resource_type
        self.resource_type = resource_type
        # ip
        self.ip = ip
        # status
        self.status = status
        # type
        self.type = type

    def validate(self):
        self.validate_required(self.id, 'id')

    def to_map(self):
        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.resource_id is not None:
            result['resource_id'] = self.resource_id
        if self.resource_type is not None:
            result['resource_type'] = self.resource_type
        if self.ip is not None:
            result['ip'] = self.ip
        if self.status is not None:
            result['status'] = self.status
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('resource_id') is not None:
            self.resource_id = m.get('resource_id')
        if m.get('resource_type') is not None:
            self.resource_type = m.get('resource_type')
        if m.get('ip') is not None:
            self.ip = m.get('ip')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class DatabaseEngine(TeaModel):
    def __init__(
        self,
        iaas_type: str = None,
        engine: str = None,
        engine_versions: List[str] = None,
    ):
        # iaas_type
        self.iaas_type = iaas_type
        # engine
        self.engine = engine
        # engine_versions
        self.engine_versions = engine_versions

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.iaas_type is not None:
            result['iaas_type'] = self.iaas_type
        if self.engine is not None:
            result['engine'] = self.engine
        if self.engine_versions is not None:
            result['engine_versions'] = self.engine_versions
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('iaas_type') is not None:
            self.iaas_type = m.get('iaas_type')
        if m.get('engine') is not None:
            self.engine = m.get('engine')
        if m.get('engine_versions') is not None:
            self.engine_versions = m.get('engine_versions')
        return self


class ComputerParam(TeaModel):
    def __init__(
        self,
        description: str = None,
        name: str = None,
        image_id: str = None,
        instance_type: str = None,
        region_id: str = None,
        security_group_id: str = None,
        instance_name: str = None,
        zone_id: str = None,
    ):
        # description
        self.description = description
        # name
        self.name = name
        # image_id
        self.image_id = image_id
        # instance_type
        self.instance_type = instance_type
        # region_id
        self.region_id = region_id
        # security_group_id
        self.security_group_id = security_group_id
        # instance_name
        self.instance_name = instance_name
        # zone_id
        self.zone_id = zone_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.description is not None:
            result['description'] = self.description
        if self.name is not None:
            result['name'] = self.name
        if self.image_id is not None:
            result['image_id'] = self.image_id
        if self.instance_type is not None:
            result['instance_type'] = self.instance_type
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.security_group_id is not None:
            result['security_group_id'] = self.security_group_id
        if self.instance_name is not None:
            result['instance_name'] = self.instance_name
        if self.zone_id is not None:
            result['zone_id'] = self.zone_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('image_id') is not None:
            self.image_id = m.get('image_id')
        if m.get('instance_type') is not None:
            self.instance_type = m.get('instance_type')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('security_group_id') is not None:
            self.security_group_id = m.get('security_group_id')
        if m.get('instance_name') is not None:
            self.instance_name = m.get('instance_name')
        if m.get('zone_id') is not None:
            self.zone_id = m.get('zone_id')
        return self


class VipType(TeaModel):
    def __init__(
        self,
        name: str = None,
        vip_address_type: str = None,
        vip_type: str = None,
    ):
        # name
        self.name = name
        # vip_address_type
        self.vip_address_type = vip_address_type
        # vip_type
        self.vip_type = vip_type

    def validate(self):
        self.validate_required(self.name, 'name')
        self.validate_required(self.vip_address_type, 'vip_address_type')
        self.validate_required(self.vip_type, 'vip_type')

    def to_map(self):
        result = dict()
        if self.name is not None:
            result['name'] = self.name
        if self.vip_address_type is not None:
            result['vip_address_type'] = self.vip_address_type
        if self.vip_type is not None:
            result['vip_type'] = self.vip_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('vip_address_type') is not None:
            self.vip_address_type = m.get('vip_address_type')
        if m.get('vip_type') is not None:
            self.vip_type = m.get('vip_type')
        return self


class BatchdeleteApplicationBuildRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_id: str = None,
        build_ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # app_id
        self.app_id = app_id
        # build_ids
        self.build_ids = build_ids

    def validate(self):
        self.validate_required(self.app_id, 'app_id')
        self.validate_required(self.build_ids, 'build_ids')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.build_ids is not None:
            result['build_ids'] = self.build_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('build_ids') is not None:
            self.build_ids = m.get('build_ids')
        return self


class BatchdeleteApplicationBuildResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[MapStringToBooleanEntity] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # Map<String, Boolean>
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = MapStringToBooleanEntity()
                self.data.append(temp_model.from_map(k))
        return self


class ListApplicationManifestRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_id: str = None,
        query: DynamicQuery = None,
        workspace_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # app_id
        self.app_id = app_id
        # DynamicQuery
        self.query = query
        # workspace_id
        self.workspace_id = workspace_id

    def validate(self):
        self.validate_required(self.app_id, 'app_id')
        self.validate_required(self.query, 'query')
        if self.query:
            self.query.validate()
        self.validate_required(self.workspace_id, 'workspace_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.query is not None:
            result['query'] = self.query.to_map()
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('query') is not None:
            temp_model = DynamicQuery()
            self.query = temp_model.from_map(m['query'])
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class ListApplicationManifestResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[AppManifest] = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # List<AppManifest>
        self.data = data
        # 总数
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = AppManifest()
                self.data.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class BatchdeleteApplicationPackageRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_id: str = None,
        version_ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # app_id
        self.app_id = app_id
        # List<String> versionIds
        self.version_ids = version_ids

    def validate(self):
        self.validate_required(self.app_id, 'app_id')
        self.validate_required(self.version_ids, 'version_ids')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.version_ids is not None:
            result['version_ids'] = self.version_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('version_ids') is not None:
            self.version_ids = m.get('version_ids')
        return self


class BatchdeleteApplicationPackageResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[MapStringToBooleanEntity] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # Map<String, Boolean>
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = MapStringToBooleanEntity()
                self.data.append(temp_model.from_map(k))
        return self


class CreateApplicationPackageRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_id: str = None,
        manifest: AppManifest = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # app_id
        self.app_id = app_id
        # manifest
        self.manifest = manifest

    def validate(self):
        self.validate_required(self.app_id, 'app_id')
        self.validate_required(self.manifest, 'manifest')
        if self.manifest:
            self.manifest.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.manifest is not None:
            result['manifest'] = self.manifest.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('manifest') is not None:
            temp_model = AppManifest()
            self.manifest = temp_model.from_map(m['manifest'])
        return self


class CreateApplicationPackageResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DeleteApplicationPackageRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        version_id: str = None,
        app_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # version_id
        self.version_id = version_id
        # 应用id，用于鉴权
        self.app_id = app_id

    def validate(self):
        self.validate_required(self.version_id, 'version_id')
        self.validate_required(self.app_id, 'app_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.version_id is not None:
            result['version_id'] = self.version_id
        if self.app_id is not None:
            result['app_id'] = self.app_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('version_id') is not None:
            self.version_id = m.get('version_id')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        return self


class DeleteApplicationPackageResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 删除结果
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class ListApplicationPackageRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
        dynamic_query: DynamicQuery = None,
        query: AppQuery = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 工作空间id，用于做鉴权
        self.workspace_id = workspace_id
        # 动态查询
        self.dynamic_query = dynamic_query
        # 应用查询
        self.query = query

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        if self.dynamic_query:
            self.dynamic_query.validate()
        if self.query:
            self.query.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.dynamic_query is not None:
            result['dynamic_query'] = self.dynamic_query.to_map()
        if self.query is not None:
            result['query'] = self.query.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('dynamic_query') is not None:
            temp_model = DynamicQuery()
            self.dynamic_query = temp_model.from_map(m['dynamic_query'])
        if m.get('query') is not None:
            temp_model = AppQuery()
            self.query = temp_model.from_map(m['query'])
        return self


class ListApplicationPackageResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[AppPackageListView] = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # List<AppPackageListView>
        self.data = data
        # 总数
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = AppPackageListView()
                self.data.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class UploadApplicationPackageconfigRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
        app_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace_id
        self.workspace_id = workspace_id
        # 应用id，用于鉴权
        self.app_id = app_id

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.app_id, 'app_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.app_id is not None:
            result['app_id'] = self.app_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        return self


class UploadApplicationPackageconfigResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[MapStringToBooleanEntity] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # Map<String, Boolean>
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = MapStringToBooleanEntity()
                self.data.append(temp_model.from_map(k))
        return self


class ListAppserviceCellRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace_id
        self.workspace_id = workspace_id

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class ListAppserviceCellResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[CellView] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # List<CellView>
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = CellView()
                self.data.append(temp_model.from_map(k))
        return self


class CreateAppserviceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_service: AppService = None,
        workspace_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # app_service
        self.app_service = app_service
        # 工作空间id，用于鉴权
        self.workspace_id = workspace_id

    def validate(self):
        self.validate_required(self.app_service, 'app_service')
        if self.app_service:
            self.app_service.validate()
        self.validate_required(self.workspace_id, 'workspace_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_service is not None:
            result['app_service'] = self.app_service.to_map()
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_service') is not None:
            temp_model = AppService()
            self.app_service = temp_model.from_map(m['app_service'])
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class CreateAppserviceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 创建结果
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class GetAppserviceDefaultRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_id: str = None,
        workspace_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # app_id
        self.app_id = app_id
        # workspace_id
        self.workspace_id = workspace_id

    def validate(self):
        self.validate_required(self.app_id, 'app_id')
        self.validate_required(self.workspace_id, 'workspace_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class GetAppserviceDefaultResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: AppService = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # AppService
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            temp_model = AppService()
            self.data = temp_model.from_map(m['data'])
        return self


class ExistAppserviceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_id: str = None,
        name: str = None,
        workspace_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # app_id
        self.app_id = app_id
        # name
        self.name = name
        # workspace_id
        self.workspace_id = workspace_id

    def validate(self):
        self.validate_required(self.app_id, 'app_id')
        self.validate_required(self.name, 'name')
        self.validate_required(self.workspace_id, 'workspace_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.name is not None:
            result['name'] = self.name
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class ExistAppserviceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 是否存在
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class UpdateAppserviceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_service: AppService = None,
        workspace_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # app_service
        self.app_service = app_service
        # 工作空间id，用于鉴权
        self.workspace_id = workspace_id

    def validate(self):
        self.validate_required(self.app_service, 'app_service')
        if self.app_service:
            self.app_service.validate()
        self.validate_required(self.workspace_id, 'workspace_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_service is not None:
            result['app_service'] = self.app_service.to_map()
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_service') is not None:
            temp_model = AppService()
            self.app_service = temp_model.from_map(m['app_service'])
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class UpdateAppserviceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 更新结果
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryBuildpackRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        bp_version: str = None,
        by_page: bool = None,
        component_id: str = None,
        config_id: str = None,
        current_page: int = None,
        deploy_script_id: str = None,
        id: str = None,
        include_template: bool = None,
        name: str = None,
        page_size: int = None,
        query_type: str = None,
        stack_id: str = None,
        status: str = None,
        types: List[str] = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 技术栈版本
        self.bp_version = bp_version
        # 是否分页，默认为true
        self.by_page = by_page
        # 组件ID
        self.component_id = component_id
        # 配置ID
        self.config_id = config_id
        # 页码：默认值为1，表示第一页
        self.current_page = current_page
        # 部署脚本id
        self.deploy_script_id = deploy_script_id
        # 技术栈ID标识
        self.id = id
        # 是否包含模板
        self.include_template = include_template
        # 技术栈名称
        self.name = name
        # 每页返回个数
        self.page_size = page_size
        # 查询名称过滤方式
        # 模糊查询 FUZZY
        # 精准匹配 ACCURATE
        # 前缀查询 START_WITH
        self.query_type = query_type
        # 所属技术栈类别ID
        self.stack_id = stack_id
        # 技术栈状态
        self.status = status
        # 技术栈定义类型
        # 系统模板 TEMPLATE,
        # 用户自定义 CUSTOM,
        # 后台服务 BACKGROUND_SERVICE
        self.types = types
        # 工作空间
        self.workspace = workspace

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.bp_version is not None:
            result['bp_version'] = self.bp_version
        if self.by_page is not None:
            result['by_page'] = self.by_page
        if self.component_id is not None:
            result['component_id'] = self.component_id
        if self.config_id is not None:
            result['config_id'] = self.config_id
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.deploy_script_id is not None:
            result['deploy_script_id'] = self.deploy_script_id
        if self.id is not None:
            result['id'] = self.id
        if self.include_template is not None:
            result['include_template'] = self.include_template
        if self.name is not None:
            result['name'] = self.name
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.query_type is not None:
            result['query_type'] = self.query_type
        if self.stack_id is not None:
            result['stack_id'] = self.stack_id
        if self.status is not None:
            result['status'] = self.status
        if self.types is not None:
            result['types'] = self.types
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('bp_version') is not None:
            self.bp_version = m.get('bp_version')
        if m.get('by_page') is not None:
            self.by_page = m.get('by_page')
        if m.get('component_id') is not None:
            self.component_id = m.get('component_id')
        if m.get('config_id') is not None:
            self.config_id = m.get('config_id')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('deploy_script_id') is not None:
            self.deploy_script_id = m.get('deploy_script_id')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('include_template') is not None:
            self.include_template = m.get('include_template')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('query_type') is not None:
            self.query_type = m.get('query_type')
        if m.get('stack_id') is not None:
            self.stack_id = m.get('stack_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('types') is not None:
            self.types = m.get('types')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class QueryBuildpackResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        current_page: int = None,
        list: List[Buildpack] = None,
        page_size: int = None,
        start_index: int = None,
        total_size: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 当前页码
        self.current_page = current_page
        # 技术栈列表
        self.list = list
        # 每页个数
        self.page_size = page_size
        # 起始位置
        self.start_index = start_index
        # 总计
        self.total_size = total_size

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.current_page is not None:
            result['current_page'] = self.current_page
        result['list'] = []
        if self.list is not None:
            for k in self.list:
                result['list'].append(k.to_map() if k else None)
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.start_index is not None:
            result['start_index'] = self.start_index
        if self.total_size is not None:
            result['total_size'] = self.total_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        self.list = []
        if m.get('list') is not None:
            for k in m.get('list'):
                temp_model = Buildpack()
                self.list.append(temp_model.from_map(k))
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('start_index') is not None:
            self.start_index = m.get('start_index')
        if m.get('total_size') is not None:
            self.total_size = m.get('total_size')
        return self


class GetApplicationDetailRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_id: str = None,
        workspace_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 应用ID
        self.app_id = app_id
        # 工作空间ID
        self.workspace_id = workspace_id

    def validate(self):
        self.validate_required(self.app_id, 'app_id')
        self.validate_required(self.workspace_id, 'workspace_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class GetApplicationDetailResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: AppView = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 应用详情信息
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            temp_model = AppView()
            self.data = temp_model.from_map(m['data'])
        return self


class QueryUserRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        current_page: int = None,
        customer_id: str = None,
        email: str = None,
        id: str = None,
        is_locale_enabled: bool = None,
        local: str = None,
        login_name: str = None,
        mobile: str = None,
        orders: List[str] = None,
        page_size: int = None,
        paging: bool = None,
        query_type: str = None,
        real_name: str = None,
        search: bool = None,
        type: str = None,
        types: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 当前页码
        self.current_page = current_page
        # customer_id
        self.customer_id = customer_id
        # 邮箱
        self.email = email
        # 用户ID
        self.id = id
        # is_locale_enabled
        self.is_locale_enabled = is_locale_enabled
        # local
        self.local = local
        # 登录名称
        self.login_name = login_name
        # 手机号
        self.mobile = mobile
        # 排序关键字列表
        self.orders = orders
        # 每页个数
        self.page_size = page_size
        # 是否分页
        self.paging = paging
        # 查询类型
        # 模糊查询 FUZZY
        # 精准查询 ACCURATE,
        # 前缀查询 START_WITH
        self.query_type = query_type
        # 实际名称
        self.real_name = real_name
        # search
        self.search = search
        # 账户类型
        # MASTER 主账号
        # OPERATOR 操作员
        # SERVICE 服务账号
        # STS_ACTOR 虚拟身份
        self.type = type
        # 账户类型列表
        self.types = types

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.customer_id is not None:
            result['customer_id'] = self.customer_id
        if self.email is not None:
            result['email'] = self.email
        if self.id is not None:
            result['id'] = self.id
        if self.is_locale_enabled is not None:
            result['is_locale_enabled'] = self.is_locale_enabled
        if self.local is not None:
            result['local'] = self.local
        if self.login_name is not None:
            result['login_name'] = self.login_name
        if self.mobile is not None:
            result['mobile'] = self.mobile
        if self.orders is not None:
            result['orders'] = self.orders
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.paging is not None:
            result['paging'] = self.paging
        if self.query_type is not None:
            result['query_type'] = self.query_type
        if self.real_name is not None:
            result['real_name'] = self.real_name
        if self.search is not None:
            result['search'] = self.search
        if self.type is not None:
            result['type'] = self.type
        if self.types is not None:
            result['types'] = self.types
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('customer_id') is not None:
            self.customer_id = m.get('customer_id')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('is_locale_enabled') is not None:
            self.is_locale_enabled = m.get('is_locale_enabled')
        if m.get('local') is not None:
            self.local = m.get('local')
        if m.get('login_name') is not None:
            self.login_name = m.get('login_name')
        if m.get('mobile') is not None:
            self.mobile = m.get('mobile')
        if m.get('orders') is not None:
            self.orders = m.get('orders')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('paging') is not None:
            self.paging = m.get('paging')
        if m.get('query_type') is not None:
            self.query_type = m.get('query_type')
        if m.get('real_name') is not None:
            self.real_name = m.get('real_name')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('types') is not None:
            self.types = m.get('types')
        return self


class QueryUserResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[UserDTO] = None,
        page_num: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 用户列表
        self.data = data
        # 页数
        self.page_num = page_num
        # 分页大小
        self.page_size = page_size
        # 总数
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = UserDTO()
                self.data.append(temp_model.from_map(k))
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class ListAppgroupRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        dynamic_query: DynamicQuery = None,
        query: AppDomainQuery = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 动态查询
        self.dynamic_query = dynamic_query
        # 应用分组查询
        self.query = query

    def validate(self):
        if self.dynamic_query:
            self.dynamic_query.validate()
        if self.query:
            self.query.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.dynamic_query is not None:
            result['dynamic_query'] = self.dynamic_query.to_map()
        if self.query is not None:
            result['query'] = self.query.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('dynamic_query') is not None:
            temp_model = DynamicQuery()
            self.dynamic_query = temp_model.from_map(m['dynamic_query'])
        if m.get('query') is not None:
            temp_model = AppDomainQuery()
            self.query = temp_model.from_map(m['query'])
        return self


class ListAppgroupResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[AppDomainView] = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data
        # totalCount
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = AppDomainView()
                self.data.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class ExistAppgroupRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        name: str = None,
        parent_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # name
        self.name = name
        # parentId
        self.parent_id = parent_id

    def validate(self):
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.name is not None:
            result['name'] = self.name
        if self.parent_id is not None:
            result['parent_id'] = self.parent_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('parent_id') is not None:
            self.parent_id = m.get('parent_id')
        return self


class ExistAppgroupResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 是否存在
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class CreateAppgroupRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        domain: AppDomainFlatten = None,
        tenant_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # domain tree
        self.domain = domain
        # 占位
        self.tenant_id = tenant_id

    def validate(self):
        self.validate_required(self.domain, 'domain')
        if self.domain:
            self.domain.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.domain is not None:
            result['domain'] = self.domain.to_map()
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('domain') is not None:
            temp_model = AppDomainFlatten()
            self.domain = temp_model.from_map(m['domain'])
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        return self


class CreateAppgroupResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class ListAppgroupOwnerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        query: UserQuery = None,
        tenant_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 用户查询
        self.query = query
        # 占位
        self.tenant_id = tenant_id

    def validate(self):
        self.validate_required(self.query, 'query')
        if self.query:
            self.query.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.query is not None:
            result['query'] = self.query.to_map()
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('query') is not None:
            temp_model = UserQuery()
            self.query = temp_model.from_map(m['query'])
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        return self


class ListAppgroupOwnerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[UserDTO] = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 用户列表
        self.data = data
        # 总数
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = UserDTO()
                self.data.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class GetAppgroupTreeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        return self


class GetAppgroupTreeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[AppDomainFlatten] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 应用列表，包含依赖关系
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = AppDomainFlatten()
                self.data.append(temp_model.from_map(k))
        return self


class GetAppgroupSystemtreeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        return self


class GetAppgroupSystemtreeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[AppDomainFlatten] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 应用分组结构
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = AppDomainFlatten()
                self.data.append(temp_model.from_map(k))
        return self


class DeleteAppgroupRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 分组 id
        self.id = id

    def validate(self):
        self.validate_required(self.id, 'id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class DeleteAppgroupResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 删除结果
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class UpdateAppgroupRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        domain: AppDomainFlatten = None,
        id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 更新内容
        self.domain = domain
        # 应用分组id
        self.id = id

    def validate(self):
        self.validate_required(self.domain, 'domain')
        if self.domain:
            self.domain.validate()
        self.validate_required(self.id, 'id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.domain is not None:
            result['domain'] = self.domain.to_map()
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('domain') is not None:
            temp_model = AppDomainFlatten()
            self.domain = temp_model.from_map(m['domain'])
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class UpdateAppgroupResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 更新结果
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class ListApplevelRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        dynamic_query: DynamicQuery = None,
        query: AppLevelQuery = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 动态查询
        self.dynamic_query = dynamic_query
        # 应用分级查询
        self.query = query

    def validate(self):
        if self.dynamic_query:
            self.dynamic_query.validate()
        if self.query:
            self.query.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.dynamic_query is not None:
            result['dynamic_query'] = self.dynamic_query.to_map()
        if self.query is not None:
            result['query'] = self.query.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('dynamic_query') is not None:
            temp_model = DynamicQuery()
            self.dynamic_query = temp_model.from_map(m['dynamic_query'])
        if m.get('query') is not None:
            temp_model = AppLevelQuery()
            self.query = temp_model.from_map(m['query'])
        return self


class ListApplevelResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[AppLevelView] = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 应用等级列表
        self.data = data
        # 总数
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = AppLevelView()
                self.data.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class ExistApplevelRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 应用等级名称
        self.name = name

    def validate(self):
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class ExistApplevelResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 是否存在
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class CreateApplevelRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        level: AppLevel = None,
        tenant_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 应用等级
        self.level = level
        # 占位，因为入参不能只有一个结构体
        self.tenant_id = tenant_id

    def validate(self):
        self.validate_required(self.level, 'level')
        if self.level:
            self.level.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.level is not None:
            result['level'] = self.level.to_map()
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('level') is not None:
            temp_model = AppLevel()
            self.level = temp_model.from_map(m['level'])
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        return self


class CreateApplevelResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 创建结果
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DeleteApplevelRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 应用等级 id
        self.id = id

    def validate(self):
        self.validate_required(self.id, 'id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class DeleteApplevelResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 删除结果
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class UpdateApplevelRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        id: str = None,
        name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 应用等级id
        self.id = id
        # 应用等级名称
        self.name = name

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class UpdateApplevelResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 更新结果
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class ListApplicationRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        dynamic_query: DynamicQuery = None,
        query: AppQuery = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 动态查询
        self.dynamic_query = dynamic_query
        # 应用查询
        self.query = query

    def validate(self):
        if self.dynamic_query:
            self.dynamic_query.validate()
        if self.query:
            self.query.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.dynamic_query is not None:
            result['dynamic_query'] = self.dynamic_query.to_map()
        if self.query is not None:
            result['query'] = self.query.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('dynamic_query') is not None:
            temp_model = DynamicQuery()
            self.dynamic_query = temp_model.from_map(m['dynamic_query'])
        if m.get('query') is not None:
            temp_model = AppQuery()
            self.query = temp_model.from_map(m['query'])
        return self


class ListApplicationResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[AppView] = None,
        total_count: int = None,
        page_num: int = None,
        page_size: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 应用列表
        self.data = data
        # 总数量
        self.total_count = total_count
        # 当前页码
        self.page_num = page_num
        # 分页大小
        self.page_size = page_size

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = AppView()
                self.data.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        return self


class UpdateApplicationRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_domain_id: str = None,
        app_extra_infos: List[AppExtraInfo] = None,
        app_level: AppLevel = None,
        app_owner: AppOwner = None,
        archetype: ScmSofaArchetype = None,
        buildpack_version: str = None,
        chinese_name: str = None,
        code_repository: CodeRepository = None,
        description: str = None,
        extra_params: str = None,
        id: str = None,
        is_service: bool = None,
        name: str = None,
        owner_id: str = None,
        stack_id: str = None,
        status: str = None,
        tags: str = None,
        utc_create: str = None,
        utc_modified: str = None,
        workspace_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # appDomainId
        self.app_domain_id = app_domain_id
        # appExtraInfos
        self.app_extra_infos = app_extra_infos
        # 应用等级
        self.app_level = app_level
        # appOwner
        self.app_owner = app_owner
        # archetype
        self.archetype = archetype
        # buildpackVersion
        self.buildpack_version = buildpack_version
        # 中文名称
        self.chinese_name = chinese_name
        # 代码库
        self.code_repository = code_repository
        # 描述
        self.description = description
        # 额外信息
        self.extra_params = extra_params
        # id
        self.id = id
        # isService
        self.is_service = is_service
        # name
        self.name = name
        # ownerId
        self.owner_id = owner_id
        # stack_id
        self.stack_id = stack_id
        # 状态
        self.status = status
        # tags
        self.tags = tags
        # 创建时间
        self.utc_create = utc_create
        # 修改时间
        self.utc_modified = utc_modified
        # workspace_id
        self.workspace_id = workspace_id

    def validate(self):
        if self.app_extra_infos:
            for k in self.app_extra_infos:
                if k:
                    k.validate()
        if self.app_level:
            self.app_level.validate()
        if self.app_owner:
            self.app_owner.validate()
        if self.archetype:
            self.archetype.validate()
        if self.code_repository:
            self.code_repository.validate()
        if self.utc_create is not None:
            self.validate_pattern(self.utc_create, 'utc_create', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.utc_modified is not None:
            self.validate_pattern(self.utc_modified, 'utc_modified', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_domain_id is not None:
            result['app_domain_id'] = self.app_domain_id
        result['app_extra_infos'] = []
        if self.app_extra_infos is not None:
            for k in self.app_extra_infos:
                result['app_extra_infos'].append(k.to_map() if k else None)
        if self.app_level is not None:
            result['app_level'] = self.app_level.to_map()
        if self.app_owner is not None:
            result['app_owner'] = self.app_owner.to_map()
        if self.archetype is not None:
            result['archetype'] = self.archetype.to_map()
        if self.buildpack_version is not None:
            result['buildpack_version'] = self.buildpack_version
        if self.chinese_name is not None:
            result['chinese_name'] = self.chinese_name
        if self.code_repository is not None:
            result['code_repository'] = self.code_repository.to_map()
        if self.description is not None:
            result['description'] = self.description
        if self.extra_params is not None:
            result['extra_params'] = self.extra_params
        if self.id is not None:
            result['id'] = self.id
        if self.is_service is not None:
            result['is_service'] = self.is_service
        if self.name is not None:
            result['name'] = self.name
        if self.owner_id is not None:
            result['owner_id'] = self.owner_id
        if self.stack_id is not None:
            result['stack_id'] = self.stack_id
        if self.status is not None:
            result['status'] = self.status
        if self.tags is not None:
            result['tags'] = self.tags
        if self.utc_create is not None:
            result['utc_create'] = self.utc_create
        if self.utc_modified is not None:
            result['utc_modified'] = self.utc_modified
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_domain_id') is not None:
            self.app_domain_id = m.get('app_domain_id')
        self.app_extra_infos = []
        if m.get('app_extra_infos') is not None:
            for k in m.get('app_extra_infos'):
                temp_model = AppExtraInfo()
                self.app_extra_infos.append(temp_model.from_map(k))
        if m.get('app_level') is not None:
            temp_model = AppLevel()
            self.app_level = temp_model.from_map(m['app_level'])
        if m.get('app_owner') is not None:
            temp_model = AppOwner()
            self.app_owner = temp_model.from_map(m['app_owner'])
        if m.get('archetype') is not None:
            temp_model = ScmSofaArchetype()
            self.archetype = temp_model.from_map(m['archetype'])
        if m.get('buildpack_version') is not None:
            self.buildpack_version = m.get('buildpack_version')
        if m.get('chinese_name') is not None:
            self.chinese_name = m.get('chinese_name')
        if m.get('code_repository') is not None:
            temp_model = CodeRepository()
            self.code_repository = temp_model.from_map(m['code_repository'])
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('extra_params') is not None:
            self.extra_params = m.get('extra_params')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('is_service') is not None:
            self.is_service = m.get('is_service')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('owner_id') is not None:
            self.owner_id = m.get('owner_id')
        if m.get('stack_id') is not None:
            self.stack_id = m.get('stack_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tags') is not None:
            self.tags = m.get('tags')
        if m.get('utc_create') is not None:
            self.utc_create = m.get('utc_create')
        if m.get('utc_modified') is not None:
            self.utc_modified = m.get('utc_modified')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class UpdateApplicationResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 更新结果
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class ListAppserviceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        dynamic_query: DynamicQuery = None,
        query: AppServiceQuery = None,
        workspace_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 动态查询
        self.dynamic_query = dynamic_query
        # 应用服务查询
        self.query = query
        # 工作空间id，用于鉴权
        self.workspace_id = workspace_id

    def validate(self):
        if self.dynamic_query:
            self.dynamic_query.validate()
        if self.query:
            self.query.validate()
        self.validate_required(self.workspace_id, 'workspace_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.dynamic_query is not None:
            result['dynamic_query'] = self.dynamic_query.to_map()
        if self.query is not None:
            result['query'] = self.query.to_map()
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('dynamic_query') is not None:
            temp_model = DynamicQuery()
            self.dynamic_query = temp_model.from_map(m['dynamic_query'])
        if m.get('query') is not None:
            temp_model = AppServiceQuery()
            self.query = temp_model.from_map(m['query'])
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class ListAppserviceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        current_page: int = None,
        data: List[AppServiceViewModel] = None,
        page_size: int = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 当前页面
        self.current_page = current_page
        # PaginationResult<AppServiceViewModel>
        self.data = data
        # 分页大小
        self.page_size = page_size
        # 总数
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.current_page is not None:
            result['current_page'] = self.current_page
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = AppServiceViewModel()
                self.data.append(temp_model.from_map(k))
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class DeleteAppserviceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        id: str = None,
        workspace_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # id
        self.id = id
        # 工作空间id，用于鉴权
        self.workspace_id = workspace_id

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.workspace_id, 'workspace_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.id is not None:
            result['id'] = self.id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class DeleteAppserviceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class GetAppserviceDetailRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_service_id: str = None,
        workspace_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 应用服务id
        self.app_service_id = app_service_id
        # 工作空间id，用于鉴权
        self.workspace_id = workspace_id

    def validate(self):
        self.validate_required(self.app_service_id, 'app_service_id')
        self.validate_required(self.workspace_id, 'workspace_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_service_id is not None:
            result['app_service_id'] = self.app_service_id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_service_id') is not None:
            self.app_service_id = m.get('app_service_id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class GetAppserviceDetailResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: AppServiceViewModel = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 应用服务详情
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            temp_model = AppServiceViewModel()
            self.data = temp_model.from_map(m['data'])
        return self


class ExistApplicationPackageRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_id: str = None,
        app_version: str = None,
        workspace_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # appId
        self.app_id = app_id
        # version
        self.app_version = app_version
        # workspaceId
        self.workspace_id = workspace_id

    def validate(self):
        self.validate_required(self.app_id, 'app_id')
        self.validate_required(self.app_version, 'app_version')
        self.validate_required(self.workspace_id, 'workspace_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.app_version is not None:
            result['app_version'] = self.app_version
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('app_version') is not None:
            self.app_version = m.get('app_version')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class ExistApplicationPackageResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class GetApplicationPackageuploadpolicyRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_id: str = None,
        workspace_id: str = None,
        app_version: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # appId
        self.app_id = app_id
        # workspaceId
        self.workspace_id = workspace_id
        # version
        self.app_version = app_version

    def validate(self):
        self.validate_required(self.app_id, 'app_id')
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.app_version, 'app_version')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.app_version is not None:
            result['app_version'] = self.app_version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('app_version') is not None:
            self.app_version = m.get('app_version')
        return self


class GetApplicationPackageuploadpolicyResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: PackageUploadPolicy = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 发布包上传策略
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            temp_model = PackageUploadPolicy()
            self.data = temp_model.from_map(m['data'])
        return self


class GetApplicationPackagedownloadurlRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        version_id: str = None,
        app_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # versionId
        self.version_id = version_id
        # 应用id，用于鉴权
        self.app_id = app_id

    def validate(self):
        self.validate_required(self.version_id, 'version_id')
        self.validate_required(self.app_id, 'app_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.version_id is not None:
            result['version_id'] = self.version_id
        if self.app_id is not None:
            result['app_id'] = self.app_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('version_id') is not None:
            self.version_id = m.get('version_id')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        return self


class GetApplicationPackagedownloadurlResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 下载链接
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class ExistApplicationRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 应用名称
        self.app_name = app_name

    def validate(self):
        self.validate_required(self.app_name, 'app_name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_name is not None:
            result['app_name'] = self.app_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_name') is not None:
            self.app_name = m.get('app_name')
        return self


class ExistApplicationResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 是否存在
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryAppserviceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        ids: List[str] = None,
        workspace_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 应用服务 id 数组
        self.ids = ids
        # workspaceId 用于鉴权
        self.workspace_id = workspace_id

    def validate(self):
        self.validate_required(self.ids, 'ids')
        self.validate_required(self.workspace_id, 'workspace_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.ids is not None:
            result['ids'] = self.ids
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class QueryAppserviceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[AppService] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 应用服务数组
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = AppService()
                self.data.append(temp_model.from_map(k))
        return self


class GetAppgrayconfigsRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        return self


class GetAppgrayconfigsResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[MapStringToBooleanEntity] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 开关配置清单
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = MapStringToBooleanEntity()
                self.data.append(temp_model.from_map(k))
        return self


class ListAppportraitAppRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        name: str = None,
        app_group_name: str = None,
        owner_display_name: str = None,
        buildpack_name: str = None,
        buildpack_version: str = None,
        tenant_id: str = None,
        tenant_name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 应用名称
        self.name = name
        # 应用分组名称
        self.app_group_name = app_group_name
        # 应用负责人
        self.owner_display_name = owner_display_name
        # 技术栈名称
        self.buildpack_name = buildpack_name
        # 技术栈版本
        self.buildpack_version = buildpack_version
        # TenantId
        self.tenant_id = tenant_id
        # TenantName
        self.tenant_name = tenant_name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.name is not None:
            result['name'] = self.name
        if self.app_group_name is not None:
            result['app_group_name'] = self.app_group_name
        if self.owner_display_name is not None:
            result['owner_display_name'] = self.owner_display_name
        if self.buildpack_name is not None:
            result['buildpack_name'] = self.buildpack_name
        if self.buildpack_version is not None:
            result['buildpack_version'] = self.buildpack_version
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.tenant_name is not None:
            result['tenant_name'] = self.tenant_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('app_group_name') is not None:
            self.app_group_name = m.get('app_group_name')
        if m.get('owner_display_name') is not None:
            self.owner_display_name = m.get('owner_display_name')
        if m.get('buildpack_name') is not None:
            self.buildpack_name = m.get('buildpack_name')
        if m.get('buildpack_version') is not None:
            self.buildpack_version = m.get('buildpack_version')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('tenant_name') is not None:
            self.tenant_name = m.get('tenant_name')
        return self


class ListAppportraitAppResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[AppPortraitAppList] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 应用名称列表数据
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = AppPortraitAppList()
                self.data.append(temp_model.from_map(k))
        return self


class GetAppportraitAppRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        name: str = None,
        tenant_id: str = None,
        tenant_name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 待查询的应用名称
        self.name = name
        # TenantId
        self.tenant_id = tenant_id
        # TenantName
        self.tenant_name = tenant_name

    def validate(self):
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.name is not None:
            result['name'] = self.name
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.tenant_name is not None:
            result['tenant_name'] = self.tenant_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('tenant_name') is not None:
            self.tenant_name = m.get('tenant_name')
        return self


class GetAppportraitAppResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[AppPortraitAppGet] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回应用详情信息
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = AppPortraitAppGet()
                self.data.append(temp_model.from_map(k))
        return self


class GetAppportraitYearusabilityRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
        tenant_id: str = None,
        tenant_name: str = None,
        app_id: str = None,
        year: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 工作空间名称Id
        self.workspace_id = workspace_id
        # 租户id
        self.tenant_id = tenant_id
        # 租户名称
        self.tenant_name = tenant_name
        # app_id
        self.app_id = app_id
        # 查询的年份
        self.year = year

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.app_id, 'app_id')
        self.validate_required(self.year, 'year')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.tenant_name is not None:
            result['tenant_name'] = self.tenant_name
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.year is not None:
            result['year'] = self.year
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('tenant_name') is not None:
            self.tenant_name = m.get('tenant_name')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('year') is not None:
            self.year = m.get('year')
        return self


class GetAppportraitYearusabilityResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: AppPortraitAppUsability = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回数据
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            temp_model = AppPortraitAppUsability()
            self.data = temp_model.from_map(m['data'])
        return self


class GetAppportraitMonthusabilityRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
        tenant_id: str = None,
        tenant_name: str = None,
        app_id: str = None,
        month: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 工作空间名称Id
        self.workspace_id = workspace_id
        # 租户id
        self.tenant_id = tenant_id
        # 租户名称
        self.tenant_name = tenant_name
        # app_id
        self.app_id = app_id
        # 查询的月份
        self.month = month

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.app_id, 'app_id')
        self.validate_required(self.month, 'month')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.tenant_name is not None:
            result['tenant_name'] = self.tenant_name
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.month is not None:
            result['month'] = self.month
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('tenant_name') is not None:
            self.tenant_name = m.get('tenant_name')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('month') is not None:
            self.month = m.get('month')
        return self


class GetAppportraitMonthusabilityResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: AppPortraitAppUsability = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回数据
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            temp_model = AppPortraitAppUsability()
            self.data = temp_model.from_map(m['data'])
        return self


class QueryAppportraitUsabilitytrendRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
        tenant_name: str = None,
        tenant_id: str = None,
        app_id: str = None,
        start_timestamp: str = None,
        end_timestamp: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace_id
        self.workspace_id = workspace_id
        # tenant_name
        self.tenant_name = tenant_name
        # tenant_id
        self.tenant_id = tenant_id
        # app_id
        self.app_id = app_id
        # 查询开始时间
        self.start_timestamp = start_timestamp
        # 查询结束时间
        self.end_timestamp = end_timestamp

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.app_id, 'app_id')
        self.validate_required(self.start_timestamp, 'start_timestamp')
        if self.start_timestamp is not None:
            self.validate_pattern(self.start_timestamp, 'start_timestamp', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.end_timestamp, 'end_timestamp')
        if self.end_timestamp is not None:
            self.validate_pattern(self.end_timestamp, 'end_timestamp', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.tenant_name is not None:
            result['tenant_name'] = self.tenant_name
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.start_timestamp is not None:
            result['start_timestamp'] = self.start_timestamp
        if self.end_timestamp is not None:
            result['end_timestamp'] = self.end_timestamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('tenant_name') is not None:
            self.tenant_name = m.get('tenant_name')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('start_timestamp') is not None:
            self.start_timestamp = m.get('start_timestamp')
        if m.get('end_timestamp') is not None:
            self.end_timestamp = m.get('end_timestamp')
        return self


class QueryAppportraitUsabilitytrendResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[AppPortraitAppUsabilityTrendQuery] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 应用可用性趋势列表
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = AppPortraitAppUsabilityTrendQuery()
                self.data.append(temp_model.from_map(k))
        return self


class QueryAppportraitHealthscoreRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
        tenant_name: str = None,
        tenant_id: str = None,
        app_id: str = None,
        start_timestamp: str = None,
        end_timestamp: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace_id
        self.workspace_id = workspace_id
        # tenant_name
        self.tenant_name = tenant_name
        # tenant_id
        self.tenant_id = tenant_id
        # app_id
        self.app_id = app_id
        # 查询开始时间
        self.start_timestamp = start_timestamp
        # 查询结束时间
        self.end_timestamp = end_timestamp

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.app_id, 'app_id')
        self.validate_required(self.start_timestamp, 'start_timestamp')
        if self.start_timestamp is not None:
            self.validate_pattern(self.start_timestamp, 'start_timestamp', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.end_timestamp, 'end_timestamp')
        if self.end_timestamp is not None:
            self.validate_pattern(self.end_timestamp, 'end_timestamp', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.tenant_name is not None:
            result['tenant_name'] = self.tenant_name
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.start_timestamp is not None:
            result['start_timestamp'] = self.start_timestamp
        if self.end_timestamp is not None:
            result['end_timestamp'] = self.end_timestamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('tenant_name') is not None:
            self.tenant_name = m.get('tenant_name')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('start_timestamp') is not None:
            self.start_timestamp = m.get('start_timestamp')
        if m.get('end_timestamp') is not None:
            self.end_timestamp = m.get('end_timestamp')
        return self


class QueryAppportraitHealthscoreResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: AppPortraitAppHealthScoreQuery = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 应用健康分查询结果
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            temp_model = AppPortraitAppHealthScoreQuery()
            self.data = temp_model.from_map(m['data'])
        return self


class QueryAppportraitHealthscoretrendRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
        tenant_id: str = None,
        tenant_name: str = None,
        app_id: str = None,
        start_timestamp: str = None,
        end_timestamp: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 工作空间id
        self.workspace_id = workspace_id
        # tenant_id
        self.tenant_id = tenant_id
        # 租户名称
        self.tenant_name = tenant_name
        # 应用id
        self.app_id = app_id
        # 查询开始时间
        self.start_timestamp = start_timestamp
        # 查询结束时间
        self.end_timestamp = end_timestamp

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.app_id, 'app_id')
        self.validate_required(self.start_timestamp, 'start_timestamp')
        if self.start_timestamp is not None:
            self.validate_pattern(self.start_timestamp, 'start_timestamp', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.end_timestamp, 'end_timestamp')
        if self.end_timestamp is not None:
            self.validate_pattern(self.end_timestamp, 'end_timestamp', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.tenant_name is not None:
            result['tenant_name'] = self.tenant_name
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.start_timestamp is not None:
            result['start_timestamp'] = self.start_timestamp
        if self.end_timestamp is not None:
            result['end_timestamp'] = self.end_timestamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('tenant_name') is not None:
            self.tenant_name = m.get('tenant_name')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('start_timestamp') is not None:
            self.start_timestamp = m.get('start_timestamp')
        if m.get('end_timestamp') is not None:
            self.end_timestamp = m.get('end_timestamp')
        return self


class QueryAppportraitHealthscoretrendResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[AppPortraitAppHealthScoreTrendQuery] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 应用画像健康分趋势
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = AppPortraitAppHealthScoreTrendQuery()
                self.data.append(temp_model.from_map(k))
        return self


class QueryAppportraitAlertcounttrendRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
        tenant_id: str = None,
        tenant_name: str = None,
        app_id: str = None,
        start_timestamp: str = None,
        end_timestamp: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace_id
        self.workspace_id = workspace_id
        # tenant_id
        self.tenant_id = tenant_id
        # tenant_name
        self.tenant_name = tenant_name
        # app_id
        self.app_id = app_id
        # 查询开始时间
        self.start_timestamp = start_timestamp
        # 查询结束时间
        self.end_timestamp = end_timestamp

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.app_id, 'app_id')
        self.validate_required(self.start_timestamp, 'start_timestamp')
        if self.start_timestamp is not None:
            self.validate_pattern(self.start_timestamp, 'start_timestamp', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.end_timestamp, 'end_timestamp')
        if self.end_timestamp is not None:
            self.validate_pattern(self.end_timestamp, 'end_timestamp', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.tenant_name is not None:
            result['tenant_name'] = self.tenant_name
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.start_timestamp is not None:
            result['start_timestamp'] = self.start_timestamp
        if self.end_timestamp is not None:
            result['end_timestamp'] = self.end_timestamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('tenant_name') is not None:
            self.tenant_name = m.get('tenant_name')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('start_timestamp') is not None:
            self.start_timestamp = m.get('start_timestamp')
        if m.get('end_timestamp') is not None:
            self.end_timestamp = m.get('end_timestamp')
        return self


class QueryAppportraitAlertcounttrendResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[AppPortraitAlertCountTrend] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 应用画像告警数趋势
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = AppPortraitAlertCountTrend()
                self.data.append(temp_model.from_map(k))
        return self


class ListAppportraitAlertRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
        tenant_id: str = None,
        tenant_name: str = None,
        app_id: str = None,
        start_timestamp: str = None,
        end_timestamp: str = None,
        page_size: int = None,
        page_num: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace_id
        self.workspace_id = workspace_id
        # tenant_id
        self.tenant_id = tenant_id
        # tenant_name
        self.tenant_name = tenant_name
        # app_id
        self.app_id = app_id
        # 查询开始时间
        self.start_timestamp = start_timestamp
        # 查询结束时间
        self.end_timestamp = end_timestamp
        # 分页大小
        self.page_size = page_size
        # 当前页码，从1开始
        self.page_num = page_num

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.app_id, 'app_id')
        self.validate_required(self.start_timestamp, 'start_timestamp')
        if self.start_timestamp is not None:
            self.validate_pattern(self.start_timestamp, 'start_timestamp', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.end_timestamp, 'end_timestamp')
        if self.end_timestamp is not None:
            self.validate_pattern(self.end_timestamp, 'end_timestamp', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.tenant_name is not None:
            result['tenant_name'] = self.tenant_name
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.start_timestamp is not None:
            result['start_timestamp'] = self.start_timestamp
        if self.end_timestamp is not None:
            result['end_timestamp'] = self.end_timestamp
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.page_num is not None:
            result['page_num'] = self.page_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('tenant_name') is not None:
            self.tenant_name = m.get('tenant_name')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('start_timestamp') is not None:
            self.start_timestamp = m.get('start_timestamp')
        if m.get('end_timestamp') is not None:
            self.end_timestamp = m.get('end_timestamp')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        return self


class ListAppportraitAlertResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[AppPortraitAlertList] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回数据
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = AppPortraitAlertList()
                self.data.append(temp_model.from_map(k))
        return self


class GetAppportraitEcsusageRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
        tenant_id: str = None,
        tenant_name: str = None,
        app_id: str = None,
        start_timestamp: str = None,
        end_timestamp: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace_id
        self.workspace_id = workspace_id
        # tenant_id
        self.tenant_id = tenant_id
        # tenant_name
        self.tenant_name = tenant_name
        # app_id
        self.app_id = app_id
        # 查询开始时间
        self.start_timestamp = start_timestamp
        # 查询结束时间
        self.end_timestamp = end_timestamp

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.app_id, 'app_id')
        self.validate_required(self.start_timestamp, 'start_timestamp')
        if self.start_timestamp is not None:
            self.validate_pattern(self.start_timestamp, 'start_timestamp', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.end_timestamp, 'end_timestamp')
        if self.end_timestamp is not None:
            self.validate_pattern(self.end_timestamp, 'end_timestamp', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.tenant_name is not None:
            result['tenant_name'] = self.tenant_name
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.start_timestamp is not None:
            result['start_timestamp'] = self.start_timestamp
        if self.end_timestamp is not None:
            result['end_timestamp'] = self.end_timestamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('tenant_name') is not None:
            self.tenant_name = m.get('tenant_name')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('start_timestamp') is not None:
            self.start_timestamp = m.get('start_timestamp')
        if m.get('end_timestamp') is not None:
            self.end_timestamp = m.get('end_timestamp')
        return self


class GetAppportraitEcsusageResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: AppPortraitEcsUsageGet = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回数据
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            temp_model = AppPortraitEcsUsageGet()
            self.data = temp_model.from_map(m['data'])
        return self


class QueryAppportraitContainerusageRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
        tenant_id: str = None,
        tenant_name: str = None,
        app_id: str = None,
        start_timestamp: str = None,
        end_timestamp: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace_id
        self.workspace_id = workspace_id
        # tenant_id
        self.tenant_id = tenant_id
        # tenant_name
        self.tenant_name = tenant_name
        # app_id
        self.app_id = app_id
        # 查询开始时间
        self.start_timestamp = start_timestamp
        # 查询结束时间
        self.end_timestamp = end_timestamp

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.app_id, 'app_id')
        self.validate_required(self.start_timestamp, 'start_timestamp')
        if self.start_timestamp is not None:
            self.validate_pattern(self.start_timestamp, 'start_timestamp', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.end_timestamp, 'end_timestamp')
        if self.end_timestamp is not None:
            self.validate_pattern(self.end_timestamp, 'end_timestamp', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.tenant_name is not None:
            result['tenant_name'] = self.tenant_name
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.start_timestamp is not None:
            result['start_timestamp'] = self.start_timestamp
        if self.end_timestamp is not None:
            result['end_timestamp'] = self.end_timestamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('tenant_name') is not None:
            self.tenant_name = m.get('tenant_name')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('start_timestamp') is not None:
            self.start_timestamp = m.get('start_timestamp')
        if m.get('end_timestamp') is not None:
            self.end_timestamp = m.get('end_timestamp')
        return self


class QueryAppportraitContainerusageResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[AppPortraitContainerUsageList] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回数据
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = AppPortraitContainerUsageList()
                self.data.append(temp_model.from_map(k))
        return self


class ListAppportraitActiontrailRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
        tenant_id: str = None,
        tenant_name: str = None,
        app_id: str = None,
        start_timestamp: str = None,
        end_timestamp: str = None,
        page_size: int = None,
        page_num: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace_id
        self.workspace_id = workspace_id
        # tenant_id
        self.tenant_id = tenant_id
        # tenant_name
        self.tenant_name = tenant_name
        # 应用id
        self.app_id = app_id
        # 查询开始时间
        self.start_timestamp = start_timestamp
        # 查询结束时间
        self.end_timestamp = end_timestamp
        # 分页大小，默认为10，默
        self.page_size = page_size
        # 当前页码，从1开始
        self.page_num = page_num

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.app_id, 'app_id')
        self.validate_required(self.start_timestamp, 'start_timestamp')
        if self.start_timestamp is not None:
            self.validate_pattern(self.start_timestamp, 'start_timestamp', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.end_timestamp, 'end_timestamp')
        if self.end_timestamp is not None:
            self.validate_pattern(self.end_timestamp, 'end_timestamp', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        self.validate_required(self.page_size, 'page_size')
        self.validate_required(self.page_num, 'page_num')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.tenant_name is not None:
            result['tenant_name'] = self.tenant_name
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.start_timestamp is not None:
            result['start_timestamp'] = self.start_timestamp
        if self.end_timestamp is not None:
            result['end_timestamp'] = self.end_timestamp
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.page_num is not None:
            result['page_num'] = self.page_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('tenant_name') is not None:
            self.tenant_name = m.get('tenant_name')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('start_timestamp') is not None:
            self.start_timestamp = m.get('start_timestamp')
        if m.get('end_timestamp') is not None:
            self.end_timestamp = m.get('end_timestamp')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        return self


class ListAppportraitActiontrailResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[AppPortraitActionTrailQuery] = None,
        page_num: int = None,
        page_size: int = None,
        total: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回数据
        self.data = data
        # 页数
        self.page_num = page_num
        # 每页大小，默认10
        self.page_size = page_size
        # 总数
        self.total = total

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total is not None:
            result['total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = AppPortraitActionTrailQuery()
                self.data.append(temp_model.from_map(k))
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total') is not None:
            self.total = m.get('total')
        return self


class ListAppportraitNodeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
        app_id: str = None,
        tenant_id: str = None,
        tenant_name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace_id
        self.workspace_id = workspace_id
        # app_id
        self.app_id = app_id
        # tenant_id
        self.tenant_id = tenant_id
        # tenant_name
        self.tenant_name = tenant_name

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.app_id, 'app_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.tenant_name is not None:
            result['tenant_name'] = self.tenant_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('tenant_name') is not None:
            self.tenant_name = m.get('tenant_name')
        return self


class ListAppportraitNodeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: AppPortraitAppNodeList = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回数据
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            temp_model = AppPortraitAppNodeList()
            self.data = temp_model.from_map(m['data'])
        return self


class CreateComputerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_id: str = None,
        app_service_id: str = None,
        auto_renew: bool = None,
        auto_renew_period: int = None,
        cell_id: str = None,
        common_image_sequence: str = None,
        cpu_shared: bool = None,
        data_disks: List[DataDisk] = None,
        deploy_mode: str = None,
        description: str = None,
        distinct_name: bool = None,
        image_sequence: str = None,
        instance_charge_type: str = None,
        instance_count: int = None,
        name: str = None,
        password: str = None,
        period: int = None,
        period_unit: str = None,
        security_group_sequence: str = None,
        spec_id: str = None,
        system_disk_size: int = None,
        system_disk_type: str = None,
        v_switch_id: str = None,
        workspace: str = None,
        workspace_id: str = None,
        zone: str = None,
        zone_id: str = None,
        tags: List[MapStringToStringEntity] = None,
        vpc_iaas_id: str = None,
        cloud_manage_token: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # app id
        self.app_id = app_id
        # app service id
        self.app_service_id = app_service_id
        # 是否自动续费
        self.auto_renew = auto_renew
        # 每次自动续费的时长，当参数AutoRenew取值True时为必填取值范围：
        # 1
        # 2
        # 3
        # 6
        # 12
        # 
        self.auto_renew_period = auto_renew_period
        # cell id
        self.cell_id = cell_id
        # 通用镜像文件ID，启动实例时选择的镜像资源。
        # 
        self.common_image_sequence = common_image_sequence
        # AKE模式下可以指定此值
        self.cpu_shared = cpu_shared
        # 数据盘信息
        self.data_disks = data_disks
        # sigma模式取值，公有云模式下无意义
        self.deploy_mode = deploy_mode
        # 实例描述
        # 
        self.description = description
        # 是否使用全局唯一名称
        self.distinct_name = distinct_name
        # 自定义镜像文件ID，启动实例时选择的镜像资源。
        # 
        self.image_sequence = image_sequence
        # 计费方式，默认按量计费
        self.instance_charge_type = instance_charge_type
        # 创建的实例数量。默认为 1 台
        self.instance_count = instance_count
        # 实例名称前缀。可包含小写字母(a-z)，数字(0-9) 和中划线(-)，以字母开头，中划线不能结尾或连续使用，2 ~ 40 个字符。
        self.name = name
        # 实例的密码。长度为8至30个字符，必须同时包含大小写英文字母、数字和特殊符号中的三类字符。特殊符号可以是： ()`~!@#^&*-_+=|{}[]:;_<>,.?/ 其中，Windows实例不能以斜线号（/）为密码首字符。
        self.password = password
        # 购买资源的时长，单位为：月。当参数 InstanceChargeType 取值为 PrePaid 时才生效且为必选值。取值范围：1 - 9
        # 12
        # 24
        # 36
        # 48
        # 60
        # 
        self.period = period
        # 购买资源的时长。可选值Week | Month。
        # PeriodUnit 为 Week 时：
        # Period 取值 {“1”, “2”, “3”, “4”}
        # AutoRenewPeriod 取值 {“1”, “2”, “3”}
        # Period 取值 { “1”, “2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”, “12”, “24”, “36”,”48”,”60”}
        # AutoRenewPeriod 取值 {“1”, “2”, “3”, “6”, “12”}
        # 默认值：Month
        self.period_unit = period_unit
        # 新创建实例所属于的安全组/域序列号，同一个安全组内的实例之间可以互相访问。
        self.security_group_sequence = security_group_sequence
        # 实例的资源规格。
        # 
        self.spec_id = spec_id
        # 单位 G。系统盘大小，需根据选择的 image 类型决定。
        self.system_disk_size = system_disk_size
        # 系统盘类型
        # 
        self.system_disk_type = system_disk_type
        # VPC类型的实例，需要指定虚拟交换机ID。
        self.v_switch_id = v_switch_id
        # 实例所在工作空间
        self.workspace = workspace
        # workspace_id
        self.workspace_id = workspace_id
        # 实例所在可用区的 zone identity
        self.zone = zone
        # zone_id如果为空，则zone必填，建议使用zone_id
        self.zone_id = zone_id
        # 公有云上标签
        self.tags = tags
        # cmp模式下使用的vpc，一般场景勿用
        self.vpc_iaas_id = vpc_iaas_id
        # cmp模式下传的token，一般场景勿用
        self.cloud_manage_token = cloud_manage_token

    def validate(self):
        if self.data_disks:
            for k in self.data_disks:
                if k:
                    k.validate()
        if self.name is not None:
            self.validate_max_length(self.name, 'name', 40)
        if self.password is not None:
            self.validate_max_length(self.password, 'password', 30)
        self.validate_required(self.security_group_sequence, 'security_group_sequence')
        self.validate_required(self.spec_id, 'spec_id')
        self.validate_required(self.system_disk_size, 'system_disk_size')
        self.validate_required(self.system_disk_type, 'system_disk_type')
        self.validate_required(self.workspace, 'workspace')
        self.validate_required(self.zone, 'zone')
        if self.tags:
            for k in self.tags:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.app_service_id is not None:
            result['app_service_id'] = self.app_service_id
        if self.auto_renew is not None:
            result['auto_renew'] = self.auto_renew
        if self.auto_renew_period is not None:
            result['auto_renew_period'] = self.auto_renew_period
        if self.cell_id is not None:
            result['cell_id'] = self.cell_id
        if self.common_image_sequence is not None:
            result['common_image_sequence'] = self.common_image_sequence
        if self.cpu_shared is not None:
            result['cpu_shared'] = self.cpu_shared
        result['data_disks'] = []
        if self.data_disks is not None:
            for k in self.data_disks:
                result['data_disks'].append(k.to_map() if k else None)
        if self.deploy_mode is not None:
            result['deploy_mode'] = self.deploy_mode
        if self.description is not None:
            result['description'] = self.description
        if self.distinct_name is not None:
            result['distinct_name'] = self.distinct_name
        if self.image_sequence is not None:
            result['image_sequence'] = self.image_sequence
        if self.instance_charge_type is not None:
            result['instance_charge_type'] = self.instance_charge_type
        if self.instance_count is not None:
            result['instance_count'] = self.instance_count
        if self.name is not None:
            result['name'] = self.name
        if self.password is not None:
            result['password'] = self.password
        if self.period is not None:
            result['period'] = self.period
        if self.period_unit is not None:
            result['period_unit'] = self.period_unit
        if self.security_group_sequence is not None:
            result['security_group_sequence'] = self.security_group_sequence
        if self.spec_id is not None:
            result['spec_id'] = self.spec_id
        if self.system_disk_size is not None:
            result['system_disk_size'] = self.system_disk_size
        if self.system_disk_type is not None:
            result['system_disk_type'] = self.system_disk_type
        if self.v_switch_id is not None:
            result['v_switch_id'] = self.v_switch_id
        if self.workspace is not None:
            result['workspace'] = self.workspace
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.zone is not None:
            result['zone'] = self.zone
        if self.zone_id is not None:
            result['zone_id'] = self.zone_id
        result['tags'] = []
        if self.tags is not None:
            for k in self.tags:
                result['tags'].append(k.to_map() if k else None)
        if self.vpc_iaas_id is not None:
            result['vpc_iaas_id'] = self.vpc_iaas_id
        if self.cloud_manage_token is not None:
            result['cloud_manage_token'] = self.cloud_manage_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('app_service_id') is not None:
            self.app_service_id = m.get('app_service_id')
        if m.get('auto_renew') is not None:
            self.auto_renew = m.get('auto_renew')
        if m.get('auto_renew_period') is not None:
            self.auto_renew_period = m.get('auto_renew_period')
        if m.get('cell_id') is not None:
            self.cell_id = m.get('cell_id')
        if m.get('common_image_sequence') is not None:
            self.common_image_sequence = m.get('common_image_sequence')
        if m.get('cpu_shared') is not None:
            self.cpu_shared = m.get('cpu_shared')
        self.data_disks = []
        if m.get('data_disks') is not None:
            for k in m.get('data_disks'):
                temp_model = DataDisk()
                self.data_disks.append(temp_model.from_map(k))
        if m.get('deploy_mode') is not None:
            self.deploy_mode = m.get('deploy_mode')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('distinct_name') is not None:
            self.distinct_name = m.get('distinct_name')
        if m.get('image_sequence') is not None:
            self.image_sequence = m.get('image_sequence')
        if m.get('instance_charge_type') is not None:
            self.instance_charge_type = m.get('instance_charge_type')
        if m.get('instance_count') is not None:
            self.instance_count = m.get('instance_count')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('password') is not None:
            self.password = m.get('password')
        if m.get('period') is not None:
            self.period = m.get('period')
        if m.get('period_unit') is not None:
            self.period_unit = m.get('period_unit')
        if m.get('security_group_sequence') is not None:
            self.security_group_sequence = m.get('security_group_sequence')
        if m.get('spec_id') is not None:
            self.spec_id = m.get('spec_id')
        if m.get('system_disk_size') is not None:
            self.system_disk_size = m.get('system_disk_size')
        if m.get('system_disk_type') is not None:
            self.system_disk_type = m.get('system_disk_type')
        if m.get('v_switch_id') is not None:
            self.v_switch_id = m.get('v_switch_id')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('zone') is not None:
            self.zone = m.get('zone')
        if m.get('zone_id') is not None:
            self.zone_id = m.get('zone_id')
        self.tags = []
        if m.get('tags') is not None:
            for k in m.get('tags'):
                temp_model = MapStringToStringEntity()
                self.tags.append(temp_model.from_map(k))
        if m.get('vpc_iaas_id') is not None:
            self.vpc_iaas_id = m.get('vpc_iaas_id')
        if m.get('cloud_manage_token') is not None:
            self.cloud_manage_token = m.get('cloud_manage_token')
        return self


class CreateComputerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        computer_sequences: List[str] = None,
        paas_request_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # computer_sequences
        self.computer_sequences = computer_sequences
        # paas_request_id，可以根据这个值查询日志
        self.paas_request_id = paas_request_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.computer_sequences is not None:
            result['computer_sequences'] = self.computer_sequences
        if self.paas_request_id is not None:
            result['paas_request_id'] = self.paas_request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('computer_sequences') is not None:
            self.computer_sequences = m.get('computer_sequences')
        if m.get('paas_request_id') is not None:
            self.paas_request_id = m.get('paas_request_id')
        return self


class DeleteComputerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        computer_sequences: List[str] = None,
        workspace_id: str = None,
        force: bool = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # computer_sequences
        self.computer_sequences = computer_sequences
        # 后续这个字段必填
        self.workspace_id = workspace_id
        # 是否强制删除
        self.force = force

    def validate(self):
        self.validate_required(self.computer_sequences, 'computer_sequences')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.computer_sequences is not None:
            result['computer_sequences'] = self.computer_sequences
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.force is not None:
            result['force'] = self.force
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('computer_sequences') is not None:
            self.computer_sequences = m.get('computer_sequences')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('force') is not None:
            self.force = m.get('force')
        return self


class DeleteComputerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        paas_request_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # paas_request_id
        self.paas_request_id = paas_request_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.paas_request_id is not None:
            result['paas_request_id'] = self.paas_request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('paas_request_id') is not None:
            self.paas_request_id = m.get('paas_request_id')
        return self


class ImportComputerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        computer_ids: List[str] = None,
        workspace: str = None,
        zone: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # computer iaas ids
        self.computer_ids = computer_ids
        # workspace 名称
        self.workspace = workspace
        # computer 所在的 zone identity。可不填。
        self.zone = zone

    def validate(self):
        self.validate_required(self.computer_ids, 'computer_ids')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.computer_ids is not None:
            result['computer_ids'] = self.computer_ids
        if self.workspace is not None:
            result['workspace'] = self.workspace
        if self.zone is not None:
            result['zone'] = self.zone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('computer_ids') is not None:
            self.computer_ids = m.get('computer_ids')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        if m.get('zone') is not None:
            self.zone = m.get('zone')
        return self


class ImportComputerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        computer_id_mapping: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 导入的 computer 序列号
        self.computer_id_mapping = computer_id_mapping

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.computer_id_mapping is not None:
            result['computer_id_mapping'] = self.computer_id_mapping
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('computer_id_mapping') is not None:
            self.computer_id_mapping = m.get('computer_id_mapping')
        return self


class CreateDatabaseRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        database_accounts: List[DatabaseAccount] = None,
        database_schema: DatabaseSchema = None,
        engine: str = None,
        engine_version: str = None,
        instance_count: int = None,
        name: str = None,
        spec_id: str = None,
        storage_size: int = None,
        type: str = None,
        v_switch_id: str = None,
        workspace: str = None,
        app_service_ids: List[str] = None,
        app_ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 数据库账户
        self.database_accounts = database_accounts
        # db schema
        self.database_schema = database_schema
        # db 引擎，默认为在 MYSQL
        self.engine = engine
        # 引擎版本，默认为 MYSQL6
        self.engine_version = engine_version
        # 创建的实例数量。默认为 1 台
        self.instance_count = instance_count
        # database 名称
        self.name = name
        # db 规格。
        self.spec_id = spec_id
        # db 存储空间大小
        self.storage_size = storage_size
        # database 类型，默认为 DATABASE 类型
        self.type = type
        # VPC类型的实例，需要指定虚拟交换机ID。
        self.v_switch_id = v_switch_id
        # database 所在工作空间
        self.workspace = workspace
        # app service ids
        self.app_service_ids = app_service_ids
        # app ids
        self.app_ids = app_ids

    def validate(self):
        if self.database_accounts:
            for k in self.database_accounts:
                if k:
                    k.validate()
        if self.database_schema:
            self.database_schema.validate()
        self.validate_required(self.spec_id, 'spec_id')
        self.validate_required(self.storage_size, 'storage_size')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        result['database_accounts'] = []
        if self.database_accounts is not None:
            for k in self.database_accounts:
                result['database_accounts'].append(k.to_map() if k else None)
        if self.database_schema is not None:
            result['database_schema'] = self.database_schema.to_map()
        if self.engine is not None:
            result['engine'] = self.engine
        if self.engine_version is not None:
            result['engine_version'] = self.engine_version
        if self.instance_count is not None:
            result['instance_count'] = self.instance_count
        if self.name is not None:
            result['name'] = self.name
        if self.spec_id is not None:
            result['spec_id'] = self.spec_id
        if self.storage_size is not None:
            result['storage_size'] = self.storage_size
        if self.type is not None:
            result['type'] = self.type
        if self.v_switch_id is not None:
            result['v_switch_id'] = self.v_switch_id
        if self.workspace is not None:
            result['workspace'] = self.workspace
        if self.app_service_ids is not None:
            result['app_service_ids'] = self.app_service_ids
        if self.app_ids is not None:
            result['app_ids'] = self.app_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        self.database_accounts = []
        if m.get('database_accounts') is not None:
            for k in m.get('database_accounts'):
                temp_model = DatabaseAccount()
                self.database_accounts.append(temp_model.from_map(k))
        if m.get('database_schema') is not None:
            temp_model = DatabaseSchema()
            self.database_schema = temp_model.from_map(m['database_schema'])
        if m.get('engine') is not None:
            self.engine = m.get('engine')
        if m.get('engine_version') is not None:
            self.engine_version = m.get('engine_version')
        if m.get('instance_count') is not None:
            self.instance_count = m.get('instance_count')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('spec_id') is not None:
            self.spec_id = m.get('spec_id')
        if m.get('storage_size') is not None:
            self.storage_size = m.get('storage_size')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('v_switch_id') is not None:
            self.v_switch_id = m.get('v_switch_id')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        if m.get('app_service_ids') is not None:
            self.app_service_ids = m.get('app_service_ids')
        if m.get('app_ids') is not None:
            self.app_ids = m.get('app_ids')
        return self


class CreateDatabaseResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        database_sequences: List[str] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # database 实例 ids
        self.database_sequences = database_sequences

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.database_sequences is not None:
            result['database_sequences'] = self.database_sequences
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('database_sequences') is not None:
            self.database_sequences = m.get('database_sequences')
        return self


class ImportDatabaseRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        database_ids: List[str] = None,
        type: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # database iaas ids
        self.database_ids = database_ids
        # database 类型，默认为 DATABASE 类型
        self.type = type
        # 工作空间
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.database_ids, 'database_ids')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.database_ids is not None:
            result['database_ids'] = self.database_ids
        if self.type is not None:
            result['type'] = self.type
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('database_ids') is not None:
            self.database_ids = m.get('database_ids')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class ImportDatabaseResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        database_id_mapping: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 导入的 computer 序列号
        self.database_id_mapping = database_id_mapping

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.database_id_mapping is not None:
            result['database_id_mapping'] = self.database_id_mapping
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('database_id_mapping') is not None:
            self.database_id_mapping = m.get('database_id_mapping')
        return self


class DeleteDatabaseRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        database_sequences: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # database 序列号
        self.database_sequences = database_sequences

    def validate(self):
        self.validate_required(self.database_sequences, 'database_sequences')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.database_sequences is not None:
            result['database_sequences'] = self.database_sequences
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('database_sequences') is not None:
            self.database_sequences = m.get('database_sequences')
        return self


class DeleteDatabaseResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class CreateLoadbalanceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        address_type: str = None,
        app_id: str = None,
        app_service_id: str = None,
        cluster_mode: bool = None,
        instance_count: int = None,
        internet_charge_type: str = None,
        listeners: List[str] = None,
        name: str = None,
        share_mode: bool = None,
        vip_type: str = None,
        v_switch_id: str = None,
        workspace: str = None,
        workspace_id: str = None,
        zone_id: str = None,
        load_balancer_spec: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 负载均衡实例的网络类型。有 INTERNET 和 INTRANET
        self.address_type = address_type
        # app id
        self.app_id = app_id
        # app service id
        self.app_service_id = app_service_id
        # cluster_mode
        self.cluster_mode = cluster_mode
        # 
        # 创建的实例数量。默认为 1 台
        self.instance_count = instance_count
        # 公网类型实例的付费方式。取值：
        # PAY_BY_BANDWIDTH：按带宽计费。
        # PAY_BY_TRAFFIC：按流量计费（默认值）。
        self.internet_charge_type = internet_charge_type
        # listener JSON Array
        self.listeners = listeners
        # 名称
        self.name = name
        # 共享模式
        self.share_mode = share_mode
        # ALB模式专用
        self.vip_type = vip_type
        # VPC类型的实例，需要指定虚拟交换机ID。
        self.v_switch_id = v_switch_id
        # 工作空间
        self.workspace = workspace
        # workspace_id
        self.workspace_id = workspace_id
        # 可用区
        self.zone_id = zone_id
        # 负载均衡实例的规格。取值：
        # 
        # slb.s1.small
        # slb.s2.small
        # slb.s2.medium
        # slb.s3.small
        # slb.s3.medium
        # slb.s3.large
        # 每个地域支持的规格不同。
        # 
        # 目前支持性能保障型实例的地域有：华北 1（青岛）、华北 2（北京）、华东 1（杭州）、华东 2（上海）、华南 1（深圳）、华北 3（张家口）、华北 5 （呼和浩特）、亚太东南 1（新加坡）、英国（伦敦）、欧洲中部 1（法兰克福）、亚太东南 2（悉尼）、亚太东南 3（吉隆坡）、中东东部 1（迪拜）、亚太东南 5（雅加达）、美西 1（硅谷）、亚太南部 1（孟买）、亚太东北 1（东京）、中国香港和美东 1（弗吉尼亚）
        self.load_balancer_spec = load_balancer_spec

    def validate(self):
        self.validate_required(self.share_mode, 'share_mode')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.address_type is not None:
            result['address_type'] = self.address_type
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.app_service_id is not None:
            result['app_service_id'] = self.app_service_id
        if self.cluster_mode is not None:
            result['cluster_mode'] = self.cluster_mode
        if self.instance_count is not None:
            result['instance_count'] = self.instance_count
        if self.internet_charge_type is not None:
            result['internet_charge_type'] = self.internet_charge_type
        if self.listeners is not None:
            result['listeners'] = self.listeners
        if self.name is not None:
            result['name'] = self.name
        if self.share_mode is not None:
            result['share_mode'] = self.share_mode
        if self.vip_type is not None:
            result['vip_type'] = self.vip_type
        if self.v_switch_id is not None:
            result['v_switch_id'] = self.v_switch_id
        if self.workspace is not None:
            result['workspace'] = self.workspace
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.zone_id is not None:
            result['zone_id'] = self.zone_id
        if self.load_balancer_spec is not None:
            result['load_balancer_spec'] = self.load_balancer_spec
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('address_type') is not None:
            self.address_type = m.get('address_type')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('app_service_id') is not None:
            self.app_service_id = m.get('app_service_id')
        if m.get('cluster_mode') is not None:
            self.cluster_mode = m.get('cluster_mode')
        if m.get('instance_count') is not None:
            self.instance_count = m.get('instance_count')
        if m.get('internet_charge_type') is not None:
            self.internet_charge_type = m.get('internet_charge_type')
        if m.get('listeners') is not None:
            self.listeners = m.get('listeners')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('share_mode') is not None:
            self.share_mode = m.get('share_mode')
        if m.get('vip_type') is not None:
            self.vip_type = m.get('vip_type')
        if m.get('v_switch_id') is not None:
            self.v_switch_id = m.get('v_switch_id')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('zone_id') is not None:
            self.zone_id = m.get('zone_id')
        if m.get('load_balancer_spec') is not None:
            self.load_balancer_spec = m.get('load_balancer_spec')
        return self


class CreateLoadbalanceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        loadbalance_sequences: List[str] = None,
        paas_request_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 实例 id
        self.loadbalance_sequences = loadbalance_sequences
        # paas_request_id
        self.paas_request_id = paas_request_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.loadbalance_sequences is not None:
            result['loadbalance_sequences'] = self.loadbalance_sequences
        if self.paas_request_id is not None:
            result['paas_request_id'] = self.paas_request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('loadbalance_sequences') is not None:
            self.loadbalance_sequences = m.get('loadbalance_sequences')
        if m.get('paas_request_id') is not None:
            self.paas_request_id = m.get('paas_request_id')
        return self


class DeleteLoadbalanceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        loadbalance_sequences: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # loadbalance 序列号
        self.loadbalance_sequences = loadbalance_sequences

    def validate(self):
        self.validate_required(self.loadbalance_sequences, 'loadbalance_sequences')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.loadbalance_sequences is not None:
            result['loadbalance_sequences'] = self.loadbalance_sequences
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('loadbalance_sequences') is not None:
            self.loadbalance_sequences = m.get('loadbalance_sequences')
        return self


class DeleteLoadbalanceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        paas_request_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # paas_request_id
        self.paas_request_id = paas_request_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.paas_request_id is not None:
            result['paas_request_id'] = self.paas_request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('paas_request_id') is not None:
            self.paas_request_id = m.get('paas_request_id')
        return self


class ImportLoadbalanceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        loadbalance_ids: List[str] = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # loadbalance iaas ids
        self.loadbalance_ids = loadbalance_ids
        # 工作空间
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.loadbalance_ids, 'loadbalance_ids')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.loadbalance_ids is not None:
            result['loadbalance_ids'] = self.loadbalance_ids
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('loadbalance_ids') is not None:
            self.loadbalance_ids = m.get('loadbalance_ids')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class ImportLoadbalanceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        loadbalance_id_mapping: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 导入的 loadbalance 序列号
        self.loadbalance_id_mapping = loadbalance_id_mapping

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.loadbalance_id_mapping is not None:
            result['loadbalance_id_mapping'] = self.loadbalance_id_mapping
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('loadbalance_id_mapping') is not None:
            self.loadbalance_id_mapping = m.get('loadbalance_id_mapping')
        return self


class CreateVpcRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        cidr_lock: str = None,
        name: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 专有网络网段
        self.cidr_lock = cidr_lock
        # 名称
        self.name = name
        # 工作空间
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.cidr_lock, 'cidr_lock')
        self.validate_required(self.name, 'name')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.cidr_lock is not None:
            result['cidr_lock'] = self.cidr_lock
        if self.name is not None:
            result['name'] = self.name
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('cidr_lock') is not None:
            self.cidr_lock = m.get('cidr_lock')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class CreateVpcResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        vpc_sequence: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 专有网络序列号
        self.vpc_sequence = vpc_sequence

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.vpc_sequence is not None:
            result['vpc_sequence'] = self.vpc_sequence
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('vpc_sequence') is not None:
            self.vpc_sequence = m.get('vpc_sequence')
        return self


class DeleteVpcRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        vpc_sequence: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 专有网络序列号
        self.vpc_sequence = vpc_sequence

    def validate(self):
        self.validate_required(self.vpc_sequence, 'vpc_sequence')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.vpc_sequence is not None:
            result['vpc_sequence'] = self.vpc_sequence
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('vpc_sequence') is not None:
            self.vpc_sequence = m.get('vpc_sequence')
        return self


class DeleteVpcResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class ReleaseComputerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        computer_sequences: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 需要释放的 computer ids
        self.computer_sequences = computer_sequences

    def validate(self):
        self.validate_required(self.computer_sequences, 'computer_sequences')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.computer_sequences is not None:
            result['computer_sequences'] = self.computer_sequences
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('computer_sequences') is not None:
            self.computer_sequences = m.get('computer_sequences')
        return self


class ReleaseComputerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class ReinitComputerPasswordRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        computer_sequence: str = None,
        password: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # computer_sequence
        self.computer_sequence = computer_sequence
        # 密码
        self.password = password

    def validate(self):
        self.validate_required(self.computer_sequence, 'computer_sequence')
        self.validate_required(self.password, 'password')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.computer_sequence is not None:
            result['computer_sequence'] = self.computer_sequence
        if self.password is not None:
            result['password'] = self.password
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('computer_sequence') is not None:
            self.computer_sequence = m.get('computer_sequence')
        if m.get('password') is not None:
            self.password = m.get('password')
        return self


class ReinitComputerPasswordResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class ReleaseDatabaseRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_ids: List[str] = None,
        app_service_ids: List[str] = None,
        database_sequences: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 需要释放的应用 ids
        self.app_ids = app_ids
        # 应用实例 ids
        self.app_service_ids = app_service_ids
        # 需要释放应用的 database sequence
        self.database_sequences = database_sequences

    def validate(self):
        self.validate_required(self.database_sequences, 'database_sequences')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_ids is not None:
            result['app_ids'] = self.app_ids
        if self.app_service_ids is not None:
            result['app_service_ids'] = self.app_service_ids
        if self.database_sequences is not None:
            result['database_sequences'] = self.database_sequences
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_ids') is not None:
            self.app_ids = m.get('app_ids')
        if m.get('app_service_ids') is not None:
            self.app_service_ids = m.get('app_service_ids')
        if m.get('database_sequences') is not None:
            self.database_sequences = m.get('database_sequences')
        return self


class ReleaseDatabaseResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class RemoveComputerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        computer_sequences: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # computer ids
        self.computer_sequences = computer_sequences

    def validate(self):
        self.validate_required(self.computer_sequences, 'computer_sequences')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.computer_sequences is not None:
            result['computer_sequences'] = self.computer_sequences
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('computer_sequences') is not None:
            self.computer_sequences = m.get('computer_sequences')
        return self


class RemoveComputerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class RemoveLoadbalanceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        loadbalance_sequences: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # lb ids
        self.loadbalance_sequences = loadbalance_sequences

    def validate(self):
        self.validate_required(self.loadbalance_sequences, 'loadbalance_sequences')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.loadbalance_sequences is not None:
            result['loadbalance_sequences'] = self.loadbalance_sequences
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('loadbalance_sequences') is not None:
            self.loadbalance_sequences = m.get('loadbalance_sequences')
        return self


class RemoveLoadbalanceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class RemoveDatabaseRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        database_sequences: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # database ids
        self.database_sequences = database_sequences

    def validate(self):
        self.validate_required(self.database_sequences, 'database_sequences')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.database_sequences is not None:
            result['database_sequences'] = self.database_sequences
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('database_sequences') is not None:
            self.database_sequences = m.get('database_sequences')
        return self


class RemoveDatabaseResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class ReleaseLoadbalanceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        loadbalance_sequences: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # loadbalance ids
        self.loadbalance_sequences = loadbalance_sequences

    def validate(self):
        self.validate_required(self.loadbalance_sequences, 'loadbalance_sequences')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.loadbalance_sequences is not None:
            result['loadbalance_sequences'] = self.loadbalance_sequences
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('loadbalance_sequences') is not None:
            self.loadbalance_sequences = m.get('loadbalance_sequences')
        return self


class ReleaseLoadbalanceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class CreateDatabaseAccountRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        database_sequence: str = None,
        name: str = None,
        password: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # database 序列号
        self.database_sequence = database_sequence
        # 账户名称
        self.name = name
        # 账户密码
        self.password = password

    def validate(self):
        self.validate_required(self.database_sequence, 'database_sequence')
        self.validate_required(self.name, 'name')
        self.validate_required(self.password, 'password')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.database_sequence is not None:
            result['database_sequence'] = self.database_sequence
        if self.name is not None:
            result['name'] = self.name
        if self.password is not None:
            result['password'] = self.password
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('database_sequence') is not None:
            self.database_sequence = m.get('database_sequence')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('password') is not None:
            self.password = m.get('password')
        return self


class CreateDatabaseAccountResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        account_sequence: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 账户序列号
        self.account_sequence = account_sequence

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.account_sequence is not None:
            result['account_sequence'] = self.account_sequence
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('account_sequence') is not None:
            self.account_sequence = m.get('account_sequence')
        return self


class CreateSecuritygroupRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        description: str = None,
        name: str = None,
        region: str = None,
        workspace: str = None,
        type: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 描述
        self.description = description
        # 安全域/组 名称
        self.name = name
        # 所在区域
        self.region = region
        # 工作空间名称
        self.workspace = workspace
        # SECURITY_GROUP | SECURITY_ZONE
        # 默认为安全组
        self.type = type

    def validate(self):
        self.validate_required(self.name, 'name')
        self.validate_required(self.region, 'region')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.description is not None:
            result['description'] = self.description
        if self.name is not None:
            result['name'] = self.name
        if self.region is not None:
            result['region'] = self.region
        if self.workspace is not None:
            result['workspace'] = self.workspace
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class CreateSecuritygroupResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        security_group_sequence: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 安全组/域 序列号
        self.security_group_sequence = security_group_sequence

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.security_group_sequence is not None:
            result['security_group_sequence'] = self.security_group_sequence
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('security_group_sequence') is not None:
            self.security_group_sequence = m.get('security_group_sequence')
        return self


class ImportSecuritygroupRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        securitygroup_id: str = None,
        name: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # sg-zm042uh9f8gb1lfcsng6 的 iaas 层 id
        self.securitygroup_id = securitygroup_id
        # securityGroup 名称
        self.name = name
        # 工作空间
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.securitygroup_id, 'securitygroup_id')
        self.validate_required(self.name, 'name')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.securitygroup_id is not None:
            result['securitygroup_id'] = self.securitygroup_id
        if self.name is not None:
            result['name'] = self.name
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('securitygroup_id') is not None:
            self.securitygroup_id = m.get('securitygroup_id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class ImportSecuritygroupResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class RemoveSecuritygroupRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        security_group_sequence: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 安全组 id
        self.security_group_sequence = security_group_sequence

    def validate(self):
        self.validate_required(self.security_group_sequence, 'security_group_sequence')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.security_group_sequence is not None:
            result['security_group_sequence'] = self.security_group_sequence
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('security_group_sequence') is not None:
            self.security_group_sequence = m.get('security_group_sequence')
        return self


class RemoveSecuritygroupResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class DeleteSecuritygroupRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        security_group_sequence: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 需要删除的 security group id
        self.security_group_sequence = security_group_sequence

    def validate(self):
        self.validate_required(self.security_group_sequence, 'security_group_sequence')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.security_group_sequence is not None:
            result['security_group_sequence'] = self.security_group_sequence
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('security_group_sequence') is not None:
            self.security_group_sequence = m.get('security_group_sequence')
        return self


class DeleteSecuritygroupResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class DeleteDatabaseSchemaRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        schema_sequence: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 欲删除的的 schema id
        self.schema_sequence = schema_sequence

    def validate(self):
        self.validate_required(self.schema_sequence, 'schema_sequence')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.schema_sequence is not None:
            result['schema_sequence'] = self.schema_sequence
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('schema_sequence') is not None:
            self.schema_sequence = m.get('schema_sequence')
        return self


class DeleteDatabaseSchemaResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class DeleteDatabaseAccountRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        account_sequence: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # account id
        self.account_sequence = account_sequence

    def validate(self):
        self.validate_required(self.account_sequence, 'account_sequence')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.account_sequence is not None:
            result['account_sequence'] = self.account_sequence
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('account_sequence') is not None:
            self.account_sequence = m.get('account_sequence')
        return self


class DeleteDatabaseAccountResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class DeleteVpcVswitchRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        vpc_sequence: str = None,
        vswitch_ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # vpc id
        self.vpc_sequence = vpc_sequence
        # vswitch 的 iaasIds
        self.vswitch_ids = vswitch_ids

    def validate(self):
        self.validate_required(self.vpc_sequence, 'vpc_sequence')
        self.validate_required(self.vswitch_ids, 'vswitch_ids')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.vpc_sequence is not None:
            result['vpc_sequence'] = self.vpc_sequence
        if self.vswitch_ids is not None:
            result['vswitch_ids'] = self.vswitch_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('vpc_sequence') is not None:
            self.vpc_sequence = m.get('vpc_sequence')
        if m.get('vswitch_ids') is not None:
            self.vswitch_ids = m.get('vswitch_ids')
        return self


class DeleteVpcVswitchResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class DeleteLoadbalanceListenerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        listener_port: int = None,
        loadbalance_sequence: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # listener 端口
        self.listener_port = listener_port
        # lb id
        self.loadbalance_sequence = loadbalance_sequence

    def validate(self):
        self.validate_required(self.listener_port, 'listener_port')
        self.validate_required(self.loadbalance_sequence, 'loadbalance_sequence')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.listener_port is not None:
            result['listener_port'] = self.listener_port
        if self.loadbalance_sequence is not None:
            result['loadbalance_sequence'] = self.loadbalance_sequence
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('listener_port') is not None:
            self.listener_port = m.get('listener_port')
        if m.get('loadbalance_sequence') is not None:
            self.loadbalance_sequence = m.get('loadbalance_sequence')
        return self


class DeleteLoadbalanceListenerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        paas_request_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # paas_request_id
        self.paas_request_id = paas_request_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.paas_request_id is not None:
            result['paas_request_id'] = self.paas_request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('paas_request_id') is not None:
            self.paas_request_id = m.get('paas_request_id')
        return self


class DeleteVpcVroutertableRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        destination_cidr_block: str = None,
        next_hop_id: str = None,
        v_route_table_id: str = None,
        vpc_sequence: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 目标网段
        self.destination_cidr_block = destination_cidr_block
        # 下一跳实例 iaas id
        self.next_hop_id = next_hop_id
        # 路由表 iaasId
        self.v_route_table_id = v_route_table_id
        # vpc paas id
        self.vpc_sequence = vpc_sequence

    def validate(self):
        self.validate_required(self.destination_cidr_block, 'destination_cidr_block')
        self.validate_required(self.next_hop_id, 'next_hop_id')
        self.validate_required(self.v_route_table_id, 'v_route_table_id')
        self.validate_required(self.vpc_sequence, 'vpc_sequence')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.destination_cidr_block is not None:
            result['destination_cidr_block'] = self.destination_cidr_block
        if self.next_hop_id is not None:
            result['next_hop_id'] = self.next_hop_id
        if self.v_route_table_id is not None:
            result['v_route_table_id'] = self.v_route_table_id
        if self.vpc_sequence is not None:
            result['vpc_sequence'] = self.vpc_sequence
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('destination_cidr_block') is not None:
            self.destination_cidr_block = m.get('destination_cidr_block')
        if m.get('next_hop_id') is not None:
            self.next_hop_id = m.get('next_hop_id')
        if m.get('v_route_table_id') is not None:
            self.v_route_table_id = m.get('v_route_table_id')
        if m.get('vpc_sequence') is not None:
            self.vpc_sequence = m.get('vpc_sequence')
        return self


class DeleteVpcVroutertableResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class RemoveSecuritygroupInstanceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        security_group_sequence: str = None,
        instance_sequences: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 安全组 paas id
        self.security_group_sequence = security_group_sequence
        # 要移除的实例序列号
        self.instance_sequences = instance_sequences

    def validate(self):
        self.validate_required(self.security_group_sequence, 'security_group_sequence')
        self.validate_required(self.instance_sequences, 'instance_sequences')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.security_group_sequence is not None:
            result['security_group_sequence'] = self.security_group_sequence
        if self.instance_sequences is not None:
            result['instance_sequences'] = self.instance_sequences
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('security_group_sequence') is not None:
            self.security_group_sequence = m.get('security_group_sequence')
        if m.get('instance_sequences') is not None:
            self.instance_sequences = m.get('instance_sequences')
        return self


class RemoveSecuritygroupInstanceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class DeleteSecuritygroupPermissionRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        security_group_sequence: str = None,
        permission_hash: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 安全组 paas id
        self.security_group_sequence = security_group_sequence
        # 12345
        self.permission_hash = permission_hash

    def validate(self):
        self.validate_required(self.security_group_sequence, 'security_group_sequence')
        self.validate_required(self.permission_hash, 'permission_hash')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.security_group_sequence is not None:
            result['security_group_sequence'] = self.security_group_sequence
        if self.permission_hash is not None:
            result['permission_hash'] = self.permission_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('security_group_sequence') is not None:
            self.security_group_sequence = m.get('security_group_sequence')
        if m.get('permission_hash') is not None:
            self.permission_hash = m.get('permission_hash')
        return self


class DeleteSecuritygroupPermissionResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class RemoveLoadbalanceSecurityipRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        ips: List[str] = None,
        listener_port: int = None,
        loadbalance_sequence: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 要删除的 ip
        self.ips = ips
        # 监听器端口
        self.listener_port = listener_port
        # lb paas id
        self.loadbalance_sequence = loadbalance_sequence

    def validate(self):
        self.validate_required(self.ips, 'ips')
        self.validate_required(self.listener_port, 'listener_port')
        self.validate_required(self.loadbalance_sequence, 'loadbalance_sequence')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.ips is not None:
            result['ips'] = self.ips
        if self.listener_port is not None:
            result['listener_port'] = self.listener_port
        if self.loadbalance_sequence is not None:
            result['loadbalance_sequence'] = self.loadbalance_sequence
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('ips') is not None:
            self.ips = m.get('ips')
        if m.get('listener_port') is not None:
            self.listener_port = m.get('listener_port')
        if m.get('loadbalance_sequence') is not None:
            self.loadbalance_sequence = m.get('loadbalance_sequence')
        return self


class RemoveLoadbalanceSecurityipResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class CreateApplicationRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_domain_id: str = None,
        app_level_id: str = None,
        authorization: str = None,
        buildpack_version: str = None,
        chinese_name: str = None,
        code_repository_existed: bool = None,
        code_repository_group_name: str = None,
        code_repository_name: str = None,
        code_repository_type: str = None,
        description: str = None,
        name: str = None,
        owner_id: str = None,
        stack_id: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 应用分组 id
        self.app_domain_id = app_domain_id
        # 应用等级 id
        self.app_level_id = app_level_id
        # 页面请求用户无需自行填写此字段。此字段用于代码库的创建权限认证。为 iam 返回的 authorization 值。
        self.authorization = authorization
        # 技术栈版本
        self.buildpack_version = buildpack_version
        # 应用中文名称
        self.chinese_name = chinese_name
        # 使用已有的代码库。默认为否。
        self.code_repository_existed = code_repository_existed
        # 代码库 group 名称
        self.code_repository_group_name = code_repository_group_name
        # 默认无需填写。代码库名称。默认无需关联代码库。
        self.code_repository_name = code_repository_name
        # 默认为 GITLAB。无代码库时，无需填写。
        self.code_repository_type = code_repository_type
        # 应用描述
        self.description = description
        # 应用名称
        self.name = name
        # 应用负责人 id
        self.owner_id = owner_id
        # 技术栈 id
        self.stack_id = stack_id
        # 当设置代码库时，需设置此字段
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_domain_id is not None:
            result['app_domain_id'] = self.app_domain_id
        if self.app_level_id is not None:
            result['app_level_id'] = self.app_level_id
        if self.authorization is not None:
            result['authorization'] = self.authorization
        if self.buildpack_version is not None:
            result['buildpack_version'] = self.buildpack_version
        if self.chinese_name is not None:
            result['chinese_name'] = self.chinese_name
        if self.code_repository_existed is not None:
            result['code_repository_existed'] = self.code_repository_existed
        if self.code_repository_group_name is not None:
            result['code_repository_group_name'] = self.code_repository_group_name
        if self.code_repository_name is not None:
            result['code_repository_name'] = self.code_repository_name
        if self.code_repository_type is not None:
            result['code_repository_type'] = self.code_repository_type
        if self.description is not None:
            result['description'] = self.description
        if self.name is not None:
            result['name'] = self.name
        if self.owner_id is not None:
            result['owner_id'] = self.owner_id
        if self.stack_id is not None:
            result['stack_id'] = self.stack_id
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_domain_id') is not None:
            self.app_domain_id = m.get('app_domain_id')
        if m.get('app_level_id') is not None:
            self.app_level_id = m.get('app_level_id')
        if m.get('authorization') is not None:
            self.authorization = m.get('authorization')
        if m.get('buildpack_version') is not None:
            self.buildpack_version = m.get('buildpack_version')
        if m.get('chinese_name') is not None:
            self.chinese_name = m.get('chinese_name')
        if m.get('code_repository_existed') is not None:
            self.code_repository_existed = m.get('code_repository_existed')
        if m.get('code_repository_group_name') is not None:
            self.code_repository_group_name = m.get('code_repository_group_name')
        if m.get('code_repository_name') is not None:
            self.code_repository_name = m.get('code_repository_name')
        if m.get('code_repository_type') is not None:
            self.code_repository_type = m.get('code_repository_type')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('owner_id') is not None:
            self.owner_id = m.get('owner_id')
        if m.get('stack_id') is not None:
            self.stack_id = m.get('stack_id')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class CreateApplicationResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        application_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 应用 id
        self.application_id = application_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.application_id is not None:
            result['application_id'] = self.application_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('application_id') is not None:
            self.application_id = m.get('application_id')
        return self


class DeleteApplicationRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        application_ids: List[str] = None,
        delete_code_repo: bool = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 欲删除的应用 id
        self.application_ids = application_ids
        # 是否删除绑定的代码库。默认为 false
        self.delete_code_repo = delete_code_repo

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.application_ids is not None:
            result['application_ids'] = self.application_ids
        if self.delete_code_repo is not None:
            result['delete_code_repo'] = self.delete_code_repo
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('application_ids') is not None:
            self.application_ids = m.get('application_ids')
        if m.get('delete_code_repo') is not None:
            self.delete_code_repo = m.get('delete_code_repo')
        return self


class DeleteApplicationResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class CreateVpcVswitchRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        cidr_block: str = None,
        description: str = None,
        name: str = None,
        vpc_sequence: str = None,
        zone: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 网段
        self.cidr_block = cidr_block
        # 描述
        self.description = description
        # switch 名称
        self.name = name
        # vpc paas id
        self.vpc_sequence = vpc_sequence
        # zone
        self.zone = zone

    def validate(self):
        self.validate_required(self.cidr_block, 'cidr_block')
        self.validate_required(self.description, 'description')
        self.validate_required(self.name, 'name')
        self.validate_required(self.vpc_sequence, 'vpc_sequence')
        self.validate_required(self.zone, 'zone')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.cidr_block is not None:
            result['cidr_block'] = self.cidr_block
        if self.description is not None:
            result['description'] = self.description
        if self.name is not None:
            result['name'] = self.name
        if self.vpc_sequence is not None:
            result['vpc_sequence'] = self.vpc_sequence
        if self.zone is not None:
            result['zone'] = self.zone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('cidr_block') is not None:
            self.cidr_block = m.get('cidr_block')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('vpc_sequence') is not None:
            self.vpc_sequence = m.get('vpc_sequence')
        if m.get('zone') is not None:
            self.zone = m.get('zone')
        return self


class CreateVpcVswitchResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        vswitch_sequence: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # switch paas id
        self.vswitch_sequence = vswitch_sequence

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.vswitch_sequence is not None:
            result['vswitch_sequence'] = self.vswitch_sequence
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('vswitch_sequence') is not None:
            self.vswitch_sequence = m.get('vswitch_sequence')
        return self


class CreateVpcVroutertableRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        destination_cidr_block: str = None,
        next_hop_id: str = None,
        next_hop_type: str = None,
        v_route_table_id: str = None,
        vpc_sequence: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 目标网端
        self.destination_cidr_block = destination_cidr_block
        # 下一跳资源 id
        self.next_hop_id = next_hop_id
        # 下一跳类型
        self.next_hop_type = next_hop_type
        # 路由表 id
        self.v_route_table_id = v_route_table_id
        # vpc paas id
        self.vpc_sequence = vpc_sequence

    def validate(self):
        self.validate_required(self.destination_cidr_block, 'destination_cidr_block')
        self.validate_required(self.next_hop_id, 'next_hop_id')
        self.validate_required(self.next_hop_type, 'next_hop_type')
        self.validate_required(self.v_route_table_id, 'v_route_table_id')
        self.validate_required(self.vpc_sequence, 'vpc_sequence')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.destination_cidr_block is not None:
            result['destination_cidr_block'] = self.destination_cidr_block
        if self.next_hop_id is not None:
            result['next_hop_id'] = self.next_hop_id
        if self.next_hop_type is not None:
            result['next_hop_type'] = self.next_hop_type
        if self.v_route_table_id is not None:
            result['v_route_table_id'] = self.v_route_table_id
        if self.vpc_sequence is not None:
            result['vpc_sequence'] = self.vpc_sequence
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('destination_cidr_block') is not None:
            self.destination_cidr_block = m.get('destination_cidr_block')
        if m.get('next_hop_id') is not None:
            self.next_hop_id = m.get('next_hop_id')
        if m.get('next_hop_type') is not None:
            self.next_hop_type = m.get('next_hop_type')
        if m.get('v_route_table_id') is not None:
            self.v_route_table_id = m.get('v_route_table_id')
        if m.get('vpc_sequence') is not None:
            self.vpc_sequence = m.get('vpc_sequence')
        return self


class CreateVpcVroutertableResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class AddSecuritygroupInstanceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        instance_sequences: List[str] = None,
        security_group_sequence: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 需向安全组中添加的实例 paas 序列号
        self.instance_sequences = instance_sequences
        # 安全组 paas id
        self.security_group_sequence = security_group_sequence

    def validate(self):
        self.validate_required(self.instance_sequences, 'instance_sequences')
        self.validate_required(self.security_group_sequence, 'security_group_sequence')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.instance_sequences is not None:
            result['instance_sequences'] = self.instance_sequences
        if self.security_group_sequence is not None:
            result['security_group_sequence'] = self.security_group_sequence
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('instance_sequences') is not None:
            self.instance_sequences = m.get('instance_sequences')
        if m.get('security_group_sequence') is not None:
            self.security_group_sequence = m.get('security_group_sequence')
        return self


class AddSecuritygroupInstanceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class UpdateDatabaseSpecRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        database_sequences: List[str] = None,
        spec_id: str = None,
        storage_size: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # db paas id
        self.database_sequences = database_sequences
        # 实例规格 id
        self.spec_id = spec_id
        # 存储空间大小
        self.storage_size = storage_size

    def validate(self):
        self.validate_required(self.database_sequences, 'database_sequences')
        self.validate_required(self.spec_id, 'spec_id')
        self.validate_required(self.storage_size, 'storage_size')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.database_sequences is not None:
            result['database_sequences'] = self.database_sequences
        if self.spec_id is not None:
            result['spec_id'] = self.spec_id
        if self.storage_size is not None:
            result['storage_size'] = self.storage_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('database_sequences') is not None:
            self.database_sequences = m.get('database_sequences')
        if m.get('spec_id') is not None:
            self.spec_id = m.get('spec_id')
        if m.get('storage_size') is not None:
            self.storage_size = m.get('storage_size')
        return self


class UpdateDatabaseSpecResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class UpdateLoadbalanceAccesscontrolRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        loadbalance_sequence: str = None,
        listener_port: int = None,
        access_control: bool = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # lb paas id
        self.loadbalance_sequence = loadbalance_sequence
        # 监听器端口
        self.listener_port = listener_port
        # 是否打开访问控制
        self.access_control = access_control

    def validate(self):
        self.validate_required(self.loadbalance_sequence, 'loadbalance_sequence')
        self.validate_required(self.listener_port, 'listener_port')
        self.validate_required(self.access_control, 'access_control')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.loadbalance_sequence is not None:
            result['loadbalance_sequence'] = self.loadbalance_sequence
        if self.listener_port is not None:
            result['listener_port'] = self.listener_port
        if self.access_control is not None:
            result['access_control'] = self.access_control
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('loadbalance_sequence') is not None:
            self.loadbalance_sequence = m.get('loadbalance_sequence')
        if m.get('listener_port') is not None:
            self.listener_port = m.get('listener_port')
        if m.get('access_control') is not None:
            self.access_control = m.get('access_control')
        return self


class UpdateLoadbalanceAccesscontrolResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class UpdateLoadbalanceSpecRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        internet_charge_type: str = None,
        bandwidth: int = None,
        loadbalance_sequence: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 公网类型实例的付费方式。取值： PAY_BY_BANDWIDTH：按带宽计费。 PAY_BY_TRAFFIC：按流量计费（默认值）。
        self.internet_charge_type = internet_charge_type
        # 若为按带宽计费类型需填写此字段
        self.bandwidth = bandwidth
        # lb paas id
        self.loadbalance_sequence = loadbalance_sequence

    def validate(self):
        self.validate_required(self.internet_charge_type, 'internet_charge_type')
        self.validate_required(self.loadbalance_sequence, 'loadbalance_sequence')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.internet_charge_type is not None:
            result['internet_charge_type'] = self.internet_charge_type
        if self.bandwidth is not None:
            result['bandwidth'] = self.bandwidth
        if self.loadbalance_sequence is not None:
            result['loadbalance_sequence'] = self.loadbalance_sequence
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('internet_charge_type') is not None:
            self.internet_charge_type = m.get('internet_charge_type')
        if m.get('bandwidth') is not None:
            self.bandwidth = m.get('bandwidth')
        if m.get('loadbalance_sequence') is not None:
            self.loadbalance_sequence = m.get('loadbalance_sequence')
        return self


class UpdateLoadbalanceSpecResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class UpdateVpcVswitchRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        name: str = None,
        vswitch_id: str = None,
        vpc_sequence: str = None,
        description: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 修改会的 vswitch 名称
        self.name = name
        # vswitch id
        self.vswitch_id = vswitch_id
        # vpc paas id
        self.vpc_sequence = vpc_sequence
        # 描述
        self.description = description

    def validate(self):
        self.validate_required(self.name, 'name')
        self.validate_required(self.vswitch_id, 'vswitch_id')
        self.validate_required(self.vpc_sequence, 'vpc_sequence')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.name is not None:
            result['name'] = self.name
        if self.vswitch_id is not None:
            result['vswitch_id'] = self.vswitch_id
        if self.vpc_sequence is not None:
            result['vpc_sequence'] = self.vpc_sequence
        if self.description is not None:
            result['description'] = self.description
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('vswitch_id') is not None:
            self.vswitch_id = m.get('vswitch_id')
        if m.get('vpc_sequence') is not None:
            self.vpc_sequence = m.get('vpc_sequence')
        if m.get('description') is not None:
            self.description = m.get('description')
        return self


class UpdateVpcVswitchResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class CreateWorkspaceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        display_name: str = None,
        name: str = None,
        network_type: str = None,
        region: str = None,
        zones: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace 显示名称
        self.display_name = display_name
        # workspace 唯一标识符。
        self.name = name
        # VPC ｜ Classic
        self.network_type = network_type
        # 地域
        self.region = region
        # 可用区
        self.zones = zones

    def validate(self):
        self.validate_required(self.display_name, 'display_name')
        self.validate_required(self.name, 'name')
        self.validate_required(self.network_type, 'network_type')
        self.validate_required(self.region, 'region')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.display_name is not None:
            result['display_name'] = self.display_name
        if self.name is not None:
            result['name'] = self.name
        if self.network_type is not None:
            result['network_type'] = self.network_type
        if self.region is not None:
            result['region'] = self.region
        if self.zones is not None:
            result['zones'] = self.zones
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('display_name') is not None:
            self.display_name = m.get('display_name')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('network_type') is not None:
            self.network_type = m.get('network_type')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('zones') is not None:
            self.zones = m.get('zones')
        return self


class CreateWorkspaceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        workspace_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # workspace id
        self.workspace_id = workspace_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class CreateMetaWorkspaceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        display_name: str = None,
        name: str = None,
        network_type: str = None,
        region: str = None,
        zones: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace 显示名称
        self.display_name = display_name
        # workspace 唯一标识符
        self.name = name
        # VPC ｜ Classic
        self.network_type = network_type
        # 地域
        self.region = region
        # 可用区
        self.zones = zones

    def validate(self):
        self.validate_required(self.display_name, 'display_name')
        self.validate_required(self.name, 'name')
        self.validate_required(self.network_type, 'network_type')
        self.validate_required(self.region, 'region')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.display_name is not None:
            result['display_name'] = self.display_name
        if self.name is not None:
            result['name'] = self.name
        if self.network_type is not None:
            result['network_type'] = self.network_type
        if self.region is not None:
            result['region'] = self.region
        if self.zones is not None:
            result['zones'] = self.zones
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('display_name') is not None:
            self.display_name = m.get('display_name')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('network_type') is not None:
            self.network_type = m.get('network_type')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('zones') is not None:
            self.zones = m.get('zones')
        return self


class CreateMetaWorkspaceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        workspace_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # workspace id
        self.workspace_id = workspace_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class QueryMetaWorkspaceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace id
        self.workspace_id = workspace_id

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class QueryMetaWorkspaceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: Workspace = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # workspace 信息
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            temp_model = Workspace()
            self.data = temp_model.from_map(m['data'])
        return self


class DeleteMetaWorkspaceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace id
        self.workspace_id = workspace_id

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class DeleteMetaWorkspaceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        success: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 删除是否成功
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class CreateResourceVpcRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        cidr_block: str = None,
        description: str = None,
        name: str = None,
        region: str = None,
        user_cidr: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # VPC的网段。您可以使用以下网段或其子集作为VPC的网段：
        # 
        # 172.16.0.0/12（默认值）。
        # 10.0.0.0/8。
        # 192.168.0.0/16。
        self.cidr_block = cidr_block
        # 描述信息
        self.description = description
        # VPC的名称
        self.name = name
        # VPC所在的地域
        self.region = region
        # 用户侧网络的网段
        self.user_cidr = user_cidr
        # 所属工作空间 identity
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.name, 'name')
        self.validate_required(self.region, 'region')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.cidr_block is not None:
            result['cidr_block'] = self.cidr_block
        if self.description is not None:
            result['description'] = self.description
        if self.name is not None:
            result['name'] = self.name
        if self.region is not None:
            result['region'] = self.region
        if self.user_cidr is not None:
            result['user_cidr'] = self.user_cidr
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('cidr_block') is not None:
            self.cidr_block = m.get('cidr_block')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('user_cidr') is not None:
            self.user_cidr = m.get('user_cidr')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class CreateResourceVpcResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        route_table_id: str = None,
        vpc_id: str = None,
        v_router_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 创建VPC后，系统自动创建的路由表的ID。
        self.route_table_id = route_table_id
        # 创建的VPC的ID
        self.vpc_id = vpc_id
        # 创建VPC后，系统自动创建的路由器的ID。
        self.v_router_id = v_router_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.route_table_id is not None:
            result['route_table_id'] = self.route_table_id
        if self.vpc_id is not None:
            result['vpc_id'] = self.vpc_id
        if self.v_router_id is not None:
            result['v_router_id'] = self.v_router_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('route_table_id') is not None:
            self.route_table_id = m.get('route_table_id')
        if m.get('vpc_id') is not None:
            self.vpc_id = m.get('vpc_id')
        if m.get('v_router_id') is not None:
            self.v_router_id = m.get('v_router_id')
        return self


class QueryResourceVpcRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        disable_cache: bool = None,
        region: str = None,
        vpc_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 是否使用缓存进行查询，默认false，使用缓存查询
        self.disable_cache = disable_cache
        # 地域identity
        self.region = region
        # VPC的id
        self.vpc_id = vpc_id

    def validate(self):
        self.validate_required(self.region, 'region')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.disable_cache is not None:
            result['disable_cache'] = self.disable_cache
        if self.region is not None:
            result['region'] = self.region
        if self.vpc_id is not None:
            result['vpc_id'] = self.vpc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('disable_cache') is not None:
            self.disable_cache = m.get('disable_cache')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('vpc_id') is not None:
            self.vpc_id = m.get('vpc_id')
        return self


class QueryResourceVpcResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        total_count: int = None,
        vpcs: List[VPC] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 列表条目数
        self.total_count = total_count
        # VPC详细信息
        self.vpcs = vpcs

    def validate(self):
        if self.vpcs:
            for k in self.vpcs:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.total_count is not None:
            result['total_count'] = self.total_count
        result['vpcs'] = []
        if self.vpcs is not None:
            for k in self.vpcs:
                result['vpcs'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        self.vpcs = []
        if m.get('vpcs') is not None:
            for k in m.get('vpcs'):
                temp_model = VPC()
                self.vpcs.append(temp_model.from_map(k))
        return self


class DeleteResourceVpcRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        region: str = None,
        vpc_id: str = None,
        workspace: str = None,
        unbind_only: bool = None,
        vpc_paas_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 要删除的VPC所在的地域identity
        self.region = region
        # 要删除的VPC ID
        self.vpc_id = vpc_id
        # workspace id
        self.workspace = workspace
        # unbind_only
        self.unbind_only = unbind_only
        # vpc_paas_id,vcp_id不存在时可用。建议用这个
        self.vpc_paas_id = vpc_paas_id

    def validate(self):
        self.validate_required(self.region, 'region')
        self.validate_required(self.vpc_id, 'vpc_id')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.region is not None:
            result['region'] = self.region
        if self.vpc_id is not None:
            result['vpc_id'] = self.vpc_id
        if self.workspace is not None:
            result['workspace'] = self.workspace
        if self.unbind_only is not None:
            result['unbind_only'] = self.unbind_only
        if self.vpc_paas_id is not None:
            result['vpc_paas_id'] = self.vpc_paas_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('vpc_id') is not None:
            self.vpc_id = m.get('vpc_id')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        if m.get('unbind_only') is not None:
            self.unbind_only = m.get('unbind_only')
        if m.get('vpc_paas_id') is not None:
            self.vpc_paas_id = m.get('vpc_paas_id')
        return self


class DeleteResourceVpcResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        success: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 删除VPC是否成功
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class CreateResourceVswitchRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        cidr_block: str = None,
        description: str = None,
        name: str = None,
        region: str = None,
        vpc_id: str = None,
        workspace: str = None,
        zone: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 交换机的网段。交换机网段要求如下：
        # 
        # 交换机的网段的掩码长度范围为16~29位。
        # 交换机的网段必须从属于所在VPC的网段。
        # 交换机的网段不能与所在VPC中路由条目的目标网段相同，但可以是目标网段的子集。
        self.cidr_block = cidr_block
        # 描述信息
        self.description = description
        # 交换机的名称。
        # 
        # 名称长度为2~128个字符，必须以字母或中文开头，但不能以http://或https://开头。
        self.name = name
        # 要创建的交换机的地域 identity
        self.region = region
        # 要创建的交换机所属的VPC ID。
        self.vpc_id = vpc_id
        # workspace name
        self.workspace = workspace
        # 要创建的交换机所属的可用区 identity
        self.zone = zone

    def validate(self):
        self.validate_required(self.cidr_block, 'cidr_block')
        self.validate_required(self.name, 'name')
        self.validate_required(self.region, 'region')
        self.validate_required(self.vpc_id, 'vpc_id')
        self.validate_required(self.workspace, 'workspace')
        self.validate_required(self.zone, 'zone')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.cidr_block is not None:
            result['cidr_block'] = self.cidr_block
        if self.description is not None:
            result['description'] = self.description
        if self.name is not None:
            result['name'] = self.name
        if self.region is not None:
            result['region'] = self.region
        if self.vpc_id is not None:
            result['vpc_id'] = self.vpc_id
        if self.workspace is not None:
            result['workspace'] = self.workspace
        if self.zone is not None:
            result['zone'] = self.zone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('cidr_block') is not None:
            self.cidr_block = m.get('cidr_block')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('vpc_id') is not None:
            self.vpc_id = m.get('vpc_id')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        if m.get('zone') is not None:
            self.zone = m.get('zone')
        return self


class CreateResourceVswitchResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        v_switch_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 创建的交换机的ID。
        self.v_switch_id = v_switch_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.v_switch_id is not None:
            result['v_switch_id'] = self.v_switch_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('v_switch_id') is not None:
            self.v_switch_id = m.get('v_switch_id')
        return self


class QueryResourceVswitchRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        region: str = None,
        vpc_id: str = None,
        v_switch_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 交换机所属地域的identity
        self.region = region
        # 要查询的交换机所属VPC的ID
        self.vpc_id = vpc_id
        # 要查询的交换机的ID
        self.v_switch_id = v_switch_id

    def validate(self):
        self.validate_required(self.region, 'region')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.region is not None:
            result['region'] = self.region
        if self.vpc_id is not None:
            result['vpc_id'] = self.vpc_id
        if self.v_switch_id is not None:
            result['v_switch_id'] = self.v_switch_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('vpc_id') is not None:
            self.vpc_id = m.get('vpc_id')
        if m.get('v_switch_id') is not None:
            self.v_switch_id = m.get('v_switch_id')
        return self


class QueryResourceVswitchResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        total_count: int = None,
        v_switches: List[VSwitch] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 列表条目数
        self.total_count = total_count
        # 交换机的详细信息
        self.v_switches = v_switches

    def validate(self):
        if self.v_switches:
            for k in self.v_switches:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.total_count is not None:
            result['total_count'] = self.total_count
        result['v_switches'] = []
        if self.v_switches is not None:
            for k in self.v_switches:
                result['v_switches'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        self.v_switches = []
        if m.get('v_switches') is not None:
            for k in m.get('v_switches'):
                temp_model = VSwitch()
                self.v_switches.append(temp_model.from_map(k))
        return self


class DeleteResourceVswitchRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        region: str = None,
        vpc_id: str = None,
        v_switch_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 要删除的交换机的地域identity
        self.region = region
        # 要删除的交换机所处专有网络的ID
        self.vpc_id = vpc_id
        # 要删除的交换机的ID
        self.v_switch_id = v_switch_id

    def validate(self):
        self.validate_required(self.region, 'region')
        self.validate_required(self.vpc_id, 'vpc_id')
        self.validate_required(self.v_switch_id, 'v_switch_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.region is not None:
            result['region'] = self.region
        if self.vpc_id is not None:
            result['vpc_id'] = self.vpc_id
        if self.v_switch_id is not None:
            result['v_switch_id'] = self.v_switch_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('vpc_id') is not None:
            self.vpc_id = m.get('vpc_id')
        if m.get('v_switch_id') is not None:
            self.v_switch_id = m.get('v_switch_id')
        return self


class DeleteResourceVswitchResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        success: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 删除交换机是否成功
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class QueryResourceSecuritygroupRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        disable_cache: bool = None,
        region: str = None,
        security_group_id: str = None,
        vpc_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # disable cache
        self.disable_cache = disable_cache
        # 地域identity
        self.region = region
        # 安全组ID。
        self.security_group_id = security_group_id
        # 安全组所在的专有网络ID。
        self.vpc_id = vpc_id

    def validate(self):
        self.validate_required(self.region, 'region')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.disable_cache is not None:
            result['disable_cache'] = self.disable_cache
        if self.region is not None:
            result['region'] = self.region
        if self.security_group_id is not None:
            result['security_group_id'] = self.security_group_id
        if self.vpc_id is not None:
            result['vpc_id'] = self.vpc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('disable_cache') is not None:
            self.disable_cache = m.get('disable_cache')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('security_group_id') is not None:
            self.security_group_id = m.get('security_group_id')
        if m.get('vpc_id') is not None:
            self.vpc_id = m.get('vpc_id')
        return self


class QueryResourceSecuritygroupResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        security_groups: List[SecurityGroup] = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 安全组详细信息。
        self.security_groups = security_groups
        # 安全组的总数。
        self.total_count = total_count

    def validate(self):
        if self.security_groups:
            for k in self.security_groups:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['security_groups'] = []
        if self.security_groups is not None:
            for k in self.security_groups:
                result['security_groups'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.security_groups = []
        if m.get('security_groups') is not None:
            for k in m.get('security_groups'):
                temp_model = SecurityGroup()
                self.security_groups.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class ListMetaWorkspaceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        return self


class ListMetaWorkspaceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[Workspace] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 工作空间详细信息列表
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = Workspace()
                self.data.append(temp_model.from_map(k))
        return self


class CreateResourceSecuritygroupRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        description: str = None,
        ingress_rules: List[SecurityGroupRule] = None,
        egress_rules: List[SecurityGroupRule] = None,
        name: str = None,
        region: str = None,
        vpc_id: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 安全组描述信息。长度为2~256个英文或中文字符，不能以http://和https://开头。
        # 
        # 默认值：空。
        self.description = description
        # 安全组入方向规则
        self.ingress_rules = ingress_rules
        # 安全组出方向规则
        self.egress_rules = egress_rules
        # 安全组名称。长度为2~128个英文或中文字符。必须以大小字母或中文开头，不能以 http://和https://开头。可以包含数字、半角冒号（:）、下划线（_）或者连字符（-）。默认值：空。
        self.name = name
        # 安全组所属地域identity
        self.region = region
        # 安全组所属VPC ID。
        self.vpc_id = vpc_id
        # workspace name
        self.workspace = workspace

    def validate(self):
        if self.ingress_rules:
            for k in self.ingress_rules:
                if k:
                    k.validate()
        if self.egress_rules:
            for k in self.egress_rules:
                if k:
                    k.validate()
        self.validate_required(self.name, 'name')
        self.validate_required(self.region, 'region')
        self.validate_required(self.vpc_id, 'vpc_id')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.description is not None:
            result['description'] = self.description
        result['ingress_rules'] = []
        if self.ingress_rules is not None:
            for k in self.ingress_rules:
                result['ingress_rules'].append(k.to_map() if k else None)
        result['egress_rules'] = []
        if self.egress_rules is not None:
            for k in self.egress_rules:
                result['egress_rules'].append(k.to_map() if k else None)
        if self.name is not None:
            result['name'] = self.name
        if self.region is not None:
            result['region'] = self.region
        if self.vpc_id is not None:
            result['vpc_id'] = self.vpc_id
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('description') is not None:
            self.description = m.get('description')
        self.ingress_rules = []
        if m.get('ingress_rules') is not None:
            for k in m.get('ingress_rules'):
                temp_model = SecurityGroupRule()
                self.ingress_rules.append(temp_model.from_map(k))
        self.egress_rules = []
        if m.get('egress_rules') is not None:
            for k in m.get('egress_rules'):
                temp_model = SecurityGroupRule()
                self.egress_rules.append(temp_model.from_map(k))
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('vpc_id') is not None:
            self.vpc_id = m.get('vpc_id')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class CreateResourceSecuritygroupResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        security_group_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 安全组ID。
        self.security_group_id = security_group_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.security_group_id is not None:
            result['security_group_id'] = self.security_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('security_group_id') is not None:
            self.security_group_id = m.get('security_group_id')
        return self


class DeleteResourceSecuritygroupRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        region: str = None,
        security_group_id: str = None,
        vpc_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 地域identity
        self.region = region
        # 安全组ID。
        self.security_group_id = security_group_id
        # 要删除的安全组所处专有网络的ID
        self.vpc_id = vpc_id

    def validate(self):
        self.validate_required(self.region, 'region')
        self.validate_required(self.security_group_id, 'security_group_id')
        self.validate_required(self.vpc_id, 'vpc_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.region is not None:
            result['region'] = self.region
        if self.security_group_id is not None:
            result['security_group_id'] = self.security_group_id
        if self.vpc_id is not None:
            result['vpc_id'] = self.vpc_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('security_group_id') is not None:
            self.security_group_id = m.get('security_group_id')
        if m.get('vpc_id') is not None:
            self.vpc_id = m.get('vpc_id')
        return self


class DeleteResourceSecuritygroupResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        success: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 删除安全组是否成功
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class CreateResourceComputerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        cell: str = None,
        data_disk_category: str = None,
        data_disk_size: int = None,
        description: str = None,
        host_name: str = None,
        image_id: str = None,
        instance_type: str = None,
        password: str = None,
        region_id: str = None,
        system_disk_category: str = None,
        system_disk_size: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 实例所属的部署单元
        self.cell = cell
        # 数据盘的云盘种类。取值范围：
        # 
        # cloud_efficiency：高效云盘
        # cloud_ssd：SSD云盘
        # ephemeral_ssd：本地SSD盘
        # cloud_essd：ESSD云盘
        # cloud：普通云盘
        # I/O优化实例的默认值为cloud_efficiency，非I/O优化实例的默认值为cloud。
        self.data_disk_category = data_disk_category
        # 数据盘的容量大小，n的取值范围为1~16，内存单位为GiB。取值范围：
        # 
        # cloud_efficiency：20~32768
        # cloud_ssd：20~32768
        # cloud_essd：20~32768
        # ephemeral_ssd：5~800
        # cloud：5~2000
        # 该参数的取值必须大于等于参数SnapshotId指定的快照的大小。
        self.data_disk_size = data_disk_size
        # 实例的描述信息
        self.description = description
        # 云服务器的主机名。
        # 
        # 点号（.）和短横线（-）不能作为首尾字符，更不能连续使用。
        # Windows实例：字符长度为2~15，不支持点号（.），不能全是数字。允许大小写英文字母、数字和短横线（-）。
        # 其他类型实例（Linux等）：字符长度为2~64，支持多个点号（.），点之间为一段，每段允许大小写英文字母、数字和短横线（-）。
        self.host_name = host_name
        # 镜像文件ID，启动实例时选择的镜像资源。
        self.image_id = image_id
        # 实例的资源规格。
        self.instance_type = instance_type
        # 实例的密码。长度为8至30个字符，必须同时包含大小写英文字母、数字和特殊符号中的三类字符。
        self.password = password
        # 实例所属的地域ID。
        self.region_id = region_id
        # 系统盘的云盘种类。取值范围：
        # 
        # cloud_efficiency：高效云盘
        # cloud_ssd：SSD云盘
        # cloud：普通云盘
        self.system_disk_category = system_disk_category
        # 系统盘大小，单位为GiB。取值范围：20~500
        # 
        # 该参数的取值必须大于或者等于max{20, ImageSize}。
        self.system_disk_size = system_disk_size

    def validate(self):
        self.validate_required(self.cell, 'cell')
        self.validate_required(self.host_name, 'host_name')
        self.validate_required(self.image_id, 'image_id')
        self.validate_required(self.instance_type, 'instance_type')
        self.validate_required(self.password, 'password')
        self.validate_required(self.region_id, 'region_id')
        self.validate_required(self.system_disk_category, 'system_disk_category')
        self.validate_required(self.system_disk_size, 'system_disk_size')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.cell is not None:
            result['cell'] = self.cell
        if self.data_disk_category is not None:
            result['data_disk_category'] = self.data_disk_category
        if self.data_disk_size is not None:
            result['data_disk_size'] = self.data_disk_size
        if self.description is not None:
            result['description'] = self.description
        if self.host_name is not None:
            result['host_name'] = self.host_name
        if self.image_id is not None:
            result['image_id'] = self.image_id
        if self.instance_type is not None:
            result['instance_type'] = self.instance_type
        if self.password is not None:
            result['password'] = self.password
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.system_disk_category is not None:
            result['system_disk_category'] = self.system_disk_category
        if self.system_disk_size is not None:
            result['system_disk_size'] = self.system_disk_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('cell') is not None:
            self.cell = m.get('cell')
        if m.get('data_disk_category') is not None:
            self.data_disk_category = m.get('data_disk_category')
        if m.get('data_disk_size') is not None:
            self.data_disk_size = m.get('data_disk_size')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('host_name') is not None:
            self.host_name = m.get('host_name')
        if m.get('image_id') is not None:
            self.image_id = m.get('image_id')
        if m.get('instance_type') is not None:
            self.instance_type = m.get('instance_type')
        if m.get('password') is not None:
            self.password = m.get('password')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('system_disk_category') is not None:
            self.system_disk_category = m.get('system_disk_category')
        if m.get('system_disk_size') is not None:
            self.system_disk_size = m.get('system_disk_size')
        return self


class CreateResourceComputerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        instance_id: str = None,
        job_id: str = None,
        ret_code: int = None,
        message: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 实例ID。
        self.instance_id = instance_id
        # 异步任务ID
        self.job_id = job_id
        # 0表示正常，非0表示异常
        self.ret_code = ret_code
        # 错误描述信息
        self.message = message

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.instance_id is not None:
            result['instance_id'] = self.instance_id
        if self.job_id is not None:
            result['job_id'] = self.job_id
        if self.ret_code is not None:
            result['ret_code'] = self.ret_code
        if self.message is not None:
            result['message'] = self.message
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('instance_id') is not None:
            self.instance_id = m.get('instance_id')
        if m.get('job_id') is not None:
            self.job_id = m.get('job_id')
        if m.get('ret_code') is not None:
            self.ret_code = m.get('ret_code')
        if m.get('message') is not None:
            self.message = m.get('message')
        return self


class QueryResourceComputerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        iaas_id: str = None,
        instance_ids: List[str] = None,
        instance_name: str = None,
        instance_type: str = None,
        private_ip_addresses: List[str] = None,
        provider_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        status: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # iaas id
        self.iaas_id = iaas_id
        # 逗号分隔的实例ID，最多支持100个
        self.instance_ids = instance_ids
        # 实例名称，支持使用通配符*进行模糊搜索。
        self.instance_name = instance_name
        # 实例的规格
        self.instance_type = instance_type
        # 主机的内网ip，取值可以由多个IP组成一个JSON数组，最多支持100个IP，IP之间用半角逗号（,）隔开。
        self.private_ip_addresses = private_ip_addresses
        # 供应商id
        self.provider_id = provider_id
        # 实例所属的地域ID
        self.region_id = region_id
        # 实例所在的企业资源组ID。
        self.resource_group_id = resource_group_id
        # 实例状态。取值范围：
        # 
        # Running：运行中
        # Starting：启动中
        # Stopping：停止中
        # Stopped：已停止
        self.status = status
        # 主机所在工作空间
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.region_id, 'region_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.iaas_id is not None:
            result['iaas_id'] = self.iaas_id
        if self.instance_ids is not None:
            result['instance_ids'] = self.instance_ids
        if self.instance_name is not None:
            result['instance_name'] = self.instance_name
        if self.instance_type is not None:
            result['instance_type'] = self.instance_type
        if self.private_ip_addresses is not None:
            result['private_ip_addresses'] = self.private_ip_addresses
        if self.provider_id is not None:
            result['provider_id'] = self.provider_id
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.resource_group_id is not None:
            result['resource_group_id'] = self.resource_group_id
        if self.status is not None:
            result['status'] = self.status
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('iaas_id') is not None:
            self.iaas_id = m.get('iaas_id')
        if m.get('instance_ids') is not None:
            self.instance_ids = m.get('instance_ids')
        if m.get('instance_name') is not None:
            self.instance_name = m.get('instance_name')
        if m.get('instance_type') is not None:
            self.instance_type = m.get('instance_type')
        if m.get('private_ip_addresses') is not None:
            self.private_ip_addresses = m.get('private_ip_addresses')
        if m.get('provider_id') is not None:
            self.provider_id = m.get('provider_id')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('resource_group_id') is not None:
            self.resource_group_id = m.get('resource_group_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class QueryResourceComputerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        instances: List[Computer] = None,
        page_number: int = None,
        page_size: int = None,
        request_id: str = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 查询的实例集合
        self.instances = instances
        # 实例列表的页码。
        self.page_number = page_number
        # 输入时设置的每页行数。
        self.page_size = page_size
        # 请求ID
        self.request_id = request_id
        # 查询到的实例总数。
        self.total_count = total_count

    def validate(self):
        if self.instances:
            for k in self.instances:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['instances'] = []
        if self.instances is not None:
            for k in self.instances:
                result['instances'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['page_number'] = self.page_number
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.request_id is not None:
            result['request_id'] = self.request_id
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.instances = []
        if m.get('instances') is not None:
            for k in m.get('instances'):
                temp_model = Computer()
                self.instances.append(temp_model.from_map(k))
        if m.get('page_number') is not None:
            self.page_number = m.get('page_number')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('request_id') is not None:
            self.request_id = m.get('request_id')
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class QueryResourceComputerspecRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        instance_type_groups: str = None,
        max_cpu: int = None,
        max_mem: int = None,
        min_cpu: int = None,
        min_mem: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 机器规格族
        self.instance_type_groups = instance_type_groups
        # CPU最大值
        self.max_cpu = max_cpu
        # 最大内存
        self.max_mem = max_mem
        # CPU最小值
        self.min_cpu = min_cpu
        # 最小内存
        self.min_mem = min_mem

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.instance_type_groups is not None:
            result['instance_type_groups'] = self.instance_type_groups
        if self.max_cpu is not None:
            result['max_cpu'] = self.max_cpu
        if self.max_mem is not None:
            result['max_mem'] = self.max_mem
        if self.min_cpu is not None:
            result['min_cpu'] = self.min_cpu
        if self.min_mem is not None:
            result['min_mem'] = self.min_mem
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('instance_type_groups') is not None:
            self.instance_type_groups = m.get('instance_type_groups')
        if m.get('max_cpu') is not None:
            self.max_cpu = m.get('max_cpu')
        if m.get('max_mem') is not None:
            self.max_mem = m.get('max_mem')
        if m.get('min_cpu') is not None:
            self.min_cpu = m.get('min_cpu')
        if m.get('min_mem') is not None:
            self.min_mem = m.get('min_mem')
        return self


class QueryResourceComputerspecResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        computer_specs: List[ComputerSpec] = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 符合筛选条件的机器规格
        self.computer_specs = computer_specs
        # 返回的数量
        self.total_count = total_count

    def validate(self):
        if self.computer_specs:
            for k in self.computer_specs:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['computer_specs'] = []
        if self.computer_specs is not None:
            for k in self.computer_specs:
                result['computer_specs'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.computer_specs = []
        if m.get('computer_specs') is not None:
            for k in m.get('computer_specs'):
                temp_model = ComputerSpec()
                self.computer_specs.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class DeleteResourceComputerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        instance_id: str = None,
        force: bool = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 要删除的机器ID
        self.instance_id = instance_id
        # 是否强制删除
        self.force = force

    def validate(self):
        self.validate_required(self.instance_id, 'instance_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.instance_id is not None:
            result['instance_id'] = self.instance_id
        if self.force is not None:
            result['force'] = self.force
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('instance_id') is not None:
            self.instance_id = m.get('instance_id')
        if m.get('force') is not None:
            self.force = m.get('force')
        return self


class DeleteResourceComputerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        ret_code: int = None,
        message: str = None,
        job_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 0表示正常，非0表示异常
        self.ret_code = ret_code
        # 错误描述信息
        self.message = message
        # 异步执行任务id
        self.job_id = job_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.ret_code is not None:
            result['ret_code'] = self.ret_code
        if self.message is not None:
            result['message'] = self.message
        if self.job_id is not None:
            result['job_id'] = self.job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('ret_code') is not None:
            self.ret_code = m.get('ret_code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('job_id') is not None:
            self.job_id = m.get('job_id')
        return self


class ReinitResourceComputerpasswordRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        instance_id: str = None,
        password: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 需要修改的机器Id
        self.instance_id = instance_id
        # 重置的密码
        self.password = password

    def validate(self):
        self.validate_required(self.instance_id, 'instance_id')
        self.validate_required(self.password, 'password')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.instance_id is not None:
            result['instance_id'] = self.instance_id
        if self.password is not None:
            result['password'] = self.password
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('instance_id') is not None:
            self.instance_id = m.get('instance_id')
        if m.get('password') is not None:
            self.password = m.get('password')
        return self


class ReinitResourceComputerpasswordResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        ret_code: int = None,
        message: str = None,
        job_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 0表示正常，非0表示异常
        self.ret_code = ret_code
        # 错误描述信息
        self.message = message
        # 异步任务ID
        self.job_id = job_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.ret_code is not None:
            result['ret_code'] = self.ret_code
        if self.message is not None:
            result['message'] = self.message
        if self.job_id is not None:
            result['job_id'] = self.job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('ret_code') is not None:
            self.ret_code = m.get('ret_code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('job_id') is not None:
            self.job_id = m.get('job_id')
        return self


class StartResourceComputerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        instance_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 机器id
        self.instance_id = instance_id

    def validate(self):
        self.validate_required(self.instance_id, 'instance_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.instance_id is not None:
            result['instance_id'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('instance_id') is not None:
            self.instance_id = m.get('instance_id')
        return self


class StartResourceComputerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        ret_code: int = None,
        job_id: str = None,
        message: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 0表示正常，非0表示异常
        self.ret_code = ret_code
        # 异步任务执行id
        self.job_id = job_id
        # 错误描述信息
        self.message = message

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.ret_code is not None:
            result['ret_code'] = self.ret_code
        if self.job_id is not None:
            result['job_id'] = self.job_id
        if self.message is not None:
            result['message'] = self.message
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('ret_code') is not None:
            self.ret_code = m.get('ret_code')
        if m.get('job_id') is not None:
            self.job_id = m.get('job_id')
        if m.get('message') is not None:
            self.message = m.get('message')
        return self


class StopResourceComputerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        instance_id: str = None,
        force: bool = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 需要停止的机器id
        self.instance_id = instance_id
        # 是否强制停止
        self.force = force

    def validate(self):
        self.validate_required(self.instance_id, 'instance_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.instance_id is not None:
            result['instance_id'] = self.instance_id
        if self.force is not None:
            result['force'] = self.force
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('instance_id') is not None:
            self.instance_id = m.get('instance_id')
        if m.get('force') is not None:
            self.force = m.get('force')
        return self


class StopResourceComputerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        ret_code: int = None,
        job_id: str = None,
        message: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 非0表示异常，0表示正常
        self.ret_code = ret_code
        # 异步执行的任务ID
        self.job_id = job_id
        # 错误信息
        self.message = message

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.ret_code is not None:
            result['ret_code'] = self.ret_code
        if self.job_id is not None:
            result['job_id'] = self.job_id
        if self.message is not None:
            result['message'] = self.message
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('ret_code') is not None:
            self.ret_code = m.get('ret_code')
        if m.get('job_id') is not None:
            self.job_id = m.get('job_id')
        if m.get('message') is not None:
            self.message = m.get('message')
        return self


class CreateSlsProjectRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        project_name: str = None,
        sls_region_id: str = None,
        tenant_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 日志项目名称
        self.project_name = project_name
        # 区域id
        self.sls_region_id = sls_region_id
        # 租户id
        self.tenant_id = tenant_id

    def validate(self):
        self.validate_required(self.project_name, 'project_name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.sls_region_id is not None:
            result['sls_region_id'] = self.sls_region_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('sls_region_id') is not None:
            self.sls_region_id = m.get('sls_region_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        return self


class CreateSlsProjectResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 创建日志项目结果
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class ListSlsProjectRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        sls_region_id: str = None,
        tenant_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 区域id
        self.sls_region_id = sls_region_id
        # 租户id
        self.tenant_id = tenant_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.sls_region_id is not None:
            result['sls_region_id'] = self.sls_region_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('sls_region_id') is not None:
            self.sls_region_id = m.get('sls_region_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        return self


class ListSlsProjectResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[SLSProject] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 日志项目数组
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = SLSProject()
                self.data.append(temp_model.from_map(k))
        return self


class CreateSlsLogstoreRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        logstore_name: str = None,
        project_name: str = None,
        sls_region_id: str = None,
        shard_count: int = None,
        tenant_id: str = None,
        ttl: int = None,
        add_index: bool = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 日志库名称，在Project下必须唯一
        self.logstore_name = logstore_name
        # 日志项目名称
        self.project_name = project_name
        # 区域id
        self.sls_region_id = sls_region_id
        # Shard个数，单位为个，范围为1~100
        self.shard_count = shard_count
        # 租户id
        self.tenant_id = tenant_id
        # 数据的保存时间，单位为天，范围1~3600。
        self.ttl = ttl
        # 是否添加索引
        self.add_index = add_index

    def validate(self):
        self.validate_required(self.logstore_name, 'logstore_name')
        self.validate_required(self.project_name, 'project_name')
        self.validate_required(self.shard_count, 'shard_count')
        self.validate_required(self.ttl, 'ttl')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.logstore_name is not None:
            result['logstore_name'] = self.logstore_name
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.sls_region_id is not None:
            result['sls_region_id'] = self.sls_region_id
        if self.shard_count is not None:
            result['shard_count'] = self.shard_count
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.ttl is not None:
            result['ttl'] = self.ttl
        if self.add_index is not None:
            result['add_index'] = self.add_index
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('logstore_name') is not None:
            self.logstore_name = m.get('logstore_name')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('sls_region_id') is not None:
            self.sls_region_id = m.get('sls_region_id')
        if m.get('shard_count') is not None:
            self.shard_count = m.get('shard_count')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('ttl') is not None:
            self.ttl = m.get('ttl')
        if m.get('add_index') is not None:
            self.add_index = m.get('add_index')
        return self


class CreateSlsLogstoreResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 日志库创建结果
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class ListSlsLogstoreRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        logstore_name: str = None,
        project_name: str = None,
        sls_region_id: str = None,
        tenant_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 用于请求的 Logstore 名称（支持部分匹配）。
        self.logstore_name = logstore_name
        # 日志项目名称
        self.project_name = project_name
        # 区域id
        self.sls_region_id = sls_region_id
        # 租户id
        self.tenant_id = tenant_id

    def validate(self):
        self.validate_required(self.project_name, 'project_name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.logstore_name is not None:
            result['logstore_name'] = self.logstore_name
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.sls_region_id is not None:
            result['sls_region_id'] = self.sls_region_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('logstore_name') is not None:
            self.logstore_name = m.get('logstore_name')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('sls_region_id') is not None:
            self.sls_region_id = m.get('sls_region_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        return self


class ListSlsLogstoreResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[str] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 日志库名称列表
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class GetSlsLogstoreRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        logstore_name: str = None,
        project_name: str = None,
        sls_region_id: str = None,
        tenant_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 日志库名称，在Project下必须唯一
        self.logstore_name = logstore_name
        # 日志项目名称
        self.project_name = project_name
        # 区域id
        self.sls_region_id = sls_region_id
        # 租户id
        self.tenant_id = tenant_id

    def validate(self):
        self.validate_required(self.logstore_name, 'logstore_name')
        self.validate_required(self.project_name, 'project_name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.logstore_name is not None:
            result['logstore_name'] = self.logstore_name
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.sls_region_id is not None:
            result['sls_region_id'] = self.sls_region_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('logstore_name') is not None:
            self.logstore_name = m.get('logstore_name')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('sls_region_id') is not None:
            self.sls_region_id = m.get('sls_region_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        return self


class GetSlsLogstoreResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: SLSLogStore = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 单个日志库信息
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            temp_model = SLSLogStore()
            self.data = temp_model.from_map(m['data'])
        return self


class CreateSlsConfigRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        config: SLSConfig = None,
        project_name: str = None,
        sls_region_id: str = None,
        tenant_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 日志配置详情
        self.config = config
        # 日志项目名称
        self.project_name = project_name
        # 区域id
        self.sls_region_id = sls_region_id
        # 租户id
        self.tenant_id = tenant_id

    def validate(self):
        self.validate_required(self.config, 'config')
        if self.config:
            self.config.validate()
        self.validate_required(self.project_name, 'project_name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.config is not None:
            result['config'] = self.config.to_map()
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.sls_region_id is not None:
            result['sls_region_id'] = self.sls_region_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('config') is not None:
            temp_model = SLSConfig()
            self.config = temp_model.from_map(m['config'])
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('sls_region_id') is not None:
            self.sls_region_id = m.get('sls_region_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        return self


class CreateSlsConfigResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 创建日志配置结果
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class ListSlsConfigRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        project_name: str = None,
        sls_region_id: str = None,
        tenant_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 日志项目名称
        self.project_name = project_name
        # 区域id
        self.sls_region_id = sls_region_id
        # 租户id
        self.tenant_id = tenant_id

    def validate(self):
        self.validate_required(self.project_name, 'project_name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.sls_region_id is not None:
            result['sls_region_id'] = self.sls_region_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('sls_region_id') is not None:
            self.sls_region_id = m.get('sls_region_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        return self


class ListSlsConfigResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[str] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 日志配置名称列表
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class UpdateSlsConfigRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        config: SLSConfig = None,
        project_name: str = None,
        sls_region_id: str = None,
        tenant_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 要更新的日志配置详情
        self.config = config
        # 日志项目名称
        self.project_name = project_name
        # 区域id
        self.sls_region_id = sls_region_id
        # 租户id
        self.tenant_id = tenant_id

    def validate(self):
        self.validate_required(self.config, 'config')
        if self.config:
            self.config.validate()
        self.validate_required(self.project_name, 'project_name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.config is not None:
            result['config'] = self.config.to_map()
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.sls_region_id is not None:
            result['sls_region_id'] = self.sls_region_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('config') is not None:
            temp_model = SLSConfig()
            self.config = temp_model.from_map(m['config'])
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('sls_region_id') is not None:
            self.sls_region_id = m.get('sls_region_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        return self


class UpdateSlsConfigResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 更新日志配置是否成功
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DeleteSlsConfigRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        name: str = None,
        project_name: str = None,
        sls_region_id: str = None,
        tenant_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 要删除的日志配置名称
        self.name = name
        # 日志项目名称
        self.project_name = project_name
        # 区域id
        self.sls_region_id = sls_region_id
        # 租户id
        self.tenant_id = tenant_id

    def validate(self):
        self.validate_required(self.name, 'name')
        self.validate_required(self.project_name, 'project_name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.name is not None:
            result['name'] = self.name
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.sls_region_id is not None:
            result['sls_region_id'] = self.sls_region_id
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('sls_region_id') is not None:
            self.sls_region_id = m.get('sls_region_id')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        return self


class DeleteSlsConfigResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 删除日志配置是否成功
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QuerySlsLogRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        from_: int = None,
        line: int = None,
        logstore_name: str = None,
        offset: int = None,
        project_name: str = None,
        query: str = None,
        sls_region_id: str = None,
        reverse: bool = None,
        tenant_id: str = None,
        to: int = None,
        topic: str = None,
        type: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 查询开始时间点（精度为秒，从 1970-1-1 00:00:00 UTC 计算起的秒数）。
        self.from_ = from_
        # 请求返回的最大日志条数。取值范围为 0~100，默认值为 100。
        self.line = line
        # 需要查询日志的 Logstore 名称。
        self.logstore_name = logstore_name
        # 请求返回日志的起始点。取值范围为 0 或正整数，默认值为 0。
        self.offset = offset
        # 日志项目名称
        self.project_name = project_name
        # 查询表达式。关于查询表达式的详细语法，请参见 。
        self.query = query
        # 区域id
        self.sls_region_id = sls_region_id
        # 是否按日志时间戳逆序返回日志，精确到分钟级别。true 表示逆序，false 表示顺序，默认值为 false。
        self.reverse = reverse
        # 租户id
        self.tenant_id = tenant_id
        # 查询结束时间点（精度为秒，从 1970-1-1 00:00:00 UTC 计算起的秒数）。
        self.to = to
        # 查询日志主题。
        self.topic = topic
        # 查询 Logstore 数据的类型。在 GetLogs 接口中该参数必须为 log。
        self.type = type

    def validate(self):
        self.validate_required(self.from_, 'from_')
        self.validate_required(self.logstore_name, 'logstore_name')
        self.validate_required(self.project_name, 'project_name')
        self.validate_required(self.to, 'to')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.from_ is not None:
            result['from'] = self.from_
        if self.line is not None:
            result['line'] = self.line
        if self.logstore_name is not None:
            result['logstore_name'] = self.logstore_name
        if self.offset is not None:
            result['offset'] = self.offset
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.query is not None:
            result['query'] = self.query
        if self.sls_region_id is not None:
            result['sls_region_id'] = self.sls_region_id
        if self.reverse is not None:
            result['reverse'] = self.reverse
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.to is not None:
            result['to'] = self.to
        if self.topic is not None:
            result['topic'] = self.topic
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('from') is not None:
            self.from_ = m.get('from')
        if m.get('line') is not None:
            self.line = m.get('line')
        if m.get('logstore_name') is not None:
            self.logstore_name = m.get('logstore_name')
        if m.get('offset') is not None:
            self.offset = m.get('offset')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('query') is not None:
            self.query = m.get('query')
        if m.get('sls_region_id') is not None:
            self.sls_region_id = m.get('sls_region_id')
        if m.get('reverse') is not None:
            self.reverse = m.get('reverse')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('to') is not None:
            self.to = m.get('to')
        if m.get('topic') is not None:
            self.topic = m.get('topic')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class QuerySlsLogResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[SLSLogItem] = None,
        page_num: int = None,
        page_size: int = None,
        total: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # GetLogs的响应body是一个数组，数组中每个元素是一条日志结果
        self.data = data
        # 页数
        self.page_num = page_num
        # 分页大小
        self.page_size = page_size
        # 结果总数
        self.total = total

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.page_num is not None:
            result['page_num'] = self.page_num
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total is not None:
            result['total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = SLSLogItem()
                self.data.append(temp_model.from_map(k))
        if m.get('page_num') is not None:
            self.page_num = m.get('page_num')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total') is not None:
            self.total = m.get('total')
        return self


class BatchcreateResourceIngressrulesRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        ingress_rules: List[SecurityGroupRule] = None,
        region: str = None,
        security_group_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 安全组入口规则
        self.ingress_rules = ingress_rules
        # region identity
        self.region = region
        # 安全组id
        self.security_group_id = security_group_id

    def validate(self):
        self.validate_required(self.ingress_rules, 'ingress_rules')
        if self.ingress_rules:
            for k in self.ingress_rules:
                if k:
                    k.validate()
        self.validate_required(self.region, 'region')
        self.validate_required(self.security_group_id, 'security_group_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        result['ingress_rules'] = []
        if self.ingress_rules is not None:
            for k in self.ingress_rules:
                result['ingress_rules'].append(k.to_map() if k else None)
        if self.region is not None:
            result['region'] = self.region
        if self.security_group_id is not None:
            result['security_group_id'] = self.security_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        self.ingress_rules = []
        if m.get('ingress_rules') is not None:
            for k in m.get('ingress_rules'):
                temp_model = SecurityGroupRule()
                self.ingress_rules.append(temp_model.from_map(k))
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('security_group_id') is not None:
            self.security_group_id = m.get('security_group_id')
        return self


class BatchcreateResourceIngressrulesResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        success: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 安全组入方向规则是否添加成功
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class BatchcreateResourceEgressrulesRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        egress_rules: List[SecurityGroupRule] = None,
        region: str = None,
        security_group_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 安全组出方向规则
        self.egress_rules = egress_rules
        # region identity
        self.region = region
        # 安全组id
        self.security_group_id = security_group_id

    def validate(self):
        self.validate_required(self.egress_rules, 'egress_rules')
        if self.egress_rules:
            for k in self.egress_rules:
                if k:
                    k.validate()
        self.validate_required(self.region, 'region')
        self.validate_required(self.security_group_id, 'security_group_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        result['egress_rules'] = []
        if self.egress_rules is not None:
            for k in self.egress_rules:
                result['egress_rules'].append(k.to_map() if k else None)
        if self.region is not None:
            result['region'] = self.region
        if self.security_group_id is not None:
            result['security_group_id'] = self.security_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        self.egress_rules = []
        if m.get('egress_rules') is not None:
            for k in m.get('egress_rules'):
                temp_model = SecurityGroupRule()
                self.egress_rules.append(temp_model.from_map(k))
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('security_group_id') is not None:
            self.security_group_id = m.get('security_group_id')
        return self


class BatchcreateResourceEgressrulesResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        success: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 安全组出方向规则是否添加成功
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class QueryLoadbalanceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_ids: List[str] = None,
        app_service_ids: List[str] = None,
        cluster_ids: List[str] = None,
        cluster_mode: bool = None,
        current_page: int = None,
        domains: List[str] = None,
        health_levels: List[str] = None,
        iaas_ids: List[str] = None,
        name: str = None,
        network_type: str = None,
        page_size: int = None,
        share_mode: bool = None,
        statuses: List[str] = None,
        vip_addresses: List[str] = None,
        vip_address_type: str = None,
        vip_type: str = None,
        vpc_ids: List[str] = None,
        vswitch_iaas_ids: List[str] = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # app_ids
        self.app_ids = app_ids
        # app_service_ids
        self.app_service_ids = app_service_ids
        # cluster_ids
        self.cluster_ids = cluster_ids
        # cluster_mode
        self.cluster_mode = cluster_mode
        # current_page
        self.current_page = current_page
        # domains
        self.domains = domains
        # health_levels
        self.health_levels = health_levels
        # iaas_ids
        self.iaas_ids = iaas_ids
        # name
        self.name = name
        # 网络类型
        self.network_type = network_type
        # page_size
        self.page_size = page_size
        # share_mode
        self.share_mode = share_mode
        # lb状态
        self.statuses = statuses
        # vip地址
        self.vip_addresses = vip_addresses
        # vip地址类型
        self.vip_address_type = vip_address_type
        # vip类型
        self.vip_type = vip_type
        # vpc_ids
        self.vpc_ids = vpc_ids
        # vswitch_iaas_ids
        self.vswitch_iaas_ids = vswitch_iaas_ids
        # workspace
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_ids is not None:
            result['app_ids'] = self.app_ids
        if self.app_service_ids is not None:
            result['app_service_ids'] = self.app_service_ids
        if self.cluster_ids is not None:
            result['cluster_ids'] = self.cluster_ids
        if self.cluster_mode is not None:
            result['cluster_mode'] = self.cluster_mode
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.domains is not None:
            result['domains'] = self.domains
        if self.health_levels is not None:
            result['health_levels'] = self.health_levels
        if self.iaas_ids is not None:
            result['iaas_ids'] = self.iaas_ids
        if self.name is not None:
            result['name'] = self.name
        if self.network_type is not None:
            result['network_type'] = self.network_type
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.share_mode is not None:
            result['share_mode'] = self.share_mode
        if self.statuses is not None:
            result['statuses'] = self.statuses
        if self.vip_addresses is not None:
            result['vip_addresses'] = self.vip_addresses
        if self.vip_address_type is not None:
            result['vip_address_type'] = self.vip_address_type
        if self.vip_type is not None:
            result['vip_type'] = self.vip_type
        if self.vpc_ids is not None:
            result['vpc_ids'] = self.vpc_ids
        if self.vswitch_iaas_ids is not None:
            result['vswitch_iaas_ids'] = self.vswitch_iaas_ids
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_ids') is not None:
            self.app_ids = m.get('app_ids')
        if m.get('app_service_ids') is not None:
            self.app_service_ids = m.get('app_service_ids')
        if m.get('cluster_ids') is not None:
            self.cluster_ids = m.get('cluster_ids')
        if m.get('cluster_mode') is not None:
            self.cluster_mode = m.get('cluster_mode')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('domains') is not None:
            self.domains = m.get('domains')
        if m.get('health_levels') is not None:
            self.health_levels = m.get('health_levels')
        if m.get('iaas_ids') is not None:
            self.iaas_ids = m.get('iaas_ids')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('network_type') is not None:
            self.network_type = m.get('network_type')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('share_mode') is not None:
            self.share_mode = m.get('share_mode')
        if m.get('statuses') is not None:
            self.statuses = m.get('statuses')
        if m.get('vip_addresses') is not None:
            self.vip_addresses = m.get('vip_addresses')
        if m.get('vip_address_type') is not None:
            self.vip_address_type = m.get('vip_address_type')
        if m.get('vip_type') is not None:
            self.vip_type = m.get('vip_type')
        if m.get('vpc_ids') is not None:
            self.vpc_ids = m.get('vpc_ids')
        if m.get('vswitch_iaas_ids') is not None:
            self.vswitch_iaas_ids = m.get('vswitch_iaas_ids')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class QueryLoadbalanceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[LoadBalancer] = None,
        total_count: int = None,
        current_page: int = None,
        page_size: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回的lb
        self.data = data
        # total_count
        self.total_count = total_count
        # current_page
        self.current_page = current_page
        # page_size
        self.page_size = page_size

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = LoadBalancer()
                self.data.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        return self


class GetLoadbalanceHealthRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        lb_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # lb_id
        self.lb_id = lb_id

    def validate(self):
        self.validate_required(self.lb_id, 'lb_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.lb_id is not None:
            result['lb_id'] = self.lb_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('lb_id') is not None:
            self.lb_id = m.get('lb_id')
        return self


class GetLoadbalanceHealthResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[LoadBalanceHealthStatus] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # statuses
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = LoadBalanceHealthStatus()
                self.data.append(temp_model.from_map(k))
        return self


class AllLoadbalanceViptypeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        return self


class AllLoadbalanceViptypeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[VipType] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # vip_types
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = VipType()
                self.data.append(temp_model.from_map(k))
        return self


class AllLoadbalanceClusterRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace: str = None,
        zone_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace
        self.workspace = workspace
        # zone_id
        self.zone_id = zone_id

    def validate(self):
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace is not None:
            result['workspace'] = self.workspace
        if self.zone_id is not None:
            result['zone_id'] = self.zone_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        if m.get('zone_id') is not None:
            self.zone_id = m.get('zone_id')
        return self


class AllLoadbalanceClusterResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[LbCluster] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = LbCluster()
                self.data.append(temp_model.from_map(k))
        return self


class QueryVpcRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        id: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # vpc id
        self.id = id
        # workspace name
        self.workspace = workspace

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.id is not None:
            result['id'] = self.id
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class QueryVpcResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: VpcVO = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # vpc detail info
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            temp_model = VpcVO()
            self.data = temp_model.from_map(m['data'])
        return self


class ListVpcImportRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        region: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # region name
        self.region = region
        # workspace name
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.region, 'region')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.region is not None:
            result['region'] = self.region
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class ListVpcImportResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[VpcImport] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # vpc import infos
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = VpcImport()
                self.data.append(temp_model.from_map(k))
        return self


class ListVpcCidrblockRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        region: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # region
        self.region = region

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.region is not None:
            result['region'] = self.region
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('region') is not None:
            self.region = m.get('region')
        return self


class ListVpcCidrblockResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[str] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # cidr block list
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryVpcVswitchRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        vpc_id: str = None,
        vswitch_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # vpc paas id
        self.vpc_id = vpc_id
        # vswitch iaas id
        self.vswitch_id = vswitch_id

    def validate(self):
        self.validate_required(self.vpc_id, 'vpc_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.vpc_id is not None:
            result['vpc_id'] = self.vpc_id
        if self.vswitch_id is not None:
            result['vswitch_id'] = self.vswitch_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('vpc_id') is not None:
            self.vpc_id = m.get('vpc_id')
        if m.get('vswitch_id') is not None:
            self.vswitch_id = m.get('vswitch_id')
        return self


class QueryVpcVswitchResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[VSwitchVO] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # vswitch detail infos
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = VSwitchVO()
                self.data.append(temp_model.from_map(k))
        return self


class QueryVpcVroutertableRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        vpc_id: str = None,
        v_router_id: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # vpc id
        self.vpc_id = vpc_id
        # 路由器id
        self.v_router_id = v_router_id
        # workspace name
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.vpc_id, 'vpc_id')
        self.validate_required(self.v_router_id, 'v_router_id')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.vpc_id is not None:
            result['vpc_id'] = self.vpc_id
        if self.v_router_id is not None:
            result['v_router_id'] = self.v_router_id
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('vpc_id') is not None:
            self.vpc_id = m.get('vpc_id')
        if m.get('v_router_id') is not None:
            self.v_router_id = m.get('v_router_id')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class QueryVpcVroutertableResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[RouteTable] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 
        # 路由表的详细信息。
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = RouteTable()
                self.data.append(temp_model.from_map(k))
        return self


class GetLoadbalanceRuleRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        id: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # rule id
        self.id = id
        # workspace
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.id is not None:
            result['id'] = self.id
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class GetLoadbalanceRuleResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: LoadBalancerRule = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # rule
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            temp_model = LoadBalancerRule()
            self.data = temp_model.from_map(m['data'])
        return self


class QueryLoadbalanceRuleRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_ids: List[str] = None,
        cookies: List[str] = None,
        current_page: int = None,
        domains: List[str] = None,
        domain_urls: List[str] = None,
        health_monitor_ids: List[str] = None,
        listener_ports: List[int] = None,
        loadbalancer_ids: List[str] = None,
        page_size: int = None,
        statuses: List[str] = None,
        urls: List[str] = None,
        vcomputer_group_ids: List[str] = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # app_ids
        self.app_ids = app_ids
        # cookies
        self.cookies = cookies
        # current_page
        self.current_page = current_page
        # domains
        self.domains = domains
        # domain_urls
        self.domain_urls = domain_urls
        # health_monitor_ids
        self.health_monitor_ids = health_monitor_ids
        # listener_ports
        self.listener_ports = listener_ports
        # loadbalancer_ids
        self.loadbalancer_ids = loadbalancer_ids
        # page_size
        self.page_size = page_size
        # statuses
        self.statuses = statuses
        # urls
        self.urls = urls
        # vcomputer_group_ids
        self.vcomputer_group_ids = vcomputer_group_ids
        # workspace
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_ids is not None:
            result['app_ids'] = self.app_ids
        if self.cookies is not None:
            result['cookies'] = self.cookies
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.domains is not None:
            result['domains'] = self.domains
        if self.domain_urls is not None:
            result['domain_urls'] = self.domain_urls
        if self.health_monitor_ids is not None:
            result['health_monitor_ids'] = self.health_monitor_ids
        if self.listener_ports is not None:
            result['listener_ports'] = self.listener_ports
        if self.loadbalancer_ids is not None:
            result['loadbalancer_ids'] = self.loadbalancer_ids
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.statuses is not None:
            result['statuses'] = self.statuses
        if self.urls is not None:
            result['urls'] = self.urls
        if self.vcomputer_group_ids is not None:
            result['vcomputer_group_ids'] = self.vcomputer_group_ids
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_ids') is not None:
            self.app_ids = m.get('app_ids')
        if m.get('cookies') is not None:
            self.cookies = m.get('cookies')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('domains') is not None:
            self.domains = m.get('domains')
        if m.get('domain_urls') is not None:
            self.domain_urls = m.get('domain_urls')
        if m.get('health_monitor_ids') is not None:
            self.health_monitor_ids = m.get('health_monitor_ids')
        if m.get('listener_ports') is not None:
            self.listener_ports = m.get('listener_ports')
        if m.get('loadbalancer_ids') is not None:
            self.loadbalancer_ids = m.get('loadbalancer_ids')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('statuses') is not None:
            self.statuses = m.get('statuses')
        if m.get('urls') is not None:
            self.urls = m.get('urls')
        if m.get('vcomputer_group_ids') is not None:
            self.vcomputer_group_ids = m.get('vcomputer_group_ids')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class QueryLoadbalanceRuleResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[LoadBalancerRule] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # rules
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = LoadBalancerRule()
                self.data.append(temp_model.from_map(k))
        return self


class GetLoadbalanceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # id
        self.id = id

    def validate(self):
        self.validate_required(self.id, 'id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class GetLoadbalanceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: LoadBalancer = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            temp_model = LoadBalancer()
            self.data = temp_model.from_map(m['data'])
        return self


class AllLoadbalanceMountRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        loadbalance_id: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # loadbalance_id
        self.loadbalance_id = loadbalance_id
        # workspace
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.loadbalance_id, 'loadbalance_id')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.loadbalance_id is not None:
            result['loadbalance_id'] = self.loadbalance_id
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('loadbalance_id') is not None:
            self.loadbalance_id = m.get('loadbalance_id')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class AllLoadbalanceMountResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[MountComputer] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = MountComputer()
                self.data.append(temp_model.from_map(k))
        return self


class QueryLoadbalanceMountRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_ids: List[str] = None,
        current_page: int = None,
        domains: List[str] = None,
        iaas_ids_exclude: List[str] = None,
        initialized: bool = None,
        loadbalance_ids: List[str] = None,
        mounted: bool = None,
        page_size: int = None,
        statuses: List[str] = None,
        workspace: str = None,
        region_ids: List[str] = None,
        zone_ids: List[str] = None,
        name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # app_ids
        self.app_ids = app_ids
        # current_page
        self.current_page = current_page
        # domains
        self.domains = domains
        # iaas_ids_exclude
        self.iaas_ids_exclude = iaas_ids_exclude
        # initialized
        self.initialized = initialized
        # loadbalance_ids
        self.loadbalance_ids = loadbalance_ids
        # mounted
        self.mounted = mounted
        # page_size
        self.page_size = page_size
        # statuses
        self.statuses = statuses
        # workspace
        self.workspace = workspace
        # region_ids
        self.region_ids = region_ids
        # zone_ids
        self.zone_ids = zone_ids
        # name
        self.name = name

    def validate(self):
        self.validate_required(self.loadbalance_ids, 'loadbalance_ids')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_ids is not None:
            result['app_ids'] = self.app_ids
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.domains is not None:
            result['domains'] = self.domains
        if self.iaas_ids_exclude is not None:
            result['iaas_ids_exclude'] = self.iaas_ids_exclude
        if self.initialized is not None:
            result['initialized'] = self.initialized
        if self.loadbalance_ids is not None:
            result['loadbalance_ids'] = self.loadbalance_ids
        if self.mounted is not None:
            result['mounted'] = self.mounted
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.statuses is not None:
            result['statuses'] = self.statuses
        if self.workspace is not None:
            result['workspace'] = self.workspace
        if self.region_ids is not None:
            result['region_ids'] = self.region_ids
        if self.zone_ids is not None:
            result['zone_ids'] = self.zone_ids
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_ids') is not None:
            self.app_ids = m.get('app_ids')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('domains') is not None:
            self.domains = m.get('domains')
        if m.get('iaas_ids_exclude') is not None:
            self.iaas_ids_exclude = m.get('iaas_ids_exclude')
        if m.get('initialized') is not None:
            self.initialized = m.get('initialized')
        if m.get('loadbalance_ids') is not None:
            self.loadbalance_ids = m.get('loadbalance_ids')
        if m.get('mounted') is not None:
            self.mounted = m.get('mounted')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('statuses') is not None:
            self.statuses = m.get('statuses')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        if m.get('region_ids') is not None:
            self.region_ids = m.get('region_ids')
        if m.get('zone_ids') is not None:
            self.zone_ids = m.get('zone_ids')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class QueryLoadbalanceMountResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        current_page: int = None,
        data: List[MountComputer] = None,
        page_size: int = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # current_page
        self.current_page = current_page
        # data
        self.data = data
        # page_size
        self.page_size = page_size
        # total_count
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.current_page is not None:
            result['current_page'] = self.current_page
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = MountComputer()
                self.data.append(temp_model.from_map(k))
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class GetLoadbalanceVcomputergroupRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        id: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # id
        self.id = id
        # workspace
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.id is not None:
            result['id'] = self.id
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class GetLoadbalanceVcomputergroupResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: VComputerGroup = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            temp_model = VComputerGroup()
            self.data = temp_model.from_map(m['data'])
        return self


class QueryLoadbalanceVcomputergroupRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        load_balance_ids: List[str] = None,
        name: str = None,
        statuses: List[str] = None,
        workspace: str = None,
        v_computer_group_ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # load_balance_ids
        self.load_balance_ids = load_balance_ids
        # name
        self.name = name
        # statuses
        self.statuses = statuses
        # workspace
        self.workspace = workspace
        # v_computer_group_ids
        self.v_computer_group_ids = v_computer_group_ids

    def validate(self):
        self.validate_required(self.load_balance_ids, 'load_balance_ids')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.load_balance_ids is not None:
            result['load_balance_ids'] = self.load_balance_ids
        if self.name is not None:
            result['name'] = self.name
        if self.statuses is not None:
            result['statuses'] = self.statuses
        if self.workspace is not None:
            result['workspace'] = self.workspace
        if self.v_computer_group_ids is not None:
            result['v_computer_group_ids'] = self.v_computer_group_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('load_balance_ids') is not None:
            self.load_balance_ids = m.get('load_balance_ids')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('statuses') is not None:
            self.statuses = m.get('statuses')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        if m.get('v_computer_group_ids') is not None:
            self.v_computer_group_ids = m.get('v_computer_group_ids')
        return self


class QueryLoadbalanceVcomputergroupResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[VComputerGroup] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = VComputerGroup()
                self.data.append(temp_model.from_map(k))
        return self


class AllLoadbalanceVcomputergroupRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class AllLoadbalanceVcomputergroupResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[VComputerGroup] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = VComputerGroup()
                self.data.append(temp_model.from_map(k))
        return self


class QueryLoadbalanceVcomputerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        computer_ids: List[str] = None,
        computer_ports: List[str] = None,
        current_page: int = None,
        ips: List[str] = None,
        ip_ports: List[str] = None,
        max_weight: int = None,
        min_weight: int = None,
        page_size: int = None,
        ports: List[str] = None,
        v_computer_group_ids: List[str] = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # computer_ids
        self.computer_ids = computer_ids
        # computer_ports
        self.computer_ports = computer_ports
        # current_page
        self.current_page = current_page
        # ips
        self.ips = ips
        # ip_ports
        self.ip_ports = ip_ports
        # max_weight
        self.max_weight = max_weight
        # min_weight
        self.min_weight = min_weight
        # page_size
        self.page_size = page_size
        # ports
        self.ports = ports
        # v_computer_group_ids
        self.v_computer_group_ids = v_computer_group_ids
        # workspace
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.computer_ids is not None:
            result['computer_ids'] = self.computer_ids
        if self.computer_ports is not None:
            result['computer_ports'] = self.computer_ports
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.ips is not None:
            result['ips'] = self.ips
        if self.ip_ports is not None:
            result['ip_ports'] = self.ip_ports
        if self.max_weight is not None:
            result['max_weight'] = self.max_weight
        if self.min_weight is not None:
            result['min_weight'] = self.min_weight
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.ports is not None:
            result['ports'] = self.ports
        if self.v_computer_group_ids is not None:
            result['v_computer_group_ids'] = self.v_computer_group_ids
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('computer_ids') is not None:
            self.computer_ids = m.get('computer_ids')
        if m.get('computer_ports') is not None:
            self.computer_ports = m.get('computer_ports')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('ips') is not None:
            self.ips = m.get('ips')
        if m.get('ip_ports') is not None:
            self.ip_ports = m.get('ip_ports')
        if m.get('max_weight') is not None:
            self.max_weight = m.get('max_weight')
        if m.get('min_weight') is not None:
            self.min_weight = m.get('min_weight')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('ports') is not None:
            self.ports = m.get('ports')
        if m.get('v_computer_group_ids') is not None:
            self.v_computer_group_ids = m.get('v_computer_group_ids')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class QueryLoadbalanceVcomputerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[VComputer] = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # v_computers
        self.data = data
        # total_count
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = VComputer()
                self.data.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class QueryLoadbalanceListenerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        backend_server_ports: List[int] = None,
        certificate_iaas_ids: List[str] = None,
        certificate_ids: List[str] = None,
        current_page: int = None,
        gm_crypto_cert_iaas_ids: List[str] = None,
        gm_sign_cert_iaas_ids: List[str] = None,
        listener_ports: List[int] = None,
        load_balancer_ids: List[str] = None,
        page_size: int = None,
        types: List[str] = None,
        v_computer_group_ids: List[str] = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # backend_server_ports
        self.backend_server_ports = backend_server_ports
        # certificate_iaas_ids
        self.certificate_iaas_ids = certificate_iaas_ids
        # certificate_ids
        self.certificate_ids = certificate_ids
        # current_page
        self.current_page = current_page
        # gm_crypto_cert_iaas_ids
        self.gm_crypto_cert_iaas_ids = gm_crypto_cert_iaas_ids
        # gm_sign_cert_iaas_ids
        self.gm_sign_cert_iaas_ids = gm_sign_cert_iaas_ids
        # listener_ports
        self.listener_ports = listener_ports
        # load_balancer_ids
        self.load_balancer_ids = load_balancer_ids
        # page_size
        self.page_size = page_size
        # types
        self.types = types
        # v_computer_group_ids
        self.v_computer_group_ids = v_computer_group_ids
        # workspace
        self.workspace = workspace

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.backend_server_ports is not None:
            result['backend_server_ports'] = self.backend_server_ports
        if self.certificate_iaas_ids is not None:
            result['certificate_iaas_ids'] = self.certificate_iaas_ids
        if self.certificate_ids is not None:
            result['certificate_ids'] = self.certificate_ids
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.gm_crypto_cert_iaas_ids is not None:
            result['gm_crypto_cert_iaas_ids'] = self.gm_crypto_cert_iaas_ids
        if self.gm_sign_cert_iaas_ids is not None:
            result['gm_sign_cert_iaas_ids'] = self.gm_sign_cert_iaas_ids
        if self.listener_ports is not None:
            result['listener_ports'] = self.listener_ports
        if self.load_balancer_ids is not None:
            result['load_balancer_ids'] = self.load_balancer_ids
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.types is not None:
            result['types'] = self.types
        if self.v_computer_group_ids is not None:
            result['v_computer_group_ids'] = self.v_computer_group_ids
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('backend_server_ports') is not None:
            self.backend_server_ports = m.get('backend_server_ports')
        if m.get('certificate_iaas_ids') is not None:
            self.certificate_iaas_ids = m.get('certificate_iaas_ids')
        if m.get('certificate_ids') is not None:
            self.certificate_ids = m.get('certificate_ids')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('gm_crypto_cert_iaas_ids') is not None:
            self.gm_crypto_cert_iaas_ids = m.get('gm_crypto_cert_iaas_ids')
        if m.get('gm_sign_cert_iaas_ids') is not None:
            self.gm_sign_cert_iaas_ids = m.get('gm_sign_cert_iaas_ids')
        if m.get('listener_ports') is not None:
            self.listener_ports = m.get('listener_ports')
        if m.get('load_balancer_ids') is not None:
            self.load_balancer_ids = m.get('load_balancer_ids')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('types') is not None:
            self.types = m.get('types')
        if m.get('v_computer_group_ids') is not None:
            self.v_computer_group_ids = m.get('v_computer_group_ids')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class QueryLoadbalanceListenerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[Listener] = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # listeners
        self.data = data
        # total_count
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = Listener()
                self.data.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class AllLoadbalanceListenerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        lb_id: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # lb_id
        self.lb_id = lb_id
        # workspace
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.lb_id, 'lb_id')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.lb_id is not None:
            result['lb_id'] = self.lb_id
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('lb_id') is not None:
            self.lb_id = m.get('lb_id')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class AllLoadbalanceListenerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[Listener] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = Listener()
                self.data.append(temp_model.from_map(k))
        return self


class QueryLoadbalanceSecurityipRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        listener_port: int = None,
        load_balancer_id: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # listener_port
        self.listener_port = listener_port
        # load_balancer_id
        self.load_balancer_id = load_balancer_id
        # workspace
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.listener_port, 'listener_port')
        self.validate_required(self.load_balancer_id, 'load_balancer_id')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.listener_port is not None:
            result['listener_port'] = self.listener_port
        if self.load_balancer_id is not None:
            result['load_balancer_id'] = self.load_balancer_id
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('listener_port') is not None:
            self.listener_port = m.get('listener_port')
        if m.get('load_balancer_id') is not None:
            self.load_balancer_id = m.get('load_balancer_id')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class QueryLoadbalanceSecurityipResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: ListenerSecurityIp = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # security_ips
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            temp_model = ListenerSecurityIp()
            self.data = temp_model.from_map(m['data'])
        return self


class GetDatabaseRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        id: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # id
        self.id = id
        # workspace
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.id, 'id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.id is not None:
            result['id'] = self.id
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class GetDatabaseResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: Database = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            temp_model = Database()
            self.data = temp_model.from_map(m['data'])
        return self


class AllDatabaseMasterzoneRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class AllDatabaseMasterzoneResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        master_zones: List[str] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # master_zones
        self.master_zones = master_zones

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.master_zones is not None:
            result['master_zones'] = self.master_zones
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('master_zones') is not None:
            self.master_zones = m.get('master_zones')
        return self


class QueryDatabaseRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_ids: List[str] = None,
        app_service_ids: List[str] = None,
        connection_addresses: List[str] = None,
        current_page: int = None,
        engines: List[str] = None,
        engine_versions: List[str] = None,
        include_shared: bool = None,
        master_ids: List[str] = None,
        max_cpu: int = None,
        max_max_connections: int = None,
        max_max_iops: int = None,
        max_memory: int = None,
        max_port: int = None,
        max_storage: int = None,
        min_cpu: int = None,
        min_max_connections: int = None,
        min_max_iops: int = None,
        min_memory: int = None,
        min_port: int = None,
        min_storage: int = None,
        name: str = None,
        network_type: str = None,
        net_type: str = None,
        page_size: int = None,
        spec_iaas_ids: List[str] = None,
        statuses: List[str] = None,
        types: List[str] = None,
        vpc_ids: List[str] = None,
        v_switch_iaas_ids: List[str] = None,
        workspace_ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # app_ids
        self.app_ids = app_ids
        # app_service_ids
        self.app_service_ids = app_service_ids
        # connection_addresses
        self.connection_addresses = connection_addresses
        # current_page
        self.current_page = current_page
        # engines
        self.engines = engines
        # engine_versions
        self.engine_versions = engine_versions
        # include_shared
        self.include_shared = include_shared
        # master_ids
        self.master_ids = master_ids
        # max_cpu
        self.max_cpu = max_cpu
        # max_max_connections
        self.max_max_connections = max_max_connections
        # max_max_iops
        self.max_max_iops = max_max_iops
        # max_memory
        self.max_memory = max_memory
        # max_port
        self.max_port = max_port
        # max_storage
        self.max_storage = max_storage
        # min_cpu
        self.min_cpu = min_cpu
        # min_max_connections
        self.min_max_connections = min_max_connections
        # min_max_iops
        self.min_max_iops = min_max_iops
        # min_memory
        self.min_memory = min_memory
        # min_port
        self.min_port = min_port
        # min_storage
        self.min_storage = min_storage
        # name
        self.name = name
        # network_type
        self.network_type = network_type
        # net_type
        self.net_type = net_type
        # page_size
        self.page_size = page_size
        # spec_iaas_ids
        self.spec_iaas_ids = spec_iaas_ids
        # statuses
        self.statuses = statuses
        # types
        self.types = types
        # vpc_ids
        self.vpc_ids = vpc_ids
        # v_switch_iaas_ids
        self.v_switch_iaas_ids = v_switch_iaas_ids
        # workspace_ids
        self.workspace_ids = workspace_ids

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_ids is not None:
            result['app_ids'] = self.app_ids
        if self.app_service_ids is not None:
            result['app_service_ids'] = self.app_service_ids
        if self.connection_addresses is not None:
            result['connection_addresses'] = self.connection_addresses
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.engines is not None:
            result['engines'] = self.engines
        if self.engine_versions is not None:
            result['engine_versions'] = self.engine_versions
        if self.include_shared is not None:
            result['include_shared'] = self.include_shared
        if self.master_ids is not None:
            result['master_ids'] = self.master_ids
        if self.max_cpu is not None:
            result['max_cpu'] = self.max_cpu
        if self.max_max_connections is not None:
            result['max_max_connections'] = self.max_max_connections
        if self.max_max_iops is not None:
            result['max_max_iops'] = self.max_max_iops
        if self.max_memory is not None:
            result['max_memory'] = self.max_memory
        if self.max_port is not None:
            result['max_port'] = self.max_port
        if self.max_storage is not None:
            result['max_storage'] = self.max_storage
        if self.min_cpu is not None:
            result['min_cpu'] = self.min_cpu
        if self.min_max_connections is not None:
            result['min_max_connections'] = self.min_max_connections
        if self.min_max_iops is not None:
            result['min_max_iops'] = self.min_max_iops
        if self.min_memory is not None:
            result['min_memory'] = self.min_memory
        if self.min_port is not None:
            result['min_port'] = self.min_port
        if self.min_storage is not None:
            result['min_storage'] = self.min_storage
        if self.name is not None:
            result['name'] = self.name
        if self.network_type is not None:
            result['network_type'] = self.network_type
        if self.net_type is not None:
            result['net_type'] = self.net_type
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.spec_iaas_ids is not None:
            result['spec_iaas_ids'] = self.spec_iaas_ids
        if self.statuses is not None:
            result['statuses'] = self.statuses
        if self.types is not None:
            result['types'] = self.types
        if self.vpc_ids is not None:
            result['vpc_ids'] = self.vpc_ids
        if self.v_switch_iaas_ids is not None:
            result['v_switch_iaas_ids'] = self.v_switch_iaas_ids
        if self.workspace_ids is not None:
            result['workspace_ids'] = self.workspace_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_ids') is not None:
            self.app_ids = m.get('app_ids')
        if m.get('app_service_ids') is not None:
            self.app_service_ids = m.get('app_service_ids')
        if m.get('connection_addresses') is not None:
            self.connection_addresses = m.get('connection_addresses')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('engines') is not None:
            self.engines = m.get('engines')
        if m.get('engine_versions') is not None:
            self.engine_versions = m.get('engine_versions')
        if m.get('include_shared') is not None:
            self.include_shared = m.get('include_shared')
        if m.get('master_ids') is not None:
            self.master_ids = m.get('master_ids')
        if m.get('max_cpu') is not None:
            self.max_cpu = m.get('max_cpu')
        if m.get('max_max_connections') is not None:
            self.max_max_connections = m.get('max_max_connections')
        if m.get('max_max_iops') is not None:
            self.max_max_iops = m.get('max_max_iops')
        if m.get('max_memory') is not None:
            self.max_memory = m.get('max_memory')
        if m.get('max_port') is not None:
            self.max_port = m.get('max_port')
        if m.get('max_storage') is not None:
            self.max_storage = m.get('max_storage')
        if m.get('min_cpu') is not None:
            self.min_cpu = m.get('min_cpu')
        if m.get('min_max_connections') is not None:
            self.min_max_connections = m.get('min_max_connections')
        if m.get('min_max_iops') is not None:
            self.min_max_iops = m.get('min_max_iops')
        if m.get('min_memory') is not None:
            self.min_memory = m.get('min_memory')
        if m.get('min_port') is not None:
            self.min_port = m.get('min_port')
        if m.get('min_storage') is not None:
            self.min_storage = m.get('min_storage')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('network_type') is not None:
            self.network_type = m.get('network_type')
        if m.get('net_type') is not None:
            self.net_type = m.get('net_type')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('spec_iaas_ids') is not None:
            self.spec_iaas_ids = m.get('spec_iaas_ids')
        if m.get('statuses') is not None:
            self.statuses = m.get('statuses')
        if m.get('types') is not None:
            self.types = m.get('types')
        if m.get('vpc_ids') is not None:
            self.vpc_ids = m.get('vpc_ids')
        if m.get('v_switch_iaas_ids') is not None:
            self.v_switch_iaas_ids = m.get('v_switch_iaas_ids')
        if m.get('workspace_ids') is not None:
            self.workspace_ids = m.get('workspace_ids')
        return self


class QueryDatabaseResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[Database] = None,
        total_count: int = None,
        current_page: int = None,
        page_size: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data
        # total_count
        self.total_count = total_count
        # current_page
        self.current_page = current_page
        # page_size
        self.page_size = page_size

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = Database()
                self.data.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        return self


class QueryDatabaseSpecRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        current_page: int = None,
        custom_storage: bool = None,
        engines: List[str] = None,
        engine_versions: List[str] = None,
        iaas_ids: List[str] = None,
        ids: List[str] = None,
        max_cpu: int = None,
        max_max_connections: int = None,
        max_max_iops: int = None,
        max_memory: int = None,
        min_cpu: int = None,
        min_max_connections: int = None,
        min_max_iops: int = None,
        min_memory: int = None,
        page_size: int = None,
        types: List[str] = None,
        provider_ids: List[str] = None,
        enable: bool = None,
        iaas_types: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # current_page
        self.current_page = current_page
        # custom_storage
        self.custom_storage = custom_storage
        # engines
        self.engines = engines
        # engine_versions
        self.engine_versions = engine_versions
        # iaas_ids
        self.iaas_ids = iaas_ids
        # ids
        self.ids = ids
        # max_cpu
        self.max_cpu = max_cpu
        # max_max_connections
        self.max_max_connections = max_max_connections
        # max_max_iops
        self.max_max_iops = max_max_iops
        # max_memory
        self.max_memory = max_memory
        # min_cpu
        self.min_cpu = min_cpu
        # min_max_connections
        self.min_max_connections = min_max_connections
        # min_max_iops
        self.min_max_iops = min_max_iops
        # min_memory
        self.min_memory = min_memory
        # pageSize
        self.page_size = page_size
        # types
        self.types = types
        # provider_ids
        self.provider_ids = provider_ids
        # enable
        self.enable = enable
        # iaas_types
        self.iaas_types = iaas_types

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.custom_storage is not None:
            result['custom_storage'] = self.custom_storage
        if self.engines is not None:
            result['engines'] = self.engines
        if self.engine_versions is not None:
            result['engine_versions'] = self.engine_versions
        if self.iaas_ids is not None:
            result['iaas_ids'] = self.iaas_ids
        if self.ids is not None:
            result['ids'] = self.ids
        if self.max_cpu is not None:
            result['max_cpu'] = self.max_cpu
        if self.max_max_connections is not None:
            result['max_max_connections'] = self.max_max_connections
        if self.max_max_iops is not None:
            result['max_max_iops'] = self.max_max_iops
        if self.max_memory is not None:
            result['max_memory'] = self.max_memory
        if self.min_cpu is not None:
            result['min_cpu'] = self.min_cpu
        if self.min_max_connections is not None:
            result['min_max_connections'] = self.min_max_connections
        if self.min_max_iops is not None:
            result['min_max_iops'] = self.min_max_iops
        if self.min_memory is not None:
            result['min_memory'] = self.min_memory
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.types is not None:
            result['types'] = self.types
        if self.provider_ids is not None:
            result['provider_ids'] = self.provider_ids
        if self.enable is not None:
            result['enable'] = self.enable
        if self.iaas_types is not None:
            result['iaas_types'] = self.iaas_types
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('custom_storage') is not None:
            self.custom_storage = m.get('custom_storage')
        if m.get('engines') is not None:
            self.engines = m.get('engines')
        if m.get('engine_versions') is not None:
            self.engine_versions = m.get('engine_versions')
        if m.get('iaas_ids') is not None:
            self.iaas_ids = m.get('iaas_ids')
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        if m.get('max_cpu') is not None:
            self.max_cpu = m.get('max_cpu')
        if m.get('max_max_connections') is not None:
            self.max_max_connections = m.get('max_max_connections')
        if m.get('max_max_iops') is not None:
            self.max_max_iops = m.get('max_max_iops')
        if m.get('max_memory') is not None:
            self.max_memory = m.get('max_memory')
        if m.get('min_cpu') is not None:
            self.min_cpu = m.get('min_cpu')
        if m.get('min_max_connections') is not None:
            self.min_max_connections = m.get('min_max_connections')
        if m.get('min_max_iops') is not None:
            self.min_max_iops = m.get('min_max_iops')
        if m.get('min_memory') is not None:
            self.min_memory = m.get('min_memory')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('types') is not None:
            self.types = m.get('types')
        if m.get('provider_ids') is not None:
            self.provider_ids = m.get('provider_ids')
        if m.get('enable') is not None:
            self.enable = m.get('enable')
        if m.get('iaas_types') is not None:
            self.iaas_types = m.get('iaas_types')
        return self


class QueryDatabaseSpecResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[DatabaseSpec] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = DatabaseSpec()
                self.data.append(temp_model.from_map(k))
        return self


class AllDatabaseEngineRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        return self


class AllDatabaseEngineResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[DatabaseEngine] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = DatabaseEngine()
                self.data.append(temp_model.from_map(k))
        return self


class AllDatabaseQuotaRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class AllDatabaseQuotaResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        quotas: List[QuotaKv] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # quotas
        self.quotas = quotas

    def validate(self):
        if self.quotas:
            for k in self.quotas:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['quotas'] = []
        if self.quotas is not None:
            for k in self.quotas:
                result['quotas'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.quotas = []
        if m.get('quotas') is not None:
            for k in m.get('quotas'):
                temp_model = QuotaKv()
                self.quotas.append(temp_model.from_map(k))
        return self


class AllDatabaseSecurityipRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        id: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 数据库id
        self.id = id
        # workspace
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.id, 'id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.id is not None:
            result['id'] = self.id
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class AllDatabaseSecurityipResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[DatabaseSecurityIp] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # security_ips
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = DatabaseSecurityIp()
                self.data.append(temp_model.from_map(k))
        return self


class QueryDatabaseSchemeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        char_sets: List[str] = None,
        current_page: int = None,
        database_id: str = None,
        iaas_ids: List[str] = None,
        ids: List[str] = None,
        name: str = None,
        page_size: int = None,
        statuses: List[str] = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # char_sets
        self.char_sets = char_sets
        # current_page
        self.current_page = current_page
        # database_id
        self.database_id = database_id
        # iaas_ids
        self.iaas_ids = iaas_ids
        # ids
        self.ids = ids
        # name
        self.name = name
        # page_size
        self.page_size = page_size
        # statuses
        self.statuses = statuses
        # workspace
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.database_id, 'database_id')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.char_sets is not None:
            result['char_sets'] = self.char_sets
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.database_id is not None:
            result['database_id'] = self.database_id
        if self.iaas_ids is not None:
            result['iaas_ids'] = self.iaas_ids
        if self.ids is not None:
            result['ids'] = self.ids
        if self.name is not None:
            result['name'] = self.name
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.statuses is not None:
            result['statuses'] = self.statuses
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('char_sets') is not None:
            self.char_sets = m.get('char_sets')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('database_id') is not None:
            self.database_id = m.get('database_id')
        if m.get('iaas_ids') is not None:
            self.iaas_ids = m.get('iaas_ids')
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('statuses') is not None:
            self.statuses = m.get('statuses')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class QueryDatabaseSchemeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[DbSchema] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = DbSchema()
                self.data.append(temp_model.from_map(k))
        return self


class AllDatabaseImportRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class AllDatabaseImportResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        imports: List[DatabaseImportVO] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # imports
        self.imports = imports

    def validate(self):
        if self.imports:
            for k in self.imports:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['imports'] = []
        if self.imports is not None:
            for k in self.imports:
                result['imports'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.imports = []
        if m.get('imports') is not None:
            for k in m.get('imports'):
                temp_model = DatabaseImportVO()
                self.imports.append(temp_model.from_map(k))
        return self


class QueryComputerAgentstatusRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        sn: List[str] = None,
        workspace: str = None,
        iaas_ids: List[str] = None,
        zone_iaas_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # computer serial numbers
        self.sn = sn
        # workspace name
        self.workspace = workspace
        # iaas_ids
        self.iaas_ids = iaas_ids
        # zone_iaas_id
        self.zone_iaas_id = zone_iaas_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.sn is not None:
            result['sn'] = self.sn
        if self.workspace is not None:
            result['workspace'] = self.workspace
        if self.iaas_ids is not None:
            result['iaas_ids'] = self.iaas_ids
        if self.zone_iaas_id is not None:
            result['zone_iaas_id'] = self.zone_iaas_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('sn') is not None:
            self.sn = m.get('sn')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        if m.get('iaas_ids') is not None:
            self.iaas_ids = m.get('iaas_ids')
        if m.get('zone_iaas_id') is not None:
            self.zone_iaas_id = m.get('zone_iaas_id')
        return self


class QueryComputerAgentstatusResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[StarAgentInfo] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # staragent info
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = StarAgentInfo()
                self.data.append(temp_model.from_map(k))
        return self


class QueryComputerAgentsetupcommandRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        sn: List[str] = None,
        workspace: str = None,
        iaas_id: str = None,
        zone_iaas_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # computer serial numbers
        self.sn = sn
        # workspace name
        self.workspace = workspace
        # iaas_id
        self.iaas_id = iaas_id
        # zone_iaas_id
        self.zone_iaas_id = zone_iaas_id

    def validate(self):
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.sn is not None:
            result['sn'] = self.sn
        if self.workspace is not None:
            result['workspace'] = self.workspace
        if self.iaas_id is not None:
            result['iaas_id'] = self.iaas_id
        if self.zone_iaas_id is not None:
            result['zone_iaas_id'] = self.zone_iaas_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('sn') is not None:
            self.sn = m.get('sn')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        if m.get('iaas_id') is not None:
            self.iaas_id = m.get('iaas_id')
        if m.get('zone_iaas_id') is not None:
            self.zone_iaas_id = m.get('zone_iaas_id')
        return self


class QueryComputerAgentsetupcommandResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        results: List[OperationTask] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # operation tasks
        self.results = results

    def validate(self):
        if self.results:
            for k in self.results:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['results'] = []
        if self.results is not None:
            for k in self.results:
                result['results'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.results = []
        if m.get('results') is not None:
            for k in m.get('results'):
                temp_model = OperationTask()
                self.results.append(temp_model.from_map(k))
        return self


class QueryComputerImportRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace: str = None,
        zone: str = None,
        page_size: int = None,
        current_page: int = None,
        name: str = None,
        importable_only: bool = None,
        iaas_id: str = None,
        workspace_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace name
        self.workspace = workspace
        # zone identity
        self.zone = zone
        # page size
        self.page_size = page_size
        # current page
        self.current_page = current_page
        # 机器名称
        self.name = name
        # 是否只查询可导入的
        self.importable_only = importable_only
        # iaas_id
        self.iaas_id = iaas_id
        # workspace_id
        self.workspace_id = workspace_id

    def validate(self):
        self.validate_required(self.workspace, 'workspace')
        self.validate_required(self.page_size, 'page_size')
        self.validate_required(self.current_page, 'current_page')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace is not None:
            result['workspace'] = self.workspace
        if self.zone is not None:
            result['zone'] = self.zone
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.name is not None:
            result['name'] = self.name
        if self.importable_only is not None:
            result['importable_only'] = self.importable_only
        if self.iaas_id is not None:
            result['iaas_id'] = self.iaas_id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        if m.get('zone') is not None:
            self.zone = m.get('zone')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('importable_only') is not None:
            self.importable_only = m.get('importable_only')
        if m.get('iaas_id') is not None:
            self.iaas_id = m.get('iaas_id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class QueryComputerImportResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[ComputerImportVO] = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # computer import infos
        self.data = data
        # total count
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = ComputerImportVO()
                self.data.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class ListComputerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_service_ids: List[str] = None,
        current_page: int = None,
        name: str = None,
        page_size: int = None,
        workspace: str = None,
        cloud_manage_token: str = None,
        vpc_iaas_id: str = None,
        private_ips: List[str] = None,
        iaas_ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # appserviceIds
        self.app_service_ids = app_service_ids
        # current page
        self.current_page = current_page
        # name
        self.name = name
        # current page
        self.page_size = page_size
        # workspace name
        self.workspace = workspace
        # CMP模式下使用的token，一般场景勿用
        self.cloud_manage_token = cloud_manage_token
        # vpc_iaas_id
        self.vpc_iaas_id = vpc_iaas_id
        # private_ips
        self.private_ips = private_ips
        # iaas_ids
        self.iaas_ids = iaas_ids

    def validate(self):
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_service_ids is not None:
            result['app_service_ids'] = self.app_service_ids
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.name is not None:
            result['name'] = self.name
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.workspace is not None:
            result['workspace'] = self.workspace
        if self.cloud_manage_token is not None:
            result['cloud_manage_token'] = self.cloud_manage_token
        if self.vpc_iaas_id is not None:
            result['vpc_iaas_id'] = self.vpc_iaas_id
        if self.private_ips is not None:
            result['private_ips'] = self.private_ips
        if self.iaas_ids is not None:
            result['iaas_ids'] = self.iaas_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_service_ids') is not None:
            self.app_service_ids = m.get('app_service_ids')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        if m.get('cloud_manage_token') is not None:
            self.cloud_manage_token = m.get('cloud_manage_token')
        if m.get('vpc_iaas_id') is not None:
            self.vpc_iaas_id = m.get('vpc_iaas_id')
        if m.get('private_ips') is not None:
            self.private_ips = m.get('private_ips')
        if m.get('iaas_ids') is not None:
            self.iaas_ids = m.get('iaas_ids')
        return self


class ListComputerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[Computer] = None,
        total_count: int = None,
        page_size: int = None,
        current_page: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # computer infos
        self.data = data
        # total count
        self.total_count = total_count
        # page size
        self.page_size = page_size
        # current page
        self.current_page = current_page

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.current_page is not None:
            result['current_page'] = self.current_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = Computer()
                self.data.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        return self


class QueryComputerSpecRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        provider_ids: List[str] = None,
        zone_ids: List[str] = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # prviderIds
        self.provider_ids = provider_ids
        # zoneIds
        self.zone_ids = zone_ids
        # workspace name
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.provider_ids, 'provider_ids')
        self.validate_required(self.zone_ids, 'zone_ids')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.provider_ids is not None:
            result['provider_ids'] = self.provider_ids
        if self.zone_ids is not None:
            result['zone_ids'] = self.zone_ids
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('provider_ids') is not None:
            self.provider_ids = m.get('provider_ids')
        if m.get('zone_ids') is not None:
            self.zone_ids = m.get('zone_ids')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class QueryComputerSpecResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[ComputerSpec] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # computer spec list
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = ComputerSpec()
                self.data.append(temp_model.from_map(k))
        return self


class QueryComputerCommonimageRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        provider_ids: List[str] = None,
        region_ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # providerIds
        self.provider_ids = provider_ids
        # regionIds
        self.region_ids = region_ids

    def validate(self):
        self.validate_required(self.provider_ids, 'provider_ids')
        self.validate_required(self.region_ids, 'region_ids')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.provider_ids is not None:
            result['provider_ids'] = self.provider_ids
        if self.region_ids is not None:
            result['region_ids'] = self.region_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('provider_ids') is not None:
            self.provider_ids = m.get('provider_ids')
        if m.get('region_ids') is not None:
            self.region_ids = m.get('region_ids')
        return self


class QueryComputerCommonimageResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[CommonImage] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # common images
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = CommonImage()
                self.data.append(temp_model.from_map(k))
        return self


class AllLoadbalanceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace_ids
        self.workspace_ids = workspace_ids

    def validate(self):
        self.validate_required(self.workspace_ids, 'workspace_ids')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_ids is not None:
            result['workspace_ids'] = self.workspace_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_ids') is not None:
            self.workspace_ids = m.get('workspace_ids')
        return self


class AllLoadbalanceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[LoadBalancer] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = LoadBalancer()
                self.data.append(temp_model.from_map(k))
        return self


class QueryLoadbalanceImportRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        current_page: int = None,
        page_size: int = None,
        workspace: str = None,
        zone_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # current_page
        self.current_page = current_page
        # page_size
        self.page_size = page_size
        # workspace
        self.workspace = workspace
        # zone_id
        self.zone_id = zone_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.workspace is not None:
            result['workspace'] = self.workspace
        if self.zone_id is not None:
            result['zone_id'] = self.zone_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        if m.get('zone_id') is not None:
            self.zone_id = m.get('zone_id')
        return self


class QueryLoadbalanceImportResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[LoadBalancerImportVO] = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data
        # total_count
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = LoadBalancerImportVO()
                self.data.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class QueryDatabaseImportRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        current_page: int = None,
        iaas_type: str = None,
        page_size: int = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # current_page
        self.current_page = current_page
        # iaas_type
        self.iaas_type = iaas_type
        # page_size
        self.page_size = page_size
        # workspace
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.iaas_type, 'iaas_type')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.iaas_type is not None:
            result['iaas_type'] = self.iaas_type
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('iaas_type') is not None:
            self.iaas_type = m.get('iaas_type')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class QueryDatabaseImportResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[DatabaseImportVO] = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data
        # total_count
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = DatabaseImportVO()
                self.data.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class QueryDatabaseMasterzoneRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class QueryDatabaseMasterzoneResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[str] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryDatabaseQuotaRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class QueryDatabaseQuotaResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[QuotaKv] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = QuotaKv()
                self.data.append(temp_model.from_map(k))
        return self


class QueryDatabaseSecurityipRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        id: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # id
        self.id = id
        # workspace
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.id is not None:
            result['id'] = self.id
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class QueryDatabaseSecurityipResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[DatabaseSecurityIp] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = DatabaseSecurityIp()
                self.data.append(temp_model.from_map(k))
        return self


class QueryDatabaseSchemaRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        char_sets: List[str] = None,
        current_page: int = None,
        database_id: str = None,
        iaas_ids: List[str] = None,
        ids: List[str] = None,
        name: str = None,
        page_size: int = None,
        statuses: List[str] = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # char_sets
        self.char_sets = char_sets
        # current_page
        self.current_page = current_page
        # database_id
        self.database_id = database_id
        # iaas_ids
        self.iaas_ids = iaas_ids
        # ids
        self.ids = ids
        # name
        self.name = name
        # page_size
        self.page_size = page_size
        # statuses
        self.statuses = statuses
        # workspace
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.database_id, 'database_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.char_sets is not None:
            result['char_sets'] = self.char_sets
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.database_id is not None:
            result['database_id'] = self.database_id
        if self.iaas_ids is not None:
            result['iaas_ids'] = self.iaas_ids
        if self.ids is not None:
            result['ids'] = self.ids
        if self.name is not None:
            result['name'] = self.name
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.statuses is not None:
            result['statuses'] = self.statuses
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('char_sets') is not None:
            self.char_sets = m.get('char_sets')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('database_id') is not None:
            self.database_id = m.get('database_id')
        if m.get('iaas_ids') is not None:
            self.iaas_ids = m.get('iaas_ids')
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('statuses') is not None:
            self.statuses = m.get('statuses')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class QueryDatabaseSchemaResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[DbSchema] = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data
        # total_count
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = DbSchema()
                self.data.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class QueryDatabaseAccountRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        current_page: int = None,
        database_id: str = None,
        page_size: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # current_page
        self.current_page = current_page
        # database_id
        self.database_id = database_id
        # page_size
        self.page_size = page_size

    def validate(self):
        self.validate_required(self.database_id, 'database_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.database_id is not None:
            result['database_id'] = self.database_id
        if self.page_size is not None:
            result['page_size'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('database_id') is not None:
            self.database_id = m.get('database_id')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        return self


class QueryDatabaseAccountResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[DatabaseAccount] = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data
        # total_count
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = DatabaseAccount()
                self.data.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class GetWorkspaceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # id
        self.id = id

    def validate(self):
        self.validate_required(self.id, 'id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class GetWorkspaceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: WorkspaceDto = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # workspaceDto
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            temp_model = WorkspaceDto()
            self.data = temp_model.from_map(m['data'])
        return self


class ListRegionRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        return self


class ListRegionResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[RegionDto] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # list
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = RegionDto()
                self.data.append(temp_model.from_map(k))
        return self


class ListRegionAccessibleRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        return self


class ListRegionAccessibleResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[RegionDto] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = RegionDto()
                self.data.append(temp_model.from_map(k))
        return self


class UpdateDatabaseInfoRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        name: str = None,
        description: str = None,
        id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # name
        self.name = name
        # description
        self.description = description
        # id
        self.id = id

    def validate(self):
        self.validate_required(self.id, 'id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.name is not None:
            result['name'] = self.name
        if self.description is not None:
            result['description'] = self.description
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class UpdateDatabaseInfoResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class SetDatabaseAssignRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_service_ids: List[str] = None,
        app_ids: List[str] = None,
        workspace: str = None,
        ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # app_service_ids
        self.app_service_ids = app_service_ids
        # app_ids
        self.app_ids = app_ids
        # workspace
        self.workspace = workspace
        # ids
        self.ids = ids

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_service_ids is not None:
            result['app_service_ids'] = self.app_service_ids
        if self.app_ids is not None:
            result['app_ids'] = self.app_ids
        if self.workspace is not None:
            result['workspace'] = self.workspace
        if self.ids is not None:
            result['ids'] = self.ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_service_ids') is not None:
            self.app_service_ids = m.get('app_service_ids')
        if m.get('app_ids') is not None:
            self.app_ids = m.get('app_ids')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        return self


class SetDatabaseAssignResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class SetDatabaseShareRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_ids: List[str] = None,
        ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace_ids
        self.workspace_ids = workspace_ids
        # ids
        self.ids = ids

    def validate(self):
        self.validate_required(self.workspace_ids, 'workspace_ids')
        self.validate_required(self.ids, 'ids')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_ids is not None:
            result['workspace_ids'] = self.workspace_ids
        if self.ids is not None:
            result['ids'] = self.ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_ids') is not None:
            self.workspace_ids = m.get('workspace_ids')
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        return self


class SetDatabaseShareResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class RebootDatabaseRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # id
        self.id = id

    def validate(self):
        self.validate_required(self.id, 'id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class RebootDatabaseResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class UpdateDatabaseAccountRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        description: str = None,
        id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # description
        self.description = description
        # id
        self.id = id

    def validate(self):
        self.validate_required(self.id, 'id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.description is not None:
            result['description'] = self.description
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class UpdateDatabaseAccountResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class SetDatabaseAccountpasswordRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        id: str = None,
        password: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # id
        self.id = id
        # password
        self.password = password

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.password, 'password')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.id is not None:
            result['id'] = self.id
        if self.password is not None:
            result['password'] = self.password
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('password') is not None:
            self.password = m.get('password')
        return self


class SetDatabaseAccountpasswordResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class AuthDatabaseAccountRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        schema_id: str = None,
        privilege: str = None,
        id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # schema_id
        self.schema_id = schema_id
        # privilege
        self.privilege = privilege
        # id
        self.id = id

    def validate(self):
        self.validate_required(self.schema_id, 'schema_id')
        self.validate_required(self.privilege, 'privilege')
        self.validate_required(self.id, 'id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.schema_id is not None:
            result['schema_id'] = self.schema_id
        if self.privilege is not None:
            result['privilege'] = self.privilege
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('schema_id') is not None:
            self.schema_id = m.get('schema_id')
        if m.get('privilege') is not None:
            self.privilege = m.get('privilege')
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class AuthDatabaseAccountResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class GetRegionTenantRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        return self


class GetRegionTenantResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: RegionDto = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # regionDto
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            temp_model = RegionDto()
            self.data = temp_model.from_map(m['data'])
        return self


class GetRegionAliasbyidRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        region_id: str = None,
        provider_id: str = None,
        iaas_conn_type: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # region_id
        self.region_id = region_id
        # providerId
        self.provider_id = provider_id
        # iaasConnType
        self.iaas_conn_type = iaas_conn_type

    def validate(self):
        self.validate_required(self.region_id, 'region_id')
        self.validate_required(self.provider_id, 'provider_id')
        self.validate_required(self.iaas_conn_type, 'iaas_conn_type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.provider_id is not None:
            result['provider_id'] = self.provider_id
        if self.iaas_conn_type is not None:
            result['iaas_conn_type'] = self.iaas_conn_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('provider_id') is not None:
            self.provider_id = m.get('provider_id')
        if m.get('iaas_conn_type') is not None:
            self.iaas_conn_type = m.get('iaas_conn_type')
        return self


class GetRegionAliasbyidResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # region alias
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryDiskRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        current_page: int = None,
        page_size: int = None,
        workspace: str = None,
        statuses: List[str] = None,
        type: str = None,
        computer_ids: List[str] = None,
        devices: List[str] = None,
        max_size: int = None,
        min_size: int = None,
        workspace_ids: List[str] = None,
        name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # current page
        self.current_page = current_page
        # page size
        self.page_size = page_size
        # workspace name
        self.workspace = workspace
        # statuses
        self.statuses = statuses
        # type
        self.type = type
        # computer_ids
        self.computer_ids = computer_ids
        # devices
        self.devices = devices
        # max_size
        self.max_size = max_size
        # min_size
        self.min_size = min_size
        # workspace_ids
        self.workspace_ids = workspace_ids
        # name
        self.name = name

    def validate(self):
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.workspace is not None:
            result['workspace'] = self.workspace
        if self.statuses is not None:
            result['statuses'] = self.statuses
        if self.type is not None:
            result['type'] = self.type
        if self.computer_ids is not None:
            result['computer_ids'] = self.computer_ids
        if self.devices is not None:
            result['devices'] = self.devices
        if self.max_size is not None:
            result['max_size'] = self.max_size
        if self.min_size is not None:
            result['min_size'] = self.min_size
        if self.workspace_ids is not None:
            result['workspace_ids'] = self.workspace_ids
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        if m.get('statuses') is not None:
            self.statuses = m.get('statuses')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('computer_ids') is not None:
            self.computer_ids = m.get('computer_ids')
        if m.get('devices') is not None:
            self.devices = m.get('devices')
        if m.get('max_size') is not None:
            self.max_size = m.get('max_size')
        if m.get('min_size') is not None:
            self.min_size = m.get('min_size')
        if m.get('workspace_ids') is not None:
            self.workspace_ids = m.get('workspace_ids')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class QueryDiskResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[Disk] = None,
        total_count: int = None,
        page_size: int = None,
        current_page: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # disk detail infos
        self.data = data
        # total count
        self.total_count = total_count
        # page size
        self.page_size = page_size
        # current page
        self.current_page = current_page

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.current_page is not None:
            result['current_page'] = self.current_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = Disk()
                self.data.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        return self


class QueryImageRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        current_page: int = None,
        page_size: int = None,
        workspace: str = None,
        statuses: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # current page
        self.current_page = current_page
        # page size
        self.page_size = page_size
        # workspace name
        self.workspace = workspace
        # status
        self.statuses = statuses

    def validate(self):
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.workspace is not None:
            result['workspace'] = self.workspace
        if self.statuses is not None:
            result['statuses'] = self.statuses
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        if m.get('statuses') is not None:
            self.statuses = m.get('statuses')
        return self


class QueryImageResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[CommonImage] = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # image infos
        self.data = data
        # total count
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = CommonImage()
                self.data.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class CreateDatabaseSchemaRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        char_set: str = None,
        description: str = None,
        grant_map: List[MapStringToStringEntity] = None,
        id: str = None,
        name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # char_set
        self.char_set = char_set
        # description
        self.description = description
        # grant_map
        self.grant_map = grant_map
        # 数据库id
        self.id = id
        # name
        self.name = name

    def validate(self):
        self.validate_required(self.char_set, 'char_set')
        if self.grant_map:
            for k in self.grant_map:
                if k:
                    k.validate()
        self.validate_required(self.id, 'id')
        self.validate_required(self.name, 'name')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.char_set is not None:
            result['char_set'] = self.char_set
        if self.description is not None:
            result['description'] = self.description
        result['grant_map'] = []
        if self.grant_map is not None:
            for k in self.grant_map:
                result['grant_map'].append(k.to_map() if k else None)
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('char_set') is not None:
            self.char_set = m.get('char_set')
        if m.get('description') is not None:
            self.description = m.get('description')
        self.grant_map = []
        if m.get('grant_map') is not None:
            for k in m.get('grant_map'):
                temp_model = MapStringToStringEntity()
                self.grant_map.append(temp_model.from_map(k))
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class CreateDatabaseSchemaResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 返回的schemaid
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class CreateLoadbalanceMountRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        mount_map: List[MapStringToIntegerEntity] = None,
        domain: str = None,
        id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # mount_map
        self.mount_map = mount_map
        # domain
        self.domain = domain
        # id
        self.id = id

    def validate(self):
        self.validate_required(self.mount_map, 'mount_map')
        if self.mount_map:
            for k in self.mount_map:
                if k:
                    k.validate()
        self.validate_required(self.id, 'id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        result['mount_map'] = []
        if self.mount_map is not None:
            for k in self.mount_map:
                result['mount_map'].append(k.to_map() if k else None)
        if self.domain is not None:
            result['domain'] = self.domain
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        self.mount_map = []
        if m.get('mount_map') is not None:
            for k in m.get('mount_map'):
                temp_model = MapStringToIntegerEntity()
                self.mount_map.append(temp_model.from_map(k))
        if m.get('domain') is not None:
            self.domain = m.get('domain')
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class CreateLoadbalanceMountResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class CreateLoadbalanceListenerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        backend_server_port: int = None,
        bandwidth: int = None,
        certificate_iaas_id: str = None,
        certificate_id: str = None,
        cookie: str = None,
        cookie_timeout: int = None,
        established_timeout: int = None,
        gm_crypto_cert_iaas_id: str = None,
        gm_sign_cert_iaas_id: str = None,
        health_monitor: ListenerHealthMonitor = None,
        id: str = None,
        listener_port: int = None,
        persist_timeout: int = None,
        scheduler: str = None,
        sticky_session_type: str = None,
        tls_cipher_policy: str = None,
        type: str = None,
        v_computer_group_id: str = None,
        x_forwarded_for: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # backend_server_port
        self.backend_server_port = backend_server_port
        # bandwidth
        self.bandwidth = bandwidth
        # certificate_iaas_id
        self.certificate_iaas_id = certificate_iaas_id
        # certificate_id
        self.certificate_id = certificate_id
        # cookie
        self.cookie = cookie
        # cookie_timeout
        self.cookie_timeout = cookie_timeout
        # established_timeout
        self.established_timeout = established_timeout
        # gm_crypto_cert_iaas_id
        self.gm_crypto_cert_iaas_id = gm_crypto_cert_iaas_id
        # gm_sign_cert_iaas_id
        self.gm_sign_cert_iaas_id = gm_sign_cert_iaas_id
        # health_monitor
        self.health_monitor = health_monitor
        # lb id
        self.id = id
        # listener_port
        self.listener_port = listener_port
        # persist_timeout
        self.persist_timeout = persist_timeout
        # scheduler
        self.scheduler = scheduler
        # sticky_session_type
        self.sticky_session_type = sticky_session_type
        # tls_cipher_policy
        self.tls_cipher_policy = tls_cipher_policy
        # type
        self.type = type
        # v_computer_group_id
        self.v_computer_group_id = v_computer_group_id
        # x_forwarded_for
        self.x_forwarded_for = x_forwarded_for

    def validate(self):
        if self.health_monitor:
            self.health_monitor.validate()
        self.validate_required(self.id, 'id')
        self.validate_required(self.listener_port, 'listener_port')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.backend_server_port is not None:
            result['backend_server_port'] = self.backend_server_port
        if self.bandwidth is not None:
            result['bandwidth'] = self.bandwidth
        if self.certificate_iaas_id is not None:
            result['certificate_iaas_id'] = self.certificate_iaas_id
        if self.certificate_id is not None:
            result['certificate_id'] = self.certificate_id
        if self.cookie is not None:
            result['cookie'] = self.cookie
        if self.cookie_timeout is not None:
            result['cookie_timeout'] = self.cookie_timeout
        if self.established_timeout is not None:
            result['established_timeout'] = self.established_timeout
        if self.gm_crypto_cert_iaas_id is not None:
            result['gm_crypto_cert_iaas_id'] = self.gm_crypto_cert_iaas_id
        if self.gm_sign_cert_iaas_id is not None:
            result['gm_sign_cert_iaas_id'] = self.gm_sign_cert_iaas_id
        if self.health_monitor is not None:
            result['health_monitor'] = self.health_monitor.to_map()
        if self.id is not None:
            result['id'] = self.id
        if self.listener_port is not None:
            result['listener_port'] = self.listener_port
        if self.persist_timeout is not None:
            result['persist_timeout'] = self.persist_timeout
        if self.scheduler is not None:
            result['scheduler'] = self.scheduler
        if self.sticky_session_type is not None:
            result['sticky_session_type'] = self.sticky_session_type
        if self.tls_cipher_policy is not None:
            result['tls_cipher_policy'] = self.tls_cipher_policy
        if self.type is not None:
            result['type'] = self.type
        if self.v_computer_group_id is not None:
            result['v_computer_group_id'] = self.v_computer_group_id
        if self.x_forwarded_for is not None:
            result['x_forwarded_for'] = self.x_forwarded_for
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('backend_server_port') is not None:
            self.backend_server_port = m.get('backend_server_port')
        if m.get('bandwidth') is not None:
            self.bandwidth = m.get('bandwidth')
        if m.get('certificate_iaas_id') is not None:
            self.certificate_iaas_id = m.get('certificate_iaas_id')
        if m.get('certificate_id') is not None:
            self.certificate_id = m.get('certificate_id')
        if m.get('cookie') is not None:
            self.cookie = m.get('cookie')
        if m.get('cookie_timeout') is not None:
            self.cookie_timeout = m.get('cookie_timeout')
        if m.get('established_timeout') is not None:
            self.established_timeout = m.get('established_timeout')
        if m.get('gm_crypto_cert_iaas_id') is not None:
            self.gm_crypto_cert_iaas_id = m.get('gm_crypto_cert_iaas_id')
        if m.get('gm_sign_cert_iaas_id') is not None:
            self.gm_sign_cert_iaas_id = m.get('gm_sign_cert_iaas_id')
        if m.get('health_monitor') is not None:
            temp_model = ListenerHealthMonitor()
            self.health_monitor = temp_model.from_map(m['health_monitor'])
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('listener_port') is not None:
            self.listener_port = m.get('listener_port')
        if m.get('persist_timeout') is not None:
            self.persist_timeout = m.get('persist_timeout')
        if m.get('scheduler') is not None:
            self.scheduler = m.get('scheduler')
        if m.get('sticky_session_type') is not None:
            self.sticky_session_type = m.get('sticky_session_type')
        if m.get('tls_cipher_policy') is not None:
            self.tls_cipher_policy = m.get('tls_cipher_policy')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('v_computer_group_id') is not None:
            self.v_computer_group_id = m.get('v_computer_group_id')
        if m.get('x_forwarded_for') is not None:
            self.x_forwarded_for = m.get('x_forwarded_for')
        return self


class CreateLoadbalanceListenerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class StopLoadbalanceListenerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        load_balancer_id: str = None,
        listener_port: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # load_balancer_id
        self.load_balancer_id = load_balancer_id
        # listener_port
        self.listener_port = listener_port

    def validate(self):
        self.validate_required(self.load_balancer_id, 'load_balancer_id')
        self.validate_required(self.listener_port, 'listener_port')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.load_balancer_id is not None:
            result['load_balancer_id'] = self.load_balancer_id
        if self.listener_port is not None:
            result['listener_port'] = self.listener_port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('load_balancer_id') is not None:
            self.load_balancer_id = m.get('load_balancer_id')
        if m.get('listener_port') is not None:
            self.listener_port = m.get('listener_port')
        return self


class StopLoadbalanceListenerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class StartLoadbalanceListenerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        load_balancer_id: str = None,
        listener_port: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # load_balancer_id
        self.load_balancer_id = load_balancer_id
        # listener_port
        self.listener_port = listener_port

    def validate(self):
        self.validate_required(self.load_balancer_id, 'load_balancer_id')
        self.validate_required(self.listener_port, 'listener_port')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.load_balancer_id is not None:
            result['load_balancer_id'] = self.load_balancer_id
        if self.listener_port is not None:
            result['listener_port'] = self.listener_port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('load_balancer_id') is not None:
            self.load_balancer_id = m.get('load_balancer_id')
        if m.get('listener_port') is not None:
            self.listener_port = m.get('listener_port')
        return self


class StartLoadbalanceListenerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class UpdateLoadbalanceListenerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        bandwidth: int = None,
        certificate_iaas_id: str = None,
        certificate_id: str = None,
        cookie: str = None,
        cookie_timeout: int = None,
        established_timeout: int = None,
        gm_crypto_cert_iaas_id: str = None,
        gm_sign_cert_iaas_id: str = None,
        health_monitor: ListenerHealthMonitor = None,
        listener_port: int = None,
        load_balancer_id: str = None,
        persist_timeout: int = None,
        scheduler: str = None,
        sticky_session_type: str = None,
        tls_cipher_policy: str = None,
        use_vcomputer_group: bool = None,
        v_computer_group_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # bandwidth
        self.bandwidth = bandwidth
        # certificate_iaas_id
        self.certificate_iaas_id = certificate_iaas_id
        # certificate_id
        self.certificate_id = certificate_id
        # cookie
        self.cookie = cookie
        # cookie_timeout
        self.cookie_timeout = cookie_timeout
        # established_timeout
        self.established_timeout = established_timeout
        # gm_crypto_cert_iaas_id
        self.gm_crypto_cert_iaas_id = gm_crypto_cert_iaas_id
        # gm_sign_cert_iaas_id
        self.gm_sign_cert_iaas_id = gm_sign_cert_iaas_id
        # health_monitor
        self.health_monitor = health_monitor
        # listener_port
        self.listener_port = listener_port
        # load_balancer_id
        self.load_balancer_id = load_balancer_id
        # persist_timeout
        self.persist_timeout = persist_timeout
        # scheduler
        self.scheduler = scheduler
        # sticky_session_type
        self.sticky_session_type = sticky_session_type
        # tls_cipher_policy
        self.tls_cipher_policy = tls_cipher_policy
        # use_v_computer_group
        self.use_vcomputer_group = use_vcomputer_group
        # v_computer_group_id
        self.v_computer_group_id = v_computer_group_id

    def validate(self):
        if self.health_monitor:
            self.health_monitor.validate()
        self.validate_required(self.listener_port, 'listener_port')
        self.validate_required(self.load_balancer_id, 'load_balancer_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.bandwidth is not None:
            result['bandwidth'] = self.bandwidth
        if self.certificate_iaas_id is not None:
            result['certificate_iaas_id'] = self.certificate_iaas_id
        if self.certificate_id is not None:
            result['certificate_id'] = self.certificate_id
        if self.cookie is not None:
            result['cookie'] = self.cookie
        if self.cookie_timeout is not None:
            result['cookie_timeout'] = self.cookie_timeout
        if self.established_timeout is not None:
            result['established_timeout'] = self.established_timeout
        if self.gm_crypto_cert_iaas_id is not None:
            result['gm_crypto_cert_iaas_id'] = self.gm_crypto_cert_iaas_id
        if self.gm_sign_cert_iaas_id is not None:
            result['gm_sign_cert_iaas_id'] = self.gm_sign_cert_iaas_id
        if self.health_monitor is not None:
            result['health_monitor'] = self.health_monitor.to_map()
        if self.listener_port is not None:
            result['listener_port'] = self.listener_port
        if self.load_balancer_id is not None:
            result['load_balancer_id'] = self.load_balancer_id
        if self.persist_timeout is not None:
            result['persist_timeout'] = self.persist_timeout
        if self.scheduler is not None:
            result['scheduler'] = self.scheduler
        if self.sticky_session_type is not None:
            result['sticky_session_type'] = self.sticky_session_type
        if self.tls_cipher_policy is not None:
            result['tls_cipher_policy'] = self.tls_cipher_policy
        if self.use_vcomputer_group is not None:
            result['use_v_computer_group'] = self.use_vcomputer_group
        if self.v_computer_group_id is not None:
            result['v_computer_group_id'] = self.v_computer_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('bandwidth') is not None:
            self.bandwidth = m.get('bandwidth')
        if m.get('certificate_iaas_id') is not None:
            self.certificate_iaas_id = m.get('certificate_iaas_id')
        if m.get('certificate_id') is not None:
            self.certificate_id = m.get('certificate_id')
        if m.get('cookie') is not None:
            self.cookie = m.get('cookie')
        if m.get('cookie_timeout') is not None:
            self.cookie_timeout = m.get('cookie_timeout')
        if m.get('established_timeout') is not None:
            self.established_timeout = m.get('established_timeout')
        if m.get('gm_crypto_cert_iaas_id') is not None:
            self.gm_crypto_cert_iaas_id = m.get('gm_crypto_cert_iaas_id')
        if m.get('gm_sign_cert_iaas_id') is not None:
            self.gm_sign_cert_iaas_id = m.get('gm_sign_cert_iaas_id')
        if m.get('health_monitor') is not None:
            temp_model = ListenerHealthMonitor()
            self.health_monitor = temp_model.from_map(m['health_monitor'])
        if m.get('listener_port') is not None:
            self.listener_port = m.get('listener_port')
        if m.get('load_balancer_id') is not None:
            self.load_balancer_id = m.get('load_balancer_id')
        if m.get('persist_timeout') is not None:
            self.persist_timeout = m.get('persist_timeout')
        if m.get('scheduler') is not None:
            self.scheduler = m.get('scheduler')
        if m.get('sticky_session_type') is not None:
            self.sticky_session_type = m.get('sticky_session_type')
        if m.get('tls_cipher_policy') is not None:
            self.tls_cipher_policy = m.get('tls_cipher_policy')
        if m.get('use_v_computer_group') is not None:
            self.use_vcomputer_group = m.get('use_v_computer_group')
        if m.get('v_computer_group_id') is not None:
            self.v_computer_group_id = m.get('v_computer_group_id')
        return self


class UpdateLoadbalanceListenerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class QueryDiskspecRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        provider_id: str = None,
        enable: bool = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # provider id
        self.provider_id = provider_id
        # enable
        self.enable = enable

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.provider_id is not None:
            result['provider_id'] = self.provider_id
        if self.enable is not None:
            result['enable'] = self.enable
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('provider_id') is not None:
            self.provider_id = m.get('provider_id')
        if m.get('enable') is not None:
            self.enable = m.get('enable')
        return self


class QueryDiskspecResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[DiskSpec] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # disk spec infos
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = DiskSpec()
                self.data.append(temp_model.from_map(k))
        return self


class QueryComputerquotaRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace name
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class QueryComputerquotaResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # computer quota info jsonstring
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class StopComputerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        ids: List[str] = None,
        workspace_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # computer ids
        self.ids = ids
        # 后续版本必填
        self.workspace_id = workspace_id

    def validate(self):
        self.validate_required(self.ids, 'ids')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.ids is not None:
            result['ids'] = self.ids
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class StopComputerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        paas_request_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # paas_request_id
        self.paas_request_id = paas_request_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.paas_request_id is not None:
            result['paas_request_id'] = self.paas_request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('paas_request_id') is not None:
            self.paas_request_id = m.get('paas_request_id')
        return self


class RebootComputerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        ids: List[str] = None,
        workspace_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # ids
        self.ids = ids
        # 后续必填
        self.workspace_id = workspace_id

    def validate(self):
        self.validate_required(self.ids, 'ids')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.ids is not None:
            result['ids'] = self.ids
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class RebootComputerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        paas_request_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # paas_request_id
        self.paas_request_id = paas_request_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.paas_request_id is not None:
            result['paas_request_id'] = self.paas_request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('paas_request_id') is not None:
            self.paas_request_id = m.get('paas_request_id')
        return self


class QueryComputerSecuritygroupRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # computer id
        self.id = id

    def validate(self):
        self.validate_required(self.id, 'id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class QueryComputerSecuritygroupResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[JoinedSecurityGroupVO] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # security group info
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = JoinedSecurityGroupVO()
                self.data.append(temp_model.from_map(k))
        return self


class QuerySecuritygroupRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace: str = None,
        current_page: int = None,
        page_size: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace name
        self.workspace = workspace
        # current page
        self.current_page = current_page
        # page size
        self.page_size = page_size

    def validate(self):
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace is not None:
            result['workspace'] = self.workspace
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        return self


class QuerySecuritygroupResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        current_page: int = None,
        page_size: int = None,
        total_count: int = None,
        data: List[SecurityGroupVO] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # currentPage
        self.current_page = current_page
        # pageSize
        self.page_size = page_size
        # totalCount
        self.total_count = total_count
        # security group infos
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total_count is not None:
            result['total_count'] = self.total_count
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = SecurityGroupVO()
                self.data.append(temp_model.from_map(k))
        return self


class CreateSecuritygroupPermissionRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        permission: PermissionVO = None,
        security_group_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # PermissionVO
        self.permission = permission
        # securityGroupId
        self.security_group_id = security_group_id

    def validate(self):
        self.validate_required(self.permission, 'permission')
        if self.permission:
            self.permission.validate()
        self.validate_required(self.security_group_id, 'security_group_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.permission is not None:
            result['permission'] = self.permission.to_map()
        if self.security_group_id is not None:
            result['security_group_id'] = self.security_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('permission') is not None:
            temp_model = PermissionVO()
            self.permission = temp_model.from_map(m['permission'])
        if m.get('security_group_id') is not None:
            self.security_group_id = m.get('security_group_id')
        return self


class CreateSecuritygroupPermissionResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QuerySecuritygroupPermissionRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        security_group_id: str = None,
        auto_refresh: bool = None,
        nic_type: str = None,
        direction: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # securityGroupId
        self.security_group_id = security_group_id
        # autoRefresh
        self.auto_refresh = auto_refresh
        # nicType
        self.nic_type = nic_type
        # direction
        self.direction = direction

    def validate(self):
        self.validate_required(self.security_group_id, 'security_group_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.security_group_id is not None:
            result['security_group_id'] = self.security_group_id
        if self.auto_refresh is not None:
            result['auto_refresh'] = self.auto_refresh
        if self.nic_type is not None:
            result['nic_type'] = self.nic_type
        if self.direction is not None:
            result['direction'] = self.direction
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('security_group_id') is not None:
            self.security_group_id = m.get('security_group_id')
        if m.get('auto_refresh') is not None:
            self.auto_refresh = m.get('auto_refresh')
        if m.get('nic_type') is not None:
            self.nic_type = m.get('nic_type')
        if m.get('direction') is not None:
            self.direction = m.get('direction')
        return self


class QuerySecuritygroupPermissionResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[PermissionVO] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # securitygroup permission infos
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = PermissionVO()
                self.data.append(temp_model.from_map(k))
        return self


class UpdateLoadbalanaceSecurityipRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        id: str = None,
        listener_port: int = None,
        access_control: bool = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # lb id
        self.id = id
        # listener_port
        self.listener_port = listener_port
        # access_control
        self.access_control = access_control

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.listener_port, 'listener_port')
        self.validate_required(self.access_control, 'access_control')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.id is not None:
            result['id'] = self.id
        if self.listener_port is not None:
            result['listener_port'] = self.listener_port
        if self.access_control is not None:
            result['access_control'] = self.access_control
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('listener_port') is not None:
            self.listener_port = m.get('listener_port')
        if m.get('access_control') is not None:
            self.access_control = m.get('access_control')
        return self


class UpdateLoadbalanaceSecurityipResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class CreateLoadbalanceSecurityipRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        id: str = None,
        listener_port: int = None,
        ips: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # lb id
        self.id = id
        # listener_port
        self.listener_port = listener_port
        # ips
        self.ips = ips

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.listener_port, 'listener_port')
        self.validate_required(self.ips, 'ips')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.id is not None:
            result['id'] = self.id
        if self.listener_port is not None:
            result['listener_port'] = self.listener_port
        if self.ips is not None:
            result['ips'] = self.ips
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('listener_port') is not None:
            self.listener_port = m.get('listener_port')
        if m.get('ips') is not None:
            self.ips = m.get('ips')
        return self


class CreateLoadbalanceSecurityipResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class UpdateDatabaseRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        id: str = None,
        name: str = None,
        description: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # id
        self.id = id
        # name
        self.name = name
        # description
        self.description = description

    def validate(self):
        self.validate_required(self.id, 'id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.description is not None:
            result['description'] = self.description
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('description') is not None:
            self.description = m.get('description')
        return self


class UpdateDatabaseResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class UpdateLoadbalanceMountRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        id: str = None,
        mount_map: List[MapStringToIntegerEntity] = None,
        domain: str = None,
        is_sync: bool = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # id
        self.id = id
        # mountMap
        self.mount_map = mount_map
        # domain
        self.domain = domain
        # 是否是同步操作
        self.is_sync = is_sync

    def validate(self):
        self.validate_required(self.id, 'id')
        if self.mount_map:
            for k in self.mount_map:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.id is not None:
            result['id'] = self.id
        result['mount_map'] = []
        if self.mount_map is not None:
            for k in self.mount_map:
                result['mount_map'].append(k.to_map() if k else None)
        if self.domain is not None:
            result['domain'] = self.domain
        if self.is_sync is not None:
            result['is_sync'] = self.is_sync
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('id') is not None:
            self.id = m.get('id')
        self.mount_map = []
        if m.get('mount_map') is not None:
            for k in m.get('mount_map'):
                temp_model = MapStringToIntegerEntity()
                self.mount_map.append(temp_model.from_map(k))
        if m.get('domain') is not None:
            self.domain = m.get('domain')
        if m.get('is_sync') is not None:
            self.is_sync = m.get('is_sync')
        return self


class UpdateLoadbalanceMountResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class DeleteLoadbalanceMountRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        id: str = None,
        computer_ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # id
        self.id = id
        # computer_ids
        self.computer_ids = computer_ids

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.computer_ids, 'computer_ids')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.id is not None:
            result['id'] = self.id
        if self.computer_ids is not None:
            result['computer_ids'] = self.computer_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('computer_ids') is not None:
            self.computer_ids = m.get('computer_ids')
        return self


class DeleteLoadbalanceMountResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class QueryRequestRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        current_page: int = None,
        ids: List[str] = None,
        max_time: str = None,
        min_time: str = None,
        operators: List[str] = None,
        operator_type: str = None,
        page_size: int = None,
        parent_ids: List[str] = None,
        resource_ids: List[str] = None,
        resource_types: List[str] = None,
        statuses: List[str] = None,
        task_statuses: List[str] = None,
        tokens: List[str] = None,
        types: List[str] = None,
        workspace_ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # current_page
        self.current_page = current_page
        # ids
        self.ids = ids
        # max_time
        self.max_time = max_time
        # min_time
        self.min_time = min_time
        # operators
        self.operators = operators
        # operator_type
        self.operator_type = operator_type
        # page_size
        self.page_size = page_size
        # parent_ids
        self.parent_ids = parent_ids
        # resource_ids
        self.resource_ids = resource_ids
        # resource_types
        self.resource_types = resource_types
        # statuses
        self.statuses = statuses
        # task_statuses
        self.task_statuses = task_statuses
        # tokens
        self.tokens = tokens
        # types
        self.types = types
        # workspace_ids
        self.workspace_ids = workspace_ids

    def validate(self):
        if self.max_time is not None:
            self.validate_pattern(self.max_time, 'max_time', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.min_time is not None:
            self.validate_pattern(self.min_time, 'min_time', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.ids is not None:
            result['ids'] = self.ids
        if self.max_time is not None:
            result['max_time'] = self.max_time
        if self.min_time is not None:
            result['min_time'] = self.min_time
        if self.operators is not None:
            result['operators'] = self.operators
        if self.operator_type is not None:
            result['operator_type'] = self.operator_type
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.parent_ids is not None:
            result['parent_ids'] = self.parent_ids
        if self.resource_ids is not None:
            result['resource_ids'] = self.resource_ids
        if self.resource_types is not None:
            result['resource_types'] = self.resource_types
        if self.statuses is not None:
            result['statuses'] = self.statuses
        if self.task_statuses is not None:
            result['task_statuses'] = self.task_statuses
        if self.tokens is not None:
            result['tokens'] = self.tokens
        if self.types is not None:
            result['types'] = self.types
        if self.workspace_ids is not None:
            result['workspace_ids'] = self.workspace_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        if m.get('max_time') is not None:
            self.max_time = m.get('max_time')
        if m.get('min_time') is not None:
            self.min_time = m.get('min_time')
        if m.get('operators') is not None:
            self.operators = m.get('operators')
        if m.get('operator_type') is not None:
            self.operator_type = m.get('operator_type')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('parent_ids') is not None:
            self.parent_ids = m.get('parent_ids')
        if m.get('resource_ids') is not None:
            self.resource_ids = m.get('resource_ids')
        if m.get('resource_types') is not None:
            self.resource_types = m.get('resource_types')
        if m.get('statuses') is not None:
            self.statuses = m.get('statuses')
        if m.get('task_statuses') is not None:
            self.task_statuses = m.get('task_statuses')
        if m.get('tokens') is not None:
            self.tokens = m.get('tokens')
        if m.get('types') is not None:
            self.types = m.get('types')
        if m.get('workspace_ids') is not None:
            self.workspace_ids = m.get('workspace_ids')
        return self


class QueryRequestResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[RequestVO] = None,
        total_count: int = None,
        current_page: int = None,
        page_size: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data
        # total_count
        self.total_count = total_count
        # current_page
        self.current_page = current_page
        # page_size
        self.page_size = page_size

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = RequestVO()
                self.data.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        return self


class GetRequestRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace: str = None,
        id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace
        self.workspace = workspace
        # id
        self.id = id

    def validate(self):
        self.validate_required(self.workspace, 'workspace')
        self.validate_required(self.id, 'id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace is not None:
            result['workspace'] = self.workspace
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class GetRequestResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: RequestVO = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            temp_model = RequestVO()
            self.data = temp_model.from_map(m['data'])
        return self


class QueryRequestTaskRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        current_page: int = None,
        ids: List[str] = None,
        max_time: str = None,
        min_time: str = None,
        operators: List[str] = None,
        operator_type: str = None,
        page_size: int = None,
        request_ids: List[str] = None,
        request_statuses: List[str] = None,
        request_types: List[str] = None,
        resource_ids: List[str] = None,
        resource_types: List[str] = None,
        statuses: List[str] = None,
        workspace_ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # current_page
        self.current_page = current_page
        # ids
        self.ids = ids
        # max_time
        self.max_time = max_time
        # min_time
        self.min_time = min_time
        # operators
        self.operators = operators
        # operatorType
        self.operator_type = operator_type
        # page_size
        self.page_size = page_size
        # requestIds
        self.request_ids = request_ids
        # request_statuses
        self.request_statuses = request_statuses
        # request_types
        self.request_types = request_types
        # resource_ids
        self.resource_ids = resource_ids
        # resource_types
        self.resource_types = resource_types
        # statuses
        self.statuses = statuses
        # workspace_ids
        self.workspace_ids = workspace_ids

    def validate(self):
        if self.max_time is not None:
            self.validate_pattern(self.max_time, 'max_time', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')
        if self.min_time is not None:
            self.validate_pattern(self.min_time, 'min_time', '\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.current_page is not None:
            result['current_page'] = self.current_page
        if self.ids is not None:
            result['ids'] = self.ids
        if self.max_time is not None:
            result['max_time'] = self.max_time
        if self.min_time is not None:
            result['min_time'] = self.min_time
        if self.operators is not None:
            result['operators'] = self.operators
        if self.operator_type is not None:
            result['operator_type'] = self.operator_type
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.request_ids is not None:
            result['request_ids'] = self.request_ids
        if self.request_statuses is not None:
            result['request_statuses'] = self.request_statuses
        if self.request_types is not None:
            result['request_types'] = self.request_types
        if self.resource_ids is not None:
            result['resource_ids'] = self.resource_ids
        if self.resource_types is not None:
            result['resource_types'] = self.resource_types
        if self.statuses is not None:
            result['statuses'] = self.statuses
        if self.workspace_ids is not None:
            result['workspace_ids'] = self.workspace_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        if m.get('max_time') is not None:
            self.max_time = m.get('max_time')
        if m.get('min_time') is not None:
            self.min_time = m.get('min_time')
        if m.get('operators') is not None:
            self.operators = m.get('operators')
        if m.get('operator_type') is not None:
            self.operator_type = m.get('operator_type')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('request_ids') is not None:
            self.request_ids = m.get('request_ids')
        if m.get('request_statuses') is not None:
            self.request_statuses = m.get('request_statuses')
        if m.get('request_types') is not None:
            self.request_types = m.get('request_types')
        if m.get('resource_ids') is not None:
            self.resource_ids = m.get('resource_ids')
        if m.get('resource_types') is not None:
            self.resource_types = m.get('resource_types')
        if m.get('statuses') is not None:
            self.statuses = m.get('statuses')
        if m.get('workspace_ids') is not None:
            self.workspace_ids = m.get('workspace_ids')
        return self


class QueryRequestTaskResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[Task] = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data
        # total_count
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = Task()
                self.data.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class QueryTaskLogRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        execution_times: int = None,
        task_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # execution_times
        self.execution_times = execution_times
        # task_id
        self.task_id = task_id

    def validate(self):
        self.validate_required(self.task_id, 'task_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.execution_times is not None:
            result['execution_times'] = self.execution_times
        if self.task_id is not None:
            result['task_id'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('execution_times') is not None:
            self.execution_times = m.get('execution_times')
        if m.get('task_id') is not None:
            self.task_id = m.get('task_id')
        return self


class QueryTaskLogResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[ResourceLog] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = ResourceLog()
                self.data.append(temp_model.from_map(k))
        return self


class ListTenantworkspaceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        status: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # status
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class ListTenantworkspaceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[TenantWorkspace] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # worksapce列表
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = TenantWorkspace()
                self.data.append(temp_model.from_map(k))
        return self


class QueryTenantworkspaceFilterRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        statuses: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # statuses
        self.statuses = statuses

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.statuses is not None:
            result['statuses'] = self.statuses
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('statuses') is not None:
            self.statuses = m.get('statuses')
        return self


class QueryTenantworkspaceFilterResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[TenantWorkspace] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # workspaces
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = TenantWorkspace()
                self.data.append(temp_model.from_map(k))
        return self


class ListRegionGroupbyRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        status: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # status
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class ListRegionGroupbyResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[RegionWorkspaceVO] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # RegionWorkspaceVO
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = RegionWorkspaceVO()
                self.data.append(temp_model.from_map(k))
        return self


class QueryRequestFinaltaskRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        id: str = None,
        workspace_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # request_id
        self.id = id
        # workspace_id
        self.workspace_id = workspace_id

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.workspace_id, 'workspace_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.id is not None:
            result['id'] = self.id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class QueryRequestFinaltaskResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[TaskVO] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = TaskVO()
                self.data.append(temp_model.from_map(k))
        return self


class QueryFeatureRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        paas_region_id: str = None,
        project_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # paas_region_id cafe的region_id，是一串数字
        self.paas_region_id = paas_region_id
        # project_id
        self.project_id = project_id

    def validate(self):
        self.validate_required(self.paas_region_id, 'paas_region_id')
        self.validate_required(self.project_id, 'project_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.paas_region_id is not None:
            result['paas_region_id'] = self.paas_region_id
        if self.project_id is not None:
            result['project_id'] = self.project_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('paas_region_id') is not None:
            self.paas_region_id = m.get('paas_region_id')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        return self


class QueryFeatureResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class StartComputerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        ids: List[str] = None,
        workspace_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # computer ids
        self.ids = ids
        # workspace_id，后续版本会变成必填
        self.workspace_id = workspace_id

    def validate(self):
        self.validate_required(self.ids, 'ids')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.ids is not None:
            result['ids'] = self.ids
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class StartComputerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        paas_request_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # paas_request_id
        self.paas_request_id = paas_request_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.paas_request_id is not None:
            result['paas_request_id'] = self.paas_request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('paas_request_id') is not None:
            self.paas_request_id = m.get('paas_request_id')
        return self


class StartLoadbalanceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # ids
        self.ids = ids

    def validate(self):
        self.validate_required(self.ids, 'ids')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.ids is not None:
            result['ids'] = self.ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        return self


class StartLoadbalanceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class StopLoadbalanceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # ids
        self.ids = ids

    def validate(self):
        self.validate_required(self.ids, 'ids')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.ids is not None:
            result['ids'] = self.ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        return self


class StopLoadbalanceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class UpdateLoadbalanceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        id: str = None,
        name: str = None,
        description: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # id
        self.id = id
        # name
        self.name = name
        # description
        self.description = description

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.name, 'name')
        self.validate_required(self.description, 'description')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.description is not None:
            result['description'] = self.description
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('description') is not None:
            self.description = m.get('description')
        return self


class UpdateLoadbalanceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class AddLoadbalanceAssignRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_id: str = None,
        app_service_id: str = None,
        ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # app_id
        self.app_id = app_id
        # appServiceId
        self.app_service_id = app_service_id
        # ids
        self.ids = ids

    def validate(self):
        self.validate_required(self.ids, 'ids')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.app_service_id is not None:
            result['app_service_id'] = self.app_service_id
        if self.ids is not None:
            result['ids'] = self.ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('app_service_id') is not None:
            self.app_service_id = m.get('app_service_id')
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        return self


class AddLoadbalanceAssignResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class QueryCertificateRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
        zone_id: str = None,
        provider_ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace_id
        self.workspace_id = workspace_id
        # zone_id
        self.zone_id = zone_id
        # provider_ids
        self.provider_ids = provider_ids

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.zone_id, 'zone_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.zone_id is not None:
            result['zone_id'] = self.zone_id
        if self.provider_ids is not None:
            result['provider_ids'] = self.provider_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('zone_id') is not None:
            self.zone_id = m.get('zone_id')
        if m.get('provider_ids') is not None:
            self.provider_ids = m.get('provider_ids')
        return self


class QueryCertificateResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[BasicCertificate] = None,
        total_count: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data
        # total_count
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = BasicCertificate()
                self.data.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        return self


class CreateCertificateRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
        zone_id: str = None,
        name: str = None,
        paas_region_id: str = None,
        certificate: str = None,
        private_key: str = None,
        cert_type: int = None,
        provider_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace_id
        self.workspace_id = workspace_id
        # zoneId
        self.zone_id = zone_id
        # name
        self.name = name
        # paas_region_id
        self.paas_region_id = paas_region_id
        # certificate
        self.certificate = certificate
        # privateKey
        self.private_key = private_key
        # cert_type
        self.cert_type = cert_type
        # 多provider时选填
        self.provider_id = provider_id

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.name, 'name')
        self.validate_required(self.paas_region_id, 'paas_region_id')
        self.validate_required(self.certificate, 'certificate')
        self.validate_required(self.private_key, 'private_key')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.zone_id is not None:
            result['zone_id'] = self.zone_id
        if self.name is not None:
            result['name'] = self.name
        if self.paas_region_id is not None:
            result['paas_region_id'] = self.paas_region_id
        if self.certificate is not None:
            result['certificate'] = self.certificate
        if self.private_key is not None:
            result['private_key'] = self.private_key
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.provider_id is not None:
            result['provider_id'] = self.provider_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('zone_id') is not None:
            self.zone_id = m.get('zone_id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('paas_region_id') is not None:
            self.paas_region_id = m.get('paas_region_id')
        if m.get('certificate') is not None:
            self.certificate = m.get('certificate')
        if m.get('private_key') is not None:
            self.private_key = m.get('private_key')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('provider_id') is not None:
            self.provider_id = m.get('provider_id')
        return self


class CreateCertificateResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DeleteCertificateRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        id: str = None,
        workspace_id: str = None,
        zone_id: str = None,
        provider_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # id
        self.id = id
        # workspace_id
        self.workspace_id = workspace_id
        # zone_id
        self.zone_id = zone_id
        # 多provider时选填
        self.provider_id = provider_id

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.zone_id, 'zone_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.id is not None:
            result['id'] = self.id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.zone_id is not None:
            result['zone_id'] = self.zone_id
        if self.provider_id is not None:
            result['provider_id'] = self.provider_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('zone_id') is not None:
            self.zone_id = m.get('zone_id')
        if m.get('provider_id') is not None:
            self.provider_id = m.get('provider_id')
        return self


class DeleteCertificateResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class DescribeUnifiedresourceVpcRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        provider_type: str = None,
        region: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 提供商类型
        self.provider_type = provider_type
        # region
        self.region = region
        # 工作空间
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.provider_type, 'provider_type')
        self.validate_required(self.region, 'region')
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.provider_type is not None:
            result['provider_type'] = self.provider_type
        if self.region is not None:
            result['region'] = self.region
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('provider_type') is not None:
            self.provider_type = m.get('provider_type')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class DescribeUnifiedresourceVpcResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        vpc: VPC = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # vpc对象
        self.vpc = vpc

    def validate(self):
        if self.vpc:
            self.vpc.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.vpc is not None:
            result['vpc'] = self.vpc.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('vpc') is not None:
            temp_model = VPC()
            self.vpc = temp_model.from_map(m['vpc'])
        return self


class ListUnifiedresourceInstancefamiliesRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        region_id: str = None,
        provider_type: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # region id
        self.region_id = region_id
        # 提供商类型
        self.provider_type = provider_type

    def validate(self):
        self.validate_required(self.region_id, 'region_id')
        self.validate_required(self.provider_type, 'provider_type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.provider_type is not None:
            result['provider_type'] = self.provider_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('provider_type') is not None:
            self.provider_type = m.get('provider_type')
        return self


class ListUnifiedresourceInstancefamiliesResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class ListUnifiedresourceInstancetypeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        region: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # region name
        self.region = region

    def validate(self):
        self.validate_required(self.region, 'region')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.region is not None:
            result['region'] = self.region
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('region') is not None:
            self.region = m.get('region')
        return self


class ListUnifiedresourceInstancetypeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # instancetype详细信息，jsonstring
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryComputerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        id: str = None,
        workspace_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # computer id
        self.id = id
        # workspace_id
        self.workspace_id = workspace_id

    def validate(self):
        self.validate_required(self.id, 'id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.id is not None:
            result['id'] = self.id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class QueryComputerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: Computer = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # computer info
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            temp_model = Computer()
            self.data = temp_model.from_map(m['data'])
        return self


class ListResourceComputertypeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        region: str = None,
        zone: str = None,
        instance_type_family: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # region name
        self.region = region
        # zone name
        self.zone = zone
        # 实例规格族
        self.instance_type_family = instance_type_family

    def validate(self):
        self.validate_required(self.region, 'region')
        self.validate_required(self.instance_type_family, 'instance_type_family')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.region is not None:
            result['region'] = self.region
        if self.zone is not None:
            result['zone'] = self.zone
        if self.instance_type_family is not None:
            result['instance_type_family'] = self.instance_type_family
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('zone') is not None:
            self.zone = m.get('zone')
        if m.get('instance_type_family') is not None:
            self.instance_type_family = m.get('instance_type_family')
        return self


class ListResourceComputertypeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[ComputerType] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 可用computer type列表
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = ComputerType()
                self.data.append(temp_model.from_map(k))
        return self


class ListResourceDiskRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        disk_type: str = None,
        instance_type: str = None,
        region: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 要查询的云盘或本地盘类型。取值范围：
        # 
        # all：同时查询系统盘与数据盘
        # system：只查询系统盘
        # data：只查询数据盘
        # 默认值：all。
        self.disk_type = disk_type
        # 实例规格
        self.instance_type = instance_type
        # region name
        self.region = region

    def validate(self):
        self.validate_required(self.instance_type, 'instance_type')
        self.validate_required(self.region, 'region')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.disk_type is not None:
            result['disk_type'] = self.disk_type
        if self.instance_type is not None:
            result['instance_type'] = self.instance_type
        if self.region is not None:
            result['region'] = self.region
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('disk_type') is not None:
            self.disk_type = m.get('disk_type')
        if m.get('instance_type') is not None:
            self.instance_type = m.get('instance_type')
        if m.get('region') is not None:
            self.region = m.get('region')
        return self


class ListResourceDiskResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[Disk] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # disk infos
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = Disk()
                self.data.append(temp_model.from_map(k))
        return self


class ListResourceComputertypefamilyRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        region: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # region name
        self.region = region

    def validate(self):
        self.validate_required(self.region, 'region')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.region is not None:
            result['region'] = self.region
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('region') is not None:
            self.region = m.get('region')
        return self


class ListResourceComputertypefamilyResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[ComputerTypeFamily] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # computer 规格族
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = ComputerTypeFamily()
                self.data.append(temp_model.from_map(k))
        return self


class ListUnifiedresourceVswitchRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        region: str = None,
        vpc_id: str = None,
        v_switch_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # region name
        self.region = region
        # 要查询的交换机所属VPC的ID
        self.vpc_id = vpc_id
        # 要查询的交换机的ID
        self.v_switch_id = v_switch_id

    def validate(self):
        self.validate_required(self.region, 'region')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.region is not None:
            result['region'] = self.region
        if self.vpc_id is not None:
            result['vpc_id'] = self.vpc_id
        if self.v_switch_id is not None:
            result['v_switch_id'] = self.v_switch_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('vpc_id') is not None:
            self.vpc_id = m.get('vpc_id')
        if m.get('v_switch_id') is not None:
            self.v_switch_id = m.get('v_switch_id')
        return self


class ListUnifiedresourceVswitchResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[VSwitch] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 交换机的详细信息
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = VSwitch()
                self.data.append(temp_model.from_map(k))
        return self


class ListUnifiedresourceVpcRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        region: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # region name
        self.region = region

    def validate(self):
        self.validate_required(self.region, 'region')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.region is not None:
            result['region'] = self.region
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('region') is not None:
            self.region = m.get('region')
        return self


class ListUnifiedresourceVpcResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[VPC] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # vpc list
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = VPC()
                self.data.append(temp_model.from_map(k))
        return self


class ImportResourceVpcRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        region: str = None,
        vpc_id: str = None,
        workspace: str = None,
        vrouter_id: str = None,
        vpc_name: str = None,
        cidr_block: str = None,
        paas_region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # region identity
        self.region = region
        # vpc iaas id
        self.vpc_id = vpc_id
        # workspace identity
        self.workspace = workspace
        # vrouter id
        self.vrouter_id = vrouter_id
        # vpc name
        self.vpc_name = vpc_name
        # cidr block
        self.cidr_block = cidr_block
        # paas_region_id
        self.paas_region_id = paas_region_id

    def validate(self):
        self.validate_required(self.vpc_id, 'vpc_id')
        self.validate_required(self.workspace, 'workspace')
        self.validate_required(self.vrouter_id, 'vrouter_id')
        self.validate_required(self.vpc_name, 'vpc_name')
        self.validate_required(self.paas_region_id, 'paas_region_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.region is not None:
            result['region'] = self.region
        if self.vpc_id is not None:
            result['vpc_id'] = self.vpc_id
        if self.workspace is not None:
            result['workspace'] = self.workspace
        if self.vrouter_id is not None:
            result['vrouter_id'] = self.vrouter_id
        if self.vpc_name is not None:
            result['vpc_name'] = self.vpc_name
        if self.cidr_block is not None:
            result['cidr_block'] = self.cidr_block
        if self.paas_region_id is not None:
            result['paas_region_id'] = self.paas_region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('vpc_id') is not None:
            self.vpc_id = m.get('vpc_id')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        if m.get('vrouter_id') is not None:
            self.vrouter_id = m.get('vrouter_id')
        if m.get('vpc_name') is not None:
            self.vpc_name = m.get('vpc_name')
        if m.get('cidr_block') is not None:
            self.cidr_block = m.get('cidr_block')
        if m.get('paas_region_id') is not None:
            self.paas_region_id = m.get('paas_region_id')
        return self


class ImportResourceVpcResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        success: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # vpc关联到workspace是否成功
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DeleteResourceRuleRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        ip_protocol: str = None,
        port_range: str = None,
        region: str = None,
        rule_type: str = None,
        security_group_id: str = None,
        source_cidr_ip: str = None,
        dest_cidr_ip: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 传输层协议。参数值大小写敏感。取值范围：
        # 
        # icmp
        # gre
        # tcp
        # udp
        # all：支持所有协议
        self.ip_protocol = ip_protocol
        # 目的端安全组开放的传输层协议相关的端口范围。取值范围：
        # 
        # TCP/UDP协议：取值范围为1~65535。使用斜线（/）隔开起始端口和终止端口。例如：1/200
        # ICMP协议：-1/-1
        # GRE协议：-1/-1
        # all：-1/-1
        self.port_range = port_range
        # CN-HANGZHOU_FINANCE
        self.region = region
        # 枚举值：
        # ingress：入口规则
        # egress：出口规则
        self.rule_type = rule_type
        # 目的端安全组ID。
        self.security_group_id = security_group_id
        # 源端IP地址范围。支持CIDR格式和IPv4格式的IP地址范围。默认值：0.0.0.0/0
        self.source_cidr_ip = source_cidr_ip
        # 目的端IP地址范围。支持CIDR格式和IPv4格式的IP地址范围。默认值：0.0.0.0/0
        self.dest_cidr_ip = dest_cidr_ip

    def validate(self):
        self.validate_required(self.ip_protocol, 'ip_protocol')
        self.validate_required(self.port_range, 'port_range')
        self.validate_required(self.region, 'region')
        self.validate_required(self.rule_type, 'rule_type')
        self.validate_required(self.security_group_id, 'security_group_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.ip_protocol is not None:
            result['ip_protocol'] = self.ip_protocol
        if self.port_range is not None:
            result['port_range'] = self.port_range
        if self.region is not None:
            result['region'] = self.region
        if self.rule_type is not None:
            result['rule_type'] = self.rule_type
        if self.security_group_id is not None:
            result['security_group_id'] = self.security_group_id
        if self.source_cidr_ip is not None:
            result['source_cidr_ip'] = self.source_cidr_ip
        if self.dest_cidr_ip is not None:
            result['dest_cidr_ip'] = self.dest_cidr_ip
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('ip_protocol') is not None:
            self.ip_protocol = m.get('ip_protocol')
        if m.get('port_range') is not None:
            self.port_range = m.get('port_range')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('rule_type') is not None:
            self.rule_type = m.get('rule_type')
        if m.get('security_group_id') is not None:
            self.security_group_id = m.get('security_group_id')
        if m.get('source_cidr_ip') is not None:
            self.source_cidr_ip = m.get('source_cidr_ip')
        if m.get('dest_cidr_ip') is not None:
            self.dest_cidr_ip = m.get('dest_cidr_ip')
        return self


class DeleteResourceRuleResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        success: bool = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 操作是否成功
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class ListRouteEntryRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        region: str = None,
        router_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 所属地域
        self.region = region
        # 要查询的路由条目所属路由表的所属路由器的ID。
        self.router_id = router_id

    def validate(self):
        self.validate_required(self.region, 'region')
        self.validate_required(self.router_id, 'router_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.region is not None:
            result['region'] = self.region
        if self.router_id is not None:
            result['router_id'] = self.router_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('router_id') is not None:
            self.router_id = m.get('router_id')
        return self


class ListRouteEntryResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[VRouteEntry] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 路由条目信息
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = VRouteEntry()
                self.data.append(temp_model.from_map(k))
        return self


class ListAvailableDiskRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        region: str = None,
        disk_type: str = None,
        instance_type: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # region name
        self.region = region
        # 磁盘类型：
        # SystemDisk;
        # DataDisk
        self.disk_type = disk_type
        # 实例规格
        self.instance_type = instance_type

    def validate(self):
        self.validate_required(self.region, 'region')
        self.validate_required(self.disk_type, 'disk_type')
        self.validate_required(self.instance_type, 'instance_type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.region is not None:
            result['region'] = self.region
        if self.disk_type is not None:
            result['disk_type'] = self.disk_type
        if self.instance_type is not None:
            result['instance_type'] = self.instance_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('disk_type') is not None:
            self.disk_type = m.get('disk_type')
        if m.get('instance_type') is not None:
            self.instance_type = m.get('instance_type')
        return self


class ListAvailableDiskResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 磁盘类型详细信息，jsonstring
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class ListAvailableInstancetypeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        region: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # region name
        self.region = region

    def validate(self):
        self.validate_required(self.region, 'region')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.region is not None:
            result['region'] = self.region
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('region') is not None:
            self.region = m.get('region')
        return self


class ListAvailableInstancetypeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # 实例类型详细信息，jsonstring
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryResourcemetaNodeRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace name
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class QueryResourcemetaNodeResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # node meta list jsonstring
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryResourcemetaAppserviceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace name
        self.workspace = workspace

    def validate(self):
        self.validate_required(self.workspace, 'workspace')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace is not None:
            result['workspace'] = self.workspace
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace') is not None:
            self.workspace = m.get('workspace')
        return self


class QueryResourcemetaAppserviceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # app service metadata json
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class SyncComputerRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
        computer_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 工作空间
        self.workspace_id = workspace_id
        # computer_id
        self.computer_id = computer_id

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.computer_id, 'computer_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.computer_id is not None:
            result['computer_id'] = self.computer_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('computer_id') is not None:
            self.computer_id = m.get('computer_id')
        return self


class SyncComputerResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class SyncLoadbalanceRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
        lb_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace_id
        self.workspace_id = workspace_id
        # lb_id
        self.lb_id = lb_id

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.lb_id, 'lb_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.lb_id is not None:
            result['lb_id'] = self.lb_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('lb_id') is not None:
            self.lb_id = m.get('lb_id')
        return self


class SyncLoadbalanceResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class UpdateComputerInfoRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        name: str = None,
        description: str = None,
        workspace_id: str = None,
        computer_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # name
        self.name = name
        # description
        self.description = description
        # workspace_id
        self.workspace_id = workspace_id
        # computer_id
        self.computer_id = computer_id

    def validate(self):
        self.validate_required(self.name, 'name')
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.computer_id, 'computer_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.name is not None:
            result['name'] = self.name
        if self.description is not None:
            result['description'] = self.description
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.computer_id is not None:
            result['computer_id'] = self.computer_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('computer_id') is not None:
            self.computer_id = m.get('computer_id')
        return self


class UpdateComputerInfoResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class SetComputerAssignRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        app_id: str = None,
        app_service_id: str = None,
        computer_ids: List[str] = None,
        workspace_id: str = None,
        cell: List[MapStringToStringEntity] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # app_id
        self.app_id = app_id
        # 应用服务实例
        self.app_service_id = app_service_id
        # computer_ids
        self.computer_ids = computer_ids
        # workspace_id
        self.workspace_id = workspace_id
        # cell信息
        self.cell = cell

    def validate(self):
        self.validate_required(self.app_service_id, 'app_service_id')
        self.validate_required(self.computer_ids, 'computer_ids')
        self.validate_required(self.workspace_id, 'workspace_id')
        if self.cell:
            for k in self.cell:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.app_id is not None:
            result['app_id'] = self.app_id
        if self.app_service_id is not None:
            result['app_service_id'] = self.app_service_id
        if self.computer_ids is not None:
            result['computer_ids'] = self.computer_ids
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        result['cell'] = []
        if self.cell is not None:
            for k in self.cell:
                result['cell'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('app_id') is not None:
            self.app_id = m.get('app_id')
        if m.get('app_service_id') is not None:
            self.app_service_id = m.get('app_service_id')
        if m.get('computer_ids') is not None:
            self.computer_ids = m.get('computer_ids')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        self.cell = []
        if m.get('cell') is not None:
            for k in m.get('cell'):
                temp_model = MapStringToStringEntity()
                self.cell.append(temp_model.from_map(k))
        return self


class SetComputerAssignResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class ExecRequestTaskRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        rmc_request_id: str = None,
        task_ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # rmc_request_id，注意区分OPENAPI自身的request_id
        self.rmc_request_id = rmc_request_id
        # task_ids
        self.task_ids = task_ids

    def validate(self):
        self.validate_required(self.rmc_request_id, 'rmc_request_id')
        self.validate_required(self.task_ids, 'task_ids')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.rmc_request_id is not None:
            result['rmc_request_id'] = self.rmc_request_id
        if self.task_ids is not None:
            result['task_ids'] = self.task_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('rmc_request_id') is not None:
            self.rmc_request_id = m.get('rmc_request_id')
        if m.get('task_ids') is not None:
            self.task_ids = m.get('task_ids')
        return self


class ExecRequestTaskResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class ReinitDiskRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        ids: List[str] = None,
        workspace_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # ids
        self.ids = ids
        # workspace_id
        self.workspace_id = workspace_id

    def validate(self):
        self.validate_required(self.ids, 'ids')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.ids is not None:
            result['ids'] = self.ids
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class ReinitDiskResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class UpdateDiskStrategyRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        delete_with_computer: bool = None,
        delete_auto_snapshot: bool = None,
        enable_auto_snapshot: bool = None,
        ids: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # delete_with_computer
        self.delete_with_computer = delete_with_computer
        # delete_auto_snapshot
        self.delete_auto_snapshot = delete_auto_snapshot
        # enable_auto_snapshot
        self.enable_auto_snapshot = enable_auto_snapshot
        # ids
        self.ids = ids

    def validate(self):
        self.validate_required(self.ids, 'ids')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.delete_with_computer is not None:
            result['delete_with_computer'] = self.delete_with_computer
        if self.delete_auto_snapshot is not None:
            result['delete_auto_snapshot'] = self.delete_auto_snapshot
        if self.enable_auto_snapshot is not None:
            result['enable_auto_snapshot'] = self.enable_auto_snapshot
        if self.ids is not None:
            result['ids'] = self.ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('delete_with_computer') is not None:
            self.delete_with_computer = m.get('delete_with_computer')
        if m.get('delete_auto_snapshot') is not None:
            self.delete_auto_snapshot = m.get('delete_auto_snapshot')
        if m.get('enable_auto_snapshot') is not None:
            self.enable_auto_snapshot = m.get('enable_auto_snapshot')
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        return self


class UpdateDiskStrategyResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class CreateLoadbalanceVcomputergroupRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        load_balancer_id: str = None,
        name: str = None,
        computer_ids: List[str] = None,
        ports: List[int] = None,
        weights: List[int] = None,
        is_eip: bool = None,
        eips: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # load_balancer_id
        self.load_balancer_id = load_balancer_id
        # name
        self.name = name
        # computer_ids
        self.computer_ids = computer_ids
        # ports
        self.ports = ports
        # weights
        self.weights = weights
        # is_eip
        self.is_eip = is_eip
        # eips
        self.eips = eips

    def validate(self):
        self.validate_required(self.load_balancer_id, 'load_balancer_id')
        self.validate_required(self.name, 'name')
        self.validate_required(self.computer_ids, 'computer_ids')
        self.validate_required(self.ports, 'ports')
        self.validate_required(self.weights, 'weights')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.load_balancer_id is not None:
            result['load_balancer_id'] = self.load_balancer_id
        if self.name is not None:
            result['name'] = self.name
        if self.computer_ids is not None:
            result['computer_ids'] = self.computer_ids
        if self.ports is not None:
            result['ports'] = self.ports
        if self.weights is not None:
            result['weights'] = self.weights
        if self.is_eip is not None:
            result['is_eip'] = self.is_eip
        if self.eips is not None:
            result['eips'] = self.eips
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('load_balancer_id') is not None:
            self.load_balancer_id = m.get('load_balancer_id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('computer_ids') is not None:
            self.computer_ids = m.get('computer_ids')
        if m.get('ports') is not None:
            self.ports = m.get('ports')
        if m.get('weights') is not None:
            self.weights = m.get('weights')
        if m.get('is_eip') is not None:
            self.is_eip = m.get('is_eip')
        if m.get('eips') is not None:
            self.eips = m.get('eips')
        return self


class CreateLoadbalanceVcomputergroupResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[str] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # request_ids
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class UpdateLoadbalanceVcomputergroupRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        v_computergroup_id: str = None,
        is_eip: bool = None,
        eips: List[str] = None,
        computer_ids: List[str] = None,
        weights: List[int] = None,
        ports: List[int] = None,
        update_weight_only: bool = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # v_computergroup_id
        self.v_computergroup_id = v_computergroup_id
        # is_eip
        self.is_eip = is_eip
        # eips
        self.eips = eips
        # computer_ids
        self.computer_ids = computer_ids
        # weights
        self.weights = weights
        # ports
        self.ports = ports
        # 是否只是调整权重，不增删后端服务器
        self.update_weight_only = update_weight_only

    def validate(self):
        self.validate_required(self.v_computergroup_id, 'v_computergroup_id')
        self.validate_required(self.eips, 'eips')
        self.validate_required(self.weights, 'weights')
        self.validate_required(self.ports, 'ports')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.v_computergroup_id is not None:
            result['v_computergroup_id'] = self.v_computergroup_id
        if self.is_eip is not None:
            result['is_eip'] = self.is_eip
        if self.eips is not None:
            result['eips'] = self.eips
        if self.computer_ids is not None:
            result['computer_ids'] = self.computer_ids
        if self.weights is not None:
            result['weights'] = self.weights
        if self.ports is not None:
            result['ports'] = self.ports
        if self.update_weight_only is not None:
            result['update_weight_only'] = self.update_weight_only
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('v_computergroup_id') is not None:
            self.v_computergroup_id = m.get('v_computergroup_id')
        if m.get('is_eip') is not None:
            self.is_eip = m.get('is_eip')
        if m.get('eips') is not None:
            self.eips = m.get('eips')
        if m.get('computer_ids') is not None:
            self.computer_ids = m.get('computer_ids')
        if m.get('weights') is not None:
            self.weights = m.get('weights')
        if m.get('ports') is not None:
            self.ports = m.get('ports')
        if m.get('update_weight_only') is not None:
            self.update_weight_only = m.get('update_weight_only')
        return self


class UpdateLoadbalanceVcomputergroupResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class DeleteLoadbalanceVcomputergroupRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        v_computer_group_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 虚拟服务器ID，PAAS ID非IAAS ID
        self.v_computer_group_id = v_computer_group_id

    def validate(self):
        self.validate_required(self.v_computer_group_id, 'v_computer_group_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.v_computer_group_id is not None:
            result['v_computer_group_id'] = self.v_computer_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('v_computer_group_id') is not None:
            self.v_computer_group_id = m.get('v_computer_group_id')
        return self


class DeleteLoadbalanceVcomputergroupResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        paas_request_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # paas_request_id
        self.paas_request_id = paas_request_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.paas_request_id is not None:
            result['paas_request_id'] = self.paas_request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('paas_request_id') is not None:
            self.paas_request_id = m.get('paas_request_id')
        return self


class AddLoadbalanceVcomputergroupRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
        v_computer_group_id: str = None,
        is_eip: bool = None,
        computer_ids: List[str] = None,
        weights: List[int] = None,
        ports: List[str] = None,
        eips: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace_id
        self.workspace_id = workspace_id
        # v_computer_group_id
        self.v_computer_group_id = v_computer_group_id
        # is_eip
        self.is_eip = is_eip
        # computer 的id数组
        self.computer_ids = computer_ids
        # 权重
        self.weights = weights
        # ports
        self.ports = ports
        # 当is_eip时必填
        self.eips = eips

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.v_computer_group_id, 'v_computer_group_id')
        self.validate_required(self.weights, 'weights')
        self.validate_required(self.ports, 'ports')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.v_computer_group_id is not None:
            result['v_computer_group_id'] = self.v_computer_group_id
        if self.is_eip is not None:
            result['is_eip'] = self.is_eip
        if self.computer_ids is not None:
            result['computer_ids'] = self.computer_ids
        if self.weights is not None:
            result['weights'] = self.weights
        if self.ports is not None:
            result['ports'] = self.ports
        if self.eips is not None:
            result['eips'] = self.eips
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('v_computer_group_id') is not None:
            self.v_computer_group_id = m.get('v_computer_group_id')
        if m.get('is_eip') is not None:
            self.is_eip = m.get('is_eip')
        if m.get('computer_ids') is not None:
            self.computer_ids = m.get('computer_ids')
        if m.get('weights') is not None:
            self.weights = m.get('weights')
        if m.get('ports') is not None:
            self.ports = m.get('ports')
        if m.get('eips') is not None:
            self.eips = m.get('eips')
        return self


class AddLoadbalanceVcomputergroupResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        paas_request_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # paas_request_id
        self.paas_request_id = paas_request_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.paas_request_id is not None:
            result['paas_request_id'] = self.paas_request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('paas_request_id') is not None:
            self.paas_request_id = m.get('paas_request_id')
        return self


class RemoveLoadbalanceVcomputergroupRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        computer_ids: List[str] = None,
        is_eip: bool = None,
        ports: List[int] = None,
        weights: List[int] = None,
        eips: List[str] = None,
        v_computer_group_id: str = None,
        workspace_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # computer_ids
        self.computer_ids = computer_ids
        # 后端是否是弹性网卡
        self.is_eip = is_eip
        # ports
        self.ports = ports
        # weights
        self.weights = weights
        # eips
        self.eips = eips
        # v_computer_group_id
        self.v_computer_group_id = v_computer_group_id
        # workspace_id
        self.workspace_id = workspace_id

    def validate(self):
        self.validate_required(self.computer_ids, 'computer_ids')
        self.validate_required(self.ports, 'ports')
        self.validate_required(self.weights, 'weights')
        self.validate_required(self.v_computer_group_id, 'v_computer_group_id')
        self.validate_required(self.workspace_id, 'workspace_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.computer_ids is not None:
            result['computer_ids'] = self.computer_ids
        if self.is_eip is not None:
            result['is_eip'] = self.is_eip
        if self.ports is not None:
            result['ports'] = self.ports
        if self.weights is not None:
            result['weights'] = self.weights
        if self.eips is not None:
            result['eips'] = self.eips
        if self.v_computer_group_id is not None:
            result['v_computer_group_id'] = self.v_computer_group_id
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('computer_ids') is not None:
            self.computer_ids = m.get('computer_ids')
        if m.get('is_eip') is not None:
            self.is_eip = m.get('is_eip')
        if m.get('ports') is not None:
            self.ports = m.get('ports')
        if m.get('weights') is not None:
            self.weights = m.get('weights')
        if m.get('eips') is not None:
            self.eips = m.get('eips')
        if m.get('v_computer_group_id') is not None:
            self.v_computer_group_id = m.get('v_computer_group_id')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class RemoveLoadbalanceVcomputergroupResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        paas_request_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # paas_request_id
        self.paas_request_id = paas_request_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.paas_request_id is not None:
            result['paas_request_id'] = self.paas_request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('paas_request_id') is not None:
            self.paas_request_id = m.get('paas_request_id')
        return self


class AddDnsRecordsetRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        name: str = None,
        description: str = None,
        type: str = None,
        dns_network_type: str = None,
        tenant_id: str = None,
        dns_records: List[DnsRecordParam] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # name
        self.name = name
        # description
        self.description = description
        # type: 记录类型，默认为A, 仅支持 A, CName, 见DnsRecordSetType
        self.type = type
        # type: 类型, PUBLIC(外部域名) 或者 PRIVATE (域名) 见DnsNetworkType
        self.dns_network_type = dns_network_type
        # tenant_id
        self.tenant_id = tenant_id
        # dns_records
        self.dns_records = dns_records

    def validate(self):
        self.validate_required(self.name, 'name')
        self.validate_required(self.type, 'type')
        self.validate_required(self.tenant_id, 'tenant_id')
        self.validate_required(self.dns_records, 'dns_records')
        if self.dns_records:
            for k in self.dns_records:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.name is not None:
            result['name'] = self.name
        if self.description is not None:
            result['description'] = self.description
        if self.type is not None:
            result['type'] = self.type
        if self.dns_network_type is not None:
            result['dns_network_type'] = self.dns_network_type
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        result['dns_records'] = []
        if self.dns_records is not None:
            for k in self.dns_records:
                result['dns_records'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('dns_network_type') is not None:
            self.dns_network_type = m.get('dns_network_type')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        self.dns_records = []
        if m.get('dns_records') is not None:
            for k in m.get('dns_records'):
                temp_model = DnsRecordParam()
                self.dns_records.append(temp_model.from_map(k))
        return self


class AddDnsRecordsetResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # xxxxxxx
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DeleteDnsRecordRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        dns_recordset_id: str = None,
        dns_record_ip: str = None,
        workspace_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # dns_recordset_id
        self.dns_recordset_id = dns_recordset_id
        # dns_record_ip
        self.dns_record_ip = dns_record_ip
        # workspace_id
        self.workspace_id = workspace_id

    def validate(self):
        self.validate_required(self.dns_recordset_id, 'dns_recordset_id')
        self.validate_required(self.dns_record_ip, 'dns_record_ip')
        self.validate_required(self.workspace_id, 'workspace_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.dns_recordset_id is not None:
            result['dns_recordset_id'] = self.dns_recordset_id
        if self.dns_record_ip is not None:
            result['dns_record_ip'] = self.dns_record_ip
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('dns_recordset_id') is not None:
            self.dns_recordset_id = m.get('dns_recordset_id')
        if m.get('dns_record_ip') is not None:
            self.dns_record_ip = m.get('dns_record_ip')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        return self


class DeleteDnsRecordResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class QueryDnsRecordsetRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
        resource_type: str = None,
        ip: str = None,
        dns_recordset_name: str = None,
        resource_name: str = None,
        resource_iaas_ids: List[str] = None,
        dns_recordset_ids: List[str] = None,
        page_size: int = None,
        current_page: int = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace_id
        self.workspace_id = workspace_id
        # resource_type
        self.resource_type = resource_type
        # ip
        # 
        self.ip = ip
        # dns_recordset_name
        self.dns_recordset_name = dns_recordset_name
        # resource_name
        self.resource_name = resource_name
        # resource_iaas_ids
        self.resource_iaas_ids = resource_iaas_ids
        # dns_recordset_ids
        self.dns_recordset_ids = dns_recordset_ids
        # page_size
        self.page_size = page_size
        # current_page
        self.current_page = current_page

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.page_size, 'page_size')
        self.validate_required(self.current_page, 'current_page')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.resource_type is not None:
            result['resource_type'] = self.resource_type
        if self.ip is not None:
            result['ip'] = self.ip
        if self.dns_recordset_name is not None:
            result['dns_recordset_name'] = self.dns_recordset_name
        if self.resource_name is not None:
            result['resource_name'] = self.resource_name
        if self.resource_iaas_ids is not None:
            result['resource_iaas_ids'] = self.resource_iaas_ids
        if self.dns_recordset_ids is not None:
            result['dns_recordset_ids'] = self.dns_recordset_ids
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.current_page is not None:
            result['current_page'] = self.current_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('resource_type') is not None:
            self.resource_type = m.get('resource_type')
        if m.get('ip') is not None:
            self.ip = m.get('ip')
        if m.get('dns_recordset_name') is not None:
            self.dns_recordset_name = m.get('dns_recordset_name')
        if m.get('resource_name') is not None:
            self.resource_name = m.get('resource_name')
        if m.get('resource_iaas_ids') is not None:
            self.resource_iaas_ids = m.get('resource_iaas_ids')
        if m.get('dns_recordset_ids') is not None:
            self.dns_recordset_ids = m.get('dns_recordset_ids')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        return self


class QueryDnsRecordsetResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[WorkspaceDnsRecordset] = None,
        total_count: int = None,
        page_size: int = None,
        current_page: int = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data
        # total_count
        self.total_count = total_count
        # page_size
        self.page_size = page_size
        # current_page
        self.current_page = current_page

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['total_count'] = self.total_count
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.current_page is not None:
            result['current_page'] = self.current_page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = WorkspaceDnsRecordset()
                self.data.append(temp_model.from_map(k))
        if m.get('total_count') is not None:
            self.total_count = m.get('total_count')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('current_page') is not None:
            self.current_page = m.get('current_page')
        return self


class BindDnsProviderRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
        zone_id: str = None,
        dns_provider_id: str = None,
        default_sub_domain_name: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace_id
        self.workspace_id = workspace_id
        # 部分环境绑定到机房机房
        self.zone_id = zone_id
        # dns_provider_id
        self.dns_provider_id = dns_provider_id
        # default_sub_domain_name
        self.default_sub_domain_name = default_sub_domain_name

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.dns_provider_id, 'dns_provider_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.zone_id is not None:
            result['zone_id'] = self.zone_id
        if self.dns_provider_id is not None:
            result['dns_provider_id'] = self.dns_provider_id
        if self.default_sub_domain_name is not None:
            result['default_sub_domain_name'] = self.default_sub_domain_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('zone_id') is not None:
            self.zone_id = m.get('zone_id')
        if m.get('dns_provider_id') is not None:
            self.dns_provider_id = m.get('dns_provider_id')
        if m.get('default_sub_domain_name') is not None:
            self.default_sub_domain_name = m.get('default_sub_domain_name')
        return self


class BindDnsProviderResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class ListDnsProviderRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        region_id: str = None,
        zone_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # regionId
        self.region_id = region_id
        # zone_id
        self.zone_id = zone_id

    def validate(self):
        self.validate_required(self.region_id, 'region_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.region_id is not None:
            result['region_id'] = self.region_id
        if self.zone_id is not None:
            result['zone_id'] = self.zone_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('region_id') is not None:
            self.region_id = m.get('region_id')
        if m.get('zone_id') is not None:
            self.zone_id = m.get('zone_id')
        return self


class ListDnsProviderResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[IaasDnsProvider] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = IaasDnsProvider()
                self.data.append(temp_model.from_map(k))
        return self


class QueryProviderRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        resource_type: str = None,
        paas_region_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # LB，COMPUTE，VPC,OBJECT_STORAGE等
        self.resource_type = resource_type
        # paas_region_id
        self.paas_region_id = paas_region_id

    def validate(self):
        self.validate_required(self.resource_type, 'resource_type')
        self.validate_required(self.paas_region_id, 'paas_region_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.resource_type is not None:
            result['resource_type'] = self.resource_type
        if self.paas_region_id is not None:
            result['paas_region_id'] = self.paas_region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('resource_type') is not None:
            self.resource_type = m.get('resource_type')
        if m.get('paas_region_id') is not None:
            self.paas_region_id = m.get('paas_region_id')
        return self


class QueryProviderResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[IaasConnMetadata] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = IaasConnMetadata()
                self.data.append(temp_model.from_map(k))
        return self


class GetDnsWorkspaceproviderRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
        zone_id: str = None,
        dns_network_type: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace_id
        self.workspace_id = workspace_id
        # zoneId
        self.zone_id = zone_id
        # dns_network_type
        self.dns_network_type = dns_network_type

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.dns_network_type, 'dns_network_type')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.zone_id is not None:
            result['zone_id'] = self.zone_id
        if self.dns_network_type is not None:
            result['dns_network_type'] = self.dns_network_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('zone_id') is not None:
            self.zone_id = m.get('zone_id')
        if m.get('dns_network_type') is not None:
            self.dns_network_type = m.get('dns_network_type')
        return self


class GetDnsWorkspaceproviderResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[WorkspaceDnsProvider] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = WorkspaceDnsProvider()
                self.data.append(temp_model.from_map(k))
        return self


class CreateUniworkspacegroupRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        name: str = None,
        display_name: str = None,
        tenant_id: str = None,
        namespace: str = None,
        properties: str = None,
        release_mode: str = None,
        workspaces: List[str] = None,
        workspaces_create_param: List[str] = None,
        cell_group_create_params: List[str] = None,
        cell_create_params: List[str] = None,
        domain_suffix: str = None,
        vpc_create_params: List[str] = None,
        import_vpcs: List[str] = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # 工作空间组名称
        self.name = name
        # 显示名字，可以中文
        self.display_name = display_name
        # 租户ID
        self.tenant_id = tenant_id
        # namespace
        self.namespace = namespace
        # json格式的字符串，工作空间组属性
        self.properties = properties
        # release_mode
        self.release_mode = release_mode
        # 工作空间的名称
        self.workspaces = workspaces
        # workspaces_create_param
        self.workspaces_create_param = workspaces_create_param
        # cell_group_create_params
        self.cell_group_create_params = cell_group_create_params
        # cell_create_params
        self.cell_create_params = cell_create_params
        # 域名前缀
        self.domain_suffix = domain_suffix
        # VPC创建参数
        self.vpc_create_params = vpc_create_params
        # 导入的VPCIDs
        self.import_vpcs = import_vpcs

    def validate(self):
        self.validate_required(self.name, 'name')
        self.validate_required(self.display_name, 'display_name')
        self.validate_required(self.tenant_id, 'tenant_id')
        self.validate_required(self.workspaces, 'workspaces')
        self.validate_required(self.workspaces_create_param, 'workspaces_create_param')
        self.validate_required(self.vpc_create_params, 'vpc_create_params')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.name is not None:
            result['name'] = self.name
        if self.display_name is not None:
            result['display_name'] = self.display_name
        if self.tenant_id is not None:
            result['tenant_id'] = self.tenant_id
        if self.namespace is not None:
            result['namespace'] = self.namespace
        if self.properties is not None:
            result['properties'] = self.properties
        if self.release_mode is not None:
            result['release_mode'] = self.release_mode
        if self.workspaces is not None:
            result['workspaces'] = self.workspaces
        if self.workspaces_create_param is not None:
            result['workspaces_create_param'] = self.workspaces_create_param
        if self.cell_group_create_params is not None:
            result['cell_group_create_params'] = self.cell_group_create_params
        if self.cell_create_params is not None:
            result['cell_create_params'] = self.cell_create_params
        if self.domain_suffix is not None:
            result['domain_suffix'] = self.domain_suffix
        if self.vpc_create_params is not None:
            result['vpc_create_params'] = self.vpc_create_params
        if self.import_vpcs is not None:
            result['import_vpcs'] = self.import_vpcs
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('display_name') is not None:
            self.display_name = m.get('display_name')
        if m.get('tenant_id') is not None:
            self.tenant_id = m.get('tenant_id')
        if m.get('namespace') is not None:
            self.namespace = m.get('namespace')
        if m.get('properties') is not None:
            self.properties = m.get('properties')
        if m.get('release_mode') is not None:
            self.release_mode = m.get('release_mode')
        if m.get('workspaces') is not None:
            self.workspaces = m.get('workspaces')
        if m.get('workspaces_create_param') is not None:
            self.workspaces_create_param = m.get('workspaces_create_param')
        if m.get('cell_group_create_params') is not None:
            self.cell_group_create_params = m.get('cell_group_create_params')
        if m.get('cell_create_params') is not None:
            self.cell_create_params = m.get('cell_create_params')
        if m.get('domain_suffix') is not None:
            self.domain_suffix = m.get('domain_suffix')
        if m.get('vpc_create_params') is not None:
            self.vpc_create_params = m.get('vpc_create_params')
        if m.get('import_vpcs') is not None:
            self.import_vpcs = m.get('import_vpcs')
        return self


class CreateUniworkspacegroupResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        paas_request_id: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # paas_request_id，异步任务ID
        self.paas_request_id = paas_request_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.paas_request_id is not None:
            result['paas_request_id'] = self.paas_request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('paas_request_id') is not None:
            self.paas_request_id = m.get('paas_request_id')
        return self


class ImportMiddlewareclusterRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
        cluster_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace_id
        self.workspace_id = workspace_id
        # cluster_id，OSP上的ID
        self.cluster_id = cluster_id

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.cluster_id, 'cluster_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.cluster_id is not None:
            result['cluster_id'] = self.cluster_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('cluster_id') is not None:
            self.cluster_id = m.get('cluster_id')
        return self


class ImportMiddlewareclusterResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


class QueryMiddlewareclusterRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
        cluster_id: str = None,
        cluster_name: str = None,
        workspace_group_name: str = None,
        app_service_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace_id 和workspace_group_id至少要填一个
        self.workspace_id = workspace_id
        # cluster_id OSP上的ID
        self.cluster_id = cluster_id
        # cluster_name
        self.cluster_name = cluster_name
        # workspace_group_name和workspace_id必须至少传入一个
        self.workspace_group_name = workspace_group_name
        # app_service_id
        self.app_service_id = app_service_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.cluster_id is not None:
            result['cluster_id'] = self.cluster_id
        if self.cluster_name is not None:
            result['cluster_name'] = self.cluster_name
        if self.workspace_group_name is not None:
            result['workspace_group_name'] = self.workspace_group_name
        if self.app_service_id is not None:
            result['app_service_id'] = self.app_service_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('cluster_id') is not None:
            self.cluster_id = m.get('cluster_id')
        if m.get('cluster_name') is not None:
            self.cluster_name = m.get('cluster_name')
        if m.get('workspace_group_name') is not None:
            self.workspace_group_name = m.get('workspace_group_name')
        if m.get('app_service_id') is not None:
            self.app_service_id = m.get('app_service_id')
        return self


class QueryMiddlewareclusterResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        data: List[MiddlewareClusterInstance] = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg
        # data
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = MiddlewareClusterInstance()
                self.data.append(temp_model.from_map(k))
        return self


class RemoveMiddlewareclusterRequest(TeaModel):
    def __init__(
        self,
        auth_token: str = None,
        workspace_id: str = None,
        cluster_id: str = None,
    ):
        # OAuth模式下的授权token
        self.auth_token = auth_token
        # workspace_id
        self.workspace_id = workspace_id
        # cluster_id
        self.cluster_id = cluster_id

    def validate(self):
        self.validate_required(self.workspace_id, 'workspace_id')
        self.validate_required(self.cluster_id, 'cluster_id')

    def to_map(self):
        result = dict()
        if self.auth_token is not None:
            result['auth_token'] = self.auth_token
        if self.workspace_id is not None:
            result['workspace_id'] = self.workspace_id
        if self.cluster_id is not None:
            result['cluster_id'] = self.cluster_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('auth_token') is not None:
            self.auth_token = m.get('auth_token')
        if m.get('workspace_id') is not None:
            self.workspace_id = m.get('workspace_id')
        if m.get('cluster_id') is not None:
            self.cluster_id = m.get('cluster_id')
        return self


class RemoveMiddlewareclusterResponse(TeaModel):
    def __init__(
        self,
        req_msg_id: str = None,
        result_code: str = None,
        result_msg: str = None,
    ):
        # 请求唯一ID，用于链路跟踪和问题排查
        self.req_msg_id = req_msg_id
        # 结果码，一般OK表示调用成功
        self.result_code = result_code
        # 异常信息的文本描述
        self.result_msg = result_msg

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.req_msg_id is not None:
            result['req_msg_id'] = self.req_msg_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('req_msg_id') is not None:
            self.req_msg_id = m.get('req_msg_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        return self


