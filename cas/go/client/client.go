// This file is auto-generated, don't edit it. Thanks.
package client

import (
	rpcutil "github.com/alibabacloud-go/tea-rpc-utils/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
	antchainutil "github.com/antchain-openapi-sdk-go/antchain-util/service"
)

/**
 * Model for initing client
 */
type Config struct {
	// accesskey id
	AccessKeyId *string `json:"accessKeyId,omitempty" xml:"accessKeyId,omitempty"`
	// accesskey secret
	AccessKeySecret *string `json:"accessKeySecret,omitempty" xml:"accessKeySecret,omitempty"`
	// security token
	SecurityToken *string `json:"securityToken,omitempty" xml:"securityToken,omitempty"`
	// http protocol
	Protocol *string `json:"protocol,omitempty" xml:"protocol,omitempty"`
	// read timeout
	ReadTimeout *int `json:"readTimeout,omitempty" xml:"readTimeout,omitempty"`
	// connect timeout
	ConnectTimeout *int `json:"connectTimeout,omitempty" xml:"connectTimeout,omitempty"`
	// http proxy
	HttpProxy *string `json:"httpProxy,omitempty" xml:"httpProxy,omitempty"`
	// https proxy
	HttpsProxy *string `json:"httpsProxy,omitempty" xml:"httpsProxy,omitempty"`
	// endpoint
	Endpoint *string `json:"endpoint,omitempty" xml:"endpoint,omitempty"`
	// proxy white list
	NoProxy *string `json:"noProxy,omitempty" xml:"noProxy,omitempty"`
	// max idle conns
	MaxIdleConns *int `json:"maxIdleConns,omitempty" xml:"maxIdleConns,omitempty"`
	// user agent
	UserAgent *string `json:"userAgent,omitempty" xml:"userAgent,omitempty"`
	// socks5 proxy
	Socks5Proxy *string `json:"socks5Proxy,omitempty" xml:"socks5Proxy,omitempty"`
	// socks5 network
	Socks5NetWork *string `json:"socks5NetWork,omitempty" xml:"socks5NetWork,omitempty"`
	// 长链接最大空闲时长
	MaxIdleTimeMillis *int `json:"maxIdleTimeMillis,omitempty" xml:"maxIdleTimeMillis,omitempty"`
	// 长链接最大连接时长
	KeepAliveDurationMillis *int `json:"keepAliveDurationMillis,omitempty" xml:"keepAliveDurationMillis,omitempty"`
	// 最大连接数（长链接最大总数）
	MaxRequests *int `json:"maxRequests,omitempty" xml:"maxRequests,omitempty"`
	// 每个目标主机的最大连接数（分主机域名的长链接最大总数
	MaxRequestsPerHost *int `json:"maxRequestsPerHost,omitempty" xml:"maxRequestsPerHost,omitempty"`
}

func (s Config) String() string {
	return tea.Prettify(s)
}

func (s Config) GoString() string {
	return s.String()
}

func (s *Config) SetAccessKeyId(v string) *Config {
	s.AccessKeyId = &v
	return s
}

func (s *Config) SetAccessKeySecret(v string) *Config {
	s.AccessKeySecret = &v
	return s
}

func (s *Config) SetSecurityToken(v string) *Config {
	s.SecurityToken = &v
	return s
}

func (s *Config) SetProtocol(v string) *Config {
	s.Protocol = &v
	return s
}

func (s *Config) SetReadTimeout(v int) *Config {
	s.ReadTimeout = &v
	return s
}

func (s *Config) SetConnectTimeout(v int) *Config {
	s.ConnectTimeout = &v
	return s
}

func (s *Config) SetHttpProxy(v string) *Config {
	s.HttpProxy = &v
	return s
}

func (s *Config) SetHttpsProxy(v string) *Config {
	s.HttpsProxy = &v
	return s
}

func (s *Config) SetEndpoint(v string) *Config {
	s.Endpoint = &v
	return s
}

func (s *Config) SetNoProxy(v string) *Config {
	s.NoProxy = &v
	return s
}

func (s *Config) SetMaxIdleConns(v int) *Config {
	s.MaxIdleConns = &v
	return s
}

func (s *Config) SetUserAgent(v string) *Config {
	s.UserAgent = &v
	return s
}

func (s *Config) SetSocks5Proxy(v string) *Config {
	s.Socks5Proxy = &v
	return s
}

func (s *Config) SetSocks5NetWork(v string) *Config {
	s.Socks5NetWork = &v
	return s
}

func (s *Config) SetMaxIdleTimeMillis(v int) *Config {
	s.MaxIdleTimeMillis = &v
	return s
}

func (s *Config) SetKeepAliveDurationMillis(v int) *Config {
	s.KeepAliveDurationMillis = &v
	return s
}

func (s *Config) SetMaxRequests(v int) *Config {
	s.MaxRequests = &v
	return s
}

func (s *Config) SetMaxRequestsPerHost(v int) *Config {
	s.MaxRequestsPerHost = &v
	return s
}

// 资源所属的App
type AssignedApp struct {
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// app_id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
}

func (s AssignedApp) String() string {
	return tea.Prettify(s)
}

func (s AssignedApp) GoString() string {
	return s.String()
}

func (s *AssignedApp) SetWorkspaceId(v string) *AssignedApp {
	s.WorkspaceId = &v
	return s
}

func (s *AssignedApp) SetAppId(v string) *AssignedApp {
	s.AppId = &v
	return s
}

// RegionView
type RegionView struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty" require:"true"`
	// providerId
	ProviderId *string `json:"provider_id,omitempty" xml:"provider_id,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// state
	State *string `json:"state,omitempty" xml:"state,omitempty" require:"true"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// networkType
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty" require:"true"`
	// availableNetworkTypes
	AvailableNetworkTypes []*string `json:"available_network_types,omitempty" xml:"available_network_types,omitempty" require:"true" type:"Repeated"`
}

func (s RegionView) String() string {
	return tea.Prettify(s)
}

func (s RegionView) GoString() string {
	return s.String()
}

func (s *RegionView) SetId(v string) *RegionView {
	s.Id = &v
	return s
}

func (s *RegionView) SetIdentity(v string) *RegionView {
	s.Identity = &v
	return s
}

func (s *RegionView) SetProviderId(v string) *RegionView {
	s.ProviderId = &v
	return s
}

func (s *RegionView) SetName(v string) *RegionView {
	s.Name = &v
	return s
}

func (s *RegionView) SetState(v string) *RegionView {
	s.State = &v
	return s
}

func (s *RegionView) SetDescription(v string) *RegionView {
	s.Description = &v
	return s
}

func (s *RegionView) SetNetworkType(v string) *RegionView {
	s.NetworkType = &v
	return s
}

func (s *RegionView) SetAvailableNetworkTypes(v []*string) *RegionView {
	s.AvailableNetworkTypes = v
	return s
}

// WorkspaceZoneView
type WorkspaceZoneView struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// state
	State *string `json:"state,omitempty" xml:"state,omitempty" require:"true"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
}

func (s WorkspaceZoneView) String() string {
	return tea.Prettify(s)
}

func (s WorkspaceZoneView) GoString() string {
	return s.String()
}

func (s *WorkspaceZoneView) SetId(v string) *WorkspaceZoneView {
	s.Id = &v
	return s
}

func (s *WorkspaceZoneView) SetIdentity(v string) *WorkspaceZoneView {
	s.Identity = &v
	return s
}

func (s *WorkspaceZoneView) SetName(v string) *WorkspaceZoneView {
	s.Name = &v
	return s
}

func (s *WorkspaceZoneView) SetState(v string) *WorkspaceZoneView {
	s.State = &v
	return s
}

func (s *WorkspaceZoneView) SetDescription(v string) *WorkspaceZoneView {
	s.Description = &v
	return s
}

// 数据库
type Database struct {
	// app_ids
	AppIds []*string `json:"app_ids,omitempty" xml:"app_ids,omitempty" type:"Repeated"`
	// app_service_ids
	AppServiceIds []*string `json:"app_service_ids,omitempty" xml:"app_service_ids,omitempty" type:"Repeated"`
	// assignedApps
	AssignedApps []*AssignedApp `json:"assigned_apps,omitempty" xml:"assigned_apps,omitempty" type:"Repeated"`
	// assigned_app_service_ids
	AssignedAppServiceIds []*string `json:"assigned_app_service_ids,omitempty" xml:"assigned_app_service_ids,omitempty" type:"Repeated"`
	// autoRenew
	AutoRenew *bool `json:"auto_renew,omitempty" xml:"auto_renew,omitempty"`
	// auto_renew_period
	AutoRenewPeriod *int64 `json:"auto_renew_period,omitempty" xml:"auto_renew_period,omitempty"`
	// connection_address
	ConnectionAddress *string `json:"connection_address,omitempty" xml:"connection_address,omitempty"`
	// cpu
	Cpu *int64 `json:"cpu,omitempty" xml:"cpu,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// engine
	Engine *string `json:"engine,omitempty" xml:"engine,omitempty"`
	// engine_version
	EngineVersion *string `json:"engine_version,omitempty" xml:"engine_version,omitempty"`
	// iaasId
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// iaas_type
	IaasType *string `json:"iaas_type,omitempty" xml:"iaas_type,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// master_zone_id
	MasterZoneId *string `json:"master_zone_id,omitempty" xml:"master_zone_id,omitempty"`
	// max_connections
	MaxConnections *int64 `json:"max_connections,omitempty" xml:"max_connections,omitempty"`
	// max_iops
	MaxIops *int64 `json:"max_iops,omitempty" xml:"max_iops,omitempty"`
	// memory
	Memory *int64 `json:"memory,omitempty" xml:"memory,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// network_type
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty"`
	// net_type
	NetType *string `json:"net_type,omitempty" xml:"net_type,omitempty"`
	// port
	Port *int64 `json:"port,omitempty" xml:"port,omitempty"`
	// shared_workspace_ids
	SharedWorkspaceIds []*string `json:"shared_workspace_ids,omitempty" xml:"shared_workspace_ids,omitempty" type:"Repeated"`
	// spec_iaas_id
	SpecIaasId *string `json:"spec_iaas_id,omitempty" xml:"spec_iaas_id,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// storage
	Storage *int64 `json:"storage,omitempty" xml:"storage,omitempty"`
	// type
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// utc_create
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// utc_modified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// vpc_id
	VpcId *string `json:"vpc_id,omitempty" xml:"vpc_id,omitempty"`
	// v_switch_iaas_id
	VSwitchIaasId *string `json:"v_switch_iaas_id,omitempty" xml:"v_switch_iaas_id,omitempty"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s Database) String() string {
	return tea.Prettify(s)
}

func (s Database) GoString() string {
	return s.String()
}

func (s *Database) SetAppIds(v []*string) *Database {
	s.AppIds = v
	return s
}

func (s *Database) SetAppServiceIds(v []*string) *Database {
	s.AppServiceIds = v
	return s
}

func (s *Database) SetAssignedApps(v []*AssignedApp) *Database {
	s.AssignedApps = v
	return s
}

func (s *Database) SetAssignedAppServiceIds(v []*string) *Database {
	s.AssignedAppServiceIds = v
	return s
}

func (s *Database) SetAutoRenew(v bool) *Database {
	s.AutoRenew = &v
	return s
}

func (s *Database) SetAutoRenewPeriod(v int64) *Database {
	s.AutoRenewPeriod = &v
	return s
}

func (s *Database) SetConnectionAddress(v string) *Database {
	s.ConnectionAddress = &v
	return s
}

func (s *Database) SetCpu(v int64) *Database {
	s.Cpu = &v
	return s
}

func (s *Database) SetDescription(v string) *Database {
	s.Description = &v
	return s
}

func (s *Database) SetEngine(v string) *Database {
	s.Engine = &v
	return s
}

func (s *Database) SetEngineVersion(v string) *Database {
	s.EngineVersion = &v
	return s
}

func (s *Database) SetIaasId(v string) *Database {
	s.IaasId = &v
	return s
}

func (s *Database) SetIaasType(v string) *Database {
	s.IaasType = &v
	return s
}

func (s *Database) SetId(v string) *Database {
	s.Id = &v
	return s
}

func (s *Database) SetMasterZoneId(v string) *Database {
	s.MasterZoneId = &v
	return s
}

func (s *Database) SetMaxConnections(v int64) *Database {
	s.MaxConnections = &v
	return s
}

func (s *Database) SetMaxIops(v int64) *Database {
	s.MaxIops = &v
	return s
}

func (s *Database) SetMemory(v int64) *Database {
	s.Memory = &v
	return s
}

func (s *Database) SetName(v string) *Database {
	s.Name = &v
	return s
}

func (s *Database) SetNetworkType(v string) *Database {
	s.NetworkType = &v
	return s
}

func (s *Database) SetNetType(v string) *Database {
	s.NetType = &v
	return s
}

func (s *Database) SetPort(v int64) *Database {
	s.Port = &v
	return s
}

func (s *Database) SetSharedWorkspaceIds(v []*string) *Database {
	s.SharedWorkspaceIds = v
	return s
}

func (s *Database) SetSpecIaasId(v string) *Database {
	s.SpecIaasId = &v
	return s
}

func (s *Database) SetStatus(v string) *Database {
	s.Status = &v
	return s
}

func (s *Database) SetStorage(v int64) *Database {
	s.Storage = &v
	return s
}

func (s *Database) SetType(v string) *Database {
	s.Type = &v
	return s
}

func (s *Database) SetUtcCreate(v string) *Database {
	s.UtcCreate = &v
	return s
}

func (s *Database) SetUtcModified(v string) *Database {
	s.UtcModified = &v
	return s
}

func (s *Database) SetVpcId(v string) *Database {
	s.VpcId = &v
	return s
}

func (s *Database) SetVSwitchIaasId(v string) *Database {
	s.VSwitchIaasId = &v
	return s
}

func (s *Database) SetWorkspaceId(v string) *Database {
	s.WorkspaceId = &v
	return s
}

// 一个 key-value 键值对
type MapStringToStringEntity struct {
	// 键名
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// 键值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s MapStringToStringEntity) String() string {
	return tea.Prettify(s)
}

func (s MapStringToStringEntity) GoString() string {
	return s.String()
}

func (s *MapStringToStringEntity) SetKey(v string) *MapStringToStringEntity {
	s.Key = &v
	return s
}

func (s *MapStringToStringEntity) SetValue(v string) *MapStringToStringEntity {
	s.Value = &v
	return s
}

// scope
type Scope struct {
	// cell identity
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty"`
	// region identity
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
	// tenant name
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
	// workspace_group
	WorkspaceGroup *string `json:"workspace_group,omitempty" xml:"workspace_group,omitempty"`
	// zone identity
	Zone *string `json:"zone,omitempty" xml:"zone,omitempty"`
	// cluster identity
	Cluster *string `json:"cluster,omitempty" xml:"cluster,omitempty"`
}

func (s Scope) String() string {
	return tea.Prettify(s)
}

func (s Scope) GoString() string {
	return s.String()
}

func (s *Scope) SetCell(v string) *Scope {
	s.Cell = &v
	return s
}

func (s *Scope) SetRegion(v string) *Scope {
	s.Region = &v
	return s
}

func (s *Scope) SetTenant(v string) *Scope {
	s.Tenant = &v
	return s
}

func (s *Scope) SetWorkspace(v string) *Scope {
	s.Workspace = &v
	return s
}

func (s *Scope) SetWorkspaceGroup(v string) *Scope {
	s.WorkspaceGroup = &v
	return s
}

func (s *Scope) SetZone(v string) *Scope {
	s.Zone = &v
	return s
}

func (s *Scope) SetCluster(v string) *Scope {
	s.Cluster = &v
	return s
}

// CloudPlatform
type CloudPlatform struct {
	// host
	Host *string `json:"host,omitempty" xml:"host,omitempty"`
	// login_name
	LoginName *string `json:"login_name,omitempty" xml:"login_name,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// password
	Password *string `json:"password,omitempty" xml:"password,omitempty"`
}

func (s CloudPlatform) String() string {
	return tea.Prettify(s)
}

func (s CloudPlatform) GoString() string {
	return s.String()
}

func (s *CloudPlatform) SetHost(v string) *CloudPlatform {
	s.Host = &v
	return s
}

func (s *CloudPlatform) SetLoginName(v string) *CloudPlatform {
	s.LoginName = &v
	return s
}

func (s *CloudPlatform) SetName(v string) *CloudPlatform {
	s.Name = &v
	return s
}

func (s *CloudPlatform) SetPassword(v string) *CloudPlatform {
	s.Password = &v
	return s
}

// 用户信息
type UserInfo struct {
	// ID
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 用户来源系统，例如BUC,LDAP
	SourceSystem *string `json:"source_system,omitempty" xml:"source_system,omitempty"`
	// 用户在源系统的id
	SourceUserId *string `json:"source_user_id,omitempty" xml:"source_user_id,omitempty"`
	// 登录名
	LoginName *string `json:"login_name,omitempty" xml:"login_name,omitempty"`
	// 真实名
	RealName *string `json:"real_name,omitempty" xml:"real_name,omitempty"`
	// 昵称
	NickName *string `json:"nick_name,omitempty" xml:"nick_name,omitempty"`
	// 客户ID
	CustomerId *string `json:"customer_id,omitempty" xml:"customer_id,omitempty"`
	// 是否超级管理员
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 用户状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 即时通信账号
	ImAccount *string `json:"im_account,omitempty" xml:"im_account,omitempty"`
	// 邮箱
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// 联系座机
	Phone *string `json:"phone,omitempty" xml:"phone,omitempty"`
	// 手机号
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty"`
	// 工号
	WorkNo *string `json:"work_no,omitempty" xml:"work_no,omitempty"`
	// 英文名
	EnName *string `json:"en_name,omitempty" xml:"en_name,omitempty"`
	// 性别
	Sex *string `json:"sex,omitempty" xml:"sex,omitempty"`
	// 国籍
	NationCountry *string `json:"nation_country,omitempty" xml:"nation_country,omitempty"`
	// 民族
	Nation *string `json:"nation,omitempty" xml:"nation,omitempty"`
	// 个人照片路径
	PersonalPhoto *string `json:"personal_photo,omitempty" xml:"personal_photo,omitempty"`
	// 上次登录时间.
	LastLogonTime *string `json:"last_logon_time,omitempty" xml:"last_logon_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 创建时间
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 修改时间
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s UserInfo) String() string {
	return tea.Prettify(s)
}

func (s UserInfo) GoString() string {
	return s.String()
}

func (s *UserInfo) SetId(v string) *UserInfo {
	s.Id = &v
	return s
}

func (s *UserInfo) SetSourceSystem(v string) *UserInfo {
	s.SourceSystem = &v
	return s
}

func (s *UserInfo) SetSourceUserId(v string) *UserInfo {
	s.SourceUserId = &v
	return s
}

func (s *UserInfo) SetLoginName(v string) *UserInfo {
	s.LoginName = &v
	return s
}

func (s *UserInfo) SetRealName(v string) *UserInfo {
	s.RealName = &v
	return s
}

func (s *UserInfo) SetNickName(v string) *UserInfo {
	s.NickName = &v
	return s
}

func (s *UserInfo) SetCustomerId(v string) *UserInfo {
	s.CustomerId = &v
	return s
}

func (s *UserInfo) SetType(v string) *UserInfo {
	s.Type = &v
	return s
}

func (s *UserInfo) SetStatus(v string) *UserInfo {
	s.Status = &v
	return s
}

func (s *UserInfo) SetImAccount(v string) *UserInfo {
	s.ImAccount = &v
	return s
}

func (s *UserInfo) SetEmail(v string) *UserInfo {
	s.Email = &v
	return s
}

func (s *UserInfo) SetPhone(v string) *UserInfo {
	s.Phone = &v
	return s
}

func (s *UserInfo) SetMobile(v string) *UserInfo {
	s.Mobile = &v
	return s
}

func (s *UserInfo) SetWorkNo(v string) *UserInfo {
	s.WorkNo = &v
	return s
}

func (s *UserInfo) SetEnName(v string) *UserInfo {
	s.EnName = &v
	return s
}

func (s *UserInfo) SetSex(v string) *UserInfo {
	s.Sex = &v
	return s
}

func (s *UserInfo) SetNationCountry(v string) *UserInfo {
	s.NationCountry = &v
	return s
}

func (s *UserInfo) SetNation(v string) *UserInfo {
	s.Nation = &v
	return s
}

func (s *UserInfo) SetPersonalPhoto(v string) *UserInfo {
	s.PersonalPhoto = &v
	return s
}

func (s *UserInfo) SetLastLogonTime(v string) *UserInfo {
	s.LastLogonTime = &v
	return s
}

func (s *UserInfo) SetGmtCreate(v string) *UserInfo {
	s.GmtCreate = &v
	return s
}

func (s *UserInfo) SetGmtModified(v string) *UserInfo {
	s.GmtModified = &v
	return s
}

// WorkspaceView
type WorkspaceView struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// region
	Region *RegionView `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// zones
	Zones []*WorkspaceZoneView `json:"zones,omitempty" xml:"zones,omitempty" require:"true" type:"Repeated"`
}

func (s WorkspaceView) String() string {
	return tea.Prettify(s)
}

func (s WorkspaceView) GoString() string {
	return s.String()
}

func (s *WorkspaceView) SetId(v string) *WorkspaceView {
	s.Id = &v
	return s
}

func (s *WorkspaceView) SetIdentity(v string) *WorkspaceView {
	s.Identity = &v
	return s
}

func (s *WorkspaceView) SetName(v string) *WorkspaceView {
	s.Name = &v
	return s
}

func (s *WorkspaceView) SetStatus(v string) *WorkspaceView {
	s.Status = &v
	return s
}

func (s *WorkspaceView) SetRegion(v *RegionView) *WorkspaceView {
	s.Region = v
	return s
}

func (s *WorkspaceView) SetZones(v []*WorkspaceZoneView) *WorkspaceView {
	s.Zones = v
	return s
}

// disk related computer infos
type DiskComputer struct {
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// iaas id
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s DiskComputer) String() string {
	return tea.Prettify(s)
}

func (s DiskComputer) GoString() string {
	return s.String()
}

func (s *DiskComputer) SetName(v string) *DiskComputer {
	s.Name = &v
	return s
}

func (s *DiskComputer) SetId(v string) *DiskComputer {
	s.Id = &v
	return s
}

func (s *DiskComputer) SetIaasId(v string) *DiskComputer {
	s.IaasId = &v
	return s
}

func (s *DiskComputer) SetStatus(v string) *DiskComputer {
	s.Status = &v
	return s
}

// db account
type DatabaseAccount struct {
	// database
	Database *Database `json:"database,omitempty" xml:"database,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// iaas_type
	IaasType *string `json:"iaas_type,omitempty" xml:"iaas_type,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 密码
	Password *string `json:"password,omitempty" xml:"password,omitempty" require:"true"`
	// 权限
	Privilege *string `json:"privilege,omitempty" xml:"privilege,omitempty" require:"true"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// utc_create
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// utc_modified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s DatabaseAccount) String() string {
	return tea.Prettify(s)
}

func (s DatabaseAccount) GoString() string {
	return s.String()
}

func (s *DatabaseAccount) SetDatabase(v *Database) *DatabaseAccount {
	s.Database = v
	return s
}

func (s *DatabaseAccount) SetDescription(v string) *DatabaseAccount {
	s.Description = &v
	return s
}

func (s *DatabaseAccount) SetIaasType(v string) *DatabaseAccount {
	s.IaasType = &v
	return s
}

func (s *DatabaseAccount) SetId(v string) *DatabaseAccount {
	s.Id = &v
	return s
}

func (s *DatabaseAccount) SetName(v string) *DatabaseAccount {
	s.Name = &v
	return s
}

func (s *DatabaseAccount) SetPassword(v string) *DatabaseAccount {
	s.Password = &v
	return s
}

func (s *DatabaseAccount) SetPrivilege(v string) *DatabaseAccount {
	s.Privilege = &v
	return s
}

func (s *DatabaseAccount) SetStatus(v string) *DatabaseAccount {
	s.Status = &v
	return s
}

func (s *DatabaseAccount) SetUtcCreate(v string) *DatabaseAccount {
	s.UtcCreate = &v
	return s
}

func (s *DatabaseAccount) SetUtcModified(v string) *DatabaseAccount {
	s.UtcModified = &v
	return s
}

// Zone视图
type ZoneView struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// displayName
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
}

func (s ZoneView) String() string {
	return tea.Prettify(s)
}

func (s ZoneView) GoString() string {
	return s.String()
}

func (s *ZoneView) SetId(v string) *ZoneView {
	s.Id = &v
	return s
}

func (s *ZoneView) SetName(v string) *ZoneView {
	s.Name = &v
	return s
}

func (s *ZoneView) SetDisplayName(v string) *ZoneView {
	s.DisplayName = &v
	return s
}

// Cloud
type Cloud struct {
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// platforms
	Platforms []*CloudPlatform `json:"platforms,omitempty" xml:"platforms,omitempty" type:"Repeated"`
}

func (s Cloud) String() string {
	return tea.Prettify(s)
}

func (s Cloud) GoString() string {
	return s.String()
}

func (s *Cloud) SetId(v int64) *Cloud {
	s.Id = &v
	return s
}

func (s *Cloud) SetIdentity(v string) *Cloud {
	s.Identity = &v
	return s
}

func (s *Cloud) SetName(v string) *Cloud {
	s.Name = &v
	return s
}

func (s *Cloud) SetPlatforms(v []*CloudPlatform) *Cloud {
	s.Platforms = v
	return s
}

// 代码提交
type CodeCommit struct {
	// 作者
	Author *string `json:"author,omitempty" xml:"author,omitempty"`
	// 分支
	Branch *string `json:"branch,omitempty" xml:"branch,omitempty"`
	// 代码版本
	CodeVersion *string `json:"code_version,omitempty" xml:"code_version,omitempty"`
	// 时间
	Date *string `json:"date,omitempty" xml:"date,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 消息
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty"`
	// 仓库名称
	RepoName *string `json:"repo_name,omitempty" xml:"repo_name,omitempty"`
	// 创建时间
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 修改时间
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s CodeCommit) String() string {
	return tea.Prettify(s)
}

func (s CodeCommit) GoString() string {
	return s.String()
}

func (s *CodeCommit) SetAuthor(v string) *CodeCommit {
	s.Author = &v
	return s
}

func (s *CodeCommit) SetBranch(v string) *CodeCommit {
	s.Branch = &v
	return s
}

func (s *CodeCommit) SetCodeVersion(v string) *CodeCommit {
	s.CodeVersion = &v
	return s
}

func (s *CodeCommit) SetDate(v string) *CodeCommit {
	s.Date = &v
	return s
}

func (s *CodeCommit) SetId(v string) *CodeCommit {
	s.Id = &v
	return s
}

func (s *CodeCommit) SetMsg(v string) *CodeCommit {
	s.Msg = &v
	return s
}

func (s *CodeCommit) SetRepoName(v string) *CodeCommit {
	s.RepoName = &v
	return s
}

func (s *CodeCommit) SetUtcCreate(v string) *CodeCommit {
	s.UtcCreate = &v
	return s
}

func (s *CodeCommit) SetUtcModified(v string) *CodeCommit {
	s.UtcModified = &v
	return s
}

// 解决DbSchema结构嵌套用的，其他人不要用这个，用grant
type DbSchemaGrant struct {
	// privilege
	Privilege *string `json:"privilege,omitempty" xml:"privilege,omitempty" require:"true"`
	// account
	Account *DatabaseAccount `json:"account,omitempty" xml:"account,omitempty"`
}

func (s DbSchemaGrant) String() string {
	return tea.Prettify(s)
}

func (s DbSchemaGrant) GoString() string {
	return s.String()
}

func (s *DbSchemaGrant) SetPrivilege(v string) *DbSchemaGrant {
	s.Privilege = &v
	return s
}

func (s *DbSchemaGrant) SetAccount(v *DatabaseAccount) *DbSchemaGrant {
	s.Account = v
	return s
}

// Sofa arche type
type ScmSofaArchetype struct {
	// 用户创建archetype必须要的参数
	GenerateCode *bool `json:"generate_code,omitempty" xml:"generate_code,omitempty"`
	// Maven代码框架使用 groupId
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty"`
	// Maven代码框架使用 artifactId
	ArtifactId *string `json:"artifact_id,omitempty" xml:"artifact_id,omitempty" require:"true"`
	// Maven代码框架使用 codePackage
	CodePackage *string `json:"code_package,omitempty" xml:"code_package,omitempty"`
	// Sofa代码框架使用 projectType
	ProjectType *string `json:"project_type,omitempty" xml:"project_type,omitempty"`
	// Sofa代码框架使用 版本号
	Version *string `json:"version,omitempty" xml:"version,omitempty" require:"true"`
	// Sofa代码框架使用 编码方式
	Encoding *string `json:"encoding,omitempty" xml:"encoding,omitempty"`
	// 是否使用私有maven
	UsePrivateRepo *bool `json:"use_private_repo,omitempty" xml:"use_private_repo,omitempty"`
	// 提供给快速研发平台使用，格式为JSON字符串
	MetaData *string `json:"meta_data,omitempty" xml:"meta_data,omitempty"`
}

func (s ScmSofaArchetype) String() string {
	return tea.Prettify(s)
}

func (s ScmSofaArchetype) GoString() string {
	return s.String()
}

func (s *ScmSofaArchetype) SetGenerateCode(v bool) *ScmSofaArchetype {
	s.GenerateCode = &v
	return s
}

func (s *ScmSofaArchetype) SetGroupId(v string) *ScmSofaArchetype {
	s.GroupId = &v
	return s
}

func (s *ScmSofaArchetype) SetArtifactId(v string) *ScmSofaArchetype {
	s.ArtifactId = &v
	return s
}

func (s *ScmSofaArchetype) SetCodePackage(v string) *ScmSofaArchetype {
	s.CodePackage = &v
	return s
}

func (s *ScmSofaArchetype) SetProjectType(v string) *ScmSofaArchetype {
	s.ProjectType = &v
	return s
}

func (s *ScmSofaArchetype) SetVersion(v string) *ScmSofaArchetype {
	s.Version = &v
	return s
}

func (s *ScmSofaArchetype) SetEncoding(v string) *ScmSofaArchetype {
	s.Encoding = &v
	return s
}

func (s *ScmSofaArchetype) SetUsePrivateRepo(v bool) *ScmSofaArchetype {
	s.UsePrivateRepo = &v
	return s
}

func (s *ScmSofaArchetype) SetMetaData(v string) *ScmSofaArchetype {
	s.MetaData = &v
	return s
}

// 应用生命周期
type AppLifeCycle struct {
	// ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 应用ID
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// 工作空间ID
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// 应用状态
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// 最近运维单号
	LastOpsorderId *string `json:"last_opsorder_id,omitempty" xml:"last_opsorder_id,omitempty"`
	// 上次发布版本
	LastDeployVersion *string `json:"last_deploy_version,omitempty" xml:"last_deploy_version,omitempty" require:"true"`
	// 上次发布时间
	LastDeployTime *string `json:"last_deploy_time,omitempty" xml:"last_deploy_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 上线时间
	OnlineTime *string `json:"online_time,omitempty" xml:"online_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 创建时间
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 最近修改时间
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s AppLifeCycle) String() string {
	return tea.Prettify(s)
}

func (s AppLifeCycle) GoString() string {
	return s.String()
}

func (s *AppLifeCycle) SetId(v string) *AppLifeCycle {
	s.Id = &v
	return s
}

func (s *AppLifeCycle) SetAppId(v string) *AppLifeCycle {
	s.AppId = &v
	return s
}

func (s *AppLifeCycle) SetWorkspaceId(v string) *AppLifeCycle {
	s.WorkspaceId = &v
	return s
}

func (s *AppLifeCycle) SetState(v string) *AppLifeCycle {
	s.State = &v
	return s
}

func (s *AppLifeCycle) SetLastOpsorderId(v string) *AppLifeCycle {
	s.LastOpsorderId = &v
	return s
}

func (s *AppLifeCycle) SetLastDeployVersion(v string) *AppLifeCycle {
	s.LastDeployVersion = &v
	return s
}

func (s *AppLifeCycle) SetLastDeployTime(v string) *AppLifeCycle {
	s.LastDeployTime = &v
	return s
}

func (s *AppLifeCycle) SetOnlineTime(v string) *AppLifeCycle {
	s.OnlineTime = &v
	return s
}

func (s *AppLifeCycle) SetGmtCreate(v string) *AppLifeCycle {
	s.GmtCreate = &v
	return s
}

func (s *AppLifeCycle) SetGmtModified(v string) *AppLifeCycle {
	s.GmtModified = &v
	return s
}

// LoadBalancer
type LoadBalancer struct {
	// app_id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// app_service_ids
	AppServiceIds []*string `json:"app_service_ids,omitempty" xml:"app_service_ids,omitempty" type:"Repeated"`
	// assigned_app_ids
	AssignedAppIds []*string `json:"assigned_app_ids,omitempty" xml:"assigned_app_ids,omitempty" type:"Repeated"`
	// assigned_app_service_ids
	AssignedAppServiceIds []*string `json:"assigned_app_service_ids,omitempty" xml:"assigned_app_service_ids,omitempty" type:"Repeated"`
	// auto_renew
	AutoRenew *bool `json:"auto_renew,omitempty" xml:"auto_renew,omitempty"`
	// auto_renew_period
	AutoRenewPeriod *int64 `json:"auto_renew_period,omitempty" xml:"auto_renew_period,omitempty"`
	// bandwidth
	Bandwidth *int64 `json:"bandwidth,omitempty" xml:"bandwidth,omitempty"`
	// cluster_id
	ClusterId *string `json:"cluster_id,omitempty" xml:"cluster_id,omitempty"`
	// cluster_mode
	ClusterMode *bool `json:"cluster_mode,omitempty" xml:"cluster_mode,omitempty"`
	// domains
	Domains []*string `json:"domains,omitempty" xml:"domains,omitempty" type:"Repeated"`
	// iaas_id
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// iaas_type
	IaasType *string `json:"iaas_type,omitempty" xml:"iaas_type,omitempty"`
	// lb id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// internet_charge_type
	InternetChargeType *string `json:"internet_charge_type,omitempty" xml:"internet_charge_type,omitempty"`
	// lb名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// network_type
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty"`
	// provider_id
	ProviderId *string `json:"provider_id,omitempty" xml:"provider_id,omitempty"`
	// regionId
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// scope
	Scope *Scope `json:"scope,omitempty" xml:"scope,omitempty"`
	// share_mode
	ShareMode *bool `json:"share_mode,omitempty" xml:"share_mode,omitempty"`
	// lb状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// utc_create
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// utc_modified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// vip_addresses
	VipAddresses []*string `json:"vip_addresses,omitempty" xml:"vip_addresses,omitempty" type:"Repeated"`
	// vip_address_type
	VipAddressType *string `json:"vip_address_type,omitempty" xml:"vip_address_type,omitempty"`
	// vip_type
	VipType *string `json:"vip_type,omitempty" xml:"vip_type,omitempty"`
	// vpc_id
	VpcId *string `json:"vpc_id,omitempty" xml:"vpc_id,omitempty"`
	// v_switch_iaas_id
	VSwitchIaasId *string `json:"v_switch_iaas_id,omitempty" xml:"v_switch_iaas_id,omitempty"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// zone_id
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty"`
	// options，扩展字段
	Options []*MapStringToStringEntity `json:"options,omitempty" xml:"options,omitempty" type:"Repeated"`
	// load_balancer_spec
	LoadBalancerSpec *string `json:"load_balancer_spec,omitempty" xml:"load_balancer_spec,omitempty"`
}

func (s LoadBalancer) String() string {
	return tea.Prettify(s)
}

func (s LoadBalancer) GoString() string {
	return s.String()
}

func (s *LoadBalancer) SetAppId(v string) *LoadBalancer {
	s.AppId = &v
	return s
}

func (s *LoadBalancer) SetAppServiceIds(v []*string) *LoadBalancer {
	s.AppServiceIds = v
	return s
}

func (s *LoadBalancer) SetAssignedAppIds(v []*string) *LoadBalancer {
	s.AssignedAppIds = v
	return s
}

func (s *LoadBalancer) SetAssignedAppServiceIds(v []*string) *LoadBalancer {
	s.AssignedAppServiceIds = v
	return s
}

func (s *LoadBalancer) SetAutoRenew(v bool) *LoadBalancer {
	s.AutoRenew = &v
	return s
}

func (s *LoadBalancer) SetAutoRenewPeriod(v int64) *LoadBalancer {
	s.AutoRenewPeriod = &v
	return s
}

func (s *LoadBalancer) SetBandwidth(v int64) *LoadBalancer {
	s.Bandwidth = &v
	return s
}

func (s *LoadBalancer) SetClusterId(v string) *LoadBalancer {
	s.ClusterId = &v
	return s
}

func (s *LoadBalancer) SetClusterMode(v bool) *LoadBalancer {
	s.ClusterMode = &v
	return s
}

func (s *LoadBalancer) SetDomains(v []*string) *LoadBalancer {
	s.Domains = v
	return s
}

func (s *LoadBalancer) SetIaasId(v string) *LoadBalancer {
	s.IaasId = &v
	return s
}

func (s *LoadBalancer) SetIaasType(v string) *LoadBalancer {
	s.IaasType = &v
	return s
}

func (s *LoadBalancer) SetId(v string) *LoadBalancer {
	s.Id = &v
	return s
}

func (s *LoadBalancer) SetInternetChargeType(v string) *LoadBalancer {
	s.InternetChargeType = &v
	return s
}

func (s *LoadBalancer) SetName(v string) *LoadBalancer {
	s.Name = &v
	return s
}

func (s *LoadBalancer) SetNetworkType(v string) *LoadBalancer {
	s.NetworkType = &v
	return s
}

func (s *LoadBalancer) SetProviderId(v string) *LoadBalancer {
	s.ProviderId = &v
	return s
}

func (s *LoadBalancer) SetRegionId(v string) *LoadBalancer {
	s.RegionId = &v
	return s
}

func (s *LoadBalancer) SetScope(v *Scope) *LoadBalancer {
	s.Scope = v
	return s
}

func (s *LoadBalancer) SetShareMode(v bool) *LoadBalancer {
	s.ShareMode = &v
	return s
}

func (s *LoadBalancer) SetStatus(v string) *LoadBalancer {
	s.Status = &v
	return s
}

func (s *LoadBalancer) SetUtcCreate(v string) *LoadBalancer {
	s.UtcCreate = &v
	return s
}

func (s *LoadBalancer) SetUtcModified(v string) *LoadBalancer {
	s.UtcModified = &v
	return s
}

func (s *LoadBalancer) SetVipAddresses(v []*string) *LoadBalancer {
	s.VipAddresses = v
	return s
}

func (s *LoadBalancer) SetVipAddressType(v string) *LoadBalancer {
	s.VipAddressType = &v
	return s
}

func (s *LoadBalancer) SetVipType(v string) *LoadBalancer {
	s.VipType = &v
	return s
}

func (s *LoadBalancer) SetVpcId(v string) *LoadBalancer {
	s.VpcId = &v
	return s
}

func (s *LoadBalancer) SetVSwitchIaasId(v string) *LoadBalancer {
	s.VSwitchIaasId = &v
	return s
}

func (s *LoadBalancer) SetWorkspaceId(v string) *LoadBalancer {
	s.WorkspaceId = &v
	return s
}

func (s *LoadBalancer) SetZoneId(v string) *LoadBalancer {
	s.ZoneId = &v
	return s
}

func (s *LoadBalancer) SetOptions(v []*MapStringToStringEntity) *LoadBalancer {
	s.Options = v
	return s
}

func (s *LoadBalancer) SetLoadBalancerSpec(v string) *LoadBalancer {
	s.LoadBalancerSpec = &v
	return s
}

// 应用负责人
type AppOwner struct {
	// 研发负责人
	DevOwner *UserInfo `json:"dev_owner,omitempty" xml:"dev_owner,omitempty"`
	// backup开发人员
	BackupDevOwners []*UserInfo `json:"backup_dev_owners,omitempty" xml:"backup_dev_owners,omitempty" type:"Repeated"`
	// 测试负责人
	TestOwner *UserInfo `json:"test_owner,omitempty" xml:"test_owner,omitempty"`
	// 备用测试人员
	BackupTestOwners []*UserInfo `json:"backup_test_owners,omitempty" xml:"backup_test_owners,omitempty" type:"Repeated"`
	// 运维负责人
	Ops *UserInfo `json:"ops,omitempty" xml:"ops,omitempty"`
	// 备用SRE人员
	BackupOpses []*UserInfo `json:"backup_opses,omitempty" xml:"backup_opses,omitempty" type:"Repeated"`
	// 开发architect负责人
	DevArchitect *UserInfo `json:"dev_architect,omitempty" xml:"dev_architect,omitempty"`
	// 备用Architects联系人
	BackupDevArchitects []*UserInfo `json:"backup_dev_architects,omitempty" xml:"backup_dev_architects,omitempty" type:"Repeated"`
	// 测试architect
	TestArchitect *UserInfo `json:"test_architect,omitempty" xml:"test_architect,omitempty"`
	// 备用测试architects
	BackupTestArchitects []*UserInfo `json:"backup_test_architects,omitempty" xml:"backup_test_architects,omitempty" type:"Repeated"`
}

func (s AppOwner) String() string {
	return tea.Prettify(s)
}

func (s AppOwner) GoString() string {
	return s.String()
}

func (s *AppOwner) SetDevOwner(v *UserInfo) *AppOwner {
	s.DevOwner = v
	return s
}

func (s *AppOwner) SetBackupDevOwners(v []*UserInfo) *AppOwner {
	s.BackupDevOwners = v
	return s
}

func (s *AppOwner) SetTestOwner(v *UserInfo) *AppOwner {
	s.TestOwner = v
	return s
}

func (s *AppOwner) SetBackupTestOwners(v []*UserInfo) *AppOwner {
	s.BackupTestOwners = v
	return s
}

func (s *AppOwner) SetOps(v *UserInfo) *AppOwner {
	s.Ops = v
	return s
}

func (s *AppOwner) SetBackupOpses(v []*UserInfo) *AppOwner {
	s.BackupOpses = v
	return s
}

func (s *AppOwner) SetDevArchitect(v *UserInfo) *AppOwner {
	s.DevArchitect = v
	return s
}

func (s *AppOwner) SetBackupDevArchitects(v []*UserInfo) *AppOwner {
	s.BackupDevArchitects = v
	return s
}

func (s *AppOwner) SetTestArchitect(v *UserInfo) *AppOwner {
	s.TestArchitect = v
	return s
}

func (s *AppOwner) SetBackupTestArchitects(v []*UserInfo) *AppOwner {
	s.BackupTestArchitects = v
	return s
}

// 代码仓库
type CodeRepository struct {
	// 代码仓库ID
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// VCS源代码管理系统
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 负责人
	Owner *string `json:"owner,omitempty" xml:"owner,omitempty"`
	// 源代码地址
	SourceLocation *string `json:"source_location,omitempty" xml:"source_location,omitempty"`
	// 被SCM管理的远程仓库ID
	RemoteRepoId *string `json:"remote_repo_id,omitempty" xml:"remote_repo_id,omitempty"`
	// 流程标记id(可选参数)
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
	// 是否初始化目录(可选参数，目前金融云传与不传都不初始化)
	IsInitStandardPath *bool `json:"is_init_standard_path,omitempty" xml:"is_init_standard_path,omitempty"`
	// 代码库是否可复用(默认为不复用 0)
	RepoReuse *string `json:"repo_reuse,omitempty" xml:"repo_reuse,omitempty"`
	// 父代码库名称(reposReuse为0时可以不传)
	ParentReposName *string `json:"parent_repos_name,omitempty" xml:"parent_repos_name,omitempty"`
	// 代码仓库状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 扩展参数，JSON字符串
	ExtraParams *string `json:"extra_params,omitempty" xml:"extra_params,omitempty"`
	// 是否使用已有仓库
	UseExist *bool `json:"use_exist,omitempty" xml:"use_exist,omitempty"`
	// 分组名称
	GroupName *string `json:"group_name,omitempty" xml:"group_name,omitempty"`
}

func (s CodeRepository) String() string {
	return tea.Prettify(s)
}

func (s CodeRepository) GoString() string {
	return s.String()
}

func (s *CodeRepository) SetId(v string) *CodeRepository {
	s.Id = &v
	return s
}

func (s *CodeRepository) SetName(v string) *CodeRepository {
	s.Name = &v
	return s
}

func (s *CodeRepository) SetType(v string) *CodeRepository {
	s.Type = &v
	return s
}

func (s *CodeRepository) SetOwner(v string) *CodeRepository {
	s.Owner = &v
	return s
}

func (s *CodeRepository) SetSourceLocation(v string) *CodeRepository {
	s.SourceLocation = &v
	return s
}

func (s *CodeRepository) SetRemoteRepoId(v string) *CodeRepository {
	s.RemoteRepoId = &v
	return s
}

func (s *CodeRepository) SetInstanceId(v string) *CodeRepository {
	s.InstanceId = &v
	return s
}

func (s *CodeRepository) SetIsInitStandardPath(v bool) *CodeRepository {
	s.IsInitStandardPath = &v
	return s
}

func (s *CodeRepository) SetRepoReuse(v string) *CodeRepository {
	s.RepoReuse = &v
	return s
}

func (s *CodeRepository) SetParentReposName(v string) *CodeRepository {
	s.ParentReposName = &v
	return s
}

func (s *CodeRepository) SetStatus(v string) *CodeRepository {
	s.Status = &v
	return s
}

func (s *CodeRepository) SetExtraParams(v string) *CodeRepository {
	s.ExtraParams = &v
	return s
}

func (s *CodeRepository) SetUseExist(v bool) *CodeRepository {
	s.UseExist = &v
	return s
}

func (s *CodeRepository) SetGroupName(v string) *CodeRepository {
	s.GroupName = &v
	return s
}

// disk
type Disk struct {
	// ssd, cloud_efficiency
	Category *string `json:"category,omitempty" xml:"category,omitempty"`
	// disk related computer info
	Computer *DiskComputer `json:"computer,omitempty" xml:"computer,omitempty"`
	// 是否同时删除自动快照
	DeleteAutoSnapshot *bool `json:"delete_auto_snapshot,omitempty" xml:"delete_auto_snapshot,omitempty"`
	// 磁盘是否随container一起释放
	DeleteWithComputer *bool `json:"delete_with_computer,omitempty" xml:"delete_with_computer,omitempty"`
	// device info
	Device *string `json:"device,omitempty" xml:"device,omitempty"`
	// 磁盘是否执行自动快照策略
	EnableAutoSnapshot *bool `json:"enable_auto_snapshot,omitempty" xml:"enable_auto_snapshot,omitempty"`
	// iaasId
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 创建磁盘的镜像
	ImageId *string `json:"image_id,omitempty" xml:"image_id,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 磁盘是否可卸载
	Portable *bool `json:"portable,omitempty" xml:"portable,omitempty"`
	// providerId
	ProviderId *string `json:"provider_id,omitempty" xml:"provider_id,omitempty"`
	// regionId
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// disk size
	Size *int64 `json:"size,omitempty" xml:"size,omitempty"`
	// disk status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// tenantId
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// SYSTEM, DATA
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// utcCreate
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// utcModified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// workspaceId
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// zoneId
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty"`
}

func (s Disk) String() string {
	return tea.Prettify(s)
}

func (s Disk) GoString() string {
	return s.String()
}

func (s *Disk) SetCategory(v string) *Disk {
	s.Category = &v
	return s
}

func (s *Disk) SetComputer(v *DiskComputer) *Disk {
	s.Computer = v
	return s
}

func (s *Disk) SetDeleteAutoSnapshot(v bool) *Disk {
	s.DeleteAutoSnapshot = &v
	return s
}

func (s *Disk) SetDeleteWithComputer(v bool) *Disk {
	s.DeleteWithComputer = &v
	return s
}

func (s *Disk) SetDevice(v string) *Disk {
	s.Device = &v
	return s
}

func (s *Disk) SetEnableAutoSnapshot(v bool) *Disk {
	s.EnableAutoSnapshot = &v
	return s
}

func (s *Disk) SetIaasId(v string) *Disk {
	s.IaasId = &v
	return s
}

func (s *Disk) SetId(v string) *Disk {
	s.Id = &v
	return s
}

func (s *Disk) SetImageId(v string) *Disk {
	s.ImageId = &v
	return s
}

func (s *Disk) SetName(v string) *Disk {
	s.Name = &v
	return s
}

func (s *Disk) SetPortable(v bool) *Disk {
	s.Portable = &v
	return s
}

func (s *Disk) SetProviderId(v string) *Disk {
	s.ProviderId = &v
	return s
}

func (s *Disk) SetRegionId(v string) *Disk {
	s.RegionId = &v
	return s
}

func (s *Disk) SetSize(v int64) *Disk {
	s.Size = &v
	return s
}

func (s *Disk) SetStatus(v string) *Disk {
	s.Status = &v
	return s
}

func (s *Disk) SetTenantId(v string) *Disk {
	s.TenantId = &v
	return s
}

func (s *Disk) SetType(v string) *Disk {
	s.Type = &v
	return s
}

func (s *Disk) SetUtcCreate(v string) *Disk {
	s.UtcCreate = &v
	return s
}

func (s *Disk) SetUtcModified(v string) *Disk {
	s.UtcModified = &v
	return s
}

func (s *Disk) SetWorkspaceId(v string) *Disk {
	s.WorkspaceId = &v
	return s
}

func (s *Disk) SetZoneId(v string) *Disk {
	s.ZoneId = &v
	return s
}

// workspace zone
type WorkspaceZoneDto struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// zone_id
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty" require:"true"`
	// zone name
	ZoneName *string `json:"zone_name,omitempty" xml:"zone_name,omitempty"`
}

func (s WorkspaceZoneDto) String() string {
	return tea.Prettify(s)
}

func (s WorkspaceZoneDto) GoString() string {
	return s.String()
}

func (s *WorkspaceZoneDto) SetId(v string) *WorkspaceZoneDto {
	s.Id = &v
	return s
}

func (s *WorkspaceZoneDto) SetWorkspaceId(v string) *WorkspaceZoneDto {
	s.WorkspaceId = &v
	return s
}

func (s *WorkspaceZoneDto) SetZoneId(v string) *WorkspaceZoneDto {
	s.ZoneId = &v
	return s
}

func (s *WorkspaceZoneDto) SetZoneName(v string) *WorkspaceZoneDto {
	s.ZoneName = &v
	return s
}

// WorkspaceGroupView
type WorkspaceGroupView struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// displayName
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty" require:"true"`
	// tenantId
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// properties
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty" require:"true"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// workspaces
	Workspaces []*WorkspaceView `json:"workspaces,omitempty" xml:"workspaces,omitempty" require:"true" type:"Repeated"`
}

func (s WorkspaceGroupView) String() string {
	return tea.Prettify(s)
}

func (s WorkspaceGroupView) GoString() string {
	return s.String()
}

func (s *WorkspaceGroupView) SetId(v string) *WorkspaceGroupView {
	s.Id = &v
	return s
}

func (s *WorkspaceGroupView) SetName(v string) *WorkspaceGroupView {
	s.Name = &v
	return s
}

func (s *WorkspaceGroupView) SetDisplayName(v string) *WorkspaceGroupView {
	s.DisplayName = &v
	return s
}

func (s *WorkspaceGroupView) SetTenantId(v string) *WorkspaceGroupView {
	s.TenantId = &v
	return s
}

func (s *WorkspaceGroupView) SetProperties(v string) *WorkspaceGroupView {
	s.Properties = &v
	return s
}

func (s *WorkspaceGroupView) SetStatus(v string) *WorkspaceGroupView {
	s.Status = &v
	return s
}

func (s *WorkspaceGroupView) SetWorkspaces(v []*WorkspaceView) *WorkspaceGroupView {
	s.Workspaces = v
	return s
}

// 用于Task的嵌套Request，其他API请直接使用Request
type TaskRequest struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// operator
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
	// token
	Token *string `json:"token,omitempty" xml:"token,omitempty"`
	// type
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s TaskRequest) String() string {
	return tea.Prettify(s)
}

func (s TaskRequest) GoString() string {
	return s.String()
}

func (s *TaskRequest) SetId(v string) *TaskRequest {
	s.Id = &v
	return s
}

func (s *TaskRequest) SetOperator(v string) *TaskRequest {
	s.Operator = &v
	return s
}

func (s *TaskRequest) SetToken(v string) *TaskRequest {
	s.Token = &v
	return s
}

func (s *TaskRequest) SetType(v string) *TaskRequest {
	s.Type = &v
	return s
}

func (s *TaskRequest) SetStatus(v string) *TaskRequest {
	s.Status = &v
	return s
}

// 应用等级
type AppLevel struct {
	// ID
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 应用等级名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 创建者
	CreatorId *string `json:"creator_id,omitempty" xml:"creator_id,omitempty"`
	// 租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// 创建时间
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 最近修改时间
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s AppLevel) String() string {
	return tea.Prettify(s)
}

func (s AppLevel) GoString() string {
	return s.String()
}

func (s *AppLevel) SetId(v string) *AppLevel {
	s.Id = &v
	return s
}

func (s *AppLevel) SetName(v string) *AppLevel {
	s.Name = &v
	return s
}

func (s *AppLevel) SetCreatorId(v string) *AppLevel {
	s.CreatorId = &v
	return s
}

func (s *AppLevel) SetTenantId(v string) *AppLevel {
	s.TenantId = &v
	return s
}

func (s *AppLevel) SetUtcCreate(v string) *AppLevel {
	s.UtcCreate = &v
	return s
}

func (s *AppLevel) SetUtcModified(v string) *AppLevel {
	s.UtcModified = &v
	return s
}

// 路由的下一跳详细信息。
type NextHopItem struct {
	//
	// 下一跳的类型。
	//
	// Instance：ECS实例。
	// HaVip：高可用虚拟IP。
	// VpnGateway：VPN网关。
	// NatGateway：NAT网关。
	// NetworkInterface：辅助弹性网卡。
	// RouterInterface：路由器接口。
	// IPv6Gateway：IPv6网关。
	NextHopType *string `json:"next_hop_type,omitempty" xml:"next_hop_type,omitempty"`
	// 下一跳实例的ID。
	NextHopId *string `json:"next_hop_id,omitempty" xml:"next_hop_id,omitempty"`
	// 是否启用下一跳。
	//
	// 0：不启用。
	// 1：启用。
	Enable *int64 `json:"enable,omitempty" xml:"enable,omitempty"`
	// 下一跳的路由权重。
	Weight *int64 `json:"weight,omitempty" xml:"weight,omitempty"`
}

func (s NextHopItem) String() string {
	return tea.Prettify(s)
}

func (s NextHopItem) GoString() string {
	return s.String()
}

func (s *NextHopItem) SetNextHopType(v string) *NextHopItem {
	s.NextHopType = &v
	return s
}

func (s *NextHopItem) SetNextHopId(v string) *NextHopItem {
	s.NextHopId = &v
	return s
}

func (s *NextHopItem) SetEnable(v int64) *NextHopItem {
	s.Enable = &v
	return s
}

func (s *NextHopItem) SetWeight(v int64) *NextHopItem {
	s.Weight = &v
	return s
}

// 应用扩展信息
type AppExtraInfo struct {
	// ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 值
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
	// 描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 模板ID
	TemplateId *string `json:"template_id,omitempty" xml:"template_id,omitempty"`
	// 模板类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 创建时间
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 最近修改时间
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 应用扩展信息ID
	AppExtrainfoId *string `json:"app_extrainfo_id,omitempty" xml:"app_extrainfo_id,omitempty"`
	// 应用ID
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// 模板数据ID
	TemplateDataId *string `json:"template_data_id,omitempty" xml:"template_data_id,omitempty"`
}

func (s AppExtraInfo) String() string {
	return tea.Prettify(s)
}

func (s AppExtraInfo) GoString() string {
	return s.String()
}

func (s *AppExtraInfo) SetId(v string) *AppExtraInfo {
	s.Id = &v
	return s
}

func (s *AppExtraInfo) SetName(v string) *AppExtraInfo {
	s.Name = &v
	return s
}

func (s *AppExtraInfo) SetValue(v string) *AppExtraInfo {
	s.Value = &v
	return s
}

func (s *AppExtraInfo) SetDescription(v string) *AppExtraInfo {
	s.Description = &v
	return s
}

func (s *AppExtraInfo) SetTemplateId(v string) *AppExtraInfo {
	s.TemplateId = &v
	return s
}

func (s *AppExtraInfo) SetType(v string) *AppExtraInfo {
	s.Type = &v
	return s
}

func (s *AppExtraInfo) SetUtcCreate(v string) *AppExtraInfo {
	s.UtcCreate = &v
	return s
}

func (s *AppExtraInfo) SetUtcModified(v string) *AppExtraInfo {
	s.UtcModified = &v
	return s
}

func (s *AppExtraInfo) SetAppExtrainfoId(v string) *AppExtraInfo {
	s.AppExtrainfoId = &v
	return s
}

func (s *AppExtraInfo) SetAppId(v string) *AppExtraInfo {
	s.AppId = &v
	return s
}

func (s *AppExtraInfo) SetTemplateDataId(v string) *AppExtraInfo {
	s.TemplateDataId = &v
	return s
}

// 阿里云日志服务(SLS)-脱敏功能配置
type SLSConfigSensitiveKey struct {
	// 是否替换该字段中所有的敏感内容。建议设置为true
	All *bool `json:"all,omitempty" xml:"all,omitempty" require:"true"`
	// 当type设置为const时必须填写
	ConstValue *string `json:"const_value,omitempty" xml:"const_value,omitempty"`
	// 日志Key名称
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// 敏感内容的前缀
	RegexBegin *string `json:"regex_begin,omitempty" xml:"regex_begin,omitempty" require:"true"`
	// 敏感内容正则表达式。
	RegexContent *string `json:"regex_content,omitempty" xml:"regex_content,omitempty" require:"true"`
	// 脱敏方式，取值为const、md5。
	// 若取值为const，则将敏感内容替换成const字段取值内容。
	// 若取值为md5，则将敏感内容替换为其对应的MD5值。
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s SLSConfigSensitiveKey) String() string {
	return tea.Prettify(s)
}

func (s SLSConfigSensitiveKey) GoString() string {
	return s.String()
}

func (s *SLSConfigSensitiveKey) SetAll(v bool) *SLSConfigSensitiveKey {
	s.All = &v
	return s
}

func (s *SLSConfigSensitiveKey) SetConstValue(v string) *SLSConfigSensitiveKey {
	s.ConstValue = &v
	return s
}

func (s *SLSConfigSensitiveKey) SetKey(v string) *SLSConfigSensitiveKey {
	s.Key = &v
	return s
}

func (s *SLSConfigSensitiveKey) SetRegexBegin(v string) *SLSConfigSensitiveKey {
	s.RegexBegin = &v
	return s
}

func (s *SLSConfigSensitiveKey) SetRegexContent(v string) *SLSConfigSensitiveKey {
	s.RegexContent = &v
	return s
}

func (s *SLSConfigSensitiveKey) SetType(v string) *SLSConfigSensitiveKey {
	s.Type = &v
	return s
}

// JoinedSecurityGroupVO
type JoinedSecurityGroupVO struct {
	// iaas id
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// workspace id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// workspace name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty"`
}

func (s JoinedSecurityGroupVO) String() string {
	return tea.Prettify(s)
}

func (s JoinedSecurityGroupVO) GoString() string {
	return s.String()
}

func (s *JoinedSecurityGroupVO) SetIaasId(v string) *JoinedSecurityGroupVO {
	s.IaasId = &v
	return s
}

func (s *JoinedSecurityGroupVO) SetName(v string) *JoinedSecurityGroupVO {
	s.Name = &v
	return s
}

func (s *JoinedSecurityGroupVO) SetWorkspaceId(v string) *JoinedSecurityGroupVO {
	s.WorkspaceId = &v
	return s
}

func (s *JoinedSecurityGroupVO) SetWorkspaceName(v string) *JoinedSecurityGroupVO {
	s.WorkspaceName = &v
	return s
}

// 分页查询基类
type PaginationQuery struct {
	// 当前页数
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// isLocaleEnabled
	IsLocaleEnabled *bool `json:"is_locale_enabled,omitempty" xml:"is_locale_enabled,omitempty"`
	// local
	Local *string `json:"local,omitempty" xml:"local,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// paging
	Paging *bool `json:"paging,omitempty" xml:"paging,omitempty"`
	// 查询类型
	QueryType *string `json:"query_type,omitempty" xml:"query_type,omitempty"`
	// search
	Search *bool `json:"search,omitempty" xml:"search,omitempty"`
	// 排序关键字列表
	Orders []*string `json:"orders,omitempty" xml:"orders,omitempty" type:"Repeated"`
}

func (s PaginationQuery) String() string {
	return tea.Prettify(s)
}

func (s PaginationQuery) GoString() string {
	return s.String()
}

func (s *PaginationQuery) SetCurrentPage(v int64) *PaginationQuery {
	s.CurrentPage = &v
	return s
}

func (s *PaginationQuery) SetIsLocaleEnabled(v bool) *PaginationQuery {
	s.IsLocaleEnabled = &v
	return s
}

func (s *PaginationQuery) SetLocal(v string) *PaginationQuery {
	s.Local = &v
	return s
}

func (s *PaginationQuery) SetPageSize(v int64) *PaginationQuery {
	s.PageSize = &v
	return s
}

func (s *PaginationQuery) SetPaging(v bool) *PaginationQuery {
	s.Paging = &v
	return s
}

func (s *PaginationQuery) SetQueryType(v string) *PaginationQuery {
	s.QueryType = &v
	return s
}

func (s *PaginationQuery) SetSearch(v bool) *PaginationQuery {
	s.Search = &v
	return s
}

func (s *PaginationQuery) SetOrders(v []*string) *PaginationQuery {
	s.Orders = v
	return s
}

// IaasErrorInfo
type IaasErrorInfo struct {
	// error_code
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// error_message
	ErrorMessage *string `json:"error_message,omitempty" xml:"error_message,omitempty"`
	// status_code
	StatusCode *int64 `json:"status_code,omitempty" xml:"status_code,omitempty"`
	// host_id
	HostId *string `json:"host_id,omitempty" xml:"host_id,omitempty"`
	// requestId
	RequestId *string `json:"request_id,omitempty" xml:"request_id,omitempty"`
}

func (s IaasErrorInfo) String() string {
	return tea.Prettify(s)
}

func (s IaasErrorInfo) GoString() string {
	return s.String()
}

func (s *IaasErrorInfo) SetErrorCode(v string) *IaasErrorInfo {
	s.ErrorCode = &v
	return s
}

func (s *IaasErrorInfo) SetErrorMessage(v string) *IaasErrorInfo {
	s.ErrorMessage = &v
	return s
}

func (s *IaasErrorInfo) SetStatusCode(v int64) *IaasErrorInfo {
	s.StatusCode = &v
	return s
}

func (s *IaasErrorInfo) SetHostId(v string) *IaasErrorInfo {
	s.HostId = &v
	return s
}

func (s *IaasErrorInfo) SetRequestId(v string) *IaasErrorInfo {
	s.RequestId = &v
	return s
}

// 单个维度实例，例如WORKSPACE_A
type DimInstance struct {
	// ID字段，实际不会使用，只是数据库中的索引
	DimId *string `json:"dim_id,omitempty" xml:"dim_id,omitempty" require:"true"`
	// dim_identity
	DimIdentity *string `json:"dim_identity,omitempty" xml:"dim_identity,omitempty" require:"true"`
	// value
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
}

func (s DimInstance) String() string {
	return tea.Prettify(s)
}

func (s DimInstance) GoString() string {
	return s.String()
}

func (s *DimInstance) SetDimId(v string) *DimInstance {
	s.DimId = &v
	return s
}

func (s *DimInstance) SetDimIdentity(v string) *DimInstance {
	s.DimIdentity = &v
	return s
}

func (s *DimInstance) SetValue(v string) *DimInstance {
	s.Value = &v
	return s
}

func (s *DimInstance) SetDescription(v string) *DimInstance {
	s.Description = &v
	return s
}

// 技术栈运行时属性
type BuildpackInstances struct {
	// ecs个数
	Ecses *int64 `json:"ecses,omitempty" xml:"ecses,omitempty"`
	// 绑定应用个数
	AppBinded *int64 `json:"app_binded,omitempty" xml:"app_binded,omitempty"`
}

func (s BuildpackInstances) String() string {
	return tea.Prettify(s)
}

func (s BuildpackInstances) GoString() string {
	return s.String()
}

func (s *BuildpackInstances) SetEcses(v int64) *BuildpackInstances {
	s.Ecses = &v
	return s
}

func (s *BuildpackInstances) SetAppBinded(v int64) *BuildpackInstances {
	s.AppBinded = &v
	return s
}

// WorkspaceDc
type WorkspaceDc struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// datacenterId
	DatacenterId *string `json:"datacenter_id,omitempty" xml:"datacenter_id,omitempty" require:"true"`
	// workspaceId
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// datacenterType
	DatacenterType *string `json:"datacenter_type,omitempty" xml:"datacenter_type,omitempty" require:"true"`
	// gmtCreate
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// gmtModified
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s WorkspaceDc) String() string {
	return tea.Prettify(s)
}

func (s WorkspaceDc) GoString() string {
	return s.String()
}

func (s *WorkspaceDc) SetId(v string) *WorkspaceDc {
	s.Id = &v
	return s
}

func (s *WorkspaceDc) SetDatacenterId(v string) *WorkspaceDc {
	s.DatacenterId = &v
	return s
}

func (s *WorkspaceDc) SetWorkspaceId(v string) *WorkspaceDc {
	s.WorkspaceId = &v
	return s
}

func (s *WorkspaceDc) SetDatacenterType(v string) *WorkspaceDc {
	s.DatacenterType = &v
	return s
}

func (s *WorkspaceDc) SetGmtCreate(v string) *WorkspaceDc {
	s.GmtCreate = &v
	return s
}

func (s *WorkspaceDc) SetGmtModified(v string) *WorkspaceDc {
	s.GmtModified = &v
	return s
}

// 安全组规则
type SecurityGroupRule struct {
	// 规则描述信息
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 目的端IP地址范围。支持CIDR格式和IPv4格式的IP地址范围。
	DestCidrIp *string `json:"dest_cidr_ip,omitempty" xml:"dest_cidr_ip,omitempty"`
	// 传输层协议。不区分大小写。取值范围：
	//
	// icmp
	// gre
	// tcp
	// udp
	// all：支持所有协议
	IpProtocol *string `json:"ip_protocol,omitempty" xml:"ip_protocol,omitempty"`
	// 经典网络类型安全组规则的网卡类型。取值范围：
	//
	// internet：公网。
	// intranet：内网。
	// 默认值：internet。
	//
	// 在以下情况中，参数NicType取值只能为intranet：
	//
	// 安全组规则的网络类型为专有网络VPC时，您无需设置NicType参数，默认并且只能为intranet。
	// 当设置安全组之间互相访问时，即指定了DestGroupId且没有指定DestCidrIp时。
	NicType *string `json:"nic_type,omitempty" xml:"nic_type,omitempty"`
	// 访问权限。取值范围：
	//
	// accept：接受访问。
	// drop：拒绝访问，不返回拒绝信息。
	// 默认值：accept。
	Policy *string `json:"policy,omitempty" xml:"policy,omitempty"`
	// 目的端安全组开放的传输层协议相关的端口范围。取值范围：
	//
	// TCP/UDP协议：取值范围为1~65535。使用斜线（/）隔开起始端口和终止端口。正确示范：1/200；错误示范：200/1。
	// ICMP协议：-1/-1。
	// GRE协议：-1/-1。
	// all：-1/-1。
	PortRange *string `json:"port_range,omitempty" xml:"port_range,omitempty"`
	// 安全组规则优先级。取值范围：1~100
	//
	// 默认值：1。
	Priority *string `json:"priority,omitempty" xml:"priority,omitempty"`
	// 源端IP地址范围。支持CIDR格式和IPv4格式的IP地址范围。
	//
	// 默认值：0.0.0.0/0。
	SourceCidrIp *string `json:"source_cidr_ip,omitempty" xml:"source_cidr_ip,omitempty"`
}

func (s SecurityGroupRule) String() string {
	return tea.Prettify(s)
}

func (s SecurityGroupRule) GoString() string {
	return s.String()
}

func (s *SecurityGroupRule) SetDescription(v string) *SecurityGroupRule {
	s.Description = &v
	return s
}

func (s *SecurityGroupRule) SetDestCidrIp(v string) *SecurityGroupRule {
	s.DestCidrIp = &v
	return s
}

func (s *SecurityGroupRule) SetIpProtocol(v string) *SecurityGroupRule {
	s.IpProtocol = &v
	return s
}

func (s *SecurityGroupRule) SetNicType(v string) *SecurityGroupRule {
	s.NicType = &v
	return s
}

func (s *SecurityGroupRule) SetPolicy(v string) *SecurityGroupRule {
	s.Policy = &v
	return s
}

func (s *SecurityGroupRule) SetPortRange(v string) *SecurityGroupRule {
	s.PortRange = &v
	return s
}

func (s *SecurityGroupRule) SetPriority(v string) *SecurityGroupRule {
	s.Priority = &v
	return s
}

func (s *SecurityGroupRule) SetSourceCidrIp(v string) *SecurityGroupRule {
	s.SourceCidrIp = &v
	return s
}

// 应用画像应用ECS节点列表
type AppPortraitAppNodeEcsList struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// zone_id
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty"`
	// ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
	// 实例规格
	InstSpec *string `json:"inst_spec,omitempty" xml:"inst_spec,omitempty"`
	// cpu
	Cpu *string `json:"cpu,omitempty" xml:"cpu,omitempty"`
	// memory
	Memory *string `json:"memory,omitempty" xml:"memory,omitempty"`
	// version
	Version *string `json:"version,omitempty" xml:"version,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s AppPortraitAppNodeEcsList) String() string {
	return tea.Prettify(s)
}

func (s AppPortraitAppNodeEcsList) GoString() string {
	return s.String()
}

func (s *AppPortraitAppNodeEcsList) SetId(v string) *AppPortraitAppNodeEcsList {
	s.Id = &v
	return s
}

func (s *AppPortraitAppNodeEcsList) SetZoneId(v string) *AppPortraitAppNodeEcsList {
	s.ZoneId = &v
	return s
}

func (s *AppPortraitAppNodeEcsList) SetIp(v string) *AppPortraitAppNodeEcsList {
	s.Ip = &v
	return s
}

func (s *AppPortraitAppNodeEcsList) SetInstSpec(v string) *AppPortraitAppNodeEcsList {
	s.InstSpec = &v
	return s
}

func (s *AppPortraitAppNodeEcsList) SetCpu(v string) *AppPortraitAppNodeEcsList {
	s.Cpu = &v
	return s
}

func (s *AppPortraitAppNodeEcsList) SetMemory(v string) *AppPortraitAppNodeEcsList {
	s.Memory = &v
	return s
}

func (s *AppPortraitAppNodeEcsList) SetVersion(v string) *AppPortraitAppNodeEcsList {
	s.Version = &v
	return s
}

func (s *AppPortraitAppNodeEcsList) SetName(v string) *AppPortraitAppNodeEcsList {
	s.Name = &v
	return s
}

func (s *AppPortraitAppNodeEcsList) SetStatus(v string) *AppPortraitAppNodeEcsList {
	s.Status = &v
	return s
}

// 查询用的DbSchema
type DbSchema struct {
	// charSet
	CharSet *string `json:"char_set,omitempty" xml:"char_set,omitempty"`
	// database
	Database *Database `json:"database,omitempty" xml:"database,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// grants
	Grants []*DbSchemaGrant `json:"grants,omitempty" xml:"grants,omitempty" require:"true" type:"Repeated"`
	// iaas_type
	IaasType *string `json:"iaas_type,omitempty" xml:"iaas_type,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// utc_create
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// utc_modified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s DbSchema) String() string {
	return tea.Prettify(s)
}

func (s DbSchema) GoString() string {
	return s.String()
}

func (s *DbSchema) SetCharSet(v string) *DbSchema {
	s.CharSet = &v
	return s
}

func (s *DbSchema) SetDatabase(v *Database) *DbSchema {
	s.Database = v
	return s
}

func (s *DbSchema) SetDescription(v string) *DbSchema {
	s.Description = &v
	return s
}

func (s *DbSchema) SetGrants(v []*DbSchemaGrant) *DbSchema {
	s.Grants = v
	return s
}

func (s *DbSchema) SetIaasType(v string) *DbSchema {
	s.IaasType = &v
	return s
}

func (s *DbSchema) SetId(v string) *DbSchema {
	s.Id = &v
	return s
}

func (s *DbSchema) SetName(v string) *DbSchema {
	s.Name = &v
	return s
}

func (s *DbSchema) SetStatus(v string) *DbSchema {
	s.Status = &v
	return s
}

func (s *DbSchema) SetUtcCreate(v string) *DbSchema {
	s.UtcCreate = &v
	return s
}

func (s *DbSchema) SetUtcModified(v string) *DbSchema {
	s.UtcModified = &v
	return s
}

// ZoneDto
type ZoneDto struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty" require:"true"`
	// iaasProviderId
	IaasProviderId *string `json:"iaas_provider_id,omitempty" xml:"iaas_provider_id,omitempty" require:"true"`
	// displayName
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty" require:"true"`
	// state
	State *string `json:"state,omitempty" xml:"state,omitempty" require:"true"`
	// regionId
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty" require:"true"`
	// no
	No *int64 `json:"no,omitempty" xml:"no,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// utcCreate
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// utcModified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s ZoneDto) String() string {
	return tea.Prettify(s)
}

func (s ZoneDto) GoString() string {
	return s.String()
}

func (s *ZoneDto) SetId(v string) *ZoneDto {
	s.Id = &v
	return s
}

func (s *ZoneDto) SetIdentity(v string) *ZoneDto {
	s.Identity = &v
	return s
}

func (s *ZoneDto) SetIaasProviderId(v string) *ZoneDto {
	s.IaasProviderId = &v
	return s
}

func (s *ZoneDto) SetDisplayName(v string) *ZoneDto {
	s.DisplayName = &v
	return s
}

func (s *ZoneDto) SetState(v string) *ZoneDto {
	s.State = &v
	return s
}

func (s *ZoneDto) SetRegionId(v string) *ZoneDto {
	s.RegionId = &v
	return s
}

func (s *ZoneDto) SetNo(v int64) *ZoneDto {
	s.No = &v
	return s
}

func (s *ZoneDto) SetName(v string) *ZoneDto {
	s.Name = &v
	return s
}

func (s *ZoneDto) SetDescription(v string) *ZoneDto {
	s.Description = &v
	return s
}

func (s *ZoneDto) SetUtcCreate(v string) *ZoneDto {
	s.UtcCreate = &v
	return s
}

func (s *ZoneDto) SetUtcModified(v string) *ZoneDto {
	s.UtcModified = &v
	return s
}

// 一个部署起来提供服务的应用实例信息
type AppService struct {
	// app_id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// buildpack_full_version
	BuildpackFullVersion *string `json:"buildpack_full_version,omitempty" xml:"buildpack_full_version,omitempty"`
	// buildpack_id
	BuildpackId *string `json:"buildpack_id,omitempty" xml:"buildpack_id,omitempty"`
	// cell_ids
	CellIds []*string `json:"cell_ids,omitempty" xml:"cell_ids,omitempty" type:"Repeated"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// extend_properties
	ExtendProperties *string `json:"extend_properties,omitempty" xml:"extend_properties,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// is_default
	IsDefault *bool `json:"is_default,omitempty" xml:"is_default,omitempty"`
	// is_service
	IsService *bool `json:"is_service,omitempty" xml:"is_service,omitempty"`
	// last_deploy_status
	LastDeployStatus *string `json:"last_deploy_status,omitempty" xml:"last_deploy_status,omitempty"`
	// last_deploy_version
	LastDeployVersion *string `json:"last_deploy_version,omitempty" xml:"last_deploy_version,omitempty"`
	// last_ops_order_id
	LastOpsOrderId *string `json:"last_ops_order_id,omitempty" xml:"last_ops_order_id,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// owner_id
	OwnerId *string `json:"owner_id,omitempty" xml:"owner_id,omitempty"`
	// techstack_id
	TechstackId *int64 `json:"techstack_id,omitempty" xml:"techstack_id,omitempty"`
	// techstack_identity
	TechstackIdentity *string `json:"techstack_identity,omitempty" xml:"techstack_identity,omitempty"`
	// techstack_name
	TechstackName *string `json:"techstack_name,omitempty" xml:"techstack_name,omitempty"`
	// utc_create
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// utc_modified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s AppService) String() string {
	return tea.Prettify(s)
}

func (s AppService) GoString() string {
	return s.String()
}

func (s *AppService) SetAppId(v string) *AppService {
	s.AppId = &v
	return s
}

func (s *AppService) SetAppName(v string) *AppService {
	s.AppName = &v
	return s
}

func (s *AppService) SetBuildpackFullVersion(v string) *AppService {
	s.BuildpackFullVersion = &v
	return s
}

func (s *AppService) SetBuildpackId(v string) *AppService {
	s.BuildpackId = &v
	return s
}

func (s *AppService) SetCellIds(v []*string) *AppService {
	s.CellIds = v
	return s
}

func (s *AppService) SetDescription(v string) *AppService {
	s.Description = &v
	return s
}

func (s *AppService) SetExtendProperties(v string) *AppService {
	s.ExtendProperties = &v
	return s
}

func (s *AppService) SetId(v string) *AppService {
	s.Id = &v
	return s
}

func (s *AppService) SetIsDefault(v bool) *AppService {
	s.IsDefault = &v
	return s
}

func (s *AppService) SetIsService(v bool) *AppService {
	s.IsService = &v
	return s
}

func (s *AppService) SetLastDeployStatus(v string) *AppService {
	s.LastDeployStatus = &v
	return s
}

func (s *AppService) SetLastDeployVersion(v string) *AppService {
	s.LastDeployVersion = &v
	return s
}

func (s *AppService) SetLastOpsOrderId(v string) *AppService {
	s.LastOpsOrderId = &v
	return s
}

func (s *AppService) SetName(v string) *AppService {
	s.Name = &v
	return s
}

func (s *AppService) SetOwnerId(v string) *AppService {
	s.OwnerId = &v
	return s
}

func (s *AppService) SetTechstackId(v int64) *AppService {
	s.TechstackId = &v
	return s
}

func (s *AppService) SetTechstackIdentity(v string) *AppService {
	s.TechstackIdentity = &v
	return s
}

func (s *AppService) SetTechstackName(v string) *AppService {
	s.TechstackName = &v
	return s
}

func (s *AppService) SetUtcCreate(v string) *AppService {
	s.UtcCreate = &v
	return s
}

func (s *AppService) SetUtcModified(v string) *AppService {
	s.UtcModified = &v
	return s
}

func (s *AppService) SetWorkspaceId(v string) *AppService {
	s.WorkspaceId = &v
	return s
}

// 阿里云日志服务(SLS)-日志配置-输出类型配置
type SLSConfigOutputDetail struct {
	// 项目名称，必须为请求的project名。
	ProjectName *string `json:"project_name,omitempty" xml:"project_name,omitempty" require:"true"`
	// 日志库名称
	LogstoreName *string `json:"logstore_name,omitempty" xml:"logstore_name,omitempty" require:"true"`
}

func (s SLSConfigOutputDetail) String() string {
	return tea.Prettify(s)
}

func (s SLSConfigOutputDetail) GoString() string {
	return s.String()
}

func (s *SLSConfigOutputDetail) SetProjectName(v string) *SLSConfigOutputDetail {
	s.ProjectName = &v
	return s
}

func (s *SLSConfigOutputDetail) SetLogstoreName(v string) *SLSConfigOutputDetail {
	s.LogstoreName = &v
	return s
}

// 应用分组
type AppDomain struct {
	// 创建人id
	CreatorId *string `json:"creator_id,omitempty" xml:"creator_id,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// parentId
	ParentId *string `json:"parent_id,omitempty" xml:"parent_id,omitempty"`
	// 租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// toRootPath
	ToRootPath *string `json:"to_root_path,omitempty" xml:"to_root_path,omitempty"`
	// utcCreate
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// utcModified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s AppDomain) String() string {
	return tea.Prettify(s)
}

func (s AppDomain) GoString() string {
	return s.String()
}

func (s *AppDomain) SetCreatorId(v string) *AppDomain {
	s.CreatorId = &v
	return s
}

func (s *AppDomain) SetId(v string) *AppDomain {
	s.Id = &v
	return s
}

func (s *AppDomain) SetName(v string) *AppDomain {
	s.Name = &v
	return s
}

func (s *AppDomain) SetParentId(v string) *AppDomain {
	s.ParentId = &v
	return s
}

func (s *AppDomain) SetTenantId(v string) *AppDomain {
	s.TenantId = &v
	return s
}

func (s *AppDomain) SetToRootPath(v string) *AppDomain {
	s.ToRootPath = &v
	return s
}

func (s *AppDomain) SetUtcCreate(v string) *AppDomain {
	s.UtcCreate = &v
	return s
}

func (s *AppDomain) SetUtcModified(v string) *AppDomain {
	s.UtcModified = &v
	return s
}

// IaasResponse
type IaasResponse struct {
	// response_body
	ResponseBody *string `json:"response_body,omitempty" xml:"response_body,omitempty"`
	// response_headers
	ResponseHeaders []*MapStringToStringEntity `json:"response_headers,omitempty" xml:"response_headers,omitempty" type:"Repeated"`
}

func (s IaasResponse) String() string {
	return tea.Prettify(s)
}

func (s IaasResponse) GoString() string {
	return s.String()
}

func (s *IaasResponse) SetResponseBody(v string) *IaasResponse {
	s.ResponseBody = &v
	return s
}

func (s *IaasResponse) SetResponseHeaders(v []*MapStringToStringEntity) *IaasResponse {
	s.ResponseHeaders = v
	return s
}

// 阿里云日志服务(SLS)-日志配置-输入类型配置
type SLSConfigInputDetail struct {
	// 用于过滤日志的key，只有key的值满足对应filterRegex列中设定的正则表达式，该日志数据才会被采集。
	FilterKey []*string `json:"filter_key,omitempty" xml:"filter_key,omitempty" type:"Repeated"`
	// 与filterKey对应的正则表达式， filterRegex的长度和filterKey的长度必须相同。
	FilterRegex []*string `json:"filter_regex,omitempty" xml:"filter_regex,omitempty" type:"Repeated"`
	// 数据写入的模式。默认按照写入，开启后按照写入。支持的值包括 __topic__，__hostname__, __source__。
	ShardHashKey []*string `json:"shard_hash_key,omitempty" xml:"shard_hash_key,omitempty" type:"Repeated"`
	// 是否上传原始日志。
	EnableRawLog *bool `json:"enable_raw_log,omitempty" xml:"enable_raw_log,omitempty"`
	// 脱敏功能配置，类型为数组
	SensitiveKeys []*SLSConfigSensitiveKey `json:"sensitive_keys,omitempty" xml:"sensitive_keys,omitempty" type:"Repeated"`
	// 聚合方式，默认为topic，表示按照Topic方式聚合。支持的值为 topic、logstore。
	MergeType *string `json:"merge_type,omitempty" xml:"merge_type,omitempty"`
	// 采集进度落后的告警阈值，默认为209715200，即200MB。
	DelayAlarmBytes *int64 `json:"delay_alarm_bytes,omitempty" xml:"delay_alarm_bytes,omitempty"`
	// 是否调整日志时区，仅在配置时间解析的情况下使用。
	AdjustTimezone *bool `json:"adjust_timezone,omitempty" xml:"adjust_timezone,omitempty"`
	// 时区偏移量，例如日志时间为东八区，则该值为GMT+08:00
	LogTimezone *string `json:"log_timezone,omitempty" xml:"log_timezone,omitempty"`
	// 日志发送优先级，默认为0，若需设置为高优先级，则设置为1。
	Priority *int64 `json:"priority,omitempty" xml:"priority,omitempty"`
	// 日志的采集模式。如果Logtail配置参数inputType选择为file，则该参数为必填项。目前可选：
	// json_log：JSON模式。
	// apsara_log：飞天模式。
	// common_reg_log：完整正则模式。
	// delimiter_log：分隔符模式。
	LogType *string `json:"log_type,omitempty" xml:"log_type,omitempty" require:"true"`
	// 日志所在的父目录，例如/var/logs/。
	LogPath *string `json:"log_path,omitempty" xml:"log_path,omitempty" require:"true"`
	// 日志文件的Pattern，例如access*.log。
	FilePattern *string `json:"file_pattern,omitempty" xml:"file_pattern,omitempty" require:"true"`
	// Topic生成方式，支持以下四种类型：
	// none，表示topic为空。
	// default，表示将日志文件路径作为topic。
	// group_topic，表示将应用该配置的机器组topic属性作为topic。
	// 也可以将日志文件路径的某一部分作为topic，如/var/log/(.*).log。
	TopicFormat *string `json:"topic_format,omitempty" xml:"topic_format,omitempty" require:"true"`
	// 日志时间格式，如%Y/%m/%d %H:%M:%S。
	TimeFormat *string `json:"time_format,omitempty" xml:"time_format,omitempty"`
	// 监控目录超时设置。默认为true，代表监控目录永不超时，false代表监控目录超过30分钟则超时。
	Preserve *bool `json:"preserve,omitempty" xml:"preserve,omitempty"`
	// 当设置preserve为false时，指定监控不超时目录的深度，最大深度支持3。
	PreserveDepth *int64 `json:"preserve_depth,omitempty" xml:"preserve_depth,omitempty"`
	// 支持两种类型：utf8、gbk
	FileEncoding *string `json:"file_encoding,omitempty" xml:"file_encoding,omitempty"`
	// 是否丢弃匹配失败的日志。
	DiscardUnmatch *bool `json:"discard_unmatch,omitempty" xml:"discard_unmatch,omitempty"`
	// 最大目录监控深度范围0-1000，0代表只监控本层目录。
	MaxDepth *int64 `json:"max_depth,omitempty" xml:"max_depth,omitempty"`
	// 采集落后时是否丢弃落后数据的阈值，默认为0，即不丢弃。当采集落后超过该值时，则直接丢弃落后的数据
	DelaySkipBytes *int64 `json:"delay_skip_bytes,omitempty" xml:"delay_skip_bytes,omitempty"`
	// 采集的目标文件是否为容器内文件，默认为false。
	DockerFile *bool `json:"docker_file,omitempty" xml:"docker_file,omitempty"`
	// 容器Label白名单，采集包含白名单中Label的Docker容器日志，为空表示全部采集。
	DockerIncludeLabel []*MapStringToStringEntity `json:"docker_include_label,omitempty" xml:"docker_include_label,omitempty" type:"Repeated"`
	// 容器Label黑名单，不采集包含黑名单中Label的Docker容器日志，为空表示全部采集。
	DockerExcludeLabel []*MapStringToStringEntity `json:"docker_exclude_label,omitempty" xml:"docker_exclude_label,omitempty" type:"Repeated"`
	// 容器环境变量白名单，采集包含白名单中的环境变量的日志，为空表示全部采集。
	DockerIncludeEnv []*MapStringToStringEntity `json:"docker_include_env,omitempty" xml:"docker_include_env,omitempty" type:"Repeated"`
	// 容器环境变量黑名单，采集不包含黑名单中的环境变量的日志，为空表示全部采集。
	DockerExcludeEnv []*MapStringToStringEntity `json:"docker_exclude_env,omitempty" xml:"docker_exclude_env,omitempty" type:"Repeated"`
	// 完整正则/极简模式特有配置，日志内容提取结果的key列表。
	// 完整正则/极简模式 下 必填
	// 分隔符模式特有配置，日志内容提取结果的key列表。
	// 分隔符模式 下 必填
	Key []*string `json:"key,omitempty" xml:"key,omitempty" type:"Repeated"`
	// 完整正则/极简模式特有配置，行首正则表达式。
	// 完整正则/极简模式 下 非必填。
	// 飞天模式特有配置，行首正则表达式。
	// 飞天模式 下 非必填。
	LogBeginRegex *string `json:"log_begin_regex,omitempty" xml:"log_begin_regex,omitempty"`
	// 完整正则/极简模式特有配置，提取字段的正则表达式。
	// 完整正则/极简模式 下 非必填
	Regex *string `json:"regex,omitempty" xml:"regex,omitempty"`
	// JSON模式特有配置，指定时间字段的key名称。
	// JSON模式 下 非必填。
	// 分隔符模式特有配置，指定时间字段key名称，必须在key列表里面。
	// 分割符模式 下 必填。
	TimeKey *string `json:"time_key,omitempty" xml:"time_key,omitempty"`
	// 分隔符模式特有配置，分隔符
	// 分隔符模式 下 非必填
	Separator *string `json:"separator,omitempty" xml:"separator,omitempty"`
	// 分隔符模式特有配置，引用符。
	// 分隔符模式 下 必填
	Quote *string `json:"quote,omitempty" xml:"quote,omitempty"`
	// 分隔符模式特有配置，当日志中实际的key数量大于配置的key数量时，是否自动扩展。
	// 分隔符模式 下 非必填。
	AutoExtend *bool `json:"auto_extend,omitempty" xml:"auto_extend,omitempty"`
	// 插件所需JSON对象字符串，具体请参见。
	Plugin *string `json:"plugin,omitempty" xml:"plugin,omitempty"`
}

func (s SLSConfigInputDetail) String() string {
	return tea.Prettify(s)
}

func (s SLSConfigInputDetail) GoString() string {
	return s.String()
}

func (s *SLSConfigInputDetail) SetFilterKey(v []*string) *SLSConfigInputDetail {
	s.FilterKey = v
	return s
}

func (s *SLSConfigInputDetail) SetFilterRegex(v []*string) *SLSConfigInputDetail {
	s.FilterRegex = v
	return s
}

func (s *SLSConfigInputDetail) SetShardHashKey(v []*string) *SLSConfigInputDetail {
	s.ShardHashKey = v
	return s
}

func (s *SLSConfigInputDetail) SetEnableRawLog(v bool) *SLSConfigInputDetail {
	s.EnableRawLog = &v
	return s
}

func (s *SLSConfigInputDetail) SetSensitiveKeys(v []*SLSConfigSensitiveKey) *SLSConfigInputDetail {
	s.SensitiveKeys = v
	return s
}

func (s *SLSConfigInputDetail) SetMergeType(v string) *SLSConfigInputDetail {
	s.MergeType = &v
	return s
}

func (s *SLSConfigInputDetail) SetDelayAlarmBytes(v int64) *SLSConfigInputDetail {
	s.DelayAlarmBytes = &v
	return s
}

func (s *SLSConfigInputDetail) SetAdjustTimezone(v bool) *SLSConfigInputDetail {
	s.AdjustTimezone = &v
	return s
}

func (s *SLSConfigInputDetail) SetLogTimezone(v string) *SLSConfigInputDetail {
	s.LogTimezone = &v
	return s
}

func (s *SLSConfigInputDetail) SetPriority(v int64) *SLSConfigInputDetail {
	s.Priority = &v
	return s
}

func (s *SLSConfigInputDetail) SetLogType(v string) *SLSConfigInputDetail {
	s.LogType = &v
	return s
}

func (s *SLSConfigInputDetail) SetLogPath(v string) *SLSConfigInputDetail {
	s.LogPath = &v
	return s
}

func (s *SLSConfigInputDetail) SetFilePattern(v string) *SLSConfigInputDetail {
	s.FilePattern = &v
	return s
}

func (s *SLSConfigInputDetail) SetTopicFormat(v string) *SLSConfigInputDetail {
	s.TopicFormat = &v
	return s
}

func (s *SLSConfigInputDetail) SetTimeFormat(v string) *SLSConfigInputDetail {
	s.TimeFormat = &v
	return s
}

func (s *SLSConfigInputDetail) SetPreserve(v bool) *SLSConfigInputDetail {
	s.Preserve = &v
	return s
}

func (s *SLSConfigInputDetail) SetPreserveDepth(v int64) *SLSConfigInputDetail {
	s.PreserveDepth = &v
	return s
}

func (s *SLSConfigInputDetail) SetFileEncoding(v string) *SLSConfigInputDetail {
	s.FileEncoding = &v
	return s
}

func (s *SLSConfigInputDetail) SetDiscardUnmatch(v bool) *SLSConfigInputDetail {
	s.DiscardUnmatch = &v
	return s
}

func (s *SLSConfigInputDetail) SetMaxDepth(v int64) *SLSConfigInputDetail {
	s.MaxDepth = &v
	return s
}

func (s *SLSConfigInputDetail) SetDelaySkipBytes(v int64) *SLSConfigInputDetail {
	s.DelaySkipBytes = &v
	return s
}

func (s *SLSConfigInputDetail) SetDockerFile(v bool) *SLSConfigInputDetail {
	s.DockerFile = &v
	return s
}

func (s *SLSConfigInputDetail) SetDockerIncludeLabel(v []*MapStringToStringEntity) *SLSConfigInputDetail {
	s.DockerIncludeLabel = v
	return s
}

func (s *SLSConfigInputDetail) SetDockerExcludeLabel(v []*MapStringToStringEntity) *SLSConfigInputDetail {
	s.DockerExcludeLabel = v
	return s
}

func (s *SLSConfigInputDetail) SetDockerIncludeEnv(v []*MapStringToStringEntity) *SLSConfigInputDetail {
	s.DockerIncludeEnv = v
	return s
}

func (s *SLSConfigInputDetail) SetDockerExcludeEnv(v []*MapStringToStringEntity) *SLSConfigInputDetail {
	s.DockerExcludeEnv = v
	return s
}

func (s *SLSConfigInputDetail) SetKey(v []*string) *SLSConfigInputDetail {
	s.Key = v
	return s
}

func (s *SLSConfigInputDetail) SetLogBeginRegex(v string) *SLSConfigInputDetail {
	s.LogBeginRegex = &v
	return s
}

func (s *SLSConfigInputDetail) SetRegex(v string) *SLSConfigInputDetail {
	s.Regex = &v
	return s
}

func (s *SLSConfigInputDetail) SetTimeKey(v string) *SLSConfigInputDetail {
	s.TimeKey = &v
	return s
}

func (s *SLSConfigInputDetail) SetSeparator(v string) *SLSConfigInputDetail {
	s.Separator = &v
	return s
}

func (s *SLSConfigInputDetail) SetQuote(v string) *SLSConfigInputDetail {
	s.Quote = &v
	return s
}

func (s *SLSConfigInputDetail) SetAutoExtend(v bool) *SLSConfigInputDetail {
	s.AutoExtend = &v
	return s
}

func (s *SLSConfigInputDetail) SetPlugin(v string) *SLSConfigInputDetail {
	s.Plugin = &v
	return s
}

// TaskVO用Resource字段
type Resource struct {
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// instance_charge_type
	InstanceChargeType *string `json:"instance_charge_type,omitempty" xml:"instance_charge_type,omitempty"`
	// expiredTime
	ExpiredTime *string `json:"expired_time,omitempty" xml:"expired_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// auto_renew
	AutoRenew *bool `json:"auto_renew,omitempty" xml:"auto_renew,omitempty"`
	// autoRenewPeriod
	AutoRenewPeriod *int64 `json:"auto_renew_period,omitempty" xml:"auto_renew_period,omitempty"`
	// iaas_id
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// iaas_type
	IaasType *string `json:"iaas_type,omitempty" xml:"iaas_type,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// zone_id
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty" require:"true"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// utc_create
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// utc_modified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s Resource) String() string {
	return tea.Prettify(s)
}

func (s Resource) GoString() string {
	return s.String()
}

func (s *Resource) SetName(v string) *Resource {
	s.Name = &v
	return s
}

func (s *Resource) SetDescription(v string) *Resource {
	s.Description = &v
	return s
}

func (s *Resource) SetInstanceChargeType(v string) *Resource {
	s.InstanceChargeType = &v
	return s
}

func (s *Resource) SetExpiredTime(v string) *Resource {
	s.ExpiredTime = &v
	return s
}

func (s *Resource) SetAutoRenew(v bool) *Resource {
	s.AutoRenew = &v
	return s
}

func (s *Resource) SetAutoRenewPeriod(v int64) *Resource {
	s.AutoRenewPeriod = &v
	return s
}

func (s *Resource) SetIaasId(v string) *Resource {
	s.IaasId = &v
	return s
}

func (s *Resource) SetIaasType(v string) *Resource {
	s.IaasType = &v
	return s
}

func (s *Resource) SetRegionId(v string) *Resource {
	s.RegionId = &v
	return s
}

func (s *Resource) SetZoneId(v string) *Resource {
	s.ZoneId = &v
	return s
}

func (s *Resource) SetId(v string) *Resource {
	s.Id = &v
	return s
}

func (s *Resource) SetUtcCreate(v string) *Resource {
	s.UtcCreate = &v
	return s
}

func (s *Resource) SetUtcModified(v string) *Resource {
	s.UtcModified = &v
	return s
}

// 应用信息
type AppView struct {
	// 应用组id
	AppDomainId *string `json:"app_domain_id,omitempty" xml:"app_domain_id,omitempty"`
	// 应用扩展信息
	AppExtraInfos []*AppExtraInfo `json:"app_extra_infos,omitempty" xml:"app_extra_infos,omitempty" type:"Repeated"`
	// 应用等级
	AppLevel *AppLevel `json:"app_level,omitempty" xml:"app_level,omitempty"`
	// 应用负责人
	AppOwner *AppOwner `json:"app_owner,omitempty" xml:"app_owner,omitempty"`
	// scm sofa archetype
	Archetype *ScmSofaArchetype `json:"archetype,omitempty" xml:"archetype,omitempty"`
	// 技术栈版本
	BuildpackVersion *string `json:"buildpack_version,omitempty" xml:"buildpack_version,omitempty"`
	// 中文名称
	ChineseName *string `json:"chinese_name,omitempty" xml:"chinese_name,omitempty"`
	// 代码仓库
	CodeRepository *CodeRepository `json:"code_repository,omitempty" xml:"code_repository,omitempty"`
	// 描述信息
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 扩展参数，JSOn字符串
	ExtraParams *string `json:"extra_params,omitempty" xml:"extra_params,omitempty"`
	// 应用ID
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 是否组件中心应用
	IsService *bool `json:"is_service,omitempty" xml:"is_service,omitempty"`
	// 应用名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 负责人ID
	OwnerId *string `json:"owner_id,omitempty" xml:"owner_id,omitempty"`
	// 技术栈所属分类ID
	StackId *string `json:"stack_id,omitempty" xml:"stack_id,omitempty" require:"true"`
	// 应用状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 应用标签，JSOn字符串
	Tags *string `json:"tags,omitempty" xml:"tags,omitempty"`
	// 租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// 创建时间
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 修改时间
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 工作空间ID
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// 负责人名称
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty"`
	// 应用负责人真实名称
	RealOwnerName *string `json:"real_owner_name,omitempty" xml:"real_owner_name,omitempty" require:"true"`
	// 应用域路径名
	DomainNames []*string `json:"domain_names,omitempty" xml:"domain_names,omitempty" type:"Repeated"`
	// 应用分组名称
	AppDomainName *string `json:"app_domain_name,omitempty" xml:"app_domain_name,omitempty" require:"true"`
	// 应用等级名称
	AppLevelName *string `json:"app_level_name,omitempty" xml:"app_level_name,omitempty" require:"true"`
	// 技术栈名称
	StackName *string `json:"stack_name,omitempty" xml:"stack_name,omitempty"`
	// 技术栈版本
	StackVersion *string `json:"stack_version,omitempty" xml:"stack_version,omitempty"`
	// 服务器数量
	ContainerCount *int64 `json:"container_count,omitempty" xml:"container_count,omitempty"`
	// 数据库个数
	DatabaseCount *int64 `json:"database_count,omitempty" xml:"database_count,omitempty"`
	// SLB个数
	SlbCount *int64 `json:"slb_count,omitempty" xml:"slb_count,omitempty"`
	// ocs个数
	OcsCount *int64 `json:"ocs_count,omitempty" xml:"ocs_count,omitempty"`
	// 发布包个数
	PackageCount *int64 `json:"package_count,omitempty" xml:"package_count,omitempty"`
	// 生命周期信息
	LifeCycle *AppLifeCycle `json:"life_cycle,omitempty" xml:"life_cycle,omitempty"`
}

func (s AppView) String() string {
	return tea.Prettify(s)
}

func (s AppView) GoString() string {
	return s.String()
}

func (s *AppView) SetAppDomainId(v string) *AppView {
	s.AppDomainId = &v
	return s
}

func (s *AppView) SetAppExtraInfos(v []*AppExtraInfo) *AppView {
	s.AppExtraInfos = v
	return s
}

func (s *AppView) SetAppLevel(v *AppLevel) *AppView {
	s.AppLevel = v
	return s
}

func (s *AppView) SetAppOwner(v *AppOwner) *AppView {
	s.AppOwner = v
	return s
}

func (s *AppView) SetArchetype(v *ScmSofaArchetype) *AppView {
	s.Archetype = v
	return s
}

func (s *AppView) SetBuildpackVersion(v string) *AppView {
	s.BuildpackVersion = &v
	return s
}

func (s *AppView) SetChineseName(v string) *AppView {
	s.ChineseName = &v
	return s
}

func (s *AppView) SetCodeRepository(v *CodeRepository) *AppView {
	s.CodeRepository = v
	return s
}

func (s *AppView) SetDescription(v string) *AppView {
	s.Description = &v
	return s
}

func (s *AppView) SetExtraParams(v string) *AppView {
	s.ExtraParams = &v
	return s
}

func (s *AppView) SetId(v string) *AppView {
	s.Id = &v
	return s
}

func (s *AppView) SetIsService(v bool) *AppView {
	s.IsService = &v
	return s
}

func (s *AppView) SetName(v string) *AppView {
	s.Name = &v
	return s
}

func (s *AppView) SetOwnerId(v string) *AppView {
	s.OwnerId = &v
	return s
}

func (s *AppView) SetStackId(v string) *AppView {
	s.StackId = &v
	return s
}

func (s *AppView) SetStatus(v string) *AppView {
	s.Status = &v
	return s
}

func (s *AppView) SetTags(v string) *AppView {
	s.Tags = &v
	return s
}

func (s *AppView) SetTenantId(v string) *AppView {
	s.TenantId = &v
	return s
}

func (s *AppView) SetUtcCreate(v string) *AppView {
	s.UtcCreate = &v
	return s
}

func (s *AppView) SetUtcModified(v string) *AppView {
	s.UtcModified = &v
	return s
}

func (s *AppView) SetWorkspaceId(v string) *AppView {
	s.WorkspaceId = &v
	return s
}

func (s *AppView) SetOwnerName(v string) *AppView {
	s.OwnerName = &v
	return s
}

func (s *AppView) SetRealOwnerName(v string) *AppView {
	s.RealOwnerName = &v
	return s
}

func (s *AppView) SetDomainNames(v []*string) *AppView {
	s.DomainNames = v
	return s
}

func (s *AppView) SetAppDomainName(v string) *AppView {
	s.AppDomainName = &v
	return s
}

func (s *AppView) SetAppLevelName(v string) *AppView {
	s.AppLevelName = &v
	return s
}

func (s *AppView) SetStackName(v string) *AppView {
	s.StackName = &v
	return s
}

func (s *AppView) SetStackVersion(v string) *AppView {
	s.StackVersion = &v
	return s
}

func (s *AppView) SetContainerCount(v int64) *AppView {
	s.ContainerCount = &v
	return s
}

func (s *AppView) SetDatabaseCount(v int64) *AppView {
	s.DatabaseCount = &v
	return s
}

func (s *AppView) SetSlbCount(v int64) *AppView {
	s.SlbCount = &v
	return s
}

func (s *AppView) SetOcsCount(v int64) *AppView {
	s.OcsCount = &v
	return s
}

func (s *AppView) SetPackageCount(v int64) *AppView {
	s.PackageCount = &v
	return s
}

func (s *AppView) SetLifeCycle(v *AppLifeCycle) *AppView {
	s.LifeCycle = v
	return s
}

// DnsZones
type DnsZones struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s DnsZones) String() string {
	return tea.Prettify(s)
}

func (s DnsZones) GoString() string {
	return s.String()
}

func (s *DnsZones) SetId(v string) *DnsZones {
	s.Id = &v
	return s
}

func (s *DnsZones) SetName(v string) *DnsZones {
	s.Name = &v
	return s
}

// AppManifest
type AppManifest struct {
	// app_id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// app_version
	AppVersion *string `json:"app_version,omitempty" xml:"app_version,omitempty"`
	// code_commit
	CodeCommit *CodeCommit `json:"code_commit,omitempty" xml:"code_commit,omitempty"`
	// etag
	Etag *string `json:"etag,omitempty" xml:"etag,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// location
	Location *string `json:"location,omitempty" xml:"location,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// remark
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
	// store_location
	StoreLocation *string `json:"store_location,omitempty" xml:"store_location,omitempty"`
	// utc_create
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// utc_modified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s AppManifest) String() string {
	return tea.Prettify(s)
}

func (s AppManifest) GoString() string {
	return s.String()
}

func (s *AppManifest) SetAppId(v string) *AppManifest {
	s.AppId = &v
	return s
}

func (s *AppManifest) SetAppVersion(v string) *AppManifest {
	s.AppVersion = &v
	return s
}

func (s *AppManifest) SetCodeCommit(v *CodeCommit) *AppManifest {
	s.CodeCommit = v
	return s
}

func (s *AppManifest) SetEtag(v string) *AppManifest {
	s.Etag = &v
	return s
}

func (s *AppManifest) SetId(v string) *AppManifest {
	s.Id = &v
	return s
}

func (s *AppManifest) SetLocation(v string) *AppManifest {
	s.Location = &v
	return s
}

func (s *AppManifest) SetName(v string) *AppManifest {
	s.Name = &v
	return s
}

func (s *AppManifest) SetRemark(v string) *AppManifest {
	s.Remark = &v
	return s
}

func (s *AppManifest) SetStoreLocation(v string) *AppManifest {
	s.StoreLocation = &v
	return s
}

func (s *AppManifest) SetUtcCreate(v string) *AppManifest {
	s.UtcCreate = &v
	return s
}

func (s *AppManifest) SetUtcModified(v string) *AppManifest {
	s.UtcModified = &v
	return s
}

func (s *AppManifest) SetWorkspaceId(v string) *AppManifest {
	s.WorkspaceId = &v
	return s
}

// Database ImportVO
type ImportVO struct {
	// is_imported
	IsImported *bool `json:"is_imported,omitempty" xml:"is_imported,omitempty" require:"true"`
	// imported_workspace_name
	ImportedWorkspaceName *string `json:"imported_workspace_name,omitempty" xml:"imported_workspace_name,omitempty" require:"true"`
	// is_unimportable
	IsUnimportable *bool `json:"is_unimportable,omitempty" xml:"is_unimportable,omitempty"`
	// unimportable_reason
	UnimportableReason *string `json:"unimportable_reason,omitempty" xml:"unimportable_reason,omitempty"`
}

func (s ImportVO) String() string {
	return tea.Prettify(s)
}

func (s ImportVO) GoString() string {
	return s.String()
}

func (s *ImportVO) SetIsImported(v bool) *ImportVO {
	s.IsImported = &v
	return s
}

func (s *ImportVO) SetImportedWorkspaceName(v string) *ImportVO {
	s.ImportedWorkspaceName = &v
	return s
}

func (s *ImportVO) SetIsUnimportable(v bool) *ImportVO {
	s.IsUnimportable = &v
	return s
}

func (s *ImportVO) SetUnimportableReason(v string) *ImportVO {
	s.UnimportableReason = &v
	return s
}

// 监听器健康检查配置
type ListenerHealthMonitor struct {
	// check_type
	CheckType *string `json:"check_type,omitempty" xml:"check_type,omitempty"`
	// 默认 80
	ConnectPort *int64 `json:"connect_port,omitempty" xml:"connect_port,omitempty"`
	// 域名
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty"`
	// 健康阈值
	HealthyThreshold *int64 `json:"healthy_threshold,omitempty" xml:"healthy_threshold,omitempty"`
	// health_check_http_code
	HealthCheckHttpCode []*string `json:"health_check_http_code,omitempty" xml:"health_check_http_code,omitempty" type:"Repeated"`
	// http_method
	HttpMethod *string `json:"http_method,omitempty" xml:"http_method,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 监控检查间隔
	Interval *int64 `json:"interval,omitempty" xml:"interval,omitempty" require:"true"`
	// 超时时间
	Timeout *int64 `json:"timeout,omitempty" xml:"timeout,omitempty" require:"true"`
	// 不健康阈值
	UnHealthyThreshold *int64 `json:"un_healthy_threshold,omitempty" xml:"un_healthy_threshold,omitempty"`
	// uri
	Uri *string `json:"uri,omitempty" xml:"uri,omitempty"`
}

func (s ListenerHealthMonitor) String() string {
	return tea.Prettify(s)
}

func (s ListenerHealthMonitor) GoString() string {
	return s.String()
}

func (s *ListenerHealthMonitor) SetCheckType(v string) *ListenerHealthMonitor {
	s.CheckType = &v
	return s
}

func (s *ListenerHealthMonitor) SetConnectPort(v int64) *ListenerHealthMonitor {
	s.ConnectPort = &v
	return s
}

func (s *ListenerHealthMonitor) SetDomain(v string) *ListenerHealthMonitor {
	s.Domain = &v
	return s
}

func (s *ListenerHealthMonitor) SetHealthyThreshold(v int64) *ListenerHealthMonitor {
	s.HealthyThreshold = &v
	return s
}

func (s *ListenerHealthMonitor) SetHealthCheckHttpCode(v []*string) *ListenerHealthMonitor {
	s.HealthCheckHttpCode = v
	return s
}

func (s *ListenerHealthMonitor) SetHttpMethod(v string) *ListenerHealthMonitor {
	s.HttpMethod = &v
	return s
}

func (s *ListenerHealthMonitor) SetId(v string) *ListenerHealthMonitor {
	s.Id = &v
	return s
}

func (s *ListenerHealthMonitor) SetInterval(v int64) *ListenerHealthMonitor {
	s.Interval = &v
	return s
}

func (s *ListenerHealthMonitor) SetTimeout(v int64) *ListenerHealthMonitor {
	s.Timeout = &v
	return s
}

func (s *ListenerHealthMonitor) SetUnHealthyThreshold(v int64) *ListenerHealthMonitor {
	s.UnHealthyThreshold = &v
	return s
}

func (s *ListenerHealthMonitor) SetUri(v string) *ListenerHealthMonitor {
	s.Uri = &v
	return s
}

// request中的单个任务
type Task struct {
	// context
	Context *string `json:"context,omitempty" xml:"context,omitempty"`
	// execution_times
	ExecutionTimes *int64 `json:"execution_times,omitempty" xml:"execution_times,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// resource_id
	ResourceId *string `json:"resource_id,omitempty" xml:"resource_id,omitempty"`
	// resource_type
	ResourceType *string `json:"resource_type,omitempty" xml:"resource_type,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// utc_create
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// utc_modified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// request
	Request *TaskRequest `json:"request,omitempty" xml:"request,omitempty"`
}

func (s Task) String() string {
	return tea.Prettify(s)
}

func (s Task) GoString() string {
	return s.String()
}

func (s *Task) SetContext(v string) *Task {
	s.Context = &v
	return s
}

func (s *Task) SetExecutionTimes(v int64) *Task {
	s.ExecutionTimes = &v
	return s
}

func (s *Task) SetId(v string) *Task {
	s.Id = &v
	return s
}

func (s *Task) SetResourceId(v string) *Task {
	s.ResourceId = &v
	return s
}

func (s *Task) SetResourceType(v string) *Task {
	s.ResourceType = &v
	return s
}

func (s *Task) SetStatus(v string) *Task {
	s.Status = &v
	return s
}

func (s *Task) SetUtcCreate(v string) *Task {
	s.UtcCreate = &v
	return s
}

func (s *Task) SetUtcModified(v string) *Task {
	s.UtcModified = &v
	return s
}

func (s *Task) SetWorkspaceId(v string) *Task {
	s.WorkspaceId = &v
	return s
}

func (s *Task) SetRequest(v *TaskRequest) *Task {
	s.Request = v
	return s
}

// WorkspaceRegion
type WorkspaceRegion struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// workspaceId
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// regionId
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty" require:"true"`
	// type
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// securedIsolationIdentity
	SecuredIsolationIdentity *string `json:"secured_isolation_identity,omitempty" xml:"secured_isolation_identity,omitempty" require:"true"`
	// securedIsolationName
	SecuredIsolationName *string `json:"secured_isolation_name,omitempty" xml:"secured_isolation_name,omitempty" require:"true"`
	// securedZoneId
	SecuredZoneId *string `json:"secured_zone_id,omitempty" xml:"secured_zone_id,omitempty" require:"true"`
}

func (s WorkspaceRegion) String() string {
	return tea.Prettify(s)
}

func (s WorkspaceRegion) GoString() string {
	return s.String()
}

func (s *WorkspaceRegion) SetId(v string) *WorkspaceRegion {
	s.Id = &v
	return s
}

func (s *WorkspaceRegion) SetWorkspaceId(v string) *WorkspaceRegion {
	s.WorkspaceId = &v
	return s
}

func (s *WorkspaceRegion) SetRegionId(v string) *WorkspaceRegion {
	s.RegionId = &v
	return s
}

func (s *WorkspaceRegion) SetType(v string) *WorkspaceRegion {
	s.Type = &v
	return s
}

func (s *WorkspaceRegion) SetSecuredIsolationIdentity(v string) *WorkspaceRegion {
	s.SecuredIsolationIdentity = &v
	return s
}

func (s *WorkspaceRegion) SetSecuredIsolationName(v string) *WorkspaceRegion {
	s.SecuredIsolationName = &v
	return s
}

func (s *WorkspaceRegion) SetSecuredZoneId(v string) *WorkspaceRegion {
	s.SecuredZoneId = &v
	return s
}

// LB后端专用的vComputerGroup
type VComputerGroup struct {
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// load_balancer
	LoadBalancer *LoadBalancer `json:"load_balancer,omitempty" xml:"load_balancer,omitempty" require:"true"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
}

func (s VComputerGroup) String() string {
	return tea.Prettify(s)
}

func (s VComputerGroup) GoString() string {
	return s.String()
}

func (s *VComputerGroup) SetName(v string) *VComputerGroup {
	s.Name = &v
	return s
}

func (s *VComputerGroup) SetId(v string) *VComputerGroup {
	s.Id = &v
	return s
}

func (s *VComputerGroup) SetWorkspaceId(v string) *VComputerGroup {
	s.WorkspaceId = &v
	return s
}

func (s *VComputerGroup) SetLoadBalancer(v *LoadBalancer) *VComputerGroup {
	s.LoadBalancer = v
	return s
}

func (s *VComputerGroup) SetStatus(v string) *VComputerGroup {
	s.Status = &v
	return s
}

// 部署单元（Cell）
type CellView struct {
	// 部署单元对应的paas id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 部署单元名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 部署单元显示名称
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// 部署单元描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// deploymentZoneId
	DeploymentZoneId *string `json:"deployment_zone_id,omitempty" xml:"deployment_zone_id,omitempty"`
	// workspaceId
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// workspaceGroupId
	WorkspaceGroupId *string `json:"workspace_group_id,omitempty" xml:"workspace_group_id,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// masterZoneId
	MasterZoneId *string `json:"master_zone_id,omitempty" xml:"master_zone_id,omitempty"`
	// appendedZoneIds
	AppendedZoneIds []*string `json:"appended_zone_ids,omitempty" xml:"appended_zone_ids,omitempty" type:"Repeated"`
	// List<ZoneView> zones
	Zones []*ZoneView `json:"zones,omitempty" xml:"zones,omitempty" type:"Repeated"`
}

func (s CellView) String() string {
	return tea.Prettify(s)
}

func (s CellView) GoString() string {
	return s.String()
}

func (s *CellView) SetId(v string) *CellView {
	s.Id = &v
	return s
}

func (s *CellView) SetName(v string) *CellView {
	s.Name = &v
	return s
}

func (s *CellView) SetDisplayName(v string) *CellView {
	s.DisplayName = &v
	return s
}

func (s *CellView) SetDescription(v string) *CellView {
	s.Description = &v
	return s
}

func (s *CellView) SetDeploymentZoneId(v string) *CellView {
	s.DeploymentZoneId = &v
	return s
}

func (s *CellView) SetWorkspaceId(v string) *CellView {
	s.WorkspaceId = &v
	return s
}

func (s *CellView) SetWorkspaceGroupId(v string) *CellView {
	s.WorkspaceGroupId = &v
	return s
}

func (s *CellView) SetStatus(v string) *CellView {
	s.Status = &v
	return s
}

func (s *CellView) SetMasterZoneId(v string) *CellView {
	s.MasterZoneId = &v
	return s
}

func (s *CellView) SetAppendedZoneIds(v []*string) *CellView {
	s.AppendedZoneIds = v
	return s
}

func (s *CellView) SetZones(v []*ZoneView) *CellView {
	s.Zones = v
	return s
}

// vpc import info
type ImportInfo struct {
	// 已导入的workspace name
	ImportedWorkspaceName *string `json:"imported_workspace_name,omitempty" xml:"imported_workspace_name,omitempty"`
	// vpc是否已导入workspace
	IsImported *bool `json:"is_imported,omitempty" xml:"is_imported,omitempty"`
	// 是否可以删除已导入的workspace
	IsUnimportable *bool `json:"is_unimportable,omitempty" xml:"is_unimportable,omitempty"`
	// 不可删除已导入workspace的原因
	UnimportableReason *string `json:"unimportable_reason,omitempty" xml:"unimportable_reason,omitempty"`
}

func (s ImportInfo) String() string {
	return tea.Prettify(s)
}

func (s ImportInfo) GoString() string {
	return s.String()
}

func (s *ImportInfo) SetImportedWorkspaceName(v string) *ImportInfo {
	s.ImportedWorkspaceName = &v
	return s
}

func (s *ImportInfo) SetIsImported(v bool) *ImportInfo {
	s.IsImported = &v
	return s
}

func (s *ImportInfo) SetIsUnimportable(v bool) *ImportInfo {
	s.IsUnimportable = &v
	return s
}

func (s *ImportInfo) SetUnimportableReason(v string) *ImportInfo {
	s.UnimportableReason = &v
	return s
}

// IaasRequest
type IaasRequest struct {
	// requestMethod
	RequestMethod *string `json:"request_method,omitempty" xml:"request_method,omitempty"`
	// requestUrl
	RequestUrl *string `json:"request_url,omitempty" xml:"request_url,omitempty"`
	// requestBody
	RequestBody *string `json:"request_body,omitempty" xml:"request_body,omitempty"`
	// request_headers
	RequestHeaders []*MapStringToStringEntity `json:"request_headers,omitempty" xml:"request_headers,omitempty" type:"Repeated"`
}

func (s IaasRequest) String() string {
	return tea.Prettify(s)
}

func (s IaasRequest) GoString() string {
	return s.String()
}

func (s *IaasRequest) SetRequestMethod(v string) *IaasRequest {
	s.RequestMethod = &v
	return s
}

func (s *IaasRequest) SetRequestUrl(v string) *IaasRequest {
	s.RequestUrl = &v
	return s
}

func (s *IaasRequest) SetRequestBody(v string) *IaasRequest {
	s.RequestBody = &v
	return s
}

func (s *IaasRequest) SetRequestHeaders(v []*MapStringToStringEntity) *IaasRequest {
	s.RequestHeaders = v
	return s
}

// property
type Property struct {
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// value
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s Property) String() string {
	return tea.Prettify(s)
}

func (s Property) GoString() string {
	return s.String()
}

func (s *Property) SetKey(v string) *Property {
	s.Key = &v
	return s
}

func (s *Property) SetValue(v string) *Property {
	s.Value = &v
	return s
}

// WorkspaceWithGroupView
type WorkspaceWithGroupView struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// networkType
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty" require:"true"`
	// region
	Region *RegionView `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// tenantId
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// zones
	Zones []*WorkspaceZoneView `json:"zones,omitempty" xml:"zones,omitempty" require:"true" type:"Repeated"`
	// workspaceGroup
	WorkspaceGroup *WorkspaceGroupView `json:"workspace_group,omitempty" xml:"workspace_group,omitempty" require:"true"`
}

func (s WorkspaceWithGroupView) String() string {
	return tea.Prettify(s)
}

func (s WorkspaceWithGroupView) GoString() string {
	return s.String()
}

func (s *WorkspaceWithGroupView) SetId(v string) *WorkspaceWithGroupView {
	s.Id = &v
	return s
}

func (s *WorkspaceWithGroupView) SetIdentity(v string) *WorkspaceWithGroupView {
	s.Identity = &v
	return s
}

func (s *WorkspaceWithGroupView) SetName(v string) *WorkspaceWithGroupView {
	s.Name = &v
	return s
}

func (s *WorkspaceWithGroupView) SetNetworkType(v string) *WorkspaceWithGroupView {
	s.NetworkType = &v
	return s
}

func (s *WorkspaceWithGroupView) SetRegion(v *RegionView) *WorkspaceWithGroupView {
	s.Region = v
	return s
}

func (s *WorkspaceWithGroupView) SetStatus(v string) *WorkspaceWithGroupView {
	s.Status = &v
	return s
}

func (s *WorkspaceWithGroupView) SetTenantId(v string) *WorkspaceWithGroupView {
	s.TenantId = &v
	return s
}

func (s *WorkspaceWithGroupView) SetZones(v []*WorkspaceZoneView) *WorkspaceWithGroupView {
	s.Zones = v
	return s
}

func (s *WorkspaceWithGroupView) SetWorkspaceGroup(v *WorkspaceGroupView) *WorkspaceWithGroupView {
	s.WorkspaceGroup = v
	return s
}

// AcsClusterUnit
type AcsClusterUnit struct {
	// cluster_id
	ClusterId *string `json:"cluster_id,omitempty" xml:"cluster_id,omitempty" require:"true"`
	// address
	Address *string `json:"address,omitempty" xml:"address,omitempty"`
	// unit_status
	UnitStatus *int64 `json:"unit_status,omitempty" xml:"unit_status,omitempty"`
	// create_time
	CreateTime *string `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// modify_time
	ModifyTime *string `json:"modify_time,omitempty" xml:"modify_time,omitempty"`
	// container_id
	ContainerId *string `json:"container_id,omitempty" xml:"container_id,omitempty"`
}

func (s AcsClusterUnit) String() string {
	return tea.Prettify(s)
}

func (s AcsClusterUnit) GoString() string {
	return s.String()
}

func (s *AcsClusterUnit) SetClusterId(v string) *AcsClusterUnit {
	s.ClusterId = &v
	return s
}

func (s *AcsClusterUnit) SetAddress(v string) *AcsClusterUnit {
	s.Address = &v
	return s
}

func (s *AcsClusterUnit) SetUnitStatus(v int64) *AcsClusterUnit {
	s.UnitStatus = &v
	return s
}

func (s *AcsClusterUnit) SetCreateTime(v string) *AcsClusterUnit {
	s.CreateTime = &v
	return s
}

func (s *AcsClusterUnit) SetModifyTime(v string) *AcsClusterUnit {
	s.ModifyTime = &v
	return s
}

func (s *AcsClusterUnit) SetContainerId(v string) *AcsClusterUnit {
	s.ContainerId = &v
	return s
}

// ConnectionStub
type ConnectionStub struct {
	// cloud
	Cloud *Cloud `json:"cloud,omitempty" xml:"cloud,omitempty"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// tenant_id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// type
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s ConnectionStub) String() string {
	return tea.Prettify(s)
}

func (s ConnectionStub) GoString() string {
	return s.String()
}

func (s *ConnectionStub) SetCloud(v *Cloud) *ConnectionStub {
	s.Cloud = v
	return s
}

func (s *ConnectionStub) SetId(v int64) *ConnectionStub {
	s.Id = &v
	return s
}

func (s *ConnectionStub) SetTenantId(v string) *ConnectionStub {
	s.TenantId = &v
	return s
}

func (s *ConnectionStub) SetTenantName(v string) *ConnectionStub {
	s.TenantName = &v
	return s
}

func (s *ConnectionStub) SetType(v string) *ConnectionStub {
	s.Type = &v
	return s
}

// 阿里云日志服务(SLS) - 日志内容，是一个键值对
type SLSLogContent struct {
	// 键名
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// 键值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s SLSLogContent) String() string {
	return tea.Prettify(s)
}

func (s SLSLogContent) GoString() string {
	return s.String()
}

func (s *SLSLogContent) SetKey(v string) *SLSLogContent {
	s.Key = &v
	return s
}

func (s *SLSLogContent) SetValue(v string) *SLSLogContent {
	s.Value = &v
	return s
}

// WorkspaceRegionDto
type WorkspaceRegionDto struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// networkType
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty"`
	// region id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty" require:"true"`
	// regionName
	RegionName *string `json:"region_name,omitempty" xml:"region_name,omitempty"`
	// 安全域id
	SecuredZoneId *string `json:"secured_zone_id,omitempty" xml:"secured_zone_id,omitempty"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// workspaceLogicRegionStatus
	WorkspaceLogicRegionStatus *string `json:"workspace_logic_region_status,omitempty" xml:"workspace_logic_region_status,omitempty"`
	// workspaceLogicRegionType
	WorkspaceLogicRegionType *string `json:"workspace_logic_region_type,omitempty" xml:"workspace_logic_region_type,omitempty"`
	// workspaceZoneDtos
	WorkspaceZoneDtos []*WorkspaceZoneDto `json:"workspace_zone_dtos,omitempty" xml:"workspace_zone_dtos,omitempty" type:"Repeated"`
}

func (s WorkspaceRegionDto) String() string {
	return tea.Prettify(s)
}

func (s WorkspaceRegionDto) GoString() string {
	return s.String()
}

func (s *WorkspaceRegionDto) SetId(v string) *WorkspaceRegionDto {
	s.Id = &v
	return s
}

func (s *WorkspaceRegionDto) SetNetworkType(v string) *WorkspaceRegionDto {
	s.NetworkType = &v
	return s
}

func (s *WorkspaceRegionDto) SetRegionId(v string) *WorkspaceRegionDto {
	s.RegionId = &v
	return s
}

func (s *WorkspaceRegionDto) SetRegionName(v string) *WorkspaceRegionDto {
	s.RegionName = &v
	return s
}

func (s *WorkspaceRegionDto) SetSecuredZoneId(v string) *WorkspaceRegionDto {
	s.SecuredZoneId = &v
	return s
}

func (s *WorkspaceRegionDto) SetWorkspaceId(v string) *WorkspaceRegionDto {
	s.WorkspaceId = &v
	return s
}

func (s *WorkspaceRegionDto) SetWorkspaceLogicRegionStatus(v string) *WorkspaceRegionDto {
	s.WorkspaceLogicRegionStatus = &v
	return s
}

func (s *WorkspaceRegionDto) SetWorkspaceLogicRegionType(v string) *WorkspaceRegionDto {
	s.WorkspaceLogicRegionType = &v
	return s
}

func (s *WorkspaceRegionDto) SetWorkspaceZoneDtos(v []*WorkspaceZoneDto) *WorkspaceRegionDto {
	s.WorkspaceZoneDtos = v
	return s
}

// 表示单个云服务器
type Computer struct {
	// app_id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// appServiceIds
	AppServiceIds []*string `json:"app_service_ids,omitempty" xml:"app_service_ids,omitempty" type:"Repeated"`
	// assignedAppServiceIds
	AssignedAppServiceIds []*string `json:"assigned_app_service_ids,omitempty" xml:"assigned_app_service_ids,omitempty" type:"Repeated"`
	// 是否自动续费
	AutoRenew *bool `json:"auto_renew,omitempty" xml:"auto_renew,omitempty"`
	// 每次自动续费的时长，当参数AutoRenew取值True时为必填。
	AutoRenewPeriod *int64 `json:"auto_renew_period,omitempty" xml:"auto_renew_period,omitempty"`
	// bandwidth
	Bandwidth *int64 `json:"bandwidth,omitempty" xml:"bandwidth,omitempty"`
	// common_image
	CommonImage *bool `json:"common_image,omitempty" xml:"common_image,omitempty"`
	// vCPU数。
	Cpu *int64 `json:"cpu,omitempty" xml:"cpu,omitempty"`
	// cpu_shared
	CpuShared *bool `json:"cpu_shared,omitempty" xml:"cpu_shared,omitempty"`
	// 实例创建时间
	CreationTime *string `json:"creation_time,omitempty" xml:"creation_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// data_disk
	DataDisks []*Disk `json:"data_disks,omitempty" xml:"data_disks,omitempty" type:"Repeated"`
	// 这是SIGMA模式下的专用字段，阿里云模式下无意义
	DeployMode *string `json:"deploy_mode,omitempty" xml:"deploy_mode,omitempty"`
	// 服务器描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// elastic_ip
	ElasticIp *string `json:"elastic_ip,omitempty" xml:"elastic_ip,omitempty"`
	// 过期时间
	ExpiredTime *string `json:"expired_time,omitempty" xml:"expired_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// ecs iaas id
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// iaasStatus
	IaasStatus *string `json:"iaas_status,omitempty" xml:"iaas_status,omitempty"`
	// iaasType
	IaasType *string `json:"iaas_type,omitempty" xml:"iaas_type,omitempty"`
	// 主机id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// image_iaas_id
	ImageIaasId *string `json:"image_iaas_id,omitempty" xml:"image_iaas_id,omitempty"`
	// image_id
	ImageId *string `json:"image_id,omitempty" xml:"image_id,omitempty"`
	// image_name
	ImageName *string `json:"image_name,omitempty" xml:"image_name,omitempty"`
	// initialized
	Initialized *bool `json:"initialized,omitempty" xml:"initialized,omitempty"`
	// instanceChargeType
	InstanceChargeType *string `json:"instance_charge_type,omitempty" xml:"instance_charge_type,omitempty"`
	// io_optimized
	IoOptimized *bool `json:"io_optimized,omitempty" xml:"io_optimized,omitempty"`
	// last_ops_order_id
	LastOpsOrderId *string `json:"last_ops_order_id,omitempty" xml:"last_ops_order_id,omitempty"`
	// last_ops_type
	LastOpsType *string `json:"last_ops_type,omitempty" xml:"last_ops_type,omitempty"`
	// memory
	Memory *int64 `json:"memory,omitempty" xml:"memory,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// networkType
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty"`
	// Options字段
	Options []*MapStringToStringEntity `json:"options,omitempty" xml:"options,omitempty" type:"Repeated"`
	// os
	Os *string `json:"os,omitempty" xml:"os,omitempty"`
	// os_bit
	OsBit *int64 `json:"os_bit,omitempty" xml:"os_bit,omitempty"`
	// os_version
	OsVersion *string `json:"os_version,omitempty" xml:"os_version,omitempty"`
	// paas_status
	PaasStatus *string `json:"paas_status,omitempty" xml:"paas_status,omitempty"`
	// password
	Password *string `json:"password,omitempty" xml:"password,omitempty"`
	// private_ip
	PrivateIp *string `json:"private_ip,omitempty" xml:"private_ip,omitempty"`
	// providerId
	ProviderId *string `json:"provider_id,omitempty" xml:"provider_id,omitempty"`
	// public_ip
	PublicIp *string `json:"public_ip,omitempty" xml:"public_ip,omitempty"`
	// regionId
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// serial_number
	SerialNumber *string `json:"serial_number,omitempty" xml:"serial_number,omitempty"`
	// spec_iaas_id
	SpecIaasId *string `json:"spec_iaas_id,omitempty" xml:"spec_iaas_id,omitempty"`
	// 实例状态。
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// system_disk
	SystemDisk *Disk `json:"system_disk,omitempty" xml:"system_disk,omitempty"`
	// Tags
	Tags []*MapStringToStringEntity `json:"tags,omitempty" xml:"tags,omitempty" type:"Repeated"`
	// tenantId
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// tenantId2
	TenantId2 *string `json:"tenant_id2,omitempty" xml:"tenant_id2,omitempty"`
	// CPU线程数。
	ThreadsPerCore *int64 `json:"threads_per_core,omitempty" xml:"threads_per_core,omitempty"`
	// utcCreate
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// utcModified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// vpcId
	VpcId *string `json:"vpc_id,omitempty" xml:"vpc_id,omitempty"`
	// vSwitchIaasId
	VSwitchIaasId *string `json:"v_switch_iaas_id,omitempty" xml:"v_switch_iaas_id,omitempty"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// zoneId
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty"`
	// CELLA
	CellRef *string `json:"cell_ref,omitempty" xml:"cell_ref,omitempty"`
}

func (s Computer) String() string {
	return tea.Prettify(s)
}

func (s Computer) GoString() string {
	return s.String()
}

func (s *Computer) SetAppId(v string) *Computer {
	s.AppId = &v
	return s
}

func (s *Computer) SetAppServiceIds(v []*string) *Computer {
	s.AppServiceIds = v
	return s
}

func (s *Computer) SetAssignedAppServiceIds(v []*string) *Computer {
	s.AssignedAppServiceIds = v
	return s
}

func (s *Computer) SetAutoRenew(v bool) *Computer {
	s.AutoRenew = &v
	return s
}

func (s *Computer) SetAutoRenewPeriod(v int64) *Computer {
	s.AutoRenewPeriod = &v
	return s
}

func (s *Computer) SetBandwidth(v int64) *Computer {
	s.Bandwidth = &v
	return s
}

func (s *Computer) SetCommonImage(v bool) *Computer {
	s.CommonImage = &v
	return s
}

func (s *Computer) SetCpu(v int64) *Computer {
	s.Cpu = &v
	return s
}

func (s *Computer) SetCpuShared(v bool) *Computer {
	s.CpuShared = &v
	return s
}

func (s *Computer) SetCreationTime(v string) *Computer {
	s.CreationTime = &v
	return s
}

func (s *Computer) SetDataDisks(v []*Disk) *Computer {
	s.DataDisks = v
	return s
}

func (s *Computer) SetDeployMode(v string) *Computer {
	s.DeployMode = &v
	return s
}

func (s *Computer) SetDescription(v string) *Computer {
	s.Description = &v
	return s
}

func (s *Computer) SetElasticIp(v string) *Computer {
	s.ElasticIp = &v
	return s
}

func (s *Computer) SetExpiredTime(v string) *Computer {
	s.ExpiredTime = &v
	return s
}

func (s *Computer) SetIaasId(v string) *Computer {
	s.IaasId = &v
	return s
}

func (s *Computer) SetIaasStatus(v string) *Computer {
	s.IaasStatus = &v
	return s
}

func (s *Computer) SetIaasType(v string) *Computer {
	s.IaasType = &v
	return s
}

func (s *Computer) SetId(v string) *Computer {
	s.Id = &v
	return s
}

func (s *Computer) SetImageIaasId(v string) *Computer {
	s.ImageIaasId = &v
	return s
}

func (s *Computer) SetImageId(v string) *Computer {
	s.ImageId = &v
	return s
}

func (s *Computer) SetImageName(v string) *Computer {
	s.ImageName = &v
	return s
}

func (s *Computer) SetInitialized(v bool) *Computer {
	s.Initialized = &v
	return s
}

func (s *Computer) SetInstanceChargeType(v string) *Computer {
	s.InstanceChargeType = &v
	return s
}

func (s *Computer) SetIoOptimized(v bool) *Computer {
	s.IoOptimized = &v
	return s
}

func (s *Computer) SetLastOpsOrderId(v string) *Computer {
	s.LastOpsOrderId = &v
	return s
}

func (s *Computer) SetLastOpsType(v string) *Computer {
	s.LastOpsType = &v
	return s
}

func (s *Computer) SetMemory(v int64) *Computer {
	s.Memory = &v
	return s
}

func (s *Computer) SetName(v string) *Computer {
	s.Name = &v
	return s
}

func (s *Computer) SetNetworkType(v string) *Computer {
	s.NetworkType = &v
	return s
}

func (s *Computer) SetOptions(v []*MapStringToStringEntity) *Computer {
	s.Options = v
	return s
}

func (s *Computer) SetOs(v string) *Computer {
	s.Os = &v
	return s
}

func (s *Computer) SetOsBit(v int64) *Computer {
	s.OsBit = &v
	return s
}

func (s *Computer) SetOsVersion(v string) *Computer {
	s.OsVersion = &v
	return s
}

func (s *Computer) SetPaasStatus(v string) *Computer {
	s.PaasStatus = &v
	return s
}

func (s *Computer) SetPassword(v string) *Computer {
	s.Password = &v
	return s
}

func (s *Computer) SetPrivateIp(v string) *Computer {
	s.PrivateIp = &v
	return s
}

func (s *Computer) SetProviderId(v string) *Computer {
	s.ProviderId = &v
	return s
}

func (s *Computer) SetPublicIp(v string) *Computer {
	s.PublicIp = &v
	return s
}

func (s *Computer) SetRegionId(v string) *Computer {
	s.RegionId = &v
	return s
}

func (s *Computer) SetSerialNumber(v string) *Computer {
	s.SerialNumber = &v
	return s
}

func (s *Computer) SetSpecIaasId(v string) *Computer {
	s.SpecIaasId = &v
	return s
}

func (s *Computer) SetStatus(v string) *Computer {
	s.Status = &v
	return s
}

func (s *Computer) SetSystemDisk(v *Disk) *Computer {
	s.SystemDisk = v
	return s
}

func (s *Computer) SetTags(v []*MapStringToStringEntity) *Computer {
	s.Tags = v
	return s
}

func (s *Computer) SetTenantId(v string) *Computer {
	s.TenantId = &v
	return s
}

func (s *Computer) SetTenantId2(v string) *Computer {
	s.TenantId2 = &v
	return s
}

func (s *Computer) SetThreadsPerCore(v int64) *Computer {
	s.ThreadsPerCore = &v
	return s
}

func (s *Computer) SetUtcCreate(v string) *Computer {
	s.UtcCreate = &v
	return s
}

func (s *Computer) SetUtcModified(v string) *Computer {
	s.UtcModified = &v
	return s
}

func (s *Computer) SetVpcId(v string) *Computer {
	s.VpcId = &v
	return s
}

func (s *Computer) SetVSwitchIaasId(v string) *Computer {
	s.VSwitchIaasId = &v
	return s
}

func (s *Computer) SetWorkspaceId(v string) *Computer {
	s.WorkspaceId = &v
	return s
}

func (s *Computer) SetZoneId(v string) *Computer {
	s.ZoneId = &v
	return s
}

func (s *Computer) SetCellRef(v string) *Computer {
	s.CellRef = &v
	return s
}

// 路由条目的详细信息。
type VRouteEntry struct {
	// 路由条目的目标网段。
	DesinationCidrBlock *string `json:"desination_cidr_block,omitempty" xml:"desination_cidr_block,omitempty"`
	// 下一跳的实例ID。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
	// 下一跳的实例名称。
	InstanceName *string `json:"instance_name,omitempty" xml:"instance_name,omitempty"`
	// 路由条目ID。
	NextHopId *string `json:"next_hop_id,omitempty" xml:"next_hop_id,omitempty"`
	// 路由的下一跳列表。
	NextHopItemList []*NextHopItem `json:"next_hop_item_list,omitempty" xml:"next_hop_item_list,omitempty" type:"Repeated"`
	// 路由类型。
	//
	// local：交换机路由。
	// service：云服务路由。
	// classicLink：开启ClassicLink功能后系统自动添加的路由。
	NextHopType *string `json:"next_hop_type,omitempty" xml:"next_hop_type,omitempty"`
	// 路由条目所属路由表的ID。
	RouteTableId *string `json:"route_table_id,omitempty" xml:"route_table_id,omitempty"`
	//
	// 路由条目的状态。
	//
	// Pending：配置中。
	// Available：可用。
	// Modifying：修改中。
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 路由条目的类型。
	//
	// System：系统路由。
	// Custom：自定义路由。
	// BGP：BGP路由。
	//
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s VRouteEntry) String() string {
	return tea.Prettify(s)
}

func (s VRouteEntry) GoString() string {
	return s.String()
}

func (s *VRouteEntry) SetDesinationCidrBlock(v string) *VRouteEntry {
	s.DesinationCidrBlock = &v
	return s
}

func (s *VRouteEntry) SetInstanceId(v string) *VRouteEntry {
	s.InstanceId = &v
	return s
}

func (s *VRouteEntry) SetInstanceName(v string) *VRouteEntry {
	s.InstanceName = &v
	return s
}

func (s *VRouteEntry) SetNextHopId(v string) *VRouteEntry {
	s.NextHopId = &v
	return s
}

func (s *VRouteEntry) SetNextHopItemList(v []*NextHopItem) *VRouteEntry {
	s.NextHopItemList = v
	return s
}

func (s *VRouteEntry) SetNextHopType(v string) *VRouteEntry {
	s.NextHopType = &v
	return s
}

func (s *VRouteEntry) SetRouteTableId(v string) *VRouteEntry {
	s.RouteTableId = &v
	return s
}

func (s *VRouteEntry) SetStatus(v string) *VRouteEntry {
	s.Status = &v
	return s
}

func (s *VRouteEntry) SetType(v string) *VRouteEntry {
	s.Type = &v
	return s
}

// 工作空间
type Workspace struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 网络类型
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty"`
	// 租户
	Tenant *string `json:"tenant,omitempty" xml:"tenant,omitempty"`
	// 可用区 id
	ZoneIds *string `json:"zone_ids,omitempty" xml:"zone_ids,omitempty"`
	// region id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
}

func (s Workspace) String() string {
	return tea.Prettify(s)
}

func (s Workspace) GoString() string {
	return s.String()
}

func (s *Workspace) SetId(v string) *Workspace {
	s.Id = &v
	return s
}

func (s *Workspace) SetName(v string) *Workspace {
	s.Name = &v
	return s
}

func (s *Workspace) SetNetworkType(v string) *Workspace {
	s.NetworkType = &v
	return s
}

func (s *Workspace) SetTenant(v string) *Workspace {
	s.Tenant = &v
	return s
}

func (s *Workspace) SetZoneIds(v string) *Workspace {
	s.ZoneIds = &v
	return s
}

func (s *Workspace) SetRegionId(v string) *Workspace {
	s.RegionId = &v
	return s
}

// getfinaltask专用数据解雇，包含resource的详细信息
type TaskVO struct {
	// context
	Context *string `json:"context,omitempty" xml:"context,omitempty" require:"true"`
	// execution_times
	ExecutionTimes *int64 `json:"execution_times,omitempty" xml:"execution_times,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// request
	Request *TaskRequest `json:"request,omitempty" xml:"request,omitempty"`
	// resource_id
	ResourceId *string `json:"resource_id,omitempty" xml:"resource_id,omitempty"`
	// resource_type
	ResourceType *string `json:"resource_type,omitempty" xml:"resource_type,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// utc_create
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// utc_modified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// resource
	Resource *Resource `json:"resource,omitempty" xml:"resource,omitempty" require:"true"`
}

func (s TaskVO) String() string {
	return tea.Prettify(s)
}

func (s TaskVO) GoString() string {
	return s.String()
}

func (s *TaskVO) SetContext(v string) *TaskVO {
	s.Context = &v
	return s
}

func (s *TaskVO) SetExecutionTimes(v int64) *TaskVO {
	s.ExecutionTimes = &v
	return s
}

func (s *TaskVO) SetId(v string) *TaskVO {
	s.Id = &v
	return s
}

func (s *TaskVO) SetRequest(v *TaskRequest) *TaskVO {
	s.Request = v
	return s
}

func (s *TaskVO) SetResourceId(v string) *TaskVO {
	s.ResourceId = &v
	return s
}

func (s *TaskVO) SetResourceType(v string) *TaskVO {
	s.ResourceType = &v
	return s
}

func (s *TaskVO) SetStatus(v string) *TaskVO {
	s.Status = &v
	return s
}

func (s *TaskVO) SetUtcCreate(v string) *TaskVO {
	s.UtcCreate = &v
	return s
}

func (s *TaskVO) SetUtcModified(v string) *TaskVO {
	s.UtcModified = &v
	return s
}

func (s *TaskVO) SetWorkspaceId(v string) *TaskVO {
	s.WorkspaceId = &v
	return s
}

func (s *TaskVO) SetResource(v *Resource) *TaskVO {
	s.Resource = v
	return s
}

// 应用查询
type AppQuery struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// tenantId
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// chineseName
	ChineseName *string `json:"chinese_name,omitempty" xml:"chinese_name,omitempty"`
	// stackId
	StackId *string `json:"stack_id,omitempty" xml:"stack_id,omitempty"`
	// startVersion
	StartVersion *string `json:"start_version,omitempty" xml:"start_version,omitempty"`
	// endVersion
	EndVersion *string `json:"end_version,omitempty" xml:"end_version,omitempty"`
	// appIds
	AppIds []*string `json:"app_ids,omitempty" xml:"app_ids,omitempty" type:"Repeated"`
	// appDomainId
	AppDomainId *string `json:"app_domain_id,omitempty" xml:"app_domain_id,omitempty"`
	// appDomainIds
	AppDomainIds []*string `json:"app_domain_ids,omitempty" xml:"app_domain_ids,omitempty" type:"Repeated"`
	// appDomainName
	AppDomainName *string `json:"app_domain_name,omitempty" xml:"app_domain_name,omitempty"`
	// appLevelId
	AppLevelId *string `json:"app_level_id,omitempty" xml:"app_level_id,omitempty"`
	// ownerId
	OwnerId *string `json:"owner_id,omitempty" xml:"owner_id,omitempty"`
	// isComponent
	IsComponent *bool `json:"is_component,omitempty" xml:"is_component,omitempty"`
	// simpleQuery
	SimpleQuery *bool `json:"simple_query,omitempty" xml:"simple_query,omitempty"`
	// workspaceId
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// containerCount
	ContainerCount *string `json:"container_count,omitempty" xml:"container_count,omitempty"`
	// databaseCount
	DatabaseCount *string `json:"database_count,omitempty" xml:"database_count,omitempty"`
	// slbCount
	SlbCount *string `json:"slb_count,omitempty" xml:"slb_count,omitempty"`
	// utcCreate
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// isOnePartyRequest
	IsOnePartyRequest *bool `json:"is_one_party_request,omitempty" xml:"is_one_party_request,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 当前页数
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// orders
	Orders []*string `json:"orders,omitempty" xml:"orders,omitempty" type:"Repeated"`
	// queryType
	QueryType *string `json:"query_type,omitempty" xml:"query_type,omitempty"`
}

func (s AppQuery) String() string {
	return tea.Prettify(s)
}

func (s AppQuery) GoString() string {
	return s.String()
}

func (s *AppQuery) SetId(v string) *AppQuery {
	s.Id = &v
	return s
}

func (s *AppQuery) SetTenantId(v string) *AppQuery {
	s.TenantId = &v
	return s
}

func (s *AppQuery) SetName(v string) *AppQuery {
	s.Name = &v
	return s
}

func (s *AppQuery) SetChineseName(v string) *AppQuery {
	s.ChineseName = &v
	return s
}

func (s *AppQuery) SetStackId(v string) *AppQuery {
	s.StackId = &v
	return s
}

func (s *AppQuery) SetStartVersion(v string) *AppQuery {
	s.StartVersion = &v
	return s
}

func (s *AppQuery) SetEndVersion(v string) *AppQuery {
	s.EndVersion = &v
	return s
}

func (s *AppQuery) SetAppIds(v []*string) *AppQuery {
	s.AppIds = v
	return s
}

func (s *AppQuery) SetAppDomainId(v string) *AppQuery {
	s.AppDomainId = &v
	return s
}

func (s *AppQuery) SetAppDomainIds(v []*string) *AppQuery {
	s.AppDomainIds = v
	return s
}

func (s *AppQuery) SetAppDomainName(v string) *AppQuery {
	s.AppDomainName = &v
	return s
}

func (s *AppQuery) SetAppLevelId(v string) *AppQuery {
	s.AppLevelId = &v
	return s
}

func (s *AppQuery) SetOwnerId(v string) *AppQuery {
	s.OwnerId = &v
	return s
}

func (s *AppQuery) SetIsComponent(v bool) *AppQuery {
	s.IsComponent = &v
	return s
}

func (s *AppQuery) SetSimpleQuery(v bool) *AppQuery {
	s.SimpleQuery = &v
	return s
}

func (s *AppQuery) SetWorkspaceId(v string) *AppQuery {
	s.WorkspaceId = &v
	return s
}

func (s *AppQuery) SetContainerCount(v string) *AppQuery {
	s.ContainerCount = &v
	return s
}

func (s *AppQuery) SetDatabaseCount(v string) *AppQuery {
	s.DatabaseCount = &v
	return s
}

func (s *AppQuery) SetSlbCount(v string) *AppQuery {
	s.SlbCount = &v
	return s
}

func (s *AppQuery) SetUtcCreate(v string) *AppQuery {
	s.UtcCreate = &v
	return s
}

func (s *AppQuery) SetIsOnePartyRequest(v bool) *AppQuery {
	s.IsOnePartyRequest = &v
	return s
}

func (s *AppQuery) SetPageSize(v int64) *AppQuery {
	s.PageSize = &v
	return s
}

func (s *AppQuery) SetCurrentPage(v int64) *AppQuery {
	s.CurrentPage = &v
	return s
}

func (s *AppQuery) SetOrders(v []*string) *AppQuery {
	s.Orders = v
	return s
}

func (s *AppQuery) SetQueryType(v string) *AppQuery {
	s.QueryType = &v
	return s
}

// 应用画像可用性结构体
type AppPortraitAppUsability struct {
	// 应用id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
	// 应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 应用可用性
	AppUsability *string `json:"app_usability,omitempty" xml:"app_usability,omitempty"`
	// 年同比
	Y2y *string `json:"y2y,omitempty" xml:"y2y,omitempty"`
	// 原因列表
	ReasonList []*string `json:"reason_list,omitempty" xml:"reason_list,omitempty" type:"Repeated"`
}

func (s AppPortraitAppUsability) String() string {
	return tea.Prettify(s)
}

func (s AppPortraitAppUsability) GoString() string {
	return s.String()
}

func (s *AppPortraitAppUsability) SetAppId(v string) *AppPortraitAppUsability {
	s.AppId = &v
	return s
}

func (s *AppPortraitAppUsability) SetAppName(v string) *AppPortraitAppUsability {
	s.AppName = &v
	return s
}

func (s *AppPortraitAppUsability) SetAppUsability(v string) *AppPortraitAppUsability {
	s.AppUsability = &v
	return s
}

func (s *AppPortraitAppUsability) SetY2y(v string) *AppPortraitAppUsability {
	s.Y2y = &v
	return s
}

func (s *AppPortraitAppUsability) SetReasonList(v []*string) *AppPortraitAppUsability {
	s.ReasonList = v
	return s
}

// 应用分级查询
type AppLevelQuery struct {
	// appCountInclude
	AppCountInclude *bool `json:"app_count_include,omitempty" xml:"app_count_include,omitempty"`
	// creator_id
	CreatorId *string `json:"creator_id,omitempty" xml:"creator_id,omitempty"`
	// is_one_party_request
	IsOnePartyRequest *bool `json:"is_one_party_request,omitempty" xml:"is_one_party_request,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// tenant_id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// utc_create
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 当前页数
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// orders
	Orders []*string `json:"orders,omitempty" xml:"orders,omitempty" type:"Repeated"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// query_type
	QueryType *string `json:"query_type,omitempty" xml:"query_type,omitempty"`
}

func (s AppLevelQuery) String() string {
	return tea.Prettify(s)
}

func (s AppLevelQuery) GoString() string {
	return s.String()
}

func (s *AppLevelQuery) SetAppCountInclude(v bool) *AppLevelQuery {
	s.AppCountInclude = &v
	return s
}

func (s *AppLevelQuery) SetCreatorId(v string) *AppLevelQuery {
	s.CreatorId = &v
	return s
}

func (s *AppLevelQuery) SetIsOnePartyRequest(v bool) *AppLevelQuery {
	s.IsOnePartyRequest = &v
	return s
}

func (s *AppLevelQuery) SetName(v string) *AppLevelQuery {
	s.Name = &v
	return s
}

func (s *AppLevelQuery) SetTenantId(v string) *AppLevelQuery {
	s.TenantId = &v
	return s
}

func (s *AppLevelQuery) SetUtcCreate(v string) *AppLevelQuery {
	s.UtcCreate = &v
	return s
}

func (s *AppLevelQuery) SetCurrentPage(v int64) *AppLevelQuery {
	s.CurrentPage = &v
	return s
}

func (s *AppLevelQuery) SetOrders(v []*string) *AppLevelQuery {
	s.Orders = v
	return s
}

func (s *AppLevelQuery) SetPageSize(v int64) *AppLevelQuery {
	s.PageSize = &v
	return s
}

func (s *AppLevelQuery) SetQueryType(v string) *AppLevelQuery {
	s.QueryType = &v
	return s
}

// ComputerType
type ComputerType struct {
	// cpu core count
	CpuCoreCount *int64 `json:"cpu_core_count,omitempty" xml:"cpu_core_count,omitempty"`
	// instance type id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 实例规格族
	InstanceTypeFamily *string `json:"instance_type_family,omitempty" xml:"instance_type_family,omitempty"`
	// memory size
	MemorySize *int64 `json:"memory_size,omitempty" xml:"memory_size,omitempty"`
	// 实例状态，可能值： Available：资源充足 Sold...
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
}

func (s ComputerType) String() string {
	return tea.Prettify(s)
}

func (s ComputerType) GoString() string {
	return s.String()
}

func (s *ComputerType) SetCpuCoreCount(v int64) *ComputerType {
	s.CpuCoreCount = &v
	return s
}

func (s *ComputerType) SetId(v string) *ComputerType {
	s.Id = &v
	return s
}

func (s *ComputerType) SetInstanceTypeFamily(v string) *ComputerType {
	s.InstanceTypeFamily = &v
	return s
}

func (s *ComputerType) SetMemorySize(v int64) *ComputerType {
	s.MemorySize = &v
	return s
}

func (s *ComputerType) SetStatus(v string) *ComputerType {
	s.Status = &v
	return s
}

// computer 数据盘
type DataDisk struct {
	// 磁盘大小
	Size *int64 `json:"size,omitempty" xml:"size,omitempty" require:"true"`
	// 若使用磁盘创建，需填写此字段
	SnapshotSequence *string `json:"snapshot_sequence,omitempty" xml:"snapshot_sequence,omitempty"`
	// 磁盘规格
	SpecId *string `json:"spec_id,omitempty" xml:"spec_id,omitempty" require:"true"`
	// 数据盘设备
	Device *string `json:"device,omitempty" xml:"device,omitempty" require:"true"`
}

func (s DataDisk) String() string {
	return tea.Prettify(s)
}

func (s DataDisk) GoString() string {
	return s.String()
}

func (s *DataDisk) SetSize(v int64) *DataDisk {
	s.Size = &v
	return s
}

func (s *DataDisk) SetSnapshotSequence(v string) *DataDisk {
	s.SnapshotSequence = &v
	return s
}

func (s *DataDisk) SetSpecId(v string) *DataDisk {
	s.SpecId = &v
	return s
}

func (s *DataDisk) SetDevice(v string) *DataDisk {
	s.Device = &v
	return s
}

// LB后端健康状态
type LoadBalanceHealthStatus struct {
	// server_id
	ServerId *string `json:"server_id,omitempty" xml:"server_id,omitempty" require:"true"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
}

func (s LoadBalanceHealthStatus) String() string {
	return tea.Prettify(s)
}

func (s LoadBalanceHealthStatus) GoString() string {
	return s.String()
}

func (s *LoadBalanceHealthStatus) SetServerId(v string) *LoadBalanceHealthStatus {
	s.ServerId = &v
	return s
}

func (s *LoadBalanceHealthStatus) SetStatus(v string) *LoadBalanceHealthStatus {
	s.Status = &v
	return s
}

// DnsRecordParam
type DnsRecordParam struct {
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// value
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
	// ttl
	Ttl *int64 `json:"ttl,omitempty" xml:"ttl,omitempty" require:"true"`
	// regionId
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty" require:"true"`
	// zoneId
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// resource_type
	ResourceType *string `json:"resource_type,omitempty" xml:"resource_type,omitempty" require:"true"`
}

func (s DnsRecordParam) String() string {
	return tea.Prettify(s)
}

func (s DnsRecordParam) GoString() string {
	return s.String()
}

func (s *DnsRecordParam) SetWorkspaceId(v string) *DnsRecordParam {
	s.WorkspaceId = &v
	return s
}

func (s *DnsRecordParam) SetValue(v string) *DnsRecordParam {
	s.Value = &v
	return s
}

func (s *DnsRecordParam) SetTtl(v int64) *DnsRecordParam {
	s.Ttl = &v
	return s
}

func (s *DnsRecordParam) SetRegionId(v string) *DnsRecordParam {
	s.RegionId = &v
	return s
}

func (s *DnsRecordParam) SetZoneId(v string) *DnsRecordParam {
	s.ZoneId = &v
	return s
}

func (s *DnsRecordParam) SetDescription(v string) *DnsRecordParam {
	s.Description = &v
	return s
}

func (s *DnsRecordParam) SetResourceType(v string) *DnsRecordParam {
	s.ResourceType = &v
	return s
}

// 机房信息
type Zone struct {
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty" require:"true"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// instanceStatus: AVAILABLE  UNAVAILABLE  RETIRED  DELETED
	Instancestatus *string `json:"instancestatus,omitempty" xml:"instancestatus,omitempty" require:"true"`
	// region name
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// properties
	Properties []*Property `json:"properties,omitempty" xml:"properties,omitempty" require:"true" type:"Repeated"`
}

func (s Zone) String() string {
	return tea.Prettify(s)
}

func (s Zone) GoString() string {
	return s.String()
}

func (s *Zone) SetName(v string) *Zone {
	s.Name = &v
	return s
}

func (s *Zone) SetIdentity(v string) *Zone {
	s.Identity = &v
	return s
}

func (s *Zone) SetDescription(v string) *Zone {
	s.Description = &v
	return s
}

func (s *Zone) SetInstancestatus(v string) *Zone {
	s.Instancestatus = &v
	return s
}

func (s *Zone) SetRegion(v string) *Zone {
	s.Region = &v
	return s
}

func (s *Zone) SetProperties(v []*Property) *Zone {
	s.Properties = v
	return s
}

// 应用画像容器利用率列表结构体
type AppPortraitContainerUsageList struct {
	// namespace
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	// request_cpu
	RequestCpu *string `json:"request_cpu,omitempty" xml:"request_cpu,omitempty" require:"true"`
	// request_mem
	RequestMem *string `json:"request_mem,omitempty" xml:"request_mem,omitempty" require:"true"`
	// limit_cpu
	LimitCpu *string `json:"limit_cpu,omitempty" xml:"limit_cpu,omitempty" require:"true"`
	// limit_mem
	LimitMem *string `json:"limit_mem,omitempty" xml:"limit_mem,omitempty" require:"true"`
	// average_cpu
	AverageCpu *string `json:"average_cpu,omitempty" xml:"average_cpu,omitempty" require:"true"`
	// average_mem
	AverageMem *string `json:"average_mem,omitempty" xml:"average_mem,omitempty" require:"true"`
	// 建议1：xxxxx
	Tips *string `json:"tips,omitempty" xml:"tips,omitempty" require:"true"`
}

func (s AppPortraitContainerUsageList) String() string {
	return tea.Prettify(s)
}

func (s AppPortraitContainerUsageList) GoString() string {
	return s.String()
}

func (s *AppPortraitContainerUsageList) SetNamespace(v string) *AppPortraitContainerUsageList {
	s.Namespace = &v
	return s
}

func (s *AppPortraitContainerUsageList) SetRequestCpu(v string) *AppPortraitContainerUsageList {
	s.RequestCpu = &v
	return s
}

func (s *AppPortraitContainerUsageList) SetRequestMem(v string) *AppPortraitContainerUsageList {
	s.RequestMem = &v
	return s
}

func (s *AppPortraitContainerUsageList) SetLimitCpu(v string) *AppPortraitContainerUsageList {
	s.LimitCpu = &v
	return s
}

func (s *AppPortraitContainerUsageList) SetLimitMem(v string) *AppPortraitContainerUsageList {
	s.LimitMem = &v
	return s
}

func (s *AppPortraitContainerUsageList) SetAverageCpu(v string) *AppPortraitContainerUsageList {
	s.AverageCpu = &v
	return s
}

func (s *AppPortraitContainerUsageList) SetAverageMem(v string) *AppPortraitContainerUsageList {
	s.AverageMem = &v
	return s
}

func (s *AppPortraitContainerUsageList) SetTips(v string) *AppPortraitContainerUsageList {
	s.Tips = &v
	return s
}

// 应用画像告警数趋势结构体
type AppPortraitAlertCountTrend struct {
	// 日期
	Day *string `json:"day,omitempty" xml:"day,omitempty" require:"true"`
	// 本周期
	NowCycle *int64 `json:"now_cycle,omitempty" xml:"now_cycle,omitempty" require:"true"`
	// 上周期
	LastCycle *int64 `json:"last_cycle,omitempty" xml:"last_cycle,omitempty" require:"true"`
}

func (s AppPortraitAlertCountTrend) String() string {
	return tea.Prettify(s)
}

func (s AppPortraitAlertCountTrend) GoString() string {
	return s.String()
}

func (s *AppPortraitAlertCountTrend) SetDay(v string) *AppPortraitAlertCountTrend {
	s.Day = &v
	return s
}

func (s *AppPortraitAlertCountTrend) SetNowCycle(v int64) *AppPortraitAlertCountTrend {
	s.NowCycle = &v
	return s
}

func (s *AppPortraitAlertCountTrend) SetLastCycle(v int64) *AppPortraitAlertCountTrend {
	s.LastCycle = &v
	return s
}

// 数据库Grant
type Grant struct {
	// account
	Account *DatabaseAccount `json:"account,omitempty" xml:"account,omitempty" require:"true"`
	// privilege
	Privilege *string `json:"privilege,omitempty" xml:"privilege,omitempty" require:"true"`
	// schema
	Schema *DbSchema `json:"schema,omitempty" xml:"schema,omitempty" require:"true"`
}

func (s Grant) String() string {
	return tea.Prettify(s)
}

func (s Grant) GoString() string {
	return s.String()
}

func (s *Grant) SetAccount(v *DatabaseAccount) *Grant {
	s.Account = v
	return s
}

func (s *Grant) SetPrivilege(v string) *Grant {
	s.Privilege = &v
	return s
}

func (s *Grant) SetSchema(v *DbSchema) *Grant {
	s.Schema = v
	return s
}

// 应用画像操作记录查询
type AppPortraitActionTrailQuery struct {
	// 操作时间
	ActiontrailTimestamp *string `json:"actiontrail_timestamp,omitempty" xml:"actiontrail_timestamp,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 状态
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 发布单id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 应用服务
	AppService *string `json:"app_service,omitempty" xml:"app_service,omitempty" require:"true"`
	// 操作内容
	OperateType *string `json:"operate_type,omitempty" xml:"operate_type,omitempty" require:"true"`
	// 执行人
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true"`
}

func (s AppPortraitActionTrailQuery) String() string {
	return tea.Prettify(s)
}

func (s AppPortraitActionTrailQuery) GoString() string {
	return s.String()
}

func (s *AppPortraitActionTrailQuery) SetActiontrailTimestamp(v string) *AppPortraitActionTrailQuery {
	s.ActiontrailTimestamp = &v
	return s
}

func (s *AppPortraitActionTrailQuery) SetStatus(v string) *AppPortraitActionTrailQuery {
	s.Status = &v
	return s
}

func (s *AppPortraitActionTrailQuery) SetId(v string) *AppPortraitActionTrailQuery {
	s.Id = &v
	return s
}

func (s *AppPortraitActionTrailQuery) SetAppService(v string) *AppPortraitActionTrailQuery {
	s.AppService = &v
	return s
}

func (s *AppPortraitActionTrailQuery) SetOperateType(v string) *AppPortraitActionTrailQuery {
	s.OperateType = &v
	return s
}

func (s *AppPortraitActionTrailQuery) SetOperator(v string) *AppPortraitActionTrailQuery {
	s.Operator = &v
	return s
}

// 旧版应用管理-发布包上传策略
type PackageUploadPolicy struct {
	// accessKey
	AccessKey *string `json:"access_key,omitempty" xml:"access_key,omitempty"`
	// 策略
	Policy *string `json:"policy,omitempty" xml:"policy,omitempty"`
	// 签名
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
	// 路径前缀
	PathPrefix *string `json:"path_prefix,omitempty" xml:"path_prefix,omitempty"`
	// endpoint
	Endpoint *string `json:"endpoint,omitempty" xml:"endpoint,omitempty"`
	// expire
	Expire *string `json:"expire,omitempty" xml:"expire,omitempty"`
	// bucket
	Bucket *string `json:"bucket,omitempty" xml:"bucket,omitempty"`
}

func (s PackageUploadPolicy) String() string {
	return tea.Prettify(s)
}

func (s PackageUploadPolicy) GoString() string {
	return s.String()
}

func (s *PackageUploadPolicy) SetAccessKey(v string) *PackageUploadPolicy {
	s.AccessKey = &v
	return s
}

func (s *PackageUploadPolicy) SetPolicy(v string) *PackageUploadPolicy {
	s.Policy = &v
	return s
}

func (s *PackageUploadPolicy) SetSignature(v string) *PackageUploadPolicy {
	s.Signature = &v
	return s
}

func (s *PackageUploadPolicy) SetPathPrefix(v string) *PackageUploadPolicy {
	s.PathPrefix = &v
	return s
}

func (s *PackageUploadPolicy) SetEndpoint(v string) *PackageUploadPolicy {
	s.Endpoint = &v
	return s
}

func (s *PackageUploadPolicy) SetExpire(v string) *PackageUploadPolicy {
	s.Expire = &v
	return s
}

func (s *PackageUploadPolicy) SetBucket(v string) *PackageUploadPolicy {
	s.Bucket = &v
	return s
}

// TenantWorkspace
type TenantWorkspace struct {
	// displayName
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty" require:"true"`
	// gmtCreate
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// gmtModified
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// networkType
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty" require:"true"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// tenantId
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// type
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// workspaceDcs
	WorkspaceDcs []*WorkspaceDc `json:"workspace_dcs,omitempty" xml:"workspace_dcs,omitempty" require:"true" type:"Repeated"`
	// workspaceRegions
	WorkspaceRegions []*WorkspaceRegion `json:"workspace_regions,omitempty" xml:"workspace_regions,omitempty" require:"true" type:"Repeated"`
}

func (s TenantWorkspace) String() string {
	return tea.Prettify(s)
}

func (s TenantWorkspace) GoString() string {
	return s.String()
}

func (s *TenantWorkspace) SetDisplayName(v string) *TenantWorkspace {
	s.DisplayName = &v
	return s
}

func (s *TenantWorkspace) SetGmtCreate(v string) *TenantWorkspace {
	s.GmtCreate = &v
	return s
}

func (s *TenantWorkspace) SetGmtModified(v string) *TenantWorkspace {
	s.GmtModified = &v
	return s
}

func (s *TenantWorkspace) SetId(v string) *TenantWorkspace {
	s.Id = &v
	return s
}

func (s *TenantWorkspace) SetName(v string) *TenantWorkspace {
	s.Name = &v
	return s
}

func (s *TenantWorkspace) SetNetworkType(v string) *TenantWorkspace {
	s.NetworkType = &v
	return s
}

func (s *TenantWorkspace) SetStatus(v string) *TenantWorkspace {
	s.Status = &v
	return s
}

func (s *TenantWorkspace) SetTenantId(v string) *TenantWorkspace {
	s.TenantId = &v
	return s
}

func (s *TenantWorkspace) SetType(v string) *TenantWorkspace {
	s.Type = &v
	return s
}

func (s *TenantWorkspace) SetWorkspaceDcs(v []*WorkspaceDc) *TenantWorkspace {
	s.WorkspaceDcs = v
	return s
}

func (s *TenantWorkspace) SetWorkspaceRegions(v []*WorkspaceRegion) *TenantWorkspace {
	s.WorkspaceRegions = v
	return s
}

// 应用分组视图
type AppDomainView struct {
	// ownerName
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty"`
	// fatherDomainName
	FatherDomainName *string `json:"father_domain_name,omitempty" xml:"father_domain_name,omitempty"`
	// 应用列表
	Apps []*AppView `json:"apps,omitempty" xml:"apps,omitempty" type:"Repeated"`
	// AppDomainView 的父类 AppDomain
	BaseAppDomain []*AppDomain `json:"base_app_domain,omitempty" xml:"base_app_domain,omitempty" type:"Repeated"`
}

func (s AppDomainView) String() string {
	return tea.Prettify(s)
}

func (s AppDomainView) GoString() string {
	return s.String()
}

func (s *AppDomainView) SetOwnerName(v string) *AppDomainView {
	s.OwnerName = &v
	return s
}

func (s *AppDomainView) SetFatherDomainName(v string) *AppDomainView {
	s.FatherDomainName = &v
	return s
}

func (s *AppDomainView) SetApps(v []*AppView) *AppDomainView {
	s.Apps = v
	return s
}

func (s *AppDomainView) SetBaseAppDomain(v []*AppDomain) *AppDomainView {
	s.BaseAppDomain = v
	return s
}

// computer quota
type ComputerQuota struct {
	// cpu shared
	CpuShared *int64 `json:"cpu_shared,omitempty" xml:"cpu_shared,omitempty"`
	// cpu
	Cpu *int64 `json:"cpu,omitempty" xml:"cpu,omitempty"`
	// memory
	Memory *int64 `json:"memory,omitempty" xml:"memory,omitempty"`
	// disk
	Disk *int64 `json:"disk,omitempty" xml:"disk,omitempty"`
}

func (s ComputerQuota) String() string {
	return tea.Prettify(s)
}

func (s ComputerQuota) GoString() string {
	return s.String()
}

func (s *ComputerQuota) SetCpuShared(v int64) *ComputerQuota {
	s.CpuShared = &v
	return s
}

func (s *ComputerQuota) SetCpu(v int64) *ComputerQuota {
	s.Cpu = &v
	return s
}

func (s *ComputerQuota) SetMemory(v int64) *ComputerQuota {
	s.Memory = &v
	return s
}

func (s *ComputerQuota) SetDisk(v int64) *ComputerQuota {
	s.Disk = &v
	return s
}

// 可用性趋势查询
type AppPortraitAppUsabilityTrendQuery struct {
	// 时间以天为单位
	Day *string `json:"day,omitempty" xml:"day,omitempty"`
	// 应用可用性
	AppUsability *string `json:"app_usability,omitempty" xml:"app_usability,omitempty"`
}

func (s AppPortraitAppUsabilityTrendQuery) String() string {
	return tea.Prettify(s)
}

func (s AppPortraitAppUsabilityTrendQuery) GoString() string {
	return s.String()
}

func (s *AppPortraitAppUsabilityTrendQuery) SetDay(v string) *AppPortraitAppUsabilityTrendQuery {
	s.Day = &v
	return s
}

func (s *AppPortraitAppUsabilityTrendQuery) SetAppUsability(v string) *AppPortraitAppUsabilityTrendQuery {
	s.AppUsability = &v
	return s
}

// RegionDto
type RegionDto struct {
	// availableNetworkTypes
	AvailableNetworkTypes []*string `json:"available_network_types,omitempty" xml:"available_network_types,omitempty" require:"true" type:"Repeated"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// displayName
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty" require:"true"`
	// iaasProviderId
	IaasProviderId *string `json:"iaas_provider_id,omitempty" xml:"iaas_provider_id,omitempty" require:"true"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty" require:"true"`
	// networkType
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty" require:"true"`
	// state
	State *string `json:"state,omitempty" xml:"state,omitempty" require:"true"`
	// utcCreate
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// utcModified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// zoneDtos
	ZoneDtos []*ZoneDto `json:"zone_dtos,omitempty" xml:"zone_dtos,omitempty" require:"true" type:"Repeated"`
}

func (s RegionDto) String() string {
	return tea.Prettify(s)
}

func (s RegionDto) GoString() string {
	return s.String()
}

func (s *RegionDto) SetAvailableNetworkTypes(v []*string) *RegionDto {
	s.AvailableNetworkTypes = v
	return s
}

func (s *RegionDto) SetDescription(v string) *RegionDto {
	s.Description = &v
	return s
}

func (s *RegionDto) SetDisplayName(v string) *RegionDto {
	s.DisplayName = &v
	return s
}

func (s *RegionDto) SetIaasProviderId(v string) *RegionDto {
	s.IaasProviderId = &v
	return s
}

func (s *RegionDto) SetId(v string) *RegionDto {
	s.Id = &v
	return s
}

func (s *RegionDto) SetIdentity(v string) *RegionDto {
	s.Identity = &v
	return s
}

func (s *RegionDto) SetNetworkType(v string) *RegionDto {
	s.NetworkType = &v
	return s
}

func (s *RegionDto) SetState(v string) *RegionDto {
	s.State = &v
	return s
}

func (s *RegionDto) SetUtcCreate(v string) *RegionDto {
	s.UtcCreate = &v
	return s
}

func (s *RegionDto) SetUtcModified(v string) *RegionDto {
	s.UtcModified = &v
	return s
}

func (s *RegionDto) SetZoneDtos(v []*ZoneDto) *RegionDto {
	s.ZoneDtos = v
	return s
}

// WorkspaceDto
type WorkspaceDto struct {
	// displayName
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// networkType
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty" require:"true"`
	// projectId
	ProjectId *string `json:"project_id,omitempty" xml:"project_id,omitempty" require:"true"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// type
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// utcCreate
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// utcModified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// workspaceRegionDto
	WorkspaceRegionDto *WorkspaceRegionDto `json:"workspace_region_dto,omitempty" xml:"workspace_region_dto,omitempty"`
}

func (s WorkspaceDto) String() string {
	return tea.Prettify(s)
}

func (s WorkspaceDto) GoString() string {
	return s.String()
}

func (s *WorkspaceDto) SetDisplayName(v string) *WorkspaceDto {
	s.DisplayName = &v
	return s
}

func (s *WorkspaceDto) SetId(v string) *WorkspaceDto {
	s.Id = &v
	return s
}

func (s *WorkspaceDto) SetName(v string) *WorkspaceDto {
	s.Name = &v
	return s
}

func (s *WorkspaceDto) SetNetworkType(v string) *WorkspaceDto {
	s.NetworkType = &v
	return s
}

func (s *WorkspaceDto) SetProjectId(v string) *WorkspaceDto {
	s.ProjectId = &v
	return s
}

func (s *WorkspaceDto) SetStatus(v string) *WorkspaceDto {
	s.Status = &v
	return s
}

func (s *WorkspaceDto) SetType(v string) *WorkspaceDto {
	s.Type = &v
	return s
}

func (s *WorkspaceDto) SetUtcCreate(v string) *WorkspaceDto {
	s.UtcCreate = &v
	return s
}

func (s *WorkspaceDto) SetUtcModified(v string) *WorkspaceDto {
	s.UtcModified = &v
	return s
}

func (s *WorkspaceDto) SetWorkspaceRegionDto(v *WorkspaceRegionDto) *WorkspaceDto {
	s.WorkspaceRegionDto = v
	return s
}

// RegionWorkspaceVO
type RegionWorkspaceVO struct {
	// availableNetworkTypes
	AvailableNetworkTypes []*string `json:"available_network_types,omitempty" xml:"available_network_types,omitempty" require:"true" type:"Repeated"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// networkType
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty" require:"true"`
	// providerId
	ProviderId *string `json:"provider_id,omitempty" xml:"provider_id,omitempty" require:"true"`
	// state
	State *string `json:"state,omitempty" xml:"state,omitempty" require:"true"`
	// workspaces
	Workspaces []*WorkspaceWithGroupView `json:"workspaces,omitempty" xml:"workspaces,omitempty" require:"true" type:"Repeated"`
}

func (s RegionWorkspaceVO) String() string {
	return tea.Prettify(s)
}

func (s RegionWorkspaceVO) GoString() string {
	return s.String()
}

func (s *RegionWorkspaceVO) SetAvailableNetworkTypes(v []*string) *RegionWorkspaceVO {
	s.AvailableNetworkTypes = v
	return s
}

func (s *RegionWorkspaceVO) SetDescription(v string) *RegionWorkspaceVO {
	s.Description = &v
	return s
}

func (s *RegionWorkspaceVO) SetId(v string) *RegionWorkspaceVO {
	s.Id = &v
	return s
}

func (s *RegionWorkspaceVO) SetIdentity(v string) *RegionWorkspaceVO {
	s.Identity = &v
	return s
}

func (s *RegionWorkspaceVO) SetName(v string) *RegionWorkspaceVO {
	s.Name = &v
	return s
}

func (s *RegionWorkspaceVO) SetNetworkType(v string) *RegionWorkspaceVO {
	s.NetworkType = &v
	return s
}

func (s *RegionWorkspaceVO) SetProviderId(v string) *RegionWorkspaceVO {
	s.ProviderId = &v
	return s
}

func (s *RegionWorkspaceVO) SetState(v string) *RegionWorkspaceVO {
	s.State = &v
	return s
}

func (s *RegionWorkspaceVO) SetWorkspaces(v []*WorkspaceWithGroupView) *RegionWorkspaceVO {
	s.Workspaces = v
	return s
}

// 任务日志
type ResourceLog struct {
	// host
	Host *string `json:"host,omitempty" xml:"host,omitempty"`
	// log_time
	LogTime *string `json:"log_time,omitempty" xml:"log_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// message
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// resource_id
	ResourceId *string `json:"resource_id,omitempty" xml:"resource_id,omitempty"`
	// resource_type
	ResourceType *string `json:"resource_type,omitempty" xml:"resource_type,omitempty"`
	// severity
	Severity *string `json:"severity,omitempty" xml:"severity,omitempty"`
	// source
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
	// task_id
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true"`
	// task_times
	TaskTimes *int64 `json:"task_times,omitempty" xml:"task_times,omitempty" require:"true"`
	// type
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// iaas_error_info
	IaasErrorInfo *IaasErrorInfo `json:"iaas_error_info,omitempty" xml:"iaas_error_info,omitempty"`
	// iaas_request
	IaasRequest *IaasRequest `json:"iaas_request,omitempty" xml:"iaas_request,omitempty"`
	// iaas_response
	IaasResponse *IaasResponse `json:"iaas_response,omitempty" xml:"iaas_response,omitempty"`
}

func (s ResourceLog) String() string {
	return tea.Prettify(s)
}

func (s ResourceLog) GoString() string {
	return s.String()
}

func (s *ResourceLog) SetHost(v string) *ResourceLog {
	s.Host = &v
	return s
}

func (s *ResourceLog) SetLogTime(v string) *ResourceLog {
	s.LogTime = &v
	return s
}

func (s *ResourceLog) SetMessage(v string) *ResourceLog {
	s.Message = &v
	return s
}

func (s *ResourceLog) SetResourceId(v string) *ResourceLog {
	s.ResourceId = &v
	return s
}

func (s *ResourceLog) SetResourceType(v string) *ResourceLog {
	s.ResourceType = &v
	return s
}

func (s *ResourceLog) SetSeverity(v string) *ResourceLog {
	s.Severity = &v
	return s
}

func (s *ResourceLog) SetSource(v string) *ResourceLog {
	s.Source = &v
	return s
}

func (s *ResourceLog) SetTaskId(v string) *ResourceLog {
	s.TaskId = &v
	return s
}

func (s *ResourceLog) SetTaskTimes(v int64) *ResourceLog {
	s.TaskTimes = &v
	return s
}

func (s *ResourceLog) SetType(v string) *ResourceLog {
	s.Type = &v
	return s
}

func (s *ResourceLog) SetIaasErrorInfo(v *IaasErrorInfo) *ResourceLog {
	s.IaasErrorInfo = v
	return s
}

func (s *ResourceLog) SetIaasRequest(v *IaasRequest) *ResourceLog {
	s.IaasRequest = v
	return s
}

func (s *ResourceLog) SetIaasResponse(v *IaasResponse) *ResourceLog {
	s.IaasResponse = v
	return s
}

// 专有网络
type VPC struct {
	// VPC的IPv4网段
	CidrBlock *string `json:"cidr_block,omitempty" xml:"cidr_block,omitempty" require:"true"`
	// VPC的创建时间
	CreationTime *string `json:"creation_time,omitempty" xml:"creation_time,omitempty" require:"true"`
	// VPC的描述信息
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// VPC所在的地域
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty" require:"true"`
	// 路由表ID
	RouterTableIds []*string `json:"router_table_ids,omitempty" xml:"router_table_ids,omitempty" require:"true" type:"Repeated"`
	// VPC的状态，取值：
	//
	// Pending：配置中。
	// Available：可用。
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 用户侧网段的列表
	UserCidrs *string `json:"user_cidrs,omitempty" xml:"user_cidrs,omitempty"`
	// VPC的id
	VpcId *string `json:"vpc_id,omitempty" xml:"vpc_id,omitempty" require:"true"`
	// VPC的名称
	VpcName *string `json:"vpc_name,omitempty" xml:"vpc_name,omitempty" require:"true"`
	// VPC路由器的ID
	VRouterId *string `json:"v_router_id,omitempty" xml:"v_router_id,omitempty" require:"true"`
	// 关联的workspace id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// vpc是否已导入workspace
	ImportInfo *ImportInfo `json:"import_info,omitempty" xml:"import_info,omitempty"`
	// vpc在CAFE测的唯一ID
	VpcPaasId *string `json:"vpc_paas_id,omitempty" xml:"vpc_paas_id,omitempty"`
}

func (s VPC) String() string {
	return tea.Prettify(s)
}

func (s VPC) GoString() string {
	return s.String()
}

func (s *VPC) SetCidrBlock(v string) *VPC {
	s.CidrBlock = &v
	return s
}

func (s *VPC) SetCreationTime(v string) *VPC {
	s.CreationTime = &v
	return s
}

func (s *VPC) SetDescription(v string) *VPC {
	s.Description = &v
	return s
}

func (s *VPC) SetRegionId(v string) *VPC {
	s.RegionId = &v
	return s
}

func (s *VPC) SetRouterTableIds(v []*string) *VPC {
	s.RouterTableIds = v
	return s
}

func (s *VPC) SetStatus(v string) *VPC {
	s.Status = &v
	return s
}

func (s *VPC) SetUserCidrs(v string) *VPC {
	s.UserCidrs = &v
	return s
}

func (s *VPC) SetVpcId(v string) *VPC {
	s.VpcId = &v
	return s
}

func (s *VPC) SetVpcName(v string) *VPC {
	s.VpcName = &v
	return s
}

func (s *VPC) SetVRouterId(v string) *VPC {
	s.VRouterId = &v
	return s
}

func (s *VPC) SetWorkspaceId(v string) *VPC {
	s.WorkspaceId = &v
	return s
}

func (s *VPC) SetImportInfo(v *ImportInfo) *VPC {
	s.ImportInfo = v
	return s
}

func (s *VPC) SetVpcPaasId(v string) *VPC {
	s.VpcPaasId = &v
	return s
}

// VpcParam
type VPCParam struct {
	// cidr_block
	CidrBlock *string `json:"cidr_block,omitempty" xml:"cidr_block,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// region id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// vpc_name
	VpcName *string `json:"vpc_name,omitempty" xml:"vpc_name,omitempty"`
}

func (s VPCParam) String() string {
	return tea.Prettify(s)
}

func (s VPCParam) GoString() string {
	return s.String()
}

func (s *VPCParam) SetCidrBlock(v string) *VPCParam {
	s.CidrBlock = &v
	return s
}

func (s *VPCParam) SetDescription(v string) *VPCParam {
	s.Description = &v
	return s
}

func (s *VPCParam) SetRegionId(v string) *VPCParam {
	s.RegionId = &v
	return s
}

func (s *VPCParam) SetVpcName(v string) *VPCParam {
	s.VpcName = &v
	return s
}

// lb 监听器
type Listener struct {
	// 后端服务器端口
	BackendServerPort *int64 `json:"backend_server_port,omitempty" xml:"backend_server_port,omitempty" require:"true"`
	// 带宽
	Bandwidth *int64 `json:"bandwidth,omitempty" xml:"bandwidth,omitempty"`
	// certificate_iaas_id
	CertificateIaasId *string `json:"certificate_iaas_id,omitempty" xml:"certificate_iaas_id,omitempty"`
	// 证书 id
	CertificateId *string `json:"certificate_id,omitempty" xml:"certificate_id,omitempty"`
	// cookie
	Cookie *string `json:"cookie,omitempty" xml:"cookie,omitempty"`
	// cookie 超时时间
	CookieTimeout *int64 `json:"cookie_timeout,omitempty" xml:"cookie_timeout,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 连接超时时间
	EstablishedTimeout *int64 `json:"established_timeout,omitempty" xml:"established_timeout,omitempty"`
	// gm_crypto_cert_iaas_id
	GmCryptoCertIaasId *string `json:"gm_crypto_cert_iaas_id,omitempty" xml:"gm_crypto_cert_iaas_id,omitempty"`
	// 健康检查
	HealthMonitor *ListenerHealthMonitor `json:"health_monitor,omitempty" xml:"health_monitor,omitempty"`
	// iaas_id
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// iaasType
	IaasType *string `json:"iaas_type,omitempty" xml:"iaas_type,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// is_health_monitor
	IsHealthMonitor *string `json:"is_health_monitor,omitempty" xml:"is_health_monitor,omitempty"`
	// 监听器端口
	ListenerPort *int64 `json:"listener_port,omitempty" xml:"listener_port,omitempty" require:"true"`
	// load_balancer
	LoadBalancer *LoadBalancer `json:"load_balancer,omitempty" xml:"load_balancer,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 会话保持的超时时间
	PersistTimeout *int64 `json:"persist_timeout,omitempty" xml:"persist_timeout,omitempty"`
	// 转发规则
	Scheduler *string `json:"scheduler,omitempty" xml:"scheduler,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// sticky_session
	StickySession *string `json:"sticky_session,omitempty" xml:"sticky_session,omitempty"`
	// cookie 处理方式
	StickySessionType *string `json:"sticky_session_type,omitempty" xml:"sticky_session_type,omitempty"`
	// 监听类型
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// url_path
	UrlPath *string `json:"url_path,omitempty" xml:"url_path,omitempty"`
	// x_forwarded_for
	XForwardedFor *string `json:"x_forwarded_for,omitempty" xml:"x_forwarded_for,omitempty"`
}

func (s Listener) String() string {
	return tea.Prettify(s)
}

func (s Listener) GoString() string {
	return s.String()
}

func (s *Listener) SetBackendServerPort(v int64) *Listener {
	s.BackendServerPort = &v
	return s
}

func (s *Listener) SetBandwidth(v int64) *Listener {
	s.Bandwidth = &v
	return s
}

func (s *Listener) SetCertificateIaasId(v string) *Listener {
	s.CertificateIaasId = &v
	return s
}

func (s *Listener) SetCertificateId(v string) *Listener {
	s.CertificateId = &v
	return s
}

func (s *Listener) SetCookie(v string) *Listener {
	s.Cookie = &v
	return s
}

func (s *Listener) SetCookieTimeout(v int64) *Listener {
	s.CookieTimeout = &v
	return s
}

func (s *Listener) SetDescription(v string) *Listener {
	s.Description = &v
	return s
}

func (s *Listener) SetEstablishedTimeout(v int64) *Listener {
	s.EstablishedTimeout = &v
	return s
}

func (s *Listener) SetGmCryptoCertIaasId(v string) *Listener {
	s.GmCryptoCertIaasId = &v
	return s
}

func (s *Listener) SetHealthMonitor(v *ListenerHealthMonitor) *Listener {
	s.HealthMonitor = v
	return s
}

func (s *Listener) SetIaasId(v string) *Listener {
	s.IaasId = &v
	return s
}

func (s *Listener) SetIaasType(v string) *Listener {
	s.IaasType = &v
	return s
}

func (s *Listener) SetId(v string) *Listener {
	s.Id = &v
	return s
}

func (s *Listener) SetIsHealthMonitor(v string) *Listener {
	s.IsHealthMonitor = &v
	return s
}

func (s *Listener) SetListenerPort(v int64) *Listener {
	s.ListenerPort = &v
	return s
}

func (s *Listener) SetLoadBalancer(v *LoadBalancer) *Listener {
	s.LoadBalancer = v
	return s
}

func (s *Listener) SetName(v string) *Listener {
	s.Name = &v
	return s
}

func (s *Listener) SetPersistTimeout(v int64) *Listener {
	s.PersistTimeout = &v
	return s
}

func (s *Listener) SetScheduler(v string) *Listener {
	s.Scheduler = &v
	return s
}

func (s *Listener) SetStatus(v string) *Listener {
	s.Status = &v
	return s
}

func (s *Listener) SetStickySession(v string) *Listener {
	s.StickySession = &v
	return s
}

func (s *Listener) SetStickySessionType(v string) *Listener {
	s.StickySessionType = &v
	return s
}

func (s *Listener) SetType(v string) *Listener {
	s.Type = &v
	return s
}

func (s *Listener) SetUrlPath(v string) *Listener {
	s.UrlPath = &v
	return s
}

func (s *Listener) SetXForwardedFor(v string) *Listener {
	s.XForwardedFor = &v
	return s
}

// LoadBalancerRule
type LoadBalancerRule struct {
	// load_balancer
	LoadBalancer *LoadBalancer `json:"load_balancer,omitempty" xml:"load_balancer,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// listener_port
	ListenerPort *int64 `json:"listener_port,omitempty" xml:"listener_port,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// domain
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty"`
	// url
	Url *string `json:"url,omitempty" xml:"url,omitempty" require:"true"`
	// cookie
	Cookie *string `json:"cookie,omitempty" xml:"cookie,omitempty"`
	// is_health_monitor
	IsHealthMonitor *string `json:"is_health_monitor,omitempty" xml:"is_health_monitor,omitempty"`
	// health_monitor
	HealthMonitor *ListenerHealthMonitor `json:"health_monitor,omitempty" xml:"health_monitor,omitempty"`
	// sticky_session
	StickySession *string `json:"sticky_session,omitempty" xml:"sticky_session,omitempty"`
	// app_id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s LoadBalancerRule) String() string {
	return tea.Prettify(s)
}

func (s LoadBalancerRule) GoString() string {
	return s.String()
}

func (s *LoadBalancerRule) SetLoadBalancer(v *LoadBalancer) *LoadBalancerRule {
	s.LoadBalancer = v
	return s
}

func (s *LoadBalancerRule) SetName(v string) *LoadBalancerRule {
	s.Name = &v
	return s
}

func (s *LoadBalancerRule) SetId(v string) *LoadBalancerRule {
	s.Id = &v
	return s
}

func (s *LoadBalancerRule) SetListenerPort(v int64) *LoadBalancerRule {
	s.ListenerPort = &v
	return s
}

func (s *LoadBalancerRule) SetStatus(v string) *LoadBalancerRule {
	s.Status = &v
	return s
}

func (s *LoadBalancerRule) SetDomain(v string) *LoadBalancerRule {
	s.Domain = &v
	return s
}

func (s *LoadBalancerRule) SetUrl(v string) *LoadBalancerRule {
	s.Url = &v
	return s
}

func (s *LoadBalancerRule) SetCookie(v string) *LoadBalancerRule {
	s.Cookie = &v
	return s
}

func (s *LoadBalancerRule) SetIsHealthMonitor(v string) *LoadBalancerRule {
	s.IsHealthMonitor = &v
	return s
}

func (s *LoadBalancerRule) SetHealthMonitor(v *ListenerHealthMonitor) *LoadBalancerRule {
	s.HealthMonitor = v
	return s
}

func (s *LoadBalancerRule) SetStickySession(v string) *LoadBalancerRule {
	s.StickySession = &v
	return s
}

func (s *LoadBalancerRule) SetAppId(v string) *LoadBalancerRule {
	s.AppId = &v
	return s
}

func (s *LoadBalancerRule) SetWorkspaceId(v string) *LoadBalancerRule {
	s.WorkspaceId = &v
	return s
}

// 地域信息
type Region struct {
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty" require:"true"`
	// instanceStatus: AVAILABLE  UNAVAILABLE  RETIRED  DELETED
	Instancestatus *string `json:"instancestatus,omitempty" xml:"instancestatus,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// properties
	Properties []*Property `json:"properties,omitempty" xml:"properties,omitempty" type:"Repeated"`
}

func (s Region) String() string {
	return tea.Prettify(s)
}

func (s Region) GoString() string {
	return s.String()
}

func (s *Region) SetDescription(v string) *Region {
	s.Description = &v
	return s
}

func (s *Region) SetIdentity(v string) *Region {
	s.Identity = &v
	return s
}

func (s *Region) SetInstancestatus(v string) *Region {
	s.Instancestatus = &v
	return s
}

func (s *Region) SetName(v string) *Region {
	s.Name = &v
	return s
}

func (s *Region) SetProperties(v []*Property) *Region {
	s.Properties = v
	return s
}

// 云服务器规格族
type ComputerTypeFamily struct {
	// computer type family id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 实例规格族所属代数。
	Generation *string `json:"generation,omitempty" xml:"generation,omitempty" require:"true"`
}

func (s ComputerTypeFamily) String() string {
	return tea.Prettify(s)
}

func (s ComputerTypeFamily) GoString() string {
	return s.String()
}

func (s *ComputerTypeFamily) SetId(v string) *ComputerTypeFamily {
	s.Id = &v
	return s
}

func (s *ComputerTypeFamily) SetGeneration(v string) *ComputerTypeFamily {
	s.Generation = &v
	return s
}

// 工作空间DNS Provider属性
type WorkspaceDnsProvider struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// provider_id
	ProviderId *string `json:"provider_id,omitempty" xml:"provider_id,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty" require:"true"`
	// zoneId
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty" require:"true"`
	// dns_provider_id
	DnsProviderId *string `json:"dns_provider_id,omitempty" xml:"dns_provider_id,omitempty" require:"true"`
	// dns_network_type
	DnsNetworkType *string `json:"dns_network_type,omitempty" xml:"dns_network_type,omitempty" require:"true"`
	// sub_domain_name
	SubDomainName *string `json:"sub_domain_name,omitempty" xml:"sub_domain_name,omitempty" require:"true"`
	// utc_create
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// utc_modified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
}

func (s WorkspaceDnsProvider) String() string {
	return tea.Prettify(s)
}

func (s WorkspaceDnsProvider) GoString() string {
	return s.String()
}

func (s *WorkspaceDnsProvider) SetId(v string) *WorkspaceDnsProvider {
	s.Id = &v
	return s
}

func (s *WorkspaceDnsProvider) SetWorkspaceId(v string) *WorkspaceDnsProvider {
	s.WorkspaceId = &v
	return s
}

func (s *WorkspaceDnsProvider) SetProviderId(v string) *WorkspaceDnsProvider {
	s.ProviderId = &v
	return s
}

func (s *WorkspaceDnsProvider) SetRegionId(v string) *WorkspaceDnsProvider {
	s.RegionId = &v
	return s
}

func (s *WorkspaceDnsProvider) SetZoneId(v string) *WorkspaceDnsProvider {
	s.ZoneId = &v
	return s
}

func (s *WorkspaceDnsProvider) SetDnsProviderId(v string) *WorkspaceDnsProvider {
	s.DnsProviderId = &v
	return s
}

func (s *WorkspaceDnsProvider) SetDnsNetworkType(v string) *WorkspaceDnsProvider {
	s.DnsNetworkType = &v
	return s
}

func (s *WorkspaceDnsProvider) SetSubDomainName(v string) *WorkspaceDnsProvider {
	s.SubDomainName = &v
	return s
}

func (s *WorkspaceDnsProvider) SetUtcCreate(v string) *WorkspaceDnsProvider {
	s.UtcCreate = &v
	return s
}

func (s *WorkspaceDnsProvider) SetUtcModified(v string) *WorkspaceDnsProvider {
	s.UtcModified = &v
	return s
}

func (s *WorkspaceDnsProvider) SetDescription(v string) *WorkspaceDnsProvider {
	s.Description = &v
	return s
}

// 应用健康分查询
type AppPortraitAppHealthScoreQuery struct {
	// 应用id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// health_score
	HealthScore *int64 `json:"health_score,omitempty" xml:"health_score,omitempty"`
	// 同比上升下降分数
	Y2y *int64 `json:"y2y,omitempty" xml:"y2y,omitempty"`
	// 上升下降原因列表
	ReasonList []*string `json:"reason_list,omitempty" xml:"reason_list,omitempty" type:"Repeated"`
}

func (s AppPortraitAppHealthScoreQuery) String() string {
	return tea.Prettify(s)
}

func (s AppPortraitAppHealthScoreQuery) GoString() string {
	return s.String()
}

func (s *AppPortraitAppHealthScoreQuery) SetAppId(v string) *AppPortraitAppHealthScoreQuery {
	s.AppId = &v
	return s
}

func (s *AppPortraitAppHealthScoreQuery) SetAppName(v string) *AppPortraitAppHealthScoreQuery {
	s.AppName = &v
	return s
}

func (s *AppPortraitAppHealthScoreQuery) SetHealthScore(v int64) *AppPortraitAppHealthScoreQuery {
	s.HealthScore = &v
	return s
}

func (s *AppPortraitAppHealthScoreQuery) SetY2y(v int64) *AppPortraitAppHealthScoreQuery {
	s.Y2y = &v
	return s
}

func (s *AppPortraitAppHealthScoreQuery) SetReasonList(v []*string) *AppPortraitAppHealthScoreQuery {
	s.ReasonList = v
	return s
}

// rmc vpc 详细信息
type VpcVO struct {
	// VPC的状态，取值： Pending：配置中。 Available：可用。
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// VPC的IPv4网段
	CidrBlock *string `json:"cidr_block,omitempty" xml:"cidr_block,omitempty"`
	// VPC路由器的ID
	VRouterIaasId *string `json:"v_router_iaas_id,omitempty" xml:"v_router_iaas_id,omitempty"`
	// workspace id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// vpc name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 描述信息
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 计费类型
	InstanceChargeType *string `json:"instance_charge_type,omitempty" xml:"instance_charge_type,omitempty"`
	// vpc iaas id
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// provider id
	ProviderId *string `json:"provider_id,omitempty" xml:"provider_id,omitempty"`
	// iaas 底座类型
	IaasType *string `json:"iaas_type,omitempty" xml:"iaas_type,omitempty"`
	// region id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// zone id
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty"`
	// vpc id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 创建时间
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 最近一次修改时间
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s VpcVO) String() string {
	return tea.Prettify(s)
}

func (s VpcVO) GoString() string {
	return s.String()
}

func (s *VpcVO) SetStatus(v string) *VpcVO {
	s.Status = &v
	return s
}

func (s *VpcVO) SetCidrBlock(v string) *VpcVO {
	s.CidrBlock = &v
	return s
}

func (s *VpcVO) SetVRouterIaasId(v string) *VpcVO {
	s.VRouterIaasId = &v
	return s
}

func (s *VpcVO) SetWorkspaceId(v string) *VpcVO {
	s.WorkspaceId = &v
	return s
}

func (s *VpcVO) SetName(v string) *VpcVO {
	s.Name = &v
	return s
}

func (s *VpcVO) SetDescription(v string) *VpcVO {
	s.Description = &v
	return s
}

func (s *VpcVO) SetInstanceChargeType(v string) *VpcVO {
	s.InstanceChargeType = &v
	return s
}

func (s *VpcVO) SetIaasId(v string) *VpcVO {
	s.IaasId = &v
	return s
}

func (s *VpcVO) SetProviderId(v string) *VpcVO {
	s.ProviderId = &v
	return s
}

func (s *VpcVO) SetIaasType(v string) *VpcVO {
	s.IaasType = &v
	return s
}

func (s *VpcVO) SetRegionId(v string) *VpcVO {
	s.RegionId = &v
	return s
}

func (s *VpcVO) SetZoneId(v string) *VpcVO {
	s.ZoneId = &v
	return s
}

func (s *VpcVO) SetId(v string) *VpcVO {
	s.Id = &v
	return s
}

func (s *VpcVO) SetUtcCreate(v string) *VpcVO {
	s.UtcCreate = &v
	return s
}

func (s *VpcVO) SetUtcModified(v string) *VpcVO {
	s.UtcModified = &v
	return s
}

// LB查询对应的VComputer
type VComputer struct {
	// v_computer_group
	VComputerGroup *VComputerGroup `json:"v_computer_group,omitempty" xml:"v_computer_group,omitempty"`
	// ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
	// computer
	Computer *Computer `json:"computer,omitempty" xml:"computer,omitempty"`
	// port
	Port *int64 `json:"port,omitempty" xml:"port,omitempty"`
	// weight
	Weight *int64 `json:"weight,omitempty" xml:"weight,omitempty"`
	// 是否是EIP
	IsEip *bool `json:"is_eip,omitempty" xml:"is_eip,omitempty"`
	// is_managed_computer
	IsManagedComputer *bool `json:"is_managed_computer,omitempty" xml:"is_managed_computer,omitempty"`
	// iaas_id
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
}

func (s VComputer) String() string {
	return tea.Prettify(s)
}

func (s VComputer) GoString() string {
	return s.String()
}

func (s *VComputer) SetVComputerGroup(v *VComputerGroup) *VComputer {
	s.VComputerGroup = v
	return s
}

func (s *VComputer) SetIp(v string) *VComputer {
	s.Ip = &v
	return s
}

func (s *VComputer) SetComputer(v *Computer) *VComputer {
	s.Computer = v
	return s
}

func (s *VComputer) SetPort(v int64) *VComputer {
	s.Port = &v
	return s
}

func (s *VComputer) SetWeight(v int64) *VComputer {
	s.Weight = &v
	return s
}

func (s *VComputer) SetIsEip(v bool) *VComputer {
	s.IsEip = &v
	return s
}

func (s *VComputer) SetIsManagedComputer(v bool) *VComputer {
	s.IsManagedComputer = &v
	return s
}

func (s *VComputer) SetIaasId(v string) *VComputer {
	s.IaasId = &v
	return s
}

// 路由表信息
type RouteTable struct {
	// 路由表的创建时间。
	CreationTime *string `json:"creation_time,omitempty" xml:"creation_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 路由表所属的路由器类型，取值：
	//
	// VRouter：VPC路由器。
	// VBR：边界路由器。
	RouterType *string `json:"router_type,omitempty" xml:"router_type,omitempty"`
	//
	// 路由条目的详细信息。
	EntryVOs []*VRouteEntry `json:"entry_v_os,omitempty" xml:"entry_v_os,omitempty" type:"Repeated"`
	// 要查询的路由表的ID。
	RouteTableId *string `json:"route_table_id,omitempty" xml:"route_table_id,omitempty"`
	// 要查询的路由表所属的VPC路由器的ID。
	VRouterId *string `json:"v_router_id,omitempty" xml:"v_router_id,omitempty"`
}

func (s RouteTable) String() string {
	return tea.Prettify(s)
}

func (s RouteTable) GoString() string {
	return s.String()
}

func (s *RouteTable) SetCreationTime(v string) *RouteTable {
	s.CreationTime = &v
	return s
}

func (s *RouteTable) SetRouterType(v string) *RouteTable {
	s.RouterType = &v
	return s
}

func (s *RouteTable) SetEntryVOs(v []*VRouteEntry) *RouteTable {
	s.EntryVOs = v
	return s
}

func (s *RouteTable) SetRouteTableId(v string) *RouteTable {
	s.RouteTableId = &v
	return s
}

func (s *RouteTable) SetVRouterId(v string) *RouteTable {
	s.VRouterId = &v
	return s
}

// 阿里云日志服务(SLS)-日志配置
type SLSConfig struct {
	// Logtail配置名称，同一Project下配置名必须唯一。
	// 只能包括小写字母、数字、连字符（-）和下划线（_）。
	// 必须以小写字母或者数字开头和结尾。
	// 长度必须为2~128字节。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 配置类型，支持plugin、file。
	InputType *string `json:"input_type,omitempty" xml:"input_type,omitempty" require:"true"`
	// 输出类型，目前只支持LogService。
	OutputType *string `json:"output_type,omitempty" xml:"output_type,omitempty"`
	// 日志样例
	LogSample *string `json:"log_sample,omitempty" xml:"log_sample,omitempty"`
	// 输入类型配置
	InputDetail *SLSConfigInputDetail `json:"input_detail,omitempty" xml:"input_detail,omitempty" require:"true"`
	// 输出类型配置
	OutputDetail *SLSConfigOutputDetail `json:"output_detail,omitempty" xml:"output_detail,omitempty" require:"true"`
}

func (s SLSConfig) String() string {
	return tea.Prettify(s)
}

func (s SLSConfig) GoString() string {
	return s.String()
}

func (s *SLSConfig) SetName(v string) *SLSConfig {
	s.Name = &v
	return s
}

func (s *SLSConfig) SetInputType(v string) *SLSConfig {
	s.InputType = &v
	return s
}

func (s *SLSConfig) SetOutputType(v string) *SLSConfig {
	s.OutputType = &v
	return s
}

func (s *SLSConfig) SetLogSample(v string) *SLSConfig {
	s.LogSample = &v
	return s
}

func (s *SLSConfig) SetInputDetail(v *SLSConfigInputDetail) *SLSConfig {
	s.InputDetail = v
	return s
}

func (s *SLSConfig) SetOutputDetail(v *SLSConfigOutputDetail) *SLSConfig {
	s.OutputDetail = v
	return s
}

// 安全组详细信息
type SecurityGroup struct {
	// 创建时间。按照ISO8601标准表示，并需要使用UTC时间。格式为：yyyy-MM-ddThh:mmZ。
	CreationTime *string `json:"creation_time,omitempty" xml:"creation_time,omitempty" require:"true"`
	// 安全组的描述信息。
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty" require:"true"`
	// 安全组ID。
	SecurityGroupId *string `json:"security_group_id,omitempty" xml:"security_group_id,omitempty" require:"true"`
	// 安全组名称。
	SecurityGroupName *string `json:"security_group_name,omitempty" xml:"security_group_name,omitempty" require:"true"`
	// 安全组所属的专有网络。
	VpcId *string `json:"vpc_id,omitempty" xml:"vpc_id,omitempty" require:"true"`
	// 安全组入方向规则
	IngressRules []*SecurityGroupRule `json:"ingress_rules,omitempty" xml:"ingress_rules,omitempty" type:"Repeated"`
	// 安全组出方向规则
	EgressRules []*SecurityGroupRule `json:"egress_rules,omitempty" xml:"egress_rules,omitempty" type:"Repeated"`
}

func (s SecurityGroup) String() string {
	return tea.Prettify(s)
}

func (s SecurityGroup) GoString() string {
	return s.String()
}

func (s *SecurityGroup) SetCreationTime(v string) *SecurityGroup {
	s.CreationTime = &v
	return s
}

func (s *SecurityGroup) SetDescription(v string) *SecurityGroup {
	s.Description = &v
	return s
}

func (s *SecurityGroup) SetRegionId(v string) *SecurityGroup {
	s.RegionId = &v
	return s
}

func (s *SecurityGroup) SetSecurityGroupId(v string) *SecurityGroup {
	s.SecurityGroupId = &v
	return s
}

func (s *SecurityGroup) SetSecurityGroupName(v string) *SecurityGroup {
	s.SecurityGroupName = &v
	return s
}

func (s *SecurityGroup) SetVpcId(v string) *SecurityGroup {
	s.VpcId = &v
	return s
}

func (s *SecurityGroup) SetIngressRules(v []*SecurityGroupRule) *SecurityGroup {
	s.IngressRules = v
	return s
}

func (s *SecurityGroup) SetEgressRules(v []*SecurityGroupRule) *SecurityGroup {
	s.EgressRules = v
	return s
}

// map <String,integer>
type MapStringToIntegerEntity struct {
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// value
	Value *int64 `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s MapStringToIntegerEntity) String() string {
	return tea.Prettify(s)
}

func (s MapStringToIntegerEntity) GoString() string {
	return s.String()
}

func (s *MapStringToIntegerEntity) SetKey(v string) *MapStringToIntegerEntity {
	s.Key = &v
	return s
}

func (s *MapStringToIntegerEntity) SetValue(v int64) *MapStringToIntegerEntity {
	s.Value = &v
	return s
}

// 单维度实例的配额信息
type SingleDimGroupQuotaInstance struct {
	// 配额实例所属的 配额id
	QuotaId *string `json:"quota_id,omitempty" xml:"quota_id,omitempty" require:"true"`
	// 配额实例id
	QuotaInsId *string `json:"quota_ins_id,omitempty" xml:"quota_ins_id,omitempty" require:"true"`
	// 维度实例组合id
	DimInsGroupId *string `json:"dim_ins_group_id,omitempty" xml:"dim_ins_group_id,omitempty"`
	// 维度标识
	DimIdentity *string `json:"dim_identity,omitempty" xml:"dim_identity,omitempty"`
	// 维度实例的值，比如某个具体的workspace_id
	DimInsValue *string `json:"dim_ins_value,omitempty" xml:"dim_ins_value,omitempty"`
	// resource
	Resource *string `json:"resource,omitempty" xml:"resource,omitempty" require:"true"`
	// 表示是无限大还是无限小
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 限额值
	HardLimit *int64 `json:"hard_limit,omitempty" xml:"hard_limit,omitempty" require:"true"`
	// 已经使用的额度
	InUse *int64 `json:"in_use,omitempty" xml:"in_use,omitempty" require:"true"`
	// 预分配的额度
	Reserved *int64 `json:"reserved,omitempty" xml:"reserved,omitempty"`
	// 保留额度
	Remain *int64 `json:"remain,omitempty" xml:"remain,omitempty"`
	// utc_create
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// utc_modified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// quota乘数因子，用以解决k8s资源可以用小数表示的问题。由于OP不支持浮点数，请用字符串表示
	QuotaFactor *string `json:"quota_factor,omitempty" xml:"quota_factor,omitempty" require:"true"`
}

func (s SingleDimGroupQuotaInstance) String() string {
	return tea.Prettify(s)
}

func (s SingleDimGroupQuotaInstance) GoString() string {
	return s.String()
}

func (s *SingleDimGroupQuotaInstance) SetQuotaId(v string) *SingleDimGroupQuotaInstance {
	s.QuotaId = &v
	return s
}

func (s *SingleDimGroupQuotaInstance) SetQuotaInsId(v string) *SingleDimGroupQuotaInstance {
	s.QuotaInsId = &v
	return s
}

func (s *SingleDimGroupQuotaInstance) SetDimInsGroupId(v string) *SingleDimGroupQuotaInstance {
	s.DimInsGroupId = &v
	return s
}

func (s *SingleDimGroupQuotaInstance) SetDimIdentity(v string) *SingleDimGroupQuotaInstance {
	s.DimIdentity = &v
	return s
}

func (s *SingleDimGroupQuotaInstance) SetDimInsValue(v string) *SingleDimGroupQuotaInstance {
	s.DimInsValue = &v
	return s
}

func (s *SingleDimGroupQuotaInstance) SetResource(v string) *SingleDimGroupQuotaInstance {
	s.Resource = &v
	return s
}

func (s *SingleDimGroupQuotaInstance) SetStatus(v string) *SingleDimGroupQuotaInstance {
	s.Status = &v
	return s
}

func (s *SingleDimGroupQuotaInstance) SetHardLimit(v int64) *SingleDimGroupQuotaInstance {
	s.HardLimit = &v
	return s
}

func (s *SingleDimGroupQuotaInstance) SetInUse(v int64) *SingleDimGroupQuotaInstance {
	s.InUse = &v
	return s
}

func (s *SingleDimGroupQuotaInstance) SetReserved(v int64) *SingleDimGroupQuotaInstance {
	s.Reserved = &v
	return s
}

func (s *SingleDimGroupQuotaInstance) SetRemain(v int64) *SingleDimGroupQuotaInstance {
	s.Remain = &v
	return s
}

func (s *SingleDimGroupQuotaInstance) SetUtcCreate(v string) *SingleDimGroupQuotaInstance {
	s.UtcCreate = &v
	return s
}

func (s *SingleDimGroupQuotaInstance) SetUtcModified(v string) *SingleDimGroupQuotaInstance {
	s.UtcModified = &v
	return s
}

func (s *SingleDimGroupQuotaInstance) SetQuotaFactor(v string) *SingleDimGroupQuotaInstance {
	s.QuotaFactor = &v
	return s
}

// 一组具有依赖关系的 AppDomain，可以转换为一个树形结构
type AppDomainFlatten struct {
	// 一组具有依赖关系的 AppDomain
	AppDomains []*AppDomain `json:"app_domains,omitempty" xml:"app_domains,omitempty" type:"Repeated"`
}

func (s AppDomainFlatten) String() string {
	return tea.Prettify(s)
}

func (s AppDomainFlatten) GoString() string {
	return s.String()
}

func (s *AppDomainFlatten) SetAppDomains(v []*AppDomain) *AppDomainFlatten {
	s.AppDomains = v
	return s
}

// 一次异步请求
type RequestVO struct {
	// context
	Context *string `json:"context,omitempty" xml:"context,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// operator
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
	// operator_name
	OperatorName *string `json:"operator_name,omitempty" xml:"operator_name,omitempty" require:"true"`
	// operator_type
	OperatorType *string `json:"operator_type,omitempty" xml:"operator_type,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// token
	Token *string `json:"token,omitempty" xml:"token,omitempty"`
	// type
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// utc_create
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// utc_modified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// tasks
	Tasks []*Task `json:"tasks,omitempty" xml:"tasks,omitempty" type:"Repeated"`
}

func (s RequestVO) String() string {
	return tea.Prettify(s)
}

func (s RequestVO) GoString() string {
	return s.String()
}

func (s *RequestVO) SetContext(v string) *RequestVO {
	s.Context = &v
	return s
}

func (s *RequestVO) SetId(v string) *RequestVO {
	s.Id = &v
	return s
}

func (s *RequestVO) SetOperator(v string) *RequestVO {
	s.Operator = &v
	return s
}

func (s *RequestVO) SetOperatorName(v string) *RequestVO {
	s.OperatorName = &v
	return s
}

func (s *RequestVO) SetOperatorType(v string) *RequestVO {
	s.OperatorType = &v
	return s
}

func (s *RequestVO) SetStatus(v string) *RequestVO {
	s.Status = &v
	return s
}

func (s *RequestVO) SetToken(v string) *RequestVO {
	s.Token = &v
	return s
}

func (s *RequestVO) SetType(v string) *RequestVO {
	s.Type = &v
	return s
}

func (s *RequestVO) SetUtcCreate(v string) *RequestVO {
	s.UtcCreate = &v
	return s
}

func (s *RequestVO) SetUtcModified(v string) *RequestVO {
	s.UtcModified = &v
	return s
}

func (s *RequestVO) SetTasks(v []*Task) *RequestVO {
	s.Tasks = v
	return s
}

// VSwitchParam
type VSwitchParam struct {
	// cidr_block
	CidrBlock *string `json:"cidr_block,omitempty" xml:"cidr_block,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// vpc_id
	VpcId *string `json:"vpc_id,omitempty" xml:"vpc_id,omitempty"`
	// vswitch_name
	VswitchName *string `json:"vswitch_name,omitempty" xml:"vswitch_name,omitempty"`
	// zone_id
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty"`
}

func (s VSwitchParam) String() string {
	return tea.Prettify(s)
}

func (s VSwitchParam) GoString() string {
	return s.String()
}

func (s *VSwitchParam) SetCidrBlock(v string) *VSwitchParam {
	s.CidrBlock = &v
	return s
}

func (s *VSwitchParam) SetDescription(v string) *VSwitchParam {
	s.Description = &v
	return s
}

func (s *VSwitchParam) SetRegionId(v string) *VSwitchParam {
	s.RegionId = &v
	return s
}

func (s *VSwitchParam) SetVpcId(v string) *VSwitchParam {
	s.VpcId = &v
	return s
}

func (s *VSwitchParam) SetVswitchName(v string) *VSwitchParam {
	s.VswitchName = &v
	return s
}

func (s *VSwitchParam) SetZoneId(v string) *VSwitchParam {
	s.ZoneId = &v
	return s
}

// rmc 交换机详细信息
type VSwitchVO struct {
	// 交换机的iaas ID
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// 交换机名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 交换机描述信息
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 交换机的状态，取值： Pending：配置中。 Available：可用。
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// vpc id
	VpcId *string `json:"vpc_id,omitempty" xml:"vpc_id,omitempty"`
	// workspace id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// zone id
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty"`
	// zone iaas id
	ZoneIaasId *string `json:"zone_iaas_id,omitempty" xml:"zone_iaas_id,omitempty"`
	// region id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// 换机的IPv4网段
	CidrBlock *string `json:"cidr_block,omitempty" xml:"cidr_block,omitempty"`
	// 交换机创建时间
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 可用ip数目
	AvailableIpAddressCount *int64 `json:"available_ip_address_count,omitempty" xml:"available_ip_address_count,omitempty"`
}

func (s VSwitchVO) String() string {
	return tea.Prettify(s)
}

func (s VSwitchVO) GoString() string {
	return s.String()
}

func (s *VSwitchVO) SetIaasId(v string) *VSwitchVO {
	s.IaasId = &v
	return s
}

func (s *VSwitchVO) SetName(v string) *VSwitchVO {
	s.Name = &v
	return s
}

func (s *VSwitchVO) SetDescription(v string) *VSwitchVO {
	s.Description = &v
	return s
}

func (s *VSwitchVO) SetStatus(v string) *VSwitchVO {
	s.Status = &v
	return s
}

func (s *VSwitchVO) SetVpcId(v string) *VSwitchVO {
	s.VpcId = &v
	return s
}

func (s *VSwitchVO) SetWorkspaceId(v string) *VSwitchVO {
	s.WorkspaceId = &v
	return s
}

func (s *VSwitchVO) SetZoneId(v string) *VSwitchVO {
	s.ZoneId = &v
	return s
}

func (s *VSwitchVO) SetZoneIaasId(v string) *VSwitchVO {
	s.ZoneIaasId = &v
	return s
}

func (s *VSwitchVO) SetRegionId(v string) *VSwitchVO {
	s.RegionId = &v
	return s
}

func (s *VSwitchVO) SetCidrBlock(v string) *VSwitchVO {
	s.CidrBlock = &v
	return s
}

func (s *VSwitchVO) SetUtcCreate(v string) *VSwitchVO {
	s.UtcCreate = &v
	return s
}

func (s *VSwitchVO) SetAvailableIpAddressCount(v int64) *VSwitchVO {
	s.AvailableIpAddressCount = &v
	return s
}

// disk spec
type DiskSpec struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// iaas id
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// providerId
	ProviderId *string `json:"provider_id,omitempty" xml:"provider_id,omitempty"`
	// iaasType
	IaasType *string `json:"iaas_type,omitempty" xml:"iaas_type,omitempty"`
	// enable
	Enable *bool `json:"enable,omitempty" xml:"enable,omitempty"`
	// minSize
	MinSize *int64 `json:"min_size,omitempty" xml:"min_size,omitempty"`
	// maxSize
	MaxSize *int64 `json:"max_size,omitempty" xml:"max_size,omitempty"`
}

func (s DiskSpec) String() string {
	return tea.Prettify(s)
}

func (s DiskSpec) GoString() string {
	return s.String()
}

func (s *DiskSpec) SetId(v string) *DiskSpec {
	s.Id = &v
	return s
}

func (s *DiskSpec) SetName(v string) *DiskSpec {
	s.Name = &v
	return s
}

func (s *DiskSpec) SetDescription(v string) *DiskSpec {
	s.Description = &v
	return s
}

func (s *DiskSpec) SetIaasId(v string) *DiskSpec {
	s.IaasId = &v
	return s
}

func (s *DiskSpec) SetProviderId(v string) *DiskSpec {
	s.ProviderId = &v
	return s
}

func (s *DiskSpec) SetIaasType(v string) *DiskSpec {
	s.IaasType = &v
	return s
}

func (s *DiskSpec) SetEnable(v bool) *DiskSpec {
	s.Enable = &v
	return s
}

func (s *DiskSpec) SetMinSize(v int64) *DiskSpec {
	s.MinSize = &v
	return s
}

func (s *DiskSpec) SetMaxSize(v int64) *DiskSpec {
	s.MaxSize = &v
	return s
}

// LB后端挂载的主机
type MountComputer struct {
	// computer
	Computer *Computer `json:"computer,omitempty" xml:"computer,omitempty"`
	// domain
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty"`
	// loadbalancer
	Loadbalancer *LoadBalancer `json:"loadbalancer,omitempty" xml:"loadbalancer,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// weight
	Weight *int64 `json:"weight,omitempty" xml:"weight,omitempty" require:"true"`
}

func (s MountComputer) String() string {
	return tea.Prettify(s)
}

func (s MountComputer) GoString() string {
	return s.String()
}

func (s *MountComputer) SetComputer(v *Computer) *MountComputer {
	s.Computer = v
	return s
}

func (s *MountComputer) SetDomain(v string) *MountComputer {
	s.Domain = &v
	return s
}

func (s *MountComputer) SetLoadbalancer(v *LoadBalancer) *MountComputer {
	s.Loadbalancer = v
	return s
}

func (s *MountComputer) SetStatus(v string) *MountComputer {
	s.Status = &v
	return s
}

func (s *MountComputer) SetWeight(v int64) *MountComputer {
	s.Weight = &v
	return s
}

// vpc import info
type VpcImport struct {
	// cidr block
	CidrBlock *string `json:"cidr_block,omitempty" xml:"cidr_block,omitempty"`
	// vpc描述信息
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// vpc iaas id
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty" require:"true"`
	// import workspace info
	ImportInfo *ImportInfo `json:"import_info,omitempty" xml:"import_info,omitempty" require:"true"`
	// vpc name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// vpc status
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
}

func (s VpcImport) String() string {
	return tea.Prettify(s)
}

func (s VpcImport) GoString() string {
	return s.String()
}

func (s *VpcImport) SetCidrBlock(v string) *VpcImport {
	s.CidrBlock = &v
	return s
}

func (s *VpcImport) SetDescription(v string) *VpcImport {
	s.Description = &v
	return s
}

func (s *VpcImport) SetIaasId(v string) *VpcImport {
	s.IaasId = &v
	return s
}

func (s *VpcImport) SetImportInfo(v *ImportInfo) *VpcImport {
	s.ImportInfo = v
	return s
}

func (s *VpcImport) SetName(v string) *VpcImport {
	s.Name = &v
	return s
}

func (s *VpcImport) SetStatus(v string) *VpcImport {
	s.Status = &v
	return s
}

// 技术栈
type Buildpack struct {
	// 技术栈标识ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 技术栈名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 技术栈描述
	Des *string `json:"des,omitempty" xml:"des,omitempty"`
	// 技术栈版本
	Version *string `json:"version,omitempty" xml:"version,omitempty"`
	// 技术栈类别
	Stack *string `json:"stack,omitempty" xml:"stack,omitempty"`
	// 部署脚本id
	DeployScriptId *string `json:"deploy_script_id,omitempty" xml:"deploy_script_id,omitempty"`
	// 构建脚本ID
	BuildScriptId *string `json:"build_script_id,omitempty" xml:"build_script_id,omitempty"`
	// 配置id
	ConfigId *string `json:"config_id,omitempty" xml:"config_id,omitempty"`
	// 组件id
	ComponentId *string `json:"component_id,omitempty" xml:"component_id,omitempty"`
	// 命令id
	CommandId *string `json:"command_id,omitempty" xml:"command_id,omitempty"`
	// 启用蓝绿
	BgEnable *bool `json:"bg_enable,omitempty" xml:"bg_enable,omitempty"`
	// 创建人
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// 租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// 客户id列表
	CustomerIds []*string `json:"customer_ids,omitempty" xml:"customer_ids,omitempty" type:"Repeated"`
	// 技术栈定义类型
	// 系统模板 TEMPLATE
	// 用户自定义 CUSTOM
	// 后台服务 BACKGROUND_SERVICE
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 技术栈状态
	// 草稿 DRAFT
	// 已提交 COMMITED
	// 已对外发布 PUBLISHED
	// 已退役 RETIRED
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 创建日期
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 最近修改时间
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 技术栈信息汇总
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可用 USABLE
	// 不可用 UNUSABLE
	VersionStatus *string `json:"version_status,omitempty" xml:"version_status,omitempty"`
	// 运行时属性
	Instances *BuildpackInstances `json:"instances,omitempty" xml:"instances,omitempty"`
}

func (s Buildpack) String() string {
	return tea.Prettify(s)
}

func (s Buildpack) GoString() string {
	return s.String()
}

func (s *Buildpack) SetId(v string) *Buildpack {
	s.Id = &v
	return s
}

func (s *Buildpack) SetName(v string) *Buildpack {
	s.Name = &v
	return s
}

func (s *Buildpack) SetDes(v string) *Buildpack {
	s.Des = &v
	return s
}

func (s *Buildpack) SetVersion(v string) *Buildpack {
	s.Version = &v
	return s
}

func (s *Buildpack) SetStack(v string) *Buildpack {
	s.Stack = &v
	return s
}

func (s *Buildpack) SetDeployScriptId(v string) *Buildpack {
	s.DeployScriptId = &v
	return s
}

func (s *Buildpack) SetBuildScriptId(v string) *Buildpack {
	s.BuildScriptId = &v
	return s
}

func (s *Buildpack) SetConfigId(v string) *Buildpack {
	s.ConfigId = &v
	return s
}

func (s *Buildpack) SetComponentId(v string) *Buildpack {
	s.ComponentId = &v
	return s
}

func (s *Buildpack) SetCommandId(v string) *Buildpack {
	s.CommandId = &v
	return s
}

func (s *Buildpack) SetBgEnable(v bool) *Buildpack {
	s.BgEnable = &v
	return s
}

func (s *Buildpack) SetCreator(v string) *Buildpack {
	s.Creator = &v
	return s
}

func (s *Buildpack) SetTenantId(v string) *Buildpack {
	s.TenantId = &v
	return s
}

func (s *Buildpack) SetCustomerIds(v []*string) *Buildpack {
	s.CustomerIds = v
	return s
}

func (s *Buildpack) SetType(v string) *Buildpack {
	s.Type = &v
	return s
}

func (s *Buildpack) SetStatus(v string) *Buildpack {
	s.Status = &v
	return s
}

func (s *Buildpack) SetGmtCreate(v string) *Buildpack {
	s.GmtCreate = &v
	return s
}

func (s *Buildpack) SetGmtModified(v string) *Buildpack {
	s.GmtModified = &v
	return s
}

func (s *Buildpack) SetResultMsg(v string) *Buildpack {
	s.ResultMsg = &v
	return s
}

func (s *Buildpack) SetVersionStatus(v string) *Buildpack {
	s.VersionStatus = &v
	return s
}

func (s *Buildpack) SetInstances(v *BuildpackInstances) *Buildpack {
	s.Instances = v
	return s
}

// 应用分组查询
type AppDomainQuery struct {
	// creatorId
	CreatorId *string `json:"creator_id,omitempty" xml:"creator_id,omitempty"`
	// 是否为一方化请求
	IsOnePartyRequest *bool `json:"is_one_party_request,omitempty" xml:"is_one_party_request,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// parentId
	ParentId *string `json:"parent_id,omitempty" xml:"parent_id,omitempty"`
	// tenantId
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// utcCreate
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// query_type
	QueryType *string `json:"query_type,omitempty" xml:"query_type,omitempty"`
	// orders
	Orders []*string `json:"orders,omitempty" xml:"orders,omitempty" type:"Repeated"`
	// 当前页数
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
}

func (s AppDomainQuery) String() string {
	return tea.Prettify(s)
}

func (s AppDomainQuery) GoString() string {
	return s.String()
}

func (s *AppDomainQuery) SetCreatorId(v string) *AppDomainQuery {
	s.CreatorId = &v
	return s
}

func (s *AppDomainQuery) SetIsOnePartyRequest(v bool) *AppDomainQuery {
	s.IsOnePartyRequest = &v
	return s
}

func (s *AppDomainQuery) SetName(v string) *AppDomainQuery {
	s.Name = &v
	return s
}

func (s *AppDomainQuery) SetParentId(v string) *AppDomainQuery {
	s.ParentId = &v
	return s
}

func (s *AppDomainQuery) SetTenantId(v string) *AppDomainQuery {
	s.TenantId = &v
	return s
}

func (s *AppDomainQuery) SetUtcCreate(v string) *AppDomainQuery {
	s.UtcCreate = &v
	return s
}

func (s *AppDomainQuery) SetPageSize(v int64) *AppDomainQuery {
	s.PageSize = &v
	return s
}

func (s *AppDomainQuery) SetQueryType(v string) *AppDomainQuery {
	s.QueryType = &v
	return s
}

func (s *AppDomainQuery) SetOrders(v []*string) *AppDomainQuery {
	s.Orders = v
	return s
}

func (s *AppDomainQuery) SetCurrentPage(v int64) *AppDomainQuery {
	s.CurrentPage = &v
	return s
}

// 交换机详细信息
type VSwitch struct {
	// 交换机的IPv4网段
	CidrBlock *string `json:"cidr_block,omitempty" xml:"cidr_block,omitempty"`
	// 交换机的创建时间
	CreationTime *string `json:"creation_time,omitempty" xml:"creation_time,omitempty"`
	// 交换机的描述信息
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// cn-hangzhou
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// 交换机的状态，取值：
	//
	// Pending：配置中。
	// Available：可用。
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 交换机所属VPC的ID
	VpcId *string `json:"vpc_id,omitempty" xml:"vpc_id,omitempty"`
	// 交换机的ID
	VSwitchId *string `json:"v_switch_id,omitempty" xml:"v_switch_id,omitempty"`
	// 交换机的名称
	VSwitchName *string `json:"v_switch_name,omitempty" xml:"v_switch_name,omitempty"`
	// 交换机所属的可用区
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty"`
	// zone iaas id
	ZoneIaasId *string `json:"zone_iaas_id,omitempty" xml:"zone_iaas_id,omitempty"`
}

func (s VSwitch) String() string {
	return tea.Prettify(s)
}

func (s VSwitch) GoString() string {
	return s.String()
}

func (s *VSwitch) SetCidrBlock(v string) *VSwitch {
	s.CidrBlock = &v
	return s
}

func (s *VSwitch) SetCreationTime(v string) *VSwitch {
	s.CreationTime = &v
	return s
}

func (s *VSwitch) SetDescription(v string) *VSwitch {
	s.Description = &v
	return s
}

func (s *VSwitch) SetRegionId(v string) *VSwitch {
	s.RegionId = &v
	return s
}

func (s *VSwitch) SetStatus(v string) *VSwitch {
	s.Status = &v
	return s
}

func (s *VSwitch) SetVpcId(v string) *VSwitch {
	s.VpcId = &v
	return s
}

func (s *VSwitch) SetVSwitchId(v string) *VSwitch {
	s.VSwitchId = &v
	return s
}

func (s *VSwitch) SetVSwitchName(v string) *VSwitch {
	s.VSwitchName = &v
	return s
}

func (s *VSwitch) SetZoneId(v string) *VSwitch {
	s.ZoneId = &v
	return s
}

func (s *VSwitch) SetZoneIaasId(v string) *VSwitch {
	s.ZoneIaasId = &v
	return s
}

// WorkspaceDnsRecordset
type WorkspaceDnsRecordset struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// iaasId
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// dns_provider_id
	DnsProviderId *string `json:"dns_provider_id,omitempty" xml:"dns_provider_id,omitempty" require:"true"`
	// dns_network_type
	DnsNetworkType *string `json:"dns_network_type,omitempty" xml:"dns_network_type,omitempty"`
	// device_network_address_type
	DeviceNetworkAddressType *string `json:"device_network_address_type,omitempty" xml:"device_network_address_type,omitempty"`
	// 绑定的资源的类型COMPUTER或LOAD_BALANCER
	ResourceType *string `json:"resource_type,omitempty" xml:"resource_type,omitempty" require:"true"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// type
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// value
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
	// ttl
	Ttl *int64 `json:"ttl,omitempty" xml:"ttl,omitempty" require:"true"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// resource_id
	ResourceId *string `json:"resource_id,omitempty" xml:"resource_id,omitempty"`
	// resource_iaas_id
	ResourceIaasId *string `json:"resource_iaas_id,omitempty" xml:"resource_iaas_id,omitempty"`
	// utc_create
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// utc_modified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s WorkspaceDnsRecordset) String() string {
	return tea.Prettify(s)
}

func (s WorkspaceDnsRecordset) GoString() string {
	return s.String()
}

func (s *WorkspaceDnsRecordset) SetId(v string) *WorkspaceDnsRecordset {
	s.Id = &v
	return s
}

func (s *WorkspaceDnsRecordset) SetIaasId(v string) *WorkspaceDnsRecordset {
	s.IaasId = &v
	return s
}

func (s *WorkspaceDnsRecordset) SetName(v string) *WorkspaceDnsRecordset {
	s.Name = &v
	return s
}

func (s *WorkspaceDnsRecordset) SetDnsProviderId(v string) *WorkspaceDnsRecordset {
	s.DnsProviderId = &v
	return s
}

func (s *WorkspaceDnsRecordset) SetDnsNetworkType(v string) *WorkspaceDnsRecordset {
	s.DnsNetworkType = &v
	return s
}

func (s *WorkspaceDnsRecordset) SetDeviceNetworkAddressType(v string) *WorkspaceDnsRecordset {
	s.DeviceNetworkAddressType = &v
	return s
}

func (s *WorkspaceDnsRecordset) SetResourceType(v string) *WorkspaceDnsRecordset {
	s.ResourceType = &v
	return s
}

func (s *WorkspaceDnsRecordset) SetDescription(v string) *WorkspaceDnsRecordset {
	s.Description = &v
	return s
}

func (s *WorkspaceDnsRecordset) SetType(v string) *WorkspaceDnsRecordset {
	s.Type = &v
	return s
}

func (s *WorkspaceDnsRecordset) SetStatus(v string) *WorkspaceDnsRecordset {
	s.Status = &v
	return s
}

func (s *WorkspaceDnsRecordset) SetValue(v string) *WorkspaceDnsRecordset {
	s.Value = &v
	return s
}

func (s *WorkspaceDnsRecordset) SetTtl(v int64) *WorkspaceDnsRecordset {
	s.Ttl = &v
	return s
}

func (s *WorkspaceDnsRecordset) SetWorkspaceId(v string) *WorkspaceDnsRecordset {
	s.WorkspaceId = &v
	return s
}

func (s *WorkspaceDnsRecordset) SetResourceId(v string) *WorkspaceDnsRecordset {
	s.ResourceId = &v
	return s
}

func (s *WorkspaceDnsRecordset) SetResourceIaasId(v string) *WorkspaceDnsRecordset {
	s.ResourceIaasId = &v
	return s
}

func (s *WorkspaceDnsRecordset) SetUtcCreate(v string) *WorkspaceDnsRecordset {
	s.UtcCreate = &v
	return s
}

func (s *WorkspaceDnsRecordset) SetUtcModified(v string) *WorkspaceDnsRecordset {
	s.UtcModified = &v
	return s
}

// IAM用户信息
type UserDTO struct {
	// 用户ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 创建时间
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 最近修改时间
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 客户ID
	CustomerId *string `json:"customer_id,omitempty" xml:"customer_id,omitempty"`
	// 用户类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 用户显示名称
	RealName *string `json:"real_name,omitempty" xml:"real_name,omitempty"`
	// 用户名
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s UserDTO) String() string {
	return tea.Prettify(s)
}

func (s UserDTO) GoString() string {
	return s.String()
}

func (s *UserDTO) SetId(v string) *UserDTO {
	s.Id = &v
	return s
}

func (s *UserDTO) SetUtcCreate(v string) *UserDTO {
	s.UtcCreate = &v
	return s
}

func (s *UserDTO) SetUtcModified(v string) *UserDTO {
	s.UtcModified = &v
	return s
}

func (s *UserDTO) SetCustomerId(v string) *UserDTO {
	s.CustomerId = &v
	return s
}

func (s *UserDTO) SetType(v string) *UserDTO {
	s.Type = &v
	return s
}

func (s *UserDTO) SetRealName(v string) *UserDTO {
	s.RealName = &v
	return s
}

func (s *UserDTO) SetName(v string) *UserDTO {
	s.Name = &v
	return s
}

// DatabaseSpec
type DatabaseSpec struct {
	// cpu
	Cpu *int64 `json:"cpu,omitempty" xml:"cpu,omitempty"`
	// custom_storage
	CustomStorage *bool `json:"custom_storage,omitempty" xml:"custom_storage,omitempty"`
	// engine
	Engine *string `json:"engine,omitempty" xml:"engine,omitempty"`
	// engine_version
	EngineVersion []*string `json:"engine_version,omitempty" xml:"engine_version,omitempty" type:"Repeated"`
	// iaas_id
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// max_connections
	MaxConnections *int64 `json:"max_connections,omitempty" xml:"max_connections,omitempty"`
	// max_iops
	MaxIops *int64 `json:"max_iops,omitempty" xml:"max_iops,omitempty"`
	// max_storage
	MaxStorage *int64 `json:"max_storage,omitempty" xml:"max_storage,omitempty"`
	// memory
	Memory *int64 `json:"memory,omitempty" xml:"memory,omitempty"`
	// min_storage
	MinStorage *int64 `json:"min_storage,omitempty" xml:"min_storage,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// supported_storages
	SupportedStorages []*int64 `json:"supported_storages,omitempty" xml:"supported_storages,omitempty" type:"Repeated"`
	// type
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DatabaseSpec) String() string {
	return tea.Prettify(s)
}

func (s DatabaseSpec) GoString() string {
	return s.String()
}

func (s *DatabaseSpec) SetCpu(v int64) *DatabaseSpec {
	s.Cpu = &v
	return s
}

func (s *DatabaseSpec) SetCustomStorage(v bool) *DatabaseSpec {
	s.CustomStorage = &v
	return s
}

func (s *DatabaseSpec) SetEngine(v string) *DatabaseSpec {
	s.Engine = &v
	return s
}

func (s *DatabaseSpec) SetEngineVersion(v []*string) *DatabaseSpec {
	s.EngineVersion = v
	return s
}

func (s *DatabaseSpec) SetIaasId(v string) *DatabaseSpec {
	s.IaasId = &v
	return s
}

func (s *DatabaseSpec) SetId(v string) *DatabaseSpec {
	s.Id = &v
	return s
}

func (s *DatabaseSpec) SetMaxConnections(v int64) *DatabaseSpec {
	s.MaxConnections = &v
	return s
}

func (s *DatabaseSpec) SetMaxIops(v int64) *DatabaseSpec {
	s.MaxIops = &v
	return s
}

func (s *DatabaseSpec) SetMaxStorage(v int64) *DatabaseSpec {
	s.MaxStorage = &v
	return s
}

func (s *DatabaseSpec) SetMemory(v int64) *DatabaseSpec {
	s.Memory = &v
	return s
}

func (s *DatabaseSpec) SetMinStorage(v int64) *DatabaseSpec {
	s.MinStorage = &v
	return s
}

func (s *DatabaseSpec) SetName(v string) *DatabaseSpec {
	s.Name = &v
	return s
}

func (s *DatabaseSpec) SetSupportedStorages(v []*int64) *DatabaseSpec {
	s.SupportedStorages = v
	return s
}

func (s *DatabaseSpec) SetType(v string) *DatabaseSpec {
	s.Type = &v
	return s
}

// DatabaseImportVO
type DatabaseImportVO struct {
	// iaas_id
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// type
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// engine
	Engine *string `json:"engine,omitempty" xml:"engine,omitempty"`
	// net_type
	NetType *string `json:"net_type,omitempty" xml:"net_type,omitempty"`
	// utc_create
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// importInfo
	ImportInfo *ImportVO `json:"import_info,omitempty" xml:"import_info,omitempty" require:"true"`
}

func (s DatabaseImportVO) String() string {
	return tea.Prettify(s)
}

func (s DatabaseImportVO) GoString() string {
	return s.String()
}

func (s *DatabaseImportVO) SetIaasId(v string) *DatabaseImportVO {
	s.IaasId = &v
	return s
}

func (s *DatabaseImportVO) SetDescription(v string) *DatabaseImportVO {
	s.Description = &v
	return s
}

func (s *DatabaseImportVO) SetType(v string) *DatabaseImportVO {
	s.Type = &v
	return s
}

func (s *DatabaseImportVO) SetStatus(v string) *DatabaseImportVO {
	s.Status = &v
	return s
}

func (s *DatabaseImportVO) SetEngine(v string) *DatabaseImportVO {
	s.Engine = &v
	return s
}

func (s *DatabaseImportVO) SetNetType(v string) *DatabaseImportVO {
	s.NetType = &v
	return s
}

func (s *DatabaseImportVO) SetUtcCreate(v string) *DatabaseImportVO {
	s.UtcCreate = &v
	return s
}

func (s *DatabaseImportVO) SetImportInfo(v *ImportVO) *DatabaseImportVO {
	s.ImportInfo = v
	return s
}

// 一个应用发布包视图
type AppPackageListView struct {
	// app_id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty"`
	// app_owner_id
	AppOwnerId *string `json:"app_owner_id,omitempty" xml:"app_owner_id,omitempty"`
	// app_owner_name
	AppOwnerName *string `json:"app_owner_name,omitempty" xml:"app_owner_name,omitempty"`
	// app_status
	AppStatus *string `json:"app_status,omitempty" xml:"app_status,omitempty"`
	// buildpack_id
	BuildpackId *string `json:"buildpack_id,omitempty" xml:"buildpack_id,omitempty"`
	// buildpack_name
	BuildpackName *string `json:"buildpack_name,omitempty" xml:"buildpack_name,omitempty"`
	// buildpack_version
	BuildpackVersion *string `json:"buildpack_version,omitempty" xml:"buildpack_version,omitempty"`
	// latest_package
	LatestPackage *AppManifest `json:"latest_package,omitempty" xml:"latest_package,omitempty"`
	// package_count
	PackageCount *int64 `json:"package_count,omitempty" xml:"package_count,omitempty"`
}

func (s AppPackageListView) String() string {
	return tea.Prettify(s)
}

func (s AppPackageListView) GoString() string {
	return s.String()
}

func (s *AppPackageListView) SetAppId(v string) *AppPackageListView {
	s.AppId = &v
	return s
}

func (s *AppPackageListView) SetAppName(v string) *AppPackageListView {
	s.AppName = &v
	return s
}

func (s *AppPackageListView) SetAppOwnerId(v string) *AppPackageListView {
	s.AppOwnerId = &v
	return s
}

func (s *AppPackageListView) SetAppOwnerName(v string) *AppPackageListView {
	s.AppOwnerName = &v
	return s
}

func (s *AppPackageListView) SetAppStatus(v string) *AppPackageListView {
	s.AppStatus = &v
	return s
}

func (s *AppPackageListView) SetBuildpackId(v string) *AppPackageListView {
	s.BuildpackId = &v
	return s
}

func (s *AppPackageListView) SetBuildpackName(v string) *AppPackageListView {
	s.BuildpackName = &v
	return s
}

func (s *AppPackageListView) SetBuildpackVersion(v string) *AppPackageListView {
	s.BuildpackVersion = &v
	return s
}

func (s *AppPackageListView) SetLatestPackage(v *AppManifest) *AppPackageListView {
	s.LatestPackage = v
	return s
}

func (s *AppPackageListView) SetPackageCount(v int64) *AppPackageListView {
	s.PackageCount = &v
	return s
}

// PermissionVO
type PermissionVO struct {
	// authorizedCidrIp
	AuthorizedCidrIp *string `json:"authorized_cidr_ip,omitempty" xml:"authorized_cidr_ip,omitempty"`
	// authorize_type
	AuthorizeType *string `json:"authorize_type,omitempty" xml:"authorize_type,omitempty"`
	// direction
	Direction *string `json:"direction,omitempty" xml:"direction,omitempty"`
	// endPort
	EndPort *int64 `json:"end_port,omitempty" xml:"end_port,omitempty"`
	// ipProtocol
	IpProtocol *string `json:"ip_protocol,omitempty" xml:"ip_protocol,omitempty"`
	// nicType
	NicType *string `json:"nic_type,omitempty" xml:"nic_type,omitempty"`
	// policy
	Policy *string `json:"policy,omitempty" xml:"policy,omitempty"`
	// priority
	Priority *int64 `json:"priority,omitempty" xml:"priority,omitempty"`
	// securityGroupId
	SecurityGroupId *string `json:"security_group_id,omitempty" xml:"security_group_id,omitempty"`
	// startPort
	StartPort *int64 `json:"start_port,omitempty" xml:"start_port,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s PermissionVO) String() string {
	return tea.Prettify(s)
}

func (s PermissionVO) GoString() string {
	return s.String()
}

func (s *PermissionVO) SetAuthorizedCidrIp(v string) *PermissionVO {
	s.AuthorizedCidrIp = &v
	return s
}

func (s *PermissionVO) SetAuthorizeType(v string) *PermissionVO {
	s.AuthorizeType = &v
	return s
}

func (s *PermissionVO) SetDirection(v string) *PermissionVO {
	s.Direction = &v
	return s
}

func (s *PermissionVO) SetEndPort(v int64) *PermissionVO {
	s.EndPort = &v
	return s
}

func (s *PermissionVO) SetIpProtocol(v string) *PermissionVO {
	s.IpProtocol = &v
	return s
}

func (s *PermissionVO) SetNicType(v string) *PermissionVO {
	s.NicType = &v
	return s
}

func (s *PermissionVO) SetPolicy(v string) *PermissionVO {
	s.Policy = &v
	return s
}

func (s *PermissionVO) SetPriority(v int64) *PermissionVO {
	s.Priority = &v
	return s
}

func (s *PermissionVO) SetSecurityGroupId(v string) *PermissionVO {
	s.SecurityGroupId = &v
	return s
}

func (s *PermissionVO) SetStartPort(v int64) *PermissionVO {
	s.StartPort = &v
	return s
}

func (s *PermissionVO) SetId(v string) *PermissionVO {
	s.Id = &v
	return s
}

// ComputerImportVO
type ComputerImportVO struct {
	// computer iaaas id
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// zone identity
	ZoneIaasId *string `json:"zone_iaas_id,omitempty" xml:"zone_iaas_id,omitempty"`
	// zone name
	ZoneName *string `json:"zone_name,omitempty" xml:"zone_name,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// private ip
	PrivateIp *string `json:"private_ip,omitempty" xml:"private_ip,omitempty"`
	// public ip
	PublicIp *string `json:"public_ip,omitempty" xml:"public_ip,omitempty"`
	// elasticIp
	ElasticIp *string `json:"elastic_ip,omitempty" xml:"elastic_ip,omitempty"`
	// vpcIaasId
	VpcIaasId *string `json:"vpc_iaas_id,omitempty" xml:"vpc_iaas_id,omitempty"`
	// joined security group infos
	JoinedSecurityGroup []*JoinedSecurityGroupVO `json:"joined_security_group,omitempty" xml:"joined_security_group,omitempty" type:"Repeated"`
	// creation time
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// import info
	ImportInfo *ImportVO `json:"import_info,omitempty" xml:"import_info,omitempty"`
}

func (s ComputerImportVO) String() string {
	return tea.Prettify(s)
}

func (s ComputerImportVO) GoString() string {
	return s.String()
}

func (s *ComputerImportVO) SetIaasId(v string) *ComputerImportVO {
	s.IaasId = &v
	return s
}

func (s *ComputerImportVO) SetName(v string) *ComputerImportVO {
	s.Name = &v
	return s
}

func (s *ComputerImportVO) SetZoneIaasId(v string) *ComputerImportVO {
	s.ZoneIaasId = &v
	return s
}

func (s *ComputerImportVO) SetZoneName(v string) *ComputerImportVO {
	s.ZoneName = &v
	return s
}

func (s *ComputerImportVO) SetDescription(v string) *ComputerImportVO {
	s.Description = &v
	return s
}

func (s *ComputerImportVO) SetPrivateIp(v string) *ComputerImportVO {
	s.PrivateIp = &v
	return s
}

func (s *ComputerImportVO) SetPublicIp(v string) *ComputerImportVO {
	s.PublicIp = &v
	return s
}

func (s *ComputerImportVO) SetElasticIp(v string) *ComputerImportVO {
	s.ElasticIp = &v
	return s
}

func (s *ComputerImportVO) SetVpcIaasId(v string) *ComputerImportVO {
	s.VpcIaasId = &v
	return s
}

func (s *ComputerImportVO) SetJoinedSecurityGroup(v []*JoinedSecurityGroupVO) *ComputerImportVO {
	s.JoinedSecurityGroup = v
	return s
}

func (s *ComputerImportVO) SetUtcCreate(v string) *ComputerImportVO {
	s.UtcCreate = &v
	return s
}

func (s *ComputerImportVO) SetImportInfo(v *ImportVO) *ComputerImportVO {
	s.ImportInfo = v
	return s
}

// 用户查询
type UserQuery struct {
	// 基础查询
	BaseQuery *PaginationQuery `json:"base_query,omitempty" xml:"base_query,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// customerId
	CustomerId *string `json:"customer_id,omitempty" xml:"customer_id,omitempty"`
	// tenantId
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// type
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// types
	Types []*string `json:"types,omitempty" xml:"types,omitempty" type:"Repeated"`
	// email
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// mobile
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty"`
	// realName
	RealName *string `json:"real_name,omitempty" xml:"real_name,omitempty"`
	// loginName
	LoginName *string `json:"login_name,omitempty" xml:"login_name,omitempty"`
}

func (s UserQuery) String() string {
	return tea.Prettify(s)
}

func (s UserQuery) GoString() string {
	return s.String()
}

func (s *UserQuery) SetBaseQuery(v *PaginationQuery) *UserQuery {
	s.BaseQuery = v
	return s
}

func (s *UserQuery) SetId(v string) *UserQuery {
	s.Id = &v
	return s
}

func (s *UserQuery) SetCustomerId(v string) *UserQuery {
	s.CustomerId = &v
	return s
}

func (s *UserQuery) SetTenantId(v string) *UserQuery {
	s.TenantId = &v
	return s
}

func (s *UserQuery) SetType(v string) *UserQuery {
	s.Type = &v
	return s
}

func (s *UserQuery) SetTypes(v []*string) *UserQuery {
	s.Types = v
	return s
}

func (s *UserQuery) SetEmail(v string) *UserQuery {
	s.Email = &v
	return s
}

func (s *UserQuery) SetMobile(v string) *UserQuery {
	s.Mobile = &v
	return s
}

func (s *UserQuery) SetRealName(v string) *UserQuery {
	s.RealName = &v
	return s
}

func (s *UserQuery) SetLoginName(v string) *UserQuery {
	s.LoginName = &v
	return s
}

// 服务器规格
type ComputerSpec struct {
	// cpu个数
	Cpu *int64 `json:"cpu,omitempty" xml:"cpu,omitempty"`
	// 可以挂载的磁盘类型
	DiskSpecIds []*string `json:"disk_spec_ids,omitempty" xml:"disk_spec_ids,omitempty" type:"Repeated"`
	// 服务器规格名称
	Group *string `json:"group,omitempty" xml:"group,omitempty" require:"true"`
	// 是否有IO优化
	IoOptimized *bool `json:"io_optimized,omitempty" xml:"io_optimized,omitempty"`
	// 内存大小
	Memory *int64 `json:"memory,omitempty" xml:"memory,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// enable
	Enable *bool `json:"enable,omitempty" xml:"enable,omitempty"`
	// iaasId
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// COMPUTER_ECS
	IaasType *string `json:"iaas_type,omitempty" xml:"iaas_type,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// providerId
	ProviderId *string `json:"provider_id,omitempty" xml:"provider_id,omitempty"`
}

func (s ComputerSpec) String() string {
	return tea.Prettify(s)
}

func (s ComputerSpec) GoString() string {
	return s.String()
}

func (s *ComputerSpec) SetCpu(v int64) *ComputerSpec {
	s.Cpu = &v
	return s
}

func (s *ComputerSpec) SetDiskSpecIds(v []*string) *ComputerSpec {
	s.DiskSpecIds = v
	return s
}

func (s *ComputerSpec) SetGroup(v string) *ComputerSpec {
	s.Group = &v
	return s
}

func (s *ComputerSpec) SetIoOptimized(v bool) *ComputerSpec {
	s.IoOptimized = &v
	return s
}

func (s *ComputerSpec) SetMemory(v int64) *ComputerSpec {
	s.Memory = &v
	return s
}

func (s *ComputerSpec) SetDescription(v string) *ComputerSpec {
	s.Description = &v
	return s
}

func (s *ComputerSpec) SetEnable(v bool) *ComputerSpec {
	s.Enable = &v
	return s
}

func (s *ComputerSpec) SetIaasId(v string) *ComputerSpec {
	s.IaasId = &v
	return s
}

func (s *ComputerSpec) SetIaasType(v string) *ComputerSpec {
	s.IaasType = &v
	return s
}

func (s *ComputerSpec) SetId(v string) *ComputerSpec {
	s.Id = &v
	return s
}

func (s *ComputerSpec) SetName(v string) *ComputerSpec {
	s.Name = &v
	return s
}

func (s *ComputerSpec) SetProviderId(v string) *ComputerSpec {
	s.ProviderId = &v
	return s
}

// Staragent Operation Task info
type OperationTask struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// computer id
	ComputerId *string `json:"computer_id,omitempty" xml:"computer_id,omitempty"`
	// computer ip
	ComputerIp *string `json:"computer_ip,omitempty" xml:"computer_ip,omitempty"`
	// command
	Command *string `json:"command,omitempty" xml:"command,omitempty"`
	// 状态取值：INIT，PROCESSING，SUCCEEDED，FAILED，TIMEOUT，NOT_FOUND
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// errorCode
	ErrorCode *string `json:"error_code,omitempty" xml:"error_code,omitempty"`
	// resultMsg
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s OperationTask) String() string {
	return tea.Prettify(s)
}

func (s OperationTask) GoString() string {
	return s.String()
}

func (s *OperationTask) SetId(v string) *OperationTask {
	s.Id = &v
	return s
}

func (s *OperationTask) SetComputerId(v string) *OperationTask {
	s.ComputerId = &v
	return s
}

func (s *OperationTask) SetComputerIp(v string) *OperationTask {
	s.ComputerIp = &v
	return s
}

func (s *OperationTask) SetCommand(v string) *OperationTask {
	s.Command = &v
	return s
}

func (s *OperationTask) SetStatus(v string) *OperationTask {
	s.Status = &v
	return s
}

func (s *OperationTask) SetErrorCode(v string) *OperationTask {
	s.ErrorCode = &v
	return s
}

func (s *OperationTask) SetResultMsg(v string) *OperationTask {
	s.ResultMsg = &v
	return s
}

// 应用画像应用节点列表结构体
type AppPortraitAppNodeList struct {
	// 返回ecs节点数据
	Ecs []*AppPortraitAppNodeEcsList `json:"ecs,omitempty" xml:"ecs,omitempty" type:"Repeated"`
	// 返回slb节点数据
	Slb []*AppPortraitAppNodeEcsList `json:"slb,omitempty" xml:"slb,omitempty" type:"Repeated"`
	// 返回rds节点数据
	Rds []*AppPortraitAppNodeEcsList `json:"rds,omitempty" xml:"rds,omitempty" type:"Repeated"`
	// 返回pod节点数据
	Pod []*AppPortraitAppNodeEcsList `json:"pod,omitempty" xml:"pod,omitempty" type:"Repeated"`
}

func (s AppPortraitAppNodeList) String() string {
	return tea.Prettify(s)
}

func (s AppPortraitAppNodeList) GoString() string {
	return s.String()
}

func (s *AppPortraitAppNodeList) SetEcs(v []*AppPortraitAppNodeEcsList) *AppPortraitAppNodeList {
	s.Ecs = v
	return s
}

func (s *AppPortraitAppNodeList) SetSlb(v []*AppPortraitAppNodeEcsList) *AppPortraitAppNodeList {
	s.Slb = v
	return s
}

func (s *AppPortraitAppNodeList) SetRds(v []*AppPortraitAppNodeEcsList) *AppPortraitAppNodeList {
	s.Rds = v
	return s
}

func (s *AppPortraitAppNodeList) SetPod(v []*AppPortraitAppNodeEcsList) *AppPortraitAppNodeList {
	s.Pod = v
	return s
}

// 阿里云日志服务(SLS)-日志项目
type SLSProject struct {
	// 项目描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 项目名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 阿里云返回的regionName，仅作展示用
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
}

func (s SLSProject) String() string {
	return tea.Prettify(s)
}

func (s SLSProject) GoString() string {
	return s.String()
}

func (s *SLSProject) SetDescription(v string) *SLSProject {
	s.Description = &v
	return s
}

func (s *SLSProject) SetName(v string) *SLSProject {
	s.Name = &v
	return s
}

func (s *SLSProject) SetRegion(v string) *SLSProject {
	s.Region = &v
	return s
}

// 维度组合实例，类似表示WORKSPACE_A下的APP_B
type DimInstanceGroup struct {
	// dim_group_id
	DimGroupId *string `json:"dim_group_id,omitempty" xml:"dim_group_id,omitempty" require:"true"`
	// dim_instances
	DimInstances []*DimInstance `json:"dim_instances,omitempty" xml:"dim_instances,omitempty" require:"true" type:"Repeated"`
}

func (s DimInstanceGroup) String() string {
	return tea.Prettify(s)
}

func (s DimInstanceGroup) GoString() string {
	return s.String()
}

func (s *DimInstanceGroup) SetDimGroupId(v string) *DimInstanceGroup {
	s.DimGroupId = &v
	return s
}

func (s *DimInstanceGroup) SetDimInstances(v []*DimInstance) *DimInstanceGroup {
	s.DimInstances = v
	return s
}

// 查询应用画像ecs利用率
type AppPortraitEcsUsageGet struct {
	// cpu平均利用率
	AverageCpu *string `json:"average_cpu,omitempty" xml:"average_cpu,omitempty" require:"true"`
	// 内存平均利用率
	AverageMem *string `json:"average_mem,omitempty" xml:"average_mem,omitempty" require:"true"`
	// 磁盘平均利用率
	AverageDisk *string `json:"average_disk,omitempty" xml:"average_disk,omitempty" require:"true"`
	// 建议1：xxxxx
	Tips *string `json:"tips,omitempty" xml:"tips,omitempty" require:"true"`
}

func (s AppPortraitEcsUsageGet) String() string {
	return tea.Prettify(s)
}

func (s AppPortraitEcsUsageGet) GoString() string {
	return s.String()
}

func (s *AppPortraitEcsUsageGet) SetAverageCpu(v string) *AppPortraitEcsUsageGet {
	s.AverageCpu = &v
	return s
}

func (s *AppPortraitEcsUsageGet) SetAverageMem(v string) *AppPortraitEcsUsageGet {
	s.AverageMem = &v
	return s
}

func (s *AppPortraitEcsUsageGet) SetAverageDisk(v string) *AppPortraitEcsUsageGet {
	s.AverageDisk = &v
	return s
}

func (s *AppPortraitEcsUsageGet) SetTips(v string) *AppPortraitEcsUsageGet {
	s.Tips = &v
	return s
}

// 阿里云日志服务(SLS)-日志库
type SLSLogStore struct {
	// 日志库名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// Shard个数，单位为个，范围为1~100。
	ShardCount *int64 `json:"shard_count,omitempty" xml:"shard_count,omitempty" require:"true"`
	// 数据的保存时间，单位为天，范围1~3600。
	Ttl *int64 `json:"ttl,omitempty" xml:"ttl,omitempty" require:"true"`
}

func (s SLSLogStore) String() string {
	return tea.Prettify(s)
}

func (s SLSLogStore) GoString() string {
	return s.String()
}

func (s *SLSLogStore) SetName(v string) *SLSLogStore {
	s.Name = &v
	return s
}

func (s *SLSLogStore) SetShardCount(v int64) *SLSLogStore {
	s.ShardCount = &v
	return s
}

func (s *SLSLogStore) SetTtl(v int64) *SLSLogStore {
	s.Ttl = &v
	return s
}

// Connection
type Connection struct {
	// access_key
	AccessKey *string `json:"access_key,omitempty" xml:"access_key,omitempty"`
	// access_secret
	AccessSecret *string `json:"access_secret,omitempty" xml:"access_secret,omitempty"`
	// created_time
	CreatedTime *string `json:"created_time,omitempty" xml:"created_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// executor
	Executor *string `json:"executor,omitempty" xml:"executor,omitempty"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty"`
	// 修改时间
	ModifiedTime *string `json:"modified_time,omitempty" xml:"modified_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// plug
	Plug *ConnectionStub `json:"plug,omitempty" xml:"plug,omitempty"`
	// socket
	Socket *ConnectionStub `json:"socket,omitempty" xml:"socket,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// tenant_id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
}

func (s Connection) String() string {
	return tea.Prettify(s)
}

func (s Connection) GoString() string {
	return s.String()
}

func (s *Connection) SetAccessKey(v string) *Connection {
	s.AccessKey = &v
	return s
}

func (s *Connection) SetAccessSecret(v string) *Connection {
	s.AccessSecret = &v
	return s
}

func (s *Connection) SetCreatedTime(v string) *Connection {
	s.CreatedTime = &v
	return s
}

func (s *Connection) SetExecutor(v string) *Connection {
	s.Executor = &v
	return s
}

func (s *Connection) SetId(v int64) *Connection {
	s.Id = &v
	return s
}

func (s *Connection) SetIdentity(v string) *Connection {
	s.Identity = &v
	return s
}

func (s *Connection) SetModifiedTime(v string) *Connection {
	s.ModifiedTime = &v
	return s
}

func (s *Connection) SetName(v string) *Connection {
	s.Name = &v
	return s
}

func (s *Connection) SetPlug(v *ConnectionStub) *Connection {
	s.Plug = v
	return s
}

func (s *Connection) SetSocket(v *ConnectionStub) *Connection {
	s.Socket = v
	return s
}

func (s *Connection) SetStatus(v string) *Connection {
	s.Status = &v
	return s
}

func (s *Connection) SetTenantId(v string) *Connection {
	s.TenantId = &v
	return s
}

// IaasDnsProvider
type IaasDnsProvider struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// service_config_id
	ServiceConfigId *string `json:"service_config_id,omitempty" xml:"service_config_id,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// type
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// regionId
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty" require:"true"`
	// zoneId
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty"`
	// utc_create
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// utc_modified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// dns_zones
	DnsZones []*DnsZones `json:"dns_zones,omitempty" xml:"dns_zones,omitempty" require:"true" type:"Repeated"`
}

func (s IaasDnsProvider) String() string {
	return tea.Prettify(s)
}

func (s IaasDnsProvider) GoString() string {
	return s.String()
}

func (s *IaasDnsProvider) SetId(v string) *IaasDnsProvider {
	s.Id = &v
	return s
}

func (s *IaasDnsProvider) SetServiceConfigId(v string) *IaasDnsProvider {
	s.ServiceConfigId = &v
	return s
}

func (s *IaasDnsProvider) SetName(v string) *IaasDnsProvider {
	s.Name = &v
	return s
}

func (s *IaasDnsProvider) SetDescription(v string) *IaasDnsProvider {
	s.Description = &v
	return s
}

func (s *IaasDnsProvider) SetType(v string) *IaasDnsProvider {
	s.Type = &v
	return s
}

func (s *IaasDnsProvider) SetStatus(v string) *IaasDnsProvider {
	s.Status = &v
	return s
}

func (s *IaasDnsProvider) SetRegionId(v string) *IaasDnsProvider {
	s.RegionId = &v
	return s
}

func (s *IaasDnsProvider) SetZoneId(v string) *IaasDnsProvider {
	s.ZoneId = &v
	return s
}

func (s *IaasDnsProvider) SetUtcCreate(v string) *IaasDnsProvider {
	s.UtcCreate = &v
	return s
}

func (s *IaasDnsProvider) SetUtcModified(v string) *IaasDnsProvider {
	s.UtcModified = &v
	return s
}

func (s *IaasDnsProvider) SetDnsZones(v []*DnsZones) *IaasDnsProvider {
	s.DnsZones = v
	return s
}

// computer common image
type CommonImage struct {
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// is enable
	Enable *bool `json:"enable,omitempty" xml:"enable,omitempty"`
	// iaas id
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// iaas type
	IaasType *string `json:"iaas_type,omitempty" xml:"iaas_type,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 是否仅杭州金区 vpc 可用镜像
	OnlyHzFinVpcSupported *bool `json:"only_hz_fin_vpc_supported,omitempty" xml:"only_hz_fin_vpc_supported,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// os
	Os *string `json:"os,omitempty" xml:"os,omitempty"`
	// os bit取值：32，64
	OsBit *int64 `json:"os_bit,omitempty" xml:"os_bit,omitempty"`
	// os version
	OsVersion *string `json:"os_version,omitempty" xml:"os_version,omitempty"`
	// provider id
	ProviderId *string `json:"provider_id,omitempty" xml:"provider_id,omitempty"`
	// region id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// system disk size(GB)
	SystemDiskSize *int64 `json:"system_disk_size,omitempty" xml:"system_disk_size,omitempty"`
}

func (s CommonImage) String() string {
	return tea.Prettify(s)
}

func (s CommonImage) GoString() string {
	return s.String()
}

func (s *CommonImage) SetDescription(v string) *CommonImage {
	s.Description = &v
	return s
}

func (s *CommonImage) SetEnable(v bool) *CommonImage {
	s.Enable = &v
	return s
}

func (s *CommonImage) SetIaasId(v string) *CommonImage {
	s.IaasId = &v
	return s
}

func (s *CommonImage) SetIaasType(v string) *CommonImage {
	s.IaasType = &v
	return s
}

func (s *CommonImage) SetId(v string) *CommonImage {
	s.Id = &v
	return s
}

func (s *CommonImage) SetOnlyHzFinVpcSupported(v bool) *CommonImage {
	s.OnlyHzFinVpcSupported = &v
	return s
}

func (s *CommonImage) SetName(v string) *CommonImage {
	s.Name = &v
	return s
}

func (s *CommonImage) SetOs(v string) *CommonImage {
	s.Os = &v
	return s
}

func (s *CommonImage) SetOsBit(v int64) *CommonImage {
	s.OsBit = &v
	return s
}

func (s *CommonImage) SetOsVersion(v string) *CommonImage {
	s.OsVersion = &v
	return s
}

func (s *CommonImage) SetProviderId(v string) *CommonImage {
	s.ProviderId = &v
	return s
}

func (s *CommonImage) SetRegionId(v string) *CommonImage {
	s.RegionId = &v
	return s
}

func (s *CommonImage) SetStatus(v string) *CommonImage {
	s.Status = &v
	return s
}

func (s *CommonImage) SetSystemDiskSize(v int64) *CommonImage {
	s.SystemDiskSize = &v
	return s
}

// SecurityGroupVO
type SecurityGroupVO struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// iaasIds
	IaasIds []*string `json:"iaas_ids,omitempty" xml:"iaas_ids,omitempty" type:"Repeated"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// type
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// utcCreate
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// instanceCount
	InstanceCount *int64 `json:"instance_count,omitempty" xml:"instance_count,omitempty"`
}

func (s SecurityGroupVO) String() string {
	return tea.Prettify(s)
}

func (s SecurityGroupVO) GoString() string {
	return s.String()
}

func (s *SecurityGroupVO) SetId(v string) *SecurityGroupVO {
	s.Id = &v
	return s
}

func (s *SecurityGroupVO) SetIaasIds(v []*string) *SecurityGroupVO {
	s.IaasIds = v
	return s
}

func (s *SecurityGroupVO) SetName(v string) *SecurityGroupVO {
	s.Name = &v
	return s
}

func (s *SecurityGroupVO) SetDescription(v string) *SecurityGroupVO {
	s.Description = &v
	return s
}

func (s *SecurityGroupVO) SetStatus(v string) *SecurityGroupVO {
	s.Status = &v
	return s
}

func (s *SecurityGroupVO) SetType(v string) *SecurityGroupVO {
	s.Type = &v
	return s
}

func (s *SecurityGroupVO) SetUtcCreate(v string) *SecurityGroupVO {
	s.UtcCreate = &v
	return s
}

func (s *SecurityGroupVO) SetInstanceCount(v int64) *SecurityGroupVO {
	s.InstanceCount = &v
	return s
}

// 应用画像应用列表返回数据
type AppPortraitAppList struct {
	// 应用id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 应用名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 应用分组名称
	AppGroupName *string `json:"app_group_name,omitempty" xml:"app_group_name,omitempty"`
	// 应用所属分组id
	AppGroupId *string `json:"app_group_id,omitempty" xml:"app_group_id,omitempty"`
	// 应用负责人
	OwnerDisplayName *string `json:"owner_display_name,omitempty" xml:"owner_display_name,omitempty"`
	// 应用描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 技术栈名称
	BuildpackName *string `json:"buildpack_name,omitempty" xml:"buildpack_name,omitempty"`
	// 技术栈版本
	BuildpackVersion *string `json:"buildpack_version,omitempty" xml:"buildpack_version,omitempty"`
}

func (s AppPortraitAppList) String() string {
	return tea.Prettify(s)
}

func (s AppPortraitAppList) GoString() string {
	return s.String()
}

func (s *AppPortraitAppList) SetId(v string) *AppPortraitAppList {
	s.Id = &v
	return s
}

func (s *AppPortraitAppList) SetName(v string) *AppPortraitAppList {
	s.Name = &v
	return s
}

func (s *AppPortraitAppList) SetAppGroupName(v string) *AppPortraitAppList {
	s.AppGroupName = &v
	return s
}

func (s *AppPortraitAppList) SetAppGroupId(v string) *AppPortraitAppList {
	s.AppGroupId = &v
	return s
}

func (s *AppPortraitAppList) SetOwnerDisplayName(v string) *AppPortraitAppList {
	s.OwnerDisplayName = &v
	return s
}

func (s *AppPortraitAppList) SetDescription(v string) *AppPortraitAppList {
	s.Description = &v
	return s
}

func (s *AppPortraitAppList) SetBuildpackName(v string) *AppPortraitAppList {
	s.BuildpackName = &v
	return s
}

func (s *AppPortraitAppList) SetBuildpackVersion(v string) *AppPortraitAppList {
	s.BuildpackVersion = &v
	return s
}

// staragent info
type StarAgentInfo struct {
	// computer serial number
	Sn *string `json:"sn,omitempty" xml:"sn,omitempty"`
	// hostname
	Hostname *string `json:"hostname,omitempty" xml:"hostname,omitempty"`
	// ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
	// ip list
	IpList *string `json:"ip_list,omitempty" xml:"ip_list,omitempty"`
	// 状态取值：RUNNING，ERROR，REGISTER，NOFIND
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s StarAgentInfo) String() string {
	return tea.Prettify(s)
}

func (s StarAgentInfo) GoString() string {
	return s.String()
}

func (s *StarAgentInfo) SetSn(v string) *StarAgentInfo {
	s.Sn = &v
	return s
}

func (s *StarAgentInfo) SetHostname(v string) *StarAgentInfo {
	s.Hostname = &v
	return s
}

func (s *StarAgentInfo) SetIp(v string) *StarAgentInfo {
	s.Ip = &v
	return s
}

func (s *StarAgentInfo) SetIpList(v string) *StarAgentInfo {
	s.IpList = &v
	return s
}

func (s *StarAgentInfo) SetStatus(v string) *StarAgentInfo {
	s.Status = &v
	return s
}

// 应用画像健康分趋势查询结构体
type AppPortraitAppHealthScoreTrendQuery struct {
	// 日期
	Day *string `json:"day,omitempty" xml:"day,omitempty"`
	// 健康分分值
	HealthScore *int64 `json:"health_score,omitempty" xml:"health_score,omitempty"`
}

func (s AppPortraitAppHealthScoreTrendQuery) String() string {
	return tea.Prettify(s)
}

func (s AppPortraitAppHealthScoreTrendQuery) GoString() string {
	return s.String()
}

func (s *AppPortraitAppHealthScoreTrendQuery) SetDay(v string) *AppPortraitAppHealthScoreTrendQuery {
	s.Day = &v
	return s
}

func (s *AppPortraitAppHealthScoreTrendQuery) SetHealthScore(v int64) *AppPortraitAppHealthScoreTrendQuery {
	s.HealthScore = &v
	return s
}

// CellGroup
type CellGroup struct {
	// identity
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// properties
	Properties []*Property `json:"properties,omitempty" xml:"properties,omitempty" type:"Repeated"`
	// instancestatus
	Instancestatus *string `json:"instancestatus,omitempty" xml:"instancestatus,omitempty" require:"true"`
}

func (s CellGroup) String() string {
	return tea.Prettify(s)
}

func (s CellGroup) GoString() string {
	return s.String()
}

func (s *CellGroup) SetIdentity(v string) *CellGroup {
	s.Identity = &v
	return s
}

func (s *CellGroup) SetName(v string) *CellGroup {
	s.Name = &v
	return s
}

func (s *CellGroup) SetDescription(v string) *CellGroup {
	s.Description = &v
	return s
}

func (s *CellGroup) SetProperties(v []*Property) *CellGroup {
	s.Properties = v
	return s
}

func (s *CellGroup) SetInstancestatus(v string) *CellGroup {
	s.Instancestatus = &v
	return s
}

// AppPortraitAppGroupList
type AppPortraitAppGroupList struct {
	// 应用分组id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 应用分组名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s AppPortraitAppGroupList) String() string {
	return tea.Prettify(s)
}

func (s AppPortraitAppGroupList) GoString() string {
	return s.String()
}

func (s *AppPortraitAppGroupList) SetId(v string) *AppPortraitAppGroupList {
	s.Id = &v
	return s
}

func (s *AppPortraitAppGroupList) SetName(v string) *AppPortraitAppGroupList {
	s.Name = &v
	return s
}

// SecurityGroupParam
type SecurityGroupParam struct {
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// region id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// security_group_name
	SecurityGroupName *string `json:"security_group_name,omitempty" xml:"security_group_name,omitempty"`
	// vpc_id
	VpcId *string `json:"vpc_id,omitempty" xml:"vpc_id,omitempty"`
}

func (s SecurityGroupParam) String() string {
	return tea.Prettify(s)
}

func (s SecurityGroupParam) GoString() string {
	return s.String()
}

func (s *SecurityGroupParam) SetDescription(v string) *SecurityGroupParam {
	s.Description = &v
	return s
}

func (s *SecurityGroupParam) SetRegionId(v string) *SecurityGroupParam {
	s.RegionId = &v
	return s
}

func (s *SecurityGroupParam) SetSecurityGroupName(v string) *SecurityGroupParam {
	s.SecurityGroupName = &v
	return s
}

func (s *SecurityGroupParam) SetVpcId(v string) *SecurityGroupParam {
	s.VpcId = &v
	return s
}

// 应用等级视图
type AppLevelView struct {
	// 应用等级基类
	BaseAppLevel *AppLevel `json:"base_app_level,omitempty" xml:"base_app_level,omitempty"`
	// 应用数量
	AppCount *int64 `json:"app_count,omitempty" xml:"app_count,omitempty"`
	// 创建者名称
	CreatorName *string `json:"creator_name,omitempty" xml:"creator_name,omitempty"`
}

func (s AppLevelView) String() string {
	return tea.Prettify(s)
}

func (s AppLevelView) GoString() string {
	return s.String()
}

func (s *AppLevelView) SetBaseAppLevel(v *AppLevel) *AppLevelView {
	s.BaseAppLevel = v
	return s
}

func (s *AppLevelView) SetAppCount(v int64) *AppLevelView {
	s.AppCount = &v
	return s
}

func (s *AppLevelView) SetCreatorName(v string) *AppLevelView {
	s.CreatorName = &v
	return s
}

// 阿里云日志服务(SLS) - 日志结果数组
type SLSLogItem struct {
	// 日志的时间戳（精度为秒，从 1970-1-1 00:00:00 UTC 计算起的秒数）。
	LogTime *int64 `json:"log_time,omitempty" xml:"log_time,omitempty" require:"true"`
	// 日志的来源，写入日志时指定。
	Source *string `json:"source,omitempty" xml:"source,omitempty" require:"true"`
	// 日志原始内容
	Contents []*SLSLogContent `json:"contents,omitempty" xml:"contents,omitempty" require:"true" type:"Repeated"`
}

func (s SLSLogItem) String() string {
	return tea.Prettify(s)
}

func (s SLSLogItem) GoString() string {
	return s.String()
}

func (s *SLSLogItem) SetLogTime(v int64) *SLSLogItem {
	s.LogTime = &v
	return s
}

func (s *SLSLogItem) SetSource(v string) *SLSLogItem {
	s.Source = &v
	return s
}

func (s *SLSLogItem) SetContents(v []*SLSLogContent) *SLSLogItem {
	s.Contents = v
	return s
}

// 动态查询
type DynamicQuery struct {
	// 分页规则-currentPage
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 字段过滤
	Filter *string `json:"filter,omitempty" xml:"filter,omitempty"`
	// 分页规则-pageSize
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 具体的查询条件字符串
	Query *string `json:"query,omitempty" xml:"query,omitempty" require:"true"`
	// 查询结果的排序规则
	Sort *string `json:"sort,omitempty" xml:"sort,omitempty"`
}

func (s DynamicQuery) String() string {
	return tea.Prettify(s)
}

func (s DynamicQuery) GoString() string {
	return s.String()
}

func (s *DynamicQuery) SetCurrentPage(v int64) *DynamicQuery {
	s.CurrentPage = &v
	return s
}

func (s *DynamicQuery) SetFilter(v string) *DynamicQuery {
	s.Filter = &v
	return s
}

func (s *DynamicQuery) SetPageSize(v int64) *DynamicQuery {
	s.PageSize = &v
	return s
}

func (s *DynamicQuery) SetQuery(v string) *DynamicQuery {
	s.Query = &v
	return s
}

func (s *DynamicQuery) SetSort(v string) *DynamicQuery {
	s.Sort = &v
	return s
}

// IaasConnMetadata
type IaasConnMetadata struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// iaas_provider_id
	IaasProviderId *string `json:"iaas_provider_id,omitempty" xml:"iaas_provider_id,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// iaas_conn_type
	IaasConnType *string `json:"iaas_conn_type,omitempty" xml:"iaas_conn_type,omitempty" require:"true"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// available_features
	AvailableFeatures []*string `json:"available_features,omitempty" xml:"available_features,omitempty" type:"Repeated"`
	// endpoint
	Endpoint *string `json:"endpoint,omitempty" xml:"endpoint,omitempty" require:"true"`
	// region_ids
	RegionIds []*string `json:"region_ids,omitempty" xml:"region_ids,omitempty" require:"true" type:"Repeated"`
	// is_default
	IsDefault *bool `json:"is_default,omitempty" xml:"is_default,omitempty" require:"true"`
	// utc_create
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s IaasConnMetadata) String() string {
	return tea.Prettify(s)
}

func (s IaasConnMetadata) GoString() string {
	return s.String()
}

func (s *IaasConnMetadata) SetId(v string) *IaasConnMetadata {
	s.Id = &v
	return s
}

func (s *IaasConnMetadata) SetIaasProviderId(v string) *IaasConnMetadata {
	s.IaasProviderId = &v
	return s
}

func (s *IaasConnMetadata) SetName(v string) *IaasConnMetadata {
	s.Name = &v
	return s
}

func (s *IaasConnMetadata) SetIaasConnType(v string) *IaasConnMetadata {
	s.IaasConnType = &v
	return s
}

func (s *IaasConnMetadata) SetDescription(v string) *IaasConnMetadata {
	s.Description = &v
	return s
}

func (s *IaasConnMetadata) SetAvailableFeatures(v []*string) *IaasConnMetadata {
	s.AvailableFeatures = v
	return s
}

func (s *IaasConnMetadata) SetEndpoint(v string) *IaasConnMetadata {
	s.Endpoint = &v
	return s
}

func (s *IaasConnMetadata) SetRegionIds(v []*string) *IaasConnMetadata {
	s.RegionIds = v
	return s
}

func (s *IaasConnMetadata) SetIsDefault(v bool) *IaasConnMetadata {
	s.IsDefault = &v
	return s
}

func (s *IaasConnMetadata) SetUtcCreate(v string) *IaasConnMetadata {
	s.UtcCreate = &v
	return s
}

// 应用画像告警明细列表
type AppPortraitAlertList struct {
	// 标题
	Title *string `json:"title,omitempty" xml:"title,omitempty" require:"true"`
	// 告警事件ID
	EventId *string `json:"event_id,omitempty" xml:"event_id,omitempty" require:"true"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 告警级别
	Severity *string `json:"severity,omitempty" xml:"severity,omitempty" require:"true"`
	// 告警内容
	AlertContent *string `json:"alert_content,omitempty" xml:"alert_content,omitempty" require:"true"`
	// 告警时间
	GmtOccurTimestamp *string `json:"gmt_occur_timestamp,omitempty" xml:"gmt_occur_timestamp,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 相关链接
	AlarmUrl *string `json:"alarm_url,omitempty" xml:"alarm_url,omitempty" require:"true"`
	//      * HEALTHY(0), // 健康
	//      * PENDING(1), // 触发中
	//      * FIRING(2), // 告警中
	//      * SUSPENDED(3), // 已暂停
	//      * SILENCED(4), // 已静默
	//      * RECOVERED(5), // 已恢复
	//
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
}

func (s AppPortraitAlertList) String() string {
	return tea.Prettify(s)
}

func (s AppPortraitAlertList) GoString() string {
	return s.String()
}

func (s *AppPortraitAlertList) SetTitle(v string) *AppPortraitAlertList {
	s.Title = &v
	return s
}

func (s *AppPortraitAlertList) SetEventId(v string) *AppPortraitAlertList {
	s.EventId = &v
	return s
}

func (s *AppPortraitAlertList) SetAppName(v string) *AppPortraitAlertList {
	s.AppName = &v
	return s
}

func (s *AppPortraitAlertList) SetSeverity(v string) *AppPortraitAlertList {
	s.Severity = &v
	return s
}

func (s *AppPortraitAlertList) SetAlertContent(v string) *AppPortraitAlertList {
	s.AlertContent = &v
	return s
}

func (s *AppPortraitAlertList) SetGmtOccurTimestamp(v string) *AppPortraitAlertList {
	s.GmtOccurTimestamp = &v
	return s
}

func (s *AppPortraitAlertList) SetAlarmUrl(v string) *AppPortraitAlertList {
	s.AlarmUrl = &v
	return s
}

func (s *AppPortraitAlertList) SetStatus(v int64) *AppPortraitAlertList {
	s.Status = &v
	return s
}

// 应用服务查询
type AppServiceQuery struct {
	// 根据 id 查询
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspaceId
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// appId
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// deployStatus
	DeployStatus *string `json:"deploy_status,omitempty" xml:"deploy_status,omitempty"`
	// ownerId
	OwnerId *string `json:"owner_id,omitempty" xml:"owner_id,omitempty"`
	// workspaceIds
	WorkspaceIds []*string `json:"workspace_ids,omitempty" xml:"workspace_ids,omitempty" type:"Repeated"`
	// appIds
	AppIds []*string `json:"app_ids,omitempty" xml:"app_ids,omitempty" type:"Repeated"`
	// 是否为一方化查询请求
	IsOnePartyRequest *bool `json:"is_one_party_request,omitempty" xml:"is_one_party_request,omitempty"`
	// startIndex
	StartIndex *int64 `json:"start_index,omitempty" xml:"start_index,omitempty"`
	// pageSize
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// currentPage
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// orders
	Orders []*string `json:"orders,omitempty" xml:"orders,omitempty" type:"Repeated"`
	// 查询类型
	QueryType *string `json:"query_type,omitempty" xml:"query_type,omitempty"`
	// Map<String, String>
	Conditions *string `json:"conditions,omitempty" xml:"conditions,omitempty"`
}

func (s AppServiceQuery) String() string {
	return tea.Prettify(s)
}

func (s AppServiceQuery) GoString() string {
	return s.String()
}

func (s *AppServiceQuery) SetId(v string) *AppServiceQuery {
	s.Id = &v
	return s
}

func (s *AppServiceQuery) SetWorkspaceId(v string) *AppServiceQuery {
	s.WorkspaceId = &v
	return s
}

func (s *AppServiceQuery) SetAppId(v string) *AppServiceQuery {
	s.AppId = &v
	return s
}

func (s *AppServiceQuery) SetName(v string) *AppServiceQuery {
	s.Name = &v
	return s
}

func (s *AppServiceQuery) SetDeployStatus(v string) *AppServiceQuery {
	s.DeployStatus = &v
	return s
}

func (s *AppServiceQuery) SetOwnerId(v string) *AppServiceQuery {
	s.OwnerId = &v
	return s
}

func (s *AppServiceQuery) SetWorkspaceIds(v []*string) *AppServiceQuery {
	s.WorkspaceIds = v
	return s
}

func (s *AppServiceQuery) SetAppIds(v []*string) *AppServiceQuery {
	s.AppIds = v
	return s
}

func (s *AppServiceQuery) SetIsOnePartyRequest(v bool) *AppServiceQuery {
	s.IsOnePartyRequest = &v
	return s
}

func (s *AppServiceQuery) SetStartIndex(v int64) *AppServiceQuery {
	s.StartIndex = &v
	return s
}

func (s *AppServiceQuery) SetPageSize(v int64) *AppServiceQuery {
	s.PageSize = &v
	return s
}

func (s *AppServiceQuery) SetCurrentPage(v int64) *AppServiceQuery {
	s.CurrentPage = &v
	return s
}

func (s *AppServiceQuery) SetOrders(v []*string) *AppServiceQuery {
	s.Orders = v
	return s
}

func (s *AppServiceQuery) SetQueryType(v string) *AppServiceQuery {
	s.QueryType = &v
	return s
}

func (s *AppServiceQuery) SetConditions(v string) *AppServiceQuery {
	s.Conditions = &v
	return s
}

// 获取应用详情信息包括对应workspace下的appservices
type AppPortraitAppGet struct {
	// 应用id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 应用名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 应用分组名称
	AppGroupName *string `json:"app_group_name,omitempty" xml:"app_group_name,omitempty"`
	// 应用所属分组id
	AppGroupId *string `json:"app_group_id,omitempty" xml:"app_group_id,omitempty"`
	// 应用负责人
	OwnerDisplayName *string `json:"owner_display_name,omitempty" xml:"owner_display_name,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 技术栈名称
	BuildpackName *string `json:"buildpack_name,omitempty" xml:"buildpack_name,omitempty"`
	// 技术栈版本
	BuildpackVersion *string `json:"buildpack_version,omitempty" xml:"buildpack_version,omitempty"`
	// workspace下应用所关联的应用服务列表
	Appservices []*string `json:"appservices,omitempty" xml:"appservices,omitempty" type:"Repeated"`
}

func (s AppPortraitAppGet) String() string {
	return tea.Prettify(s)
}

func (s AppPortraitAppGet) GoString() string {
	return s.String()
}

func (s *AppPortraitAppGet) SetId(v string) *AppPortraitAppGet {
	s.Id = &v
	return s
}

func (s *AppPortraitAppGet) SetName(v string) *AppPortraitAppGet {
	s.Name = &v
	return s
}

func (s *AppPortraitAppGet) SetAppGroupName(v string) *AppPortraitAppGet {
	s.AppGroupName = &v
	return s
}

func (s *AppPortraitAppGet) SetAppGroupId(v string) *AppPortraitAppGet {
	s.AppGroupId = &v
	return s
}

func (s *AppPortraitAppGet) SetOwnerDisplayName(v string) *AppPortraitAppGet {
	s.OwnerDisplayName = &v
	return s
}

func (s *AppPortraitAppGet) SetDescription(v string) *AppPortraitAppGet {
	s.Description = &v
	return s
}

func (s *AppPortraitAppGet) SetBuildpackName(v string) *AppPortraitAppGet {
	s.BuildpackName = &v
	return s
}

func (s *AppPortraitAppGet) SetBuildpackVersion(v string) *AppPortraitAppGet {
	s.BuildpackVersion = &v
	return s
}

func (s *AppPortraitAppGet) SetAppservices(v []*string) *AppPortraitAppGet {
	s.Appservices = v
	return s
}

// ListenerSecurityIp
type ListenerSecurityIp struct {
	// access_control
	AccessControl *bool `json:"access_control,omitempty" xml:"access_control,omitempty" require:"true"`
	// ips
	Ips []*string `json:"ips,omitempty" xml:"ips,omitempty" require:"true" type:"Repeated"`
}

func (s ListenerSecurityIp) String() string {
	return tea.Prettify(s)
}

func (s ListenerSecurityIp) GoString() string {
	return s.String()
}

func (s *ListenerSecurityIp) SetAccessControl(v bool) *ListenerSecurityIp {
	s.AccessControl = &v
	return s
}

func (s *ListenerSecurityIp) SetIps(v []*string) *ListenerSecurityIp {
	s.Ips = v
	return s
}

// LbCluster
type LbCluster struct {
	// container_cpu
	ContainerCpu *int64 `json:"container_cpu,omitempty" xml:"container_cpu,omitempty"`
	// container_cpu_exclusive
	ContainerCpuExclusive *bool `json:"container_cpu_exclusive,omitempty" xml:"container_cpu_exclusive,omitempty"`
	// container_device_type
	ContainerDeviceType *string `json:"container_device_type,omitempty" xml:"container_device_type,omitempty"`
	// container_disk
	ContainerDisk *int64 `json:"container_disk,omitempty" xml:"container_disk,omitempty"`
	// container_mem
	ContainerMem *int64 `json:"container_mem,omitempty" xml:"container_mem,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// image
	Image *string `json:"image,omitempty" xml:"image,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// status
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// unit_infos
	UnitInfos []*AcsClusterUnit `json:"unit_infos,omitempty" xml:"unit_infos,omitempty" type:"Repeated"`
	// unit_type
	UnitType *int64 `json:"unit_type,omitempty" xml:"unit_type,omitempty"`
	// used_ports
	UsedPorts []*int64 `json:"used_ports,omitempty" xml:"used_ports,omitempty" type:"Repeated"`
}

func (s LbCluster) String() string {
	return tea.Prettify(s)
}

func (s LbCluster) GoString() string {
	return s.String()
}

func (s *LbCluster) SetContainerCpu(v int64) *LbCluster {
	s.ContainerCpu = &v
	return s
}

func (s *LbCluster) SetContainerCpuExclusive(v bool) *LbCluster {
	s.ContainerCpuExclusive = &v
	return s
}

func (s *LbCluster) SetContainerDeviceType(v string) *LbCluster {
	s.ContainerDeviceType = &v
	return s
}

func (s *LbCluster) SetContainerDisk(v int64) *LbCluster {
	s.ContainerDisk = &v
	return s
}

func (s *LbCluster) SetContainerMem(v int64) *LbCluster {
	s.ContainerMem = &v
	return s
}

func (s *LbCluster) SetId(v string) *LbCluster {
	s.Id = &v
	return s
}

func (s *LbCluster) SetImage(v string) *LbCluster {
	s.Image = &v
	return s
}

func (s *LbCluster) SetName(v string) *LbCluster {
	s.Name = &v
	return s
}

func (s *LbCluster) SetStatus(v int64) *LbCluster {
	s.Status = &v
	return s
}

func (s *LbCluster) SetUnitInfos(v []*AcsClusterUnit) *LbCluster {
	s.UnitInfos = v
	return s
}

func (s *LbCluster) SetUnitType(v int64) *LbCluster {
	s.UnitType = &v
	return s
}

func (s *LbCluster) SetUsedPorts(v []*int64) *LbCluster {
	s.UsedPorts = v
	return s
}

// QuotaKv
type QuotaKv struct {
	// type
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// quota
	Quota *int64 `json:"quota,omitempty" xml:"quota,omitempty" require:"true"`
}

func (s QuotaKv) String() string {
	return tea.Prettify(s)
}

func (s QuotaKv) GoString() string {
	return s.String()
}

func (s *QuotaKv) SetType(v string) *QuotaKv {
	s.Type = &v
	return s
}

func (s *QuotaKv) SetQuota(v int64) *QuotaKv {
	s.Quota = &v
	return s
}

// BasicCertificate
type BasicCertificate struct {
	// serverCertificateId
	ServerCertificateId *string `json:"server_certificate_id,omitempty" xml:"server_certificate_id,omitempty" require:"true"`
	// serverCertificateName
	ServerCertificateName *string `json:"server_certificate_name,omitempty" xml:"server_certificate_name,omitempty" require:"true"`
	// fingerprint
	Fingerprint *string `json:"fingerprint,omitempty" xml:"fingerprint,omitempty"`
	// cert_type
	CertType *int64 `json:"cert_type,omitempty" xml:"cert_type,omitempty" require:"true"`
	// 标记这个证书的Provider
	ProviderId *string `json:"provider_id,omitempty" xml:"provider_id,omitempty"`
}

func (s BasicCertificate) String() string {
	return tea.Prettify(s)
}

func (s BasicCertificate) GoString() string {
	return s.String()
}

func (s *BasicCertificate) SetServerCertificateId(v string) *BasicCertificate {
	s.ServerCertificateId = &v
	return s
}

func (s *BasicCertificate) SetServerCertificateName(v string) *BasicCertificate {
	s.ServerCertificateName = &v
	return s
}

func (s *BasicCertificate) SetFingerprint(v string) *BasicCertificate {
	s.Fingerprint = &v
	return s
}

func (s *BasicCertificate) SetCertType(v int64) *BasicCertificate {
	s.CertType = &v
	return s
}

func (s *BasicCertificate) SetProviderId(v string) *BasicCertificate {
	s.ProviderId = &v
	return s
}

// <String, Boolean> 映射
type MapStringToBooleanEntity struct {
	// key
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// value
	Value *bool `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s MapStringToBooleanEntity) String() string {
	return tea.Prettify(s)
}

func (s MapStringToBooleanEntity) GoString() string {
	return s.String()
}

func (s *MapStringToBooleanEntity) SetKey(v string) *MapStringToBooleanEntity {
	s.Key = &v
	return s
}

func (s *MapStringToBooleanEntity) SetValue(v bool) *MapStringToBooleanEntity {
	s.Value = &v
	return s
}

// db schema
type DatabaseSchema struct {
	// 字符集
	CharSet *string `json:"char_set,omitempty" xml:"char_set,omitempty" require:"true"`
	// 数量
	Count *int64 `json:"count,omitempty" xml:"count,omitempty"`
	// 是否自动生成名称。默认为 true
	IsAutoName *bool `json:"is_auto_name,omitempty" xml:"is_auto_name,omitempty"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 序列号是否连续。默认为 false
	IsSerial *bool `json:"is_serial,omitempty" xml:"is_serial,omitempty"`
}

func (s DatabaseSchema) String() string {
	return tea.Prettify(s)
}

func (s DatabaseSchema) GoString() string {
	return s.String()
}

func (s *DatabaseSchema) SetCharSet(v string) *DatabaseSchema {
	s.CharSet = &v
	return s
}

func (s *DatabaseSchema) SetCount(v int64) *DatabaseSchema {
	s.Count = &v
	return s
}

func (s *DatabaseSchema) SetIsAutoName(v bool) *DatabaseSchema {
	s.IsAutoName = &v
	return s
}

func (s *DatabaseSchema) SetName(v string) *DatabaseSchema {
	s.Name = &v
	return s
}

func (s *DatabaseSchema) SetIsSerial(v bool) *DatabaseSchema {
	s.IsSerial = &v
	return s
}

// 中间件集群实例
type MiddlewareClusterInstance struct {
	// cluster_id
	ClusterId *string `json:"cluster_id,omitempty" xml:"cluster_id,omitempty" require:"true"`
	// cluster_name
	ClusterName *string `json:"cluster_name,omitempty" xml:"cluster_name,omitempty" require:"true"`
	// region_ids
	RegionIds []*string `json:"region_ids,omitempty" xml:"region_ids,omitempty" require:"true" type:"Repeated"`
	// zone_ids
	ZoneIds []*string `json:"zone_ids,omitempty" xml:"zone_ids,omitempty" type:"Repeated"`
	// acvip_endpoint
	AcvipEndpoint *string `json:"acvip_endpoint,omitempty" xml:"acvip_endpoint,omitempty" require:"true"`
	// instance_id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
	// workspace_group_name
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty"`
}

func (s MiddlewareClusterInstance) String() string {
	return tea.Prettify(s)
}

func (s MiddlewareClusterInstance) GoString() string {
	return s.String()
}

func (s *MiddlewareClusterInstance) SetClusterId(v string) *MiddlewareClusterInstance {
	s.ClusterId = &v
	return s
}

func (s *MiddlewareClusterInstance) SetClusterName(v string) *MiddlewareClusterInstance {
	s.ClusterName = &v
	return s
}

func (s *MiddlewareClusterInstance) SetRegionIds(v []*string) *MiddlewareClusterInstance {
	s.RegionIds = v
	return s
}

func (s *MiddlewareClusterInstance) SetZoneIds(v []*string) *MiddlewareClusterInstance {
	s.ZoneIds = v
	return s
}

func (s *MiddlewareClusterInstance) SetAcvipEndpoint(v string) *MiddlewareClusterInstance {
	s.AcvipEndpoint = &v
	return s
}

func (s *MiddlewareClusterInstance) SetInstanceId(v string) *MiddlewareClusterInstance {
	s.InstanceId = &v
	return s
}

func (s *MiddlewareClusterInstance) SetWorkspaceGroupName(v string) *MiddlewareClusterInstance {
	s.WorkspaceGroupName = &v
	return s
}

// LoadBalancerImportVO
type LoadBalancerImportVO struct {
	// iaas_id
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// network_type
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty"`
	// inner_ip_address
	InnerIpAddress []*string `json:"inner_ip_address,omitempty" xml:"inner_ip_address,omitempty" type:"Repeated"`
	// public_ip_address
	PublicIpAddress []*string `json:"public_ip_address,omitempty" xml:"public_ip_address,omitempty" type:"Repeated"`
	// utc_create
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// import_info
	ImportInfo *ImportVO `json:"import_info,omitempty" xml:"import_info,omitempty" require:"true"`
}

func (s LoadBalancerImportVO) String() string {
	return tea.Prettify(s)
}

func (s LoadBalancerImportVO) GoString() string {
	return s.String()
}

func (s *LoadBalancerImportVO) SetIaasId(v string) *LoadBalancerImportVO {
	s.IaasId = &v
	return s
}

func (s *LoadBalancerImportVO) SetName(v string) *LoadBalancerImportVO {
	s.Name = &v
	return s
}

func (s *LoadBalancerImportVO) SetNetworkType(v string) *LoadBalancerImportVO {
	s.NetworkType = &v
	return s
}

func (s *LoadBalancerImportVO) SetInnerIpAddress(v []*string) *LoadBalancerImportVO {
	s.InnerIpAddress = v
	return s
}

func (s *LoadBalancerImportVO) SetPublicIpAddress(v []*string) *LoadBalancerImportVO {
	s.PublicIpAddress = v
	return s
}

func (s *LoadBalancerImportVO) SetUtcCreate(v string) *LoadBalancerImportVO {
	s.UtcCreate = &v
	return s
}

func (s *LoadBalancerImportVO) SetImportInfo(v *ImportVO) *LoadBalancerImportVO {
	s.ImportInfo = v
	return s
}

// 旧版-应用服务放入前端展示内容
type AppServiceViewModel struct {
	// 基类
	BaseAppService *AppService `json:"base_app_service,omitempty" xml:"base_app_service,omitempty"`
	// 应用负责人姓名
	OwnerName *string `json:"owner_name,omitempty" xml:"owner_name,omitempty"`
	// 技术栈名称
	BuildpackName *string `json:"buildpack_name,omitempty" xml:"buildpack_name,omitempty"`
	// App的别名
	ChineseName *string `json:"chinese_name,omitempty" xml:"chinese_name,omitempty"`
	// buildpackVersion
	BuildpackVersion *string `json:"buildpack_version,omitempty" xml:"buildpack_version,omitempty"`
	// computerCount
	ComputerCount *int64 `json:"computer_count,omitempty" xml:"computer_count,omitempty"`
	// databaseCount
	DatabaseCount *int64 `json:"database_count,omitempty" xml:"database_count,omitempty"`
	// loadBalancerCount
	LoadBalancerCount *int64 `json:"load_balancer_count,omitempty" xml:"load_balancer_count,omitempty"`
	// cacheCount
	CacheCount *int64 `json:"cache_count,omitempty" xml:"cache_count,omitempty"`
	// cellViewList
	CellViewList []*CellView `json:"cell_view_list,omitempty" xml:"cell_view_list,omitempty" type:"Repeated"`
}

func (s AppServiceViewModel) String() string {
	return tea.Prettify(s)
}

func (s AppServiceViewModel) GoString() string {
	return s.String()
}

func (s *AppServiceViewModel) SetBaseAppService(v *AppService) *AppServiceViewModel {
	s.BaseAppService = v
	return s
}

func (s *AppServiceViewModel) SetOwnerName(v string) *AppServiceViewModel {
	s.OwnerName = &v
	return s
}

func (s *AppServiceViewModel) SetBuildpackName(v string) *AppServiceViewModel {
	s.BuildpackName = &v
	return s
}

func (s *AppServiceViewModel) SetChineseName(v string) *AppServiceViewModel {
	s.ChineseName = &v
	return s
}

func (s *AppServiceViewModel) SetBuildpackVersion(v string) *AppServiceViewModel {
	s.BuildpackVersion = &v
	return s
}

func (s *AppServiceViewModel) SetComputerCount(v int64) *AppServiceViewModel {
	s.ComputerCount = &v
	return s
}

func (s *AppServiceViewModel) SetDatabaseCount(v int64) *AppServiceViewModel {
	s.DatabaseCount = &v
	return s
}

func (s *AppServiceViewModel) SetLoadBalancerCount(v int64) *AppServiceViewModel {
	s.LoadBalancerCount = &v
	return s
}

func (s *AppServiceViewModel) SetCacheCount(v int64) *AppServiceViewModel {
	s.CacheCount = &v
	return s
}

func (s *AppServiceViewModel) SetCellViewList(v []*CellView) *AppServiceViewModel {
	s.CellViewList = v
	return s
}

// DatabaseSecurityIp
type DatabaseSecurityIp struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// resource_id
	ResourceId *string `json:"resource_id,omitempty" xml:"resource_id,omitempty"`
	// resource_type
	ResourceType *string `json:"resource_type,omitempty" xml:"resource_type,omitempty"`
	// ip
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// type
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DatabaseSecurityIp) String() string {
	return tea.Prettify(s)
}

func (s DatabaseSecurityIp) GoString() string {
	return s.String()
}

func (s *DatabaseSecurityIp) SetId(v string) *DatabaseSecurityIp {
	s.Id = &v
	return s
}

func (s *DatabaseSecurityIp) SetResourceId(v string) *DatabaseSecurityIp {
	s.ResourceId = &v
	return s
}

func (s *DatabaseSecurityIp) SetResourceType(v string) *DatabaseSecurityIp {
	s.ResourceType = &v
	return s
}

func (s *DatabaseSecurityIp) SetIp(v string) *DatabaseSecurityIp {
	s.Ip = &v
	return s
}

func (s *DatabaseSecurityIp) SetStatus(v string) *DatabaseSecurityIp {
	s.Status = &v
	return s
}

func (s *DatabaseSecurityIp) SetType(v string) *DatabaseSecurityIp {
	s.Type = &v
	return s
}

// 系统配置项
type Feature struct {
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// cloud_name
	CloudName *string `json:"cloud_name,omitempty" xml:"cloud_name,omitempty" require:"true"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty" require:"true"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// feature_name
	FeatureName *string `json:"feature_name,omitempty" xml:"feature_name,omitempty" require:"true"`
	// content
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
	// conditional_content
	ConditionalContent *string `json:"conditional_content,omitempty" xml:"conditional_content,omitempty"`
	// utc_create
	//
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// utc_modified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s Feature) String() string {
	return tea.Prettify(s)
}

func (s Feature) GoString() string {
	return s.String()
}

func (s *Feature) SetId(v string) *Feature {
	s.Id = &v
	return s
}

func (s *Feature) SetCloudName(v string) *Feature {
	s.CloudName = &v
	return s
}

func (s *Feature) SetRegionId(v string) *Feature {
	s.RegionId = &v
	return s
}

func (s *Feature) SetDescription(v string) *Feature {
	s.Description = &v
	return s
}

func (s *Feature) SetFeatureName(v string) *Feature {
	s.FeatureName = &v
	return s
}

func (s *Feature) SetContent(v string) *Feature {
	s.Content = &v
	return s
}

func (s *Feature) SetConditionalContent(v string) *Feature {
	s.ConditionalContent = &v
	return s
}

func (s *Feature) SetUtcCreate(v string) *Feature {
	s.UtcCreate = &v
	return s
}

func (s *Feature) SetUtcModified(v string) *Feature {
	s.UtcModified = &v
	return s
}

// 单维度配额
type SingleDimGroup struct {
	// 维度标识, 如: WORKSPACE
	DimIdentity *string `json:"dim_identity,omitempty" xml:"dim_identity,omitempty" require:"true"`
	// 维度实例的值, 如: 0000000001
	DimInsValue *string `json:"dim_ins_value,omitempty" xml:"dim_ins_value,omitempty" require:"true"`
	// resource_identity
	ResourceIdentity *string `json:"resource_identity,omitempty" xml:"resource_identity,omitempty" require:"true"`
	// 申请的数量，要注意quota_factor，比如当quota_factor=0.1时，申请实际为1的资源时，这里要填10
	Count *int64 `json:"count,omitempty" xml:"count,omitempty" require:"true"`
}

func (s SingleDimGroup) String() string {
	return tea.Prettify(s)
}

func (s SingleDimGroup) GoString() string {
	return s.String()
}

func (s *SingleDimGroup) SetDimIdentity(v string) *SingleDimGroup {
	s.DimIdentity = &v
	return s
}

func (s *SingleDimGroup) SetDimInsValue(v string) *SingleDimGroup {
	s.DimInsValue = &v
	return s
}

func (s *SingleDimGroup) SetResourceIdentity(v string) *SingleDimGroup {
	s.ResourceIdentity = &v
	return s
}

func (s *SingleDimGroup) SetCount(v int64) *SingleDimGroup {
	s.Count = &v
	return s
}

// DatabaseEngine
type DatabaseEngine struct {
	// iaas_type
	IaasType *string `json:"iaas_type,omitempty" xml:"iaas_type,omitempty"`
	// engine
	Engine *string `json:"engine,omitempty" xml:"engine,omitempty"`
	// engine_versions
	EngineVersions []*string `json:"engine_versions,omitempty" xml:"engine_versions,omitempty" type:"Repeated"`
}

func (s DatabaseEngine) String() string {
	return tea.Prettify(s)
}

func (s DatabaseEngine) GoString() string {
	return s.String()
}

func (s *DatabaseEngine) SetIaasType(v string) *DatabaseEngine {
	s.IaasType = &v
	return s
}

func (s *DatabaseEngine) SetEngine(v string) *DatabaseEngine {
	s.Engine = &v
	return s
}

func (s *DatabaseEngine) SetEngineVersions(v []*string) *DatabaseEngine {
	s.EngineVersions = v
	return s
}

// ComputerParam
type ComputerParam struct {
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// image_id
	ImageId *string `json:"image_id,omitempty" xml:"image_id,omitempty"`
	// instance_type
	InstanceType *string `json:"instance_type,omitempty" xml:"instance_type,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty"`
	// security_group_id
	SecurityGroupId *string `json:"security_group_id,omitempty" xml:"security_group_id,omitempty"`
	// instance_name
	InstanceName *string `json:"instance_name,omitempty" xml:"instance_name,omitempty"`
	// zone_id
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty"`
}

func (s ComputerParam) String() string {
	return tea.Prettify(s)
}

func (s ComputerParam) GoString() string {
	return s.String()
}

func (s *ComputerParam) SetDescription(v string) *ComputerParam {
	s.Description = &v
	return s
}

func (s *ComputerParam) SetName(v string) *ComputerParam {
	s.Name = &v
	return s
}

func (s *ComputerParam) SetImageId(v string) *ComputerParam {
	s.ImageId = &v
	return s
}

func (s *ComputerParam) SetInstanceType(v string) *ComputerParam {
	s.InstanceType = &v
	return s
}

func (s *ComputerParam) SetRegionId(v string) *ComputerParam {
	s.RegionId = &v
	return s
}

func (s *ComputerParam) SetSecurityGroupId(v string) *ComputerParam {
	s.SecurityGroupId = &v
	return s
}

func (s *ComputerParam) SetInstanceName(v string) *ComputerParam {
	s.InstanceName = &v
	return s
}

func (s *ComputerParam) SetZoneId(v string) *ComputerParam {
	s.ZoneId = &v
	return s
}

// 单维度配额信息
type SingleDimGroupQuota struct {
	// quota_id
	QuotaId *string `json:"quota_id,omitempty" xml:"quota_id,omitempty" require:"true"`
	// 后端用，前端无需关心
	DimGroupId *string `json:"dim_group_id,omitempty" xml:"dim_group_id,omitempty"`
	// dim_identity
	DimIdentity *string `json:"dim_identity,omitempty" xml:"dim_identity,omitempty" require:"true"`
	// resource_identity
	ResourceIdentity *string `json:"resource_identity,omitempty" xml:"resource_identity,omitempty" require:"true"`
	// 配额最大值，注意:1. hardLimit为 -1时 表时无限大2. hardLimit为 -2时 表时无限小
	HardLimit *int64 `json:"hard_limit,omitempty" xml:"hard_limit,omitempty" require:"true"`
	// 后端用，前端无需关心
	SyncInterface *string `json:"sync_interface,omitempty" xml:"sync_interface,omitempty"`
	// 创建者
	CreatorName *string `json:"creator_name,omitempty" xml:"creator_name,omitempty"`
	// utc_create
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// utc_modified
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 维度实例的值，比如某个workspace的ID
	DimInsValue *string `json:"dim_ins_value,omitempty" xml:"dim_ins_value,omitempty" require:"true"`
	// 由于额度只支持整数，用这个浮点数factor表示乘数因子，
	QuotaFactor *string `json:"quota_factor,omitempty" xml:"quota_factor,omitempty"`
}

func (s SingleDimGroupQuota) String() string {
	return tea.Prettify(s)
}

func (s SingleDimGroupQuota) GoString() string {
	return s.String()
}

func (s *SingleDimGroupQuota) SetQuotaId(v string) *SingleDimGroupQuota {
	s.QuotaId = &v
	return s
}

func (s *SingleDimGroupQuota) SetDimGroupId(v string) *SingleDimGroupQuota {
	s.DimGroupId = &v
	return s
}

func (s *SingleDimGroupQuota) SetDimIdentity(v string) *SingleDimGroupQuota {
	s.DimIdentity = &v
	return s
}

func (s *SingleDimGroupQuota) SetResourceIdentity(v string) *SingleDimGroupQuota {
	s.ResourceIdentity = &v
	return s
}

func (s *SingleDimGroupQuota) SetHardLimit(v int64) *SingleDimGroupQuota {
	s.HardLimit = &v
	return s
}

func (s *SingleDimGroupQuota) SetSyncInterface(v string) *SingleDimGroupQuota {
	s.SyncInterface = &v
	return s
}

func (s *SingleDimGroupQuota) SetCreatorName(v string) *SingleDimGroupQuota {
	s.CreatorName = &v
	return s
}

func (s *SingleDimGroupQuota) SetUtcCreate(v string) *SingleDimGroupQuota {
	s.UtcCreate = &v
	return s
}

func (s *SingleDimGroupQuota) SetUtcModified(v string) *SingleDimGroupQuota {
	s.UtcModified = &v
	return s
}

func (s *SingleDimGroupQuota) SetDimInsValue(v string) *SingleDimGroupQuota {
	s.DimInsValue = &v
	return s
}

func (s *SingleDimGroupQuota) SetQuotaFactor(v string) *SingleDimGroupQuota {
	s.QuotaFactor = &v
	return s
}

// LB的vip类型
type VipType struct {
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// vip_address_type
	VipAddressType *string `json:"vip_address_type,omitempty" xml:"vip_address_type,omitempty" require:"true"`
	// vip_type
	VipType *string `json:"vip_type,omitempty" xml:"vip_type,omitempty" require:"true"`
}

func (s VipType) String() string {
	return tea.Prettify(s)
}

func (s VipType) GoString() string {
	return s.String()
}

func (s *VipType) SetName(v string) *VipType {
	s.Name = &v
	return s
}

func (s *VipType) SetVipAddressType(v string) *VipType {
	s.VipAddressType = &v
	return s
}

func (s *VipType) SetVipType(v string) *VipType {
	s.VipType = &v
	return s
}

type BatchdeleteApplicationBuildRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app_id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
	// build_ids
	BuildIds []*string `json:"build_ids,omitempty" xml:"build_ids,omitempty" require:"true" type:"Repeated"`
}

func (s BatchdeleteApplicationBuildRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteApplicationBuildRequest) GoString() string {
	return s.String()
}

func (s *BatchdeleteApplicationBuildRequest) SetAuthToken(v string) *BatchdeleteApplicationBuildRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchdeleteApplicationBuildRequest) SetAppId(v string) *BatchdeleteApplicationBuildRequest {
	s.AppId = &v
	return s
}

func (s *BatchdeleteApplicationBuildRequest) SetBuildIds(v []*string) *BatchdeleteApplicationBuildRequest {
	s.BuildIds = v
	return s
}

type BatchdeleteApplicationBuildResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// Map<String, Boolean>
	Data []*MapStringToBooleanEntity `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s BatchdeleteApplicationBuildResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteApplicationBuildResponse) GoString() string {
	return s.String()
}

func (s *BatchdeleteApplicationBuildResponse) SetReqMsgId(v string) *BatchdeleteApplicationBuildResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchdeleteApplicationBuildResponse) SetResultCode(v string) *BatchdeleteApplicationBuildResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchdeleteApplicationBuildResponse) SetResultMsg(v string) *BatchdeleteApplicationBuildResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchdeleteApplicationBuildResponse) SetData(v []*MapStringToBooleanEntity) *BatchdeleteApplicationBuildResponse {
	s.Data = v
	return s
}

type ListApplicationManifestRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app_id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
	// DynamicQuery
	Query *DynamicQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
}

func (s ListApplicationManifestRequest) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationManifestRequest) GoString() string {
	return s.String()
}

func (s *ListApplicationManifestRequest) SetAuthToken(v string) *ListApplicationManifestRequest {
	s.AuthToken = &v
	return s
}

func (s *ListApplicationManifestRequest) SetAppId(v string) *ListApplicationManifestRequest {
	s.AppId = &v
	return s
}

func (s *ListApplicationManifestRequest) SetQuery(v *DynamicQuery) *ListApplicationManifestRequest {
	s.Query = v
	return s
}

func (s *ListApplicationManifestRequest) SetWorkspaceId(v string) *ListApplicationManifestRequest {
	s.WorkspaceId = &v
	return s
}

type ListApplicationManifestResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// List<AppManifest>
	Data []*AppManifest `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 总数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s ListApplicationManifestResponse) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationManifestResponse) GoString() string {
	return s.String()
}

func (s *ListApplicationManifestResponse) SetReqMsgId(v string) *ListApplicationManifestResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListApplicationManifestResponse) SetResultCode(v string) *ListApplicationManifestResponse {
	s.ResultCode = &v
	return s
}

func (s *ListApplicationManifestResponse) SetResultMsg(v string) *ListApplicationManifestResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListApplicationManifestResponse) SetData(v []*AppManifest) *ListApplicationManifestResponse {
	s.Data = v
	return s
}

func (s *ListApplicationManifestResponse) SetTotalCount(v int64) *ListApplicationManifestResponse {
	s.TotalCount = &v
	return s
}

type BatchdeleteApplicationPackageRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app_id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
	// List<String> versionIds
	VersionIds []*string `json:"version_ids,omitempty" xml:"version_ids,omitempty" require:"true" type:"Repeated"`
}

func (s BatchdeleteApplicationPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteApplicationPackageRequest) GoString() string {
	return s.String()
}

func (s *BatchdeleteApplicationPackageRequest) SetAuthToken(v string) *BatchdeleteApplicationPackageRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchdeleteApplicationPackageRequest) SetAppId(v string) *BatchdeleteApplicationPackageRequest {
	s.AppId = &v
	return s
}

func (s *BatchdeleteApplicationPackageRequest) SetVersionIds(v []*string) *BatchdeleteApplicationPackageRequest {
	s.VersionIds = v
	return s
}

type BatchdeleteApplicationPackageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// Map<String, Boolean>
	Data []*MapStringToBooleanEntity `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s BatchdeleteApplicationPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchdeleteApplicationPackageResponse) GoString() string {
	return s.String()
}

func (s *BatchdeleteApplicationPackageResponse) SetReqMsgId(v string) *BatchdeleteApplicationPackageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchdeleteApplicationPackageResponse) SetResultCode(v string) *BatchdeleteApplicationPackageResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchdeleteApplicationPackageResponse) SetResultMsg(v string) *BatchdeleteApplicationPackageResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchdeleteApplicationPackageResponse) SetData(v []*MapStringToBooleanEntity) *BatchdeleteApplicationPackageResponse {
	s.Data = v
	return s
}

type CreateApplicationPackageRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app_id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
	// manifest
	Manifest *AppManifest `json:"manifest,omitempty" xml:"manifest,omitempty" require:"true"`
}

func (s CreateApplicationPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationPackageRequest) GoString() string {
	return s.String()
}

func (s *CreateApplicationPackageRequest) SetAuthToken(v string) *CreateApplicationPackageRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateApplicationPackageRequest) SetAppId(v string) *CreateApplicationPackageRequest {
	s.AppId = &v
	return s
}

func (s *CreateApplicationPackageRequest) SetManifest(v *AppManifest) *CreateApplicationPackageRequest {
	s.Manifest = v
	return s
}

type CreateApplicationPackageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateApplicationPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationPackageResponse) GoString() string {
	return s.String()
}

func (s *CreateApplicationPackageResponse) SetReqMsgId(v string) *CreateApplicationPackageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateApplicationPackageResponse) SetResultCode(v string) *CreateApplicationPackageResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateApplicationPackageResponse) SetResultMsg(v string) *CreateApplicationPackageResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateApplicationPackageResponse) SetData(v string) *CreateApplicationPackageResponse {
	s.Data = &v
	return s
}

type DeleteApplicationPackageRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// version_id
	VersionId *string `json:"version_id,omitempty" xml:"version_id,omitempty" require:"true"`
	// 应用id，用于鉴权
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
}

func (s DeleteApplicationPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationPackageRequest) GoString() string {
	return s.String()
}

func (s *DeleteApplicationPackageRequest) SetAuthToken(v string) *DeleteApplicationPackageRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteApplicationPackageRequest) SetVersionId(v string) *DeleteApplicationPackageRequest {
	s.VersionId = &v
	return s
}

func (s *DeleteApplicationPackageRequest) SetAppId(v string) *DeleteApplicationPackageRequest {
	s.AppId = &v
	return s
}

type DeleteApplicationPackageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 删除结果
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DeleteApplicationPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationPackageResponse) GoString() string {
	return s.String()
}

func (s *DeleteApplicationPackageResponse) SetReqMsgId(v string) *DeleteApplicationPackageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteApplicationPackageResponse) SetResultCode(v string) *DeleteApplicationPackageResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteApplicationPackageResponse) SetResultMsg(v string) *DeleteApplicationPackageResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteApplicationPackageResponse) SetData(v bool) *DeleteApplicationPackageResponse {
	s.Data = &v
	return s
}

type ListApplicationPackageRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间id，用于做鉴权
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// 动态查询
	DynamicQuery *DynamicQuery `json:"dynamic_query,omitempty" xml:"dynamic_query,omitempty"`
	// 应用查询
	Query *AppQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s ListApplicationPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationPackageRequest) GoString() string {
	return s.String()
}

func (s *ListApplicationPackageRequest) SetAuthToken(v string) *ListApplicationPackageRequest {
	s.AuthToken = &v
	return s
}

func (s *ListApplicationPackageRequest) SetWorkspaceId(v string) *ListApplicationPackageRequest {
	s.WorkspaceId = &v
	return s
}

func (s *ListApplicationPackageRequest) SetDynamicQuery(v *DynamicQuery) *ListApplicationPackageRequest {
	s.DynamicQuery = v
	return s
}

func (s *ListApplicationPackageRequest) SetQuery(v *AppQuery) *ListApplicationPackageRequest {
	s.Query = v
	return s
}

type ListApplicationPackageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// List<AppPackageListView>
	Data []*AppPackageListView `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 总数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s ListApplicationPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationPackageResponse) GoString() string {
	return s.String()
}

func (s *ListApplicationPackageResponse) SetReqMsgId(v string) *ListApplicationPackageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListApplicationPackageResponse) SetResultCode(v string) *ListApplicationPackageResponse {
	s.ResultCode = &v
	return s
}

func (s *ListApplicationPackageResponse) SetResultMsg(v string) *ListApplicationPackageResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListApplicationPackageResponse) SetData(v []*AppPackageListView) *ListApplicationPackageResponse {
	s.Data = v
	return s
}

func (s *ListApplicationPackageResponse) SetTotalCount(v int64) *ListApplicationPackageResponse {
	s.TotalCount = &v
	return s
}

type UploadApplicationPackageconfigRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// 应用id，用于鉴权
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
}

func (s UploadApplicationPackageconfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadApplicationPackageconfigRequest) GoString() string {
	return s.String()
}

func (s *UploadApplicationPackageconfigRequest) SetAuthToken(v string) *UploadApplicationPackageconfigRequest {
	s.AuthToken = &v
	return s
}

func (s *UploadApplicationPackageconfigRequest) SetWorkspaceId(v string) *UploadApplicationPackageconfigRequest {
	s.WorkspaceId = &v
	return s
}

func (s *UploadApplicationPackageconfigRequest) SetAppId(v string) *UploadApplicationPackageconfigRequest {
	s.AppId = &v
	return s
}

type UploadApplicationPackageconfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// Map<String, Boolean>
	Data []*MapStringToBooleanEntity `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s UploadApplicationPackageconfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadApplicationPackageconfigResponse) GoString() string {
	return s.String()
}

func (s *UploadApplicationPackageconfigResponse) SetReqMsgId(v string) *UploadApplicationPackageconfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UploadApplicationPackageconfigResponse) SetResultCode(v string) *UploadApplicationPackageconfigResponse {
	s.ResultCode = &v
	return s
}

func (s *UploadApplicationPackageconfigResponse) SetResultMsg(v string) *UploadApplicationPackageconfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *UploadApplicationPackageconfigResponse) SetData(v []*MapStringToBooleanEntity) *UploadApplicationPackageconfigResponse {
	s.Data = v
	return s
}

type ListAppserviceCellRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
}

func (s ListAppserviceCellRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAppserviceCellRequest) GoString() string {
	return s.String()
}

func (s *ListAppserviceCellRequest) SetAuthToken(v string) *ListAppserviceCellRequest {
	s.AuthToken = &v
	return s
}

func (s *ListAppserviceCellRequest) SetWorkspaceId(v string) *ListAppserviceCellRequest {
	s.WorkspaceId = &v
	return s
}

type ListAppserviceCellResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// List<CellView>
	Data []*CellView `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListAppserviceCellResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAppserviceCellResponse) GoString() string {
	return s.String()
}

func (s *ListAppserviceCellResponse) SetReqMsgId(v string) *ListAppserviceCellResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListAppserviceCellResponse) SetResultCode(v string) *ListAppserviceCellResponse {
	s.ResultCode = &v
	return s
}

func (s *ListAppserviceCellResponse) SetResultMsg(v string) *ListAppserviceCellResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListAppserviceCellResponse) SetData(v []*CellView) *ListAppserviceCellResponse {
	s.Data = v
	return s
}

type CreateAppserviceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app_service
	AppService *AppService `json:"app_service,omitempty" xml:"app_service,omitempty" require:"true"`
	// 工作空间id，用于鉴权
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
}

func (s CreateAppserviceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAppserviceRequest) GoString() string {
	return s.String()
}

func (s *CreateAppserviceRequest) SetAuthToken(v string) *CreateAppserviceRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAppserviceRequest) SetAppService(v *AppService) *CreateAppserviceRequest {
	s.AppService = v
	return s
}

func (s *CreateAppserviceRequest) SetWorkspaceId(v string) *CreateAppserviceRequest {
	s.WorkspaceId = &v
	return s
}

type CreateAppserviceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建结果
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateAppserviceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAppserviceResponse) GoString() string {
	return s.String()
}

func (s *CreateAppserviceResponse) SetReqMsgId(v string) *CreateAppserviceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAppserviceResponse) SetResultCode(v string) *CreateAppserviceResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAppserviceResponse) SetResultMsg(v string) *CreateAppserviceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateAppserviceResponse) SetData(v string) *CreateAppserviceResponse {
	s.Data = &v
	return s
}

type GetAppserviceDefaultRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app_id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
}

func (s GetAppserviceDefaultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAppserviceDefaultRequest) GoString() string {
	return s.String()
}

func (s *GetAppserviceDefaultRequest) SetAuthToken(v string) *GetAppserviceDefaultRequest {
	s.AuthToken = &v
	return s
}

func (s *GetAppserviceDefaultRequest) SetAppId(v string) *GetAppserviceDefaultRequest {
	s.AppId = &v
	return s
}

func (s *GetAppserviceDefaultRequest) SetWorkspaceId(v string) *GetAppserviceDefaultRequest {
	s.WorkspaceId = &v
	return s
}

type GetAppserviceDefaultResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// AppService
	Data *AppService `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetAppserviceDefaultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAppserviceDefaultResponse) GoString() string {
	return s.String()
}

func (s *GetAppserviceDefaultResponse) SetReqMsgId(v string) *GetAppserviceDefaultResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAppserviceDefaultResponse) SetResultCode(v string) *GetAppserviceDefaultResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAppserviceDefaultResponse) SetResultMsg(v string) *GetAppserviceDefaultResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAppserviceDefaultResponse) SetData(v *AppService) *GetAppserviceDefaultResponse {
	s.Data = v
	return s
}

type ExistAppserviceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app_id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
}

func (s ExistAppserviceRequest) String() string {
	return tea.Prettify(s)
}

func (s ExistAppserviceRequest) GoString() string {
	return s.String()
}

func (s *ExistAppserviceRequest) SetAuthToken(v string) *ExistAppserviceRequest {
	s.AuthToken = &v
	return s
}

func (s *ExistAppserviceRequest) SetAppId(v string) *ExistAppserviceRequest {
	s.AppId = &v
	return s
}

func (s *ExistAppserviceRequest) SetName(v string) *ExistAppserviceRequest {
	s.Name = &v
	return s
}

func (s *ExistAppserviceRequest) SetWorkspaceId(v string) *ExistAppserviceRequest {
	s.WorkspaceId = &v
	return s
}

type ExistAppserviceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否存在
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ExistAppserviceResponse) String() string {
	return tea.Prettify(s)
}

func (s ExistAppserviceResponse) GoString() string {
	return s.String()
}

func (s *ExistAppserviceResponse) SetReqMsgId(v string) *ExistAppserviceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExistAppserviceResponse) SetResultCode(v string) *ExistAppserviceResponse {
	s.ResultCode = &v
	return s
}

func (s *ExistAppserviceResponse) SetResultMsg(v string) *ExistAppserviceResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExistAppserviceResponse) SetData(v bool) *ExistAppserviceResponse {
	s.Data = &v
	return s
}

type UpdateAppserviceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app_service
	AppService *AppService `json:"app_service,omitempty" xml:"app_service,omitempty" require:"true"`
	// 工作空间id，用于鉴权
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
}

func (s UpdateAppserviceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAppserviceRequest) GoString() string {
	return s.String()
}

func (s *UpdateAppserviceRequest) SetAuthToken(v string) *UpdateAppserviceRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateAppserviceRequest) SetAppService(v *AppService) *UpdateAppserviceRequest {
	s.AppService = v
	return s
}

func (s *UpdateAppserviceRequest) SetWorkspaceId(v string) *UpdateAppserviceRequest {
	s.WorkspaceId = &v
	return s
}

type UpdateAppserviceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 更新结果
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s UpdateAppserviceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAppserviceResponse) GoString() string {
	return s.String()
}

func (s *UpdateAppserviceResponse) SetReqMsgId(v string) *UpdateAppserviceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateAppserviceResponse) SetResultCode(v string) *UpdateAppserviceResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateAppserviceResponse) SetResultMsg(v string) *UpdateAppserviceResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateAppserviceResponse) SetData(v bool) *UpdateAppserviceResponse {
	s.Data = &v
	return s
}

type QueryBuildpackRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 技术栈版本
	BpVersion *string `json:"bp_version,omitempty" xml:"bp_version,omitempty"`
	// 是否分页，默认为true
	ByPage *bool `json:"by_page,omitempty" xml:"by_page,omitempty"`
	// 组件ID
	ComponentId *string `json:"component_id,omitempty" xml:"component_id,omitempty"`
	// 配置ID
	ConfigId *string `json:"config_id,omitempty" xml:"config_id,omitempty"`
	// 页码：默认值为1，表示第一页
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 部署脚本id
	DeployScriptId *string `json:"deploy_script_id,omitempty" xml:"deploy_script_id,omitempty"`
	// 技术栈ID标识
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 是否包含模板
	IncludeTemplate *bool `json:"include_template,omitempty" xml:"include_template,omitempty"`
	// 技术栈名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 每页返回个数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 查询名称过滤方式
	// 模糊查询 FUZZY
	// 精准匹配 ACCURATE
	// 前缀查询 START_WITH
	QueryType *string `json:"query_type,omitempty" xml:"query_type,omitempty"`
	// 所属技术栈类别ID
	StackId *string `json:"stack_id,omitempty" xml:"stack_id,omitempty"`
	// 技术栈状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 技术栈定义类型
	// 系统模板 TEMPLATE,
	// 用户自定义 CUSTOM,
	// 后台服务 BACKGROUND_SERVICE
	Types []*string `json:"types,omitempty" xml:"types,omitempty" type:"Repeated"`
	// 工作空间
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryBuildpackRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackRequest) GoString() string {
	return s.String()
}

func (s *QueryBuildpackRequest) SetAuthToken(v string) *QueryBuildpackRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBuildpackRequest) SetBpVersion(v string) *QueryBuildpackRequest {
	s.BpVersion = &v
	return s
}

func (s *QueryBuildpackRequest) SetByPage(v bool) *QueryBuildpackRequest {
	s.ByPage = &v
	return s
}

func (s *QueryBuildpackRequest) SetComponentId(v string) *QueryBuildpackRequest {
	s.ComponentId = &v
	return s
}

func (s *QueryBuildpackRequest) SetConfigId(v string) *QueryBuildpackRequest {
	s.ConfigId = &v
	return s
}

func (s *QueryBuildpackRequest) SetCurrentPage(v int64) *QueryBuildpackRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryBuildpackRequest) SetDeployScriptId(v string) *QueryBuildpackRequest {
	s.DeployScriptId = &v
	return s
}

func (s *QueryBuildpackRequest) SetId(v string) *QueryBuildpackRequest {
	s.Id = &v
	return s
}

func (s *QueryBuildpackRequest) SetIncludeTemplate(v bool) *QueryBuildpackRequest {
	s.IncludeTemplate = &v
	return s
}

func (s *QueryBuildpackRequest) SetName(v string) *QueryBuildpackRequest {
	s.Name = &v
	return s
}

func (s *QueryBuildpackRequest) SetPageSize(v int64) *QueryBuildpackRequest {
	s.PageSize = &v
	return s
}

func (s *QueryBuildpackRequest) SetQueryType(v string) *QueryBuildpackRequest {
	s.QueryType = &v
	return s
}

func (s *QueryBuildpackRequest) SetStackId(v string) *QueryBuildpackRequest {
	s.StackId = &v
	return s
}

func (s *QueryBuildpackRequest) SetStatus(v string) *QueryBuildpackRequest {
	s.Status = &v
	return s
}

func (s *QueryBuildpackRequest) SetTypes(v []*string) *QueryBuildpackRequest {
	s.Types = v
	return s
}

func (s *QueryBuildpackRequest) SetWorkspace(v string) *QueryBuildpackRequest {
	s.Workspace = &v
	return s
}

type QueryBuildpackResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 当前页码
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// 技术栈列表
	List []*Buildpack `json:"list,omitempty" xml:"list,omitempty" type:"Repeated"`
	// 每页个数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 起始位置
	StartIndex *int64 `json:"start_index,omitempty" xml:"start_index,omitempty"`
	// 总计
	TotalSize *int64 `json:"total_size,omitempty" xml:"total_size,omitempty"`
}

func (s QueryBuildpackResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBuildpackResponse) GoString() string {
	return s.String()
}

func (s *QueryBuildpackResponse) SetReqMsgId(v string) *QueryBuildpackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBuildpackResponse) SetResultCode(v string) *QueryBuildpackResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBuildpackResponse) SetResultMsg(v string) *QueryBuildpackResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBuildpackResponse) SetCurrentPage(v int64) *QueryBuildpackResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryBuildpackResponse) SetList(v []*Buildpack) *QueryBuildpackResponse {
	s.List = v
	return s
}

func (s *QueryBuildpackResponse) SetPageSize(v int64) *QueryBuildpackResponse {
	s.PageSize = &v
	return s
}

func (s *QueryBuildpackResponse) SetStartIndex(v int64) *QueryBuildpackResponse {
	s.StartIndex = &v
	return s
}

func (s *QueryBuildpackResponse) SetTotalSize(v int64) *QueryBuildpackResponse {
	s.TotalSize = &v
	return s
}

type GetApplicationDetailRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用ID
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
	// 工作空间ID
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
}

func (s GetApplicationDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationDetailRequest) GoString() string {
	return s.String()
}

func (s *GetApplicationDetailRequest) SetAuthToken(v string) *GetApplicationDetailRequest {
	s.AuthToken = &v
	return s
}

func (s *GetApplicationDetailRequest) SetAppId(v string) *GetApplicationDetailRequest {
	s.AppId = &v
	return s
}

func (s *GetApplicationDetailRequest) SetWorkspaceId(v string) *GetApplicationDetailRequest {
	s.WorkspaceId = &v
	return s
}

type GetApplicationDetailResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用详情信息
	Data *AppView `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetApplicationDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationDetailResponse) GoString() string {
	return s.String()
}

func (s *GetApplicationDetailResponse) SetReqMsgId(v string) *GetApplicationDetailResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetApplicationDetailResponse) SetResultCode(v string) *GetApplicationDetailResponse {
	s.ResultCode = &v
	return s
}

func (s *GetApplicationDetailResponse) SetResultMsg(v string) *GetApplicationDetailResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetApplicationDetailResponse) SetData(v *AppView) *GetApplicationDetailResponse {
	s.Data = v
	return s
}

type QueryUserRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 当前页码
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// customer_id
	CustomerId *string `json:"customer_id,omitempty" xml:"customer_id,omitempty"`
	// 邮箱
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// 用户ID
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// is_locale_enabled
	IsLocaleEnabled *bool `json:"is_locale_enabled,omitempty" xml:"is_locale_enabled,omitempty"`
	// local
	Local *string `json:"local,omitempty" xml:"local,omitempty"`
	// 登录名称
	LoginName *string `json:"login_name,omitempty" xml:"login_name,omitempty"`
	// 手机号
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty"`
	// 排序关键字列表
	Orders []*string `json:"orders,omitempty" xml:"orders,omitempty" type:"Repeated"`
	// 每页个数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 是否分页
	Paging *bool `json:"paging,omitempty" xml:"paging,omitempty"`
	// 查询类型
	// 模糊查询 FUZZY
	// 精准查询 ACCURATE,
	//  前缀查询 START_WITH
	QueryType *string `json:"query_type,omitempty" xml:"query_type,omitempty"`
	// 实际名称
	RealName *string `json:"real_name,omitempty" xml:"real_name,omitempty"`
	// search
	Search *bool `json:"search,omitempty" xml:"search,omitempty"`
	// 账户类型
	// MASTER 主账号
	// OPERATOR 操作员
	// SERVICE 服务账号
	// STS_ACTOR 虚拟身份
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 账户类型列表
	Types []*string `json:"types,omitempty" xml:"types,omitempty" type:"Repeated"`
}

func (s QueryUserRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUserRequest) GoString() string {
	return s.String()
}

func (s *QueryUserRequest) SetAuthToken(v string) *QueryUserRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryUserRequest) SetCurrentPage(v int64) *QueryUserRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryUserRequest) SetCustomerId(v string) *QueryUserRequest {
	s.CustomerId = &v
	return s
}

func (s *QueryUserRequest) SetEmail(v string) *QueryUserRequest {
	s.Email = &v
	return s
}

func (s *QueryUserRequest) SetId(v string) *QueryUserRequest {
	s.Id = &v
	return s
}

func (s *QueryUserRequest) SetIsLocaleEnabled(v bool) *QueryUserRequest {
	s.IsLocaleEnabled = &v
	return s
}

func (s *QueryUserRequest) SetLocal(v string) *QueryUserRequest {
	s.Local = &v
	return s
}

func (s *QueryUserRequest) SetLoginName(v string) *QueryUserRequest {
	s.LoginName = &v
	return s
}

func (s *QueryUserRequest) SetMobile(v string) *QueryUserRequest {
	s.Mobile = &v
	return s
}

func (s *QueryUserRequest) SetOrders(v []*string) *QueryUserRequest {
	s.Orders = v
	return s
}

func (s *QueryUserRequest) SetPageSize(v int64) *QueryUserRequest {
	s.PageSize = &v
	return s
}

func (s *QueryUserRequest) SetPaging(v bool) *QueryUserRequest {
	s.Paging = &v
	return s
}

func (s *QueryUserRequest) SetQueryType(v string) *QueryUserRequest {
	s.QueryType = &v
	return s
}

func (s *QueryUserRequest) SetRealName(v string) *QueryUserRequest {
	s.RealName = &v
	return s
}

func (s *QueryUserRequest) SetSearch(v bool) *QueryUserRequest {
	s.Search = &v
	return s
}

func (s *QueryUserRequest) SetType(v string) *QueryUserRequest {
	s.Type = &v
	return s
}

func (s *QueryUserRequest) SetTypes(v []*string) *QueryUserRequest {
	s.Types = v
	return s
}

type QueryUserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 用户列表
	Data []*UserDTO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 页数
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 总数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryUserResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUserResponse) GoString() string {
	return s.String()
}

func (s *QueryUserResponse) SetReqMsgId(v string) *QueryUserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryUserResponse) SetResultCode(v string) *QueryUserResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryUserResponse) SetResultMsg(v string) *QueryUserResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryUserResponse) SetData(v []*UserDTO) *QueryUserResponse {
	s.Data = v
	return s
}

func (s *QueryUserResponse) SetPageNum(v int64) *QueryUserResponse {
	s.PageNum = &v
	return s
}

func (s *QueryUserResponse) SetPageSize(v int64) *QueryUserResponse {
	s.PageSize = &v
	return s
}

func (s *QueryUserResponse) SetTotalCount(v int64) *QueryUserResponse {
	s.TotalCount = &v
	return s
}

type ListAppgroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 动态查询
	DynamicQuery *DynamicQuery `json:"dynamic_query,omitempty" xml:"dynamic_query,omitempty"`
	// 应用分组查询
	Query *AppDomainQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s ListAppgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAppgroupRequest) GoString() string {
	return s.String()
}

func (s *ListAppgroupRequest) SetAuthToken(v string) *ListAppgroupRequest {
	s.AuthToken = &v
	return s
}

func (s *ListAppgroupRequest) SetDynamicQuery(v *DynamicQuery) *ListAppgroupRequest {
	s.DynamicQuery = v
	return s
}

func (s *ListAppgroupRequest) SetQuery(v *AppDomainQuery) *ListAppgroupRequest {
	s.Query = v
	return s
}

type ListAppgroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*AppDomainView `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// totalCount
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s ListAppgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAppgroupResponse) GoString() string {
	return s.String()
}

func (s *ListAppgroupResponse) SetReqMsgId(v string) *ListAppgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListAppgroupResponse) SetResultCode(v string) *ListAppgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *ListAppgroupResponse) SetResultMsg(v string) *ListAppgroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListAppgroupResponse) SetData(v []*AppDomainView) *ListAppgroupResponse {
	s.Data = v
	return s
}

func (s *ListAppgroupResponse) SetTotalCount(v int64) *ListAppgroupResponse {
	s.TotalCount = &v
	return s
}

type ExistAppgroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// parentId
	ParentId *string `json:"parent_id,omitempty" xml:"parent_id,omitempty"`
}

func (s ExistAppgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ExistAppgroupRequest) GoString() string {
	return s.String()
}

func (s *ExistAppgroupRequest) SetAuthToken(v string) *ExistAppgroupRequest {
	s.AuthToken = &v
	return s
}

func (s *ExistAppgroupRequest) SetName(v string) *ExistAppgroupRequest {
	s.Name = &v
	return s
}

func (s *ExistAppgroupRequest) SetParentId(v string) *ExistAppgroupRequest {
	s.ParentId = &v
	return s
}

type ExistAppgroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否存在
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ExistAppgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ExistAppgroupResponse) GoString() string {
	return s.String()
}

func (s *ExistAppgroupResponse) SetReqMsgId(v string) *ExistAppgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExistAppgroupResponse) SetResultCode(v string) *ExistAppgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *ExistAppgroupResponse) SetResultMsg(v string) *ExistAppgroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExistAppgroupResponse) SetData(v bool) *ExistAppgroupResponse {
	s.Data = &v
	return s
}

type CreateAppgroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// domain tree
	Domain *AppDomainFlatten `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// 占位
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
}

func (s CreateAppgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAppgroupRequest) GoString() string {
	return s.String()
}

func (s *CreateAppgroupRequest) SetAuthToken(v string) *CreateAppgroupRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateAppgroupRequest) SetDomain(v *AppDomainFlatten) *CreateAppgroupRequest {
	s.Domain = v
	return s
}

func (s *CreateAppgroupRequest) SetTenantId(v string) *CreateAppgroupRequest {
	s.TenantId = &v
	return s
}

type CreateAppgroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateAppgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAppgroupResponse) GoString() string {
	return s.String()
}

func (s *CreateAppgroupResponse) SetReqMsgId(v string) *CreateAppgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateAppgroupResponse) SetResultCode(v string) *CreateAppgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateAppgroupResponse) SetResultMsg(v string) *CreateAppgroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateAppgroupResponse) SetData(v string) *CreateAppgroupResponse {
	s.Data = &v
	return s
}

type ListAppgroupOwnerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 用户查询
	Query *UserQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
	// 占位
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
}

func (s ListAppgroupOwnerRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAppgroupOwnerRequest) GoString() string {
	return s.String()
}

func (s *ListAppgroupOwnerRequest) SetAuthToken(v string) *ListAppgroupOwnerRequest {
	s.AuthToken = &v
	return s
}

func (s *ListAppgroupOwnerRequest) SetQuery(v *UserQuery) *ListAppgroupOwnerRequest {
	s.Query = v
	return s
}

func (s *ListAppgroupOwnerRequest) SetTenantId(v string) *ListAppgroupOwnerRequest {
	s.TenantId = &v
	return s
}

type ListAppgroupOwnerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 用户列表
	Data []*UserDTO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 总数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s ListAppgroupOwnerResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAppgroupOwnerResponse) GoString() string {
	return s.String()
}

func (s *ListAppgroupOwnerResponse) SetReqMsgId(v string) *ListAppgroupOwnerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListAppgroupOwnerResponse) SetResultCode(v string) *ListAppgroupOwnerResponse {
	s.ResultCode = &v
	return s
}

func (s *ListAppgroupOwnerResponse) SetResultMsg(v string) *ListAppgroupOwnerResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListAppgroupOwnerResponse) SetData(v []*UserDTO) *ListAppgroupOwnerResponse {
	s.Data = v
	return s
}

func (s *ListAppgroupOwnerResponse) SetTotalCount(v int64) *ListAppgroupOwnerResponse {
	s.TotalCount = &v
	return s
}

type GetAppgroupTreeRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s GetAppgroupTreeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAppgroupTreeRequest) GoString() string {
	return s.String()
}

func (s *GetAppgroupTreeRequest) SetAuthToken(v string) *GetAppgroupTreeRequest {
	s.AuthToken = &v
	return s
}

type GetAppgroupTreeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用列表，包含依赖关系
	Data []*AppDomainFlatten `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s GetAppgroupTreeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAppgroupTreeResponse) GoString() string {
	return s.String()
}

func (s *GetAppgroupTreeResponse) SetReqMsgId(v string) *GetAppgroupTreeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAppgroupTreeResponse) SetResultCode(v string) *GetAppgroupTreeResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAppgroupTreeResponse) SetResultMsg(v string) *GetAppgroupTreeResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAppgroupTreeResponse) SetData(v []*AppDomainFlatten) *GetAppgroupTreeResponse {
	s.Data = v
	return s
}

type GetAppgroupSystemtreeRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s GetAppgroupSystemtreeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAppgroupSystemtreeRequest) GoString() string {
	return s.String()
}

func (s *GetAppgroupSystemtreeRequest) SetAuthToken(v string) *GetAppgroupSystemtreeRequest {
	s.AuthToken = &v
	return s
}

type GetAppgroupSystemtreeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用分组结构
	Data []*AppDomainFlatten `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s GetAppgroupSystemtreeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAppgroupSystemtreeResponse) GoString() string {
	return s.String()
}

func (s *GetAppgroupSystemtreeResponse) SetReqMsgId(v string) *GetAppgroupSystemtreeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAppgroupSystemtreeResponse) SetResultCode(v string) *GetAppgroupSystemtreeResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAppgroupSystemtreeResponse) SetResultMsg(v string) *GetAppgroupSystemtreeResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAppgroupSystemtreeResponse) SetData(v []*AppDomainFlatten) *GetAppgroupSystemtreeResponse {
	s.Data = v
	return s
}

type DeleteAppgroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 分组 id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s DeleteAppgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppgroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteAppgroupRequest) SetAuthToken(v string) *DeleteAppgroupRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteAppgroupRequest) SetId(v string) *DeleteAppgroupRequest {
	s.Id = &v
	return s
}

type DeleteAppgroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 删除结果
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DeleteAppgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppgroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteAppgroupResponse) SetReqMsgId(v string) *DeleteAppgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteAppgroupResponse) SetResultCode(v string) *DeleteAppgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteAppgroupResponse) SetResultMsg(v string) *DeleteAppgroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteAppgroupResponse) SetData(v bool) *DeleteAppgroupResponse {
	s.Data = &v
	return s
}

type UpdateAppgroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 更新内容
	Domain *AppDomainFlatten `json:"domain,omitempty" xml:"domain,omitempty" require:"true"`
	// 应用分组id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s UpdateAppgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAppgroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateAppgroupRequest) SetAuthToken(v string) *UpdateAppgroupRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateAppgroupRequest) SetDomain(v *AppDomainFlatten) *UpdateAppgroupRequest {
	s.Domain = v
	return s
}

func (s *UpdateAppgroupRequest) SetId(v string) *UpdateAppgroupRequest {
	s.Id = &v
	return s
}

type UpdateAppgroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 更新结果
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s UpdateAppgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAppgroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateAppgroupResponse) SetReqMsgId(v string) *UpdateAppgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateAppgroupResponse) SetResultCode(v string) *UpdateAppgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateAppgroupResponse) SetResultMsg(v string) *UpdateAppgroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateAppgroupResponse) SetData(v bool) *UpdateAppgroupResponse {
	s.Data = &v
	return s
}

type ListApplevelRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 动态查询
	DynamicQuery *DynamicQuery `json:"dynamic_query,omitempty" xml:"dynamic_query,omitempty"`
	// 应用分级查询
	Query *AppLevelQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s ListApplevelRequest) String() string {
	return tea.Prettify(s)
}

func (s ListApplevelRequest) GoString() string {
	return s.String()
}

func (s *ListApplevelRequest) SetAuthToken(v string) *ListApplevelRequest {
	s.AuthToken = &v
	return s
}

func (s *ListApplevelRequest) SetDynamicQuery(v *DynamicQuery) *ListApplevelRequest {
	s.DynamicQuery = v
	return s
}

func (s *ListApplevelRequest) SetQuery(v *AppLevelQuery) *ListApplevelRequest {
	s.Query = v
	return s
}

type ListApplevelResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用等级列表
	Data []*AppLevelView `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 总数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s ListApplevelResponse) String() string {
	return tea.Prettify(s)
}

func (s ListApplevelResponse) GoString() string {
	return s.String()
}

func (s *ListApplevelResponse) SetReqMsgId(v string) *ListApplevelResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListApplevelResponse) SetResultCode(v string) *ListApplevelResponse {
	s.ResultCode = &v
	return s
}

func (s *ListApplevelResponse) SetResultMsg(v string) *ListApplevelResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListApplevelResponse) SetData(v []*AppLevelView) *ListApplevelResponse {
	s.Data = v
	return s
}

func (s *ListApplevelResponse) SetTotalCount(v int64) *ListApplevelResponse {
	s.TotalCount = &v
	return s
}

type ExistApplevelRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用等级名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s ExistApplevelRequest) String() string {
	return tea.Prettify(s)
}

func (s ExistApplevelRequest) GoString() string {
	return s.String()
}

func (s *ExistApplevelRequest) SetAuthToken(v string) *ExistApplevelRequest {
	s.AuthToken = &v
	return s
}

func (s *ExistApplevelRequest) SetName(v string) *ExistApplevelRequest {
	s.Name = &v
	return s
}

type ExistApplevelResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否存在
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ExistApplevelResponse) String() string {
	return tea.Prettify(s)
}

func (s ExistApplevelResponse) GoString() string {
	return s.String()
}

func (s *ExistApplevelResponse) SetReqMsgId(v string) *ExistApplevelResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExistApplevelResponse) SetResultCode(v string) *ExistApplevelResponse {
	s.ResultCode = &v
	return s
}

func (s *ExistApplevelResponse) SetResultMsg(v string) *ExistApplevelResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExistApplevelResponse) SetData(v bool) *ExistApplevelResponse {
	s.Data = &v
	return s
}

type CreateApplevelRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用等级
	Level *AppLevel `json:"level,omitempty" xml:"level,omitempty" require:"true"`
	// 占位，因为入参不能只有一个结构体
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
}

func (s CreateApplevelRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateApplevelRequest) GoString() string {
	return s.String()
}

func (s *CreateApplevelRequest) SetAuthToken(v string) *CreateApplevelRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateApplevelRequest) SetLevel(v *AppLevel) *CreateApplevelRequest {
	s.Level = v
	return s
}

func (s *CreateApplevelRequest) SetTenantId(v string) *CreateApplevelRequest {
	s.TenantId = &v
	return s
}

type CreateApplevelResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建结果
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateApplevelResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateApplevelResponse) GoString() string {
	return s.String()
}

func (s *CreateApplevelResponse) SetReqMsgId(v string) *CreateApplevelResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateApplevelResponse) SetResultCode(v string) *CreateApplevelResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateApplevelResponse) SetResultMsg(v string) *CreateApplevelResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateApplevelResponse) SetData(v string) *CreateApplevelResponse {
	s.Data = &v
	return s
}

type DeleteApplevelRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用等级 id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s DeleteApplevelRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplevelRequest) GoString() string {
	return s.String()
}

func (s *DeleteApplevelRequest) SetAuthToken(v string) *DeleteApplevelRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteApplevelRequest) SetId(v string) *DeleteApplevelRequest {
	s.Id = &v
	return s
}

type DeleteApplevelResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 删除结果
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DeleteApplevelResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplevelResponse) GoString() string {
	return s.String()
}

func (s *DeleteApplevelResponse) SetReqMsgId(v string) *DeleteApplevelResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteApplevelResponse) SetResultCode(v string) *DeleteApplevelResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteApplevelResponse) SetResultMsg(v string) *DeleteApplevelResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteApplevelResponse) SetData(v bool) *DeleteApplevelResponse {
	s.Data = &v
	return s
}

type UpdateApplevelRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用等级id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 应用等级名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s UpdateApplevelRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplevelRequest) GoString() string {
	return s.String()
}

func (s *UpdateApplevelRequest) SetAuthToken(v string) *UpdateApplevelRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateApplevelRequest) SetId(v string) *UpdateApplevelRequest {
	s.Id = &v
	return s
}

func (s *UpdateApplevelRequest) SetName(v string) *UpdateApplevelRequest {
	s.Name = &v
	return s
}

type UpdateApplevelResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 更新结果
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s UpdateApplevelResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplevelResponse) GoString() string {
	return s.String()
}

func (s *UpdateApplevelResponse) SetReqMsgId(v string) *UpdateApplevelResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateApplevelResponse) SetResultCode(v string) *UpdateApplevelResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateApplevelResponse) SetResultMsg(v string) *UpdateApplevelResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateApplevelResponse) SetData(v bool) *UpdateApplevelResponse {
	s.Data = &v
	return s
}

type ListApplicationRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 动态查询
	DynamicQuery *DynamicQuery `json:"dynamic_query,omitempty" xml:"dynamic_query,omitempty"`
	// 应用查询
	Query *AppQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s ListApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationRequest) GoString() string {
	return s.String()
}

func (s *ListApplicationRequest) SetAuthToken(v string) *ListApplicationRequest {
	s.AuthToken = &v
	return s
}

func (s *ListApplicationRequest) SetDynamicQuery(v *DynamicQuery) *ListApplicationRequest {
	s.DynamicQuery = v
	return s
}

func (s *ListApplicationRequest) SetQuery(v *AppQuery) *ListApplicationRequest {
	s.Query = v
	return s
}

type ListApplicationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用列表
	Data []*AppView `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 总数量
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// 当前页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s ListApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationResponse) GoString() string {
	return s.String()
}

func (s *ListApplicationResponse) SetReqMsgId(v string) *ListApplicationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListApplicationResponse) SetResultCode(v string) *ListApplicationResponse {
	s.ResultCode = &v
	return s
}

func (s *ListApplicationResponse) SetResultMsg(v string) *ListApplicationResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListApplicationResponse) SetData(v []*AppView) *ListApplicationResponse {
	s.Data = v
	return s
}

func (s *ListApplicationResponse) SetTotalCount(v int64) *ListApplicationResponse {
	s.TotalCount = &v
	return s
}

func (s *ListApplicationResponse) SetPageNum(v int64) *ListApplicationResponse {
	s.PageNum = &v
	return s
}

func (s *ListApplicationResponse) SetPageSize(v int64) *ListApplicationResponse {
	s.PageSize = &v
	return s
}

type UpdateApplicationRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// appDomainId
	AppDomainId *string `json:"app_domain_id,omitempty" xml:"app_domain_id,omitempty"`
	// appExtraInfos
	AppExtraInfos []*AppExtraInfo `json:"app_extra_infos,omitempty" xml:"app_extra_infos,omitempty" type:"Repeated"`
	// 应用等级
	AppLevel *AppLevel `json:"app_level,omitempty" xml:"app_level,omitempty"`
	// appOwner
	AppOwner *AppOwner `json:"app_owner,omitempty" xml:"app_owner,omitempty"`
	// archetype
	Archetype *ScmSofaArchetype `json:"archetype,omitempty" xml:"archetype,omitempty"`
	// buildpackVersion
	BuildpackVersion *string `json:"buildpack_version,omitempty" xml:"buildpack_version,omitempty"`
	// 中文名称
	ChineseName *string `json:"chinese_name,omitempty" xml:"chinese_name,omitempty"`
	// 代码库
	CodeRepository *CodeRepository `json:"code_repository,omitempty" xml:"code_repository,omitempty"`
	// 描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 额外信息
	ExtraParams *string `json:"extra_params,omitempty" xml:"extra_params,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// isService
	IsService *bool `json:"is_service,omitempty" xml:"is_service,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// ownerId
	OwnerId *string `json:"owner_id,omitempty" xml:"owner_id,omitempty"`
	// stack_id
	StackId *string `json:"stack_id,omitempty" xml:"stack_id,omitempty"`
	// 状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// tags
	Tags *string `json:"tags,omitempty" xml:"tags,omitempty"`
	// 创建时间
	UtcCreate *string `json:"utc_create,omitempty" xml:"utc_create,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 修改时间
	UtcModified *string `json:"utc_modified,omitempty" xml:"utc_modified,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s UpdateApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationRequest) GoString() string {
	return s.String()
}

func (s *UpdateApplicationRequest) SetAuthToken(v string) *UpdateApplicationRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateApplicationRequest) SetAppDomainId(v string) *UpdateApplicationRequest {
	s.AppDomainId = &v
	return s
}

func (s *UpdateApplicationRequest) SetAppExtraInfos(v []*AppExtraInfo) *UpdateApplicationRequest {
	s.AppExtraInfos = v
	return s
}

func (s *UpdateApplicationRequest) SetAppLevel(v *AppLevel) *UpdateApplicationRequest {
	s.AppLevel = v
	return s
}

func (s *UpdateApplicationRequest) SetAppOwner(v *AppOwner) *UpdateApplicationRequest {
	s.AppOwner = v
	return s
}

func (s *UpdateApplicationRequest) SetArchetype(v *ScmSofaArchetype) *UpdateApplicationRequest {
	s.Archetype = v
	return s
}

func (s *UpdateApplicationRequest) SetBuildpackVersion(v string) *UpdateApplicationRequest {
	s.BuildpackVersion = &v
	return s
}

func (s *UpdateApplicationRequest) SetChineseName(v string) *UpdateApplicationRequest {
	s.ChineseName = &v
	return s
}

func (s *UpdateApplicationRequest) SetCodeRepository(v *CodeRepository) *UpdateApplicationRequest {
	s.CodeRepository = v
	return s
}

func (s *UpdateApplicationRequest) SetDescription(v string) *UpdateApplicationRequest {
	s.Description = &v
	return s
}

func (s *UpdateApplicationRequest) SetExtraParams(v string) *UpdateApplicationRequest {
	s.ExtraParams = &v
	return s
}

func (s *UpdateApplicationRequest) SetId(v string) *UpdateApplicationRequest {
	s.Id = &v
	return s
}

func (s *UpdateApplicationRequest) SetIsService(v bool) *UpdateApplicationRequest {
	s.IsService = &v
	return s
}

func (s *UpdateApplicationRequest) SetName(v string) *UpdateApplicationRequest {
	s.Name = &v
	return s
}

func (s *UpdateApplicationRequest) SetOwnerId(v string) *UpdateApplicationRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateApplicationRequest) SetStackId(v string) *UpdateApplicationRequest {
	s.StackId = &v
	return s
}

func (s *UpdateApplicationRequest) SetStatus(v string) *UpdateApplicationRequest {
	s.Status = &v
	return s
}

func (s *UpdateApplicationRequest) SetTags(v string) *UpdateApplicationRequest {
	s.Tags = &v
	return s
}

func (s *UpdateApplicationRequest) SetUtcCreate(v string) *UpdateApplicationRequest {
	s.UtcCreate = &v
	return s
}

func (s *UpdateApplicationRequest) SetUtcModified(v string) *UpdateApplicationRequest {
	s.UtcModified = &v
	return s
}

func (s *UpdateApplicationRequest) SetWorkspaceId(v string) *UpdateApplicationRequest {
	s.WorkspaceId = &v
	return s
}

type UpdateApplicationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 更新结果
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s UpdateApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationResponse) GoString() string {
	return s.String()
}

func (s *UpdateApplicationResponse) SetReqMsgId(v string) *UpdateApplicationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateApplicationResponse) SetResultCode(v string) *UpdateApplicationResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateApplicationResponse) SetResultMsg(v string) *UpdateApplicationResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateApplicationResponse) SetData(v bool) *UpdateApplicationResponse {
	s.Data = &v
	return s
}

type ListAppserviceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 动态查询
	DynamicQuery *DynamicQuery `json:"dynamic_query,omitempty" xml:"dynamic_query,omitempty"`
	// 应用服务查询
	Query *AppServiceQuery `json:"query,omitempty" xml:"query,omitempty"`
	// 工作空间id，用于鉴权
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
}

func (s ListAppserviceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAppserviceRequest) GoString() string {
	return s.String()
}

func (s *ListAppserviceRequest) SetAuthToken(v string) *ListAppserviceRequest {
	s.AuthToken = &v
	return s
}

func (s *ListAppserviceRequest) SetDynamicQuery(v *DynamicQuery) *ListAppserviceRequest {
	s.DynamicQuery = v
	return s
}

func (s *ListAppserviceRequest) SetQuery(v *AppServiceQuery) *ListAppserviceRequest {
	s.Query = v
	return s
}

func (s *ListAppserviceRequest) SetWorkspaceId(v string) *ListAppserviceRequest {
	s.WorkspaceId = &v
	return s
}

type ListAppserviceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 当前页面
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// PaginationResult<AppServiceViewModel>
	Data []*AppServiceViewModel `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 总数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s ListAppserviceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAppserviceResponse) GoString() string {
	return s.String()
}

func (s *ListAppserviceResponse) SetReqMsgId(v string) *ListAppserviceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListAppserviceResponse) SetResultCode(v string) *ListAppserviceResponse {
	s.ResultCode = &v
	return s
}

func (s *ListAppserviceResponse) SetResultMsg(v string) *ListAppserviceResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListAppserviceResponse) SetCurrentPage(v int64) *ListAppserviceResponse {
	s.CurrentPage = &v
	return s
}

func (s *ListAppserviceResponse) SetData(v []*AppServiceViewModel) *ListAppserviceResponse {
	s.Data = v
	return s
}

func (s *ListAppserviceResponse) SetPageSize(v int64) *ListAppserviceResponse {
	s.PageSize = &v
	return s
}

func (s *ListAppserviceResponse) SetTotalCount(v int64) *ListAppserviceResponse {
	s.TotalCount = &v
	return s
}

type DeleteAppserviceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 工作空间id，用于鉴权
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
}

func (s DeleteAppserviceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppserviceRequest) GoString() string {
	return s.String()
}

func (s *DeleteAppserviceRequest) SetAuthToken(v string) *DeleteAppserviceRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteAppserviceRequest) SetId(v string) *DeleteAppserviceRequest {
	s.Id = &v
	return s
}

func (s *DeleteAppserviceRequest) SetWorkspaceId(v string) *DeleteAppserviceRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteAppserviceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *int64 `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DeleteAppserviceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppserviceResponse) GoString() string {
	return s.String()
}

func (s *DeleteAppserviceResponse) SetReqMsgId(v string) *DeleteAppserviceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteAppserviceResponse) SetResultCode(v string) *DeleteAppserviceResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteAppserviceResponse) SetResultMsg(v string) *DeleteAppserviceResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteAppserviceResponse) SetData(v int64) *DeleteAppserviceResponse {
	s.Data = &v
	return s
}

type GetAppserviceDetailRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用服务id
	AppServiceId *string `json:"app_service_id,omitempty" xml:"app_service_id,omitempty" require:"true"`
	// 工作空间id，用于鉴权
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
}

func (s GetAppserviceDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAppserviceDetailRequest) GoString() string {
	return s.String()
}

func (s *GetAppserviceDetailRequest) SetAuthToken(v string) *GetAppserviceDetailRequest {
	s.AuthToken = &v
	return s
}

func (s *GetAppserviceDetailRequest) SetAppServiceId(v string) *GetAppserviceDetailRequest {
	s.AppServiceId = &v
	return s
}

func (s *GetAppserviceDetailRequest) SetWorkspaceId(v string) *GetAppserviceDetailRequest {
	s.WorkspaceId = &v
	return s
}

type GetAppserviceDetailResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用服务详情
	Data *AppServiceViewModel `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetAppserviceDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAppserviceDetailResponse) GoString() string {
	return s.String()
}

func (s *GetAppserviceDetailResponse) SetReqMsgId(v string) *GetAppserviceDetailResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAppserviceDetailResponse) SetResultCode(v string) *GetAppserviceDetailResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAppserviceDetailResponse) SetResultMsg(v string) *GetAppserviceDetailResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAppserviceDetailResponse) SetData(v *AppServiceViewModel) *GetAppserviceDetailResponse {
	s.Data = v
	return s
}

type ExistApplicationPackageRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// appId
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
	// version
	AppVersion *string `json:"app_version,omitempty" xml:"app_version,omitempty" require:"true"`
	// workspaceId
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
}

func (s ExistApplicationPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s ExistApplicationPackageRequest) GoString() string {
	return s.String()
}

func (s *ExistApplicationPackageRequest) SetAuthToken(v string) *ExistApplicationPackageRequest {
	s.AuthToken = &v
	return s
}

func (s *ExistApplicationPackageRequest) SetAppId(v string) *ExistApplicationPackageRequest {
	s.AppId = &v
	return s
}

func (s *ExistApplicationPackageRequest) SetAppVersion(v string) *ExistApplicationPackageRequest {
	s.AppVersion = &v
	return s
}

func (s *ExistApplicationPackageRequest) SetWorkspaceId(v string) *ExistApplicationPackageRequest {
	s.WorkspaceId = &v
	return s
}

type ExistApplicationPackageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ExistApplicationPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s ExistApplicationPackageResponse) GoString() string {
	return s.String()
}

func (s *ExistApplicationPackageResponse) SetReqMsgId(v string) *ExistApplicationPackageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExistApplicationPackageResponse) SetResultCode(v string) *ExistApplicationPackageResponse {
	s.ResultCode = &v
	return s
}

func (s *ExistApplicationPackageResponse) SetResultMsg(v string) *ExistApplicationPackageResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExistApplicationPackageResponse) SetData(v bool) *ExistApplicationPackageResponse {
	s.Data = &v
	return s
}

type GetApplicationPackageuploadpolicyRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// appId
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
	// workspaceId
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// version
	AppVersion *string `json:"app_version,omitempty" xml:"app_version,omitempty" require:"true"`
}

func (s GetApplicationPackageuploadpolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationPackageuploadpolicyRequest) GoString() string {
	return s.String()
}

func (s *GetApplicationPackageuploadpolicyRequest) SetAuthToken(v string) *GetApplicationPackageuploadpolicyRequest {
	s.AuthToken = &v
	return s
}

func (s *GetApplicationPackageuploadpolicyRequest) SetAppId(v string) *GetApplicationPackageuploadpolicyRequest {
	s.AppId = &v
	return s
}

func (s *GetApplicationPackageuploadpolicyRequest) SetWorkspaceId(v string) *GetApplicationPackageuploadpolicyRequest {
	s.WorkspaceId = &v
	return s
}

func (s *GetApplicationPackageuploadpolicyRequest) SetAppVersion(v string) *GetApplicationPackageuploadpolicyRequest {
	s.AppVersion = &v
	return s
}

type GetApplicationPackageuploadpolicyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 发布包上传策略
	Data *PackageUploadPolicy `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetApplicationPackageuploadpolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationPackageuploadpolicyResponse) GoString() string {
	return s.String()
}

func (s *GetApplicationPackageuploadpolicyResponse) SetReqMsgId(v string) *GetApplicationPackageuploadpolicyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetApplicationPackageuploadpolicyResponse) SetResultCode(v string) *GetApplicationPackageuploadpolicyResponse {
	s.ResultCode = &v
	return s
}

func (s *GetApplicationPackageuploadpolicyResponse) SetResultMsg(v string) *GetApplicationPackageuploadpolicyResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetApplicationPackageuploadpolicyResponse) SetData(v *PackageUploadPolicy) *GetApplicationPackageuploadpolicyResponse {
	s.Data = v
	return s
}

type GetApplicationPackagedownloadurlRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// versionId
	VersionId *string `json:"version_id,omitempty" xml:"version_id,omitempty" require:"true"`
	// 应用id，用于鉴权
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
}

func (s GetApplicationPackagedownloadurlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationPackagedownloadurlRequest) GoString() string {
	return s.String()
}

func (s *GetApplicationPackagedownloadurlRequest) SetAuthToken(v string) *GetApplicationPackagedownloadurlRequest {
	s.AuthToken = &v
	return s
}

func (s *GetApplicationPackagedownloadurlRequest) SetVersionId(v string) *GetApplicationPackagedownloadurlRequest {
	s.VersionId = &v
	return s
}

func (s *GetApplicationPackagedownloadurlRequest) SetAppId(v string) *GetApplicationPackagedownloadurlRequest {
	s.AppId = &v
	return s
}

type GetApplicationPackagedownloadurlResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 下载链接
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetApplicationPackagedownloadurlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationPackagedownloadurlResponse) GoString() string {
	return s.String()
}

func (s *GetApplicationPackagedownloadurlResponse) SetReqMsgId(v string) *GetApplicationPackagedownloadurlResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetApplicationPackagedownloadurlResponse) SetResultCode(v string) *GetApplicationPackagedownloadurlResponse {
	s.ResultCode = &v
	return s
}

func (s *GetApplicationPackagedownloadurlResponse) SetResultMsg(v string) *GetApplicationPackagedownloadurlResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetApplicationPackagedownloadurlResponse) SetData(v string) *GetApplicationPackagedownloadurlResponse {
	s.Data = &v
	return s
}

type ExistApplicationRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名称
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
}

func (s ExistApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s ExistApplicationRequest) GoString() string {
	return s.String()
}

func (s *ExistApplicationRequest) SetAuthToken(v string) *ExistApplicationRequest {
	s.AuthToken = &v
	return s
}

func (s *ExistApplicationRequest) SetAppName(v string) *ExistApplicationRequest {
	s.AppName = &v
	return s
}

type ExistApplicationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否存在
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ExistApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s ExistApplicationResponse) GoString() string {
	return s.String()
}

func (s *ExistApplicationResponse) SetReqMsgId(v string) *ExistApplicationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExistApplicationResponse) SetResultCode(v string) *ExistApplicationResponse {
	s.ResultCode = &v
	return s
}

func (s *ExistApplicationResponse) SetResultMsg(v string) *ExistApplicationResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExistApplicationResponse) SetData(v bool) *ExistApplicationResponse {
	s.Data = &v
	return s
}

type QueryAppserviceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用服务 id 数组
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" require:"true" type:"Repeated"`
	// workspaceId 用于鉴权
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
}

func (s QueryAppserviceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppserviceRequest) GoString() string {
	return s.String()
}

func (s *QueryAppserviceRequest) SetAuthToken(v string) *QueryAppserviceRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppserviceRequest) SetIds(v []*string) *QueryAppserviceRequest {
	s.Ids = v
	return s
}

func (s *QueryAppserviceRequest) SetWorkspaceId(v string) *QueryAppserviceRequest {
	s.WorkspaceId = &v
	return s
}

type QueryAppserviceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用服务数组
	Data []*AppService `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryAppserviceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppserviceResponse) GoString() string {
	return s.String()
}

func (s *QueryAppserviceResponse) SetReqMsgId(v string) *QueryAppserviceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppserviceResponse) SetResultCode(v string) *QueryAppserviceResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppserviceResponse) SetResultMsg(v string) *QueryAppserviceResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppserviceResponse) SetData(v []*AppService) *QueryAppserviceResponse {
	s.Data = v
	return s
}

type GetAppgrayconfigsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s GetAppgrayconfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAppgrayconfigsRequest) GoString() string {
	return s.String()
}

func (s *GetAppgrayconfigsRequest) SetAuthToken(v string) *GetAppgrayconfigsRequest {
	s.AuthToken = &v
	return s
}

type GetAppgrayconfigsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 开关配置清单
	Data []*MapStringToBooleanEntity `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s GetAppgrayconfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAppgrayconfigsResponse) GoString() string {
	return s.String()
}

func (s *GetAppgrayconfigsResponse) SetReqMsgId(v string) *GetAppgrayconfigsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAppgrayconfigsResponse) SetResultCode(v string) *GetAppgrayconfigsResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAppgrayconfigsResponse) SetResultMsg(v string) *GetAppgrayconfigsResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAppgrayconfigsResponse) SetData(v []*MapStringToBooleanEntity) *GetAppgrayconfigsResponse {
	s.Data = v
	return s
}

type QueryOptestRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// string
	Str *string `json:"str,omitempty" xml:"str,omitempty" require:"true"`
	// long
	Lon *int64 `json:"lon,omitempty" xml:"lon,omitempty" require:"true"`
	// arr_str
	ArrStr []*string `json:"arr_str,omitempty" xml:"arr_str,omitempty" type:"Repeated"`
	// stru
	Stru *Zone `json:"stru,omitempty" xml:"stru,omitempty"`
	// arr_stru
	ArrStru []*VPC `json:"arr_stru,omitempty" xml:"arr_stru,omitempty" type:"Repeated"`
}

func (s QueryOptestRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOptestRequest) GoString() string {
	return s.String()
}

func (s *QueryOptestRequest) SetAuthToken(v string) *QueryOptestRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryOptestRequest) SetStr(v string) *QueryOptestRequest {
	s.Str = &v
	return s
}

func (s *QueryOptestRequest) SetLon(v int64) *QueryOptestRequest {
	s.Lon = &v
	return s
}

func (s *QueryOptestRequest) SetArrStr(v []*string) *QueryOptestRequest {
	s.ArrStr = v
	return s
}

func (s *QueryOptestRequest) SetStru(v *Zone) *QueryOptestRequest {
	s.Stru = v
	return s
}

func (s *QueryOptestRequest) SetArrStru(v []*VPC) *QueryOptestRequest {
	s.ArrStru = v
	return s
}

type QueryOptestResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// str
	Str *string `json:"str,omitempty" xml:"str,omitempty"`
	// lon
	Lon *int64 `json:"lon,omitempty" xml:"lon,omitempty"`
	// stru
	Stru *VPC `json:"stru,omitempty" xml:"stru,omitempty"`
	// arr_str
	ArrStr []*string `json:"arr_str,omitempty" xml:"arr_str,omitempty" type:"Repeated"`
	// arr_stru
	ArrStru []*VPC `json:"arr_stru,omitempty" xml:"arr_stru,omitempty" type:"Repeated"`
}

func (s QueryOptestResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOptestResponse) GoString() string {
	return s.String()
}

func (s *QueryOptestResponse) SetReqMsgId(v string) *QueryOptestResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryOptestResponse) SetResultCode(v string) *QueryOptestResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryOptestResponse) SetResultMsg(v string) *QueryOptestResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryOptestResponse) SetStr(v string) *QueryOptestResponse {
	s.Str = &v
	return s
}

func (s *QueryOptestResponse) SetLon(v int64) *QueryOptestResponse {
	s.Lon = &v
	return s
}

func (s *QueryOptestResponse) SetStru(v *VPC) *QueryOptestResponse {
	s.Stru = v
	return s
}

func (s *QueryOptestResponse) SetArrStr(v []*string) *QueryOptestResponse {
	s.ArrStr = v
	return s
}

func (s *QueryOptestResponse) SetArrStru(v []*VPC) *QueryOptestResponse {
	s.ArrStru = v
	return s
}

type BindOptestplusRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// optestplus
	Optestplus *string `json:"optestplus,omitempty" xml:"optestplus,omitempty" require:"true"`
}

func (s BindOptestplusRequest) String() string {
	return tea.Prettify(s)
}

func (s BindOptestplusRequest) GoString() string {
	return s.String()
}

func (s *BindOptestplusRequest) SetAuthToken(v string) *BindOptestplusRequest {
	s.AuthToken = &v
	return s
}

func (s *BindOptestplusRequest) SetOptestplus(v string) *BindOptestplusRequest {
	s.Optestplus = &v
	return s
}

type BindOptestplusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BindOptestplusResponse) String() string {
	return tea.Prettify(s)
}

func (s BindOptestplusResponse) GoString() string {
	return s.String()
}

func (s *BindOptestplusResponse) SetReqMsgId(v string) *BindOptestplusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BindOptestplusResponse) SetResultCode(v string) *BindOptestplusResponse {
	s.ResultCode = &v
	return s
}

func (s *BindOptestplusResponse) SetResultMsg(v string) *BindOptestplusResponse {
	s.ResultMsg = &v
	return s
}

type ListAppportraitAppRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 应用分组名称
	AppGroupName *string `json:"app_group_name,omitempty" xml:"app_group_name,omitempty"`
	// 应用负责人
	OwnerDisplayName *string `json:"owner_display_name,omitempty" xml:"owner_display_name,omitempty"`
	// 技术栈名称
	BuildpackName *string `json:"buildpack_name,omitempty" xml:"buildpack_name,omitempty"`
	// 技术栈版本
	BuildpackVersion *string `json:"buildpack_version,omitempty" xml:"buildpack_version,omitempty"`
	// TenantId
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// TenantName
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s ListAppportraitAppRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAppportraitAppRequest) GoString() string {
	return s.String()
}

func (s *ListAppportraitAppRequest) SetAuthToken(v string) *ListAppportraitAppRequest {
	s.AuthToken = &v
	return s
}

func (s *ListAppportraitAppRequest) SetName(v string) *ListAppportraitAppRequest {
	s.Name = &v
	return s
}

func (s *ListAppportraitAppRequest) SetAppGroupName(v string) *ListAppportraitAppRequest {
	s.AppGroupName = &v
	return s
}

func (s *ListAppportraitAppRequest) SetOwnerDisplayName(v string) *ListAppportraitAppRequest {
	s.OwnerDisplayName = &v
	return s
}

func (s *ListAppportraitAppRequest) SetBuildpackName(v string) *ListAppportraitAppRequest {
	s.BuildpackName = &v
	return s
}

func (s *ListAppportraitAppRequest) SetBuildpackVersion(v string) *ListAppportraitAppRequest {
	s.BuildpackVersion = &v
	return s
}

func (s *ListAppportraitAppRequest) SetTenantId(v string) *ListAppportraitAppRequest {
	s.TenantId = &v
	return s
}

func (s *ListAppportraitAppRequest) SetTenantName(v string) *ListAppportraitAppRequest {
	s.TenantName = &v
	return s
}

type ListAppportraitAppResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用名称列表数据
	Data []*AppPortraitAppList `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListAppportraitAppResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAppportraitAppResponse) GoString() string {
	return s.String()
}

func (s *ListAppportraitAppResponse) SetReqMsgId(v string) *ListAppportraitAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListAppportraitAppResponse) SetResultCode(v string) *ListAppportraitAppResponse {
	s.ResultCode = &v
	return s
}

func (s *ListAppportraitAppResponse) SetResultMsg(v string) *ListAppportraitAppResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListAppportraitAppResponse) SetData(v []*AppPortraitAppList) *ListAppportraitAppResponse {
	s.Data = v
	return s
}

type GetAppportraitAppRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 待查询的应用名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// TenantId
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// TenantName
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// 工作空间id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
}

func (s GetAppportraitAppRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAppportraitAppRequest) GoString() string {
	return s.String()
}

func (s *GetAppportraitAppRequest) SetAuthToken(v string) *GetAppportraitAppRequest {
	s.AuthToken = &v
	return s
}

func (s *GetAppportraitAppRequest) SetName(v string) *GetAppportraitAppRequest {
	s.Name = &v
	return s
}

func (s *GetAppportraitAppRequest) SetTenantId(v string) *GetAppportraitAppRequest {
	s.TenantId = &v
	return s
}

func (s *GetAppportraitAppRequest) SetTenantName(v string) *GetAppportraitAppRequest {
	s.TenantName = &v
	return s
}

func (s *GetAppportraitAppRequest) SetWorkspaceId(v string) *GetAppportraitAppRequest {
	s.WorkspaceId = &v
	return s
}

type GetAppportraitAppResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回应用详情信息
	Data *AppPortraitAppGet `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetAppportraitAppResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAppportraitAppResponse) GoString() string {
	return s.String()
}

func (s *GetAppportraitAppResponse) SetReqMsgId(v string) *GetAppportraitAppResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAppportraitAppResponse) SetResultCode(v string) *GetAppportraitAppResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAppportraitAppResponse) SetResultMsg(v string) *GetAppportraitAppResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAppportraitAppResponse) SetData(v *AppPortraitAppGet) *GetAppportraitAppResponse {
	s.Data = v
	return s
}

type GetAppportraitYearusabilityRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// 租户名称
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 查询的年份
	Year *int64 `json:"year,omitempty" xml:"year,omitempty" require:"true"`
}

func (s GetAppportraitYearusabilityRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAppportraitYearusabilityRequest) GoString() string {
	return s.String()
}

func (s *GetAppportraitYearusabilityRequest) SetAuthToken(v string) *GetAppportraitYearusabilityRequest {
	s.AuthToken = &v
	return s
}

func (s *GetAppportraitYearusabilityRequest) SetWorkspaceName(v string) *GetAppportraitYearusabilityRequest {
	s.WorkspaceName = &v
	return s
}

func (s *GetAppportraitYearusabilityRequest) SetTenantId(v string) *GetAppportraitYearusabilityRequest {
	s.TenantId = &v
	return s
}

func (s *GetAppportraitYearusabilityRequest) SetTenantName(v string) *GetAppportraitYearusabilityRequest {
	s.TenantName = &v
	return s
}

func (s *GetAppportraitYearusabilityRequest) SetAppName(v string) *GetAppportraitYearusabilityRequest {
	s.AppName = &v
	return s
}

func (s *GetAppportraitYearusabilityRequest) SetYear(v int64) *GetAppportraitYearusabilityRequest {
	s.Year = &v
	return s
}

type GetAppportraitYearusabilityResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回数据
	Data *AppPortraitAppUsability `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetAppportraitYearusabilityResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAppportraitYearusabilityResponse) GoString() string {
	return s.String()
}

func (s *GetAppportraitYearusabilityResponse) SetReqMsgId(v string) *GetAppportraitYearusabilityResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAppportraitYearusabilityResponse) SetResultCode(v string) *GetAppportraitYearusabilityResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAppportraitYearusabilityResponse) SetResultMsg(v string) *GetAppportraitYearusabilityResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAppportraitYearusabilityResponse) SetData(v *AppPortraitAppUsability) *GetAppportraitYearusabilityResponse {
	s.Data = v
	return s
}

type GetAppportraitMonthusabilityRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// 租户名称
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 查询的月份
	Month *string `json:"month,omitempty" xml:"month,omitempty" require:"true"`
}

func (s GetAppportraitMonthusabilityRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAppportraitMonthusabilityRequest) GoString() string {
	return s.String()
}

func (s *GetAppportraitMonthusabilityRequest) SetAuthToken(v string) *GetAppportraitMonthusabilityRequest {
	s.AuthToken = &v
	return s
}

func (s *GetAppportraitMonthusabilityRequest) SetWorkspaceName(v string) *GetAppportraitMonthusabilityRequest {
	s.WorkspaceName = &v
	return s
}

func (s *GetAppportraitMonthusabilityRequest) SetTenantId(v string) *GetAppportraitMonthusabilityRequest {
	s.TenantId = &v
	return s
}

func (s *GetAppportraitMonthusabilityRequest) SetTenantName(v string) *GetAppportraitMonthusabilityRequest {
	s.TenantName = &v
	return s
}

func (s *GetAppportraitMonthusabilityRequest) SetAppName(v string) *GetAppportraitMonthusabilityRequest {
	s.AppName = &v
	return s
}

func (s *GetAppportraitMonthusabilityRequest) SetMonth(v string) *GetAppportraitMonthusabilityRequest {
	s.Month = &v
	return s
}

type GetAppportraitMonthusabilityResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回数据
	Data *AppPortraitAppUsability `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetAppportraitMonthusabilityResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAppportraitMonthusabilityResponse) GoString() string {
	return s.String()
}

func (s *GetAppportraitMonthusabilityResponse) SetReqMsgId(v string) *GetAppportraitMonthusabilityResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAppportraitMonthusabilityResponse) SetResultCode(v string) *GetAppportraitMonthusabilityResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAppportraitMonthusabilityResponse) SetResultMsg(v string) *GetAppportraitMonthusabilityResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAppportraitMonthusabilityResponse) SetData(v *AppPortraitAppUsability) *GetAppportraitMonthusabilityResponse {
	s.Data = v
	return s
}

type QueryAppportraitUsabilitytrendRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// tenant_id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 查询开始时间utc毫秒
	StartTimestamp *int64 `json:"start_timestamp,omitempty" xml:"start_timestamp,omitempty" require:"true"`
	// 查询结束时间utc毫秒
	EndTimestamp *int64 `json:"end_timestamp,omitempty" xml:"end_timestamp,omitempty" require:"true"`
}

func (s QueryAppportraitUsabilitytrendRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppportraitUsabilitytrendRequest) GoString() string {
	return s.String()
}

func (s *QueryAppportraitUsabilitytrendRequest) SetAuthToken(v string) *QueryAppportraitUsabilitytrendRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppportraitUsabilitytrendRequest) SetWorkspaceName(v string) *QueryAppportraitUsabilitytrendRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryAppportraitUsabilitytrendRequest) SetTenantName(v string) *QueryAppportraitUsabilitytrendRequest {
	s.TenantName = &v
	return s
}

func (s *QueryAppportraitUsabilitytrendRequest) SetTenantId(v string) *QueryAppportraitUsabilitytrendRequest {
	s.TenantId = &v
	return s
}

func (s *QueryAppportraitUsabilitytrendRequest) SetAppName(v string) *QueryAppportraitUsabilitytrendRequest {
	s.AppName = &v
	return s
}

func (s *QueryAppportraitUsabilitytrendRequest) SetStartTimestamp(v int64) *QueryAppportraitUsabilitytrendRequest {
	s.StartTimestamp = &v
	return s
}

func (s *QueryAppportraitUsabilitytrendRequest) SetEndTimestamp(v int64) *QueryAppportraitUsabilitytrendRequest {
	s.EndTimestamp = &v
	return s
}

type QueryAppportraitUsabilitytrendResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用可用性趋势列表
	Data []*AppPortraitAppUsabilityTrendQuery `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryAppportraitUsabilitytrendResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppportraitUsabilitytrendResponse) GoString() string {
	return s.String()
}

func (s *QueryAppportraitUsabilitytrendResponse) SetReqMsgId(v string) *QueryAppportraitUsabilitytrendResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppportraitUsabilitytrendResponse) SetResultCode(v string) *QueryAppportraitUsabilitytrendResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppportraitUsabilitytrendResponse) SetResultMsg(v string) *QueryAppportraitUsabilitytrendResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppportraitUsabilitytrendResponse) SetData(v []*AppPortraitAppUsabilityTrendQuery) *QueryAppportraitUsabilitytrendResponse {
	s.Data = v
	return s
}

type QueryAppportraitHealthscoreRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// tenant_id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 查询开始时间
	StartTimestamp *int64 `json:"start_timestamp,omitempty" xml:"start_timestamp,omitempty" require:"true"`
	// 查询结束时间
	EndTimestamp *int64 `json:"end_timestamp,omitempty" xml:"end_timestamp,omitempty" require:"true"`
}

func (s QueryAppportraitHealthscoreRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppportraitHealthscoreRequest) GoString() string {
	return s.String()
}

func (s *QueryAppportraitHealthscoreRequest) SetAuthToken(v string) *QueryAppportraitHealthscoreRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppportraitHealthscoreRequest) SetWorkspaceName(v string) *QueryAppportraitHealthscoreRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryAppportraitHealthscoreRequest) SetTenantName(v string) *QueryAppportraitHealthscoreRequest {
	s.TenantName = &v
	return s
}

func (s *QueryAppportraitHealthscoreRequest) SetTenantId(v string) *QueryAppportraitHealthscoreRequest {
	s.TenantId = &v
	return s
}

func (s *QueryAppportraitHealthscoreRequest) SetAppName(v string) *QueryAppportraitHealthscoreRequest {
	s.AppName = &v
	return s
}

func (s *QueryAppportraitHealthscoreRequest) SetStartTimestamp(v int64) *QueryAppportraitHealthscoreRequest {
	s.StartTimestamp = &v
	return s
}

func (s *QueryAppportraitHealthscoreRequest) SetEndTimestamp(v int64) *QueryAppportraitHealthscoreRequest {
	s.EndTimestamp = &v
	return s
}

type QueryAppportraitHealthscoreResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用健康分查询结果
	Data *AppPortraitAppHealthScoreQuery `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryAppportraitHealthscoreResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppportraitHealthscoreResponse) GoString() string {
	return s.String()
}

func (s *QueryAppportraitHealthscoreResponse) SetReqMsgId(v string) *QueryAppportraitHealthscoreResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppportraitHealthscoreResponse) SetResultCode(v string) *QueryAppportraitHealthscoreResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppportraitHealthscoreResponse) SetResultMsg(v string) *QueryAppportraitHealthscoreResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppportraitHealthscoreResponse) SetData(v *AppPortraitAppHealthScoreQuery) *QueryAppportraitHealthscoreResponse {
	s.Data = v
	return s
}

type QueryAppportraitHealthscoretrendRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// tenant_id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// 租户名称
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// 应用name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 查询开始时间
	StartTimestamp *int64 `json:"start_timestamp,omitempty" xml:"start_timestamp,omitempty" require:"true"`
	// 查询结束时间
	EndTimestamp *int64 `json:"end_timestamp,omitempty" xml:"end_timestamp,omitempty" require:"true"`
}

func (s QueryAppportraitHealthscoretrendRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppportraitHealthscoretrendRequest) GoString() string {
	return s.String()
}

func (s *QueryAppportraitHealthscoretrendRequest) SetAuthToken(v string) *QueryAppportraitHealthscoretrendRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppportraitHealthscoretrendRequest) SetWorkspaceName(v string) *QueryAppportraitHealthscoretrendRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryAppportraitHealthscoretrendRequest) SetTenantId(v string) *QueryAppportraitHealthscoretrendRequest {
	s.TenantId = &v
	return s
}

func (s *QueryAppportraitHealthscoretrendRequest) SetTenantName(v string) *QueryAppportraitHealthscoretrendRequest {
	s.TenantName = &v
	return s
}

func (s *QueryAppportraitHealthscoretrendRequest) SetAppName(v string) *QueryAppportraitHealthscoretrendRequest {
	s.AppName = &v
	return s
}

func (s *QueryAppportraitHealthscoretrendRequest) SetStartTimestamp(v int64) *QueryAppportraitHealthscoretrendRequest {
	s.StartTimestamp = &v
	return s
}

func (s *QueryAppportraitHealthscoretrendRequest) SetEndTimestamp(v int64) *QueryAppportraitHealthscoretrendRequest {
	s.EndTimestamp = &v
	return s
}

type QueryAppportraitHealthscoretrendResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用画像健康分趋势
	Data []*AppPortraitAppHealthScoreTrendQuery `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryAppportraitHealthscoretrendResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppportraitHealthscoretrendResponse) GoString() string {
	return s.String()
}

func (s *QueryAppportraitHealthscoretrendResponse) SetReqMsgId(v string) *QueryAppportraitHealthscoretrendResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppportraitHealthscoretrendResponse) SetResultCode(v string) *QueryAppportraitHealthscoretrendResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppportraitHealthscoretrendResponse) SetResultMsg(v string) *QueryAppportraitHealthscoretrendResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppportraitHealthscoretrendResponse) SetData(v []*AppPortraitAppHealthScoreTrendQuery) *QueryAppportraitHealthscoretrendResponse {
	s.Data = v
	return s
}

type QueryAppportraitAlertcounttrendRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// tenant_id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 查询开始时间,utc毫秒
	StartTimestamp *int64 `json:"start_timestamp,omitempty" xml:"start_timestamp,omitempty" require:"true"`
	// 查询结束时间，utc毫秒
	EndTimestamp *int64 `json:"end_timestamp,omitempty" xml:"end_timestamp,omitempty" require:"true"`
}

func (s QueryAppportraitAlertcounttrendRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppportraitAlertcounttrendRequest) GoString() string {
	return s.String()
}

func (s *QueryAppportraitAlertcounttrendRequest) SetAuthToken(v string) *QueryAppportraitAlertcounttrendRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppportraitAlertcounttrendRequest) SetWorkspaceName(v string) *QueryAppportraitAlertcounttrendRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryAppportraitAlertcounttrendRequest) SetTenantId(v string) *QueryAppportraitAlertcounttrendRequest {
	s.TenantId = &v
	return s
}

func (s *QueryAppportraitAlertcounttrendRequest) SetTenantName(v string) *QueryAppportraitAlertcounttrendRequest {
	s.TenantName = &v
	return s
}

func (s *QueryAppportraitAlertcounttrendRequest) SetAppName(v string) *QueryAppportraitAlertcounttrendRequest {
	s.AppName = &v
	return s
}

func (s *QueryAppportraitAlertcounttrendRequest) SetStartTimestamp(v int64) *QueryAppportraitAlertcounttrendRequest {
	s.StartTimestamp = &v
	return s
}

func (s *QueryAppportraitAlertcounttrendRequest) SetEndTimestamp(v int64) *QueryAppportraitAlertcounttrendRequest {
	s.EndTimestamp = &v
	return s
}

type QueryAppportraitAlertcounttrendResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用画像告警数趋势
	Data []*AppPortraitAlertCountTrend `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryAppportraitAlertcounttrendResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppportraitAlertcounttrendResponse) GoString() string {
	return s.String()
}

func (s *QueryAppportraitAlertcounttrendResponse) SetReqMsgId(v string) *QueryAppportraitAlertcounttrendResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppportraitAlertcounttrendResponse) SetResultCode(v string) *QueryAppportraitAlertcounttrendResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppportraitAlertcounttrendResponse) SetResultMsg(v string) *QueryAppportraitAlertcounttrendResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppportraitAlertcounttrendResponse) SetData(v []*AppPortraitAlertCountTrend) *QueryAppportraitAlertcounttrendResponse {
	s.Data = v
	return s
}

type ListAppportraitAlertRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// eco0sh0prod
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// tenant_id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 查询开始时间，utc毫秒
	StartTimestamp *int64 `json:"start_timestamp,omitempty" xml:"start_timestamp,omitempty" require:"true"`
	// 查询结束时间，utc毫秒
	EndTimestamp *int64 `json:"end_timestamp,omitempty" xml:"end_timestamp,omitempty" require:"true"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 当前页码，从1开始
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
}

func (s ListAppportraitAlertRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAppportraitAlertRequest) GoString() string {
	return s.String()
}

func (s *ListAppportraitAlertRequest) SetAuthToken(v string) *ListAppportraitAlertRequest {
	s.AuthToken = &v
	return s
}

func (s *ListAppportraitAlertRequest) SetWorkspaceName(v string) *ListAppportraitAlertRequest {
	s.WorkspaceName = &v
	return s
}

func (s *ListAppportraitAlertRequest) SetTenantId(v string) *ListAppportraitAlertRequest {
	s.TenantId = &v
	return s
}

func (s *ListAppportraitAlertRequest) SetTenantName(v string) *ListAppportraitAlertRequest {
	s.TenantName = &v
	return s
}

func (s *ListAppportraitAlertRequest) SetAppName(v string) *ListAppportraitAlertRequest {
	s.AppName = &v
	return s
}

func (s *ListAppportraitAlertRequest) SetStartTimestamp(v int64) *ListAppportraitAlertRequest {
	s.StartTimestamp = &v
	return s
}

func (s *ListAppportraitAlertRequest) SetEndTimestamp(v int64) *ListAppportraitAlertRequest {
	s.EndTimestamp = &v
	return s
}

func (s *ListAppportraitAlertRequest) SetPageSize(v int64) *ListAppportraitAlertRequest {
	s.PageSize = &v
	return s
}

func (s *ListAppportraitAlertRequest) SetPageNum(v int64) *ListAppportraitAlertRequest {
	s.PageNum = &v
	return s
}

type ListAppportraitAlertResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回数据
	Data []*AppPortraitAlertList `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 当前页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 总数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListAppportraitAlertResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAppportraitAlertResponse) GoString() string {
	return s.String()
}

func (s *ListAppportraitAlertResponse) SetReqMsgId(v string) *ListAppportraitAlertResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListAppportraitAlertResponse) SetResultCode(v string) *ListAppportraitAlertResponse {
	s.ResultCode = &v
	return s
}

func (s *ListAppportraitAlertResponse) SetResultMsg(v string) *ListAppportraitAlertResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListAppportraitAlertResponse) SetData(v []*AppPortraitAlertList) *ListAppportraitAlertResponse {
	s.Data = v
	return s
}

func (s *ListAppportraitAlertResponse) SetPageNum(v int64) *ListAppportraitAlertResponse {
	s.PageNum = &v
	return s
}

func (s *ListAppportraitAlertResponse) SetPageSize(v int64) *ListAppportraitAlertResponse {
	s.PageSize = &v
	return s
}

func (s *ListAppportraitAlertResponse) SetTotal(v int64) *ListAppportraitAlertResponse {
	s.Total = &v
	return s
}

type GetAppportraitEcsusageRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// tenant_id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 查询开始时间 utc毫秒
	StartTimestamp *int64 `json:"start_timestamp,omitempty" xml:"start_timestamp,omitempty" require:"true"`
	// 查询结束时间utc毫秒
	EndTimestamp *int64 `json:"end_timestamp,omitempty" xml:"end_timestamp,omitempty" require:"true"`
}

func (s GetAppportraitEcsusageRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAppportraitEcsusageRequest) GoString() string {
	return s.String()
}

func (s *GetAppportraitEcsusageRequest) SetAuthToken(v string) *GetAppportraitEcsusageRequest {
	s.AuthToken = &v
	return s
}

func (s *GetAppportraitEcsusageRequest) SetWorkspaceName(v string) *GetAppportraitEcsusageRequest {
	s.WorkspaceName = &v
	return s
}

func (s *GetAppportraitEcsusageRequest) SetTenantId(v string) *GetAppportraitEcsusageRequest {
	s.TenantId = &v
	return s
}

func (s *GetAppportraitEcsusageRequest) SetTenantName(v string) *GetAppportraitEcsusageRequest {
	s.TenantName = &v
	return s
}

func (s *GetAppportraitEcsusageRequest) SetAppName(v string) *GetAppportraitEcsusageRequest {
	s.AppName = &v
	return s
}

func (s *GetAppportraitEcsusageRequest) SetStartTimestamp(v int64) *GetAppportraitEcsusageRequest {
	s.StartTimestamp = &v
	return s
}

func (s *GetAppportraitEcsusageRequest) SetEndTimestamp(v int64) *GetAppportraitEcsusageRequest {
	s.EndTimestamp = &v
	return s
}

type GetAppportraitEcsusageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回数据
	Data *AppPortraitEcsUsageGet `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetAppportraitEcsusageResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAppportraitEcsusageResponse) GoString() string {
	return s.String()
}

func (s *GetAppportraitEcsusageResponse) SetReqMsgId(v string) *GetAppportraitEcsusageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetAppportraitEcsusageResponse) SetResultCode(v string) *GetAppportraitEcsusageResponse {
	s.ResultCode = &v
	return s
}

func (s *GetAppportraitEcsusageResponse) SetResultMsg(v string) *GetAppportraitEcsusageResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetAppportraitEcsusageResponse) SetData(v *AppPortraitEcsUsageGet) *GetAppportraitEcsusageResponse {
	s.Data = v
	return s
}

type QueryAppportraitContainerusageRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// tenant_id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 查询开始时间utc毫秒
	StartTimestamp *int64 `json:"start_timestamp,omitempty" xml:"start_timestamp,omitempty" require:"true"`
	// 查询结束时间 utc毫秒
	EndTimestamp *int64 `json:"end_timestamp,omitempty" xml:"end_timestamp,omitempty" require:"true"`
}

func (s QueryAppportraitContainerusageRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppportraitContainerusageRequest) GoString() string {
	return s.String()
}

func (s *QueryAppportraitContainerusageRequest) SetAuthToken(v string) *QueryAppportraitContainerusageRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryAppportraitContainerusageRequest) SetWorkspaceName(v string) *QueryAppportraitContainerusageRequest {
	s.WorkspaceName = &v
	return s
}

func (s *QueryAppportraitContainerusageRequest) SetTenantId(v string) *QueryAppportraitContainerusageRequest {
	s.TenantId = &v
	return s
}

func (s *QueryAppportraitContainerusageRequest) SetTenantName(v string) *QueryAppportraitContainerusageRequest {
	s.TenantName = &v
	return s
}

func (s *QueryAppportraitContainerusageRequest) SetAppName(v string) *QueryAppportraitContainerusageRequest {
	s.AppName = &v
	return s
}

func (s *QueryAppportraitContainerusageRequest) SetStartTimestamp(v int64) *QueryAppportraitContainerusageRequest {
	s.StartTimestamp = &v
	return s
}

func (s *QueryAppportraitContainerusageRequest) SetEndTimestamp(v int64) *QueryAppportraitContainerusageRequest {
	s.EndTimestamp = &v
	return s
}

type QueryAppportraitContainerusageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回数据
	Data []*AppPortraitContainerUsageList `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryAppportraitContainerusageResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppportraitContainerusageResponse) GoString() string {
	return s.String()
}

func (s *QueryAppportraitContainerusageResponse) SetReqMsgId(v string) *QueryAppportraitContainerusageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryAppportraitContainerusageResponse) SetResultCode(v string) *QueryAppportraitContainerusageResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryAppportraitContainerusageResponse) SetResultMsg(v string) *QueryAppportraitContainerusageResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryAppportraitContainerusageResponse) SetData(v []*AppPortraitContainerUsageList) *QueryAppportraitContainerusageResponse {
	s.Data = v
	return s
}

type ListAppportraitActiontrailRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// tenant_id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 查询开始时间，毫秒
	StartTimestamp *int64 `json:"start_timestamp,omitempty" xml:"start_timestamp,omitempty" require:"true"`
	// 查询结束时间，毫秒
	EndTimestamp *int64 `json:"end_timestamp,omitempty" xml:"end_timestamp,omitempty" require:"true"`
	// 分页大小，默认为10，默
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 当前页码，从1开始
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true"`
}

func (s ListAppportraitActiontrailRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAppportraitActiontrailRequest) GoString() string {
	return s.String()
}

func (s *ListAppportraitActiontrailRequest) SetAuthToken(v string) *ListAppportraitActiontrailRequest {
	s.AuthToken = &v
	return s
}

func (s *ListAppportraitActiontrailRequest) SetWorkspaceName(v string) *ListAppportraitActiontrailRequest {
	s.WorkspaceName = &v
	return s
}

func (s *ListAppportraitActiontrailRequest) SetTenantId(v string) *ListAppportraitActiontrailRequest {
	s.TenantId = &v
	return s
}

func (s *ListAppportraitActiontrailRequest) SetTenantName(v string) *ListAppportraitActiontrailRequest {
	s.TenantName = &v
	return s
}

func (s *ListAppportraitActiontrailRequest) SetAppName(v string) *ListAppportraitActiontrailRequest {
	s.AppName = &v
	return s
}

func (s *ListAppportraitActiontrailRequest) SetStartTimestamp(v int64) *ListAppportraitActiontrailRequest {
	s.StartTimestamp = &v
	return s
}

func (s *ListAppportraitActiontrailRequest) SetEndTimestamp(v int64) *ListAppportraitActiontrailRequest {
	s.EndTimestamp = &v
	return s
}

func (s *ListAppportraitActiontrailRequest) SetPageSize(v int64) *ListAppportraitActiontrailRequest {
	s.PageSize = &v
	return s
}

func (s *ListAppportraitActiontrailRequest) SetPageNum(v int64) *ListAppportraitActiontrailRequest {
	s.PageNum = &v
	return s
}

type ListAppportraitActiontrailResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回数据
	Data []*AppPortraitActionTrailQuery `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 页数
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 每页大小，默认10
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 总数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListAppportraitActiontrailResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAppportraitActiontrailResponse) GoString() string {
	return s.String()
}

func (s *ListAppportraitActiontrailResponse) SetReqMsgId(v string) *ListAppportraitActiontrailResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListAppportraitActiontrailResponse) SetResultCode(v string) *ListAppportraitActiontrailResponse {
	s.ResultCode = &v
	return s
}

func (s *ListAppportraitActiontrailResponse) SetResultMsg(v string) *ListAppportraitActiontrailResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListAppportraitActiontrailResponse) SetData(v []*AppPortraitActionTrailQuery) *ListAppportraitActiontrailResponse {
	s.Data = v
	return s
}

func (s *ListAppportraitActiontrailResponse) SetPageNum(v int64) *ListAppportraitActiontrailResponse {
	s.PageNum = &v
	return s
}

func (s *ListAppportraitActiontrailResponse) SetPageSize(v int64) *ListAppportraitActiontrailResponse {
	s.PageSize = &v
	return s
}

func (s *ListAppportraitActiontrailResponse) SetTotal(v int64) *ListAppportraitActiontrailResponse {
	s.Total = &v
	return s
}

type ListAppportraitNodeRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间名称
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// 应用名
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// tenant_id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s ListAppportraitNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAppportraitNodeRequest) GoString() string {
	return s.String()
}

func (s *ListAppportraitNodeRequest) SetAuthToken(v string) *ListAppportraitNodeRequest {
	s.AuthToken = &v
	return s
}

func (s *ListAppportraitNodeRequest) SetWorkspaceName(v string) *ListAppportraitNodeRequest {
	s.WorkspaceName = &v
	return s
}

func (s *ListAppportraitNodeRequest) SetAppName(v string) *ListAppportraitNodeRequest {
	s.AppName = &v
	return s
}

func (s *ListAppportraitNodeRequest) SetTenantId(v string) *ListAppportraitNodeRequest {
	s.TenantId = &v
	return s
}

func (s *ListAppportraitNodeRequest) SetTenantName(v string) *ListAppportraitNodeRequest {
	s.TenantName = &v
	return s
}

type ListAppportraitNodeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回数据
	Data *AppPortraitAppNodeList `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListAppportraitNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAppportraitNodeResponse) GoString() string {
	return s.String()
}

func (s *ListAppportraitNodeResponse) SetReqMsgId(v string) *ListAppportraitNodeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListAppportraitNodeResponse) SetResultCode(v string) *ListAppportraitNodeResponse {
	s.ResultCode = &v
	return s
}

func (s *ListAppportraitNodeResponse) SetResultMsg(v string) *ListAppportraitNodeResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListAppportraitNodeResponse) SetData(v *AppPortraitAppNodeList) *ListAppportraitNodeResponse {
	s.Data = v
	return s
}

type ListAppportraitAppgroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// tenant_id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// tenant_name
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
}

func (s ListAppportraitAppgroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAppportraitAppgroupRequest) GoString() string {
	return s.String()
}

func (s *ListAppportraitAppgroupRequest) SetAuthToken(v string) *ListAppportraitAppgroupRequest {
	s.AuthToken = &v
	return s
}

func (s *ListAppportraitAppgroupRequest) SetTenantId(v string) *ListAppportraitAppgroupRequest {
	s.TenantId = &v
	return s
}

func (s *ListAppportraitAppgroupRequest) SetTenantName(v string) *ListAppportraitAppgroupRequest {
	s.TenantName = &v
	return s
}

type ListAppportraitAppgroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用分组列表
	Data []*AppPortraitAppGroupList `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListAppportraitAppgroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAppportraitAppgroupResponse) GoString() string {
	return s.String()
}

func (s *ListAppportraitAppgroupResponse) SetReqMsgId(v string) *ListAppportraitAppgroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListAppportraitAppgroupResponse) SetResultCode(v string) *ListAppportraitAppgroupResponse {
	s.ResultCode = &v
	return s
}

func (s *ListAppportraitAppgroupResponse) SetResultMsg(v string) *ListAppportraitAppgroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListAppportraitAppgroupResponse) SetData(v []*AppPortraitAppGroupList) *ListAppportraitAppgroupResponse {
	s.Data = v
	return s
}

type ListAppportraitEcsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// page_number
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
}

func (s ListAppportraitEcsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAppportraitEcsRequest) GoString() string {
	return s.String()
}

func (s *ListAppportraitEcsRequest) SetAuthToken(v string) *ListAppportraitEcsRequest {
	s.AuthToken = &v
	return s
}

func (s *ListAppportraitEcsRequest) SetWorkspaceName(v string) *ListAppportraitEcsRequest {
	s.WorkspaceName = &v
	return s
}

func (s *ListAppportraitEcsRequest) SetAppName(v string) *ListAppportraitEcsRequest {
	s.AppName = &v
	return s
}

func (s *ListAppportraitEcsRequest) SetPageSize(v int64) *ListAppportraitEcsRequest {
	s.PageSize = &v
	return s
}

func (s *ListAppportraitEcsRequest) SetPageNumber(v int64) *ListAppportraitEcsRequest {
	s.PageNumber = &v
	return s
}

type ListAppportraitEcsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 1
	Data []*AppPortraitAppNodeEcsList `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 1
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 10
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 100
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListAppportraitEcsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAppportraitEcsResponse) GoString() string {
	return s.String()
}

func (s *ListAppportraitEcsResponse) SetReqMsgId(v string) *ListAppportraitEcsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListAppportraitEcsResponse) SetResultCode(v string) *ListAppportraitEcsResponse {
	s.ResultCode = &v
	return s
}

func (s *ListAppportraitEcsResponse) SetResultMsg(v string) *ListAppportraitEcsResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListAppportraitEcsResponse) SetData(v []*AppPortraitAppNodeEcsList) *ListAppportraitEcsResponse {
	s.Data = v
	return s
}

func (s *ListAppportraitEcsResponse) SetPageNum(v int64) *ListAppportraitEcsResponse {
	s.PageNum = &v
	return s
}

func (s *ListAppportraitEcsResponse) SetPageSize(v int64) *ListAppportraitEcsResponse {
	s.PageSize = &v
	return s
}

func (s *ListAppportraitEcsResponse) SetTotal(v int64) *ListAppportraitEcsResponse {
	s.Total = &v
	return s
}

type ListAppportraitRdsRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// page_num
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
}

func (s ListAppportraitRdsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAppportraitRdsRequest) GoString() string {
	return s.String()
}

func (s *ListAppportraitRdsRequest) SetAuthToken(v string) *ListAppportraitRdsRequest {
	s.AuthToken = &v
	return s
}

func (s *ListAppportraitRdsRequest) SetWorkspaceName(v string) *ListAppportraitRdsRequest {
	s.WorkspaceName = &v
	return s
}

func (s *ListAppportraitRdsRequest) SetAppName(v string) *ListAppportraitRdsRequest {
	s.AppName = &v
	return s
}

func (s *ListAppportraitRdsRequest) SetPageSize(v int64) *ListAppportraitRdsRequest {
	s.PageSize = &v
	return s
}

func (s *ListAppportraitRdsRequest) SetPageNum(v int64) *ListAppportraitRdsRequest {
	s.PageNum = &v
	return s
}

type ListAppportraitRdsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 1
	Data []*AppPortraitAppNodeEcsList `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 1
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 10
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 100
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListAppportraitRdsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAppportraitRdsResponse) GoString() string {
	return s.String()
}

func (s *ListAppportraitRdsResponse) SetReqMsgId(v string) *ListAppportraitRdsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListAppportraitRdsResponse) SetResultCode(v string) *ListAppportraitRdsResponse {
	s.ResultCode = &v
	return s
}

func (s *ListAppportraitRdsResponse) SetResultMsg(v string) *ListAppportraitRdsResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListAppportraitRdsResponse) SetData(v []*AppPortraitAppNodeEcsList) *ListAppportraitRdsResponse {
	s.Data = v
	return s
}

func (s *ListAppportraitRdsResponse) SetPageNum(v int64) *ListAppportraitRdsResponse {
	s.PageNum = &v
	return s
}

func (s *ListAppportraitRdsResponse) SetPageSize(v int64) *ListAppportraitRdsResponse {
	s.PageSize = &v
	return s
}

func (s *ListAppportraitRdsResponse) SetTotal(v int64) *ListAppportraitRdsResponse {
	s.Total = &v
	return s
}

type ListAppportraitSlbRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 1
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 10
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
}

func (s ListAppportraitSlbRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAppportraitSlbRequest) GoString() string {
	return s.String()
}

func (s *ListAppportraitSlbRequest) SetAuthToken(v string) *ListAppportraitSlbRequest {
	s.AuthToken = &v
	return s
}

func (s *ListAppportraitSlbRequest) SetWorkspaceName(v string) *ListAppportraitSlbRequest {
	s.WorkspaceName = &v
	return s
}

func (s *ListAppportraitSlbRequest) SetAppName(v string) *ListAppportraitSlbRequest {
	s.AppName = &v
	return s
}

func (s *ListAppportraitSlbRequest) SetPageSize(v int64) *ListAppportraitSlbRequest {
	s.PageSize = &v
	return s
}

func (s *ListAppportraitSlbRequest) SetPageNum(v int64) *ListAppportraitSlbRequest {
	s.PageNum = &v
	return s
}

type ListAppportraitSlbResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 1
	Data []*AppPortraitAppNodeEcsList `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 1
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 10
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 100
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListAppportraitSlbResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAppportraitSlbResponse) GoString() string {
	return s.String()
}

func (s *ListAppportraitSlbResponse) SetReqMsgId(v string) *ListAppportraitSlbResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListAppportraitSlbResponse) SetResultCode(v string) *ListAppportraitSlbResponse {
	s.ResultCode = &v
	return s
}

func (s *ListAppportraitSlbResponse) SetResultMsg(v string) *ListAppportraitSlbResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListAppportraitSlbResponse) SetData(v []*AppPortraitAppNodeEcsList) *ListAppportraitSlbResponse {
	s.Data = v
	return s
}

func (s *ListAppportraitSlbResponse) SetPageNum(v int64) *ListAppportraitSlbResponse {
	s.PageNum = &v
	return s
}

func (s *ListAppportraitSlbResponse) SetPageSize(v int64) *ListAppportraitSlbResponse {
	s.PageSize = &v
	return s
}

func (s *ListAppportraitSlbResponse) SetTotal(v int64) *ListAppportraitSlbResponse {
	s.Total = &v
	return s
}

type ListAppportraitPodRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_name
	WorkspaceName *string `json:"workspace_name,omitempty" xml:"workspace_name,omitempty" require:"true"`
	// app_name
	AppName *string `json:"app_name,omitempty" xml:"app_name,omitempty" require:"true"`
	// 1
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 10
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
}

func (s ListAppportraitPodRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAppportraitPodRequest) GoString() string {
	return s.String()
}

func (s *ListAppportraitPodRequest) SetAuthToken(v string) *ListAppportraitPodRequest {
	s.AuthToken = &v
	return s
}

func (s *ListAppportraitPodRequest) SetWorkspaceName(v string) *ListAppportraitPodRequest {
	s.WorkspaceName = &v
	return s
}

func (s *ListAppportraitPodRequest) SetAppName(v string) *ListAppportraitPodRequest {
	s.AppName = &v
	return s
}

func (s *ListAppportraitPodRequest) SetPageSize(v int64) *ListAppportraitPodRequest {
	s.PageSize = &v
	return s
}

func (s *ListAppportraitPodRequest) SetPageNum(v int64) *ListAppportraitPodRequest {
	s.PageNum = &v
	return s
}

type ListAppportraitPodResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 1
	Data []*AppPortraitAppNodeEcsList `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 1
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 1
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 200
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListAppportraitPodResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAppportraitPodResponse) GoString() string {
	return s.String()
}

func (s *ListAppportraitPodResponse) SetReqMsgId(v string) *ListAppportraitPodResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListAppportraitPodResponse) SetResultCode(v string) *ListAppportraitPodResponse {
	s.ResultCode = &v
	return s
}

func (s *ListAppportraitPodResponse) SetResultMsg(v string) *ListAppportraitPodResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListAppportraitPodResponse) SetData(v []*AppPortraitAppNodeEcsList) *ListAppportraitPodResponse {
	s.Data = v
	return s
}

func (s *ListAppportraitPodResponse) SetPageNum(v int64) *ListAppportraitPodResponse {
	s.PageNum = &v
	return s
}

func (s *ListAppportraitPodResponse) SetPageSize(v int64) *ListAppportraitPodResponse {
	s.PageSize = &v
	return s
}

func (s *ListAppportraitPodResponse) SetTotal(v int64) *ListAppportraitPodResponse {
	s.Total = &v
	return s
}

type CreateComputerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// app service id
	AppServiceId *string `json:"app_service_id,omitempty" xml:"app_service_id,omitempty"`
	// 是否自动续费
	AutoRenew *bool `json:"auto_renew,omitempty" xml:"auto_renew,omitempty"`
	// 每次自动续费的时长，当参数AutoRenew取值True时为必填取值范围：
	//    1
	//      2
	//      3
	//       6
	//      12
	//
	AutoRenewPeriod *int64 `json:"auto_renew_period,omitempty" xml:"auto_renew_period,omitempty"`
	// cell id
	CellId *string `json:"cell_id,omitempty" xml:"cell_id,omitempty"`
	// 通用镜像文件ID，启动实例时选择的镜像资源。
	//
	CommonImageSequence *string `json:"common_image_sequence,omitempty" xml:"common_image_sequence,omitempty"`
	// AKE模式下可以指定此值
	CpuShared *bool `json:"cpu_shared,omitempty" xml:"cpu_shared,omitempty"`
	// 数据盘信息
	DataDisks []*DataDisk `json:"data_disks,omitempty" xml:"data_disks,omitempty" type:"Repeated"`
	// sigma模式取值，公有云模式下无意义
	DeployMode *string `json:"deploy_mode,omitempty" xml:"deploy_mode,omitempty"`
	// 实例描述
	//
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 是否使用全局唯一名称
	DistinctName *bool `json:"distinct_name,omitempty" xml:"distinct_name,omitempty"`
	// 自定义镜像文件ID，启动实例时选择的镜像资源。
	//
	ImageSequence *string `json:"image_sequence,omitempty" xml:"image_sequence,omitempty"`
	// 计费方式，默认按量计费
	InstanceChargeType *string `json:"instance_charge_type,omitempty" xml:"instance_charge_type,omitempty"`
	// 创建的实例数量。默认为 1 台
	InstanceCount *int64 `json:"instance_count,omitempty" xml:"instance_count,omitempty"`
	// 实例名称前缀。可包含小写字母(a-z)，数字(0-9) 和中划线(-)，以字母开头，中划线不能结尾或连续使用，2 ~ 40 个字符。
	Name *string `json:"name,omitempty" xml:"name,omitempty" maxLength:"40" minLength:"2"`
	// 实例的密码。长度为8至30个字符，必须同时包含大小写英文字母、数字和特殊符号中的三类字符。特殊符号可以是： ()`~!@#^&*-_+=|{}[]:;_<>,.?/ 其中，Windows实例不能以斜线号（/）为密码首字符。
	Password *string `json:"password,omitempty" xml:"password,omitempty" maxLength:"30" minLength:"8"`
	// 购买资源的时长，单位为：月。当参数 InstanceChargeType 取值为 PrePaid 时才生效且为必选值。取值范围：1 - 9
	//      12
	//      24
	//      36
	//      48
	//      60
	//
	Period *int64 `json:"period,omitempty" xml:"period,omitempty"`
	//  购买资源的时长。可选值Week | Month。
	//  PeriodUnit 为 Week 时：
	//  Period 取值 {“1”, “2”, “3”, “4”}
	// AutoRenewPeriod 取值 {“1”, “2”, “3”}
	//  Period 取值 { “1”, “2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”, “12”, “24”, “36”,”48”,”60”}
	//    AutoRenewPeriod 取值 {“1”, “2”, “3”, “6”, “12”}
	//     默认值：Month
	PeriodUnit *string `json:"period_unit,omitempty" xml:"period_unit,omitempty"`
	// 新创建实例所属于的安全组/域序列号，同一个安全组内的实例之间可以互相访问。
	SecurityGroupSequence *string `json:"security_group_sequence,omitempty" xml:"security_group_sequence,omitempty" require:"true"`
	// 实例的资源规格。
	//
	SpecId *string `json:"spec_id,omitempty" xml:"spec_id,omitempty" require:"true"`
	// 单位 G。系统盘大小，需根据选择的 image 类型决定。
	SystemDiskSize *int64 `json:"system_disk_size,omitempty" xml:"system_disk_size,omitempty" require:"true"`
	// 系统盘类型
	//
	SystemDiskType *string `json:"system_disk_type,omitempty" xml:"system_disk_type,omitempty" require:"true"`
	// VPC类型的实例，需要指定虚拟交换机ID。
	VSwitchId *string `json:"v_switch_id,omitempty" xml:"v_switch_id,omitempty"`
	// 实例所在工作空间
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// 实例所在可用区的 zone identity
	Zone *string `json:"zone,omitempty" xml:"zone,omitempty" require:"true"`
	// zone_id如果为空，则zone必填，建议使用zone_id
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty"`
	// 公有云上标签
	Tags []*MapStringToStringEntity `json:"tags,omitempty" xml:"tags,omitempty" type:"Repeated"`
	// cmp模式下使用的vpc，一般场景勿用
	VpcIaasId *string `json:"vpc_iaas_id,omitempty" xml:"vpc_iaas_id,omitempty"`
	// cmp模式下传的token，一般场景勿用
	CloudManageToken *string `json:"cloud_manage_token,omitempty" xml:"cloud_manage_token,omitempty"`
}

func (s CreateComputerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateComputerRequest) GoString() string {
	return s.String()
}

func (s *CreateComputerRequest) SetAuthToken(v string) *CreateComputerRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateComputerRequest) SetAppId(v string) *CreateComputerRequest {
	s.AppId = &v
	return s
}

func (s *CreateComputerRequest) SetAppServiceId(v string) *CreateComputerRequest {
	s.AppServiceId = &v
	return s
}

func (s *CreateComputerRequest) SetAutoRenew(v bool) *CreateComputerRequest {
	s.AutoRenew = &v
	return s
}

func (s *CreateComputerRequest) SetAutoRenewPeriod(v int64) *CreateComputerRequest {
	s.AutoRenewPeriod = &v
	return s
}

func (s *CreateComputerRequest) SetCellId(v string) *CreateComputerRequest {
	s.CellId = &v
	return s
}

func (s *CreateComputerRequest) SetCommonImageSequence(v string) *CreateComputerRequest {
	s.CommonImageSequence = &v
	return s
}

func (s *CreateComputerRequest) SetCpuShared(v bool) *CreateComputerRequest {
	s.CpuShared = &v
	return s
}

func (s *CreateComputerRequest) SetDataDisks(v []*DataDisk) *CreateComputerRequest {
	s.DataDisks = v
	return s
}

func (s *CreateComputerRequest) SetDeployMode(v string) *CreateComputerRequest {
	s.DeployMode = &v
	return s
}

func (s *CreateComputerRequest) SetDescription(v string) *CreateComputerRequest {
	s.Description = &v
	return s
}

func (s *CreateComputerRequest) SetDistinctName(v bool) *CreateComputerRequest {
	s.DistinctName = &v
	return s
}

func (s *CreateComputerRequest) SetImageSequence(v string) *CreateComputerRequest {
	s.ImageSequence = &v
	return s
}

func (s *CreateComputerRequest) SetInstanceChargeType(v string) *CreateComputerRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateComputerRequest) SetInstanceCount(v int64) *CreateComputerRequest {
	s.InstanceCount = &v
	return s
}

func (s *CreateComputerRequest) SetName(v string) *CreateComputerRequest {
	s.Name = &v
	return s
}

func (s *CreateComputerRequest) SetPassword(v string) *CreateComputerRequest {
	s.Password = &v
	return s
}

func (s *CreateComputerRequest) SetPeriod(v int64) *CreateComputerRequest {
	s.Period = &v
	return s
}

func (s *CreateComputerRequest) SetPeriodUnit(v string) *CreateComputerRequest {
	s.PeriodUnit = &v
	return s
}

func (s *CreateComputerRequest) SetSecurityGroupSequence(v string) *CreateComputerRequest {
	s.SecurityGroupSequence = &v
	return s
}

func (s *CreateComputerRequest) SetSpecId(v string) *CreateComputerRequest {
	s.SpecId = &v
	return s
}

func (s *CreateComputerRequest) SetSystemDiskSize(v int64) *CreateComputerRequest {
	s.SystemDiskSize = &v
	return s
}

func (s *CreateComputerRequest) SetSystemDiskType(v string) *CreateComputerRequest {
	s.SystemDiskType = &v
	return s
}

func (s *CreateComputerRequest) SetVSwitchId(v string) *CreateComputerRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateComputerRequest) SetWorkspace(v string) *CreateComputerRequest {
	s.Workspace = &v
	return s
}

func (s *CreateComputerRequest) SetWorkspaceId(v string) *CreateComputerRequest {
	s.WorkspaceId = &v
	return s
}

func (s *CreateComputerRequest) SetZone(v string) *CreateComputerRequest {
	s.Zone = &v
	return s
}

func (s *CreateComputerRequest) SetZoneId(v string) *CreateComputerRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateComputerRequest) SetTags(v []*MapStringToStringEntity) *CreateComputerRequest {
	s.Tags = v
	return s
}

func (s *CreateComputerRequest) SetVpcIaasId(v string) *CreateComputerRequest {
	s.VpcIaasId = &v
	return s
}

func (s *CreateComputerRequest) SetCloudManageToken(v string) *CreateComputerRequest {
	s.CloudManageToken = &v
	return s
}

type CreateComputerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// computer_sequences
	ComputerSequences []*string `json:"computer_sequences,omitempty" xml:"computer_sequences,omitempty" type:"Repeated"`
	// paas_request_id，可以根据这个值查询日志
	PaasRequestId *string `json:"paas_request_id,omitempty" xml:"paas_request_id,omitempty"`
}

func (s CreateComputerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateComputerResponse) GoString() string {
	return s.String()
}

func (s *CreateComputerResponse) SetReqMsgId(v string) *CreateComputerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateComputerResponse) SetResultCode(v string) *CreateComputerResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateComputerResponse) SetResultMsg(v string) *CreateComputerResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateComputerResponse) SetComputerSequences(v []*string) *CreateComputerResponse {
	s.ComputerSequences = v
	return s
}

func (s *CreateComputerResponse) SetPaasRequestId(v string) *CreateComputerResponse {
	s.PaasRequestId = &v
	return s
}

type DeleteComputerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// computer_sequences
	ComputerSequences []*string `json:"computer_sequences,omitempty" xml:"computer_sequences,omitempty" require:"true" type:"Repeated"`
	// 后续这个字段必填
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// 是否强制删除
	Force *bool `json:"force,omitempty" xml:"force,omitempty"`
}

func (s DeleteComputerRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteComputerRequest) GoString() string {
	return s.String()
}

func (s *DeleteComputerRequest) SetAuthToken(v string) *DeleteComputerRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteComputerRequest) SetComputerSequences(v []*string) *DeleteComputerRequest {
	s.ComputerSequences = v
	return s
}

func (s *DeleteComputerRequest) SetWorkspaceId(v string) *DeleteComputerRequest {
	s.WorkspaceId = &v
	return s
}

func (s *DeleteComputerRequest) SetForce(v bool) *DeleteComputerRequest {
	s.Force = &v
	return s
}

type DeleteComputerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// paas_request_id
	PaasRequestId *string `json:"paas_request_id,omitempty" xml:"paas_request_id,omitempty"`
}

func (s DeleteComputerResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteComputerResponse) GoString() string {
	return s.String()
}

func (s *DeleteComputerResponse) SetReqMsgId(v string) *DeleteComputerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteComputerResponse) SetResultCode(v string) *DeleteComputerResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteComputerResponse) SetResultMsg(v string) *DeleteComputerResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteComputerResponse) SetPaasRequestId(v string) *DeleteComputerResponse {
	s.PaasRequestId = &v
	return s
}

type ImportComputerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// computer iaas ids
	ComputerIds []*string `json:"computer_ids,omitempty" xml:"computer_ids,omitempty" require:"true" type:"Repeated"`
	// workspace 名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
	// computer 所在的 zone identity。可不填。
	Zone *string `json:"zone,omitempty" xml:"zone,omitempty"`
}

func (s ImportComputerRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportComputerRequest) GoString() string {
	return s.String()
}

func (s *ImportComputerRequest) SetAuthToken(v string) *ImportComputerRequest {
	s.AuthToken = &v
	return s
}

func (s *ImportComputerRequest) SetComputerIds(v []*string) *ImportComputerRequest {
	s.ComputerIds = v
	return s
}

func (s *ImportComputerRequest) SetWorkspace(v string) *ImportComputerRequest {
	s.Workspace = &v
	return s
}

func (s *ImportComputerRequest) SetZone(v string) *ImportComputerRequest {
	s.Zone = &v
	return s
}

type ImportComputerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 导入的 computer 序列号
	ComputerIdMapping *string `json:"computer_id_mapping,omitempty" xml:"computer_id_mapping,omitempty"`
}

func (s ImportComputerResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportComputerResponse) GoString() string {
	return s.String()
}

func (s *ImportComputerResponse) SetReqMsgId(v string) *ImportComputerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ImportComputerResponse) SetResultCode(v string) *ImportComputerResponse {
	s.ResultCode = &v
	return s
}

func (s *ImportComputerResponse) SetResultMsg(v string) *ImportComputerResponse {
	s.ResultMsg = &v
	return s
}

func (s *ImportComputerResponse) SetComputerIdMapping(v string) *ImportComputerResponse {
	s.ComputerIdMapping = &v
	return s
}

type CreateDatabaseRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 数据库账户
	DatabaseAccounts []*DatabaseAccount `json:"database_accounts,omitempty" xml:"database_accounts,omitempty" type:"Repeated"`
	// db schema
	DatabaseSchema *DatabaseSchema `json:"database_schema,omitempty" xml:"database_schema,omitempty"`
	// db 引擎，默认为在 MYSQL
	Engine *string `json:"engine,omitempty" xml:"engine,omitempty"`
	// 引擎版本，默认为 MYSQL6
	EngineVersion *string `json:"engine_version,omitempty" xml:"engine_version,omitempty"`
	// 创建的实例数量。默认为 1 台
	InstanceCount *int64 `json:"instance_count,omitempty" xml:"instance_count,omitempty"`
	// database 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// db 规格。
	SpecId *string `json:"spec_id,omitempty" xml:"spec_id,omitempty" require:"true"`
	// db 存储空间大小
	StorageSize *int64 `json:"storage_size,omitempty" xml:"storage_size,omitempty" require:"true"`
	// database 类型，默认为 DATABASE 类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// VPC类型的实例，需要指定虚拟交换机ID。
	VSwitchId *string `json:"v_switch_id,omitempty" xml:"v_switch_id,omitempty"`
	// database 所在工作空间
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
	// app service ids
	AppServiceIds []*string `json:"app_service_ids,omitempty" xml:"app_service_ids,omitempty" type:"Repeated"`
	// app ids
	AppIds []*string `json:"app_ids,omitempty" xml:"app_ids,omitempty" type:"Repeated"`
}

func (s CreateDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDatabaseRequest) GoString() string {
	return s.String()
}

func (s *CreateDatabaseRequest) SetAuthToken(v string) *CreateDatabaseRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDatabaseRequest) SetDatabaseAccounts(v []*DatabaseAccount) *CreateDatabaseRequest {
	s.DatabaseAccounts = v
	return s
}

func (s *CreateDatabaseRequest) SetDatabaseSchema(v *DatabaseSchema) *CreateDatabaseRequest {
	s.DatabaseSchema = v
	return s
}

func (s *CreateDatabaseRequest) SetEngine(v string) *CreateDatabaseRequest {
	s.Engine = &v
	return s
}

func (s *CreateDatabaseRequest) SetEngineVersion(v string) *CreateDatabaseRequest {
	s.EngineVersion = &v
	return s
}

func (s *CreateDatabaseRequest) SetInstanceCount(v int64) *CreateDatabaseRequest {
	s.InstanceCount = &v
	return s
}

func (s *CreateDatabaseRequest) SetName(v string) *CreateDatabaseRequest {
	s.Name = &v
	return s
}

func (s *CreateDatabaseRequest) SetSpecId(v string) *CreateDatabaseRequest {
	s.SpecId = &v
	return s
}

func (s *CreateDatabaseRequest) SetStorageSize(v int64) *CreateDatabaseRequest {
	s.StorageSize = &v
	return s
}

func (s *CreateDatabaseRequest) SetType(v string) *CreateDatabaseRequest {
	s.Type = &v
	return s
}

func (s *CreateDatabaseRequest) SetVSwitchId(v string) *CreateDatabaseRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateDatabaseRequest) SetWorkspace(v string) *CreateDatabaseRequest {
	s.Workspace = &v
	return s
}

func (s *CreateDatabaseRequest) SetAppServiceIds(v []*string) *CreateDatabaseRequest {
	s.AppServiceIds = v
	return s
}

func (s *CreateDatabaseRequest) SetAppIds(v []*string) *CreateDatabaseRequest {
	s.AppIds = v
	return s
}

type CreateDatabaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// database 实例 ids
	DatabaseSequences []*string `json:"database_sequences,omitempty" xml:"database_sequences,omitempty" type:"Repeated"`
}

func (s CreateDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDatabaseResponse) GoString() string {
	return s.String()
}

func (s *CreateDatabaseResponse) SetReqMsgId(v string) *CreateDatabaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDatabaseResponse) SetResultCode(v string) *CreateDatabaseResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDatabaseResponse) SetResultMsg(v string) *CreateDatabaseResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDatabaseResponse) SetDatabaseSequences(v []*string) *CreateDatabaseResponse {
	s.DatabaseSequences = v
	return s
}

type ImportDatabaseRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// database iaas ids
	DatabaseIds []*string `json:"database_ids,omitempty" xml:"database_ids,omitempty" require:"true" type:"Repeated"`
	// database 类型，默认为 DATABASE 类型
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// 工作空间
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s ImportDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportDatabaseRequest) GoString() string {
	return s.String()
}

func (s *ImportDatabaseRequest) SetAuthToken(v string) *ImportDatabaseRequest {
	s.AuthToken = &v
	return s
}

func (s *ImportDatabaseRequest) SetDatabaseIds(v []*string) *ImportDatabaseRequest {
	s.DatabaseIds = v
	return s
}

func (s *ImportDatabaseRequest) SetType(v string) *ImportDatabaseRequest {
	s.Type = &v
	return s
}

func (s *ImportDatabaseRequest) SetWorkspace(v string) *ImportDatabaseRequest {
	s.Workspace = &v
	return s
}

type ImportDatabaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 导入的 computer 序列号
	DatabaseIdMapping *string `json:"database_id_mapping,omitempty" xml:"database_id_mapping,omitempty"`
}

func (s ImportDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportDatabaseResponse) GoString() string {
	return s.String()
}

func (s *ImportDatabaseResponse) SetReqMsgId(v string) *ImportDatabaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ImportDatabaseResponse) SetResultCode(v string) *ImportDatabaseResponse {
	s.ResultCode = &v
	return s
}

func (s *ImportDatabaseResponse) SetResultMsg(v string) *ImportDatabaseResponse {
	s.ResultMsg = &v
	return s
}

func (s *ImportDatabaseResponse) SetDatabaseIdMapping(v string) *ImportDatabaseResponse {
	s.DatabaseIdMapping = &v
	return s
}

type DeleteDatabaseRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// database 序列号
	DatabaseSequences []*string `json:"database_sequences,omitempty" xml:"database_sequences,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatabaseRequest) GoString() string {
	return s.String()
}

func (s *DeleteDatabaseRequest) SetAuthToken(v string) *DeleteDatabaseRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteDatabaseRequest) SetDatabaseSequences(v []*string) *DeleteDatabaseRequest {
	s.DatabaseSequences = v
	return s
}

type DeleteDatabaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatabaseResponse) GoString() string {
	return s.String()
}

func (s *DeleteDatabaseResponse) SetReqMsgId(v string) *DeleteDatabaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteDatabaseResponse) SetResultCode(v string) *DeleteDatabaseResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteDatabaseResponse) SetResultMsg(v string) *DeleteDatabaseResponse {
	s.ResultMsg = &v
	return s
}

type CreateLoadbalanceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 负载均衡实例的网络类型。有 INTERNET 和 INTRANET
	AddressType *string `json:"address_type,omitempty" xml:"address_type,omitempty"`
	// app id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// app service id
	AppServiceId *string `json:"app_service_id,omitempty" xml:"app_service_id,omitempty"`
	// cluster_mode
	ClusterMode *bool `json:"cluster_mode,omitempty" xml:"cluster_mode,omitempty"`
	//
	// 创建的实例数量。默认为 1 台
	InstanceCount *int64 `json:"instance_count,omitempty" xml:"instance_count,omitempty"`
	// 公网类型实例的付费方式。取值：
	// PAY_BY_BANDWIDTH：按带宽计费。
	// PAY_BY_TRAFFIC：按流量计费（默认值）。
	InternetChargeType *string `json:"internet_charge_type,omitempty" xml:"internet_charge_type,omitempty"`
	// listener JSON Array
	Listeners []*string `json:"listeners,omitempty" xml:"listeners,omitempty" type:"Repeated"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 共享模式
	ShareMode *bool `json:"share_mode,omitempty" xml:"share_mode,omitempty" require:"true"`
	// ALB模式专用
	VipType *string `json:"vip_type,omitempty" xml:"vip_type,omitempty"`
	// VPC类型的实例，需要指定虚拟交换机ID。
	VSwitchId *string `json:"v_switch_id,omitempty" xml:"v_switch_id,omitempty"`
	// 工作空间
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// 可用区
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty"`
	// 负载均衡实例的规格。取值：
	//
	// slb.s1.small
	// slb.s2.small
	// slb.s2.medium
	// slb.s3.small
	// slb.s3.medium
	// slb.s3.large
	// 每个地域支持的规格不同。
	//
	// 目前支持性能保障型实例的地域有：华北 1（青岛）、华北 2（北京）、华东 1（杭州）、华东 2（上海）、华南 1（深圳）、华北 3（张家口）、华北 5 （呼和浩特）、亚太东南 1（新加坡）、英国（伦敦）、欧洲中部 1（法兰克福）、亚太东南 2（悉尼）、亚太东南 3（吉隆坡）、中东东部 1（迪拜）、亚太东南 5（雅加达）、美西 1（硅谷）、亚太南部 1（孟买）、亚太东北 1（东京）、中国香港和美东 1（弗吉尼亚）
	LoadBalancerSpec *string `json:"load_balancer_spec,omitempty" xml:"load_balancer_spec,omitempty"`
}

func (s CreateLoadbalanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadbalanceRequest) GoString() string {
	return s.String()
}

func (s *CreateLoadbalanceRequest) SetAuthToken(v string) *CreateLoadbalanceRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLoadbalanceRequest) SetAddressType(v string) *CreateLoadbalanceRequest {
	s.AddressType = &v
	return s
}

func (s *CreateLoadbalanceRequest) SetAppId(v string) *CreateLoadbalanceRequest {
	s.AppId = &v
	return s
}

func (s *CreateLoadbalanceRequest) SetAppServiceId(v string) *CreateLoadbalanceRequest {
	s.AppServiceId = &v
	return s
}

func (s *CreateLoadbalanceRequest) SetClusterMode(v bool) *CreateLoadbalanceRequest {
	s.ClusterMode = &v
	return s
}

func (s *CreateLoadbalanceRequest) SetInstanceCount(v int64) *CreateLoadbalanceRequest {
	s.InstanceCount = &v
	return s
}

func (s *CreateLoadbalanceRequest) SetInternetChargeType(v string) *CreateLoadbalanceRequest {
	s.InternetChargeType = &v
	return s
}

func (s *CreateLoadbalanceRequest) SetListeners(v []*string) *CreateLoadbalanceRequest {
	s.Listeners = v
	return s
}

func (s *CreateLoadbalanceRequest) SetName(v string) *CreateLoadbalanceRequest {
	s.Name = &v
	return s
}

func (s *CreateLoadbalanceRequest) SetShareMode(v bool) *CreateLoadbalanceRequest {
	s.ShareMode = &v
	return s
}

func (s *CreateLoadbalanceRequest) SetVipType(v string) *CreateLoadbalanceRequest {
	s.VipType = &v
	return s
}

func (s *CreateLoadbalanceRequest) SetVSwitchId(v string) *CreateLoadbalanceRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateLoadbalanceRequest) SetWorkspace(v string) *CreateLoadbalanceRequest {
	s.Workspace = &v
	return s
}

func (s *CreateLoadbalanceRequest) SetWorkspaceId(v string) *CreateLoadbalanceRequest {
	s.WorkspaceId = &v
	return s
}

func (s *CreateLoadbalanceRequest) SetZoneId(v string) *CreateLoadbalanceRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateLoadbalanceRequest) SetLoadBalancerSpec(v string) *CreateLoadbalanceRequest {
	s.LoadBalancerSpec = &v
	return s
}

type CreateLoadbalanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 实例 id
	LoadbalanceSequences []*string `json:"loadbalance_sequences,omitempty" xml:"loadbalance_sequences,omitempty" type:"Repeated"`
	// paas_request_id
	PaasRequestId *string `json:"paas_request_id,omitempty" xml:"paas_request_id,omitempty"`
}

func (s CreateLoadbalanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadbalanceResponse) GoString() string {
	return s.String()
}

func (s *CreateLoadbalanceResponse) SetReqMsgId(v string) *CreateLoadbalanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLoadbalanceResponse) SetResultCode(v string) *CreateLoadbalanceResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLoadbalanceResponse) SetResultMsg(v string) *CreateLoadbalanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLoadbalanceResponse) SetLoadbalanceSequences(v []*string) *CreateLoadbalanceResponse {
	s.LoadbalanceSequences = v
	return s
}

func (s *CreateLoadbalanceResponse) SetPaasRequestId(v string) *CreateLoadbalanceResponse {
	s.PaasRequestId = &v
	return s
}

type DeleteLoadbalanceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// loadbalance 序列号
	LoadbalanceSequences []*string `json:"loadbalance_sequences,omitempty" xml:"loadbalance_sequences,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteLoadbalanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLoadbalanceRequest) GoString() string {
	return s.String()
}

func (s *DeleteLoadbalanceRequest) SetAuthToken(v string) *DeleteLoadbalanceRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteLoadbalanceRequest) SetLoadbalanceSequences(v []*string) *DeleteLoadbalanceRequest {
	s.LoadbalanceSequences = v
	return s
}

type DeleteLoadbalanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// paas_request_id
	PaasRequestId *string `json:"paas_request_id,omitempty" xml:"paas_request_id,omitempty"`
}

func (s DeleteLoadbalanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLoadbalanceResponse) GoString() string {
	return s.String()
}

func (s *DeleteLoadbalanceResponse) SetReqMsgId(v string) *DeleteLoadbalanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteLoadbalanceResponse) SetResultCode(v string) *DeleteLoadbalanceResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteLoadbalanceResponse) SetResultMsg(v string) *DeleteLoadbalanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteLoadbalanceResponse) SetPaasRequestId(v string) *DeleteLoadbalanceResponse {
	s.PaasRequestId = &v
	return s
}

type ImportLoadbalanceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// loadbalance iaas ids
	LoadbalanceIds []*string `json:"loadbalance_ids,omitempty" xml:"loadbalance_ids,omitempty" require:"true" type:"Repeated"`
	// 工作空间
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s ImportLoadbalanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportLoadbalanceRequest) GoString() string {
	return s.String()
}

func (s *ImportLoadbalanceRequest) SetAuthToken(v string) *ImportLoadbalanceRequest {
	s.AuthToken = &v
	return s
}

func (s *ImportLoadbalanceRequest) SetLoadbalanceIds(v []*string) *ImportLoadbalanceRequest {
	s.LoadbalanceIds = v
	return s
}

func (s *ImportLoadbalanceRequest) SetWorkspace(v string) *ImportLoadbalanceRequest {
	s.Workspace = &v
	return s
}

type ImportLoadbalanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 导入的 loadbalance 序列号
	LoadbalanceIdMapping *string `json:"loadbalance_id_mapping,omitempty" xml:"loadbalance_id_mapping,omitempty"`
	// paas_request_id
	PaasRequestId *string `json:"paas_request_id,omitempty" xml:"paas_request_id,omitempty"`
}

func (s ImportLoadbalanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportLoadbalanceResponse) GoString() string {
	return s.String()
}

func (s *ImportLoadbalanceResponse) SetReqMsgId(v string) *ImportLoadbalanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ImportLoadbalanceResponse) SetResultCode(v string) *ImportLoadbalanceResponse {
	s.ResultCode = &v
	return s
}

func (s *ImportLoadbalanceResponse) SetResultMsg(v string) *ImportLoadbalanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *ImportLoadbalanceResponse) SetLoadbalanceIdMapping(v string) *ImportLoadbalanceResponse {
	s.LoadbalanceIdMapping = &v
	return s
}

func (s *ImportLoadbalanceResponse) SetPaasRequestId(v string) *ImportLoadbalanceResponse {
	s.PaasRequestId = &v
	return s
}

type CreateVpcRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 专有网络网段
	CidrLock *string `json:"cidr_lock,omitempty" xml:"cidr_lock,omitempty" require:"true"`
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 工作空间
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s CreateVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVpcRequest) GoString() string {
	return s.String()
}

func (s *CreateVpcRequest) SetAuthToken(v string) *CreateVpcRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateVpcRequest) SetCidrLock(v string) *CreateVpcRequest {
	s.CidrLock = &v
	return s
}

func (s *CreateVpcRequest) SetName(v string) *CreateVpcRequest {
	s.Name = &v
	return s
}

func (s *CreateVpcRequest) SetWorkspace(v string) *CreateVpcRequest {
	s.Workspace = &v
	return s
}

type CreateVpcResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 专有网络序列号
	VpcSequence *string `json:"vpc_sequence,omitempty" xml:"vpc_sequence,omitempty"`
}

func (s CreateVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVpcResponse) GoString() string {
	return s.String()
}

func (s *CreateVpcResponse) SetReqMsgId(v string) *CreateVpcResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateVpcResponse) SetResultCode(v string) *CreateVpcResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateVpcResponse) SetResultMsg(v string) *CreateVpcResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateVpcResponse) SetVpcSequence(v string) *CreateVpcResponse {
	s.VpcSequence = &v
	return s
}

type DeleteVpcRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 专有网络序列号
	VpcSequence *string `json:"vpc_sequence,omitempty" xml:"vpc_sequence,omitempty" require:"true"`
}

func (s DeleteVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVpcRequest) GoString() string {
	return s.String()
}

func (s *DeleteVpcRequest) SetAuthToken(v string) *DeleteVpcRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteVpcRequest) SetVpcSequence(v string) *DeleteVpcRequest {
	s.VpcSequence = &v
	return s
}

type DeleteVpcResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVpcResponse) GoString() string {
	return s.String()
}

func (s *DeleteVpcResponse) SetReqMsgId(v string) *DeleteVpcResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteVpcResponse) SetResultCode(v string) *DeleteVpcResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteVpcResponse) SetResultMsg(v string) *DeleteVpcResponse {
	s.ResultMsg = &v
	return s
}

type ReleaseComputerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 需要释放的 computer ids
	ComputerSequences []*string `json:"computer_sequences,omitempty" xml:"computer_sequences,omitempty" require:"true" type:"Repeated"`
}

func (s ReleaseComputerRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseComputerRequest) GoString() string {
	return s.String()
}

func (s *ReleaseComputerRequest) SetAuthToken(v string) *ReleaseComputerRequest {
	s.AuthToken = &v
	return s
}

func (s *ReleaseComputerRequest) SetComputerSequences(v []*string) *ReleaseComputerRequest {
	s.ComputerSequences = v
	return s
}

type ReleaseComputerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ReleaseComputerResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseComputerResponse) GoString() string {
	return s.String()
}

func (s *ReleaseComputerResponse) SetReqMsgId(v string) *ReleaseComputerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReleaseComputerResponse) SetResultCode(v string) *ReleaseComputerResponse {
	s.ResultCode = &v
	return s
}

func (s *ReleaseComputerResponse) SetResultMsg(v string) *ReleaseComputerResponse {
	s.ResultMsg = &v
	return s
}

type ReinitComputerPasswordRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// computer_sequence
	ComputerSequence *string `json:"computer_sequence,omitempty" xml:"computer_sequence,omitempty" require:"true"`
	// 密码
	Password *string `json:"password,omitempty" xml:"password,omitempty" require:"true"`
}

func (s ReinitComputerPasswordRequest) String() string {
	return tea.Prettify(s)
}

func (s ReinitComputerPasswordRequest) GoString() string {
	return s.String()
}

func (s *ReinitComputerPasswordRequest) SetAuthToken(v string) *ReinitComputerPasswordRequest {
	s.AuthToken = &v
	return s
}

func (s *ReinitComputerPasswordRequest) SetComputerSequence(v string) *ReinitComputerPasswordRequest {
	s.ComputerSequence = &v
	return s
}

func (s *ReinitComputerPasswordRequest) SetPassword(v string) *ReinitComputerPasswordRequest {
	s.Password = &v
	return s
}

type ReinitComputerPasswordResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ReinitComputerPasswordResponse) String() string {
	return tea.Prettify(s)
}

func (s ReinitComputerPasswordResponse) GoString() string {
	return s.String()
}

func (s *ReinitComputerPasswordResponse) SetReqMsgId(v string) *ReinitComputerPasswordResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReinitComputerPasswordResponse) SetResultCode(v string) *ReinitComputerPasswordResponse {
	s.ResultCode = &v
	return s
}

func (s *ReinitComputerPasswordResponse) SetResultMsg(v string) *ReinitComputerPasswordResponse {
	s.ResultMsg = &v
	return s
}

type ReleaseDatabaseRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 需要释放的应用 ids
	AppIds []*string `json:"app_ids,omitempty" xml:"app_ids,omitempty" type:"Repeated"`
	// 应用实例 ids
	AppServiceIds []*string `json:"app_service_ids,omitempty" xml:"app_service_ids,omitempty" type:"Repeated"`
	// 需要释放应用的 database sequence
	DatabaseSequences []*string `json:"database_sequences,omitempty" xml:"database_sequences,omitempty" require:"true" type:"Repeated"`
}

func (s ReleaseDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseDatabaseRequest) GoString() string {
	return s.String()
}

func (s *ReleaseDatabaseRequest) SetAuthToken(v string) *ReleaseDatabaseRequest {
	s.AuthToken = &v
	return s
}

func (s *ReleaseDatabaseRequest) SetAppIds(v []*string) *ReleaseDatabaseRequest {
	s.AppIds = v
	return s
}

func (s *ReleaseDatabaseRequest) SetAppServiceIds(v []*string) *ReleaseDatabaseRequest {
	s.AppServiceIds = v
	return s
}

func (s *ReleaseDatabaseRequest) SetDatabaseSequences(v []*string) *ReleaseDatabaseRequest {
	s.DatabaseSequences = v
	return s
}

type ReleaseDatabaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ReleaseDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseDatabaseResponse) GoString() string {
	return s.String()
}

func (s *ReleaseDatabaseResponse) SetReqMsgId(v string) *ReleaseDatabaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReleaseDatabaseResponse) SetResultCode(v string) *ReleaseDatabaseResponse {
	s.ResultCode = &v
	return s
}

func (s *ReleaseDatabaseResponse) SetResultMsg(v string) *ReleaseDatabaseResponse {
	s.ResultMsg = &v
	return s
}

type RemoveComputerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// computer ids
	ComputerSequences []*string `json:"computer_sequences,omitempty" xml:"computer_sequences,omitempty" require:"true" type:"Repeated"`
}

func (s RemoveComputerRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveComputerRequest) GoString() string {
	return s.String()
}

func (s *RemoveComputerRequest) SetAuthToken(v string) *RemoveComputerRequest {
	s.AuthToken = &v
	return s
}

func (s *RemoveComputerRequest) SetComputerSequences(v []*string) *RemoveComputerRequest {
	s.ComputerSequences = v
	return s
}

type RemoveComputerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RemoveComputerResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveComputerResponse) GoString() string {
	return s.String()
}

func (s *RemoveComputerResponse) SetReqMsgId(v string) *RemoveComputerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RemoveComputerResponse) SetResultCode(v string) *RemoveComputerResponse {
	s.ResultCode = &v
	return s
}

func (s *RemoveComputerResponse) SetResultMsg(v string) *RemoveComputerResponse {
	s.ResultMsg = &v
	return s
}

type RemoveLoadbalanceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// lb ids
	LoadbalanceSequences []*string `json:"loadbalance_sequences,omitempty" xml:"loadbalance_sequences,omitempty" require:"true" type:"Repeated"`
}

func (s RemoveLoadbalanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveLoadbalanceRequest) GoString() string {
	return s.String()
}

func (s *RemoveLoadbalanceRequest) SetAuthToken(v string) *RemoveLoadbalanceRequest {
	s.AuthToken = &v
	return s
}

func (s *RemoveLoadbalanceRequest) SetLoadbalanceSequences(v []*string) *RemoveLoadbalanceRequest {
	s.LoadbalanceSequences = v
	return s
}

type RemoveLoadbalanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RemoveLoadbalanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveLoadbalanceResponse) GoString() string {
	return s.String()
}

func (s *RemoveLoadbalanceResponse) SetReqMsgId(v string) *RemoveLoadbalanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RemoveLoadbalanceResponse) SetResultCode(v string) *RemoveLoadbalanceResponse {
	s.ResultCode = &v
	return s
}

func (s *RemoveLoadbalanceResponse) SetResultMsg(v string) *RemoveLoadbalanceResponse {
	s.ResultMsg = &v
	return s
}

type RemoveDatabaseRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// database ids
	DatabaseSequences []*string `json:"database_sequences,omitempty" xml:"database_sequences,omitempty" require:"true" type:"Repeated"`
}

func (s RemoveDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveDatabaseRequest) GoString() string {
	return s.String()
}

func (s *RemoveDatabaseRequest) SetAuthToken(v string) *RemoveDatabaseRequest {
	s.AuthToken = &v
	return s
}

func (s *RemoveDatabaseRequest) SetDatabaseSequences(v []*string) *RemoveDatabaseRequest {
	s.DatabaseSequences = v
	return s
}

type RemoveDatabaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RemoveDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveDatabaseResponse) GoString() string {
	return s.String()
}

func (s *RemoveDatabaseResponse) SetReqMsgId(v string) *RemoveDatabaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RemoveDatabaseResponse) SetResultCode(v string) *RemoveDatabaseResponse {
	s.ResultCode = &v
	return s
}

func (s *RemoveDatabaseResponse) SetResultMsg(v string) *RemoveDatabaseResponse {
	s.ResultMsg = &v
	return s
}

type ReleaseLoadbalanceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// loadbalance ids
	LoadbalanceSequences []*string `json:"loadbalance_sequences,omitempty" xml:"loadbalance_sequences,omitempty" require:"true" type:"Repeated"`
}

func (s ReleaseLoadbalanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseLoadbalanceRequest) GoString() string {
	return s.String()
}

func (s *ReleaseLoadbalanceRequest) SetAuthToken(v string) *ReleaseLoadbalanceRequest {
	s.AuthToken = &v
	return s
}

func (s *ReleaseLoadbalanceRequest) SetLoadbalanceSequences(v []*string) *ReleaseLoadbalanceRequest {
	s.LoadbalanceSequences = v
	return s
}

type ReleaseLoadbalanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ReleaseLoadbalanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseLoadbalanceResponse) GoString() string {
	return s.String()
}

func (s *ReleaseLoadbalanceResponse) SetReqMsgId(v string) *ReleaseLoadbalanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReleaseLoadbalanceResponse) SetResultCode(v string) *ReleaseLoadbalanceResponse {
	s.ResultCode = &v
	return s
}

func (s *ReleaseLoadbalanceResponse) SetResultMsg(v string) *ReleaseLoadbalanceResponse {
	s.ResultMsg = &v
	return s
}

type CreateDatabaseAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// database 序列号
	DatabaseSequence *string `json:"database_sequence,omitempty" xml:"database_sequence,omitempty" require:"true"`
	// 账户名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 账户密码
	Password *string `json:"password,omitempty" xml:"password,omitempty" require:"true"`
}

func (s CreateDatabaseAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDatabaseAccountRequest) GoString() string {
	return s.String()
}

func (s *CreateDatabaseAccountRequest) SetAuthToken(v string) *CreateDatabaseAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDatabaseAccountRequest) SetDatabaseSequence(v string) *CreateDatabaseAccountRequest {
	s.DatabaseSequence = &v
	return s
}

func (s *CreateDatabaseAccountRequest) SetName(v string) *CreateDatabaseAccountRequest {
	s.Name = &v
	return s
}

func (s *CreateDatabaseAccountRequest) SetPassword(v string) *CreateDatabaseAccountRequest {
	s.Password = &v
	return s
}

type CreateDatabaseAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 账户序列号
	AccountSequence *string `json:"account_sequence,omitempty" xml:"account_sequence,omitempty"`
}

func (s CreateDatabaseAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDatabaseAccountResponse) GoString() string {
	return s.String()
}

func (s *CreateDatabaseAccountResponse) SetReqMsgId(v string) *CreateDatabaseAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDatabaseAccountResponse) SetResultCode(v string) *CreateDatabaseAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDatabaseAccountResponse) SetResultMsg(v string) *CreateDatabaseAccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDatabaseAccountResponse) SetAccountSequence(v string) *CreateDatabaseAccountResponse {
	s.AccountSequence = &v
	return s
}

type CreateSecuritygroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 安全域/组 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 所在区域
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// 工作空间名称
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
	// SECURITY_GROUP | SECURITY_ZONE
	// 默认为安全组
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s CreateSecuritygroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSecuritygroupRequest) GoString() string {
	return s.String()
}

func (s *CreateSecuritygroupRequest) SetAuthToken(v string) *CreateSecuritygroupRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSecuritygroupRequest) SetDescription(v string) *CreateSecuritygroupRequest {
	s.Description = &v
	return s
}

func (s *CreateSecuritygroupRequest) SetName(v string) *CreateSecuritygroupRequest {
	s.Name = &v
	return s
}

func (s *CreateSecuritygroupRequest) SetRegion(v string) *CreateSecuritygroupRequest {
	s.Region = &v
	return s
}

func (s *CreateSecuritygroupRequest) SetWorkspace(v string) *CreateSecuritygroupRequest {
	s.Workspace = &v
	return s
}

func (s *CreateSecuritygroupRequest) SetType(v string) *CreateSecuritygroupRequest {
	s.Type = &v
	return s
}

type CreateSecuritygroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 安全组/域 序列号
	SecurityGroupSequence *string `json:"security_group_sequence,omitempty" xml:"security_group_sequence,omitempty"`
}

func (s CreateSecuritygroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSecuritygroupResponse) GoString() string {
	return s.String()
}

func (s *CreateSecuritygroupResponse) SetReqMsgId(v string) *CreateSecuritygroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSecuritygroupResponse) SetResultCode(v string) *CreateSecuritygroupResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSecuritygroupResponse) SetResultMsg(v string) *CreateSecuritygroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateSecuritygroupResponse) SetSecurityGroupSequence(v string) *CreateSecuritygroupResponse {
	s.SecurityGroupSequence = &v
	return s
}

type ImportSecuritygroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// sg-zm042uh9f8gb1lfcsng6 的 iaas 层 id
	SecuritygroupId *string `json:"securitygroup_id,omitempty" xml:"securitygroup_id,omitempty" require:"true"`
	// securityGroup 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 工作空间
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s ImportSecuritygroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportSecuritygroupRequest) GoString() string {
	return s.String()
}

func (s *ImportSecuritygroupRequest) SetAuthToken(v string) *ImportSecuritygroupRequest {
	s.AuthToken = &v
	return s
}

func (s *ImportSecuritygroupRequest) SetSecuritygroupId(v string) *ImportSecuritygroupRequest {
	s.SecuritygroupId = &v
	return s
}

func (s *ImportSecuritygroupRequest) SetName(v string) *ImportSecuritygroupRequest {
	s.Name = &v
	return s
}

func (s *ImportSecuritygroupRequest) SetWorkspace(v string) *ImportSecuritygroupRequest {
	s.Workspace = &v
	return s
}

type ImportSecuritygroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ImportSecuritygroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportSecuritygroupResponse) GoString() string {
	return s.String()
}

func (s *ImportSecuritygroupResponse) SetReqMsgId(v string) *ImportSecuritygroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ImportSecuritygroupResponse) SetResultCode(v string) *ImportSecuritygroupResponse {
	s.ResultCode = &v
	return s
}

func (s *ImportSecuritygroupResponse) SetResultMsg(v string) *ImportSecuritygroupResponse {
	s.ResultMsg = &v
	return s
}

type RemoveSecuritygroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 安全组 id
	SecurityGroupSequence *string `json:"security_group_sequence,omitempty" xml:"security_group_sequence,omitempty" require:"true"`
}

func (s RemoveSecuritygroupRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveSecuritygroupRequest) GoString() string {
	return s.String()
}

func (s *RemoveSecuritygroupRequest) SetAuthToken(v string) *RemoveSecuritygroupRequest {
	s.AuthToken = &v
	return s
}

func (s *RemoveSecuritygroupRequest) SetSecurityGroupSequence(v string) *RemoveSecuritygroupRequest {
	s.SecurityGroupSequence = &v
	return s
}

type RemoveSecuritygroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RemoveSecuritygroupResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveSecuritygroupResponse) GoString() string {
	return s.String()
}

func (s *RemoveSecuritygroupResponse) SetReqMsgId(v string) *RemoveSecuritygroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RemoveSecuritygroupResponse) SetResultCode(v string) *RemoveSecuritygroupResponse {
	s.ResultCode = &v
	return s
}

func (s *RemoveSecuritygroupResponse) SetResultMsg(v string) *RemoveSecuritygroupResponse {
	s.ResultMsg = &v
	return s
}

type DeleteSecuritygroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 需要删除的 security group id
	SecurityGroupSequence *string `json:"security_group_sequence,omitempty" xml:"security_group_sequence,omitempty" require:"true"`
}

func (s DeleteSecuritygroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecuritygroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteSecuritygroupRequest) SetAuthToken(v string) *DeleteSecuritygroupRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSecuritygroupRequest) SetSecurityGroupSequence(v string) *DeleteSecuritygroupRequest {
	s.SecurityGroupSequence = &v
	return s
}

type DeleteSecuritygroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSecuritygroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecuritygroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteSecuritygroupResponse) SetReqMsgId(v string) *DeleteSecuritygroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSecuritygroupResponse) SetResultCode(v string) *DeleteSecuritygroupResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSecuritygroupResponse) SetResultMsg(v string) *DeleteSecuritygroupResponse {
	s.ResultMsg = &v
	return s
}

type DeleteDatabaseSchemaRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 欲删除的的 schema id
	SchemaSequence *string `json:"schema_sequence,omitempty" xml:"schema_sequence,omitempty" require:"true"`
}

func (s DeleteDatabaseSchemaRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatabaseSchemaRequest) GoString() string {
	return s.String()
}

func (s *DeleteDatabaseSchemaRequest) SetAuthToken(v string) *DeleteDatabaseSchemaRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteDatabaseSchemaRequest) SetSchemaSequence(v string) *DeleteDatabaseSchemaRequest {
	s.SchemaSequence = &v
	return s
}

type DeleteDatabaseSchemaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteDatabaseSchemaResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatabaseSchemaResponse) GoString() string {
	return s.String()
}

func (s *DeleteDatabaseSchemaResponse) SetReqMsgId(v string) *DeleteDatabaseSchemaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteDatabaseSchemaResponse) SetResultCode(v string) *DeleteDatabaseSchemaResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteDatabaseSchemaResponse) SetResultMsg(v string) *DeleteDatabaseSchemaResponse {
	s.ResultMsg = &v
	return s
}

type DeleteDatabaseAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// account id
	AccountSequence *string `json:"account_sequence,omitempty" xml:"account_sequence,omitempty" require:"true"`
}

func (s DeleteDatabaseAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatabaseAccountRequest) GoString() string {
	return s.String()
}

func (s *DeleteDatabaseAccountRequest) SetAuthToken(v string) *DeleteDatabaseAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteDatabaseAccountRequest) SetAccountSequence(v string) *DeleteDatabaseAccountRequest {
	s.AccountSequence = &v
	return s
}

type DeleteDatabaseAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteDatabaseAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatabaseAccountResponse) GoString() string {
	return s.String()
}

func (s *DeleteDatabaseAccountResponse) SetReqMsgId(v string) *DeleteDatabaseAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteDatabaseAccountResponse) SetResultCode(v string) *DeleteDatabaseAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteDatabaseAccountResponse) SetResultMsg(v string) *DeleteDatabaseAccountResponse {
	s.ResultMsg = &v
	return s
}

type DeleteVpcVswitchRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// vpc id
	VpcSequence *string `json:"vpc_sequence,omitempty" xml:"vpc_sequence,omitempty" require:"true"`
	// vswitch 的 iaasIds
	VswitchIds []*string `json:"vswitch_ids,omitempty" xml:"vswitch_ids,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteVpcVswitchRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVpcVswitchRequest) GoString() string {
	return s.String()
}

func (s *DeleteVpcVswitchRequest) SetAuthToken(v string) *DeleteVpcVswitchRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteVpcVswitchRequest) SetVpcSequence(v string) *DeleteVpcVswitchRequest {
	s.VpcSequence = &v
	return s
}

func (s *DeleteVpcVswitchRequest) SetVswitchIds(v []*string) *DeleteVpcVswitchRequest {
	s.VswitchIds = v
	return s
}

type DeleteVpcVswitchResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteVpcVswitchResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVpcVswitchResponse) GoString() string {
	return s.String()
}

func (s *DeleteVpcVswitchResponse) SetReqMsgId(v string) *DeleteVpcVswitchResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteVpcVswitchResponse) SetResultCode(v string) *DeleteVpcVswitchResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteVpcVswitchResponse) SetResultMsg(v string) *DeleteVpcVswitchResponse {
	s.ResultMsg = &v
	return s
}

type DeleteLoadbalanceListenerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// listener 端口
	ListenerPort *int64 `json:"listener_port,omitempty" xml:"listener_port,omitempty" require:"true"`
	// lb id
	LoadbalanceSequence *string `json:"loadbalance_sequence,omitempty" xml:"loadbalance_sequence,omitempty" require:"true"`
}

func (s DeleteLoadbalanceListenerRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLoadbalanceListenerRequest) GoString() string {
	return s.String()
}

func (s *DeleteLoadbalanceListenerRequest) SetAuthToken(v string) *DeleteLoadbalanceListenerRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteLoadbalanceListenerRequest) SetListenerPort(v int64) *DeleteLoadbalanceListenerRequest {
	s.ListenerPort = &v
	return s
}

func (s *DeleteLoadbalanceListenerRequest) SetLoadbalanceSequence(v string) *DeleteLoadbalanceListenerRequest {
	s.LoadbalanceSequence = &v
	return s
}

type DeleteLoadbalanceListenerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// paas_request_id
	PaasRequestId *string `json:"paas_request_id,omitempty" xml:"paas_request_id,omitempty"`
}

func (s DeleteLoadbalanceListenerResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLoadbalanceListenerResponse) GoString() string {
	return s.String()
}

func (s *DeleteLoadbalanceListenerResponse) SetReqMsgId(v string) *DeleteLoadbalanceListenerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteLoadbalanceListenerResponse) SetResultCode(v string) *DeleteLoadbalanceListenerResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteLoadbalanceListenerResponse) SetResultMsg(v string) *DeleteLoadbalanceListenerResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteLoadbalanceListenerResponse) SetPaasRequestId(v string) *DeleteLoadbalanceListenerResponse {
	s.PaasRequestId = &v
	return s
}

type DeleteVpcVroutertableRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 目标网段
	DestinationCidrBlock *string `json:"destination_cidr_block,omitempty" xml:"destination_cidr_block,omitempty" require:"true"`
	// 下一跳实例 iaas id
	NextHopId *string `json:"next_hop_id,omitempty" xml:"next_hop_id,omitempty" require:"true"`
	// 路由表 iaasId
	VRouteTableId *string `json:"v_route_table_id,omitempty" xml:"v_route_table_id,omitempty" require:"true"`
	// vpc paas id
	VpcSequence *string `json:"vpc_sequence,omitempty" xml:"vpc_sequence,omitempty" require:"true"`
}

func (s DeleteVpcVroutertableRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVpcVroutertableRequest) GoString() string {
	return s.String()
}

func (s *DeleteVpcVroutertableRequest) SetAuthToken(v string) *DeleteVpcVroutertableRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteVpcVroutertableRequest) SetDestinationCidrBlock(v string) *DeleteVpcVroutertableRequest {
	s.DestinationCidrBlock = &v
	return s
}

func (s *DeleteVpcVroutertableRequest) SetNextHopId(v string) *DeleteVpcVroutertableRequest {
	s.NextHopId = &v
	return s
}

func (s *DeleteVpcVroutertableRequest) SetVRouteTableId(v string) *DeleteVpcVroutertableRequest {
	s.VRouteTableId = &v
	return s
}

func (s *DeleteVpcVroutertableRequest) SetVpcSequence(v string) *DeleteVpcVroutertableRequest {
	s.VpcSequence = &v
	return s
}

type DeleteVpcVroutertableResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteVpcVroutertableResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVpcVroutertableResponse) GoString() string {
	return s.String()
}

func (s *DeleteVpcVroutertableResponse) SetReqMsgId(v string) *DeleteVpcVroutertableResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteVpcVroutertableResponse) SetResultCode(v string) *DeleteVpcVroutertableResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteVpcVroutertableResponse) SetResultMsg(v string) *DeleteVpcVroutertableResponse {
	s.ResultMsg = &v
	return s
}

type RemoveSecuritygroupInstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 安全组 paas id
	SecurityGroupSequence *string `json:"security_group_sequence,omitempty" xml:"security_group_sequence,omitempty" require:"true"`
	// 要移除的实例序列号
	InstanceSequences []*string `json:"instance_sequences,omitempty" xml:"instance_sequences,omitempty" require:"true" type:"Repeated"`
}

func (s RemoveSecuritygroupInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveSecuritygroupInstanceRequest) GoString() string {
	return s.String()
}

func (s *RemoveSecuritygroupInstanceRequest) SetAuthToken(v string) *RemoveSecuritygroupInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *RemoveSecuritygroupInstanceRequest) SetSecurityGroupSequence(v string) *RemoveSecuritygroupInstanceRequest {
	s.SecurityGroupSequence = &v
	return s
}

func (s *RemoveSecuritygroupInstanceRequest) SetInstanceSequences(v []*string) *RemoveSecuritygroupInstanceRequest {
	s.InstanceSequences = v
	return s
}

type RemoveSecuritygroupInstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RemoveSecuritygroupInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveSecuritygroupInstanceResponse) GoString() string {
	return s.String()
}

func (s *RemoveSecuritygroupInstanceResponse) SetReqMsgId(v string) *RemoveSecuritygroupInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RemoveSecuritygroupInstanceResponse) SetResultCode(v string) *RemoveSecuritygroupInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *RemoveSecuritygroupInstanceResponse) SetResultMsg(v string) *RemoveSecuritygroupInstanceResponse {
	s.ResultMsg = &v
	return s
}

type DeleteSecuritygroupPermissionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 安全组 paas id
	SecurityGroupSequence *string `json:"security_group_sequence,omitempty" xml:"security_group_sequence,omitempty" require:"true"`
	// 12345
	PermissionHash *string `json:"permission_hash,omitempty" xml:"permission_hash,omitempty" require:"true"`
}

func (s DeleteSecuritygroupPermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecuritygroupPermissionRequest) GoString() string {
	return s.String()
}

func (s *DeleteSecuritygroupPermissionRequest) SetAuthToken(v string) *DeleteSecuritygroupPermissionRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSecuritygroupPermissionRequest) SetSecurityGroupSequence(v string) *DeleteSecuritygroupPermissionRequest {
	s.SecurityGroupSequence = &v
	return s
}

func (s *DeleteSecuritygroupPermissionRequest) SetPermissionHash(v string) *DeleteSecuritygroupPermissionRequest {
	s.PermissionHash = &v
	return s
}

type DeleteSecuritygroupPermissionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteSecuritygroupPermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecuritygroupPermissionResponse) GoString() string {
	return s.String()
}

func (s *DeleteSecuritygroupPermissionResponse) SetReqMsgId(v string) *DeleteSecuritygroupPermissionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSecuritygroupPermissionResponse) SetResultCode(v string) *DeleteSecuritygroupPermissionResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSecuritygroupPermissionResponse) SetResultMsg(v string) *DeleteSecuritygroupPermissionResponse {
	s.ResultMsg = &v
	return s
}

type RemoveLoadbalanceSecurityipRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 要删除的 ip
	Ips []*string `json:"ips,omitempty" xml:"ips,omitempty" require:"true" type:"Repeated"`
	// 监听器端口
	ListenerPort *int64 `json:"listener_port,omitempty" xml:"listener_port,omitempty" require:"true"`
	// lb paas id
	LoadbalanceSequence *string `json:"loadbalance_sequence,omitempty" xml:"loadbalance_sequence,omitempty" require:"true"`
}

func (s RemoveLoadbalanceSecurityipRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveLoadbalanceSecurityipRequest) GoString() string {
	return s.String()
}

func (s *RemoveLoadbalanceSecurityipRequest) SetAuthToken(v string) *RemoveLoadbalanceSecurityipRequest {
	s.AuthToken = &v
	return s
}

func (s *RemoveLoadbalanceSecurityipRequest) SetIps(v []*string) *RemoveLoadbalanceSecurityipRequest {
	s.Ips = v
	return s
}

func (s *RemoveLoadbalanceSecurityipRequest) SetListenerPort(v int64) *RemoveLoadbalanceSecurityipRequest {
	s.ListenerPort = &v
	return s
}

func (s *RemoveLoadbalanceSecurityipRequest) SetLoadbalanceSequence(v string) *RemoveLoadbalanceSecurityipRequest {
	s.LoadbalanceSequence = &v
	return s
}

type RemoveLoadbalanceSecurityipResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RemoveLoadbalanceSecurityipResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveLoadbalanceSecurityipResponse) GoString() string {
	return s.String()
}

func (s *RemoveLoadbalanceSecurityipResponse) SetReqMsgId(v string) *RemoveLoadbalanceSecurityipResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RemoveLoadbalanceSecurityipResponse) SetResultCode(v string) *RemoveLoadbalanceSecurityipResponse {
	s.ResultCode = &v
	return s
}

func (s *RemoveLoadbalanceSecurityipResponse) SetResultMsg(v string) *RemoveLoadbalanceSecurityipResponse {
	s.ResultMsg = &v
	return s
}

type CreateApplicationRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 应用分组 id
	AppDomainId *string `json:"app_domain_id,omitempty" xml:"app_domain_id,omitempty"`
	// 应用等级 id
	AppLevelId *string `json:"app_level_id,omitempty" xml:"app_level_id,omitempty"`
	// 页面请求用户无需自行填写此字段。此字段用于代码库的创建权限认证。为 iam 返回的 authorization 值。
	Authorization *string `json:"authorization,omitempty" xml:"authorization,omitempty"`
	// 技术栈版本
	BuildpackVersion *string `json:"buildpack_version,omitempty" xml:"buildpack_version,omitempty"`
	// 应用中文名称
	ChineseName *string `json:"chinese_name,omitempty" xml:"chinese_name,omitempty"`
	// 使用已有的代码库。默认为否。
	CodeRepositoryExisted *bool `json:"code_repository_existed,omitempty" xml:"code_repository_existed,omitempty"`
	// 代码库 group 名称
	CodeRepositoryGroupName *string `json:"code_repository_group_name,omitempty" xml:"code_repository_group_name,omitempty"`
	// 默认无需填写。代码库名称。默认无需关联代码库。
	CodeRepositoryName *string `json:"code_repository_name,omitempty" xml:"code_repository_name,omitempty"`
	// 默认为 GITLAB。无代码库时，无需填写。
	CodeRepositoryType *string `json:"code_repository_type,omitempty" xml:"code_repository_type,omitempty"`
	// 应用描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 应用名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 应用负责人 id
	OwnerId *string `json:"owner_id,omitempty" xml:"owner_id,omitempty"`
	// 技术栈 id
	StackId *string `json:"stack_id,omitempty" xml:"stack_id,omitempty"`
	// 当设置代码库时，需设置此字段
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s CreateApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationRequest) GoString() string {
	return s.String()
}

func (s *CreateApplicationRequest) SetAuthToken(v string) *CreateApplicationRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateApplicationRequest) SetAppDomainId(v string) *CreateApplicationRequest {
	s.AppDomainId = &v
	return s
}

func (s *CreateApplicationRequest) SetAppLevelId(v string) *CreateApplicationRequest {
	s.AppLevelId = &v
	return s
}

func (s *CreateApplicationRequest) SetAuthorization(v string) *CreateApplicationRequest {
	s.Authorization = &v
	return s
}

func (s *CreateApplicationRequest) SetBuildpackVersion(v string) *CreateApplicationRequest {
	s.BuildpackVersion = &v
	return s
}

func (s *CreateApplicationRequest) SetChineseName(v string) *CreateApplicationRequest {
	s.ChineseName = &v
	return s
}

func (s *CreateApplicationRequest) SetCodeRepositoryExisted(v bool) *CreateApplicationRequest {
	s.CodeRepositoryExisted = &v
	return s
}

func (s *CreateApplicationRequest) SetCodeRepositoryGroupName(v string) *CreateApplicationRequest {
	s.CodeRepositoryGroupName = &v
	return s
}

func (s *CreateApplicationRequest) SetCodeRepositoryName(v string) *CreateApplicationRequest {
	s.CodeRepositoryName = &v
	return s
}

func (s *CreateApplicationRequest) SetCodeRepositoryType(v string) *CreateApplicationRequest {
	s.CodeRepositoryType = &v
	return s
}

func (s *CreateApplicationRequest) SetDescription(v string) *CreateApplicationRequest {
	s.Description = &v
	return s
}

func (s *CreateApplicationRequest) SetName(v string) *CreateApplicationRequest {
	s.Name = &v
	return s
}

func (s *CreateApplicationRequest) SetOwnerId(v string) *CreateApplicationRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateApplicationRequest) SetStackId(v string) *CreateApplicationRequest {
	s.StackId = &v
	return s
}

func (s *CreateApplicationRequest) SetWorkspace(v string) *CreateApplicationRequest {
	s.Workspace = &v
	return s
}

type CreateApplicationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 应用 id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
}

func (s CreateApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationResponse) GoString() string {
	return s.String()
}

func (s *CreateApplicationResponse) SetReqMsgId(v string) *CreateApplicationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateApplicationResponse) SetResultCode(v string) *CreateApplicationResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateApplicationResponse) SetResultMsg(v string) *CreateApplicationResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateApplicationResponse) SetApplicationId(v string) *CreateApplicationResponse {
	s.ApplicationId = &v
	return s
}

type DeleteApplicationRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 欲删除的应用 id
	ApplicationIds []*string `json:"application_ids,omitempty" xml:"application_ids,omitempty" type:"Repeated"`
	// 是否删除绑定的代码库。默认为 false
	DeleteCodeRepo *bool `json:"delete_code_repo,omitempty" xml:"delete_code_repo,omitempty"`
}

func (s DeleteApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationRequest) GoString() string {
	return s.String()
}

func (s *DeleteApplicationRequest) SetAuthToken(v string) *DeleteApplicationRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteApplicationRequest) SetApplicationIds(v []*string) *DeleteApplicationRequest {
	s.ApplicationIds = v
	return s
}

func (s *DeleteApplicationRequest) SetDeleteCodeRepo(v bool) *DeleteApplicationRequest {
	s.DeleteCodeRepo = &v
	return s
}

type DeleteApplicationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationResponse) GoString() string {
	return s.String()
}

func (s *DeleteApplicationResponse) SetReqMsgId(v string) *DeleteApplicationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteApplicationResponse) SetResultCode(v string) *DeleteApplicationResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteApplicationResponse) SetResultMsg(v string) *DeleteApplicationResponse {
	s.ResultMsg = &v
	return s
}

type CreateVpcVswitchRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 网段
	CidrBlock *string `json:"cidr_block,omitempty" xml:"cidr_block,omitempty" require:"true"`
	// 描述
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
	// switch 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// vpc paas id
	VpcSequence *string `json:"vpc_sequence,omitempty" xml:"vpc_sequence,omitempty" require:"true"`
	// zone
	Zone *string `json:"zone,omitempty" xml:"zone,omitempty" require:"true"`
}

func (s CreateVpcVswitchRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVpcVswitchRequest) GoString() string {
	return s.String()
}

func (s *CreateVpcVswitchRequest) SetAuthToken(v string) *CreateVpcVswitchRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateVpcVswitchRequest) SetCidrBlock(v string) *CreateVpcVswitchRequest {
	s.CidrBlock = &v
	return s
}

func (s *CreateVpcVswitchRequest) SetDescription(v string) *CreateVpcVswitchRequest {
	s.Description = &v
	return s
}

func (s *CreateVpcVswitchRequest) SetName(v string) *CreateVpcVswitchRequest {
	s.Name = &v
	return s
}

func (s *CreateVpcVswitchRequest) SetVpcSequence(v string) *CreateVpcVswitchRequest {
	s.VpcSequence = &v
	return s
}

func (s *CreateVpcVswitchRequest) SetZone(v string) *CreateVpcVswitchRequest {
	s.Zone = &v
	return s
}

type CreateVpcVswitchResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// switch paas id
	VswitchSequence *string `json:"vswitch_sequence,omitempty" xml:"vswitch_sequence,omitempty"`
}

func (s CreateVpcVswitchResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVpcVswitchResponse) GoString() string {
	return s.String()
}

func (s *CreateVpcVswitchResponse) SetReqMsgId(v string) *CreateVpcVswitchResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateVpcVswitchResponse) SetResultCode(v string) *CreateVpcVswitchResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateVpcVswitchResponse) SetResultMsg(v string) *CreateVpcVswitchResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateVpcVswitchResponse) SetVswitchSequence(v string) *CreateVpcVswitchResponse {
	s.VswitchSequence = &v
	return s
}

type CreateVpcVroutertableRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 目标网端
	DestinationCidrBlock *string `json:"destination_cidr_block,omitempty" xml:"destination_cidr_block,omitempty" require:"true"`
	// 下一跳资源 id
	NextHopId *string `json:"next_hop_id,omitempty" xml:"next_hop_id,omitempty" require:"true"`
	// 下一跳类型
	NextHopType *string `json:"next_hop_type,omitempty" xml:"next_hop_type,omitempty" require:"true"`
	// 路由表 id
	VRouteTableId *string `json:"v_route_table_id,omitempty" xml:"v_route_table_id,omitempty" require:"true"`
	// vpc paas id
	VpcSequence *string `json:"vpc_sequence,omitempty" xml:"vpc_sequence,omitempty" require:"true"`
}

func (s CreateVpcVroutertableRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVpcVroutertableRequest) GoString() string {
	return s.String()
}

func (s *CreateVpcVroutertableRequest) SetAuthToken(v string) *CreateVpcVroutertableRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateVpcVroutertableRequest) SetDestinationCidrBlock(v string) *CreateVpcVroutertableRequest {
	s.DestinationCidrBlock = &v
	return s
}

func (s *CreateVpcVroutertableRequest) SetNextHopId(v string) *CreateVpcVroutertableRequest {
	s.NextHopId = &v
	return s
}

func (s *CreateVpcVroutertableRequest) SetNextHopType(v string) *CreateVpcVroutertableRequest {
	s.NextHopType = &v
	return s
}

func (s *CreateVpcVroutertableRequest) SetVRouteTableId(v string) *CreateVpcVroutertableRequest {
	s.VRouteTableId = &v
	return s
}

func (s *CreateVpcVroutertableRequest) SetVpcSequence(v string) *CreateVpcVroutertableRequest {
	s.VpcSequence = &v
	return s
}

type CreateVpcVroutertableResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateVpcVroutertableResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVpcVroutertableResponse) GoString() string {
	return s.String()
}

func (s *CreateVpcVroutertableResponse) SetReqMsgId(v string) *CreateVpcVroutertableResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateVpcVroutertableResponse) SetResultCode(v string) *CreateVpcVroutertableResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateVpcVroutertableResponse) SetResultMsg(v string) *CreateVpcVroutertableResponse {
	s.ResultMsg = &v
	return s
}

type AddSecuritygroupInstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 需向安全组中添加的实例 paas 序列号
	InstanceSequences []*string `json:"instance_sequences,omitempty" xml:"instance_sequences,omitempty" require:"true" type:"Repeated"`
	// 安全组 paas id
	SecurityGroupSequence *string `json:"security_group_sequence,omitempty" xml:"security_group_sequence,omitempty" require:"true"`
}

func (s AddSecuritygroupInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s AddSecuritygroupInstanceRequest) GoString() string {
	return s.String()
}

func (s *AddSecuritygroupInstanceRequest) SetAuthToken(v string) *AddSecuritygroupInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *AddSecuritygroupInstanceRequest) SetInstanceSequences(v []*string) *AddSecuritygroupInstanceRequest {
	s.InstanceSequences = v
	return s
}

func (s *AddSecuritygroupInstanceRequest) SetSecurityGroupSequence(v string) *AddSecuritygroupInstanceRequest {
	s.SecurityGroupSequence = &v
	return s
}

type AddSecuritygroupInstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s AddSecuritygroupInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s AddSecuritygroupInstanceResponse) GoString() string {
	return s.String()
}

func (s *AddSecuritygroupInstanceResponse) SetReqMsgId(v string) *AddSecuritygroupInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddSecuritygroupInstanceResponse) SetResultCode(v string) *AddSecuritygroupInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *AddSecuritygroupInstanceResponse) SetResultMsg(v string) *AddSecuritygroupInstanceResponse {
	s.ResultMsg = &v
	return s
}

type UpdateDatabaseSpecRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// db paas id
	DatabaseSequences []*string `json:"database_sequences,omitempty" xml:"database_sequences,omitempty" require:"true" type:"Repeated"`
	// 实例规格 id
	SpecId *string `json:"spec_id,omitempty" xml:"spec_id,omitempty" require:"true"`
	// 存储空间大小
	StorageSize *int64 `json:"storage_size,omitempty" xml:"storage_size,omitempty" require:"true"`
}

func (s UpdateDatabaseSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatabaseSpecRequest) GoString() string {
	return s.String()
}

func (s *UpdateDatabaseSpecRequest) SetAuthToken(v string) *UpdateDatabaseSpecRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDatabaseSpecRequest) SetDatabaseSequences(v []*string) *UpdateDatabaseSpecRequest {
	s.DatabaseSequences = v
	return s
}

func (s *UpdateDatabaseSpecRequest) SetSpecId(v string) *UpdateDatabaseSpecRequest {
	s.SpecId = &v
	return s
}

func (s *UpdateDatabaseSpecRequest) SetStorageSize(v int64) *UpdateDatabaseSpecRequest {
	s.StorageSize = &v
	return s
}

type UpdateDatabaseSpecResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateDatabaseSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatabaseSpecResponse) GoString() string {
	return s.String()
}

func (s *UpdateDatabaseSpecResponse) SetReqMsgId(v string) *UpdateDatabaseSpecResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDatabaseSpecResponse) SetResultCode(v string) *UpdateDatabaseSpecResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDatabaseSpecResponse) SetResultMsg(v string) *UpdateDatabaseSpecResponse {
	s.ResultMsg = &v
	return s
}

type UpdateLoadbalanceAccesscontrolRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// lb paas id
	LoadbalanceSequence *string `json:"loadbalance_sequence,omitempty" xml:"loadbalance_sequence,omitempty" require:"true"`
	// 监听器端口
	ListenerPort *int64 `json:"listener_port,omitempty" xml:"listener_port,omitempty" require:"true"`
	// 是否打开访问控制
	AccessControl *bool `json:"access_control,omitempty" xml:"access_control,omitempty" require:"true"`
}

func (s UpdateLoadbalanceAccesscontrolRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLoadbalanceAccesscontrolRequest) GoString() string {
	return s.String()
}

func (s *UpdateLoadbalanceAccesscontrolRequest) SetAuthToken(v string) *UpdateLoadbalanceAccesscontrolRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateLoadbalanceAccesscontrolRequest) SetLoadbalanceSequence(v string) *UpdateLoadbalanceAccesscontrolRequest {
	s.LoadbalanceSequence = &v
	return s
}

func (s *UpdateLoadbalanceAccesscontrolRequest) SetListenerPort(v int64) *UpdateLoadbalanceAccesscontrolRequest {
	s.ListenerPort = &v
	return s
}

func (s *UpdateLoadbalanceAccesscontrolRequest) SetAccessControl(v bool) *UpdateLoadbalanceAccesscontrolRequest {
	s.AccessControl = &v
	return s
}

type UpdateLoadbalanceAccesscontrolResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateLoadbalanceAccesscontrolResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLoadbalanceAccesscontrolResponse) GoString() string {
	return s.String()
}

func (s *UpdateLoadbalanceAccesscontrolResponse) SetReqMsgId(v string) *UpdateLoadbalanceAccesscontrolResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateLoadbalanceAccesscontrolResponse) SetResultCode(v string) *UpdateLoadbalanceAccesscontrolResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateLoadbalanceAccesscontrolResponse) SetResultMsg(v string) *UpdateLoadbalanceAccesscontrolResponse {
	s.ResultMsg = &v
	return s
}

type UpdateLoadbalanceSpecRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 公网类型实例的付费方式。取值： PAY_BY_BANDWIDTH：按带宽计费。 PAY_BY_TRAFFIC：按流量计费（默认值）。
	InternetChargeType *string `json:"internet_charge_type,omitempty" xml:"internet_charge_type,omitempty" require:"true"`
	// 若为按带宽计费类型需填写此字段
	Bandwidth *int64 `json:"bandwidth,omitempty" xml:"bandwidth,omitempty"`
	// lb paas id
	LoadbalanceSequence *string `json:"loadbalance_sequence,omitempty" xml:"loadbalance_sequence,omitempty" require:"true"`
}

func (s UpdateLoadbalanceSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLoadbalanceSpecRequest) GoString() string {
	return s.String()
}

func (s *UpdateLoadbalanceSpecRequest) SetAuthToken(v string) *UpdateLoadbalanceSpecRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateLoadbalanceSpecRequest) SetInternetChargeType(v string) *UpdateLoadbalanceSpecRequest {
	s.InternetChargeType = &v
	return s
}

func (s *UpdateLoadbalanceSpecRequest) SetBandwidth(v int64) *UpdateLoadbalanceSpecRequest {
	s.Bandwidth = &v
	return s
}

func (s *UpdateLoadbalanceSpecRequest) SetLoadbalanceSequence(v string) *UpdateLoadbalanceSpecRequest {
	s.LoadbalanceSequence = &v
	return s
}

type UpdateLoadbalanceSpecResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateLoadbalanceSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLoadbalanceSpecResponse) GoString() string {
	return s.String()
}

func (s *UpdateLoadbalanceSpecResponse) SetReqMsgId(v string) *UpdateLoadbalanceSpecResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateLoadbalanceSpecResponse) SetResultCode(v string) *UpdateLoadbalanceSpecResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateLoadbalanceSpecResponse) SetResultMsg(v string) *UpdateLoadbalanceSpecResponse {
	s.ResultMsg = &v
	return s
}

type UpdateVpcVswitchRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 修改会的 vswitch 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// vswitch id
	VswitchId *string `json:"vswitch_id,omitempty" xml:"vswitch_id,omitempty" require:"true"`
	// vpc paas id
	VpcSequence *string `json:"vpc_sequence,omitempty" xml:"vpc_sequence,omitempty" require:"true"`
	// 描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
}

func (s UpdateVpcVswitchRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateVpcVswitchRequest) GoString() string {
	return s.String()
}

func (s *UpdateVpcVswitchRequest) SetAuthToken(v string) *UpdateVpcVswitchRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateVpcVswitchRequest) SetName(v string) *UpdateVpcVswitchRequest {
	s.Name = &v
	return s
}

func (s *UpdateVpcVswitchRequest) SetVswitchId(v string) *UpdateVpcVswitchRequest {
	s.VswitchId = &v
	return s
}

func (s *UpdateVpcVswitchRequest) SetVpcSequence(v string) *UpdateVpcVswitchRequest {
	s.VpcSequence = &v
	return s
}

func (s *UpdateVpcVswitchRequest) SetDescription(v string) *UpdateVpcVswitchRequest {
	s.Description = &v
	return s
}

type UpdateVpcVswitchResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateVpcVswitchResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateVpcVswitchResponse) GoString() string {
	return s.String()
}

func (s *UpdateVpcVswitchResponse) SetReqMsgId(v string) *UpdateVpcVswitchResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateVpcVswitchResponse) SetResultCode(v string) *UpdateVpcVswitchResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateVpcVswitchResponse) SetResultMsg(v string) *UpdateVpcVswitchResponse {
	s.ResultMsg = &v
	return s
}

type CreateWorkspaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace 显示名称
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty" require:"true"`
	// workspace 唯一标识符。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// VPC ｜ Classic
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty" require:"true"`
	// 地域
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// 可用区
	Zones []*string `json:"zones,omitempty" xml:"zones,omitempty" type:"Repeated"`
}

func (s CreateWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *CreateWorkspaceRequest) SetAuthToken(v string) *CreateWorkspaceRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateWorkspaceRequest) SetDisplayName(v string) *CreateWorkspaceRequest {
	s.DisplayName = &v
	return s
}

func (s *CreateWorkspaceRequest) SetName(v string) *CreateWorkspaceRequest {
	s.Name = &v
	return s
}

func (s *CreateWorkspaceRequest) SetNetworkType(v string) *CreateWorkspaceRequest {
	s.NetworkType = &v
	return s
}

func (s *CreateWorkspaceRequest) SetRegion(v string) *CreateWorkspaceRequest {
	s.Region = &v
	return s
}

func (s *CreateWorkspaceRequest) SetZones(v []*string) *CreateWorkspaceRequest {
	s.Zones = v
	return s
}

type CreateWorkspaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// workspace id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s CreateWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *CreateWorkspaceResponse) SetReqMsgId(v string) *CreateWorkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateWorkspaceResponse) SetResultCode(v string) *CreateWorkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateWorkspaceResponse) SetResultMsg(v string) *CreateWorkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateWorkspaceResponse) SetWorkspaceId(v string) *CreateWorkspaceResponse {
	s.WorkspaceId = &v
	return s
}

type CreateMetaWorkspaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace 显示名称
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty" require:"true"`
	// workspace 唯一标识符
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// VPC ｜ Classic
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty" require:"true"`
	// 地域
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// 可用区
	Zones []*string `json:"zones,omitempty" xml:"zones,omitempty" type:"Repeated"`
}

func (s CreateMetaWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMetaWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *CreateMetaWorkspaceRequest) SetAuthToken(v string) *CreateMetaWorkspaceRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateMetaWorkspaceRequest) SetDisplayName(v string) *CreateMetaWorkspaceRequest {
	s.DisplayName = &v
	return s
}

func (s *CreateMetaWorkspaceRequest) SetName(v string) *CreateMetaWorkspaceRequest {
	s.Name = &v
	return s
}

func (s *CreateMetaWorkspaceRequest) SetNetworkType(v string) *CreateMetaWorkspaceRequest {
	s.NetworkType = &v
	return s
}

func (s *CreateMetaWorkspaceRequest) SetRegion(v string) *CreateMetaWorkspaceRequest {
	s.Region = &v
	return s
}

func (s *CreateMetaWorkspaceRequest) SetZones(v []*string) *CreateMetaWorkspaceRequest {
	s.Zones = v
	return s
}

type CreateMetaWorkspaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// workspace id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s CreateMetaWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMetaWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *CreateMetaWorkspaceResponse) SetReqMsgId(v string) *CreateMetaWorkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateMetaWorkspaceResponse) SetResultCode(v string) *CreateMetaWorkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateMetaWorkspaceResponse) SetResultMsg(v string) *CreateMetaWorkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateMetaWorkspaceResponse) SetWorkspaceId(v string) *CreateMetaWorkspaceResponse {
	s.WorkspaceId = &v
	return s
}

type QueryMetaWorkspaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
}

func (s QueryMetaWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMetaWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *QueryMetaWorkspaceRequest) SetAuthToken(v string) *QueryMetaWorkspaceRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMetaWorkspaceRequest) SetWorkspaceId(v string) *QueryMetaWorkspaceRequest {
	s.WorkspaceId = &v
	return s
}

type QueryMetaWorkspaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// workspace 信息
	Data *Workspace `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryMetaWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMetaWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *QueryMetaWorkspaceResponse) SetReqMsgId(v string) *QueryMetaWorkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMetaWorkspaceResponse) SetResultCode(v string) *QueryMetaWorkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMetaWorkspaceResponse) SetResultMsg(v string) *QueryMetaWorkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMetaWorkspaceResponse) SetData(v *Workspace) *QueryMetaWorkspaceResponse {
	s.Data = v
	return s
}

type DeleteMetaWorkspaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
}

func (s DeleteMetaWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetaWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *DeleteMetaWorkspaceRequest) SetAuthToken(v string) *DeleteMetaWorkspaceRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteMetaWorkspaceRequest) SetWorkspaceId(v string) *DeleteMetaWorkspaceRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteMetaWorkspaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 删除是否成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteMetaWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetaWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *DeleteMetaWorkspaceResponse) SetReqMsgId(v string) *DeleteMetaWorkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteMetaWorkspaceResponse) SetResultCode(v string) *DeleteMetaWorkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteMetaWorkspaceResponse) SetResultMsg(v string) *DeleteMetaWorkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteMetaWorkspaceResponse) SetSuccess(v bool) *DeleteMetaWorkspaceResponse {
	s.Success = &v
	return s
}

type CreateResourceVpcRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// VPC的网段。您可以使用以下网段或其子集作为VPC的网段：
	//
	// 172.16.0.0/12（默认值）。
	// 10.0.0.0/8。
	// 192.168.0.0/16。
	CidrBlock *string `json:"cidr_block,omitempty" xml:"cidr_block,omitempty"`
	// 描述信息
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// VPC的名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// VPC所在的地域
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// 用户侧网络的网段
	UserCidr *string `json:"user_cidr,omitempty" xml:"user_cidr,omitempty"`
	// 所属工作空间 identity
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s CreateResourceVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceVpcRequest) GoString() string {
	return s.String()
}

func (s *CreateResourceVpcRequest) SetAuthToken(v string) *CreateResourceVpcRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateResourceVpcRequest) SetCidrBlock(v string) *CreateResourceVpcRequest {
	s.CidrBlock = &v
	return s
}

func (s *CreateResourceVpcRequest) SetDescription(v string) *CreateResourceVpcRequest {
	s.Description = &v
	return s
}

func (s *CreateResourceVpcRequest) SetName(v string) *CreateResourceVpcRequest {
	s.Name = &v
	return s
}

func (s *CreateResourceVpcRequest) SetRegion(v string) *CreateResourceVpcRequest {
	s.Region = &v
	return s
}

func (s *CreateResourceVpcRequest) SetUserCidr(v string) *CreateResourceVpcRequest {
	s.UserCidr = &v
	return s
}

func (s *CreateResourceVpcRequest) SetWorkspace(v string) *CreateResourceVpcRequest {
	s.Workspace = &v
	return s
}

type CreateResourceVpcResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建VPC后，系统自动创建的路由表的ID。
	RouteTableId *string `json:"route_table_id,omitempty" xml:"route_table_id,omitempty"`
	// 创建的VPC的ID
	VpcId *string `json:"vpc_id,omitempty" xml:"vpc_id,omitempty"`
	// 创建VPC后，系统自动创建的路由器的ID。
	VRouterId *string `json:"v_router_id,omitempty" xml:"v_router_id,omitempty"`
}

func (s CreateResourceVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceVpcResponse) GoString() string {
	return s.String()
}

func (s *CreateResourceVpcResponse) SetReqMsgId(v string) *CreateResourceVpcResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateResourceVpcResponse) SetResultCode(v string) *CreateResourceVpcResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateResourceVpcResponse) SetResultMsg(v string) *CreateResourceVpcResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateResourceVpcResponse) SetRouteTableId(v string) *CreateResourceVpcResponse {
	s.RouteTableId = &v
	return s
}

func (s *CreateResourceVpcResponse) SetVpcId(v string) *CreateResourceVpcResponse {
	s.VpcId = &v
	return s
}

func (s *CreateResourceVpcResponse) SetVRouterId(v string) *CreateResourceVpcResponse {
	s.VRouterId = &v
	return s
}

type QueryResourceVpcRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 是否使用缓存进行查询，默认false，使用缓存查询
	DisableCache *bool `json:"disable_cache,omitempty" xml:"disable_cache,omitempty"`
	// 地域identity
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// VPC的id
	VpcId *string `json:"vpc_id,omitempty" xml:"vpc_id,omitempty"`
}

func (s QueryResourceVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryResourceVpcRequest) GoString() string {
	return s.String()
}

func (s *QueryResourceVpcRequest) SetAuthToken(v string) *QueryResourceVpcRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryResourceVpcRequest) SetDisableCache(v bool) *QueryResourceVpcRequest {
	s.DisableCache = &v
	return s
}

func (s *QueryResourceVpcRequest) SetRegion(v string) *QueryResourceVpcRequest {
	s.Region = &v
	return s
}

func (s *QueryResourceVpcRequest) SetVpcId(v string) *QueryResourceVpcRequest {
	s.VpcId = &v
	return s
}

type QueryResourceVpcResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 列表条目数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// VPC详细信息
	Vpcs []*VPC `json:"vpcs,omitempty" xml:"vpcs,omitempty" type:"Repeated"`
}

func (s QueryResourceVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryResourceVpcResponse) GoString() string {
	return s.String()
}

func (s *QueryResourceVpcResponse) SetReqMsgId(v string) *QueryResourceVpcResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryResourceVpcResponse) SetResultCode(v string) *QueryResourceVpcResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryResourceVpcResponse) SetResultMsg(v string) *QueryResourceVpcResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryResourceVpcResponse) SetTotalCount(v int64) *QueryResourceVpcResponse {
	s.TotalCount = &v
	return s
}

func (s *QueryResourceVpcResponse) SetVpcs(v []*VPC) *QueryResourceVpcResponse {
	s.Vpcs = v
	return s
}

type DeleteResourceVpcRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 要删除的VPC所在的地域identity
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// 要删除的VPC ID
	VpcId *string `json:"vpc_id,omitempty" xml:"vpc_id,omitempty"`
	// workspace id
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
	// unbind_only
	UnbindOnly *bool `json:"unbind_only,omitempty" xml:"unbind_only,omitempty"`
	// vpc_paas_id,vcp_id不存在时可用。建议用这个
	VpcPaasId *string `json:"vpc_paas_id,omitempty" xml:"vpc_paas_id,omitempty"`
}

func (s DeleteResourceVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceVpcRequest) GoString() string {
	return s.String()
}

func (s *DeleteResourceVpcRequest) SetAuthToken(v string) *DeleteResourceVpcRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteResourceVpcRequest) SetRegion(v string) *DeleteResourceVpcRequest {
	s.Region = &v
	return s
}

func (s *DeleteResourceVpcRequest) SetVpcId(v string) *DeleteResourceVpcRequest {
	s.VpcId = &v
	return s
}

func (s *DeleteResourceVpcRequest) SetWorkspace(v string) *DeleteResourceVpcRequest {
	s.Workspace = &v
	return s
}

func (s *DeleteResourceVpcRequest) SetUnbindOnly(v bool) *DeleteResourceVpcRequest {
	s.UnbindOnly = &v
	return s
}

func (s *DeleteResourceVpcRequest) SetVpcPaasId(v string) *DeleteResourceVpcRequest {
	s.VpcPaasId = &v
	return s
}

type DeleteResourceVpcResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 删除VPC是否成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteResourceVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceVpcResponse) GoString() string {
	return s.String()
}

func (s *DeleteResourceVpcResponse) SetReqMsgId(v string) *DeleteResourceVpcResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteResourceVpcResponse) SetResultCode(v string) *DeleteResourceVpcResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteResourceVpcResponse) SetResultMsg(v string) *DeleteResourceVpcResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteResourceVpcResponse) SetSuccess(v bool) *DeleteResourceVpcResponse {
	s.Success = &v
	return s
}

type CreateResourceVswitchRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 交换机的网段。交换机网段要求如下：
	//
	// 交换机的网段的掩码长度范围为16~29位。
	// 交换机的网段必须从属于所在VPC的网段。
	// 交换机的网段不能与所在VPC中路由条目的目标网段相同，但可以是目标网段的子集。
	CidrBlock *string `json:"cidr_block,omitempty" xml:"cidr_block,omitempty" require:"true"`
	// 描述信息
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 交换机的名称。
	//
	// 名称长度为2~128个字符，必须以字母或中文开头，但不能以http://或https://开头。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 要创建的交换机的地域 identity
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// 要创建的交换机所属的VPC ID。
	VpcId *string `json:"vpc_id,omitempty" xml:"vpc_id,omitempty" require:"true"`
	// workspace name
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
	// 要创建的交换机所属的可用区 identity
	Zone *string `json:"zone,omitempty" xml:"zone,omitempty" require:"true"`
}

func (s CreateResourceVswitchRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceVswitchRequest) GoString() string {
	return s.String()
}

func (s *CreateResourceVswitchRequest) SetAuthToken(v string) *CreateResourceVswitchRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateResourceVswitchRequest) SetCidrBlock(v string) *CreateResourceVswitchRequest {
	s.CidrBlock = &v
	return s
}

func (s *CreateResourceVswitchRequest) SetDescription(v string) *CreateResourceVswitchRequest {
	s.Description = &v
	return s
}

func (s *CreateResourceVswitchRequest) SetName(v string) *CreateResourceVswitchRequest {
	s.Name = &v
	return s
}

func (s *CreateResourceVswitchRequest) SetRegion(v string) *CreateResourceVswitchRequest {
	s.Region = &v
	return s
}

func (s *CreateResourceVswitchRequest) SetVpcId(v string) *CreateResourceVswitchRequest {
	s.VpcId = &v
	return s
}

func (s *CreateResourceVswitchRequest) SetWorkspace(v string) *CreateResourceVswitchRequest {
	s.Workspace = &v
	return s
}

func (s *CreateResourceVswitchRequest) SetZone(v string) *CreateResourceVswitchRequest {
	s.Zone = &v
	return s
}

type CreateResourceVswitchResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建的交换机的ID。
	VSwitchId *string `json:"v_switch_id,omitempty" xml:"v_switch_id,omitempty"`
}

func (s CreateResourceVswitchResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceVswitchResponse) GoString() string {
	return s.String()
}

func (s *CreateResourceVswitchResponse) SetReqMsgId(v string) *CreateResourceVswitchResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateResourceVswitchResponse) SetResultCode(v string) *CreateResourceVswitchResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateResourceVswitchResponse) SetResultMsg(v string) *CreateResourceVswitchResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateResourceVswitchResponse) SetVSwitchId(v string) *CreateResourceVswitchResponse {
	s.VSwitchId = &v
	return s
}

type QueryResourceVswitchRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 交换机所属地域的identity
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// 要查询的交换机所属VPC的ID
	VpcId *string `json:"vpc_id,omitempty" xml:"vpc_id,omitempty"`
	// 要查询的交换机的ID
	VSwitchId *string `json:"v_switch_id,omitempty" xml:"v_switch_id,omitempty"`
}

func (s QueryResourceVswitchRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryResourceVswitchRequest) GoString() string {
	return s.String()
}

func (s *QueryResourceVswitchRequest) SetAuthToken(v string) *QueryResourceVswitchRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryResourceVswitchRequest) SetRegion(v string) *QueryResourceVswitchRequest {
	s.Region = &v
	return s
}

func (s *QueryResourceVswitchRequest) SetVpcId(v string) *QueryResourceVswitchRequest {
	s.VpcId = &v
	return s
}

func (s *QueryResourceVswitchRequest) SetVSwitchId(v string) *QueryResourceVswitchRequest {
	s.VSwitchId = &v
	return s
}

type QueryResourceVswitchResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 列表条目数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// 交换机的详细信息
	VSwitches []*VSwitch `json:"v_switches,omitempty" xml:"v_switches,omitempty" type:"Repeated"`
}

func (s QueryResourceVswitchResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryResourceVswitchResponse) GoString() string {
	return s.String()
}

func (s *QueryResourceVswitchResponse) SetReqMsgId(v string) *QueryResourceVswitchResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryResourceVswitchResponse) SetResultCode(v string) *QueryResourceVswitchResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryResourceVswitchResponse) SetResultMsg(v string) *QueryResourceVswitchResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryResourceVswitchResponse) SetTotalCount(v int64) *QueryResourceVswitchResponse {
	s.TotalCount = &v
	return s
}

func (s *QueryResourceVswitchResponse) SetVSwitches(v []*VSwitch) *QueryResourceVswitchResponse {
	s.VSwitches = v
	return s
}

type DeleteResourceVswitchRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 要删除的交换机的地域identity
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// 要删除的交换机所处专有网络的ID
	VpcId *string `json:"vpc_id,omitempty" xml:"vpc_id,omitempty" require:"true"`
	// 要删除的交换机的ID
	VSwitchId *string `json:"v_switch_id,omitempty" xml:"v_switch_id,omitempty" require:"true"`
}

func (s DeleteResourceVswitchRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceVswitchRequest) GoString() string {
	return s.String()
}

func (s *DeleteResourceVswitchRequest) SetAuthToken(v string) *DeleteResourceVswitchRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteResourceVswitchRequest) SetRegion(v string) *DeleteResourceVswitchRequest {
	s.Region = &v
	return s
}

func (s *DeleteResourceVswitchRequest) SetVpcId(v string) *DeleteResourceVswitchRequest {
	s.VpcId = &v
	return s
}

func (s *DeleteResourceVswitchRequest) SetVSwitchId(v string) *DeleteResourceVswitchRequest {
	s.VSwitchId = &v
	return s
}

type DeleteResourceVswitchResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 删除交换机是否成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteResourceVswitchResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceVswitchResponse) GoString() string {
	return s.String()
}

func (s *DeleteResourceVswitchResponse) SetReqMsgId(v string) *DeleteResourceVswitchResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteResourceVswitchResponse) SetResultCode(v string) *DeleteResourceVswitchResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteResourceVswitchResponse) SetResultMsg(v string) *DeleteResourceVswitchResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteResourceVswitchResponse) SetSuccess(v bool) *DeleteResourceVswitchResponse {
	s.Success = &v
	return s
}

type QueryResourceSecuritygroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// disable cache
	DisableCache *bool `json:"disable_cache,omitempty" xml:"disable_cache,omitempty"`
	// 地域identity
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// 安全组ID。
	SecurityGroupId *string `json:"security_group_id,omitempty" xml:"security_group_id,omitempty"`
	// 安全组所在的专有网络ID。
	VpcId *string `json:"vpc_id,omitempty" xml:"vpc_id,omitempty"`
}

func (s QueryResourceSecuritygroupRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryResourceSecuritygroupRequest) GoString() string {
	return s.String()
}

func (s *QueryResourceSecuritygroupRequest) SetAuthToken(v string) *QueryResourceSecuritygroupRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryResourceSecuritygroupRequest) SetDisableCache(v bool) *QueryResourceSecuritygroupRequest {
	s.DisableCache = &v
	return s
}

func (s *QueryResourceSecuritygroupRequest) SetRegion(v string) *QueryResourceSecuritygroupRequest {
	s.Region = &v
	return s
}

func (s *QueryResourceSecuritygroupRequest) SetSecurityGroupId(v string) *QueryResourceSecuritygroupRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *QueryResourceSecuritygroupRequest) SetVpcId(v string) *QueryResourceSecuritygroupRequest {
	s.VpcId = &v
	return s
}

type QueryResourceSecuritygroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 安全组详细信息。
	SecurityGroups []*SecurityGroup `json:"security_groups,omitempty" xml:"security_groups,omitempty" type:"Repeated"`
	// 安全组的总数。
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryResourceSecuritygroupResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryResourceSecuritygroupResponse) GoString() string {
	return s.String()
}

func (s *QueryResourceSecuritygroupResponse) SetReqMsgId(v string) *QueryResourceSecuritygroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryResourceSecuritygroupResponse) SetResultCode(v string) *QueryResourceSecuritygroupResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryResourceSecuritygroupResponse) SetResultMsg(v string) *QueryResourceSecuritygroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryResourceSecuritygroupResponse) SetSecurityGroups(v []*SecurityGroup) *QueryResourceSecuritygroupResponse {
	s.SecurityGroups = v
	return s
}

func (s *QueryResourceSecuritygroupResponse) SetTotalCount(v int64) *QueryResourceSecuritygroupResponse {
	s.TotalCount = &v
	return s
}

type ListMetaWorkspaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s ListMetaWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMetaWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *ListMetaWorkspaceRequest) SetAuthToken(v string) *ListMetaWorkspaceRequest {
	s.AuthToken = &v
	return s
}

type ListMetaWorkspaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 工作空间详细信息列表
	Data []*Workspace `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListMetaWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMetaWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *ListMetaWorkspaceResponse) SetReqMsgId(v string) *ListMetaWorkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListMetaWorkspaceResponse) SetResultCode(v string) *ListMetaWorkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *ListMetaWorkspaceResponse) SetResultMsg(v string) *ListMetaWorkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListMetaWorkspaceResponse) SetData(v []*Workspace) *ListMetaWorkspaceResponse {
	s.Data = v
	return s
}

type CreateResourceSecuritygroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 安全组描述信息。长度为2~256个英文或中文字符，不能以http://和https://开头。
	//
	// 默认值：空。
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 安全组入方向规则
	IngressRules []*SecurityGroupRule `json:"ingress_rules,omitempty" xml:"ingress_rules,omitempty" type:"Repeated"`
	// 安全组出方向规则
	EgressRules []*SecurityGroupRule `json:"egress_rules,omitempty" xml:"egress_rules,omitempty" type:"Repeated"`
	// 安全组名称。长度为2~128个英文或中文字符。必须以大小字母或中文开头，不能以 http://和https://开头。可以包含数字、半角冒号（:）、下划线（_）或者连字符（-）。默认值：空。
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 安全组所属地域identity
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// 安全组所属VPC ID。
	VpcId *string `json:"vpc_id,omitempty" xml:"vpc_id,omitempty" require:"true"`
	// workspace name
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s CreateResourceSecuritygroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceSecuritygroupRequest) GoString() string {
	return s.String()
}

func (s *CreateResourceSecuritygroupRequest) SetAuthToken(v string) *CreateResourceSecuritygroupRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateResourceSecuritygroupRequest) SetDescription(v string) *CreateResourceSecuritygroupRequest {
	s.Description = &v
	return s
}

func (s *CreateResourceSecuritygroupRequest) SetIngressRules(v []*SecurityGroupRule) *CreateResourceSecuritygroupRequest {
	s.IngressRules = v
	return s
}

func (s *CreateResourceSecuritygroupRequest) SetEgressRules(v []*SecurityGroupRule) *CreateResourceSecuritygroupRequest {
	s.EgressRules = v
	return s
}

func (s *CreateResourceSecuritygroupRequest) SetName(v string) *CreateResourceSecuritygroupRequest {
	s.Name = &v
	return s
}

func (s *CreateResourceSecuritygroupRequest) SetRegion(v string) *CreateResourceSecuritygroupRequest {
	s.Region = &v
	return s
}

func (s *CreateResourceSecuritygroupRequest) SetVpcId(v string) *CreateResourceSecuritygroupRequest {
	s.VpcId = &v
	return s
}

func (s *CreateResourceSecuritygroupRequest) SetWorkspace(v string) *CreateResourceSecuritygroupRequest {
	s.Workspace = &v
	return s
}

type CreateResourceSecuritygroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 安全组ID。
	SecurityGroupId *string `json:"security_group_id,omitempty" xml:"security_group_id,omitempty"`
}

func (s CreateResourceSecuritygroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceSecuritygroupResponse) GoString() string {
	return s.String()
}

func (s *CreateResourceSecuritygroupResponse) SetReqMsgId(v string) *CreateResourceSecuritygroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateResourceSecuritygroupResponse) SetResultCode(v string) *CreateResourceSecuritygroupResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateResourceSecuritygroupResponse) SetResultMsg(v string) *CreateResourceSecuritygroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateResourceSecuritygroupResponse) SetSecurityGroupId(v string) *CreateResourceSecuritygroupResponse {
	s.SecurityGroupId = &v
	return s
}

type DeleteResourceSecuritygroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 地域identity
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// 安全组ID。
	SecurityGroupId *string `json:"security_group_id,omitempty" xml:"security_group_id,omitempty" require:"true"`
	// 要删除的安全组所处专有网络的ID
	VpcId *string `json:"vpc_id,omitempty" xml:"vpc_id,omitempty" require:"true"`
}

func (s DeleteResourceSecuritygroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceSecuritygroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteResourceSecuritygroupRequest) SetAuthToken(v string) *DeleteResourceSecuritygroupRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteResourceSecuritygroupRequest) SetRegion(v string) *DeleteResourceSecuritygroupRequest {
	s.Region = &v
	return s
}

func (s *DeleteResourceSecuritygroupRequest) SetSecurityGroupId(v string) *DeleteResourceSecuritygroupRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *DeleteResourceSecuritygroupRequest) SetVpcId(v string) *DeleteResourceSecuritygroupRequest {
	s.VpcId = &v
	return s
}

type DeleteResourceSecuritygroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 删除安全组是否成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteResourceSecuritygroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceSecuritygroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteResourceSecuritygroupResponse) SetReqMsgId(v string) *DeleteResourceSecuritygroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteResourceSecuritygroupResponse) SetResultCode(v string) *DeleteResourceSecuritygroupResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteResourceSecuritygroupResponse) SetResultMsg(v string) *DeleteResourceSecuritygroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteResourceSecuritygroupResponse) SetSuccess(v bool) *DeleteResourceSecuritygroupResponse {
	s.Success = &v
	return s
}

type CreateResourceComputerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 实例所属的部署单元
	Cell *string `json:"cell,omitempty" xml:"cell,omitempty" require:"true"`
	// 数据盘的云盘种类。取值范围：
	//
	// cloud_efficiency：高效云盘
	// cloud_ssd：SSD云盘
	// ephemeral_ssd：本地SSD盘
	// cloud_essd：ESSD云盘
	// cloud：普通云盘
	// I/O优化实例的默认值为cloud_efficiency，非I/O优化实例的默认值为cloud。
	DataDiskCategory *string `json:"data_disk_category,omitempty" xml:"data_disk_category,omitempty"`
	// 数据盘的容量大小，n的取值范围为1~16，内存单位为GiB。取值范围：
	//
	// cloud_efficiency：20~32768
	// cloud_ssd：20~32768
	// cloud_essd：20~32768
	// ephemeral_ssd：5~800
	// cloud：5~2000
	// 该参数的取值必须大于等于参数SnapshotId指定的快照的大小。
	DataDiskSize *int64 `json:"data_disk_size,omitempty" xml:"data_disk_size,omitempty"`
	// 实例的描述信息
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// 云服务器的主机名。
	//
	// 点号（.）和短横线（-）不能作为首尾字符，更不能连续使用。
	// Windows实例：字符长度为2~15，不支持点号（.），不能全是数字。允许大小写英文字母、数字和短横线（-）。
	// 其他类型实例（Linux等）：字符长度为2~64，支持多个点号（.），点之间为一段，每段允许大小写英文字母、数字和短横线（-）。
	HostName *string `json:"host_name,omitempty" xml:"host_name,omitempty" require:"true"`
	// 镜像文件ID，启动实例时选择的镜像资源。
	ImageId *string `json:"image_id,omitempty" xml:"image_id,omitempty" require:"true"`
	// 实例的资源规格。
	InstanceType *string `json:"instance_type,omitempty" xml:"instance_type,omitempty" require:"true"`
	// 实例的密码。长度为8至30个字符，必须同时包含大小写英文字母、数字和特殊符号中的三类字符。
	Password *string `json:"password,omitempty" xml:"password,omitempty" require:"true"`
	// 实例所属的地域ID。
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty" require:"true"`
	// 系统盘的云盘种类。取值范围：
	//
	// cloud_efficiency：高效云盘
	// cloud_ssd：SSD云盘
	// cloud：普通云盘
	SystemDiskCategory *string `json:"system_disk_category,omitempty" xml:"system_disk_category,omitempty" require:"true"`
	// 系统盘大小，单位为GiB。取值范围：20~500
	//
	// 该参数的取值必须大于或者等于max{20, ImageSize}。
	SystemDiskSize *int64 `json:"system_disk_size,omitempty" xml:"system_disk_size,omitempty" require:"true"`
}

func (s CreateResourceComputerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceComputerRequest) GoString() string {
	return s.String()
}

func (s *CreateResourceComputerRequest) SetAuthToken(v string) *CreateResourceComputerRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateResourceComputerRequest) SetCell(v string) *CreateResourceComputerRequest {
	s.Cell = &v
	return s
}

func (s *CreateResourceComputerRequest) SetDataDiskCategory(v string) *CreateResourceComputerRequest {
	s.DataDiskCategory = &v
	return s
}

func (s *CreateResourceComputerRequest) SetDataDiskSize(v int64) *CreateResourceComputerRequest {
	s.DataDiskSize = &v
	return s
}

func (s *CreateResourceComputerRequest) SetDescription(v string) *CreateResourceComputerRequest {
	s.Description = &v
	return s
}

func (s *CreateResourceComputerRequest) SetHostName(v string) *CreateResourceComputerRequest {
	s.HostName = &v
	return s
}

func (s *CreateResourceComputerRequest) SetImageId(v string) *CreateResourceComputerRequest {
	s.ImageId = &v
	return s
}

func (s *CreateResourceComputerRequest) SetInstanceType(v string) *CreateResourceComputerRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateResourceComputerRequest) SetPassword(v string) *CreateResourceComputerRequest {
	s.Password = &v
	return s
}

func (s *CreateResourceComputerRequest) SetRegionId(v string) *CreateResourceComputerRequest {
	s.RegionId = &v
	return s
}

func (s *CreateResourceComputerRequest) SetSystemDiskCategory(v string) *CreateResourceComputerRequest {
	s.SystemDiskCategory = &v
	return s
}

func (s *CreateResourceComputerRequest) SetSystemDiskSize(v int64) *CreateResourceComputerRequest {
	s.SystemDiskSize = &v
	return s
}

type CreateResourceComputerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 实例ID。
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
	// 异步任务ID
	JobId *string `json:"job_id,omitempty" xml:"job_id,omitempty"`
	// 0表示正常，非0表示异常
	RetCode *int64 `json:"ret_code,omitempty" xml:"ret_code,omitempty"`
	// 错误描述信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s CreateResourceComputerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceComputerResponse) GoString() string {
	return s.String()
}

func (s *CreateResourceComputerResponse) SetReqMsgId(v string) *CreateResourceComputerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateResourceComputerResponse) SetResultCode(v string) *CreateResourceComputerResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateResourceComputerResponse) SetResultMsg(v string) *CreateResourceComputerResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateResourceComputerResponse) SetInstanceId(v string) *CreateResourceComputerResponse {
	s.InstanceId = &v
	return s
}

func (s *CreateResourceComputerResponse) SetJobId(v string) *CreateResourceComputerResponse {
	s.JobId = &v
	return s
}

func (s *CreateResourceComputerResponse) SetRetCode(v int64) *CreateResourceComputerResponse {
	s.RetCode = &v
	return s
}

func (s *CreateResourceComputerResponse) SetMessage(v string) *CreateResourceComputerResponse {
	s.Message = &v
	return s
}

type QueryResourceComputerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// iaas id
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// 逗号分隔的实例ID，最多支持100个
	InstanceIds []*string `json:"instance_ids,omitempty" xml:"instance_ids,omitempty" type:"Repeated"`
	// 实例名称，支持使用通配符*进行模糊搜索。
	InstanceName *string `json:"instance_name,omitempty" xml:"instance_name,omitempty"`
	// 实例的规格
	InstanceType *string `json:"instance_type,omitempty" xml:"instance_type,omitempty"`
	// 主机的内网ip，取值可以由多个IP组成一个JSON数组，最多支持100个IP，IP之间用半角逗号（,）隔开。
	PrivateIpAddresses []*string `json:"private_ip_addresses,omitempty" xml:"private_ip_addresses,omitempty" type:"Repeated"`
	// 供应商id
	ProviderId *string `json:"provider_id,omitempty" xml:"provider_id,omitempty"`
	// 实例所属的地域ID
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty" require:"true"`
	// 实例所在的企业资源组ID。
	ResourceGroupId *string `json:"resource_group_id,omitempty" xml:"resource_group_id,omitempty"`
	// 实例状态。取值范围：
	//
	// Running：运行中
	// Starting：启动中
	// Stopping：停止中
	// Stopped：已停止
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 主机所在工作空间
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryResourceComputerRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryResourceComputerRequest) GoString() string {
	return s.String()
}

func (s *QueryResourceComputerRequest) SetAuthToken(v string) *QueryResourceComputerRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryResourceComputerRequest) SetIaasId(v string) *QueryResourceComputerRequest {
	s.IaasId = &v
	return s
}

func (s *QueryResourceComputerRequest) SetInstanceIds(v []*string) *QueryResourceComputerRequest {
	s.InstanceIds = v
	return s
}

func (s *QueryResourceComputerRequest) SetInstanceName(v string) *QueryResourceComputerRequest {
	s.InstanceName = &v
	return s
}

func (s *QueryResourceComputerRequest) SetInstanceType(v string) *QueryResourceComputerRequest {
	s.InstanceType = &v
	return s
}

func (s *QueryResourceComputerRequest) SetPrivateIpAddresses(v []*string) *QueryResourceComputerRequest {
	s.PrivateIpAddresses = v
	return s
}

func (s *QueryResourceComputerRequest) SetProviderId(v string) *QueryResourceComputerRequest {
	s.ProviderId = &v
	return s
}

func (s *QueryResourceComputerRequest) SetRegionId(v string) *QueryResourceComputerRequest {
	s.RegionId = &v
	return s
}

func (s *QueryResourceComputerRequest) SetResourceGroupId(v string) *QueryResourceComputerRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *QueryResourceComputerRequest) SetStatus(v string) *QueryResourceComputerRequest {
	s.Status = &v
	return s
}

func (s *QueryResourceComputerRequest) SetWorkspace(v string) *QueryResourceComputerRequest {
	s.Workspace = &v
	return s
}

type QueryResourceComputerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询的实例集合
	Instances []*Computer `json:"instances,omitempty" xml:"instances,omitempty" type:"Repeated"`
	// 实例列表的页码。
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 输入时设置的每页行数。
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 请求ID
	RequestId *string `json:"request_id,omitempty" xml:"request_id,omitempty"`
	// 查询到的实例总数。
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryResourceComputerResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryResourceComputerResponse) GoString() string {
	return s.String()
}

func (s *QueryResourceComputerResponse) SetReqMsgId(v string) *QueryResourceComputerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryResourceComputerResponse) SetResultCode(v string) *QueryResourceComputerResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryResourceComputerResponse) SetResultMsg(v string) *QueryResourceComputerResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryResourceComputerResponse) SetInstances(v []*Computer) *QueryResourceComputerResponse {
	s.Instances = v
	return s
}

func (s *QueryResourceComputerResponse) SetPageNumber(v int64) *QueryResourceComputerResponse {
	s.PageNumber = &v
	return s
}

func (s *QueryResourceComputerResponse) SetPageSize(v int64) *QueryResourceComputerResponse {
	s.PageSize = &v
	return s
}

func (s *QueryResourceComputerResponse) SetRequestId(v string) *QueryResourceComputerResponse {
	s.RequestId = &v
	return s
}

func (s *QueryResourceComputerResponse) SetTotalCount(v int64) *QueryResourceComputerResponse {
	s.TotalCount = &v
	return s
}

type QueryResourceComputerspecRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 机器规格族
	InstanceTypeGroups *string `json:"instance_type_groups,omitempty" xml:"instance_type_groups,omitempty"`
	// CPU最大值
	MaxCpu *int64 `json:"max_cpu,omitempty" xml:"max_cpu,omitempty"`
	// 最大内存
	MaxMem *int64 `json:"max_mem,omitempty" xml:"max_mem,omitempty"`
	// CPU最小值
	MinCpu *int64 `json:"min_cpu,omitempty" xml:"min_cpu,omitempty"`
	// 最小内存
	MinMem *int64 `json:"min_mem,omitempty" xml:"min_mem,omitempty"`
}

func (s QueryResourceComputerspecRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryResourceComputerspecRequest) GoString() string {
	return s.String()
}

func (s *QueryResourceComputerspecRequest) SetAuthToken(v string) *QueryResourceComputerspecRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryResourceComputerspecRequest) SetInstanceTypeGroups(v string) *QueryResourceComputerspecRequest {
	s.InstanceTypeGroups = &v
	return s
}

func (s *QueryResourceComputerspecRequest) SetMaxCpu(v int64) *QueryResourceComputerspecRequest {
	s.MaxCpu = &v
	return s
}

func (s *QueryResourceComputerspecRequest) SetMaxMem(v int64) *QueryResourceComputerspecRequest {
	s.MaxMem = &v
	return s
}

func (s *QueryResourceComputerspecRequest) SetMinCpu(v int64) *QueryResourceComputerspecRequest {
	s.MinCpu = &v
	return s
}

func (s *QueryResourceComputerspecRequest) SetMinMem(v int64) *QueryResourceComputerspecRequest {
	s.MinMem = &v
	return s
}

type QueryResourceComputerspecResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 符合筛选条件的机器规格
	ComputerSpecs []*ComputerSpec `json:"computer_specs,omitempty" xml:"computer_specs,omitempty" type:"Repeated"`
	// 返回的数量
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryResourceComputerspecResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryResourceComputerspecResponse) GoString() string {
	return s.String()
}

func (s *QueryResourceComputerspecResponse) SetReqMsgId(v string) *QueryResourceComputerspecResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryResourceComputerspecResponse) SetResultCode(v string) *QueryResourceComputerspecResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryResourceComputerspecResponse) SetResultMsg(v string) *QueryResourceComputerspecResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryResourceComputerspecResponse) SetComputerSpecs(v []*ComputerSpec) *QueryResourceComputerspecResponse {
	s.ComputerSpecs = v
	return s
}

func (s *QueryResourceComputerspecResponse) SetTotalCount(v int64) *QueryResourceComputerspecResponse {
	s.TotalCount = &v
	return s
}

type DeleteResourceComputerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 要删除的机器ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 是否强制删除
	Force *bool `json:"force,omitempty" xml:"force,omitempty"`
}

func (s DeleteResourceComputerRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceComputerRequest) GoString() string {
	return s.String()
}

func (s *DeleteResourceComputerRequest) SetAuthToken(v string) *DeleteResourceComputerRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteResourceComputerRequest) SetInstanceId(v string) *DeleteResourceComputerRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteResourceComputerRequest) SetForce(v bool) *DeleteResourceComputerRequest {
	s.Force = &v
	return s
}

type DeleteResourceComputerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 0表示正常，非0表示异常
	RetCode *int64 `json:"ret_code,omitempty" xml:"ret_code,omitempty"`
	// 错误描述信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 异步执行任务id
	JobId *string `json:"job_id,omitempty" xml:"job_id,omitempty"`
}

func (s DeleteResourceComputerResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceComputerResponse) GoString() string {
	return s.String()
}

func (s *DeleteResourceComputerResponse) SetReqMsgId(v string) *DeleteResourceComputerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteResourceComputerResponse) SetResultCode(v string) *DeleteResourceComputerResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteResourceComputerResponse) SetResultMsg(v string) *DeleteResourceComputerResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteResourceComputerResponse) SetRetCode(v int64) *DeleteResourceComputerResponse {
	s.RetCode = &v
	return s
}

func (s *DeleteResourceComputerResponse) SetMessage(v string) *DeleteResourceComputerResponse {
	s.Message = &v
	return s
}

func (s *DeleteResourceComputerResponse) SetJobId(v string) *DeleteResourceComputerResponse {
	s.JobId = &v
	return s
}

type ReinitResourceComputerpasswordRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 需要修改的机器Id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 重置的密码
	Password *string `json:"password,omitempty" xml:"password,omitempty" require:"true"`
}

func (s ReinitResourceComputerpasswordRequest) String() string {
	return tea.Prettify(s)
}

func (s ReinitResourceComputerpasswordRequest) GoString() string {
	return s.String()
}

func (s *ReinitResourceComputerpasswordRequest) SetAuthToken(v string) *ReinitResourceComputerpasswordRequest {
	s.AuthToken = &v
	return s
}

func (s *ReinitResourceComputerpasswordRequest) SetInstanceId(v string) *ReinitResourceComputerpasswordRequest {
	s.InstanceId = &v
	return s
}

func (s *ReinitResourceComputerpasswordRequest) SetPassword(v string) *ReinitResourceComputerpasswordRequest {
	s.Password = &v
	return s
}

type ReinitResourceComputerpasswordResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 0表示正常，非0表示异常
	RetCode *int64 `json:"ret_code,omitempty" xml:"ret_code,omitempty"`
	// 错误描述信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 异步任务ID
	JobId *string `json:"job_id,omitempty" xml:"job_id,omitempty"`
}

func (s ReinitResourceComputerpasswordResponse) String() string {
	return tea.Prettify(s)
}

func (s ReinitResourceComputerpasswordResponse) GoString() string {
	return s.String()
}

func (s *ReinitResourceComputerpasswordResponse) SetReqMsgId(v string) *ReinitResourceComputerpasswordResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReinitResourceComputerpasswordResponse) SetResultCode(v string) *ReinitResourceComputerpasswordResponse {
	s.ResultCode = &v
	return s
}

func (s *ReinitResourceComputerpasswordResponse) SetResultMsg(v string) *ReinitResourceComputerpasswordResponse {
	s.ResultMsg = &v
	return s
}

func (s *ReinitResourceComputerpasswordResponse) SetRetCode(v int64) *ReinitResourceComputerpasswordResponse {
	s.RetCode = &v
	return s
}

func (s *ReinitResourceComputerpasswordResponse) SetMessage(v string) *ReinitResourceComputerpasswordResponse {
	s.Message = &v
	return s
}

func (s *ReinitResourceComputerpasswordResponse) SetJobId(v string) *ReinitResourceComputerpasswordResponse {
	s.JobId = &v
	return s
}

type StartResourceComputerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 机器id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s StartResourceComputerRequest) String() string {
	return tea.Prettify(s)
}

func (s StartResourceComputerRequest) GoString() string {
	return s.String()
}

func (s *StartResourceComputerRequest) SetAuthToken(v string) *StartResourceComputerRequest {
	s.AuthToken = &v
	return s
}

func (s *StartResourceComputerRequest) SetInstanceId(v string) *StartResourceComputerRequest {
	s.InstanceId = &v
	return s
}

type StartResourceComputerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 0表示正常，非0表示异常
	RetCode *int64 `json:"ret_code,omitempty" xml:"ret_code,omitempty"`
	// 异步任务执行id
	JobId *string `json:"job_id,omitempty" xml:"job_id,omitempty"`
	// 错误描述信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s StartResourceComputerResponse) String() string {
	return tea.Prettify(s)
}

func (s StartResourceComputerResponse) GoString() string {
	return s.String()
}

func (s *StartResourceComputerResponse) SetReqMsgId(v string) *StartResourceComputerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartResourceComputerResponse) SetResultCode(v string) *StartResourceComputerResponse {
	s.ResultCode = &v
	return s
}

func (s *StartResourceComputerResponse) SetResultMsg(v string) *StartResourceComputerResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartResourceComputerResponse) SetRetCode(v int64) *StartResourceComputerResponse {
	s.RetCode = &v
	return s
}

func (s *StartResourceComputerResponse) SetJobId(v string) *StartResourceComputerResponse {
	s.JobId = &v
	return s
}

func (s *StartResourceComputerResponse) SetMessage(v string) *StartResourceComputerResponse {
	s.Message = &v
	return s
}

type StopResourceComputerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 需要停止的机器id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 是否强制停止
	Force *bool `json:"force,omitempty" xml:"force,omitempty"`
}

func (s StopResourceComputerRequest) String() string {
	return tea.Prettify(s)
}

func (s StopResourceComputerRequest) GoString() string {
	return s.String()
}

func (s *StopResourceComputerRequest) SetAuthToken(v string) *StopResourceComputerRequest {
	s.AuthToken = &v
	return s
}

func (s *StopResourceComputerRequest) SetInstanceId(v string) *StopResourceComputerRequest {
	s.InstanceId = &v
	return s
}

func (s *StopResourceComputerRequest) SetForce(v bool) *StopResourceComputerRequest {
	s.Force = &v
	return s
}

type StopResourceComputerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 非0表示异常，0表示正常
	RetCode *int64 `json:"ret_code,omitempty" xml:"ret_code,omitempty"`
	// 异步执行的任务ID
	JobId *string `json:"job_id,omitempty" xml:"job_id,omitempty"`
	// 错误信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s StopResourceComputerResponse) String() string {
	return tea.Prettify(s)
}

func (s StopResourceComputerResponse) GoString() string {
	return s.String()
}

func (s *StopResourceComputerResponse) SetReqMsgId(v string) *StopResourceComputerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StopResourceComputerResponse) SetResultCode(v string) *StopResourceComputerResponse {
	s.ResultCode = &v
	return s
}

func (s *StopResourceComputerResponse) SetResultMsg(v string) *StopResourceComputerResponse {
	s.ResultMsg = &v
	return s
}

func (s *StopResourceComputerResponse) SetRetCode(v int64) *StopResourceComputerResponse {
	s.RetCode = &v
	return s
}

func (s *StopResourceComputerResponse) SetJobId(v string) *StopResourceComputerResponse {
	s.JobId = &v
	return s
}

func (s *StopResourceComputerResponse) SetMessage(v string) *StopResourceComputerResponse {
	s.Message = &v
	return s
}

type CreateSlsProjectRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 日志项目名称
	ProjectName *string `json:"project_name,omitempty" xml:"project_name,omitempty" require:"true"`
	// 区域id
	SlsRegionId *string `json:"sls_region_id,omitempty" xml:"sls_region_id,omitempty"`
	// 租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
}

func (s CreateSlsProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSlsProjectRequest) GoString() string {
	return s.String()
}

func (s *CreateSlsProjectRequest) SetAuthToken(v string) *CreateSlsProjectRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSlsProjectRequest) SetProjectName(v string) *CreateSlsProjectRequest {
	s.ProjectName = &v
	return s
}

func (s *CreateSlsProjectRequest) SetSlsRegionId(v string) *CreateSlsProjectRequest {
	s.SlsRegionId = &v
	return s
}

func (s *CreateSlsProjectRequest) SetTenantId(v string) *CreateSlsProjectRequest {
	s.TenantId = &v
	return s
}

type CreateSlsProjectResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建日志项目结果
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateSlsProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSlsProjectResponse) GoString() string {
	return s.String()
}

func (s *CreateSlsProjectResponse) SetReqMsgId(v string) *CreateSlsProjectResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSlsProjectResponse) SetResultCode(v string) *CreateSlsProjectResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSlsProjectResponse) SetResultMsg(v string) *CreateSlsProjectResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateSlsProjectResponse) SetData(v bool) *CreateSlsProjectResponse {
	s.Data = &v
	return s
}

type ListSlsProjectRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 区域id
	SlsRegionId *string `json:"sls_region_id,omitempty" xml:"sls_region_id,omitempty"`
	// 租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
}

func (s ListSlsProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSlsProjectRequest) GoString() string {
	return s.String()
}

func (s *ListSlsProjectRequest) SetAuthToken(v string) *ListSlsProjectRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSlsProjectRequest) SetSlsRegionId(v string) *ListSlsProjectRequest {
	s.SlsRegionId = &v
	return s
}

func (s *ListSlsProjectRequest) SetTenantId(v string) *ListSlsProjectRequest {
	s.TenantId = &v
	return s
}

type ListSlsProjectResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 日志项目数组
	Data []*SLSProject `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListSlsProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSlsProjectResponse) GoString() string {
	return s.String()
}

func (s *ListSlsProjectResponse) SetReqMsgId(v string) *ListSlsProjectResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSlsProjectResponse) SetResultCode(v string) *ListSlsProjectResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSlsProjectResponse) SetResultMsg(v string) *ListSlsProjectResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSlsProjectResponse) SetData(v []*SLSProject) *ListSlsProjectResponse {
	s.Data = v
	return s
}

type CreateSlsLogstoreRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 日志库名称，在Project下必须唯一
	LogstoreName *string `json:"logstore_name,omitempty" xml:"logstore_name,omitempty" require:"true"`
	// 日志项目名称
	ProjectName *string `json:"project_name,omitempty" xml:"project_name,omitempty" require:"true"`
	// 区域id
	SlsRegionId *string `json:"sls_region_id,omitempty" xml:"sls_region_id,omitempty"`
	// Shard个数，单位为个，范围为1~100
	ShardCount *int64 `json:"shard_count,omitempty" xml:"shard_count,omitempty" require:"true"`
	// 租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// 数据的保存时间，单位为天，范围1~3600。
	Ttl *int64 `json:"ttl,omitempty" xml:"ttl,omitempty" require:"true"`
	// 是否添加索引
	AddIndex *bool `json:"add_index,omitempty" xml:"add_index,omitempty"`
	// 是否自动分裂Shard。
	//
	// true：自动分裂Shard。
	// false：不自动分裂Shard。
	AutoSplit *bool `json:"auto_split,omitempty" xml:"auto_split,omitempty"`
	// 自动分裂时最大的Shard个数，最小值是1，最大值是64。
	MaxSplitShard *int64 `json:"max_split_shard,omitempty" xml:"max_split_shard,omitempty"`
}

func (s CreateSlsLogstoreRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSlsLogstoreRequest) GoString() string {
	return s.String()
}

func (s *CreateSlsLogstoreRequest) SetAuthToken(v string) *CreateSlsLogstoreRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSlsLogstoreRequest) SetLogstoreName(v string) *CreateSlsLogstoreRequest {
	s.LogstoreName = &v
	return s
}

func (s *CreateSlsLogstoreRequest) SetProjectName(v string) *CreateSlsLogstoreRequest {
	s.ProjectName = &v
	return s
}

func (s *CreateSlsLogstoreRequest) SetSlsRegionId(v string) *CreateSlsLogstoreRequest {
	s.SlsRegionId = &v
	return s
}

func (s *CreateSlsLogstoreRequest) SetShardCount(v int64) *CreateSlsLogstoreRequest {
	s.ShardCount = &v
	return s
}

func (s *CreateSlsLogstoreRequest) SetTenantId(v string) *CreateSlsLogstoreRequest {
	s.TenantId = &v
	return s
}

func (s *CreateSlsLogstoreRequest) SetTtl(v int64) *CreateSlsLogstoreRequest {
	s.Ttl = &v
	return s
}

func (s *CreateSlsLogstoreRequest) SetAddIndex(v bool) *CreateSlsLogstoreRequest {
	s.AddIndex = &v
	return s
}

func (s *CreateSlsLogstoreRequest) SetAutoSplit(v bool) *CreateSlsLogstoreRequest {
	s.AutoSplit = &v
	return s
}

func (s *CreateSlsLogstoreRequest) SetMaxSplitShard(v int64) *CreateSlsLogstoreRequest {
	s.MaxSplitShard = &v
	return s
}

type CreateSlsLogstoreResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 日志库创建结果
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateSlsLogstoreResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSlsLogstoreResponse) GoString() string {
	return s.String()
}

func (s *CreateSlsLogstoreResponse) SetReqMsgId(v string) *CreateSlsLogstoreResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSlsLogstoreResponse) SetResultCode(v string) *CreateSlsLogstoreResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSlsLogstoreResponse) SetResultMsg(v string) *CreateSlsLogstoreResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateSlsLogstoreResponse) SetData(v bool) *CreateSlsLogstoreResponse {
	s.Data = &v
	return s
}

type ListSlsLogstoreRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 用于请求的 Logstore 名称（支持部分匹配）。
	LogstoreName *string `json:"logstore_name,omitempty" xml:"logstore_name,omitempty"`
	// 日志项目名称
	ProjectName *string `json:"project_name,omitempty" xml:"project_name,omitempty" require:"true"`
	// 区域id
	SlsRegionId *string `json:"sls_region_id,omitempty" xml:"sls_region_id,omitempty"`
	// 租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
}

func (s ListSlsLogstoreRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSlsLogstoreRequest) GoString() string {
	return s.String()
}

func (s *ListSlsLogstoreRequest) SetAuthToken(v string) *ListSlsLogstoreRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSlsLogstoreRequest) SetLogstoreName(v string) *ListSlsLogstoreRequest {
	s.LogstoreName = &v
	return s
}

func (s *ListSlsLogstoreRequest) SetProjectName(v string) *ListSlsLogstoreRequest {
	s.ProjectName = &v
	return s
}

func (s *ListSlsLogstoreRequest) SetSlsRegionId(v string) *ListSlsLogstoreRequest {
	s.SlsRegionId = &v
	return s
}

func (s *ListSlsLogstoreRequest) SetTenantId(v string) *ListSlsLogstoreRequest {
	s.TenantId = &v
	return s
}

type ListSlsLogstoreResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 日志库名称列表
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListSlsLogstoreResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSlsLogstoreResponse) GoString() string {
	return s.String()
}

func (s *ListSlsLogstoreResponse) SetReqMsgId(v string) *ListSlsLogstoreResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSlsLogstoreResponse) SetResultCode(v string) *ListSlsLogstoreResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSlsLogstoreResponse) SetResultMsg(v string) *ListSlsLogstoreResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSlsLogstoreResponse) SetData(v []*string) *ListSlsLogstoreResponse {
	s.Data = v
	return s
}

type GetSlsLogstoreRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 日志库名称，在Project下必须唯一
	LogstoreName *string `json:"logstore_name,omitempty" xml:"logstore_name,omitempty" require:"true"`
	// 日志项目名称
	ProjectName *string `json:"project_name,omitempty" xml:"project_name,omitempty" require:"true"`
	// 区域id
	SlsRegionId *string `json:"sls_region_id,omitempty" xml:"sls_region_id,omitempty"`
	// 租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
}

func (s GetSlsLogstoreRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSlsLogstoreRequest) GoString() string {
	return s.String()
}

func (s *GetSlsLogstoreRequest) SetAuthToken(v string) *GetSlsLogstoreRequest {
	s.AuthToken = &v
	return s
}

func (s *GetSlsLogstoreRequest) SetLogstoreName(v string) *GetSlsLogstoreRequest {
	s.LogstoreName = &v
	return s
}

func (s *GetSlsLogstoreRequest) SetProjectName(v string) *GetSlsLogstoreRequest {
	s.ProjectName = &v
	return s
}

func (s *GetSlsLogstoreRequest) SetSlsRegionId(v string) *GetSlsLogstoreRequest {
	s.SlsRegionId = &v
	return s
}

func (s *GetSlsLogstoreRequest) SetTenantId(v string) *GetSlsLogstoreRequest {
	s.TenantId = &v
	return s
}

type GetSlsLogstoreResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 单个日志库信息
	Data *SLSLogStore `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetSlsLogstoreResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSlsLogstoreResponse) GoString() string {
	return s.String()
}

func (s *GetSlsLogstoreResponse) SetReqMsgId(v string) *GetSlsLogstoreResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetSlsLogstoreResponse) SetResultCode(v string) *GetSlsLogstoreResponse {
	s.ResultCode = &v
	return s
}

func (s *GetSlsLogstoreResponse) SetResultMsg(v string) *GetSlsLogstoreResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetSlsLogstoreResponse) SetData(v *SLSLogStore) *GetSlsLogstoreResponse {
	s.Data = v
	return s
}

type CreateSlsConfigRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 日志配置详情
	Config *SLSConfig `json:"config,omitempty" xml:"config,omitempty" require:"true"`
	// 日志项目名称
	ProjectName *string `json:"project_name,omitempty" xml:"project_name,omitempty" require:"true"`
	// 区域id
	SlsRegionId *string `json:"sls_region_id,omitempty" xml:"sls_region_id,omitempty"`
	// 租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
}

func (s CreateSlsConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSlsConfigRequest) GoString() string {
	return s.String()
}

func (s *CreateSlsConfigRequest) SetAuthToken(v string) *CreateSlsConfigRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSlsConfigRequest) SetConfig(v *SLSConfig) *CreateSlsConfigRequest {
	s.Config = v
	return s
}

func (s *CreateSlsConfigRequest) SetProjectName(v string) *CreateSlsConfigRequest {
	s.ProjectName = &v
	return s
}

func (s *CreateSlsConfigRequest) SetSlsRegionId(v string) *CreateSlsConfigRequest {
	s.SlsRegionId = &v
	return s
}

func (s *CreateSlsConfigRequest) SetTenantId(v string) *CreateSlsConfigRequest {
	s.TenantId = &v
	return s
}

type CreateSlsConfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建日志配置结果
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateSlsConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSlsConfigResponse) GoString() string {
	return s.String()
}

func (s *CreateSlsConfigResponse) SetReqMsgId(v string) *CreateSlsConfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSlsConfigResponse) SetResultCode(v string) *CreateSlsConfigResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSlsConfigResponse) SetResultMsg(v string) *CreateSlsConfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateSlsConfigResponse) SetData(v bool) *CreateSlsConfigResponse {
	s.Data = &v
	return s
}

type ListSlsConfigRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 日志项目名称
	ProjectName *string `json:"project_name,omitempty" xml:"project_name,omitempty" require:"true"`
	// 区域id
	SlsRegionId *string `json:"sls_region_id,omitempty" xml:"sls_region_id,omitempty"`
	// 租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
}

func (s ListSlsConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSlsConfigRequest) GoString() string {
	return s.String()
}

func (s *ListSlsConfigRequest) SetAuthToken(v string) *ListSlsConfigRequest {
	s.AuthToken = &v
	return s
}

func (s *ListSlsConfigRequest) SetProjectName(v string) *ListSlsConfigRequest {
	s.ProjectName = &v
	return s
}

func (s *ListSlsConfigRequest) SetSlsRegionId(v string) *ListSlsConfigRequest {
	s.SlsRegionId = &v
	return s
}

func (s *ListSlsConfigRequest) SetTenantId(v string) *ListSlsConfigRequest {
	s.TenantId = &v
	return s
}

type ListSlsConfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 日志配置名称列表
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListSlsConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSlsConfigResponse) GoString() string {
	return s.String()
}

func (s *ListSlsConfigResponse) SetReqMsgId(v string) *ListSlsConfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListSlsConfigResponse) SetResultCode(v string) *ListSlsConfigResponse {
	s.ResultCode = &v
	return s
}

func (s *ListSlsConfigResponse) SetResultMsg(v string) *ListSlsConfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListSlsConfigResponse) SetData(v []*string) *ListSlsConfigResponse {
	s.Data = v
	return s
}

type UpdateSlsConfigRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 要更新的日志配置详情
	Config *SLSConfig `json:"config,omitempty" xml:"config,omitempty" require:"true"`
	// 日志项目名称
	ProjectName *string `json:"project_name,omitempty" xml:"project_name,omitempty" require:"true"`
	// 区域id
	SlsRegionId *string `json:"sls_region_id,omitempty" xml:"sls_region_id,omitempty"`
	// 租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
}

func (s UpdateSlsConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSlsConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateSlsConfigRequest) SetAuthToken(v string) *UpdateSlsConfigRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSlsConfigRequest) SetConfig(v *SLSConfig) *UpdateSlsConfigRequest {
	s.Config = v
	return s
}

func (s *UpdateSlsConfigRequest) SetProjectName(v string) *UpdateSlsConfigRequest {
	s.ProjectName = &v
	return s
}

func (s *UpdateSlsConfigRequest) SetSlsRegionId(v string) *UpdateSlsConfigRequest {
	s.SlsRegionId = &v
	return s
}

func (s *UpdateSlsConfigRequest) SetTenantId(v string) *UpdateSlsConfigRequest {
	s.TenantId = &v
	return s
}

type UpdateSlsConfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 更新日志配置是否成功
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s UpdateSlsConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSlsConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateSlsConfigResponse) SetReqMsgId(v string) *UpdateSlsConfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSlsConfigResponse) SetResultCode(v string) *UpdateSlsConfigResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSlsConfigResponse) SetResultMsg(v string) *UpdateSlsConfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateSlsConfigResponse) SetData(v bool) *UpdateSlsConfigResponse {
	s.Data = &v
	return s
}

type DeleteSlsConfigRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 要删除的日志配置名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 日志项目名称
	ProjectName *string `json:"project_name,omitempty" xml:"project_name,omitempty" require:"true"`
	// 区域id
	SlsRegionId *string `json:"sls_region_id,omitempty" xml:"sls_region_id,omitempty"`
	// 租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
}

func (s DeleteSlsConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSlsConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteSlsConfigRequest) SetAuthToken(v string) *DeleteSlsConfigRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSlsConfigRequest) SetName(v string) *DeleteSlsConfigRequest {
	s.Name = &v
	return s
}

func (s *DeleteSlsConfigRequest) SetProjectName(v string) *DeleteSlsConfigRequest {
	s.ProjectName = &v
	return s
}

func (s *DeleteSlsConfigRequest) SetSlsRegionId(v string) *DeleteSlsConfigRequest {
	s.SlsRegionId = &v
	return s
}

func (s *DeleteSlsConfigRequest) SetTenantId(v string) *DeleteSlsConfigRequest {
	s.TenantId = &v
	return s
}

type DeleteSlsConfigResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 删除日志配置是否成功
	Data *bool `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DeleteSlsConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSlsConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteSlsConfigResponse) SetReqMsgId(v string) *DeleteSlsConfigResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSlsConfigResponse) SetResultCode(v string) *DeleteSlsConfigResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSlsConfigResponse) SetResultMsg(v string) *DeleteSlsConfigResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteSlsConfigResponse) SetData(v bool) *DeleteSlsConfigResponse {
	s.Data = &v
	return s
}

type QuerySlsLogRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 查询开始时间点（精度为秒，从 1970-1-1 00:00:00 UTC 计算起的秒数）。
	From *int64 `json:"from,omitempty" xml:"from,omitempty" require:"true"`
	// 请求返回的最大日志条数。取值范围为 0~100，默认值为 100。
	Line *int64 `json:"line,omitempty" xml:"line,omitempty"`
	// 需要查询日志的 Logstore 名称。
	LogstoreName *string `json:"logstore_name,omitempty" xml:"logstore_name,omitempty" require:"true"`
	// 请求返回日志的起始点。取值范围为 0 或正整数，默认值为 0。
	Offset *int64 `json:"offset,omitempty" xml:"offset,omitempty"`
	// 日志项目名称
	ProjectName *string `json:"project_name,omitempty" xml:"project_name,omitempty" require:"true"`
	// 查询表达式。关于查询表达式的详细语法，请参见 。
	Query *string `json:"query,omitempty" xml:"query,omitempty"`
	// 区域id
	SlsRegionId *string `json:"sls_region_id,omitempty" xml:"sls_region_id,omitempty"`
	// 是否按日志时间戳逆序返回日志，精确到分钟级别。true 表示逆序，false 表示顺序，默认值为 false。
	Reverse *bool `json:"reverse,omitempty" xml:"reverse,omitempty"`
	// 租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty"`
	// 查询结束时间点（精度为秒，从 1970-1-1 00:00:00 UTC 计算起的秒数）。
	To *int64 `json:"to,omitempty" xml:"to,omitempty" require:"true"`
	// 查询日志主题。
	Topic *string `json:"topic,omitempty" xml:"topic,omitempty"`
	// 查询 Logstore 数据的类型。在 GetLogs 接口中该参数必须为 log。
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s QuerySlsLogRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySlsLogRequest) GoString() string {
	return s.String()
}

func (s *QuerySlsLogRequest) SetAuthToken(v string) *QuerySlsLogRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySlsLogRequest) SetFrom(v int64) *QuerySlsLogRequest {
	s.From = &v
	return s
}

func (s *QuerySlsLogRequest) SetLine(v int64) *QuerySlsLogRequest {
	s.Line = &v
	return s
}

func (s *QuerySlsLogRequest) SetLogstoreName(v string) *QuerySlsLogRequest {
	s.LogstoreName = &v
	return s
}

func (s *QuerySlsLogRequest) SetOffset(v int64) *QuerySlsLogRequest {
	s.Offset = &v
	return s
}

func (s *QuerySlsLogRequest) SetProjectName(v string) *QuerySlsLogRequest {
	s.ProjectName = &v
	return s
}

func (s *QuerySlsLogRequest) SetQuery(v string) *QuerySlsLogRequest {
	s.Query = &v
	return s
}

func (s *QuerySlsLogRequest) SetSlsRegionId(v string) *QuerySlsLogRequest {
	s.SlsRegionId = &v
	return s
}

func (s *QuerySlsLogRequest) SetReverse(v bool) *QuerySlsLogRequest {
	s.Reverse = &v
	return s
}

func (s *QuerySlsLogRequest) SetTenantId(v string) *QuerySlsLogRequest {
	s.TenantId = &v
	return s
}

func (s *QuerySlsLogRequest) SetTo(v int64) *QuerySlsLogRequest {
	s.To = &v
	return s
}

func (s *QuerySlsLogRequest) SetTopic(v string) *QuerySlsLogRequest {
	s.Topic = &v
	return s
}

func (s *QuerySlsLogRequest) SetType(v string) *QuerySlsLogRequest {
	s.Type = &v
	return s
}

type QuerySlsLogResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// GetLogs的响应body是一个数组，数组中每个元素是一条日志结果
	Data []*SLSLogItem `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 页数
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
	// 分页大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 结果总数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s QuerySlsLogResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySlsLogResponse) GoString() string {
	return s.String()
}

func (s *QuerySlsLogResponse) SetReqMsgId(v string) *QuerySlsLogResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySlsLogResponse) SetResultCode(v string) *QuerySlsLogResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySlsLogResponse) SetResultMsg(v string) *QuerySlsLogResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySlsLogResponse) SetData(v []*SLSLogItem) *QuerySlsLogResponse {
	s.Data = v
	return s
}

func (s *QuerySlsLogResponse) SetPageNum(v int64) *QuerySlsLogResponse {
	s.PageNum = &v
	return s
}

func (s *QuerySlsLogResponse) SetPageSize(v int64) *QuerySlsLogResponse {
	s.PageSize = &v
	return s
}

func (s *QuerySlsLogResponse) SetTotal(v int64) *QuerySlsLogResponse {
	s.Total = &v
	return s
}

type BatchcreateResourceIngressrulesRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 安全组入口规则
	IngressRules []*SecurityGroupRule `json:"ingress_rules,omitempty" xml:"ingress_rules,omitempty" require:"true" type:"Repeated"`
	// region identity
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// 安全组id
	SecurityGroupId *string `json:"security_group_id,omitempty" xml:"security_group_id,omitempty" require:"true"`
}

func (s BatchcreateResourceIngressrulesRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateResourceIngressrulesRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateResourceIngressrulesRequest) SetAuthToken(v string) *BatchcreateResourceIngressrulesRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateResourceIngressrulesRequest) SetIngressRules(v []*SecurityGroupRule) *BatchcreateResourceIngressrulesRequest {
	s.IngressRules = v
	return s
}

func (s *BatchcreateResourceIngressrulesRequest) SetRegion(v string) *BatchcreateResourceIngressrulesRequest {
	s.Region = &v
	return s
}

func (s *BatchcreateResourceIngressrulesRequest) SetSecurityGroupId(v string) *BatchcreateResourceIngressrulesRequest {
	s.SecurityGroupId = &v
	return s
}

type BatchcreateResourceIngressrulesResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 安全组入方向规则是否添加成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s BatchcreateResourceIngressrulesResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateResourceIngressrulesResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateResourceIngressrulesResponse) SetReqMsgId(v string) *BatchcreateResourceIngressrulesResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateResourceIngressrulesResponse) SetResultCode(v string) *BatchcreateResourceIngressrulesResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateResourceIngressrulesResponse) SetResultMsg(v string) *BatchcreateResourceIngressrulesResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchcreateResourceIngressrulesResponse) SetSuccess(v bool) *BatchcreateResourceIngressrulesResponse {
	s.Success = &v
	return s
}

type BatchcreateResourceEgressrulesRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 安全组出方向规则
	EgressRules []*SecurityGroupRule `json:"egress_rules,omitempty" xml:"egress_rules,omitempty" require:"true" type:"Repeated"`
	// region identity
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// 安全组id
	SecurityGroupId *string `json:"security_group_id,omitempty" xml:"security_group_id,omitempty" require:"true"`
}

func (s BatchcreateResourceEgressrulesRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateResourceEgressrulesRequest) GoString() string {
	return s.String()
}

func (s *BatchcreateResourceEgressrulesRequest) SetAuthToken(v string) *BatchcreateResourceEgressrulesRequest {
	s.AuthToken = &v
	return s
}

func (s *BatchcreateResourceEgressrulesRequest) SetEgressRules(v []*SecurityGroupRule) *BatchcreateResourceEgressrulesRequest {
	s.EgressRules = v
	return s
}

func (s *BatchcreateResourceEgressrulesRequest) SetRegion(v string) *BatchcreateResourceEgressrulesRequest {
	s.Region = &v
	return s
}

func (s *BatchcreateResourceEgressrulesRequest) SetSecurityGroupId(v string) *BatchcreateResourceEgressrulesRequest {
	s.SecurityGroupId = &v
	return s
}

type BatchcreateResourceEgressrulesResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 安全组出方向规则是否添加成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s BatchcreateResourceEgressrulesResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchcreateResourceEgressrulesResponse) GoString() string {
	return s.String()
}

func (s *BatchcreateResourceEgressrulesResponse) SetReqMsgId(v string) *BatchcreateResourceEgressrulesResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BatchcreateResourceEgressrulesResponse) SetResultCode(v string) *BatchcreateResourceEgressrulesResponse {
	s.ResultCode = &v
	return s
}

func (s *BatchcreateResourceEgressrulesResponse) SetResultMsg(v string) *BatchcreateResourceEgressrulesResponse {
	s.ResultMsg = &v
	return s
}

func (s *BatchcreateResourceEgressrulesResponse) SetSuccess(v bool) *BatchcreateResourceEgressrulesResponse {
	s.Success = &v
	return s
}

type QueryLoadbalanceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app_ids
	AppIds []*string `json:"app_ids,omitempty" xml:"app_ids,omitempty" type:"Repeated"`
	// app_service_ids
	AppServiceIds []*string `json:"app_service_ids,omitempty" xml:"app_service_ids,omitempty" type:"Repeated"`
	// cluster_ids
	ClusterIds []*string `json:"cluster_ids,omitempty" xml:"cluster_ids,omitempty" type:"Repeated"`
	// cluster_mode
	ClusterMode *bool `json:"cluster_mode,omitempty" xml:"cluster_mode,omitempty"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// domains
	Domains []*string `json:"domains,omitempty" xml:"domains,omitempty" type:"Repeated"`
	// health_levels
	HealthLevels []*string `json:"health_levels,omitempty" xml:"health_levels,omitempty" type:"Repeated"`
	// iaas_ids
	IaasIds []*string `json:"iaas_ids,omitempty" xml:"iaas_ids,omitempty" type:"Repeated"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 网络类型
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// share_mode
	ShareMode *bool `json:"share_mode,omitempty" xml:"share_mode,omitempty"`
	// lb状态
	Statuses []*string `json:"statuses,omitempty" xml:"statuses,omitempty" type:"Repeated"`
	// vip地址
	VipAddresses []*string `json:"vip_addresses,omitempty" xml:"vip_addresses,omitempty" type:"Repeated"`
	// vip地址类型
	VipAddressType *string `json:"vip_address_type,omitempty" xml:"vip_address_type,omitempty"`
	// vip类型
	VipType *string `json:"vip_type,omitempty" xml:"vip_type,omitempty"`
	// vpc_ids
	VpcIds []*string `json:"vpc_ids,omitempty" xml:"vpc_ids,omitempty" type:"Repeated"`
	// vswitch_iaas_ids
	VswitchIaasIds []*string `json:"vswitch_iaas_ids,omitempty" xml:"vswitch_iaas_ids,omitempty" type:"Repeated"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s QueryLoadbalanceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLoadbalanceRequest) GoString() string {
	return s.String()
}

func (s *QueryLoadbalanceRequest) SetAuthToken(v string) *QueryLoadbalanceRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLoadbalanceRequest) SetAppIds(v []*string) *QueryLoadbalanceRequest {
	s.AppIds = v
	return s
}

func (s *QueryLoadbalanceRequest) SetAppServiceIds(v []*string) *QueryLoadbalanceRequest {
	s.AppServiceIds = v
	return s
}

func (s *QueryLoadbalanceRequest) SetClusterIds(v []*string) *QueryLoadbalanceRequest {
	s.ClusterIds = v
	return s
}

func (s *QueryLoadbalanceRequest) SetClusterMode(v bool) *QueryLoadbalanceRequest {
	s.ClusterMode = &v
	return s
}

func (s *QueryLoadbalanceRequest) SetCurrentPage(v int64) *QueryLoadbalanceRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryLoadbalanceRequest) SetDomains(v []*string) *QueryLoadbalanceRequest {
	s.Domains = v
	return s
}

func (s *QueryLoadbalanceRequest) SetHealthLevels(v []*string) *QueryLoadbalanceRequest {
	s.HealthLevels = v
	return s
}

func (s *QueryLoadbalanceRequest) SetIaasIds(v []*string) *QueryLoadbalanceRequest {
	s.IaasIds = v
	return s
}

func (s *QueryLoadbalanceRequest) SetName(v string) *QueryLoadbalanceRequest {
	s.Name = &v
	return s
}

func (s *QueryLoadbalanceRequest) SetNetworkType(v string) *QueryLoadbalanceRequest {
	s.NetworkType = &v
	return s
}

func (s *QueryLoadbalanceRequest) SetPageSize(v int64) *QueryLoadbalanceRequest {
	s.PageSize = &v
	return s
}

func (s *QueryLoadbalanceRequest) SetShareMode(v bool) *QueryLoadbalanceRequest {
	s.ShareMode = &v
	return s
}

func (s *QueryLoadbalanceRequest) SetStatuses(v []*string) *QueryLoadbalanceRequest {
	s.Statuses = v
	return s
}

func (s *QueryLoadbalanceRequest) SetVipAddresses(v []*string) *QueryLoadbalanceRequest {
	s.VipAddresses = v
	return s
}

func (s *QueryLoadbalanceRequest) SetVipAddressType(v string) *QueryLoadbalanceRequest {
	s.VipAddressType = &v
	return s
}

func (s *QueryLoadbalanceRequest) SetVipType(v string) *QueryLoadbalanceRequest {
	s.VipType = &v
	return s
}

func (s *QueryLoadbalanceRequest) SetVpcIds(v []*string) *QueryLoadbalanceRequest {
	s.VpcIds = v
	return s
}

func (s *QueryLoadbalanceRequest) SetVswitchIaasIds(v []*string) *QueryLoadbalanceRequest {
	s.VswitchIaasIds = v
	return s
}

func (s *QueryLoadbalanceRequest) SetWorkspace(v string) *QueryLoadbalanceRequest {
	s.Workspace = &v
	return s
}

type QueryLoadbalanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回的lb
	Data []*LoadBalancer `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// total_count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryLoadbalanceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLoadbalanceResponse) GoString() string {
	return s.String()
}

func (s *QueryLoadbalanceResponse) SetReqMsgId(v string) *QueryLoadbalanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLoadbalanceResponse) SetResultCode(v string) *QueryLoadbalanceResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLoadbalanceResponse) SetResultMsg(v string) *QueryLoadbalanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLoadbalanceResponse) SetData(v []*LoadBalancer) *QueryLoadbalanceResponse {
	s.Data = v
	return s
}

func (s *QueryLoadbalanceResponse) SetTotalCount(v int64) *QueryLoadbalanceResponse {
	s.TotalCount = &v
	return s
}

func (s *QueryLoadbalanceResponse) SetCurrentPage(v int64) *QueryLoadbalanceResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryLoadbalanceResponse) SetPageSize(v int64) *QueryLoadbalanceResponse {
	s.PageSize = &v
	return s
}

type GetLoadbalanceHealthRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// lb_id
	LbId *string `json:"lb_id,omitempty" xml:"lb_id,omitempty" require:"true"`
}

func (s GetLoadbalanceHealthRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLoadbalanceHealthRequest) GoString() string {
	return s.String()
}

func (s *GetLoadbalanceHealthRequest) SetAuthToken(v string) *GetLoadbalanceHealthRequest {
	s.AuthToken = &v
	return s
}

func (s *GetLoadbalanceHealthRequest) SetLbId(v string) *GetLoadbalanceHealthRequest {
	s.LbId = &v
	return s
}

type GetLoadbalanceHealthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// statuses
	Data []*LoadBalanceHealthStatus `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s GetLoadbalanceHealthResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLoadbalanceHealthResponse) GoString() string {
	return s.String()
}

func (s *GetLoadbalanceHealthResponse) SetReqMsgId(v string) *GetLoadbalanceHealthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetLoadbalanceHealthResponse) SetResultCode(v string) *GetLoadbalanceHealthResponse {
	s.ResultCode = &v
	return s
}

func (s *GetLoadbalanceHealthResponse) SetResultMsg(v string) *GetLoadbalanceHealthResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetLoadbalanceHealthResponse) SetData(v []*LoadBalanceHealthStatus) *GetLoadbalanceHealthResponse {
	s.Data = v
	return s
}

type AllLoadbalanceViptypeRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s AllLoadbalanceViptypeRequest) String() string {
	return tea.Prettify(s)
}

func (s AllLoadbalanceViptypeRequest) GoString() string {
	return s.String()
}

func (s *AllLoadbalanceViptypeRequest) SetAuthToken(v string) *AllLoadbalanceViptypeRequest {
	s.AuthToken = &v
	return s
}

type AllLoadbalanceViptypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// vip_types
	Data []*VipType `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s AllLoadbalanceViptypeResponse) String() string {
	return tea.Prettify(s)
}

func (s AllLoadbalanceViptypeResponse) GoString() string {
	return s.String()
}

func (s *AllLoadbalanceViptypeResponse) SetReqMsgId(v string) *AllLoadbalanceViptypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllLoadbalanceViptypeResponse) SetResultCode(v string) *AllLoadbalanceViptypeResponse {
	s.ResultCode = &v
	return s
}

func (s *AllLoadbalanceViptypeResponse) SetResultMsg(v string) *AllLoadbalanceViptypeResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllLoadbalanceViptypeResponse) SetData(v []*VipType) *AllLoadbalanceViptypeResponse {
	s.Data = v
	return s
}

type AllLoadbalanceClusterRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
	// zone_id
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty"`
}

func (s AllLoadbalanceClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s AllLoadbalanceClusterRequest) GoString() string {
	return s.String()
}

func (s *AllLoadbalanceClusterRequest) SetAuthToken(v string) *AllLoadbalanceClusterRequest {
	s.AuthToken = &v
	return s
}

func (s *AllLoadbalanceClusterRequest) SetWorkspace(v string) *AllLoadbalanceClusterRequest {
	s.Workspace = &v
	return s
}

func (s *AllLoadbalanceClusterRequest) SetZoneId(v string) *AllLoadbalanceClusterRequest {
	s.ZoneId = &v
	return s
}

type AllLoadbalanceClusterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*LbCluster `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s AllLoadbalanceClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s AllLoadbalanceClusterResponse) GoString() string {
	return s.String()
}

func (s *AllLoadbalanceClusterResponse) SetReqMsgId(v string) *AllLoadbalanceClusterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllLoadbalanceClusterResponse) SetResultCode(v string) *AllLoadbalanceClusterResponse {
	s.ResultCode = &v
	return s
}

func (s *AllLoadbalanceClusterResponse) SetResultMsg(v string) *AllLoadbalanceClusterResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllLoadbalanceClusterResponse) SetData(v []*LbCluster) *AllLoadbalanceClusterResponse {
	s.Data = v
	return s
}

type QueryVpcRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// vpc id
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// workspace name
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryVpcRequest) GoString() string {
	return s.String()
}

func (s *QueryVpcRequest) SetAuthToken(v string) *QueryVpcRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryVpcRequest) SetId(v string) *QueryVpcRequest {
	s.Id = &v
	return s
}

func (s *QueryVpcRequest) SetWorkspace(v string) *QueryVpcRequest {
	s.Workspace = &v
	return s
}

type QueryVpcResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// vpc detail info
	Data *VpcVO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryVpcResponse) GoString() string {
	return s.String()
}

func (s *QueryVpcResponse) SetReqMsgId(v string) *QueryVpcResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryVpcResponse) SetResultCode(v string) *QueryVpcResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryVpcResponse) SetResultMsg(v string) *QueryVpcResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryVpcResponse) SetData(v *VpcVO) *QueryVpcResponse {
	s.Data = v
	return s
}

type ListVpcImportRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// region name
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// workspace name
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s ListVpcImportRequest) String() string {
	return tea.Prettify(s)
}

func (s ListVpcImportRequest) GoString() string {
	return s.String()
}

func (s *ListVpcImportRequest) SetAuthToken(v string) *ListVpcImportRequest {
	s.AuthToken = &v
	return s
}

func (s *ListVpcImportRequest) SetRegion(v string) *ListVpcImportRequest {
	s.Region = &v
	return s
}

func (s *ListVpcImportRequest) SetWorkspace(v string) *ListVpcImportRequest {
	s.Workspace = &v
	return s
}

type ListVpcImportResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// vpc import infos
	Data []*VpcImport `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListVpcImportResponse) String() string {
	return tea.Prettify(s)
}

func (s ListVpcImportResponse) GoString() string {
	return s.String()
}

func (s *ListVpcImportResponse) SetReqMsgId(v string) *ListVpcImportResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListVpcImportResponse) SetResultCode(v string) *ListVpcImportResponse {
	s.ResultCode = &v
	return s
}

func (s *ListVpcImportResponse) SetResultMsg(v string) *ListVpcImportResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListVpcImportResponse) SetData(v []*VpcImport) *ListVpcImportResponse {
	s.Data = v
	return s
}

type ListVpcCidrblockRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// region
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
}

func (s ListVpcCidrblockRequest) String() string {
	return tea.Prettify(s)
}

func (s ListVpcCidrblockRequest) GoString() string {
	return s.String()
}

func (s *ListVpcCidrblockRequest) SetAuthToken(v string) *ListVpcCidrblockRequest {
	s.AuthToken = &v
	return s
}

func (s *ListVpcCidrblockRequest) SetRegion(v string) *ListVpcCidrblockRequest {
	s.Region = &v
	return s
}

type ListVpcCidrblockResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// cidr block list
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListVpcCidrblockResponse) String() string {
	return tea.Prettify(s)
}

func (s ListVpcCidrblockResponse) GoString() string {
	return s.String()
}

func (s *ListVpcCidrblockResponse) SetReqMsgId(v string) *ListVpcCidrblockResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListVpcCidrblockResponse) SetResultCode(v string) *ListVpcCidrblockResponse {
	s.ResultCode = &v
	return s
}

func (s *ListVpcCidrblockResponse) SetResultMsg(v string) *ListVpcCidrblockResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListVpcCidrblockResponse) SetData(v []*string) *ListVpcCidrblockResponse {
	s.Data = v
	return s
}

type QueryVpcVswitchRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// vpc paas id
	VpcId *string `json:"vpc_id,omitempty" xml:"vpc_id,omitempty" require:"true"`
	// vswitch iaas id
	VswitchId *string `json:"vswitch_id,omitempty" xml:"vswitch_id,omitempty"`
	// 起始页，1为起点
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// 最大50，默认值50
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryVpcVswitchRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryVpcVswitchRequest) GoString() string {
	return s.String()
}

func (s *QueryVpcVswitchRequest) SetAuthToken(v string) *QueryVpcVswitchRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryVpcVswitchRequest) SetVpcId(v string) *QueryVpcVswitchRequest {
	s.VpcId = &v
	return s
}

func (s *QueryVpcVswitchRequest) SetVswitchId(v string) *QueryVpcVswitchRequest {
	s.VswitchId = &v
	return s
}

func (s *QueryVpcVswitchRequest) SetPageNumber(v int64) *QueryVpcVswitchRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryVpcVswitchRequest) SetPageSize(v int64) *QueryVpcVswitchRequest {
	s.PageSize = &v
	return s
}

type QueryVpcVswitchResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// vswitch detail infos
	Data []*VSwitchVO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 总数
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryVpcVswitchResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryVpcVswitchResponse) GoString() string {
	return s.String()
}

func (s *QueryVpcVswitchResponse) SetReqMsgId(v string) *QueryVpcVswitchResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryVpcVswitchResponse) SetResultCode(v string) *QueryVpcVswitchResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryVpcVswitchResponse) SetResultMsg(v string) *QueryVpcVswitchResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryVpcVswitchResponse) SetData(v []*VSwitchVO) *QueryVpcVswitchResponse {
	s.Data = v
	return s
}

func (s *QueryVpcVswitchResponse) SetTotalCount(v int64) *QueryVpcVswitchResponse {
	s.TotalCount = &v
	return s
}

type QueryVpcVroutertableRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// vpc id
	VpcId *string `json:"vpc_id,omitempty" xml:"vpc_id,omitempty" require:"true"`
	// 路由器id
	VRouterId *string `json:"v_router_id,omitempty" xml:"v_router_id,omitempty" require:"true"`
	// workspace name
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s QueryVpcVroutertableRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryVpcVroutertableRequest) GoString() string {
	return s.String()
}

func (s *QueryVpcVroutertableRequest) SetAuthToken(v string) *QueryVpcVroutertableRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryVpcVroutertableRequest) SetVpcId(v string) *QueryVpcVroutertableRequest {
	s.VpcId = &v
	return s
}

func (s *QueryVpcVroutertableRequest) SetVRouterId(v string) *QueryVpcVroutertableRequest {
	s.VRouterId = &v
	return s
}

func (s *QueryVpcVroutertableRequest) SetWorkspace(v string) *QueryVpcVroutertableRequest {
	s.Workspace = &v
	return s
}

type QueryVpcVroutertableResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	//
	// 路由表的详细信息。
	Data []*RouteTable `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryVpcVroutertableResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryVpcVroutertableResponse) GoString() string {
	return s.String()
}

func (s *QueryVpcVroutertableResponse) SetReqMsgId(v string) *QueryVpcVroutertableResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryVpcVroutertableResponse) SetResultCode(v string) *QueryVpcVroutertableResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryVpcVroutertableResponse) SetResultMsg(v string) *QueryVpcVroutertableResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryVpcVroutertableResponse) SetData(v []*RouteTable) *QueryVpcVroutertableResponse {
	s.Data = v
	return s
}

type GetLoadbalanceRuleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// rule id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s GetLoadbalanceRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLoadbalanceRuleRequest) GoString() string {
	return s.String()
}

func (s *GetLoadbalanceRuleRequest) SetAuthToken(v string) *GetLoadbalanceRuleRequest {
	s.AuthToken = &v
	return s
}

func (s *GetLoadbalanceRuleRequest) SetId(v string) *GetLoadbalanceRuleRequest {
	s.Id = &v
	return s
}

func (s *GetLoadbalanceRuleRequest) SetWorkspace(v string) *GetLoadbalanceRuleRequest {
	s.Workspace = &v
	return s
}

type GetLoadbalanceRuleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// rule
	Data *LoadBalancerRule `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetLoadbalanceRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLoadbalanceRuleResponse) GoString() string {
	return s.String()
}

func (s *GetLoadbalanceRuleResponse) SetReqMsgId(v string) *GetLoadbalanceRuleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetLoadbalanceRuleResponse) SetResultCode(v string) *GetLoadbalanceRuleResponse {
	s.ResultCode = &v
	return s
}

func (s *GetLoadbalanceRuleResponse) SetResultMsg(v string) *GetLoadbalanceRuleResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetLoadbalanceRuleResponse) SetData(v *LoadBalancerRule) *GetLoadbalanceRuleResponse {
	s.Data = v
	return s
}

type QueryLoadbalanceRuleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app_ids
	AppIds []*string `json:"app_ids,omitempty" xml:"app_ids,omitempty" type:"Repeated"`
	// cookies
	Cookies []*string `json:"cookies,omitempty" xml:"cookies,omitempty" type:"Repeated"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// domains
	Domains []*string `json:"domains,omitempty" xml:"domains,omitempty" type:"Repeated"`
	// domain_urls
	DomainUrls []*string `json:"domain_urls,omitempty" xml:"domain_urls,omitempty" type:"Repeated"`
	// health_monitor_ids
	HealthMonitorIds []*string `json:"health_monitor_ids,omitempty" xml:"health_monitor_ids,omitempty" type:"Repeated"`
	// listener_ports
	ListenerPorts []*int64 `json:"listener_ports,omitempty" xml:"listener_ports,omitempty" type:"Repeated"`
	// loadbalancer_ids
	LoadbalancerIds []*string `json:"loadbalancer_ids,omitempty" xml:"loadbalancer_ids,omitempty" type:"Repeated"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// statuses
	Statuses []*string `json:"statuses,omitempty" xml:"statuses,omitempty" type:"Repeated"`
	// urls
	Urls []*string `json:"urls,omitempty" xml:"urls,omitempty" type:"Repeated"`
	// vcomputer_group_ids
	VcomputerGroupIds []*string `json:"vcomputer_group_ids,omitempty" xml:"vcomputer_group_ids,omitempty" type:"Repeated"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s QueryLoadbalanceRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLoadbalanceRuleRequest) GoString() string {
	return s.String()
}

func (s *QueryLoadbalanceRuleRequest) SetAuthToken(v string) *QueryLoadbalanceRuleRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLoadbalanceRuleRequest) SetAppIds(v []*string) *QueryLoadbalanceRuleRequest {
	s.AppIds = v
	return s
}

func (s *QueryLoadbalanceRuleRequest) SetCookies(v []*string) *QueryLoadbalanceRuleRequest {
	s.Cookies = v
	return s
}

func (s *QueryLoadbalanceRuleRequest) SetCurrentPage(v int64) *QueryLoadbalanceRuleRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryLoadbalanceRuleRequest) SetDomains(v []*string) *QueryLoadbalanceRuleRequest {
	s.Domains = v
	return s
}

func (s *QueryLoadbalanceRuleRequest) SetDomainUrls(v []*string) *QueryLoadbalanceRuleRequest {
	s.DomainUrls = v
	return s
}

func (s *QueryLoadbalanceRuleRequest) SetHealthMonitorIds(v []*string) *QueryLoadbalanceRuleRequest {
	s.HealthMonitorIds = v
	return s
}

func (s *QueryLoadbalanceRuleRequest) SetListenerPorts(v []*int64) *QueryLoadbalanceRuleRequest {
	s.ListenerPorts = v
	return s
}

func (s *QueryLoadbalanceRuleRequest) SetLoadbalancerIds(v []*string) *QueryLoadbalanceRuleRequest {
	s.LoadbalancerIds = v
	return s
}

func (s *QueryLoadbalanceRuleRequest) SetPageSize(v int64) *QueryLoadbalanceRuleRequest {
	s.PageSize = &v
	return s
}

func (s *QueryLoadbalanceRuleRequest) SetStatuses(v []*string) *QueryLoadbalanceRuleRequest {
	s.Statuses = v
	return s
}

func (s *QueryLoadbalanceRuleRequest) SetUrls(v []*string) *QueryLoadbalanceRuleRequest {
	s.Urls = v
	return s
}

func (s *QueryLoadbalanceRuleRequest) SetVcomputerGroupIds(v []*string) *QueryLoadbalanceRuleRequest {
	s.VcomputerGroupIds = v
	return s
}

func (s *QueryLoadbalanceRuleRequest) SetWorkspace(v string) *QueryLoadbalanceRuleRequest {
	s.Workspace = &v
	return s
}

type QueryLoadbalanceRuleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// rules
	Data []*LoadBalancerRule `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryLoadbalanceRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLoadbalanceRuleResponse) GoString() string {
	return s.String()
}

func (s *QueryLoadbalanceRuleResponse) SetReqMsgId(v string) *QueryLoadbalanceRuleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLoadbalanceRuleResponse) SetResultCode(v string) *QueryLoadbalanceRuleResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLoadbalanceRuleResponse) SetResultMsg(v string) *QueryLoadbalanceRuleResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLoadbalanceRuleResponse) SetData(v []*LoadBalancerRule) *QueryLoadbalanceRuleResponse {
	s.Data = v
	return s
}

type GetLoadbalanceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s GetLoadbalanceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLoadbalanceRequest) GoString() string {
	return s.String()
}

func (s *GetLoadbalanceRequest) SetAuthToken(v string) *GetLoadbalanceRequest {
	s.AuthToken = &v
	return s
}

func (s *GetLoadbalanceRequest) SetId(v string) *GetLoadbalanceRequest {
	s.Id = &v
	return s
}

type GetLoadbalanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *LoadBalancer `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetLoadbalanceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLoadbalanceResponse) GoString() string {
	return s.String()
}

func (s *GetLoadbalanceResponse) SetReqMsgId(v string) *GetLoadbalanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetLoadbalanceResponse) SetResultCode(v string) *GetLoadbalanceResponse {
	s.ResultCode = &v
	return s
}

func (s *GetLoadbalanceResponse) SetResultMsg(v string) *GetLoadbalanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetLoadbalanceResponse) SetData(v *LoadBalancer) *GetLoadbalanceResponse {
	s.Data = v
	return s
}

type AllLoadbalanceMountRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// loadbalance_id
	LoadbalanceId *string `json:"loadbalance_id,omitempty" xml:"loadbalance_id,omitempty" require:"true"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s AllLoadbalanceMountRequest) String() string {
	return tea.Prettify(s)
}

func (s AllLoadbalanceMountRequest) GoString() string {
	return s.String()
}

func (s *AllLoadbalanceMountRequest) SetAuthToken(v string) *AllLoadbalanceMountRequest {
	s.AuthToken = &v
	return s
}

func (s *AllLoadbalanceMountRequest) SetLoadbalanceId(v string) *AllLoadbalanceMountRequest {
	s.LoadbalanceId = &v
	return s
}

func (s *AllLoadbalanceMountRequest) SetWorkspace(v string) *AllLoadbalanceMountRequest {
	s.Workspace = &v
	return s
}

type AllLoadbalanceMountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*MountComputer `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s AllLoadbalanceMountResponse) String() string {
	return tea.Prettify(s)
}

func (s AllLoadbalanceMountResponse) GoString() string {
	return s.String()
}

func (s *AllLoadbalanceMountResponse) SetReqMsgId(v string) *AllLoadbalanceMountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllLoadbalanceMountResponse) SetResultCode(v string) *AllLoadbalanceMountResponse {
	s.ResultCode = &v
	return s
}

func (s *AllLoadbalanceMountResponse) SetResultMsg(v string) *AllLoadbalanceMountResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllLoadbalanceMountResponse) SetData(v []*MountComputer) *AllLoadbalanceMountResponse {
	s.Data = v
	return s
}

type QueryLoadbalanceMountRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app_ids
	AppIds []*string `json:"app_ids,omitempty" xml:"app_ids,omitempty" type:"Repeated"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// domains
	Domains []*string `json:"domains,omitempty" xml:"domains,omitempty" type:"Repeated"`
	// iaas_ids_exclude
	IaasIdsExclude []*string `json:"iaas_ids_exclude,omitempty" xml:"iaas_ids_exclude,omitempty" type:"Repeated"`
	// initialized
	Initialized *bool `json:"initialized,omitempty" xml:"initialized,omitempty"`
	// loadbalance_ids
	LoadbalanceIds []*string `json:"loadbalance_ids,omitempty" xml:"loadbalance_ids,omitempty" require:"true" type:"Repeated"`
	// mounted
	Mounted *bool `json:"mounted,omitempty" xml:"mounted,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// statuses
	Statuses []*string `json:"statuses,omitempty" xml:"statuses,omitempty" type:"Repeated"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
	// region_ids
	RegionIds []*string `json:"region_ids,omitempty" xml:"region_ids,omitempty" type:"Repeated"`
	// zone_ids
	ZoneIds []*string `json:"zone_ids,omitempty" xml:"zone_ids,omitempty" type:"Repeated"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s QueryLoadbalanceMountRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLoadbalanceMountRequest) GoString() string {
	return s.String()
}

func (s *QueryLoadbalanceMountRequest) SetAuthToken(v string) *QueryLoadbalanceMountRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLoadbalanceMountRequest) SetAppIds(v []*string) *QueryLoadbalanceMountRequest {
	s.AppIds = v
	return s
}

func (s *QueryLoadbalanceMountRequest) SetCurrentPage(v int64) *QueryLoadbalanceMountRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryLoadbalanceMountRequest) SetDomains(v []*string) *QueryLoadbalanceMountRequest {
	s.Domains = v
	return s
}

func (s *QueryLoadbalanceMountRequest) SetIaasIdsExclude(v []*string) *QueryLoadbalanceMountRequest {
	s.IaasIdsExclude = v
	return s
}

func (s *QueryLoadbalanceMountRequest) SetInitialized(v bool) *QueryLoadbalanceMountRequest {
	s.Initialized = &v
	return s
}

func (s *QueryLoadbalanceMountRequest) SetLoadbalanceIds(v []*string) *QueryLoadbalanceMountRequest {
	s.LoadbalanceIds = v
	return s
}

func (s *QueryLoadbalanceMountRequest) SetMounted(v bool) *QueryLoadbalanceMountRequest {
	s.Mounted = &v
	return s
}

func (s *QueryLoadbalanceMountRequest) SetPageSize(v int64) *QueryLoadbalanceMountRequest {
	s.PageSize = &v
	return s
}

func (s *QueryLoadbalanceMountRequest) SetStatuses(v []*string) *QueryLoadbalanceMountRequest {
	s.Statuses = v
	return s
}

func (s *QueryLoadbalanceMountRequest) SetWorkspace(v string) *QueryLoadbalanceMountRequest {
	s.Workspace = &v
	return s
}

func (s *QueryLoadbalanceMountRequest) SetRegionIds(v []*string) *QueryLoadbalanceMountRequest {
	s.RegionIds = v
	return s
}

func (s *QueryLoadbalanceMountRequest) SetZoneIds(v []*string) *QueryLoadbalanceMountRequest {
	s.ZoneIds = v
	return s
}

func (s *QueryLoadbalanceMountRequest) SetName(v string) *QueryLoadbalanceMountRequest {
	s.Name = &v
	return s
}

type QueryLoadbalanceMountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// data
	Data []*MountComputer `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// total_count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryLoadbalanceMountResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLoadbalanceMountResponse) GoString() string {
	return s.String()
}

func (s *QueryLoadbalanceMountResponse) SetReqMsgId(v string) *QueryLoadbalanceMountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLoadbalanceMountResponse) SetResultCode(v string) *QueryLoadbalanceMountResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLoadbalanceMountResponse) SetResultMsg(v string) *QueryLoadbalanceMountResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLoadbalanceMountResponse) SetCurrentPage(v int64) *QueryLoadbalanceMountResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryLoadbalanceMountResponse) SetData(v []*MountComputer) *QueryLoadbalanceMountResponse {
	s.Data = v
	return s
}

func (s *QueryLoadbalanceMountResponse) SetPageSize(v int64) *QueryLoadbalanceMountResponse {
	s.PageSize = &v
	return s
}

func (s *QueryLoadbalanceMountResponse) SetTotalCount(v int64) *QueryLoadbalanceMountResponse {
	s.TotalCount = &v
	return s
}

type GetLoadbalanceVcomputergroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s GetLoadbalanceVcomputergroupRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLoadbalanceVcomputergroupRequest) GoString() string {
	return s.String()
}

func (s *GetLoadbalanceVcomputergroupRequest) SetAuthToken(v string) *GetLoadbalanceVcomputergroupRequest {
	s.AuthToken = &v
	return s
}

func (s *GetLoadbalanceVcomputergroupRequest) SetId(v string) *GetLoadbalanceVcomputergroupRequest {
	s.Id = &v
	return s
}

func (s *GetLoadbalanceVcomputergroupRequest) SetWorkspace(v string) *GetLoadbalanceVcomputergroupRequest {
	s.Workspace = &v
	return s
}

type GetLoadbalanceVcomputergroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *VComputerGroup `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetLoadbalanceVcomputergroupResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLoadbalanceVcomputergroupResponse) GoString() string {
	return s.String()
}

func (s *GetLoadbalanceVcomputergroupResponse) SetReqMsgId(v string) *GetLoadbalanceVcomputergroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetLoadbalanceVcomputergroupResponse) SetResultCode(v string) *GetLoadbalanceVcomputergroupResponse {
	s.ResultCode = &v
	return s
}

func (s *GetLoadbalanceVcomputergroupResponse) SetResultMsg(v string) *GetLoadbalanceVcomputergroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetLoadbalanceVcomputergroupResponse) SetData(v *VComputerGroup) *GetLoadbalanceVcomputergroupResponse {
	s.Data = v
	return s
}

type QueryLoadbalanceVcomputergroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// load_balance_ids
	LoadBalanceIds []*string `json:"load_balance_ids,omitempty" xml:"load_balance_ids,omitempty" require:"true" type:"Repeated"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// statuses
	Statuses []*string `json:"statuses,omitempty" xml:"statuses,omitempty" type:"Repeated"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
	// v_computer_group_ids
	VComputerGroupIds []*string `json:"v_computer_group_ids,omitempty" xml:"v_computer_group_ids,omitempty" type:"Repeated"`
}

func (s QueryLoadbalanceVcomputergroupRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLoadbalanceVcomputergroupRequest) GoString() string {
	return s.String()
}

func (s *QueryLoadbalanceVcomputergroupRequest) SetAuthToken(v string) *QueryLoadbalanceVcomputergroupRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLoadbalanceVcomputergroupRequest) SetLoadBalanceIds(v []*string) *QueryLoadbalanceVcomputergroupRequest {
	s.LoadBalanceIds = v
	return s
}

func (s *QueryLoadbalanceVcomputergroupRequest) SetName(v string) *QueryLoadbalanceVcomputergroupRequest {
	s.Name = &v
	return s
}

func (s *QueryLoadbalanceVcomputergroupRequest) SetStatuses(v []*string) *QueryLoadbalanceVcomputergroupRequest {
	s.Statuses = v
	return s
}

func (s *QueryLoadbalanceVcomputergroupRequest) SetWorkspace(v string) *QueryLoadbalanceVcomputergroupRequest {
	s.Workspace = &v
	return s
}

func (s *QueryLoadbalanceVcomputergroupRequest) SetVComputerGroupIds(v []*string) *QueryLoadbalanceVcomputergroupRequest {
	s.VComputerGroupIds = v
	return s
}

type QueryLoadbalanceVcomputergroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*VComputerGroup `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryLoadbalanceVcomputergroupResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLoadbalanceVcomputergroupResponse) GoString() string {
	return s.String()
}

func (s *QueryLoadbalanceVcomputergroupResponse) SetReqMsgId(v string) *QueryLoadbalanceVcomputergroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLoadbalanceVcomputergroupResponse) SetResultCode(v string) *QueryLoadbalanceVcomputergroupResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLoadbalanceVcomputergroupResponse) SetResultMsg(v string) *QueryLoadbalanceVcomputergroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLoadbalanceVcomputergroupResponse) SetData(v []*VComputerGroup) *QueryLoadbalanceVcomputergroupResponse {
	s.Data = v
	return s
}

type AllLoadbalanceVcomputergroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s AllLoadbalanceVcomputergroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AllLoadbalanceVcomputergroupRequest) GoString() string {
	return s.String()
}

func (s *AllLoadbalanceVcomputergroupRequest) SetAuthToken(v string) *AllLoadbalanceVcomputergroupRequest {
	s.AuthToken = &v
	return s
}

func (s *AllLoadbalanceVcomputergroupRequest) SetWorkspace(v string) *AllLoadbalanceVcomputergroupRequest {
	s.Workspace = &v
	return s
}

type AllLoadbalanceVcomputergroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*VComputerGroup `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s AllLoadbalanceVcomputergroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AllLoadbalanceVcomputergroupResponse) GoString() string {
	return s.String()
}

func (s *AllLoadbalanceVcomputergroupResponse) SetReqMsgId(v string) *AllLoadbalanceVcomputergroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllLoadbalanceVcomputergroupResponse) SetResultCode(v string) *AllLoadbalanceVcomputergroupResponse {
	s.ResultCode = &v
	return s
}

func (s *AllLoadbalanceVcomputergroupResponse) SetResultMsg(v string) *AllLoadbalanceVcomputergroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllLoadbalanceVcomputergroupResponse) SetData(v []*VComputerGroup) *AllLoadbalanceVcomputergroupResponse {
	s.Data = v
	return s
}

type QueryLoadbalanceVcomputerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// computer_ids
	ComputerIds []*string `json:"computer_ids,omitempty" xml:"computer_ids,omitempty" type:"Repeated"`
	// computer_ports
	ComputerPorts []*string `json:"computer_ports,omitempty" xml:"computer_ports,omitempty" type:"Repeated"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// ips
	Ips []*string `json:"ips,omitempty" xml:"ips,omitempty" type:"Repeated"`
	// ip_ports
	IpPorts []*string `json:"ip_ports,omitempty" xml:"ip_ports,omitempty" type:"Repeated"`
	// max_weight
	MaxWeight *int64 `json:"max_weight,omitempty" xml:"max_weight,omitempty"`
	// min_weight
	MinWeight *int64 `json:"min_weight,omitempty" xml:"min_weight,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// ports
	Ports []*string `json:"ports,omitempty" xml:"ports,omitempty" type:"Repeated"`
	// v_computer_group_ids
	VComputerGroupIds []*string `json:"v_computer_group_ids,omitempty" xml:"v_computer_group_ids,omitempty" type:"Repeated"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s QueryLoadbalanceVcomputerRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLoadbalanceVcomputerRequest) GoString() string {
	return s.String()
}

func (s *QueryLoadbalanceVcomputerRequest) SetAuthToken(v string) *QueryLoadbalanceVcomputerRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLoadbalanceVcomputerRequest) SetComputerIds(v []*string) *QueryLoadbalanceVcomputerRequest {
	s.ComputerIds = v
	return s
}

func (s *QueryLoadbalanceVcomputerRequest) SetComputerPorts(v []*string) *QueryLoadbalanceVcomputerRequest {
	s.ComputerPorts = v
	return s
}

func (s *QueryLoadbalanceVcomputerRequest) SetCurrentPage(v int64) *QueryLoadbalanceVcomputerRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryLoadbalanceVcomputerRequest) SetIps(v []*string) *QueryLoadbalanceVcomputerRequest {
	s.Ips = v
	return s
}

func (s *QueryLoadbalanceVcomputerRequest) SetIpPorts(v []*string) *QueryLoadbalanceVcomputerRequest {
	s.IpPorts = v
	return s
}

func (s *QueryLoadbalanceVcomputerRequest) SetMaxWeight(v int64) *QueryLoadbalanceVcomputerRequest {
	s.MaxWeight = &v
	return s
}

func (s *QueryLoadbalanceVcomputerRequest) SetMinWeight(v int64) *QueryLoadbalanceVcomputerRequest {
	s.MinWeight = &v
	return s
}

func (s *QueryLoadbalanceVcomputerRequest) SetPageSize(v int64) *QueryLoadbalanceVcomputerRequest {
	s.PageSize = &v
	return s
}

func (s *QueryLoadbalanceVcomputerRequest) SetPorts(v []*string) *QueryLoadbalanceVcomputerRequest {
	s.Ports = v
	return s
}

func (s *QueryLoadbalanceVcomputerRequest) SetVComputerGroupIds(v []*string) *QueryLoadbalanceVcomputerRequest {
	s.VComputerGroupIds = v
	return s
}

func (s *QueryLoadbalanceVcomputerRequest) SetWorkspace(v string) *QueryLoadbalanceVcomputerRequest {
	s.Workspace = &v
	return s
}

type QueryLoadbalanceVcomputerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// v_computers
	Data []*VComputer `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// total_count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryLoadbalanceVcomputerResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLoadbalanceVcomputerResponse) GoString() string {
	return s.String()
}

func (s *QueryLoadbalanceVcomputerResponse) SetReqMsgId(v string) *QueryLoadbalanceVcomputerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLoadbalanceVcomputerResponse) SetResultCode(v string) *QueryLoadbalanceVcomputerResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLoadbalanceVcomputerResponse) SetResultMsg(v string) *QueryLoadbalanceVcomputerResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLoadbalanceVcomputerResponse) SetData(v []*VComputer) *QueryLoadbalanceVcomputerResponse {
	s.Data = v
	return s
}

func (s *QueryLoadbalanceVcomputerResponse) SetTotalCount(v int64) *QueryLoadbalanceVcomputerResponse {
	s.TotalCount = &v
	return s
}

type QueryLoadbalanceListenerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// backend_server_ports
	BackendServerPorts []*int64 `json:"backend_server_ports,omitempty" xml:"backend_server_ports,omitempty" type:"Repeated"`
	// certificate_iaas_ids
	CertificateIaasIds []*string `json:"certificate_iaas_ids,omitempty" xml:"certificate_iaas_ids,omitempty" type:"Repeated"`
	// certificate_ids
	CertificateIds []*string `json:"certificate_ids,omitempty" xml:"certificate_ids,omitempty" type:"Repeated"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// gm_crypto_cert_iaas_ids
	GmCryptoCertIaasIds []*string `json:"gm_crypto_cert_iaas_ids,omitempty" xml:"gm_crypto_cert_iaas_ids,omitempty" type:"Repeated"`
	// gm_sign_cert_iaas_ids
	GmSignCertIaasIds []*string `json:"gm_sign_cert_iaas_ids,omitempty" xml:"gm_sign_cert_iaas_ids,omitempty" type:"Repeated"`
	// listener_ports
	ListenerPorts []*int64 `json:"listener_ports,omitempty" xml:"listener_ports,omitempty" type:"Repeated"`
	// load_balancer_ids
	LoadBalancerIds []*string `json:"load_balancer_ids,omitempty" xml:"load_balancer_ids,omitempty" type:"Repeated"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// types
	Types []*string `json:"types,omitempty" xml:"types,omitempty" type:"Repeated"`
	// v_computer_group_ids
	VComputerGroupIds []*string `json:"v_computer_group_ids,omitempty" xml:"v_computer_group_ids,omitempty" type:"Repeated"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryLoadbalanceListenerRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLoadbalanceListenerRequest) GoString() string {
	return s.String()
}

func (s *QueryLoadbalanceListenerRequest) SetAuthToken(v string) *QueryLoadbalanceListenerRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLoadbalanceListenerRequest) SetBackendServerPorts(v []*int64) *QueryLoadbalanceListenerRequest {
	s.BackendServerPorts = v
	return s
}

func (s *QueryLoadbalanceListenerRequest) SetCertificateIaasIds(v []*string) *QueryLoadbalanceListenerRequest {
	s.CertificateIaasIds = v
	return s
}

func (s *QueryLoadbalanceListenerRequest) SetCertificateIds(v []*string) *QueryLoadbalanceListenerRequest {
	s.CertificateIds = v
	return s
}

func (s *QueryLoadbalanceListenerRequest) SetCurrentPage(v int64) *QueryLoadbalanceListenerRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryLoadbalanceListenerRequest) SetGmCryptoCertIaasIds(v []*string) *QueryLoadbalanceListenerRequest {
	s.GmCryptoCertIaasIds = v
	return s
}

func (s *QueryLoadbalanceListenerRequest) SetGmSignCertIaasIds(v []*string) *QueryLoadbalanceListenerRequest {
	s.GmSignCertIaasIds = v
	return s
}

func (s *QueryLoadbalanceListenerRequest) SetListenerPorts(v []*int64) *QueryLoadbalanceListenerRequest {
	s.ListenerPorts = v
	return s
}

func (s *QueryLoadbalanceListenerRequest) SetLoadBalancerIds(v []*string) *QueryLoadbalanceListenerRequest {
	s.LoadBalancerIds = v
	return s
}

func (s *QueryLoadbalanceListenerRequest) SetPageSize(v int64) *QueryLoadbalanceListenerRequest {
	s.PageSize = &v
	return s
}

func (s *QueryLoadbalanceListenerRequest) SetTypes(v []*string) *QueryLoadbalanceListenerRequest {
	s.Types = v
	return s
}

func (s *QueryLoadbalanceListenerRequest) SetVComputerGroupIds(v []*string) *QueryLoadbalanceListenerRequest {
	s.VComputerGroupIds = v
	return s
}

func (s *QueryLoadbalanceListenerRequest) SetWorkspace(v string) *QueryLoadbalanceListenerRequest {
	s.Workspace = &v
	return s
}

type QueryLoadbalanceListenerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// listeners
	Data []*Listener `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// total_count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryLoadbalanceListenerResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLoadbalanceListenerResponse) GoString() string {
	return s.String()
}

func (s *QueryLoadbalanceListenerResponse) SetReqMsgId(v string) *QueryLoadbalanceListenerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLoadbalanceListenerResponse) SetResultCode(v string) *QueryLoadbalanceListenerResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLoadbalanceListenerResponse) SetResultMsg(v string) *QueryLoadbalanceListenerResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLoadbalanceListenerResponse) SetData(v []*Listener) *QueryLoadbalanceListenerResponse {
	s.Data = v
	return s
}

func (s *QueryLoadbalanceListenerResponse) SetTotalCount(v int64) *QueryLoadbalanceListenerResponse {
	s.TotalCount = &v
	return s
}

type AllLoadbalanceListenerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// lb_id
	LbId *string `json:"lb_id,omitempty" xml:"lb_id,omitempty" require:"true"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s AllLoadbalanceListenerRequest) String() string {
	return tea.Prettify(s)
}

func (s AllLoadbalanceListenerRequest) GoString() string {
	return s.String()
}

func (s *AllLoadbalanceListenerRequest) SetAuthToken(v string) *AllLoadbalanceListenerRequest {
	s.AuthToken = &v
	return s
}

func (s *AllLoadbalanceListenerRequest) SetLbId(v string) *AllLoadbalanceListenerRequest {
	s.LbId = &v
	return s
}

func (s *AllLoadbalanceListenerRequest) SetWorkspace(v string) *AllLoadbalanceListenerRequest {
	s.Workspace = &v
	return s
}

type AllLoadbalanceListenerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*Listener `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s AllLoadbalanceListenerResponse) String() string {
	return tea.Prettify(s)
}

func (s AllLoadbalanceListenerResponse) GoString() string {
	return s.String()
}

func (s *AllLoadbalanceListenerResponse) SetReqMsgId(v string) *AllLoadbalanceListenerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllLoadbalanceListenerResponse) SetResultCode(v string) *AllLoadbalanceListenerResponse {
	s.ResultCode = &v
	return s
}

func (s *AllLoadbalanceListenerResponse) SetResultMsg(v string) *AllLoadbalanceListenerResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllLoadbalanceListenerResponse) SetData(v []*Listener) *AllLoadbalanceListenerResponse {
	s.Data = v
	return s
}

type QueryLoadbalanceSecurityipRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// listener_port
	ListenerPort *int64 `json:"listener_port,omitempty" xml:"listener_port,omitempty" require:"true"`
	// load_balancer_id
	LoadBalancerId *string `json:"load_balancer_id,omitempty" xml:"load_balancer_id,omitempty" require:"true"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s QueryLoadbalanceSecurityipRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLoadbalanceSecurityipRequest) GoString() string {
	return s.String()
}

func (s *QueryLoadbalanceSecurityipRequest) SetAuthToken(v string) *QueryLoadbalanceSecurityipRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLoadbalanceSecurityipRequest) SetListenerPort(v int64) *QueryLoadbalanceSecurityipRequest {
	s.ListenerPort = &v
	return s
}

func (s *QueryLoadbalanceSecurityipRequest) SetLoadBalancerId(v string) *QueryLoadbalanceSecurityipRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *QueryLoadbalanceSecurityipRequest) SetWorkspace(v string) *QueryLoadbalanceSecurityipRequest {
	s.Workspace = &v
	return s
}

type QueryLoadbalanceSecurityipResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// security_ips
	Data *ListenerSecurityIp `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryLoadbalanceSecurityipResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLoadbalanceSecurityipResponse) GoString() string {
	return s.String()
}

func (s *QueryLoadbalanceSecurityipResponse) SetReqMsgId(v string) *QueryLoadbalanceSecurityipResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLoadbalanceSecurityipResponse) SetResultCode(v string) *QueryLoadbalanceSecurityipResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLoadbalanceSecurityipResponse) SetResultMsg(v string) *QueryLoadbalanceSecurityipResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLoadbalanceSecurityipResponse) SetData(v *ListenerSecurityIp) *QueryLoadbalanceSecurityipResponse {
	s.Data = v
	return s
}

type GetDatabaseRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s GetDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDatabaseRequest) GoString() string {
	return s.String()
}

func (s *GetDatabaseRequest) SetAuthToken(v string) *GetDatabaseRequest {
	s.AuthToken = &v
	return s
}

func (s *GetDatabaseRequest) SetId(v string) *GetDatabaseRequest {
	s.Id = &v
	return s
}

func (s *GetDatabaseRequest) SetWorkspace(v string) *GetDatabaseRequest {
	s.Workspace = &v
	return s
}

type GetDatabaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *Database `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDatabaseResponse) GoString() string {
	return s.String()
}

func (s *GetDatabaseResponse) SetReqMsgId(v string) *GetDatabaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetDatabaseResponse) SetResultCode(v string) *GetDatabaseResponse {
	s.ResultCode = &v
	return s
}

func (s *GetDatabaseResponse) SetResultMsg(v string) *GetDatabaseResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetDatabaseResponse) SetData(v *Database) *GetDatabaseResponse {
	s.Data = v
	return s
}

type AllDatabaseMasterzoneRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s AllDatabaseMasterzoneRequest) String() string {
	return tea.Prettify(s)
}

func (s AllDatabaseMasterzoneRequest) GoString() string {
	return s.String()
}

func (s *AllDatabaseMasterzoneRequest) SetAuthToken(v string) *AllDatabaseMasterzoneRequest {
	s.AuthToken = &v
	return s
}

func (s *AllDatabaseMasterzoneRequest) SetWorkspace(v string) *AllDatabaseMasterzoneRequest {
	s.Workspace = &v
	return s
}

type AllDatabaseMasterzoneResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// master_zones
	MasterZones []*string `json:"master_zones,omitempty" xml:"master_zones,omitempty" type:"Repeated"`
}

func (s AllDatabaseMasterzoneResponse) String() string {
	return tea.Prettify(s)
}

func (s AllDatabaseMasterzoneResponse) GoString() string {
	return s.String()
}

func (s *AllDatabaseMasterzoneResponse) SetReqMsgId(v string) *AllDatabaseMasterzoneResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllDatabaseMasterzoneResponse) SetResultCode(v string) *AllDatabaseMasterzoneResponse {
	s.ResultCode = &v
	return s
}

func (s *AllDatabaseMasterzoneResponse) SetResultMsg(v string) *AllDatabaseMasterzoneResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllDatabaseMasterzoneResponse) SetMasterZones(v []*string) *AllDatabaseMasterzoneResponse {
	s.MasterZones = v
	return s
}

type QueryDatabaseRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app_ids
	AppIds []*string `json:"app_ids,omitempty" xml:"app_ids,omitempty" type:"Repeated"`
	// app_service_ids
	AppServiceIds []*string `json:"app_service_ids,omitempty" xml:"app_service_ids,omitempty" type:"Repeated"`
	// connection_addresses
	ConnectionAddresses []*string `json:"connection_addresses,omitempty" xml:"connection_addresses,omitempty" type:"Repeated"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// engines
	Engines []*string `json:"engines,omitempty" xml:"engines,omitempty" type:"Repeated"`
	// engine_versions
	EngineVersions []*string `json:"engine_versions,omitempty" xml:"engine_versions,omitempty" type:"Repeated"`
	// include_shared
	IncludeShared *bool `json:"include_shared,omitempty" xml:"include_shared,omitempty"`
	// master_ids
	MasterIds []*string `json:"master_ids,omitempty" xml:"master_ids,omitempty" type:"Repeated"`
	// max_cpu
	MaxCpu *int64 `json:"max_cpu,omitempty" xml:"max_cpu,omitempty"`
	// max_max_connections
	MaxMaxConnections *int64 `json:"max_max_connections,omitempty" xml:"max_max_connections,omitempty"`
	// max_max_iops
	MaxMaxIops *int64 `json:"max_max_iops,omitempty" xml:"max_max_iops,omitempty"`
	// max_memory
	MaxMemory *int64 `json:"max_memory,omitempty" xml:"max_memory,omitempty"`
	// max_port
	MaxPort *int64 `json:"max_port,omitempty" xml:"max_port,omitempty"`
	// max_storage
	MaxStorage *int64 `json:"max_storage,omitempty" xml:"max_storage,omitempty"`
	// min_cpu
	MinCpu *int64 `json:"min_cpu,omitempty" xml:"min_cpu,omitempty"`
	// min_max_connections
	MinMaxConnections *int64 `json:"min_max_connections,omitempty" xml:"min_max_connections,omitempty"`
	// min_max_iops
	MinMaxIops *int64 `json:"min_max_iops,omitempty" xml:"min_max_iops,omitempty"`
	// min_memory
	MinMemory *int64 `json:"min_memory,omitempty" xml:"min_memory,omitempty"`
	// min_port
	MinPort *int64 `json:"min_port,omitempty" xml:"min_port,omitempty"`
	// min_storage
	MinStorage *int64 `json:"min_storage,omitempty" xml:"min_storage,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// network_type
	NetworkType *string `json:"network_type,omitempty" xml:"network_type,omitempty"`
	// net_type
	NetType *string `json:"net_type,omitempty" xml:"net_type,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// spec_iaas_ids
	SpecIaasIds []*string `json:"spec_iaas_ids,omitempty" xml:"spec_iaas_ids,omitempty" type:"Repeated"`
	// statuses
	Statuses []*string `json:"statuses,omitempty" xml:"statuses,omitempty" type:"Repeated"`
	// types
	Types []*string `json:"types,omitempty" xml:"types,omitempty" type:"Repeated"`
	// vpc_ids
	VpcIds []*string `json:"vpc_ids,omitempty" xml:"vpc_ids,omitempty" type:"Repeated"`
	// v_switch_iaas_ids
	VSwitchIaasIds []*string `json:"v_switch_iaas_ids,omitempty" xml:"v_switch_iaas_ids,omitempty" type:"Repeated"`
	// workspace_ids
	WorkspaceIds []*string `json:"workspace_ids,omitempty" xml:"workspace_ids,omitempty" type:"Repeated"`
}

func (s QueryDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDatabaseRequest) GoString() string {
	return s.String()
}

func (s *QueryDatabaseRequest) SetAuthToken(v string) *QueryDatabaseRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDatabaseRequest) SetAppIds(v []*string) *QueryDatabaseRequest {
	s.AppIds = v
	return s
}

func (s *QueryDatabaseRequest) SetAppServiceIds(v []*string) *QueryDatabaseRequest {
	s.AppServiceIds = v
	return s
}

func (s *QueryDatabaseRequest) SetConnectionAddresses(v []*string) *QueryDatabaseRequest {
	s.ConnectionAddresses = v
	return s
}

func (s *QueryDatabaseRequest) SetCurrentPage(v int64) *QueryDatabaseRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryDatabaseRequest) SetEngines(v []*string) *QueryDatabaseRequest {
	s.Engines = v
	return s
}

func (s *QueryDatabaseRequest) SetEngineVersions(v []*string) *QueryDatabaseRequest {
	s.EngineVersions = v
	return s
}

func (s *QueryDatabaseRequest) SetIncludeShared(v bool) *QueryDatabaseRequest {
	s.IncludeShared = &v
	return s
}

func (s *QueryDatabaseRequest) SetMasterIds(v []*string) *QueryDatabaseRequest {
	s.MasterIds = v
	return s
}

func (s *QueryDatabaseRequest) SetMaxCpu(v int64) *QueryDatabaseRequest {
	s.MaxCpu = &v
	return s
}

func (s *QueryDatabaseRequest) SetMaxMaxConnections(v int64) *QueryDatabaseRequest {
	s.MaxMaxConnections = &v
	return s
}

func (s *QueryDatabaseRequest) SetMaxMaxIops(v int64) *QueryDatabaseRequest {
	s.MaxMaxIops = &v
	return s
}

func (s *QueryDatabaseRequest) SetMaxMemory(v int64) *QueryDatabaseRequest {
	s.MaxMemory = &v
	return s
}

func (s *QueryDatabaseRequest) SetMaxPort(v int64) *QueryDatabaseRequest {
	s.MaxPort = &v
	return s
}

func (s *QueryDatabaseRequest) SetMaxStorage(v int64) *QueryDatabaseRequest {
	s.MaxStorage = &v
	return s
}

func (s *QueryDatabaseRequest) SetMinCpu(v int64) *QueryDatabaseRequest {
	s.MinCpu = &v
	return s
}

func (s *QueryDatabaseRequest) SetMinMaxConnections(v int64) *QueryDatabaseRequest {
	s.MinMaxConnections = &v
	return s
}

func (s *QueryDatabaseRequest) SetMinMaxIops(v int64) *QueryDatabaseRequest {
	s.MinMaxIops = &v
	return s
}

func (s *QueryDatabaseRequest) SetMinMemory(v int64) *QueryDatabaseRequest {
	s.MinMemory = &v
	return s
}

func (s *QueryDatabaseRequest) SetMinPort(v int64) *QueryDatabaseRequest {
	s.MinPort = &v
	return s
}

func (s *QueryDatabaseRequest) SetMinStorage(v int64) *QueryDatabaseRequest {
	s.MinStorage = &v
	return s
}

func (s *QueryDatabaseRequest) SetName(v string) *QueryDatabaseRequest {
	s.Name = &v
	return s
}

func (s *QueryDatabaseRequest) SetNetworkType(v string) *QueryDatabaseRequest {
	s.NetworkType = &v
	return s
}

func (s *QueryDatabaseRequest) SetNetType(v string) *QueryDatabaseRequest {
	s.NetType = &v
	return s
}

func (s *QueryDatabaseRequest) SetPageSize(v int64) *QueryDatabaseRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDatabaseRequest) SetSpecIaasIds(v []*string) *QueryDatabaseRequest {
	s.SpecIaasIds = v
	return s
}

func (s *QueryDatabaseRequest) SetStatuses(v []*string) *QueryDatabaseRequest {
	s.Statuses = v
	return s
}

func (s *QueryDatabaseRequest) SetTypes(v []*string) *QueryDatabaseRequest {
	s.Types = v
	return s
}

func (s *QueryDatabaseRequest) SetVpcIds(v []*string) *QueryDatabaseRequest {
	s.VpcIds = v
	return s
}

func (s *QueryDatabaseRequest) SetVSwitchIaasIds(v []*string) *QueryDatabaseRequest {
	s.VSwitchIaasIds = v
	return s
}

func (s *QueryDatabaseRequest) SetWorkspaceIds(v []*string) *QueryDatabaseRequest {
	s.WorkspaceIds = v
	return s
}

type QueryDatabaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*Database `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// total_count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDatabaseResponse) GoString() string {
	return s.String()
}

func (s *QueryDatabaseResponse) SetReqMsgId(v string) *QueryDatabaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDatabaseResponse) SetResultCode(v string) *QueryDatabaseResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDatabaseResponse) SetResultMsg(v string) *QueryDatabaseResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDatabaseResponse) SetData(v []*Database) *QueryDatabaseResponse {
	s.Data = v
	return s
}

func (s *QueryDatabaseResponse) SetTotalCount(v int64) *QueryDatabaseResponse {
	s.TotalCount = &v
	return s
}

func (s *QueryDatabaseResponse) SetCurrentPage(v int64) *QueryDatabaseResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryDatabaseResponse) SetPageSize(v int64) *QueryDatabaseResponse {
	s.PageSize = &v
	return s
}

type QueryDatabaseSpecRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// custom_storage
	CustomStorage *bool `json:"custom_storage,omitempty" xml:"custom_storage,omitempty"`
	// engines
	Engines []*string `json:"engines,omitempty" xml:"engines,omitempty" type:"Repeated"`
	// engine_versions
	EngineVersions []*string `json:"engine_versions,omitempty" xml:"engine_versions,omitempty" type:"Repeated"`
	// iaas_ids
	IaasIds []*string `json:"iaas_ids,omitempty" xml:"iaas_ids,omitempty" type:"Repeated"`
	// ids
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" type:"Repeated"`
	// max_cpu
	MaxCpu *int64 `json:"max_cpu,omitempty" xml:"max_cpu,omitempty"`
	// max_max_connections
	MaxMaxConnections *int64 `json:"max_max_connections,omitempty" xml:"max_max_connections,omitempty"`
	// max_max_iops
	MaxMaxIops *int64 `json:"max_max_iops,omitempty" xml:"max_max_iops,omitempty"`
	// max_memory
	MaxMemory *int64 `json:"max_memory,omitempty" xml:"max_memory,omitempty"`
	// min_cpu
	MinCpu *int64 `json:"min_cpu,omitempty" xml:"min_cpu,omitempty"`
	// min_max_connections
	MinMaxConnections *int64 `json:"min_max_connections,omitempty" xml:"min_max_connections,omitempty"`
	// min_max_iops
	MinMaxIops *int64 `json:"min_max_iops,omitempty" xml:"min_max_iops,omitempty"`
	// min_memory
	MinMemory *int64 `json:"min_memory,omitempty" xml:"min_memory,omitempty"`
	// pageSize
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// types
	Types []*string `json:"types,omitempty" xml:"types,omitempty" type:"Repeated"`
	// provider_ids
	ProviderIds []*string `json:"provider_ids,omitempty" xml:"provider_ids,omitempty" type:"Repeated"`
	// enable
	Enable *bool `json:"enable,omitempty" xml:"enable,omitempty"`
	// iaas_types
	IaasTypes []*string `json:"iaas_types,omitempty" xml:"iaas_types,omitempty" type:"Repeated"`
}

func (s QueryDatabaseSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDatabaseSpecRequest) GoString() string {
	return s.String()
}

func (s *QueryDatabaseSpecRequest) SetAuthToken(v string) *QueryDatabaseSpecRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDatabaseSpecRequest) SetCurrentPage(v int64) *QueryDatabaseSpecRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryDatabaseSpecRequest) SetCustomStorage(v bool) *QueryDatabaseSpecRequest {
	s.CustomStorage = &v
	return s
}

func (s *QueryDatabaseSpecRequest) SetEngines(v []*string) *QueryDatabaseSpecRequest {
	s.Engines = v
	return s
}

func (s *QueryDatabaseSpecRequest) SetEngineVersions(v []*string) *QueryDatabaseSpecRequest {
	s.EngineVersions = v
	return s
}

func (s *QueryDatabaseSpecRequest) SetIaasIds(v []*string) *QueryDatabaseSpecRequest {
	s.IaasIds = v
	return s
}

func (s *QueryDatabaseSpecRequest) SetIds(v []*string) *QueryDatabaseSpecRequest {
	s.Ids = v
	return s
}

func (s *QueryDatabaseSpecRequest) SetMaxCpu(v int64) *QueryDatabaseSpecRequest {
	s.MaxCpu = &v
	return s
}

func (s *QueryDatabaseSpecRequest) SetMaxMaxConnections(v int64) *QueryDatabaseSpecRequest {
	s.MaxMaxConnections = &v
	return s
}

func (s *QueryDatabaseSpecRequest) SetMaxMaxIops(v int64) *QueryDatabaseSpecRequest {
	s.MaxMaxIops = &v
	return s
}

func (s *QueryDatabaseSpecRequest) SetMaxMemory(v int64) *QueryDatabaseSpecRequest {
	s.MaxMemory = &v
	return s
}

func (s *QueryDatabaseSpecRequest) SetMinCpu(v int64) *QueryDatabaseSpecRequest {
	s.MinCpu = &v
	return s
}

func (s *QueryDatabaseSpecRequest) SetMinMaxConnections(v int64) *QueryDatabaseSpecRequest {
	s.MinMaxConnections = &v
	return s
}

func (s *QueryDatabaseSpecRequest) SetMinMaxIops(v int64) *QueryDatabaseSpecRequest {
	s.MinMaxIops = &v
	return s
}

func (s *QueryDatabaseSpecRequest) SetMinMemory(v int64) *QueryDatabaseSpecRequest {
	s.MinMemory = &v
	return s
}

func (s *QueryDatabaseSpecRequest) SetPageSize(v int64) *QueryDatabaseSpecRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDatabaseSpecRequest) SetTypes(v []*string) *QueryDatabaseSpecRequest {
	s.Types = v
	return s
}

func (s *QueryDatabaseSpecRequest) SetProviderIds(v []*string) *QueryDatabaseSpecRequest {
	s.ProviderIds = v
	return s
}

func (s *QueryDatabaseSpecRequest) SetEnable(v bool) *QueryDatabaseSpecRequest {
	s.Enable = &v
	return s
}

func (s *QueryDatabaseSpecRequest) SetIaasTypes(v []*string) *QueryDatabaseSpecRequest {
	s.IaasTypes = v
	return s
}

type QueryDatabaseSpecResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*DatabaseSpec `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryDatabaseSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDatabaseSpecResponse) GoString() string {
	return s.String()
}

func (s *QueryDatabaseSpecResponse) SetReqMsgId(v string) *QueryDatabaseSpecResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDatabaseSpecResponse) SetResultCode(v string) *QueryDatabaseSpecResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDatabaseSpecResponse) SetResultMsg(v string) *QueryDatabaseSpecResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDatabaseSpecResponse) SetData(v []*DatabaseSpec) *QueryDatabaseSpecResponse {
	s.Data = v
	return s
}

type AllDatabaseEngineRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s AllDatabaseEngineRequest) String() string {
	return tea.Prettify(s)
}

func (s AllDatabaseEngineRequest) GoString() string {
	return s.String()
}

func (s *AllDatabaseEngineRequest) SetAuthToken(v string) *AllDatabaseEngineRequest {
	s.AuthToken = &v
	return s
}

type AllDatabaseEngineResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*DatabaseEngine `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s AllDatabaseEngineResponse) String() string {
	return tea.Prettify(s)
}

func (s AllDatabaseEngineResponse) GoString() string {
	return s.String()
}

func (s *AllDatabaseEngineResponse) SetReqMsgId(v string) *AllDatabaseEngineResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllDatabaseEngineResponse) SetResultCode(v string) *AllDatabaseEngineResponse {
	s.ResultCode = &v
	return s
}

func (s *AllDatabaseEngineResponse) SetResultMsg(v string) *AllDatabaseEngineResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllDatabaseEngineResponse) SetData(v []*DatabaseEngine) *AllDatabaseEngineResponse {
	s.Data = v
	return s
}

type AllDatabaseQuotaRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s AllDatabaseQuotaRequest) String() string {
	return tea.Prettify(s)
}

func (s AllDatabaseQuotaRequest) GoString() string {
	return s.String()
}

func (s *AllDatabaseQuotaRequest) SetAuthToken(v string) *AllDatabaseQuotaRequest {
	s.AuthToken = &v
	return s
}

func (s *AllDatabaseQuotaRequest) SetWorkspace(v string) *AllDatabaseQuotaRequest {
	s.Workspace = &v
	return s
}

type AllDatabaseQuotaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// quotas
	Quotas []*QuotaKv `json:"quotas,omitempty" xml:"quotas,omitempty" type:"Repeated"`
}

func (s AllDatabaseQuotaResponse) String() string {
	return tea.Prettify(s)
}

func (s AllDatabaseQuotaResponse) GoString() string {
	return s.String()
}

func (s *AllDatabaseQuotaResponse) SetReqMsgId(v string) *AllDatabaseQuotaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllDatabaseQuotaResponse) SetResultCode(v string) *AllDatabaseQuotaResponse {
	s.ResultCode = &v
	return s
}

func (s *AllDatabaseQuotaResponse) SetResultMsg(v string) *AllDatabaseQuotaResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllDatabaseQuotaResponse) SetQuotas(v []*QuotaKv) *AllDatabaseQuotaResponse {
	s.Quotas = v
	return s
}

type AllDatabaseSecurityipRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 数据库id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s AllDatabaseSecurityipRequest) String() string {
	return tea.Prettify(s)
}

func (s AllDatabaseSecurityipRequest) GoString() string {
	return s.String()
}

func (s *AllDatabaseSecurityipRequest) SetAuthToken(v string) *AllDatabaseSecurityipRequest {
	s.AuthToken = &v
	return s
}

func (s *AllDatabaseSecurityipRequest) SetId(v string) *AllDatabaseSecurityipRequest {
	s.Id = &v
	return s
}

func (s *AllDatabaseSecurityipRequest) SetWorkspace(v string) *AllDatabaseSecurityipRequest {
	s.Workspace = &v
	return s
}

type AllDatabaseSecurityipResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// security_ips
	Data []*DatabaseSecurityIp `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s AllDatabaseSecurityipResponse) String() string {
	return tea.Prettify(s)
}

func (s AllDatabaseSecurityipResponse) GoString() string {
	return s.String()
}

func (s *AllDatabaseSecurityipResponse) SetReqMsgId(v string) *AllDatabaseSecurityipResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllDatabaseSecurityipResponse) SetResultCode(v string) *AllDatabaseSecurityipResponse {
	s.ResultCode = &v
	return s
}

func (s *AllDatabaseSecurityipResponse) SetResultMsg(v string) *AllDatabaseSecurityipResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllDatabaseSecurityipResponse) SetData(v []*DatabaseSecurityIp) *AllDatabaseSecurityipResponse {
	s.Data = v
	return s
}

type QueryDatabaseSchemeRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// char_sets
	CharSets []*string `json:"char_sets,omitempty" xml:"char_sets,omitempty" type:"Repeated"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// database_id
	DatabaseId *string `json:"database_id,omitempty" xml:"database_id,omitempty" require:"true"`
	// iaas_ids
	IaasIds []*string `json:"iaas_ids,omitempty" xml:"iaas_ids,omitempty" type:"Repeated"`
	// ids
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" type:"Repeated"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// statuses
	Statuses []*string `json:"statuses,omitempty" xml:"statuses,omitempty" type:"Repeated"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s QueryDatabaseSchemeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDatabaseSchemeRequest) GoString() string {
	return s.String()
}

func (s *QueryDatabaseSchemeRequest) SetAuthToken(v string) *QueryDatabaseSchemeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDatabaseSchemeRequest) SetCharSets(v []*string) *QueryDatabaseSchemeRequest {
	s.CharSets = v
	return s
}

func (s *QueryDatabaseSchemeRequest) SetCurrentPage(v int64) *QueryDatabaseSchemeRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryDatabaseSchemeRequest) SetDatabaseId(v string) *QueryDatabaseSchemeRequest {
	s.DatabaseId = &v
	return s
}

func (s *QueryDatabaseSchemeRequest) SetIaasIds(v []*string) *QueryDatabaseSchemeRequest {
	s.IaasIds = v
	return s
}

func (s *QueryDatabaseSchemeRequest) SetIds(v []*string) *QueryDatabaseSchemeRequest {
	s.Ids = v
	return s
}

func (s *QueryDatabaseSchemeRequest) SetName(v string) *QueryDatabaseSchemeRequest {
	s.Name = &v
	return s
}

func (s *QueryDatabaseSchemeRequest) SetPageSize(v int64) *QueryDatabaseSchemeRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDatabaseSchemeRequest) SetStatuses(v []*string) *QueryDatabaseSchemeRequest {
	s.Statuses = v
	return s
}

func (s *QueryDatabaseSchemeRequest) SetWorkspace(v string) *QueryDatabaseSchemeRequest {
	s.Workspace = &v
	return s
}

type QueryDatabaseSchemeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*DbSchema `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryDatabaseSchemeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDatabaseSchemeResponse) GoString() string {
	return s.String()
}

func (s *QueryDatabaseSchemeResponse) SetReqMsgId(v string) *QueryDatabaseSchemeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDatabaseSchemeResponse) SetResultCode(v string) *QueryDatabaseSchemeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDatabaseSchemeResponse) SetResultMsg(v string) *QueryDatabaseSchemeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDatabaseSchemeResponse) SetData(v []*DbSchema) *QueryDatabaseSchemeResponse {
	s.Data = v
	return s
}

type AllDatabaseImportRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s AllDatabaseImportRequest) String() string {
	return tea.Prettify(s)
}

func (s AllDatabaseImportRequest) GoString() string {
	return s.String()
}

func (s *AllDatabaseImportRequest) SetAuthToken(v string) *AllDatabaseImportRequest {
	s.AuthToken = &v
	return s
}

func (s *AllDatabaseImportRequest) SetWorkspace(v string) *AllDatabaseImportRequest {
	s.Workspace = &v
	return s
}

type AllDatabaseImportResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// imports
	Imports []*DatabaseImportVO `json:"imports,omitempty" xml:"imports,omitempty" type:"Repeated"`
}

func (s AllDatabaseImportResponse) String() string {
	return tea.Prettify(s)
}

func (s AllDatabaseImportResponse) GoString() string {
	return s.String()
}

func (s *AllDatabaseImportResponse) SetReqMsgId(v string) *AllDatabaseImportResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllDatabaseImportResponse) SetResultCode(v string) *AllDatabaseImportResponse {
	s.ResultCode = &v
	return s
}

func (s *AllDatabaseImportResponse) SetResultMsg(v string) *AllDatabaseImportResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllDatabaseImportResponse) SetImports(v []*DatabaseImportVO) *AllDatabaseImportResponse {
	s.Imports = v
	return s
}

type QueryComputerAgentstatusRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// computer serial numbers
	Sn []*string `json:"sn,omitempty" xml:"sn,omitempty" type:"Repeated"`
	// workspace name
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
	// iaas_ids
	IaasIds []*string `json:"iaas_ids,omitempty" xml:"iaas_ids,omitempty" type:"Repeated"`
	// zone_iaas_id
	ZoneIaasId *string `json:"zone_iaas_id,omitempty" xml:"zone_iaas_id,omitempty"`
}

func (s QueryComputerAgentstatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryComputerAgentstatusRequest) GoString() string {
	return s.String()
}

func (s *QueryComputerAgentstatusRequest) SetAuthToken(v string) *QueryComputerAgentstatusRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryComputerAgentstatusRequest) SetSn(v []*string) *QueryComputerAgentstatusRequest {
	s.Sn = v
	return s
}

func (s *QueryComputerAgentstatusRequest) SetWorkspace(v string) *QueryComputerAgentstatusRequest {
	s.Workspace = &v
	return s
}

func (s *QueryComputerAgentstatusRequest) SetIaasIds(v []*string) *QueryComputerAgentstatusRequest {
	s.IaasIds = v
	return s
}

func (s *QueryComputerAgentstatusRequest) SetZoneIaasId(v string) *QueryComputerAgentstatusRequest {
	s.ZoneIaasId = &v
	return s
}

type QueryComputerAgentstatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// staragent info
	Data []*StarAgentInfo `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryComputerAgentstatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryComputerAgentstatusResponse) GoString() string {
	return s.String()
}

func (s *QueryComputerAgentstatusResponse) SetReqMsgId(v string) *QueryComputerAgentstatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryComputerAgentstatusResponse) SetResultCode(v string) *QueryComputerAgentstatusResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryComputerAgentstatusResponse) SetResultMsg(v string) *QueryComputerAgentstatusResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryComputerAgentstatusResponse) SetData(v []*StarAgentInfo) *QueryComputerAgentstatusResponse {
	s.Data = v
	return s
}

type QueryComputerAgentsetupcommandRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// computer serial numbers
	Sn []*string `json:"sn,omitempty" xml:"sn,omitempty" type:"Repeated"`
	// workspace name
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
	// iaas_id
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// zone_iaas_id
	ZoneIaasId *string `json:"zone_iaas_id,omitempty" xml:"zone_iaas_id,omitempty"`
}

func (s QueryComputerAgentsetupcommandRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryComputerAgentsetupcommandRequest) GoString() string {
	return s.String()
}

func (s *QueryComputerAgentsetupcommandRequest) SetAuthToken(v string) *QueryComputerAgentsetupcommandRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryComputerAgentsetupcommandRequest) SetSn(v []*string) *QueryComputerAgentsetupcommandRequest {
	s.Sn = v
	return s
}

func (s *QueryComputerAgentsetupcommandRequest) SetWorkspace(v string) *QueryComputerAgentsetupcommandRequest {
	s.Workspace = &v
	return s
}

func (s *QueryComputerAgentsetupcommandRequest) SetIaasId(v string) *QueryComputerAgentsetupcommandRequest {
	s.IaasId = &v
	return s
}

func (s *QueryComputerAgentsetupcommandRequest) SetZoneIaasId(v string) *QueryComputerAgentsetupcommandRequest {
	s.ZoneIaasId = &v
	return s
}

type QueryComputerAgentsetupcommandResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// operation tasks
	Results []*OperationTask `json:"results,omitempty" xml:"results,omitempty" type:"Repeated"`
}

func (s QueryComputerAgentsetupcommandResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryComputerAgentsetupcommandResponse) GoString() string {
	return s.String()
}

func (s *QueryComputerAgentsetupcommandResponse) SetReqMsgId(v string) *QueryComputerAgentsetupcommandResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryComputerAgentsetupcommandResponse) SetResultCode(v string) *QueryComputerAgentsetupcommandResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryComputerAgentsetupcommandResponse) SetResultMsg(v string) *QueryComputerAgentsetupcommandResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryComputerAgentsetupcommandResponse) SetResults(v []*OperationTask) *QueryComputerAgentsetupcommandResponse {
	s.Results = v
	return s
}

type QueryComputerImportRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace name
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
	// zone identity
	Zone *string `json:"zone,omitempty" xml:"zone,omitempty"`
	// page size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// current page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty" require:"true"`
	// 机器名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 是否只查询可导入的
	ImportableOnly *bool `json:"importable_only,omitempty" xml:"importable_only,omitempty"`
	// iaas_id
	IaasId *string `json:"iaas_id,omitempty" xml:"iaas_id,omitempty"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s QueryComputerImportRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryComputerImportRequest) GoString() string {
	return s.String()
}

func (s *QueryComputerImportRequest) SetAuthToken(v string) *QueryComputerImportRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryComputerImportRequest) SetWorkspace(v string) *QueryComputerImportRequest {
	s.Workspace = &v
	return s
}

func (s *QueryComputerImportRequest) SetZone(v string) *QueryComputerImportRequest {
	s.Zone = &v
	return s
}

func (s *QueryComputerImportRequest) SetPageSize(v int64) *QueryComputerImportRequest {
	s.PageSize = &v
	return s
}

func (s *QueryComputerImportRequest) SetCurrentPage(v int64) *QueryComputerImportRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryComputerImportRequest) SetName(v string) *QueryComputerImportRequest {
	s.Name = &v
	return s
}

func (s *QueryComputerImportRequest) SetImportableOnly(v bool) *QueryComputerImportRequest {
	s.ImportableOnly = &v
	return s
}

func (s *QueryComputerImportRequest) SetIaasId(v string) *QueryComputerImportRequest {
	s.IaasId = &v
	return s
}

func (s *QueryComputerImportRequest) SetWorkspaceId(v string) *QueryComputerImportRequest {
	s.WorkspaceId = &v
	return s
}

type QueryComputerImportResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// computer import infos
	Data []*ComputerImportVO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// total count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryComputerImportResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryComputerImportResponse) GoString() string {
	return s.String()
}

func (s *QueryComputerImportResponse) SetReqMsgId(v string) *QueryComputerImportResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryComputerImportResponse) SetResultCode(v string) *QueryComputerImportResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryComputerImportResponse) SetResultMsg(v string) *QueryComputerImportResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryComputerImportResponse) SetData(v []*ComputerImportVO) *QueryComputerImportResponse {
	s.Data = v
	return s
}

func (s *QueryComputerImportResponse) SetTotalCount(v int64) *QueryComputerImportResponse {
	s.TotalCount = &v
	return s
}

type ListComputerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// appserviceIds
	AppServiceIds []*string `json:"app_service_ids,omitempty" xml:"app_service_ids,omitempty" type:"Repeated"`
	// current page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// current page
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// workspace name
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
	// CMP模式下使用的token，一般场景勿用
	CloudManageToken *string `json:"cloud_manage_token,omitempty" xml:"cloud_manage_token,omitempty"`
	// vpc_iaas_id
	VpcIaasId *string `json:"vpc_iaas_id,omitempty" xml:"vpc_iaas_id,omitempty"`
	// private_ips
	PrivateIps []*string `json:"private_ips,omitempty" xml:"private_ips,omitempty" type:"Repeated"`
	// iaas_ids
	IaasIds []*string `json:"iaas_ids,omitempty" xml:"iaas_ids,omitempty" type:"Repeated"`
}

func (s ListComputerRequest) String() string {
	return tea.Prettify(s)
}

func (s ListComputerRequest) GoString() string {
	return s.String()
}

func (s *ListComputerRequest) SetAuthToken(v string) *ListComputerRequest {
	s.AuthToken = &v
	return s
}

func (s *ListComputerRequest) SetAppServiceIds(v []*string) *ListComputerRequest {
	s.AppServiceIds = v
	return s
}

func (s *ListComputerRequest) SetCurrentPage(v int64) *ListComputerRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListComputerRequest) SetName(v string) *ListComputerRequest {
	s.Name = &v
	return s
}

func (s *ListComputerRequest) SetPageSize(v int64) *ListComputerRequest {
	s.PageSize = &v
	return s
}

func (s *ListComputerRequest) SetWorkspace(v string) *ListComputerRequest {
	s.Workspace = &v
	return s
}

func (s *ListComputerRequest) SetCloudManageToken(v string) *ListComputerRequest {
	s.CloudManageToken = &v
	return s
}

func (s *ListComputerRequest) SetVpcIaasId(v string) *ListComputerRequest {
	s.VpcIaasId = &v
	return s
}

func (s *ListComputerRequest) SetPrivateIps(v []*string) *ListComputerRequest {
	s.PrivateIps = v
	return s
}

func (s *ListComputerRequest) SetIaasIds(v []*string) *ListComputerRequest {
	s.IaasIds = v
	return s
}

type ListComputerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// computer infos
	Data []*Computer `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// total count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// page size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// current page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
}

func (s ListComputerResponse) String() string {
	return tea.Prettify(s)
}

func (s ListComputerResponse) GoString() string {
	return s.String()
}

func (s *ListComputerResponse) SetReqMsgId(v string) *ListComputerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListComputerResponse) SetResultCode(v string) *ListComputerResponse {
	s.ResultCode = &v
	return s
}

func (s *ListComputerResponse) SetResultMsg(v string) *ListComputerResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListComputerResponse) SetData(v []*Computer) *ListComputerResponse {
	s.Data = v
	return s
}

func (s *ListComputerResponse) SetTotalCount(v int64) *ListComputerResponse {
	s.TotalCount = &v
	return s
}

func (s *ListComputerResponse) SetPageSize(v int64) *ListComputerResponse {
	s.PageSize = &v
	return s
}

func (s *ListComputerResponse) SetCurrentPage(v int64) *ListComputerResponse {
	s.CurrentPage = &v
	return s
}

type QueryComputerSpecRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// prviderIds
	ProviderIds []*string `json:"provider_ids,omitempty" xml:"provider_ids,omitempty" require:"true" type:"Repeated"`
	// zoneIds
	ZoneIds []*string `json:"zone_ids,omitempty" xml:"zone_ids,omitempty" require:"true" type:"Repeated"`
	// workspace name
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s QueryComputerSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryComputerSpecRequest) GoString() string {
	return s.String()
}

func (s *QueryComputerSpecRequest) SetAuthToken(v string) *QueryComputerSpecRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryComputerSpecRequest) SetProviderIds(v []*string) *QueryComputerSpecRequest {
	s.ProviderIds = v
	return s
}

func (s *QueryComputerSpecRequest) SetZoneIds(v []*string) *QueryComputerSpecRequest {
	s.ZoneIds = v
	return s
}

func (s *QueryComputerSpecRequest) SetWorkspace(v string) *QueryComputerSpecRequest {
	s.Workspace = &v
	return s
}

type QueryComputerSpecResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// computer spec list
	Data []*ComputerSpec `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryComputerSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryComputerSpecResponse) GoString() string {
	return s.String()
}

func (s *QueryComputerSpecResponse) SetReqMsgId(v string) *QueryComputerSpecResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryComputerSpecResponse) SetResultCode(v string) *QueryComputerSpecResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryComputerSpecResponse) SetResultMsg(v string) *QueryComputerSpecResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryComputerSpecResponse) SetData(v []*ComputerSpec) *QueryComputerSpecResponse {
	s.Data = v
	return s
}

type QueryComputerCommonimageRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// providerIds
	ProviderIds []*string `json:"provider_ids,omitempty" xml:"provider_ids,omitempty" require:"true" type:"Repeated"`
	// regionIds
	RegionIds []*string `json:"region_ids,omitempty" xml:"region_ids,omitempty" require:"true" type:"Repeated"`
}

func (s QueryComputerCommonimageRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryComputerCommonimageRequest) GoString() string {
	return s.String()
}

func (s *QueryComputerCommonimageRequest) SetAuthToken(v string) *QueryComputerCommonimageRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryComputerCommonimageRequest) SetProviderIds(v []*string) *QueryComputerCommonimageRequest {
	s.ProviderIds = v
	return s
}

func (s *QueryComputerCommonimageRequest) SetRegionIds(v []*string) *QueryComputerCommonimageRequest {
	s.RegionIds = v
	return s
}

type QueryComputerCommonimageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// common images
	Data []*CommonImage `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryComputerCommonimageResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryComputerCommonimageResponse) GoString() string {
	return s.String()
}

func (s *QueryComputerCommonimageResponse) SetReqMsgId(v string) *QueryComputerCommonimageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryComputerCommonimageResponse) SetResultCode(v string) *QueryComputerCommonimageResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryComputerCommonimageResponse) SetResultMsg(v string) *QueryComputerCommonimageResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryComputerCommonimageResponse) SetData(v []*CommonImage) *QueryComputerCommonimageResponse {
	s.Data = v
	return s
}

type AllLoadbalanceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_ids
	WorkspaceIds []*string `json:"workspace_ids,omitempty" xml:"workspace_ids,omitempty" require:"true" type:"Repeated"`
}

func (s AllLoadbalanceRequest) String() string {
	return tea.Prettify(s)
}

func (s AllLoadbalanceRequest) GoString() string {
	return s.String()
}

func (s *AllLoadbalanceRequest) SetAuthToken(v string) *AllLoadbalanceRequest {
	s.AuthToken = &v
	return s
}

func (s *AllLoadbalanceRequest) SetWorkspaceIds(v []*string) *AllLoadbalanceRequest {
	s.WorkspaceIds = v
	return s
}

type AllLoadbalanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*LoadBalancer `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s AllLoadbalanceResponse) String() string {
	return tea.Prettify(s)
}

func (s AllLoadbalanceResponse) GoString() string {
	return s.String()
}

func (s *AllLoadbalanceResponse) SetReqMsgId(v string) *AllLoadbalanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AllLoadbalanceResponse) SetResultCode(v string) *AllLoadbalanceResponse {
	s.ResultCode = &v
	return s
}

func (s *AllLoadbalanceResponse) SetResultMsg(v string) *AllLoadbalanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *AllLoadbalanceResponse) SetData(v []*LoadBalancer) *AllLoadbalanceResponse {
	s.Data = v
	return s
}

type QueryLoadbalanceImportRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
	// zone_id
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty"`
}

func (s QueryLoadbalanceImportRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLoadbalanceImportRequest) GoString() string {
	return s.String()
}

func (s *QueryLoadbalanceImportRequest) SetAuthToken(v string) *QueryLoadbalanceImportRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLoadbalanceImportRequest) SetCurrentPage(v int64) *QueryLoadbalanceImportRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryLoadbalanceImportRequest) SetPageSize(v int64) *QueryLoadbalanceImportRequest {
	s.PageSize = &v
	return s
}

func (s *QueryLoadbalanceImportRequest) SetWorkspace(v string) *QueryLoadbalanceImportRequest {
	s.Workspace = &v
	return s
}

func (s *QueryLoadbalanceImportRequest) SetZoneId(v string) *QueryLoadbalanceImportRequest {
	s.ZoneId = &v
	return s
}

type QueryLoadbalanceImportResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*LoadBalancerImportVO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// total_count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryLoadbalanceImportResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLoadbalanceImportResponse) GoString() string {
	return s.String()
}

func (s *QueryLoadbalanceImportResponse) SetReqMsgId(v string) *QueryLoadbalanceImportResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLoadbalanceImportResponse) SetResultCode(v string) *QueryLoadbalanceImportResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLoadbalanceImportResponse) SetResultMsg(v string) *QueryLoadbalanceImportResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLoadbalanceImportResponse) SetData(v []*LoadBalancerImportVO) *QueryLoadbalanceImportResponse {
	s.Data = v
	return s
}

func (s *QueryLoadbalanceImportResponse) SetTotalCount(v int64) *QueryLoadbalanceImportResponse {
	s.TotalCount = &v
	return s
}

type QueryDatabaseImportRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// iaas_type
	IaasType *string `json:"iaas_type,omitempty" xml:"iaas_type,omitempty" require:"true"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s QueryDatabaseImportRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDatabaseImportRequest) GoString() string {
	return s.String()
}

func (s *QueryDatabaseImportRequest) SetAuthToken(v string) *QueryDatabaseImportRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDatabaseImportRequest) SetCurrentPage(v int64) *QueryDatabaseImportRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryDatabaseImportRequest) SetIaasType(v string) *QueryDatabaseImportRequest {
	s.IaasType = &v
	return s
}

func (s *QueryDatabaseImportRequest) SetPageSize(v int64) *QueryDatabaseImportRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDatabaseImportRequest) SetWorkspace(v string) *QueryDatabaseImportRequest {
	s.Workspace = &v
	return s
}

type QueryDatabaseImportResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*DatabaseImportVO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// total_count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryDatabaseImportResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDatabaseImportResponse) GoString() string {
	return s.String()
}

func (s *QueryDatabaseImportResponse) SetReqMsgId(v string) *QueryDatabaseImportResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDatabaseImportResponse) SetResultCode(v string) *QueryDatabaseImportResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDatabaseImportResponse) SetResultMsg(v string) *QueryDatabaseImportResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDatabaseImportResponse) SetData(v []*DatabaseImportVO) *QueryDatabaseImportResponse {
	s.Data = v
	return s
}

func (s *QueryDatabaseImportResponse) SetTotalCount(v int64) *QueryDatabaseImportResponse {
	s.TotalCount = &v
	return s
}

type QueryDatabaseMasterzoneRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s QueryDatabaseMasterzoneRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDatabaseMasterzoneRequest) GoString() string {
	return s.String()
}

func (s *QueryDatabaseMasterzoneRequest) SetAuthToken(v string) *QueryDatabaseMasterzoneRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDatabaseMasterzoneRequest) SetWorkspace(v string) *QueryDatabaseMasterzoneRequest {
	s.Workspace = &v
	return s
}

type QueryDatabaseMasterzoneResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryDatabaseMasterzoneResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDatabaseMasterzoneResponse) GoString() string {
	return s.String()
}

func (s *QueryDatabaseMasterzoneResponse) SetReqMsgId(v string) *QueryDatabaseMasterzoneResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDatabaseMasterzoneResponse) SetResultCode(v string) *QueryDatabaseMasterzoneResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDatabaseMasterzoneResponse) SetResultMsg(v string) *QueryDatabaseMasterzoneResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDatabaseMasterzoneResponse) SetData(v []*string) *QueryDatabaseMasterzoneResponse {
	s.Data = v
	return s
}

type QueryDatabaseQuotaRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s QueryDatabaseQuotaRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDatabaseQuotaRequest) GoString() string {
	return s.String()
}

func (s *QueryDatabaseQuotaRequest) SetAuthToken(v string) *QueryDatabaseQuotaRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDatabaseQuotaRequest) SetWorkspace(v string) *QueryDatabaseQuotaRequest {
	s.Workspace = &v
	return s
}

type QueryDatabaseQuotaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*QuotaKv `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryDatabaseQuotaResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDatabaseQuotaResponse) GoString() string {
	return s.String()
}

func (s *QueryDatabaseQuotaResponse) SetReqMsgId(v string) *QueryDatabaseQuotaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDatabaseQuotaResponse) SetResultCode(v string) *QueryDatabaseQuotaResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDatabaseQuotaResponse) SetResultMsg(v string) *QueryDatabaseQuotaResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDatabaseQuotaResponse) SetData(v []*QuotaKv) *QueryDatabaseQuotaResponse {
	s.Data = v
	return s
}

type QueryDatabaseSecurityipRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s QueryDatabaseSecurityipRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDatabaseSecurityipRequest) GoString() string {
	return s.String()
}

func (s *QueryDatabaseSecurityipRequest) SetAuthToken(v string) *QueryDatabaseSecurityipRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDatabaseSecurityipRequest) SetId(v string) *QueryDatabaseSecurityipRequest {
	s.Id = &v
	return s
}

func (s *QueryDatabaseSecurityipRequest) SetWorkspace(v string) *QueryDatabaseSecurityipRequest {
	s.Workspace = &v
	return s
}

type QueryDatabaseSecurityipResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*DatabaseSecurityIp `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryDatabaseSecurityipResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDatabaseSecurityipResponse) GoString() string {
	return s.String()
}

func (s *QueryDatabaseSecurityipResponse) SetReqMsgId(v string) *QueryDatabaseSecurityipResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDatabaseSecurityipResponse) SetResultCode(v string) *QueryDatabaseSecurityipResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDatabaseSecurityipResponse) SetResultMsg(v string) *QueryDatabaseSecurityipResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDatabaseSecurityipResponse) SetData(v []*DatabaseSecurityIp) *QueryDatabaseSecurityipResponse {
	s.Data = v
	return s
}

type QueryDatabaseSchemaRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// char_sets
	CharSets []*string `json:"char_sets,omitempty" xml:"char_sets,omitempty" type:"Repeated"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// database_id
	DatabaseId *string `json:"database_id,omitempty" xml:"database_id,omitempty" require:"true"`
	// iaas_ids
	IaasIds []*string `json:"iaas_ids,omitempty" xml:"iaas_ids,omitempty" type:"Repeated"`
	// ids
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" type:"Repeated"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// statuses
	Statuses []*string `json:"statuses,omitempty" xml:"statuses,omitempty" type:"Repeated"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
}

func (s QueryDatabaseSchemaRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDatabaseSchemaRequest) GoString() string {
	return s.String()
}

func (s *QueryDatabaseSchemaRequest) SetAuthToken(v string) *QueryDatabaseSchemaRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDatabaseSchemaRequest) SetCharSets(v []*string) *QueryDatabaseSchemaRequest {
	s.CharSets = v
	return s
}

func (s *QueryDatabaseSchemaRequest) SetCurrentPage(v int64) *QueryDatabaseSchemaRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryDatabaseSchemaRequest) SetDatabaseId(v string) *QueryDatabaseSchemaRequest {
	s.DatabaseId = &v
	return s
}

func (s *QueryDatabaseSchemaRequest) SetIaasIds(v []*string) *QueryDatabaseSchemaRequest {
	s.IaasIds = v
	return s
}

func (s *QueryDatabaseSchemaRequest) SetIds(v []*string) *QueryDatabaseSchemaRequest {
	s.Ids = v
	return s
}

func (s *QueryDatabaseSchemaRequest) SetName(v string) *QueryDatabaseSchemaRequest {
	s.Name = &v
	return s
}

func (s *QueryDatabaseSchemaRequest) SetPageSize(v int64) *QueryDatabaseSchemaRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDatabaseSchemaRequest) SetStatuses(v []*string) *QueryDatabaseSchemaRequest {
	s.Statuses = v
	return s
}

func (s *QueryDatabaseSchemaRequest) SetWorkspace(v string) *QueryDatabaseSchemaRequest {
	s.Workspace = &v
	return s
}

type QueryDatabaseSchemaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*DbSchema `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// total_count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryDatabaseSchemaResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDatabaseSchemaResponse) GoString() string {
	return s.String()
}

func (s *QueryDatabaseSchemaResponse) SetReqMsgId(v string) *QueryDatabaseSchemaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDatabaseSchemaResponse) SetResultCode(v string) *QueryDatabaseSchemaResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDatabaseSchemaResponse) SetResultMsg(v string) *QueryDatabaseSchemaResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDatabaseSchemaResponse) SetData(v []*DbSchema) *QueryDatabaseSchemaResponse {
	s.Data = v
	return s
}

func (s *QueryDatabaseSchemaResponse) SetTotalCount(v int64) *QueryDatabaseSchemaResponse {
	s.TotalCount = &v
	return s
}

type QueryDatabaseAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// database_id
	DatabaseId *string `json:"database_id,omitempty" xml:"database_id,omitempty" require:"true"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryDatabaseAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDatabaseAccountRequest) GoString() string {
	return s.String()
}

func (s *QueryDatabaseAccountRequest) SetAuthToken(v string) *QueryDatabaseAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDatabaseAccountRequest) SetCurrentPage(v int64) *QueryDatabaseAccountRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryDatabaseAccountRequest) SetDatabaseId(v string) *QueryDatabaseAccountRequest {
	s.DatabaseId = &v
	return s
}

func (s *QueryDatabaseAccountRequest) SetPageSize(v int64) *QueryDatabaseAccountRequest {
	s.PageSize = &v
	return s
}

type QueryDatabaseAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*DatabaseAccount `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// total_count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryDatabaseAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDatabaseAccountResponse) GoString() string {
	return s.String()
}

func (s *QueryDatabaseAccountResponse) SetReqMsgId(v string) *QueryDatabaseAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDatabaseAccountResponse) SetResultCode(v string) *QueryDatabaseAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDatabaseAccountResponse) SetResultMsg(v string) *QueryDatabaseAccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDatabaseAccountResponse) SetData(v []*DatabaseAccount) *QueryDatabaseAccountResponse {
	s.Data = v
	return s
}

func (s *QueryDatabaseAccountResponse) SetTotalCount(v int64) *QueryDatabaseAccountResponse {
	s.TotalCount = &v
	return s
}

type GetWorkspaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s GetWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *GetWorkspaceRequest) SetAuthToken(v string) *GetWorkspaceRequest {
	s.AuthToken = &v
	return s
}

func (s *GetWorkspaceRequest) SetId(v string) *GetWorkspaceRequest {
	s.Id = &v
	return s
}

type GetWorkspaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// workspaceDto
	Data *WorkspaceDto `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *GetWorkspaceResponse) SetReqMsgId(v string) *GetWorkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetWorkspaceResponse) SetResultCode(v string) *GetWorkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *GetWorkspaceResponse) SetResultMsg(v string) *GetWorkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetWorkspaceResponse) SetData(v *WorkspaceDto) *GetWorkspaceResponse {
	s.Data = v
	return s
}

type ListRegionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s ListRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRegionRequest) GoString() string {
	return s.String()
}

func (s *ListRegionRequest) SetAuthToken(v string) *ListRegionRequest {
	s.AuthToken = &v
	return s
}

type ListRegionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// list
	Data []*RegionDto `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRegionResponse) GoString() string {
	return s.String()
}

func (s *ListRegionResponse) SetReqMsgId(v string) *ListRegionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListRegionResponse) SetResultCode(v string) *ListRegionResponse {
	s.ResultCode = &v
	return s
}

func (s *ListRegionResponse) SetResultMsg(v string) *ListRegionResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListRegionResponse) SetData(v []*RegionDto) *ListRegionResponse {
	s.Data = v
	return s
}

type ListRegionAccessibleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s ListRegionAccessibleRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRegionAccessibleRequest) GoString() string {
	return s.String()
}

func (s *ListRegionAccessibleRequest) SetAuthToken(v string) *ListRegionAccessibleRequest {
	s.AuthToken = &v
	return s
}

type ListRegionAccessibleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*RegionDto `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListRegionAccessibleResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRegionAccessibleResponse) GoString() string {
	return s.String()
}

func (s *ListRegionAccessibleResponse) SetReqMsgId(v string) *ListRegionAccessibleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListRegionAccessibleResponse) SetResultCode(v string) *ListRegionAccessibleResponse {
	s.ResultCode = &v
	return s
}

func (s *ListRegionAccessibleResponse) SetResultMsg(v string) *ListRegionAccessibleResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListRegionAccessibleResponse) SetData(v []*RegionDto) *ListRegionAccessibleResponse {
	s.Data = v
	return s
}

type UpdateDatabaseInfoRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s UpdateDatabaseInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatabaseInfoRequest) GoString() string {
	return s.String()
}

func (s *UpdateDatabaseInfoRequest) SetAuthToken(v string) *UpdateDatabaseInfoRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDatabaseInfoRequest) SetName(v string) *UpdateDatabaseInfoRequest {
	s.Name = &v
	return s
}

func (s *UpdateDatabaseInfoRequest) SetDescription(v string) *UpdateDatabaseInfoRequest {
	s.Description = &v
	return s
}

func (s *UpdateDatabaseInfoRequest) SetId(v string) *UpdateDatabaseInfoRequest {
	s.Id = &v
	return s
}

type UpdateDatabaseInfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateDatabaseInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatabaseInfoResponse) GoString() string {
	return s.String()
}

func (s *UpdateDatabaseInfoResponse) SetReqMsgId(v string) *UpdateDatabaseInfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDatabaseInfoResponse) SetResultCode(v string) *UpdateDatabaseInfoResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDatabaseInfoResponse) SetResultMsg(v string) *UpdateDatabaseInfoResponse {
	s.ResultMsg = &v
	return s
}

type SetDatabaseAssignRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app_service_ids
	AppServiceIds []*string `json:"app_service_ids,omitempty" xml:"app_service_ids,omitempty" type:"Repeated"`
	// app_ids
	AppIds []*string `json:"app_ids,omitempty" xml:"app_ids,omitempty" type:"Repeated"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty"`
	// ids
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" type:"Repeated"`
}

func (s SetDatabaseAssignRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDatabaseAssignRequest) GoString() string {
	return s.String()
}

func (s *SetDatabaseAssignRequest) SetAuthToken(v string) *SetDatabaseAssignRequest {
	s.AuthToken = &v
	return s
}

func (s *SetDatabaseAssignRequest) SetAppServiceIds(v []*string) *SetDatabaseAssignRequest {
	s.AppServiceIds = v
	return s
}

func (s *SetDatabaseAssignRequest) SetAppIds(v []*string) *SetDatabaseAssignRequest {
	s.AppIds = v
	return s
}

func (s *SetDatabaseAssignRequest) SetWorkspace(v string) *SetDatabaseAssignRequest {
	s.Workspace = &v
	return s
}

func (s *SetDatabaseAssignRequest) SetIds(v []*string) *SetDatabaseAssignRequest {
	s.Ids = v
	return s
}

type SetDatabaseAssignResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SetDatabaseAssignResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDatabaseAssignResponse) GoString() string {
	return s.String()
}

func (s *SetDatabaseAssignResponse) SetReqMsgId(v string) *SetDatabaseAssignResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetDatabaseAssignResponse) SetResultCode(v string) *SetDatabaseAssignResponse {
	s.ResultCode = &v
	return s
}

func (s *SetDatabaseAssignResponse) SetResultMsg(v string) *SetDatabaseAssignResponse {
	s.ResultMsg = &v
	return s
}

type SetDatabaseShareRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_ids
	WorkspaceIds []*string `json:"workspace_ids,omitempty" xml:"workspace_ids,omitempty" require:"true" type:"Repeated"`
	// ids
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" require:"true" type:"Repeated"`
}

func (s SetDatabaseShareRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDatabaseShareRequest) GoString() string {
	return s.String()
}

func (s *SetDatabaseShareRequest) SetAuthToken(v string) *SetDatabaseShareRequest {
	s.AuthToken = &v
	return s
}

func (s *SetDatabaseShareRequest) SetWorkspaceIds(v []*string) *SetDatabaseShareRequest {
	s.WorkspaceIds = v
	return s
}

func (s *SetDatabaseShareRequest) SetIds(v []*string) *SetDatabaseShareRequest {
	s.Ids = v
	return s
}

type SetDatabaseShareResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SetDatabaseShareResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDatabaseShareResponse) GoString() string {
	return s.String()
}

func (s *SetDatabaseShareResponse) SetReqMsgId(v string) *SetDatabaseShareResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetDatabaseShareResponse) SetResultCode(v string) *SetDatabaseShareResponse {
	s.ResultCode = &v
	return s
}

func (s *SetDatabaseShareResponse) SetResultMsg(v string) *SetDatabaseShareResponse {
	s.ResultMsg = &v
	return s
}

type RebootDatabaseRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s RebootDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s RebootDatabaseRequest) GoString() string {
	return s.String()
}

func (s *RebootDatabaseRequest) SetAuthToken(v string) *RebootDatabaseRequest {
	s.AuthToken = &v
	return s
}

func (s *RebootDatabaseRequest) SetId(v string) *RebootDatabaseRequest {
	s.Id = &v
	return s
}

type RebootDatabaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RebootDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s RebootDatabaseResponse) GoString() string {
	return s.String()
}

func (s *RebootDatabaseResponse) SetReqMsgId(v string) *RebootDatabaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RebootDatabaseResponse) SetResultCode(v string) *RebootDatabaseResponse {
	s.ResultCode = &v
	return s
}

func (s *RebootDatabaseResponse) SetResultMsg(v string) *RebootDatabaseResponse {
	s.ResultMsg = &v
	return s
}

type UpdateDatabaseAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s UpdateDatabaseAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatabaseAccountRequest) GoString() string {
	return s.String()
}

func (s *UpdateDatabaseAccountRequest) SetAuthToken(v string) *UpdateDatabaseAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDatabaseAccountRequest) SetDescription(v string) *UpdateDatabaseAccountRequest {
	s.Description = &v
	return s
}

func (s *UpdateDatabaseAccountRequest) SetId(v string) *UpdateDatabaseAccountRequest {
	s.Id = &v
	return s
}

type UpdateDatabaseAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateDatabaseAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatabaseAccountResponse) GoString() string {
	return s.String()
}

func (s *UpdateDatabaseAccountResponse) SetReqMsgId(v string) *UpdateDatabaseAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDatabaseAccountResponse) SetResultCode(v string) *UpdateDatabaseAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDatabaseAccountResponse) SetResultMsg(v string) *UpdateDatabaseAccountResponse {
	s.ResultMsg = &v
	return s
}

type SetDatabaseAccountpasswordRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// password
	Password *string `json:"password,omitempty" xml:"password,omitempty" require:"true"`
}

func (s SetDatabaseAccountpasswordRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDatabaseAccountpasswordRequest) GoString() string {
	return s.String()
}

func (s *SetDatabaseAccountpasswordRequest) SetAuthToken(v string) *SetDatabaseAccountpasswordRequest {
	s.AuthToken = &v
	return s
}

func (s *SetDatabaseAccountpasswordRequest) SetId(v string) *SetDatabaseAccountpasswordRequest {
	s.Id = &v
	return s
}

func (s *SetDatabaseAccountpasswordRequest) SetPassword(v string) *SetDatabaseAccountpasswordRequest {
	s.Password = &v
	return s
}

type SetDatabaseAccountpasswordResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SetDatabaseAccountpasswordResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDatabaseAccountpasswordResponse) GoString() string {
	return s.String()
}

func (s *SetDatabaseAccountpasswordResponse) SetReqMsgId(v string) *SetDatabaseAccountpasswordResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetDatabaseAccountpasswordResponse) SetResultCode(v string) *SetDatabaseAccountpasswordResponse {
	s.ResultCode = &v
	return s
}

func (s *SetDatabaseAccountpasswordResponse) SetResultMsg(v string) *SetDatabaseAccountpasswordResponse {
	s.ResultMsg = &v
	return s
}

type AuthDatabaseAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// schema_id
	SchemaId *string `json:"schema_id,omitempty" xml:"schema_id,omitempty" require:"true"`
	// privilege
	Privilege *string `json:"privilege,omitempty" xml:"privilege,omitempty" require:"true"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s AuthDatabaseAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthDatabaseAccountRequest) GoString() string {
	return s.String()
}

func (s *AuthDatabaseAccountRequest) SetAuthToken(v string) *AuthDatabaseAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *AuthDatabaseAccountRequest) SetSchemaId(v string) *AuthDatabaseAccountRequest {
	s.SchemaId = &v
	return s
}

func (s *AuthDatabaseAccountRequest) SetPrivilege(v string) *AuthDatabaseAccountRequest {
	s.Privilege = &v
	return s
}

func (s *AuthDatabaseAccountRequest) SetId(v string) *AuthDatabaseAccountRequest {
	s.Id = &v
	return s
}

type AuthDatabaseAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s AuthDatabaseAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthDatabaseAccountResponse) GoString() string {
	return s.String()
}

func (s *AuthDatabaseAccountResponse) SetReqMsgId(v string) *AuthDatabaseAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AuthDatabaseAccountResponse) SetResultCode(v string) *AuthDatabaseAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *AuthDatabaseAccountResponse) SetResultMsg(v string) *AuthDatabaseAccountResponse {
	s.ResultMsg = &v
	return s
}

type GetRegionTenantRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
}

func (s GetRegionTenantRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRegionTenantRequest) GoString() string {
	return s.String()
}

func (s *GetRegionTenantRequest) SetAuthToken(v string) *GetRegionTenantRequest {
	s.AuthToken = &v
	return s
}

type GetRegionTenantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// regionDto
	Data *RegionDto `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetRegionTenantResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRegionTenantResponse) GoString() string {
	return s.String()
}

func (s *GetRegionTenantResponse) SetReqMsgId(v string) *GetRegionTenantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetRegionTenantResponse) SetResultCode(v string) *GetRegionTenantResponse {
	s.ResultCode = &v
	return s
}

func (s *GetRegionTenantResponse) SetResultMsg(v string) *GetRegionTenantResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetRegionTenantResponse) SetData(v *RegionDto) *GetRegionTenantResponse {
	s.Data = v
	return s
}

type GetRegionAliasbyidRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty" require:"true"`
	// providerId
	ProviderId *string `json:"provider_id,omitempty" xml:"provider_id,omitempty" require:"true"`
	// iaasConnType
	IaasConnType *string `json:"iaas_conn_type,omitempty" xml:"iaas_conn_type,omitempty" require:"true"`
}

func (s GetRegionAliasbyidRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRegionAliasbyidRequest) GoString() string {
	return s.String()
}

func (s *GetRegionAliasbyidRequest) SetAuthToken(v string) *GetRegionAliasbyidRequest {
	s.AuthToken = &v
	return s
}

func (s *GetRegionAliasbyidRequest) SetRegionId(v string) *GetRegionAliasbyidRequest {
	s.RegionId = &v
	return s
}

func (s *GetRegionAliasbyidRequest) SetProviderId(v string) *GetRegionAliasbyidRequest {
	s.ProviderId = &v
	return s
}

func (s *GetRegionAliasbyidRequest) SetIaasConnType(v string) *GetRegionAliasbyidRequest {
	s.IaasConnType = &v
	return s
}

type GetRegionAliasbyidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// region alias
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetRegionAliasbyidResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRegionAliasbyidResponse) GoString() string {
	return s.String()
}

func (s *GetRegionAliasbyidResponse) SetReqMsgId(v string) *GetRegionAliasbyidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetRegionAliasbyidResponse) SetResultCode(v string) *GetRegionAliasbyidResponse {
	s.ResultCode = &v
	return s
}

func (s *GetRegionAliasbyidResponse) SetResultMsg(v string) *GetRegionAliasbyidResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetRegionAliasbyidResponse) SetData(v string) *GetRegionAliasbyidResponse {
	s.Data = &v
	return s
}

type QueryDiskRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// current page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// page size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// workspace name
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
	// statuses
	Statuses []*string `json:"statuses,omitempty" xml:"statuses,omitempty" type:"Repeated"`
	// type
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// computer_ids
	ComputerIds []*string `json:"computer_ids,omitempty" xml:"computer_ids,omitempty" type:"Repeated"`
	// devices
	Devices []*string `json:"devices,omitempty" xml:"devices,omitempty" type:"Repeated"`
	// max_size
	MaxSize *int64 `json:"max_size,omitempty" xml:"max_size,omitempty"`
	// min_size
	MinSize *int64 `json:"min_size,omitempty" xml:"min_size,omitempty"`
	// workspace_ids
	WorkspaceIds []*string `json:"workspace_ids,omitempty" xml:"workspace_ids,omitempty" type:"Repeated"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s QueryDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDiskRequest) GoString() string {
	return s.String()
}

func (s *QueryDiskRequest) SetAuthToken(v string) *QueryDiskRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDiskRequest) SetCurrentPage(v int64) *QueryDiskRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryDiskRequest) SetPageSize(v int64) *QueryDiskRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDiskRequest) SetWorkspace(v string) *QueryDiskRequest {
	s.Workspace = &v
	return s
}

func (s *QueryDiskRequest) SetStatuses(v []*string) *QueryDiskRequest {
	s.Statuses = v
	return s
}

func (s *QueryDiskRequest) SetType(v string) *QueryDiskRequest {
	s.Type = &v
	return s
}

func (s *QueryDiskRequest) SetComputerIds(v []*string) *QueryDiskRequest {
	s.ComputerIds = v
	return s
}

func (s *QueryDiskRequest) SetDevices(v []*string) *QueryDiskRequest {
	s.Devices = v
	return s
}

func (s *QueryDiskRequest) SetMaxSize(v int64) *QueryDiskRequest {
	s.MaxSize = &v
	return s
}

func (s *QueryDiskRequest) SetMinSize(v int64) *QueryDiskRequest {
	s.MinSize = &v
	return s
}

func (s *QueryDiskRequest) SetWorkspaceIds(v []*string) *QueryDiskRequest {
	s.WorkspaceIds = v
	return s
}

func (s *QueryDiskRequest) SetName(v string) *QueryDiskRequest {
	s.Name = &v
	return s
}

type QueryDiskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// disk detail infos
	Data []*Disk `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// total count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// page size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// current page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
}

func (s QueryDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDiskResponse) GoString() string {
	return s.String()
}

func (s *QueryDiskResponse) SetReqMsgId(v string) *QueryDiskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDiskResponse) SetResultCode(v string) *QueryDiskResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDiskResponse) SetResultMsg(v string) *QueryDiskResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDiskResponse) SetData(v []*Disk) *QueryDiskResponse {
	s.Data = v
	return s
}

func (s *QueryDiskResponse) SetTotalCount(v int64) *QueryDiskResponse {
	s.TotalCount = &v
	return s
}

func (s *QueryDiskResponse) SetPageSize(v int64) *QueryDiskResponse {
	s.PageSize = &v
	return s
}

func (s *QueryDiskResponse) SetCurrentPage(v int64) *QueryDiskResponse {
	s.CurrentPage = &v
	return s
}

type QueryImageRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// current page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// page size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// workspace name
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
	// status
	Statuses *string `json:"statuses,omitempty" xml:"statuses,omitempty"`
}

func (s QueryImageRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryImageRequest) GoString() string {
	return s.String()
}

func (s *QueryImageRequest) SetAuthToken(v string) *QueryImageRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryImageRequest) SetCurrentPage(v int64) *QueryImageRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryImageRequest) SetPageSize(v int64) *QueryImageRequest {
	s.PageSize = &v
	return s
}

func (s *QueryImageRequest) SetWorkspace(v string) *QueryImageRequest {
	s.Workspace = &v
	return s
}

func (s *QueryImageRequest) SetStatuses(v string) *QueryImageRequest {
	s.Statuses = &v
	return s
}

type QueryImageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// image infos
	Data []*CommonImage `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// total count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryImageResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryImageResponse) GoString() string {
	return s.String()
}

func (s *QueryImageResponse) SetReqMsgId(v string) *QueryImageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryImageResponse) SetResultCode(v string) *QueryImageResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryImageResponse) SetResultMsg(v string) *QueryImageResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryImageResponse) SetData(v []*CommonImage) *QueryImageResponse {
	s.Data = v
	return s
}

func (s *QueryImageResponse) SetTotalCount(v int64) *QueryImageResponse {
	s.TotalCount = &v
	return s
}

type CreateDatabaseSchemaRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// char_set
	CharSet *string `json:"char_set,omitempty" xml:"char_set,omitempty" require:"true"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// grant_map
	GrantMap []*MapStringToStringEntity `json:"grant_map,omitempty" xml:"grant_map,omitempty" type:"Repeated"`
	// 数据库id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s CreateDatabaseSchemaRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDatabaseSchemaRequest) GoString() string {
	return s.String()
}

func (s *CreateDatabaseSchemaRequest) SetAuthToken(v string) *CreateDatabaseSchemaRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDatabaseSchemaRequest) SetCharSet(v string) *CreateDatabaseSchemaRequest {
	s.CharSet = &v
	return s
}

func (s *CreateDatabaseSchemaRequest) SetDescription(v string) *CreateDatabaseSchemaRequest {
	s.Description = &v
	return s
}

func (s *CreateDatabaseSchemaRequest) SetGrantMap(v []*MapStringToStringEntity) *CreateDatabaseSchemaRequest {
	s.GrantMap = v
	return s
}

func (s *CreateDatabaseSchemaRequest) SetId(v string) *CreateDatabaseSchemaRequest {
	s.Id = &v
	return s
}

func (s *CreateDatabaseSchemaRequest) SetName(v string) *CreateDatabaseSchemaRequest {
	s.Name = &v
	return s
}

type CreateDatabaseSchemaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回的schemaid
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateDatabaseSchemaResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDatabaseSchemaResponse) GoString() string {
	return s.String()
}

func (s *CreateDatabaseSchemaResponse) SetReqMsgId(v string) *CreateDatabaseSchemaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDatabaseSchemaResponse) SetResultCode(v string) *CreateDatabaseSchemaResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDatabaseSchemaResponse) SetResultMsg(v string) *CreateDatabaseSchemaResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDatabaseSchemaResponse) SetData(v string) *CreateDatabaseSchemaResponse {
	s.Data = &v
	return s
}

type CreateLoadbalanceMountRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// mount_map
	MountMap []*MapStringToIntegerEntity `json:"mount_map,omitempty" xml:"mount_map,omitempty" require:"true" type:"Repeated"`
	// domain
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s CreateLoadbalanceMountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadbalanceMountRequest) GoString() string {
	return s.String()
}

func (s *CreateLoadbalanceMountRequest) SetAuthToken(v string) *CreateLoadbalanceMountRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLoadbalanceMountRequest) SetMountMap(v []*MapStringToIntegerEntity) *CreateLoadbalanceMountRequest {
	s.MountMap = v
	return s
}

func (s *CreateLoadbalanceMountRequest) SetDomain(v string) *CreateLoadbalanceMountRequest {
	s.Domain = &v
	return s
}

func (s *CreateLoadbalanceMountRequest) SetId(v string) *CreateLoadbalanceMountRequest {
	s.Id = &v
	return s
}

type CreateLoadbalanceMountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateLoadbalanceMountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadbalanceMountResponse) GoString() string {
	return s.String()
}

func (s *CreateLoadbalanceMountResponse) SetReqMsgId(v string) *CreateLoadbalanceMountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLoadbalanceMountResponse) SetResultCode(v string) *CreateLoadbalanceMountResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLoadbalanceMountResponse) SetResultMsg(v string) *CreateLoadbalanceMountResponse {
	s.ResultMsg = &v
	return s
}

type CreateLoadbalanceListenerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// backend_server_port
	BackendServerPort *int64 `json:"backend_server_port,omitempty" xml:"backend_server_port,omitempty"`
	// bandwidth
	Bandwidth *int64 `json:"bandwidth,omitempty" xml:"bandwidth,omitempty"`
	// certificate_iaas_id
	CertificateIaasId *string `json:"certificate_iaas_id,omitempty" xml:"certificate_iaas_id,omitempty"`
	// certificate_id
	CertificateId *string `json:"certificate_id,omitempty" xml:"certificate_id,omitempty"`
	// cookie
	Cookie *string `json:"cookie,omitempty" xml:"cookie,omitempty"`
	// cookie_timeout
	CookieTimeout *int64 `json:"cookie_timeout,omitempty" xml:"cookie_timeout,omitempty"`
	// established_timeout
	EstablishedTimeout *int64 `json:"established_timeout,omitempty" xml:"established_timeout,omitempty"`
	// gm_crypto_cert_iaas_id
	GmCryptoCertIaasId *string `json:"gm_crypto_cert_iaas_id,omitempty" xml:"gm_crypto_cert_iaas_id,omitempty"`
	// gm_sign_cert_iaas_id
	GmSignCertIaasId *string `json:"gm_sign_cert_iaas_id,omitempty" xml:"gm_sign_cert_iaas_id,omitempty"`
	// health_monitor
	HealthMonitor *ListenerHealthMonitor `json:"health_monitor,omitempty" xml:"health_monitor,omitempty"`
	// lb id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// listener_port
	ListenerPort *int64 `json:"listener_port,omitempty" xml:"listener_port,omitempty" require:"true"`
	// persist_timeout
	PersistTimeout *int64 `json:"persist_timeout,omitempty" xml:"persist_timeout,omitempty"`
	// scheduler
	Scheduler *string `json:"scheduler,omitempty" xml:"scheduler,omitempty"`
	// sticky_session_type
	StickySessionType *string `json:"sticky_session_type,omitempty" xml:"sticky_session_type,omitempty"`
	// tls_cipher_policy
	TlsCipherPolicy *string `json:"tls_cipher_policy,omitempty" xml:"tls_cipher_policy,omitempty"`
	// type
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// v_computer_group_id
	VComputerGroupId *string `json:"v_computer_group_id,omitempty" xml:"v_computer_group_id,omitempty"`
	// x_forwarded_for
	XForwardedFor *string `json:"x_forwarded_for,omitempty" xml:"x_forwarded_for,omitempty"`
}

func (s CreateLoadbalanceListenerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadbalanceListenerRequest) GoString() string {
	return s.String()
}

func (s *CreateLoadbalanceListenerRequest) SetAuthToken(v string) *CreateLoadbalanceListenerRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLoadbalanceListenerRequest) SetBackendServerPort(v int64) *CreateLoadbalanceListenerRequest {
	s.BackendServerPort = &v
	return s
}

func (s *CreateLoadbalanceListenerRequest) SetBandwidth(v int64) *CreateLoadbalanceListenerRequest {
	s.Bandwidth = &v
	return s
}

func (s *CreateLoadbalanceListenerRequest) SetCertificateIaasId(v string) *CreateLoadbalanceListenerRequest {
	s.CertificateIaasId = &v
	return s
}

func (s *CreateLoadbalanceListenerRequest) SetCertificateId(v string) *CreateLoadbalanceListenerRequest {
	s.CertificateId = &v
	return s
}

func (s *CreateLoadbalanceListenerRequest) SetCookie(v string) *CreateLoadbalanceListenerRequest {
	s.Cookie = &v
	return s
}

func (s *CreateLoadbalanceListenerRequest) SetCookieTimeout(v int64) *CreateLoadbalanceListenerRequest {
	s.CookieTimeout = &v
	return s
}

func (s *CreateLoadbalanceListenerRequest) SetEstablishedTimeout(v int64) *CreateLoadbalanceListenerRequest {
	s.EstablishedTimeout = &v
	return s
}

func (s *CreateLoadbalanceListenerRequest) SetGmCryptoCertIaasId(v string) *CreateLoadbalanceListenerRequest {
	s.GmCryptoCertIaasId = &v
	return s
}

func (s *CreateLoadbalanceListenerRequest) SetGmSignCertIaasId(v string) *CreateLoadbalanceListenerRequest {
	s.GmSignCertIaasId = &v
	return s
}

func (s *CreateLoadbalanceListenerRequest) SetHealthMonitor(v *ListenerHealthMonitor) *CreateLoadbalanceListenerRequest {
	s.HealthMonitor = v
	return s
}

func (s *CreateLoadbalanceListenerRequest) SetId(v string) *CreateLoadbalanceListenerRequest {
	s.Id = &v
	return s
}

func (s *CreateLoadbalanceListenerRequest) SetListenerPort(v int64) *CreateLoadbalanceListenerRequest {
	s.ListenerPort = &v
	return s
}

func (s *CreateLoadbalanceListenerRequest) SetPersistTimeout(v int64) *CreateLoadbalanceListenerRequest {
	s.PersistTimeout = &v
	return s
}

func (s *CreateLoadbalanceListenerRequest) SetScheduler(v string) *CreateLoadbalanceListenerRequest {
	s.Scheduler = &v
	return s
}

func (s *CreateLoadbalanceListenerRequest) SetStickySessionType(v string) *CreateLoadbalanceListenerRequest {
	s.StickySessionType = &v
	return s
}

func (s *CreateLoadbalanceListenerRequest) SetTlsCipherPolicy(v string) *CreateLoadbalanceListenerRequest {
	s.TlsCipherPolicy = &v
	return s
}

func (s *CreateLoadbalanceListenerRequest) SetType(v string) *CreateLoadbalanceListenerRequest {
	s.Type = &v
	return s
}

func (s *CreateLoadbalanceListenerRequest) SetVComputerGroupId(v string) *CreateLoadbalanceListenerRequest {
	s.VComputerGroupId = &v
	return s
}

func (s *CreateLoadbalanceListenerRequest) SetXForwardedFor(v string) *CreateLoadbalanceListenerRequest {
	s.XForwardedFor = &v
	return s
}

type CreateLoadbalanceListenerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateLoadbalanceListenerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadbalanceListenerResponse) GoString() string {
	return s.String()
}

func (s *CreateLoadbalanceListenerResponse) SetReqMsgId(v string) *CreateLoadbalanceListenerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLoadbalanceListenerResponse) SetResultCode(v string) *CreateLoadbalanceListenerResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLoadbalanceListenerResponse) SetResultMsg(v string) *CreateLoadbalanceListenerResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLoadbalanceListenerResponse) SetData(v string) *CreateLoadbalanceListenerResponse {
	s.Data = &v
	return s
}

type StopLoadbalanceListenerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// load_balancer_id
	LoadBalancerId *string `json:"load_balancer_id,omitempty" xml:"load_balancer_id,omitempty" require:"true"`
	// listener_port
	ListenerPort *int64 `json:"listener_port,omitempty" xml:"listener_port,omitempty" require:"true"`
}

func (s StopLoadbalanceListenerRequest) String() string {
	return tea.Prettify(s)
}

func (s StopLoadbalanceListenerRequest) GoString() string {
	return s.String()
}

func (s *StopLoadbalanceListenerRequest) SetAuthToken(v string) *StopLoadbalanceListenerRequest {
	s.AuthToken = &v
	return s
}

func (s *StopLoadbalanceListenerRequest) SetLoadBalancerId(v string) *StopLoadbalanceListenerRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *StopLoadbalanceListenerRequest) SetListenerPort(v int64) *StopLoadbalanceListenerRequest {
	s.ListenerPort = &v
	return s
}

type StopLoadbalanceListenerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StopLoadbalanceListenerResponse) String() string {
	return tea.Prettify(s)
}

func (s StopLoadbalanceListenerResponse) GoString() string {
	return s.String()
}

func (s *StopLoadbalanceListenerResponse) SetReqMsgId(v string) *StopLoadbalanceListenerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StopLoadbalanceListenerResponse) SetResultCode(v string) *StopLoadbalanceListenerResponse {
	s.ResultCode = &v
	return s
}

func (s *StopLoadbalanceListenerResponse) SetResultMsg(v string) *StopLoadbalanceListenerResponse {
	s.ResultMsg = &v
	return s
}

type StartLoadbalanceListenerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// load_balancer_id
	LoadBalancerId *string `json:"load_balancer_id,omitempty" xml:"load_balancer_id,omitempty" require:"true"`
	// listener_port
	ListenerPort *int64 `json:"listener_port,omitempty" xml:"listener_port,omitempty" require:"true"`
}

func (s StartLoadbalanceListenerRequest) String() string {
	return tea.Prettify(s)
}

func (s StartLoadbalanceListenerRequest) GoString() string {
	return s.String()
}

func (s *StartLoadbalanceListenerRequest) SetAuthToken(v string) *StartLoadbalanceListenerRequest {
	s.AuthToken = &v
	return s
}

func (s *StartLoadbalanceListenerRequest) SetLoadBalancerId(v string) *StartLoadbalanceListenerRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *StartLoadbalanceListenerRequest) SetListenerPort(v int64) *StartLoadbalanceListenerRequest {
	s.ListenerPort = &v
	return s
}

type StartLoadbalanceListenerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StartLoadbalanceListenerResponse) String() string {
	return tea.Prettify(s)
}

func (s StartLoadbalanceListenerResponse) GoString() string {
	return s.String()
}

func (s *StartLoadbalanceListenerResponse) SetReqMsgId(v string) *StartLoadbalanceListenerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartLoadbalanceListenerResponse) SetResultCode(v string) *StartLoadbalanceListenerResponse {
	s.ResultCode = &v
	return s
}

func (s *StartLoadbalanceListenerResponse) SetResultMsg(v string) *StartLoadbalanceListenerResponse {
	s.ResultMsg = &v
	return s
}

type UpdateLoadbalanceListenerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// bandwidth
	Bandwidth *int64 `json:"bandwidth,omitempty" xml:"bandwidth,omitempty"`
	// certificate_iaas_id
	CertificateIaasId *string `json:"certificate_iaas_id,omitempty" xml:"certificate_iaas_id,omitempty"`
	// certificate_id
	CertificateId *string `json:"certificate_id,omitempty" xml:"certificate_id,omitempty"`
	// cookie
	Cookie *string `json:"cookie,omitempty" xml:"cookie,omitempty"`
	// cookie_timeout
	CookieTimeout *int64 `json:"cookie_timeout,omitempty" xml:"cookie_timeout,omitempty"`
	// established_timeout
	EstablishedTimeout *int64 `json:"established_timeout,omitempty" xml:"established_timeout,omitempty"`
	// gm_crypto_cert_iaas_id
	GmCryptoCertIaasId *string `json:"gm_crypto_cert_iaas_id,omitempty" xml:"gm_crypto_cert_iaas_id,omitempty"`
	// gm_sign_cert_iaas_id
	GmSignCertIaasId *string `json:"gm_sign_cert_iaas_id,omitempty" xml:"gm_sign_cert_iaas_id,omitempty"`
	// health_monitor
	HealthMonitor *ListenerHealthMonitor `json:"health_monitor,omitempty" xml:"health_monitor,omitempty"`
	// listener_port
	ListenerPort *int64 `json:"listener_port,omitempty" xml:"listener_port,omitempty" require:"true"`
	// load_balancer_id
	LoadBalancerId *string `json:"load_balancer_id,omitempty" xml:"load_balancer_id,omitempty" require:"true"`
	// persist_timeout
	PersistTimeout *int64 `json:"persist_timeout,omitempty" xml:"persist_timeout,omitempty"`
	// scheduler
	Scheduler *string `json:"scheduler,omitempty" xml:"scheduler,omitempty"`
	// sticky_session_type
	StickySessionType *string `json:"sticky_session_type,omitempty" xml:"sticky_session_type,omitempty"`
	// tls_cipher_policy
	TlsCipherPolicy *string `json:"tls_cipher_policy,omitempty" xml:"tls_cipher_policy,omitempty"`
	// use_v_computer_group
	UseVComputerGroup *bool `json:"use_v_computer_group,omitempty" xml:"use_v_computer_group,omitempty"`
	// v_computer_group_id
	VComputerGroupId *string `json:"v_computer_group_id,omitempty" xml:"v_computer_group_id,omitempty"`
}

func (s UpdateLoadbalanceListenerRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLoadbalanceListenerRequest) GoString() string {
	return s.String()
}

func (s *UpdateLoadbalanceListenerRequest) SetAuthToken(v string) *UpdateLoadbalanceListenerRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateLoadbalanceListenerRequest) SetBandwidth(v int64) *UpdateLoadbalanceListenerRequest {
	s.Bandwidth = &v
	return s
}

func (s *UpdateLoadbalanceListenerRequest) SetCertificateIaasId(v string) *UpdateLoadbalanceListenerRequest {
	s.CertificateIaasId = &v
	return s
}

func (s *UpdateLoadbalanceListenerRequest) SetCertificateId(v string) *UpdateLoadbalanceListenerRequest {
	s.CertificateId = &v
	return s
}

func (s *UpdateLoadbalanceListenerRequest) SetCookie(v string) *UpdateLoadbalanceListenerRequest {
	s.Cookie = &v
	return s
}

func (s *UpdateLoadbalanceListenerRequest) SetCookieTimeout(v int64) *UpdateLoadbalanceListenerRequest {
	s.CookieTimeout = &v
	return s
}

func (s *UpdateLoadbalanceListenerRequest) SetEstablishedTimeout(v int64) *UpdateLoadbalanceListenerRequest {
	s.EstablishedTimeout = &v
	return s
}

func (s *UpdateLoadbalanceListenerRequest) SetGmCryptoCertIaasId(v string) *UpdateLoadbalanceListenerRequest {
	s.GmCryptoCertIaasId = &v
	return s
}

func (s *UpdateLoadbalanceListenerRequest) SetGmSignCertIaasId(v string) *UpdateLoadbalanceListenerRequest {
	s.GmSignCertIaasId = &v
	return s
}

func (s *UpdateLoadbalanceListenerRequest) SetHealthMonitor(v *ListenerHealthMonitor) *UpdateLoadbalanceListenerRequest {
	s.HealthMonitor = v
	return s
}

func (s *UpdateLoadbalanceListenerRequest) SetListenerPort(v int64) *UpdateLoadbalanceListenerRequest {
	s.ListenerPort = &v
	return s
}

func (s *UpdateLoadbalanceListenerRequest) SetLoadBalancerId(v string) *UpdateLoadbalanceListenerRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *UpdateLoadbalanceListenerRequest) SetPersistTimeout(v int64) *UpdateLoadbalanceListenerRequest {
	s.PersistTimeout = &v
	return s
}

func (s *UpdateLoadbalanceListenerRequest) SetScheduler(v string) *UpdateLoadbalanceListenerRequest {
	s.Scheduler = &v
	return s
}

func (s *UpdateLoadbalanceListenerRequest) SetStickySessionType(v string) *UpdateLoadbalanceListenerRequest {
	s.StickySessionType = &v
	return s
}

func (s *UpdateLoadbalanceListenerRequest) SetTlsCipherPolicy(v string) *UpdateLoadbalanceListenerRequest {
	s.TlsCipherPolicy = &v
	return s
}

func (s *UpdateLoadbalanceListenerRequest) SetUseVComputerGroup(v bool) *UpdateLoadbalanceListenerRequest {
	s.UseVComputerGroup = &v
	return s
}

func (s *UpdateLoadbalanceListenerRequest) SetVComputerGroupId(v string) *UpdateLoadbalanceListenerRequest {
	s.VComputerGroupId = &v
	return s
}

type UpdateLoadbalanceListenerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateLoadbalanceListenerResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLoadbalanceListenerResponse) GoString() string {
	return s.String()
}

func (s *UpdateLoadbalanceListenerResponse) SetReqMsgId(v string) *UpdateLoadbalanceListenerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateLoadbalanceListenerResponse) SetResultCode(v string) *UpdateLoadbalanceListenerResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateLoadbalanceListenerResponse) SetResultMsg(v string) *UpdateLoadbalanceListenerResponse {
	s.ResultMsg = &v
	return s
}

type QueryDiskspecRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// provider id
	ProviderId *string `json:"provider_id,omitempty" xml:"provider_id,omitempty"`
	// enable
	Enable *bool `json:"enable,omitempty" xml:"enable,omitempty"`
}

func (s QueryDiskspecRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDiskspecRequest) GoString() string {
	return s.String()
}

func (s *QueryDiskspecRequest) SetAuthToken(v string) *QueryDiskspecRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDiskspecRequest) SetProviderId(v string) *QueryDiskspecRequest {
	s.ProviderId = &v
	return s
}

func (s *QueryDiskspecRequest) SetEnable(v bool) *QueryDiskspecRequest {
	s.Enable = &v
	return s
}

type QueryDiskspecResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// disk spec infos
	Data []*DiskSpec `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryDiskspecResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDiskspecResponse) GoString() string {
	return s.String()
}

func (s *QueryDiskspecResponse) SetReqMsgId(v string) *QueryDiskspecResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDiskspecResponse) SetResultCode(v string) *QueryDiskspecResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDiskspecResponse) SetResultMsg(v string) *QueryDiskspecResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDiskspecResponse) SetData(v []*DiskSpec) *QueryDiskspecResponse {
	s.Data = v
	return s
}

type QueryComputerquotaRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace name
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s QueryComputerquotaRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryComputerquotaRequest) GoString() string {
	return s.String()
}

func (s *QueryComputerquotaRequest) SetAuthToken(v string) *QueryComputerquotaRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryComputerquotaRequest) SetWorkspace(v string) *QueryComputerquotaRequest {
	s.Workspace = &v
	return s
}

type QueryComputerquotaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// computer quota info jsonstring
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryComputerquotaResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryComputerquotaResponse) GoString() string {
	return s.String()
}

func (s *QueryComputerquotaResponse) SetReqMsgId(v string) *QueryComputerquotaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryComputerquotaResponse) SetResultCode(v string) *QueryComputerquotaResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryComputerquotaResponse) SetResultMsg(v string) *QueryComputerquotaResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryComputerquotaResponse) SetData(v string) *QueryComputerquotaResponse {
	s.Data = &v
	return s
}

type StopComputerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// computer ids
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" require:"true" type:"Repeated"`
	// 后续版本必填
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s StopComputerRequest) String() string {
	return tea.Prettify(s)
}

func (s StopComputerRequest) GoString() string {
	return s.String()
}

func (s *StopComputerRequest) SetAuthToken(v string) *StopComputerRequest {
	s.AuthToken = &v
	return s
}

func (s *StopComputerRequest) SetIds(v []*string) *StopComputerRequest {
	s.Ids = v
	return s
}

func (s *StopComputerRequest) SetWorkspaceId(v string) *StopComputerRequest {
	s.WorkspaceId = &v
	return s
}

type StopComputerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// paas_request_id
	PaasRequestId *string `json:"paas_request_id,omitempty" xml:"paas_request_id,omitempty"`
}

func (s StopComputerResponse) String() string {
	return tea.Prettify(s)
}

func (s StopComputerResponse) GoString() string {
	return s.String()
}

func (s *StopComputerResponse) SetReqMsgId(v string) *StopComputerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StopComputerResponse) SetResultCode(v string) *StopComputerResponse {
	s.ResultCode = &v
	return s
}

func (s *StopComputerResponse) SetResultMsg(v string) *StopComputerResponse {
	s.ResultMsg = &v
	return s
}

func (s *StopComputerResponse) SetPaasRequestId(v string) *StopComputerResponse {
	s.PaasRequestId = &v
	return s
}

type RebootComputerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// ids
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" require:"true" type:"Repeated"`
	// 后续必填
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s RebootComputerRequest) String() string {
	return tea.Prettify(s)
}

func (s RebootComputerRequest) GoString() string {
	return s.String()
}

func (s *RebootComputerRequest) SetAuthToken(v string) *RebootComputerRequest {
	s.AuthToken = &v
	return s
}

func (s *RebootComputerRequest) SetIds(v []*string) *RebootComputerRequest {
	s.Ids = v
	return s
}

func (s *RebootComputerRequest) SetWorkspaceId(v string) *RebootComputerRequest {
	s.WorkspaceId = &v
	return s
}

type RebootComputerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// paas_request_id
	PaasRequestId *string `json:"paas_request_id,omitempty" xml:"paas_request_id,omitempty"`
}

func (s RebootComputerResponse) String() string {
	return tea.Prettify(s)
}

func (s RebootComputerResponse) GoString() string {
	return s.String()
}

func (s *RebootComputerResponse) SetReqMsgId(v string) *RebootComputerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RebootComputerResponse) SetResultCode(v string) *RebootComputerResponse {
	s.ResultCode = &v
	return s
}

func (s *RebootComputerResponse) SetResultMsg(v string) *RebootComputerResponse {
	s.ResultMsg = &v
	return s
}

func (s *RebootComputerResponse) SetPaasRequestId(v string) *RebootComputerResponse {
	s.PaasRequestId = &v
	return s
}

type QueryComputerSecuritygroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// computer id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s QueryComputerSecuritygroupRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryComputerSecuritygroupRequest) GoString() string {
	return s.String()
}

func (s *QueryComputerSecuritygroupRequest) SetAuthToken(v string) *QueryComputerSecuritygroupRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryComputerSecuritygroupRequest) SetId(v string) *QueryComputerSecuritygroupRequest {
	s.Id = &v
	return s
}

type QueryComputerSecuritygroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// security group info
	Data []*JoinedSecurityGroupVO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryComputerSecuritygroupResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryComputerSecuritygroupResponse) GoString() string {
	return s.String()
}

func (s *QueryComputerSecuritygroupResponse) SetReqMsgId(v string) *QueryComputerSecuritygroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryComputerSecuritygroupResponse) SetResultCode(v string) *QueryComputerSecuritygroupResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryComputerSecuritygroupResponse) SetResultMsg(v string) *QueryComputerSecuritygroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryComputerSecuritygroupResponse) SetData(v []*JoinedSecurityGroupVO) *QueryComputerSecuritygroupResponse {
	s.Data = v
	return s
}

type QuerySecuritygroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace name
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
	// current page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// page size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QuerySecuritygroupRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySecuritygroupRequest) GoString() string {
	return s.String()
}

func (s *QuerySecuritygroupRequest) SetAuthToken(v string) *QuerySecuritygroupRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySecuritygroupRequest) SetWorkspace(v string) *QuerySecuritygroupRequest {
	s.Workspace = &v
	return s
}

func (s *QuerySecuritygroupRequest) SetCurrentPage(v int64) *QuerySecuritygroupRequest {
	s.CurrentPage = &v
	return s
}

func (s *QuerySecuritygroupRequest) SetPageSize(v int64) *QuerySecuritygroupRequest {
	s.PageSize = &v
	return s
}

type QuerySecuritygroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// currentPage
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// pageSize
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// totalCount
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// security group infos
	Data []*SecurityGroupVO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QuerySecuritygroupResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySecuritygroupResponse) GoString() string {
	return s.String()
}

func (s *QuerySecuritygroupResponse) SetReqMsgId(v string) *QuerySecuritygroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySecuritygroupResponse) SetResultCode(v string) *QuerySecuritygroupResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySecuritygroupResponse) SetResultMsg(v string) *QuerySecuritygroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySecuritygroupResponse) SetCurrentPage(v int64) *QuerySecuritygroupResponse {
	s.CurrentPage = &v
	return s
}

func (s *QuerySecuritygroupResponse) SetPageSize(v int64) *QuerySecuritygroupResponse {
	s.PageSize = &v
	return s
}

func (s *QuerySecuritygroupResponse) SetTotalCount(v int64) *QuerySecuritygroupResponse {
	s.TotalCount = &v
	return s
}

func (s *QuerySecuritygroupResponse) SetData(v []*SecurityGroupVO) *QuerySecuritygroupResponse {
	s.Data = v
	return s
}

type CreateSecuritygroupPermissionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// PermissionVO
	Permission *PermissionVO `json:"permission,omitempty" xml:"permission,omitempty" require:"true"`
	// securityGroupId
	SecurityGroupId *string `json:"security_group_id,omitempty" xml:"security_group_id,omitempty" require:"true"`
}

func (s CreateSecuritygroupPermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSecuritygroupPermissionRequest) GoString() string {
	return s.String()
}

func (s *CreateSecuritygroupPermissionRequest) SetAuthToken(v string) *CreateSecuritygroupPermissionRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSecuritygroupPermissionRequest) SetPermission(v *PermissionVO) *CreateSecuritygroupPermissionRequest {
	s.Permission = v
	return s
}

func (s *CreateSecuritygroupPermissionRequest) SetSecurityGroupId(v string) *CreateSecuritygroupPermissionRequest {
	s.SecurityGroupId = &v
	return s
}

type CreateSecuritygroupPermissionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateSecuritygroupPermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSecuritygroupPermissionResponse) GoString() string {
	return s.String()
}

func (s *CreateSecuritygroupPermissionResponse) SetReqMsgId(v string) *CreateSecuritygroupPermissionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSecuritygroupPermissionResponse) SetResultCode(v string) *CreateSecuritygroupPermissionResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSecuritygroupPermissionResponse) SetResultMsg(v string) *CreateSecuritygroupPermissionResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateSecuritygroupPermissionResponse) SetData(v string) *CreateSecuritygroupPermissionResponse {
	s.Data = &v
	return s
}

type QuerySecuritygroupPermissionRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// securityGroupId
	SecurityGroupId *string `json:"security_group_id,omitempty" xml:"security_group_id,omitempty" require:"true"`
	// autoRefresh
	AutoRefresh *bool `json:"auto_refresh,omitempty" xml:"auto_refresh,omitempty"`
	// nicType
	NicType *string `json:"nic_type,omitempty" xml:"nic_type,omitempty"`
	// direction
	Direction *string `json:"direction,omitempty" xml:"direction,omitempty"`
}

func (s QuerySecuritygroupPermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySecuritygroupPermissionRequest) GoString() string {
	return s.String()
}

func (s *QuerySecuritygroupPermissionRequest) SetAuthToken(v string) *QuerySecuritygroupPermissionRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySecuritygroupPermissionRequest) SetSecurityGroupId(v string) *QuerySecuritygroupPermissionRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *QuerySecuritygroupPermissionRequest) SetAutoRefresh(v bool) *QuerySecuritygroupPermissionRequest {
	s.AutoRefresh = &v
	return s
}

func (s *QuerySecuritygroupPermissionRequest) SetNicType(v string) *QuerySecuritygroupPermissionRequest {
	s.NicType = &v
	return s
}

func (s *QuerySecuritygroupPermissionRequest) SetDirection(v string) *QuerySecuritygroupPermissionRequest {
	s.Direction = &v
	return s
}

type QuerySecuritygroupPermissionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// securitygroup permission infos
	Data []*PermissionVO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QuerySecuritygroupPermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySecuritygroupPermissionResponse) GoString() string {
	return s.String()
}

func (s *QuerySecuritygroupPermissionResponse) SetReqMsgId(v string) *QuerySecuritygroupPermissionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySecuritygroupPermissionResponse) SetResultCode(v string) *QuerySecuritygroupPermissionResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySecuritygroupPermissionResponse) SetResultMsg(v string) *QuerySecuritygroupPermissionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySecuritygroupPermissionResponse) SetData(v []*PermissionVO) *QuerySecuritygroupPermissionResponse {
	s.Data = v
	return s
}

type UpdateLoadbalanaceSecurityipRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// lb id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// listener_port
	ListenerPort *int64 `json:"listener_port,omitempty" xml:"listener_port,omitempty" require:"true"`
	// access_control
	AccessControl *bool `json:"access_control,omitempty" xml:"access_control,omitempty" require:"true"`
}

func (s UpdateLoadbalanaceSecurityipRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLoadbalanaceSecurityipRequest) GoString() string {
	return s.String()
}

func (s *UpdateLoadbalanaceSecurityipRequest) SetAuthToken(v string) *UpdateLoadbalanaceSecurityipRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateLoadbalanaceSecurityipRequest) SetId(v string) *UpdateLoadbalanaceSecurityipRequest {
	s.Id = &v
	return s
}

func (s *UpdateLoadbalanaceSecurityipRequest) SetListenerPort(v int64) *UpdateLoadbalanaceSecurityipRequest {
	s.ListenerPort = &v
	return s
}

func (s *UpdateLoadbalanaceSecurityipRequest) SetAccessControl(v bool) *UpdateLoadbalanaceSecurityipRequest {
	s.AccessControl = &v
	return s
}

type UpdateLoadbalanaceSecurityipResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateLoadbalanaceSecurityipResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLoadbalanaceSecurityipResponse) GoString() string {
	return s.String()
}

func (s *UpdateLoadbalanaceSecurityipResponse) SetReqMsgId(v string) *UpdateLoadbalanaceSecurityipResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateLoadbalanaceSecurityipResponse) SetResultCode(v string) *UpdateLoadbalanaceSecurityipResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateLoadbalanaceSecurityipResponse) SetResultMsg(v string) *UpdateLoadbalanaceSecurityipResponse {
	s.ResultMsg = &v
	return s
}

type CreateLoadbalanceSecurityipRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// lb id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// listener_port
	ListenerPort *int64 `json:"listener_port,omitempty" xml:"listener_port,omitempty" require:"true"`
	// ips
	Ips []*string `json:"ips,omitempty" xml:"ips,omitempty" require:"true" type:"Repeated"`
}

func (s CreateLoadbalanceSecurityipRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadbalanceSecurityipRequest) GoString() string {
	return s.String()
}

func (s *CreateLoadbalanceSecurityipRequest) SetAuthToken(v string) *CreateLoadbalanceSecurityipRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLoadbalanceSecurityipRequest) SetId(v string) *CreateLoadbalanceSecurityipRequest {
	s.Id = &v
	return s
}

func (s *CreateLoadbalanceSecurityipRequest) SetListenerPort(v int64) *CreateLoadbalanceSecurityipRequest {
	s.ListenerPort = &v
	return s
}

func (s *CreateLoadbalanceSecurityipRequest) SetIps(v []*string) *CreateLoadbalanceSecurityipRequest {
	s.Ips = v
	return s
}

type CreateLoadbalanceSecurityipResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateLoadbalanceSecurityipResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadbalanceSecurityipResponse) GoString() string {
	return s.String()
}

func (s *CreateLoadbalanceSecurityipResponse) SetReqMsgId(v string) *CreateLoadbalanceSecurityipResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLoadbalanceSecurityipResponse) SetResultCode(v string) *CreateLoadbalanceSecurityipResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLoadbalanceSecurityipResponse) SetResultMsg(v string) *CreateLoadbalanceSecurityipResponse {
	s.ResultMsg = &v
	return s
}

type UpdateDatabaseRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
}

func (s UpdateDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatabaseRequest) GoString() string {
	return s.String()
}

func (s *UpdateDatabaseRequest) SetAuthToken(v string) *UpdateDatabaseRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDatabaseRequest) SetId(v string) *UpdateDatabaseRequest {
	s.Id = &v
	return s
}

func (s *UpdateDatabaseRequest) SetName(v string) *UpdateDatabaseRequest {
	s.Name = &v
	return s
}

func (s *UpdateDatabaseRequest) SetDescription(v string) *UpdateDatabaseRequest {
	s.Description = &v
	return s
}

type UpdateDatabaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatabaseResponse) GoString() string {
	return s.String()
}

func (s *UpdateDatabaseResponse) SetReqMsgId(v string) *UpdateDatabaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDatabaseResponse) SetResultCode(v string) *UpdateDatabaseResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDatabaseResponse) SetResultMsg(v string) *UpdateDatabaseResponse {
	s.ResultMsg = &v
	return s
}

type UpdateLoadbalanceMountRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// mountMap
	MountMap []*MapStringToIntegerEntity `json:"mount_map,omitempty" xml:"mount_map,omitempty" type:"Repeated"`
	// domain
	Domain *string `json:"domain,omitempty" xml:"domain,omitempty"`
	// 是否是同步操作
	IsSync *bool `json:"is_sync,omitempty" xml:"is_sync,omitempty"`
}

func (s UpdateLoadbalanceMountRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLoadbalanceMountRequest) GoString() string {
	return s.String()
}

func (s *UpdateLoadbalanceMountRequest) SetAuthToken(v string) *UpdateLoadbalanceMountRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateLoadbalanceMountRequest) SetId(v string) *UpdateLoadbalanceMountRequest {
	s.Id = &v
	return s
}

func (s *UpdateLoadbalanceMountRequest) SetMountMap(v []*MapStringToIntegerEntity) *UpdateLoadbalanceMountRequest {
	s.MountMap = v
	return s
}

func (s *UpdateLoadbalanceMountRequest) SetDomain(v string) *UpdateLoadbalanceMountRequest {
	s.Domain = &v
	return s
}

func (s *UpdateLoadbalanceMountRequest) SetIsSync(v bool) *UpdateLoadbalanceMountRequest {
	s.IsSync = &v
	return s
}

type UpdateLoadbalanceMountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateLoadbalanceMountResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLoadbalanceMountResponse) GoString() string {
	return s.String()
}

func (s *UpdateLoadbalanceMountResponse) SetReqMsgId(v string) *UpdateLoadbalanceMountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateLoadbalanceMountResponse) SetResultCode(v string) *UpdateLoadbalanceMountResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateLoadbalanceMountResponse) SetResultMsg(v string) *UpdateLoadbalanceMountResponse {
	s.ResultMsg = &v
	return s
}

type DeleteLoadbalanceMountRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// computer_ids
	ComputerIds []*string `json:"computer_ids,omitempty" xml:"computer_ids,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteLoadbalanceMountRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLoadbalanceMountRequest) GoString() string {
	return s.String()
}

func (s *DeleteLoadbalanceMountRequest) SetAuthToken(v string) *DeleteLoadbalanceMountRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteLoadbalanceMountRequest) SetId(v string) *DeleteLoadbalanceMountRequest {
	s.Id = &v
	return s
}

func (s *DeleteLoadbalanceMountRequest) SetComputerIds(v []*string) *DeleteLoadbalanceMountRequest {
	s.ComputerIds = v
	return s
}

type DeleteLoadbalanceMountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteLoadbalanceMountResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLoadbalanceMountResponse) GoString() string {
	return s.String()
}

func (s *DeleteLoadbalanceMountResponse) SetReqMsgId(v string) *DeleteLoadbalanceMountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteLoadbalanceMountResponse) SetResultCode(v string) *DeleteLoadbalanceMountResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteLoadbalanceMountResponse) SetResultMsg(v string) *DeleteLoadbalanceMountResponse {
	s.ResultMsg = &v
	return s
}

type QueryRequestRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// ids
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" type:"Repeated"`
	// max_time
	MaxTime *string `json:"max_time,omitempty" xml:"max_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// min_time
	MinTime *string `json:"min_time,omitempty" xml:"min_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// operators
	Operators []*string `json:"operators,omitempty" xml:"operators,omitempty" type:"Repeated"`
	// operator_type
	OperatorType *string `json:"operator_type,omitempty" xml:"operator_type,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// parent_ids
	ParentIds []*string `json:"parent_ids,omitempty" xml:"parent_ids,omitempty" type:"Repeated"`
	// resource_ids
	ResourceIds []*string `json:"resource_ids,omitempty" xml:"resource_ids,omitempty" type:"Repeated"`
	// resource_types
	ResourceTypes []*string `json:"resource_types,omitempty" xml:"resource_types,omitempty" type:"Repeated"`
	// statuses
	Statuses []*string `json:"statuses,omitempty" xml:"statuses,omitempty" type:"Repeated"`
	// task_statuses
	TaskStatuses []*string `json:"task_statuses,omitempty" xml:"task_statuses,omitempty" type:"Repeated"`
	// tokens
	Tokens []*string `json:"tokens,omitempty" xml:"tokens,omitempty" type:"Repeated"`
	// types
	Types []*string `json:"types,omitempty" xml:"types,omitempty" type:"Repeated"`
	// workspace_ids
	WorkspaceIds []*string `json:"workspace_ids,omitempty" xml:"workspace_ids,omitempty" type:"Repeated"`
}

func (s QueryRequestRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRequestRequest) GoString() string {
	return s.String()
}

func (s *QueryRequestRequest) SetAuthToken(v string) *QueryRequestRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRequestRequest) SetCurrentPage(v int64) *QueryRequestRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryRequestRequest) SetIds(v []*string) *QueryRequestRequest {
	s.Ids = v
	return s
}

func (s *QueryRequestRequest) SetMaxTime(v string) *QueryRequestRequest {
	s.MaxTime = &v
	return s
}

func (s *QueryRequestRequest) SetMinTime(v string) *QueryRequestRequest {
	s.MinTime = &v
	return s
}

func (s *QueryRequestRequest) SetOperators(v []*string) *QueryRequestRequest {
	s.Operators = v
	return s
}

func (s *QueryRequestRequest) SetOperatorType(v string) *QueryRequestRequest {
	s.OperatorType = &v
	return s
}

func (s *QueryRequestRequest) SetPageSize(v int64) *QueryRequestRequest {
	s.PageSize = &v
	return s
}

func (s *QueryRequestRequest) SetParentIds(v []*string) *QueryRequestRequest {
	s.ParentIds = v
	return s
}

func (s *QueryRequestRequest) SetResourceIds(v []*string) *QueryRequestRequest {
	s.ResourceIds = v
	return s
}

func (s *QueryRequestRequest) SetResourceTypes(v []*string) *QueryRequestRequest {
	s.ResourceTypes = v
	return s
}

func (s *QueryRequestRequest) SetStatuses(v []*string) *QueryRequestRequest {
	s.Statuses = v
	return s
}

func (s *QueryRequestRequest) SetTaskStatuses(v []*string) *QueryRequestRequest {
	s.TaskStatuses = v
	return s
}

func (s *QueryRequestRequest) SetTokens(v []*string) *QueryRequestRequest {
	s.Tokens = v
	return s
}

func (s *QueryRequestRequest) SetTypes(v []*string) *QueryRequestRequest {
	s.Types = v
	return s
}

func (s *QueryRequestRequest) SetWorkspaceIds(v []*string) *QueryRequestRequest {
	s.WorkspaceIds = v
	return s
}

type QueryRequestResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*RequestVO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// total_count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryRequestResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRequestResponse) GoString() string {
	return s.String()
}

func (s *QueryRequestResponse) SetReqMsgId(v string) *QueryRequestResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRequestResponse) SetResultCode(v string) *QueryRequestResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRequestResponse) SetResultMsg(v string) *QueryRequestResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRequestResponse) SetData(v []*RequestVO) *QueryRequestResponse {
	s.Data = v
	return s
}

func (s *QueryRequestResponse) SetTotalCount(v int64) *QueryRequestResponse {
	s.TotalCount = &v
	return s
}

func (s *QueryRequestResponse) SetCurrentPage(v int64) *QueryRequestResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryRequestResponse) SetPageSize(v int64) *QueryRequestResponse {
	s.PageSize = &v
	return s
}

type GetRequestRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
}

func (s GetRequestRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRequestRequest) GoString() string {
	return s.String()
}

func (s *GetRequestRequest) SetAuthToken(v string) *GetRequestRequest {
	s.AuthToken = &v
	return s
}

func (s *GetRequestRequest) SetWorkspace(v string) *GetRequestRequest {
	s.Workspace = &v
	return s
}

func (s *GetRequestRequest) SetId(v string) *GetRequestRequest {
	s.Id = &v
	return s
}

type GetRequestResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *RequestVO `json:"data,omitempty" xml:"data,omitempty"`
}

func (s GetRequestResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRequestResponse) GoString() string {
	return s.String()
}

func (s *GetRequestResponse) SetReqMsgId(v string) *GetRequestResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetRequestResponse) SetResultCode(v string) *GetRequestResponse {
	s.ResultCode = &v
	return s
}

func (s *GetRequestResponse) SetResultMsg(v string) *GetRequestResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetRequestResponse) SetData(v *RequestVO) *GetRequestResponse {
	s.Data = v
	return s
}

type QueryRequestTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
	// ids
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" type:"Repeated"`
	// max_time
	MaxTime *string `json:"max_time,omitempty" xml:"max_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// min_time
	MinTime *string `json:"min_time,omitempty" xml:"min_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// operators
	Operators []*string `json:"operators,omitempty" xml:"operators,omitempty" type:"Repeated"`
	// operatorType
	OperatorType *string `json:"operator_type,omitempty" xml:"operator_type,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// requestIds
	RequestIds []*string `json:"request_ids,omitempty" xml:"request_ids,omitempty" type:"Repeated"`
	// request_statuses
	RequestStatuses []*string `json:"request_statuses,omitempty" xml:"request_statuses,omitempty" type:"Repeated"`
	// request_types
	RequestTypes []*string `json:"request_types,omitempty" xml:"request_types,omitempty" type:"Repeated"`
	// resource_ids
	ResourceIds []*string `json:"resource_ids,omitempty" xml:"resource_ids,omitempty" type:"Repeated"`
	// resource_types
	ResourceTypes []*string `json:"resource_types,omitempty" xml:"resource_types,omitempty" type:"Repeated"`
	// statuses
	Statuses []*string `json:"statuses,omitempty" xml:"statuses,omitempty" type:"Repeated"`
	// workspace_ids
	WorkspaceIds []*string `json:"workspace_ids,omitempty" xml:"workspace_ids,omitempty" type:"Repeated"`
}

func (s QueryRequestTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRequestTaskRequest) GoString() string {
	return s.String()
}

func (s *QueryRequestTaskRequest) SetAuthToken(v string) *QueryRequestTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRequestTaskRequest) SetCurrentPage(v int64) *QueryRequestTaskRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryRequestTaskRequest) SetIds(v []*string) *QueryRequestTaskRequest {
	s.Ids = v
	return s
}

func (s *QueryRequestTaskRequest) SetMaxTime(v string) *QueryRequestTaskRequest {
	s.MaxTime = &v
	return s
}

func (s *QueryRequestTaskRequest) SetMinTime(v string) *QueryRequestTaskRequest {
	s.MinTime = &v
	return s
}

func (s *QueryRequestTaskRequest) SetOperators(v []*string) *QueryRequestTaskRequest {
	s.Operators = v
	return s
}

func (s *QueryRequestTaskRequest) SetOperatorType(v string) *QueryRequestTaskRequest {
	s.OperatorType = &v
	return s
}

func (s *QueryRequestTaskRequest) SetPageSize(v int64) *QueryRequestTaskRequest {
	s.PageSize = &v
	return s
}

func (s *QueryRequestTaskRequest) SetRequestIds(v []*string) *QueryRequestTaskRequest {
	s.RequestIds = v
	return s
}

func (s *QueryRequestTaskRequest) SetRequestStatuses(v []*string) *QueryRequestTaskRequest {
	s.RequestStatuses = v
	return s
}

func (s *QueryRequestTaskRequest) SetRequestTypes(v []*string) *QueryRequestTaskRequest {
	s.RequestTypes = v
	return s
}

func (s *QueryRequestTaskRequest) SetResourceIds(v []*string) *QueryRequestTaskRequest {
	s.ResourceIds = v
	return s
}

func (s *QueryRequestTaskRequest) SetResourceTypes(v []*string) *QueryRequestTaskRequest {
	s.ResourceTypes = v
	return s
}

func (s *QueryRequestTaskRequest) SetStatuses(v []*string) *QueryRequestTaskRequest {
	s.Statuses = v
	return s
}

func (s *QueryRequestTaskRequest) SetWorkspaceIds(v []*string) *QueryRequestTaskRequest {
	s.WorkspaceIds = v
	return s
}

type QueryRequestTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*Task `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// total_count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryRequestTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRequestTaskResponse) GoString() string {
	return s.String()
}

func (s *QueryRequestTaskResponse) SetReqMsgId(v string) *QueryRequestTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRequestTaskResponse) SetResultCode(v string) *QueryRequestTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRequestTaskResponse) SetResultMsg(v string) *QueryRequestTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRequestTaskResponse) SetData(v []*Task) *QueryRequestTaskResponse {
	s.Data = v
	return s
}

func (s *QueryRequestTaskResponse) SetTotalCount(v int64) *QueryRequestTaskResponse {
	s.TotalCount = &v
	return s
}

type QueryTaskLogRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// execution_times
	ExecutionTimes *int64 `json:"execution_times,omitempty" xml:"execution_times,omitempty"`
	// task_id
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true"`
}

func (s QueryTaskLogRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTaskLogRequest) GoString() string {
	return s.String()
}

func (s *QueryTaskLogRequest) SetAuthToken(v string) *QueryTaskLogRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTaskLogRequest) SetExecutionTimes(v int64) *QueryTaskLogRequest {
	s.ExecutionTimes = &v
	return s
}

func (s *QueryTaskLogRequest) SetTaskId(v string) *QueryTaskLogRequest {
	s.TaskId = &v
	return s
}

type QueryTaskLogResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*ResourceLog `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryTaskLogResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTaskLogResponse) GoString() string {
	return s.String()
}

func (s *QueryTaskLogResponse) SetReqMsgId(v string) *QueryTaskLogResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTaskLogResponse) SetResultCode(v string) *QueryTaskLogResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTaskLogResponse) SetResultMsg(v string) *QueryTaskLogResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTaskLogResponse) SetData(v []*ResourceLog) *QueryTaskLogResponse {
	s.Data = v
	return s
}

type ListTenantworkspaceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s ListTenantworkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTenantworkspaceRequest) GoString() string {
	return s.String()
}

func (s *ListTenantworkspaceRequest) SetAuthToken(v string) *ListTenantworkspaceRequest {
	s.AuthToken = &v
	return s
}

func (s *ListTenantworkspaceRequest) SetStatus(v string) *ListTenantworkspaceRequest {
	s.Status = &v
	return s
}

type ListTenantworkspaceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// worksapce列表
	Data []*TenantWorkspace `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListTenantworkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTenantworkspaceResponse) GoString() string {
	return s.String()
}

func (s *ListTenantworkspaceResponse) SetReqMsgId(v string) *ListTenantworkspaceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListTenantworkspaceResponse) SetResultCode(v string) *ListTenantworkspaceResponse {
	s.ResultCode = &v
	return s
}

func (s *ListTenantworkspaceResponse) SetResultMsg(v string) *ListTenantworkspaceResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListTenantworkspaceResponse) SetData(v []*TenantWorkspace) *ListTenantworkspaceResponse {
	s.Data = v
	return s
}

type QueryTenantworkspaceFilterRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// statuses
	Statuses *string `json:"statuses,omitempty" xml:"statuses,omitempty"`
}

func (s QueryTenantworkspaceFilterRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTenantworkspaceFilterRequest) GoString() string {
	return s.String()
}

func (s *QueryTenantworkspaceFilterRequest) SetAuthToken(v string) *QueryTenantworkspaceFilterRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryTenantworkspaceFilterRequest) SetStatuses(v string) *QueryTenantworkspaceFilterRequest {
	s.Statuses = &v
	return s
}

type QueryTenantworkspaceFilterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// workspaces
	Data []*TenantWorkspace `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryTenantworkspaceFilterResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTenantworkspaceFilterResponse) GoString() string {
	return s.String()
}

func (s *QueryTenantworkspaceFilterResponse) SetReqMsgId(v string) *QueryTenantworkspaceFilterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryTenantworkspaceFilterResponse) SetResultCode(v string) *QueryTenantworkspaceFilterResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryTenantworkspaceFilterResponse) SetResultMsg(v string) *QueryTenantworkspaceFilterResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryTenantworkspaceFilterResponse) SetData(v []*TenantWorkspace) *QueryTenantworkspaceFilterResponse {
	s.Data = v
	return s
}

type ListRegionGroupbyRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// status
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s ListRegionGroupbyRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRegionGroupbyRequest) GoString() string {
	return s.String()
}

func (s *ListRegionGroupbyRequest) SetAuthToken(v string) *ListRegionGroupbyRequest {
	s.AuthToken = &v
	return s
}

func (s *ListRegionGroupbyRequest) SetStatus(v string) *ListRegionGroupbyRequest {
	s.Status = &v
	return s
}

type ListRegionGroupbyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// RegionWorkspaceVO
	Data []*RegionWorkspaceVO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListRegionGroupbyResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRegionGroupbyResponse) GoString() string {
	return s.String()
}

func (s *ListRegionGroupbyResponse) SetReqMsgId(v string) *ListRegionGroupbyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListRegionGroupbyResponse) SetResultCode(v string) *ListRegionGroupbyResponse {
	s.ResultCode = &v
	return s
}

func (s *ListRegionGroupbyResponse) SetResultMsg(v string) *ListRegionGroupbyResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListRegionGroupbyResponse) SetData(v []*RegionWorkspaceVO) *ListRegionGroupbyResponse {
	s.Data = v
	return s
}

type QueryRequestFinaltaskRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// request_id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
}

func (s QueryRequestFinaltaskRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRequestFinaltaskRequest) GoString() string {
	return s.String()
}

func (s *QueryRequestFinaltaskRequest) SetAuthToken(v string) *QueryRequestFinaltaskRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRequestFinaltaskRequest) SetId(v string) *QueryRequestFinaltaskRequest {
	s.Id = &v
	return s
}

func (s *QueryRequestFinaltaskRequest) SetWorkspaceId(v string) *QueryRequestFinaltaskRequest {
	s.WorkspaceId = &v
	return s
}

type QueryRequestFinaltaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*TaskVO `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryRequestFinaltaskResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRequestFinaltaskResponse) GoString() string {
	return s.String()
}

func (s *QueryRequestFinaltaskResponse) SetReqMsgId(v string) *QueryRequestFinaltaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRequestFinaltaskResponse) SetResultCode(v string) *QueryRequestFinaltaskResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRequestFinaltaskResponse) SetResultMsg(v string) *QueryRequestFinaltaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRequestFinaltaskResponse) SetData(v []*TaskVO) *QueryRequestFinaltaskResponse {
	s.Data = v
	return s
}

type QueryFeatureRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// paas_region_id cafe的region_id，是一串数字
	PaasRegionId *string `json:"paas_region_id,omitempty" xml:"paas_region_id,omitempty" require:"true"`
	// project_id
	ProjectId *string `json:"project_id,omitempty" xml:"project_id,omitempty" require:"true"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// 要查询的功能
	FeatureName *string `json:"feature_name,omitempty" xml:"feature_name,omitempty"`
}

func (s QueryFeatureRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFeatureRequest) GoString() string {
	return s.String()
}

func (s *QueryFeatureRequest) SetAuthToken(v string) *QueryFeatureRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryFeatureRequest) SetPaasRegionId(v string) *QueryFeatureRequest {
	s.PaasRegionId = &v
	return s
}

func (s *QueryFeatureRequest) SetProjectId(v string) *QueryFeatureRequest {
	s.ProjectId = &v
	return s
}

func (s *QueryFeatureRequest) SetWorkspaceId(v string) *QueryFeatureRequest {
	s.WorkspaceId = &v
	return s
}

func (s *QueryFeatureRequest) SetFeatureName(v string) *QueryFeatureRequest {
	s.FeatureName = &v
	return s
}

type QueryFeatureResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryFeatureResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFeatureResponse) GoString() string {
	return s.String()
}

func (s *QueryFeatureResponse) SetReqMsgId(v string) *QueryFeatureResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryFeatureResponse) SetResultCode(v string) *QueryFeatureResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryFeatureResponse) SetResultMsg(v string) *QueryFeatureResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryFeatureResponse) SetData(v string) *QueryFeatureResponse {
	s.Data = &v
	return s
}

type StartComputerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// computer ids
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" require:"true" type:"Repeated"`
	// workspace_id，后续版本会变成必填
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s StartComputerRequest) String() string {
	return tea.Prettify(s)
}

func (s StartComputerRequest) GoString() string {
	return s.String()
}

func (s *StartComputerRequest) SetAuthToken(v string) *StartComputerRequest {
	s.AuthToken = &v
	return s
}

func (s *StartComputerRequest) SetIds(v []*string) *StartComputerRequest {
	s.Ids = v
	return s
}

func (s *StartComputerRequest) SetWorkspaceId(v string) *StartComputerRequest {
	s.WorkspaceId = &v
	return s
}

type StartComputerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// paas_request_id
	PaasRequestId *string `json:"paas_request_id,omitempty" xml:"paas_request_id,omitempty"`
}

func (s StartComputerResponse) String() string {
	return tea.Prettify(s)
}

func (s StartComputerResponse) GoString() string {
	return s.String()
}

func (s *StartComputerResponse) SetReqMsgId(v string) *StartComputerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartComputerResponse) SetResultCode(v string) *StartComputerResponse {
	s.ResultCode = &v
	return s
}

func (s *StartComputerResponse) SetResultMsg(v string) *StartComputerResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartComputerResponse) SetPaasRequestId(v string) *StartComputerResponse {
	s.PaasRequestId = &v
	return s
}

type StartLoadbalanceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// ids
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" require:"true" type:"Repeated"`
}

func (s StartLoadbalanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StartLoadbalanceRequest) GoString() string {
	return s.String()
}

func (s *StartLoadbalanceRequest) SetAuthToken(v string) *StartLoadbalanceRequest {
	s.AuthToken = &v
	return s
}

func (s *StartLoadbalanceRequest) SetIds(v []*string) *StartLoadbalanceRequest {
	s.Ids = v
	return s
}

type StartLoadbalanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StartLoadbalanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StartLoadbalanceResponse) GoString() string {
	return s.String()
}

func (s *StartLoadbalanceResponse) SetReqMsgId(v string) *StartLoadbalanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartLoadbalanceResponse) SetResultCode(v string) *StartLoadbalanceResponse {
	s.ResultCode = &v
	return s
}

func (s *StartLoadbalanceResponse) SetResultMsg(v string) *StartLoadbalanceResponse {
	s.ResultMsg = &v
	return s
}

type StopLoadbalanceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// ids
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" require:"true" type:"Repeated"`
}

func (s StopLoadbalanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StopLoadbalanceRequest) GoString() string {
	return s.String()
}

func (s *StopLoadbalanceRequest) SetAuthToken(v string) *StopLoadbalanceRequest {
	s.AuthToken = &v
	return s
}

func (s *StopLoadbalanceRequest) SetIds(v []*string) *StopLoadbalanceRequest {
	s.Ids = v
	return s
}

type StopLoadbalanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s StopLoadbalanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StopLoadbalanceResponse) GoString() string {
	return s.String()
}

func (s *StopLoadbalanceResponse) SetReqMsgId(v string) *StopLoadbalanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StopLoadbalanceResponse) SetResultCode(v string) *StopLoadbalanceResponse {
	s.ResultCode = &v
	return s
}

func (s *StopLoadbalanceResponse) SetResultMsg(v string) *StopLoadbalanceResponse {
	s.ResultMsg = &v
	return s
}

type UpdateLoadbalanceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty" require:"true"`
}

func (s UpdateLoadbalanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLoadbalanceRequest) GoString() string {
	return s.String()
}

func (s *UpdateLoadbalanceRequest) SetAuthToken(v string) *UpdateLoadbalanceRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateLoadbalanceRequest) SetId(v string) *UpdateLoadbalanceRequest {
	s.Id = &v
	return s
}

func (s *UpdateLoadbalanceRequest) SetName(v string) *UpdateLoadbalanceRequest {
	s.Name = &v
	return s
}

func (s *UpdateLoadbalanceRequest) SetDescription(v string) *UpdateLoadbalanceRequest {
	s.Description = &v
	return s
}

type UpdateLoadbalanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateLoadbalanceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLoadbalanceResponse) GoString() string {
	return s.String()
}

func (s *UpdateLoadbalanceResponse) SetReqMsgId(v string) *UpdateLoadbalanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateLoadbalanceResponse) SetResultCode(v string) *UpdateLoadbalanceResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateLoadbalanceResponse) SetResultMsg(v string) *UpdateLoadbalanceResponse {
	s.ResultMsg = &v
	return s
}

type AddLoadbalanceAssignRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app_id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// appServiceId
	AppServiceId *string `json:"app_service_id,omitempty" xml:"app_service_id,omitempty"`
	// ids
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" require:"true" type:"Repeated"`
}

func (s AddLoadbalanceAssignRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLoadbalanceAssignRequest) GoString() string {
	return s.String()
}

func (s *AddLoadbalanceAssignRequest) SetAuthToken(v string) *AddLoadbalanceAssignRequest {
	s.AuthToken = &v
	return s
}

func (s *AddLoadbalanceAssignRequest) SetAppId(v string) *AddLoadbalanceAssignRequest {
	s.AppId = &v
	return s
}

func (s *AddLoadbalanceAssignRequest) SetAppServiceId(v string) *AddLoadbalanceAssignRequest {
	s.AppServiceId = &v
	return s
}

func (s *AddLoadbalanceAssignRequest) SetIds(v []*string) *AddLoadbalanceAssignRequest {
	s.Ids = v
	return s
}

type AddLoadbalanceAssignResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 异步返回ID，用于查询当前任务的状态
	PaasRequestId *string `json:"paas_request_id,omitempty" xml:"paas_request_id,omitempty"`
}

func (s AddLoadbalanceAssignResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLoadbalanceAssignResponse) GoString() string {
	return s.String()
}

func (s *AddLoadbalanceAssignResponse) SetReqMsgId(v string) *AddLoadbalanceAssignResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddLoadbalanceAssignResponse) SetResultCode(v string) *AddLoadbalanceAssignResponse {
	s.ResultCode = &v
	return s
}

func (s *AddLoadbalanceAssignResponse) SetResultMsg(v string) *AddLoadbalanceAssignResponse {
	s.ResultMsg = &v
	return s
}

func (s *AddLoadbalanceAssignResponse) SetPaasRequestId(v string) *AddLoadbalanceAssignResponse {
	s.PaasRequestId = &v
	return s
}

type QueryCertificateRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// zone_id
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty" require:"true"`
	// provider_ids
	ProviderIds []*string `json:"provider_ids,omitempty" xml:"provider_ids,omitempty" type:"Repeated"`
}

func (s QueryCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCertificateRequest) GoString() string {
	return s.String()
}

func (s *QueryCertificateRequest) SetAuthToken(v string) *QueryCertificateRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryCertificateRequest) SetWorkspaceId(v string) *QueryCertificateRequest {
	s.WorkspaceId = &v
	return s
}

func (s *QueryCertificateRequest) SetZoneId(v string) *QueryCertificateRequest {
	s.ZoneId = &v
	return s
}

func (s *QueryCertificateRequest) SetProviderIds(v []*string) *QueryCertificateRequest {
	s.ProviderIds = v
	return s
}

type QueryCertificateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*BasicCertificate `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// total_count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s QueryCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCertificateResponse) GoString() string {
	return s.String()
}

func (s *QueryCertificateResponse) SetReqMsgId(v string) *QueryCertificateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryCertificateResponse) SetResultCode(v string) *QueryCertificateResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryCertificateResponse) SetResultMsg(v string) *QueryCertificateResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryCertificateResponse) SetData(v []*BasicCertificate) *QueryCertificateResponse {
	s.Data = v
	return s
}

func (s *QueryCertificateResponse) SetTotalCount(v int64) *QueryCertificateResponse {
	s.TotalCount = &v
	return s
}

type CreateCertificateRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// zoneId
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// paas_region_id
	PaasRegionId *string `json:"paas_region_id,omitempty" xml:"paas_region_id,omitempty" require:"true"`
	// certificate
	Certificate *string `json:"certificate,omitempty" xml:"certificate,omitempty" require:"true"`
	// privateKey
	PrivateKey *string `json:"private_key,omitempty" xml:"private_key,omitempty" require:"true"`
	// cert_type
	CertType *int64 `json:"cert_type,omitempty" xml:"cert_type,omitempty"`
	// 多provider时选填
	ProviderId *string `json:"provider_id,omitempty" xml:"provider_id,omitempty"`
}

func (s CreateCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCertificateRequest) GoString() string {
	return s.String()
}

func (s *CreateCertificateRequest) SetAuthToken(v string) *CreateCertificateRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateCertificateRequest) SetWorkspaceId(v string) *CreateCertificateRequest {
	s.WorkspaceId = &v
	return s
}

func (s *CreateCertificateRequest) SetZoneId(v string) *CreateCertificateRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateCertificateRequest) SetName(v string) *CreateCertificateRequest {
	s.Name = &v
	return s
}

func (s *CreateCertificateRequest) SetPaasRegionId(v string) *CreateCertificateRequest {
	s.PaasRegionId = &v
	return s
}

func (s *CreateCertificateRequest) SetCertificate(v string) *CreateCertificateRequest {
	s.Certificate = &v
	return s
}

func (s *CreateCertificateRequest) SetPrivateKey(v string) *CreateCertificateRequest {
	s.PrivateKey = &v
	return s
}

func (s *CreateCertificateRequest) SetCertType(v int64) *CreateCertificateRequest {
	s.CertType = &v
	return s
}

func (s *CreateCertificateRequest) SetProviderId(v string) *CreateCertificateRequest {
	s.ProviderId = &v
	return s
}

type CreateCertificateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCertificateResponse) GoString() string {
	return s.String()
}

func (s *CreateCertificateResponse) SetReqMsgId(v string) *CreateCertificateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateCertificateResponse) SetResultCode(v string) *CreateCertificateResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateCertificateResponse) SetResultMsg(v string) *CreateCertificateResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateCertificateResponse) SetData(v string) *CreateCertificateResponse {
	s.Data = &v
	return s
}

type DeleteCertificateRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// zone_id
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty" require:"true"`
	// 多provider时选填
	ProviderId *string `json:"provider_id,omitempty" xml:"provider_id,omitempty"`
}

func (s DeleteCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCertificateRequest) GoString() string {
	return s.String()
}

func (s *DeleteCertificateRequest) SetAuthToken(v string) *DeleteCertificateRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteCertificateRequest) SetId(v string) *DeleteCertificateRequest {
	s.Id = &v
	return s
}

func (s *DeleteCertificateRequest) SetWorkspaceId(v string) *DeleteCertificateRequest {
	s.WorkspaceId = &v
	return s
}

func (s *DeleteCertificateRequest) SetZoneId(v string) *DeleteCertificateRequest {
	s.ZoneId = &v
	return s
}

func (s *DeleteCertificateRequest) SetProviderId(v string) *DeleteCertificateRequest {
	s.ProviderId = &v
	return s
}

type DeleteCertificateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCertificateResponse) GoString() string {
	return s.String()
}

func (s *DeleteCertificateResponse) SetReqMsgId(v string) *DeleteCertificateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteCertificateResponse) SetResultCode(v string) *DeleteCertificateResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteCertificateResponse) SetResultMsg(v string) *DeleteCertificateResponse {
	s.ResultMsg = &v
	return s
}

type DescribeUnifiedresourceVpcRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 提供商类型
	ProviderType *string `json:"provider_type,omitempty" xml:"provider_type,omitempty" require:"true"`
	// region
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// 工作空间
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s DescribeUnifiedresourceVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUnifiedresourceVpcRequest) GoString() string {
	return s.String()
}

func (s *DescribeUnifiedresourceVpcRequest) SetAuthToken(v string) *DescribeUnifiedresourceVpcRequest {
	s.AuthToken = &v
	return s
}

func (s *DescribeUnifiedresourceVpcRequest) SetProviderType(v string) *DescribeUnifiedresourceVpcRequest {
	s.ProviderType = &v
	return s
}

func (s *DescribeUnifiedresourceVpcRequest) SetRegion(v string) *DescribeUnifiedresourceVpcRequest {
	s.Region = &v
	return s
}

func (s *DescribeUnifiedresourceVpcRequest) SetWorkspace(v string) *DescribeUnifiedresourceVpcRequest {
	s.Workspace = &v
	return s
}

type DescribeUnifiedresourceVpcResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// vpc对象
	Vpc *VPC `json:"vpc,omitempty" xml:"vpc,omitempty"`
}

func (s DescribeUnifiedresourceVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUnifiedresourceVpcResponse) GoString() string {
	return s.String()
}

func (s *DescribeUnifiedresourceVpcResponse) SetReqMsgId(v string) *DescribeUnifiedresourceVpcResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DescribeUnifiedresourceVpcResponse) SetResultCode(v string) *DescribeUnifiedresourceVpcResponse {
	s.ResultCode = &v
	return s
}

func (s *DescribeUnifiedresourceVpcResponse) SetResultMsg(v string) *DescribeUnifiedresourceVpcResponse {
	s.ResultMsg = &v
	return s
}

func (s *DescribeUnifiedresourceVpcResponse) SetVpc(v *VPC) *DescribeUnifiedresourceVpcResponse {
	s.Vpc = v
	return s
}

type ListUnifiedresourceInstancefamiliesRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// region id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty" require:"true"`
	// 提供商类型
	ProviderType *string `json:"provider_type,omitempty" xml:"provider_type,omitempty" require:"true"`
}

func (s ListUnifiedresourceInstancefamiliesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUnifiedresourceInstancefamiliesRequest) GoString() string {
	return s.String()
}

func (s *ListUnifiedresourceInstancefamiliesRequest) SetAuthToken(v string) *ListUnifiedresourceInstancefamiliesRequest {
	s.AuthToken = &v
	return s
}

func (s *ListUnifiedresourceInstancefamiliesRequest) SetRegionId(v string) *ListUnifiedresourceInstancefamiliesRequest {
	s.RegionId = &v
	return s
}

func (s *ListUnifiedresourceInstancefamiliesRequest) SetProviderType(v string) *ListUnifiedresourceInstancefamiliesRequest {
	s.ProviderType = &v
	return s
}

type ListUnifiedresourceInstancefamiliesResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ListUnifiedresourceInstancefamiliesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUnifiedresourceInstancefamiliesResponse) GoString() string {
	return s.String()
}

func (s *ListUnifiedresourceInstancefamiliesResponse) SetReqMsgId(v string) *ListUnifiedresourceInstancefamiliesResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListUnifiedresourceInstancefamiliesResponse) SetResultCode(v string) *ListUnifiedresourceInstancefamiliesResponse {
	s.ResultCode = &v
	return s
}

func (s *ListUnifiedresourceInstancefamiliesResponse) SetResultMsg(v string) *ListUnifiedresourceInstancefamiliesResponse {
	s.ResultMsg = &v
	return s
}

type ListUnifiedresourceInstancetypeRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// region name
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
}

func (s ListUnifiedresourceInstancetypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUnifiedresourceInstancetypeRequest) GoString() string {
	return s.String()
}

func (s *ListUnifiedresourceInstancetypeRequest) SetAuthToken(v string) *ListUnifiedresourceInstancetypeRequest {
	s.AuthToken = &v
	return s
}

func (s *ListUnifiedresourceInstancetypeRequest) SetRegion(v string) *ListUnifiedresourceInstancetypeRequest {
	s.Region = &v
	return s
}

type ListUnifiedresourceInstancetypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// instancetype详细信息，jsonstring
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListUnifiedresourceInstancetypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUnifiedresourceInstancetypeResponse) GoString() string {
	return s.String()
}

func (s *ListUnifiedresourceInstancetypeResponse) SetReqMsgId(v string) *ListUnifiedresourceInstancetypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListUnifiedresourceInstancetypeResponse) SetResultCode(v string) *ListUnifiedresourceInstancetypeResponse {
	s.ResultCode = &v
	return s
}

func (s *ListUnifiedresourceInstancetypeResponse) SetResultMsg(v string) *ListUnifiedresourceInstancetypeResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListUnifiedresourceInstancetypeResponse) SetData(v string) *ListUnifiedresourceInstancetypeResponse {
	s.Data = &v
	return s
}

type QueryComputerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// computer id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s QueryComputerRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryComputerRequest) GoString() string {
	return s.String()
}

func (s *QueryComputerRequest) SetAuthToken(v string) *QueryComputerRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryComputerRequest) SetId(v string) *QueryComputerRequest {
	s.Id = &v
	return s
}

func (s *QueryComputerRequest) SetWorkspaceId(v string) *QueryComputerRequest {
	s.WorkspaceId = &v
	return s
}

type QueryComputerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// computer info
	Data *Computer `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryComputerResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryComputerResponse) GoString() string {
	return s.String()
}

func (s *QueryComputerResponse) SetReqMsgId(v string) *QueryComputerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryComputerResponse) SetResultCode(v string) *QueryComputerResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryComputerResponse) SetResultMsg(v string) *QueryComputerResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryComputerResponse) SetData(v *Computer) *QueryComputerResponse {
	s.Data = v
	return s
}

type ListResourceComputertypeRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// region name
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// zone name
	Zone *string `json:"zone,omitempty" xml:"zone,omitempty"`
	// 实例规格族
	InstanceTypeFamily *string `json:"instance_type_family,omitempty" xml:"instance_type_family,omitempty" require:"true"`
}

func (s ListResourceComputertypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ListResourceComputertypeRequest) GoString() string {
	return s.String()
}

func (s *ListResourceComputertypeRequest) SetAuthToken(v string) *ListResourceComputertypeRequest {
	s.AuthToken = &v
	return s
}

func (s *ListResourceComputertypeRequest) SetRegion(v string) *ListResourceComputertypeRequest {
	s.Region = &v
	return s
}

func (s *ListResourceComputertypeRequest) SetZone(v string) *ListResourceComputertypeRequest {
	s.Zone = &v
	return s
}

func (s *ListResourceComputertypeRequest) SetInstanceTypeFamily(v string) *ListResourceComputertypeRequest {
	s.InstanceTypeFamily = &v
	return s
}

type ListResourceComputertypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可用computer type列表
	Data []*ComputerType `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListResourceComputertypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ListResourceComputertypeResponse) GoString() string {
	return s.String()
}

func (s *ListResourceComputertypeResponse) SetReqMsgId(v string) *ListResourceComputertypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListResourceComputertypeResponse) SetResultCode(v string) *ListResourceComputertypeResponse {
	s.ResultCode = &v
	return s
}

func (s *ListResourceComputertypeResponse) SetResultMsg(v string) *ListResourceComputertypeResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListResourceComputertypeResponse) SetData(v []*ComputerType) *ListResourceComputertypeResponse {
	s.Data = v
	return s
}

type ListResourceDiskRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 要查询的云盘或本地盘类型。取值范围：
	//
	// all：同时查询系统盘与数据盘
	// system：只查询系统盘
	// data：只查询数据盘
	// 默认值：all。
	DiskType *string `json:"disk_type,omitempty" xml:"disk_type,omitempty"`
	// 实例规格
	InstanceType *string `json:"instance_type,omitempty" xml:"instance_type,omitempty" require:"true"`
	// region name
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
}

func (s ListResourceDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s ListResourceDiskRequest) GoString() string {
	return s.String()
}

func (s *ListResourceDiskRequest) SetAuthToken(v string) *ListResourceDiskRequest {
	s.AuthToken = &v
	return s
}

func (s *ListResourceDiskRequest) SetDiskType(v string) *ListResourceDiskRequest {
	s.DiskType = &v
	return s
}

func (s *ListResourceDiskRequest) SetInstanceType(v string) *ListResourceDiskRequest {
	s.InstanceType = &v
	return s
}

func (s *ListResourceDiskRequest) SetRegion(v string) *ListResourceDiskRequest {
	s.Region = &v
	return s
}

type ListResourceDiskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// disk infos
	Data []*Disk `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListResourceDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s ListResourceDiskResponse) GoString() string {
	return s.String()
}

func (s *ListResourceDiskResponse) SetReqMsgId(v string) *ListResourceDiskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListResourceDiskResponse) SetResultCode(v string) *ListResourceDiskResponse {
	s.ResultCode = &v
	return s
}

func (s *ListResourceDiskResponse) SetResultMsg(v string) *ListResourceDiskResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListResourceDiskResponse) SetData(v []*Disk) *ListResourceDiskResponse {
	s.Data = v
	return s
}

type ListResourceComputertypefamilyRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// region name
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
}

func (s ListResourceComputertypefamilyRequest) String() string {
	return tea.Prettify(s)
}

func (s ListResourceComputertypefamilyRequest) GoString() string {
	return s.String()
}

func (s *ListResourceComputertypefamilyRequest) SetAuthToken(v string) *ListResourceComputertypefamilyRequest {
	s.AuthToken = &v
	return s
}

func (s *ListResourceComputertypefamilyRequest) SetRegion(v string) *ListResourceComputertypefamilyRequest {
	s.Region = &v
	return s
}

type ListResourceComputertypefamilyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// computer 规格族
	Data []*ComputerTypeFamily `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListResourceComputertypefamilyResponse) String() string {
	return tea.Prettify(s)
}

func (s ListResourceComputertypefamilyResponse) GoString() string {
	return s.String()
}

func (s *ListResourceComputertypefamilyResponse) SetReqMsgId(v string) *ListResourceComputertypefamilyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListResourceComputertypefamilyResponse) SetResultCode(v string) *ListResourceComputertypefamilyResponse {
	s.ResultCode = &v
	return s
}

func (s *ListResourceComputertypefamilyResponse) SetResultMsg(v string) *ListResourceComputertypefamilyResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListResourceComputertypefamilyResponse) SetData(v []*ComputerTypeFamily) *ListResourceComputertypefamilyResponse {
	s.Data = v
	return s
}

type ListUnifiedresourceVswitchRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// region name
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// 要查询的交换机所属VPC的ID
	VpcId *string `json:"vpc_id,omitempty" xml:"vpc_id,omitempty"`
	// 要查询的交换机的ID
	VSwitchId *string `json:"v_switch_id,omitempty" xml:"v_switch_id,omitempty"`
	// 最大50
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 以1为起点
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
}

func (s ListUnifiedresourceVswitchRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUnifiedresourceVswitchRequest) GoString() string {
	return s.String()
}

func (s *ListUnifiedresourceVswitchRequest) SetAuthToken(v string) *ListUnifiedresourceVswitchRequest {
	s.AuthToken = &v
	return s
}

func (s *ListUnifiedresourceVswitchRequest) SetRegion(v string) *ListUnifiedresourceVswitchRequest {
	s.Region = &v
	return s
}

func (s *ListUnifiedresourceVswitchRequest) SetVpcId(v string) *ListUnifiedresourceVswitchRequest {
	s.VpcId = &v
	return s
}

func (s *ListUnifiedresourceVswitchRequest) SetVSwitchId(v string) *ListUnifiedresourceVswitchRequest {
	s.VSwitchId = &v
	return s
}

func (s *ListUnifiedresourceVswitchRequest) SetPageSize(v int64) *ListUnifiedresourceVswitchRequest {
	s.PageSize = &v
	return s
}

func (s *ListUnifiedresourceVswitchRequest) SetPageNumber(v int64) *ListUnifiedresourceVswitchRequest {
	s.PageNumber = &v
	return s
}

type ListUnifiedresourceVswitchResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 交换机的详细信息
	Data []*VSwitch `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// 总量
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
}

func (s ListUnifiedresourceVswitchResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUnifiedresourceVswitchResponse) GoString() string {
	return s.String()
}

func (s *ListUnifiedresourceVswitchResponse) SetReqMsgId(v string) *ListUnifiedresourceVswitchResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListUnifiedresourceVswitchResponse) SetResultCode(v string) *ListUnifiedresourceVswitchResponse {
	s.ResultCode = &v
	return s
}

func (s *ListUnifiedresourceVswitchResponse) SetResultMsg(v string) *ListUnifiedresourceVswitchResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListUnifiedresourceVswitchResponse) SetData(v []*VSwitch) *ListUnifiedresourceVswitchResponse {
	s.Data = v
	return s
}

func (s *ListUnifiedresourceVswitchResponse) SetTotalCount(v int64) *ListUnifiedresourceVswitchResponse {
	s.TotalCount = &v
	return s
}

type ListUnifiedresourceVpcRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// region name
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
}

func (s ListUnifiedresourceVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUnifiedresourceVpcRequest) GoString() string {
	return s.String()
}

func (s *ListUnifiedresourceVpcRequest) SetAuthToken(v string) *ListUnifiedresourceVpcRequest {
	s.AuthToken = &v
	return s
}

func (s *ListUnifiedresourceVpcRequest) SetRegion(v string) *ListUnifiedresourceVpcRequest {
	s.Region = &v
	return s
}

type ListUnifiedresourceVpcResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// vpc list
	Data []*VPC `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListUnifiedresourceVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUnifiedresourceVpcResponse) GoString() string {
	return s.String()
}

func (s *ListUnifiedresourceVpcResponse) SetReqMsgId(v string) *ListUnifiedresourceVpcResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListUnifiedresourceVpcResponse) SetResultCode(v string) *ListUnifiedresourceVpcResponse {
	s.ResultCode = &v
	return s
}

func (s *ListUnifiedresourceVpcResponse) SetResultMsg(v string) *ListUnifiedresourceVpcResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListUnifiedresourceVpcResponse) SetData(v []*VPC) *ListUnifiedresourceVpcResponse {
	s.Data = v
	return s
}

type ImportResourceVpcRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// region identity
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
	// vpc iaas id
	VpcId *string `json:"vpc_id,omitempty" xml:"vpc_id,omitempty" require:"true"`
	// workspace identity
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
	// vrouter id
	VrouterId *string `json:"vrouter_id,omitempty" xml:"vrouter_id,omitempty" require:"true"`
	// vpc name
	VpcName *string `json:"vpc_name,omitempty" xml:"vpc_name,omitempty" require:"true"`
	// cidr block
	CidrBlock *string `json:"cidr_block,omitempty" xml:"cidr_block,omitempty"`
	// paas_region_id
	PaasRegionId *string `json:"paas_region_id,omitempty" xml:"paas_region_id,omitempty" require:"true"`
}

func (s ImportResourceVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportResourceVpcRequest) GoString() string {
	return s.String()
}

func (s *ImportResourceVpcRequest) SetAuthToken(v string) *ImportResourceVpcRequest {
	s.AuthToken = &v
	return s
}

func (s *ImportResourceVpcRequest) SetRegion(v string) *ImportResourceVpcRequest {
	s.Region = &v
	return s
}

func (s *ImportResourceVpcRequest) SetVpcId(v string) *ImportResourceVpcRequest {
	s.VpcId = &v
	return s
}

func (s *ImportResourceVpcRequest) SetWorkspace(v string) *ImportResourceVpcRequest {
	s.Workspace = &v
	return s
}

func (s *ImportResourceVpcRequest) SetVrouterId(v string) *ImportResourceVpcRequest {
	s.VrouterId = &v
	return s
}

func (s *ImportResourceVpcRequest) SetVpcName(v string) *ImportResourceVpcRequest {
	s.VpcName = &v
	return s
}

func (s *ImportResourceVpcRequest) SetCidrBlock(v string) *ImportResourceVpcRequest {
	s.CidrBlock = &v
	return s
}

func (s *ImportResourceVpcRequest) SetPaasRegionId(v string) *ImportResourceVpcRequest {
	s.PaasRegionId = &v
	return s
}

type ImportResourceVpcResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// vpc关联到workspace是否成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ImportResourceVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportResourceVpcResponse) GoString() string {
	return s.String()
}

func (s *ImportResourceVpcResponse) SetReqMsgId(v string) *ImportResourceVpcResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ImportResourceVpcResponse) SetResultCode(v string) *ImportResourceVpcResponse {
	s.ResultCode = &v
	return s
}

func (s *ImportResourceVpcResponse) SetResultMsg(v string) *ImportResourceVpcResponse {
	s.ResultMsg = &v
	return s
}

func (s *ImportResourceVpcResponse) SetSuccess(v bool) *ImportResourceVpcResponse {
	s.Success = &v
	return s
}

type DeleteResourceRuleRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 传输层协议。参数值大小写敏感。取值范围：
	//
	// icmp
	// gre
	// tcp
	// udp
	// all：支持所有协议
	IpProtocol *string `json:"ip_protocol,omitempty" xml:"ip_protocol,omitempty" require:"true"`
	// 目的端安全组开放的传输层协议相关的端口范围。取值范围：
	//
	// TCP/UDP协议：取值范围为1~65535。使用斜线（/）隔开起始端口和终止端口。例如：1/200
	// ICMP协议：-1/-1
	// GRE协议：-1/-1
	// all：-1/-1
	PortRange *string `json:"port_range,omitempty" xml:"port_range,omitempty" require:"true"`
	// CN-HANGZHOU_FINANCE
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// 枚举值：
	// ingress：入口规则
	// egress：出口规则
	RuleType *string `json:"rule_type,omitempty" xml:"rule_type,omitempty" require:"true"`
	// 目的端安全组ID。
	SecurityGroupId *string `json:"security_group_id,omitempty" xml:"security_group_id,omitempty" require:"true"`
	// 源端IP地址范围。支持CIDR格式和IPv4格式的IP地址范围。默认值：0.0.0.0/0
	SourceCidrIp *string `json:"source_cidr_ip,omitempty" xml:"source_cidr_ip,omitempty"`
	// 目的端IP地址范围。支持CIDR格式和IPv4格式的IP地址范围。默认值：0.0.0.0/0
	DestCidrIp *string `json:"dest_cidr_ip,omitempty" xml:"dest_cidr_ip,omitempty"`
}

func (s DeleteResourceRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteResourceRuleRequest) SetAuthToken(v string) *DeleteResourceRuleRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteResourceRuleRequest) SetIpProtocol(v string) *DeleteResourceRuleRequest {
	s.IpProtocol = &v
	return s
}

func (s *DeleteResourceRuleRequest) SetPortRange(v string) *DeleteResourceRuleRequest {
	s.PortRange = &v
	return s
}

func (s *DeleteResourceRuleRequest) SetRegion(v string) *DeleteResourceRuleRequest {
	s.Region = &v
	return s
}

func (s *DeleteResourceRuleRequest) SetRuleType(v string) *DeleteResourceRuleRequest {
	s.RuleType = &v
	return s
}

func (s *DeleteResourceRuleRequest) SetSecurityGroupId(v string) *DeleteResourceRuleRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *DeleteResourceRuleRequest) SetSourceCidrIp(v string) *DeleteResourceRuleRequest {
	s.SourceCidrIp = &v
	return s
}

func (s *DeleteResourceRuleRequest) SetDestCidrIp(v string) *DeleteResourceRuleRequest {
	s.DestCidrIp = &v
	return s
}

type DeleteResourceRuleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 操作是否成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteResourceRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteResourceRuleResponse) SetReqMsgId(v string) *DeleteResourceRuleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteResourceRuleResponse) SetResultCode(v string) *DeleteResourceRuleResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteResourceRuleResponse) SetResultMsg(v string) *DeleteResourceRuleResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteResourceRuleResponse) SetSuccess(v bool) *DeleteResourceRuleResponse {
	s.Success = &v
	return s
}

type ListRouteEntryRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 所属地域
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// 要查询的路由条目所属路由表的所属路由器的ID。
	RouterId *string `json:"router_id,omitempty" xml:"router_id,omitempty" require:"true"`
}

func (s ListRouteEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRouteEntryRequest) GoString() string {
	return s.String()
}

func (s *ListRouteEntryRequest) SetAuthToken(v string) *ListRouteEntryRequest {
	s.AuthToken = &v
	return s
}

func (s *ListRouteEntryRequest) SetRegion(v string) *ListRouteEntryRequest {
	s.Region = &v
	return s
}

func (s *ListRouteEntryRequest) SetRouterId(v string) *ListRouteEntryRequest {
	s.RouterId = &v
	return s
}

type ListRouteEntryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 路由条目信息
	Data []*VRouteEntry `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListRouteEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRouteEntryResponse) GoString() string {
	return s.String()
}

func (s *ListRouteEntryResponse) SetReqMsgId(v string) *ListRouteEntryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListRouteEntryResponse) SetResultCode(v string) *ListRouteEntryResponse {
	s.ResultCode = &v
	return s
}

func (s *ListRouteEntryResponse) SetResultMsg(v string) *ListRouteEntryResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListRouteEntryResponse) SetData(v []*VRouteEntry) *ListRouteEntryResponse {
	s.Data = v
	return s
}

type ListAvailableDiskRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// region name
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	// 磁盘类型：
	// SystemDisk;
	// DataDisk
	DiskType *string `json:"disk_type,omitempty" xml:"disk_type,omitempty" require:"true"`
	// 实例规格
	InstanceType *string `json:"instance_type,omitempty" xml:"instance_type,omitempty" require:"true"`
}

func (s ListAvailableDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAvailableDiskRequest) GoString() string {
	return s.String()
}

func (s *ListAvailableDiskRequest) SetAuthToken(v string) *ListAvailableDiskRequest {
	s.AuthToken = &v
	return s
}

func (s *ListAvailableDiskRequest) SetRegion(v string) *ListAvailableDiskRequest {
	s.Region = &v
	return s
}

func (s *ListAvailableDiskRequest) SetDiskType(v string) *ListAvailableDiskRequest {
	s.DiskType = &v
	return s
}

func (s *ListAvailableDiskRequest) SetInstanceType(v string) *ListAvailableDiskRequest {
	s.InstanceType = &v
	return s
}

type ListAvailableDiskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 磁盘类型详细信息，jsonstring
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListAvailableDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAvailableDiskResponse) GoString() string {
	return s.String()
}

func (s *ListAvailableDiskResponse) SetReqMsgId(v string) *ListAvailableDiskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListAvailableDiskResponse) SetResultCode(v string) *ListAvailableDiskResponse {
	s.ResultCode = &v
	return s
}

func (s *ListAvailableDiskResponse) SetResultMsg(v string) *ListAvailableDiskResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListAvailableDiskResponse) SetData(v string) *ListAvailableDiskResponse {
	s.Data = &v
	return s
}

type ListAvailableInstancetypeRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// region name
	Region *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
}

func (s ListAvailableInstancetypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAvailableInstancetypeRequest) GoString() string {
	return s.String()
}

func (s *ListAvailableInstancetypeRequest) SetAuthToken(v string) *ListAvailableInstancetypeRequest {
	s.AuthToken = &v
	return s
}

func (s *ListAvailableInstancetypeRequest) SetRegion(v string) *ListAvailableInstancetypeRequest {
	s.Region = &v
	return s
}

type ListAvailableInstancetypeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 实例类型详细信息，jsonstring
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ListAvailableInstancetypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAvailableInstancetypeResponse) GoString() string {
	return s.String()
}

func (s *ListAvailableInstancetypeResponse) SetReqMsgId(v string) *ListAvailableInstancetypeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListAvailableInstancetypeResponse) SetResultCode(v string) *ListAvailableInstancetypeResponse {
	s.ResultCode = &v
	return s
}

func (s *ListAvailableInstancetypeResponse) SetResultMsg(v string) *ListAvailableInstancetypeResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListAvailableInstancetypeResponse) SetData(v string) *ListAvailableInstancetypeResponse {
	s.Data = &v
	return s
}

type QueryResourcemetaNodeRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace name
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
}

func (s QueryResourcemetaNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryResourcemetaNodeRequest) GoString() string {
	return s.String()
}

func (s *QueryResourcemetaNodeRequest) SetAuthToken(v string) *QueryResourcemetaNodeRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryResourcemetaNodeRequest) SetWorkspace(v string) *QueryResourcemetaNodeRequest {
	s.Workspace = &v
	return s
}

type QueryResourcemetaNodeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// node meta list jsonstring
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryResourcemetaNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryResourcemetaNodeResponse) GoString() string {
	return s.String()
}

func (s *QueryResourcemetaNodeResponse) SetReqMsgId(v string) *QueryResourcemetaNodeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryResourcemetaNodeResponse) SetResultCode(v string) *QueryResourcemetaNodeResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryResourcemetaNodeResponse) SetResultMsg(v string) *QueryResourcemetaNodeResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryResourcemetaNodeResponse) SetData(v string) *QueryResourcemetaNodeResponse {
	s.Data = &v
	return s
}

type QueryResourcemetaAppserviceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace name
	Workspace *string `json:"workspace,omitempty" xml:"workspace,omitempty" require:"true"`
	// app_names
	AppNames []*string `json:"app_names,omitempty" xml:"app_names,omitempty" type:"Repeated"`
}

func (s QueryResourcemetaAppserviceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryResourcemetaAppserviceRequest) GoString() string {
	return s.String()
}

func (s *QueryResourcemetaAppserviceRequest) SetAuthToken(v string) *QueryResourcemetaAppserviceRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryResourcemetaAppserviceRequest) SetWorkspace(v string) *QueryResourcemetaAppserviceRequest {
	s.Workspace = &v
	return s
}

func (s *QueryResourcemetaAppserviceRequest) SetAppNames(v []*string) *QueryResourcemetaAppserviceRequest {
	s.AppNames = v
	return s
}

type QueryResourcemetaAppserviceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// app service metadata json
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryResourcemetaAppserviceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryResourcemetaAppserviceResponse) GoString() string {
	return s.String()
}

func (s *QueryResourcemetaAppserviceResponse) SetReqMsgId(v string) *QueryResourcemetaAppserviceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryResourcemetaAppserviceResponse) SetResultCode(v string) *QueryResourcemetaAppserviceResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryResourcemetaAppserviceResponse) SetResultMsg(v string) *QueryResourcemetaAppserviceResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryResourcemetaAppserviceResponse) SetData(v string) *QueryResourcemetaAppserviceResponse {
	s.Data = &v
	return s
}

type SyncComputerRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// computer_id
	ComputerId *string `json:"computer_id,omitempty" xml:"computer_id,omitempty" require:"true"`
}

func (s SyncComputerRequest) String() string {
	return tea.Prettify(s)
}

func (s SyncComputerRequest) GoString() string {
	return s.String()
}

func (s *SyncComputerRequest) SetAuthToken(v string) *SyncComputerRequest {
	s.AuthToken = &v
	return s
}

func (s *SyncComputerRequest) SetWorkspaceId(v string) *SyncComputerRequest {
	s.WorkspaceId = &v
	return s
}

func (s *SyncComputerRequest) SetComputerId(v string) *SyncComputerRequest {
	s.ComputerId = &v
	return s
}

type SyncComputerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SyncComputerResponse) String() string {
	return tea.Prettify(s)
}

func (s SyncComputerResponse) GoString() string {
	return s.String()
}

func (s *SyncComputerResponse) SetReqMsgId(v string) *SyncComputerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SyncComputerResponse) SetResultCode(v string) *SyncComputerResponse {
	s.ResultCode = &v
	return s
}

func (s *SyncComputerResponse) SetResultMsg(v string) *SyncComputerResponse {
	s.ResultMsg = &v
	return s
}

type SyncLoadbalanceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// lb_id
	LbId *string `json:"lb_id,omitempty" xml:"lb_id,omitempty" require:"true"`
}

func (s SyncLoadbalanceRequest) String() string {
	return tea.Prettify(s)
}

func (s SyncLoadbalanceRequest) GoString() string {
	return s.String()
}

func (s *SyncLoadbalanceRequest) SetAuthToken(v string) *SyncLoadbalanceRequest {
	s.AuthToken = &v
	return s
}

func (s *SyncLoadbalanceRequest) SetWorkspaceId(v string) *SyncLoadbalanceRequest {
	s.WorkspaceId = &v
	return s
}

func (s *SyncLoadbalanceRequest) SetLbId(v string) *SyncLoadbalanceRequest {
	s.LbId = &v
	return s
}

type SyncLoadbalanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SyncLoadbalanceResponse) String() string {
	return tea.Prettify(s)
}

func (s SyncLoadbalanceResponse) GoString() string {
	return s.String()
}

func (s *SyncLoadbalanceResponse) SetReqMsgId(v string) *SyncLoadbalanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SyncLoadbalanceResponse) SetResultCode(v string) *SyncLoadbalanceResponse {
	s.ResultCode = &v
	return s
}

func (s *SyncLoadbalanceResponse) SetResultMsg(v string) *SyncLoadbalanceResponse {
	s.ResultMsg = &v
	return s
}

type UpdateComputerInfoRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// computer_id
	ComputerId *string `json:"computer_id,omitempty" xml:"computer_id,omitempty" require:"true"`
}

func (s UpdateComputerInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateComputerInfoRequest) GoString() string {
	return s.String()
}

func (s *UpdateComputerInfoRequest) SetAuthToken(v string) *UpdateComputerInfoRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateComputerInfoRequest) SetName(v string) *UpdateComputerInfoRequest {
	s.Name = &v
	return s
}

func (s *UpdateComputerInfoRequest) SetDescription(v string) *UpdateComputerInfoRequest {
	s.Description = &v
	return s
}

func (s *UpdateComputerInfoRequest) SetWorkspaceId(v string) *UpdateComputerInfoRequest {
	s.WorkspaceId = &v
	return s
}

func (s *UpdateComputerInfoRequest) SetComputerId(v string) *UpdateComputerInfoRequest {
	s.ComputerId = &v
	return s
}

type UpdateComputerInfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateComputerInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateComputerInfoResponse) GoString() string {
	return s.String()
}

func (s *UpdateComputerInfoResponse) SetReqMsgId(v string) *UpdateComputerInfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateComputerInfoResponse) SetResultCode(v string) *UpdateComputerInfoResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateComputerInfoResponse) SetResultMsg(v string) *UpdateComputerInfoResponse {
	s.ResultMsg = &v
	return s
}

type SetComputerAssignRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// app_id
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty"`
	// 应用服务实例
	AppServiceId *string `json:"app_service_id,omitempty" xml:"app_service_id,omitempty" require:"true"`
	// computer_ids
	ComputerIds []*string `json:"computer_ids,omitempty" xml:"computer_ids,omitempty" require:"true" type:"Repeated"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// cell信息
	Cell []*MapStringToStringEntity `json:"cell,omitempty" xml:"cell,omitempty" type:"Repeated"`
}

func (s SetComputerAssignRequest) String() string {
	return tea.Prettify(s)
}

func (s SetComputerAssignRequest) GoString() string {
	return s.String()
}

func (s *SetComputerAssignRequest) SetAuthToken(v string) *SetComputerAssignRequest {
	s.AuthToken = &v
	return s
}

func (s *SetComputerAssignRequest) SetAppId(v string) *SetComputerAssignRequest {
	s.AppId = &v
	return s
}

func (s *SetComputerAssignRequest) SetAppServiceId(v string) *SetComputerAssignRequest {
	s.AppServiceId = &v
	return s
}

func (s *SetComputerAssignRequest) SetComputerIds(v []*string) *SetComputerAssignRequest {
	s.ComputerIds = v
	return s
}

func (s *SetComputerAssignRequest) SetWorkspaceId(v string) *SetComputerAssignRequest {
	s.WorkspaceId = &v
	return s
}

func (s *SetComputerAssignRequest) SetCell(v []*MapStringToStringEntity) *SetComputerAssignRequest {
	s.Cell = v
	return s
}

type SetComputerAssignResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SetComputerAssignResponse) String() string {
	return tea.Prettify(s)
}

func (s SetComputerAssignResponse) GoString() string {
	return s.String()
}

func (s *SetComputerAssignResponse) SetReqMsgId(v string) *SetComputerAssignResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetComputerAssignResponse) SetResultCode(v string) *SetComputerAssignResponse {
	s.ResultCode = &v
	return s
}

func (s *SetComputerAssignResponse) SetResultMsg(v string) *SetComputerAssignResponse {
	s.ResultMsg = &v
	return s
}

type ExecRequestTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// rmc_request_id，注意区分OPENAPI自身的request_id
	RmcRequestId *string `json:"rmc_request_id,omitempty" xml:"rmc_request_id,omitempty" require:"true"`
	// task_ids
	TaskIds []*string `json:"task_ids,omitempty" xml:"task_ids,omitempty" require:"true" type:"Repeated"`
}

func (s ExecRequestTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecRequestTaskRequest) GoString() string {
	return s.String()
}

func (s *ExecRequestTaskRequest) SetAuthToken(v string) *ExecRequestTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecRequestTaskRequest) SetRmcRequestId(v string) *ExecRequestTaskRequest {
	s.RmcRequestId = &v
	return s
}

func (s *ExecRequestTaskRequest) SetTaskIds(v []*string) *ExecRequestTaskRequest {
	s.TaskIds = v
	return s
}

type ExecRequestTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ExecRequestTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecRequestTaskResponse) GoString() string {
	return s.String()
}

func (s *ExecRequestTaskResponse) SetReqMsgId(v string) *ExecRequestTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecRequestTaskResponse) SetResultCode(v string) *ExecRequestTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecRequestTaskResponse) SetResultMsg(v string) *ExecRequestTaskResponse {
	s.ResultMsg = &v
	return s
}

type ReinitDiskRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// ids
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" require:"true" type:"Repeated"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
}

func (s ReinitDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s ReinitDiskRequest) GoString() string {
	return s.String()
}

func (s *ReinitDiskRequest) SetAuthToken(v string) *ReinitDiskRequest {
	s.AuthToken = &v
	return s
}

func (s *ReinitDiskRequest) SetIds(v []*string) *ReinitDiskRequest {
	s.Ids = v
	return s
}

func (s *ReinitDiskRequest) SetWorkspaceId(v string) *ReinitDiskRequest {
	s.WorkspaceId = &v
	return s
}

type ReinitDiskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ReinitDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s ReinitDiskResponse) GoString() string {
	return s.String()
}

func (s *ReinitDiskResponse) SetReqMsgId(v string) *ReinitDiskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ReinitDiskResponse) SetResultCode(v string) *ReinitDiskResponse {
	s.ResultCode = &v
	return s
}

func (s *ReinitDiskResponse) SetResultMsg(v string) *ReinitDiskResponse {
	s.ResultMsg = &v
	return s
}

type UpdateDiskStrategyRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// delete_with_computer
	DeleteWithComputer *bool `json:"delete_with_computer,omitempty" xml:"delete_with_computer,omitempty"`
	// delete_auto_snapshot
	DeleteAutoSnapshot *bool `json:"delete_auto_snapshot,omitempty" xml:"delete_auto_snapshot,omitempty"`
	// enable_auto_snapshot
	EnableAutoSnapshot *bool `json:"enable_auto_snapshot,omitempty" xml:"enable_auto_snapshot,omitempty"`
	// ids
	Ids []*string `json:"ids,omitempty" xml:"ids,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateDiskStrategyRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDiskStrategyRequest) GoString() string {
	return s.String()
}

func (s *UpdateDiskStrategyRequest) SetAuthToken(v string) *UpdateDiskStrategyRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateDiskStrategyRequest) SetDeleteWithComputer(v bool) *UpdateDiskStrategyRequest {
	s.DeleteWithComputer = &v
	return s
}

func (s *UpdateDiskStrategyRequest) SetDeleteAutoSnapshot(v bool) *UpdateDiskStrategyRequest {
	s.DeleteAutoSnapshot = &v
	return s
}

func (s *UpdateDiskStrategyRequest) SetEnableAutoSnapshot(v bool) *UpdateDiskStrategyRequest {
	s.EnableAutoSnapshot = &v
	return s
}

func (s *UpdateDiskStrategyRequest) SetIds(v []*string) *UpdateDiskStrategyRequest {
	s.Ids = v
	return s
}

type UpdateDiskStrategyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateDiskStrategyResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDiskStrategyResponse) GoString() string {
	return s.String()
}

func (s *UpdateDiskStrategyResponse) SetReqMsgId(v string) *UpdateDiskStrategyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateDiskStrategyResponse) SetResultCode(v string) *UpdateDiskStrategyResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateDiskStrategyResponse) SetResultMsg(v string) *UpdateDiskStrategyResponse {
	s.ResultMsg = &v
	return s
}

type CreateLoadbalanceVcomputergroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// load_balancer_id
	LoadBalancerId *string `json:"load_balancer_id,omitempty" xml:"load_balancer_id,omitempty" require:"true"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// computer_ids
	ComputerIds []*string `json:"computer_ids,omitempty" xml:"computer_ids,omitempty" require:"true" type:"Repeated"`
	// ports
	Ports []*int64 `json:"ports,omitempty" xml:"ports,omitempty" require:"true" type:"Repeated"`
	// weights
	Weights []*int64 `json:"weights,omitempty" xml:"weights,omitempty" require:"true" type:"Repeated"`
	// is_eip
	IsEip *bool `json:"is_eip,omitempty" xml:"is_eip,omitempty"`
	// eips
	Eips []*string `json:"eips,omitempty" xml:"eips,omitempty" type:"Repeated"`
}

func (s CreateLoadbalanceVcomputergroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadbalanceVcomputergroupRequest) GoString() string {
	return s.String()
}

func (s *CreateLoadbalanceVcomputergroupRequest) SetAuthToken(v string) *CreateLoadbalanceVcomputergroupRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLoadbalanceVcomputergroupRequest) SetLoadBalancerId(v string) *CreateLoadbalanceVcomputergroupRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *CreateLoadbalanceVcomputergroupRequest) SetName(v string) *CreateLoadbalanceVcomputergroupRequest {
	s.Name = &v
	return s
}

func (s *CreateLoadbalanceVcomputergroupRequest) SetComputerIds(v []*string) *CreateLoadbalanceVcomputergroupRequest {
	s.ComputerIds = v
	return s
}

func (s *CreateLoadbalanceVcomputergroupRequest) SetPorts(v []*int64) *CreateLoadbalanceVcomputergroupRequest {
	s.Ports = v
	return s
}

func (s *CreateLoadbalanceVcomputergroupRequest) SetWeights(v []*int64) *CreateLoadbalanceVcomputergroupRequest {
	s.Weights = v
	return s
}

func (s *CreateLoadbalanceVcomputergroupRequest) SetIsEip(v bool) *CreateLoadbalanceVcomputergroupRequest {
	s.IsEip = &v
	return s
}

func (s *CreateLoadbalanceVcomputergroupRequest) SetEips(v []*string) *CreateLoadbalanceVcomputergroupRequest {
	s.Eips = v
	return s
}

type CreateLoadbalanceVcomputergroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// request_ids
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s CreateLoadbalanceVcomputergroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadbalanceVcomputergroupResponse) GoString() string {
	return s.String()
}

func (s *CreateLoadbalanceVcomputergroupResponse) SetReqMsgId(v string) *CreateLoadbalanceVcomputergroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLoadbalanceVcomputergroupResponse) SetResultCode(v string) *CreateLoadbalanceVcomputergroupResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLoadbalanceVcomputergroupResponse) SetResultMsg(v string) *CreateLoadbalanceVcomputergroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLoadbalanceVcomputergroupResponse) SetData(v []*string) *CreateLoadbalanceVcomputergroupResponse {
	s.Data = v
	return s
}

type UpdateLoadbalanceVcomputergroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// v_computergroup_id
	VComputergroupId *string `json:"v_computergroup_id,omitempty" xml:"v_computergroup_id,omitempty" require:"true"`
	// is_eip
	IsEip *bool `json:"is_eip,omitempty" xml:"is_eip,omitempty"`
	// eips
	Eips []*string `json:"eips,omitempty" xml:"eips,omitempty" require:"true" type:"Repeated"`
	// computer_ids
	ComputerIds []*string `json:"computer_ids,omitempty" xml:"computer_ids,omitempty" type:"Repeated"`
	// weights
	Weights []*int64 `json:"weights,omitempty" xml:"weights,omitempty" require:"true" type:"Repeated"`
	// ports
	Ports []*int64 `json:"ports,omitempty" xml:"ports,omitempty" require:"true" type:"Repeated"`
	// 是否只是调整权重，不增删后端服务器
	UpdateWeightOnly *bool `json:"update_weight_only,omitempty" xml:"update_weight_only,omitempty"`
}

func (s UpdateLoadbalanceVcomputergroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLoadbalanceVcomputergroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateLoadbalanceVcomputergroupRequest) SetAuthToken(v string) *UpdateLoadbalanceVcomputergroupRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateLoadbalanceVcomputergroupRequest) SetVComputergroupId(v string) *UpdateLoadbalanceVcomputergroupRequest {
	s.VComputergroupId = &v
	return s
}

func (s *UpdateLoadbalanceVcomputergroupRequest) SetIsEip(v bool) *UpdateLoadbalanceVcomputergroupRequest {
	s.IsEip = &v
	return s
}

func (s *UpdateLoadbalanceVcomputergroupRequest) SetEips(v []*string) *UpdateLoadbalanceVcomputergroupRequest {
	s.Eips = v
	return s
}

func (s *UpdateLoadbalanceVcomputergroupRequest) SetComputerIds(v []*string) *UpdateLoadbalanceVcomputergroupRequest {
	s.ComputerIds = v
	return s
}

func (s *UpdateLoadbalanceVcomputergroupRequest) SetWeights(v []*int64) *UpdateLoadbalanceVcomputergroupRequest {
	s.Weights = v
	return s
}

func (s *UpdateLoadbalanceVcomputergroupRequest) SetPorts(v []*int64) *UpdateLoadbalanceVcomputergroupRequest {
	s.Ports = v
	return s
}

func (s *UpdateLoadbalanceVcomputergroupRequest) SetUpdateWeightOnly(v bool) *UpdateLoadbalanceVcomputergroupRequest {
	s.UpdateWeightOnly = &v
	return s
}

type UpdateLoadbalanceVcomputergroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateLoadbalanceVcomputergroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLoadbalanceVcomputergroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateLoadbalanceVcomputergroupResponse) SetReqMsgId(v string) *UpdateLoadbalanceVcomputergroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateLoadbalanceVcomputergroupResponse) SetResultCode(v string) *UpdateLoadbalanceVcomputergroupResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateLoadbalanceVcomputergroupResponse) SetResultMsg(v string) *UpdateLoadbalanceVcomputergroupResponse {
	s.ResultMsg = &v
	return s
}

type DeleteLoadbalanceVcomputergroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 虚拟服务器ID，PAAS ID非IAAS ID
	VComputerGroupId *string `json:"v_computer_group_id,omitempty" xml:"v_computer_group_id,omitempty" require:"true"`
}

func (s DeleteLoadbalanceVcomputergroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLoadbalanceVcomputergroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteLoadbalanceVcomputergroupRequest) SetAuthToken(v string) *DeleteLoadbalanceVcomputergroupRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteLoadbalanceVcomputergroupRequest) SetVComputerGroupId(v string) *DeleteLoadbalanceVcomputergroupRequest {
	s.VComputerGroupId = &v
	return s
}

type DeleteLoadbalanceVcomputergroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// paas_request_id
	PaasRequestId *string `json:"paas_request_id,omitempty" xml:"paas_request_id,omitempty"`
}

func (s DeleteLoadbalanceVcomputergroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLoadbalanceVcomputergroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteLoadbalanceVcomputergroupResponse) SetReqMsgId(v string) *DeleteLoadbalanceVcomputergroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteLoadbalanceVcomputergroupResponse) SetResultCode(v string) *DeleteLoadbalanceVcomputergroupResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteLoadbalanceVcomputergroupResponse) SetResultMsg(v string) *DeleteLoadbalanceVcomputergroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteLoadbalanceVcomputergroupResponse) SetPaasRequestId(v string) *DeleteLoadbalanceVcomputergroupResponse {
	s.PaasRequestId = &v
	return s
}

type AddLoadbalanceVcomputergroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// v_computer_group_id
	VComputerGroupId *string `json:"v_computer_group_id,omitempty" xml:"v_computer_group_id,omitempty" require:"true"`
	// is_eip
	IsEip *bool `json:"is_eip,omitempty" xml:"is_eip,omitempty"`
	// computer 的id数组
	ComputerIds []*string `json:"computer_ids,omitempty" xml:"computer_ids,omitempty" type:"Repeated"`
	// 权重
	Weights []*int64 `json:"weights,omitempty" xml:"weights,omitempty" require:"true" type:"Repeated"`
	// ports
	Ports []*string `json:"ports,omitempty" xml:"ports,omitempty" require:"true" type:"Repeated"`
	// 当is_eip时必填
	Eips []*string `json:"eips,omitempty" xml:"eips,omitempty" type:"Repeated"`
}

func (s AddLoadbalanceVcomputergroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLoadbalanceVcomputergroupRequest) GoString() string {
	return s.String()
}

func (s *AddLoadbalanceVcomputergroupRequest) SetAuthToken(v string) *AddLoadbalanceVcomputergroupRequest {
	s.AuthToken = &v
	return s
}

func (s *AddLoadbalanceVcomputergroupRequest) SetWorkspaceId(v string) *AddLoadbalanceVcomputergroupRequest {
	s.WorkspaceId = &v
	return s
}

func (s *AddLoadbalanceVcomputergroupRequest) SetVComputerGroupId(v string) *AddLoadbalanceVcomputergroupRequest {
	s.VComputerGroupId = &v
	return s
}

func (s *AddLoadbalanceVcomputergroupRequest) SetIsEip(v bool) *AddLoadbalanceVcomputergroupRequest {
	s.IsEip = &v
	return s
}

func (s *AddLoadbalanceVcomputergroupRequest) SetComputerIds(v []*string) *AddLoadbalanceVcomputergroupRequest {
	s.ComputerIds = v
	return s
}

func (s *AddLoadbalanceVcomputergroupRequest) SetWeights(v []*int64) *AddLoadbalanceVcomputergroupRequest {
	s.Weights = v
	return s
}

func (s *AddLoadbalanceVcomputergroupRequest) SetPorts(v []*string) *AddLoadbalanceVcomputergroupRequest {
	s.Ports = v
	return s
}

func (s *AddLoadbalanceVcomputergroupRequest) SetEips(v []*string) *AddLoadbalanceVcomputergroupRequest {
	s.Eips = v
	return s
}

type AddLoadbalanceVcomputergroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// paas_request_id
	PaasRequestId *string `json:"paas_request_id,omitempty" xml:"paas_request_id,omitempty"`
}

func (s AddLoadbalanceVcomputergroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLoadbalanceVcomputergroupResponse) GoString() string {
	return s.String()
}

func (s *AddLoadbalanceVcomputergroupResponse) SetReqMsgId(v string) *AddLoadbalanceVcomputergroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddLoadbalanceVcomputergroupResponse) SetResultCode(v string) *AddLoadbalanceVcomputergroupResponse {
	s.ResultCode = &v
	return s
}

func (s *AddLoadbalanceVcomputergroupResponse) SetResultMsg(v string) *AddLoadbalanceVcomputergroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *AddLoadbalanceVcomputergroupResponse) SetPaasRequestId(v string) *AddLoadbalanceVcomputergroupResponse {
	s.PaasRequestId = &v
	return s
}

type RemoveLoadbalanceVcomputergroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// computer_ids
	ComputerIds []*string `json:"computer_ids,omitempty" xml:"computer_ids,omitempty" require:"true" type:"Repeated"`
	// 后端是否是弹性网卡
	IsEip *bool `json:"is_eip,omitempty" xml:"is_eip,omitempty"`
	// ports
	Ports []*int64 `json:"ports,omitempty" xml:"ports,omitempty" require:"true" type:"Repeated"`
	// weights
	Weights []*int64 `json:"weights,omitempty" xml:"weights,omitempty" require:"true" type:"Repeated"`
	// eips
	Eips []*string `json:"eips,omitempty" xml:"eips,omitempty" type:"Repeated"`
	// v_computer_group_id
	VComputerGroupId *string `json:"v_computer_group_id,omitempty" xml:"v_computer_group_id,omitempty" require:"true"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
}

func (s RemoveLoadbalanceVcomputergroupRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveLoadbalanceVcomputergroupRequest) GoString() string {
	return s.String()
}

func (s *RemoveLoadbalanceVcomputergroupRequest) SetAuthToken(v string) *RemoveLoadbalanceVcomputergroupRequest {
	s.AuthToken = &v
	return s
}

func (s *RemoveLoadbalanceVcomputergroupRequest) SetComputerIds(v []*string) *RemoveLoadbalanceVcomputergroupRequest {
	s.ComputerIds = v
	return s
}

func (s *RemoveLoadbalanceVcomputergroupRequest) SetIsEip(v bool) *RemoveLoadbalanceVcomputergroupRequest {
	s.IsEip = &v
	return s
}

func (s *RemoveLoadbalanceVcomputergroupRequest) SetPorts(v []*int64) *RemoveLoadbalanceVcomputergroupRequest {
	s.Ports = v
	return s
}

func (s *RemoveLoadbalanceVcomputergroupRequest) SetWeights(v []*int64) *RemoveLoadbalanceVcomputergroupRequest {
	s.Weights = v
	return s
}

func (s *RemoveLoadbalanceVcomputergroupRequest) SetEips(v []*string) *RemoveLoadbalanceVcomputergroupRequest {
	s.Eips = v
	return s
}

func (s *RemoveLoadbalanceVcomputergroupRequest) SetVComputerGroupId(v string) *RemoveLoadbalanceVcomputergroupRequest {
	s.VComputerGroupId = &v
	return s
}

func (s *RemoveLoadbalanceVcomputergroupRequest) SetWorkspaceId(v string) *RemoveLoadbalanceVcomputergroupRequest {
	s.WorkspaceId = &v
	return s
}

type RemoveLoadbalanceVcomputergroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// paas_request_id
	PaasRequestId *string `json:"paas_request_id,omitempty" xml:"paas_request_id,omitempty"`
}

func (s RemoveLoadbalanceVcomputergroupResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveLoadbalanceVcomputergroupResponse) GoString() string {
	return s.String()
}

func (s *RemoveLoadbalanceVcomputergroupResponse) SetReqMsgId(v string) *RemoveLoadbalanceVcomputergroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RemoveLoadbalanceVcomputergroupResponse) SetResultCode(v string) *RemoveLoadbalanceVcomputergroupResponse {
	s.ResultCode = &v
	return s
}

func (s *RemoveLoadbalanceVcomputergroupResponse) SetResultMsg(v string) *RemoveLoadbalanceVcomputergroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *RemoveLoadbalanceVcomputergroupResponse) SetPaasRequestId(v string) *RemoveLoadbalanceVcomputergroupResponse {
	s.PaasRequestId = &v
	return s
}

type AddDnsRecordsetRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// type: 记录类型，默认为A, 仅支持 A, CName, 见DnsRecordSetType
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// type: 类型, PUBLIC(外部域名) 或者 PRIVATE (域名) 见DnsNetworkType
	DnsNetworkType *string `json:"dns_network_type,omitempty" xml:"dns_network_type,omitempty"`
	// tenant_id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// dns_records
	DnsRecords []*DnsRecordParam `json:"dns_records,omitempty" xml:"dns_records,omitempty" require:"true" type:"Repeated"`
}

func (s AddDnsRecordsetRequest) String() string {
	return tea.Prettify(s)
}

func (s AddDnsRecordsetRequest) GoString() string {
	return s.String()
}

func (s *AddDnsRecordsetRequest) SetAuthToken(v string) *AddDnsRecordsetRequest {
	s.AuthToken = &v
	return s
}

func (s *AddDnsRecordsetRequest) SetName(v string) *AddDnsRecordsetRequest {
	s.Name = &v
	return s
}

func (s *AddDnsRecordsetRequest) SetDescription(v string) *AddDnsRecordsetRequest {
	s.Description = &v
	return s
}

func (s *AddDnsRecordsetRequest) SetType(v string) *AddDnsRecordsetRequest {
	s.Type = &v
	return s
}

func (s *AddDnsRecordsetRequest) SetDnsNetworkType(v string) *AddDnsRecordsetRequest {
	s.DnsNetworkType = &v
	return s
}

func (s *AddDnsRecordsetRequest) SetTenantId(v string) *AddDnsRecordsetRequest {
	s.TenantId = &v
	return s
}

func (s *AddDnsRecordsetRequest) SetDnsRecords(v []*DnsRecordParam) *AddDnsRecordsetRequest {
	s.DnsRecords = v
	return s
}

type AddDnsRecordsetResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// xxxxxxx
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s AddDnsRecordsetResponse) String() string {
	return tea.Prettify(s)
}

func (s AddDnsRecordsetResponse) GoString() string {
	return s.String()
}

func (s *AddDnsRecordsetResponse) SetReqMsgId(v string) *AddDnsRecordsetResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddDnsRecordsetResponse) SetResultCode(v string) *AddDnsRecordsetResponse {
	s.ResultCode = &v
	return s
}

func (s *AddDnsRecordsetResponse) SetResultMsg(v string) *AddDnsRecordsetResponse {
	s.ResultMsg = &v
	return s
}

func (s *AddDnsRecordsetResponse) SetData(v string) *AddDnsRecordsetResponse {
	s.Data = &v
	return s
}

type DeleteDnsRecordRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// dns_recordset_id
	DnsRecordsetId *string `json:"dns_recordset_id,omitempty" xml:"dns_recordset_id,omitempty" require:"true"`
	// dns_record_ip
	DnsRecordIp *string `json:"dns_record_ip,omitempty" xml:"dns_record_ip,omitempty" require:"true"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
}

func (s DeleteDnsRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDnsRecordRequest) GoString() string {
	return s.String()
}

func (s *DeleteDnsRecordRequest) SetAuthToken(v string) *DeleteDnsRecordRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteDnsRecordRequest) SetDnsRecordsetId(v string) *DeleteDnsRecordRequest {
	s.DnsRecordsetId = &v
	return s
}

func (s *DeleteDnsRecordRequest) SetDnsRecordIp(v string) *DeleteDnsRecordRequest {
	s.DnsRecordIp = &v
	return s
}

func (s *DeleteDnsRecordRequest) SetWorkspaceId(v string) *DeleteDnsRecordRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteDnsRecordResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteDnsRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDnsRecordResponse) GoString() string {
	return s.String()
}

func (s *DeleteDnsRecordResponse) SetReqMsgId(v string) *DeleteDnsRecordResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteDnsRecordResponse) SetResultCode(v string) *DeleteDnsRecordResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteDnsRecordResponse) SetResultMsg(v string) *DeleteDnsRecordResponse {
	s.ResultMsg = &v
	return s
}

type QueryDnsRecordsetRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// resource_type
	ResourceType *string `json:"resource_type,omitempty" xml:"resource_type,omitempty"`
	// ip
	//
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
	// dns_recordset_name
	DnsRecordsetName *string `json:"dns_recordset_name,omitempty" xml:"dns_recordset_name,omitempty"`
	// resource_name
	ResourceName *string `json:"resource_name,omitempty" xml:"resource_name,omitempty"`
	// resource_iaas_ids
	ResourceIaasIds []*string `json:"resource_iaas_ids,omitempty" xml:"resource_iaas_ids,omitempty" type:"Repeated"`
	// dns_recordset_ids
	DnsRecordsetIds []*string `json:"dns_recordset_ids,omitempty" xml:"dns_recordset_ids,omitempty" type:"Repeated"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty" require:"true"`
}

func (s QueryDnsRecordsetRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDnsRecordsetRequest) GoString() string {
	return s.String()
}

func (s *QueryDnsRecordsetRequest) SetAuthToken(v string) *QueryDnsRecordsetRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDnsRecordsetRequest) SetWorkspaceId(v string) *QueryDnsRecordsetRequest {
	s.WorkspaceId = &v
	return s
}

func (s *QueryDnsRecordsetRequest) SetResourceType(v string) *QueryDnsRecordsetRequest {
	s.ResourceType = &v
	return s
}

func (s *QueryDnsRecordsetRequest) SetIp(v string) *QueryDnsRecordsetRequest {
	s.Ip = &v
	return s
}

func (s *QueryDnsRecordsetRequest) SetDnsRecordsetName(v string) *QueryDnsRecordsetRequest {
	s.DnsRecordsetName = &v
	return s
}

func (s *QueryDnsRecordsetRequest) SetResourceName(v string) *QueryDnsRecordsetRequest {
	s.ResourceName = &v
	return s
}

func (s *QueryDnsRecordsetRequest) SetResourceIaasIds(v []*string) *QueryDnsRecordsetRequest {
	s.ResourceIaasIds = v
	return s
}

func (s *QueryDnsRecordsetRequest) SetDnsRecordsetIds(v []*string) *QueryDnsRecordsetRequest {
	s.DnsRecordsetIds = v
	return s
}

func (s *QueryDnsRecordsetRequest) SetPageSize(v int64) *QueryDnsRecordsetRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDnsRecordsetRequest) SetCurrentPage(v int64) *QueryDnsRecordsetRequest {
	s.CurrentPage = &v
	return s
}

type QueryDnsRecordsetResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*WorkspaceDnsRecordset `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// total_count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// current_page
	CurrentPage *int64 `json:"current_page,omitempty" xml:"current_page,omitempty"`
}

func (s QueryDnsRecordsetResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDnsRecordsetResponse) GoString() string {
	return s.String()
}

func (s *QueryDnsRecordsetResponse) SetReqMsgId(v string) *QueryDnsRecordsetResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDnsRecordsetResponse) SetResultCode(v string) *QueryDnsRecordsetResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDnsRecordsetResponse) SetResultMsg(v string) *QueryDnsRecordsetResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDnsRecordsetResponse) SetData(v []*WorkspaceDnsRecordset) *QueryDnsRecordsetResponse {
	s.Data = v
	return s
}

func (s *QueryDnsRecordsetResponse) SetTotalCount(v int64) *QueryDnsRecordsetResponse {
	s.TotalCount = &v
	return s
}

func (s *QueryDnsRecordsetResponse) SetPageSize(v int64) *QueryDnsRecordsetResponse {
	s.PageSize = &v
	return s
}

func (s *QueryDnsRecordsetResponse) SetCurrentPage(v int64) *QueryDnsRecordsetResponse {
	s.CurrentPage = &v
	return s
}

type BindDnsProviderRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// 部分环境绑定到机房机房
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty"`
	// dns_provider_id
	DnsProviderId *string `json:"dns_provider_id,omitempty" xml:"dns_provider_id,omitempty" require:"true"`
	// default_sub_domain_name
	DefaultSubDomainName *string `json:"default_sub_domain_name,omitempty" xml:"default_sub_domain_name,omitempty"`
}

func (s BindDnsProviderRequest) String() string {
	return tea.Prettify(s)
}

func (s BindDnsProviderRequest) GoString() string {
	return s.String()
}

func (s *BindDnsProviderRequest) SetAuthToken(v string) *BindDnsProviderRequest {
	s.AuthToken = &v
	return s
}

func (s *BindDnsProviderRequest) SetWorkspaceId(v string) *BindDnsProviderRequest {
	s.WorkspaceId = &v
	return s
}

func (s *BindDnsProviderRequest) SetZoneId(v string) *BindDnsProviderRequest {
	s.ZoneId = &v
	return s
}

func (s *BindDnsProviderRequest) SetDnsProviderId(v string) *BindDnsProviderRequest {
	s.DnsProviderId = &v
	return s
}

func (s *BindDnsProviderRequest) SetDefaultSubDomainName(v string) *BindDnsProviderRequest {
	s.DefaultSubDomainName = &v
	return s
}

type BindDnsProviderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s BindDnsProviderResponse) String() string {
	return tea.Prettify(s)
}

func (s BindDnsProviderResponse) GoString() string {
	return s.String()
}

func (s *BindDnsProviderResponse) SetReqMsgId(v string) *BindDnsProviderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BindDnsProviderResponse) SetResultCode(v string) *BindDnsProviderResponse {
	s.ResultCode = &v
	return s
}

func (s *BindDnsProviderResponse) SetResultMsg(v string) *BindDnsProviderResponse {
	s.ResultMsg = &v
	return s
}

type ListDnsProviderRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// regionId
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty" require:"true"`
	// zone_id
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty"`
}

func (s ListDnsProviderRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDnsProviderRequest) GoString() string {
	return s.String()
}

func (s *ListDnsProviderRequest) SetAuthToken(v string) *ListDnsProviderRequest {
	s.AuthToken = &v
	return s
}

func (s *ListDnsProviderRequest) SetRegionId(v string) *ListDnsProviderRequest {
	s.RegionId = &v
	return s
}

func (s *ListDnsProviderRequest) SetZoneId(v string) *ListDnsProviderRequest {
	s.ZoneId = &v
	return s
}

type ListDnsProviderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*IaasDnsProvider `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListDnsProviderResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDnsProviderResponse) GoString() string {
	return s.String()
}

func (s *ListDnsProviderResponse) SetReqMsgId(v string) *ListDnsProviderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListDnsProviderResponse) SetResultCode(v string) *ListDnsProviderResponse {
	s.ResultCode = &v
	return s
}

func (s *ListDnsProviderResponse) SetResultMsg(v string) *ListDnsProviderResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListDnsProviderResponse) SetData(v []*IaasDnsProvider) *ListDnsProviderResponse {
	s.Data = v
	return s
}

type QueryProviderRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// LB，COMPUTE，VPC,OBJECT_STORAGE等
	ResourceType *string `json:"resource_type,omitempty" xml:"resource_type,omitempty" require:"true"`
	// paas_region_id
	PaasRegionId *string `json:"paas_region_id,omitempty" xml:"paas_region_id,omitempty" require:"true"`
}

func (s QueryProviderRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryProviderRequest) GoString() string {
	return s.String()
}

func (s *QueryProviderRequest) SetAuthToken(v string) *QueryProviderRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryProviderRequest) SetResourceType(v string) *QueryProviderRequest {
	s.ResourceType = &v
	return s
}

func (s *QueryProviderRequest) SetPaasRegionId(v string) *QueryProviderRequest {
	s.PaasRegionId = &v
	return s
}

type QueryProviderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*IaasConnMetadata `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryProviderResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryProviderResponse) GoString() string {
	return s.String()
}

func (s *QueryProviderResponse) SetReqMsgId(v string) *QueryProviderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryProviderResponse) SetResultCode(v string) *QueryProviderResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryProviderResponse) SetResultMsg(v string) *QueryProviderResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryProviderResponse) SetData(v []*IaasConnMetadata) *QueryProviderResponse {
	s.Data = v
	return s
}

type GetDnsWorkspaceproviderRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// zoneId
	ZoneId *string `json:"zone_id,omitempty" xml:"zone_id,omitempty"`
	// dns_network_type
	DnsNetworkType *string `json:"dns_network_type,omitempty" xml:"dns_network_type,omitempty" require:"true"`
}

func (s GetDnsWorkspaceproviderRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDnsWorkspaceproviderRequest) GoString() string {
	return s.String()
}

func (s *GetDnsWorkspaceproviderRequest) SetAuthToken(v string) *GetDnsWorkspaceproviderRequest {
	s.AuthToken = &v
	return s
}

func (s *GetDnsWorkspaceproviderRequest) SetWorkspaceId(v string) *GetDnsWorkspaceproviderRequest {
	s.WorkspaceId = &v
	return s
}

func (s *GetDnsWorkspaceproviderRequest) SetZoneId(v string) *GetDnsWorkspaceproviderRequest {
	s.ZoneId = &v
	return s
}

func (s *GetDnsWorkspaceproviderRequest) SetDnsNetworkType(v string) *GetDnsWorkspaceproviderRequest {
	s.DnsNetworkType = &v
	return s
}

type GetDnsWorkspaceproviderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*WorkspaceDnsProvider `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s GetDnsWorkspaceproviderResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDnsWorkspaceproviderResponse) GoString() string {
	return s.String()
}

func (s *GetDnsWorkspaceproviderResponse) SetReqMsgId(v string) *GetDnsWorkspaceproviderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetDnsWorkspaceproviderResponse) SetResultCode(v string) *GetDnsWorkspaceproviderResponse {
	s.ResultCode = &v
	return s
}

func (s *GetDnsWorkspaceproviderResponse) SetResultMsg(v string) *GetDnsWorkspaceproviderResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetDnsWorkspaceproviderResponse) SetData(v []*WorkspaceDnsProvider) *GetDnsWorkspaceproviderResponse {
	s.Data = v
	return s
}

type CreateUniworkspacegroupRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 工作空间组名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 显示名字，可以中文
	DisplayName *string `json:"display_name,omitempty" xml:"display_name,omitempty" require:"true"`
	// 租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// namespace
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
	// json格式的字符串，工作空间组属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// release_mode
	ReleaseMode *string `json:"release_mode,omitempty" xml:"release_mode,omitempty"`
	// 工作空间的名称
	Workspaces []*string `json:"workspaces,omitempty" xml:"workspaces,omitempty" require:"true" type:"Repeated"`
	// workspaces_create_param
	WorkspacesCreateParam []*string `json:"workspaces_create_param,omitempty" xml:"workspaces_create_param,omitempty" require:"true" type:"Repeated"`
	// cell_group_create_params
	CellGroupCreateParams []*string `json:"cell_group_create_params,omitempty" xml:"cell_group_create_params,omitempty" type:"Repeated"`
	// cell_create_params
	CellCreateParams []*string `json:"cell_create_params,omitempty" xml:"cell_create_params,omitempty" type:"Repeated"`
	// 域名前缀
	DomainSuffix *string `json:"domain_suffix,omitempty" xml:"domain_suffix,omitempty"`
	// VPC创建参数
	VpcCreateParams []*string `json:"vpc_create_params,omitempty" xml:"vpc_create_params,omitempty" require:"true" type:"Repeated"`
	// 导入的VPCIDs
	ImportVpcs []*string `json:"import_vpcs,omitempty" xml:"import_vpcs,omitempty" type:"Repeated"`
}

func (s CreateUniworkspacegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUniworkspacegroupRequest) GoString() string {
	return s.String()
}

func (s *CreateUniworkspacegroupRequest) SetAuthToken(v string) *CreateUniworkspacegroupRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateUniworkspacegroupRequest) SetName(v string) *CreateUniworkspacegroupRequest {
	s.Name = &v
	return s
}

func (s *CreateUniworkspacegroupRequest) SetDisplayName(v string) *CreateUniworkspacegroupRequest {
	s.DisplayName = &v
	return s
}

func (s *CreateUniworkspacegroupRequest) SetTenantId(v string) *CreateUniworkspacegroupRequest {
	s.TenantId = &v
	return s
}

func (s *CreateUniworkspacegroupRequest) SetNamespace(v string) *CreateUniworkspacegroupRequest {
	s.Namespace = &v
	return s
}

func (s *CreateUniworkspacegroupRequest) SetProperties(v string) *CreateUniworkspacegroupRequest {
	s.Properties = &v
	return s
}

func (s *CreateUniworkspacegroupRequest) SetReleaseMode(v string) *CreateUniworkspacegroupRequest {
	s.ReleaseMode = &v
	return s
}

func (s *CreateUniworkspacegroupRequest) SetWorkspaces(v []*string) *CreateUniworkspacegroupRequest {
	s.Workspaces = v
	return s
}

func (s *CreateUniworkspacegroupRequest) SetWorkspacesCreateParam(v []*string) *CreateUniworkspacegroupRequest {
	s.WorkspacesCreateParam = v
	return s
}

func (s *CreateUniworkspacegroupRequest) SetCellGroupCreateParams(v []*string) *CreateUniworkspacegroupRequest {
	s.CellGroupCreateParams = v
	return s
}

func (s *CreateUniworkspacegroupRequest) SetCellCreateParams(v []*string) *CreateUniworkspacegroupRequest {
	s.CellCreateParams = v
	return s
}

func (s *CreateUniworkspacegroupRequest) SetDomainSuffix(v string) *CreateUniworkspacegroupRequest {
	s.DomainSuffix = &v
	return s
}

func (s *CreateUniworkspacegroupRequest) SetVpcCreateParams(v []*string) *CreateUniworkspacegroupRequest {
	s.VpcCreateParams = v
	return s
}

func (s *CreateUniworkspacegroupRequest) SetImportVpcs(v []*string) *CreateUniworkspacegroupRequest {
	s.ImportVpcs = v
	return s
}

type CreateUniworkspacegroupResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// paas_request_id，异步任务ID
	PaasRequestId *string `json:"paas_request_id,omitempty" xml:"paas_request_id,omitempty"`
}

func (s CreateUniworkspacegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUniworkspacegroupResponse) GoString() string {
	return s.String()
}

func (s *CreateUniworkspacegroupResponse) SetReqMsgId(v string) *CreateUniworkspacegroupResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateUniworkspacegroupResponse) SetResultCode(v string) *CreateUniworkspacegroupResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateUniworkspacegroupResponse) SetResultMsg(v string) *CreateUniworkspacegroupResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateUniworkspacegroupResponse) SetPaasRequestId(v string) *CreateUniworkspacegroupResponse {
	s.PaasRequestId = &v
	return s
}

type ImportMiddlewareclusterRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// cluster_id，OSP上的ID
	ClusterId *string `json:"cluster_id,omitempty" xml:"cluster_id,omitempty" require:"true"`
}

func (s ImportMiddlewareclusterRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportMiddlewareclusterRequest) GoString() string {
	return s.String()
}

func (s *ImportMiddlewareclusterRequest) SetAuthToken(v string) *ImportMiddlewareclusterRequest {
	s.AuthToken = &v
	return s
}

func (s *ImportMiddlewareclusterRequest) SetWorkspaceId(v string) *ImportMiddlewareclusterRequest {
	s.WorkspaceId = &v
	return s
}

func (s *ImportMiddlewareclusterRequest) SetClusterId(v string) *ImportMiddlewareclusterRequest {
	s.ClusterId = &v
	return s
}

type ImportMiddlewareclusterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ImportMiddlewareclusterResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportMiddlewareclusterResponse) GoString() string {
	return s.String()
}

func (s *ImportMiddlewareclusterResponse) SetReqMsgId(v string) *ImportMiddlewareclusterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ImportMiddlewareclusterResponse) SetResultCode(v string) *ImportMiddlewareclusterResponse {
	s.ResultCode = &v
	return s
}

func (s *ImportMiddlewareclusterResponse) SetResultMsg(v string) *ImportMiddlewareclusterResponse {
	s.ResultMsg = &v
	return s
}

type QueryMiddlewareclusterRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_id 和workspace_group_id至少要填一个
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty"`
	// cluster_id OSP上的ID
	ClusterId *string `json:"cluster_id,omitempty" xml:"cluster_id,omitempty"`
	// cluster_name
	ClusterName *string `json:"cluster_name,omitempty" xml:"cluster_name,omitempty"`
	// workspace_group_name和workspace_id必须至少传入一个
	WorkspaceGroupName *string `json:"workspace_group_name,omitempty" xml:"workspace_group_name,omitempty"`
	// app_service_id
	AppServiceId *string `json:"app_service_id,omitempty" xml:"app_service_id,omitempty"`
}

func (s QueryMiddlewareclusterRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMiddlewareclusterRequest) GoString() string {
	return s.String()
}

func (s *QueryMiddlewareclusterRequest) SetAuthToken(v string) *QueryMiddlewareclusterRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryMiddlewareclusterRequest) SetWorkspaceId(v string) *QueryMiddlewareclusterRequest {
	s.WorkspaceId = &v
	return s
}

func (s *QueryMiddlewareclusterRequest) SetClusterId(v string) *QueryMiddlewareclusterRequest {
	s.ClusterId = &v
	return s
}

func (s *QueryMiddlewareclusterRequest) SetClusterName(v string) *QueryMiddlewareclusterRequest {
	s.ClusterName = &v
	return s
}

func (s *QueryMiddlewareclusterRequest) SetWorkspaceGroupName(v string) *QueryMiddlewareclusterRequest {
	s.WorkspaceGroupName = &v
	return s
}

func (s *QueryMiddlewareclusterRequest) SetAppServiceId(v string) *QueryMiddlewareclusterRequest {
	s.AppServiceId = &v
	return s
}

type QueryMiddlewareclusterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*MiddlewareClusterInstance `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryMiddlewareclusterResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMiddlewareclusterResponse) GoString() string {
	return s.String()
}

func (s *QueryMiddlewareclusterResponse) SetReqMsgId(v string) *QueryMiddlewareclusterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryMiddlewareclusterResponse) SetResultCode(v string) *QueryMiddlewareclusterResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryMiddlewareclusterResponse) SetResultMsg(v string) *QueryMiddlewareclusterResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryMiddlewareclusterResponse) SetData(v []*MiddlewareClusterInstance) *QueryMiddlewareclusterResponse {
	s.Data = v
	return s
}

type RemoveMiddlewareclusterRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// workspace_id
	WorkspaceId *string `json:"workspace_id,omitempty" xml:"workspace_id,omitempty" require:"true"`
	// cluster_id
	ClusterId *string `json:"cluster_id,omitempty" xml:"cluster_id,omitempty" require:"true"`
}

func (s RemoveMiddlewareclusterRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveMiddlewareclusterRequest) GoString() string {
	return s.String()
}

func (s *RemoveMiddlewareclusterRequest) SetAuthToken(v string) *RemoveMiddlewareclusterRequest {
	s.AuthToken = &v
	return s
}

func (s *RemoveMiddlewareclusterRequest) SetWorkspaceId(v string) *RemoveMiddlewareclusterRequest {
	s.WorkspaceId = &v
	return s
}

func (s *RemoveMiddlewareclusterRequest) SetClusterId(v string) *RemoveMiddlewareclusterRequest {
	s.ClusterId = &v
	return s
}

type RemoveMiddlewareclusterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s RemoveMiddlewareclusterResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveMiddlewareclusterResponse) GoString() string {
	return s.String()
}

func (s *RemoveMiddlewareclusterResponse) SetReqMsgId(v string) *RemoveMiddlewareclusterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RemoveMiddlewareclusterResponse) SetResultCode(v string) *RemoveMiddlewareclusterResponse {
	s.ResultCode = &v
	return s
}

func (s *RemoveMiddlewareclusterResponse) SetResultMsg(v string) *RemoveMiddlewareclusterResponse {
	s.ResultMsg = &v
	return s
}

type QueryQuotaInstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// quota类的ID，请使用Quota API查询获取
	QuotaId *string `json:"quota_id,omitempty" xml:"quota_id,omitempty"`
	// 接入配额的时候,在配额中注册的资源标识
	ResourceIdentity *string `json:"resource_identity,omitempty" xml:"resource_identity,omitempty"`
	// 当状态为INFINITE,即无限大.当状态为INFINITESIMAL时,即为无限小
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 上限值
	HardLimit *int64 `json:"hard_limit,omitempty" xml:"hard_limit,omitempty"`
	// in_use
	InUse *int64 `json:"in_use,omitempty" xml:"in_use,omitempty"`
	// 维度实例组合ID
	DimInstanceGroupId *string `json:"dim_instance_group_id,omitempty" xml:"dim_instance_group_id,omitempty"`
	// page_number
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty" require:"true"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 维度标记
	DimIdentity *string `json:"dim_identity,omitempty" xml:"dim_identity,omitempty"`
	// 维度的值
	DimInsValue *string `json:"dim_ins_value,omitempty" xml:"dim_ins_value,omitempty"`
}

func (s QueryQuotaInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryQuotaInstanceRequest) GoString() string {
	return s.String()
}

func (s *QueryQuotaInstanceRequest) SetAuthToken(v string) *QueryQuotaInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryQuotaInstanceRequest) SetQuotaId(v string) *QueryQuotaInstanceRequest {
	s.QuotaId = &v
	return s
}

func (s *QueryQuotaInstanceRequest) SetResourceIdentity(v string) *QueryQuotaInstanceRequest {
	s.ResourceIdentity = &v
	return s
}

func (s *QueryQuotaInstanceRequest) SetStatus(v string) *QueryQuotaInstanceRequest {
	s.Status = &v
	return s
}

func (s *QueryQuotaInstanceRequest) SetHardLimit(v int64) *QueryQuotaInstanceRequest {
	s.HardLimit = &v
	return s
}

func (s *QueryQuotaInstanceRequest) SetInUse(v int64) *QueryQuotaInstanceRequest {
	s.InUse = &v
	return s
}

func (s *QueryQuotaInstanceRequest) SetDimInstanceGroupId(v string) *QueryQuotaInstanceRequest {
	s.DimInstanceGroupId = &v
	return s
}

func (s *QueryQuotaInstanceRequest) SetPageNumber(v int64) *QueryQuotaInstanceRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryQuotaInstanceRequest) SetPageSize(v int64) *QueryQuotaInstanceRequest {
	s.PageSize = &v
	return s
}

func (s *QueryQuotaInstanceRequest) SetDimIdentity(v string) *QueryQuotaInstanceRequest {
	s.DimIdentity = &v
	return s
}

func (s *QueryQuotaInstanceRequest) SetDimInsValue(v string) *QueryQuotaInstanceRequest {
	s.DimInsValue = &v
	return s
}

type QueryQuotaInstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回值
	Data []*SingleDimGroupQuotaInstance `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// total_count
	TotalCount *int64 `json:"total_count,omitempty" xml:"total_count,omitempty"`
	// page_number
	PageNumber *int64 `json:"page_number,omitempty" xml:"page_number,omitempty"`
	// page_size
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s QueryQuotaInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryQuotaInstanceResponse) GoString() string {
	return s.String()
}

func (s *QueryQuotaInstanceResponse) SetReqMsgId(v string) *QueryQuotaInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryQuotaInstanceResponse) SetResultCode(v string) *QueryQuotaInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryQuotaInstanceResponse) SetResultMsg(v string) *QueryQuotaInstanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryQuotaInstanceResponse) SetData(v []*SingleDimGroupQuotaInstance) *QueryQuotaInstanceResponse {
	s.Data = v
	return s
}

func (s *QueryQuotaInstanceResponse) SetTotalCount(v int64) *QueryQuotaInstanceResponse {
	s.TotalCount = &v
	return s
}

func (s *QueryQuotaInstanceResponse) SetPageNumber(v int64) *QueryQuotaInstanceResponse {
	s.PageNumber = &v
	return s
}

func (s *QueryQuotaInstanceResponse) SetPageSize(v int64) *QueryQuotaInstanceResponse {
	s.PageSize = &v
	return s
}

type QuerySingledimquotaInstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// single_dim_groups
	SingleDimGroups []*SingleDimGroup `json:"single_dim_groups,omitempty" xml:"single_dim_groups,omitempty" require:"true" type:"Repeated"`
}

func (s QuerySingledimquotaInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySingledimquotaInstanceRequest) GoString() string {
	return s.String()
}

func (s *QuerySingledimquotaInstanceRequest) SetAuthToken(v string) *QuerySingledimquotaInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySingledimquotaInstanceRequest) SetSingleDimGroups(v []*SingleDimGroup) *QuerySingledimquotaInstanceRequest {
	s.SingleDimGroups = v
	return s
}

type QuerySingledimquotaInstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回值
	Data []*SingleDimGroupQuotaInstance `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QuerySingledimquotaInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySingledimquotaInstanceResponse) GoString() string {
	return s.String()
}

func (s *QuerySingledimquotaInstanceResponse) SetReqMsgId(v string) *QuerySingledimquotaInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySingledimquotaInstanceResponse) SetResultCode(v string) *QuerySingledimquotaInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySingledimquotaInstanceResponse) SetResultMsg(v string) *QuerySingledimquotaInstanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySingledimquotaInstanceResponse) SetData(v []*SingleDimGroupQuotaInstance) *QuerySingledimquotaInstanceResponse {
	s.Data = v
	return s
}

type QueryQuotaRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	//  维度标识, 可选
	DimIdentity *string `json:"dim_identity,omitempty" xml:"dim_identity,omitempty"`
	// resource_identity
	ResourceIdentity *string `json:"resource_identity,omitempty" xml:"resource_identity,omitempty"`
}

func (s QueryQuotaRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryQuotaRequest) GoString() string {
	return s.String()
}

func (s *QueryQuotaRequest) SetAuthToken(v string) *QueryQuotaRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryQuotaRequest) SetDimIdentity(v string) *QueryQuotaRequest {
	s.DimIdentity = &v
	return s
}

func (s *QueryQuotaRequest) SetResourceIdentity(v string) *QueryQuotaRequest {
	s.ResourceIdentity = &v
	return s
}

type QueryQuotaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*SingleDimGroupQuota `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryQuotaResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryQuotaResponse) GoString() string {
	return s.String()
}

func (s *QueryQuotaResponse) SetReqMsgId(v string) *QueryQuotaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryQuotaResponse) SetResultCode(v string) *QueryQuotaResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryQuotaResponse) SetResultMsg(v string) *QueryQuotaResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryQuotaResponse) SetData(v []*SingleDimGroupQuota) *QueryQuotaResponse {
	s.Data = v
	return s
}

type CreateQuotaRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 维度标记
	DimIdentity *string `json:"dim_identity,omitempty" xml:"dim_identity,omitempty" require:"true"`
	// resource
	Resource *string `json:"resource,omitempty" xml:"resource,omitempty" require:"true"`
	// 额度值，实际值还需要乘上quota_factor
	HardLimit *int64 `json:"hard_limit,omitempty" xml:"hard_limit,omitempty" require:"true"`
	// 同步资源用
	SyncInterface *string `json:"sync_interface,omitempty" xml:"sync_interface,omitempty"`
	// 关于配额的描述信息
	QuotaDesc *string `json:"quota_desc,omitempty" xml:"quota_desc,omitempty"`
	// 由于OP不支持浮点数，请用字符串表示浮点数，比如”0.1“-带双引号
	QuotaFactor *string `json:"quota_factor,omitempty" xml:"quota_factor,omitempty"`
}

func (s CreateQuotaRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateQuotaRequest) GoString() string {
	return s.String()
}

func (s *CreateQuotaRequest) SetAuthToken(v string) *CreateQuotaRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateQuotaRequest) SetDimIdentity(v string) *CreateQuotaRequest {
	s.DimIdentity = &v
	return s
}

func (s *CreateQuotaRequest) SetResource(v string) *CreateQuotaRequest {
	s.Resource = &v
	return s
}

func (s *CreateQuotaRequest) SetHardLimit(v int64) *CreateQuotaRequest {
	s.HardLimit = &v
	return s
}

func (s *CreateQuotaRequest) SetSyncInterface(v string) *CreateQuotaRequest {
	s.SyncInterface = &v
	return s
}

func (s *CreateQuotaRequest) SetQuotaDesc(v string) *CreateQuotaRequest {
	s.QuotaDesc = &v
	return s
}

func (s *CreateQuotaRequest) SetQuotaFactor(v string) *CreateQuotaRequest {
	s.QuotaFactor = &v
	return s
}

type CreateQuotaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// ID，用于后续删除更新操作
	QuotaId *string `json:"quota_id,omitempty" xml:"quota_id,omitempty"`
}

func (s CreateQuotaResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateQuotaResponse) GoString() string {
	return s.String()
}

func (s *CreateQuotaResponse) SetReqMsgId(v string) *CreateQuotaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateQuotaResponse) SetResultCode(v string) *CreateQuotaResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateQuotaResponse) SetResultMsg(v string) *CreateQuotaResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateQuotaResponse) SetQuotaId(v string) *CreateQuotaResponse {
	s.QuotaId = &v
	return s
}

type UpdateQuotaRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 从Query接口找到此ID
	QuotaId *string `json:"quota_id,omitempty" xml:"quota_id,omitempty" require:"true"`
	// 额度，不更新请保持原值，不要留空
	HardLimit *int64 `json:"hard_limit,omitempty" xml:"hard_limit,omitempty" require:"true"`
}

func (s UpdateQuotaRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateQuotaRequest) GoString() string {
	return s.String()
}

func (s *UpdateQuotaRequest) SetAuthToken(v string) *UpdateQuotaRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateQuotaRequest) SetQuotaId(v string) *UpdateQuotaRequest {
	s.QuotaId = &v
	return s
}

func (s *UpdateQuotaRequest) SetHardLimit(v int64) *UpdateQuotaRequest {
	s.HardLimit = &v
	return s
}

type UpdateQuotaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateQuotaResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateQuotaResponse) GoString() string {
	return s.String()
}

func (s *UpdateQuotaResponse) SetReqMsgId(v string) *UpdateQuotaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateQuotaResponse) SetResultCode(v string) *UpdateQuotaResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateQuotaResponse) SetResultMsg(v string) *UpdateQuotaResponse {
	s.ResultMsg = &v
	return s
}

type FindcreateQuotaInstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// single_dim_groups
	SingleDimGroups []*SingleDimGroup `json:"single_dim_groups,omitempty" xml:"single_dim_groups,omitempty" require:"true" type:"Repeated"`
}

func (s FindcreateQuotaInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s FindcreateQuotaInstanceRequest) GoString() string {
	return s.String()
}

func (s *FindcreateQuotaInstanceRequest) SetAuthToken(v string) *FindcreateQuotaInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *FindcreateQuotaInstanceRequest) SetSingleDimGroups(v []*SingleDimGroup) *FindcreateQuotaInstanceRequest {
	s.SingleDimGroups = v
	return s
}

type FindcreateQuotaInstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*SingleDimGroupQuotaInstance `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s FindcreateQuotaInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s FindcreateQuotaInstanceResponse) GoString() string {
	return s.String()
}

func (s *FindcreateQuotaInstanceResponse) SetReqMsgId(v string) *FindcreateQuotaInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *FindcreateQuotaInstanceResponse) SetResultCode(v string) *FindcreateQuotaInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *FindcreateQuotaInstanceResponse) SetResultMsg(v string) *FindcreateQuotaInstanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *FindcreateQuotaInstanceResponse) SetData(v []*SingleDimGroupQuotaInstance) *FindcreateQuotaInstanceResponse {
	s.Data = v
	return s
}

type UpdateQuotaInstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// params
	Params []*SingleDimGroupQuota `json:"params,omitempty" xml:"params,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateQuotaInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateQuotaInstanceRequest) GoString() string {
	return s.String()
}

func (s *UpdateQuotaInstanceRequest) SetAuthToken(v string) *UpdateQuotaInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateQuotaInstanceRequest) SetParams(v []*SingleDimGroupQuota) *UpdateQuotaInstanceRequest {
	s.Params = v
	return s
}

type UpdateQuotaInstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateQuotaInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateQuotaInstanceResponse) GoString() string {
	return s.String()
}

func (s *UpdateQuotaInstanceResponse) SetReqMsgId(v string) *UpdateQuotaInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateQuotaInstanceResponse) SetResultCode(v string) *UpdateQuotaInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateQuotaInstanceResponse) SetResultMsg(v string) *UpdateQuotaInstanceResponse {
	s.ResultMsg = &v
	return s
}

type CheckQuotaRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 检查的值
	DimGroups []*SingleDimGroup `json:"dim_groups,omitempty" xml:"dim_groups,omitempty" require:"true" type:"Repeated"`
}

func (s CheckQuotaRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckQuotaRequest) GoString() string {
	return s.String()
}

func (s *CheckQuotaRequest) SetAuthToken(v string) *CheckQuotaRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckQuotaRequest) SetDimGroups(v []*SingleDimGroup) *CheckQuotaRequest {
	s.DimGroups = v
	return s
}

type CheckQuotaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是够超额
	QuotaExceed *bool `json:"quota_exceed,omitempty" xml:"quota_exceed,omitempty"`
	// quota实例ID
	QuotaInsId *string `json:"quota_ins_id,omitempty" xml:"quota_ins_id,omitempty"`
	// dim_identity
	DimIdentity *string `json:"dim_identity,omitempty" xml:"dim_identity,omitempty"`
	// 维度值
	DimInsValue *string `json:"dim_ins_value,omitempty" xml:"dim_ins_value,omitempty"`
	// resource
	Resource *string `json:"resource,omitempty" xml:"resource,omitempty"`
	// 申请的资源的数量
	Count *int64 `json:"count,omitempty" xml:"count,omitempty"`
	// 当前剩余的量
	Remain *int64 `json:"remain,omitempty" xml:"remain,omitempty"`
}

func (s CheckQuotaResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckQuotaResponse) GoString() string {
	return s.String()
}

func (s *CheckQuotaResponse) SetReqMsgId(v string) *CheckQuotaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckQuotaResponse) SetResultCode(v string) *CheckQuotaResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckQuotaResponse) SetResultMsg(v string) *CheckQuotaResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckQuotaResponse) SetQuotaExceed(v bool) *CheckQuotaResponse {
	s.QuotaExceed = &v
	return s
}

func (s *CheckQuotaResponse) SetQuotaInsId(v string) *CheckQuotaResponse {
	s.QuotaInsId = &v
	return s
}

func (s *CheckQuotaResponse) SetDimIdentity(v string) *CheckQuotaResponse {
	s.DimIdentity = &v
	return s
}

func (s *CheckQuotaResponse) SetDimInsValue(v string) *CheckQuotaResponse {
	s.DimInsValue = &v
	return s
}

func (s *CheckQuotaResponse) SetResource(v string) *CheckQuotaResponse {
	s.Resource = &v
	return s
}

func (s *CheckQuotaResponse) SetCount(v int64) *CheckQuotaResponse {
	s.Count = &v
	return s
}

func (s *CheckQuotaResponse) SetRemain(v int64) *CheckQuotaResponse {
	s.Remain = &v
	return s
}

type OpenTokenRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// 申请事项，描述一个事情即可，
	Action *string `json:"action,omitempty" xml:"action,omitempty" require:"true"`
	// 单位为秒
	Timeout *int64 `json:"timeout,omitempty" xml:"timeout,omitempty"`
	// 额外的描述信息
	Options []*MapStringToStringEntity `json:"options,omitempty" xml:"options,omitempty" type:"Repeated"`
	// 此Token用途API对应的入参，应该是一个简单Object
	Param *string `json:"param,omitempty" xml:"param,omitempty" require:"true"`
}

func (s OpenTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenTokenRequest) GoString() string {
	return s.String()
}

func (s *OpenTokenRequest) SetAuthToken(v string) *OpenTokenRequest {
	s.AuthToken = &v
	return s
}

func (s *OpenTokenRequest) SetAction(v string) *OpenTokenRequest {
	s.Action = &v
	return s
}

func (s *OpenTokenRequest) SetTimeout(v int64) *OpenTokenRequest {
	s.Timeout = &v
	return s
}

func (s *OpenTokenRequest) SetOptions(v []*MapStringToStringEntity) *OpenTokenRequest {
	s.Options = v
	return s
}

func (s *OpenTokenRequest) SetParam(v string) *OpenTokenRequest {
	s.Param = &v
	return s
}

type OpenTokenResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// dddd
	Token *string `json:"token,omitempty" xml:"token,omitempty"`
}

func (s OpenTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenTokenResponse) GoString() string {
	return s.String()
}

func (s *OpenTokenResponse) SetReqMsgId(v string) *OpenTokenResponse {
	s.ReqMsgId = &v
	return s
}

func (s *OpenTokenResponse) SetResultCode(v string) *OpenTokenResponse {
	s.ResultCode = &v
	return s
}

func (s *OpenTokenResponse) SetResultMsg(v string) *OpenTokenResponse {
	s.ResultMsg = &v
	return s
}

func (s *OpenTokenResponse) SetToken(v string) *OpenTokenResponse {
	s.Token = &v
	return s
}

type SyncQuotaInstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// quota_instance_ids，从quota.instance.query返回
	QuotaInstanceIds []*string `json:"quota_instance_ids,omitempty" xml:"quota_instance_ids,omitempty" require:"true" type:"Repeated"`
}

func (s SyncQuotaInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s SyncQuotaInstanceRequest) GoString() string {
	return s.String()
}

func (s *SyncQuotaInstanceRequest) SetAuthToken(v string) *SyncQuotaInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *SyncQuotaInstanceRequest) SetQuotaInstanceIds(v []*string) *SyncQuotaInstanceRequest {
	s.QuotaInstanceIds = v
	return s
}

type SyncQuotaInstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 依次返回成功与否
	Data []*bool `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s SyncQuotaInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s SyncQuotaInstanceResponse) GoString() string {
	return s.String()
}

func (s *SyncQuotaInstanceResponse) SetReqMsgId(v string) *SyncQuotaInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SyncQuotaInstanceResponse) SetResultCode(v string) *SyncQuotaInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *SyncQuotaInstanceResponse) SetResultMsg(v string) *SyncQuotaInstanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *SyncQuotaInstanceResponse) SetData(v []*bool) *SyncQuotaInstanceResponse {
	s.Data = v
	return s
}

type UpdateFeatureRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// feature_id
	Id *string `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 可以序列化成Map的Json字符串
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// 详情参考 https://velocity.apache.org/engine/
	ConditionalContent *string `json:"conditional_content,omitempty" xml:"conditional_content,omitempty"`
}

func (s UpdateFeatureRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFeatureRequest) GoString() string {
	return s.String()
}

func (s *UpdateFeatureRequest) SetAuthToken(v string) *UpdateFeatureRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateFeatureRequest) SetId(v string) *UpdateFeatureRequest {
	s.Id = &v
	return s
}

func (s *UpdateFeatureRequest) SetContent(v string) *UpdateFeatureRequest {
	s.Content = &v
	return s
}

func (s *UpdateFeatureRequest) SetConditionalContent(v string) *UpdateFeatureRequest {
	s.ConditionalContent = &v
	return s
}

type UpdateFeatureResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateFeatureResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFeatureResponse) GoString() string {
	return s.String()
}

func (s *UpdateFeatureResponse) SetReqMsgId(v string) *UpdateFeatureResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateFeatureResponse) SetResultCode(v string) *UpdateFeatureResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateFeatureResponse) SetResultMsg(v string) *UpdateFeatureResponse {
	s.ResultMsg = &v
	return s
}

type ListFeatureRequest struct {
	// OAuth模式下的授权token
	AuthToken *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	// region_id
	RegionId *string `json:"region_id,omitempty" xml:"region_id,omitempty" require:"true"`
	// feature_name
	FeatureName *string `json:"feature_name,omitempty" xml:"feature_name,omitempty"`
}

func (s ListFeatureRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFeatureRequest) GoString() string {
	return s.String()
}

func (s *ListFeatureRequest) SetAuthToken(v string) *ListFeatureRequest {
	s.AuthToken = &v
	return s
}

func (s *ListFeatureRequest) SetRegionId(v string) *ListFeatureRequest {
	s.RegionId = &v
	return s
}

func (s *ListFeatureRequest) SetFeatureName(v string) *ListFeatureRequest {
	s.FeatureName = &v
	return s
}

type ListFeatureResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// data
	Data []*Feature `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListFeatureResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFeatureResponse) GoString() string {
	return s.String()
}

func (s *ListFeatureResponse) SetReqMsgId(v string) *ListFeatureResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListFeatureResponse) SetResultCode(v string) *ListFeatureResponse {
	s.ResultCode = &v
	return s
}

func (s *ListFeatureResponse) SetResultMsg(v string) *ListFeatureResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListFeatureResponse) SetData(v []*Feature) *ListFeatureResponse {
	s.Data = v
	return s
}

type Client struct {
	Endpoint                *string
	RegionId                *string
	AccessKeyId             *string
	AccessKeySecret         *string
	Protocol                *string
	UserAgent               *string
	ReadTimeout             *int
	ConnectTimeout          *int
	HttpProxy               *string
	HttpsProxy              *string
	Socks5Proxy             *string
	Socks5NetWork           *string
	NoProxy                 *string
	MaxIdleConns            *int
	SecurityToken           *string
	MaxIdleTimeMillis       *int
	KeepAliveDurationMillis *int
	MaxRequests             *int
	MaxRequestsPerHost      *int
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
func NewClient(config *Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *Config) (_err error) {
	if tea.BoolValue(util.IsUnset(tea.ToMap(config))) {
		_err = tea.NewSDKError(map[string]interface{}{
			"code":    "ParameterMissing",
			"message": "'config' can not be unset",
		})
		return _err
	}

	client.AccessKeyId = config.AccessKeyId
	client.AccessKeySecret = config.AccessKeySecret
	client.SecurityToken = config.SecurityToken
	client.Endpoint = config.Endpoint
	client.Protocol = config.Protocol
	client.UserAgent = config.UserAgent
	client.ReadTimeout = util.DefaultNumber(config.ReadTimeout, tea.Int(20000))
	client.ConnectTimeout = util.DefaultNumber(config.ConnectTimeout, tea.Int(20000))
	client.HttpProxy = config.HttpProxy
	client.HttpsProxy = config.HttpsProxy
	client.NoProxy = config.NoProxy
	client.Socks5Proxy = config.Socks5Proxy
	client.Socks5NetWork = config.Socks5NetWork
	client.MaxIdleConns = util.DefaultNumber(config.MaxIdleConns, tea.Int(60000))
	client.MaxIdleTimeMillis = util.DefaultNumber(config.MaxIdleTimeMillis, tea.Int(5))
	client.KeepAliveDurationMillis = util.DefaultNumber(config.KeepAliveDurationMillis, tea.Int(5000))
	client.MaxRequests = util.DefaultNumber(config.MaxRequests, tea.Int(100))
	client.MaxRequestsPerHost = util.DefaultNumber(config.MaxRequestsPerHost, tea.Int(100))
	return nil
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
func (client *Client) DoRequest(version *string, action *string, protocol *string, method *string, pathname *string, request map[string]interface{}, headers map[string]*string, runtime *util.RuntimeOptions) (_result map[string]interface{}, _err error) {
	_err = tea.Validate(runtime)
	if _err != nil {
		return _result, _err
	}
	_runtime := map[string]interface{}{
		"timeouted":               "retry",
		"readTimeout":             tea.IntValue(util.DefaultNumber(runtime.ReadTimeout, client.ReadTimeout)),
		"connectTimeout":          tea.IntValue(util.DefaultNumber(runtime.ConnectTimeout, client.ConnectTimeout)),
		"httpProxy":               tea.StringValue(util.DefaultString(runtime.HttpProxy, client.HttpProxy)),
		"httpsProxy":              tea.StringValue(util.DefaultString(runtime.HttpsProxy, client.HttpsProxy)),
		"noProxy":                 tea.StringValue(util.DefaultString(runtime.NoProxy, client.NoProxy)),
		"maxIdleConns":            tea.IntValue(util.DefaultNumber(runtime.MaxIdleConns, client.MaxIdleConns)),
		"maxIdleTimeMillis":       tea.IntValue(client.MaxIdleTimeMillis),
		"keepAliveDurationMillis": tea.IntValue(client.KeepAliveDurationMillis),
		"maxRequests":             tea.IntValue(client.MaxRequests),
		"maxRequestsPerHost":      tea.IntValue(client.MaxRequestsPerHost),
		"retry": map[string]interface{}{
			"retryable":   tea.BoolValue(runtime.Autoretry),
			"maxAttempts": tea.IntValue(util.DefaultNumber(runtime.MaxAttempts, tea.Int(3))),
		},
		"backoff": map[string]interface{}{
			"policy": tea.StringValue(util.DefaultString(runtime.BackoffPolicy, tea.String("no"))),
			"period": tea.IntValue(util.DefaultNumber(runtime.BackoffPeriod, tea.Int(1))),
		},
		"ignoreSSL": tea.BoolValue(runtime.IgnoreSSL),
	}

	_resp := make(map[string]interface{})
	for _retryTimes := 0; tea.BoolValue(tea.AllowRetry(_runtime["retry"], tea.Int(_retryTimes))); _retryTimes++ {
		if _retryTimes > 0 {
			_backoffTime := tea.GetBackoffTime(_runtime["backoff"], tea.Int(_retryTimes))
			if tea.IntValue(_backoffTime) > 0 {
				tea.Sleep(_backoffTime)
			}
		}

		_resp, _err = func() (map[string]interface{}, error) {
			request_ := tea.NewRequest()
			request_.Protocol = util.DefaultString(client.Protocol, protocol)
			request_.Method = method
			request_.Pathname = pathname
			request_.Query = map[string]*string{
				"method":           action,
				"version":          version,
				"sign_type":        tea.String("HmacSHA1"),
				"req_time":         antchainutil.GetTimestamp(),
				"req_msg_id":       antchainutil.GetNonce(),
				"access_key":       client.AccessKeyId,
				"base_sdk_version": tea.String("TeaSDK-2.0"),
				"sdk_version":      tea.String("1.4.58"),
			}
			if !tea.BoolValue(util.Empty(client.SecurityToken)) {
				request_.Query["security_token"] = client.SecurityToken
			}

			request_.Headers = tea.Merge(map[string]*string{
				"host":       util.DefaultString(client.Endpoint, tea.String("openapi.antchain.antgroup.com")),
				"user-agent": util.GetUserAgent(client.UserAgent),
			}, headers)
			tmp := util.AnyifyMapValue(rpcutil.Query(request))
			request_.Body = tea.ToReader(util.ToFormString(tmp))
			request_.Headers["content-type"] = tea.String("application/x-www-form-urlencoded")
			signedParam := tea.Merge(request_.Query,
				rpcutil.Query(request))
			request_.Query["sign"] = antchainutil.GetSignature(signedParam, client.AccessKeySecret)
			response_, _err := tea.DoRequest(request_, _runtime)
			if _err != nil {
				return _result, _err
			}
			raw, _err := util.ReadAsString(response_.Body)
			if _err != nil {
				return _result, _err
			}

			obj := util.ParseJSON(raw)
			res, _err := util.AssertAsMap(obj)
			if _err != nil {
				return _result, _err
			}

			resp, _err := util.AssertAsMap(res["response"])
			if _err != nil {
				return _result, _err
			}

			if tea.BoolValue(antchainutil.HasError(raw, client.AccessKeySecret)) {
				_err = tea.NewSDKError(map[string]interface{}{
					"message": resp["result_msg"],
					"data":    resp,
					"code":    resp["result_code"],
				})
				return _result, _err
			}

			_result = resp
			return _result, _err
		}()
		if !tea.BoolValue(tea.Retryable(_err)) {
			break
		}
	}

	return _resp, _err
}

/**
 * Description: 批量删除构建记录
 * Summary: 批量删除构建记录
 */
func (client *Client) BatchdeleteApplicationBuild(request *BatchdeleteApplicationBuildRequest) (_result *BatchdeleteApplicationBuildResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchdeleteApplicationBuildResponse{}
	_body, _err := client.BatchdeleteApplicationBuildEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量删除构建记录
 * Summary: 批量删除构建记录
 */
func (client *Client) BatchdeleteApplicationBuildEx(request *BatchdeleteApplicationBuildRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchdeleteApplicationBuildResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchdeleteApplicationBuildResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.application.build.batchdelete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量查询应用明细
 * Summary: 批量查询应用明细
 */
func (client *Client) ListApplicationManifest(request *ListApplicationManifestRequest) (_result *ListApplicationManifestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListApplicationManifestResponse{}
	_body, _err := client.ListApplicationManifestEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量查询应用明细
 * Summary: 批量查询应用明细
 */
func (client *Client) ListApplicationManifestEx(request *ListApplicationManifestRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListApplicationManifestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListApplicationManifestResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.application.manifest.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量删除应用发布包
 * Summary: 批量删除应用发布包
 */
func (client *Client) BatchdeleteApplicationPackage(request *BatchdeleteApplicationPackageRequest) (_result *BatchdeleteApplicationPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchdeleteApplicationPackageResponse{}
	_body, _err := client.BatchdeleteApplicationPackageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量删除应用发布包
 * Summary: 批量删除应用发布包
 */
func (client *Client) BatchdeleteApplicationPackageEx(request *BatchdeleteApplicationPackageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchdeleteApplicationPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchdeleteApplicationPackageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.application.package.batchdelete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建应用发布包
 * Summary: 创建应用发布包
 */
func (client *Client) CreateApplicationPackage(request *CreateApplicationPackageRequest) (_result *CreateApplicationPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateApplicationPackageResponse{}
	_body, _err := client.CreateApplicationPackageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建应用发布包
 * Summary: 创建应用发布包
 */
func (client *Client) CreateApplicationPackageEx(request *CreateApplicationPackageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateApplicationPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateApplicationPackageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.application.package.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除应用发布包
 * Summary: 删除应用发布包
 */
func (client *Client) DeleteApplicationPackage(request *DeleteApplicationPackageRequest) (_result *DeleteApplicationPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteApplicationPackageResponse{}
	_body, _err := client.DeleteApplicationPackageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除应用发布包
 * Summary: 删除应用发布包
 */
func (client *Client) DeleteApplicationPackageEx(request *DeleteApplicationPackageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteApplicationPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteApplicationPackageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.application.package.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量获取应用发布包
 * Summary: 批量获取应用发布包
 */
func (client *Client) ListApplicationPackage(request *ListApplicationPackageRequest) (_result *ListApplicationPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListApplicationPackageResponse{}
	_body, _err := client.ListApplicationPackageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量获取应用发布包
 * Summary: 批量获取应用发布包
 */
func (client *Client) ListApplicationPackageEx(request *ListApplicationPackageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListApplicationPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListApplicationPackageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.application.package.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取上传应用发布包下载配置
 * Summary: 获取上传应用发布包下载配置
 */
func (client *Client) UploadApplicationPackageconfig(request *UploadApplicationPackageconfigRequest) (_result *UploadApplicationPackageconfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UploadApplicationPackageconfigResponse{}
	_body, _err := client.UploadApplicationPackageconfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取上传应用发布包下载配置
 * Summary: 获取上传应用发布包下载配置
 */
func (client *Client) UploadApplicationPackageconfigEx(request *UploadApplicationPackageconfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UploadApplicationPackageconfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UploadApplicationPackageconfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.application.packageconfig.upload"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量获取应用实例的 cell
 * Summary: 批量获取应用实例的 cell
 */
func (client *Client) ListAppserviceCell(request *ListAppserviceCellRequest) (_result *ListAppserviceCellResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAppserviceCellResponse{}
	_body, _err := client.ListAppserviceCellEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量获取应用实例的 cell
 * Summary: 批量获取应用实例的 cell
 */
func (client *Client) ListAppserviceCellEx(request *ListAppserviceCellRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAppserviceCellResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAppserviceCellResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appservice.cell.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建应用实例
 * Summary: 创建应用实例
 */
func (client *Client) CreateAppservice(request *CreateAppserviceRequest) (_result *CreateAppserviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAppserviceResponse{}
	_body, _err := client.CreateAppserviceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建应用实例
 * Summary: 创建应用实例
 */
func (client *Client) CreateAppserviceEx(request *CreateAppserviceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAppserviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAppserviceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appservice.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 旧版应用管理-根据appId获得默认的APPService,只有当isCreateDefault为true并且没有默认AppService时才会创建默认AppService
 * Summary: 旧版应用管理-获取默认的应用服务
 */
func (client *Client) GetAppserviceDefault(request *GetAppserviceDefaultRequest) (_result *GetAppserviceDefaultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAppserviceDefaultResponse{}
	_body, _err := client.GetAppserviceDefaultEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 旧版应用管理-根据appId获得默认的APPService,只有当isCreateDefault为true并且没有默认AppService时才会创建默认AppService
 * Summary: 旧版应用管理-获取默认的应用服务
 */
func (client *Client) GetAppserviceDefaultEx(request *GetAppserviceDefaultRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAppserviceDefaultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAppserviceDefaultResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appservice.default.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 判断应用实例是否存在
 * Summary: 判断应用实例是否存在
 */
func (client *Client) ExistAppservice(request *ExistAppserviceRequest) (_result *ExistAppserviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExistAppserviceResponse{}
	_body, _err := client.ExistAppserviceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 判断应用实例是否存在
 * Summary: 判断应用实例是否存在
 */
func (client *Client) ExistAppserviceEx(request *ExistAppserviceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExistAppserviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExistAppserviceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appservice.exist"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新应用实例
 * Summary: 更新应用实例
 */
func (client *Client) UpdateAppservice(request *UpdateAppserviceRequest) (_result *UpdateAppserviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateAppserviceResponse{}
	_body, _err := client.UpdateAppserviceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新应用实例
 * Summary: 更新应用实例
 */
func (client *Client) UpdateAppserviceEx(request *UpdateAppserviceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateAppserviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateAppserviceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appservice.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 技术栈1.0查询（opsware）
 * Summary: 技术栈查询
 */
func (client *Client) QueryBuildpack(request *QueryBuildpackRequest) (_result *QueryBuildpackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBuildpackResponse{}
	_body, _err := client.QueryBuildpackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 技术栈1.0查询（opsware）
 * Summary: 技术栈查询
 */
func (client *Client) QueryBuildpackEx(request *QueryBuildpackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBuildpackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBuildpackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.buildpack.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 旧版应用管理-获取指定应用详情
 * Summary: 旧版应用管理-获取应用详情
 */
func (client *Client) GetApplicationDetail(request *GetApplicationDetailRequest) (_result *GetApplicationDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetApplicationDetailResponse{}
	_body, _err := client.GetApplicationDetailEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 旧版应用管理-获取指定应用详情
 * Summary: 旧版应用管理-获取应用详情
 */
func (client *Client) GetApplicationDetailEx(request *GetApplicationDetailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetApplicationDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetApplicationDetailResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.application.detail.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询用户信息
 * Summary: 查询用户信息
 */
func (client *Client) QueryUser(request *QueryUserRequest) (_result *QueryUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryUserResponse{}
	_body, _err := client.QueryUserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询用户信息
 * Summary: 查询用户信息
 */
func (client *Client) QueryUserEx(request *QueryUserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryUserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.user.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取应用分组列表
 * Summary: 获取应用分组列表
 */
func (client *Client) ListAppgroup(request *ListAppgroupRequest) (_result *ListAppgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAppgroupResponse{}
	_body, _err := client.ListAppgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取应用分组列表
 * Summary: 获取应用分组列表
 */
func (client *Client) ListAppgroupEx(request *ListAppgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAppgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAppgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appgroup.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 检查应用分组是否存在
 * Summary: 检查应用分组是否存在
 */
func (client *Client) ExistAppgroup(request *ExistAppgroupRequest) (_result *ExistAppgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExistAppgroupResponse{}
	_body, _err := client.ExistAppgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 检查应用分组是否存在
 * Summary: 检查应用分组是否存在
 */
func (client *Client) ExistAppgroupEx(request *ExistAppgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExistAppgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExistAppgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appgroup.exist"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建应用分组
 * Summary: 创建应用分组
 */
func (client *Client) CreateAppgroup(request *CreateAppgroupRequest) (_result *CreateAppgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAppgroupResponse{}
	_body, _err := client.CreateAppgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建应用分组
 * Summary: 创建应用分组
 */
func (client *Client) CreateAppgroupEx(request *CreateAppgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAppgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAppgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appgroup.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取应用owner列表
 * Summary: 获取应用owner列表
 */
func (client *Client) ListAppgroupOwner(request *ListAppgroupOwnerRequest) (_result *ListAppgroupOwnerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAppgroupOwnerResponse{}
	_body, _err := client.ListAppgroupOwnerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取应用owner列表
 * Summary: 获取应用owner列表
 */
func (client *Client) ListAppgroupOwnerEx(request *ListAppgroupOwnerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAppgroupOwnerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAppgroupOwnerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appgroup.owner.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用分组结构查询
 * Summary: 应用分组结构查询
 */
func (client *Client) GetAppgroupTree(request *GetAppgroupTreeRequest) (_result *GetAppgroupTreeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAppgroupTreeResponse{}
	_body, _err := client.GetAppgroupTreeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用分组结构查询
 * Summary: 应用分组结构查询
 */
func (client *Client) GetAppgroupTreeEx(request *GetAppgroupTreeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAppgroupTreeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAppgroupTreeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appgroup.tree.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用分组结构查询
 * Summary: 应用分组结构查询
 */
func (client *Client) GetAppgroupSystemtree(request *GetAppgroupSystemtreeRequest) (_result *GetAppgroupSystemtreeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAppgroupSystemtreeResponse{}
	_body, _err := client.GetAppgroupSystemtreeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用分组结构查询
 * Summary: 应用分组结构查询
 */
func (client *Client) GetAppgroupSystemtreeEx(request *GetAppgroupSystemtreeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAppgroupSystemtreeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAppgroupSystemtreeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appgroup.systemtree.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除分组
 * Summary: 删除分组
 */
func (client *Client) DeleteAppgroup(request *DeleteAppgroupRequest) (_result *DeleteAppgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteAppgroupResponse{}
	_body, _err := client.DeleteAppgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除分组
 * Summary: 删除分组
 */
func (client *Client) DeleteAppgroupEx(request *DeleteAppgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteAppgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteAppgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appgroup.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新分组
 * Summary: 更新分组
 */
func (client *Client) UpdateAppgroup(request *UpdateAppgroupRequest) (_result *UpdateAppgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateAppgroupResponse{}
	_body, _err := client.UpdateAppgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新分组
 * Summary: 更新分组
 */
func (client *Client) UpdateAppgroupEx(request *UpdateAppgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateAppgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateAppgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appgroup.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 列出所有应用等级
 * Summary: 列出所有应用等级
 */
func (client *Client) ListApplevel(request *ListApplevelRequest) (_result *ListApplevelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListApplevelResponse{}
	_body, _err := client.ListApplevelEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 列出所有应用等级
 * Summary: 列出所有应用等级
 */
func (client *Client) ListApplevelEx(request *ListApplevelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListApplevelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListApplevelResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.applevel.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用等级是否存在
 * Summary: 应用等级是否存在
 */
func (client *Client) ExistApplevel(request *ExistApplevelRequest) (_result *ExistApplevelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExistApplevelResponse{}
	_body, _err := client.ExistApplevelEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用等级是否存在
 * Summary: 应用等级是否存在
 */
func (client *Client) ExistApplevelEx(request *ExistApplevelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExistApplevelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExistApplevelResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.applevel.exist"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建应用等级
 * Summary: 创建应用等级
 */
func (client *Client) CreateApplevel(request *CreateApplevelRequest) (_result *CreateApplevelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateApplevelResponse{}
	_body, _err := client.CreateApplevelEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建应用等级
 * Summary: 创建应用等级
 */
func (client *Client) CreateApplevelEx(request *CreateApplevelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateApplevelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateApplevelResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.applevel.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除应用分组
 * Summary: 删除应用分组
 */
func (client *Client) DeleteApplevel(request *DeleteApplevelRequest) (_result *DeleteApplevelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteApplevelResponse{}
	_body, _err := client.DeleteApplevelEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除应用分组
 * Summary: 删除应用分组
 */
func (client *Client) DeleteApplevelEx(request *DeleteApplevelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteApplevelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteApplevelResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.applevel.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新应用等级
 * Summary: 更新应用等级
 */
func (client *Client) UpdateApplevel(request *UpdateApplevelRequest) (_result *UpdateApplevelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateApplevelResponse{}
	_body, _err := client.UpdateApplevelEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新应用等级
 * Summary: 更新应用等级
 */
func (client *Client) UpdateApplevelEx(request *UpdateApplevelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateApplevelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateApplevelResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.applevel.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 旧版应用管理-获取应用列表
 * Summary: 旧版应用管理-获取应用列表
 */
func (client *Client) ListApplication(request *ListApplicationRequest) (_result *ListApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListApplicationResponse{}
	_body, _err := client.ListApplicationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 旧版应用管理-获取应用列表
 * Summary: 旧版应用管理-获取应用列表
 */
func (client *Client) ListApplicationEx(request *ListApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListApplicationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.application.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 旧版应用管理-更新应用
 * Summary: 旧版应用管理-更新应用
 */
func (client *Client) UpdateApplication(request *UpdateApplicationRequest) (_result *UpdateApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateApplicationResponse{}
	_body, _err := client.UpdateApplicationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 旧版应用管理-更新应用
 * Summary: 旧版应用管理-更新应用
 */
func (client *Client) UpdateApplicationEx(request *UpdateApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateApplicationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.application.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 旧版应用管理-批量查询应用服务
 * Summary: 旧版应用管理-批量查询应用服务
 */
func (client *Client) ListAppservice(request *ListAppserviceRequest) (_result *ListAppserviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAppserviceResponse{}
	_body, _err := client.ListAppserviceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 旧版应用管理-批量查询应用服务
 * Summary: 旧版应用管理-批量查询应用服务
 */
func (client *Client) ListAppserviceEx(request *ListAppserviceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAppserviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAppserviceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appservice.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 旧版应用管理-删除应用服务
 * Summary: 旧版应用管理-删除应用服务
 */
func (client *Client) DeleteAppservice(request *DeleteAppserviceRequest) (_result *DeleteAppserviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteAppserviceResponse{}
	_body, _err := client.DeleteAppserviceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 旧版应用管理-删除应用服务
 * Summary: 旧版应用管理-删除应用服务
 */
func (client *Client) DeleteAppserviceEx(request *DeleteAppserviceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteAppserviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteAppserviceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appservice.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 旧版应用管理-获取应用服务详情
 * Summary: 旧版应用管理-获取应用服务详情
 */
func (client *Client) GetAppserviceDetail(request *GetAppserviceDetailRequest) (_result *GetAppserviceDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAppserviceDetailResponse{}
	_body, _err := client.GetAppserviceDetailEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 旧版应用管理-获取应用服务详情
 * Summary: 旧版应用管理-获取应用服务详情
 */
func (client *Client) GetAppserviceDetailEx(request *GetAppserviceDetailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAppserviceDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAppserviceDetailResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appservice.detail.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 旧版应用管理-检查应用发布包是否存在
 * Summary: 旧版应用管理-检查应用发布包是否存在
 */
func (client *Client) ExistApplicationPackage(request *ExistApplicationPackageRequest) (_result *ExistApplicationPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExistApplicationPackageResponse{}
	_body, _err := client.ExistApplicationPackageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 旧版应用管理-检查应用发布包是否存在
 * Summary: 旧版应用管理-检查应用发布包是否存在
 */
func (client *Client) ExistApplicationPackageEx(request *ExistApplicationPackageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExistApplicationPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExistApplicationPackageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.application.package.exist"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 旧版应用管理-获取应用包上传策略
 * Summary: 旧版应用管理-获取应用包上传策略
 */
func (client *Client) GetApplicationPackageuploadpolicy(request *GetApplicationPackageuploadpolicyRequest) (_result *GetApplicationPackageuploadpolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetApplicationPackageuploadpolicyResponse{}
	_body, _err := client.GetApplicationPackageuploadpolicyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 旧版应用管理-获取应用包上传策略
 * Summary: 旧版应用管理-获取应用包上传策略
 */
func (client *Client) GetApplicationPackageuploadpolicyEx(request *GetApplicationPackageuploadpolicyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetApplicationPackageuploadpolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetApplicationPackageuploadpolicyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.application.packageuploadpolicy.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 旧版应用管理-获取发布包下载链接
 * Summary: 旧版应用管理-获取发布包下载链接
 */
func (client *Client) GetApplicationPackagedownloadurl(request *GetApplicationPackagedownloadurlRequest) (_result *GetApplicationPackagedownloadurlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetApplicationPackagedownloadurlResponse{}
	_body, _err := client.GetApplicationPackagedownloadurlEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 旧版应用管理-获取发布包下载链接
 * Summary: 旧版应用管理-获取发布包下载链接
 */
func (client *Client) GetApplicationPackagedownloadurlEx(request *GetApplicationPackagedownloadurlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetApplicationPackagedownloadurlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetApplicationPackagedownloadurlResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.application.packagedownloadurl.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 旧版应用管理-判断应用是否存在
 * Summary: 旧版应用管理-判断应用是否存在
 */
func (client *Client) ExistApplication(request *ExistApplicationRequest) (_result *ExistApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExistApplicationResponse{}
	_body, _err := client.ExistApplicationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 旧版应用管理-判断应用是否存在
 * Summary: 旧版应用管理-判断应用是否存在
 */
func (client *Client) ExistApplicationEx(request *ExistApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExistApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExistApplicationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.application.exist"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 旧版应用管理-根据 appServiceIds 查询应用服务
 * Summary: 根据应用服务ids查询应用服务
 */
func (client *Client) QueryAppservice(request *QueryAppserviceRequest) (_result *QueryAppserviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppserviceResponse{}
	_body, _err := client.QueryAppserviceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 旧版应用管理-根据 appServiceIds 查询应用服务
 * Summary: 根据应用服务ids查询应用服务
 */
func (client *Client) QueryAppserviceEx(request *QueryAppserviceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppserviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppserviceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appservice.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 历史遗留接口-获取开关配置清单
 * Summary: 历史遗留接口-获取开关配置清单
 */
func (client *Client) GetAppgrayconfigs(request *GetAppgrayconfigsRequest) (_result *GetAppgrayconfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAppgrayconfigsResponse{}
	_body, _err := client.GetAppgrayconfigsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 历史遗留接口-获取开关配置清单
 * Summary: 历史遗留接口-获取开关配置清单
 */
func (client *Client) GetAppgrayconfigsEx(request *GetAppgrayconfigsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAppgrayconfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAppgrayconfigsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appgrayconfigs.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 测试api元数据自动录入
 * Summary: 测试api元数据自动录入
 */
func (client *Client) QueryOptest(request *QueryOptestRequest) (_result *QueryOptestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryOptestResponse{}
	_body, _err := client.QueryOptestEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 测试api元数据自动录入
 * Summary: 测试api元数据自动录入
 */
func (client *Client) QueryOptestEx(request *QueryOptestRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryOptestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryOptestResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.optest.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: optestplus
 * Summary: optestplus
 */
func (client *Client) BindOptestplus(request *BindOptestplusRequest) (_result *BindOptestplusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BindOptestplusResponse{}
	_body, _err := client.BindOptestplusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: optestplus
 * Summary: optestplus
 */
func (client *Client) BindOptestplusEx(request *BindOptestplusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BindOptestplusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BindOptestplusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.optestplus.bind"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用画像获取应用名称列表
 * Summary: 应用画像获取应用名称列表
 */
func (client *Client) ListAppportraitApp(request *ListAppportraitAppRequest) (_result *ListAppportraitAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAppportraitAppResponse{}
	_body, _err := client.ListAppportraitAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用画像获取应用名称列表
 * Summary: 应用画像获取应用名称列表
 */
func (client *Client) ListAppportraitAppEx(request *ListAppportraitAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAppportraitAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAppportraitAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appportrait.app.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取应用详情信息
 * Summary: 获取应用详情信息
 */
func (client *Client) GetAppportraitApp(request *GetAppportraitAppRequest) (_result *GetAppportraitAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAppportraitAppResponse{}
	_body, _err := client.GetAppportraitAppEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取应用详情信息
 * Summary: 获取应用详情信息
 */
func (client *Client) GetAppportraitAppEx(request *GetAppportraitAppRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAppportraitAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAppportraitAppResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appportrait.app.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 年维度应用可用性查询
 * Summary: 年维度应用可用性查询
 */
func (client *Client) GetAppportraitYearusability(request *GetAppportraitYearusabilityRequest) (_result *GetAppportraitYearusabilityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAppportraitYearusabilityResponse{}
	_body, _err := client.GetAppportraitYearusabilityEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 年维度应用可用性查询
 * Summary: 年维度应用可用性查询
 */
func (client *Client) GetAppportraitYearusabilityEx(request *GetAppportraitYearusabilityRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAppportraitYearusabilityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAppportraitYearusabilityResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appportrait.yearusability.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 月维度应用可用性查询
 * Summary: 月维度应用可用性查询
 */
func (client *Client) GetAppportraitMonthusability(request *GetAppportraitMonthusabilityRequest) (_result *GetAppportraitMonthusabilityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAppportraitMonthusabilityResponse{}
	_body, _err := client.GetAppportraitMonthusabilityEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 月维度应用可用性查询
 * Summary: 月维度应用可用性查询
 */
func (client *Client) GetAppportraitMonthusabilityEx(request *GetAppportraitMonthusabilityRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAppportraitMonthusabilityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAppportraitMonthusabilityResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appportrait.monthusability.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 可用性趋势
 * Summary: 可用性趋势
 */
func (client *Client) QueryAppportraitUsabilitytrend(request *QueryAppportraitUsabilitytrendRequest) (_result *QueryAppportraitUsabilitytrendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppportraitUsabilitytrendResponse{}
	_body, _err := client.QueryAppportraitUsabilitytrendEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 可用性趋势
 * Summary: 可用性趋势
 */
func (client *Client) QueryAppportraitUsabilitytrendEx(request *QueryAppportraitUsabilitytrendRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppportraitUsabilitytrendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppportraitUsabilitytrendResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appportrait.usabilitytrend.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用画像健康分
 * Summary: 应用画像健康分
 */
func (client *Client) QueryAppportraitHealthscore(request *QueryAppportraitHealthscoreRequest) (_result *QueryAppportraitHealthscoreResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppportraitHealthscoreResponse{}
	_body, _err := client.QueryAppportraitHealthscoreEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用画像健康分
 * Summary: 应用画像健康分
 */
func (client *Client) QueryAppportraitHealthscoreEx(request *QueryAppportraitHealthscoreRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppportraitHealthscoreResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppportraitHealthscoreResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appportrait.healthscore.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用健康分趋势查询
 * Summary: 应用健康分趋势查询
 */
func (client *Client) QueryAppportraitHealthscoretrend(request *QueryAppportraitHealthscoretrendRequest) (_result *QueryAppportraitHealthscoretrendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppportraitHealthscoretrendResponse{}
	_body, _err := client.QueryAppportraitHealthscoretrendEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用健康分趋势查询
 * Summary: 应用健康分趋势查询
 */
func (client *Client) QueryAppportraitHealthscoretrendEx(request *QueryAppportraitHealthscoretrendRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppportraitHealthscoretrendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppportraitHealthscoretrendResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appportrait.healthscoretrend.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用画像告警数趋势查询
 * Summary: 应用画像告警数趋势查询
 */
func (client *Client) QueryAppportraitAlertcounttrend(request *QueryAppportraitAlertcounttrendRequest) (_result *QueryAppportraitAlertcounttrendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppportraitAlertcounttrendResponse{}
	_body, _err := client.QueryAppportraitAlertcounttrendEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用画像告警数趋势查询
 * Summary: 应用画像告警数趋势查询
 */
func (client *Client) QueryAppportraitAlertcounttrendEx(request *QueryAppportraitAlertcounttrendRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppportraitAlertcounttrendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppportraitAlertcounttrendResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appportrait.alertcounttrend.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用画像告警明细列表
 * Summary: 应用画像告警明细列表
 */
func (client *Client) ListAppportraitAlert(request *ListAppportraitAlertRequest) (_result *ListAppportraitAlertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAppportraitAlertResponse{}
	_body, _err := client.ListAppportraitAlertEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用画像告警明细列表
 * Summary: 应用画像告警明细列表
 */
func (client *Client) ListAppportraitAlertEx(request *ListAppportraitAlertRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAppportraitAlertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAppportraitAlertResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appportrait.alert.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用画像应用ecs利用率
 * Summary: 应用画像应用ecs利用率
 */
func (client *Client) GetAppportraitEcsusage(request *GetAppportraitEcsusageRequest) (_result *GetAppportraitEcsusageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAppportraitEcsusageResponse{}
	_body, _err := client.GetAppportraitEcsusageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用画像应用ecs利用率
 * Summary: 应用画像应用ecs利用率
 */
func (client *Client) GetAppportraitEcsusageEx(request *GetAppportraitEcsusageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAppportraitEcsusageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAppportraitEcsusageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appportrait.ecsusage.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用画像容器利用率
 * Summary: 应用画像容器利用率
 */
func (client *Client) QueryAppportraitContainerusage(request *QueryAppportraitContainerusageRequest) (_result *QueryAppportraitContainerusageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryAppportraitContainerusageResponse{}
	_body, _err := client.QueryAppportraitContainerusageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用画像容器利用率
 * Summary: 应用画像容器利用率
 */
func (client *Client) QueryAppportraitContainerusageEx(request *QueryAppportraitContainerusageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryAppportraitContainerusageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppportraitContainerusageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appportrait.containerusage.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用画像应用操作记录
 * Summary: 应用画像应用操作记录
 */
func (client *Client) ListAppportraitActiontrail(request *ListAppportraitActiontrailRequest) (_result *ListAppportraitActiontrailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAppportraitActiontrailResponse{}
	_body, _err := client.ListAppportraitActiontrailEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用画像应用操作记录
 * Summary: 应用画像应用操作记录
 */
func (client *Client) ListAppportraitActiontrailEx(request *ListAppportraitActiontrailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAppportraitActiontrailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAppportraitActiontrailResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appportrait.actiontrail.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用画像应用服务关联资源节点信息
 * Summary: 应用画像应用服务关联资源节点信息
 */
func (client *Client) ListAppportraitNode(request *ListAppportraitNodeRequest) (_result *ListAppportraitNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAppportraitNodeResponse{}
	_body, _err := client.ListAppportraitNodeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用画像应用服务关联资源节点信息
 * Summary: 应用画像应用服务关联资源节点信息
 */
func (client *Client) ListAppportraitNodeEx(request *ListAppportraitNodeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAppportraitNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAppportraitNodeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appportrait.node.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用画像应用分组列表
 * Summary: 应用画像应用分组列表
 */
func (client *Client) ListAppportraitAppgroup(request *ListAppportraitAppgroupRequest) (_result *ListAppportraitAppgroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAppportraitAppgroupResponse{}
	_body, _err := client.ListAppportraitAppgroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用画像应用分组列表
 * Summary: 应用画像应用分组列表
 */
func (client *Client) ListAppportraitAppgroupEx(request *ListAppportraitAppgroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAppportraitAppgroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAppportraitAppgroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appportrait.appgroup.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 111
 * Summary: ece列表
 */
func (client *Client) ListAppportraitEcs(request *ListAppportraitEcsRequest) (_result *ListAppportraitEcsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAppportraitEcsResponse{}
	_body, _err := client.ListAppportraitEcsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 111
 * Summary: ece列表
 */
func (client *Client) ListAppportraitEcsEx(request *ListAppportraitEcsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAppportraitEcsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAppportraitEcsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appportrait.ecs.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 1
 * Summary: rds列表
 */
func (client *Client) ListAppportraitRds(request *ListAppportraitRdsRequest) (_result *ListAppportraitRdsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAppportraitRdsResponse{}
	_body, _err := client.ListAppportraitRdsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 1
 * Summary: rds列表
 */
func (client *Client) ListAppportraitRdsEx(request *ListAppportraitRdsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAppportraitRdsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAppportraitRdsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appportrait.rds.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 1
 * Summary: slb列表
 */
func (client *Client) ListAppportraitSlb(request *ListAppportraitSlbRequest) (_result *ListAppportraitSlbResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAppportraitSlbResponse{}
	_body, _err := client.ListAppportraitSlbEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 1
 * Summary: slb列表
 */
func (client *Client) ListAppportraitSlbEx(request *ListAppportraitSlbRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAppportraitSlbResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAppportraitSlbResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appportrait.slb.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 1
 * Summary: pod列表
 */
func (client *Client) ListAppportraitPod(request *ListAppportraitPodRequest) (_result *ListAppportraitPodResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAppportraitPodResponse{}
	_body, _err := client.ListAppportraitPodEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 1
 * Summary: pod列表
 */
func (client *Client) ListAppportraitPodEx(request *ListAppportraitPodRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAppportraitPodResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAppportraitPodResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.appportrait.pod.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建 computer 实例
 * Summary: 创建 computer 实例
 */
func (client *Client) CreateComputer(request *CreateComputerRequest) (_result *CreateComputerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateComputerResponse{}
	_body, _err := client.CreateComputerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建 computer 实例
 * Summary: 创建 computer 实例
 */
func (client *Client) CreateComputerEx(request *CreateComputerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateComputerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateComputerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.computer.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: computer 删除
 * Summary: computer 删除
 */
func (client *Client) DeleteComputer(request *DeleteComputerRequest) (_result *DeleteComputerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteComputerResponse{}
	_body, _err := client.DeleteComputerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: computer 删除
 * Summary: computer 删除
 */
func (client *Client) DeleteComputerEx(request *DeleteComputerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteComputerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteComputerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.computer.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: computer 导入
 * Summary: computer 导入
 */
func (client *Client) ImportComputer(request *ImportComputerRequest) (_result *ImportComputerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ImportComputerResponse{}
	_body, _err := client.ImportComputerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: computer 导入
 * Summary: computer 导入
 */
func (client *Client) ImportComputerEx(request *ImportComputerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ImportComputerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ImportComputerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.computer.import"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: database 创建
 * Summary: database 创建
 */
func (client *Client) CreateDatabase(request *CreateDatabaseRequest) (_result *CreateDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDatabaseResponse{}
	_body, _err := client.CreateDatabaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: database 创建
 * Summary: database 创建
 */
func (client *Client) CreateDatabaseEx(request *CreateDatabaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDatabaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: database 导入
 * Summary: database 导入
 */
func (client *Client) ImportDatabase(request *ImportDatabaseRequest) (_result *ImportDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ImportDatabaseResponse{}
	_body, _err := client.ImportDatabaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: database 导入
 * Summary: database 导入
 */
func (client *Client) ImportDatabaseEx(request *ImportDatabaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ImportDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ImportDatabaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.import"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: database 删除
 * Summary: database 删除
 */
func (client *Client) DeleteDatabase(request *DeleteDatabaseRequest) (_result *DeleteDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteDatabaseResponse{}
	_body, _err := client.DeleteDatabaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: database 删除
 * Summary: database 删除
 */
func (client *Client) DeleteDatabaseEx(request *DeleteDatabaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDatabaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: loadbalance 创建
 * Summary: loadbalance 创建
 */
func (client *Client) CreateLoadbalance(request *CreateLoadbalanceRequest) (_result *CreateLoadbalanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLoadbalanceResponse{}
	_body, _err := client.CreateLoadbalanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: loadbalance 创建
 * Summary: loadbalance 创建
 */
func (client *Client) CreateLoadbalanceEx(request *CreateLoadbalanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLoadbalanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLoadbalanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: loadbalance 删除
 * Summary: loadbalance 删除
 */
func (client *Client) DeleteLoadbalance(request *DeleteLoadbalanceRequest) (_result *DeleteLoadbalanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteLoadbalanceResponse{}
	_body, _err := client.DeleteLoadbalanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: loadbalance 删除
 * Summary: loadbalance 删除
 */
func (client *Client) DeleteLoadbalanceEx(request *DeleteLoadbalanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteLoadbalanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteLoadbalanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: loadbalance 导入
 * Summary: loadbalance 导入
 */
func (client *Client) ImportLoadbalance(request *ImportLoadbalanceRequest) (_result *ImportLoadbalanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ImportLoadbalanceResponse{}
	_body, _err := client.ImportLoadbalanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: loadbalance 导入
 * Summary: loadbalance 导入
 */
func (client *Client) ImportLoadbalanceEx(request *ImportLoadbalanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ImportLoadbalanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ImportLoadbalanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.import"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: vpc 创建
 * Summary: vpc 创建
 */
func (client *Client) CreateVpc(request *CreateVpcRequest) (_result *CreateVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateVpcResponse{}
	_body, _err := client.CreateVpcEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: vpc 创建
 * Summary: vpc 创建
 */
func (client *Client) CreateVpcEx(request *CreateVpcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateVpcResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.vpc.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: vpc 删除
 * Summary: vpc 删除
 */
func (client *Client) DeleteVpc(request *DeleteVpcRequest) (_result *DeleteVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteVpcResponse{}
	_body, _err := client.DeleteVpcEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: vpc 删除
 * Summary: vpc 删除
 */
func (client *Client) DeleteVpcEx(request *DeleteVpcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteVpcResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.vpc.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: computer 从应用中释放
 * Summary: computer 从应用中释放
 */
func (client *Client) ReleaseComputer(request *ReleaseComputerRequest) (_result *ReleaseComputerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReleaseComputerResponse{}
	_body, _err := client.ReleaseComputerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: computer 从应用中释放
 * Summary: computer 从应用中释放
 */
func (client *Client) ReleaseComputerEx(request *ReleaseComputerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReleaseComputerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReleaseComputerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.computer.release"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重置 computer 密码
 * Summary: 重置 computer 密码
 */
func (client *Client) ReinitComputerPassword(request *ReinitComputerPasswordRequest) (_result *ReinitComputerPasswordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReinitComputerPasswordResponse{}
	_body, _err := client.ReinitComputerPasswordEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重置 computer 密码
 * Summary: 重置 computer 密码
 */
func (client *Client) ReinitComputerPasswordEx(request *ReinitComputerPasswordRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReinitComputerPasswordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReinitComputerPasswordResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.computer.password.reinit"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: database 从应用中释放
 * Summary: database 从应用中释放
 */
func (client *Client) ReleaseDatabase(request *ReleaseDatabaseRequest) (_result *ReleaseDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReleaseDatabaseResponse{}
	_body, _err := client.ReleaseDatabaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: database 从应用中释放
 * Summary: database 从应用中释放
 */
func (client *Client) ReleaseDatabaseEx(request *ReleaseDatabaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReleaseDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReleaseDatabaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.release"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 移除 computer
 * Summary: 移除 computer
 */
func (client *Client) RemoveComputer(request *RemoveComputerRequest) (_result *RemoveComputerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RemoveComputerResponse{}
	_body, _err := client.RemoveComputerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 移除 computer
 * Summary: 移除 computer
 */
func (client *Client) RemoveComputerEx(request *RemoveComputerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RemoveComputerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveComputerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.computer.remove"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: loadbalance 移除
 * Summary: loadbalance 移除
 */
func (client *Client) RemoveLoadbalance(request *RemoveLoadbalanceRequest) (_result *RemoveLoadbalanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RemoveLoadbalanceResponse{}
	_body, _err := client.RemoveLoadbalanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: loadbalance 移除
 * Summary: loadbalance 移除
 */
func (client *Client) RemoveLoadbalanceEx(request *RemoveLoadbalanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RemoveLoadbalanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveLoadbalanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.remove"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: database 移除
 * Summary: database 移除
 */
func (client *Client) RemoveDatabase(request *RemoveDatabaseRequest) (_result *RemoveDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RemoveDatabaseResponse{}
	_body, _err := client.RemoveDatabaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: database 移除
 * Summary: database 移除
 */
func (client *Client) RemoveDatabaseEx(request *RemoveDatabaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RemoveDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveDatabaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.remove"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: loadbalance 从应用中释放
 * Summary: loadbalance 从应用中释放
 */
func (client *Client) ReleaseLoadbalance(request *ReleaseLoadbalanceRequest) (_result *ReleaseLoadbalanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReleaseLoadbalanceResponse{}
	_body, _err := client.ReleaseLoadbalanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: loadbalance 从应用中释放
 * Summary: loadbalance 从应用中释放
 */
func (client *Client) ReleaseLoadbalanceEx(request *ReleaseLoadbalanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReleaseLoadbalanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReleaseLoadbalanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.release"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: database account 创建
 * Summary: database account 创建
 */
func (client *Client) CreateDatabaseAccount(request *CreateDatabaseAccountRequest) (_result *CreateDatabaseAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDatabaseAccountResponse{}
	_body, _err := client.CreateDatabaseAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: database account 创建
 * Summary: database account 创建
 */
func (client *Client) CreateDatabaseAccountEx(request *CreateDatabaseAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDatabaseAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDatabaseAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.account.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 安全域/组 创建
 * Summary: 安全域/组 创建
 */
func (client *Client) CreateSecuritygroup(request *CreateSecuritygroupRequest) (_result *CreateSecuritygroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSecuritygroupResponse{}
	_body, _err := client.CreateSecuritygroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 安全域/组 创建
 * Summary: 安全域/组 创建
 */
func (client *Client) CreateSecuritygroupEx(request *CreateSecuritygroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSecuritygroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSecuritygroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.securitygroup.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: securitygroup 导入
 * Summary: securitygroup 导入
 */
func (client *Client) ImportSecuritygroup(request *ImportSecuritygroupRequest) (_result *ImportSecuritygroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ImportSecuritygroupResponse{}
	_body, _err := client.ImportSecuritygroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: securitygroup 导入
 * Summary: securitygroup 导入
 */
func (client *Client) ImportSecuritygroupEx(request *ImportSecuritygroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ImportSecuritygroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ImportSecuritygroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.securitygroup.import"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: securitygroup 移除
 * Summary: securitygroup 移除
 */
func (client *Client) RemoveSecuritygroup(request *RemoveSecuritygroupRequest) (_result *RemoveSecuritygroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RemoveSecuritygroupResponse{}
	_body, _err := client.RemoveSecuritygroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: securitygroup 移除
 * Summary: securitygroup 移除
 */
func (client *Client) RemoveSecuritygroupEx(request *RemoveSecuritygroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RemoveSecuritygroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveSecuritygroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.securitygroup.remove"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: securitygroup 删除
 * Summary: securitygroup 删除
 */
func (client *Client) DeleteSecuritygroup(request *DeleteSecuritygroupRequest) (_result *DeleteSecuritygroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSecuritygroupResponse{}
	_body, _err := client.DeleteSecuritygroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: securitygroup 删除
 * Summary: securitygroup 删除
 */
func (client *Client) DeleteSecuritygroupEx(request *DeleteSecuritygroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSecuritygroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSecuritygroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.securitygroup.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: schema 删除
 * Summary: schema 删除
 */
func (client *Client) DeleteDatabaseSchema(request *DeleteDatabaseSchemaRequest) (_result *DeleteDatabaseSchemaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteDatabaseSchemaResponse{}
	_body, _err := client.DeleteDatabaseSchemaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: schema 删除
 * Summary: schema 删除
 */
func (client *Client) DeleteDatabaseSchemaEx(request *DeleteDatabaseSchemaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteDatabaseSchemaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDatabaseSchemaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.schema.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: account 删除
 * Summary: account 删除
 */
func (client *Client) DeleteDatabaseAccount(request *DeleteDatabaseAccountRequest) (_result *DeleteDatabaseAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteDatabaseAccountResponse{}
	_body, _err := client.DeleteDatabaseAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: account 删除
 * Summary: account 删除
 */
func (client *Client) DeleteDatabaseAccountEx(request *DeleteDatabaseAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteDatabaseAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDatabaseAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.account.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: vswitch 删除
 * Summary: vswitch 删除
 */
func (client *Client) DeleteVpcVswitch(request *DeleteVpcVswitchRequest) (_result *DeleteVpcVswitchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteVpcVswitchResponse{}
	_body, _err := client.DeleteVpcVswitchEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: vswitch 删除
 * Summary: vswitch 删除
 */
func (client *Client) DeleteVpcVswitchEx(request *DeleteVpcVswitchRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteVpcVswitchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteVpcVswitchResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.vpc.vswitch.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: listener 删除
 * Summary: listener 删除
 */
func (client *Client) DeleteLoadbalanceListener(request *DeleteLoadbalanceListenerRequest) (_result *DeleteLoadbalanceListenerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteLoadbalanceListenerResponse{}
	_body, _err := client.DeleteLoadbalanceListenerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: listener 删除
 * Summary: listener 删除
 */
func (client *Client) DeleteLoadbalanceListenerEx(request *DeleteLoadbalanceListenerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteLoadbalanceListenerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteLoadbalanceListenerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.listener.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 路由表删除
 * Summary: 路由表删除
 */
func (client *Client) DeleteVpcVroutertable(request *DeleteVpcVroutertableRequest) (_result *DeleteVpcVroutertableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteVpcVroutertableResponse{}
	_body, _err := client.DeleteVpcVroutertableEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 路由表删除
 * Summary: 路由表删除
 */
func (client *Client) DeleteVpcVroutertableEx(request *DeleteVpcVroutertableRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteVpcVroutertableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteVpcVroutertableResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.vpc.vroutertable.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 安全组中实例移除
 * Summary: 安全组中实例移除
 */
func (client *Client) RemoveSecuritygroupInstance(request *RemoveSecuritygroupInstanceRequest) (_result *RemoveSecuritygroupInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RemoveSecuritygroupInstanceResponse{}
	_body, _err := client.RemoveSecuritygroupInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 安全组中实例移除
 * Summary: 安全组中实例移除
 */
func (client *Client) RemoveSecuritygroupInstanceEx(request *RemoveSecuritygroupInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RemoveSecuritygroupInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveSecuritygroupInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.securitygroup.instance.remove"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 安全组 permission 删除
 * Summary: 安全组 permission 删除
 */
func (client *Client) DeleteSecuritygroupPermission(request *DeleteSecuritygroupPermissionRequest) (_result *DeleteSecuritygroupPermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSecuritygroupPermissionResponse{}
	_body, _err := client.DeleteSecuritygroupPermissionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 安全组 permission 删除
 * Summary: 安全组 permission 删除
 */
func (client *Client) DeleteSecuritygroupPermissionEx(request *DeleteSecuritygroupPermissionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSecuritygroupPermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSecuritygroupPermissionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.securitygroup.permission.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: lb 监听器访问 ip 删除
 * Summary: lb 监听器访问 ip 删除
 */
func (client *Client) RemoveLoadbalanceSecurityip(request *RemoveLoadbalanceSecurityipRequest) (_result *RemoveLoadbalanceSecurityipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RemoveLoadbalanceSecurityipResponse{}
	_body, _err := client.RemoveLoadbalanceSecurityipEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: lb 监听器访问 ip 删除
 * Summary: lb 监听器访问 ip 删除
 */
func (client *Client) RemoveLoadbalanceSecurityipEx(request *RemoveLoadbalanceSecurityipRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RemoveLoadbalanceSecurityipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveLoadbalanceSecurityipResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.securityip.remove"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用创建
 * Summary: 应用创建
 */
func (client *Client) CreateApplication(request *CreateApplicationRequest) (_result *CreateApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateApplicationResponse{}
	_body, _err := client.CreateApplicationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用创建
 * Summary: 应用创建
 */
func (client *Client) CreateApplicationEx(request *CreateApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateApplicationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.application.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 应用删除
 * Summary: 应用删除
 */
func (client *Client) DeleteApplication(request *DeleteApplicationRequest) (_result *DeleteApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteApplicationResponse{}
	_body, _err := client.DeleteApplicationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 应用删除
 * Summary: 应用删除
 */
func (client *Client) DeleteApplicationEx(request *DeleteApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteApplicationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.application.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: vswitch 创建
 * Summary: vswitch 创建
 */
func (client *Client) CreateVpcVswitch(request *CreateVpcVswitchRequest) (_result *CreateVpcVswitchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateVpcVswitchResponse{}
	_body, _err := client.CreateVpcVswitchEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: vswitch 创建
 * Summary: vswitch 创建
 */
func (client *Client) CreateVpcVswitchEx(request *CreateVpcVswitchRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateVpcVswitchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateVpcVswitchResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.vpc.vswitch.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: vRouterTable 创建
 * Summary: vRouterTable 创建
 */
func (client *Client) CreateVpcVroutertable(request *CreateVpcVroutertableRequest) (_result *CreateVpcVroutertableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateVpcVroutertableResponse{}
	_body, _err := client.CreateVpcVroutertableEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: vRouterTable 创建
 * Summary: vRouterTable 创建
 */
func (client *Client) CreateVpcVroutertableEx(request *CreateVpcVroutertableRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateVpcVroutertableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateVpcVroutertableResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.vpc.vroutertable.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 安全组添加实例
 * Summary: 安全组添加实例
 */
func (client *Client) AddSecuritygroupInstance(request *AddSecuritygroupInstanceRequest) (_result *AddSecuritygroupInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddSecuritygroupInstanceResponse{}
	_body, _err := client.AddSecuritygroupInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 安全组添加实例
 * Summary: 安全组添加实例
 */
func (client *Client) AddSecuritygroupInstanceEx(request *AddSecuritygroupInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddSecuritygroupInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddSecuritygroupInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.securitygroup.instance.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: db 规格修改
 * Summary: db 规格修改
 */
func (client *Client) UpdateDatabaseSpec(request *UpdateDatabaseSpecRequest) (_result *UpdateDatabaseSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDatabaseSpecResponse{}
	_body, _err := client.UpdateDatabaseSpecEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: db 规格修改
 * Summary: db 规格修改
 */
func (client *Client) UpdateDatabaseSpecEx(request *UpdateDatabaseSpecRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDatabaseSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDatabaseSpecResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.spec.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: lb 访问控制修改
 * Summary: lb 访问控制修改
 */
func (client *Client) UpdateLoadbalanceAccesscontrol(request *UpdateLoadbalanceAccesscontrolRequest) (_result *UpdateLoadbalanceAccesscontrolResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateLoadbalanceAccesscontrolResponse{}
	_body, _err := client.UpdateLoadbalanceAccesscontrolEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: lb 访问控制修改
 * Summary: lb 访问控制修改
 */
func (client *Client) UpdateLoadbalanceAccesscontrolEx(request *UpdateLoadbalanceAccesscontrolRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateLoadbalanceAccesscontrolResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateLoadbalanceAccesscontrolResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.accesscontrol.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: lb 规格修改
 * Summary: lb 规格修改
 */
func (client *Client) UpdateLoadbalanceSpec(request *UpdateLoadbalanceSpecRequest) (_result *UpdateLoadbalanceSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateLoadbalanceSpecResponse{}
	_body, _err := client.UpdateLoadbalanceSpecEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: lb 规格修改
 * Summary: lb 规格修改
 */
func (client *Client) UpdateLoadbalanceSpecEx(request *UpdateLoadbalanceSpecRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateLoadbalanceSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateLoadbalanceSpecResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.spec.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: vswitch 信息修改
 * Summary: vswitch 信息修改
 */
func (client *Client) UpdateVpcVswitch(request *UpdateVpcVswitchRequest) (_result *UpdateVpcVswitchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateVpcVswitchResponse{}
	_body, _err := client.UpdateVpcVswitchEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: vswitch 信息修改
 * Summary: vswitch 信息修改
 */
func (client *Client) UpdateVpcVswitchEx(request *UpdateVpcVswitchRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateVpcVswitchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateVpcVswitchResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.vpc.vswitch.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建 workspace
 * Summary: 创建 workspace
 */
func (client *Client) CreateWorkspace(request *CreateWorkspaceRequest) (_result *CreateWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateWorkspaceResponse{}
	_body, _err := client.CreateWorkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建 workspace
 * Summary: 创建 workspace
 */
func (client *Client) CreateWorkspaceEx(request *CreateWorkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateWorkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.workspace.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 元数据workspace创建
 * Summary: 元数据workspace创建
 */
func (client *Client) CreateMetaWorkspace(request *CreateMetaWorkspaceRequest) (_result *CreateMetaWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateMetaWorkspaceResponse{}
	_body, _err := client.CreateMetaWorkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 元数据workspace创建
 * Summary: 元数据workspace创建
 */
func (client *Client) CreateMetaWorkspaceEx(request *CreateMetaWorkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateMetaWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateMetaWorkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.meta.workspace.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: workspace查询
 * Summary: workspace查询
 */
func (client *Client) QueryMetaWorkspace(request *QueryMetaWorkspaceRequest) (_result *QueryMetaWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMetaWorkspaceResponse{}
	_body, _err := client.QueryMetaWorkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: workspace查询
 * Summary: workspace查询
 */
func (client *Client) QueryMetaWorkspaceEx(request *QueryMetaWorkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMetaWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMetaWorkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.meta.workspace.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 元数据workspace删除
 * Summary: 元数据workspace删除
 */
func (client *Client) DeleteMetaWorkspace(request *DeleteMetaWorkspaceRequest) (_result *DeleteMetaWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteMetaWorkspaceResponse{}
	_body, _err := client.DeleteMetaWorkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 元数据workspace删除
 * Summary: 元数据workspace删除
 */
func (client *Client) DeleteMetaWorkspaceEx(request *DeleteMetaWorkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteMetaWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteMetaWorkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.meta.workspace.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 资源VPC创建
 * Summary: 资源VPC创建
 */
func (client *Client) CreateResourceVpc(request *CreateResourceVpcRequest) (_result *CreateResourceVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateResourceVpcResponse{}
	_body, _err := client.CreateResourceVpcEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 资源VPC创建
 * Summary: 资源VPC创建
 */
func (client *Client) CreateResourceVpcEx(request *CreateResourceVpcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateResourceVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateResourceVpcResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resource.vpc.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 资源VPC查询
 * Summary: 资源VPC查询
 */
func (client *Client) QueryResourceVpc(request *QueryResourceVpcRequest) (_result *QueryResourceVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryResourceVpcResponse{}
	_body, _err := client.QueryResourceVpcEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 资源VPC查询
 * Summary: 资源VPC查询
 */
func (client *Client) QueryResourceVpcEx(request *QueryResourceVpcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryResourceVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryResourceVpcResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resource.vpc.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 资源VPC删除
 * Summary: 资源VPC删除
 */
func (client *Client) DeleteResourceVpc(request *DeleteResourceVpcRequest) (_result *DeleteResourceVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteResourceVpcResponse{}
	_body, _err := client.DeleteResourceVpcEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 资源VPC删除
 * Summary: 资源VPC删除
 */
func (client *Client) DeleteResourceVpcEx(request *DeleteResourceVpcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteResourceVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteResourceVpcResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resource.vpc.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 资源vswitch创建
 * Summary: 资源vswitch创建
 */
func (client *Client) CreateResourceVswitch(request *CreateResourceVswitchRequest) (_result *CreateResourceVswitchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateResourceVswitchResponse{}
	_body, _err := client.CreateResourceVswitchEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 资源vswitch创建
 * Summary: 资源vswitch创建
 */
func (client *Client) CreateResourceVswitchEx(request *CreateResourceVswitchRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateResourceVswitchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateResourceVswitchResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resource.vswitch.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 资源vswitch查询
 * Summary: 资源vswitch查询
 */
func (client *Client) QueryResourceVswitch(request *QueryResourceVswitchRequest) (_result *QueryResourceVswitchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryResourceVswitchResponse{}
	_body, _err := client.QueryResourceVswitchEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 资源vswitch查询
 * Summary: 资源vswitch查询
 */
func (client *Client) QueryResourceVswitchEx(request *QueryResourceVswitchRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryResourceVswitchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryResourceVswitchResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resource.vswitch.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 资源vswitch删除
 * Summary: 资源vswitch删除
 */
func (client *Client) DeleteResourceVswitch(request *DeleteResourceVswitchRequest) (_result *DeleteResourceVswitchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteResourceVswitchResponse{}
	_body, _err := client.DeleteResourceVswitchEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 资源vswitch删除
 * Summary: 资源vswitch删除
 */
func (client *Client) DeleteResourceVswitchEx(request *DeleteResourceVswitchRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteResourceVswitchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteResourceVswitchResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resource.vswitch.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 资源securitygroup查询
 * Summary: 资源securitygroup查询
 */
func (client *Client) QueryResourceSecuritygroup(request *QueryResourceSecuritygroupRequest) (_result *QueryResourceSecuritygroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryResourceSecuritygroupResponse{}
	_body, _err := client.QueryResourceSecuritygroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 资源securitygroup查询
 * Summary: 资源securitygroup查询
 */
func (client *Client) QueryResourceSecuritygroupEx(request *QueryResourceSecuritygroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryResourceSecuritygroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryResourceSecuritygroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resource.securitygroup.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: workspace 列表
 * Summary: workspace 列表
 */
func (client *Client) ListMetaWorkspace(request *ListMetaWorkspaceRequest) (_result *ListMetaWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListMetaWorkspaceResponse{}
	_body, _err := client.ListMetaWorkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: workspace 列表
 * Summary: workspace 列表
 */
func (client *Client) ListMetaWorkspaceEx(request *ListMetaWorkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListMetaWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListMetaWorkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.meta.workspace.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建安全组资源
 * Summary: 创建安全组
 */
func (client *Client) CreateResourceSecuritygroup(request *CreateResourceSecuritygroupRequest) (_result *CreateResourceSecuritygroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateResourceSecuritygroupResponse{}
	_body, _err := client.CreateResourceSecuritygroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建安全组资源
 * Summary: 创建安全组
 */
func (client *Client) CreateResourceSecuritygroupEx(request *CreateResourceSecuritygroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateResourceSecuritygroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateResourceSecuritygroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resource.securitygroup.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除安全组
 * Summary: 删除安全组
 */
func (client *Client) DeleteResourceSecuritygroup(request *DeleteResourceSecuritygroupRequest) (_result *DeleteResourceSecuritygroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteResourceSecuritygroupResponse{}
	_body, _err := client.DeleteResourceSecuritygroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除安全组
 * Summary: 删除安全组
 */
func (client *Client) DeleteResourceSecuritygroupEx(request *DeleteResourceSecuritygroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteResourceSecuritygroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteResourceSecuritygroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resource.securitygroup.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建云主机instance
 * Summary: 创建云主机instance
 */
func (client *Client) CreateResourceComputer(request *CreateResourceComputerRequest) (_result *CreateResourceComputerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateResourceComputerResponse{}
	_body, _err := client.CreateResourceComputerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建云主机instance
 * Summary: 创建云主机instance
 */
func (client *Client) CreateResourceComputerEx(request *CreateResourceComputerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateResourceComputerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateResourceComputerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resource.computer.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: computer 查询
 * Summary: computer 查询
 */
func (client *Client) QueryResourceComputer(request *QueryResourceComputerRequest) (_result *QueryResourceComputerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryResourceComputerResponse{}
	_body, _err := client.QueryResourceComputerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: computer 查询
 * Summary: computer 查询
 */
func (client *Client) QueryResourceComputerEx(request *QueryResourceComputerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryResourceComputerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryResourceComputerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resource.computer.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据CPU内存机器规格查询api
 * Summary: 机器规格查询api
 */
func (client *Client) QueryResourceComputerspec(request *QueryResourceComputerspecRequest) (_result *QueryResourceComputerspecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryResourceComputerspecResponse{}
	_body, _err := client.QueryResourceComputerspecEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据CPU内存机器规格查询api
 * Summary: 机器规格查询api
 */
func (client *Client) QueryResourceComputerspecEx(request *QueryResourceComputerspecRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryResourceComputerspecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryResourceComputerspecResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resource.computerspec.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除computer
 * Summary: 删除computer
 */
func (client *Client) DeleteResourceComputer(request *DeleteResourceComputerRequest) (_result *DeleteResourceComputerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteResourceComputerResponse{}
	_body, _err := client.DeleteResourceComputerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除computer
 * Summary: 删除computer
 */
func (client *Client) DeleteResourceComputerEx(request *DeleteResourceComputerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteResourceComputerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteResourceComputerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resource.computer.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重置computer密码
 * Summary: 重置computer密码
 */
func (client *Client) ReinitResourceComputerpassword(request *ReinitResourceComputerpasswordRequest) (_result *ReinitResourceComputerpasswordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReinitResourceComputerpasswordResponse{}
	_body, _err := client.ReinitResourceComputerpasswordEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重置computer密码
 * Summary: 重置computer密码
 */
func (client *Client) ReinitResourceComputerpasswordEx(request *ReinitResourceComputerpasswordRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReinitResourceComputerpasswordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReinitResourceComputerpasswordResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resource.computerpassword.reinit"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 启动computer
 * Summary: 启动computer
 */
func (client *Client) StartResourceComputer(request *StartResourceComputerRequest) (_result *StartResourceComputerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartResourceComputerResponse{}
	_body, _err := client.StartResourceComputerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 启动computer
 * Summary: 启动computer
 */
func (client *Client) StartResourceComputerEx(request *StartResourceComputerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartResourceComputerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartResourceComputerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resource.computer.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 停止机器
 * Summary: 停止机器
 */
func (client *Client) StopResourceComputer(request *StopResourceComputerRequest) (_result *StopResourceComputerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StopResourceComputerResponse{}
	_body, _err := client.StopResourceComputerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 停止机器
 * Summary: 停止机器
 */
func (client *Client) StopResourceComputerEx(request *StopResourceComputerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StopResourceComputerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StopResourceComputerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resource.computer.stop"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云日志服务(SLS)-创建日志项目
 * Summary: 创建日志项目
 */
func (client *Client) CreateSlsProject(request *CreateSlsProjectRequest) (_result *CreateSlsProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSlsProjectResponse{}
	_body, _err := client.CreateSlsProjectEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云日志服务(SLS)-创建日志项目
 * Summary: 创建日志项目
 */
func (client *Client) CreateSlsProjectEx(request *CreateSlsProjectRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSlsProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSlsProjectResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.sls.project.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云日志服务(SLS)-获取日志项目列表
 * Summary: 获取日志项目列表
 */
func (client *Client) ListSlsProject(request *ListSlsProjectRequest) (_result *ListSlsProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSlsProjectResponse{}
	_body, _err := client.ListSlsProjectEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云日志服务(SLS)-获取日志项目列表
 * Summary: 获取日志项目列表
 */
func (client *Client) ListSlsProjectEx(request *ListSlsProjectRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSlsProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSlsProjectResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.sls.project.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云日志服务(SLS)-创建日志库
 * Summary: 创建日志库
 */
func (client *Client) CreateSlsLogstore(request *CreateSlsLogstoreRequest) (_result *CreateSlsLogstoreResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSlsLogstoreResponse{}
	_body, _err := client.CreateSlsLogstoreEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云日志服务(SLS)-创建日志库
 * Summary: 创建日志库
 */
func (client *Client) CreateSlsLogstoreEx(request *CreateSlsLogstoreRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSlsLogstoreResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSlsLogstoreResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.sls.logstore.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云日志服务(SLS)-获取日志库列表
 * Summary: 获取日志库列表
 */
func (client *Client) ListSlsLogstore(request *ListSlsLogstoreRequest) (_result *ListSlsLogstoreResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSlsLogstoreResponse{}
	_body, _err := client.ListSlsLogstoreEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云日志服务(SLS)-获取日志库列表
 * Summary: 获取日志库列表
 */
func (client *Client) ListSlsLogstoreEx(request *ListSlsLogstoreRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSlsLogstoreResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSlsLogstoreResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.sls.logstore.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云日志服务(SLS)-获取单个日志库
 * Summary: 获取单个日志库
 */
func (client *Client) GetSlsLogstore(request *GetSlsLogstoreRequest) (_result *GetSlsLogstoreResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSlsLogstoreResponse{}
	_body, _err := client.GetSlsLogstoreEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云日志服务(SLS)-获取单个日志库
 * Summary: 获取单个日志库
 */
func (client *Client) GetSlsLogstoreEx(request *GetSlsLogstoreRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSlsLogstoreResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSlsLogstoreResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.sls.logstore.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云日志服务(SLS)-创建日志配置
 * Summary: 创建日志配置
 */
func (client *Client) CreateSlsConfig(request *CreateSlsConfigRequest) (_result *CreateSlsConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSlsConfigResponse{}
	_body, _err := client.CreateSlsConfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云日志服务(SLS)-创建日志配置
 * Summary: 创建日志配置
 */
func (client *Client) CreateSlsConfigEx(request *CreateSlsConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSlsConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSlsConfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.sls.config.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云日志服务(SLS)-获取日志配置列表
 * Summary: 获取日志配置列表
 */
func (client *Client) ListSlsConfig(request *ListSlsConfigRequest) (_result *ListSlsConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSlsConfigResponse{}
	_body, _err := client.ListSlsConfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云日志服务(SLS)-获取日志配置列表
 * Summary: 获取日志配置列表
 */
func (client *Client) ListSlsConfigEx(request *ListSlsConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSlsConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSlsConfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.sls.config.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云日志服务(SLS)-更新日志配置
 * Summary: 更新日志配置
 */
func (client *Client) UpdateSlsConfig(request *UpdateSlsConfigRequest) (_result *UpdateSlsConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSlsConfigResponse{}
	_body, _err := client.UpdateSlsConfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云日志服务(SLS)-更新日志配置
 * Summary: 更新日志配置
 */
func (client *Client) UpdateSlsConfigEx(request *UpdateSlsConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSlsConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSlsConfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.sls.config.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云日志服务(SLS)-删除日志配置
 * Summary: 删除日志配置
 */
func (client *Client) DeleteSlsConfig(request *DeleteSlsConfigRequest) (_result *DeleteSlsConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSlsConfigResponse{}
	_body, _err := client.DeleteSlsConfigEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云日志服务(SLS)-删除日志配置
 * Summary: 删除日志配置
 */
func (client *Client) DeleteSlsConfigEx(request *DeleteSlsConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSlsConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSlsConfigResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.sls.config.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阿里云日志服务(SLS) - 查询日志
 * Summary: 查询日志
 */
func (client *Client) QuerySlsLog(request *QuerySlsLogRequest) (_result *QuerySlsLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySlsLogResponse{}
	_body, _err := client.QuerySlsLogEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阿里云日志服务(SLS) - 查询日志
 * Summary: 查询日志
 */
func (client *Client) QuerySlsLogEx(request *QuerySlsLogRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySlsLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySlsLogResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.sls.log.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量添加安全组入规则
 * Summary: 批量添加安全组规则
 */
func (client *Client) BatchcreateResourceIngressrules(request *BatchcreateResourceIngressrulesRequest) (_result *BatchcreateResourceIngressrulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateResourceIngressrulesResponse{}
	_body, _err := client.BatchcreateResourceIngressrulesEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量添加安全组入规则
 * Summary: 批量添加安全组规则
 */
func (client *Client) BatchcreateResourceIngressrulesEx(request *BatchcreateResourceIngressrulesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateResourceIngressrulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateResourceIngressrulesResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resource.ingressrules.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量添加安全组出方向规则
 * Summary: 批量添加安全组出方向规则
 */
func (client *Client) BatchcreateResourceEgressrules(request *BatchcreateResourceEgressrulesRequest) (_result *BatchcreateResourceEgressrulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchcreateResourceEgressrulesResponse{}
	_body, _err := client.BatchcreateResourceEgressrulesEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量添加安全组出方向规则
 * Summary: 批量添加安全组出方向规则
 */
func (client *Client) BatchcreateResourceEgressrulesEx(request *BatchcreateResourceEgressrulesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchcreateResourceEgressrulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchcreateResourceEgressrulesResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resource.egressrules.batchcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: loadbalance查询
 * Summary: loadbalance查询
 */
func (client *Client) QueryLoadbalance(request *QueryLoadbalanceRequest) (_result *QueryLoadbalanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLoadbalanceResponse{}
	_body, _err := client.QueryLoadbalanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: loadbalance查询
 * Summary: loadbalance查询
 */
func (client *Client) QueryLoadbalanceEx(request *QueryLoadbalanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLoadbalanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLoadbalanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取单个LB的健康状态
 * Summary: 获取单个LB的健康状态
 */
func (client *Client) GetLoadbalanceHealth(request *GetLoadbalanceHealthRequest) (_result *GetLoadbalanceHealthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetLoadbalanceHealthResponse{}
	_body, _err := client.GetLoadbalanceHealthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取单个LB的健康状态
 * Summary: 获取单个LB的健康状态
 */
func (client *Client) GetLoadbalanceHealthEx(request *GetLoadbalanceHealthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetLoadbalanceHealthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetLoadbalanceHealthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.health.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取所有的vip类型
 * Summary: 获取所有的vip类型
 */
func (client *Client) AllLoadbalanceViptype(request *AllLoadbalanceViptypeRequest) (_result *AllLoadbalanceViptypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllLoadbalanceViptypeResponse{}
	_body, _err := client.AllLoadbalanceViptypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取所有的vip类型
 * Summary: 获取所有的vip类型
 */
func (client *Client) AllLoadbalanceViptypeEx(request *AllLoadbalanceViptypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllLoadbalanceViptypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllLoadbalanceViptypeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.viptype.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取所有的LB集群
 * Summary: 获取所有的LB集群
 */
func (client *Client) AllLoadbalanceCluster(request *AllLoadbalanceClusterRequest) (_result *AllLoadbalanceClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllLoadbalanceClusterResponse{}
	_body, _err := client.AllLoadbalanceClusterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取所有的LB集群
 * Summary: 获取所有的LB集群
 */
func (client *Client) AllLoadbalanceClusterEx(request *AllLoadbalanceClusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllLoadbalanceClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllLoadbalanceClusterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.cluster.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询vpc详细信息
 * Summary: 查询vpc详细信息
 */
func (client *Client) QueryVpc(request *QueryVpcRequest) (_result *QueryVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryVpcResponse{}
	_body, _err := client.QueryVpcEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询vpc详细信息
 * Summary: 查询vpc详细信息
 */
func (client *Client) QueryVpcEx(request *QueryVpcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryVpcResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.vpc.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询已导入workspace的vpc
 * Summary: 查询已导入workspace的vpc
 */
func (client *Client) ListVpcImport(request *ListVpcImportRequest) (_result *ListVpcImportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListVpcImportResponse{}
	_body, _err := client.ListVpcImportEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询已导入workspace的vpc
 * Summary: 查询已导入workspace的vpc
 */
func (client *Client) ListVpcImportEx(request *ListVpcImportRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListVpcImportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListVpcImportResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.vpc.import.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询vpc cidrblock信息
 * Summary: 查询vpc cidrblock信息
 */
func (client *Client) ListVpcCidrblock(request *ListVpcCidrblockRequest) (_result *ListVpcCidrblockResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListVpcCidrblockResponse{}
	_body, _err := client.ListVpcCidrblockEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询vpc cidrblock信息
 * Summary: 查询vpc cidrblock信息
 */
func (client *Client) ListVpcCidrblockEx(request *ListVpcCidrblockRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListVpcCidrblockResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListVpcCidrblockResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.vpc.cidrblock.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询交换机信息
 * Summary: 查询交换机信息
 */
func (client *Client) QueryVpcVswitch(request *QueryVpcVswitchRequest) (_result *QueryVpcVswitchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryVpcVswitchResponse{}
	_body, _err := client.QueryVpcVswitchEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询交换机信息
 * Summary: 查询交换机信息
 */
func (client *Client) QueryVpcVswitchEx(request *QueryVpcVswitchRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryVpcVswitchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryVpcVswitchResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.vpc.vswitch.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询路由表信息
 * Summary: 查询路由表信息
 */
func (client *Client) QueryVpcVroutertable(request *QueryVpcVroutertableRequest) (_result *QueryVpcVroutertableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryVpcVroutertableResponse{}
	_body, _err := client.QueryVpcVroutertableEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询路由表信息
 * Summary: 查询路由表信息
 */
func (client *Client) QueryVpcVroutertableEx(request *QueryVpcVroutertableRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryVpcVroutertableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryVpcVroutertableResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.vpc.vroutertable.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取单个rule
 * Summary: 获取单个rule
 */
func (client *Client) GetLoadbalanceRule(request *GetLoadbalanceRuleRequest) (_result *GetLoadbalanceRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetLoadbalanceRuleResponse{}
	_body, _err := client.GetLoadbalanceRuleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取单个rule
 * Summary: 获取单个rule
 */
func (client *Client) GetLoadbalanceRuleEx(request *GetLoadbalanceRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetLoadbalanceRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetLoadbalanceRuleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.rule.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 批量查询Lb rule
 * Summary: 批量查询Lb rule
 */
func (client *Client) QueryLoadbalanceRule(request *QueryLoadbalanceRuleRequest) (_result *QueryLoadbalanceRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLoadbalanceRuleResponse{}
	_body, _err := client.QueryLoadbalanceRuleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 批量查询Lb rule
 * Summary: 批量查询Lb rule
 */
func (client *Client) QueryLoadbalanceRuleEx(request *QueryLoadbalanceRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLoadbalanceRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLoadbalanceRuleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.rule.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取单个Lb ById
 * Summary: 获取单个Lb ById
 */
func (client *Client) GetLoadbalance(request *GetLoadbalanceRequest) (_result *GetLoadbalanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetLoadbalanceResponse{}
	_body, _err := client.GetLoadbalanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取单个Lb ById
 * Summary: 获取单个Lb ById
 */
func (client *Client) GetLoadbalanceEx(request *GetLoadbalanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetLoadbalanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetLoadbalanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取LB后端所有主机
 * Summary: 获取LB后端所有主机
 */
func (client *Client) AllLoadbalanceMount(request *AllLoadbalanceMountRequest) (_result *AllLoadbalanceMountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllLoadbalanceMountResponse{}
	_body, _err := client.AllLoadbalanceMountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取LB后端所有主机
 * Summary: 获取LB后端所有主机
 */
func (client *Client) AllLoadbalanceMountEx(request *AllLoadbalanceMountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllLoadbalanceMountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllLoadbalanceMountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.mount.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据条件查询后端的主机
 * Summary: 根据条件查询后端的主机
 */
func (client *Client) QueryLoadbalanceMount(request *QueryLoadbalanceMountRequest) (_result *QueryLoadbalanceMountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLoadbalanceMountResponse{}
	_body, _err := client.QueryLoadbalanceMountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据条件查询后端的主机
 * Summary: 根据条件查询后端的主机
 */
func (client *Client) QueryLoadbalanceMountEx(request *QueryLoadbalanceMountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLoadbalanceMountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLoadbalanceMountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.mount.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取单个vcomputergroup
 * Summary: 获取单个vcomputergroup
 */
func (client *Client) GetLoadbalanceVcomputergroup(request *GetLoadbalanceVcomputergroupRequest) (_result *GetLoadbalanceVcomputergroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetLoadbalanceVcomputergroupResponse{}
	_body, _err := client.GetLoadbalanceVcomputergroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取单个vcomputergroup
 * Summary: 获取单个vcomputergroup
 */
func (client *Client) GetLoadbalanceVcomputergroupEx(request *GetLoadbalanceVcomputergroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetLoadbalanceVcomputergroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetLoadbalanceVcomputergroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.vcomputergroup.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询vcomputergroup
 * Summary: 查询vcomputergroup
 */
func (client *Client) QueryLoadbalanceVcomputergroup(request *QueryLoadbalanceVcomputergroupRequest) (_result *QueryLoadbalanceVcomputergroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLoadbalanceVcomputergroupResponse{}
	_body, _err := client.QueryLoadbalanceVcomputergroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询vcomputergroup
 * Summary: 查询vcomputergroup
 */
func (client *Client) QueryLoadbalanceVcomputergroupEx(request *QueryLoadbalanceVcomputergroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLoadbalanceVcomputergroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLoadbalanceVcomputergroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.vcomputergroup.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取所有vcomputergroup
 * Summary: 获取所有vcomputergroup
 */
func (client *Client) AllLoadbalanceVcomputergroup(request *AllLoadbalanceVcomputergroupRequest) (_result *AllLoadbalanceVcomputergroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllLoadbalanceVcomputergroupResponse{}
	_body, _err := client.AllLoadbalanceVcomputergroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取所有vcomputergroup
 * Summary: 获取所有vcomputergroup
 */
func (client *Client) AllLoadbalanceVcomputergroupEx(request *AllLoadbalanceVcomputergroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllLoadbalanceVcomputergroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllLoadbalanceVcomputergroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.vcomputergroup.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取vcomputer
 * Summary: 获取vcomputer
 */
func (client *Client) QueryLoadbalanceVcomputer(request *QueryLoadbalanceVcomputerRequest) (_result *QueryLoadbalanceVcomputerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLoadbalanceVcomputerResponse{}
	_body, _err := client.QueryLoadbalanceVcomputerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取vcomputer
 * Summary: 获取vcomputer
 */
func (client *Client) QueryLoadbalanceVcomputerEx(request *QueryLoadbalanceVcomputerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLoadbalanceVcomputerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLoadbalanceVcomputerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.vcomputer.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询listener
 * Summary: 查询listener
 */
func (client *Client) QueryLoadbalanceListener(request *QueryLoadbalanceListenerRequest) (_result *QueryLoadbalanceListenerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLoadbalanceListenerResponse{}
	_body, _err := client.QueryLoadbalanceListenerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询listener
 * Summary: 查询listener
 */
func (client *Client) QueryLoadbalanceListenerEx(request *QueryLoadbalanceListenerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLoadbalanceListenerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLoadbalanceListenerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.listener.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取所有listener
 * Summary: 获取所有listener
 */
func (client *Client) AllLoadbalanceListener(request *AllLoadbalanceListenerRequest) (_result *AllLoadbalanceListenerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllLoadbalanceListenerResponse{}
	_body, _err := client.AllLoadbalanceListenerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取所有listener
 * Summary: 获取所有listener
 */
func (client *Client) AllLoadbalanceListenerEx(request *AllLoadbalanceListenerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllLoadbalanceListenerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllLoadbalanceListenerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.listener.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询securityip
 * Summary: 查询securityip
 */
func (client *Client) QueryLoadbalanceSecurityip(request *QueryLoadbalanceSecurityipRequest) (_result *QueryLoadbalanceSecurityipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLoadbalanceSecurityipResponse{}
	_body, _err := client.QueryLoadbalanceSecurityipEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询securityip
 * Summary: 查询securityip
 */
func (client *Client) QueryLoadbalanceSecurityipEx(request *QueryLoadbalanceSecurityipRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLoadbalanceSecurityipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLoadbalanceSecurityipResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.securityip.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取单个database
 * Summary: 获取单个database
 */
func (client *Client) GetDatabase(request *GetDatabaseRequest) (_result *GetDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetDatabaseResponse{}
	_body, _err := client.GetDatabaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取单个database
 * Summary: 获取单个database
 */
func (client *Client) GetDatabaseEx(request *GetDatabaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetDatabaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取所有masterzone
 * Summary: 获取所有masterzone
 */
func (client *Client) AllDatabaseMasterzone(request *AllDatabaseMasterzoneRequest) (_result *AllDatabaseMasterzoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllDatabaseMasterzoneResponse{}
	_body, _err := client.AllDatabaseMasterzoneEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取所有masterzone
 * Summary: 获取所有masterzone
 */
func (client *Client) AllDatabaseMasterzoneEx(request *AllDatabaseMasterzoneRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllDatabaseMasterzoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllDatabaseMasterzoneResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.masterzone.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询数据库
 * Summary: 查询数据库
 */
func (client *Client) QueryDatabase(request *QueryDatabaseRequest) (_result *QueryDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDatabaseResponse{}
	_body, _err := client.QueryDatabaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询数据库
 * Summary: 查询数据库
 */
func (client *Client) QueryDatabaseEx(request *QueryDatabaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDatabaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询数据库规格
 * Summary: 查询数据库规格
 */
func (client *Client) QueryDatabaseSpec(request *QueryDatabaseSpecRequest) (_result *QueryDatabaseSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDatabaseSpecResponse{}
	_body, _err := client.QueryDatabaseSpecEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询数据库规格
 * Summary: 查询数据库规格
 */
func (client *Client) QueryDatabaseSpecEx(request *QueryDatabaseSpecRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDatabaseSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDatabaseSpecResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.spec.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询数据引擎
 * Summary: 查询数据引擎
 */
func (client *Client) AllDatabaseEngine(request *AllDatabaseEngineRequest) (_result *AllDatabaseEngineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllDatabaseEngineResponse{}
	_body, _err := client.AllDatabaseEngineEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询数据引擎
 * Summary: 查询数据引擎
 */
func (client *Client) AllDatabaseEngineEx(request *AllDatabaseEngineRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllDatabaseEngineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllDatabaseEngineResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.engine.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询数据库quota
 * Summary: 查询数据库quota
 */
func (client *Client) AllDatabaseQuota(request *AllDatabaseQuotaRequest) (_result *AllDatabaseQuotaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllDatabaseQuotaResponse{}
	_body, _err := client.AllDatabaseQuotaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询数据库quota
 * Summary: 查询数据库quota
 */
func (client *Client) AllDatabaseQuotaEx(request *AllDatabaseQuotaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllDatabaseQuotaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllDatabaseQuotaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.quota.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询数据库所有securityip
 * Summary: 查询数据库所有securityip
 */
func (client *Client) AllDatabaseSecurityip(request *AllDatabaseSecurityipRequest) (_result *AllDatabaseSecurityipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllDatabaseSecurityipResponse{}
	_body, _err := client.AllDatabaseSecurityipEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询数据库所有securityip
 * Summary: 查询数据库所有securityip
 */
func (client *Client) AllDatabaseSecurityipEx(request *AllDatabaseSecurityipRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllDatabaseSecurityipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllDatabaseSecurityipResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.securityip.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: ！！！！不要用，typo
 * Summary: ！！！！不要用，typo
 */
func (client *Client) QueryDatabaseScheme(request *QueryDatabaseSchemeRequest) (_result *QueryDatabaseSchemeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDatabaseSchemeResponse{}
	_body, _err := client.QueryDatabaseSchemeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: ！！！！不要用，typo
 * Summary: ！！！！不要用，typo
 */
func (client *Client) QueryDatabaseSchemeEx(request *QueryDatabaseSchemeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDatabaseSchemeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDatabaseSchemeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.scheme.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取数据库导入记录
 * Summary: 获取数据库导入记录
 */
func (client *Client) AllDatabaseImport(request *AllDatabaseImportRequest) (_result *AllDatabaseImportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllDatabaseImportResponse{}
	_body, _err := client.AllDatabaseImportEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取数据库导入记录
 * Summary: 获取数据库导入记录
 */
func (client *Client) AllDatabaseImportEx(request *AllDatabaseImportRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllDatabaseImportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllDatabaseImportResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.import.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询computer agent状态
 * Summary: 查询computer agent状态
 */
func (client *Client) QueryComputerAgentstatus(request *QueryComputerAgentstatusRequest) (_result *QueryComputerAgentstatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryComputerAgentstatusResponse{}
	_body, _err := client.QueryComputerAgentstatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询computer agent状态
 * Summary: 查询computer agent状态
 */
func (client *Client) QueryComputerAgentstatusEx(request *QueryComputerAgentstatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryComputerAgentstatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryComputerAgentstatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.computer.agentstatus.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询computer staragent 启动命令
 * Summary: 查询 staragent 启动命令
 */
func (client *Client) QueryComputerAgentsetupcommand(request *QueryComputerAgentsetupcommandRequest) (_result *QueryComputerAgentsetupcommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryComputerAgentsetupcommandResponse{}
	_body, _err := client.QueryComputerAgentsetupcommandEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询computer staragent 启动命令
 * Summary: 查询 staragent 启动命令
 */
func (client *Client) QueryComputerAgentsetupcommandEx(request *QueryComputerAgentsetupcommandRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryComputerAgentsetupcommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryComputerAgentsetupcommandResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.computer.agentsetupcommand.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询可以导入的computer信息
 * Summary: 查询可以导入的computer信息
 */
func (client *Client) QueryComputerImport(request *QueryComputerImportRequest) (_result *QueryComputerImportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryComputerImportResponse{}
	_body, _err := client.QueryComputerImportEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询可以导入的computer信息
 * Summary: 查询可以导入的computer信息
 */
func (client *Client) QueryComputerImportEx(request *QueryComputerImportRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryComputerImportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryComputerImportResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.computer.import.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: list computers
 * Summary: list computers
 */
func (client *Client) ListComputer(request *ListComputerRequest) (_result *ListComputerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListComputerResponse{}
	_body, _err := client.ListComputerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: list computers
 * Summary: list computers
 */
func (client *Client) ListComputerEx(request *ListComputerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListComputerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListComputerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.computer.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: query computer specs
 * Summary: query computer specs
 */
func (client *Client) QueryComputerSpec(request *QueryComputerSpecRequest) (_result *QueryComputerSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryComputerSpecResponse{}
	_body, _err := client.QueryComputerSpecEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: query computer specs
 * Summary: query computer specs
 */
func (client *Client) QueryComputerSpecEx(request *QueryComputerSpecRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryComputerSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryComputerSpecResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.computer.spec.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: query computer common image
 * Summary: query common image
 */
func (client *Client) QueryComputerCommonimage(request *QueryComputerCommonimageRequest) (_result *QueryComputerCommonimageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryComputerCommonimageResponse{}
	_body, _err := client.QueryComputerCommonimageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: query computer common image
 * Summary: query common image
 */
func (client *Client) QueryComputerCommonimageEx(request *QueryComputerCommonimageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryComputerCommonimageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryComputerCommonimageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.computer.commonimage.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取所有loadbalance
 * Summary: 获取所有loadbalance
 */
func (client *Client) AllLoadbalance(request *AllLoadbalanceRequest) (_result *AllLoadbalanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AllLoadbalanceResponse{}
	_body, _err := client.AllLoadbalanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取所有loadbalance
 * Summary: 获取所有loadbalance
 */
func (client *Client) AllLoadbalanceEx(request *AllLoadbalanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AllLoadbalanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllLoadbalanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.all"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询导入信息
 * Summary: 查询导入信息
 */
func (client *Client) QueryLoadbalanceImport(request *QueryLoadbalanceImportRequest) (_result *QueryLoadbalanceImportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLoadbalanceImportResponse{}
	_body, _err := client.QueryLoadbalanceImportEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询导入信息
 * Summary: 查询导入信息
 */
func (client *Client) QueryLoadbalanceImportEx(request *QueryLoadbalanceImportRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLoadbalanceImportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLoadbalanceImportResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.import.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询数据库导入记录
 * Summary: 查询数据库导入记录
 */
func (client *Client) QueryDatabaseImport(request *QueryDatabaseImportRequest) (_result *QueryDatabaseImportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDatabaseImportResponse{}
	_body, _err := client.QueryDatabaseImportEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询数据库导入记录
 * Summary: 查询数据库导入记录
 */
func (client *Client) QueryDatabaseImportEx(request *QueryDatabaseImportRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDatabaseImportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDatabaseImportResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.import.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询masterzone
 * Summary: 查询masterzone
 */
func (client *Client) QueryDatabaseMasterzone(request *QueryDatabaseMasterzoneRequest) (_result *QueryDatabaseMasterzoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDatabaseMasterzoneResponse{}
	_body, _err := client.QueryDatabaseMasterzoneEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询masterzone
 * Summary: 查询masterzone
 */
func (client *Client) QueryDatabaseMasterzoneEx(request *QueryDatabaseMasterzoneRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDatabaseMasterzoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDatabaseMasterzoneResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.masterzone.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询数据库额度
 * Summary: 查询数据库额度
 */
func (client *Client) QueryDatabaseQuota(request *QueryDatabaseQuotaRequest) (_result *QueryDatabaseQuotaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDatabaseQuotaResponse{}
	_body, _err := client.QueryDatabaseQuotaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询数据库额度
 * Summary: 查询数据库额度
 */
func (client *Client) QueryDatabaseQuotaEx(request *QueryDatabaseQuotaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDatabaseQuotaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDatabaseQuotaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.quota.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询securityip
 * Summary: 查询securityip
 */
func (client *Client) QueryDatabaseSecurityip(request *QueryDatabaseSecurityipRequest) (_result *QueryDatabaseSecurityipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDatabaseSecurityipResponse{}
	_body, _err := client.QueryDatabaseSecurityipEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询securityip
 * Summary: 查询securityip
 */
func (client *Client) QueryDatabaseSecurityipEx(request *QueryDatabaseSecurityipRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDatabaseSecurityipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDatabaseSecurityipResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.securityip.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询当前数据库的schema
 * Summary: 查询当前数据库的schema
 */
func (client *Client) QueryDatabaseSchema(request *QueryDatabaseSchemaRequest) (_result *QueryDatabaseSchemaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDatabaseSchemaResponse{}
	_body, _err := client.QueryDatabaseSchemaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询当前数据库的schema
 * Summary: 查询当前数据库的schema
 */
func (client *Client) QueryDatabaseSchemaEx(request *QueryDatabaseSchemaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDatabaseSchemaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDatabaseSchemaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.schema.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询数据库的账号
 * Summary: 查询数据库的账号
 */
func (client *Client) QueryDatabaseAccount(request *QueryDatabaseAccountRequest) (_result *QueryDatabaseAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDatabaseAccountResponse{}
	_body, _err := client.QueryDatabaseAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询数据库的账号
 * Summary: 查询数据库的账号
 */
func (client *Client) QueryDatabaseAccountEx(request *QueryDatabaseAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDatabaseAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDatabaseAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.account.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询workspace
 * Summary: 查询workspace
 */
func (client *Client) GetWorkspace(request *GetWorkspaceRequest) (_result *GetWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetWorkspaceResponse{}
	_body, _err := client.GetWorkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询workspace
 * Summary: 查询workspace
 */
func (client *Client) GetWorkspaceEx(request *GetWorkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetWorkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.workspace.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询region
 * Summary: 查询region
 */
func (client *Client) ListRegion(request *ListRegionRequest) (_result *ListRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListRegionResponse{}
	_body, _err := client.ListRegionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询region
 * Summary: 查询region
 */
func (client *Client) ListRegionEx(request *ListRegionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListRegionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.region.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 租户可用region
 * Summary: 租户可用region
 */
func (client *Client) ListRegionAccessible(request *ListRegionAccessibleRequest) (_result *ListRegionAccessibleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListRegionAccessibleResponse{}
	_body, _err := client.ListRegionAccessibleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 租户可用region
 * Summary: 租户可用region
 */
func (client *Client) ListRegionAccessibleEx(request *ListRegionAccessibleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListRegionAccessibleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListRegionAccessibleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.region.accessible.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新基本信息
 * Summary: 更新基本信息
 */
func (client *Client) UpdateDatabaseInfo(request *UpdateDatabaseInfoRequest) (_result *UpdateDatabaseInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDatabaseInfoResponse{}
	_body, _err := client.UpdateDatabaseInfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新基本信息
 * Summary: 更新基本信息
 */
func (client *Client) UpdateDatabaseInfoEx(request *UpdateDatabaseInfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDatabaseInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDatabaseInfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.info.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 把数据库分配给应用
 * Summary: 把数据库分配给应用
 */
func (client *Client) SetDatabaseAssign(request *SetDatabaseAssignRequest) (_result *SetDatabaseAssignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetDatabaseAssignResponse{}
	_body, _err := client.SetDatabaseAssignEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 把数据库分配给应用
 * Summary: 把数据库分配给应用
 */
func (client *Client) SetDatabaseAssignEx(request *SetDatabaseAssignRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetDatabaseAssignResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetDatabaseAssignResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.assign.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 共享数据库给其他workspace
 * Summary: 共享数据库给其他workspace
 */
func (client *Client) SetDatabaseShare(request *SetDatabaseShareRequest) (_result *SetDatabaseShareResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetDatabaseShareResponse{}
	_body, _err := client.SetDatabaseShareEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 共享数据库给其他workspace
 * Summary: 共享数据库给其他workspace
 */
func (client *Client) SetDatabaseShareEx(request *SetDatabaseShareRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetDatabaseShareResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetDatabaseShareResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.share.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重启数据库
 * Summary: 重启数据库
 */
func (client *Client) RebootDatabase(request *RebootDatabaseRequest) (_result *RebootDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RebootDatabaseResponse{}
	_body, _err := client.RebootDatabaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重启数据库
 * Summary: 重启数据库
 */
func (client *Client) RebootDatabaseEx(request *RebootDatabaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RebootDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RebootDatabaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.reboot"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新账户信息
 * Summary: 更新账户信息
 */
func (client *Client) UpdateDatabaseAccount(request *UpdateDatabaseAccountRequest) (_result *UpdateDatabaseAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDatabaseAccountResponse{}
	_body, _err := client.UpdateDatabaseAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新账户信息
 * Summary: 更新账户信息
 */
func (client *Client) UpdateDatabaseAccountEx(request *UpdateDatabaseAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDatabaseAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDatabaseAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.account.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重设databaseaccount密码
 * Summary: 重设databaseaccount密码
 */
func (client *Client) SetDatabaseAccountpassword(request *SetDatabaseAccountpasswordRequest) (_result *SetDatabaseAccountpasswordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetDatabaseAccountpasswordResponse{}
	_body, _err := client.SetDatabaseAccountpasswordEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重设databaseaccount密码
 * Summary: 重设databaseaccount密码
 */
func (client *Client) SetDatabaseAccountpasswordEx(request *SetDatabaseAccountpasswordRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetDatabaseAccountpasswordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetDatabaseAccountpasswordResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.accountpassword.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据库账户授权schema
 * Summary: 数据库账户授权schema
 */
func (client *Client) AuthDatabaseAccount(request *AuthDatabaseAccountRequest) (_result *AuthDatabaseAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AuthDatabaseAccountResponse{}
	_body, _err := client.AuthDatabaseAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据库账户授权schema
 * Summary: 数据库账户授权schema
 */
func (client *Client) AuthDatabaseAccountEx(request *AuthDatabaseAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AuthDatabaseAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AuthDatabaseAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.account.auth"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询tenantRegion
 * Summary: 查询tenantRegion
 */
func (client *Client) GetRegionTenant(request *GetRegionTenantRequest) (_result *GetRegionTenantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetRegionTenantResponse{}
	_body, _err := client.GetRegionTenantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询tenantRegion
 * Summary: 查询tenantRegion
 */
func (client *Client) GetRegionTenantEx(request *GetRegionTenantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetRegionTenantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetRegionTenantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.region.tenant.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: getRegionAliasById
 * Summary: getRegionAliasById
 */
func (client *Client) GetRegionAliasbyid(request *GetRegionAliasbyidRequest) (_result *GetRegionAliasbyidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetRegionAliasbyidResponse{}
	_body, _err := client.GetRegionAliasbyidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: getRegionAliasById
 * Summary: getRegionAliasById
 */
func (client *Client) GetRegionAliasbyidEx(request *GetRegionAliasbyidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetRegionAliasbyidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetRegionAliasbyidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.region.aliasbyid.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询disk信息
 * Summary: 查询disk信息
 */
func (client *Client) QueryDisk(request *QueryDiskRequest) (_result *QueryDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDiskResponse{}
	_body, _err := client.QueryDiskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询disk信息
 * Summary: 查询disk信息
 */
func (client *Client) QueryDiskEx(request *QueryDiskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDiskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.disk.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询computer image信息
 * Summary: 查询computer image信息
 */
func (client *Client) QueryImage(request *QueryImageRequest) (_result *QueryImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryImageResponse{}
	_body, _err := client.QueryImageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询computer image信息
 * Summary: 查询computer image信息
 */
func (client *Client) QueryImageEx(request *QueryImageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryImageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.image.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建数据库schema
 * Summary: 创建数据库schema
 */
func (client *Client) CreateDatabaseSchema(request *CreateDatabaseSchemaRequest) (_result *CreateDatabaseSchemaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDatabaseSchemaResponse{}
	_body, _err := client.CreateDatabaseSchemaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建数据库schema
 * Summary: 创建数据库schema
 */
func (client *Client) CreateDatabaseSchemaEx(request *CreateDatabaseSchemaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDatabaseSchemaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDatabaseSchemaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.schema.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: LB挂载后端主机
 * Summary: LB挂载后端主机
 */
func (client *Client) CreateLoadbalanceMount(request *CreateLoadbalanceMountRequest) (_result *CreateLoadbalanceMountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLoadbalanceMountResponse{}
	_body, _err := client.CreateLoadbalanceMountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: LB挂载后端主机
 * Summary: LB挂载后端主机
 */
func (client *Client) CreateLoadbalanceMountEx(request *CreateLoadbalanceMountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLoadbalanceMountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLoadbalanceMountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.mount.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建监听器
 * Summary: 创建监听器
 */
func (client *Client) CreateLoadbalanceListener(request *CreateLoadbalanceListenerRequest) (_result *CreateLoadbalanceListenerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLoadbalanceListenerResponse{}
	_body, _err := client.CreateLoadbalanceListenerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建监听器
 * Summary: 创建监听器
 */
func (client *Client) CreateLoadbalanceListenerEx(request *CreateLoadbalanceListenerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLoadbalanceListenerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLoadbalanceListenerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.listener.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 停止监听器
 * Summary: 停止监听器
 */
func (client *Client) StopLoadbalanceListener(request *StopLoadbalanceListenerRequest) (_result *StopLoadbalanceListenerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StopLoadbalanceListenerResponse{}
	_body, _err := client.StopLoadbalanceListenerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 停止监听器
 * Summary: 停止监听器
 */
func (client *Client) StopLoadbalanceListenerEx(request *StopLoadbalanceListenerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StopLoadbalanceListenerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StopLoadbalanceListenerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.listener.stop"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 启动lb
 * Summary: 启动lb
 */
func (client *Client) StartLoadbalanceListener(request *StartLoadbalanceListenerRequest) (_result *StartLoadbalanceListenerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartLoadbalanceListenerResponse{}
	_body, _err := client.StartLoadbalanceListenerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 启动lb
 * Summary: 启动lb
 */
func (client *Client) StartLoadbalanceListenerEx(request *StartLoadbalanceListenerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartLoadbalanceListenerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartLoadbalanceListenerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.listener.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新listener配置
 * Summary: 更新listener配置
 */
func (client *Client) UpdateLoadbalanceListener(request *UpdateLoadbalanceListenerRequest) (_result *UpdateLoadbalanceListenerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateLoadbalanceListenerResponse{}
	_body, _err := client.UpdateLoadbalanceListenerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新listener配置
 * Summary: 更新listener配置
 */
func (client *Client) UpdateLoadbalanceListenerEx(request *UpdateLoadbalanceListenerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateLoadbalanceListenerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateLoadbalanceListenerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.listener.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询disk spec信息
 * Summary: 查询disk spec信息
 */
func (client *Client) QueryDiskspec(request *QueryDiskspecRequest) (_result *QueryDiskspecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDiskspecResponse{}
	_body, _err := client.QueryDiskspecEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询disk spec信息
 * Summary: 查询disk spec信息
 */
func (client *Client) QueryDiskspecEx(request *QueryDiskspecRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDiskspecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDiskspecResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.diskspec.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询computer quota
 * Summary: 查询computer quota
 */
func (client *Client) QueryComputerquota(request *QueryComputerquotaRequest) (_result *QueryComputerquotaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryComputerquotaResponse{}
	_body, _err := client.QueryComputerquotaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询computer quota
 * Summary: 查询computer quota
 */
func (client *Client) QueryComputerquotaEx(request *QueryComputerquotaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryComputerquotaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryComputerquotaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.computerquota.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 停止computer
 * Summary: 停止computer
 */
func (client *Client) StopComputer(request *StopComputerRequest) (_result *StopComputerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StopComputerResponse{}
	_body, _err := client.StopComputerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 停止computer
 * Summary: 停止computer
 */
func (client *Client) StopComputerEx(request *StopComputerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StopComputerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StopComputerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.computer.stop"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重启computer
 * Summary: 重启computer
 */
func (client *Client) RebootComputer(request *RebootComputerRequest) (_result *RebootComputerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RebootComputerResponse{}
	_body, _err := client.RebootComputerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重启computer
 * Summary: 重启computer
 */
func (client *Client) RebootComputerEx(request *RebootComputerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RebootComputerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RebootComputerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.computer.reboot"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询computer所属安全组
 * Summary: 查询computer所属安全组
 */
func (client *Client) QueryComputerSecuritygroup(request *QueryComputerSecuritygroupRequest) (_result *QueryComputerSecuritygroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryComputerSecuritygroupResponse{}
	_body, _err := client.QueryComputerSecuritygroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询computer所属安全组
 * Summary: 查询computer所属安全组
 */
func (client *Client) QueryComputerSecuritygroupEx(request *QueryComputerSecuritygroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryComputerSecuritygroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryComputerSecuritygroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.computer.securitygroup.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询安全组信息
 * Summary: 查询安全组信息
 */
func (client *Client) QuerySecuritygroup(request *QuerySecuritygroupRequest) (_result *QuerySecuritygroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySecuritygroupResponse{}
	_body, _err := client.QuerySecuritygroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询安全组信息
 * Summary: 查询安全组信息
 */
func (client *Client) QuerySecuritygroupEx(request *QuerySecuritygroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySecuritygroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySecuritygroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.securitygroup.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建安全组规则
 * Summary: 创建安全组规则
 */
func (client *Client) CreateSecuritygroupPermission(request *CreateSecuritygroupPermissionRequest) (_result *CreateSecuritygroupPermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSecuritygroupPermissionResponse{}
	_body, _err := client.CreateSecuritygroupPermissionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建安全组规则
 * Summary: 创建安全组规则
 */
func (client *Client) CreateSecuritygroupPermissionEx(request *CreateSecuritygroupPermissionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSecuritygroupPermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSecuritygroupPermissionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.securitygroup.permission.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询安全组规则信息
 * Summary: 查询安全组规则信息
 */
func (client *Client) QuerySecuritygroupPermission(request *QuerySecuritygroupPermissionRequest) (_result *QuerySecuritygroupPermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySecuritygroupPermissionResponse{}
	_body, _err := client.QuerySecuritygroupPermissionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询安全组规则信息
 * Summary: 查询安全组规则信息
 */
func (client *Client) QuerySecuritygroupPermissionEx(request *QuerySecuritygroupPermissionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySecuritygroupPermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySecuritygroupPermissionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.securitygroup.permission.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新监听器的安全控制
 * Summary: 更新监听器的安全控制
 */
func (client *Client) UpdateLoadbalanaceSecurityip(request *UpdateLoadbalanaceSecurityipRequest) (_result *UpdateLoadbalanaceSecurityipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateLoadbalanaceSecurityipResponse{}
	_body, _err := client.UpdateLoadbalanaceSecurityipEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新监听器的安全控制
 * Summary: 更新监听器的安全控制
 */
func (client *Client) UpdateLoadbalanaceSecurityipEx(request *UpdateLoadbalanaceSecurityipRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateLoadbalanaceSecurityipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateLoadbalanaceSecurityipResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalanace.securityip.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建lb监听器的安全控制
 * Summary: 创建lb监听器的安全控制
 */
func (client *Client) CreateLoadbalanceSecurityip(request *CreateLoadbalanceSecurityipRequest) (_result *CreateLoadbalanceSecurityipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLoadbalanceSecurityipResponse{}
	_body, _err := client.CreateLoadbalanceSecurityipEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建lb监听器的安全控制
 * Summary: 创建lb监听器的安全控制
 */
func (client *Client) CreateLoadbalanceSecurityipEx(request *CreateLoadbalanceSecurityipRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLoadbalanceSecurityipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLoadbalanceSecurityipResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.securityip.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 编辑数据库的基本属性
 * Summary: 编辑数据库的基本属性
 */
func (client *Client) UpdateDatabase(request *UpdateDatabaseRequest) (_result *UpdateDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDatabaseResponse{}
	_body, _err := client.UpdateDatabaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 编辑数据库的基本属性
 * Summary: 编辑数据库的基本属性
 */
func (client *Client) UpdateDatabaseEx(request *UpdateDatabaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDatabaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.database.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新后端权重
 * Summary: 更新后端权重
 */
func (client *Client) UpdateLoadbalanceMount(request *UpdateLoadbalanceMountRequest) (_result *UpdateLoadbalanceMountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateLoadbalanceMountResponse{}
	_body, _err := client.UpdateLoadbalanceMountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新后端权重
 * Summary: 更新后端权重
 */
func (client *Client) UpdateLoadbalanceMountEx(request *UpdateLoadbalanceMountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateLoadbalanceMountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateLoadbalanceMountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.mount.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除LB后端挂载主机
 * Summary: 删除LB后端挂载主机
 */
func (client *Client) DeleteLoadbalanceMount(request *DeleteLoadbalanceMountRequest) (_result *DeleteLoadbalanceMountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteLoadbalanceMountResponse{}
	_body, _err := client.DeleteLoadbalanceMountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除LB后端挂载主机
 * Summary: 删除LB后端挂载主机
 */
func (client *Client) DeleteLoadbalanceMountEx(request *DeleteLoadbalanceMountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteLoadbalanceMountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteLoadbalanceMountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.mount.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询任务记录
 * Summary: 查询任务记录
 */
func (client *Client) QueryRequest(request *QueryRequestRequest) (_result *QueryRequestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRequestResponse{}
	_body, _err := client.QueryRequestEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询任务记录
 * Summary: 查询任务记录
 */
func (client *Client) QueryRequestEx(request *QueryRequestRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRequestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRequestResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.request.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取单个request
 * Summary: 获取单个request
 */
func (client *Client) GetRequest(request *GetRequestRequest) (_result *GetRequestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetRequestResponse{}
	_body, _err := client.GetRequestEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取单个request
 * Summary: 获取单个request
 */
func (client *Client) GetRequestEx(request *GetRequestRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetRequestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetRequestResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.request.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询task
 * Summary: 查询task
 */
func (client *Client) QueryRequestTask(request *QueryRequestTaskRequest) (_result *QueryRequestTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRequestTaskResponse{}
	_body, _err := client.QueryRequestTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询task
 * Summary: 查询task
 */
func (client *Client) QueryRequestTaskEx(request *QueryRequestTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRequestTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRequestTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.request.task.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询任务日志
 * Summary: 查询任务日志
 */
func (client *Client) QueryTaskLog(request *QueryTaskLogRequest) (_result *QueryTaskLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTaskLogResponse{}
	_body, _err := client.QueryTaskLogEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询任务日志
 * Summary: 查询任务日志
 */
func (client *Client) QueryTaskLogEx(request *QueryTaskLogRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTaskLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTaskLogResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.task.log.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: /webapi/apconsole/v2/tenant/0069443310/workspaces?status=CREATED
 * Summary: 列出 tenant workspace
 */
func (client *Client) ListTenantworkspace(request *ListTenantworkspaceRequest) (_result *ListTenantworkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListTenantworkspaceResponse{}
	_body, _err := client.ListTenantworkspaceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /webapi/apconsole/v2/tenant/0069443310/workspaces?status=CREATED
 * Summary: 列出 tenant workspace
 */
func (client *Client) ListTenantworkspaceEx(request *ListTenantworkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListTenantworkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListTenantworkspaceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.tenantworkspace.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: /webapi/tenants/0069443310/workspaces/filterStatus?projectUniqueId=0069443310&statuses=CREATED
 * Summary: 环境filterStatus
 */
func (client *Client) QueryTenantworkspaceFilter(request *QueryTenantworkspaceFilterRequest) (_result *QueryTenantworkspaceFilterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryTenantworkspaceFilterResponse{}
	_body, _err := client.QueryTenantworkspaceFilterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: /webapi/tenants/0069443310/workspaces/filterStatus?projectUniqueId=0069443310&statuses=CREATED
 * Summary: 环境filterStatus
 */
func (client *Client) QueryTenantworkspaceFilterEx(request *QueryTenantworkspaceFilterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryTenantworkspaceFilterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTenantworkspaceFilterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.tenantworkspace.filter.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: group by region列表
 * Summary: group by region列表
 */
func (client *Client) ListRegionGroupby(request *ListRegionGroupbyRequest) (_result *ListRegionGroupbyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListRegionGroupbyResponse{}
	_body, _err := client.ListRegionGroupbyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: group by region列表
 * Summary: group by region列表
 */
func (client *Client) ListRegionGroupbyEx(request *ListRegionGroupbyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListRegionGroupbyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListRegionGroupbyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.region.groupby.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询任务最后的步骤
 * Summary: 查询任务最后的步骤
 */
func (client *Client) QueryRequestFinaltask(request *QueryRequestFinaltaskRequest) (_result *QueryRequestFinaltaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRequestFinaltaskResponse{}
	_body, _err := client.QueryRequestFinaltaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询任务最后的步骤
 * Summary: 查询任务最后的步骤
 */
func (client *Client) QueryRequestFinaltaskEx(request *QueryRequestFinaltaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRequestFinaltaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRequestFinaltaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.request.finaltask.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询当前支持的功能
 * Summary: 查询当前支持的功能
 */
func (client *Client) QueryFeature(request *QueryFeatureRequest) (_result *QueryFeatureResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryFeatureResponse{}
	_body, _err := client.QueryFeatureEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询当前支持的功能
 * Summary: 查询当前支持的功能
 */
func (client *Client) QueryFeatureEx(request *QueryFeatureRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryFeatureResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryFeatureResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.feature.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: start computer
 * Summary: start computer
 */
func (client *Client) StartComputer(request *StartComputerRequest) (_result *StartComputerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartComputerResponse{}
	_body, _err := client.StartComputerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: start computer
 * Summary: start computer
 */
func (client *Client) StartComputerEx(request *StartComputerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartComputerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartComputerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.computer.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 开启lb
 * Summary: 开启lb
 */
func (client *Client) StartLoadbalance(request *StartLoadbalanceRequest) (_result *StartLoadbalanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartLoadbalanceResponse{}
	_body, _err := client.StartLoadbalanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 开启lb
 * Summary: 开启lb
 */
func (client *Client) StartLoadbalanceEx(request *StartLoadbalanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartLoadbalanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartLoadbalanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 停止lb
 * Summary: 停止lb
 */
func (client *Client) StopLoadbalance(request *StopLoadbalanceRequest) (_result *StopLoadbalanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StopLoadbalanceResponse{}
	_body, _err := client.StopLoadbalanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 停止lb
 * Summary: 停止lb
 */
func (client *Client) StopLoadbalanceEx(request *StopLoadbalanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StopLoadbalanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StopLoadbalanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.stop"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新lb信息
 * Summary: 更新lb信息
 */
func (client *Client) UpdateLoadbalance(request *UpdateLoadbalanceRequest) (_result *UpdateLoadbalanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateLoadbalanceResponse{}
	_body, _err := client.UpdateLoadbalanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新lb信息
 * Summary: 更新lb信息
 */
func (client *Client) UpdateLoadbalanceEx(request *UpdateLoadbalanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateLoadbalanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateLoadbalanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 把LB分配给应用
 * Summary: 把LB分配给应用
 */
func (client *Client) AddLoadbalanceAssign(request *AddLoadbalanceAssignRequest) (_result *AddLoadbalanceAssignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddLoadbalanceAssignResponse{}
	_body, _err := client.AddLoadbalanceAssignEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 把LB分配给应用
 * Summary: 把LB分配给应用
 */
func (client *Client) AddLoadbalanceAssignEx(request *AddLoadbalanceAssignRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddLoadbalanceAssignResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddLoadbalanceAssignResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.assign.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 证书查询
 * Summary: 证书查询
 */
func (client *Client) QueryCertificate(request *QueryCertificateRequest) (_result *QueryCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryCertificateResponse{}
	_body, _err := client.QueryCertificateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 证书查询
 * Summary: 证书查询
 */
func (client *Client) QueryCertificateEx(request *QueryCertificateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryCertificateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.certificate.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建证书
 * Summary: 创建证书
 */
func (client *Client) CreateCertificate(request *CreateCertificateRequest) (_result *CreateCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateCertificateResponse{}
	_body, _err := client.CreateCertificateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建证书
 * Summary: 创建证书
 */
func (client *Client) CreateCertificateEx(request *CreateCertificateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateCertificateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.certificate.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除证书
 * Summary: 删除证书
 */
func (client *Client) DeleteCertificate(request *DeleteCertificateRequest) (_result *DeleteCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteCertificateResponse{}
	_body, _err := client.DeleteCertificateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除证书
 * Summary: 删除证书
 */
func (client *Client) DeleteCertificateEx(request *DeleteCertificateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteCertificateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.certificate.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询已创建的VPC
 * Summary: 查询已创建的VPC
 */
func (client *Client) DescribeUnifiedresourceVpc(request *DescribeUnifiedresourceVpcRequest) (_result *DescribeUnifiedresourceVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeUnifiedresourceVpcResponse{}
	_body, _err := client.DescribeUnifiedresourceVpcEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询已创建的VPC
 * Summary: 查询已创建的VPC
 */
func (client *Client) DescribeUnifiedresourceVpcEx(request *DescribeUnifiedresourceVpcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeUnifiedresourceVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeUnifiedresourceVpcResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.unifiedresource.vpc.describe"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询实例规格族列表
 * Summary: 查询实例规格族列表
 */
func (client *Client) ListUnifiedresourceInstancefamilies(request *ListUnifiedresourceInstancefamiliesRequest) (_result *ListUnifiedresourceInstancefamiliesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListUnifiedresourceInstancefamiliesResponse{}
	_body, _err := client.ListUnifiedresourceInstancefamiliesEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询实例规格族列表
 * Summary: 查询实例规格族列表
 */
func (client *Client) ListUnifiedresourceInstancefamiliesEx(request *ListUnifiedresourceInstancefamiliesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListUnifiedresourceInstancefamiliesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListUnifiedresourceInstancefamiliesResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.unifiedresource.instancefamilies.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询所有实例规格详细信息
 * Summary: 查询实例规格资源
 */
func (client *Client) ListUnifiedresourceInstancetype(request *ListUnifiedresourceInstancetypeRequest) (_result *ListUnifiedresourceInstancetypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListUnifiedresourceInstancetypeResponse{}
	_body, _err := client.ListUnifiedresourceInstancetypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询所有实例规格详细信息
 * Summary: 查询实例规格资源
 */
func (client *Client) ListUnifiedresourceInstancetypeEx(request *ListUnifiedresourceInstancetypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListUnifiedresourceInstancetypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListUnifiedresourceInstancetypeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.unifiedresource.instancetype.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: query cas computer detail info by id
 * Summary: 获取单个computer的详细信息
 */
func (client *Client) QueryComputer(request *QueryComputerRequest) (_result *QueryComputerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryComputerResponse{}
	_body, _err := client.QueryComputerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: query cas computer detail info by id
 * Summary: 获取单个computer的详细信息
 */
func (client *Client) QueryComputerEx(request *QueryComputerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryComputerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryComputerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.computer.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 列出iaas提供商在当前可用区的所有可使用的实例类型
 * Summary: 查询可用实例类型
 */
func (client *Client) ListResourceComputertype(request *ListResourceComputertypeRequest) (_result *ListResourceComputertypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListResourceComputertypeResponse{}
	_body, _err := client.ListResourceComputertypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 列出iaas提供商在当前可用区的所有可使用的实例类型
 * Summary: 查询可用实例类型
 */
func (client *Client) ListResourceComputertypeEx(request *ListResourceComputertypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListResourceComputertypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListResourceComputertypeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resource.computertype.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询ecs disk 列表
 * Summary: 查询ecs disk info
 */
func (client *Client) ListResourceDisk(request *ListResourceDiskRequest) (_result *ListResourceDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListResourceDiskResponse{}
	_body, _err := client.ListResourceDiskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询ecs disk 列表
 * Summary: 查询ecs disk info
 */
func (client *Client) ListResourceDiskEx(request *ListResourceDiskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListResourceDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListResourceDiskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resource.disk.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询云服务器规格族列表
 * Summary: 查询云服务器规格族列表
 */
func (client *Client) ListResourceComputertypefamily(request *ListResourceComputertypefamilyRequest) (_result *ListResourceComputertypefamilyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListResourceComputertypefamilyResponse{}
	_body, _err := client.ListResourceComputertypefamilyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询云服务器规格族列表
 * Summary: 查询云服务器规格族列表
 */
func (client *Client) ListResourceComputertypefamilyEx(request *ListResourceComputertypefamilyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListResourceComputertypefamilyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListResourceComputertypefamilyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resource.computertypefamily.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询交换机信息
 * Summary: 查询交换机信息
 */
func (client *Client) ListUnifiedresourceVswitch(request *ListUnifiedresourceVswitchRequest) (_result *ListUnifiedresourceVswitchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListUnifiedresourceVswitchResponse{}
	_body, _err := client.ListUnifiedresourceVswitchEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询交换机信息
 * Summary: 查询交换机信息
 */
func (client *Client) ListUnifiedresourceVswitchEx(request *ListUnifiedresourceVswitchRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListUnifiedresourceVswitchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListUnifiedresourceVswitchResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.unifiedresource.vswitch.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询当前region的vpc列表
 * Summary: 查询region vpc列表
 */
func (client *Client) ListUnifiedresourceVpc(request *ListUnifiedresourceVpcRequest) (_result *ListUnifiedresourceVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListUnifiedresourceVpcResponse{}
	_body, _err := client.ListUnifiedresourceVpcEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询当前region的vpc列表
 * Summary: 查询region vpc列表
 */
func (client *Client) ListUnifiedresourceVpcEx(request *ListUnifiedresourceVpcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListUnifiedresourceVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListUnifiedresourceVpcResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.unifiedresource.vpc.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 导入vpc到workspace
 * Summary: 导入vpc
 */
func (client *Client) ImportResourceVpc(request *ImportResourceVpcRequest) (_result *ImportResourceVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ImportResourceVpcResponse{}
	_body, _err := client.ImportResourceVpcEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 导入vpc到workspace
 * Summary: 导入vpc
 */
func (client *Client) ImportResourceVpcEx(request *ImportResourceVpcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ImportResourceVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ImportResourceVpcResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resource.vpc.import"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除安全组规则
 * Summary: 删除安全组规则
 */
func (client *Client) DeleteResourceRule(request *DeleteResourceRuleRequest) (_result *DeleteResourceRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteResourceRuleResponse{}
	_body, _err := client.DeleteResourceRuleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除安全组规则
 * Summary: 删除安全组规则
 */
func (client *Client) DeleteResourceRuleEx(request *DeleteResourceRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteResourceRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteResourceRuleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resource.rule.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询路由表条目列表
 * Summary: 查询路由表条目列表
 */
func (client *Client) ListRouteEntry(request *ListRouteEntryRequest) (_result *ListRouteEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListRouteEntryResponse{}
	_body, _err := client.ListRouteEntryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询路由表条目列表
 * Summary: 查询路由表条目列表
 */
func (client *Client) ListRouteEntryEx(request *ListRouteEntryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListRouteEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListRouteEntryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.route.entry.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询可用disk资源详细信息
 * Summary: 查询可用disk资源详细信息
 */
func (client *Client) ListAvailableDisk(request *ListAvailableDiskRequest) (_result *ListAvailableDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAvailableDiskResponse{}
	_body, _err := client.ListAvailableDiskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询可用disk资源详细信息
 * Summary: 查询可用disk资源详细信息
 */
func (client *Client) ListAvailableDiskEx(request *ListAvailableDiskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAvailableDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAvailableDiskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.available.disk.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询可用实例类型信息
 * Summary: 查询可用实例类型信息
 */
func (client *Client) ListAvailableInstancetype(request *ListAvailableInstancetypeRequest) (_result *ListAvailableInstancetypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAvailableInstancetypeResponse{}
	_body, _err := client.ListAvailableInstancetypeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询可用实例类型信息
 * Summary: 查询可用实例类型信息
 */
func (client *Client) ListAvailableInstancetypeEx(request *ListAvailableInstancetypeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAvailableInstancetypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAvailableInstancetypeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.available.instancetype.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询node meta数据
 * Summary: 查询node meta数据
 */
func (client *Client) QueryResourcemetaNode(request *QueryResourcemetaNodeRequest) (_result *QueryResourcemetaNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryResourcemetaNodeResponse{}
	_body, _err := client.QueryResourcemetaNodeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询node meta数据
 * Summary: 查询node meta数据
 */
func (client *Client) QueryResourcemetaNodeEx(request *QueryResourcemetaNodeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryResourcemetaNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryResourcemetaNodeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resourcemeta.node.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询应用服务meta数据
 * Summary: 查询应用服务meta数据
 */
func (client *Client) QueryResourcemetaAppservice(request *QueryResourcemetaAppserviceRequest) (_result *QueryResourcemetaAppserviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryResourcemetaAppserviceResponse{}
	_body, _err := client.QueryResourcemetaAppserviceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询应用服务meta数据
 * Summary: 查询应用服务meta数据
 */
func (client *Client) QueryResourcemetaAppserviceEx(request *QueryResourcemetaAppserviceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryResourcemetaAppserviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryResourcemetaAppserviceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.resourcemeta.appservice.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 调用底层API同步状态，如果底层是删除的，则直接置为删除
 * Summary: 同步机器状态
 */
func (client *Client) SyncComputer(request *SyncComputerRequest) (_result *SyncComputerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SyncComputerResponse{}
	_body, _err := client.SyncComputerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 调用底层API同步状态，如果底层是删除的，则直接置为删除
 * Summary: 同步机器状态
 */
func (client *Client) SyncComputerEx(request *SyncComputerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SyncComputerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SyncComputerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.computer.sync"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 同步LB状态
 * Summary: 同步LB状态
 */
func (client *Client) SyncLoadbalance(request *SyncLoadbalanceRequest) (_result *SyncLoadbalanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SyncLoadbalanceResponse{}
	_body, _err := client.SyncLoadbalanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 同步LB状态
 * Summary: 同步LB状态
 */
func (client *Client) SyncLoadbalanceEx(request *SyncLoadbalanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SyncLoadbalanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SyncLoadbalanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.sync"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新机器基本信息
 * Summary: 更新机器基本信息
 */
func (client *Client) UpdateComputerInfo(request *UpdateComputerInfoRequest) (_result *UpdateComputerInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateComputerInfoResponse{}
	_body, _err := client.UpdateComputerInfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新机器基本信息
 * Summary: 更新机器基本信息
 */
func (client *Client) UpdateComputerInfoEx(request *UpdateComputerInfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateComputerInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateComputerInfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.computer.info.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 将机器分配给应用
 * Summary: 将机器分配给应用
 */
func (client *Client) SetComputerAssign(request *SetComputerAssignRequest) (_result *SetComputerAssignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetComputerAssignResponse{}
	_body, _err := client.SetComputerAssignEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 将机器分配给应用
 * Summary: 将机器分配给应用
 */
func (client *Client) SetComputerAssignEx(request *SetComputerAssignRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetComputerAssignResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetComputerAssignResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.computer.assign.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 执行任务
 * Summary: 执行任务
 */
func (client *Client) ExecRequestTask(request *ExecRequestTaskRequest) (_result *ExecRequestTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecRequestTaskResponse{}
	_body, _err := client.ExecRequestTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 执行任务
 * Summary: 执行任务
 */
func (client *Client) ExecRequestTaskEx(request *ExecRequestTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecRequestTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecRequestTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.request.task.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 重新初始化机器
 * Summary: 重新初始化机器
 */
func (client *Client) ReinitDisk(request *ReinitDiskRequest) (_result *ReinitDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReinitDiskResponse{}
	_body, _err := client.ReinitDiskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 重新初始化机器
 * Summary: 重新初始化机器
 */
func (client *Client) ReinitDiskEx(request *ReinitDiskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReinitDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReinitDiskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.disk.reinit"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 修改磁盘策略
 * Summary: 修改磁盘策略
 */
func (client *Client) UpdateDiskStrategy(request *UpdateDiskStrategyRequest) (_result *UpdateDiskStrategyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateDiskStrategyResponse{}
	_body, _err := client.UpdateDiskStrategyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 修改磁盘策略
 * Summary: 修改磁盘策略
 */
func (client *Client) UpdateDiskStrategyEx(request *UpdateDiskStrategyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateDiskStrategyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDiskStrategyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.disk.strategy.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建虚拟服务器组
 * Summary: 创建虚拟服务器组
 */
func (client *Client) CreateLoadbalanceVcomputergroup(request *CreateLoadbalanceVcomputergroupRequest) (_result *CreateLoadbalanceVcomputergroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLoadbalanceVcomputergroupResponse{}
	_body, _err := client.CreateLoadbalanceVcomputergroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建虚拟服务器组
 * Summary: 创建虚拟服务器组
 */
func (client *Client) CreateLoadbalanceVcomputergroupEx(request *CreateLoadbalanceVcomputergroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLoadbalanceVcomputergroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLoadbalanceVcomputergroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.vcomputergroup.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 在VComputerGroup里更新后端服务器
 * Summary: 增加VCompute
 */
func (client *Client) UpdateLoadbalanceVcomputergroup(request *UpdateLoadbalanceVcomputergroupRequest) (_result *UpdateLoadbalanceVcomputergroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateLoadbalanceVcomputergroupResponse{}
	_body, _err := client.UpdateLoadbalanceVcomputergroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 在VComputerGroup里更新后端服务器
 * Summary: 增加VCompute
 */
func (client *Client) UpdateLoadbalanceVcomputergroupEx(request *UpdateLoadbalanceVcomputergroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateLoadbalanceVcomputergroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateLoadbalanceVcomputergroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.vcomputergroup.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除VComputerGroup
 * Summary: 删除VComputerGroup
 */
func (client *Client) DeleteLoadbalanceVcomputergroup(request *DeleteLoadbalanceVcomputergroupRequest) (_result *DeleteLoadbalanceVcomputergroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteLoadbalanceVcomputergroupResponse{}
	_body, _err := client.DeleteLoadbalanceVcomputergroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除VComputerGroup
 * Summary: 删除VComputerGroup
 */
func (client *Client) DeleteLoadbalanceVcomputergroupEx(request *DeleteLoadbalanceVcomputergroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteLoadbalanceVcomputergroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteLoadbalanceVcomputergroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.vcomputergroup.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 在虚拟服务器组中增加服务器
 * Summary: 在虚拟服务器组中增加服务器
 */
func (client *Client) AddLoadbalanceVcomputergroup(request *AddLoadbalanceVcomputergroupRequest) (_result *AddLoadbalanceVcomputergroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddLoadbalanceVcomputergroupResponse{}
	_body, _err := client.AddLoadbalanceVcomputergroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 在虚拟服务器组中增加服务器
 * Summary: 在虚拟服务器组中增加服务器
 */
func (client *Client) AddLoadbalanceVcomputergroupEx(request *AddLoadbalanceVcomputergroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddLoadbalanceVcomputergroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddLoadbalanceVcomputergroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.vcomputergroup.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 从虚拟服务器组中删除服务器
 * Summary: 从虚拟服务器组中删除服务器
 */
func (client *Client) RemoveLoadbalanceVcomputergroup(request *RemoveLoadbalanceVcomputergroupRequest) (_result *RemoveLoadbalanceVcomputergroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RemoveLoadbalanceVcomputergroupResponse{}
	_body, _err := client.RemoveLoadbalanceVcomputergroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 从虚拟服务器组中删除服务器
 * Summary: 从虚拟服务器组中删除服务器
 */
func (client *Client) RemoveLoadbalanceVcomputergroupEx(request *RemoveLoadbalanceVcomputergroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RemoveLoadbalanceVcomputergroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveLoadbalanceVcomputergroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.loadbalance.vcomputergroup.remove"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 添加域名记录
 * Summary: 添加域名记录
 */
func (client *Client) AddDnsRecordset(request *AddDnsRecordsetRequest) (_result *AddDnsRecordsetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddDnsRecordsetResponse{}
	_body, _err := client.AddDnsRecordsetEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 添加域名记录
 * Summary: 添加域名记录
 */
func (client *Client) AddDnsRecordsetEx(request *AddDnsRecordsetRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddDnsRecordsetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddDnsRecordsetResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.dns.recordset.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除一条DNS记录
 * Summary: 删除一条DNS记录
 */
func (client *Client) DeleteDnsRecord(request *DeleteDnsRecordRequest) (_result *DeleteDnsRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteDnsRecordResponse{}
	_body, _err := client.DeleteDnsRecordEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除一条DNS记录
 * Summary: 删除一条DNS记录
 */
func (client *Client) DeleteDnsRecordEx(request *DeleteDnsRecordRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteDnsRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDnsRecordResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.dns.record.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询当前recordset
 * Summary: 查询当前recordset
 */
func (client *Client) QueryDnsRecordset(request *QueryDnsRecordsetRequest) (_result *QueryDnsRecordsetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDnsRecordsetResponse{}
	_body, _err := client.QueryDnsRecordsetEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询当前recordset
 * Summary: 查询当前recordset
 */
func (client *Client) QueryDnsRecordsetEx(request *QueryDnsRecordsetRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDnsRecordsetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDnsRecordsetResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.dns.recordset.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: workspace绑定指定DNS服务商
 * Summary: workspace绑定指定DNS服务商
 */
func (client *Client) BindDnsProvider(request *BindDnsProviderRequest) (_result *BindDnsProviderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BindDnsProviderResponse{}
	_body, _err := client.BindDnsProviderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: workspace绑定指定DNS服务商
 * Summary: workspace绑定指定DNS服务商
 */
func (client *Client) BindDnsProviderEx(request *BindDnsProviderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BindDnsProviderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BindDnsProviderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.dns.provider.bind"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取当前环境的DNS provider
 * Summary: 获取当前环境的DNS provider
 */
func (client *Client) ListDnsProvider(request *ListDnsProviderRequest) (_result *ListDnsProviderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListDnsProviderResponse{}
	_body, _err := client.ListDnsProviderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取当前环境的DNS provider
 * Summary: 获取当前环境的DNS provider
 */
func (client *Client) ListDnsProviderEx(request *ListDnsProviderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListDnsProviderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListDnsProviderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.dns.provider.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询当前环境资源供应商信息
 * Summary: 查询当前环境资源供应商信息
 */
func (client *Client) QueryProvider(request *QueryProviderRequest) (_result *QueryProviderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryProviderResponse{}
	_body, _err := client.QueryProviderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询当前环境资源供应商信息
 * Summary: 查询当前环境资源供应商信息
 */
func (client *Client) QueryProviderEx(request *QueryProviderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryProviderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryProviderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.provider.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取当前工作空间的DNSProvider
 * Summary: 获取当前工作空间的DNSProvider
 */
func (client *Client) GetDnsWorkspaceprovider(request *GetDnsWorkspaceproviderRequest) (_result *GetDnsWorkspaceproviderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetDnsWorkspaceproviderResponse{}
	_body, _err := client.GetDnsWorkspaceproviderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取当前工作空间的DNSProvider
 * Summary: 获取当前工作空间的DNSProvider
 */
func (client *Client) GetDnsWorkspaceproviderEx(request *GetDnsWorkspaceproviderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetDnsWorkspaceproviderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetDnsWorkspaceproviderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.dns.workspaceprovider.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: [异步]创建工作空间组，包括了VPC，交换机，单元化架构的一体化创建
 * Summary: [异步]创建工作空间组
 */
func (client *Client) CreateUniworkspacegroup(request *CreateUniworkspacegroupRequest) (_result *CreateUniworkspacegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateUniworkspacegroupResponse{}
	_body, _err := client.CreateUniworkspacegroupEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: [异步]创建工作空间组，包括了VPC，交换机，单元化架构的一体化创建
 * Summary: [异步]创建工作空间组
 */
func (client *Client) CreateUniworkspacegroupEx(request *CreateUniworkspacegroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateUniworkspacegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateUniworkspacegroupResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.uniworkspacegroup.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 导入一个中间件集群
 * Summary: 导入一个中间件集群
 */
func (client *Client) ImportMiddlewarecluster(request *ImportMiddlewareclusterRequest) (_result *ImportMiddlewareclusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ImportMiddlewareclusterResponse{}
	_body, _err := client.ImportMiddlewareclusterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 导入一个中间件集群
 * Summary: 导入一个中间件集群
 */
func (client *Client) ImportMiddlewareclusterEx(request *ImportMiddlewareclusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ImportMiddlewareclusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ImportMiddlewareclusterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.middlewarecluster.import"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询当前工作空间中间件集群
 * Summary: 查询当前工作空间中间件集群
 */
func (client *Client) QueryMiddlewarecluster(request *QueryMiddlewareclusterRequest) (_result *QueryMiddlewareclusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMiddlewareclusterResponse{}
	_body, _err := client.QueryMiddlewareclusterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询当前工作空间中间件集群
 * Summary: 查询当前工作空间中间件集群
 */
func (client *Client) QueryMiddlewareclusterEx(request *QueryMiddlewareclusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMiddlewareclusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMiddlewareclusterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.middlewarecluster.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 移除一个中间件集群
 * Summary: 移除一个中间件集群
 */
func (client *Client) RemoveMiddlewarecluster(request *RemoveMiddlewareclusterRequest) (_result *RemoveMiddlewareclusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RemoveMiddlewareclusterResponse{}
	_body, _err := client.RemoveMiddlewareclusterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 移除一个中间件集群
 * Summary: 移除一个中间件集群
 */
func (client *Client) RemoveMiddlewareclusterEx(request *RemoveMiddlewareclusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RemoveMiddlewareclusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveMiddlewareclusterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.middlewarecluster.remove"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 配额实例指的就是某个工作空间或者某个APP的关于某个资源的额度
 * Summary: 查询当前配额实例的额度
 */
func (client *Client) QueryQuotaInstance(request *QueryQuotaInstanceRequest) (_result *QueryQuotaInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryQuotaInstanceResponse{}
	_body, _err := client.QueryQuotaInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 配额实例指的就是某个工作空间或者某个APP的关于某个资源的额度
 * Summary: 查询当前配额实例的额度
 */
func (client *Client) QueryQuotaInstanceEx(request *QueryQuotaInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryQuotaInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryQuotaInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.quota.instance.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询单实例维度的配额实例信息,如果没有该维度实例时则会先创建该维度实例
 * Summary: 查询单实例维度的配额实例信息
 */
func (client *Client) QuerySingledimquotaInstance(request *QuerySingledimquotaInstanceRequest) (_result *QuerySingledimquotaInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySingledimquotaInstanceResponse{}
	_body, _err := client.QuerySingledimquotaInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询单实例维度的配额实例信息,如果没有该维度实例时则会先创建该维度实例
 * Summary: 查询单实例维度的配额实例信息
 */
func (client *Client) QuerySingledimquotaInstanceEx(request *QuerySingledimquotaInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySingledimquotaInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySingledimquotaInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.singledimquota.instance.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询限额对象，非限额实例。限额对象仅仅包含资源组合描述信息。请根据返回的QuotaId查询具体的实例信息
 * Summary: 查询限额对象
 */
func (client *Client) QueryQuota(request *QueryQuotaRequest) (_result *QueryQuotaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryQuotaResponse{}
	_body, _err := client.QueryQuotaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询限额对象，非限额实例。限额对象仅仅包含资源组合描述信息。请根据返回的QuotaId查询具体的实例信息
 * Summary: 查询限额对象
 */
func (client *Client) QueryQuotaEx(request *QueryQuotaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryQuotaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryQuotaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.quota.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 注意概念，额度对某个资源从哪些维度限定的数量，举个例子，给所有workspace都配置一个默认值，而非某个单独实例
 * Summary: 创建一个额度，用于某个维度的默认额度
 */
func (client *Client) CreateQuota(request *CreateQuotaRequest) (_result *CreateQuotaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateQuotaResponse{}
	_body, _err := client.CreateQuotaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 注意概念，额度对某个资源从哪些维度限定的数量，举个例子，给所有workspace都配置一个默认值，而非某个单独实例
 * Summary: 创建一个额度，用于某个维度的默认额度
 */
func (client *Client) CreateQuotaEx(request *CreateQuotaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateQuotaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateQuotaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.quota.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新维度配额，非维度实例，这个一般是全站级别的额度。
 * Summary: 更新维度配额
 */
func (client *Client) UpdateQuota(request *UpdateQuotaRequest) (_result *UpdateQuotaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateQuotaResponse{}
	_body, _err := client.UpdateQuotaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新维度配额，非维度实例，这个一般是全站级别的额度。
 * Summary: 更新维度配额
 */
func (client *Client) UpdateQuotaEx(request *UpdateQuotaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateQuotaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateQuotaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.quota.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建一个额度实例，用于某个维度实例，如果已经存在。返回已经存在。请用用这个接口查询当前额度
 * Summary: 创建一个额度实例，用于某个维度实例
 */
func (client *Client) FindcreateQuotaInstance(request *FindcreateQuotaInstanceRequest) (_result *FindcreateQuotaInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &FindcreateQuotaInstanceResponse{}
	_body, _err := client.FindcreateQuotaInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建一个额度实例，用于某个维度实例，如果已经存在。返回已经存在。请用用这个接口查询当前额度
 * Summary: 创建一个额度实例，用于某个维度实例
 */
func (client *Client) FindcreateQuotaInstanceEx(request *FindcreateQuotaInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *FindcreateQuotaInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &FindcreateQuotaInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.quota.instance.findcreate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新一个额度实例，用于某个维度实例
 * Summary: 更新一个额度实例，用于某个维度实例
 */
func (client *Client) UpdateQuotaInstance(request *UpdateQuotaInstanceRequest) (_result *UpdateQuotaInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateQuotaInstanceResponse{}
	_body, _err := client.UpdateQuotaInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新一个额度实例，用于某个维度实例
 * Summary: 更新一个额度实例，用于某个维度实例
 */
func (client *Client) UpdateQuotaInstanceEx(request *UpdateQuotaInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateQuotaInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateQuotaInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.quota.instance.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 检查额度是否够
 * Summary: 检查额度是否够
 */
func (client *Client) CheckQuota(request *CheckQuotaRequest) (_result *CheckQuotaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckQuotaResponse{}
	_body, _err := client.CheckQuotaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 检查额度是否够
 * Summary: 检查额度是否够
 */
func (client *Client) CheckQuotaEx(request *CheckQuotaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckQuotaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckQuotaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.quota.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建一个任务用Token，用于保证任务的幂等性
 * Summary: 创建一个任务用Token
 */
func (client *Client) OpenToken(request *OpenTokenRequest) (_result *OpenTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &OpenTokenResponse{}
	_body, _err := client.OpenTokenEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建一个任务用Token，用于保证任务的幂等性
 * Summary: 创建一个任务用Token
 */
func (client *Client) OpenTokenEx(request *OpenTokenRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *OpenTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &OpenTokenResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.token.open"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 同步当前数据库记录的额度与实际使用的额度
 * Summary: 同步当前数据库记录的额度与实际使用的额度
 */
func (client *Client) SyncQuotaInstance(request *SyncQuotaInstanceRequest) (_result *SyncQuotaInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SyncQuotaInstanceResponse{}
	_body, _err := client.SyncQuotaInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 同步当前数据库记录的额度与实际使用的额度
 * Summary: 同步当前数据库记录的额度与实际使用的额度
 */
func (client *Client) SyncQuotaInstanceEx(request *SyncQuotaInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SyncQuotaInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SyncQuotaInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.quota.instance.sync"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新某个开关
 * Summary: 更新某个开关
 */
func (client *Client) UpdateFeature(request *UpdateFeatureRequest) (_result *UpdateFeatureResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateFeatureResponse{}
	_body, _err := client.UpdateFeatureEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新某个开关
 * Summary: 更新某个开关
 */
func (client *Client) UpdateFeatureEx(request *UpdateFeatureRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateFeatureResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateFeatureResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.feature.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取当前系统配置项
 * Summary: 获取当前系统配置项
 */
func (client *Client) ListFeature(request *ListFeatureRequest) (_result *ListFeatureResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListFeatureResponse{}
	_body, _err := client.ListFeatureEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取当前系统配置项
 * Summary: 获取当前系统配置项
 */
func (client *Client) ListFeatureEx(request *ListFeatureRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListFeatureResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListFeatureResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("antcloud.cas.feature.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}
