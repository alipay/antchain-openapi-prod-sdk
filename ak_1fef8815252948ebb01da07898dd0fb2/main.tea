import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.2',
    _prod_code = 'ak_1fef8815252948ebb01da07898dd0fb2',
    _prod_channel = 'saas'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 键值对，兼容map用
model NameValuePair {
  // 键名
  name: string(name='name', example='key'),
  // 键值
  value: string(name='value', example='value'),
}

// 规则明细
model RuleDetail {
  // 项目类别
  type: string(name='type', example='类型'),
  // 领域
  fieId: string(name='fie_id', example='领域'),
  // 级别
  level: string(name='level', example='级别'),
  // 资质
  qualifications: string(name='qualifications', example='资质'),
  // 保定报价
  priceBd: long(name='price_bd', example='保定报价'),
  // 离岸价格
  fobPrice: long(name='fob_price', example='离岸价格'),
  // 离岸价格
  priceTj: long(name='price_tj', example='离岸价格'),
  // 北京报价
  priceBj: long(name='price_bj', example='北京报价'),
  // 最少提供人数
  numpeople: long(name='numpeople', example=''),
}

// 对账单
model Reconciliation {
  // 供应商
  supCode: string(name='sup_code', example='A'),
  // 供应商名称
  supName: string(name='sup_name', example='供应商A'),
  // 结算金额(单位分)
  settlementAmount: long(name='settlement_amount', example='结算金额(单位分)'),
  // 长城确认时间
  confirmDateGw: string(name='confirm_date_gw', example='2021-03-17'),
  // 长城方确认人
  confirmerGw: string(name='confirmer_gw', example='长城方确认人'),
  // 长城确认状态
  confirmStateGw: string(name='confirm_state_gw', example='确认状态'),
  // 服务方确认时间
  confirmDateSup: string(name='confirm_date_sup', example='2021-03-17'),
  // 服务方确认人
  confirmerSup: string(name='confirmer_sup', example='服务方确认人'),
  // 服务方确认状态
  confirmStateSup: string(name='confirm_state_sup', example='服务方确认状态'),
  // 计算时间
  socreDate: string(name='socre_date', example='计算时间'),
}

// 客户认证结果
model CustomerAuthResult {
  // 账户ID
  accId?: string(name='acc_id', example='xxx'),
  // 返回code 0:核验成功 1:企业信息有误 2:企业非正常营业
  code: string(name='code', example='0'),
  // 客户ID
  customerId?: string(name='customer_id', example='xxx'),
  // 客户did
  did?: string(name='did', example='xxx'),
  // 验证状态
  enterpriseStatus?: string(name='enterprise_status', example='营业'),
  // 开业时间
  openTime: string(name='open_time', example='2019-09-27/长期'),
  // 认证结果，是否通过
  pass: boolean(name='pass', example='true, false'),
  // 业务ID
  disReqMsgId?: string(name='dis_req_msg_id', example='xxx'),
}

// 查询功能所用集合
model QueryMap {
  // 查询枚举：QueryTypeEnum
  name: string(name='name', example='BUSINESS_INFO'),
  // 查询参数
  value?: [ NameValuePair ](name='value', example=''),
}

// 供应商
model SpProvider {
  // 供应商编号
  supCode: string(name='sup_code', example='S0001'),
  // 供应商名称
  supName: string(name='sup_name', example='供应商A'),
  // 文件名称
  fileName: string(name='file_name', example='文件名称'),
  // 文件code
  fileCode: string(name='file_code', example='外包协议-1614838961'),
  // hash的值
  hashCode: string(name='hash_code', example='80asd4515efd54gr4aw124d'),
  // 开始时间
  startDate: string(name='start_date', example='2021-03-17'),
  // 结束日期
  closingDate: string(name='closing_date', example='2022-03-17'),
  // 文件路径
  filePath: string(name='file_path', example='G:/foder2'),
  // 2021-03-04 11:16:23
  createDate: string(name='create_date', example='创建时间'),
  // 创建者
  creator: string(name='creator', example='管理员'),
}

model AuthAntchainBbpCustomerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 预留业务code
  bizCode?: string(name='biz_code'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业证件号码
  epCertNo: string(name='ep_cert_no'),
  // 企业证件号码类型，枚举值参考：com.alipay.fc.common.lang.enums.CertTypeEnum
  epCertNoType: string(name='ep_cert_no_type'),
  // 法人姓名
  legalPersonCertName?: string(name='legal_person_cert_name'),
  // 法人证件号码
  legalPersonCertNo?: string(name='legal_person_cert_no'),
  // 法人证件号码类型，枚举值参考：com.alipay.fc.common.lang.enums.CertTypeEnum	
  // 
  legalPersonCertNoType?: string(name='legal_person_cert_no_type'),
  // 系统名称
  ownerName?: string(name='owner_name'),
  // 系统租户ID
  ownerUid?: string(name='owner_uid'),
  // 业务唯一ID
  bizId: string(name='biz_id'),
  // 业务渠道，需提前申请产品码
  channel: string(name='channel'),
  // 认证类型：ENTERPRISE-企业, PERSON-个人
  certifyEnum: string(name='certify_enum'),
  // 客户支付宝ID，如有则填。
  alipayUid?: string(name='alipay_uid'),
  // 个人姓名，用于个人认证
  personName?: string(name='person_name'),
  // 个人证件号码
  personCertNo?: string(name='person_cert_no'),
  // 个人证件类型，枚举值参考：com.alipay.fc.common.lang.enums.CertTypeEnum
  personCertType?: string(name='person_cert_type'),
  // 扩展信息
  extensionInfo?: [ NameValuePair ](name='extension_info'),
}

model AuthAntchainBbpCustomerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 客户认证结果
  result?: CustomerAuthResult(name='result'),
}

/**
 * Description: 对企业/个人进行身份认证
 * Summary: 统一客户认证接口
 */
async function authAntchainBbpCustomer(request: AuthAntchainBbpCustomerRequest): AuthAntchainBbpCustomerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return authAntchainBbpCustomerEx(request, headers, runtime);
}

/**
 * Description: 对企业/个人进行身份认证
 * Summary: 统一客户认证接口
 */
async function authAntchainBbpCustomerEx(request: AuthAntchainBbpCustomerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AuthAntchainBbpCustomerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.customer.auth', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAntchainBbpCustomerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务渠道，需提前申请产品码
  bizCode: string(name='biz_code'),
  // 客户类型：ENTERPRISE-企业, PERSON-个人
  // 
  customerType: string(name='customer_type'),
  // 客户名称
  name: string(name='name'),
  // 客户证件号码，企业/个人均可
  certNo: string(name='cert_no'),
  // 客户证件号码类型，枚举值参考：com.alipay.fc.common.lang.enums.CertTypeEnum
  certType: string(name='cert_type'),
  // 法人姓名
  // 
  legalPersonCertName?: string(name='legal_person_cert_name'),
  // 法人证件号码
  // 
  legalPersonCertNo?: string(name='legal_person_cert_no'),
  // 法人证件号码类型，枚举值参考：com.alipay.fc.common.lang.enums.CertTypeEnum
  legalPersonCertNoType: string(name='legal_person_cert_no_type'),
  // 是否需要先认证再注册，默认不认证。
  isAuth: boolean(name='is_auth'),
  // 业务角色： 买方，卖方，机构，合作伙伴
  businessRole?: string(name='business_role'),
  // 客户支付宝ID，如有则填。
  alipayUid?: string(name='alipay_uid'),
}

model CreateAntchainBbpCustomerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 统一客户ID
  customerId?: string(name='customer_id'),
  // 统一账户ID
  accId?: string(name='acc_id'),
  // 客户认证结果
  authFourElementsResponse?: CustomerAuthResult(name='auth_four_elements_response'),
}

/**
 * Description: 智科统一客户注册
 * Summary: 统一客户注册接口
 */
async function createAntchainBbpCustomer(request: CreateAntchainBbpCustomerRequest): CreateAntchainBbpCustomerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAntchainBbpCustomerEx(request, headers, runtime);
}

/**
 * Description: 智科统一客户注册
 * Summary: 统一客户注册接口
 */
async function createAntchainBbpCustomerEx(request: CreateAntchainBbpCustomerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAntchainBbpCustomerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.customer.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAntchainBbpCustomerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询内容
  conditionMap: [ QueryMap ](name='condition_map'),
}

model QueryAntchainBbpCustomerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询结果
  result?: [ NameValuePair ](name='result'),
}

/**
 * Description: 客户信息查询
 * Summary: 客户信息查询
 */
async function queryAntchainBbpCustomer(request: QueryAntchainBbpCustomerRequest): QueryAntchainBbpCustomerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAntchainBbpCustomerEx(request, headers, runtime);
}

/**
 * Description: 客户信息查询
 * Summary: 客户信息查询
 */
async function queryAntchainBbpCustomerEx(request: QueryAntchainBbpCustomerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAntchainBbpCustomerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.customer.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyAntchainBbpContractRuleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务提供商
  spProvider: SpProvider(name='sp_provider'),
  // 明细
  ruleDetails: [ RuleDetail ](name='rule_details'),
  // confirmer
  confirmer: string(name='confirmer'),
  // 确认时间
  confirmDate: string(name='confirm_date'),
  // confirm_status
  confirmStatus: string(name='confirm_status'),
}

model ApplyAntchainBbpContractRuleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 定义外包的薪资方案接口,以【服务商、项目类别、领域、角色、资质】为unique
 * Summary: 外包薪资规则合约发布接口
 */
async function applyAntchainBbpContractRule(request: ApplyAntchainBbpContractRuleRequest): ApplyAntchainBbpContractRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyAntchainBbpContractRuleEx(request, headers, runtime);
}

/**
 * Description: 定义外包的薪资方案接口,以【服务商、项目类别、领域、角色、资质】为unique
 * Summary: 外包薪资规则合约发布接口
 */
async function applyAntchainBbpContractRuleEx(request: ApplyAntchainBbpContractRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyAntchainBbpContractRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.contract.rule.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAntchainBbpContractRuleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务商code
  supCode: string(name='sup_code'),
}

model GetAntchainBbpContractRuleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 服务商
  spProvider?: SpProvider(name='sp_provider'),
  // 规则明细
  ruleDetails?: [ RuleDetail ](name='rule_details'),
  // 确认人
  confirmer?: string(name='confirmer'),
  // 确认状态
  confirmStatus?: string(name='confirm_status'),
  // 确认时间
  confirmDate?: string(name='confirm_date'),
}

/**
 * Description: 调用链上合约接口，查询外包的薪资方案

 * Summary: 外包薪资规则合约查询接口
 */
async function getAntchainBbpContractRule(request: GetAntchainBbpContractRuleRequest): GetAntchainBbpContractRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAntchainBbpContractRuleEx(request, headers, runtime);
}

/**
 * Description: 调用链上合约接口，查询外包的薪资方案

 * Summary: 外包薪资规则合约查询接口
 */
async function getAntchainBbpContractRuleEx(request: GetAntchainBbpContractRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAntchainBbpContractRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.contract.rule.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecAntchainBbpContractReconciliationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 供应商
  supCode: string(name='sup_code'),
  // 结算时间
  scoreDate: string(name='score_date'),
}

model ExecAntchainBbpContractReconciliationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结算单
  reconciliation?: Reconciliation(name='reconciliation'),
}

/**
 * Description: 对账单执行
 * Summary: 对账单执行接口
 */
async function execAntchainBbpContractReconciliation(request: ExecAntchainBbpContractReconciliationRequest): ExecAntchainBbpContractReconciliationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execAntchainBbpContractReconciliationEx(request, headers, runtime);
}

/**
 * Description: 对账单执行
 * Summary: 对账单执行接口
 */
async function execAntchainBbpContractReconciliationEx(request: ExecAntchainBbpContractReconciliationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecAntchainBbpContractReconciliationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.contract.reconciliation.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmAntchainBbpContractReconciliationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务商
  supCode: string(name='sup_code'),
  // 确认时间
  socreDate: string(name='socre_date'),
  // 确认类型：1、长城  2、服务方
  confirmType: string(name='confirm_type'),
  // 确认者
  confirmer: string(name='confirmer'),
  // 认证状态
  confirmStatus: string(name='confirm_status'),
}

model ConfirmAntchainBbpContractReconciliationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结算单
  reconciliation?: Reconciliation(name='reconciliation'),
}

/**
 * Description: 结算单确认
 * Summary: 结算单确认
 */
async function confirmAntchainBbpContractReconciliation(request: ConfirmAntchainBbpContractReconciliationRequest): ConfirmAntchainBbpContractReconciliationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmAntchainBbpContractReconciliationEx(request, headers, runtime);
}

/**
 * Description: 结算单确认
 * Summary: 结算单确认
 */
async function confirmAntchainBbpContractReconciliationEx(request: ConfirmAntchainBbpContractReconciliationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmAntchainBbpContractReconciliationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.contract.reconciliation.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAntchainBbpContractReconciliationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 供应商code
  supCode: string(name='sup_code'),
  // 月份
  scoreDates: [ string ](name='score_dates'),
}

model QueryAntchainBbpContractReconciliationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结算单
  reconciliations?: [ Reconciliation ](name='reconciliations'),
}

/**
 * Description: 查询结算单
 * Summary: 查询结算单
 */
async function queryAntchainBbpContractReconciliation(request: QueryAntchainBbpContractReconciliationRequest): QueryAntchainBbpContractReconciliationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAntchainBbpContractReconciliationEx(request, headers, runtime);
}

/**
 * Description: 查询结算单
 * Summary: 查询结算单
 */
async function queryAntchainBbpContractReconciliationEx(request: QueryAntchainBbpContractReconciliationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAntchainBbpContractReconciliationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.contract.reconciliation.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDemoSaasTestTestaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 张三
  name: string(name='name'),
  // 12
  age: long(name='age'),
}

model QueryDemoSaasTestTestaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 男
  sex?: string(name='sex'),
}

/**
 * Description: testa
 * Summary: 测试用api
 */
async function queryDemoSaasTestTesta(request: QueryDemoSaasTestTestaRequest): QueryDemoSaasTestTestaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDemoSaasTestTestaEx(request, headers, runtime);
}

/**
 * Description: testa
 * Summary: 测试用api
 */
async function queryDemoSaasTestTestaEx(request: QueryDemoSaasTestTestaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDemoSaasTestTestaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.saas.test.testa.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ResetDemoSaasTestTestdRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // test
  name: string(name='name'),
}

model ResetDemoSaasTestTestdResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // test
  age?: string(name='age'),
}

/**
 * Description: 共享能力租户流量测试
 * Summary: 共享能力租户流量测试
 */
async function resetDemoSaasTestTestd(request: ResetDemoSaasTestTestdRequest): ResetDemoSaasTestTestdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return resetDemoSaasTestTestdEx(request, headers, runtime);
}

/**
 * Description: 共享能力租户流量测试
 * Summary: 共享能力租户流量测试
 */
async function resetDemoSaasTestTestdEx(request: ResetDemoSaasTestTestdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ResetDemoSaasTestTestdResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.saas.test.testd.reset', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

