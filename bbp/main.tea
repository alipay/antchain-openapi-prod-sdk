import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.7.28',
    _prod_code = 'BBP',
    _prod_channel = 'undefined'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 键值对，兼容map用
model NameValuePair {
  // 键名
  name: string(name='name', example='key'),
  // 键值
  value: string(name='value', example='value'),
}

// 授权列表键值对
model AuthorizeRecordsPairs {
  // 授权业务
  authBusinessCode: string(name='auth_business_code', example='TIANMAO_CHONGWU'),
  // 授权密钥
  authBusinessSecret: string(name='auth_business_secret', example='klj;lsdkjfaf'),
}

// 核身产品
model GwValidateProduct {
  // 核审产品码，支持多种核身产品。
  // ZK_FACE_VERIFY：人脸识别
  productCode: string(name='product_code', example='ZK_FACE_VERIFY'),
  // 产品渲染方式：H5、NATIVE 或 PC
  group: string(name='group', example='H5、NATIVE 或 PC'),
  // 核身产品参数，因网关限制，暂只支持Map<String,String>
  productParams?: [ NameValuePair ](name='product_params', example=''),
}

// 规则明细
model RuleDetail {
  // 项目类别
  type: string(name='type', example='类型'),
  // 领域
  fieId: string(name='fie_id', example='领域'),
  // 级别
  level: string(name='level', example='级别'),
  // 资质
  qualifications: string(name='qualifications', example='资质'),
  // 保定报价
  priceBd: long(name='price_bd', example='保定报价'),
  // 离岸价格
  fobPrice: long(name='fob_price', example='离岸价格'),
  // 离岸价格
  priceTj: long(name='price_tj', example='离岸价格'),
  // 北京报价
  priceBj: long(name='price_bj', example='北京报价'),
  // 最少提供人数
  numpeople: long(name='numpeople', example=''),
}

// 对账单
model Reconciliation {
  // 供应商
  supCode: string(name='sup_code', example='A'),
  // 供应商名称
  supName: string(name='sup_name', example='供应商A'),
  // 结算金额(单位分)
  settlementAmount: long(name='settlement_amount', example='结算金额(单位分)'),
  // 长城确认时间
  confirmDateGw: string(name='confirm_date_gw', example='2021-03-17'),
  // 长城方确认人
  confirmerGw: string(name='confirmer_gw', example='长城方确认人'),
  // 长城确认状态
  confirmStateGw: string(name='confirm_state_gw', example='确认状态'),
  // 服务方确认时间
  confirmDateSup: string(name='confirm_date_sup', example='2021-03-17'),
  // 服务方确认人
  confirmerSup: string(name='confirmer_sup', example='服务方确认人'),
  // 服务方确认状态
  confirmStateSup: string(name='confirm_state_sup', example='服务方确认状态'),
  // 计算时间
  socreDate: string(name='socre_date', example='计算时间'),
}

// 客户认证结果
model CustomerAuthResult {
  // 账户ID
  accId?: string(name='acc_id', example='xxx'),
  // 返回code 0:核验成功 1:企业信息有误 2:企业非正常营业
  code: string(name='code', example='0'),
  // 客户ID
  customerId?: string(name='customer_id', example='xxx'),
  // 客户did
  did?: string(name='did', example='xxx'),
  // 验证状态
  enterpriseStatus?: string(name='enterprise_status', example='营业'),
  // 开业时间
  openTime: string(name='open_time', example='2019-09-27/长期'),
  // 认证结果，是否通过
  pass: boolean(name='pass', example='true, false'),
  // 业务ID
  disReqMsgId?: string(name='dis_req_msg_id', example='xxx'),
}

// 业务授权列表键值对
model BusinessRecordsPairs {
  // 业务编码
  businessCode: string(name='business_code', example='TIANMAO_CHONGWU'),
  // 业务公钥
  publicKey: string(name='public_key', example='klj;lsdkjfaf'),
}

// 供应商
model SpProvider {
  // 供应商编号
  supCode: string(name='sup_code', example='S0001'),
  // 供应商名称
  supName: string(name='sup_name', example='供应商A'),
  // 文件名称
  fileName: string(name='file_name', example='文件名称'),
  // 文件code
  fileCode: string(name='file_code', example='外包协议-1614838961'),
  // hash的值
  hashCode: string(name='hash_code', example='80asd4515efd54gr4aw124d'),
  // 开始时间
  startDate: string(name='start_date', example='2021-03-17'),
  // 结束日期
  closingDate: string(name='closing_date', example='2022-03-17'),
  // 文件路径
  filePath: string(name='file_path', example='G:/foder2'),
  // 2021-03-04 11:16:23
  createDate: string(name='create_date', example='创建时间'),
  // 创建者
  creator: string(name='creator', example='管理员'),
}

// 考核信息
model Assessment {
  // 供应商
  supCode: string(name='sup_code', example='供应商A'),
  // 供应商B
  supName: string(name='sup_name', example='供应商A'),
  // 员工号
  jobNumber: string(name='job_number', example='S0001'),
  // 员工姓名
  name?: string(name='name', example='张三'),
  // 考核分数
  assessmentNum: long(name='assessment_num', example='90'),
  // 级别
  level: string(name='level', example='级别'),
  // 创建时间
  createDate: string(name='create_date', example='2021-03-04 11:16:23'),
  // 管理员
  creator?: string(name='creator', example='管理员'),
  // 202103
  scoreDate: string(name='score_date', example='202103'),
  // 结果状态
  resultstate: string(name='resultstate', example='1'),
  // 工作地点
  workplace?: string(name='workplace', example='工作地点'),
  // 状态更新时间
  resultdate: string(name='resultdate', example='2021-03-06 11:16:23'),
  // 确认人
  resultby: string(name='resultby', example='确认人'),
  // 备注
  remark?: string(name='remark', example='备注'),
}

// 查询功能所用集合
model QueryMap {
  // 查询枚举：QueryTypeEnum
  name: string(name='name', example='BUSINESS_INFO'),
  // 查询参数
  value?: [ NameValuePair ](name='value', example=''),
}

// 用户宠物保单信息模型
model InsuranceRecordModel {
  // 保司编码
  mechanismCode: string(name='mechanism_code', example='test'),
  // 保单号
  policyNo: string(name='policy_no', example='test'),
  // 保险产品SKU
  thirdPartSku?: string(name='third_part_sku', example='test'),
  // 保司机构名称
  mechanismName?: string(name='mechanism_name', example='test'),
  // 保险类型
  insuranceType: string(name='insurance_type', example='test'),
  // 用户ID，天猫uid
  sourceUid: string(name='source_uid', example='test'),
  // 渠道来源 TIANMAO（天猫）
  source: string(name='source', example='test'),
  // 用户类型 PERSON
  userType: string(name='user_type', example='test'),
  // 扩展信息 （保单附件路径）
  extend?: string(name='extend', example='test'),
  // 保单生效时间
  policyEffectTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='policy_effect_time', example='test'),
  // 保单失效时间
  policyInvalidTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='policy_invalid_time', example='test'),
  // 订单总金额 单位为分
  policyTotalAmount: long(name='policy_total_amount', example='test'),
  // 保费支付日期
  policyPayDate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='policy_pay_date', example='test'),
  // 保单支付总期数
  policyTotalStage: long(name='policy_total_stage', example='test'),
  // 每期支付金额
  policyStageAverAmount?: long(name='policy_stage_aver_amount', example='test'),
  // 保单已支付期数
  policyPaidStage?: long(name='policy_paid_stage', example='test'),
  // 订单时间
  orderTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='order_time', example='test'),
  // 活动码 赠险/商业险
  activityCode?: string(name='activity_code', example='test'),
  // 授权类型 0 非授权 1 授权
  authorizationType: long(name='authorization_type', example='test'),
}

// 考勤信息
model Attendance {
  // 供应商编码
  supCode: string(name='sup_code', example='A'),
  // 供应商A
  supName?: string(name='sup_name', example='供应商A'),
  // 员工编号
  jobNumber: string(name='job_number', example='S0001'),
  // 名字
  name?: string(name='name', example='张三'),
  // 考勤信息
  attendanceNum: long(name='attendance_num', example='24'),
  // 级别
  level?: string(name='level', example='级别'),
  // 创建时间
  createDate: string(name='create_date', example='2021-03-04 11:16:23'),
  // 创建者
  creator?: string(name='creator', example='创建者'),
  // 时间
  scoreDate: string(name='score_date', example='202103'),
  // 结果状态
  resultstate?: string(name='resultstate', example='结果状态'),
  // 工作地点
  workplace?: string(name='workplace', example='工作地点'),
  // 结果时间
  resultdate?: string(name='resultdate', example='2021-03-06 11:16:23'),
  // 确认人
  resultby?: string(name='resultby', example='确认人'),
  // 备注
  remark?: string(name='remark', example='备注'),
}

// 核身渲染结果
model GwVerifyViewResult {
  // 核身上下文id
  verifyId: string(name='verify_id', example='xx'),
  // 核审产品码，支持多种核身产品。 ZK_FACE_VERIFY：人脸识别
  productCode: string(name='product_code', example='ZK_FACE_VERIFY'),
  // 核身分组
  group: string(name='group', example='PC'),
  // 返回结果
  responseParams: [ NameValuePair ](name='response_params', example=''),
  // 核身渲染是否调用成功
  success: boolean(name='success', example='true, false'),
  // 返回码
  resultCode?: string(name='result_code', example='xxx'),
  // 返回信息
  resultMsg?: string(name='result_msg', example='xxx'),
}

// 核审场景
model GwVerifyScene {
  // 调用方系统名
  systemName: string(name='system_name', example='appname'),
  // 业务方产品
  bizProduct: string(name='biz_product', example='product'),
  // 业务产品节点
  bizProdNode: string(name='biz_prod_node', example='node'),
  // 业务接入渠道
  accessChannel: string(name='access_channel', example='web'),
  // 业务调用场景的语言版本、CHINESE("中文", "chi")、ENG("英文", "en")
  language: string(name='language', example='chi'),
}

// 键值对
model XNameValuePair {
  // 键名
  name: string(name='name', example='key'),
  // 键值
  value: string(name='value', example='value'),
}

model AuthCustomerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 预留业务code
  bizCode?: string(name='biz_code'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业证件号码
  epCertNo: string(name='ep_cert_no'),
  // 企业证件号码类型，枚举值参考：com.alipay.fc.common.lang.enums.CertTypeEnum
  epCertNoType: string(name='ep_cert_no_type'),
  // 法人姓名
  legalPersonCertName?: string(name='legal_person_cert_name'),
  // 法人证件号码
  legalPersonCertNo?: string(name='legal_person_cert_no'),
  // 法人证件号码类型，枚举值参考：com.alipay.fc.common.lang.enums.CertTypeEnum	
  // 
  legalPersonCertNoType?: string(name='legal_person_cert_no_type'),
  // 系统名称
  ownerName?: string(name='owner_name'),
  // 系统租户ID
  ownerUid?: string(name='owner_uid'),
  // 业务唯一ID
  bizId: string(name='biz_id'),
  // 业务渠道，需提前申请产品码
  channel: string(name='channel'),
  // 认证类型：ENTERPRISE-企业, PERSON-个人
  certifyEnum: string(name='certify_enum'),
  // 客户支付宝ID，如有则填。
  alipayUid?: string(name='alipay_uid'),
  // 个人姓名，用于个人认证
  personName?: string(name='person_name'),
  // 个人证件号码
  personCertNo?: string(name='person_cert_no'),
  // 个人证件类型，枚举值参考：com.alipay.fc.common.lang.enums.CertTypeEnum
  personCertType?: string(name='person_cert_type'),
  // 扩展信息
  extensionInfo?: [ NameValuePair ](name='extension_info'),
}

model AuthCustomerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 客户认证结果
  result?: CustomerAuthResult(name='result'),
}

/**
 * Description: 对企业/个人进行身份认证
 * Summary: 统一客户认证接口
 */
async function authCustomer(request: AuthCustomerRequest): AuthCustomerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return authCustomerEx(request, headers, runtime);
}

/**
 * Description: 对企业/个人进行身份认证
 * Summary: 统一客户认证接口
 */
async function authCustomerEx(request: AuthCustomerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AuthCustomerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.customer.auth', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCustomerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务渠道，需提前申请产品码
  bizCode: string(name='biz_code'),
  // 客户类型：ENTERPRISE-企业, PERSON-个人
  // 
  customerType: string(name='customer_type'),
  // 客户名称
  name: string(name='name'),
  // 客户证件号码，企业/个人均可
  certNo: string(name='cert_no'),
  // 客户证件号码类型，枚举值参考：com.alipay.fc.common.lang.enums.CertTypeEnum
  certType: string(name='cert_type'),
  // 法人姓名
  // 
  legalPersonCertName?: string(name='legal_person_cert_name'),
  // 法人证件号码
  // 
  legalPersonCertNo?: string(name='legal_person_cert_no'),
  // 法人证件号码类型，枚举值参考：com.alipay.fc.common.lang.enums.CertTypeEnum
  legalPersonCertNoType: string(name='legal_person_cert_no_type'),
  // 是否需要先认证再注册，默认不认证。
  isAuth: boolean(name='is_auth'),
  // 业务角色： 买方，卖方，机构，合作伙伴
  businessRole?: string(name='business_role'),
  // 客户支付宝ID，如有则填。
  alipayUid?: string(name='alipay_uid'),
}

model CreateCustomerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 统一客户ID
  customerId?: string(name='customer_id'),
  // 统一账户ID
  accId?: string(name='acc_id'),
  // 客户认证结果
  authFourElementsResponse?: CustomerAuthResult(name='auth_four_elements_response'),
}

/**
 * Description: 智科统一客户注册
 * Summary: 统一客户注册接口
 */
async function createCustomer(request: CreateCustomerRequest): CreateCustomerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCustomerEx(request, headers, runtime);
}

/**
 * Description: 智科统一客户注册
 * Summary: 统一客户注册接口
 */
async function createCustomerEx(request: CreateCustomerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCustomerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.customer.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCustomerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询内容
  conditionMap: [ QueryMap ](name='condition_map'),
}

model QueryCustomerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询结果
  result?: [ NameValuePair ](name='result'),
}

/**
 * Description: 客户信息查询
 * Summary: 客户信息查询
 */
async function queryCustomer(request: QueryCustomerRequest): QueryCustomerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCustomerEx(request, headers, runtime);
}

/**
 * Description: 客户信息查询
 * Summary: 客户信息查询
 */
async function queryCustomerEx(request: QueryCustomerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCustomerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.customer.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitVerifyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 接入场景（主要由接入系统、接入产品、产品节点三部分组成）
  verifyScene: GwVerifyScene(name='verify_scene'),
  // 调用方传入，唯一标识一笔业务，核身平台将bizId与核身token进行绑定，用作防串改校验
  bizId: string(name='biz_id'),
  // 调用方传入，存放业务扩展参数（callback参数也写入此）
  externParams?: [ NameValuePair ](name='extern_params'),
  // 调用方传入，指定核身完成后的回调类型
  callbackEnum?: string(name='callback_enum'),
  // 核身产品列表
  validateFlows: [ GwValidateProduct ](name='validate_flows'),
}

model InitVerifyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 核身id
  verifyId?: string(name='verify_id'),
  // 核身请求地址url
  verifyUrl?: string(name='verify_url'),
  // 核身处理状态:INITIAL、PROCESSING、SUCCESS、EXPIRED、FAIL
  verifyStatus?: string(name='verify_status'),
  // 可用产品集合
  validProd?: [ GwValidateProduct ](name='valid_prod'),
}

/**
 * Description: 核身初始化接口
 * Summary: 核身初始化接口
 */
async function initVerify(request: InitVerifyRequest): InitVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initVerifyEx(request, headers, runtime);
}

/**
 * Description: 核身初始化接口
 * Summary: 核身初始化接口
 */
async function initVerifyEx(request: InitVerifyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitVerifyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.verify.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartVerifyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 核身上下文id
  verifyId: string(name='verify_id'),
  // 核身模块分组
  group: string(name='group'),
  // 核身动作：view-渲染，verify-校验，repeat-重新发送
  productAction: string(name='product_action'),
  // 业务id
  bizId: string(name='biz_id'),
}

model StartVerifyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 核身渲染结果
  result?: [ GwVerifyViewResult ](name='result'),
}

/**
 * Description: 核身产品渲染接口
 * Summary: 核身产品渲染接口
 */
async function startVerify(request: StartVerifyRequest): StartVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startVerifyEx(request, headers, runtime);
}

/**
 * Description: 核身产品渲染接口
 * Summary: 核身产品渲染接口
 */
async function startVerifyEx(request: StartVerifyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartVerifyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.verify.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckVerifyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 核身上下文id
  verifyId: string(name='verify_id'),
  // 核身模块分组
  group: string(name='group'),
  // 核身动作：view-渲染，verify-校验，repeat-重新发送
  productAction: string(name='product_action'),
  // 业务id
  bizId: string(name='biz_id'),
  // 核身产品码
  productCode: string(name='product_code'),
}

model CheckVerifyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 核身结果枚举：PASS-核身成功，INITIAL-初始化，PROCESS-处理中，FAIL-失败
  status?: string(name='status'),
}

/**
 * Description: 核身结果查询
 * Summary: 核身结果查询
 */
async function checkVerify(request: CheckVerifyRequest): CheckVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkVerifyEx(request, headers, runtime);
}

/**
 * Description: 核身结果查询
 * Summary: 核身结果查询
 */
async function checkVerifyEx(request: CheckVerifyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckVerifyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.verify.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyMetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 预留业务code
  bizCode?: string(name='biz_code'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业证件号码
  epCertNo: string(name='ep_cert_no'),
  // 企业证件号码类型，枚举值参考：com.alipay.fc.common.lang.enums.CertTypeEnum
  epCertNoType: string(name='ep_cert_no_type'),
  // 法人姓名
  legalPersonCertName?: string(name='legal_person_cert_name'),
  // 法人证件号码
  legalPersonCertNo?: string(name='legal_person_cert_no'),
  // 法人证件号码类型，枚举值参考：com.alipay.fc.common.lang.enums.CertTypeEnum
  legalPersonCertNoType?: string(name='legal_person_cert_no_type'),
  // 系统名称
  ownerName?: string(name='owner_name'),
  // 系统租户ID
  ownerUid?: string(name='owner_uid'),
  // 业务唯一ID
  bizId: string(name='biz_id'),
  // 业务渠道，需提前申请产品码
  channel: string(name='channel'),
  // 认证类型：ENTERPRISE-企业, PERSON-个人
  certifyEnum: string(name='certify_enum'),
  // 客户支付宝ID
  alipayUid?: string(name='alipay_uid'),
  // 个人姓名，用于个人认证
  personName?: string(name='person_name'),
  // 个人证件号码
  personCertNo?: string(name='person_cert_no'),
  // 个人证件类型，枚举值参考：com.alipay.fc.common.lang.enums.CertTypeEnum
  personCertType?: string(name='person_cert_type'),
  // 扩展信息
  extensionInfo?: NameValuePair(name='extension_info'),
}

model VerifyMetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 要素认证结果
  result?: CustomerAuthResult(name='result'),
}

/**
 * Description: 对企业身份进行认证
 * Summary: 企业四要素认证
 */
async function verifyMeta(request: VerifyMetaRequest): VerifyMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyMetaEx(request, headers, runtime);
}

/**
 * Description: 对企业身份进行认证
 * Summary: 企业四要素认证
 */
async function verifyMetaEx(request: VerifyMetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyMetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.meta.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryEnterpriseBusinessinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  bizCode: string(name='biz_code'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业唯一编码
  epCertNo: string(name='ep_cert_no'),
}

model QueryEnterpriseBusinessinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 签名之后的结果
  signature?: string(name='signature'),
  // 国民经济行业代码
  industryCode?: string(name='industry_code'),
  // 国民经济行业名称
  industryName?: string(name='industry_name'),
  // 行业门类代码
  industryPhyCode?: string(name='industry_phy_code'),
  // 行业门类名称
  industryPhyName?: string(name='industry_phy_name'),
}

/**
 * Description: 经营信息查询
 * Summary: 经营信息查询
 */
async function queryEnterpriseBusinessinfo(request: QueryEnterpriseBusinessinfoRequest): QueryEnterpriseBusinessinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryEnterpriseBusinessinfoEx(request, headers, runtime);
}

/**
 * Description: 经营信息查询
 * Summary: 经营信息查询
 */
async function queryEnterpriseBusinessinfoEx(request: QueryEnterpriseBusinessinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryEnterpriseBusinessinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.enterprise.businessinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGwtestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 超时时间 毫秒
  timeout?: long(name='timeout'),
}

model QueryGwtestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果码
  stauts?: string(name='stauts'),
}

/**
 * Description: 网关测试
 * Summary: 网关测试
 */
async function queryGwtest(request: QueryGwtestRequest): QueryGwtestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGwtestEx(request, headers, runtime);
}

/**
 * Description: 网关测试
 * Summary: 网关测试
 */
async function queryGwtestEx(request: QueryGwtestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGwtestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.gwtest.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyContractRuleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务提供商
  spProvider: SpProvider(name='sp_provider'),
  // 明细
  ruleDetails: [ RuleDetail ](name='rule_details'),
  // confirmer
  confirmer: string(name='confirmer'),
  // 确认时间
  confirmDate: string(name='confirm_date'),
  // confirm_status
  confirmStatus: string(name='confirm_status'),
}

model ApplyContractRuleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 定义外包的薪资方案接口,以【服务商、项目类别、领域、角色、资质】为unique
 * Summary: 外包薪资规则合约发布接口
 */
async function applyContractRule(request: ApplyContractRuleRequest): ApplyContractRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyContractRuleEx(request, headers, runtime);
}

/**
 * Description: 定义外包的薪资方案接口,以【服务商、项目类别、领域、角色、资质】为unique
 * Summary: 外包薪资规则合约发布接口
 */
async function applyContractRuleEx(request: ApplyContractRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyContractRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.contract.rule.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetContractRuleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务商code
  supCode: string(name='sup_code'),
}

model GetContractRuleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 服务商
  spProvider?: SpProvider(name='sp_provider'),
  // 规则明细
  ruleDetails?: [ RuleDetail ](name='rule_details'),
  // 确认人
  confirmer?: string(name='confirmer'),
  // 确认状态
  confirmStatus?: string(name='confirm_status'),
  // 确认时间
  confirmDate?: string(name='confirm_date'),
}

/**
 * Description: 调用链上合约接口，查询外包的薪资方案

 * Summary: 外包薪资规则合约查询接口
 */
async function getContractRule(request: GetContractRuleRequest): GetContractRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getContractRuleEx(request, headers, runtime);
}

/**
 * Description: 调用链上合约接口，查询外包的薪资方案

 * Summary: 外包薪资规则合约查询接口
 */
async function getContractRuleEx(request: GetContractRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetContractRuleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.contract.rule.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadStaffAttendanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 考勤信息
  attendance: Attendance(name='attendance'),
  // uuid就行
  bizId: string(name='biz_id'),
}

model UploadStaffAttendanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 基于人的维度,支持批量接口上传，以{id,name,createDate,resultDate}。具体格式待商议
 * Summary: 长城汽车的考勤信息上传接口
 */
async function uploadStaffAttendance(request: UploadStaffAttendanceRequest): UploadStaffAttendanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadStaffAttendanceEx(request, headers, runtime);
}

/**
 * Description: 基于人的维度,支持批量接口上传，以{id,name,createDate,resultDate}。具体格式待商议
 * Summary: 长城汽车的考勤信息上传接口
 */
async function uploadStaffAttendanceEx(request: UploadStaffAttendanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadStaffAttendanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.staff.attendance.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryStaffAttendanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 员工工号
  jobNumber: string(name='job_number'),
  // 考勤月份
  scoreDates: [ string ](name='score_dates'),
  // 供应商
  supCode: string(name='sup_code'),
}

model QueryStaffAttendanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 考勤信息查询
  attendance?: [ Attendance ](name='attendance'),
}

/**
 * Description: 基于人的维度，入参：{用户id,考勤月份}
 * Summary: 长城汽车的考勤信息获取
 */
async function queryStaffAttendance(request: QueryStaffAttendanceRequest): QueryStaffAttendanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryStaffAttendanceEx(request, headers, runtime);
}

/**
 * Description: 基于人的维度，入参：{用户id,考勤月份}
 * Summary: 长城汽车的考勤信息获取
 */
async function queryStaffAttendanceEx(request: QueryStaffAttendanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryStaffAttendanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.staff.attendance.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadStaffAssessmentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求时间
  timeStamp: long(name='time_stamp'),
  // 考核信息
  assessment: Assessment(name='assessment'),
}

model UploadStaffAssessmentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 长城汽车的考核信息
 * Summary: 长城汽车的考核信息
 */
async function uploadStaffAssessment(request: UploadStaffAssessmentRequest): UploadStaffAssessmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadStaffAssessmentEx(request, headers, runtime);
}

/**
 * Description: 长城汽车的考核信息
 * Summary: 长城汽车的考核信息
 */
async function uploadStaffAssessmentEx(request: UploadStaffAssessmentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadStaffAssessmentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.staff.assessment.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryStaffAssessmentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 员工工号
  jobNumber: string(name='job_number'),
  // 考核月份
  scoreDates: [ string ](name='score_dates'),
  // 供应商
  supCode: string(name='sup_code'),
}

model QueryStaffAssessmentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 考核结果
  assessments?: [ Assessment ](name='assessments'),
}

/**
 * Description: 考核信息查询
 * Summary: 考核信息查询
 */
async function queryStaffAssessment(request: QueryStaffAssessmentRequest): QueryStaffAssessmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryStaffAssessmentEx(request, headers, runtime);
}

/**
 * Description: 考核信息查询
 * Summary: 考核信息查询
 */
async function queryStaffAssessmentEx(request: QueryStaffAssessmentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryStaffAssessmentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.staff.assessment.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ExecContractReconciliationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 供应商
  supCode: string(name='sup_code'),
  // 结算时间
  scoreDate: string(name='score_date'),
}

model ExecContractReconciliationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结算单
  reconciliation?: Reconciliation(name='reconciliation'),
}

/**
 * Description: 对账单执行
 * Summary: 对账单执行接口
 */
async function execContractReconciliation(request: ExecContractReconciliationRequest): ExecContractReconciliationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return execContractReconciliationEx(request, headers, runtime);
}

/**
 * Description: 对账单执行
 * Summary: 对账单执行接口
 */
async function execContractReconciliationEx(request: ExecContractReconciliationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExecContractReconciliationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.contract.reconciliation.exec', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmContractReconciliationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 服务商
  supCode: string(name='sup_code'),
  // 确认时间
  socreDate: string(name='socre_date'),
  // 确认类型：1、长城  2、服务方
  confirmType: string(name='confirm_type'),
  // 确认者
  confirmer: string(name='confirmer'),
  // 认证状态
  confirmStatus: string(name='confirm_status'),
}

model ConfirmContractReconciliationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结算单
  reconciliation?: Reconciliation(name='reconciliation'),
}

/**
 * Description: 结算单确认
 * Summary: 结算单确认
 */
async function confirmContractReconciliation(request: ConfirmContractReconciliationRequest): ConfirmContractReconciliationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmContractReconciliationEx(request, headers, runtime);
}

/**
 * Description: 结算单确认
 * Summary: 结算单确认
 */
async function confirmContractReconciliationEx(request: ConfirmContractReconciliationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmContractReconciliationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.contract.reconciliation.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContractReconciliationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 供应商code
  supCode: string(name='sup_code'),
  // 月份
  scoreDates: [ string ](name='score_dates'),
}

model QueryContractReconciliationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结算单
  reconciliations?: [ Reconciliation ](name='reconciliations'),
}

/**
 * Description: 查询结算单
 * Summary: 查询结算单
 */
async function queryContractReconciliation(request: QueryContractReconciliationRequest): QueryContractReconciliationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContractReconciliationEx(request, headers, runtime);
}

/**
 * Description: 查询结算单
 * Summary: 查询结算单
 */
async function queryContractReconciliationEx(request: QueryContractReconciliationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContractReconciliationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.contract.reconciliation.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyCustomerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  bizCode?: string(name='biz_code'),
  // 支付宝uid
  alipayUid: string(name='alipay_uid'),
  // 个人名称
  personName?: string(name='person_name'),
  // 个人联系电话
  personPhone?: string(name='person_phone'),
  // 核验证件号
  personCertNo?: string(name='person_cert_no'),
  // 个人身份类型  RESIDENT（身份证）
  personCertType?: string(name='person_cert_type'),
}

model VerifyCustomerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户生成的did
  did?: string(name='did'),
}

/**
 * Description: DID创建及核验
 * Summary: DID创建及核验
 */
async function verifyCustomer(request: VerifyCustomerRequest): VerifyCustomerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyCustomerEx(request, headers, runtime);
}

/**
 * Description: DID创建及核验
 * Summary: DID创建及核验
 */
async function verifyCustomerEx(request: VerifyCustomerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyCustomerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.customer.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model MatchDidAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码(YYX)
  bizCode: string(name='biz_code'),
  // 支付宝uid
  uid: string(name='uid'),
  // 分布式id ，双向check
  did: string(name='did'),
  // 链id
  chainId?: string(name='chain_id'),
  // 链账户
  chainAccount: string(name='chain_account'),
  // 托管情况下包含
  kmsKeyId?: string(name='kms_key_id'),
}

model MatchDidAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 身份关联链上账户
 * Summary: 身份关联链上账户
 */
async function matchDidAccount(request: MatchDidAccountRequest): MatchDidAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return matchDidAccountEx(request, headers, runtime);
}

/**
 * Description: 身份关联链上账户
 * Summary: 身份关联链上账户
 */
async function matchDidAccountEx(request: MatchDidAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): MatchDidAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.did.account.match', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model MatchDidAssetsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码(YYX)
  bizCode: string(name='biz_code'),
  // 支付宝uid
  uid: string(name='uid'),
  // 分布式id ，双向check
  did: string(name='did'),
  // 链id
  chainId?: string(name='chain_id'),
  // 链账户
  chainAccount: string(name='chain_account'),
  // 链资产地址 HASH
  contract: string(name='contract'),
  // 合约类型 0-WASM
  contractType: long(name='contract_type'),
  // 资产类型
  assertType: string(name='assert_type'),
  // 上次资产发生变更的区块高度
  blockNumber?: string(name='block_number'),
  // 上次资产发生变更的序号
  txIndex: string(name='tx_index'),
  // 上次资产发生变更的交易序列号
  longIndex: string(name='long_index'),
  // 资产名称
  assertName: string(name='assert_name'),
  // 资产信息（资产描述信息）
  assertData: string(name='assert_data'),
  // 资产ID
  assertId: string(name='assert_id'),
}

model MatchDidAssetsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 资产id
  assertId?: string(name='assert_id'),
}

/**
 * Description: 身份关数字资产
 * Summary: 身份关数字资产
 */
async function matchDidAssets(request: MatchDidAssetsRequest): MatchDidAssetsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return matchDidAssetsEx(request, headers, runtime);
}

/**
 * Description: 身份关数字资产
 * Summary: 身份关数字资产
 */
async function matchDidAssetsEx(request: MatchDidAssetsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): MatchDidAssetsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.did.assets.match', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDidCustomerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  bizCode: string(name='biz_code'),
  // 账户uid
  uid: string(name='uid'),
  // 个人名称
  personName?: string(name='person_name'),
  // 个人联系电话
  personPhone?: string(name='person_phone'),
  // 核验证件号
  personCertNo?: string(name='person_cert_no'),
  // 个人身份类型
  personCertType?: string(name='person_cert_type'),
  // 账户uid类型 0-Alipay 1-Alibaba
  accountType: long(name='account_type'),
}

model CreateDidCustomerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户生成的did	用户的did
  did?: string(name='did'),
  // 用户昵称
  nickname?: string(name='nickname'),
}

/**
 * Description: DID创建及核验
 * Summary: DID创建及核验
 */
async function createDidCustomer(request: CreateDidCustomerRequest): CreateDidCustomerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDidCustomerEx(request, headers, runtime);
}

/**
 * Description: DID创建及核验
 * Summary: DID创建及核验
 */
async function createDidCustomerEx(request: CreateDidCustomerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDidCustomerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.did.customer.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDidEnterpriseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 场景码
  bizCode: string(name='biz_code'),
  // 企业唯一编码
  enterpriseCode: string(name='enterprise_code'),
  // 企业名称
  enterpriseName?: string(name='enterprise_name'),
  // ORG_CERT 全国组织机构代码证书
  certType?: string(name='cert_type'),
}

model CreateDidEnterpriseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 企业用户生成的did
  did?: string(name='did'),
}

/**
 * Description: 企业DID创建及核验
 * Summary: 企业DID创建及核验
 */
async function createDidEnterprise(request: CreateDidEnterpriseRequest): CreateDidEnterpriseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDidEnterpriseEx(request, headers, runtime);
}

/**
 * Description: 企业DID创建及核验
 * Summary: 企业DID创建及核验
 */
async function createDidEnterpriseEx(request: CreateDidEnterpriseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDidEnterpriseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.did.enterprise.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitInsuranceUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 保司编码
  businessCode: string(name='business_code'),
  // 三方Id，此处为天猫id
  thirdPartId: string(name='third_part_id'),
  // 来源渠道，TIANMAO（天猫）
  channel: string(name='channel'),
  // 埋点信息，JSON格式字符串
  burieds?: string(name='burieds'),
}

model InitInsuranceUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 记录用户登录保司小程序信息
 * Summary: 用户登陆页面埋点
 */
async function initInsuranceUser(request: InitInsuranceUserRequest): InitInsuranceUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initInsuranceUserEx(request, headers, runtime);
}

/**
 * Description: 记录用户登录保司小程序信息
 * Summary: 用户登陆页面埋点
 */
async function initInsuranceUserEx(request: InitInsuranceUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitInsuranceUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.insurance.user.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryInsuranceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 保司编码
  mechanismCode: string(name='mechanism_code'),
}

model QueryInsuranceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务授权列表
  businessAuthorizeRecords?: [ BusinessRecordsPairs ](name='business_authorize_records'),
}

/**
 * Description: 保司方获取授权信息
 * Summary: 获取授权信息
 */
async function queryInsurance(request: QueryInsuranceRequest): QueryInsuranceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryInsuranceEx(request, headers, runtime);
}

/**
 * Description: 保司方获取授权信息
 * Summary: 获取授权信息
 */
async function queryInsuranceEx(request: QueryInsuranceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryInsuranceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.insurance.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateInsuranceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 保司编码
  mechanismCode?: string(name='mechanism_code'),
  // 保单加密信息
  policyEncryptionContext?: string(name='policy_encryption_context'),
  // 保单号
  policyNo?: string(name='policy_no'),
  // 保险产品SKU
  thirdPartSku?: string(name='third_part_sku'),
  // 保险公司名称
  mechanismName?: string(name='mechanism_name'),
  // 保单种类，险种
  insuranceType: string(name='insurance_type'),
  // 来源uid，此处指天猫id
  sourceUid: string(name='source_uid'),
  // 订单来源
  source?: string(name='source'),
  // 投保人
  userName?: string(name='user_name'),
  // 投保人类型  自然人/公司
  userType?: string(name='user_type'),
  // 投保人电话号码
  userPhoneNumber?: string(name='user_phone_number'),
  // 投保人证件号
  userCertNo?: string(name='user_cert_no'),
  // 拓展信息
  extend?: string(name='extend'),
  // 保单生效时间（毫秒值）
  policyEffectTime?: long(name='policy_effect_time'),
  // 保单失效时间（毫秒值）
  policyInvalidTime?: long(name='policy_invalid_time'),
  // 订单总金额 整型，以分为单位，50000分 = 500.00元
  policyTotalAmount?: long(name='policy_total_amount'),
  // 订单总期数（一次性付款用1）
  policyTotalStage?: long(name='policy_total_stage'),
  // 保费支付日期（毫秒值）
  policyPayDate?: long(name='policy_pay_date'),
  // 已支付保费期数（1代表1期）
  policyPaidStage?: long(name='policy_paid_stage'),
  // 每一期保费金额，整型，以分为单位，50000分 = 500.00元
  policyStageAverAmount?: long(name='policy_stage_aver_amount'),
  // 订单时间（毫秒值）
  orderTime?: long(name='order_time'),
  // 操作类型
  // 下单 支付 理赔 退单
  operation?: string(name='operation'),
  // 授权列表
  authorizeRecords?: [ AuthorizeRecordsPairs ](name='authorize_records'),
  // 活动码/赠险码
  activityCode?: string(name='activity_code'),
  // 授权类型 1-已授权 2-未授权
  authorizationType: long(name='authorization_type'),
}

model OperateInsuranceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 保单信息上链，保单信息同步
 * Summary: 保单信息上链
 */
async function operateInsurance(request: OperateInsuranceRequest): OperateInsuranceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateInsuranceEx(request, headers, runtime);
}

/**
 * Description: 保单信息上链，保单信息同步
 * Summary: 保单信息上链
 */
async function operateInsuranceEx(request: OperateInsuranceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateInsuranceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.insurance.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadInsuranceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 保司编码
  mechanismCode: string(name='mechanism_code'),
  // 附件信息
  // 
  fileObject?: readable(description='待上传文件', ignore='true'),
  fileObjectName?: string(description='待上传文件名', ignore='true'),
  fileId: string(name='file_id'),
}

model UploadInsuranceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 文件类型
  fileBizType?: string(name='file_biz_type'),
  // 文件名称
  fileName?: string(name='file_name'),
  // 文件访问路径
  ossUrl?: string(name='oss_url'),
}

/**
 * Description: 上传保单附件至阿里云OSS
 * Summary: 上传保单附件
 */
async function uploadInsurance(request: UploadInsuranceRequest): UploadInsuranceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadInsuranceEx(request, headers, runtime);
}

/**
 * Description: 上传保单附件至阿里云OSS
 * Summary: 上传保单附件
 */
async function uploadInsuranceEx(request: UploadInsuranceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadInsuranceResponse {
  if (!Util.isUnset(request.fileObject)) {
    var uploadReq = new CreateAntcloudGatewayxFileUploadRequest{
      authToken = request.authToken,
      apiCode = 'antchain.bbp.insurance.upload',
      fileName = request.fileObjectName,
    };
    var uploadResp = createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
    if (!AntchainUtil.isSuccess(uploadResp.resultCode, "ok")) {
      var uploadInsuranceResponse = new UploadInsuranceResponse{
        reqMsgId = uploadResp.reqMsgId,
        resultCode = uploadResp.resultCode,
        resultMsg = uploadResp.resultMsg,
      };
      return uploadInsuranceResponse;
    }
    var uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
    AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
    request.fileId = uploadResp.fileId;
  }
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.insurance.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncInsuranceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 保司编码
  mechanismCode: string(name='mechanism_code'),
  // 理赔加密信息
  policyEncryptionContext: string(name='policy_encryption_context'),
  // 保单号
  policyNo: string(name='policy_no'),
  // 保险产品SKU
  thirdPartSku?: string(name='third_part_sku'),
  // 保司名称
  mechanismName?: string(name='mechanism_name'),
  // 保单种类，险种
  insuranceType?: string(name='insurance_type'),
  // 操作类型
  // 下单 支付 理赔 退单
  operation?: string(name='operation'),
  // 赔付单号
  claimOrderNo: string(name='claim_order_no'),
  // 理赔申请时间（毫秒值）
  claimApplyTime: long(name='claim_apply_time'),
  // 理赔赔付时间（毫秒值）
  claimPayTime: long(name='claim_pay_time'),
  // 理赔申请金额，整型，以分为单位，50000分 = 500.00元
  claimApplyAmount: long(name='claim_apply_amount'),
  // 理赔金额，整型，以分为单位，50000分 = 500.00元
  claimAmount: long(name='claim_amount'),
  // 授权列表
  authorizeRecords?: [ AuthorizeRecordsPairs ](name='authorize_records'),
}

model SyncInsuranceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 保险理赔受理信息同步到蚂蚁链
 * Summary: 理赔受理上链
 */
async function syncInsurance(request: SyncInsuranceRequest): SyncInsuranceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncInsuranceEx(request, headers, runtime);
}

/**
 * Description: 保险理赔受理信息同步到蚂蚁链
 * Summary: 理赔受理上链
 */
async function syncInsuranceEx(request: SyncInsuranceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncInsuranceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.insurance.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelInsuranceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 原保单号
  policyNo: string(name='policy_no'),
  // 保单终止日期 毫秒值
  policyEndTime: long(name='policy_end_time'),
  // 退保原因
  reasonForQuit: string(name='reason_for_quit'),
  // 退保保费金额，单位分
  quitTotalAmount: long(name='quit_total_amount'),
  // 扩展信息
  extend?: string(name='extend'),
}

model CancelInsuranceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 同步用户退保信息上链
 * Summary: 保单退保接口
 */
async function cancelInsurance(request: CancelInsuranceRequest): CancelInsuranceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelInsuranceEx(request, headers, runtime);
}

/**
 * Description: 同步用户退保信息上链
 * Summary: 保单退保接口
 */
async function cancelInsuranceEx(request: CancelInsuranceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelInsuranceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.insurance.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryInsuranceRecordsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 第三方Id，此处为天猫uid
  sourceUid: string(name='source_uid'),
  // 保司编码
  mechanismCode: string(name='mechanism_code'),
}

model QueryInsuranceRecordsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户保单信息集合
  insuranceRecordsList?: [ InsuranceRecordModel ](name='insurance_records_list'),
}

/**
 * Description: 查询用户的数据库保单记录
 * Summary: 用户保单信息列表查询
 */
async function queryInsuranceRecords(request: QueryInsuranceRecordsRequest): QueryInsuranceRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryInsuranceRecordsEx(request, headers, runtime);
}

/**
 * Description: 查询用户的数据库保单记录
 * Summary: 用户保单信息列表查询
 */
async function queryInsuranceRecordsEx(request: QueryInsuranceRecordsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryInsuranceRecordsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.insurance.records.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryInsuranceChainRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 第三方Id，此处为天猫uid
  sourceUid: string(name='source_uid'),
  // 保单号
  policyNo: string(name='policy_no'),
}

model QueryInsuranceChainResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 保司编码
  merchanismCode?: string(name='merchanism_code'),
  // 订单来源 TIANMAO
  source?: string(name='source'),
  // 保险类型
  insuraceType?: string(name='insurace_type'),
  // 保单加密信息（加密数据，由保司持有密钥）
  insuranceContext?: string(name='insurance_context'),
  // 退保保单信息（加密数据，由保司持有密钥）
  insuranceClaimContext?: string(name='insurance_claim_context'),
  // 保单理赔信息（加密数据，由保司持有密钥）
  insuranceSurrenderContext?: string(name='insurance_surrender_context'),
}

/**
 * Description: 保单链上信息查询
 * Summary: 保单链上信息查询
 */
async function queryInsuranceChain(request: QueryInsuranceChainRequest): QueryInsuranceChainResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryInsuranceChainEx(request, headers, runtime);
}

/**
 * Description: 保单链上信息查询
 * Summary: 保单链上信息查询
 */
async function queryInsuranceChainEx(request: QueryInsuranceChainRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryInsuranceChainResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.bbp.insurance.chain.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAntcloudGatewayxFileUploadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 上传文件作用的openapi method
  apiCode: string(name='api_code'),
  // 文件标签，多个标签;分割
  fileLabel?: string(maxLength=100, name='file_label'),
  // 自定义的文件元数据
  fileMetadata?: string(maxLength=1000, name='file_metadata'),
  // 文件名，不传则随机生成文件名
  fileName?: string(maxLength=100, name='file_name'),
  // 文件的多媒体类型
  mimeType?: string(name='mime_type'),
  // 产品方的api归属集群，即productInstanceId
  apiCluster?: string(name='api_cluster'),
}

model CreateAntcloudGatewayxFileUploadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 上传有效期
  expiredTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='expired_time'),
  // 32位文件唯一id
  fileId?: string(name='file_id'),
  // 放入http请求头里
  uploadHeaders?: [ XNameValuePair ](name='upload_headers'),
  // 文件上传地址
  uploadUrl?: string(name='upload_url'),
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUpload(request: CreateAntcloudGatewayxFileUploadRequest): CreateAntcloudGatewayxFileUploadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAntcloudGatewayxFileUploadEx(request, headers, runtime);
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUploadEx(request: CreateAntcloudGatewayxFileUploadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAntcloudGatewayxFileUploadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.gatewayx.file.upload.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

