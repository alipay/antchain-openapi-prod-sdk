import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '2.6.0',
    _prod_code = 'STLR',
    _prod_channel = 'undefined'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 数据值条目
model AnyAmountItem {
  // 数据项编码
  itemCode: string(name='item_code', example='AD1'),
  // 数据值，按字符串输出，最多保留6位小数
  itemAmount: string(name='item_amount', example='221.11'),
}

// 证书授权产品信息
model CertProductAuthDO {
  // 三方平台产品ID
  productId: string(name='product_id', example='产品ID'),
  // 三方平台产品名称
  productName: string(name='product_name', example='产品名称'),
}

// 分类碳排放量
model EmissionsCategoryStatistics {
  // 排放类型编码
  emissionDategoryNo: string(name='emission_dategory_no', example='000001'),
  // 排放类型名称
  emissionCategoryName: string(name='emission_category_name', example='间接排放'),
  // 排放量
  emission: string(name='emission', example='11.22'),
  // 排放占比，可直接换算成百分数即为百分占比
  rate: string(name='rate', example='0.56'),
  // 排放量单位
  unit: string(name='unit', example='tCO2e'),
}

// 证书产品信息，包括证书详情、授权产品信息
model CertProductInfoDO {
  // 同证书信息显示
  certificationNo: string(name='certification_no', example='证书编号'),
  // 同证书信息显示
  certificationType: string(name='certification_type', example='证书类型'),
  // 同证书信息显示
  certificationName: string(name='certification_name', example='证书名称'),
  // 同证书信息显示
  authenticationName: string(name='authentication_name', example='认证机构名称'),
  // 证书颁发时间
  issueTime: string(name='issue_time', example='2022-01-01'),
  // 证书到期时间
  invalidTime: string(name='invalid_time', example='2020-01-01'),
  // 同证书信息显示
  certificationAgent: string(name='certification_agent', example='认证委托人'),
  // 同证书信息显示
  manufacturer?: string(name='manufacturer', example='制造商'),
  // 同证书信息显示
  cproductFirm?: string(name='cproduct_firm', example='生产厂商'),
  // 同证书信息显示
  certificationLevel?: string(name='certification_level', example='认证等级'),
  // 同证书信息显示
  cproductName?: string(name='cproduct_name', example='产品名称'),
  // 同证书信息显示
  cproductModel?: string(name='cproduct_model', example='产品型号'),
  // 证书文件地址
  certificationFileAddress: string(name='certification_file_address', example='https://'),
  // 证书授权的三方平台产品列表
  authProducts?: [ CertProductAuthDO ](name='auth_products', example=''),
}

//  每月的排放数据
model AnnualMonthEmissionDatum {
  // 统计的年份
  year: string(name='year', example='2022'),
  // 统计的月份
  month: string(name='month', example='12'),
  // 统计排放量
  value: string(name='value', example='22.22'),
}

// 按绿色行为类型统计的绿色行为明细
model GreenOperationStatisticsByType {
  // 绿色行为类型
  greenOperationType: string(name='green_operation_type', example='ElectronicInvoice'),
  // 绿色行为类型名称
  greenOperationTypeName: string(name='green_operation_type_name', example='电子发票'),
  // 绿色行为产生的绿色能量值
  greenEnergyAmount: long(name='green_energy_amount', example='11'),
  // 相关类型的绿色行为记录数
  greenOperationRecords: long(name='green_operation_records', example='33'),
}

// 减排情况统计
model EmissionsReductionStatistics {
  // 减排方法
  reductionMethod: string(name='reduction_method', example='EnergySubstitution'),
  // 减排方法名称
  reductionMethodName: string(name='reduction_method_name', example='使用绿电'),
  // 减排量
  reductionAmount: string(name='reduction_amount', example='123123.11'),
  // 减排量占比
  reductionRatio: string(name='reduction_ratio', example='0.22'),
  // 减排量单位
  dataUnit: string(name='data_unit', example='tCO2e'),
}

// 每日碳排放量
model DailyEmissions {
  // 日期
  date: string(name='date', example='2021-07-21'),
  // 排放量值
  value: long(name='value', example='11.22'),
}

// 碳抵消统计量
model EmissionCounteractionStatistics {
  // 碳抵消类别
  assertType: string(name='assert_type', example='Quota'),
  // 碳抵消类别名称
  assertTypeName: string(name='assert_type_name', example='配额'),
  // 抵消量
  counteractionAmount: string(name='counteraction_amount', example='22.22'),
  // 排放量单位，默认为：tCO2e
  dataUnit: string(name='data_unit', example='tCO2e'),
}

// 碳补偿活动数据详情
model CarbonOffsetActiveDataDetail {
  // 活动数据编号
  activeDataNo: string(name='active_data_no', example='AD1'),
  // 活动数据名称
  activeDataName?: string(name='active_data_name', example='行走里程数'),
  // 活动数据单位
  activeDataUnit?: string(name='active_data_unit', example='km'),
  // 活动数据描述文案
  description?: string(name='description', example='描述'),
  // 活动数据值
  activeDataValue: string(name='active_data_value', example='22.22'),
}

// 机构会员资料
model EnterpriseMemberSummary {
  // 机构会员DID
  accountDid: string(name='account_did', example='did:mychain:aa509301d1c2bd0e35f9737824e5ab9832ca9a09542d618bce24a1609191383c'),
  // 会员姓名，数据脱敏处理返回
  name?: string(name='name', example='张**'),
  // 会员手机号码，数据脱敏处理返回
  mobile?: string(name='mobile', example='136****1122'),
  // 会员注册时间
  registerTime: string(name='register_time', example='2022-02-22 12:33:11'),
}

// 排放统计项目
model AnyStatisticalItem {
  // 统计项目编码
  itemCode: string(name='item_code', example='abc'),
  // 数据值，按字符串输出，最多保留6位小数
  amount: string(name='amount', example='222.22'),
  // 单位编码
  unit: string(name='unit', example='t'),
  // 单位标签
  unitLabel: string(name='unit_label', example='吨'),
}

// 账户信息
model CarbonAccountInfo {
  // 账户did
  userDid: string(name='user_did', example='did:private:xxx'),
  // 账户名称
  userName: string(name='user_name', example='xxx企业'),
}

// 账户开通返回
model AccountRegisterResponse {
  // 账户did
  userDid: string(name='user_did', example='did:private:xxxcxxxxx'),
}

// 文档信息
model EnterpriseDocumentFile {
  // 文档名称
  documentName: string(name='document_name', example='2022年7月车辆运输数据文件'),
  // 文件地址
  documentAddress: string(name='document_address', example='carbonchain/file/dataentry_document/20211108000220010000000000000356/20211108000220010000000000000356.xlsx'),
}

// 区块链信息
model BlockchainDTO {
  // 交易hash
  txHash: string(name='tx_hash', example='xxx'),
  // 当前块高
  blockNumber: long(name='block_number', example='12917'),
}

// 碳普惠补偿采集数据条目
model CarbonOffsetAcquisitionItem {
  // 采集数据单号
  acquisitionItemNo: string(name='acquisition_item_no', example='123456789abcdefghi'),
  // 碳补偿项目编号
  projectNo: string(name='project_no', example='13222'),
  // 参与账户DID
  accountDid: string(name='account_did', example='123456789abcdefghi'),
  // 发生时间
  occurrentTime: string(name='occurrent_time', example='2023-05-23 12:11:32:33'),
  // 发生场景编码
  scenarioCode: string(name='scenario_code', example='xingzou'),
  // 发生场景名称
  scenarioName: string(name='scenario_name', example='出行'),
  // 碳普惠平台编码，如果非平台采集数据，则显示为自采编码：Self
  platformNo: string(name='platform_no', example='Antforest'),
  // 活动数据原始值，多个活动数据列表
  activeDatum?: [ AnyAmountItem ](name='active_datum', example=''),
  // 减碳量
  offsetVolume?: string(name='offset_volume', example='122.22'),
  // 碳能量值
  carbonEnergy?: long(name='carbon_energy', example='229'),
}

// 碳排放分城市统计总量
model EmissionsCityStatistics {
  // 城市编码
  cityNo: string(name='city_no', example='637401'),
  // 城市名称
  cityName: string(name='city_name', example='南充市'),
  // 累计排放量
  emissionAmount: string(name='emission_amount', example='222.22'),
  // 今日新增碳排放量
  emissionAmountToday: string(name='emission_amount_today', example='22.22'),
  // 总减碳量
  reductionAmount: string(name='reduction_amount', example='21.11'),
  // 今日减碳量
  reductionAmountToday: string(name='reduction_amount_today', example='9.11'),
  // 总抵消量
  counteractionAmount: string(name='counteraction_amount', example='9.11'),
  // 今日抵消量
  counteractionAmountToday: string(name='counteraction_amount_today', example='2.11'),
  // 排放量单位，默认为：
  dataUnit: string(name='data_unit', example='tCO2e'),
}

// 授权信息
model AuthenticationInfoVO {
  // 授权记录编码
  authenticationNo: string(name='authentication_no', example='授权记录编码'),
  // 收取方did
  authorizerDid: string(name='authorizer_did', example='收取方did'),
  // 授权方名称
  authorizerName: string(name='authorizer_name', example='授权方名称'),
  // 被授权方did
  authorizedDid: string(name='authorized_did', example='被授权方did'),
  // 被授权方名称
  authorizedName: string(name='authorized_name', example='被授权方名称'),
  // 数据协作类型
  dataTransferType: string(name='data_transfer_type', example='数据协作类型'),
  // 授权详情
  authenticationDeetail: string(name='authentication_deetail', example='{}'),
  // 授权状态
  status: string(name='status', example='Approved：审批通过   Approving：待审批 NotApproved：审批不通过 Cancelled: 取消授权'),
}

// 排放范围排放数据统计
model EmissionsScopeStatistics {
  // 盘查范围编码
  inventoryScopeNo: string(name='inventory_scope_no', example='002'),
  // 盘查范围名称
  inventoryScopeName: string(name='inventory_scope_name', example='范围一'),
  // 碳排放量
  emissions: long(name='emissions', example='222.33'),
  // 排放占比
  percentage: long(name='percentage', example='0.11'),
  // 范围下各分类排放数据
  categoryEmissionsList: [ EmissionsCategoryStatistics ](name='category_emissions_list', example=''),
}

// 碳排放分单元统计总量
model EmissionsLocationStatistics {
  // 盘查单元编码
  locationNo: string(name='location_no', example='L0100000008902'),
  // 盘查单元名称
  locationName: string(name='location_name', example='2022亚运会游泳馆'),
  // 盘查单元排放量
  emissionAmount: string(name='emission_amount', example='2223.22'),
  // 排放量单位，默认为：tCO2e
  dataUnit: string(name='data_unit', example='tCO2e'),
}

// 任意KV结构对象
model AnyKeywordItem {
  // 项目编码
  itemCode: string(name='item_code', example='CFD'),
  // 项目值
  itemValue: string(name='item_value', example='各种按业务场景的取值'),
}

// 按频率统计的绿色行为明细
model GreenOperationStatisticsByFrequence {
  // 绿色行为发生时期
  occurrencePeriod: string(name='occurrence_period', example='2021-09'),
  // 绿色行为产生的绿色能量值
  greenEnergyAmount: long(name='green_energy_amount', example='11212'),
  // 时期内发生绿色行为的记录条数
  greenOperationRecords: long(name='green_operation_records', example='111'),
}

// 绿色行为数据摘要
model GreenOperationRecordSummary {
  // 绿色行为记录编码
  greenOperationNo: string(name='green_operation_no', example='20220702111231231212'),
  // 绿色行为类型
  greenOperationType: string(name='green_operation_type', example='ElectronicInvoice'),
  // 绿色行为类型名称
  greenOperationTypeName: string(name='green_operation_type_name', example='电子发票'),
  // 发生绿色行为的相关业务单号
  enterpriseBizNo: string(name='enterprise_biz_no', example='202211131212'),
  // 绿色行为发生时间，格式应如：2021-07-21 12:11:11
  occurrenceTime: string(name='occurrence_time', example='2021-08-09 12:22:11'),
  // 绿色行为的绿色能量值
  greenEnergyAmount: long(name='green_energy_amount', example='1111'),
}

// 键值对
model XNameValuePair {
  // 键名
  name: string(name='name', example='key'),
  // 键值
  value: string(name='value', example='value'),
}

model DescribeAcarActivityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model DescribeAcarActivityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 活动主办方名称
  sponsor?: string(name='sponsor'),
  // 大型活动名称
  activityName?: string(name='activity_name'),
  // 当前开展的活动主体名称
  enterpriseName?: string(name='enterprise_name'),
  // 当前活动主体编码
  enterpriseNo?: string(name='enterprise_no'),
  // 当前主体活动开始日期
  enterpriseStartDate?: string(name='enterprise_start_date'),
  // 当前主体活动结束日期
  enterpriseEndDate?: string(name='enterprise_end_date'),
  // 当前活动是否已经经过碳排放认证
  authed?: boolean(name='authed'),
}

/**
 * Description: 查询活动资料描述信息，包括大型会展信息及当前开展的活动日期等等
 * Summary: 查询当前活动资料信息
 */
async function describeAcarActivity(request: DescribeAcarActivityRequest): DescribeAcarActivityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return describeAcarActivityEx(request, headers, runtime);
}

/**
 * Description: 查询活动资料描述信息，包括大型会展信息及当前开展的活动日期等等
 * Summary: 查询当前活动资料信息
 */
async function describeAcarActivityEx(request: DescribeAcarActivityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeAcarActivityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.acar.activity.describe', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DescribeAcarDailyemissionsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model DescribeAcarDailyemissionsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 净排放量
  netEmissions?: long(name='net_emissions'),
  // 累计到当前时间的总碳排放量
  totalEmissions?: long(name='total_emissions'),
  // 排放量单位
  unit?: string(name='unit'),
  //  当前计算完成时间
  finishTimestamp?: string(name='finish_timestamp'),
  // 活动期间每日累计的总碳排放量
  dailyEmissionsList?: [ DailyEmissions ](name='daily_emissions_list'),
}

/**
 * Description: 返回当前活动累计的碳排放量，以及每日累计的总排放量。
 * Summary: 查询当前活动的每日碳排放量
 */
async function describeAcarDailyemissions(request: DescribeAcarDailyemissionsRequest): DescribeAcarDailyemissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return describeAcarDailyemissionsEx(request, headers, runtime);
}

/**
 * Description: 返回当前活动累计的碳排放量，以及每日累计的总排放量。
 * Summary: 查询当前活动的每日碳排放量
 */
async function describeAcarDailyemissionsEx(request: DescribeAcarDailyemissionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeAcarDailyemissionsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.acar.dailyemissions.describe', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DescribeAcarScopemissionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model DescribeAcarScopemissionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 总排放量
  totalEmissions?: long(name='total_emissions'),
  // 单位
  unit?: string(name='unit'),
  // 各范围的排放情况列表
  scopeEmissionsList?: [ EmissionsScopeStatistics ](name='scope_emissions_list'),
}

/**
 * Description: 查询当前活动各范围的碳排放量，返回各范围的排放占比，以及范围下各分类的碳排放量。
 * Summary: 查询当前活动各范围的碳排放量
 */
async function describeAcarScopemission(request: DescribeAcarScopemissionRequest): DescribeAcarScopemissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return describeAcarScopemissionEx(request, headers, runtime);
}

/**
 * Description: 查询当前活动各范围的碳排放量，返回各范围的排放占比，以及范围下各分类的碳排放量。
 * Summary: 查询当前活动各范围的碳排放量
 */
async function describeAcarScopemissionEx(request: DescribeAcarScopemissionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeAcarScopemissionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.acar.scopemission.describe', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DescribeAcarReductionemissionsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model DescribeAcarReductionemissionsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 减排情况列表
  list?: [ EmissionsReductionStatistics ](name='list'),
}

/**
 * Description: 获取减排情况，返回多项减排方案实施下相关的减排情况
 * Summary: 获取减排情况
 */
async function describeAcarReductionemissions(request: DescribeAcarReductionemissionsRequest): DescribeAcarReductionemissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return describeAcarReductionemissionsEx(request, headers, runtime);
}

/**
 * Description: 获取减排情况，返回多项减排方案实施下相关的减排情况
 * Summary: 获取减排情况
 */
async function describeAcarReductionemissionsEx(request: DescribeAcarReductionemissionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeAcarReductionemissionsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.acar.reductionemissions.describe', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DescribeAcarLastemissiondataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model DescribeAcarLastemissiondataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 主体活动编码
  enterpriseNo?: string(name='enterprise_no'),
  // 盘查范围编码
  inventoryScopeNo?: string(name='inventory_scope_no'),
  // 盘查范围名称
  inventoryScopeName?: string(name='inventory_scope_name'),
  // 排放类型编码
  emissionCategoryNo?: string(name='emission_category_no'),
  // 排放类型名称
  emissionCategoryName?: string(name='emission_category_name'),
  // 排放源编码
  emissionSourceNo?: string(name='emission_source_no'),
  // 排放源名称
  emissionSourceName?: string(name='emission_source_name'),
  // 活动场馆编码
  enterpriseWorkspaceNo?: string(name='enterprise_workspace_no'),
  // 活动场馆名称
  enterpriseWorkspaceName?: string(name='enterprise_workspace_name'),
  // 排放量计算要素编码
  emissionsAnalysisFactorNo?: string(name='emissions_analysis_factor_no'),
  // 排放量计算要素值
  emissionsAnalysisFactorValue?: string(name='emissions_analysis_factor_value'),
  // 发生日期
  occurrenceDate?: string(name='occurrence_date'),
  // 排放数据录入明细编码
  emissionDataEntryItemNo?: string(name='emission_data_entry_item_no'),
  // 排放源用量
  emissionDourceDosage?: long(name='emission_dource_dosage'),
  // 用量单位：
  // WNm3("万Nm3","天然气消耗用量单位"),
  // GJ("GJ","燃烧产生的热量单位或外购热力单位"),
  // t("t","制冷剂、灭火器填充剂、化石燃料消耗的质量单位，或者化粪池BOD产生量单位"),
  // MWh("MWh","外购电力或数据中心用电量单位"),
  // km("km","公里，通勤用车或员工差旅旅程单位"),
  // tCO2e("tCO2e","吨二氧化碳当量，排放气体产生的二氧化碳当量"),
  // PCT("%","百分比，如碳氧化率，或者气体逸散率");
  dosageUnit?: string(name='dosage_unit'),
  // 数据录入人账号
  submitterNo?: string(name='submitter_no'),
  // 提交人姓名
  submitterName?: string(name='submitter_name'),
  // 数据录入时间
  submissionTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='submission_time'),
  // 盘查排放类型的数据录入方式：
  // ManualEntry("手动录入方式"),
  // FileUpload("文件导入方式"),
  // AutoGeneration("自动产生");
  dataEntryType?: string(name='data_entry_type'),
}

/**
 * Description: 查询最近排放数据，返回最近排放数据信息
 * Summary: 查询最近排放数据
 */
async function describeAcarLastemissiondata(request: DescribeAcarLastemissiondataRequest): DescribeAcarLastemissiondataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return describeAcarLastemissiondataEx(request, headers, runtime);
}

/**
 * Description: 查询最近排放数据，返回最近排放数据信息
 * Summary: 查询最近排放数据
 */
async function describeAcarLastemissiondataEx(request: DescribeAcarLastemissiondataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeAcarLastemissiondataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.acar.lastemissiondata.describe', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryEmissionTotalRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 活动编码
  activityNo: string(name='activity_no'),
}

model QueryEmissionTotalResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 累计排放量
  totalEmission?: string(name='total_emission'),
  // 今日新增碳排放量
  totalEmissionToday?: string(name='total_emission_today'),
  // 累计减碳量
  totalReduction?: string(name='total_reduction'),
  // 今日减碳量
  totalReductionToday?: string(name='total_reduction_today'),
  // 累计抵消量
  totalCounteraction?: string(name='total_counteraction'),
  // 今日抵消量
  totalCounteractionToday?: string(name='total_counteraction_today'),
  // 排放数据单位
  dataUnit?: string(name='data_unit'),
}

/**
 * Description: 碳总量查询
 * Summary: 碳总量查询
 */
async function queryEmissionTotal(request: QueryEmissionTotalRequest): QueryEmissionTotalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryEmissionTotalEx(request, headers, runtime);
}

/**
 * Description: 碳总量查询
 * Summary: 碳总量查询
 */
async function queryEmissionTotalEx(request: QueryEmissionTotalRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryEmissionTotalResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.emission.total.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryEmissionGroupbycategoryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 活动编码
  activityNo: string(name='activity_no'),
}

model QueryEmissionGroupbycategoryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 按照排放类型分组统计的排放量结果列表
  list?: [ EmissionsCategoryStatistics ](name='list'),
}

/**
 * Description: 碳排放总量分类统计
 * Summary: 碳排放总量分类统计
 */
async function queryEmissionGroupbycategory(request: QueryEmissionGroupbycategoryRequest): QueryEmissionGroupbycategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryEmissionGroupbycategoryEx(request, headers, runtime);
}

/**
 * Description: 碳排放总量分类统计
 * Summary: 碳排放总量分类统计
 */
async function queryEmissionGroupbycategoryEx(request: QueryEmissionGroupbycategoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryEmissionGroupbycategoryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.emission.groupbycategory.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryEmissionGroupbylocationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 活动编码
  activityNo: string(name='activity_no'),
}

model QueryEmissionGroupbylocationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 按照排放单元分组统计的碳排放量列表
  list?: [ EmissionsLocationStatistics ](name='list'),
}

/**
 * Description: 碳排放总量分单元统计
 * Summary: 碳排放总量分单元统计
 */
async function queryEmissionGroupbylocation(request: QueryEmissionGroupbylocationRequest): QueryEmissionGroupbylocationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryEmissionGroupbylocationEx(request, headers, runtime);
}

/**
 * Description: 碳排放总量分单元统计
 * Summary: 碳排放总量分单元统计
 */
async function queryEmissionGroupbylocationEx(request: QueryEmissionGroupbylocationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryEmissionGroupbylocationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.emission.groupbylocation.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryEmissionGroupbycityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 活动编码
  activityNo: string(name='activity_no'),
}

model QueryEmissionGroupbycityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 按城市分组统计的碳排放量列表
  list?: [ EmissionsCityStatistics ](name='list'),
}

/**
 * Description: 碳排放总量分城市统计
 * Summary: 碳排放总量分城市统计
 */
async function queryEmissionGroupbycity(request: QueryEmissionGroupbycityRequest): QueryEmissionGroupbycityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryEmissionGroupbycityEx(request, headers, runtime);
}

/**
 * Description: 碳排放总量分城市统计
 * Summary: 碳排放总量分城市统计
 */
async function queryEmissionGroupbycityEx(request: QueryEmissionGroupbycityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryEmissionGroupbycityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.emission.groupbycity.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryEmissionReductionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 活动编码
  activityNo: string(name='activity_no'),
}

model QueryEmissionReductionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 减排量按减排方法分组统计
  list?: [ EmissionsReductionStatistics ](name='list'),
}

/**
 * Description: 减排统计查询
 * Summary: 减排统计查询
 */
async function queryEmissionReduction(request: QueryEmissionReductionRequest): QueryEmissionReductionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryEmissionReductionEx(request, headers, runtime);
}

/**
 * Description: 减排统计查询
 * Summary: 减排统计查询
 */
async function queryEmissionReductionEx(request: QueryEmissionReductionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryEmissionReductionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.emission.reduction.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryEmissionCounteractionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 活动编码
  activityNo: string(name='activity_no'),
}

model QueryEmissionCounteractionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 碳抵消量按抵消类型分组统计
  list?: [ EmissionCounteractionStatistics ](name='list'),
}

/**
 * Description: 碳抵消量统计
 * Summary: 碳抵消量统计
 */
async function queryEmissionCounteraction(request: QueryEmissionCounteractionRequest): QueryEmissionCounteractionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryEmissionCounteractionEx(request, headers, runtime);
}

/**
 * Description: 碳抵消量统计
 * Summary: 碳抵消量统计
 */
async function queryEmissionCounteractionEx(request: QueryEmissionCounteractionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryEmissionCounteractionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.emission.counteraction.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RegisterPdcpAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // PERSON("个人"),
  // ENTERPRISE("企业")
  userType: string(name='user_type'),
  // 用户名称
  userName: string(name='user_name'),
  // 用户ID
  userId: string(name='user_id'),
  // PASSPORT("护照"),
  // RESIDENT("身份证"),
  // NATIONAL_LEGAL_MERGE("统一社会信用代码")
  certType: string(name='cert_type'),
  // 证件号码
  certNo: string(name='cert_no'),
}

model RegisterPdcpAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 账户开通结果
  carbonAccountInfo?: AccountRegisterResponse(name='carbon_account_info'),
}

/**
 * Description: 账户开通接口。开通协作平台和链上账户
 * Summary: 账户开通接口
 */
async function registerPdcpAccount(request: RegisterPdcpAccountRequest): RegisterPdcpAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return registerPdcpAccountEx(request, headers, runtime);
}

/**
 * Description: 账户开通接口。开通协作平台和链上账户
 * Summary: 账户开通接口
 */
async function registerPdcpAccountEx(request: RegisterPdcpAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RegisterPdcpAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.pdcp.account.register', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PushPdcpBlockchainRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 消息ID
  txMsgId: string(name='tx_msg_id'),
  // 用户ID
  userId: string(name='user_id'),
  // 数据类型，枚举定义
  dataType: string(name='data_type'),
  // 密文类型
  encryptType: string(name='encrypt_type'),
  // 待存证数据，根据数据类型序列化为json。并加密传输
  depositData: string(name='deposit_data'),
}

model PushPdcpBlockchainResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 上链信息: 交易hash，块高
  txData?: BlockchainDTO(name='tx_data'),
}

/**
 * Description: 存证接口
 * Summary: 存证接口
 */
async function pushPdcpBlockchain(request: PushPdcpBlockchainRequest): PushPdcpBlockchainResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return pushPdcpBlockchainEx(request, headers, runtime);
}

/**
 * Description: 存证接口
 * Summary: 存证接口
 */
async function pushPdcpBlockchainEx(request: PushPdcpBlockchainRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PushPdcpBlockchainResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.pdcp.blockchain.push', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadPdcpBlockchainRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求ID
  txMsgId: string(name='tx_msg_id'),
  // 用户ID
  userId: string(name='user_id'),
  // 数据类型
  dataType: string(name='data_type'),
  // 加密类型
  encryptType: string(name='encrypt_type'),
  // 待存证数据，根据数据类型序列化后加密传输
  depositData: string(name='deposit_data'),
}

model UploadPdcpBlockchainResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 异步存证接口
 * Summary: 异步存证接口
 */
async function uploadPdcpBlockchain(request: UploadPdcpBlockchainRequest): UploadPdcpBlockchainResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadPdcpBlockchainEx(request, headers, runtime);
}

/**
 * Description: 异步存证接口
 * Summary: 异步存证接口
 */
async function uploadPdcpBlockchainEx(request: UploadPdcpBlockchainRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadPdcpBlockchainResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.pdcp.blockchain.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetPdcpBlockchainRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求ID
  txMsgId: string(name='tx_msg_id'),
}

model GetPdcpBlockchainResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回上链信息
  txData?: BlockchainDTO(name='tx_data'),
}

/**
 * Description: 查询异步存证结果
 * Summary: 查询异步存证结果
 */
async function getPdcpBlockchain(request: GetPdcpBlockchainRequest): GetPdcpBlockchainResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getPdcpBlockchainEx(request, headers, runtime);
}

/**
 * Description: 查询异步存证结果
 * Summary: 查询异步存证结果
 */
async function getPdcpBlockchainEx(request: GetPdcpBlockchainRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPdcpBlockchainResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.pdcp.blockchain.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryPdcpAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户ID
  userId: string(name='user_id'),
}

model QueryPdcpAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 开户结果
  carbonAccountInfo?: AccountRegisterResponse(name='carbon_account_info'),
}

/**
 * Description: 链上账户查询接口
 * Summary: 链上账户查询接口
 */
async function queryPdcpAccount(request: QueryPdcpAccountRequest): QueryPdcpAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryPdcpAccountEx(request, headers, runtime);
}

/**
 * Description: 链上账户查询接口
 * Summary: 链上账户查询接口
 */
async function queryPdcpAccountEx(request: QueryPdcpAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryPdcpAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.pdcp.account.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddPdcpAuthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权记录的唯一标记
  authenticationNo: string(name='authentication_no'),
  // 授权方did
  authorizerDid: string(name='authorizer_did'),
  // 被授权方did
  authorizedDid: string(name='authorized_did'),
  // 数据协作类型
  dataTransferType: string(name='data_transfer_type'),
  // 授权详情
  authenticationDetail: string(name='authentication_detail'),
  // 授权状态
  status: string(name='status'),
}

model AddPdcpAuthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 新增授权接口
 * Summary: 新增授权接口
 */
async function addPdcpAuth(request: AddPdcpAuthRequest): AddPdcpAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addPdcpAuthEx(request, headers, runtime);
}

/**
 * Description: 新增授权接口
 * Summary: 新增授权接口
 */
async function addPdcpAuthEx(request: AddPdcpAuthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddPdcpAuthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.pdcp.auth.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdatePdcpAuthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权记录编码
  authenticationNo: string(name='authentication_no'),
  // 授权状态
  status: string(name='status'),
}

model UpdatePdcpAuthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 授权取消、授权审批接口
 * Summary: 授权接口变更
 */
async function updatePdcpAuth(request: UpdatePdcpAuthRequest): UpdatePdcpAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updatePdcpAuthEx(request, headers, runtime);
}

/**
 * Description: 授权取消、授权审批接口
 * Summary: 授权接口变更
 */
async function updatePdcpAuthEx(request: UpdatePdcpAuthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdatePdcpAuthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.pdcp.auth.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryGatewayAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业名称
  userName?: string(name='user_name'),
  // 当前页码，默认1
  pageNumber?: long(name='page_number'),
  // 页面大小，默认20
  pageSize?: long(name='page_size'),
}

model QueryGatewayAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 账户信息列表
  accountInfoList?: [ CarbonAccountInfo ](name='account_info_list'),
  // 总量
  total?: long(name='total'),
  // 当前页面
  pageNumber?: long(name='page_number'),
  // 页面大小
  pageSize?: long(name='page_size'),
}

/**
 * Description: 路由账户查询接口
 * Summary: 路由账户查询接口
 */
async function queryGatewayAccount(request: QueryGatewayAccountRequest): QueryGatewayAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryGatewayAccountEx(request, headers, runtime);
}

/**
 * Description: 路由账户查询接口
 * Summary: 路由账户查询接口
 */
async function queryGatewayAccountEx(request: QueryGatewayAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryGatewayAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.gateway.account.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryPdcpAuthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权记录编码
  authenticationNo?: string(name='authentication_no'),
  // 授权方did
  authorizerDid?: string(name='authorizer_did'),
  // 模糊匹配
  authorizerName?: string(name='authorizer_name'),
  // 被授权方did
  authorizedDid?: string(name='authorized_did'),
  // 模糊匹配
  authorizedName?: string(name='authorized_name'),
  // 数据协作类型
  dataTransferType?: string(name='data_transfer_type'),
  // 授权状态
  status?: string(name='status'),
  // 当前页面
  pageNumber?: long(name='page_number'),
  // 页面大小
  pageSize?: long(name='page_size'),
}

model QueryPdcpAuthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 总量
  total?: long(name='total'),
  // 当前页面
  pageNumber?: long(name='page_number'),
  // 页面大小
  pageSize?: long(name='page_size'),
  // 授权信息
  authenticationInfoList?: [ AuthenticationInfoVO ](name='authentication_info_list'),
}

/**
 * Description: 授权记录查询
 * Summary: 授权记录查询
 */
async function queryPdcpAuth(request: QueryPdcpAuthRequest): QueryPdcpAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryPdcpAuthEx(request, headers, runtime);
}

/**
 * Description: 授权记录查询
 * Summary: 授权记录查询
 */
async function queryPdcpAuthEx(request: QueryPdcpAuthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryPdcpAuthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.pdcp.auth.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryPdcpDataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权记录编码
  authenticationNo?: string(name='authentication_no'),
  // 数据类型
  dataType: string(name='data_type'),
  // 当前页面
  pageNumber?: long(name='page_number'),
  // 页面大小
  pageSize?: long(name='page_size'),
}

model QueryPdcpDataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 总数
  total?: long(name='total'),
  // 当前页面
  pageNumber?: long(name='page_number'),
  // 页面大小
  pageSize?: long(name='page_size'),
  // 数据列表
  dataList?: [ string ](name='data_list'),
}

/**
 * Description: 授权数据查询
 * Summary: 授权数据查询
 */
async function queryPdcpData(request: QueryPdcpDataRequest): QueryPdcpDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryPdcpDataEx(request, headers, runtime);
}

/**
 * Description: 授权数据查询
 * Summary: 授权数据查询
 */
async function queryPdcpDataEx(request: QueryPdcpDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryPdcpDataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.pdcp.data.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddEcarAvitivedataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 活动数据业务单号
  enterpriseBizNo: string(maxLength=64, name='enterprise_biz_no'),
  // 盘查排放项编码
  inventoryItemNo: string(name='inventory_item_no'),
  // 发生起始时间，格式为：yyyy-MM-dd HH:mm:ss
  occurrenceStartTime: string(name='occurrence_start_time'),
  // 发生结束时间，格式为：yyyy-MM-dd HH:mm:ss
  occurrenceEndTime: string(name='occurrence_end_time'),
  // 排放源用量值列表
  emissionSourceDosageList: [ AnyAmountItem ](name='emission_source_dosage_list'),
  // 活动数据附加要素值列表
  emissionSourceElementList?: [ AnyKeywordItem ](name='emission_source_element_list'),
  // 活动数据扩展信息值列表
  extensionValueList?: [ AnyKeywordItem ](name='extension_value_list'),
  // 凭证文件列表，每个文件通过接口/open/api/file/upload上传
  voucherFileList?: [ EnterpriseDocumentFile ](name='voucher_file_list'),
  // 备注
  remark?: string(maxLength=512, name='remark'),
}

model AddEcarAvitivedataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 排放数据录入明细编码
  emissionDataEntryItemNo?: string(name='emission_data_entry_item_no'),
  // 企业业务单号
  enterpriseBizNo?: string(name='enterprise_biz_no'),
}

/**
 * Description: 新增排放活动数据
 * Summary: 新增排放活动数据
 */
async function addEcarAvitivedata(request: AddEcarAvitivedataRequest): AddEcarAvitivedataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addEcarAvitivedataEx(request, headers, runtime);
}

/**
 * Description: 新增排放活动数据
 * Summary: 新增排放活动数据
 */
async function addEcarAvitivedataEx(request: AddEcarAvitivedataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddEcarAvitivedataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.ecar.avitivedata.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DetailEcarAvitivedataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 排放数据录入明细编码
  emissionDataEntryItemNo?: string(name='emission_data_entry_item_no'),
  // 企业业务单号
  enterpriseBizNo?: string(name='enterprise_biz_no'),
}

model DetailEcarAvitivedataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 企业排放数据录入明细编码
  emissionDataEntryItemNo?: string(name='emission_data_entry_item_no'),
  // 企业业务单号
  enterpriseBizNo?: string(name='enterprise_biz_no'),
  // 发生起始时间，格式为：yyyy-MM-dd HH:mm:ss
  occurrenceStartTime?: string(name='occurrence_start_time'),
  // 发生结束时间，格式为：yyyy-MM-dd HH:mm:ss
  occurrenceEndTime?: string(name='occurrence_end_time'),
  // 链上交易Hash
  carbonChainTradeHash?: string(name='carbon_chain_trade_hash'),
  // 总的碳排放用量，按字符串输出，最多保留6位小数
  emissionStatisticalAmount?: string(name='emission_statistical_amount'),
  // 排放源编码
  emissionSourceNo?: string(name='emission_source_no'),
  // 排放源名称
  emissionSourceName?: string(name='emission_source_name'),
  // 排放单元编码
  enterpriseLocationNo?: string(name='enterprise_location_no'),
  // 排放单元名称
  enterpriseLocationName?: string(name='enterprise_location_name'),
}

/**
 * Description: 查询排放活动数据详情
 * Summary: 查询排放活动数据详情
 */
async function detailEcarAvitivedata(request: DetailEcarAvitivedataRequest): DetailEcarAvitivedataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return detailEcarAvitivedataEx(request, headers, runtime);
}

/**
 * Description: 查询排放活动数据详情
 * Summary: 查询排放活动数据详情
 */
async function detailEcarAvitivedataEx(request: DetailEcarAvitivedataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DetailEcarAvitivedataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.ecar.avitivedata.detail', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CountEcarActivedataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 盘查排放项编码
  inventoryItemNo: string(name='inventory_item_no'),
  // 发生起始时间，格式为：yyyy-MM-dd HH:mm:ss，将统计起始时间之后的活动数据
  occurrenceStartTime: string(name='occurrence_start_time'),
  // 发生结束时间，格式为：yyyy-MM-dd HH:mm:ss，将统计结束时间之前、起始时间之后的活动数据
  occurrenceEndTime: string(name='occurrence_end_time'),
  // 活动数据附加要素信息，将统计满足相关要素值的活动数据
  emissionSourceElementList?: [ AnyKeywordItem ](name='emission_source_element_list'),
  // 活动数据扩展信息，将统计满足相关要素值的活动数据
  extensionValueList?: [ AnyKeywordItem ](name='extension_value_list'),
  // 附加的扩展统计条目，条目K为统计数据结果编码，V为统计计算公式，
  // 公式可用参数：dataEntryCount(统计排放数据条数)、totalEmissions(总碳排放量)、activeDataAmounts.{活动数据编码}（活动数据量）
  // 比如马士基计算百公里排放量公式：totalEmissions/(activeDataAmounts.AD1+activeDataAmounts.AD3)*100
  extraStatisticItemList?: [ AnyKeywordItem ](name='extra_statistic_item_list'),
}

model CountEcarActivedataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 指定时间区间内的活动数据笔数
  dataEntryCount?: long(name='data_entry_count'),
  // 总碳排放量
  totalEmissions?: string(name='total_emissions'),
  // 各活动数据用量累计
  activeDataAmountList?: [ AnyStatisticalItem ](name='active_data_amount_list'),
  // 碳排放强度，碳排放总量/订单笔数，按字符串输出，最多保留6位小数
  emissionsIntensity?: string(name='emissions_intensity'),
  // 每月排放量，排放量总计/指定时间区间内的月份数，按字符串输出，最多保留6位小数
  eachMonthEmissions?: string(name='each_month_emissions'),
  // 额外统计数据统计结果
  extraStatisticDatumList?: [ AnyAmountItem ](name='extra_statistic_datum_list'),
}

/**
 * Description: 排放活动数据统计计算
 * Summary: 排放活动数据统计计算
 */
async function countEcarActivedata(request: CountEcarActivedataRequest): CountEcarActivedataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return countEcarActivedataEx(request, headers, runtime);
}

/**
 * Description: 排放活动数据统计计算
 * Summary: 排放活动数据统计计算
 */
async function countEcarActivedataEx(request: CountEcarActivedataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CountEcarActivedataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.ecar.activedata.count', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadEcarFileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // Port的文件内容
  fileObject?: readable(description='待上传文件', ignore='true'),
  fileObjectName?: string(description='待上传文件名', ignore='true'),
  fileId: string(name='file_id'),
}

model UploadEcarFileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 文档名称
  documentName?: string(name='document_name'),
  // 碳矩阵存放的文件地址
  documentAddress?: string(name='document_address'),
}

/**
 * Description: 文件上传接口
 * Summary: 文件上传接口
 */
async function uploadEcarFile(request: UploadEcarFileRequest): UploadEcarFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadEcarFileEx(request, headers, runtime);
}

/**
 * Description: 文件上传接口
 * Summary: 文件上传接口
 */
async function uploadEcarFileEx(request: UploadEcarFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadEcarFileResponse {
  if (!Util.isUnset(request.fileObject)) {
    var uploadReq = new CreateAntcloudGatewayxFileUploadRequest{
      authToken = request.authToken,
      apiCode = 'antchain.carbon.ecar.file.upload',
      fileName = request.fileObjectName,
    };
    var uploadResp = createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
    if (!AntchainUtil.isSuccess(uploadResp.resultCode, "ok")) {
      var uploadEcarFileResponse = new UploadEcarFileResponse{
        reqMsgId = uploadResp.reqMsgId,
        resultCode = uploadResp.resultCode,
        resultMsg = uploadResp.resultMsg,
      };
      return uploadEcarFileResponse;
    }
    var uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
    AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
    request.fileId = uploadResp.fileId;
  }
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.ecar.file.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddEcarGreenoperationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 绿色行为类型，目前支持包括：
  // ElectronicInvoice(电子发票), 
  // LowCarbonCommodity(低碳商品), 
  // ReusableBag(环保减塑)
  // OfflinePayment(线下支付)
  // GreenOrder(绿色订单，可以同时解析出低碳商品、环保减塑、线下支付等多种绿色行为)
  greenOperationType: string(name='green_operation_type'),
  // 绿色行为相关的业务单号
  enterpriseBizNo: string(name='enterprise_biz_no'),
  // 发生时间，格式应如：2021-07-21 12:11:11
  occurrenceTime: string(name='occurrence_time'),
  // 绿色行为数据扩展信息，必须为JSON格式，碳矩阵将分析解析数据检查获取相关的绿色行为数据
  extInfo?: string(name='ext_info'),
}

model AddEcarGreenoperationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回记录的多种绿色行为数据摘要信息
  list?: [ GreenOperationRecordSummary ](name='list'),
}

/**
 * Description: 录入绿色行为数据，支持绿色定义或电子发票等多种绿色行为类型的数据提交
 * Summary: 录入绿色行为数据
 */
async function addEcarGreenoperation(request: AddEcarGreenoperationRequest): AddEcarGreenoperationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addEcarGreenoperationEx(request, headers, runtime);
}

/**
 * Description: 录入绿色行为数据，支持绿色定义或电子发票等多种绿色行为类型的数据提交
 * Summary: 录入绿色行为数据
 */
async function addEcarGreenoperationEx(request: AddEcarGreenoperationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddEcarGreenoperationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.ecar.greenoperation.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CountEcarGreenoperationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 绿色行为统计频率，可选值：
  // Monthly(分月统计),
  // Daily(按每日统计) 
  // 
  statisticFrequence: string(name='statistic_frequence'),
  // 统计数据的发生起始时间，格式应如：2021-07-21 12:11:11
  occurrenceStartTime?: string(name='occurrence_start_time'),
  // 统计数据的发生结束时间，格式应如：2021-07-21 12:11:11，不传为当日最近时间
  occurrenceEndTime?: string(name='occurrence_end_time'),
}

model CountEcarGreenoperationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 绿色行为产生的绿色能量总量
  greenEnergyTotal?: long(name='green_energy_total'),
  // 绿色能量单位，默认为g
  greenEnergyUnit?: string(name='green_energy_unit'),
  // 绿色行为记录数据
  greenOperationRecords?: long(name='green_operation_records'),
  // 按频率统计的绿色行为数据列表
  statisticsByFrequenceList?: [ GreenOperationStatisticsByFrequence ](name='statistics_by_frequence_list'),
  // 按绿色行为类型统计的绿色行为数据列表
  statisticsByTypeList?: [ GreenOperationStatisticsByType ](name='statistics_by_type_list'),
}

/**
 * Description: 统计绿色行为数据，返回时间范围内的、按绿色行为类型统计的绿色行为数据
 * Summary: 统计绿色行为数据
 */
async function countEcarGreenoperation(request: CountEcarGreenoperationRequest): CountEcarGreenoperationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return countEcarGreenoperationEx(request, headers, runtime);
}

/**
 * Description: 统计绿色行为数据，返回时间范围内的、按绿色行为类型统计的绿色行为数据
 * Summary: 统计绿色行为数据
 */
async function countEcarGreenoperationEx(request: CountEcarGreenoperationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CountEcarGreenoperationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.ecar.greenoperation.count', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListEcarGreenoperationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 限制的记录条数
  limit: long(name='limit'),
}

model ListEcarGreenoperationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 最近发生的绿色行为数据列表
  list?: [ GreenOperationRecordSummary ](name='list'),
}

/**
 * Description: 查询最近发生的绿色行为数据列表，按照请求的记录条数限制查询最近的绿色数据
 * Summary: 查询最近的绿色行为数据
 */
async function listEcarGreenoperation(request: ListEcarGreenoperationRequest): ListEcarGreenoperationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listEcarGreenoperationEx(request, headers, runtime);
}

/**
 * Description: 查询最近发生的绿色行为数据列表，按照请求的记录条数限制查询最近的绿色数据
 * Summary: 查询最近的绿色行为数据
 */
async function listEcarGreenoperationEx(request: ListEcarGreenoperationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListEcarGreenoperationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.ecar.greenoperation.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PreviewEcarAvitivedataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求统计的年份，默认为当前年份
  year?: long(name='year'),
  // 统计比较运算是的基准：
  // LastYear(去年同期比较),
  // CriteriaYear(同基准年比较)。
  // 默认与去年同期比较。
  comparisonStandard?: string(name='comparison_standard'),
}

model PreviewEcarAvitivedataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 总排放量，最多保留6位小数
  totalEmissions?: string(name='total_emissions'),
  // 核减减排量，最多保留6位小数
  subtractReductions?: string(name='subtract_reductions'),
  // 净排放量，核减后的碳排放量
  netReductions?: string(name='net_reductions'),
  // 年同比
  yearCompareLastPer?: string(name='year_compare_last_per'),
  // 碳排放量单位
  unit?: string(name='unit'),
  // 碳排放量单位显示标签
  unitLabel?: string(name='unit_label'),
  // 各月份排放数据列表
  list?: [ AnnualMonthEmissionDatum ](name='list'),
}

/**
 * Description: 按年度统计排放数据，用于一般的总的预览页展示数据
 * Summary: 预览本年度排放统计
 */
async function previewEcarAvitivedata(request: PreviewEcarAvitivedataRequest): PreviewEcarAvitivedataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return previewEcarAvitivedataEx(request, headers, runtime);
}

/**
 * Description: 按年度统计排放数据，用于一般的总的预览页展示数据
 * Summary: 预览本年度排放统计
 */
async function previewEcarAvitivedataEx(request: PreviewEcarAvitivedataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PreviewEcarAvitivedataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.ecar.avitivedata.preview', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model RegisterEcarEnterprisememberRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 注册会员在蚂蚁DIS服务的DID账号
  accountDid?: string(name='account_did'),
  // 注册会员姓名
  name?: string(name='name'),
  // 注册会员身份证号码
  identityCardCode?: string(name='identity_card_code'),
  // 手机号码
  mobile?: string(name='mobile'),
}

model RegisterEcarEnterprisememberResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 蚂蚁DIS服务的DID账号
  accountDid?: string(name='account_did'),
}

/**
 * Description: 机构会员注册接口，支持根据蚂蚁DID或者姓名+密码注意企业的终端会员
 * Summary: 机构会员注册
 */
async function registerEcarEnterprisemember(request: RegisterEcarEnterprisememberRequest): RegisterEcarEnterprisememberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return registerEcarEnterprisememberEx(request, headers, runtime);
}

/**
 * Description: 机构会员注册接口，支持根据蚂蚁DID或者姓名+密码注意企业的终端会员
 * Summary: 机构会员注册
 */
async function registerEcarEnterprisememberEx(request: RegisterEcarEnterprisememberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RegisterEcarEnterprisememberResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.ecar.enterprisemember.register', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddEcarOffsetacquisitionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 活动数据采集单号
  acquisitionItemNo: string(name='acquisition_item_no'),
  // 碳普惠减碳项目编号
  projectNo: string(name='project_no'),
  // 参与的碳账户DID
  accountDid: string(name='account_did'),
  // 发生时间，格式为yyyy-MM-DD HH:MM:SS（到秒）或 yyyy-MM-DD（按日录入）
  occurrentTime: string(name='occurrent_time'),
  // 发生场景，需要按照约定的场景编码提交
  scenarioCode: string(name='scenario_code'),
  // 活动数据列表
  activeDataList: [ AnyAmountItem ](name='active_data_list'),
}

model AddEcarOffsetacquisitionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 活动数据采集单号
  acquisitionItemNo?: string(name='acquisition_item_no'),
  // 减碳量，最多4位小数
  carbonEmissionAmount?: string(name='carbon_emission_amount'),
}

/**
 * Description: 碳补偿数据采集，提供给碳普惠业务相关接口，外围系统提交碳普惠数据
 * Summary: 碳补偿数据采集
 */
async function addEcarOffsetacquisition(request: AddEcarOffsetacquisitionRequest): AddEcarOffsetacquisitionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addEcarOffsetacquisitionEx(request, headers, runtime);
}

/**
 * Description: 碳补偿数据采集，提供给碳普惠业务相关接口，外围系统提交碳普惠数据
 * Summary: 碳补偿数据采集
 */
async function addEcarOffsetacquisitionEx(request: AddEcarOffsetacquisitionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddEcarOffsetacquisitionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.ecar.offsetacquisition.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddEcarOffsettranslateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 转移业务流水单号
  translationItemNo: string(name='translation_item_no'),
  // 碳补偿项目编号
  projectNo: string(name='project_no'),
  // 出账账户DID
  drawingAccountDid: string(name='drawing_account_did'),
  // 转移入账账户DID
  receiptAccountDid: string(name='receipt_account_did'),
  // 转移减碳量额度，最多六位小数
  translationAmmount: string(name='translation_ammount'),
  // 业务类型包括，默认不需要传入，默认值为Translation
  translationType?: string(name='translation_type'),
  // 发生时间，格式为yyyy-MM-DD HH:MM:SS
  occurrentTime: string(name='occurrent_time'),
}

model AddEcarOffsettranslateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 碳普惠减碳量转移，减碳量在业务端兑换成权益的场景时可使用此接口
 * Summary: 碳普惠减碳量转移
 */
async function addEcarOffsettranslate(request: AddEcarOffsettranslateRequest): AddEcarOffsettranslateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addEcarOffsettranslateEx(request, headers, runtime);
}

/**
 * Description: 碳普惠减碳量转移，减碳量在业务端兑换成权益的场景时可使用此接口
 * Summary: 碳普惠减碳量转移
 */
async function addEcarOffsettranslateEx(request: AddEcarOffsettranslateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddEcarOffsettranslateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.ecar.offsettranslate.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AuthEcarOffsetdatumRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 会员在蚂蚁DIS服务的账户DID
  accountDid: string(name='account_did'),
  // 碳普惠平台编码，如蚂蚁森林编码为Antforest
  carbonOffsetPlatformNo: string(name='carbon_offset_platform_no'),
  // 平台方会员账户ID
  platformAccountId: string(name='platform_account_id'),
  // 授权关键数据列表，KV结构列表
  authKeywordList: [ AnyKeywordItem ](name='auth_keyword_list'),
}

model AuthEcarOffsetdatumResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 碳普惠数据授权，授权三方平台租户可访问相关平台方会员的碳普惠数据
 * Summary: 碳普惠数据授权
 */
async function authEcarOffsetdatum(request: AuthEcarOffsetdatumRequest): AuthEcarOffsetdatumResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return authEcarOffsetdatumEx(request, headers, runtime);
}

/**
 * Description: 碳普惠数据授权，授权三方平台租户可访问相关平台方会员的碳普惠数据
 * Summary: 碳普惠数据授权
 */
async function authEcarOffsetdatumEx(request: AuthEcarOffsetdatumRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AuthEcarOffsetdatumResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.ecar.offsetdatum.auth', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListEcarOffsetdatumRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 碳补偿项目编码
  projectNo?: string(name='project_no'),
  // 账户DID
  accountDid?: string(name='account_did'),
  // 发生开始时间
  occurrentStartTime?: string(name='occurrent_start_time'),
  // 数据发生截止时间
  occurrentEndTime?: string(name='occurrent_end_time'),
  // 碳普惠平台编码
  carbonOffsetPlatformNo?: string(name='carbon_offset_platform_no'),
  // 发生场景编码，需指定相关碳普惠平台的场景编码，可以指定多个场景
  scenarioCode?: [ string ](name='scenario_code'),
  // 分页查询数据时的页码，从1开始，不传入时默认值为1
  current?: long(name='current'),
  // 每页数据量，默认值为20，取值范围为[10,200]
  pageSize?: long(name='page_size'),
}

model ListEcarOffsetdatumResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前查询的页码
  current?: long(name='current'),
  // 每页记录条数
  pageSize?: long(name='page_size'),
  // 记录总条数
  total?: long(name='total'),
  // 碳普惠减碳数据明细
  list?: [ CarbonOffsetAcquisitionItem ](name='list'),
}

/**
 * Description: 碳普惠数据列表查询，根据账户DID和日期查询碳补偿数据
 * Summary: 碳普惠数据列表查询
 */
async function listEcarOffsetdatum(request: ListEcarOffsetdatumRequest): ListEcarOffsetdatumResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listEcarOffsetdatumEx(request, headers, runtime);
}

/**
 * Description: 碳普惠数据列表查询，根据账户DID和日期查询碳补偿数据
 * Summary: 碳普惠数据列表查询
 */
async function listEcarOffsetdatumEx(request: ListEcarOffsetdatumRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListEcarOffsetdatumResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.ecar.offsetdatum.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListEcarEnterprisememberRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 会员注册开始时间
  registerStartTime?: string(name='register_start_time'),
  // 会员注册结束时间
  registerEndTime?: string(name='register_end_time'),
  // 当前查询页码，默认值为1
  current?: long(name='current'),
  // 每页记录条数，默认为20，取值范围为[10,200]
  pageSize?: long(name='page_size'),
}

model ListEcarEnterprisememberResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 当前查询的页码
  current?: long(name='current'),
  // 每页记录条数
  pageSize?: long(name='page_size'),
  // 记录总条数
  total?: long(name='total'),
  // 会员资料列表
  list?: [ EnterpriseMemberSummary ](name='list'),
}

/**
 * Description: 机构会员列表查询，支持分页查询指定时间范围内的会员列表，返回结果按照会员注册时间降序排列
 * Summary: 机构会员列表查询
 */
async function listEcarEnterprisemember(request: ListEcarEnterprisememberRequest): ListEcarEnterprisememberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listEcarEnterprisememberEx(request, headers, runtime);
}

/**
 * Description: 机构会员列表查询，支持分页查询指定时间范围内的会员列表，返回结果按照会员注册时间降序排列
 * Summary: 机构会员列表查询
 */
async function listEcarEnterprisememberEx(request: ListEcarEnterprisememberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListEcarEnterprisememberResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.ecar.enterprisemember.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model PreviewEcarOffsetdatumRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 碳普惠项目编码
  projectNo: string(name='project_no'),
}

model PreviewEcarOffsetdatumResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 注册会员总数
  registerMemberTotal?: long(name='register_member_total'),
  // 碳总能量值
  carbonEnergyTotal?: string(name='carbon_energy_total'),
}

/**
 * Description: 碳普惠项目数据预览，包括注册会员数和累积碳能量值
 * Summary: 碳普惠项目数据预览
 */
async function previewEcarOffsetdatum(request: PreviewEcarOffsetdatumRequest): PreviewEcarOffsetdatumResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return previewEcarOffsetdatumEx(request, headers, runtime);
}

/**
 * Description: 碳普惠项目数据预览，包括注册会员数和累积碳能量值
 * Summary: 碳普惠项目数据预览
 */
async function previewEcarOffsetdatumEx(request: PreviewEcarOffsetdatumRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PreviewEcarOffsetdatumResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.ecar.offsetdatum.preview', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DetailEcarEnterprisememberRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 注册会员手机号码
  mobile?: string(name='mobile'),
  // 注册会员身份证号码
  identityCardCode?: string(name='identity_card_code'),
}

model DetailEcarEnterprisememberResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 账户DID
  accountDid?: string(name='account_did'),
  // 会员姓名，脱敏处理
  name?: string(name='name'),
  // 会员手机号码，脱敏处理
  mobile?: string(name='mobile'),
  // 注册时间
  registerTime?: string(name='register_time'),
}

/**
 * Description: 单个机构会员信息查询，根据会员关键信息，如手机号码、身份证号码查询会员资料
 * Summary: 单个机构会员信息查询
 */
async function detailEcarEnterprisemember(request: DetailEcarEnterprisememberRequest): DetailEcarEnterprisememberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return detailEcarEnterprisememberEx(request, headers, runtime);
}

/**
 * Description: 单个机构会员信息查询，根据会员关键信息，如手机号码、身份证号码查询会员资料
 * Summary: 单个机构会员信息查询
 */
async function detailEcarEnterprisememberEx(request: DetailEcarEnterprisememberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DetailEcarEnterprisememberResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.ecar.enterprisemember.detail', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryEcarOffsetaccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 碳普惠项目编码
  projectNo: string(name='project_no'),
  // 账户DID
  accountDid: string(name='account_did'),
}

model QueryEcarOffsetaccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 碳普惠项目编码
  projectNo?: string(name='project_no'),
  // 账户DID
  accountDid?: string(name='account_did'),
  // 账户减碳量余额
  offsetBalance?: string(name='offset_balance'),
}

/**
 * Description: 碳补偿项目账户查询，根据账户DID和项目编码查询账户信息
 * Summary: 碳补偿项目账户查询
 */
async function queryEcarOffsetaccount(request: QueryEcarOffsetaccountRequest): QueryEcarOffsetaccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryEcarOffsetaccountEx(request, headers, runtime);
}

/**
 * Description: 碳补偿项目账户查询，根据账户DID和项目编码查询账户信息
 * Summary: 碳补偿项目账户查询
 */
async function queryEcarOffsetaccountEx(request: QueryEcarOffsetaccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryEcarOffsetaccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.ecar.offsetaccount.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DetailEcarOffsetdatumRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务发生时的调用方的业务单号
  acquisitionItemNo: string(name='acquisition_item_no'),
}

model DetailEcarOffsetdatumResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 碳补偿项目编码
  projectNo?: string(name='project_no'),
  // 碳普惠项目名称
  projectName?: string(name='project_name'),
  // 会员账户DID
  accountDid?: string(name='account_did'),
  // 采集数据单号
  // 
  acquisitionItemNo?: string(name='acquisition_item_no'),
  // 发生时间
  occurrentTime?: string(name='occurrent_time'),
  // 发生场景编码
  scenarioCode?: string(name='scenario_code'),
  // 发生场景名称
  scenarioName?: string(name='scenario_name'),
  // 碳普惠平台编码，如果非平台采集数据，则显示为自采编码：Self
  platformNo?: string(name='platform_no'),
  // 减碳量
  offsetVolume?: string(name='offset_volume'),
  // 碳能量值
  carbonEnergy?: long(name='carbon_energy'),
  // 活动数据详情列表
  activeDataList?: [ CarbonOffsetActiveDataDetail ](name='active_data_list'),
}

/**
 * Description: 查询碳补偿数据详情
 * Summary: 碳补偿数据详情
 */
async function detailEcarOffsetdatum(request: DetailEcarOffsetdatumRequest): DetailEcarOffsetdatumResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return detailEcarOffsetdatumEx(request, headers, runtime);
}

/**
 * Description: 查询碳补偿数据详情
 * Summary: 碳补偿数据详情
 */
async function detailEcarOffsetdatumEx(request: DetailEcarOffsetdatumRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DetailEcarOffsetdatumResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.ecar.offsetdatum.detail', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DetailEcarOffsettranslateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 减碳数据转移记录业务方的业务单号
  translationItemNo: string(name='translation_item_no'),
}

model DetailEcarOffsettranslateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务方的业务单号
  translationItemNo?: string(name='translation_item_no'),
  // 发生时间
  occurrenceTime?: string(name='occurrence_time'),
  // 业务发生量：转移量
  amount?: string(name='amount'),
  // 碳补偿项目编码
  projectNo?: string(name='project_no'),
  // 碳普惠项目名称
  projectName?: string(name='project_name'),
  // 转出碳账户DID
  drawingAccountDid?: string(name='drawing_account_did'),
  // 转入碳账户DID
  receiptAccountDid?: string(name='receipt_account_did'),
}

/**
 * Description: 查询碳普惠减碳量转移记录详情
 * Summary: 碳普惠减碳量转移记录详情
 */
async function detailEcarOffsettranslate(request: DetailEcarOffsettranslateRequest): DetailEcarOffsettranslateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return detailEcarOffsettranslateEx(request, headers, runtime);
}

/**
 * Description: 查询碳普惠减碳量转移记录详情
 * Summary: 碳普惠减碳量转移记录详情
 */
async function detailEcarOffsettranslateEx(request: DetailEcarOffsettranslateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DetailEcarOffsettranslateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.ecar.offsettranslate.detail', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SubmitEcarLcaassementRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单编号，碳矩阵关联的订单编号，业务主键
  orderNo: string(name='order_no'),
  // LCA产品评估状态，返回约定的状态编码
  status: string(name='status'),
  // 项目摘要信息，包括有关产品详情和报告时间等，JSON格式，按照约定的格式解析成碳矩阵对应的碳足迹项目和产品信息
  projectSummary?: string(name='project_summary'),
  // 产品工序数据，JSON格式，按照约定的格式解析成碳矩阵对应的工序信息
  processDatum?: string(name='process_datum'),
  // 碳足迹评估结果数据，JSON格式，按照约定的格式解析成碳矩阵对应的评估结果
  assementResult?: string(name='assement_result'),
  // 碳足迹评估报告，包括一些报告文件地址等，JSON格式，碳矩阵下载保存对应的报告文件
  assementReport?: string(name='assement_report'),
  // 扩展信息，JSON格式，预留需提交的数据
  extraDatum?: string(name='extra_datum'),
}

model SubmitEcarLcaassementResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 平台方LCA评估结果提交接口，支持三方平台提交LCA评估结果数据
 * Summary: 平台方LCA评估结果提交
 */
async function submitEcarLcaassement(request: SubmitEcarLcaassementRequest): SubmitEcarLcaassementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return submitEcarLcaassementEx(request, headers, runtime);
}

/**
 * Description: 平台方LCA评估结果提交接口，支持三方平台提交LCA评估结果数据
 * Summary: 平台方LCA评估结果提交
 */
async function submitEcarLcaassementEx(request: SubmitEcarLcaassementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitEcarLcaassementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.ecar.lcaassement.submit', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryThirdCertRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 三方平台的产品ID
  productId?: string(name='product_id'),
  // GreenProductCertification ：绿色产品认证证书
  // GarbonNeutrality ： 碳中和证书
  // GreenhouseGasInventory 温室气体核查证书
  certificationType?: string(name='certification_type'),
  // 证书文件中的产品名称
  cproductName?: string(name='cproduct_name'),
  // 证书文件中的产品型号
  cproductModel?: string(name='cproduct_model'),
  // 证书文件中的生产商名称
  cproductFirm?: string(name='cproduct_firm'),
  // 三方平台的企业ID
  companyId: string(name='company_id'),
}

model QueryThirdCertResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 证书列表
  certifications?: [ CertProductInfoDO ](name='certifications'),
}

/**
 * Description: 三方平台调用此接口，查询用户的证书信息
 * Summary: 证书查询
 */
async function queryThirdCert(request: QueryThirdCertRequest): QueryThirdCertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryThirdCertEx(request, headers, runtime);
}

/**
 * Description: 三方平台调用此接口，查询用户的证书信息
 * Summary: 证书查询
 */
async function queryThirdCertEx(request: QueryThirdCertRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryThirdCertResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.carbon.third.cert.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAntcloudGatewayxFileUploadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 上传文件作用的openapi method
  apiCode: string(name='api_code'),
  // 文件标签，多个标签;分割
  fileLabel?: string(maxLength=100, name='file_label'),
  // 自定义的文件元数据
  fileMetadata?: string(maxLength=1000, name='file_metadata'),
  // 文件名，不传则随机生成文件名
  fileName?: string(maxLength=100, name='file_name'),
  // 文件的多媒体类型
  mimeType?: string(name='mime_type'),
  // 产品方的api归属集群，即productInstanceId
  apiCluster?: string(name='api_cluster'),
}

model CreateAntcloudGatewayxFileUploadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 上传有效期
  expiredTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='expired_time'),
  // 32位文件唯一id
  fileId?: string(name='file_id'),
  // 放入http请求头里
  uploadHeaders?: [ XNameValuePair ](name='upload_headers'),
  // 文件上传地址
  uploadUrl?: string(name='upload_url'),
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUpload(request: CreateAntcloudGatewayxFileUploadRequest): CreateAntcloudGatewayxFileUploadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAntcloudGatewayxFileUploadEx(request, headers, runtime);
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUploadEx(request: CreateAntcloudGatewayxFileUploadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAntcloudGatewayxFileUploadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.gatewayx.file.upload.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

