import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.8',
    _prod_code = 'ak_a1f82644937c486c81a62b0e5a6b4fbe',
    _prod_channel = 'saas'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// api信息结构体
model ApiInfoModel {
  // api名称
  apiName: string(name='api_name', example='demo.sss.ss.ss.bind'),
  // API所属网关技术产品码
  prodCode: string(name='prod_code', example='demo'),
  // 是否是内部接口 0对外 1对内
  internal: long(name='internal', example='0'),
  // api版本号
  apiVersion: string(name='api_version', example='1.0'),
  // api描述
  apiDesc: string(name='api_desc', example='测试用api'),
  // api所属网关产品id
  providerId: string(name='provider_id', example='0000567567'),
}

// 能力信息
model AbilityInfo {
  // 能力编号
  abilityId: string(name='ability_id', example='ak_3821c8f0145440dab91b9b23edb1dc73'),
  // 能力名称
  abilityName: string(name='ability_name', example='B2B支付网关'),
  // 研发负责人
  devOwner: string(name='dev_owner', example='张三'),
  // 创建时间
  gmtCreate: string(name='gmt_create', example='2021-12-30 00:00:00'),
  // 描述信息
  description: string(name='description', example='适用场景：企业资金支付场景   适合行业：存在企业采购/企业充值/企业转账等企业支付场景的行业   归属行业线：B类基础产品   产品描述：将交易场景与企业对公账户支付线上关联，订单交易对应的支付需求自动发送给企业网银做财务支出的确认和复核。'),
  // 研发负责人邮箱前缀
  devOwnerPrefixEmail: string(name='dev_owner_prefix_email', example='qiujianglong.qjl'),
  // 产品负责人
  productOwner: string(name='product_owner', example='江来'),
  // 能力对应商业中台L5Code
  businessCode?: string(name='business_code', example='DMZNFM00883001'),
  // apiInfoModels列表
  apiInfoModels: [ ApiInfoModel ](name='api_info_models', example='test'),
  // 能力sla看板url
  slaUrl?: string(name='sla_url', example='https://antslo.alipay.com/maas/slistd/115600116/std/d/147100480_slistd?var-tag1=xxx&var-tag2=All'),
}

model QueryAntchainAbcAbcdaAbcddaaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryAntchainAbcAbcdaAbcddaaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 调试a s dddd
 * Summary: 调试1
 */
async function queryAntchainAbcAbcdaAbcddaa(request: QueryAntchainAbcAbcdaAbcddaaRequest): QueryAntchainAbcAbcdaAbcddaaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAntchainAbcAbcdaAbcddaaEx(request, headers, runtime);
}

/**
 * Description: 调试a s dddd
 * Summary: 调试1
 */
async function queryAntchainAbcAbcdaAbcddaaEx(request: QueryAntchainAbcAbcdaAbcddaaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAntchainAbcAbcdaAbcddaaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.abc.abcda.abcddaa.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindDemoAaaBbbCccRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 123
  date: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='date'),
  // 123
  data: string(name='data'),
}

model BindDemoAaaBbbCccResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 自动化测试创建test，请勿修改、删除
 * Summary: 自动化测试创建test1
 */
async function bindDemoAaaBbbCcc(request: BindDemoAaaBbbCccRequest): BindDemoAaaBbbCccResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindDemoAaaBbbCccEx(request, headers, runtime);
}

/**
 * Description: 自动化测试创建test，请勿修改、删除
 * Summary: 自动化测试创建test1
 */
async function bindDemoAaaBbbCccEx(request: BindDemoAaaBbbCccRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindDemoAaaBbbCccResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.aaa.bbb.ccc.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindAntchainSaasAbilityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // api名称
  apiName: string(name='api_name'),
  // 能力id列表
  abilityIds: [ string ](name='ability_ids'),
  // 操作人的域账号
  operatorId: string(name='operator_id'),
  // api信息
  apiInfoModel: ApiInfoModel(name='api_info_model'),
}

model BindAntchainSaasAbilityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 绑定API
 * Summary: 绑定能力与API关系
 */
async function bindAntchainSaasAbility(request: BindAntchainSaasAbilityRequest): BindAntchainSaasAbilityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindAntchainSaasAbilityEx(request, headers, runtime);
}

/**
 * Description: 绑定API
 * Summary: 绑定能力与API关系
 */
async function bindAntchainSaasAbilityEx(request: BindAntchainSaasAbilityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindAntchainSaasAbilityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.saas.ability.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDemoAbcAbcAbcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryDemoAbcAbcAbcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 自动化测试创建,用于测试API的修改
 * Summary: 自动化测试创建,用于测试API的修改勿动
 */
async function queryDemoAbcAbcAbc(request: QueryDemoAbcAbcAbcRequest): QueryDemoAbcAbcAbcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDemoAbcAbcAbcEx(request, headers, runtime);
}

/**
 * Description: 自动化测试创建,用于测试API的修改
 * Summary: 自动化测试创建,用于测试API的修改勿动
 */
async function queryDemoAbcAbcAbcEx(request: QueryDemoAbcAbcAbcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDemoAbcAbcAbcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.abc.abc.abc.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CallbackAntchainSaasAbilityRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // api名称集合
  apiNames: [ string ](name='api_names'),
}

model CallbackAntchainSaasAbilityResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: api上线回调接口
 * Summary: api上线回调接口
 */
async function callbackAntchainSaasAbility(request: CallbackAntchainSaasAbilityRequest): CallbackAntchainSaasAbilityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return callbackAntchainSaasAbilityEx(request, headers, runtime);
}

/**
 * Description: api上线回调接口
 * Summary: api上线回调接口
 */
async function callbackAntchainSaasAbilityEx(request: CallbackAntchainSaasAbilityRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CallbackAntchainSaasAbilityResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.saas.ability.callback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindAntchainSaasAbilityApiRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 共享能力id
  abilityId: string(name='ability_id'),
  // qiujianglong.qjl
  operatorId: string(name='operator_id'),
  // api模型集合
  apiInfoModels: [ ApiInfoModel ](name='api_info_models'),
}

model BindAntchainSaasAbilityApiResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 绑定能力的api信息
 * Summary: 绑定能力的api信息
 */
async function bindAntchainSaasAbilityApi(request: BindAntchainSaasAbilityApiRequest): BindAntchainSaasAbilityApiResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindAntchainSaasAbilityApiEx(request, headers, runtime);
}

/**
 * Description: 绑定能力的api信息
 * Summary: 绑定能力的api信息
 */
async function bindAntchainSaasAbilityApiEx(request: BindAntchainSaasAbilityApiRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindAntchainSaasAbilityApiResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.saas.ability.api.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAntchainSaasAbilityBusinesscodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 能力id
  abilityId: string(name='ability_id'),
}

model QueryAntchainSaasAbilityBusinesscodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 能力信息
  abilityInfo?: AbilityInfo(name='ability_info'),
}

/**
 * Description: 根据能力id查询能力信息
 * Summary: 根据能力id查询能力信息
 */
async function queryAntchainSaasAbilityBusinesscode(request: QueryAntchainSaasAbilityBusinesscodeRequest): QueryAntchainSaasAbilityBusinesscodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAntchainSaasAbilityBusinesscodeEx(request, headers, runtime);
}

/**
 * Description: 根据能力id查询能力信息
 * Summary: 根据能力id查询能力信息
 */
async function queryAntchainSaasAbilityBusinesscodeEx(request: QueryAntchainSaasAbilityBusinesscodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAntchainSaasAbilityBusinesscodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.saas.ability.businesscode.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OperateDemoShanghaiPreTestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 参数1
  param1: string(name='param1'),
}

model OperateDemoShanghaiPreTestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 用于上海非金生产环境的同步测试
 * Summary: 上海非金生产环境测试
 */
async function operateDemoShanghaiPreTest(request: OperateDemoShanghaiPreTestRequest): OperateDemoShanghaiPreTestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return operateDemoShanghaiPreTestEx(request, headers, runtime);
}

/**
 * Description: 用于上海非金生产环境的同步测试
 * Summary: 上海非金生产环境测试
 */
async function operateDemoShanghaiPreTestEx(request: OperateDemoShanghaiPreTestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OperateDemoShanghaiPreTestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.shanghai.pre.test.operate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

