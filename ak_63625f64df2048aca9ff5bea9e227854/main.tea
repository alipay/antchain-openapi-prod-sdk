import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.0',
    _prod_code = 'ak_63625f64df2048aca9ff5bea9e227854',
    _prod_channel = 'saas'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 键值对
model Map {
  // 键
  key: string(name='key', example='key1'),
  // 值
  value?: string(name='value', example='value1'),
}

model CheckDemoAicoguardcoreAicoguardrailsQuestionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 当前提问内容
  question: string(name='question'),
  // 当前提问格式
  questionFormat?: string(name='question_format'),
  // 应用名
  appCode: string(name='app_code'),
  // 会话ID
  sessionId: string(name='session_id'),
  // 唯一定位一个问答对
  requestId: string(name='request_id'),
  // 场景code，走SOP流程申请
  sceneCode: string(name='scene_code'),
  // 当前固定填入：TJ_QUESTION_BASIC
  serviceCode: string(name='service_code'),
  // Agent标识
  agentCode: string(name='agent_code'),
  // 大模型Code，区分大模型类型和版本，比如bailing_10b_0229、bailing_65b_0315
  modelCode?: string(name='model_code'),
  // 用户ID，用于主体风险判断
  userId?: string(name='user_id'),
  // 扩展信息，会透传到业务属性中
  businessProperties?: Map(name='business_properties'),
}

model CheckDemoAicoguardcoreAicoguardrailsQuestionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否安全无风险 true：安全无风险 false：有风险
  safe?: boolean(name='safe'),
  // 安全动作 BLOCK：拦截  SECURITY_ANSWER：安全代答  SECURITY_PROMPT：安全提示增强
  actionCode?: string(name='action_code'),
  // 安全动作相关文案，比如安全提示增强的文案、安全代答的回答、回答里补充的安全提示
  actionMsg?: string(name='action_msg'),
  // 会话动作. END_SESSION：终止会话.  RECALL_QUERY：撤回提问
  sessionAction?: string(name='session_action'),
}

/**
 * Description: 大模型护栏多轮对话提问检测 测试
 * Summary: 大模型护栏多轮对话提问检测
 */
async function checkDemoAicoguardcoreAicoguardrailsQuestion(request: CheckDemoAicoguardcoreAicoguardrailsQuestionRequest): CheckDemoAicoguardcoreAicoguardrailsQuestionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkDemoAicoguardcoreAicoguardrailsQuestionEx(request, headers, runtime);
}

/**
 * Description: 大模型护栏多轮对话提问检测 测试
 * Summary: 大模型护栏多轮对话提问检测
 */
async function checkDemoAicoguardcoreAicoguardrailsQuestionEx(request: CheckDemoAicoguardcoreAicoguardrailsQuestionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckDemoAicoguardcoreAicoguardrailsQuestionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.aicoguardcore.aicoguardrails.question.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckAntcloudAitechguardAicoguardrailsAskRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 数据唯一标识，能够根据该值定位到该条数据
  requestId: string(name='request_id'),
  // 会话ID，用于匹配多轮对话上下文
  sessionId: string(name='session_id'),
  // 应用名，蚂蚁侧提供
  appCode: string(name='app_code'),
  // 场景code，走SOP流程申请
  sceneCode: string(name='scene_code'),
  // 当前提问内容
  question: string(name='question'),
  // 当前提问格式，默认PLAINTEXT，详见3.2 questionFormat&answerFormat说明
  questionFormat: string(name='question_format'),
  // 安全能力类型，0-知识库+天鉴兜底，1-纯知识库
  type: long(name='type'),
  // 加密的uid，仅用于唯一标示调用方
  userId?: string(name='user_id'),
}

model CheckAntcloudAitechguardAicoguardrailsAskResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 会话ID，用于匹配多轮对话上下文
  sessionId?: string(name='session_id'),
  // 唯一定位一个问答对
  requestId?: string(name='request_id'),
  // 是否安全无风险. true：安全无风险. false：有风险
  safe?: boolean(name='safe'),
  // 安全动作
  // 提问场景
  //    BLOCK：拦截
  //    SECURITY_ANSWER：安全代答
  //    SECURITY_PROMPT：安全提示增强
  actionCode?: string(name='action_code'),
  // 安全代答的回答
  securityAnswer?: string(name='security_answer'),
  // 有安全风险时的提问改写
  securityPrompt?: string(name='security_prompt'),
  // 有风险时的风险标签
  riskLabel?: string(name='risk_label'),
  // 会话动作
  //    END_SESSION：终止会话
  //    RECALL_QUERY：撤回提问
  sessionAction?: string(name='session_action'),
}

/**
 * Description: 提问检测服务接口
 * Summary: 提问检测服务接口
 */
async function checkAntcloudAitechguardAicoguardrailsAsk(request: CheckAntcloudAitechguardAicoguardrailsAskRequest): CheckAntcloudAitechguardAicoguardrailsAskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkAntcloudAitechguardAicoguardrailsAskEx(request, headers, runtime);
}

/**
 * Description: 提问检测服务接口
 * Summary: 提问检测服务接口
 */
async function checkAntcloudAitechguardAicoguardrailsAskEx(request: CheckAntcloudAitechguardAicoguardrailsAskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckAntcloudAitechguardAicoguardrailsAskResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.aitechguard.aicoguardrails.ask.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

