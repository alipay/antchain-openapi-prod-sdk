import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.5',
    _prod_code = 'DEMOSDK',
    _prod_channel = 'default'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 子结构体
model SubDemoStruct {
  // name
  name: string(name='name', example='name'),
  // value
  value: string(name='value', example='value'),
}

// ABC示例结构体
model AbcDemoStruct {
  // 字符串属性
  someString?: string(maxLength=100, minLength=10, name='some_string', example='str'),
  // Long型属性
  someNumber: long(maximum=100, minimum=1, name='some_number', example='100'),
  // 布尔型
  someBoolean: boolean(name='some_boolean', example='true, false'),
  // ISO8601格式字符串：yyyy-MM-dd_T_HH:mm:ss_Z_
  someDate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='some_date', example='2018-10-10T10:10:00Z'),
  // 字符串数组
  someStringList?: [ string ](name='some_string_list', example='somestring'),
  // 子结构体
  someStruct: SubDemoStruct(name='some_struct', example='{ "name": "value" }'),
  // 结构体数组
  someStructList: [ SubDemoStruct ](name='some_struct_list', example='[{"name": "value"}]'),
}

// TestDemo
model TestDemo {
  // id
  demo: string(name='demo', example='id'),
}

// 模拟大安全类型
model FaceImage {
  // 1123
  content?: string(name='content', example='123'),
  // 123
  rect: string(name='rect', example='123'),
}

// 结构体返回结构
model ResultListDemo {
  // 返回结果码
  code: AbcDemoStruct(name='code', example='{"name":"value"}'),
  // 返回结果
  data: AbcDemoStruct(name='data', example='{"name":{"key":"value"}}'),
  // 返回信息
  message: AbcDemoStruct(name='message', example='{"message":"success"}'),
}

// 姓名和年龄
model NameAndAge {
  // 姓名
  name?: string(name='name', example='张三'),
  // 年龄
  age?: long(name='age', example='18'),
}

// 共享能力六期接入rasp回归
model GongXiangnengli {
}

// 初始参数
model InitParks {
  // 返回接收到请求的当前时间
  time: string(name='time', example='2024-11-03 14:00'),
  // 操作人
  operator: string(name='operator', example='姜泽琦'),
  // 请求编号
  count: long(name='count', example='1'),
}

// 11
model InitPark {
  // 1
  demo: string(name='demo', example='1'),
}

// 初始
model InitPack {
  // 请求时间
  time: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='time', example='2018-10-10T10:10:00Z'),
  // 请求人
  operate: string(name='operate', example='张三'),
  // 编号
  count: long(name='count', example='1'),
}

// 测试使用
model TestPark {
  // 请求时间
  time: string(name='time', example='2022-11-07 14:48'),
  // 请求人
  operator: string(name='operator', example='张三'),
  // 请求编号
  count: long(name='count', example='1'),
}

// Demo类1
model DemoClass {
  // 字符串测试
  someString: string(name='some_string', example='some string'),
  // 日期测试
  someDate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='some_date', example='3'),
  // Boolean测试
  someBoolean: boolean(name='some_boolean', example='true'),
  // 整数测试
  someInt: long(maximum=2000, minimum=1, name='some_int', example='3'),
  // 列表测试
  someList: [ string ](name='some_list', example=''),
}

// 返回结果测试类
model ResultTest {
  // 姓名
  name?: string(name='name', example='张三'),
}

model QueryAntchainAbcApprovalTestRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 入参
  input: string(name='input'),
  // 新增字段
  delete: string(name='delete'),
}

model QueryAntchainAbcApprovalTestResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 回参
  msg?: string(name='msg'),
  // 新增字段
  code?: long(name='code'),
}

/**
 * Description: 用于测试api评审接入SDL/修改后的评审/0323
 * Summary: 用于测试api评审接入SDL/修改后的评审/0323
 */
async function queryAntchainAbcApprovalTest(request: QueryAntchainAbcApprovalTestRequest): QueryAntchainAbcApprovalTestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAntchainAbcApprovalTestEx(request, headers, runtime);
}

/**
 * Description: 用于测试api评审接入SDL/修改后的评审/0323
 * Summary: 用于测试api评审接入SDL/修改后的评审/0323
 */
async function queryAntchainAbcApprovalTestEx(request: QueryAntchainAbcApprovalTestRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAntchainAbcApprovalTestResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.abc.approval.test.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApiAntchainAbcTestCreateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 1
  timeout: string(name='timeout'),
}

model ApiAntchainAbcTestCreateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 请求返回描述
  status?: string(name='status'),
  // msg
  msg?: string(name='msg'),
}

/**
 * Description: 测试使用api
 * Summary: 测试使用api
 */
async function apiAntchainAbcTestCreate(request: ApiAntchainAbcTestCreateRequest): ApiAntchainAbcTestCreateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return apiAntchainAbcTestCreateEx(request, headers, runtime);
}

/**
 * Description: 测试使用api
 * Summary: 测试使用api
 */
async function apiAntchainAbcTestCreateEx(request: ApiAntchainAbcTestCreateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApiAntchainAbcTestCreateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.abc.test.create.api', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCcXxRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // aa
  name: string(name='name'),
  // 测试
  msg: ResultTest(name='msg'),
}

model QueryCcXxResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 1213
  test?: string(name='test'),
}

/**
 * Description: 测试
 * Summary: 测试
 */
async function queryCcXx(request: QueryCcXxRequest): QueryCcXxResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCcXxEx(request, headers, runtime);
}

/**
 * Description: 测试
 * Summary: 测试
 */
async function queryCcXxEx(request: QueryCcXxRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCcXxResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.demosdk.cc.xx.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

