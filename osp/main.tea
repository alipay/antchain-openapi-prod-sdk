import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.1.4',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 集群信息
model ClusterMeta {
  // 集群唯一标识
  clusterId?: string(name='cluster_id', example='ch-shanghai'),
  // 集群名字
  clusterName?: string(name='cluster_name', example='集群名字'),
  // 区域
  region?: string(name='region', example='region'),
}

// KeyValuePair
model KeyValuePair {
  // key
  key: string(name='key', example='key'),
  // value
  value: string(name='value', example='value'),
}

// 中间件集群
model MiddlewareCluster {
  // 集群id 
  clusterId: string(name='cluster_id', example='cad-adfa'),
  // 集群名字
  clusterName?: string(name='cluster_name', example='上海金区'),
  // 支持的region 列表
  enableRegions: [ string ](name='enable_regions', example='["aa", "dd", "dd"]'),
  // 支持的dataCenter 列表
  enableDataCenters?: [ string ](name='enable_data_centers', example='[]'),
  // 支持的zone 列表
  enableZones?: [ string ](name='enable_zones', example='["RZ01A", "RZ02A"]'),
  // acvip 地址
  acvipEndpoint: string(name='acvip_endpoint', example='11.11.11.11'),
}

// 每个instance的endpoint信息
model AksEndpoint {
  // access_key
  accessKey: string(name='access_key', example='AK'),
  // access_secret
  accessSecret: string(name='access_secret', example='SK'),
  // acvip的地址
  endpoint: string(name='endpoint', example='1.2.4.8'),
  // 产品id
  instanceId: string(name='instance_id', example='000001'),
  // 租户名
  tenant: string(name='tenant', example='CPJVTBCN'),
  // 工作区
  workspace: string(name='workspace', example='dev'),
  // 表示mesh的配置信息, 用key/value的形式给出.
  mesh: [ KeyValuePair ](name='mesh', example=''),
}

// AccessKey 实体信息
model AccessKey {
  // AK
  accesskey: string(name='accesskey', example=' "accessKey":"BunwIedxgYlkplEFin"'),
  // 实体创建者
  creator: string(name='creator', example='"creator":"nanfeng.cm@alibaba-inc.com"'),
  // 创建时间
  gmtcreate: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='gmtcreate', example='2018-10-10T10:10:00Z'),
  // 实体Id
  id: long(name='id', example='"id":655'),
  // 实例Id
  instanceid: string(name='instanceid', example=' "instanceId":"000001"'),
  // 是否加密
  isencrypted: boolean(name='isencrypted', example='true, false'),
  // 实体名称
  name: string(name='name', example='name="test_jmc"'),
  // SK
  secretkey: string(name='secretkey', example=' "secretKey":"y8GmXl0vv1q4ZoHdlVz8gDuwnedeDR7U"'),
}

// 产品信息
model Product {
  // 产品id
  id?: long(name='id', example='100'),
  // 产品名称
  productName?: string(name='product_name', example='ms'),
  // 产品代码
  productCode?: string(name='product_code', example='MS'),
  // 开通状态, T为已开通, F为未开通
  openingStatus?: string(name='opening_status', example='T'),
  // 运行状态的枚举值:
  // 					running 正在运行
  // 					stopped 已经停止
  // 					starting 正在启动
  // 					start_fail 启动失败
  // 					stopping 正在停止
  // 					stop_fail 停止失败
  // 					arrearage 因为欠费, 已经停止
  // 					stopping_arr 因为欠费, 正在停止
  // 				
  runningStatus?: string(name='running_status', example='running'),
}

// 绑定实例
model BindInstance {
  // 集群id
  clusterId: string(name='cluster_id', example='xxzasd'),
  // 集群名字
  clusterName?: string(name='cluster_name', example='上海集群'),
  // 支持的region
  regions: [ string ](name='regions', example='["cn-shanghai", "cn-hangzhou"]'),
  // 支持的dataCenter 
  dataCenters?: string(name='data_centers', example='["dc1", "dc2"]'),
  // 支持的zone 列表
  zones?: string(name='zones', example='["RZ01A", "RZ02A"]'),
  // 绑定后的instanceId 信息
  instanceId: string(name='instance_id', example='DAWEFSAD'),
  // acvip 地址
  acvipEndpoint: string(name='acvip_endpoint', example='11.11.11.11'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group', example='cafe2'),
  // 租户id
  tenantId: string(name='tenant_id', example='DAWEFSAD'),
}

// 集群模式
model ClusterMode {
  // 集群模式
  clusterMode: string(name='cluster_mode', example='NORMAL'),
  // 区域
  regions: [ ClusterMeta ](name='regions', example='[{"name":"杭州", "region":"ch-shanghai"}]'),
}

// 实例信息
model Instance {
  // 实例id
  instanceId?: string(name='instance_id', example=''),
  // 租户
  tenant?: string(name='tenant', example='CPJVTBCN'),
  // 工作空间
  workspace?: string(name='workspace', example='dev'),
}

model QueryInstancesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户
  tenant: string(name='tenant'),
  // 工作空间, 选填, 如果指定了工作空间, 就只返回这个工作空间关联的信息
  workspace?: string(name='workspace'),
  // 当前页码，默认为1
  pageNum?: integer(name='page_num'),
  // 分页大小，默认10
  pageSize?: integer(name='page_size'),
}

model QueryInstancesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户列表
  instances: [ Instance ](name='instances'),
  // 当前页码
  pageNum: integer(name='page_num'),
  // 分页大小
  pageSize: integer(name='page_size'),
  // 记录总数
  totalCount: integer(name='total_count'),
}

/**
 * Description: 查询实例信息
 * Summary: 查询实例信息
 */
async function queryInstances(request: QueryInstancesRequest): QueryInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryInstancesEx(request, headers, runtime);
}

/**
 * Description: 查询实例信息
 * Summary: 查询实例信息
 */
async function queryInstancesEx(request: QueryInstancesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryInstancesResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.osp.instances.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryProductsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 产品名称, 选填, 如果指定了产品名称就只返回指定产品的信息
  productName?: string(name='product_name'),
  // 实例id
  instanceId: string(name='instance_id'),
  // 当前页码，默认为1
  pageNum?: integer(name='page_num'),
  // 分页大小，默认10
  pageSize?: integer(name='page_size'),
}

model QueryProductsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 产品列表
  products: [ Product ](name='products'),
  // 当前页码
  pageNum: integer(name='page_num'),
  // 分页大小
  pageSize: integer(name='page_size'),
  // 记录总数
  totalCount: integer(name='total_count'),
}

/**
 * Description: 查询产品信息
 * Summary: 查询产品信息
 */
async function queryProducts(request: QueryProductsRequest): QueryProductsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryProductsEx(request, headers, runtime);
}

/**
 * Description: 查询产品信息
 * Summary: 查询产品信息
 */
async function queryProductsEx(request: QueryProductsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryProductsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.osp.products.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryEndpointsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 网络类型, classic, vpc
  network: string(name='network'),
  // 当前页数
  pageNum: long(name='page_num'),
  // 分页大小, 考虑到数据量并不多, 建议设置分页足够大(就10几个), 比如100, 一次性拿走所有数据
  pageSize: long(name='page_size'),
  // 租户名
  tenant: string(name='tenant'),
  // 工作区名称, 如果不填, 则返回全部workspace的信息
  workspace?: string(name='workspace'),
}

model QueryEndpointsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // endpoint信息
  endpoints: [ AksEndpoint ](name='endpoints'),
  // 当前页数
  pageNum: long(name='page_num'),
  // 分页大小
  pageSize: long(name='page_size'),
  // 总记录数
  totalCount: long(name='total_count'),
}

/**
 * Description: 获取共享中间件参数信息
 * Summary: 获取共享中间件参数信息
 */
async function queryEndpoints(request: QueryEndpointsRequest): QueryEndpointsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryEndpointsEx(request, headers, runtime);
}

/**
 * Description: 获取共享中间件参数信息
 * Summary: 获取共享中间件参数信息
 */
async function queryEndpointsEx(request: QueryEndpointsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryEndpointsResponse {
  Util.validateModel(request);
  return doRequest('2.0' ,'sofa.osp.endpoints.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ScaleoutClustersRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据中心
  dataCenter: string(name='data_center'),
  // 生效 Domain
  domain: string(name='domain'),
  // 生效 instanceId，如果是需要全局生效使用 ALL_INSTANCE_ID
  instanceId: string(name='instance_id'),
  // 网络类型，无特殊需求填写 CLASSIC
  networkType: string(name='network_type'),
  // 产品名称
  product: string(name='product'),
  // 扩容 IP
  serviceIp: string(name='service_ip'),
  // 生效端口
  servicePort: long(name='service_port'),
}

model ScaleoutClustersResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 操作结果
  result?: boolean(name='result'),
}

/**
 * Description: 针对 domain 进行扩容操作
 * Summary: 扩容接口
 */
async function scaleoutClusters(request: ScaleoutClustersRequest): ScaleoutClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return scaleoutClustersEx(request, headers, runtime);
}

/**
 * Description: 针对 domain 进行扩容操作
 * Summary: 扩容接口
 */
async function scaleoutClustersEx(request: ScaleoutClustersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ScaleoutClustersResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.osp.clusters.scaleout', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ScaleinClusterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据中心
  dataCenter: string(name='data_center'),
  // 生效 domain
  domain: string(name='domain'),
  // 生效实例 ID，全部生效则为 ALL_INSTANCE_ID
  instanceId: string(name='instance_id'),
  // 网络类型，无特殊情况填写 CLASSIC
  networkType: string(name='network_type'),
  // 产品名称
  product: string(name='product'),
  // 缩容 IP
  serviceIp: string(name='service_ip'),
  // 生效端口
  servicePort: long(name='service_port'),
}

model ScaleinClusterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 操作是否成功
  result?: boolean(name='result'),
}

/**
 * Description: 针对 domain 进行缩容
 * Summary: 缩容接口
 */
async function scaleinCluster(request: ScaleinClusterRequest): ScaleinClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return scaleinClusterEx(request, headers, runtime);
}

/**
 * Description: 针对 domain 进行缩容
 * Summary: 缩容接口
 */
async function scaleinClusterEx(request: ScaleinClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ScaleinClusterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.osp.cluster.scalein', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetClustersRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 生效域名
  domain: string(name='domain'),
  // 开启/关闭
  enable: boolean(name='enable'),
  // 生效实例 ID，如果全部则为 ALL_INSTANCE_ID
  instanceId: string(name='instance_id'),
  // 作用 IP
  serviceIp: string(name='service_ip'),
  // 网络类型，如果无特殊需求 CLASSIC
  networkType: string(name='network_type'),
  // 产品名称
  product: string(name='product'),
}

model SetClustersResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 操作是否成功
  result?: boolean(name='result'),
}

/**
 * Description: 设置节点是否生效（上下线）
 * Summary: 设置节点是否生效（上下线）
 */
async function setClusters(request: SetClustersRequest): SetClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setClustersEx(request, headers, runtime);
}

/**
 * Description: 设置节点是否生效（上下线）
 * Summary: 设置节点是否生效（上下线）
 */
async function setClustersEx(request: SetClustersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetClustersResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.osp.clusters.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetInstancesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 共享中间件实例id
  instanceId?: string(name='instance_id'),
  // 租户name
  middlewareTenant?: string(name='middleware_tenant'),
  // workspace name
  middlewareWorkspace?: string(name='middleware_workspace'),
}

model GetInstancesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // instance id
  instanceId?: string(name='instance_id'),
  // 之所以不叫tenant是为了防止和openapi内置的tenant字段冲突.
  middlewareTenant?: string(name='middleware_tenant'),
  // 之所以不叫workspace是为了防止和openapi内置的workspace字段冲突.
  middlewareWorkspace?: string(name='middleware_workspace'),
}

/**
 * Description: 根据instanceId获取对应的tenant和workspace的信息
 * Summary: 获取instance详情
 */
async function getInstances(request: GetInstancesRequest): GetInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getInstancesEx(request, headers, runtime);
}

/**
 * Description: 根据instanceId获取对应的tenant和workspace的信息
 * Summary: 获取instance详情
 */
async function getInstancesEx(request: GetInstancesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetInstancesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.osp.instances.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAccesskeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 该参数是一个instanceId 
  instanceId: string(name='instance_id'),
  // 该字段为AK/SK的创建名
  name: string(name='name'),
}

model CreateAccesskeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // AccessKey对象
  accesskey?: AccessKey(name='accesskey'),
}

/**
 * Description: 用户传入 instanceId 和 name 两个参数 ，然后该接口根据这些参数 生成对应的AK/SK 后返回
 * Summary: 创建AK/SK的接口
 */
async function createAccesskey(request: CreateAccesskeyRequest): CreateAccesskeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAccesskeyEx(request, headers, runtime);
}

/**
 * Description: 用户传入 instanceId 和 name 两个参数 ，然后该接口根据这些参数 生成对应的AK/SK 后返回
 * Summary: 创建AK/SK的接口
 */
async function createAccesskeyEx(request: CreateAccesskeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAccesskeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.osp.accesskey.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetAccesskeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 	
  // 该参数是一个instanceId
  instanceId: string(name='instance_id'),
  // 	
  // 该字段为AK/SK的创建名
  name: string(name='name'),
}

model GetAccesskeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // AccessKey对象
  accesskey?: AccessKey(name='accesskey'),
}

/**
 * Description: 根据 instanceId 和 name获取AK/SK的接口
 * Summary: 获取AK/SK的接口
 */
async function getAccesskey(request: GetAccesskeyRequest): GetAccesskeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getAccesskeyEx(request, headers, runtime);
}

/**
 * Description: 根据 instanceId 和 name获取AK/SK的接口
 * Summary: 获取AK/SK的接口
 */
async function getAccesskeyEx(request: GetAccesskeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAccesskeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.osp.accesskey.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetMiddlewareMetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户id 
  tenantId: string(name='tenant_id'),
  // 工作空间
  workspaceId: string(name='workspace_id'),
}

model GetMiddlewareMetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 租户id
  tenantId?: string(name='tenant_id'),
  // 工作空间
  workspaceId?: string(name='workspace_id'),
  // instanceId
  instanceId?: string(name='instance_id'),
  // acvip 连接地址
  acvipEndpoint?: string(name='acvip_endpoint'),
}

/**
 * Description: 中间件元数据获取
 * Summary: 中间件元数据获取
 */
async function getMiddlewareMeta(request: GetMiddlewareMetaRequest): GetMiddlewareMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getMiddlewareMetaEx(request, headers, runtime);
}

/**
 * Description: 中间件元数据获取
 * Summary: 中间件元数据获取
 */
async function getMiddlewareMetaEx(request: GetMiddlewareMetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetMiddlewareMetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.osp.middleware.meta.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetWorkspacegroupInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户id 
  tenantId: string(name='tenant_id'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // 集群id
  clusterId?: string(name='cluster_id'),
  // 是否需要原始的instanceId
  needReal?: boolean(name='need_real'),
}

model GetWorkspacegroupInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // instanceId
  data?: string(name='data'),
}

/**
 * Description: 根据workspaceGroup查询instanceId
 * Summary: 查询instanceId
 */
async function getWorkspacegroupInstance(request: GetWorkspacegroupInstanceRequest): GetWorkspacegroupInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getWorkspacegroupInstanceEx(request, headers, runtime);
}

/**
 * Description: 根据workspaceGroup查询instanceId
 * Summary: 查询instanceId
 */
async function getWorkspacegroupInstanceEx(request: GetWorkspacegroupInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetWorkspacegroupInstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.osp.workspacegroup.instance.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMiddlewareClustermodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // XXX
  tenantId: string(name='tenant_id'),
  // workspace_group
  workspaceGroup: string(name='workspace_group'),
}

model QueryMiddlewareClustermodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 集群模式
  data?: ClusterMode(name='data'),
}

/**
 * Description: 查询中间件集群模式
 * Summary: 查询中间件集群模式
 */
async function queryMiddlewareClustermode(request: QueryMiddlewareClustermodeRequest): QueryMiddlewareClustermodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMiddlewareClustermodeEx(request, headers, runtime);
}

/**
 * Description: 查询中间件集群模式
 * Summary: 查询中间件集群模式
 */
async function queryMiddlewareClustermodeEx(request: QueryMiddlewareClustermodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMiddlewareClustermodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.osp.middleware.clustermode.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMiddlewareClustersRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户id
  tenantId: string(name='tenant_id'),
}

model QueryMiddlewareClustersResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 集群列表
  data?: [ MiddlewareCluster ](name='data'),
}

/**
 * Description: 查询中间件集群列表
 * Summary: 查询中间件集群列表
 */
async function queryMiddlewareClusters(request: QueryMiddlewareClustersRequest): QueryMiddlewareClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMiddlewareClustersEx(request, headers, runtime);
}

/**
 * Description: 查询中间件集群列表
 * Summary: 查询中间件集群列表
 */
async function queryMiddlewareClustersEx(request: QueryMiddlewareClustersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMiddlewareClustersResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.osp.middleware.clusters.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindMiddlewareInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户id 
  tenantId: string(name='tenant_id'),
  // 工作空间组
  workspaceGroup: string(name='workspace_group'),
  // region
  clusterId: string(name='cluster_id'),
  // 工作空间，多个中间使用"," 隔开
  workspaces: string(name='workspaces'),
}

model BindMiddlewareInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回绑定实例信息
  data?: BindInstance(name='data'),
}

/**
 * Description: 绑定中间件列表
 * Summary: 绑定中间件列表
 */
async function bindMiddlewareInstance(request: BindMiddlewareInstanceRequest): BindMiddlewareInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindMiddlewareInstanceEx(request, headers, runtime);
}

/**
 * Description: 绑定中间件列表
 * Summary: 绑定中间件列表
 */
async function bindMiddlewareInstanceEx(request: BindMiddlewareInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindMiddlewareInstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.osp.middleware.instance.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UnbindMiddlewareInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租户id 
  tenantId: string(name='tenant_id'),
  // 工作空间
  workspaceGroup: string(name='workspace_group'),
  // 集群id
  clusterId: string(name='cluster_id'),
  // 工作空间，如果有多个则使用 "," 隔开
  workspaces: string(name='workspaces'),
}

model UnbindMiddlewareInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果
  data?: boolean(name='data'),
}

/**
 * Description: paas 解绑中间件
 * Summary: 解绑中间件实例
 */
async function unbindMiddlewareInstance(request: UnbindMiddlewareInstanceRequest): UnbindMiddlewareInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return unbindMiddlewareInstanceEx(request, headers, runtime);
}

/**
 * Description: paas 解绑中间件
 * Summary: 解绑中间件实例
 */
async function unbindMiddlewareInstanceEx(request: UnbindMiddlewareInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UnbindMiddlewareInstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'sofa.osp.middleware.instance.unbind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

