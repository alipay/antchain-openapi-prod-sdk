import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.24',
    _prod_code = 'MYCHARITY',
    _prod_channel = 'undefined'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 用户活动徽章捐赠记录
model ActivityRecordVO {
  // 捐赠类型
  donateType?: string(name='donate_type', example='point'),
  // 捐赠详细（如：积分、金币、豆子）
  donateGoodsName?: string(name='donate_goods_name', example='积分'),
  // 数量
  amount?: long(name='amount', example='9999'),
  // 单位
  unit?: string(name='unit', example='个'),
  // 捐赠时间
  donateTime?: long(name='donate_time', example='1660629734503'),
}

// 批次详情
model BatchDetailVO {
  // id
  id: string(name='id', example='0282t2hs'),
  // 实施内容id
  combinationId: string(name='combination_id', example='0282t2hs'),
  // 批次名称
  name: string(name='name', example='助学金'),
  // 备注
  remarks: string(name='remarks', example='50人助学金发放'),
  // 发放方式：【0：自动拨付，1：其他方式拨付，2：快递寄送，3：当面发放，4：服务后确认发放，5：无特定发放方式】
  issueWay: long(name='issue_way', example='1'),
  // 确认接收人 0发前确认 1发后确认
  affirmanceReceivers: long(name='affirmance_receivers', example='1'),
  // 接收方式（0扫脸验证、1身份证号码验证，2扫二维码验证, 3直接导入
  receiveCheckWay: long(name='receive_check_way', example='1'),
  // 发放数量
  issueAmount: long(name='issue_amount', example='111'),
}

// 项目详情
model ProjectVO {
  // 公益项目ID
  id: string(name='id', example='1663225167260'),
  // 创建时间
  gmtCreate: long(name='gmt_create', example='1663225167260'),
  // 修改时间
  gmtModified: long(name='gmt_modified', example='1663225167260'),
  // 公益项目名称
  pjName: string(name='pj_name', example='公益项目名称'),
  // 机构ID
  orgId: string(name='org_id', example='1663225167260'),
  // 公益方向
  publicWelfareDirection: string(name='public_welfare_direction', example='1663225167260'),
  // 测试项目:0正式项目(默认),1测试项目
  testFlag?: long(name='test_flag', example='0'),
}

// 分期详情
model StagesDetailVO {
  // 分期id
  id: string(name='id', example='1'),
  // 计划开始时间
  startTime?: long(name='start_time', example='1661926245540'),
  // 计划结束时间
  endTime?: long(name='end_time', example='1662013142106'),
  // 目标捐赠金额
  targetMoney?: long(name='target_money', example='100'),
  // 目标捐赠人数
  targetNum?: long(name='target_num', example=''),
  // 说明
  note?: string(name='note', example='说明'),
  // 公开募捐编号
  publicFundraisingNo?: string(name='public_fundraising_no', example='24345sdw2423'),
  // 静态文件地址‘,’分割
  coverUrl?: string(name='cover_url', example='http://xxxxx.jpg'),
  // 管理费用金额(单位：分)
  administrativeRate?: long(name='administrative_rate', example=''),
  // 项目状态，0进行中（默认），1已结项
  state?: long(name='state', example=''),
  // 签约id,关联签约表
  signId?: string(name='sign_id', example='1'),
}

// 签约账号用户信息
model SignUserInfo {
  // 签约记录id
  id: string(maxLength=50, name='id', example='1'),
  // 支付宝代扣账号
  alipayAccount: string(maxLength=100, name='alipay_account', example='133XXXX4444'),
}

// 实施内容信息
model SubjectCombinationMessage {
  // 实施内容id
  id: string(maxLength=50, name='id', example='1'),
  // 实施内容名称
  name?: string(maxLength=20, name='name', example='名称'),
  // 实施内容类型：0善款类，1实物类、2服务类
  type?: long(name='type', example='0'),
  // 单位
  unit?: string(maxLength=10, name='unit', example='个'),
  // 说明
  note?: string(maxLength=1000, name='note', example='说明'),
  // 单价是否固定，0:不固定，1:固定
  priceDeterminedFlag?: long(name='price_determined_flag', example=''),
  // 单价
  price?: long(name='price', example=''),
  // 预估发放数量
  totalNum?: long(name='total_num', example=''),
  // 操作类型0-新增，1-修改，2-删除
  operate: long(name='operate', example=''),
}

// 实施内容详情
model OpenSubjectCombinationVO {
  // 实施内容id
  id?: string(name='id', example='1'),
  // 实施内容名称
  name?: string(name='name', example='名称'),
  // 实施内容类型
  type?: long(name='type', example=''),
  // 单位
  unit?: string(name='unit', example='个'),
  // 说明
  note?: string(name='note', example='说明'),
  // 单价是否固定，0:不固定，1:固定
  priceDeterminedFlag?: long(name='price_determined_flag', example=''),
  // 单价
  price?: long(name='price', example=''),
  // 预估发放个数
  totalNum?: long(name='total_num', example=''),
}

// 执行记录
model ReceivedRecord {
  // 执行记录id
  id: string(maxLength=50, name='id', example='1'),
  // 支付宝用户标识
  receiverAlipayUserId: string(maxLength=16, minLength=16, name='receiver_alipay_user_id', example='2088612847668613'),
  // 领取人姓名
  receiverName: string(maxLength=50, name='receiver_name', example='张无忌'),
  // 领取人身份证号码
  receiverCardNo: string(name='receiver_card_no', example='330127199312239501'),
  // 联系号码 
  receiverPhoneNo?: string(maxLength=20, name='receiver_phone_no', example='151848223253'),
  // 是否是受益人本人 0本人，1代领
  agentFlag: long(name='agent_flag', example='0'),
  // 领取人和受益人关系
  relationship?: string(maxLength=100, name='relationship', example='父母'),
  // 受益人信息
  beneficiaryMessage?: string(maxLength=200, name='beneficiary_message', example='张**'),
  // 领取人所属机构
  receiverOrg?: string(maxLength=100, name='receiver_org', example='xx学校'),
  // 领取说明
  receiveNote?: string(maxLength=100, name='receive_note', example='说明'),
  // 受益人数
  benefitNumber?: long(maximum=999999999, minimum=1, name='benefit_number', example='1'),
  // 快递地址
  expressAddress?: string(maxLength=100, name='express_address', example='杭州市'),
  // 发放数量
  issueAmount?: long(maximum=100000000, minimum=1, name='issue_amount', example=''),
}

// 用户徽章详细信息
model UserBadgeVO {
  // 用户徽章id
  poapId?: string(name='poap_id', example='ACbenefit_1102_sitMbRNh'),
  // 徽章hash
  poapIdHash?: string(name='poap_id_hash', example='626e0599931e13142a84e8c7fe91215798ca8f67d012aff8e1265f7441983f7b'),
  // 徽章图片
  logoUrl?: string(name='logo_url', example='https://xxxx'),
  // 徽章名称
  name?: string(name='name', example='三角徽章'),
  // 徽章简介
  introduction?: string(name='introduction', example='活动徽章，其实也就是，便利店活动的兑换物品。'),
  // 品牌商名称
  brandsName?: string(name='brands_name', example='Kingston金士顿'),
  // 公益机构名称
  orgName?: string(name='org_name', example='公益机构'),
}

// 机构详情结构
model OrgVO {
  // 机构ID
  id: string(name='id', example='1663225167260'),
  // 创建时间
  gmtCreate: long(name='gmt_create', example='1663225167260'),
  // 修改时间
  gmtModified: long(name='gmt_modified', example='1663225167260'),
  // 机构名称
  name: string(name='name', example='机构名称'),
  // 统一社会信用代码
  unifiedSocialCreditCode: string(name='unified_social_credit_code', example='166322516726012345'),
  // 机构简介
  introduction: string(name='introduction', example='机构简介'),
  // 签约时间
  signTime: long(name='sign_time', example='1663225167260'),
  //  测试项目:0正式机构(默认),1测试机构
  testFlag?: long(name='test_flag', example='0'),
}

model CreateAlipaysignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 签约记录id
  id: string(maxLength=50, name='id'),
  // 机构id
  orgId: string(maxLength=50, name='org_id'),
  // 支付宝代扣账号
  alipayAccount: string(maxLength=100, name='alipay_account'),
}

model CreateAlipaysignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 待签约账号创建
 * Summary: 待签约账号创建
 */
async function createAlipaysign(request: CreateAlipaysignRequest): CreateAlipaysignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAlipaysignEx(request, headers, runtime);
}

/**
 * Description: 待签约账号创建
 * Summary: 待签约账号创建
 */
async function createAlipaysignEx(request: CreateAlipaysignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAlipaysignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.alipaysign.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAlipaysignStateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 签约记录id
  id: string(maxLength=50, minLength=1, name='id'),
}

model QueryAlipaysignStateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 代扣账号签约状态 0.未签约 1.已签约
  state?: long(name='state'),
}

/**
 * Description: 机构下代扣账号签约状态查询
 * Summary: 机构下代扣账号签约状态查询
 */
async function queryAlipaysignState(request: QueryAlipaysignStateRequest): QueryAlipaysignStateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAlipaysignStateEx(request, headers, runtime);
}

/**
 * Description: 机构下代扣账号签约状态查询
 * Summary: 机构下代扣账号签约状态查询
 */
async function queryAlipaysignStateEx(request: QueryAlipaysignStateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAlipaysignStateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.alipaysign.state.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAlipaysignQrcodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model QueryAlipaysignQrcodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 账号签约二维码url
  signUrl?: string(name='sign_url'),
}

/**
 * Description: 账号签约二维码获取
 * Summary: 账号签约二维码获取
 */
async function queryAlipaysignQrcode(request: QueryAlipaysignQrcodeRequest): QueryAlipaysignQrcodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAlipaysignQrcodeEx(request, headers, runtime);
}

/**
 * Description: 账号签约二维码获取
 * Summary: 账号签约二维码获取
 */
async function queryAlipaysignQrcodeEx(request: QueryAlipaysignQrcodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAlipaysignQrcodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.alipaysign.qrcode.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreatePersonPermissionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 机构ID(第三方指定ID 50字符)
  orgId: string(maxLength=50, name='org_id'),
  // 项目角色ID(1项目管理员、2项目执行人、3项目财务)
  roleId: long(name='role_id'),
  // 项目ID(第三方指定ID 50字符)
  pjId: string(maxLength=50, name='pj_id'),
  // 被授权人支付宝用户标识(16字符)
  alipayUserId: string(name='alipay_user_id'),
}

model CreatePersonPermissionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建人员并配置权限。如人员已经存在，则不创建。
 * Summary: 创建人员及配置权限
 */
async function createPersonPermission(request: CreatePersonPermissionRequest): CreatePersonPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createPersonPermissionEx(request, headers, runtime);
}

/**
 * Description: 创建人员并配置权限。如人员已经存在，则不创建。
 * Summary: 创建人员及配置权限
 */
async function createPersonPermissionEx(request: CreatePersonPermissionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreatePersonPermissionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.person.permission.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeletePersonRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 机构ID(第三方指定ID 50字符)
  orgId: string(maxLength=50, name='org_id'),
  // 项目角色ID(1项目管理员、2项目执行人、3项目财务)
  roleId: long(name='role_id'),
  // 项目ID(第三方指定ID 50字符)
  pjId: string(maxLength=50, name='pj_id'),
  // 被授权人支付宝用户标识（16字符）
  alipayUserId: string(name='alipay_user_id'),
}

model DeletePersonResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 允许已授权的用户通过此接口删除人员权限。
 * Summary: 配置权限删除
 */
async function deletePerson(request: DeletePersonRequest): DeletePersonResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deletePersonEx(request, headers, runtime);
}

/**
 * Description: 允许已授权的用户通过此接口删除人员权限。
 * Summary: 配置权限删除
 */
async function deletePersonEx(request: DeletePersonRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeletePersonResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.person.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitBatchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: string(maxLength=50, name='id'),
  // 实施内容id
  combinationId: string(maxLength=50, name='combination_id'),
  // 批次名称
  name: string(maxLength=100, name='name'),
  // 发放备注
  remarks: string(maxLength=200, name='remarks'),
  // 确认接收人 0发前确认 1发后确认
  affirmanceReceivers: long(name='affirmance_receivers'),
  // 发放方式：【0：自动拨付，1：其他方式拨付，2：快递寄送，3：当面发放，4：服务后确认发放，5：无特定发放方式，6：现场组织】
  issueWay: long(name='issue_way'),
  // 接收验证方式（0扫脸验证、1身份证号码验证，2扫二维码验证, 3快递签收验证，4登录确认，5直接导入）
  receiveCheckWay: long(name='receive_check_way'),
  // 分期ID
  stagesId: string(maxLength=50, name='stages_id'),
  // 发放数量最大值1亿（发后确认- 扫码领取时必填）单位分
  issueAmount?: long(name='issue_amount'),
}

model InitBatchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建批次
 * Summary: 创建批次
 */
async function initBatch(request: InitBatchRequest): InitBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initBatchEx(request, headers, runtime);
}

/**
 * Description: 创建批次
 * Summary: 创建批次
 */
async function initBatchEx(request: InitBatchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitBatchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.batch.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateBatchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: string(maxLength=50, minLength=1, name='id'),
  // 批次暂停状态 2继续发放（领取中），3暂停发放，4领取完成
  status: long(maximum=4, minimum=2, name='status'),
}

model UpdateBatchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 修改批次状态
 * Summary: 修改批次状态
 */
async function updateBatch(request: UpdateBatchRequest): UpdateBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateBatchEx(request, headers, runtime);
}

/**
 * Description: 修改批次状态
 * Summary: 修改批次状态
 */
async function updateBatchEx(request: UpdateBatchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateBatchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.batch.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteBatchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: string(maxLength=50, name='id'),
}

model DeleteBatchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除批次
 * Summary: 删除批次
 */
async function deleteBatch(request: DeleteBatchRequest): DeleteBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteBatchEx(request, headers, runtime);
}

/**
 * Description: 删除批次
 * Summary: 删除批次
 */
async function deleteBatchEx(request: DeleteBatchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteBatchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.batch.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateStagesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 分期id
  id: string(maxLength=50, name='id'),
  // 项目id
  pjId: string(maxLength=50, name='pj_id'),
  // 计划开始时间
  startTime?: long(name='start_time'),
  // 计划结束时间
  endTime?: long(name='end_time'),
  // 目标捐赠金额
  targetMoney?: long(name='target_money'),
  // 目标捐赠人数
  targetNum?: long(name='target_num'),
  // 说明
  note?: string(maxLength=1000, name='note'),
  // 公开募捐编号
  publicFundraisingNo?: string(maxLength=50, name='public_fundraising_no'),
  // 静态文件地址‘,’分割
  coverUrl?: string(maxLength=450, name='cover_url'),
  // 管理费用金额(单位：分)
  administrativeRate?: long(name='administrative_rate'),
  // 签约id,关联签约表
  signId?: string(maxLength=50, name='sign_id'),
}

model CreateStagesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建项目分期
 * Summary: 创建分期
 */
async function createStages(request: CreateStagesRequest): CreateStagesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createStagesEx(request, headers, runtime);
}

/**
 * Description: 创建项目分期
 * Summary: 创建分期
 */
async function createStagesEx(request: CreateStagesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateStagesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.stages.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryBatchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: string(maxLength=50, minLength=1, name='id'),
}

model QueryBatchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 批次详情
  batchDetailVo?: BatchDetailVO(name='batch_detail_vo'),
}

/**
 * Description: 查询批次
 * Summary: 查询批次
 */
async function queryBatch(request: QueryBatchRequest): QueryBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryBatchEx(request, headers, runtime);
}

/**
 * Description: 查询批次
 * Summary: 查询批次
 */
async function queryBatchEx(request: QueryBatchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryBatchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.batch.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateStagesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 分期id
  id: string(maxLength=50, name='id'),
  // 计划开始时间
  startTime?: long(name='start_time'),
  // 计划结束时间
  endTime?: long(name='end_time'),
  // 目标捐赠金额
  targetMoney?: long(name='target_money'),
  // 目标捐赠人数
  targetNum?: long(name='target_num'),
  // 说明
  note?: string(maxLength=1000, name='note'),
  // 公开募捐编号
  publicFundraisingNo?: string(maxLength=50, name='public_fundraising_no'),
  // 静态文件地址‘,’分割
  coverUrl?: string(maxLength=450, name='cover_url'),
  // 管理费用金额(单位：分)
  administrativeRate?: long(name='administrative_rate'),
  // 项目状态，0进行中（默认），1已结项
  state?: long(name='state'),
  // 签约id,关联签约表
  signId?: string(maxLength=50, name='sign_id'),
}

model UpdateStagesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新项目分期
 * Summary: 更新分期
 */
async function updateStages(request: UpdateStagesRequest): UpdateStagesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateStagesEx(request, headers, runtime);
}

/**
 * Description: 更新项目分期
 * Summary: 更新分期
 */
async function updateStagesEx(request: UpdateStagesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateStagesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.stages.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateOrgRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 50字符，单平台幂等
  id: string(maxLength=50, name='id'),
  // 50字符 机构名称
  name: string(maxLength=50, name='name'),
  // 500字符 机构简介
  introduction: string(maxLength=500, name='introduction'),
  // 社会统一信用代码固定18位
  unifiedSocialCreditCode: string(name='unified_social_credit_code'),
  // 测试机构说明:0正式机构(未填写默认0),1测试机构
  testFlag?: long(name='test_flag'),
  // 13位时间戳 签约时间
  signTime: long(name='sign_time'),
}

model CreateOrgResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建机构
 * Summary: 创建机构
 */
async function createOrg(request: CreateOrgRequest): CreateOrgResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createOrgEx(request, headers, runtime);
}

/**
 * Description: 创建机构
 * Summary: 创建机构
 */
async function createOrgEx(request: CreateOrgRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateOrgResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.org.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryStagesRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 分期id
  id: string(maxLength=50, name='id'),
}

model QueryStagesResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 分期详情
  openStagesDetailVo?: StagesDetailVO(name='open_stages_detail_vo'),
}

/**
 * Description: 查询分期
 * Summary: 查询分期
 */
async function queryStages(request: QueryStagesRequest): QueryStagesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryStagesEx(request, headers, runtime);
}

/**
 * Description: 查询分期
 * Summary: 查询分期
 */
async function queryStagesEx(request: QueryStagesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryStagesResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.stages.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateOrgRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 50字符，单平台幂等
  id: string(maxLength=50, name='id'),
  // 500字符 机构简介
  introduction?: string(maxLength=500, name='introduction'),
  // 社会统一信用代码固定18位
  unifiedSocialCreditCode?: string(name='unified_social_credit_code'),
  // 13位时间戳 签约时间
  signTime?: long(name='sign_time'),
}

model UpdateOrgResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新机构
 * Summary: 更新机构
 */
async function updateOrg(request: UpdateOrgRequest): UpdateOrgResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateOrgEx(request, headers, runtime);
}

/**
 * Description: 更新机构
 * Summary: 更新机构
 */
async function updateOrgEx(request: UpdateOrgRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateOrgResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.org.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCombinationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实施内容id
  id: string(maxLength=50, name='id'),
  // 分期id
  stagesId: string(maxLength=50, name='stages_id'),
  // 名称
  name: string(maxLength=20, name='name'),
  // 实施内容类型：0善款类，1实物类、2服务类
  type: long(name='type'),
  // 单位
  unit: string(maxLength=10, name='unit'),
  // 说明
  note?: string(maxLength=1000, name='note'),
  // 单价是否固定，0:不固定，1:固定
  priceDeterminedFlag: long(name='price_determined_flag'),
  // 单位分，预估单价
  price: long(name='price'),
  // 预估发放数量
  totalNum: long(name='total_num'),
}

model CreateCombinationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建实施内容
 * Summary: 创建实施内容
 */
async function createCombination(request: CreateCombinationRequest): CreateCombinationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCombinationEx(request, headers, runtime);
}

/**
 * Description: 创建实施内容
 * Summary: 创建实施内容
 */
async function createCombinationEx(request: CreateCombinationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCombinationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.combination.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DetailOrgRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 50字符，单平台幂等
  id: string(maxLength=50, name='id'),
}

model DetailOrgResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 机构详情结构体
  orgVo?: OrgVO(name='org_vo'),
}

/**
 * Description: 机构详情
 * Summary: 机构详情
 */
async function detailOrg(request: DetailOrgRequest): DetailOrgResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return detailOrgEx(request, headers, runtime);
}

/**
 * Description: 机构详情
 * Summary: 机构详情
 */
async function detailOrgEx(request: DetailOrgRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DetailOrgResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.org.detail', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateCombinationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实施内容id
  id: string(maxLength=50, name='id'),
  // 名称
  name?: string(maxLength=20, name='name'),
  // 实施内容类型：0善款类，1实物类、2服务类
  type?: long(name='type'),
  // 单位
  unit?: string(maxLength=10, name='unit'),
  // 说明
  note?: string(maxLength=1000, name='note'),
  // 单价是否固定，0:不固定，1:固定
  priceDeterminedFlag?: long(name='price_determined_flag'),
  // 单位分，预估单价
  price?: long(name='price'),
  // 预估发放数量
  totalNum?: long(name='total_num'),
}

model UpdateCombinationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 修改实施内容
 * Summary: 修改实施内容
 */
async function updateCombination(request: UpdateCombinationRequest): UpdateCombinationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateCombinationEx(request, headers, runtime);
}

/**
 * Description: 修改实施内容
 * Summary: 修改实施内容
 */
async function updateCombinationEx(request: UpdateCombinationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateCombinationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.combination.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateProjectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 50字符，单平台幂等
  id: string(maxLength=50, name='id'),
  // 50字符 机构id
  orgId: string(maxLength=50, name='org_id'),
  // 100字符 项目名称
  pjName: string(maxLength=100, name='pj_name'),
  // 64字符  公益领域（系统判断是否维护公益领域字典表，数据库存id）
  publicWelfareDirection: string(maxLength=64, name='public_welfare_direction'),
  // 测试项目说明:0正式项目(未填写默认0),1测试项目
  testFlag?: long(name='test_flag'),
}

model CreateProjectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建项目
 * Summary: 创建项目
 */
async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createProjectEx(request, headers, runtime);
}

/**
 * Description: 创建项目
 * Summary: 创建项目
 */
async function createProjectEx(request: CreateProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateProjectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.project.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateProjectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 50字符，单平台幂等
  id: string(maxLength=50, name='id'),
  // 100字符 项目名称
  pjName?: string(maxLength=100, name='pj_name'),
  // 64字符 公益领域（系统判断是否维护公益领域字典表，数据库存id）
  publicWelfareDirection?: string(maxLength=64, name='public_welfare_direction'),
  // 测试项目说明:0正式项目(未填写默认0),1测试项目
  testFlag?: long(name='test_flag'),
}

model UpdateProjectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新项目
 * Summary: 更新项目
 */
async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateProjectEx(request, headers, runtime);
}

/**
 * Description: 更新项目
 * Summary: 更新项目
 */
async function updateProjectEx(request: UpdateProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateProjectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.project.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DetailProjectRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 50字符，单平台幂等
  id: string(maxLength=50, name='id'),
}

model DetailProjectResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 项目结构体
  projectVo?: ProjectVO(name='project_vo'),
}

/**
 * Description: 项目详情
 * Summary: 项目详情
 */
async function detailProject(request: DetailProjectRequest): DetailProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return detailProjectEx(request, headers, runtime);
}

/**
 * Description: 项目详情
 * Summary: 项目详情
 */
async function detailProjectEx(request: DetailProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DetailProjectResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.project.detail', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCombinationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实施内容id
  id: string(maxLength=50, name='id'),
}

model QueryCombinationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 实施内容详情
  openSubjectCombinationVo?: OpenSubjectCombinationVO(name='open_subject_combination_vo'),
}

/**
 * Description: 查询实施内容
 * Summary: 查询实施内容
 */
async function queryCombination(request: QueryCombinationRequest): QueryCombinationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCombinationEx(request, headers, runtime);
}

/**
 * Description: 查询实施内容
 * Summary: 查询实施内容
 */
async function queryCombinationEx(request: QueryCombinationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCombinationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.combination.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateRecordRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 批次id
  batchId: string(maxLength=50, name='batch_id'),
  // 执行记录数组
  receivedRecordList: [ ReceivedRecord ](name='received_record_list'),
}

model BatchcreateRecordResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量创建执行记录
 * Summary: 批量创建执行记录
 */
async function batchcreateRecord(request: BatchcreateRecordRequest): BatchcreateRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateRecordEx(request, headers, runtime);
}

/**
 * Description: 批量创建执行记录
 * Summary: 批量创建执行记录
 */
async function batchcreateRecordEx(request: BatchcreateRecordRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateRecordResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.record.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateBatchRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: string(maxLength=50, minLength=1, name='id'),
  // 分期ID
  stagesId: string(maxLength=50, minLength=1, name='stages_id'),
  // 实施内容id
  combinationId: string(maxLength=50, minLength=1, name='combination_id'),
  // 批次名称
  name: string(maxLength=100, minLength=1, name='name'),
  // 备注
  remarks: string(maxLength=200, minLength=1, name='remarks'),
  // 接收验证方式（0扫脸验证、2扫二维码验证, 3快递签收验证，4登录确认）
  issueWay: long(name='issue_way'),
  // 确认接收人 0发前确认 1发后确认
  affirmanceReceivers: long(name='affirmance_receivers'),
  // 接收方式（0扫脸验证、1身份证号码验证，2扫二维码验证, 3直接导入
  receiveCheckWay: long(name='receive_check_way'),
  // 发放数量最大值1亿（发后确认- 扫码领取时必填）单位分
  issueAmount?: long(name='issue_amount'),
}

model CreateBatchResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 创建批次
 * Summary: 创建批次
 */
async function createBatch(request: CreateBatchRequest): CreateBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createBatchEx(request, headers, runtime);
}

/**
 * Description: 创建批次
 * Summary: 创建批次
 */
async function createBatchEx(request: CreateBatchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBatchResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.batch.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateRecordRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: string(maxLength=50, minLength=1, name='id'),
  // 快递单号，50字符（发放方式（issue_way）为快递寄送时可修改）
  expressNumber?: string(maxLength=50, minLength=1, name='express_number'),
  // 快递公司，50字符（发放方式（issue_way）为快递寄送时可修改）
  expressCompany?: string(maxLength=50, minLength=1, name='express_company'),
  // 快递地址，100字符（发放方式（issue_way）为快递寄送时可修改）
  expressAddress?: string(maxLength=100, minLength=1, name='express_address'),
  // 支付流水号，100字符（实施内容为善款类且执行记录状态为待发放（receive_status）必填）
  paySerialNumber?: string(maxLength=100, minLength=1, name='pay_serial_number'),
  // 转账方式，100字符 发放方式为善款类且执行记录状态为待发放（receive_status）必填）
  transferMethod?: string(maxLength=100, minLength=1, name='transfer_method'),
}

model UpdateRecordResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 修改执行记录状态
 * Summary: 修改执行记录状态
 */
async function updateRecord(request: UpdateRecordRequest): UpdateRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateRecordEx(request, headers, runtime);
}

/**
 * Description: 修改执行记录状态
 * Summary: 修改执行记录状态
 */
async function updateRecordEx(request: UpdateRecordRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateRecordResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.record.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateCombinationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 分期id
  stagesId: string(name='stages_id'),
  // 实施内容信息集合
  combinationMessageList: [ SubjectCombinationMessage ](name='combination_message_list'),
}

model BatchcreateCombinationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 批量创建、修改、删除实施内容
 * Summary: 批量创建、修改、删除实施内容
 */
async function batchcreateCombination(request: BatchcreateCombinationRequest): BatchcreateCombinationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateCombinationEx(request, headers, runtime);
}

/**
 * Description: 批量创建、修改、删除实施内容
 * Summary: 批量创建、修改、删除实施内容
 */
async function batchcreateCombinationEx(request: BatchcreateCombinationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateCombinationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.combination.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchcreateAlipaysignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 机构id
  orgId: string(maxLength=50, name='org_id'),
  // 代扣签约账号信息列表
  signUserInfoList: [ SignUserInfo ](name='sign_user_info_list'),
}

model BatchcreateAlipaysignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 代扣签约账号批量创建接口
 * Summary: 代扣签约账号批量创建接口
 */
async function batchcreateAlipaysign(request: BatchcreateAlipaysignRequest): BatchcreateAlipaysignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchcreateAlipaysignEx(request, headers, runtime);
}

/**
 * Description: 代扣签约账号批量创建接口
 * Summary: 代扣签约账号批量创建接口
 */
async function batchcreateAlipaysignEx(request: BatchcreateAlipaysignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchcreateAlipaysignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.alipaysign.batchcreate', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateActivitychainrecordRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 外部活动ID
  activityId: string(maxLength=50, name='activity_id'),
  // 支付宝用户UID：,固定16位长度
  alipayUserId: string(maxLength=16, minLength=16, name='alipay_user_id'),
  // 支付宝用户昵称(脱敏)
  alipayUserNickName?: string(maxLength=50, name='alipay_user_nick_name'),
  // 捐赠记录ID：(同一租户下需要做幂等)
  activityRecordId: string(maxLength=50, name='activity_record_id'),
  // 捐赠类型：固定为【point/money】,point为积分兑换捐赠类型，money为购买商品捐钱类型
  donateType: string(name='donate_type'),
  // 捐赠数量：积分个数、金额数量，若为金额(单位为分)
  amount: long(maximum=999999999, minimum=1, name='amount'),
  // 捐赠流水号
  proofData?: string(maxLength=50, name='proof_data'),
  // 捐赠描述（积分,钱等等）
  donateGoodsName: string(maxLength=200, name='donate_goods_name'),
  // 商品名称，如：维他奶
  goodsName?: string(maxLength=100, name='goods_name'),
  // 单位：个、CNY
  unit?: string(maxLength=50, name='unit'),
  // 支付方式：【wechat/alipay/bank/exchangePoint】
  payType: string(name='pay_type'),
  // 固定13位数字
  donateTime: long(name='donate_time'),
}

model CreateActivitychainrecordResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 上链成功后返回，链上hash值
  chainHash?: string(name='chain_hash'),
  // true表示颁发了徽章，false表示未颁发徽章
  awardBadgeFlag?: boolean(name='award_badge_flag'),
}

/**
 * Description: 品牌活动捐赠记录上链接口
 * Summary: 品牌活动捐赠记录上链接口
 */
async function createActivitychainrecord(request: CreateActivitychainrecordRequest): CreateActivitychainrecordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createActivitychainrecordEx(request, headers, runtime);
}

/**
 * Description: 品牌活动捐赠记录上链接口
 * Summary: 品牌活动捐赠记录上链接口
 */
async function createActivitychainrecordEx(request: CreateActivitychainrecordRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateActivitychainrecordResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.activitychainrecord.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BatchqueryActivityrecordRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 元徽章id
  poapMetaId?: string(name='poap_meta_id'),
  // 支付宝用户UID 
  alipayUserId?: string(name='alipay_user_id'),
}

model BatchqueryActivityrecordResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户活动徽章捐赠记录集合
  activityRecordList?: [ ActivityRecordVO ](name='activity_record_list'),
}

/**
 * Description: 用户活动徽章捐赠记录查询
 * Summary: 用户活动徽章捐赠记录查询
 */
async function batchqueryActivityrecord(request: BatchqueryActivityrecordRequest): BatchqueryActivityrecordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return batchqueryActivityrecordEx(request, headers, runtime);
}

/**
 * Description: 用户活动徽章捐赠记录查询
 * Summary: 用户活动徽章捐赠记录查询
 */
async function batchqueryActivityrecordEx(request: BatchqueryActivityrecordRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchqueryActivityrecordResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.activityrecord.batchquery', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DetailUserbadgeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 元徽章id
  poapMetaId: string(maxLength=100, name='poap_meta_id'),
  // 支付宝用户id
  alipayUserId: string(maxLength=16, minLength=16, name='alipay_user_id'),
}

model DetailUserbadgeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户徽章详情
  userBadgeVo?: UserBadgeVO(name='user_badge_vo'),
}

/**
 * Description: 用户活动徽章详情
 * Summary: 用户活动徽章详情
 */
async function detailUserbadge(request: DetailUserbadgeRequest): DetailUserbadgeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return detailUserbadgeEx(request, headers, runtime);
}

/**
 * Description: 用户活动徽章详情
 * Summary: 用户活动徽章详情
 */
async function detailUserbadgeEx(request: DetailUserbadgeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DetailUserbadgeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.mycharity.userbadge.detail', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

