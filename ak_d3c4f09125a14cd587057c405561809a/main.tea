import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.0.1',
    _prod_code = 'ak_d3c4f09125a14cd587057c405561809a',
    _prod_channel = 'saas'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 登录类型
model LoginAccountTypeBO {
  // 登录类型
  userLoginType?: string(name='user_login_type', example='1'),
  // 登录名称
  loginName?: string(name='login_name', example='1'),
}

// 跨链账号红利明细
model CrossChainBonusAccountsDetailVO {
  // 明细ID
  id?: string(name='id', example='明细ID'),
  // 交易链上Hash
  transactionHash?: string(name='transaction_hash', example='交易链上Hash'),
  // 交易前余额
  preBalance?: string(name='pre_balance', example='交易前余额'),
  // 交易数量
  transactionAmount?: string(name='transaction_amount', example='交易数量'),
  // 交易后余额
  postBalance?: string(name='post_balance', example='交易后余额'),
  // 交易类型
  transactionType?: string(name='transaction_type', example='交易类型(LOCK_MINT_BONUS/BURN_RETRIEVE_BONUS/INNER_TRANSFER_BONUS/OTC_TRANSFER_BONUS)'),
  // 对手地址
  counterAddress?: string(name='counter_address', example='对手地址'),
  // 创建时间
  gmtCreated?: long(name='gmt_created', example='1755754919690'),
  // 更新时间
  gmtModified?: long(name='gmt_modified', example='1755754919690'),
}

// 跨链账号明细
model CrossChainAccountsDetailVO {
  // 明细ID
  id?: string(name='id', example='明细ID'),
  // 交易链上Hash
  transactionHash?: string(name='transaction_hash', example='交易链上Hash'),
  // 交易前余额
  preBalance?: string(name='pre_balance', example='交易前余额'),
  // 交易数量
  transactionAmount?: string(name='transaction_amount', example='交易数量'),
  // 交易后余额
  postBalance?: string(name='post_balance', example='交易后余额'),
  // 交易类别
  transactionType?: string(name='transaction_type', example='交易类别(LOCK_MINT/BURN_RETRIEVE/INNER_TRANSFER/OTC_TRANSFER)'),
  // 对手地址
  counterAddress?: string(name='counter_address', example='对手地址'),
  // 创建时间
  gmtCreated?: long(name='gmt_created', example='1755754919690'),
  // 更新时间
  gmtModified?: long(name='gmt_modified', example='1755754919690'),
}

// 跨链账户信息
model CrossChainAccountsVO {
  // 对侧链用户地址
  crossChainUserAddress?: string(name='cross_chain_user_address', example='对侧链用户地址'),
  // 对侧链账户ID
  crossChainUserAccountId?: string(name='cross_chain_user_account_id', example='对侧链账户ID'),
  // 对侧链红利账户ID
  crossChainUserBonusAccountId?: string(name='cross_chain_user_bonus_account_id', example='对侧链红利账户ID'),
  // 对侧链资产账户明细
  crossChainUserAccountsDetails?: [ CrossChainAccountsDetailVO ](name='cross_chain_user_accounts_details', example='对侧链资产账户明细'),
  // 对侧链账户信息
  crossChainBonusAccountsDetails?: [ CrossChainBonusAccountsDetailVO ](name='cross_chain_bonus_accounts_details', example='对侧链账户信息'),
}

// 资产账户明细VO
model SubUserAccountDetailsVO {
  // 明细ID
  id: string(name='id', example='明细ID'),
  // 交易链上Hash
  transactionHash: string(name='transaction_hash', example='交易链上Hash'),
  // 交易前余额
  preBalance: string(name='pre_balance', example='交易前余额'),
  // 交易数量
  transactionAmount: string(name='transaction_amount', example='交易数量'),
  // 交易后余额
  postBalance: string(name='post_balance', example='交易后余额'),
  // 交易类别
  transactionType: string(name='transaction_type', example='交易类别'),
  // 对手地址
  counterAddress: string(name='counter_address', example='对手地址'),
  // 创建时间
  gmtCreated: long(name='gmt_created', example='创建时间'),
  // 更新时间
  gmtModified: string(name='gmt_modified', example='更新时间'),
}

// 操作角色
model UserOperatorInfoBO {
  // userId
  userId?: string(name='user_id', example='1'),
  // 别名
  alias?: string(name='alias', example='1'),
  // 钱包地址
  address?: string(name='address', example='1'),
  // 登录账号类型列表
  userLoginAccountList?: [ LoginAccountTypeBO ](name='user_login_account_list', example='1'),
  // 机构类型列表
  userInstitutionTypeList?: [ string ](name='user_institution_type_list', example='1'),
}

// 红利账户明细
model SubUserBonusAccountDetailVO {
  // 明细ID
  id: string(name='id', example='明细ID'),
  // 交易链上Hash
  transactionHash: string(name='transaction_hash', example='交易链上Hash'),
  // 交易前余额
  preBalance: string(name='pre_balance', example='交易前余额'),
  // 交易数量
  transactionAmount: string(name='transaction_amount', example='交易数量'),
  // 交易后余额
  postBalance: string(name='post_balance', example='交易后余额'),
  // 交易类别
  transactionType: string(name='transaction_type', example='交易类别'),
  // 对手地址
  counterAddress: string(name='counter_address', example='对手地址'),
  // 创建时间
  gmtCreated: long(name='gmt_created', example='创建时间'),
  // 更新时间
  gmtModified: long(name='gmt_modified', example='更新时间'),
}

// 项目参与者信息
model ParticipantInfo {
  // 机构id
  id: string(name='id', example='80aee17181634daa9f1c37d787f0ec02'),
  // 二级机构类型
  type: string(name='type', example='CHANNEL'),
  // 机构名称
  name?: string(name='name', example='代销机构'),
}

// 项目角色信息
model ProjectWithRole {
  // 项目id
  projectId?: string(name='project_id', example='1'),
  // 项目名称
  projcetName?: string(name='projcet_name', example='1'),
  // 描述
  description?: string(name='description', example='1'),
  // token名称
  tokenName?: string(name='token_name', example='1'),
  // 最大供应量
  capacity?: string(name='capacity', example='1'),
  // 净值
  netValue?: string(name='net_value', example='1'),
  // 价格类型
  priceType?: string(name='price_type', example='1'),
  // 项目净值
  projectNetValue?: string(name='project_net_value', example='1'),
  // 最大限额
  maxSubscriptionAmount?: string(name='max_subscription_amount', example='1'),
  // 部署类型 DIRECT_PUBLIC_CHAIN 直发公链，NORMAL 普通模式
  deploymentType?: string(name='deployment_type', example='1'),
  // 项目所在链
  chainType?: string(name='chain_type', example='1'),
  // 操作角色列表
  userOperatorList?: [ UserOperatorInfoBO ](name='user_operator_list', example='1'),
  // 代销者机构集合
  participantInfos?: [ ParticipantInfo ](name='participant_infos', example='1'),
}

// 跨链账号明细
model CrossAccountListVO {
  // 项目ID
  projectId?: string(name='project_id', example='项目ID'),
  // 资产项目合约地址
  assetProjectAddress?: string(name='asset_project_address', example='资产项目合约地址'),
  // 红利合约地址
  bonusAddress?: string(name='bonus_address', example='红利合约地址'),
  // 用户ID
  userId?: string(name='user_id', example='用户ID'),
  // 代销机构ID
  distributorInstitutionId?: string(name='distributor_institution_id', example='代销机构ID'),
  // 发行链名称
  chainName?: string(name='chain_name', example='发行链名称'),
  // 投资者用户账户ID
  subUserAccountId?: string(name='sub_user_account_id', example='投资者用户账户ID'),
  // 投资者用户红利账户ID
  subUserBonusAccountId?: string(name='sub_user_bonus_account_id', example='投资者用户红利账户ID'),
  // 目标链名称
  targetChainName?: string(name='target_chain_name', example='目标链名称'),
  // 目标链资产合约地址
  targetChainAssetTokenAddress?: string(name='target_chain_asset_token_address', example='目标链资产合约地址'),
  // 目标链红利合约地址
  targetChainBonusAddress?: string(name='target_chain_bonus_address', example='目标链红利合约地址'),
  // 对侧链账户信息
  crossChainAccountsInfo?: [ CrossChainAccountsVO ](name='cross_chain_accounts_info', example='对侧链账户信息'),
}

// 登入登出接口操作日志回参
model LoginOperationLogVO {
  // 用户ID
  userId: string(name='user_id', example='7'),
  // 用户地址
  userAddress?: string(name='user_address', example='0xe328b8785ff0c1ecb2b52198f5637cc1fdabab20'),
  // 登录名
  loginName?: string(name='login_name', example='123@qq.com'),
  // 登录类型
  loginAccountType?: string(name='login_account_type', example='EMAIL'),
  // 请求URL
  requestURL: string(name='request_u_r_l', example='/api/v1/trade/ip/user/login-account/login'),
  // 是否成功
  success: boolean(name='success', example='true, false'),
  // 创建时间
  gmtCreated: long(name='gmt_created', example=''),
}

// 资产账户明细与红利账户明细
model SubUserAccountDetailVO {
  // 项目ID
  projectId: string(name='project_id', example='项目ID'),
  // 资产项目合约地址
  assetProjectAddress?: string(name='asset_project_address', example='资产项目合约地址'),
  // 红利合约地址
  bonusAddress?: string(name='bonus_address', example='红利合约地址'),
  // 用户ID
  userId?: string(name='user_id', example='用户ID'),
  // 代销机构ID
  distributorInstitutionId?: string(name='distributor_institution_id', example='代销机构ID'),
  // 发行链名称
  chainName?: string(name='chain_name', example='发行链名称'),
  // 投资者用户账户ID
  subUserAccountId?: string(name='sub_user_account_id', example='投资者用户账户ID'),
  // 投资者用户红利账户ID
  subUserBonusAccountId?: string(name='sub_user_bonus_account_id', example='投资者用户红利账户ID'),
  // 资产账户明细
  subUserAccountDetails?: [ SubUserAccountDetailsVO ](name='sub_user_account_details', example='资产账户明细'),
  // 红利账户明细
  subUserBonusAccountDetails?: [ SubUserBonusAccountDetailVO ](name='sub_user_bonus_account_details', example='红利账户明细'),
}

model ListAntdigitalWebtrwatradeIssuerOperationlogRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 开始时间 (时间戳)
  startTimeMills: long(name='start_time_mills'),
  // 结束时间 (时间戳)
  endTimeMills: long(name='end_time_mills'),
}

model ListAntdigitalWebtrwatradeIssuerOperationlogResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 回参
  data?: [ LoginOperationLogVO ](name='data'),
}

/**
 * Description: 发行机构查询登录登出操作日志
 * Summary: 发行机构查询登录登出操作日志
 */
async function listAntdigitalWebtrwatradeIssuerOperationlog(request: ListAntdigitalWebtrwatradeIssuerOperationlogRequest): ListAntdigitalWebtrwatradeIssuerOperationlogResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAntdigitalWebtrwatradeIssuerOperationlogEx(request, headers, runtime);
}

/**
 * Description: 发行机构查询登录登出操作日志
 * Summary: 发行机构查询登录登出操作日志
 */
async function listAntdigitalWebtrwatradeIssuerOperationlogEx(request: ListAntdigitalWebtrwatradeIssuerOperationlogRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAntdigitalWebtrwatradeIssuerOperationlogResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.webtrwatrade.issuer.operationlog.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAntdigitalWebtrwatradeDistributorOperationlogRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 开始时间 (时间戳)
  startTimeMills: long(name='start_time_mills'),
  // 结束时间 (时间戳)
  endTimeMills: long(name='end_time_mills'),
}

model ListAntdigitalWebtrwatradeDistributorOperationlogResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 回参
  data?: [ LoginOperationLogVO ](name='data'),
}

/**
 * Description: 代销机构查询登录登出操作日志
 * Summary: 代销机构查询登录登出操作日志
 */
async function listAntdigitalWebtrwatradeDistributorOperationlog(request: ListAntdigitalWebtrwatradeDistributorOperationlogRequest): ListAntdigitalWebtrwatradeDistributorOperationlogResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAntdigitalWebtrwatradeDistributorOperationlogEx(request, headers, runtime);
}

/**
 * Description: 代销机构查询登录登出操作日志
 * Summary: 代销机构查询登录登出操作日志
 */
async function listAntdigitalWebtrwatradeDistributorOperationlogEx(request: ListAntdigitalWebtrwatradeDistributorOperationlogRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAntdigitalWebtrwatradeDistributorOperationlogResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.webtrwatrade.distributor.operationlog.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAntdigitalWebtrwatradeIssuerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 资产项目ID
  assetProjectId?: string(name='asset_project_id'),
  // 资产项目合约地址
  assetProjectAddress?: string(name='asset_project_address'),
  // 用户ID
  userId?: string(name='user_id'),
  // 用户地址
  userAddress?: string(name='user_address'),
  // 登录名
  loginName?: string(name='login_name'),
  // 登录名类型(EMAIL)
  loginAccoutType?: string(name='login_accout_type'),
  // 开始时间 (时间戳)
  startTimeMills: long(name='start_time_mills'),
  // 结束时间 (时间戳)
  endTimeMills: long(name='end_time_mills'),
  // 项目所在链
  chainName?: string(name='chain_name'),
}

model QueryAntdigitalWebtrwatradeIssuerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 账户明细列表
  data?: [ SubUserAccountDetailVO ](name='data'),
}

/**
 * Description: 发行机构获取二级用户详情数据
 * Summary: 发行机构获取二级用户详情数据
 */
async function queryAntdigitalWebtrwatradeIssuer(request: QueryAntdigitalWebtrwatradeIssuerRequest): QueryAntdigitalWebtrwatradeIssuerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAntdigitalWebtrwatradeIssuerEx(request, headers, runtime);
}

/**
 * Description: 发行机构获取二级用户详情数据
 * Summary: 发行机构获取二级用户详情数据
 */
async function queryAntdigitalWebtrwatradeIssuerEx(request: QueryAntdigitalWebtrwatradeIssuerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAntdigitalWebtrwatradeIssuerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.webtrwatrade.issuer.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryAntdigitalWebtrwatradeDistributorRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 资产项目ID
  assetProjectId?: string(name='asset_project_id'),
  // 资产项目合约地址
  assetProjectAddress?: string(name='asset_project_address'),
  // 项目所在链
  chainName?: string(name='chain_name'),
  // 用户ID
  userId?: string(name='user_id'),
  // 用户地址
  userAddress?: string(name='user_address'),
  // 登录名
  loginName?: string(name='login_name'),
  // 登录名类型(EMAIL)
  loginAccoutType?: string(name='login_accout_type'),
  // 开始时间 (时间戳)
  startTimeMills: long(name='start_time_mills'),
  // 结束时间 (时间戳)
  endTimeMills: long(name='end_time_mills'),
}

model QueryAntdigitalWebtrwatradeDistributorResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 账户明细列表
  data?: [ SubUserAccountDetailVO ](name='data'),
}

/**
 * Description: 代销机构获取二级用户详情数据
 * Summary: 代销机构获取二级用户详情数据
 */
async function queryAntdigitalWebtrwatradeDistributor(request: QueryAntdigitalWebtrwatradeDistributorRequest): QueryAntdigitalWebtrwatradeDistributorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryAntdigitalWebtrwatradeDistributorEx(request, headers, runtime);
}

/**
 * Description: 代销机构获取二级用户详情数据
 * Summary: 代销机构获取二级用户详情数据
 */
async function queryAntdigitalWebtrwatradeDistributorEx(request: QueryAntdigitalWebtrwatradeDistributorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryAntdigitalWebtrwatradeDistributorResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.webtrwatrade.distributor.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAntdigitalWebtrwatradeIssuerCrossaccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 资产项目ID
  assetProjectId?: string(name='asset_project_id'),
  // 资产项目合约地址
  assetProjectAddress?: string(name='asset_project_address'),
  // 项目所在链
  chainName?: string(name='chain_name'),
  // 用户ID
  userId?: string(name='user_id'),
  // 本侧链用户地址
  userAddress?: string(name='user_address'),
  // 登录名
  loginName?: string(name='login_name'),
  // 登录名类型(EMAIL)
  loginAccountType?: string(name='login_account_type'),
  // 对侧链用户地址
  crossChainUserAddress?: string(name='cross_chain_user_address'),
  // 开始时间 (时间戳)
  startTimeMills: long(name='start_time_mills'),
  // 结束时间 (时间戳)
  endTimeMills: long(name='end_time_mills'),
}

model ListAntdigitalWebtrwatradeIssuerCrossaccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 跨链账号明细
  data?: [ CrossAccountListVO ](name='data'),
}

/**
 * Description: 发行机构跨链账号明细
 * Summary: 发行机构跨链账号明细
 */
async function listAntdigitalWebtrwatradeIssuerCrossaccount(request: ListAntdigitalWebtrwatradeIssuerCrossaccountRequest): ListAntdigitalWebtrwatradeIssuerCrossaccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAntdigitalWebtrwatradeIssuerCrossaccountEx(request, headers, runtime);
}

/**
 * Description: 发行机构跨链账号明细
 * Summary: 发行机构跨链账号明细
 */
async function listAntdigitalWebtrwatradeIssuerCrossaccountEx(request: ListAntdigitalWebtrwatradeIssuerCrossaccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAntdigitalWebtrwatradeIssuerCrossaccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.webtrwatrade.issuer.crossaccount.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListAntdigitalWebtrwatradeDistributorCrossaccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 资产项目ID
  assetProjectId?: string(name='asset_project_id'),
  // 资产项目合约地址
  assetProjectAddress?: string(name='asset_project_address'),
  // 项目所在链
  chainName?: string(name='chain_name'),
  // 用户ID
  userId?: string(name='user_id'),
  // 本侧链用户地址
  userAddress?: string(name='user_address'),
  // 登录名
  loginName?: string(name='login_name'),
  // 登录名类型(EMAIL)
  loginAccountType?: string(name='login_account_type'),
  // 对侧链用户地址
  crossChainUserAddress?: string(name='cross_chain_user_address'),
  // 开始时间 (时间戳)
  startTimeMills: long(name='start_time_mills'),
  // 结束时间 (时间戳)
  endTimeMills: long(name='end_time_mills'),
}

model ListAntdigitalWebtrwatradeDistributorCrossaccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 跨链账号明细
  data?: [ CrossAccountListVO ](name='data'),
}

/**
 * Description: 代销机构跨链账号明细
 * Summary: 代销机构跨链账号明细
 */
async function listAntdigitalWebtrwatradeDistributorCrossaccount(request: ListAntdigitalWebtrwatradeDistributorCrossaccountRequest): ListAntdigitalWebtrwatradeDistributorCrossaccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listAntdigitalWebtrwatradeDistributorCrossaccountEx(request, headers, runtime);
}

/**
 * Description: 代销机构跨链账号明细
 * Summary: 代销机构跨链账号明细
 */
async function listAntdigitalWebtrwatradeDistributorCrossaccountEx(request: ListAntdigitalWebtrwatradeDistributorCrossaccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAntdigitalWebtrwatradeDistributorCrossaccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.webtrwatrade.distributor.crossaccount.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DetailAntdigitalWebtrwatradeIssuerProjectwithroleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 项目id，项目资产ID和
  // 项目合约地址+所在链组合 二选一
  assetProjectId?: string(name='asset_project_id'),
  // 资产项目合约地址，项目资产ID和
  // 项目合约地址+所在链组合 二选一
  assetProjectAddress?: string(name='asset_project_address'),
  // 所在链，项目资产ID和
  // 项目合约地址+所在链组合 二选一
  chainName?: string(name='chain_name'),
}

model DetailAntdigitalWebtrwatradeIssuerProjectwithroleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 项目角色信息
  data?: ProjectWithRole(name='data'),
}

/**
 * Description: 发行机构查询项目及角色信息
 * Summary: 发行机构查询项目及角色信息
 */
async function detailAntdigitalWebtrwatradeIssuerProjectwithrole(request: DetailAntdigitalWebtrwatradeIssuerProjectwithroleRequest): DetailAntdigitalWebtrwatradeIssuerProjectwithroleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return detailAntdigitalWebtrwatradeIssuerProjectwithroleEx(request, headers, runtime);
}

/**
 * Description: 发行机构查询项目及角色信息
 * Summary: 发行机构查询项目及角色信息
 */
async function detailAntdigitalWebtrwatradeIssuerProjectwithroleEx(request: DetailAntdigitalWebtrwatradeIssuerProjectwithroleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DetailAntdigitalWebtrwatradeIssuerProjectwithroleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antdigital.webtrwatrade.issuer.projectwithrole.detail', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

