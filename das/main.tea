import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.1.5',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 数据源接口入参定义
model InterfaceInput {
  // 接口入参名称
  name?: string(maxLength=50, name='name', example='name'),
  // 接口入参类型
  type?: string(maxLength=50, name='type', example='String'),
  // 接口入参描述
  description?: string(maxLength=100, name='description', example='描述'),
  // 接口入参是否必填
  required?: boolean(name='required', example='true, false'),
}

// 数据源接口出参定义
model InterfaceOutput {
  // 接口出参名称
  name?: string(maxLength=50, name='name', example='success'),
  // 接口出参类型
  type?: string(maxLength=50, name='type', example='String'),
  // 接口出参描述
  description?: string(maxLength=100, name='description', example='描述'),
}

// 数据源接口定义
model DataSourceInterface {
  // 数据源接口访问地址
  address: string(maxLength=100, name='address', example='https://******'),
  // 数据源接口请求方法类型
  interfaceRequestMethod: string(maxLength=50, name='interface_request_method', example='POST'),
  // 数据源接口入参列表
  interfaceInput?: [ InterfaceInput ](name='interface_input', example=''),
  // 数据源接口出参列表
  interfaceOutput?: [ InterfaceOutput ](name='interface_output', example=''),
}

// 授权人个人信息
model AuthPersonIndividualInfo {
  // 姓名
  individualName: string(name='individual_name', example='张**'),
  // 身份证号
  individualId: string(name='individual_id', example='110*****'),
  // 电话号码
  individualPhoneNum: long(name='individual_phone_num', example='138********'),
}

// 数据源详细信息
model DataSourceInfo {
  // 数据源ID
  id: string(name='id', example='1'),
  // 数据源名称
  name: string(maxLength=20, name='name', example='**数据'),
  // 数据提供方
  provider: string(maxLength=30, name='provider', example='***有限公司'),
  // 枚举值：ENTERPRISE、INDIVIDUAL
  dataOwnerType: string(name='data_owner_type', example='ENTERPRISE'),
  // 数据源接口信息
  dataSourceInterfaceInfo: DataSourceInterface(name='data_source_interface_info', example=''),
}

// 授权人企业信息
model AuthPersonEnterpriseInfo {
  // 企业名称
  enterpriseName: string(name='enterprise_name', example='***有限公司'),
  // 企业统一社会信用码
  enterpriseCreditNum: string(name='enterprise_credit_num', example='9144*****'),
  // 企业法人姓名
  enterpriseLegalPersonName: string(name='enterprise_legal_person_name', example='张**'),
  // 企业法人身份证号
  enterpriseLegalPersonId: string(name='enterprise_legal_person_id', example='110***** '),
  // 企业法人电话号码
  enterpriseLegalPersonPhoneNum: long(name='enterprise_legal_person_phone_num', example='138********'),
}

// 被授权人信息
model BeAuthedPersonInfo {
  // 企业名称
  enterpriseName: string(name='enterprise_name', example='***有限公司'),
  // 企业统一社会信用码
  enterpriseCreditNum: string(name='enterprise_credit_num', example='9144*****'),
  // 企业法人姓名
  enterpriseLegalPersonName: string(name='enterprise_legal_person_name', example='张**'),
  // 企业法人身份证号
  enterpriseLegalPersonId: string(name='enterprise_legal_person_id', example='110*****'),
}

// 数据源信息
model DataSource {
  // 数据源ID
  id: string(name='id', example='1'),
  // 数据源接口地址
  address: string(name='address', example='https://******'),
}

model GetDasLinkRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 被授权人接入应用id
  beAuthedPersonAppId: string(name='be_authed_person_app_id'),
}

model GetDasLinkResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // H5应用身份认证信息
  token?: string(name='token'),
  // 带有token 信息的H5页面链接
  link?: string(name='link'),
}

/**
 * Description: 获取授权H5页面链接
 * Summary: 获取授权H5页面链接
 */
async function getDasLink(request: GetDasLinkRequest): GetDasLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDasLinkEx(request, headers, runtime);
}

/**
 * Description: 获取授权H5页面链接
 * Summary: 获取授权H5页面链接
 */
async function getDasLinkEx(request: GetDasLinkRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDasLinkResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.link.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDasEnterprisevcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权实例ID
  authInstanceId: string(name='auth_instance_id'),
  // 授权企业信息
  authPersonEnterpriseInfo: AuthPersonEnterpriseInfo(name='auth_person_enterprise_info'),
}

model GetDasEnterprisevcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // VC 内容
  vc?: string(name='vc'),
}

/**
 * Description: 获取授权企业VC
 * Summary: 获取授权企业VC
 */
async function getDasEnterprisevc(request: GetDasEnterprisevcRequest): GetDasEnterprisevcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDasEnterprisevcEx(request, headers, runtime);
}

/**
 * Description: 获取授权企业VC
 * Summary: 获取授权企业VC
 */
async function getDasEnterprisevcEx(request: GetDasEnterprisevcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDasEnterprisevcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.enterprisevc.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDasIndividualvcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权实例ID
  authInstanceId: string(name='auth_instance_id'),
  // 授权人个人信息
  authedPersonIndividualInfo: AuthPersonIndividualInfo(name='authed_person_individual_info'),
}

model GetDasIndividualvcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // VC
  vc?: string(name='vc'),
}

/**
 * Description: 获取个人VC
 * Summary: 获取个人VC
 */
async function getDasIndividualvc(request: GetDasIndividualvcRequest): GetDasIndividualvcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDasIndividualvcEx(request, headers, runtime);
}

/**
 * Description: 获取个人VC
 * Summary: 获取个人VC
 */
async function getDasIndividualvcEx(request: GetDasIndividualvcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDasIndividualvcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.individualvc.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendDasSmsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 接收方电话号码
  receivePhoneNum: long(name='receive_phone_num'),
  // 授权实例ID
  authInstanceId: string(name='auth_instance_id'),
}

model SendDasSmsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 发送短信验证码
 * Summary: 发送短信验证码
 */
async function sendDasSms(request: SendDasSmsRequest): SendDasSmsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendDasSmsEx(request, headers, runtime);
}

/**
 * Description: 发送短信验证码
 * Summary: 发送短信验证码
 */
async function sendDasSmsEx(request: SendDasSmsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendDasSmsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.sms.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AuthDasSmsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 手机验证码
  verificationCode: string(name='verification_code'),
  // 授权实例ID
  authInstanceId: string(name='auth_instance_id'),
  // 被授权企业接入应用ID
  beAuthedPersonAppId: string(name='be_authed_person_app_id'),
  // 授权企业信息
  authPersonEnterpriseInfo?: AuthPersonEnterpriseInfo(name='auth_person_enterprise_info'),
  // 授权人个人信息
  authPersonIndividualInfo?: AuthPersonIndividualInfo(name='auth_person_individual_info'),
}

model AuthDasSmsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 授权状态
  authStatus?: string(name='auth_status'),
  // VC
  vc?: string(name='vc'),
}

/**
 * Description: 通过短信验证码授权
 * Summary: 通过短信验证码授权
 */
async function authDasSms(request: AuthDasSmsRequest): AuthDasSmsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return authDasSmsEx(request, headers, runtime);
}

/**
 * Description: 通过短信验证码授权
 * Summary: 通过短信验证码授权
 */
async function authDasSmsEx(request: AuthDasSmsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AuthDasSmsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.sms.auth', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyDasEnterpriseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 被授权企业接入应用ID
  authInstanceId: string(name='auth_instance_id'),
  // VC完整内容
  vc: string(name='vc'),
  // 被授权企业信息
  beAuthedPersonInfo: BeAuthedPersonInfo(name='be_authed_person_info'),
  // 授权人企业信息
  authPersonEnterpriseInfo: AuthPersonEnterpriseInfo(name='auth_person_enterprise_info'),
  // 需要访问的数据源信息列表
  dataSourceInfo: [ DataSource ](name='data_source_info'),
}

model VerifyDasEnterpriseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 核验结果
  success?: boolean(name='success'),
  // 核验失败原因
  failedReason?: string(name='failed_reason'),
}

/**
 * Description: 根据VC针对提供的授权企业、被授权企业、授权数据做核验。
 * Summary: 企业信息核验
 */
async function verifyDasEnterprise(request: VerifyDasEnterpriseRequest): VerifyDasEnterpriseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyDasEnterpriseEx(request, headers, runtime);
}

/**
 * Description: 根据VC针对提供的授权企业、被授权企业、授权数据做核验。
 * Summary: 企业信息核验
 */
async function verifyDasEnterpriseEx(request: VerifyDasEnterpriseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyDasEnterpriseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.enterprise.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyDasIndividualRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 被授权企业接入应用ID
  authInstanceId: string(name='auth_instance_id'),
  // VC完整内容
  vc: string(name='vc'),
  // 被授权企业信息
  beAuthedPersonInfo: BeAuthedPersonInfo(name='be_authed_person_info'),
  // 授权人个人信息
  authPersonIndividualInfo: AuthPersonIndividualInfo(name='auth_person_individual_info'),
  // 需要访问的数据源信息列表
  dataSourceInfo: [ DataSource ](name='data_source_info'),
}

model VerifyDasIndividualResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 核验结果
  success?: boolean(name='success'),
  // 核验失败原因
  failedReason?: string(name='failed_reason'),
}

/**
 * Description: 个人信息核验
 * Summary: 个人信息核验
 */
async function verifyDasIndividual(request: VerifyDasIndividualRequest): VerifyDasIndividualResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyDasIndividualEx(request, headers, runtime);
}

/**
 * Description: 个人信息核验
 * Summary: 个人信息核验
 */
async function verifyDasIndividualEx(request: VerifyDasIndividualRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyDasIndividualResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.individual.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDasDatasourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据源名称
  name: string(maxLength=20, name='name'),
  // 数据源提供方
  provider: string(maxLength=30, name='provider'),
  // 枚举值：ENTERPRISE、INDIVIDUAL
  dataOwnerType: string(name='data_owner_type'),
  // 数据源接口定义
  dataSourceInterface: DataSourceInterface(name='data_source_interface'),
}

model CreateDasDatasourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据源ID
  id?: string(name='id'),
}

/**
 * Description: 创建数据源
 * Summary: 创建数据源
 */
async function createDasDatasource(request: CreateDasDatasourceRequest): CreateDasDatasourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDasDatasourceEx(request, headers, runtime);
}

/**
 * Description: 创建数据源
 * Summary: 创建数据源
 */
async function createDasDatasourceEx(request: CreateDasDatasourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDasDatasourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.datasource.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDasDatasourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 要修改的数据源ID
  id: string(name='id'),
  // 数据源名称
  name: string(maxLength=20, name='name'),
  // 数据源提供方
  provider: string(maxLength=30, name='provider'),
  // 枚举值：ENTERPRISE、INDIVIDUAL
  dataOwnerType: string(name='data_owner_type'),
  // 数据源接口定义
  dataSourceInterface: DataSourceInterface(name='data_source_interface'),
}

model UpdateDasDatasourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新数据源
 * Summary: 更新数据源
 */
async function updateDasDatasource(request: UpdateDasDatasourceRequest): UpdateDasDatasourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDasDatasourceEx(request, headers, runtime);
}

/**
 * Description: 更新数据源
 * Summary: 更新数据源
 */
async function updateDasDatasourceEx(request: UpdateDasDatasourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDasDatasourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.datasource.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDasDatasourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 要删除的数据源ID
  id: string(name='id'),
}

model DeleteDasDatasourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除数据源
 * Summary: 删除数据源
 */
async function deleteDasDatasource(request: DeleteDasDatasourceRequest): DeleteDasDatasourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDasDatasourceEx(request, headers, runtime);
}

/**
 * Description: 删除数据源
 * Summary: 删除数据源
 */
async function deleteDasDatasourceEx(request: DeleteDasDatasourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDasDatasourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.datasource.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDasDatasourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据源名称
  name: string(maxLength=20, name='name'),
  // 数据源提供方
  provider?: string(maxLength=30, name='provider'),
  // 枚举值：ENTERPRISE、INDIVIDUAL
  dataOwnerType?: string(name='data_owner_type'),
  // 数据源接口访问地址
  address?: string(maxLength=100, name='address'),
}

model QueryDasDatasourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据源信息列表
  dataSources?: [ DataSourceInfo ](name='data_sources'),
}

/**
 * Description: 查询数据源信息
 * Summary: 查询数据源信息
 */
async function queryDasDatasource(request: QueryDasDatasourceRequest): QueryDasDatasourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDasDatasourceEx(request, headers, runtime);
}

/**
 * Description: 查询数据源信息
 * Summary: 查询数据源信息
 */
async function queryDasDatasourceEx(request: QueryDasDatasourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDasDatasourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.datasource.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyDasAuthresultRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据源ID列表
  dataSourceIds: [ string ](name='data_source_ids'),
  // 被授权企业接入应用名称
  beAuthedPersonAppName: string(name='be_authed_person_app_name'),
  // 授权企业统一社会信用码
  authPersonEnterpriseCreditNum: string(name='auth_person_enterprise_credit_num'),
}

model VerifyDasAuthresultResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 授权状态: 未授权，已授权
  authStatus?: string(name='auth_status'),
}

/**
 * Description: 校验授权结果
 * Summary: 校验授权结果
 */
async function verifyDasAuthresult(request: VerifyDasAuthresultRequest): VerifyDasAuthresultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyDasAuthresultEx(request, headers, runtime);
}

/**
 * Description: 校验授权结果
 * Summary: 校验授权结果
 */
async function verifyDasAuthresultEx(request: VerifyDasAuthresultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyDasAuthresultResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.authresult.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AuthDasAuthresultRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据源ID列表
  dataSourceIds: [ string ](name='data_source_ids'),
  // 被授权企业接入应用名称
  beAuthedPersonAppName: string(name='be_authed_person_app_name'),
  // 授权企业信息
  authPersonEnterpriseInfo?: AuthPersonEnterpriseInfo(name='auth_person_enterprise_info'),
  // 授权人信息
  authPersonIndividualInfo?: AuthPersonIndividualInfo(name='auth_person_individual_info'),
}

model AuthDasAuthresultResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 被授权企业ID
  beAuthedPersonId?: string(name='be_authed_person_id'),
  // 被授权企业接入应用ID
  beAuthedPersonAppId?: string(name='be_authed_person_app_id'),
  // 授权实例ID
  authInstanceId?: string(name='auth_instance_id'),
  // 授权详情ID
  authResultId?: string(name='auth_result_id'),
  // VC 完整信息
  vc?: string(name='vc'),
}

/**
 * Description: 根据授权三方信息做授权
 * Summary: 根据授权三方信息做授权
 */
async function authDasAuthresult(request: AuthDasAuthresultRequest): AuthDasAuthresultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return authDasAuthresultEx(request, headers, runtime);
}

/**
 * Description: 根据授权三方信息做授权
 * Summary: 根据授权三方信息做授权
 */
async function authDasAuthresultEx(request: AuthDasAuthresultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AuthDasAuthresultResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.authresult.auth', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

