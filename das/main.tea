import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.1.67',
    _prod_code = 'DAS',
    _prod_channel = 'undefined'
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDuration = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 主要人员
model EnterpriseStaff {
  // 主要人员名称
  name?: string(name='name', example='李*东'),
  // 法人类型，1-人;2-公司
  type?: string(name='type', example='2'),
  // 经理
  typeJoin?: [ string ](name='type_join', example='职位'),
}

// 数据源接口入参定义
model InterfaceInput {
  // 接口入参名称
  name?: string(maxLength=50, name='name', example='name'),
  // 接口入参类型
  type?: string(maxLength=50, name='type', example='String'),
  // 接口入参描述
  description?: string(maxLength=100, name='description', example='描述'),
  // 接口入参是否必填
  required?: boolean(name='required', example='true, false'),
}

// 数据源接口出参定义
model InterfaceOutput {
  // 接口出参名称
  name?: string(maxLength=50, name='name', example='success'),
  // 接口出参类型
  type?: string(maxLength=50, name='type', example='String'),
  // 接口出参描述
  description?: string(maxLength=100, name='description', example='描述'),
}

// 商标共有人信息
model TmCoownerInfo {
  // 共有人中文名称
  coownerNameCn?: string(name='coowner_name_cn', example='张三'),
  // 共有人中文地址
  coownerAddrCn?: string(name='coowner_addr_cn', example='中文地址信息'),
  // 共有人英文名称
  coownerNameEn?: string(name='coowner_name_en', example='Bob'),
  // 共有人英文地址
  coownerAddrEn?: string(name='coowner_addr_en', example='英文地址信息'),
}

// 查询人持股信息
model StockHolder {
  // 股东类型
  orgHolderType?: string(name='org_holder_type', example='自然人'),
  // 出资时间
  investDate?: string(name='invest_date', example='2047-04-19'),
  // 占比
  investRate?: string(name='invest_rate', example='100.00%'),
  // 出资金额
  subscriptAmt?: string(name='subscript_amt', example='1000'),
  // 股东名
  orHolderName?: string(name='or_holder_name', example='xxx'),
}

// 查询人所在公司基本信息
model EnterpriseBasicInfo {
  // 企业状态
  regStatus?: string(name='reg_status', example='吊销，未注销'),
  // 成立日期(注册日期)
  establishTime?: string(name='establish_time', example='2017-04-26'),
  // 注册资本
  regCapital?: string(name='reg_capital', example='1000万人民币'),
  // 行业
  industry?: string(name='industry', example='批发业'),
  // 主要人员
  staffList?: [ EnterpriseStaff ](name='staff_list', example=''),
  // 法人类型，1-人;2-公司
  type?: string(name='type', example='1'),
  // 注册资本币种:人民币、美元、欧元等
  regCapitalCurrency?: string(name='reg_capital_currency', example='人民币'),
  // 法人姓名
  legalPersonName?: string(name='legal_person_name', example='李*东'),
  // 注册号
  regNumber?: string(name='reg_number', example='210213000249529'),
  // 统一社会信用代码
  creditCode?: string(name='credit_code', example='91210213MA0U32TD'),
  // 企业名
  name?: string(name='name', example='**公司'),
  // 企业类型
  companyOrgType?: string(name='company_org_type', example='有限责任公司(自然人独资)'),
  // 省份简称
  base?: string(name='base', example='ln'),
}

// 数据源接口定义
model DataSourceInterface {
  // 数据源接口访问地址
  address: string(maxLength=100, name='address', example='https://******'),
  // 数据源接口请求方法类型
  interfaceRequestMethod: string(maxLength=50, name='interface_request_method', example='POST'),
  // 数据源接口入参列表
  interfaceInput?: [ InterfaceInput ](name='interface_input', example=''),
  // 数据源接口出参列表
  interfaceOutput?: [ InterfaceOutput ](name='interface_output', example=''),
}

// 国内商标对应商品信息
model DomesticTmGoodsInfo {
  // 商品中文名称
  goodsCnName?: string(name='goods_cn_name', example='汽车'),
  // 类似群编码
  similarCode?: string(name='similar_code', example='1210'),
}

// 工作经历信息
model WorkExperiencesInfo {
  // 工作开始日期
  workStartTime?: long(maximum=32, name='work_start_time', example='12'),
  // 工作结束日期
  workEndTime?: long(maximum=32, name='work_end_time', example='12'),
  // 公司名称
  companyName?: string(maxLength=128, name='company_name', example='xxx有限公司'),
  // 工作描述
  workDesc?: string(maxLength=1024, name='work_desc', example='工作描述'),
  // 职业
  jobName?: string(maxLength=128, name='job_name', example='职业'),
  // 行业名称
  professionName?: string(maxLength=128, name='profession_name', example='行业名称'),
}

// 车辆基础信息
model BasicCarInfo {
  // 号牌号码
  licenseNo: string(name='license_no', example='京Axxxxx'),
  // 号牌种类，枚举值
  licenseType: string(name='license_type', example='01'),
  // 车架号
  vin: string(name='vin', example='xxxxxx'),
  // 发动机号
  engineNo: string(name='engine_no', example='xxxxxx'),
}

// 行驶证证信息
model VehicleLicenseInfo {
  // 品牌名称
  brandName?: string(name='brand_name', example='品牌'),
  // 车身颜色
  bodyColor?: string(name='body_color', example='红'),
  // 使用性质
  properties?: string(name='properties', example='运营车辆'),
  // 车型
  type?: string(name='type', example='A1'),
  // 车辆类型
  vehicleType?: string(name='vehicle_type', example='车辆类型'),
  // 发动机号
  engineNumber?: string(name='engine_number', example='R20859'),
  // 发动机型号
  engineModel?: string(name='engine_model', example='CSR'),
  // 初次登记日期
  firstRegistryDate?: string(name='first_registry_date', example='2016-10-10 00:00:00'),
  // 检验失效日期
  inspectionExpireDate?: string(name='inspection_expire_date', example='2099-12-31 00:00:00'),
  // 车辆状态
  vehicleStatus?: string(name='vehicle_status', example='有效'),
  // 核定载客数
  passengers?: string(name='passengers', example='5'),
  // 强制报废期止
  retirementDate?: string(name='retirement_date', example='2099-12-31 00:00:00'),
  // 燃料种类
  fuelType?: string(name='fuel_type', example='汽油'),
  // 排量
  displacement?: string(name='displacement', example='1600'),
  // 出厂日期
  ppsDate?: string(name='pps_date', example='2016-01-01 00:00:00'),
  // 最大功率
  maximumPower?: string(name='maximum_power', example='100'),
  // 轴数
  shaft?: string(name='shaft', example='轴数'),
  // 轴距
  wheelBase?: string(name='wheel_base', example='1000'),
  // 前轮距
  frontTread?: string(name='front_tread', example='1000'),
  // 后轮距
  rearTread?: string(name='rear_tread', example='1000'),
  // 总重量
  crossWeight?: string(name='cross_weight', example='1000'),
  // 整备质量
  curbWeight?: string(name='curb_weight', example='1000'),
  // 核定载质量
  loadWeight?: string(name='load_weight', example='1000'),
  // 车架号
  vin?: string(name='vin', example='12345'),
  // 车牌号
  plateNumber?: string(name='plate_number', example='12345'),
  // 车牌种类
  plateType?: string(name='plate_type', example='01'),
  // 检车日期
  inspectionDate?: string(name='inspection_date', example='2099-12-31 00:00:00'),
}

// 教育经历信息
model EducationExperiencesInfo {
  // 学历
  degree?: string(maxLength=32, name='degree', example='BACHELOR'),
  // 受教育地点
  location?: string(maxLength=128, name='location', example='受教育地点'),
  // 学校名称
  schoolName?: string(maxLength=128, name='school_name', example='北京大学'),
  // 教育状态
  educationStatus?: string(maxLength=128, name='education_status', example='FINISH_SCHOOL'),
  // 年
  year?: long(maximum=6, name='year', example='2022'),
  // 月
  month?: long(maximum=5, name='month', example='5'),
}

// 教育学历信息
model EducationInfo {
  // 专业
  major?: string(name='major', example='计算机'),
  // 学历等级代码
  educationLevel?: string(name='education_level', example='01'),
  // 毕业日期
  graduationDate?: string(name='graduation_date', example='202006'),
  // 学习形式
  educationType?: string(name='education_type', example='全日制'),
  // 是否211
  project211?: boolean(name='project211', example='true, false'),
  // 是否985
  project985?: boolean(name='project985', example='true, false'),
  // 是否双一流
  doubleFirstClass?: boolean(name='double_first_class', example='true'),
}

// 授权人企业信息
model AuthPersonEnterpriseInfo {
  // 企业名称
  enterpriseName: string(name='enterprise_name', example='***有限公司'),
  // 企业统一社会信用码
  enterpriseCreditNum: string(name='enterprise_credit_num', example='9144*****'),
  // 企业法人姓名
  enterpriseLegalPersonName: string(name='enterprise_legal_person_name', example='张**'),
  // 企业法人身份证号
  enterpriseLegalPersonId: string(name='enterprise_legal_person_id', example='110***** '),
  // 企业法人电话号码
  enterpriseLegalPersonPhoneNum: long(name='enterprise_legal_person_phone_num', example='138********'),
}

// 企业工商信息_自然人查询
model EnterprisePersonInfo {
  // 查询人对应企业名
  orgName?: string(name='org_name', example='**公司'),
  // 查询人持股信息
  stockholder?: StockHolder(name='stockholder', example=''),
  // 查询人所在公司基本信息
  basicInfo?: EnterpriseBasicInfo(name='basic_info', example=''),
  // 查询人与这家企业的关联:sh 股东;lp 法人;tm 高管
  relationship?: [ string ](name='relationship', example=''),
}

// 行驶证核验结果
model VehicleLicenseCertResult {
  // 与车辆的车牌号是否一致
  plateNumber?: boolean(name='plate_number', example='true'),
  // 与车辆对应号牌种类是否一致
  plateType?: boolean(name='plate_type', example='true'),
  // 与车辆所有人是否一致
  owner?: boolean(name='owner', example='true'),
}

// 企业基本信息
model EnterpriseBaseInfo {
  // 机构名称
  orgName: string(name='org_name', example='机构名称'),
  // 统一社会信用代码
  creditCode: string(name='credit_code', example='统一社会信用代码'),
  // 企业公司注册证号
  regNumber: string(name='reg_number', example='企业公司注册证号'),
  // 持股比例
  investRate?: string(name='invest_rate', example='持股比例'),
  // 查询人与这家企业的关联
  relationship?: string(name='relationship', example='sh;lp;tm'),
}

// 数据源信息
model DataSource {
  // 数据源ID
  id: string(name='id', example='1'),
  // 数据源接口地址
  address: string(name='address', example='https://******'),
}

// 驾驶证信息
model DriverLicenseInfo {
  // 性别，字典
  gender?: string(name='gender', example='1'),
  // 驾驶证发证日期,当前日期减去实际日期的天数所在区间
  issueDate?: string(name='issue_date', example='A/-A'),
  // 驾驶证有效终止日期
  validEndDate?: string(name='valid_end_date', example='A/-A'),
  // 驾驶证有效起始日期
  validStartDate?: string(name='valid_start_date', example='A/-A'),
  // 驾驶证状态，字典
  driverLicenseStatus?: string(name='driver_license_status', example='A'),
  // 初次领证时间
  firstIssueDate?: string(name='first_issue_date', example='A/-A'),
  // 准驾车型，字典
  allowDriveCar?: string(name='allow_drive_car', example='A1'),
  // 驾驶证种类，字典
  driverLicenseType?: string(name='driver_license_type', example='A'),
}

// 教育标签信息
model EducationTagInfo {
  // 专业名称
  major?: string(name='major', example='软件工程'),
  // 学历等级代码
  educationLevel?: string(name='education_level', example='01'),
  // 	
  // 毕业日期
  graduationDate?: string(name='graduation_date', example='2020/06'),
  // 学习形式
  educationType?: string(name='education_type', example='全日制'),
  // 入学时间
  admissionDate?: string(name='admission_date', example='202109'),
  // 学校类型
  schoolType?: string(name='school_type', example='985学校'),
  // 学习形式字典code
  educationTypeCode?: string(name='education_type_code', example='01'),
  // 学校名称
  schoolName?: string(name='school_name', example='北京大学'),
}

// 车辆详细信息
model DetailCarInfo {
  // 号牌号码
  licenseNo: string(name='license_no', example='京Axxxxx '),
  // 号牌种类，枚举值
  // 
  licenseType: string(name='license_type', example='01'),
  // 车架号
  vin: string(name='vin', example='xxxxxx'),
  // 发动机号
  engineNo: string(name='engine_no', example='xxxxxx'),
  // 初登日期
  registerDate: string(name='register_date', example='2021-12-13'),
  // 车辆型号
  modelCode: string(name='model_code', example='xxxxxx'),
  // 是否营运车辆，枚举值
  useNatureCode: string(name='use_nature_code', example='100'),
  // 能源种类，枚举值
  fuelType: string(name='fuel_type', example='10'),
  // 排量，数字
  displacement: string(name='displacement', example='10'),
}

// Das平台自定义pair，key和value只能为String类型
model StringPair {
  // key
  key: string(name='key', example='appid'),
  // 对应key的具体value
  value: string(name='value', example='12312312'),
}

// 国内商标扩展信息
model DomesticTmExtensionInfo {
  // 商标logo URL地址
  tmLogoUrl?: string(name='tm_logo_url', example='http://logo.png'),
  // 商品与服务信息列表
  goodsInfo?: [ DomesticTmGoodsInfo ](name='goods_info', example=''),
}

// 简历技能信息
model ResumeSkillInfo {
  // 技能标签名字
  skillName?: string(maxLength=128, name='skill_name', example='技能标签名字'),
}

// 被授权人信息
model BeAuthedPersonInfo {
  // 企业名称
  enterpriseName: string(name='enterprise_name', example='***有限公司'),
  // 企业统一社会信用码
  enterpriseCreditNum: string(name='enterprise_credit_num', example='9144*****'),
  // 企业法人姓名
  enterpriseLegalPersonName: string(name='enterprise_legal_person_name', example='张**'),
  // 企业法人身份证号
  enterpriseLegalPersonId: string(name='enterprise_legal_person_id', example='110*****'),
}

// 授权人个人信息
model AuthPersonIndividualInfo {
  // 姓名
  individualName: string(name='individual_name', example='张**'),
  // 身份证号
  individualId: string(name='individual_id', example='110*****'),
  // 电话号码
  individualPhoneNum: long(name='individual_phone_num', example='138********'),
}

// 国内商标信息
model DomesticTmInfo {
  // 商标名称
  tmName?: string(name='tm_name', example='商标名称'),
  // 注册证号
  tmRegNum?: string(name='tm_reg_num', example='123456789'),
  // 国际分类
  intCls?: string(name='int_cls', example='16'),
  // 商标状态
  tmStatus?: string(name='tm_status', example='status'),
  // 专用期开始时间
  propertyBgnDate?: string(name='property_bgn_date', example='2021-10-07T00:00:00'),
  // 注册日期
  // 
  regDate?: string(name='reg_date', example='2022-08-28T00:00:00'),
  // 是否共有商标
  isShare?: boolean(name='is_share', example='true, false'),
  // 商标共有人信息(共有商标才有该数据)
  coownerInfos?: [ TmCoownerInfo ](name='coowner_infos', example=''),
  // 专用期结束时间
  propertyEndDate?: string(name='property_end_date', example='2031-10-06T00:00:00'),
  // 商标类别
  formType?: string(name='form_type', example='0001'),
  // 权利人中文名称
  ownerNameCn?: string(name='owner_name_cn', example='张三'),
  // 权利人中文地址
  ownerAddrCn?: string(name='owner_addr_cn', example='中文地址信息'),
  // 权利人英文名称
  ownerNameEn?: string(name='owner_name_en', example='Bob'),
  // 权利人英文地址
  ownerAddrEn?: string(name='owner_addr_en', example='英文地址信息'),
  // 申请人中文名称
  applicantNameCn?: string(name='applicant_name_cn', example='张*'),
  // 申请人中文地址
  applicantAddrCn?: string(name='applicant_addr_cn', example='中文地址信息'),
  // 申请人外文名称
  applicantNameEn?: string(name='applicant_name_en', example='Bob'),
  // 申请人英文地址
  applicantAddrEn?: string(name='applicant_addr_en', example='英文地址信息'),
  // 权利人社会信用统一代码
  ownerUscc?: string(name='owner_uscc', example='1234567W'),
  // 商标唯一标识码
  tid?: string(name='tid', example='123456'),
}

// 数据源详细信息
model DataSourceInfo {
  // 数据源biz_uuid
  bizUuid: string(name='biz_uuid', example='1'),
  // 数据源名称
  name: string(maxLength=20, name='name', example='**数据'),
  // 数据提供方
  provider: string(maxLength=30, name='provider', example='***有限公司'),
  // 枚举值：ENTERPRISE、INDIVIDUAL
  dataOwnerType: string(name='data_owner_type', example='ENTERPRISE'),
  // 数据源接口信息
  dataSourceInterfaceInfo: DataSourceInterface(name='data_source_interface_info', example=''),
}

// 企业案件信息
model EnterpriseCaseInfo {
  // 立案信息
  caseInfo?: string(name='case_info', example='立案信息'),
  // 案件号
  caseCode?: string(name='case_code', example='案件号'),
  // 立案时间
  caseCreateTime?: string(name='case_create_time', example='2021-12-09'),
  // 案件状态
  caseStatus?: string(name='case_status', example='案件状态'),
  // 公示状态
  publishStatus?: string(name='publish_status', example='公示状态'),
  // 被执行人姓名
  execName?: string(name='exec_name', example='被执行人姓名'),
  // 执行法院
  execCourtName?: string(name='exec_court_name', example='执行法院'),
  // 执行标的(元)
  execMoney?: string(name='exec_money', example='执行标的(元)'),
  // 关联裁判文书
  gistId?: string(name='gist_id', example='关联裁判文书'),
  // 案由
  caseType?: string(name='case_type', example='案由'),
  // 创建时间
  createTime?: string(name='create_time', example='2021-12-09'),
}

// 学籍信息
model EducationStatus {
  // 是否211院校
  project211?: boolean(name='project211', example='true, false'),
  // 是否985院校 
  project985?: boolean(name='project985', example='true, false'),
  // boolean	是否双一流院校
  doubleFirstClass?: boolean(name='double_first_class', example='true, false'),
  // 入学时间
  admissionDate?: string(name='admission_date', example='202109'),
  // 学制，字典
  educationalSystem?: string(name='educational_system', example='C'),
  // boolean	是否注册学籍
  registeredStudentStatus?: boolean(name='registered_student_status', example='true, false'),
}

// 简历证书信息
model CertificatesInfo {
  // 证书名称
  certificateName?: string(maxLength=128, name='certificate_name', example='证书名称'),
}

// 键值对
model XNameValuePair {
  // 键名
  name: string(name='name', example='key'),
  // 键值
  value: string(name='value', example='value'),
}

model UploadApplicationBatchqueryfileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 文件md5
  fileMd5: string(name='file_md5'),
  // 文件id
  fileObject?: readable(description='待上传文件', ignore='true'),
  fileObjectName?: string(description='待上传文件名', ignore='true'),
  fileId: string(name='file_id'),
  // 数据集id，开发者提供
  dataSetId: string(name='data_set_id'),
  // 幂等id，同一批任务需使用相同的uniqueId，文件不一样但uniqueId一样，只会有一个任务，任务信息以第一次请求为准
  uniqueId: string(name='unique_id'),
}

model UploadApplicationBatchqueryfileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 离线任务查询id，批量任务结束后可通过该字段查询结果
  // 
  queryId?: string(name='query_id'),
}

/**
 * Description: 上传批量查询数据文件
 * Summary: 上传批量查询数据文件
 */
async function uploadApplicationBatchqueryfile(request: UploadApplicationBatchqueryfileRequest): UploadApplicationBatchqueryfileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadApplicationBatchqueryfileEx(request, headers, runtime);
}

/**
 * Description: 上传批量查询数据文件
 * Summary: 上传批量查询数据文件
 */
async function uploadApplicationBatchqueryfileEx(request: UploadApplicationBatchqueryfileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadApplicationBatchqueryfileResponse {
  if (!Util.isUnset(request.fileObject)) {
    var uploadReq = new CreateAntcloudGatewayxFileUploadRequest{
      authToken = request.authToken,
      apiCode = 'antchain.das.application.batchqueryfile.upload',
      fileName = request.fileObjectName,
    };
    var uploadResp = createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
    if (!AntchainUtil.isSuccess(uploadResp.resultCode, "ok")) {
      var uploadApplicationBatchqueryfileResponse = new UploadApplicationBatchqueryfileResponse{
        reqMsgId = uploadResp.reqMsgId,
        resultCode = uploadResp.resultCode,
        resultMsg = uploadResp.resultMsg,
      };
      return uploadApplicationBatchqueryfileResponse;
    }
    var uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
    AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
    request.fileId = uploadResp.fileId;
    request.fileObject = null;
  }
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.application.batchqueryfile.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApplicationBatchqueryresultRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 上传待查询数据集文件后得到的查询id，在此接口进行结果查询
  // 
  queryId: string(name='query_id'),
}

model QueryApplicationBatchqueryresultResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 结果文件临时链接
  // 
  filePath?: string(name='file_path'),
  // 描述结果文件完成进度：
  // 如：
  // 余额不足，部分内容查询完成
  message?: string(name='message'),
}

/**
 * Description: 获取查询数据集任务结果
 * Summary: 获取查询数据集任务结果
 */
async function queryApplicationBatchqueryresult(request: QueryApplicationBatchqueryresultRequest): QueryApplicationBatchqueryresultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApplicationBatchqueryresultEx(request, headers, runtime);
}

/**
 * Description: 获取查询数据集任务结果
 * Summary: 获取查询数据集任务结果
 */
async function queryApplicationBatchqueryresultEx(request: QueryApplicationBatchqueryresultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApplicationBatchqueryresultResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.application.batchqueryresult.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApplicationDataRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据集id，开发者提供
  dataSetId: string(name='data_set_id'),
  // 查询数据参数，json串
  index: string(name='index'),
}

model QueryApplicationDataResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询结果
  data?: string(name='data'),
}

/**
 * Description: 实时获取数据源数据
 * Summary: 实时查询数据
 */
async function queryApplicationData(request: QueryApplicationDataRequest): QueryApplicationDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApplicationDataEx(request, headers, runtime);
}

/**
 * Description: 实时获取数据源数据
 * Summary: 实时查询数据
 */
async function queryApplicationDataEx(request: QueryApplicationDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApplicationDataResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.application.data.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApplicationIpeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据集id，开发者提供
  dataSetId: string(name='data_set_id'),
  // 企业信息
  index: string(name='index'),
}

model QueryApplicationIpeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询结果
  data?: string(name='data'),
}

/**
 * Description: 知识产权实时接口
 * Summary: 知识产权实时接口
 */
async function queryApplicationIpe(request: QueryApplicationIpeRequest): QueryApplicationIpeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApplicationIpeEx(request, headers, runtime);
}

/**
 * Description: 知识产权实时接口
 * Summary: 知识产权实时接口
 */
async function queryApplicationIpeEx(request: QueryApplicationIpeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApplicationIpeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.application.ipe.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDomesticTrademarkRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 商标名称
  tmName?: string(name='tm_name'),
  // 商标注册证号
  tmRegNum?: string(name='tm_reg_num'),
  // 商标所有人名称
  tmOwnerName?: string(name='tm_owner_name'),
  // 商标所有人社会信用统一代码
  tmOwnerUscc?: string(name='tm_owner_uscc'),
  // 数据集ID
  dataSetId: string(name='data_set_id'),
  // 每页的数量
  pageSize: long(name='page_size'),
  // 当前页码，从0开始。
  pageNum: long(name='page_num'),
}

model QueryDomesticTrademarkResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 商标信息列表
  tmInfos?: [ DomesticTmInfo ](name='tm_infos'),
  // 商标总数
  tmTotal?: long(name='tm_total'),
}

/**
 * Description: 查询国内商标数据
 * Summary: 查询国内商标数据
 */
async function queryDomesticTrademark(request: QueryDomesticTrademarkRequest): QueryDomesticTrademarkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDomesticTrademarkEx(request, headers, runtime);
}

/**
 * Description: 查询国内商标数据
 * Summary: 查询国内商标数据
 */
async function queryDomesticTrademarkEx(request: QueryDomesticTrademarkRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDomesticTrademarkResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.domestic.trademark.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDomesticTrademarklogoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据集ID
  dataSetId: string(name='data_set_id'),
  // 商标注册证号
  tmRegNum: string(name='tm_reg_num'),
  // 商标类别
  tmFormType: string(name='tm_form_type'),
}

model GetDomesticTrademarklogoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 商标logo下载地址
  tmLogoUrl?: string(name='tm_logo_url'),
}

/**
 * Description: 获取国内商标LOGO文件
 * Summary: 获取国内商标LOGO文件
 */
async function getDomesticTrademarklogo(request: GetDomesticTrademarklogoRequest): GetDomesticTrademarklogoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDomesticTrademarklogoEx(request, headers, runtime);
}

/**
 * Description: 获取国内商标LOGO文件
 * Summary: 获取国内商标LOGO文件
 */
async function getDomesticTrademarklogoEx(request: GetDomesticTrademarklogoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDomesticTrademarklogoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.domestic.trademarklogo.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryEncryptEnterpriseinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据集ID
  dataSetId: string(name='data_set_id'),
  // 加密的查询参数
  encryptParameters: string(name='encrypt_parameters'),
}

model QueryEncryptEnterpriseinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 加密的企业工商信息
  encryptData?: string(name='encrypt_data'),
}

/**
 * Description: 查询加密的企业工商信息
 * Summary: 查询加密的企业工商信息
 */
async function queryEncryptEnterpriseinfo(request: QueryEncryptEnterpriseinfoRequest): QueryEncryptEnterpriseinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryEncryptEnterpriseinfoEx(request, headers, runtime);
}

/**
 * Description: 查询加密的企业工商信息
 * Summary: 查询加密的企业工商信息
 */
async function queryEncryptEnterpriseinfoEx(request: QueryEncryptEnterpriseinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryEncryptEnterpriseinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.encrypt.enterpriseinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadApplicationAuthfileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据集id，开发者提供
  // 
  dataSetId: string(name='data_set_id'),
  // 文件md5
  fileMd5: string(name='file_md5'),
  // 文件id
  // 
  fileObject?: readable(description='待上传文件', ignore='true'),
  fileObjectName?: string(description='待上传文件名', ignore='true'),
  fileId: string(name='file_id'),
  // 协议名称
  fileName: string(name='file_name'),
  // 授权协议文件版本号
  fileVersion: string(name='file_version'),
}

model UploadApplicationAuthfileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 授权协议索引号
  fileIndex?: string(name='file_index'),
}

/**
 * Description: 上传授权协议文件
 * Summary: 上传授权协议文件
 */
async function uploadApplicationAuthfile(request: UploadApplicationAuthfileRequest): UploadApplicationAuthfileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadApplicationAuthfileEx(request, headers, runtime);
}

/**
 * Description: 上传授权协议文件
 * Summary: 上传授权协议文件
 */
async function uploadApplicationAuthfileEx(request: UploadApplicationAuthfileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadApplicationAuthfileResponse {
  if (!Util.isUnset(request.fileObject)) {
    var uploadReq = new CreateAntcloudGatewayxFileUploadRequest{
      authToken = request.authToken,
      apiCode = 'antchain.das.application.authfile.upload',
      fileName = request.fileObjectName,
    };
    var uploadResp = createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
    if (!AntchainUtil.isSuccess(uploadResp.resultCode, "ok")) {
      var uploadApplicationAuthfileResponse = new UploadApplicationAuthfileResponse{
        reqMsgId = uploadResp.reqMsgId,
        resultCode = uploadResp.resultCode,
        resultMsg = uploadResp.resultMsg,
      };
      return uploadApplicationAuthfileResponse;
    }
    var uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
    AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
    request.fileId = uploadResp.fileId;
    request.fileObject = null;
  }
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.application.authfile.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckApplicationHascarRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据集id，开发者提供
  // 
  dataSetId: string(name='data_set_id'),
  // 是否授权
  userAuthed: boolean(name='user_authed'),
  // 授权协议索引
  fileIndex: string(name='file_index'),
  // 用户名称
  userName: string(name='user_name'),
  // 待核验车主身份证号
  userCertNo: string(name='user_cert_no'),
}

model CheckApplicationHascarResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否有车，true：有车；false：无车
  hasCar?: boolean(name='has_car'),
}

/**
 * Description: 校验用户是否车
 * Summary: 校验用户是否车
 */
async function checkApplicationHascar(request: CheckApplicationHascarRequest): CheckApplicationHascarResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkApplicationHascarEx(request, headers, runtime);
}

/**
 * Description: 校验用户是否车
 * Summary: 校验用户是否车
 */
async function checkApplicationHascarEx(request: CheckApplicationHascarRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckApplicationHascarResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.application.hascar.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApplicationBasecarinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据集id，开发者提供
  dataSetId: string(name='data_set_id'),
  // 是否授权
  // 
  userAuthed: boolean(name='user_authed'),
  // 授权协议索引
  // 
  fileIndex: string(name='file_index'),
  // 待核验车主姓名
  userName: string(name='user_name'),
  // 待核验车主身份证号
  userCertNo: string(name='user_cert_no'),
}

model QueryApplicationBasecarinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 车辆信息
  data?: [ BasicCarInfo ](name='data'),
}

/**
 * Description: 查询车辆基础信息
 * Summary: 查询车辆基础信息
 */
async function queryApplicationBasecarinfo(request: QueryApplicationBasecarinfoRequest): QueryApplicationBasecarinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApplicationBasecarinfoEx(request, headers, runtime);
}

/**
 * Description: 查询车辆基础信息
 * Summary: 查询车辆基础信息
 */
async function queryApplicationBasecarinfoEx(request: QueryApplicationBasecarinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApplicationBasecarinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.application.basecarinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApplicationDetailcarinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据集id，开发者提供
  // 
  dataSetId: string(name='data_set_id'),
  // 是否授权
  // 
  userAuthed: boolean(name='user_authed'),
  // 授权协议索引
  // 
  fileIndex: string(name='file_index'),
  // 待核验车主姓名
  // 
  userName: string(name='user_name'),
  // 待核验车主身份证号
  // 
  userCertNo: string(name='user_cert_no'),
}

model QueryApplicationDetailcarinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 车辆详细信息
  data?: [ DetailCarInfo ](name='data'),
}

/**
 * Description: 查询车辆详细信息
 * Summary: 查询车辆详细信息
 */
async function queryApplicationDetailcarinfo(request: QueryApplicationDetailcarinfoRequest): QueryApplicationDetailcarinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApplicationDetailcarinfoEx(request, headers, runtime);
}

/**
 * Description: 查询车辆详细信息
 * Summary: 查询车辆详细信息
 */
async function queryApplicationDetailcarinfoEx(request: QueryApplicationDetailcarinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApplicationDetailcarinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.application.detailcarinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SignApplicationResumeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据源id
  dataSetId: string(name='data_set_id'),
  // 用户唯一id
  userId: string(name='user_id'),
}

model SignApplicationResumeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 用户授权支付宝链接
  authUrl?: string(name='auth_url'),
}

/**
 * Description: 授权简历查询服务
 * Summary: 授权简历查询服务
 */
async function signApplicationResume(request: SignApplicationResumeRequest): SignApplicationResumeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return signApplicationResumeEx(request, headers, runtime);
}

/**
 * Description: 授权简历查询服务
 * Summary: 授权简历查询服务
 */
async function signApplicationResumeEx(request: SignApplicationResumeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SignApplicationResumeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.application.resume.sign', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApplicationResumeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据源id，开发者提供
  dataSetId: string(name='data_set_id'),
  // 用户唯一id
  userId: string(name='user_id'),
}

model QueryApplicationResumeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 姓名
  userName?: string(name='user_name'),
  // 性别
  gender?: string(name='gender'),
  // 生日
  birthday?: string(name='birthday'),
  // 手机号
  phone?: string(name='phone'),
  // 头像图片url
  headPicUrl?: string(name='head_pic_url'),
  // 简历技能
  skills?: [ ResumeSkillInfo ](name='skills'),
  // 证书信息
  certificates?: [ CertificatesInfo ](name='certificates'),
  // 工作经历
  workExperiences?: [ WorkExperiencesInfo ](name='work_experiences'),
  // 教育经历
  educationExperiences?: [ EducationExperiencesInfo ](name='education_experiences'),
}

/**
 * Description: 查询简历信息
 * Summary: 查询简历信息
 */
async function queryApplicationResume(request: QueryApplicationResumeRequest): QueryApplicationResumeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApplicationResumeEx(request, headers, runtime);
}

/**
 * Description: 查询简历信息
 * Summary: 查询简历信息
 */
async function queryApplicationResumeEx(request: QueryApplicationResumeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApplicationResumeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.application.resume.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDetailcarinfoPesonandlicRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据集id，开发者提供
  // 
  dataSetId: string(name='data_set_id'),
  // 是否授权
  // 
  userAuthed: boolean(name='user_authed'),
  // 授权协议索引
  // 
  fileIndex: string(name='file_index'),
  // 待核验车主姓名
  // 
  userName: string(name='user_name'),
  // 待核验车主身份证号
  // 
  userCertNo?: string(name='user_cert_no'),
  // 号牌号码
  licenseNo: string(name='license_no'),
}

model QueryDetailcarinfoPesonandlicResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 车辆详细信息
  data?: DetailCarInfo(name='data'),
  // 是否是该人名下的车，true表示是，false表示否
  owner?: boolean(name='owner'),
}

/**
 * Description: 人车核验并查询车辆详细信息
 * Summary: 人车核验并查询车辆详细信息
 */
async function queryDetailcarinfoPesonandlic(request: QueryDetailcarinfoPesonandlicRequest): QueryDetailcarinfoPesonandlicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDetailcarinfoPesonandlicEx(request, headers, runtime);
}

/**
 * Description: 人车核验并查询车辆详细信息
 * Summary: 人车核验并查询车辆详细信息
 */
async function queryDetailcarinfoPesonandlicEx(request: QueryDetailcarinfoPesonandlicRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDetailcarinfoPesonandlicResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.detailcarinfo.pesonandlic.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIdnumberEducationtaginfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据源id
  dataSetId: string(name='data_set_id'),
  // 用户是否已授权
  userAuthed: boolean(name='user_authed'),
  // 该接口对应的授权协议索引号
  fileIndex: string(name='file_index'),
  // 用户姓名
  userName: string(name='user_name'),
  // 用户身份证号
  userCertNo: string(name='user_cert_no'),
  // 用户手机号
  userTel?: string(name='user_tel'),
}

model QueryIdnumberEducationtaginfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 教育信息
  data?: EducationTagInfo(name='data'),
}

/**
 * Description: 教育标签(姓名身份证)信息查询
 * Summary: 教育标签(姓名身份证)信息查询
 */
async function queryIdnumberEducationtaginfo(request: QueryIdnumberEducationtaginfoRequest): QueryIdnumberEducationtaginfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIdnumberEducationtaginfoEx(request, headers, runtime);
}

/**
 * Description: 教育标签(姓名身份证)信息查询
 * Summary: 教育标签(姓名身份证)信息查询
 */
async function queryIdnumberEducationtaginfoEx(request: QueryIdnumberEducationtaginfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIdnumberEducationtaginfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.idnumber.educationtaginfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryPhonenumberEducationinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据源id
  dataSetId: string(name='data_set_id'),
  // 用户是否已授权
  userAuthed: boolean(name='user_authed'),
  // 该接口对应的授权协议索引号
  fileIndex: string(name='file_index'),
  // 用户姓名
  userName: string(name='user_name'),
  // 用户手机号
  userTel?: string(name='user_tel'),
  // 身份证号
  userCertNo?: string(name='user_cert_no'),
  // 类型指示码
  typeCode: string(name='type_code'),
}

model QueryPhonenumberEducationinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 教育信息
  data?: EducationTagInfo(name='data'),
}

/**
 * Description: 教育信息查询（姓名手机号/姓名身份证）
 * Summary: 教育信息查询（姓名手机号/姓名身份证）
 */
async function queryPhonenumberEducationinfo(request: QueryPhonenumberEducationinfoRequest): QueryPhonenumberEducationinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryPhonenumberEducationinfoEx(request, headers, runtime);
}

/**
 * Description: 教育信息查询（姓名手机号/姓名身份证）
 * Summary: 教育信息查询（姓名手机号/姓名身份证）
 */
async function queryPhonenumberEducationinfoEx(request: QueryPhonenumberEducationinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryPhonenumberEducationinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.phonenumber.educationinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApplicationUnifiedentranceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权协议索引
  fileIndex?: string(name='file_index'),
  // 整个需求的入参，map json
  params: string(name='params'),
  // 是否授权
  userAuthed?: boolean(name='user_authed'),
  // 数据集服务id
  dataSetId: string(name='data_set_id'),
  // 授权token
  token?: string(name='token'),
  // token授权场景码
  sceneCode?: string(name='scene_code'),
}

model QueryApplicationUnifiedentranceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 具体返回，map json
  data?: string(name='data'),
}

/**
 * Description: 数据应用统一入口
 * Summary: 数据应用统一入口
 */
async function queryApplicationUnifiedentrance(request: QueryApplicationUnifiedentranceRequest): QueryApplicationUnifiedentranceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApplicationUnifiedentranceEx(request, headers, runtime);
}

/**
 * Description: 数据应用统一入口
 * Summary: 数据应用统一入口
 */
async function queryApplicationUnifiedentranceEx(request: QueryApplicationUnifiedentranceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApplicationUnifiedentranceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.application.unifiedentrance.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApplicationDriverlicensecertRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据集id，开发者提供
  dataSetId: string(name='data_set_id'),
  // 是否授权
  userAuthed: boolean(name='user_authed'),
  // 授权协议索引
  fileIndex: string(name='file_index'),
  // 身份证号
  userCertNo: string(name='user_cert_no'),
  // 姓名
  userName: string(name='user_name'),
}

model QueryApplicationDriverlicensecertResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 驾驶证信息
  driverLicenseInfo?: DriverLicenseInfo(name='driver_license_info'),
  // 身份证与姓名是否一致，字典
  certResult?: string(name='cert_result'),
}

/**
 * Description: 根据姓名和身份证，返回驾驶证核验信息
 * Summary: 驾驶证核验信息查询
 */
async function queryApplicationDriverlicensecert(request: QueryApplicationDriverlicensecertRequest): QueryApplicationDriverlicensecertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApplicationDriverlicensecertEx(request, headers, runtime);
}

/**
 * Description: 根据姓名和身份证，返回驾驶证核验信息
 * Summary: 驾驶证核验信息查询
 */
async function queryApplicationDriverlicensecertEx(request: QueryApplicationDriverlicensecertRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApplicationDriverlicensecertResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.application.driverlicensecert.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApplicationVehiclelicensecertRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据集id，开发者提供
  dataSetId: string(name='data_set_id'),
  // 是否授权
  userAuthed: boolean(name='user_authed'),
  // 授权协议索引
  fileIndex: string(name='file_index'),
  // 车牌号
  plateNumber: string(name='plate_number'),
  // 号牌种类，枚举
  plateType: string(name='plate_type'),
  // 所有人姓名
  owner: string(name='owner'),
}

model QueryApplicationVehiclelicensecertResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 行驶证信息
  vehicleLicenseInfo?: VehicleLicenseInfo(name='vehicle_license_info'),
  // 行驶证核验结果
  vehicleLicenseCertResult?: VehicleLicenseCertResult(name='vehicle_license_cert_result'),
}

/**
 * Description: 根据车牌号所有人等信息，返回行驶证核验结果
 * Summary: 行驶证核验信息查询
 */
async function queryApplicationVehiclelicensecert(request: QueryApplicationVehiclelicensecertRequest): QueryApplicationVehiclelicensecertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApplicationVehiclelicensecertEx(request, headers, runtime);
}

/**
 * Description: 根据车牌号所有人等信息，返回行驶证核验结果
 * Summary: 行驶证核验信息查询
 */
async function queryApplicationVehiclelicensecertEx(request: QueryApplicationVehiclelicensecertRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApplicationVehiclelicensecertResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.application.vehiclelicensecert.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryApplicationEducationstatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 需求ID
  dataSetId: string(name='data_set_id'),
  // 用户是否已经授权
  userAuthed: boolean(name='user_authed'),
  // 授权文件索引
  fileIndex: string(name='file_index'),
  // 姓名
  userName: string(name='user_name'),
  // 身份证号
  userCertNo: string(name='user_cert_no'),
}

model QueryApplicationEducationstatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 学籍信息
  data?: [ EducationStatus ](name='data'),
}

/**
 * Description: 根据姓名身份证信息查询学籍信息
 * Summary: 根据姓名身份证信息查询学籍
 */
async function queryApplicationEducationstatus(request: QueryApplicationEducationstatusRequest): QueryApplicationEducationstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryApplicationEducationstatusEx(request, headers, runtime);
}

/**
 * Description: 根据姓名身份证信息查询学籍信息
 * Summary: 根据姓名身份证信息查询学籍
 */
async function queryApplicationEducationstatusEx(request: QueryApplicationEducationstatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryApplicationEducationstatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.application.educationstatus.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UploadServiceAuthfileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 待获取数据类型的服务id
  serviceId: string(name='service_id'),
  // 文件md5
  fileMd5: string(name='file_md5'),
  // 文件id
  fileObject?: readable(description='待上传文件', ignore='true'),
  fileObjectName?: string(description='待上传文件名', ignore='true'),
  fileId: string(name='file_id'),
  // 协议名称
  fileName: string(name='file_name'),
  // 授权协议文件版本号
  fileVersion: string(name='file_version'),
}

model UploadServiceAuthfileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 授权协议索引号
  fileIndex?: string(name='file_index'),
}

/**
 * Description: 数据服务授权文件上传
 * Summary: 数据服务授权文件上传
 */
async function uploadServiceAuthfile(request: UploadServiceAuthfileRequest): UploadServiceAuthfileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return uploadServiceAuthfileEx(request, headers, runtime);
}

/**
 * Description: 数据服务授权文件上传
 * Summary: 数据服务授权文件上传
 */
async function uploadServiceAuthfileEx(request: UploadServiceAuthfileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadServiceAuthfileResponse {
  if (!Util.isUnset(request.fileObject)) {
    var uploadReq = new CreateAntcloudGatewayxFileUploadRequest{
      authToken = request.authToken,
      apiCode = 'antchain.das.service.authfile.upload',
      fileName = request.fileObjectName,
    };
    var uploadResp = createAntcloudGatewayxFileUploadEx(uploadReq, headers, runtime);
    if (!AntchainUtil.isSuccess(uploadResp.resultCode, "ok")) {
      var uploadServiceAuthfileResponse = new UploadServiceAuthfileResponse{
        reqMsgId = uploadResp.reqMsgId,
        resultCode = uploadResp.resultCode,
        resultMsg = uploadResp.resultMsg,
      };
      return uploadServiceAuthfileResponse;
    }
    var uploadHeaders = AntchainUtil.parseUploadHeaders(uploadResp.uploadHeaders);
    AntchainUtil.putObject(request.fileObject, uploadHeaders, uploadResp.uploadUrl);
    request.fileId = uploadResp.fileId;
    request.fileObject = null;
  }
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.service.authfile.upload', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDomestictrademarkExtensioninfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据集ID
  dataSetId: string(name='data_set_id'),
  // 商标唯一标识号
  tid: string(name='tid'),
}

model QueryDomestictrademarkExtensioninfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 商标扩展商品与服务信息
  data?: [ DomesticTmGoodsInfo ](name='data'),
}

/**
 * Description: 查询国内商标扩展信息
 * Summary: 查询国内商标扩展信息
 */
async function queryDomestictrademarkExtensioninfo(request: QueryDomestictrademarkExtensioninfoRequest): QueryDomestictrademarkExtensioninfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDomestictrademarkExtensioninfoEx(request, headers, runtime);
}

/**
 * Description: 查询国内商标扩展信息
 * Summary: 查询国内商标扩展信息
 */
async function queryDomestictrademarkExtensioninfoEx(request: QueryDomestictrademarkExtensioninfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDomestictrademarkExtensioninfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.domestictrademark.extensioninfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetApplicationFileentranceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据集ID
  dataSetId: string(name='data_set_id'),
  // 用户是否授权
  userAuthed?: boolean(name='user_authed'),
  // 授权文件ID
  fileIndex?: string(name='file_index'),
}

model GetApplicationFileentranceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 临时下载地址
  url?: string(name='url'),
}

/**
 * Description: 文件类型数据服务统一接口
 * Summary: 文件类型服务统一接口
 */
async function getApplicationFileentrance(request: GetApplicationFileentranceRequest): GetApplicationFileentranceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getApplicationFileentranceEx(request, headers, runtime);
}

/**
 * Description: 文件类型数据服务统一接口
 * Summary: 文件类型服务统一接口
 */
async function getApplicationFileentranceEx(request: GetApplicationFileentranceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetApplicationFileentranceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.application.fileentrance.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitUnifiedentranceAsyncRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权协议索引
  fileIndex?: string(name='file_index'),
  // 整个需求的入参，map json
  params: string(name='params'),
  // 是否授权
  userAuthed?: string(name='user_authed'),
  // 数据集服务id
  dataSetId: string(name='data_set_id'),
}

model InitUnifiedentranceAsyncResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 具体返回，map json
  data?: string(name='data'),
}

/**
 * Description: 万文
 * Summary: 异步入口--获取流水号
 */
async function initUnifiedentranceAsync(request: InitUnifiedentranceAsyncRequest): InitUnifiedentranceAsyncResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initUnifiedentranceAsyncEx(request, headers, runtime);
}

/**
 * Description: 万文
 * Summary: 异步入口--获取流水号
 */
async function initUnifiedentranceAsyncEx(request: InitUnifiedentranceAsyncRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitUnifiedentranceAsyncResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.unifiedentrance.async.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryUnifiedentranceAsyncRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 整个需求的入参，map json
  params: string(name='params'),
  // 数据集服务id
  dataSetId: string(name='data_set_id'),
}

model QueryUnifiedentranceAsyncResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 具体返回，map json
  // 
  data?: string(name='data'),
}

/**
 * Description: 获取异步结果
 * Summary: 获取异步结果
 */
async function queryUnifiedentranceAsync(request: QueryUnifiedentranceAsyncRequest): QueryUnifiedentranceAsyncResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryUnifiedentranceAsyncEx(request, headers, runtime);
}

/**
 * Description: 获取异步结果
 * Summary: 获取异步结果
 */
async function queryUnifiedentranceAsyncEx(request: QueryUnifiedentranceAsyncRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUnifiedentranceAsyncResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.unifiedentrance.async.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryMainsiteUnifiedentranceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权协议索引
  fileIndex?: string(name='file_index'),
  // 整个需求的入参，map json
  params: string(name='params'),
  // 是否授权
  userAuthed?: boolean(name='user_authed'),
  // 数据集服务id
  dataSetId: string(name='data_set_id'),
  // 	
  // 授权token
  token?: string(name='token'),
  // token授权场景码
  sceneCode?: string(name='scene_code'),
  // 实际调用的租户ID
  tenantId: string(name='tenant_id'),
}

model QueryMainsiteUnifiedentranceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 具体返回，map json
  data?: string(name='data'),
}

/**
 * Description: 数据应用统一入口，主站调用
 * Summary: 数据应用统一入口，主站调用
 */
async function queryMainsiteUnifiedentrance(request: QueryMainsiteUnifiedentranceRequest): QueryMainsiteUnifiedentranceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryMainsiteUnifiedentranceEx(request, headers, runtime);
}

/**
 * Description: 数据应用统一入口，主站调用
 * Summary: 数据应用统一入口，主站调用
 */
async function queryMainsiteUnifiedentranceEx(request: QueryMainsiteUnifiedentranceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryMainsiteUnifiedentranceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.mainsite.unifiedentrance.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetApplicationProxysignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 代签名相关参数
  signParams: string(name='sign_params'),
  // 对应的服务id
  dataSetId?: string(name='data_set_id'),
}

model GetApplicationProxysignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 代客签名结果
  sign?: string(name='sign'),
  // 扩展字段
  ext?: string(name='ext'),
}

/**
 * Description: 代客签名
 * Summary: 代客签名
 */
async function getApplicationProxysign(request: GetApplicationProxysignRequest): GetApplicationProxysignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getApplicationProxysignEx(request, headers, runtime);
}

/**
 * Description: 代客签名
 * Summary: 代客签名
 */
async function getApplicationProxysignEx(request: GetApplicationProxysignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetApplicationProxysignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.application.proxysign.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDasLinkRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 被授权人接入应用biz_uuid
  beAuthedPersonAppBizUuid: string(name='be_authed_person_app_biz_uuid'),
}

model GetDasLinkResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // H5应用身份认证信息
  token?: string(name='token'),
  // 带有token 信息的H5页面链接
  link?: string(name='link'),
}

/**
 * Description: 获取授权H5页面链接
 * Summary: 获取授权H5页面链接
 */
async function getDasLink(request: GetDasLinkRequest): GetDasLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDasLinkEx(request, headers, runtime);
}

/**
 * Description: 获取授权H5页面链接
 * Summary: 获取授权H5页面链接
 */
async function getDasLinkEx(request: GetDasLinkRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDasLinkResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.link.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDasEnterprisevcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权实例biz_uuid
  authInstanceBizUuid: string(name='auth_instance_biz_uuid'),
  // 授权企业信息
  authPersonEnterpriseInfo: AuthPersonEnterpriseInfo(name='auth_person_enterprise_info'),
}

model GetDasEnterprisevcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // VC 内容
  vc?: string(name='vc'),
}

/**
 * Description: 获取授权企业VC
 * Summary: 获取授权企业VC
 */
async function getDasEnterprisevc(request: GetDasEnterprisevcRequest): GetDasEnterprisevcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDasEnterprisevcEx(request, headers, runtime);
}

/**
 * Description: 获取授权企业VC
 * Summary: 获取授权企业VC
 */
async function getDasEnterprisevcEx(request: GetDasEnterprisevcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDasEnterprisevcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.enterprisevc.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetDasIndividualvcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权实例biz_uuid
  authInstanceBizUuid: string(name='auth_instance_biz_uuid'),
  // 授权人个人信息
  authedPersonIndividualInfo: AuthPersonIndividualInfo(name='authed_person_individual_info'),
}

model GetDasIndividualvcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // VC
  vc?: string(name='vc'),
}

/**
 * Description: 获取个人VC
 * Summary: 获取个人VC
 */
async function getDasIndividualvc(request: GetDasIndividualvcRequest): GetDasIndividualvcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getDasIndividualvcEx(request, headers, runtime);
}

/**
 * Description: 获取个人VC
 * Summary: 获取个人VC
 */
async function getDasIndividualvcEx(request: GetDasIndividualvcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDasIndividualvcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.individualvc.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendDasSmsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 接收方电话号码
  receivePhoneNum: long(name='receive_phone_num'),
  // 授权实例biz_uuid
  authInstanceBizUuid: string(name='auth_instance_biz_uuid'),
}

model SendDasSmsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 发送短信验证码
 * Summary: 发送短信验证码
 */
async function sendDasSms(request: SendDasSmsRequest): SendDasSmsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendDasSmsEx(request, headers, runtime);
}

/**
 * Description: 发送短信验证码
 * Summary: 发送短信验证码
 */
async function sendDasSmsEx(request: SendDasSmsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendDasSmsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.sms.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AuthDasSmsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 手机验证码
  verificationCode: string(name='verification_code'),
  // 授权实例biz_uuid
  authInstanceBizUuid: string(name='auth_instance_biz_uuid'),
  // 授权企业信息
  authPersonEnterpriseInfo?: AuthPersonEnterpriseInfo(name='auth_person_enterprise_info'),
  // 授权人个人信息
  authPersonIndividualInfo?: AuthPersonIndividualInfo(name='auth_person_individual_info'),
}

model AuthDasSmsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 授权状态
  authStatus?: string(name='auth_status'),
  // VC
  vc?: string(name='vc'),
}

/**
 * Description: 通过短信验证码授权
 * Summary: 通过短信验证码授权
 */
async function authDasSms(request: AuthDasSmsRequest): AuthDasSmsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return authDasSmsEx(request, headers, runtime);
}

/**
 * Description: 通过短信验证码授权
 * Summary: 通过短信验证码授权
 */
async function authDasSmsEx(request: AuthDasSmsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AuthDasSmsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.sms.auth', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyDasEnterpriseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 被授权企业接入应用ID
  authInstanceBizUuid: string(name='auth_instance_biz_uuid'),
  // VC完整内容
  vc: string(name='vc'),
  // 被授权企业信息
  beAuthedPersonInfo: BeAuthedPersonInfo(name='be_authed_person_info'),
  // 授权人企业信息
  authPersonEnterpriseInfo: AuthPersonEnterpriseInfo(name='auth_person_enterprise_info'),
  // 需要访问的数据源信息列表
  dataSourceInfo: [ DataSource ](name='data_source_info'),
}

model VerifyDasEnterpriseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 核验结果
  success?: boolean(name='success'),
  // 核验失败原因
  failedReason?: string(name='failed_reason'),
}

/**
 * Description: 根据VC针对提供的授权企业、被授权企业、授权数据做核验。
 * Summary: 企业信息核验
 */
async function verifyDasEnterprise(request: VerifyDasEnterpriseRequest): VerifyDasEnterpriseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyDasEnterpriseEx(request, headers, runtime);
}

/**
 * Description: 根据VC针对提供的授权企业、被授权企业、授权数据做核验。
 * Summary: 企业信息核验
 */
async function verifyDasEnterpriseEx(request: VerifyDasEnterpriseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyDasEnterpriseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.enterprise.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyDasIndividualRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权实例biz_uuid
  authInstanceBizUuid: string(name='auth_instance_biz_uuid'),
  // VC完整内容
  vc: string(name='vc'),
  // 被授权企业信息
  beAuthedPersonInfo: BeAuthedPersonInfo(name='be_authed_person_info'),
  // 授权人个人信息
  authPersonIndividualInfo: AuthPersonIndividualInfo(name='auth_person_individual_info'),
  // 需要访问的数据源信息列表
  dataSourceInfo: [ DataSource ](name='data_source_info'),
}

model VerifyDasIndividualResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 核验结果
  success?: boolean(name='success'),
  // 核验失败原因
  failedReason?: string(name='failed_reason'),
}

/**
 * Description: 个人信息核验
 * Summary: 个人信息核验
 */
async function verifyDasIndividual(request: VerifyDasIndividualRequest): VerifyDasIndividualResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyDasIndividualEx(request, headers, runtime);
}

/**
 * Description: 个人信息核验
 * Summary: 个人信息核验
 */
async function verifyDasIndividualEx(request: VerifyDasIndividualRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyDasIndividualResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.individual.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateDasDatasourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据源名称
  name: string(maxLength=20, name='name'),
  // 数据源提供方
  provider: string(maxLength=30, name='provider'),
  // 枚举值：ENTERPRISE、INDIVIDUAL
  dataOwnerType: string(name='data_owner_type'),
  // 数据源接口定义
  dataSourceInterface: DataSourceInterface(name='data_source_interface'),
}

model CreateDasDatasourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据源 biz_uuid
  bizUuid?: string(name='biz_uuid'),
}

/**
 * Description: 创建数据源
 * Summary: 创建数据源
 */
async function createDasDatasource(request: CreateDasDatasourceRequest): CreateDasDatasourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createDasDatasourceEx(request, headers, runtime);
}

/**
 * Description: 创建数据源
 * Summary: 创建数据源
 */
async function createDasDatasourceEx(request: CreateDasDatasourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDasDatasourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.datasource.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateDasDatasourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 要修改的数据源biz_uuid
  bizUuid: string(name='biz_uuid'),
  // 数据源名称
  name: string(maxLength=20, name='name'),
  // 数据源提供方
  provider: string(maxLength=30, name='provider'),
  // 枚举值：ENTERPRISE、INDIVIDUAL
  dataOwnerType: string(name='data_owner_type'),
  // 数据源接口定义
  dataSourceInterface: DataSourceInterface(name='data_source_interface'),
}

model UpdateDasDatasourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新数据源
 * Summary: 更新数据源
 */
async function updateDasDatasource(request: UpdateDasDatasourceRequest): UpdateDasDatasourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateDasDatasourceEx(request, headers, runtime);
}

/**
 * Description: 更新数据源
 * Summary: 更新数据源
 */
async function updateDasDatasourceEx(request: UpdateDasDatasourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDasDatasourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.datasource.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteDasDatasourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 要删除的数据源biz_uuid
  bizUuid: string(name='biz_uuid'),
}

model DeleteDasDatasourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除数据源
 * Summary: 删除数据源
 */
async function deleteDasDatasource(request: DeleteDasDatasourceRequest): DeleteDasDatasourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteDasDatasourceEx(request, headers, runtime);
}

/**
 * Description: 删除数据源
 * Summary: 删除数据源
 */
async function deleteDasDatasourceEx(request: DeleteDasDatasourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDasDatasourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.datasource.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryDasDatasourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据源名称
  name: string(maxLength=20, name='name'),
  // 数据源提供方
  provider?: string(maxLength=30, name='provider'),
  // 枚举值：ENTERPRISE、INDIVIDUAL
  dataOwnerType?: string(name='data_owner_type'),
  // 数据源接口访问地址
  address?: string(maxLength=100, name='address'),
}

model QueryDasDatasourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 数据源信息列表
  dataSources?: [ DataSourceInfo ](name='data_sources'),
}

/**
 * Description: 查询数据源信息
 * Summary: 查询数据源信息
 */
async function queryDasDatasource(request: QueryDasDatasourceRequest): QueryDasDatasourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryDasDatasourceEx(request, headers, runtime);
}

/**
 * Description: 查询数据源信息
 * Summary: 查询数据源信息
 */
async function queryDasDatasourceEx(request: QueryDasDatasourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryDasDatasourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.datasource.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyDasAuthresultRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据源biz_uuid列表
  dataSourceBizUuids: [ string ](name='data_source_biz_uuids'),
  // 被授权企业接入应用名称
  beAuthedPersonAppName: string(name='be_authed_person_app_name'),
  // 授权企业统一社会信用码
  authPersonEnterpriseCreditNum: string(name='auth_person_enterprise_credit_num'),
}

model VerifyDasAuthresultResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 授权状态: 未授权，已授权
  authStatus?: string(name='auth_status'),
}

/**
 * Description: 校验授权结果
 * Summary: 校验授权结果
 */
async function verifyDasAuthresult(request: VerifyDasAuthresultRequest): VerifyDasAuthresultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyDasAuthresultEx(request, headers, runtime);
}

/**
 * Description: 校验授权结果
 * Summary: 校验授权结果
 */
async function verifyDasAuthresultEx(request: VerifyDasAuthresultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyDasAuthresultResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.authresult.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AuthDasAuthresultRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 数据源biz_uuid列表
  dataSourceBizUuids: [ string ](name='data_source_biz_uuids'),
  // 被授权企业接入应用名称
  beAuthedPersonAppName: string(name='be_authed_person_app_name'),
  // 授权企业信息
  authPersonEnterpriseInfo?: AuthPersonEnterpriseInfo(name='auth_person_enterprise_info'),
  // 授权人信息
  authPersonIndividualInfo?: AuthPersonIndividualInfo(name='auth_person_individual_info'),
}

model AuthDasAuthresultResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 授权实例biz_uuid
  authInstanceBizUuid?: string(name='auth_instance_biz_uuid'),
  // 授权详情biz_uuid
  authResultBizUuid?: string(name='auth_result_biz_uuid'),
  // VC 完整信息
  vc?: string(name='vc'),
}

/**
 * Description: 根据授权三方信息做授权
 * Summary: 根据授权三方信息做授权
 */
async function authDasAuthresult(request: AuthDasAuthresultRequest): AuthDasAuthresultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return authDasAuthresultEx(request, headers, runtime);
}

/**
 * Description: 根据授权三方信息做授权
 * Summary: 根据授权三方信息做授权
 */
async function authDasAuthresultEx(request: AuthDasAuthresultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AuthDasAuthresultResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antchain.das.das.authresult.auth', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateAntcloudGatewayxFileUploadRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  // 上传文件作用的openapi method
  apiCode: string(name='api_code'),
  // 文件标签，多个标签;分割
  fileLabel?: string(maxLength=100, name='file_label'),
  // 自定义的文件元数据
  fileMetadata?: string(maxLength=1000, name='file_metadata'),
  // 文件名，不传则随机生成文件名
  fileName?: string(maxLength=100, name='file_name'),
  // 文件的多媒体类型
  mimeType?: string(name='mime_type'),
  // 产品方的api归属集群，即productInstanceId
  apiCluster?: string(name='api_cluster'),
}

model CreateAntcloudGatewayxFileUploadResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 上传有效期
  expiredTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='expired_time'),
  // 32位文件唯一id
  fileId?: string(name='file_id'),
  // 放入http请求头里
  uploadHeaders?: [ XNameValuePair ](name='upload_headers'),
  // 文件上传地址
  uploadUrl?: string(name='upload_url'),
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUpload(request: CreateAntcloudGatewayxFileUploadRequest): CreateAntcloudGatewayxFileUploadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createAntcloudGatewayxFileUploadEx(request, headers, runtime);
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUploadEx(request: CreateAntcloudGatewayxFileUploadRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAntcloudGatewayxFileUploadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.gatewayx.file.upload.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

