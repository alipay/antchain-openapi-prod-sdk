import AntchainUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string
type @maxIdleTimeMillis = number
type @keepAliveDurationMillis = number
type @maxRequests = number
type @maxRequestsPerHost = number

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
  maxIdleTimeMillis?: number(description='长链接最大空闲时长',default='60 * 1000L'),
  keepAliveDurationMillis?: number(description='长链接最大连接时长',default='5000'),
  maxRequests?: number(description='最大连接数（长链接最大总数）',default='100'),
  maxRequestsPerHost?: number(description='每个目标主机的最大连接数（分主机域名的长链接最大总数',default='100'),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = Util.defaultNumber(config.readTimeout, 20000);
  @connectTimeout = Util.defaultNumber(config.connectTimeout, 20000);
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = Util.defaultNumber(config.maxIdleConns, 60000);
  @maxIdleTimeMillis = Util.defaultNumber(config.maxIdleTimeMillis, 5);
  @keepAliveDurationMillis = Util.defaultNumber(config.keepAliveDurationMillis, 5000);
  @maxRequests = Util.defaultNumber(config.maxRequests, 100);
  @maxRequestsPerHost = Util.defaultNumber(config.maxRequestsPerHost, 100);
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, headers: map[string]string, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AntchainUtil.getTimestamp(),
    req_msg_id = AntchainUtil.getNonce(),
    access_key = @accessKeyId,
    base_sdk_version = 'TeaSDK-2.0',
    sdk_version = '1.7.12',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = Util.defaultString(@endpoint, 'twc-openapi.antchain.antgroup.com'),
    user-agent = Util.getUserAgent(@userAgent),
    ...headers
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AntchainUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var raw = Util.readAsString(__response.body);
  var obj = Util.parseJSON(raw);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AntchainUtil.hasError(raw, @accessKeySecret)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  maxIdleTimeMillis = @maxIdleTimeMillis,
  keepAliveDurationMillis = @keepAliveDurationMillis,
  maxRequests = @maxRequests,
  maxRequestsPerHost = @maxRequestsPerHost,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

// 订单商品信息
model OrderItem {
  // 产品名称
  productName: string(name='product_name', example='戴尔电脑'),
  // 商品品牌
  commodityBrand: string(name='commodity_brand', example='戴尔'),
  // 商品版本
  commodityVersion: string(name='commodity_version', example='戴尔成就3681'),
  // 商品规格
  commoditySpecification: string(name='commodity_specification', example='英特尔酷睿i3'),
  // 商品颜色
  commodityColor?: string(name='commodity_color', example='黑色'),
  // 商品详情
  commodityDetails?: string(name='commodity_details', example='戴尔电脑'),
  // 商品官方价格
  commodityOfficialPrice: string(name='commodity_official_price', example='6666.00'),
  // 租赁物数量
  leaseNumber: long(name='lease_number', example='10'),
}

// 租赁分期信息
model RentalStagingInformation {
  // 分期期数
  installmentsNumber: long(name='installments_number', example='10'),
  // 租金每期应还款时间
  paymentTimeEachCycle: string(name='payment_time_each_cycle', example='2021-05-31'),
  // 租金每期应还款额
  paymentEachCycle: string(name='payment_each_cycle', example='123.00'),
}

// 文件key和文件名称
model FileInfo {
  // 文件key
  fileKey: string(name='file_key', example='4293ed08-3576-4f35-a65d-0d63ae8c0e8b.jpg'),
  // 文件名称
  fileName: string(name='file_name', example='userInfo.jpg'),
}

// 租赁分期履约信息
model RentalInstallmentPerformance {
  // 被申请人还款期数
  repaymentPeriod: long(name='repayment_period', example='10'),
  // 被申请人第几期租金支付方式
  rentPaymentType: string(name='rent_payment_type', example='支付宝'),
  // 被申请人第几期还款时间
  appliedRepaymentTime: string(name='applied_repayment_time', example='2021-05-07'),
  // 被申请人第几期还款金额
  appliedRepaymentAmount: string(name='applied_repayment_amount', example='123.00'),
}

// 承诺信息
model CommitmentInfo {
  // 租金总额
  totalRent: string(name='total_rent', example='7890.00'),
  // 租赁分期信息
  rentalStagingInformation: [ RentalStagingInformation ](name='rental_staging_information', example=''),
}

// 答辩人为自然人对象
model NaturalPerson {
  // 自然人姓名
  name: string(name='name', example='李四'),
  // 自然人手机号码
  mobileNumber: string(name='mobile_number', example='13821323232'),
  // 自然人身份号码
  idNumber: string(name='id_number', example='412702199812252774'),
  // 自然人民族
  nation?: string(name='nation', example='汉'),
  // 自然人身份地址
  address?: string(name='address', example='北京市朝阳区XX地址'),
  // 自然人电子邮箱
  email?: string(name='email', example='323232321@alibba-inc.com'),
  // 自然人身份证正反面照片
  // 文件信息 列表（先调用接口获取上传url和fileKey）
  idNumberFile?: [ FileInfo ](name='id_number_file', example=''),
}

// 当被申请人为法人
model LegalPerson {
  // 被申请人姓名
  name: string(name='name', example='李四'),
  // 法人统一社会信用编码
  idNumber: string(name='id_number', example='412702199812252774'),
  // 法定代表人姓名
  representativeName?: string(name='representative_name', example='李四'),
  // 联系方式
  legalPhoneNumber?: string(name='legal_phone_number', example='13812123232'),
  // 住所地（同营业执照地址）
  legalAddress?: string(name='legal_address', example='北京市朝阳区XX地址'),
  // 企业经营地址
  legalBusinessAddress?: string(name='legal_business_address', example='北京市朝阳区XX地址'),
  // 营业执照照片
  // 文件信息列表（先调用接口获取上传url和fileKey）
  legalIdNumberFile?: [ FileInfo ](name='legal_id_number_file', example=''),
}

// 订单信息
model OrderInfo {
  // 出租方平台名称
  lessorPlatformName: string(name='lessor_platform_name', example='租赁宝'),
  // 订单号
  orderNumber: string(name='order_number', example='232278957595482'),
  // 合同编号
  contractNo: string(name='contract_no', example='232278957595482'),
  // 合同名称
  contractName: string(name='contract_name', example='租赁宝合同'),
  // 订单商品信息
  orderItems: [ OrderItem ](name='order_items', example=''),
  // 设备及配件总价
  totalDevicePrice: string(name='total_device_price', example='123.00'),
  // 押金金额
  depositAmount: string(name='deposit_amount', example='123.00'),
  // 免押金额
  freeDeposit: string(name='free_deposit', example='1123.00'),
  // 签约时间
  signingTime: string(name='signing_time', example='2021-05-07 17:13:50'),
  // 租期起始时间
  leaseStartTime: string(name='lease_start_time', example='2021-05-07 17:13:50'),
  // 租期结束时间
  leaseEndTime: string(name='lease_end_time', example='2021-05-07 17:13:50'),
  // 买断金额计算公式
  buyoutAmountFormulaCalc: string(name='buyout_amount_formula_calc', example='到期转售买断款+未还租金-实付押金'),
  // 首付款
  payInAdvance: string(name='pay_in_advance', example='123.00'),
}

// 履约信息
model PerformanceInfo {
  // 支付租金总额
  rentPayTotal: string(name='rent_pay_total', example='10000.00'),
  // 买断金额
  buyoutAmount: string(name='buyout_amount', example='10000.00'),
  // 租赁分期履约信息
  rentalInstallmentPerformance?: [ RentalInstallmentPerformance ](name='rental_installment_performance', example=''),
}

// 物流信息
model LogisticsInfo {
  // 发货时间
  deliveryTime: string(name='delivery_time', example='2021-05-07'),
  // 快递物流公司
  expressLogisticsCompany: string(name='express_logistics_company', example='圆通速递'),
  // 快递单号
  courierNumber: string(name='courier_number', example='127974979371979'),
  // 签收时间
  signTime: string(name='sign_time', example='2021-06-01'),
}

// 自动进件履约信息
model LeasePerformanceInfo {
  // 支付租金总额
  rentPayTotal: string(name='rent_pay_total', example='123.00'),
  // 买断金额
  buyoutAmount?: string(name='buyout_amount', example='123.00'),
  // 租赁分期履约信息
  rentalInstallmentPerformance?: [ RentalInstallmentPerformance ](name='rental_installment_performance', example=''),
}

// 自动进件订单信息
model LeaseOrderInfo {
  // 出租方平台名称
  lessorPlatformName?: string(name='lessor_platform_name', example='租赁宝'),
  // 订单号
  orderNumber: string(name='order_number', example='232278957595482'),
  // 合同编号
  contractNo?: string(name='contract_no', example='232278957595482'),
  // 合同名称
  contractName?: string(name='contract_name', example='租赁合同'),
  // 订单商品信息列表
  orderItems: [ OrderItem ](name='order_items', example=''),
  // 设备及配件总价（单位元）
  totalDevicePrice: string(name='total_device_price', example='123.00'),
  // 押金金额（单位元）
  depositAmount?: string(name='deposit_amount', example='123.00'),
  // 免押金额
  freeDeposit?: string(name='free_deposit', example='123.00'),
  // 签约时间
  signTime?: string(name='sign_time', example='2021-05-31'),
  // 租期起始时间
  leaseStartTime?: string(name='lease_start_time', example='2021-06-01'),
  // 租期结束时间
  leaseEndTime?: string(name='lease_end_time', example='2022-06-01'),
  // 买断金额计算公式
  buyoutAmountFormulaCalc?: string(name='buyout_amount_formula_calc', example='商品官方价-已还租金-实付押金-首付款'),
  // 首付款（单位元）
  payInAdvance?: string(name='pay_in_advance', example='1123.00'),
}

// 签字人
model ContractFlowSigner {
  // 签署顺序
  signOrder?: long(name='sign_order', example='1'),
  // 签署状态, 0-待签, 1-未签, 2-已签 3-待审批 4-拒签
  signStatus?: long(name='sign_status', example='1'),
  // 签署人账号id
  signerAccountId?: string(name='signer_account_id', example='24c93459216945468fdf1d899c521910'),
  // 签署人名称
  signerName?: string(name='signer_name', example='孙中'),
  // 签署人是否已实名
  signerRealName?: boolean(name='signer_real_name', example='true, false'),
  // 签约主体的账号id（个人/企业）；如签署人本签署，则返回签署人账号id；如签署人代机构签署，则返回机构账号id
  signerAuthorizedAccountId?: string(name='signer_authorized_account_id', example='2c7de24aff3340f5b944ebac49545b8e'),
  // 签约主体名称
  signerAuthorizedAccountName?: string(name='signer_authorized_account_name', example='深圳天谷信息科技有限公司'),
  // 签署主体是否已实名
  signerAuthorizedAccountRealName?: boolean(name='signer_authorized_account_real_name', example='true, false'),
  // 签署主体类型, 0-个人, 1-机构
  signerAuthorizedAccountType?: long(name='signer_authorized_account_type', example='1'),
  // 本次签署任务对应指定的第三方业务流水号id，当存在多个第三方业务流水号id时，返回多个，并逗号隔开
  thirdOrderNo?: string(name='third_order_no', example=' '),
}

// 共享项目，资产端的采购平台回传的订单商品信息
model SupplierOrderProductInfo {
  // 商品id
  productId: string(name='product_id', example='product_id_123'),
  // 商品采购单价，单位：毫厘
  productPrice: long(name='product_price', example='10000'),
  // 商品的sn信息
  snList: [ string ](name='sn_list', example='["sn1","sn2"]'),
}

// 个人信息
model PersonInfo {
  // 个人证件名称
  certName: string(name='cert_name', example='张三'),
  // 个人证件号码
  certNo: string(name='cert_no', example='512223********1245'),
  // 证件类型, 默认身份证 RESIDENT：居民身份证号，PASSPORT：护照，MILITARY：军官证
  certType?: string(name='cert_type', example='RESIDENT'),
}

// 答辩人对象
model PleaderObject {
  // 法人或自然人标识，法人为1，自然人为0
  partyType: long(name='party_type', example='0'),
  // 自然人信息
  // 当partyType=1必填
  naturalPerson?: NaturalPerson(name='natural_person', example=''),
  // 法人信息
  // 当partyType=0必填
  legalPerson?: LegalPerson(name='legal_person', example=''),
}

// 供应商对应的产品详细信息
model SupplierProductInfo {
  // 产品额外信息
  extraInfo?: string(name='extra_info', example='{}'),
  // 产品id
  productId: string(name='product_id', example='GS2020123'),
  // 电子商品唯一标识码
  productImeiId: string(name='product_imei_id', example='12323,123123,234234'),
  // 产品名称
  productName: string(maxLength=50, minLength=1, name='product_name', example='IPAD mini 2012'),
  // 采购产品的个数
  productNumber: long(name='product_number', example='1'),
  // 采购产品的价格，精确到毫厘，如12.34元表示为123400
  productPrice: long(name='product_price', example='10000'),
  // 产品版本
  supplierVersion?: string(name='supplier_version', example='0'),
}

// 可信存证身份识别信息
model Identity {
  // 经办人姓名，企业认证选填
  agent?: string(name='agent', example='小明'),
  // 经办人身份证，企业认证选填
  agentId?: string(name='agent_id', example='123123123123'),
  // 用户名称
  certName: string(name='cert_name', example='小王'),
  // 证件号
  certNo: string(name='cert_no', example='12332112312312'),
  // 证件类型，个人只支持身份证IDENTITY_CARD，企业支持UNIFIED_SOCIAL_CREDIT_CODE（统一社会信用代码）和ENTERPRISE_REGISTERED_NUMBER（企业工商注册号）
  certType: string(name='cert_type', example='IDENTITY_CARD'),
  // 法人姓名，企业认证必选
  legalPerson?: string(name='legal_person', example='小李'),
  // 法人身份证，企业认证必选
  legalPersonId?: string(name='legal_person_id', example='123123321123'),
  // 用户手机号码
  mobileNo?: string(name='mobile_no', example='1231231231'),
  // 扩展属性
  properties?: string(name='properties', example='{"key":"value"}'),
  // 用户类型，PERSON或者ENTERPRISE
  userType: string(name='user_type', example='PERSON'),
  // 经办人证件类型，企业认证选填
  agentCertType?: string(name='agent_cert_type', example='IDENTITY_CARD'),
  // 法人证件类型，企业认证必选
  legalPersonCertType?: string(name='legal_person_cert_type', example='IDENTITY_CARD'),
}

// 融资租赁订单额外信息
model LeaseOrderExtra {
  // 额外信息的主键
  key: string(name='key', example='"key"'),
  // 额外信息的值
  value: string(name='value', example='"value"'),
}

// 平台方自动签署区信息
model ContractPlatformSignField {
  // 是否添加签署时间戳，默认不添加，时间格式如"2019-03-11 10:12:12"
  addSignTime?: boolean(name='add_sign_time', example='true, false'),
  // 签署区顺序，默认1,且不小于1，顺序越小越先处理
  order?: long(name='order', example='1'),
  // 页码信息，当签署区signType为2时, 页码可以_-_分割, 其他情况只能是数字
  posPage: string(name='pos_page', example='1'),
  // x坐标转为字符串的值，默认空
  posX?: string(name='pos_x', example='158.72531'),
  // y坐标转为字符串的值
  posY: string(name='pos_y', example='431.05658'),
  // 印章id ，如不传，则采用账号下的默认印章
  sealId?: string(name='seal_id', example='bcd7ffd9-5caf-4342-bd1c-02257229ccd5'),
  // 第三方业务流水号id，保证相同签署人、相同签约主体、相同签署顺序的任务，对应的第三方业务流水id唯一，默认空
  thirdOrderNo?: string(name='third_order_no', example='someordernumber'),
  // 签署区宽，默认印章宽度
  width?: string(name='width', example='1'),
}

// 电子合同存证合同文档信息
model ContractNotaryDocumentInfo {
  // 签署完成的合同hash
  content: string(name='content', example='content'),
  // 签署人ID（支持多个，不同ID间用“,”分隔开）
  signatories: string(name='signatories', example='account_id_1,account_id_2'),
  // 存证结束时间，UNIX时间戳(毫秒)
  timestamp: string(name='timestamp', example='1589198173000'),
  // 存证凭据，仅在批量核验时需要填写
  txHash?: string(name='tx_hash', example='95a8201ad7362f9d224937cfb715b086ea1cf0d884f1c5b1f3ed092fddff1c92'),
  // 签署的文件ID
  fileId: string(name='file_id', example='6afb5aa2679c5284444698a9790099269'),
}

// 智能合同个人账号信息
model ContractAccount {
}

// 见证流程文档确认数据
model WitnessConfirmData {
  // 文档fileKey
  docFileKey?: string(name='doc_file_key', example=' '),
  // 文档摘要算法，SHA256
  hashAlgorithm: string(name='hash_algorithm', example='SHA256'),
  // 签署后文档摘要值
  signedHash: string(name='signed_hash', example='04181b49ee5d7eb0099a289ac8a45df6afb5aa2679c5284444698a9790099269'),
  // 第三方文档id
  thirdDocId: string(name='third_doc_id', example='someId'),
}

// 可信存证存证地点信息
model Location {
  // 所在城市
  city?: string(name='city', example='杭州'),
  // 使用设备的IMEI号
  imei?: string(name='imei', example='359426002899056'),
  // 使用设备的IMSI号
  imsi?: string(name='imsi', example='460001357924680'),
  // 使用设备的IP地址
  ip?: string(name='ip', example='0.0.0.0'),
  // 纬度
  latitude?: string(name='latitude', example='66.33'),
  // 经度
  longitude?: string(name='longitude', example='23.26'),
  // 使用设备的Wi-Fi物理地址
  macAddr?: string(name='mac_addr', example='00-01-6C-06-A6-29'),
  // 扩展属性
  properties?: string(name='properties', example='{"key":"value"}'),
}

// 电子合同存证代扣计划执行操作信息
model ContractNotaryDeductExecutionInfo {
  // 付款方的区块链合同签署账号
  payerId: string(name='payer_id', example='someId'),
  // 扣款金额，单位分
  amount: long(name='amount', example='100'),
  // 扣款渠道
  channel: string(name='channel', example='channel'),
  // 扣款操作是否成功
  result: boolean(name='result', example='true, false'),
  // 扣款操作发起时间
  timestamp: string(name='timestamp', example='1589198173000'),
  // 代扣计划ID
  order: string(name='order', example='04181b49ee5d7eb0099a289ac8a45df6afb5aa2679c5284444698a9790099269_1'),
}

// 创建电子合同签署盖章区时的申请信息
model ContractSignFieldApplication {
  // 是否添加签署时间戳，默认不添加，时间格式如"2019-03-11 10:12:12"
  addSignTime?: boolean(name='add_sign_time', example='true, false'),
  // 签约主体账号标识， 将使用该主体账号对应的数字证书完成本次签署，如：当存在签署操作人代某机构签署时，需要传入该机构的账号id
  authorizedAccountId: string(name='authorized_account_id', example='2c7de24aff3340f5b944ebac49545b8e'),
  // 电子合同文件ID
  fileId: string(name='file_id', example='fe7df2f477d649c18ebcfdfffeba253d'),
  // 签署区顺序，默认1,且不小于1，顺序越小越先处理
  order?: long(name='order', example='1'),
  // 页码信息：当签署区signType为2时, 页码可以_-_分割, 例如1到15页，填"1-15"； 其他情况只能是数字
  posPage: string(name='pos_page', example='1'),
  // x坐标转为字符串的值，默认空，页面签章必填，骑缝签章不填写
  posX?: string(name='pos_x', example='158.72531'),
  // y坐标转为字符串的值
  posY: string(name='pos_y', example='431.05658'),
  // 印章id ，如不传，则采用账号下的默认印章
  sealId?: string(name='seal_id', example='bcd7ffd9-5caf-4342-bd1c-02257229ccd5'),
  // 第三方业务流水号id，保证相同签署人、相同签约主体、相同签署顺序的任务，对应的第三方业务流水id唯一，默认空
  thirdOrderNo?: string(name='third_order_no', example='someordernumber'),
  // 签署区宽，默认印章宽度	
  width?: string(name='width', example='1'),
  // 签署类型，1-单页签署，2-骑缝签署，默认1
  signType?: long(name='sign_type', example=''),
}

// 融资租赁商品出租详细信息
model RentInfo {
  // 租金
  rentPrice: long(name='rent_price', example='2933300'),
  // 租期
  rentTerm: long(name='rent_term', example='12'),
  // 手续费
  commission: long(name='commission', example='1234'),
  // 买断价
  buyoutPrice: long(name='buyout_price', example='0'),
  // 留购价
  retainedPrice: long(name='retained_price', example='31903 '),
}

// 发起人对象
model ProposerObject {
  // 申请人姓名
  name: string(name='name', example='李四'),
  // 统一社会信用代码
  idNumber: string(name='id_number', example='412702199812252774'),
  // 联系电话
  phoneNumber?: string(name='phone_number', example='13821212121'),
  // 电子邮箱地址
  email?: string(name='email', example='323232321@alibba-inc.com'),
  // 经营地址
  businessAddress?: string(name='business_address', example='北京市朝阳区XX地址'),
  // 营业执照照片
  // 文件信息 列表
  idNumberFile?: [ FileInfo ](name='id_number_file', example=''),
  // 法定代表人姓名
  representativeName?: string(name='representative_name', example='李四'),
  // 法定代表人性别
  // 0: 男 1: 女
  representativeSex?: long(name='representative_sex', example='0'),
  // 法定代表人身份证号码
  representativeIdNumber?: string(name='representative_id_number', example='412702199812252774'),
  // 法定代表人手机号码
  representativeMobileNumber?: string(name='representative_mobile_number', example='1383312323'),
  // 法定代表人代表身份证明
  // 文件信息列表
  representativeIdNumberFile?: [ FileInfo ](name='representative_id_number_file', example=''),
  // 法定代表人职务
  representativePost?: string(name='representative_post', example='经理'),
  // 法定代表人职务证明
  // 文件信息列表
  representativePostFile?: [ FileInfo ](name='representative_post_file', example=''),
  // 签章管理员姓名
  signatureManagerName?: string(name='signature_manager_name', example='李四'),
  // 签章管理员身份证号码
  signatureManagerIdCard?: string(name='signature_manager_id_card', example='412702199812252774'),
  // 签章管理员手机号码
  signatureManagerPhone?: string(name='signature_manager_phone', example='13812123232'),
}

// 平台方经办人信息
model ContractPlatformAccountApplication {
  // 邮箱地址
  email?: string(name='email', example='xx@alipay.com'),
  // 证件号
  idNumber: string(name='id_number', example='311111111111111111'),
  // 证件类型
  idType: string(name='id_type', example='CRED_PSN_CH_IDCARD'),
  // 手机号码
  mobile?: string(name='mobile', example='15811111111'),
  // 姓名
  name: string(name='name', example='张三'),
  // 用户唯一标识，可传入第三方平台的个人用户id等
  userId: string(name='user_id', example='A001'),
}

// 融资租赁里的产品详细信息
model ProductInfo {
  // 是否需要创建did
  needDid?: boolean(name='need_did', example='true, false'),
  // 产品品牌，长度不超过50
  productBrand?: string(name='product_brand', example='大金'),
  // 产品Id，长度不超过50
  productId: string(name='product_id', example='productId'),
  // 唯一标识码，imeiID，长度不超过50
  productImeiId?: string(name='product_imei_id', example='sn_number'),
  // 产品规格型号，长度不超过255
  productModel?: string(name='product_model', example='LP3001'),
  // 产品名称，长度不超过50
  productName: string(name='product_name', example='大金空调'),
  // 产品数量
  productNumber: long(name='product_number', example='10'),
  // 产品采购含税价 精确到毫厘，即123400表示12.34元
  productPrice: long(name='product_price', example='123400'),
  // 供应商id
  supplierId?: string(name='supplier_id', example='supplierId'),
  // 供应商对应的产品版本，每个版本可以对应一个价格
  supplierVersion?: string(name='supplier_version', example='001'),
  // 额外字段
  extraInfo?: string(name='extra_info', example='{}'),
}

// 共享项目，资产端的采购平台回传的物流信息
model SupplierLogisticInfo {
  // 采购平台的物流单号
  logisticOrderId: string(name='logistic_order_id', example='SF1234567890'),
}

// 签署区详情
model ContractSignFieldDetail {
  // 签约主体类别，0-个人，1-机构，默认0,2 是不限
  actorIndentityType?: long(name='actor_indentity_type', example='1'),
  // 添加时间
  addTime?: long(name='add_time', example='1561473111450'),
  // 是否指定位置，TRUE表示不允许更新位置，配置项，无默认值
  assignedPosbean?: boolean(name='assigned_posbean', example='true, false'),
  // 是否指定印章数据，TRUE表示不允许更新印章，配置项，无默认值
  assignedSeal?: boolean(name='assigned_seal', example='true, false'),
  // 签约主体账号标识，将使用该主体账号对应的数字证书完成本次签署，如：当存在签署操作人代某机构签署时，需要传入该机构的账号id
  authorizedAccountId?: string(name='authorized_account_id', example='2c7de24aff3340f5b944ebac49545b8e'),
  // 是否自动执行，TRUE需要静默授权，配置项，无默认值
  autoExecute?: boolean(name='auto_execute', example='true, false'),
  // 执行失败原因
  executeFailedReason?: string(name='execute_failed_reason', example=' '),
  // 文件file id
  fileId?: string(name='file_id', example='fe7df2f477d649c18ebcfdfffeba253d'),
  // 流程id
  flowId?: string(name='flow_id', example='b2cb74258a634179b0df3cc54791c8b6'),
  // 签署区顺序，默认1,且不小于1，顺序越小越先处理
  order?: long(name='order', example='1'),
  // 页码信息，可以_,_或_-_分割
  posPage?: string(name='pos_page', example='1'),
  // x坐标
  posX?: string(name='pos_x', example='158.72531'),
  // y坐标
  posY?: string(name='pos_y', example='431.05658'),
  // 印章文件file key
  sealFileKey?: string(name='seal_file_key', example=' '),
  // 印章id
  sealId?: string(name='seal_id', example=' '),
  // 印章类型，支持多种类型时逗号分割，0-手绘印章，1-模版印章，为空不限制
  sealType?: string(name='seal_type', example=' '),
  // 签署操作人个人账号标识，即操作本次签署的个人，如需e签宝通知用户签署，则系统向该账号下绑定的手机、邮箱发送签署链接
  signerAccountId?: string(name='signer_account_id', example='faea8237c61a4fdea864ee8d7621e14f'),
  // 签署区Id
  signfieldId?: string(name='signfield_id', example='b76b69d5b48d4f689cae997e42809ac4'),
  // 签署类型，0-不限，1-单页签署，2-骑缝签署,4-关键字签署，默认1
  signType?: long(name='sign_type', example='0'),
  // 签署区状态（0："等待执行，1："执行中"，2："执行失败"，3："审批中"，4： "执行完成"）
  status?: long(name='status', example='1'),
  // 状态描述
  statusDescription?: string(name='status_description', example='执行中'),
  // 签署区宽
  width?: string(name='width', example=' '),
}

// 智能合同个人账户创建申请信息
model ContractAccountApplication {
  // 邮箱地址，默认空
  email?: string(name='email', example='xx@alipay.com'),
  // 证件号
  idNumber: string(name='id_number', example='311111111111111111'),
  // 目前仅支持CRED_PSN_CH_IDCARD，即身份证号码
  idType: string(name='id_type', example='CRED_PSN_CH_IDCARD'),
  // 手机号码，默认空
  mobile?: string(name='mobile', example='15811111111'),
  // 姓名
  name: string(name='name', example='张三'),
  // 用户唯一标识，可传入第三方平台的个人用户id等
  userId: string(name='user_id', example='A001'),
}

// 平台方企业信息
model ContractPlatformOrganizationApplication {
  // 证件号
  idNumber: string(name='id_number', example='12330100470104939U '),
  // 证件类型
  idType: string(name='id_type', example='CRED_ORG_USCC'),
  // 企业法人名称
  orgLegalName?: string(name='org_legal_name', example='测试法人'),
  // 企业法人证件号
  orgLegalIdNumber?: string(name='org_legal_id_number', example='311111111111111111'),
  // 机构名称
  name: string(name='name', example='测试企业'),
}

// 融资租赁中IOT设备详情
model LeaseIotItemInfo {
  // 证据的时间
  date: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='date', example='2018-10-10T10:10:00Z'),
  // 证据的txHash
  txHash: string(name='tx_hash', example='0xaaaaabbbbbcccc'),
  // 证据的原始数据，默认为空或加密状态，除非调用方为授权用户（如出资方等
  rawData: string(name='raw_data', example='""'),
}

// 供应商商品信息
model SupplierProductItem {
  // 供应商名称
  supplierName?: string(name='supplier_name', example='戴尔'),
  // 商品型号
  productModel: string(name='product_model', example='商品型号'),
  // 供应商id
  supplierId?: string(name='supplier_id', example='供应商id'),
  // 商品唯一id
  productId: string(name='product_id', example='2023423424'),
  // 3C
  mainClass: string(name='main_class', example='一级类目'),
  // 预计发货量
  estimatedShipment?: long(name='estimated_shipment', example='100'),
  // 二级类目
  subClass: string(name='sub_class', example='3C_pc'),
  // 商品详情
  productDetailInfo: string(name='product_detail_info', example='商品详情'),
  // 商品品牌
  productBrand: string(name='product_brand', example='商品品牌'),
  // 商品来源
  productOrigin: long(name='product_origin', example='1'),
  // 商品名称
  productName: string(name='product_name', example='商品名称'),
  // 商品版本
  productVersion: long(name='product_version', example='0'),
  // 商品安装费用
  installPrice?: long(name='install_price', example='100'),
  // 实际库存
  realStock?: long(name='real_stock', example='0'),
  // 保证金
  depositPrice?: long(name='deposit_price', example='0'),
  // 商品url
  productUrl?: string(name='product_url', example='http://www.product.url'),
  // 官网价
  productPrice: long(name='product_price', example='1000'),
  // 商品预留字段
  extraInfo?: string(name='extra_info', example='{}'),
}

// 电子合同存证代扣计划退款信息
model ContractNotaryDeductRefundInfo {
  // PAYERIDNUMBER
  payerId: string(name='payer_id', example='付款方ID'),
  // 退款金额，单位分
  amount: long(name='amount', example='100'),
  // 代扣计划ID
  order: string(name='order', example='04181b49ee5d7eb0099a289ac8a45df6afb5aa2679c5284444698a9790099269_1'),
  // 退款操作发起时间
  timestamp: string(name='timestamp', example='1589198173000'),
}

// 案件进度查询返回结果
model MediationCaseDetailInfo {
  // 案件编码
  caseNumber: string(name='case_number', example='测试案件编号001'),
  // 案号
  caseCode: string(name='case_code', example='(2021)互调001号'),
  // 案由
  causeActionName: string(name='cause_action_name', example='金融合同纠纷'),
  // 案件状态
  caseTatus: string(name='case_tatus', example='已提交'),
  // 调解平台
  mediationPlatform: string(name='mediation_platform', example='北京版权调解中心'),
  // 调解机构
  mediationOrg: string(name='mediation_org', example='XX云调中心'),
  // 调解员
  mediator: string(name='mediator', example='调解员1'),
  // 申请时间
  applyTime: long(name='apply_time', example='1611545931418'),
  // 调解结果
  mediationResult: string(name='mediation_result', example='调解成功'),
  // 申请人意向金额
  accuserIntentAmount: long(name='accuser_intent_amount', example='8500.21'),
  // 被申请人意向金额
  accusedIntentAmount: long(name='accused_intent_amount', example='7800.34'),
  // 和解金额
  mediationAmount: long(name='mediation_amount', example='8213.12'),
  // 已确认事实
  confirmFact: string(name='confirm_fact', example='证据1、2、3的三性双方已确认'),
  // 调解协议（已达成调解协议或未达成原因）
  mediationAgreement: string(name='mediation_agreement', example='双方同意减免10%的费用,以7800.34元达成调解协议'),
}

// 见证流程签署结果数据
model WitnessSignResult {
  // 签名结果，外部用户签署返回
  signResult?: string(name='sign_result', example=' '),
  // 签署日志id，外部用户签署返回
  signlogId?: string(name='signlog_id', example=' '),
  // 第三方文档id
  thirdDocId?: string(name='third_doc_id', example=' '),
}

// 采购订单信息
model ApplySupplierOrderProductOutput {
  // 订单id
  orderId: string(name='order_id', example='2020223123'),
  // 链上采购单id
  purOrderId: string(name='pur_order_id', example='23042340234234'),
  // 待采购：READY_DELIVER
  // 已采购：DELIVERED
  // 已拒发：REJECTED
  // 已退货：RETURNED
  // 已取消：CANCELED
  purOrderStatus: string(name='pur_order_status', example='链上采购状态'),
  // 供应商id
  supplierId?: string(name='supplier_id', example='ABCDEFGH'),
}

// 合同印章
model ContractSeal {
  // 印章别名
  alias?: string(name='alias', example='红色四方形印章'),
  // 印章创建时间
  createDate?: long(name='create_date', example='1556161219000'),
  // 默认印章标识
  defaultFlag?: boolean(name='default_flag', example='true, false'),
  // 印章fileKey
  fileKey?: string(name='file_key', example='$fbd1d433-9f8f-4439-b184-7eb75861b31f$1759125409'),
  // 印章高度
  height?: long(name='height', example='100'),
  // 印章宽度
  width?: long(name='width', example='100'),
  // 印章id
  sealId?: string(name='seal_id', example='bcd7ffd9-5caf-4342-bd1c-02257229ccd5'),
  // 印章类型，1-机构模板章，2-个人模板章，3-自定义印章，4-手绘章
  sealType?: long(name='seal_type', example='2'),
  // 印章下载地址, 有效时间1小时
  url?: string(name='url', example='https://esignoss.oss-cn-hangzhou.aliyuncs.com/seal-service/18bcc4c7-91'),
  // 印章业务类型，CANCELLATION-作废章，COMMON-其它
  sealBizType?: string(name='seal_biz_type', example='COMMON'),
}

// 企业四要素校验
model CompanyFourMetaInfo {
  // 企业证件名称
  companyCertName: string(name='company_cert_name', example='XX公司'),
  // 企业证件号码
  companyCertNo: string(name='company_cert_no', example='9111011421316034XK'),
  // 证件类型, 默认社会统一信用代码  NATIONAL_LEGAL_MERGE:统一社会信用代码，NATIONAL_LEGAL：营业执照号码
  companyCertType?: string(name='company_cert_type', example='NATIONAL_LEGAL_MERGE'),
  // 法人证件名称
  legalPersonCertName: string(name='legal_person_cert_name', example='张三'),
  // 法人证件号码
  legalPersonCertNo: string(name='legal_person_cert_no', example='110103202110131593'),
  // 法人证件类型 RESIDENT：居民身份证号，PASSPORT：护照，MILITARY：军官证
  legalPersonCertType?: string(name='legal_person_cert_type', example='RESIDENT'),
}

// 见证流程签署数据
model WitnessSignData {
  // 印章图片fileKey列表
  sealFileKeys?: [ string ](name='seal_file_keys', example=''),
  // 印章id列表
  sealIds?: [ string ](name='seal_ids', example=''),
  // 待签署文档摘要值，批量签时必传
  signHash?: string(name='sign_hash', example='04181b49ee5d7eb0099a289ac8a45df6afb5aa2679c5284444698a9790099269'),
  // 签署位置信息
  signPosData?: string(name='sign_pos_data', example=' '),
  // 第三方文档id，批量签时必传
  thirdDocId?: string(name='third_doc_id', example=' '),
}

// 采购商品信息
model ApplySupplierOrderProductInput {
  // 采购商品id
  productId: string(name='product_id', example='202024234234'),
  // 采购商品数量
  productNum: long(name='product_num', example='100'),
}

// 关键字位置列表
model KeywordsPosition {
  // 关键字
  keyword: string(name='keyword', example='keyword1'),
  // 页码
  pageIndex: long(name='page_index', example='32'),
  // x坐标
  posX: string(name='pos_x', example='315.43'),
  // y坐标
  posY: string(name='pos_y', example='185.65723'),
}

// 自动进件案件基础信息
model CaseBasicInfo {
  // 案件租户id
  bizTenantId: string(name='biz_tenant_id', example='ORGJC1CN'),
  // 案件类型:LEASE：租赁，FINANCIAL：金融，OTHER：其他
  caseType: string(name='case_type', example='LEASE'),
  // 标的金额（单位元）
  amount?: string(name='amount', example='123.00'),
  // 业务来源主键
  inputSourceId: string(name='input_source_id', example='232278957595482'),
  // 案件进件来源 
  inputSource: string(name='input_source', example='租赁宝'),
  // 根据业务来源主键对应订单号下的租赁事实报告和证据列表页面的嵌入URL
  caseExt?: string(name='case_ext', example='https://www.aliyun.com'),
}

// 见证流程文档检验数据
model WitnessDocs {
  // 文档摘要值
  docHash: string(name='doc_hash', example='04181b49ee5d7eb0099a289ac8a45df6afb5aa2679c5284444698a9790099269'),
  // 第三方文档id
  thirdDocId: string(name='third_doc_id', example='someId'),
}

// 普通代扣规则
model RepaymentOrderRequest {
  // 代扣触发时间，精确到毫秒
  // java.lang.System#currentTimeMillis()
  payDate: long(name='pay_date', example='12345600000'),
  // 代扣金额，整数 精确到分
  payMoney: long(name='pay_money', example='1000'),
  // 是否用户签署成功后立即触发第一期代扣
  triggerImmediately?: long(name='trigger_immediately', example='1'),
}

// 个人信息
model ContractUserAccountApplication {
  // 邮箱地址，默认不变
  email?: string(name='email', example='xx@alipay.com'),
  // 证件号，该字段只有为空才允许修改
  idNumber?: string(name='id_number', example='311111111111111111'),
  // 证件类型，默认为身份证
  idType?: string(name='id_type', example='CRED_PSN_CH_IDCARD'),
  // 手机号码，默认不变
  mobile?: string(name='mobile', example='15811111111'),
  // 姓名，默认不变
  name?: string(name='name', example='张三'),
  // 用户/经办人账号id
  userId: string(name='user_id', example='ORGJC1CN1591674666666'),
}

// 可信时间信息结构
model TsrResponse {
  // 可信时间请求结果状态吗
  code: string(name='code', example='0'),
  // hash后的信息
  hashedMessage: string(name='hashed_message', example='AAAAA '),
  // 哈希算法
  hashAlgorithm: string(name='hash_algorithm', example='321'),
  // 请求失败时候的错误信息
  message?: string(name='message', example='Request failed'),
  // 时间
  ts: string(name='ts', example='123'),
  // 精简后的时间戳完整编码（在校验时需要提交）
  ctsr: string(name='ctsr', example=' '),
  // 凭证序列号 （在校验的时需要先填写凭证编号）
  // 
  sn: string(name='sn', example=' '),
}

// 采购供应商初始化 
model SupplierInfo {
  // 供应商id
  agentSupplierId: string(name='agent_supplier_id', example='ABCDEFGH'),
  // 被代理机构社会统一信用码
  agentSupplierCorpId: string(name='agent_supplier_corp_id', example='12345678'),
  // 被代理机构名称
  agentSupplierCorpName: string(name='agent_supplier_corp_name', example='阿里巴巴有限公司'),
  // 被代理供应商名称
  agentSupplierName: string(name='agent_supplier_name', example='阿里'),
  // 被代理机构的法人名称
  agentSupplierCorpOwnerName: string(name='agent_supplier_corp_owner_name', example='张三'),
  // 额外信息
  extraInfo?: string(name='extra_info', example='{}'),
}

// 核验请求时对应的存证元数据
model NotaryCheckMeta {
  // 对应的法院编号
  agencyCode?: string(name='agency_code', example='hzfy'),
  // 哈希算法, notary_type 为 HASH 时此参数必填
  hashAlgorithm?: string(name='hash_algorithm', example='SHA256'),
  // 存证内容
  notaryContent: string(name='notary_content', example='5p2t5bee5LuK5aSp5aSp5rCU6Zi0'),
  // 交易哈希
  txHash: string(name='tx_hash', example='aac0cf38b6072352f6b3be4cc0a3cf3950058472eacdda91e6723d75e2994567'),
  // 应用ID
  applicationCode?: string(name='application_code', example='dstj'),
}

// 企业信息
model CompanyTwoMetaInfo {
  // 企业证件名称
  certName: string(name='cert_name', example='XX公司'),
  // 企业证件号码
  certNo: string(name='cert_no', example='9111011421316034XK'),
  // 证件类型, 默认社会统一信用代码  NATIONAL_LEGAL_MERGE:统一社会信用代码，NATIONAL_LEGAL：营业执照号码
  certType?: string(name='cert_type', example='NATIONAL_LEGAL_MERGE'),
}

// 电子合同文档的下载地址
model ContractDocAddress {
  // 电子合同文档ID
  fileId: string(name='file_id', example='01e50a9cedb74493a2d320b4f4732a29'),
  // 电子合同文档名称，默认文件名称
  fileName: string(name='file_name', example='第一份合同.pdf'),
  // 电子合同下载文档地址, 有效时间1小时
  fileUrl: string(name='file_url', example='https://xxxoss.oss-cn-hangzhou.aliyuncs.com/xxx.pdf?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
  // 合同文件的存证地址
  txHash?: string(name='tx_hash', example='a89495ddd334870a58686afe48a8eb83efe2dd51e4c06da7220eb1cde0f995e2'),
}

// 核验结果
model NotaryCheckResult {
  // 存证所在区块高度
  blockHeight: long(minimum=0, name='block_height', example='8888'),
  // 核验结果错误码
  errorCode: long(name='error_code', example='错误码'),
  // 错误信息
  errorMessage: string(name='error_message', example='Permission denied'),
  // 存证时间
  notaryTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='notary_time', example='2020-01-08 11:48:21'),
  // 存证类型
  notaryType: string(name='notary_type', example='FileNotary'),
  // 核验是否成功
  result: boolean(name='result', example='true, false'),
  // 存证事务ID
  transactionId: string(name='transaction_id', example='1a273ba1-b4c2-4bfe-93fc-c5997f3bcee9'),
  // 交易哈希
  txHash: string(name='tx_hash', example='aac0cf38b6072352f6b3be4cc0a3cf3950058472eacdda91e6723d75e2994567'),
  // 区块哈希
  blockHash: string(name='block_hash', example='c3a50d4a7b521d4de13cefb02e5368b616e619d8fab5469298facacfbb39239b'),
  // 存证阶段
  phase: string(name='phase', example='start'),
}

// 电子合同签署盖章区
model ContractSignField {
  // 电子合同用户ID
  accountId: string(name='account_id', example='faea8237c61a4fdea864ee8d7621e14f'),
  // 电子合同文档ID
  fileId: string(name='file_id', example='fe7df2f477d649c18ebcfdfffeba253d'),
  // 电子合同签署区id
  signfieldId: string(name='signfield_id', example='b76b69d5b48d4f689cae997e42809ac4'),
}

// 签署区列表包含印章id数据
model ContractSignFieldSealId {
  // 文件file id
  fileId?: string(name='file_id', example='0178c086a740475caf516f37901352b3'),
  // 流程id
  flowId?: string(name='flow_id', example='1b6b68e44d834f5982cf1959fd9782c3'),
  // 印章id
  sealId?: string(name='seal_id', example='8a8b26de-b15e-4791-ae89-e75d928155cc'),
  // 印章类型，支持多种类型时逗号分割，0-手绘印章，1-模版印章，为空不限制
  sealType?: string(name='seal_type', example='0'),
  // 签署区Id
  signfieldId?: string(name='signfield_id', example='52adb35497b141e3893912b3a2ea4f42'),
}

// 电子合同存证签署信息
model ContractNotarySignInfo {
  // 本阶段存证内容哈希值
  content: string(name='content', example='content'),
  // 电子合同文件hash，可能一次性签署多个文件，不同文件的hash间用“,”分隔开
  contractHash: string(name='contract_hash', example='hash1,hash2'),
  // 签署人ID
  signatory: string(name='signatory', example='account_id_of_signatory'),
  // 存证阶段发生时间，UNIX时间戳(毫秒)
  timestamp: string(name='timestamp', example='1589198173000'),
  // 存证凭据，仅在批量核验时需要填写
  txHash?: string(name='tx_hash', example='95a8201ad7362f9d224937cfb715b086ea1cf0d884f1c5b1f3ed092fddff1c92'),
  // 发起人名称
  intiatorName?: string(name='intiator_name', example='张三'),
  // 签署人名称,多个逗号隔开
  signatorNames?: string(name='signator_names', example='李四,王五'),
  // 详细文件哈希
  detailInfoFileHash?: string(name='detail_info_file_hash', example='91a8201ad7362f9d224937cfb715b086ea1cf0d884f1c5b1f3ed092fddff1cqa '),
}

// 合同存证信息
model ContractNotaryInfo {
  // 存证地址
  txHash: string(name='tx_hash', example='04181b49ee5d7eb0099a289ac8a45df6afb5aa2679c5284444698a9790099269'),
  // 存证相关联的文档ID
  docId?: string(name='doc_id', example='6afb5aa2679c5284444698a9790099269'),
  // 存证的内容哈希值
  contentHash?: string(name='content_hash', example='04181b49ee5d7eb0099a289ac8a45df6afb5aa2679c5284444698a9790099269'),
  // 存证事务ID
  transactionId: string(name='transaction_id', example='61d0147c-5e6d-46e8-8030-5c2fedb6cbc9'),
}

// 电子合同存证结束信息
model ContractNotaryFinishInfo {
  // 本阶段存证内容哈希值
  content: string(name='content', example='content'),
  // 签署文件份数
  fileNum: long(name='file_num', example='3'),
  // 发起人ID
  initiator: string(name='initiator', example='account_id_of_initiator'),
  // 签署人ID（支持多个，不同ID间用“,”分隔开）
  signatories: string(name='signatories', example='account_id_1,account_id_2'),
  // 存证阶段发生时间，UNIX时间戳(毫秒)
  timestamp: string(name='timestamp', example='1589198173000'),
  // 存证凭据，仅在批量核验时需要填写
  txHash?: string(name='tx_hash', example='95a8201ad7362f9d224937cfb715b086ea1cf0d884f1c5b1f3ed092fddff1c92'),
  // signatories对应的用户类型
  userTypes?: string(name='user_types', example='PERSON,ENTERPRISE,PERSON'),
  // 签署合同所属行业
  businessType?: string(name='business_type', example='finance'),
  // 合同对应的金额，如果不涉及金额，填充为0，个数与file_num对应
  amounts?: string(name='amounts', example='888,0,888'),
  // 签署方数量
  signPartyCount?: long(name='sign_party_count', example='2'),
  // 发起人名称
  intiatorName?: string(name='intiator_name', example='张三'),
  // 签署人名称,多个逗号隔开
  signatorNames?: string(name='signator_names', example='李四,王五'),
  // 详细文件哈希
  detailInfoFileHash?: string(name='detail_info_file_hash', example='a91a8201ad7362f9d224937cfb715b086ea1cf0d884f1c5b1f3ed092fddff1cqa'),
}

// 智能合同机构账户创建申请信息
model ContractOrganizationApplication {
  // 证件号
  idNumber: string(name='id_number', example='12330100470104939U'),
  // 证件类型，默认CRED_ORG_USCC，详见机构证件类型说明 （https://tech.antfin.com/docs/2/155166）
  idType: string(name='id_type', example='CRED_ORG_USCC'),
  // 企业法人名称
  legalPerson?: string(name='legal_person', example='测试法人'),
  // 企业法人证件号
  legalPersonId?: string(name='legal_person_id', example='311111111111111111'),
  // 机构名称
  name: string(name='name', example='测试企业'),
  // 机构唯一标识，可传入第三方平台的机构用户id等
  organizationId?: string(name='organization_id', example='B002'),
  // 机构子类型：ENTERPRISE（企业）、SELF-EMPLOYED（个体工商户）、SUBSIDIARY（分公司）、OTHERORG（其他机构）。若填入这些类型，将会进行相应参数校验，例如：企业类型要求进行企业四要素校验，企业证件号必须是91开头，并且企业类型在签署时会需要授权后才可进行签署；个体工商户要求证件号必须是92开头，其余类型无其他校验。不填入此参数不会进行校验。
  orgType?: string(name='org_type', example='ENTERPRISE'),
}

// 证据要素
model EvidentialElement {
  // 订单信息
  orderInfo: OrderInfo(name='order_info', example=''),
  // 承诺信息
  commitmentInfo: CommitmentInfo(name='commitment_info', example=''),
  // 物流信息
  logisticsInfo: LogisticsInfo(name='logistics_info', example=''),
  // 履约信息
  performanceInfo: PerformanceInfo(name='performance_info', example=''),
}

// 创建电子合同手动签署盖章区时的申请信息
model ContractHandSignFieldApplication {
  // 签署操作人个人账号标识，即操作本次签署的个人
  accountId: string(name='account_id', example='2c7de24aff3340f5b944ebac49545b8e'),
  // 电子合同文件ID
  fileId: string(name='file_id', example='fe7df2f477d649c18ebcfdfffeba253d'),
  // 签署区顺序，默认1,且不小于1，顺序越小越先处理
  order?: long(name='order', example=''),
  // 页码信息：当签署区signType为2时, 页码可以_-_分割, 例如1到15页，填"1-15"； 其他情况只能是数字；不指定xy坐标签署区可不填写
  posPage?: string(name='pos_page', example='1'),
  // x坐标，页面签章必填，骑缝签章不填写
  posX?: string(name='pos_x', example='1.1'),
  // y坐标
  posY?: string(name='pos_y', example='1.1'),
  // 印章id
  sealId?: string(name='seal_id', example='bcd7ffd9-5caf-4342-bd1c-02257229ccd5'),
  // 是否需要添加签署日期，0-禁止 1-必须 2-不限制，默认0
  signDateBeanType?: long(name='sign_date_bean_type', example=''),
  // 签章日期字体大小,默认12
  signDateFontSize?: long(name='sign_date_font_size', example=''),
  // 签章日期格式，yyyy年MM月dd日
  signDateFormat?: string(name='sign_date_format', example='yyyy年MM月dd日'),
  // 页码信息，当signDateBeanType为1时，代表签署的印章必须展示签署日期，默认放在印章正下方，签署人可拖拽日期到当前页面的其他位置，如果发起方指定签署位置的同时，需要同时指定日期盖章位置，则需传入日期盖章页码（与印章页码相同），在传入X\Y坐标即可。
  signDatePosPage?: long(name='sign_date_pos_page', example=''),
  // 签章日期x坐标，默认0	
  signDatePosX?: string(name='sign_date_pos_x', example='1.1'),
  // 签章日期y坐标，默认0
  signDatePosY?: string(name='sign_date_pos_y', example='1.1'),
  // 签署类型，1-单页签署，2-骑缝签署，默认1
  signType?: long(name='sign_type', example=''),
  // 第三方业务流水号id，保证相同签署人、相同签约主体、相同签署顺序的任务，对应的第三方业务流水id唯一，默认空
  thirdOrderNo?: string(name='third_order_no', example='someordernumber'),
  // 签署区宽，默认印章宽度
  width?: string(name='width', example='100.0'),
  // 印章ids，只支持企业用户进行印章ID列表的设置；用于手动签署时，指定企业印章进行展示，实现手动选择印章进行签署。
  sealIds?: [ string ](name='seal_ids', example='["印章id1","印章id2",....]'),
  // 签署区预设xy坐标类型，0：不指定X/Y坐标 1：指定X/Y坐标 默认：指定X/Y坐标 ; 签署区设置时可以不指定XY坐标，签署方在签署时拖拽确定最终签署区域，支持在页面任何区域拖拽，个人和企业签署用印都支持
  signFieldType?: long(name='sign_field_type', example='0'),
}

// 见证流程审批数据
model WitnessApprovalData {
  // 审批流程id
  approvalFlowId?: string(name='approval_flow_id', example='someId'),
  // 印章id列表
  sealIds?: [ string ](name='seal_ids', example=''),
}

// 机构信息
model ContractUserOrganizationApplication {
  // 证件号，该字段只有为空才允许修改
  idNumber?: string(name='id_number', example='12330100470104939U'),
  // 证件类型 ，默认CRED_ORG_USCC
  idType?: string(name='id_type', example='CRED_ORG_USCC'),
  // 企业法定代表人名称
  legalPerson?: string(name='legal_person', example='测试法人'),
  // 企业法定代表人证件号
  legalPersonId?: string(name='legal_person_id', example='311111111111111111'),
  // 机构名称
  name?: string(name='name', example='测试企业'),
  // 机构账号id
  organizationId: string(name='organization_id', example='ORGJC1CN1591666666666'),
}

// 证据清单
model EvidentialCheckList {
  // 证据名称英文 
  evidentialNameEn: string(name='evidential_name_en', example='LEGAL_IDENETITY_CERT'),
  // 文件名称
  ossFileName: string(name='oss_file_name', example='a.txt'),
  // 文件fileKey ，调用获取文件上传链接时对应的fileKey
  ossFileKey: string(name='oss_file_key', example='201906182149291c15e6c2d400fc3323b09f44a4e79bdf2db867a3fb9400a168de3325205519.jpg'),
  // 证据来源
  // BUSINESS_UPLOAD	业务传入
  // ADD_MANULLY	手动添加
  sourcesOfEvidence: string(name='sources_of_evidence', example='BUSINESS_UPLOAD'),
  // 证据类型
  // BLOCKCHAIN_DEPOSIT	区块链存证
  // USER_UPLOAD	用户上传
  evidenceType: string(name='evidence_type', example='BLOCKCHAIN_DEPOSIT'),
  // 存证类型
  // TEXT	文本
  // FILE	文件
  depositType: string(name='deposit_type', example='TEXT'),
  // 存证哈希 当为区块链存证必填
  txHash?: string(name='tx_hash', example='1234545676575675673'),
  // 存证时间 当为区块链存证必填
  depositTime?: string(name='deposit_time', example='2021-05-07 17:13:50'),
}

// 存证信息说明
model NotaryInfo {
  // 存证内容的哈希值，默认采用SHA256算法
  contentHash: string(name='content_hash', example='6b7966f4a30a7fec43a6b5ca8e4610f63d320f03ee698945014c0bbc13c6beba'),
  // 合作人（版权存证函专用），会展示在存证证明中
  cooperation?: string(name='cooperation', example='合作人'),
  // 作品名称类型（版权存证函使用），会展示在存证证明中
  creationType?: string(name='creation_type', example='音乐/视频/小说等'),
  // 如果是文件存证，可填写文件名称
  fileName?: string(name='file_name', example='name'),
  // 计算content_hash的哈希算法，目前只支持SHA256
  hashAlgorithm?: string(name='hash_algorithm', example='SHA256'),
  // 申请平台名，用于在存证函上显示用名称
  platform?: string(name='platform', example='某某平台'),
  // 文件容量，默认为0
  size?: long(name='size', example='1024'),
  // 发起存证成功后，返回的存证凭据
  txHash: string(name='tx_hash', example='a89495ddd334870a58686afe48a8eb83efe2dd51e4c06da7220eb1cde0f995e2'),
  // 存证事务ID
  transactionId: string(name='transaction_id', example='7bc888d8-1384-425c-9355-630cef0f4120'),
}

// 自动进件证据要素
model LeaseEvidentialElement {
  // 订单信息
  leaseOrderInfo: LeaseOrderInfo(name='lease_order_info', example=''),
  // 承诺信息
  commitmentInfo: CommitmentInfo(name='commitment_info', example=''),
  // 物流信息
  logisticsInfo: LogisticsInfo(name='logistics_info', example=''),
  // 履约信息
  performanceInfo: LeasePerformanceInfo(name='performance_info', example=''),
}

// 租赁业务存证信息记录
model LeaseNotaryRecord {
  // 存证阶段
  phase: string(name='phase', example='PLACE_ORDER'),
  // 交易哈希，存证记录唯一标识
  txHash: string(name='tx_hash', example='04181b49ee5d7eb0099a289ac8a45df6afb5aa2679c5284444698a9790099269'),
}

// 电子合同文档
model ContractDoc {
  // 上传的电子合同文档是否被加密过，0-未被加密，1-被加密过，默认0
  encryption?: long(name='encryption', example='1,0'),
  // 电子合同文档的ID
  fileId: string(name='file_id', example='01e50a9cedb74493a2d320b4f4732a29'),
  // 电子合同文档名称，默认文件名称
  fileName?: string(name='file_name', example='第一份合同.pdf'),
  // 电子合同文档密码, 如果encryption值为1, 文档密码不能为空，默认没有密码
  filePassword?: string(name='file_password', example='mypassword'),
}

// 电子合同代扣计划取消操作信息
model ContractNotaryDeductCancelInfo {
  // 付款方的区块链合同签署账号
  payerId: string(name='payer_id', example='someId'),
  // 是否取消成功
  cancelStatus: boolean(name='cancel_status', example='true, false'),
  // 取消操作发起时间
  timestamp: string(name='timestamp', example='1589198173000'),
  // 代扣订单号，多个订单号之间以‘,’隔开
  orders: string(name='orders', example='04181b49ee5d7eb0099a289ac8a45df6afb5aa2679c5284444698a9790099269_1'),
}

// 电子合同存证代扣计划信息
model ContractNotaryDeductPlanInfo {
  // PAYERIDNUMBER
  payerId: string(name='payer_id', example='付款方ID'),
  // “总金额：”+总金额“+”“总期数：”+总期数，“+”每期金额时间（X期金额，时间）
  deductPlanInfo: string(name='deduct_plan_info', example='代扣计划说明'),
  // AGREEMEND_ID_NUMBER
  agreementNo: string(name='agreement_no', example='代扣协议ID'),
  // 代扣计划发起时间
  timestamp: string(name='timestamp', example='1589198173000'),
}

// 电子合同签署流程的配置信息
model ContractSignFlowConfig {
  // 回调通知地址 ,默认取项目配置通知地址
  noticeDeveloperUrl?: string(name='notice_developer_url', example='http://127.0.0.1:9110/notice'),
  // 签署通知和审批通知的通知方式，传 "" 表示不需要通知，传"1"表示短信通知。短信功能需要联系售后开白名单才会生效。
  noticeType: string(name='notice_type', example='1'),
  // 签署成功或者流程结束后的默认重定向地址，默认签署完成停在当前页面
  redirectUrl?: string(name='redirect_url', example='http://127.0.0.1:8110/h5/forword'),
  // 签署平台，逗号分割，1-开放服务h5，2-支付宝签 ，默认值1
  signPlatform?: string(name='sign_platform', example='1'),
  // 签署失败时的跳转地址，如果不做单独配置，默认与redirect_url一致（配合twc.notary.contract.signflow.create接口使用）
  redirectUrlOnFailure?: string(name='redirect_url_on_failure', example='http://127.0.0.1:8110/h5/forword/failure'),
  // 是否允许自由签署，默认false（配合twc.notary.contract.signflow.create接口使用）
  freeSignature?: boolean(name='free_signature', example='true, false'),
}

// 更新后平台方企业信息
model ContractPlatformApplication {
  // 证件号
  idNumber: string(name='id_number', example='311111111111111111'),
  // 证件类型
  idType: string(name='id_type', example='CRED_ORG_USCC'),
  // 企业法人名称
  orgLegalName?: string(name='org_legal_name', example='张三'),
  // 企业法人证件号
  orgLegalIdNumber?: string(name='org_legal_id_number', example='311111111111111111'),
  // 机构名称
  name: string(name='name', example='测试企业'),
  // 平台方账号id
  platformId: string(name='platform_id', example='5c66842caf754a6dada4124b66666666'),
}

// 存证证明的证书信息
model CertificateInfo {
  // 存证证明的证书内容的SHA256哈希值
  hash: string(name='hash', example='6b7966f4a30a7fec43a6b5ca8e4610f63d320f03ee698945014c0bbc13c6beba'),
  // 存证证明的证书文件名
  resourceName: string(name='resource_name', example='resource_name.pdf'),
  // 存证证明的证书下载地址
  resourceUrl: string(name='resource_url', example='https://resource_download_adderss'),
}

// 一步创建签署流程的签署区信息
model OneStepSignField {
  // 签署操作人个人账号标识，即操作本次签署的个人
  accountId: string(name='account_id', example='2c7de24aff3340f5b944ebac49545b8e'),
  // 电子合同文件ID
  fileId: string(name='file_id', example='fe7df2f477d649c18ebcfdfffeba253d'),
  // 签署区顺序，默认1,且不小于1，顺序越小越先处理
  order?: long(name='order', example=''),
  // 页码信息：当签署区signType为2时, 页码可以_-_分割, 例如1到15页，填"1-15"； 其他情况只能是数字；不指定xy坐标签署区可不填写
  posPage?: string(name='pos_page', example='1'),
  // x坐标
  posX?: string(name='pos_x', example='1.1'),
  // y坐标
  posY?: string(name='pos_y', example='1.1'),
  // 印章id
  sealId?: string(name='seal_id', example='bcd7ffd9-5caf-4342-bd1c-02257229ccd5'),
  // 是否需要添加签署日期，0-禁止 1-必须 2-不限制，默认0
  signDateBeanType?: long(name='sign_date_bean_type', example='0'),
  // 签章日期字体大小,默认12
  signDateFontSize?: long(name='sign_date_font_size', example='1'),
  // 签章日期格式，yyyy年MM月dd日
  signDateFormat?: string(name='sign_date_format', example='yyyy年MM月dd日'),
  // 页码信息，当signDateBeanType为1时，代表签署的印章必须展示签署日期，默认放在印章正下方，签署人可拖拽日期到当前页面的其他位置，如果发起方指定签署位置的同时，需要同时指定日期盖章位置，则需传入日期盖章页码（与印章页码相同），在传入X\Y坐标即可。
  signDatePosPage?: long(name='sign_date_pos_page', example='1'),
  // 签章日期x坐标，默认0
  signDatePosX?: string(name='sign_date_pos_x', example='0'),
  // 签章日期y坐标，默认0
  signDatePosY?: string(name='sign_date_pos_y', example='0'),
  // 签署类型，1-单页签署，2-骑缝签署，默认1
  signType?: long(name='sign_type', example='1'),
  // 第三方业务流水号id，保证相同签署人、相同签约主体、相同签署顺序的任务，对应的第三方业务流水id唯一，默认空
  thirdOrderNo?: string(name='third_order_no', example='someordernumber'),
  // 签署区宽，默认印章宽度
  width?: string(name='width', example='100.0'),
  // 是否自动执行签署，默认false，false-手动签署，true-自动签署
  autoExecute?: boolean(name='auto_execute', example='true, false'),
}

// 电子合同存证初始化信息
model ContractNotaryInitInfo {
  // 本阶段存证内容哈希值
  content: string(name='content', example='content'),
  // 签署文件份数
  fileNum: long(name='file_num', example='3'),
  // 签署流程发起人ID
  initiator: string(name='initiator', example='account_id_of_initiator'),
  // 签署人ID（支持多个，不同ID间用“,”分隔开），由于流程中签署人可后续追加，最终以ContractNotaryFinishInfo中的singatories信息为准。
  signatories?: string(name='signatories', example='account_Id_1,account_id_2'),
  // 存证阶段发生时间，UNIX时间戳(毫秒)
  timestamp: string(name='timestamp', example='1589198173000'),
  // 存证凭据，仅在批量核验时需要填写
  txHash?: string(name='tx_hash', example='95a8201ad7362f9d224937cfb715b086ea1cf0d884f1c5b1f3ed092fddff1c92'),
  // 发起人名称
  intiatorName?: string(name='intiator_name', example='张三'),
  // 签署人名称,多个逗号隔开
  signatorNames?: string(name='signator_names', example='李四,王五'),
  // 详细文件哈希
  detailInfoFileHash?: string(name='detail_info_file_hash', example='91a8201ad7362f9d224937cfb715b086ea1cf0d884f1c5b1f3ed092fddff1cqa'),
}

// 见证流程创建响应数据
model WitnessFlowConfig {
  // 企业实名认证方式,对公打款：1；企业芝麻认证：3；法定代表授权：4；
  organRealnameTypes?: [ long ](name='organ_realname_types', example=''),
  // 个人实名认证方式, 银行四要素：2；芝麻认证-人脸识别：3；微众-人脸识别：4；
  personRealnameTypes?: [ long ](name='person_realname_types', example=''),
  // 是否需要实名认证
  realNameCert?: boolean(name='real_name_cert', example='true, false'),
  // 意愿认证方式, 芝麻认证-人脸识别：2；短信验证码：3；微众-人脸识别：4；ukey认证：5；签署密码认证：6；
  willingnessTypes?: [ long ](name='willingness_types', example=''),
}

// 文件模板中的输入项组件
model ContractTemplateStructComponent {
  // 填充字体,默认1，1-宋体，2-新宋体,4-黑体，5-楷体
  font?: long(name='font', example='1'),
  // 填充字体大小,默认12
  fontSize?: string(name='font_size', example='11'),
  // 输入项组件高度
  height?: string(name='height', example='11.11'),
  // 输入项组件id，使用时可用id填充，为空时表示添加，不为空时表示修改
  id?: string(name='id', example='45dd9420690b460c9e5ed55b40d7d0f8'),
  // 模板下输入项组件唯一标识，使用模板时也可用根据key值填充
  key?: string(name='key', example='key001'),
  // 输入项组件显示名称
  label?: string(name='label', example='身份证号码'),
  // 输入项组件type=2,type=3时填充格式校验规则;数字格式如：#,#00.0# 日期格式如： yyyy-MM-dd
  limit?: string(name='limit', example='yyyy-MM-dd'),
  // 页码
  page?: long(name='page', example='1'),
  // 是否必填，默认true
  required?: boolean(name='required', example='true, false'),
  // 字体颜色，默认#000000黑色
  textColor?: string(name='text_color', example='#000000'),
  // 输入项组件类型，1-文本，2-数字,3-日期，6-签约区
  type?: long(name='type', example=' '),
  // 输入项组件宽度
  width?: string(name='width', example='11.11'),
  // x轴坐标，左下角为原点
  x?: string(name='x', example='11.11'),
  // y轴坐标，左下角为原点
  y?: string(name='y', example='11.11'),
}

// 融资租赁人脸认证提前还款租期记录
model FinanceCertifyRentalInfo {
  // 租期
  rentTerm: long(name='rent_term', example='1'),
  // 本期扣款金额，123400表示12.34元
  rentalMoney: long(name='rental_money', example='123400'),
  // 还款日期，格式为"2019-07-31 12:00:00"
  rentalReturnTime: string(name='rental_return_time', example='2019-07-31 12:00:00'),
}

// 更新后平台方经办人信息
model ContractCreatorApplication {
  // 邮箱地址
  email?: string(name='email', example='wutest@tsign.com'),
  // 证件号
  idNumber: string(name='id_number', example='311111111111111111'),
  // 证件类型
  idType: string(name='id_type', example='CRED_PSN_CH_IDCARD'),
  // 手机号码
  mobile?: string(name='mobile', example='15811111111'),
  // 姓名
  name: string(name='name', example='张三'),
  // 创建人ID
  creatorId: string(name='creator_id', example='0178c086a740475caf516f37901352b3'),
}

// 签署区列表数据
model ContractPlatformSignFieldApplication {
  // 文件file id
  fileId: string(name='file_id', example='fe7df2f477d649c18ebcfdfffeba253d'),
  // 签署顺序，默认1,且不小于1，顺序越小越先处理
  order?: long(name='order', example='1'),
  // 印章id， 仅限企业公章，暂不支持指定企业法定代表人印章 ，如不传，则采用账号下的默认印章
  sealId?: string(name='seal_id', example='bcd7ffd9-5caf-4342-bd1c-02257229ccd5'),
  // 第三方业务流水号id，保证相同签署人、相同签约主体、相同签署顺序的任务，对应的第三方业务流水id唯一，默认空
  thirdOrderNo?: string(name='third_order_no', example=' '),
  // 页码信息，当签署区signType为2时, 页码可以_-_分割, 其他情况只能是数字
  posPage: string(name='pos_page', example='1'),
  // x坐标，默认空
  posX?: string(name='pos_x', example='158.72531'),
  // y坐标
  posY: string(name='pos_y', example='431.05658'),
  // 签署区宽，默认印章宽度
  width?: string(name='width', example='1'),
  // 是否添加签署时间戳， 默认不添加，默认格式 yyyy-MM-dd HH : mm : ss
  addSignTime?: boolean(name='add_sign_time', example='true, false'),
  // 签署类型， 1-单页签署，2-骑缝签署，默认1
  signType?: long(name='sign_type', example='1'),
}

// 存证关联实体（个人/企业）的身份识别信息
model NotaryUser {
  // 用户类型，PERSON或者ENTERPRISE
  userType: string(name='user_type', example='PERSON'),
  // 证件类型
  // ● 个人：支持身份证IDENTITY_CARD
  // ● 企业：支持UNIFIED_SOCIAL_CREDIT_CODE（统一社会信用代码）和ENTERPRISE_REGISTERED_NUMBER（企业工商注册号）
  certType: string(name='cert_type', example='IDENTITY_CARD'),
  // 证件用户名称
  // ● 个人：身份证姓名
  // ● 企业：企业名称
  certName: string(name='cert_name', example='小王'),
  // 证件号
  // ● 个人：身份证号
  // ● 企业：社会统一信用代码或企业工商注册号，与证件类型保持一致即可
  certNo: string(name='cert_no', example='12332112312312'),
  // 个人必填，用户手机号码
  personMobileNo?: string(name='person_mobile_no', example='18811111111'),
  // 企业选填，法人证件类型，仅支持身份证，IDENTITY_CARD
  legalPersonCertType?: string(name='legal_person_cert_type', example='IDENTITY_CARD'),
  // 企业选填，法人身份证姓名
  legalPersonCertName?: string(name='legal_person_cert_name', example='小李'),
  // 企业选填，法人身份证号
  legalPersonCertNo?: string(name='legal_person_cert_no', example='123123321123'),
  // 企业选填，法人手机号
  legalPersonMobileNo?: string(name='legal_person_mobile_no', example='18811111111'),
  // 扩展属性
  properties?: string(name='properties', example='{"key":"value"}'),
}

model CallbackArbitrationStatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 案件文书号
  acceptanceNumber?: string(name='acceptance_number'),
  // 案件编号
  caseNo: string(name='case_no'),
  // 确认时间时间戳
  confirmTime?: long(name='confirm_time'),
  // 预处理案号
  preacceptanceNumber?: string(name='preacceptance_number'),
  // 发送时间时间戳
  sendTime?: long(name='send_time'),
  // 案件状态
  status: string(name='status'),
}

model CallbackArbitrationStatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 提供给第三方仲裁isv的仲裁申请状态变化回调接口
 * Summary: 仲裁状态信息变更回调接口
 */
async function callbackArbitrationStatus(request: CallbackArbitrationStatusRequest): CallbackArbitrationStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return callbackArbitrationStatusEx(request, headers, runtime);
}

/**
 * Description: 提供给第三方仲裁isv的仲裁申请状态变化回调接口
 * Summary: 仲裁状态信息变更回调接口
 */
async function callbackArbitrationStatusEx(request: CallbackArbitrationStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CallbackArbitrationStatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.arbitration.status.callback', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContractAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 邮箱地址，默认空	
  email?: string(name='email'),
  // 证件号
  idNumber: string(name='id_number'),
  // 证件类型，默认CRED_PSN_CH_IDCARD，详见个人证件类型说明文档（https://tech.antfin.com/docs/2/155166）
  idType: string(name='id_type'),
  // 手机号码，默认空
  mobile?: string(name='mobile'),
  // 姓名
  name: string(name='name'),
  // 用户唯一标识，可传入第三方平台的个人用户id、证件号、手机号、邮箱等，如果设置则作为账号唯一性字段，相同信息不可重复创建。（个人用户与机构的唯一标识不可重复）
  userId: string(name='user_id'),
}

model CreateContractAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 个人账号ID
  accountId?: string(name='account_id'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
}

/**
 * Description: 调用本接口创建个人账号，后续有关该用户的所有操作都需使用该用户的accountId。如提供用户证件信息，则将根据提供的用户证件信息申请数字证书。
 * Summary: 创建电子合同签署个人帐户
 */
async function createContractAccount(request: CreateContractAccountRequest): CreateContractAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContractAccountEx(request, headers, runtime);
}

/**
 * Description: 调用本接口创建个人账号，后续有关该用户的所有操作都需使用该用户的accountId。如提供用户证件信息，则将根据提供的用户证件信息申请数字证书。
 * Summary: 创建电子合同签署个人帐户
 */
async function createContractAccountEx(request: CreateContractAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContractAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.account.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContractAccountsealRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 电子合同用户ID（在twc.notary.contract.account.create接口中创建）
  accountId: string(name='account_id'),
  // 印章别名
  alias?: string(name='alias'),
  // 印章颜色，RED-红色， BLUE-蓝色，BLACK-黑色
  color: string(name='color'),
  // 印章高度, 默认95px
  height?: long(name='height'),
  // 印章宽度, 默认95px
  width?: long(name='width'),
  // 模板类型, 详见个人印章样式说明 SQUARE, BORDERLESS, FZKC, HWLS, HWXK, HWXKBORDER, HYLSF, RECTANGLE, YGYJFCS, YGYMBXS, YYGXSF
  type: string(name='type'),
}

model CreateContractAccountsealResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
  // 印章fileKey
  fileKey?: string(name='file_key'),
  // 印章id
  sealId?: string(name='seal_id'),
  // 印章下载地址, 有效时间1小时
  url?: string(name='url'),
}

/**
 * Description: 通过模版参数，创建个人印章
 * Summary: 创建电子合同个人帐户印章
 */
async function createContractAccountseal(request: CreateContractAccountsealRequest): CreateContractAccountsealResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContractAccountsealEx(request, headers, runtime);
}

/**
 * Description: 通过模版参数，创建个人印章
 * Summary: 创建电子合同个人帐户印章
 */
async function createContractAccountsealEx(request: CreateContractAccountsealRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContractAccountsealResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.accountseal.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContractOrganizationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 创建人个人账号ID，也就是调用个人账号创建接口（twc.notary.contract.account.create
  // ）返回的accountId
  creator: string(name='creator'),
  // 证件号
  idNumber: string(name='id_number'),
  // 证件类型，默认CRED_ORG_USCC，详见机构证件类型说明 （https://tech.antfin.com/docs/2/155166）
  idType: string(name='id_type'),
  // 企业法人名称
  legalPerson?: string(name='legal_person'),
  // 企业法人证件号
  legalPersonId?: string(name='legal_person_id'),
  // 机构名称
  name: string(name='name'),
  // 机构唯一标识，可传入第三方平台机构id、企业证件号、企业邮箱等如果设置则作为账号唯一性字段，相同id不可重复创建。（个人用户与机构的唯一标识不可重复）
  userId: string(name='user_id'),
}

model CreateContractOrganizationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
  // 机构账号ID
  orgId?: string(name='org_id'),
}

/**
 * Description: 对接方调用本接口创建机构账号，后续有关该机构的所有操作都需使用该机构的orgId。如提供机构证件信息，则将根据提供的机构证件信息申请数字证书。
创建机构账号前需要先创建一个个人账号并通过本接口传给服务器，该个人账号将作为该机构签署的经办人，代表企业完成实名认证和意愿认证，并完成签署操作。
 * Summary: 创建电子合同签署机构帐户
 */
async function createContractOrganization(request: CreateContractOrganizationRequest): CreateContractOrganizationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContractOrganizationEx(request, headers, runtime);
}

/**
 * Description: 对接方调用本接口创建机构账号，后续有关该机构的所有操作都需使用该机构的orgId。如提供机构证件信息，则将根据提供的机构证件信息申请数字证书。
创建机构账号前需要先创建一个个人账号并通过本接口传给服务器，该个人账号将作为该机构签署的经办人，代表企业完成实名认证和意愿认证，并完成签署操作。
 * Summary: 创建电子合同签署机构帐户
 */
async function createContractOrganizationEx(request: CreateContractOrganizationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContractOrganizationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.organization.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContractOrgsealRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 印章别名
  alias?: string(name='alias'),
  // 中心图案类型，STAR-圆形有五角星，NONE-圆形无五角星， 详见机构印章样式说明
  central: string(name='central'),
  // 印章颜色，RED-红色，BLUE-蓝色，BLACK-黑色
  color: string(name='color'),
  // 印章高度，默认159px
  height?: long(name='height'),
  // 横向文，可设置0-8个字，企业名称超出25个字后，不支持设置横向文
  htext?: string(name='htext'),
  // 机构ID
  orgId: string(name='org_id'),
  // 下弦文，可设置0-20个字，企业企业名称超出25个字后，不支持设置下弦文	
  qtext?: string(name='qtext'),
  // 模板类型，TEMPLATE_ROUND-圆章，TEMPLATE_OVAL-椭圆章， 详见机构印章样式说明	
  type: string(name='type'),
  // 印章宽度，默认159px
  width?: long(name='width'),
}

model CreateContractOrgsealResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 印章fileKey
  fileKey?: string(name='file_key'),
  // 业务码信息
  message?: string(name='message'),
  // 印章ID
  sealId?: string(name='seal_id'),
  // 印章下载地址, 有效时间1小时
  url?: string(name='url'),
}

/**
 * Description: 通过模版参数，创建机构印章
 * Summary: 创建电子合同机构帐户印章
 */
async function createContractOrgseal(request: CreateContractOrgsealRequest): CreateContractOrgsealResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContractOrgsealEx(request, headers, runtime);
}

/**
 * Description: 通过模版参数，创建机构印章
 * Summary: 创建电子合同机构帐户印章
 */
async function createContractOrgsealEx(request: CreateContractOrgsealRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContractOrgsealResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.orgseal.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AuthContractSignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权人ID，即个人账号ID或机构账号ID
  accountId: string(name='account_id'),
  // 授权截止时间, 格式为yyyy-MM-dd HH:mm:ss，默认无限期
  deadline?: string(name='deadline'),
}

model AuthContractSignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
  // 业务数据, 是否授权成功
  accepted?: boolean(name='accepted'),
}

/**
 * Description: 静默签署授权
 * Summary: 静默签署授权
 */
async function authContractSign(request: AuthContractSignRequest): AuthContractSignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return authContractSignEx(request, headers, runtime);
}

/**
 * Description: 静默签署授权
 * Summary: 静默签署授权
 */
async function authContractSignEx(request: AuthContractSignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AuthContractSignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.sign.auth', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContractTemplateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 模板文件md5值，再做base64编码
  contentMd5: string(name='content_md5'),
  // 目标文件的MIME类型
  contentType: string(name='content_type'),
  // 是否需要转成pdf，如果模板文件为.doc/.docx 传true，为pdf传false
  convert2Pdf: boolean(name='convert2_pdf'),
  // 文件名称，必须带扩展名如:.pdf,.doc,.docx
  fileName: string(name='file_name'),
}

model CreateContractTemplateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
  // 模板ID
  templateId?: string(name='template_id'),
  // 文件直传地址，需要用此上传地址使用put方式上传文件，只有文件上传后模板才可用
  uploadUrl?: string(name='upload_url'),
}

/**
 * Description: 通过文件直传地址创建模板，创建模板后上传文件，上传方法请参考文件流上传方法
 * Summary: 通过文件上传方式创建电子合同签署模板
 */
async function createContractTemplate(request: CreateContractTemplateRequest): CreateContractTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContractTemplateEx(request, headers, runtime);
}

/**
 * Description: 通过文件直传地址创建模板，创建模板后上传文件，上传方法请参考文件流上传方法
 * Summary: 通过文件上传方式创建电子合同签署模板
 */
async function createContractTemplateEx(request: CreateContractTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContractTemplateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.template.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContractFlowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 是否自动归档，默认false。如设置为true，则在调用签署流程开启(twc.notary.contract.flow.start)后，当所有签署人签署完毕，系统自动将流程归档，状态变为“已完成”状态，在流程状态为“已完成”前，可随时添加签署人；如设置为false，则在调用签署流程开启后，需主动调用签署流程归档接口，将流程状态变更为“已完成”，归档前可随时添加签署人；已完成的流程才可下载签署后的文件
  autoArchive?: boolean(name='auto_archive'),
  // 文件主题
  businessScene: string(name='business_scene'),
  // 任务配置信息
  configInfo?: ContractSignFlowConfig(name='config_info'),
  // 文件到期前，提前多久回调提醒续签，单位为小时，时间区间：1小时——15天（360小时），默认不提醒
  contractRemind?: long(name='contract_remind'),
  // 文件有效截止日期,毫秒，默认不失效
  contractValidity?: long(name='contract_validity'),
  // 发起人账户id，即发起本次签署的操作人个人账号id；如不传，默认由对接平台发起
  initiatorAccountId?: string(name='initiator_account_id'),
  // 发起方主体id，如存在个人代机构发起签约，则需传入机构id；如不传，则默认是对接平台
  initiatorAuthorizedAccountId?: string(name='initiator_authorized_account_id'),
  // 签署有效截止日期,毫秒，默认不失效
  signValidity?: long(name='sign_validity'),
}

model CreateContractFlowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
  // 流程ID
  flowId?: string(name='flow_id'),
}

/**
 * Description: 创建签署流程
 * Summary: 创建电子合同签署流程
 */
async function createContractFlow(request: CreateContractFlowRequest): CreateContractFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContractFlowEx(request, headers, runtime);
}

/**
 * Description: 创建签署流程
 * Summary: 创建电子合同签署流程
 */
async function createContractFlowEx(request: CreateContractFlowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContractFlowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.flow.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddContractDocumentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 流程ID
  flowId: string(name='flow_id'),
  // 文档列表数据
  docs: [ ContractDoc ](name='docs'),
}

model AddContractDocumentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
}

/**
 * Description: 向流程中添加待签署文档，文档必须先用文档管理接口创建，创建方式请参见文件管理接口文档。已经开启的流程不能再添加签署文档。
 * Summary: 向电子合同签署流程中添加待签署文档
 */
async function addContractDocument(request: AddContractDocumentRequest): AddContractDocumentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addContractDocumentEx(request, headers, runtime);
}

/**
 * Description: 向流程中添加待签署文档，文档必须先用文档管理接口创建，创建方式请参见文件管理接口文档。已经开启的流程不能再添加签署文档。
 * Summary: 向电子合同签署流程中添加待签署文档
 */
async function addContractDocumentEx(request: AddContractDocumentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddContractDocumentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.document.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddContractSignfieldRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 签署流程ID
  flowId: string(name='flow_id'),
  // 签署区列表数据
  signfields: [ ContractSignFieldApplication ](name='signfields'),
}

model AddContractSignfieldResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
  // 签署区列表数据
  signfields?: [ ContractSignField ](name='signfields'),
}

/**
 * Description: 向指定流程中创建签署区，每个签署区视为一个任务，系统会自动按照流程流转。 签署区的添加必须在签署文档添加之后, 签署区信息内部包含签署人、签署文档信息。 签署区创建完成，流程开启后，系统将自动完成“用户自动盖章签署区”的盖章。用户可全程无感完成本次签署。创建签署方自动盖章签署区前，需确定已完成账号静默签署授权。签署方自动盖章的合同，需要由对接平台方自行校验真实身份和真实意愿
 * Summary: 添加电子合同签署方自动盖章签署区
 */
async function addContractSignfield(request: AddContractSignfieldRequest): AddContractSignfieldResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addContractSignfieldEx(request, headers, runtime);
}

/**
 * Description: 向指定流程中创建签署区，每个签署区视为一个任务，系统会自动按照流程流转。 签署区的添加必须在签署文档添加之后, 签署区信息内部包含签署人、签署文档信息。 签署区创建完成，流程开启后，系统将自动完成“用户自动盖章签署区”的盖章。用户可全程无感完成本次签署。创建签署方自动盖章签署区前，需确定已完成账号静默签署授权。签署方自动盖章的合同，需要由对接平台方自行校验真实身份和真实意愿
 * Summary: 添加电子合同签署方自动盖章签署区
 */
async function addContractSignfieldEx(request: AddContractSignfieldRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddContractSignfieldResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.signfield.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartContractFlowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 流程ID
  flowId: string(name='flow_id'),
}

model StartContractFlowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
}

/**
 * Description: 开启签署流程，开启后流程文档不可再添加或修改文档，签署任务会自动按照设置开始流转。流程开启后，归档前，可随时追加签署区（指定签署人的签署信息）
 * Summary: 电子合同签署流程开启
 */
async function startContractFlow(request: StartContractFlowRequest): StartContractFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startContractFlowEx(request, headers, runtime);
}

/**
 * Description: 开启签署流程，开启后流程文档不可再添加或修改文档，签署任务会自动按照设置开始流转。流程开启后，归档前，可随时追加签署区（指定签署人的签署信息）
 * Summary: 电子合同签署流程开启
 */
async function startContractFlowEx(request: StartContractFlowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartContractFlowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.flow.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveContractFlowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 流程ID
  flowId: string(name='flow_id'),
}

model SaveContractFlowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
}

/**
 * Description: 手动归档签署流程，归档后所有资源均不可修改。归档前签署流程中的所有签署人必须都签署完成。如创建流程时设置了自动归档，则无需调用本接口，签署完成后系统会自动调用
 * Summary: 电子合同签署流程归档
 */
async function saveContractFlow(request: SaveContractFlowRequest): SaveContractFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveContractFlowEx(request, headers, runtime);
}

/**
 * Description: 手动归档签署流程，归档后所有资源均不可修改。归档前签署流程中的所有签署人必须都签署完成。如创建流程时设置了自动归档，则无需调用本接口，签署完成后系统会自动调用
 * Summary: 电子合同签署流程归档
 */
async function saveContractFlowEx(request: SaveContractFlowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveContractFlowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.flow.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DownloadContractDocumentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 流程ID
  flowId: string(name='flow_id'),
}

model DownloadContractDocumentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 文档下载地址信息列表
  docs?: [ ContractDocAddress ](name='docs'),
  // 业务码信息
  message?: string(name='message'),
}

/**
 * Description: 流程归档后，查询和下载签署后的文件
 * Summary: 电子合同流程文档下载
 */
async function downloadContractDocument(request: DownloadContractDocumentRequest): DownloadContractDocumentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return downloadContractDocumentEx(request, headers, runtime);
}

/**
 * Description: 流程归档后，查询和下载签署后的文件
 * Summary: 电子合同流程文档下载
 */
async function downloadContractDocumentEx(request: DownloadContractDocumentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DownloadContractDocumentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.document.download', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddContractFileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 文件名称
  name: string(name='name'),
  // 模板编号
  templateId: string(name='template_id'),
  // 输入项填充内容，以key:value传入
  simpleFormFields: string(name='simple_form_fields'),
}

model AddContractFileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 文件下载地址，有效期一小时
  downloadUrl?: string(name='download_url'),
  // 文件id
  fileId?: string(name='file_id'),
  // 文件名称
  fileName?: string(name='file_name'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
}

/**
 * Description: 基于文件模板生成待签文件用于后续文件，该文件可用用于签署，也可作为附件
 * Summary: 通过电子合同模板添加文档
 */
async function addContractFile(request: AddContractFileRequest): AddContractFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addContractFileEx(request, headers, runtime);
}

/**
 * Description: 基于文件模板生成待签文件用于后续文件，该文件可用用于签署，也可作为附件
 * Summary: 通过电子合同模板添加文档
 */
async function addContractFileEx(request: AddContractFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddContractFileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.file.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContractPlatformRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 平台方经办人信息
  creator: ContractAccountApplication(name='creator'),
  // 平台机构信息
  platform: ContractOrganizationApplication(name='platform'),
}

model CreateContractPlatformResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 创建人ID
  creatorId?: string(name='creator_id'),
  // 平台方ID
  platformId?: string(name='platform_id'),
  // 平台用户与智能合同服务间鉴权使用的密钥
  secret?: string(name='secret'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
}

/**
 * Description: 电子合同平台方发起注册，提供企业信息、合同签署的经办人信息，注册成为电子合同平台方用户
 * Summary: 电子合同平台方注册
 */
async function createContractPlatform(request: CreateContractPlatformRequest): CreateContractPlatformResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContractPlatformEx(request, headers, runtime);
}

/**
 * Description: 电子合同平台方发起注册，提供企业信息、合同签署的经办人信息，注册成为电子合同平台方用户
 * Summary: 电子合同平台方注册
 */
async function createContractPlatformEx(request: CreateContractPlatformRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContractPlatformResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.platform.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContractUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户类型为机构时，填写机构信息
  organization?: ContractOrganizationApplication(name='organization'),
  // 用户类型为个人时，则为个人用户信息；用户类型为机构时，则为机构账号经办人信息
  user: ContractAccountApplication(name='user'),
  // 用户类型，个人（PERSON）或机构（ORGANIZATION）
  userType: string(name='user_type'),
}

model CreateContractUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 机构账号
  organizationId?: string(name='organization_id'),
  // 用户类型为个人时返回用户账号；用户类型为机构时返回经办人账号
  userId?: string(name='user_id'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
}

/**
 * Description: 电子合同平台方提供用户信息，注册成为平台用户
 * Summary: 电子合同平台方的用户注册
 */
async function createContractUser(request: CreateContractUserRequest): CreateContractUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContractUserEx(request, headers, runtime);
}

/**
 * Description: 电子合同平台方提供用户信息，注册成为平台用户
 * Summary: 电子合同平台方的用户注册
 */
async function createContractUserEx(request: CreateContractUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContractUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.user.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model StartContractHandsignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 代理商户账户
  agentAccountId?: string(name='agent_account_id'),
  // 是否自动归档，默认为true
  autoArchive?: boolean(name='auto_archive'),
  // 合同文件主题
  businessScene: string(name='business_scene'),
  // 文件到期前，提前多少小时回调提醒续签，小时（时间区间：1小时——15天），默认不提醒
  contractRemind?: long(name='contract_remind'),
  // 签署流程任务配置信息
  contractSignFlowConfig?: ContractSignFlowConfig(name='contract_sign_flow_config'),
  // 文件有效截止日期,毫秒，默认不失效
  contractValidity?: long(name='contract_validity'),
  // 发起人账户id，即发起本次签署的操作人个人账号id；如不传，默认由对接平台发起
  initiatorAccountId?: string(name='initiator_account_id'),
  // 发起方主体id，如存在个人代机构发起签约，则需传入机构id；如不传，则默认是对接平台
  // 
  // 
  initiatorAuthorizedAccountId?: string(name='initiator_authorized_account_id'),
  // 代扣规则详情，不可为空
  repaymentOrderInfo?: [ RepaymentOrderRequest ](name='repayment_order_info'),
  // 签署平台，ALIPAY（支付宝小程序）或H5，默认H5
  signPlatform?: string(name='sign_platform'),
  // 签署有效截止日期,毫秒，默认不失效
  signValidity?: string(name='sign_validity'),
  // 输入项填充内容，以key:value传入
  simpleFormFields: string(name='simple_form_fields'),
  // 待签署的智能合同模板ID
  template: string(name='template'),
  // 待签署客户的账户ID
  userAccount: string(name='user_account'),
  // 是否需要短网址
  shortUrl?: boolean(name='short_url'),
}

model StartContractHandsignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 签署流程ID
  flowId?: string(name='flow_id'),
  // 业务码信息
  message?: string(name='message'),
  // 手动签约唤起地址
  url?: string(name='url'),
  // 唤起签约地址短网址
  shortUrl?: string(name='short_url'),
}

/**
 * Description: 电子合同平台方发起签署流程，用户在H5页面完成手动签署
 * Summary: 电子合同平台方发起手动签署流程
 */
async function startContractHandsign(request: StartContractHandsignRequest): StartContractHandsignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return startContractHandsignEx(request, headers, runtime);
}

/**
 * Description: 电子合同平台方发起签署流程，用户在H5页面完成手动签署
 * Summary: 电子合同平台方发起手动签署流程
 */
async function startContractHandsignEx(request: StartContractHandsignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartContractHandsignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.handsign.start', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContractFlowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 流程id
  flowId: string(name='flow_id'),
}

model QueryContractFlowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否自动归档
  autoArchive?: boolean(name='auto_archive'),
  // 文件主题
  businessScene?: string(name='business_scene'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 流程配置信息
  configInfo?: ContractSignFlowConfig(name='config_info'),
  // 文件到期前，提前多少小时提醒续签
  contractRemind?: long(name='contract_remind'),
  // 文件有效截止日期
  contractValidity?: long(name='contract_validity'),
  // 流程描述, 如果流程已拒签或已撤回, 并且存在拒签或撤回原因, 流程描述显示为原因, 否则默认为流程状态描述
  flowDesc?: string(name='flow_desc'),
  // 流程结束时间
  flowEndTime?: string(name='flow_end_time'),
  // 流程ID
  flowId?: string(name='flow_id'),
  // 流程开始时间
  flowStartTime?: string(name='flow_start_time'),
  // 流程状态,0-草稿 1-签署中 2-完成 3-撤销 4-终止 5-过期 6-删除 7-拒签
  flowStatus?: long(name='flow_status'),
  // 发起人账户id
  initiatorAccountId?: string(name='initiator_account_id'),
  // 发起方主体id
  initiatorAuthorizedAccountId?: string(name='initiator_authorized_account_id'),
  // 业务码信息
  message?: string(name='message'),
  // 签署有效截止日期
  signValidity?: string(name='sign_validity'),
}

/**
 * Description: 查询签署流程的详细信息，包括流程配置、签署状态等
 * Summary: 签署流程查询
 */
async function queryContractFlow(request: QueryContractFlowRequest): QueryContractFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContractFlowEx(request, headers, runtime);
}

/**
 * Description: 查询签署流程的详细信息，包括流程配置、签署状态等
 * Summary: 签署流程查询
 */
async function queryContractFlowEx(request: QueryContractFlowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContractFlowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.flow.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContractAccountsealimageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户id
  accountId: string(name='account_id'),
  // 印章别名
  alias?: string(name='alias'),
  // 印章高度, 个人默认95px, 机构默认159px
  height?: long(name='height'),
  // 印章宽度, 个人默认95px, 机构默认159px
  width?: long(name='width'),
  // 印章数据类型，BASE64：base64格式
  type: string(name='type'),
  // 印章数据，base64格式字符串，不包含格式前缀
  data: string(name='data'),
  // 是否对图片进行透明化处理，默认false。仅对图片整体做透明化处理，无法去除图片背景
  transparentFlag?: boolean(name='transparent_flag'),
}

model CreateContractAccountsealimageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
  // 印章fileKey
  fileKey?: string(name='file_key'),
  // 印章id
  sealId?: string(name='seal_id'),
  // 印章下载地址, 有效时间1小时
  url?: string(name='url'),
  // 印章高度
  height?: long(name='height'),
  // 印章宽度
  width?: long(name='width'),
}

/**
 * Description: 创建个人/机构图片印章
 * Summary: 创建个人/机构图片印章
 */
async function createContractAccountsealimage(request: CreateContractAccountsealimageRequest): CreateContractAccountsealimageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContractAccountsealimageEx(request, headers, runtime);
}

/**
 * Description: 创建个人/机构图片印章
 * Summary: 创建个人/机构图片印章
 */
async function createContractAccountsealimageEx(request: CreateContractAccountsealimageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContractAccountsealimageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.accountsealimage.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetContractFileuploadurlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 所属账号id，即个人账号id或机构账号id，如不传，则默认属于对接平台
  accountId?: string(name='account_id'),
  // 先计算文件md5值，在对该md5值进行base64编码
  contentMd5: string(name='content_md5'),
  // 目标文件的MIME类型
  contentType: string(name='content_type'),
  // 是否转换成pdf文档，默认false，代表不做转换。转换是异步行为，如果指定要转换，需要调用查询文件信息接口查询状态，转换完成后才可使用。
  convert2Pdf: string(name='convert_2_pdf'),
  // 文件大小，单位byte
  fileSize: long(name='file_size'),
  // 文件名称（必须带上文件扩展名，不然会导致后续发起流程校验过不去 示例：合同.pdf ）
  fileName: string(name='file_name'),
}

model GetContractFileuploadurlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 文件Id
  fileId?: string(name='file_id'),
  // 业务码信息
  message?: string(name='message'),
  // 文件直传地址, 可以重复使用，但是只能传一样的文件，有效期一小时
  uploadUrl?: string(name='upload_url'),
}

/**
 * Description: 采用文件直传的方式完成用户文件的上传。对接方通过该接口获取文件上传的授权地址
 * Summary: 通过上传方式创建文件
 */
async function getContractFileuploadurl(request: GetContractFileuploadurlRequest): GetContractFileuploadurlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getContractFileuploadurlEx(request, headers, runtime);
}

/**
 * Description: 采用文件直传的方式完成用户文件的上传。对接方通过该接口获取文件上传的授权地址
 * Summary: 通过上传方式创建文件
 */
async function getContractFileuploadurlEx(request: GetContractFileuploadurlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetContractFileuploadurlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.fileuploadurl.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AddContractPlatformsignfieldsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 流程id
  flowId: string(name='flow_id'),
  // 签署区列表数据
  signfields: ContractPlatformSignFieldApplication(name='signfields'),
}

model AddContractPlatformsignfieldsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
  // 签署区列表数据
  signfields?: [ ContractSignField ](name='signfields'),
}

/**
 * Description: 向指定流程中创建签署区，每个签署区视为一个任务，系统会自动按照流程流转。 签署区的添加必须在签署文档添加之后, 签署区信息内部包含签署文档信息（平台自动签无需指定签署人信息，默认签署人是对接的企业）。
签署区创建完成，流程开启后，系统将自动完成“对接平台自动盖章签署区”的盖章，对接平台可全程无感完成本次签署。
 * Summary: 添加平台自动盖章签署区
 */
async function addContractPlatformsignfields(request: AddContractPlatformsignfieldsRequest): AddContractPlatformsignfieldsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return addContractPlatformsignfieldsEx(request, headers, runtime);
}

/**
 * Description: 向指定流程中创建签署区，每个签署区视为一个任务，系统会自动按照流程流转。 签署区的添加必须在签署文档添加之后, 签署区信息内部包含签署文档信息（平台自动签无需指定签署人信息，默认签署人是对接的企业）。
签署区创建完成，流程开启后，系统将自动完成“对接平台自动盖章签署区”的盖章，对接平台可全程无感完成本次签署。
 * Summary: 添加平台自动盖章签署区
 */
async function addContractPlatformsignfieldsEx(request: AddContractPlatformsignfieldsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddContractPlatformsignfieldsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.platformsignfields.add', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetContractFileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 文件id
  fileId: string(name='file_id'),
}

model GetContractFileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
  // 文件id
  fileId?: string(name='file_id'),
  // 文件名称
  name?: string(name='name'),
  // 下载地址
  downloadUrl?: string(name='download_url'),
  // 文件大小，单位byte
  size?: long(name='size'),
  // 文件状态, 0:文件未上传；1:文件上传中 ；2：文件上传已完成,；3：文件上传失败 ；4：文件等待转pdf ；5：文件已转换pdf 。
  status?: long(name='status'),
  // pdf文件总页数,仅当文件类型为pdf时有值
  pdfTotalPages?: long(name='pdf_total_pages'),
}

/**
 * Description: 查询文件详情，包括文件名称、大小、下载地址等
 * Summary: 查询文件详情
 */
async function getContractFile(request: GetContractFileRequest): GetContractFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getContractFileEx(request, headers, runtime);
}

/**
 * Description: 查询文件详情，包括文件名称、大小、下载地址等
 * Summary: 查询文件详情
 */
async function getContractFileEx(request: GetContractFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetContractFileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.file.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContractAccountsealsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户id
  accountId: string(name='account_id'),
  // 分页起始位置
  offset: long(name='offset'),
  // 单页数量
  size: long(name='size'),
}

model QueryContractAccountsealsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
  // 查询总数
  total?: long(name='total'),
  // 印章列表
  seals?: [ ContractSeal ](name='seals'),
}

/**
 * Description: 查询个人所有印章
 * Summary: 查询个人印章
 */
async function queryContractAccountseals(request: QueryContractAccountsealsRequest): QueryContractAccountsealsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContractAccountsealsEx(request, headers, runtime);
}

/**
 * Description: 查询个人所有印章
 * Summary: 查询个人印章
 */
async function queryContractAccountsealsEx(request: QueryContractAccountsealsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContractAccountsealsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.accountseals.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContractOrganizationsealsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 机构id
  orgId: string(name='org_id'),
  // 分页起始位置
  offset: long(name='offset'),
  // 单页数量
  size: long(name='size'),
}

model QueryContractOrganizationsealsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
  // 查询总数
  total?: long(name='total'),
  // 印章列表
  seals?: [ ContractSeal ](name='seals'),
}

/**
 * Description: 查询机构所有印章
 * Summary: 查询机构印章
 */
async function queryContractOrganizationseals(request: QueryContractOrganizationsealsRequest): QueryContractOrganizationsealsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContractOrganizationsealsEx(request, headers, runtime);
}

/**
 * Description: 查询机构所有印章
 * Summary: 查询机构印章
 */
async function queryContractOrganizationsealsEx(request: QueryContractOrganizationsealsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContractOrganizationsealsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.organizationseals.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContractFlowsignerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 流程id
  flowId: string(name='flow_id'),
}

model QueryContractFlowsignerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
  // 签字人列表
  signers?: [ ContractFlowSigner ](name='signers'),
}

/**
 * Description: 查询流程所有签署人列表。
 * Summary: 查询流程签署人列表
 */
async function queryContractFlowsigner(request: QueryContractFlowsignerRequest): QueryContractFlowsignerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContractFlowsignerEx(request, headers, runtime);
}

/**
 * Description: 查询流程所有签署人列表。
 * Summary: 查询流程签署人列表
 */
async function queryContractFlowsignerEx(request: QueryContractFlowsignerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContractFlowsignerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.flowsigner.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContractSignfieldsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 流程id
  flowId: string(name='flow_id'),
  // 账号id，默认所有签署人
  accountId?: string(name='account_id'),
  // 指定签署区id列表，逗号分割，默认所有签署区
  signfieldIds?: string(name='signfield_ids'),
}

model QueryContractSignfieldsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
  // 签署区列表数据
  signfields?: [ ContractSignFieldDetail ](name='signfields'),
}

/**
 * Description: 查询流程签署区列表，可以查询指定指定id或者签署人所属的签署区
 * Summary: 查询签署区列表
 */
async function queryContractSignfields(request: QueryContractSignfieldsRequest): QueryContractSignfieldsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContractSignfieldsEx(request, headers, runtime);
}

/**
 * Description: 查询流程签署区列表，可以查询指定指定id或者签署人所属的签署区
 * Summary: 查询签署区列表
 */
async function queryContractSignfieldsEx(request: QueryContractSignfieldsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContractSignfieldsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.signfields.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContractAccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 个人账号id
  accountId: string(name='account_id'),
}

model QueryContractAccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
  // 个人账号id
  accountId?: string(name='account_id'),
  // 姓名
  name?: string(name='name'),
  // 证件类型，详见个人证件类型说明
  idType?: string(name='id_type'),
  // 证件号
  idNumber?: string(name='id_number'),
  // 联系方式，手机号码
  mobile?: string(name='mobile'),
  // 联系方式，邮箱地址
  email?: string(name='email'),
  // 第三方平台的用户id
  thirdPartyUserId?: string(name='third_party_user_id'),
}

/**
 * Description: 使用创建账号返回的账号id查询用户的账号。
 * Summary: 查询个人账号
 */
async function queryContractAccount(request: QueryContractAccountRequest): QueryContractAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContractAccountEx(request, headers, runtime);
}

/**
 * Description: 使用创建账号返回的账号id查询用户的账号。
 * Summary: 查询个人账号
 */
async function queryContractAccountEx(request: QueryContractAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContractAccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.account.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContractOrganizationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 机构账号id
  orgId: string(name='org_id'),
}

model QueryContractOrganizationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
  // 机构账号Id
  orgId?: string(name='org_id'),
  // 机构名称
  name?: string(name='name'),
  // 证件类型，详见机构证件类型说明
  idType?: string(name='id_type'),
  // 证件号
  idNumber?: string(name='id_number'),
  // 企业法人证件号
  orgLegalIdNumber?: string(name='org_legal_id_number'),
  // 企业法人名称
  orgLegalName?: string(name='org_legal_name'),
  // 第三方平台的机构id
  thirdPartyUserId?: string(name='third_party_user_id'),
}

/**
 * Description: 使用创建账号返回的账号id查询机构账号。
 * Summary: 查询机构账号
 */
async function queryContractOrganization(request: QueryContractOrganizationRequest): QueryContractOrganizationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContractOrganizationEx(request, headers, runtime);
}

/**
 * Description: 使用创建账号返回的账号id查询机构账号。
 * Summary: 查询机构账号
 */
async function queryContractOrganizationEx(request: QueryContractOrganizationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContractOrganizationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.organization.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContractTemplateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 模板id
  templateId: string(name='template_id'),
}

model QueryContractTemplateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 创建时间
  createTime?: long(name='create_time'),
  // 模板文件下载地址
  downloadUrl?: string(name='download_url'),
  // 模板文件大小
  fileSize?: long(name='file_size'),
  // 业务码信息
  message?: string(name='message'),
  // 文件模板中的输入项组件列表
  structComponents?: [ ContractTemplateStructComponent ](name='struct_components'),
  // 模板id
  templateId?: string(name='template_id'),
  // 模板名称
  templateName?: string(name='template_name'),
  // 更新时间
  updateTime?: long(name='update_time'),
}

/**
 * Description: 查询模板详情，包括文件模板基本信息和输入项组件信息
 * Summary: 查询模板详情详情
 */
async function queryContractTemplate(request: QueryContractTemplateRequest): QueryContractTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContractTemplateEx(request, headers, runtime);
}

/**
 * Description: 查询模板详情，包括文件模板基本信息和输入项组件信息
 * Summary: 查询模板详情详情
 */
async function queryContractTemplateEx(request: QueryContractTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContractTemplateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.template.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContractSignflowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 是否自动归档，默认false 如设置为true，则在流程开启后，当所有签署人签署完毕，系统自动将流程归档，状态变为“已完成”状态，在流程状态为“已完成”前，可随时添加签署人；如设置为false，则在调用流程开启后，需主动调用签署流程归档接口，将流程状态变更为“已完成”，归档前可随时添加签署人；已完成的流程才可下载签署后的文件
  autoArchive?: boolean(name='auto_archive'),
  // 是否强制代扣
  autoDeductionForce?: boolean(name='auto_deduction_force'),
  // 文件主题
  businessScene: string(name='business_scene'),
  // 任务配置信息
  contractSignFlowConfig?: ContractSignFlowConfig(name='contract_sign_flow_config'),
  // 发起人账户id，即发起本次签署的操作人个人账号id；如不传，默认由对接平台发起
  initiatorAccountId?: string(name='initiator_account_id'),
  // 发起方主体id，如存在个人代机构发起签约，则需传入机构id；如不传，则默认是对接平台
  initiatorAuthorizedAccountId?: string(name='initiator_authorized_account_id'),
  // 代扣规则详情
  repaymentOrderInfo?: [ RepaymentOrderRequest ](name='repayment_order_info'),
  // 签署平台，ALIPAY（支付宝小程序）或H5
  signPlatform?: string(name='sign_platform'),
  // 签署有效截止日期，毫秒，默认3天失效
  signValidity?: long(name='sign_validity'),
  //  付款方ID（个人）
  payerTuid?: string(name='payer_tuid'),
  // 收款方ID(机构)
  payeeTuid?: string(name='payee_tuid'),
}

model CreateContractSignflowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 签约流程ID
  flowId?: string(name='flow_id'),
  // 业务码信息
  message?: string(name='message'),
}

/**
 * Description: 平台方制定签约模板和用户，发起手动签署流程，获得签署流程ID
 * Summary: 创建签署流程
 */
async function createContractSignflow(request: CreateContractSignflowRequest): CreateContractSignflowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContractSignflowEx(request, headers, runtime);
}

/**
 * Description: 平台方制定签约模板和用户，发起手动签署流程，获得签署流程ID
 * Summary: 创建签署流程
 */
async function createContractSignflowEx(request: CreateContractSignflowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContractSignflowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.signflow.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContractRegisterzftRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 地址。商户详细经营地址或人员所在地点
  address: string(name='address'),
  // 代理商户的账户。如为isv商家入驻，需要传agent_account_id字段，agent_account_id是isv为商家用户注册返回的机构id
  agentAccountId?: string(name='agent_account_id'),
  // 商户别名
  aliasName: string(name='alias_name'),
  // 商户支付宝账户
  alipayLogonId: string(name='alipay_logon_id'),
  // 申请时间
  applyTime: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='apply_time'),
  // 二级商户支付宝账户，用于协议确认。目前商业场景（除医疗、中小学教育等）下必填。本字段要求与商户名称name同名，且是实名认证支付宝账户
  bindingAlipayLogonId: string(name='binding_alipay_logon_id'),
  // 结算卡id
  cardAliasNo?: string(name='card_alias_no'),
  // 营业执照图片url，本业务接口中，如果是特殊行业必填。其值为使用ant.merchant.expand.indirect.image.upload上传图片得到的一串oss key。
  certImage: string(name='cert_image'),
  // 商户社会信用码
  certNo: string(name='cert_no'),
  // 商户证件类型，取值范围：201：营业执照；2011:营业执照(统一社会信用代码)；204：民办非企业登记证书；206：社会团体法人登记证书；218：事业单位法人证书；219：党政机关批准设立文件/行政执法主体资格证；100：个人商户身份证
  certType: string(name='cert_type'),
  // 城市编码。请按照https://gw.alipayobjects.com/os/basement_prod/253c4dcb-b8a4-4a1e-8be2-79e191a9b6db.xlsx 表格中内容填写。
  // （参考资料：
  // http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/）
  cityCode: string(name='city_code'),
  // 电子邮箱
  contactEmail: string(name='contact_email'),
  // 商户联系人信息
  contactMobile: string(name='contact_mobile'),
  // 联系人名字	
  contactName: string(name='contact_name'),
  // 商户联系人电话信息
  contactPhone: string(name='contact_phone'),
  // 商户联系人业务标识枚举，表示商户联系人的职责。异议处理接口人:02;商户关键联系人:06;数据反馈接口人:11;服务联动接口人:08
  contactTag: string(name='contact_tag'),
  // 联系人类型，取值范围：LEGAL_PERSON：法人；CONTROLLER：实际控制人；AGENT：代理人；OTHER：其他
  contactType: string(name='contact_type'),
  // 区县编码。请按照https://gw.alipayobjects.com/os/basement_prod/253c4dcb-b8a4-4a1e-8be2-79e191a9b6db.xlsx 表格中内容填写。
  // （参考资料：
  // http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/）
  districtCode: string(name='district_code'),
  // 返回申请单相关参数。当前返回内容有cardAliasNo，smid	
  extInfo: string(name='ext_info'),
  // 商户角色id。审核通过后生成。间连商户或平台商二级商户业务中，本字段表示smid
  ipRoleId: string(name='ip_role_id'),
  // 法人身份证反面url，其值为使用ant.merchant.expand.indirect.image.upload上传图片得到的一串oss key。本业务接口中，如果是特殊行业必填
  legalCertBackImage: string(name='legal_cert_back_image'),
  // 法人身份证正面url，其值为使用ant.merchant.expand.indirect.image.upload上传图片得到的一串oss key。本业务接口中，如果是特殊行业必填
  legalCertFrontImage: string(name='legal_cert_front_image'),
  // 法人身份证号
  legalCertNo: string(name='legal_cert_no'),
  // 法人名称
  legalName: string(name='legal_name'),
  // 商户类别码mcc，参见附件描述中的“类目code” https://gw.alipayobjects.com/os/basement_prod/82cb70f7-abbd-417a-91ba-73c1849f07ea.xlsx 如果要求资质一栏不为空，表明是特殊行业，会有人工审核。注：文档更新可能有滞后性，以实际为准
  mcc: string(name='mcc'),
  // 蚂蚁金服（杭*****术有限公司
  merchantName: string(name='merchant_name'),
  // 商家类型：01：企业；02：事业单位；03：民办非企业组织；04：社会团体；05：党政及国家机关；06：个人商户；07：个体工商户
  merchantType: string(name='merchant_type'),
  // 商户名称
  name: string(name='name'),
  // 申请单id
  orderId: string(name='order_id'),
  // 外部业务号。比如某种业务标准外部订单号,比如交易外部订单号，代表服务商端自己订单号。用于做并发控制，防止一笔外部订单发起两次进件。非必要场景禁止传入本字段，如要使用务必理清场景及字段生成规则，与蚂蚁金服对接人咨询。
  outBizNo: string(name='out_biz_no'),
  // 门头照，其值为使用ant.merchant.expand.indirect.image.upload上传图片得到的一串oss key。如果使用当面付服务则必填
  outDoorImage: string(name='out_door_image'),
  // 商户在智能合同平台唯一id
  platformTuid: string(name='platform_tuid'),
  // 省份编码。请按照https://gw.alipayobjects.com/os/basement_prod/253c4dcb-b8a4-4a1e-8be2-79e191a9b6db.xlsx 表格中内容填写。
  // （参考资料：
  // http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/）
  provinceCode: string(name='province_code'),
  // 商户使用服务，可选值有：当面付、app支付、wap支付、电脑支付
  service: string(name='service'),
  // 客服电话	
  servicePhone: string(name='service_phone'),
  // 二级商户与服务商的签约时间
  signTimeWithIsv: string(name='sign_time_with_isv'),
  // 站点名称
  siteName: string(name='site_name'),
  // 网站：01
  // APP : 02
  // 服务窗:03
  // 公众号:04
  // 其他:05
  // 支付宝小程序:06
  siteType: string(name='site_type'),
  // 站点地址
  siteUrl: string(name='site_url'),
  // 二级商户id
  smid: string(name='smid'),
  // 申请单状态。99:已完结;-1:失败;031:已提交审核
  status: string(name='status'),
  // 0表示不更新，1表示强制更新
  update: long(name='update'),
}

model CreateContractRegisterzftResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误码
  code?: string(name='code'),
}

/**
 * Description: 商户签署直付通协议
 * Summary: 商户签署直付通协议
 */
async function createContractRegisterzft(request: CreateContractRegisterzftRequest): CreateContractRegisterzftResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContractRegisterzftEx(request, headers, runtime);
}

/**
 * Description: 商户签署直付通协议
 * Summary: 商户签署直付通协议
 */
async function createContractRegisterzftEx(request: CreateContractRegisterzftRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContractRegisterzftResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.registerzft.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContractPlatformtemplateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 是否包含代扣规则，如果设置为true，则在创建手动签署流程时，必须传入代扣规则。默认为false
  autoDeduction?: boolean(name='auto_deduction'),
  // Base64编码的模板文件的MD5值
  contentMd5: string(name='content_md5'),
  // 目标文件的MIME类型
  contentType: string(name='content_type'),
  // 是否需要转成pdf，如果模板文件为.doc/.docx 传true，为pdf传false
  convert2Pdf: boolean(name='convert2_pdf'),
  // 文件名称，必须带扩展名如:.pdf,.doc,.docx
  fileName: string(name='file_name'),
  // 平台方的签署信息列表
  signFields: [ ContractPlatformSignField ](name='sign_fields'),
  // 用户需要签章的页面列表（默认为最后一页）
  userSignPages?: [ long ](name='user_sign_pages'),
  // 是否强制用户选择代扣
  autoDeductionForce?: boolean(name='auto_deduction_force'),
}

model CreateContractPlatformtemplateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
  // 模板ID
  templateId?: string(name='template_id'),
  // 文件直传地址，需要用此上传地址使用put方式上传文件，只有文件上传后模板才可用
  uploadUrl?: string(name='upload_url'),
}

/**
 * Description: 创建模板的同时，指定平台方签署信息，完成智能合同模板创建
 * Summary: 创建智能合同模板
 */
async function createContractPlatformtemplate(request: CreateContractPlatformtemplateRequest): CreateContractPlatformtemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContractPlatformtemplateEx(request, headers, runtime);
}

/**
 * Description: 创建模板的同时，指定平台方签署信息，完成智能合同模板创建
 * Summary: 创建智能合同模板
 */
async function createContractPlatformtemplateEx(request: CreateContractPlatformtemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContractPlatformtemplateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.platformtemplate.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContractMerchantzftRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 代理商户账户
  agentAccountId?: string(name='agent_account_id'),
}

model QueryContractMerchantzftResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 0表示成功，其他为失败
  code?: long(name='code'),
  // 商户入驻查询信息
  data?: string(name='data'),
  // 错误信息描述
  errMessage?: string(name='err_message'),
}

/**
 * Description: 查询商户直付通入驻信息
 * Summary: 查询商户直付通入驻信息
 */
async function queryContractMerchantzft(request: QueryContractMerchantzftRequest): QueryContractMerchantzftResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContractMerchantzftEx(request, headers, runtime);
}

/**
 * Description: 查询商户直付通入驻信息
 * Summary: 查询商户直付通入驻信息
 */
async function queryContractMerchantzftEx(request: QueryContractMerchantzftRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContractMerchantzftResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.merchantzft.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListContractOuttradeidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 合同id
  flowId: string(name='flow_id'),
  // 分页第几页
  pageIndex: long(name='page_index'),
  // 每页的大小
  pageSize: long(name='page_size'),
}

model ListContractOuttradeidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误码
  code?: long(name='code'),
  // 错误信息描述
  errMessage?: string(name='err_message'),
  // 总符合条件的交易个数
  total?: long(name='total'),
  // 所有符合条件交易相关的id
  outTradeNo?: [ string ](name='out_trade_no'),
}

/**
 * Description: 列举本租户合同相关交易
 * Summary: 列举本租户合同相关交易
 */
async function listContractOuttradeid(request: ListContractOuttradeidRequest): ListContractOuttradeidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listContractOuttradeidEx(request, headers, runtime);
}

/**
 * Description: 列举本租户合同相关交易
 * Summary: 列举本租户合同相关交易
 */
async function listContractOuttradeidEx(request: ListContractOuttradeidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListContractOuttradeidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.outtradeid.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContractTradedetailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 合同id
  flowId: string(name='flow_id'),
  // out_trade_no
  outTradeNo: string(name='out_trade_no'),
}

model QueryContractTradedetailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误码
  code?: long(name='code'),
  // 订单详情
  data?: string(name='data'),
  // 错误信息描述
  errMessage?: string(name='err_message'),
}

/**
 * Description: 根据订单id查询订单代扣详情
 * Summary: 根据订单id查询订单代扣详情
 */
async function queryContractTradedetail(request: QueryContractTradedetailRequest): QueryContractTradedetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContractTradedetailEx(request, headers, runtime);
}

/**
 * Description: 根据订单id查询订单代扣详情
 * Summary: 根据订单id查询订单代扣详情
 */
async function queryContractTradedetailEx(request: QueryContractTradedetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContractTradedetailResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.tradedetail.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContractMerchantrefundRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 合同id
  flowId: string(name='flow_id'),
  // 退款请求对应的第三方ID（也叫退款ID），需保证同一平台方下唯一
  outRequestNo: string(name='out_request_no'),
  // 订单id
  outTradeNo: string(name='out_trade_no'),
  // 退款金额（单位：分）
  refundAmount: long(name='refund_amount'),
}

model CreateContractMerchantrefundResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误码
  code?: long(name='code'),
  // 错误信息描述
  message?: string(name='message'),
  // 本次请求对应的操作单号
  outRequestNo?: string(name='out_request_no'),
  // 订单id
  outTradeNo?: string(name='out_trade_no'),
}

/**
 * Description: 商户根据订单id退款
 * Summary: 商户根据订单id退款
 */
async function createContractMerchantrefund(request: CreateContractMerchantrefundRequest): CreateContractMerchantrefundResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContractMerchantrefundEx(request, headers, runtime);
}

/**
 * Description: 商户根据订单id退款
 * Summary: 商户根据订单id退款
 */
async function createContractMerchantrefundEx(request: CreateContractMerchantrefundRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContractMerchantrefundResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.merchantrefund.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContractAdminaccountRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model CreateContractAdminaccountResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误码
  code?: long(name='code'),
  // 错误信息描述
  errMessage?: string(name='err_message'),
}

/**
 * Description: 创建蚂蚁区块链账户
 * Summary: 创建蚂蚁区块链账户
 */
async function createContractAdminaccount(request: CreateContractAdminaccountRequest): CreateContractAdminaccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContractAdminaccountEx(request, headers, runtime);
}

/**
 * Description: 创建蚂蚁区块链账户
 * Summary: 创建蚂蚁区块链账户
 */
async function createContractAdminaccountEx(request: CreateContractAdminaccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContractAdminaccountResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.adminaccount.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListContractTradeidsRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 合同id
  flowId: string(name='flow_id'),
  // 1
  pageIndex: long(name='page_index'),
  // 页面大小
  pageSize: long(name='page_size'),
}

model ListContractTradeidsResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 0表示成功
  code?: long(name='code'),
  // 错误信息描述
  errMessage?: string(name='err_message'),
  // 所有item的个数
  total?: long(name='total'),
  // 所有满足条件的订单
  outTradeNo?: [ string ](name='out_trade_no'),
}

/**
 * Description: 商户根据合同id列举所有的tradeId
 * Summary: 商户根据合同id列举所有的tradeId
 */
async function listContractTradeids(request: ListContractTradeidsRequest): ListContractTradeidsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listContractTradeidsEx(request, headers, runtime);
}

/**
 * Description: 商户根据合同id列举所有的tradeId
 * Summary: 商户根据合同id列举所有的tradeId
 */
async function listContractTradeidsEx(request: ListContractTradeidsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListContractTradeidsResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.tradeids.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContractCommontriggerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 代扣规则详情
  repaymentOrderInfo: [ RepaymentOrderRequest ](name='repayment_order_info'),
  // 合同id
  flowId: string(name='flow_id'),
  // 用户在智能合同平台的身份
  userTuid: string(name='user_tuid'),
}

model CreateContractCommontriggerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误码
  code?: long(name='code'),
  // 错误信息描述
  errMessage?: string(name='err_message'),
  // 合同id
  flowId?: string(name='flow_id'),
  // 商户在智能合同平台id
  platformTuid?: string(name='platform_tuid'),
  // 用户在智能合同平台的id
  userTuid?: string(name='user_tuid'),
}

/**
 * Description: 商户上传代扣规则
 * Summary: 商户上传代扣规则
 */
async function createContractCommontrigger(request: CreateContractCommontriggerRequest): CreateContractCommontriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContractCommontriggerEx(request, headers, runtime);
}

/**
 * Description: 商户上传代扣规则
 * Summary: 商户上传代扣规则
 */
async function createContractCommontriggerEx(request: CreateContractCommontriggerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContractCommontriggerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.commontrigger.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContractMerchantindirectzftRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 入驻材料
  bizContent: string(name='biz_content'),
}

model CreateContractMerchantindirectzftResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 传入参数内容
  body?: string(name='body'),
  // 错误码
  code?: long(name='code'),
  // 错误信息描述
  message?: string(name='message'),
  // 订单id
  orderId?: string(name='order_id'),
  // 支付宝返回的二级错误信息
  subCode?: string(name='sub_code'),
  // 支付宝返回的二级错误信息描述
  subMsg?: string(name='sub_msg'),
}

/**
 * Description: 商户入驻直付通
 * Summary: 商户入驻直付通
 */
async function createContractMerchantindirectzft(request: CreateContractMerchantindirectzftRequest): CreateContractMerchantindirectzftResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContractMerchantindirectzftEx(request, headers, runtime);
}

/**
 * Description: 商户入驻直付通
 * Summary: 商户入驻直付通
 */
async function createContractMerchantindirectzftEx(request: CreateContractMerchantindirectzftRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContractMerchantindirectzftResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.merchantindirectzft.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContractMerchantindirectzftRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 商户入驻查询订单id
  orderId: string(name='order_id'),
}

model QueryContractMerchantindirectzftResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误状态码，0表示成功
  code?: long(name='code'),
  // 错误信息描述
  message?: string(name='message'),
  // 额外信息，包含smid
  extInfo?: string(name='ext_info'),
  // 支付宝的ipRoleId
  ipRoleId?: [ string ](name='ip_role_id'),
  // 申请时间
  applyId?: string(name='apply_id'),
  // 商户名称
  merchantName?: string(name='merchant_name'),
  // 直付通商户进件的状态
  status?: string(name='status'),
  // 支付宝返回的错误状态码
  subCode?: string(name='sub_code'),
  // 支付宝返回的错误信息描述
  subMsg?: string(name='sub_msg'),
}

/**
 * Description: 根据订单id查询直付通商户入驻信息
 * Summary: 根据订单id查询直付通商户入驻信息
 */
async function queryContractMerchantindirectzft(request: QueryContractMerchantindirectzftRequest): QueryContractMerchantindirectzftResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContractMerchantindirectzftEx(request, headers, runtime);
}

/**
 * Description: 根据订单id查询直付通商户入驻信息
 * Summary: 根据订单id查询直付通商户入驻信息
 */
async function queryContractMerchantindirectzftEx(request: QueryContractMerchantindirectzftRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContractMerchantindirectzftResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.merchantindirectzft.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryPayresultfileurlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 对账日期
  billDate: string(name='bill_date'),
  // 交易类型
  billType: string(name='bill_type'),
}

model QueryPayresultfileurlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 对账文件的下载地址
  payUrl?: string(name='pay_url'),
}

/**
 * Description: 获取支付对账文件的url
 * Summary: 获取支付对账文件的url
 */
async function queryPayresultfileurl(request: QueryPayresultfileurlRequest): QueryPayresultfileurlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryPayresultfileurlEx(request, headers, runtime);
}

/**
 * Description: 获取支付对账文件的url
 * Summary: 获取支付对账文件的url
 */
async function queryPayresultfileurlEx(request: QueryPayresultfileurlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryPayresultfileurlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.payresultfileurl.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContractMerchantimageRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 图片内容，base64
  content: string(name='content'),
  // 图片名称，必须带标准图片后缀
  fileName: string(name='file_name'),
}

model CreateContractMerchantimageResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 图片在oss上的id
  imageId?: string(name='image_id'),
}

/**
 * Description: 智能合同图片上传
 * Summary: 智能合同图片上传
 */
async function createContractMerchantimage(request: CreateContractMerchantimageRequest): CreateContractMerchantimageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContractMerchantimageEx(request, headers, runtime);
}

/**
 * Description: 智能合同图片上传
 * Summary: 智能合同图片上传
 */
async function createContractMerchantimageEx(request: CreateContractMerchantimageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContractMerchantimageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.merchantimage.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelContractPaytradeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 智能合同id
  flowId: string(name='flow_id'),
}

model CancelContractPaytradeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误码
  code?: long(name='code'),
  // 错误信息描述
  errMessage?: string(name='err_message'),
  // 取消的代扣条目
  canceledOutTradeNo?: [ string ](name='canceled_out_trade_no'),
}

/**
 * Description: 取消智能合同剩余代扣条目
 * Summary: 取消智能合同剩余代扣条目
 */
async function cancelContractPaytrade(request: CancelContractPaytradeRequest): CancelContractPaytradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelContractPaytradeEx(request, headers, runtime);
}

/**
 * Description: 取消智能合同剩余代扣条目
 * Summary: 取消智能合同剩余代扣条目
 */
async function cancelContractPaytradeEx(request: CancelContractPaytradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelContractPaytradeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.paytrade.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContractHandsignflowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 是否自动归档，默认false。如设置为true，当所有签署人签署完毕，系统自动将流程归档，状态变为“已完成”状态，在流程状态为“已完成”前，可随时添加签署人；如设置为false，则在调用签署流程开启后，需主动调用签署流程归档接口，将流程状态变更为“已完成”，归档前可随时添加签署人；已完成的流程才可下载签署后的文件。
  autoArchive?: boolean(name='auto_archive'),
  // 文件主题
  businessScene: string(name='business_scene'),
  // 任务配置信息
  configInfo?: ContractSignFlowConfig(name='config_info'),
  // 文件到期前，提前多久回调提醒续签，单位为小时，时间区间：1小时——15天（360小时），默认不提醒
  contractRemind?: long(name='contract_remind'),
  // 文件有效截止日期,毫秒，默认不失效
  contractValidity?: long(name='contract_validity'),
  // 发起人账户id，即发起本次签署的操作人个人账号id；如不传，默认由对接平台发起
  initiatorAccountId?: string(name='initiator_account_id'),
  // 发起方主体id，如存在个人代机构发起签约，则需传入机构id；如不传，则默认是对接平台
  initiatorAuthorizedAccountId?: string(name='initiator_authorized_account_id'),
  // 签署有效截止日期,毫秒，默认不失效
  signValidity?: long(name='sign_validity'),
}

model CreateContractHandsignflowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 流程ID
  flowId?: string(name='flow_id'),
  // 业务码信息
  message?: string(name='message'),
}

/**
 * Description: 创建手动签署流程
 * Summary: 创建手动签署流程
 */
async function createContractHandsignflow(request: CreateContractHandsignflowRequest): CreateContractHandsignflowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContractHandsignflowEx(request, headers, runtime);
}

/**
 * Description: 创建手动签署流程
 * Summary: 创建手动签署流程
 */
async function createContractHandsignflowEx(request: CreateContractHandsignflowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContractHandsignflowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.handsignflow.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContractHandsignfieldRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 流程id
  flowId: string(name='flow_id'),
  // 签署区列表数据
  signFields: [ ContractHandSignFieldApplication ](name='sign_fields'),
}

model CreateContractHandsignfieldResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
  // 签署区列表数据
  signfields?: [ ContractSignField ](name='signfields'),
}

/**
 * Description: 向指定流程中创建签署区，每个签署区视为一个任务，系统会自动按照流程流转。 签署区的添加必须在签署文档添加之后, 签署区信息内部包含签署文档信息。签署区创建完成，流程开启后，通过获取签署地址接口，可获取用户手动签署链接，通过此链接可打开文件签署页面，进行人工确认签署。
 * Summary: 添加电子合同签署方手动盖章签署区
 */
async function createContractHandsignfield(request: CreateContractHandsignfieldRequest): CreateContractHandsignfieldResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContractHandsignfieldEx(request, headers, runtime);
}

/**
 * Description: 向指定流程中创建签署区，每个签署区视为一个任务，系统会自动按照流程流转。 签署区的添加必须在签署文档添加之后, 签署区信息内部包含签署文档信息。签署区创建完成，流程开启后，通过获取签署地址接口，可获取用户手动签署链接，通过此链接可打开文件签署页面，进行人工确认签署。
 * Summary: 添加电子合同签署方手动盖章签署区
 */
async function createContractHandsignfieldEx(request: CreateContractHandsignfieldRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContractHandsignfieldResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.handsignfield.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetContractSignurlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 签署人账号id
  accountId: string(name='account_id'),
  // 流程id
  flowId: string(name='flow_id'),
  // 存量参数，已废弃
  organizeId?: string(name='organize_id'),
  // 是否需要同时返回短链接，默认为false
  shortUrl?: boolean(name='short_url'),
  // 本功能需要单独审批开放。当account_id为机构账户时，可以在执行签署时单独指定经办人账户，代为完成本次签署操作。
  agentAccountId?: string(name='agent_account_id'),
}

model GetContractSignurlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
  // 长链地址
  url?: string(name='url'),
  // 短链地址
  shortUrl?: string(name='short_url'),
}

/**
 * Description: 流程开启后，获取指定签署人的签署链接地址，如仅传入签署人账号id，则获取的签署任务链接仅包含本人的签署任务；如同时签署人账号id+机构id，则获取的签署任务链接包含机构与个人的签署任务；organizeId传入0，则返回的任务链接包含签署人“本人+所有代签机构”的签署任务。
 * Summary: 获取签署地址
 */
async function getContractSignurl(request: GetContractSignurlRequest): GetContractSignurlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getContractSignurlEx(request, headers, runtime);
}

/**
 * Description: 流程开启后，获取指定签署人的签署链接地址，如仅传入签署人账号id，则获取的签署任务链接仅包含本人的签署任务；如同时签署人账号id+机构id，则获取的签署任务链接包含机构与个人的签署任务；organizeId传入0，则返回的任务链接包含签署人“本人+所有代签机构”的签署任务。
 * Summary: 获取签署地址
 */
async function getContractSignurlEx(request: GetContractSignurlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetContractSignurlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.signurl.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateWithholdAgreementRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授信总金额，单位元
  creditAmount: string(name='credit_amount'),
  // 商户签约号，代扣协议中标示用户的唯一签约号（确保在商户系统中唯一）
  externalAgreementNo: string(name='external_agreement_no'),
  // 收款方账号类型，可取值：ALIPAY_USER_ID（支付宝uid);商户id，2088123412341234
  merchantId: string(name='merchant_id'),
  // 商户名称
  merchantName: string(name='merchant_name'),
  // 对服务产品的描述
  merchantServiceDescription?: string(name='merchant_service_description'),
  // 商户的服务名称，滴滴出行免密支付
  merchantServiceName: string(name='merchant_service_name'),
  // 姓名和身份证号拼接sha256的hash
  nameCertHash: string(name='name_cert_hash'),
  // 还款计划的链接
  repaymentUrl: string(name='repayment_url'),
  // 签约成功后回调的地址
  returnUrl?: string(name='return_url'),
  // 第三方用户id
  thirdPartyId: string(name='third_party_id'),
}

model CreateWithholdAgreementResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 可信付代扣规则内容创建
 * Summary: 可信付代扣规则内容创建
 */
async function createWithholdAgreement(request: CreateWithholdAgreementRequest): CreateWithholdAgreementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createWithholdAgreementEx(request, headers, runtime);
}

/**
 * Description: 可信付代扣规则内容创建
 * Summary: 可信付代扣规则内容创建
 */
async function createWithholdAgreementEx(request: CreateWithholdAgreementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateWithholdAgreementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.withhold.agreement.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryWithholdAgreementRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 商户签约号，代扣协议中标示用户的唯一签约号（确保在商户系统中唯一）
  externalAgreementNo: string(name='external_agreement_no'),
  // 第三方用户id
  thirdPartyId: string(name='third_party_id'),
}

model QueryWithholdAgreementResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 总授信金额
  creditAmount?: string(name='credit_amount'),
  // 商家的支付宝uid
  merchantId?: string(name='merchant_id'),
  // 商户名称
  merchantName?: string(name='merchant_name'),
  // 商户的服务名称
  merchantServiceName?: string(name='merchant_service_name'),
  // 姓名身份证号拼接后的hash
  nameCertHash?: string(name='name_cert_hash'),
  // 还款计划的超链接
  repaymentUrl?: string(name='repayment_url'),
  // 协议的状态，如果签署成功返回success,未签是空
  status?: string(name='status'),
  // 第三方的用户id
  thirdPartyId?: string(name='third_party_id'),
  // 商家请求的协议号
  externalAgreementNo?: string(name='external_agreement_no'),
}

/**
 * Description: 查询消金代扣协议
 * Summary: 查询可信付代扣协议内容
 */
async function queryWithholdAgreement(request: QueryWithholdAgreementRequest): QueryWithholdAgreementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryWithholdAgreementEx(request, headers, runtime);
}

/**
 * Description: 查询消金代扣协议
 * Summary: 查询可信付代扣协议内容
 */
async function queryWithholdAgreementEx(request: QueryWithholdAgreementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryWithholdAgreementResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.withhold.agreement.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryWithholdAgreementurlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 商户签约号，代扣协议中标示用户的唯一签约号（确保在商户系统中唯一）
  externalAgreementNo: string(name='external_agreement_no'),
  // 第三方用户id
  thirdPartyId: string(name='third_party_id'),
}

model QueryWithholdAgreementurlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 成功
  resultMessage?: string(name='result_message'),
  // 代扣协议签署的入口
  url?: string(name='url'),
}

/**
 * Description: 查询可信付协议的入口
 * Summary: 查询可信付协议的入口
 */
async function queryWithholdAgreementurl(request: QueryWithholdAgreementurlRequest): QueryWithholdAgreementurlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryWithholdAgreementurlEx(request, headers, runtime);
}

/**
 * Description: 查询可信付协议的入口
 * Summary: 查询可信付协议的入口
 */
async function queryWithholdAgreementurlEx(request: QueryWithholdAgreementurlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryWithholdAgreementurlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.withhold.agreementurl.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateWithholdOverduetimeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 首款方id
  merchantId: string(name='merchant_id'),
  // 商家名称
  merchantName: string(name='merchant_name'),
  // 商家提供的产品名称
  merchantServiceName: string(name='merchant_service_name'),
  // 租户id
  tenantId: string(name='tenant_id'),
}

model CreateWithholdOverduetimeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 后台录入商家的产品的逾期日
 * Summary: 后台录入商家的产品的逾期日
 */
async function createWithholdOverduetime(request: CreateWithholdOverduetimeRequest): CreateWithholdOverduetimeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createWithholdOverduetimeEx(request, headers, runtime);
}

/**
 * Description: 后台录入商家的产品的逾期日
 * Summary: 后台录入商家的产品的逾期日
 */
async function createWithholdOverduetimeEx(request: CreateWithholdOverduetimeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateWithholdOverduetimeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.withhold.overduetime.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendWithholdDeductRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 委托支付订单总金额，单位为元，精确到小数点后两位
  amount: string(name='amount'),
  // JSON格式，传递业务扩展参数
  businessParams?: string(name='business_params'),
  // 商户签约号，代扣协议中标示用户的唯一签约号（确保在商户系统中唯一）
  externalAgreementNo: string(name='external_agreement_no'),
  // 订单标题信息
  orderTitle?: string(name='order_title'),
  // 外部订单号,请求方保证唯一性
  outBizNo: string(name='out_biz_no'),
  // 备注
  remark?: string(name='remark'),
  // 第三方的用户id
  thirdPartyId: string(name='third_party_id'),
}

model SendWithholdDeductResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 该笔转账在支付宝系统内部的单据ID
  entrustOrderId?: string(name='entrust_order_id'),
  // INIT：受理成功，扣款中
  // FINISHED：扣款成功
  // CLOSED：商户已关单
  status?: string(name='status'),
}

/**
 * Description: 可信付代扣的扣费请求
 * Summary: 发送代扣请求
 */
async function sendWithholdDeduct(request: SendWithholdDeductRequest): SendWithholdDeductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendWithholdDeductEx(request, headers, runtime);
}

/**
 * Description: 可信付代扣的扣费请求
 * Summary: 发送代扣请求
 */
async function sendWithholdDeductEx(request: SendWithholdDeductRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendWithholdDeductResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.withhold.deduct.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryWithholdPayresultRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 请求扣款时，返回的委托单号,该笔转账在支付宝系统内部的单据ID
  entrustOrderId: string(name='entrust_order_id'),
  // 外部订单号,请求方保证唯一性
  outBizNo: string(name='out_biz_no'),
}

model QueryWithholdPayresultResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 支付完成日期
  payDate?: string(name='pay_date'),
  // 支付宝支付单据号
  payOrderId?: string(name='pay_order_id'),
  // INIT：受理成功，扣款中
  // FINISHED：扣款成功
  // CLOSED：商户已关单
  status?: string(name='status'),
  // 扣款金额
  transAmount?: string(name='trans_amount'),
}

/**
 * Description: 可信付代扣结果查询
 * Summary: 可信付代扣结果查询
 */
async function queryWithholdPayresult(request: QueryWithholdPayresultRequest): QueryWithholdPayresultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryWithholdPayresultEx(request, headers, runtime);
}

/**
 * Description: 可信付代扣结果查询
 * Summary: 可信付代扣结果查询
 */
async function queryWithholdPayresultEx(request: QueryWithholdPayresultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryWithholdPayresultResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.withhold.payresult.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendWithholdRefundRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 支付宝支付单据号
  orderId: string(name='order_id'),
  // 外部订单号,请求方保证唯一性
  outRequestNo: string(name='out_request_no'),
  // 需要退款的金额，该金额不能大于订单金额,单位为元，支持两位小数
  refundAmount: string(name='refund_amount'),
  // 退款备注
  remark: string(name='remark'),
}

model SendWithholdRefundResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 需要退款的金额，该金额不能大于订单金额,单位为元，支持两位小数
  refundAmount?: string(name='refund_amount'),
  // 退款成功的日期
  refundDate?: string(name='refund_date'),
  // 退款的支付宝系统内部单据id
  refundOrderId?: string(name='refund_order_id'),
  // FINISHED,退款成功的状态值
  status?: string(name='status'),
}

/**
 * Description: 可信付退款请求
 * Summary: 可信付退款请求
 */
async function sendWithholdRefund(request: SendWithholdRefundRequest): SendWithholdRefundResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendWithholdRefundEx(request, headers, runtime);
}

/**
 * Description: 可信付退款请求
 * Summary: 可信付退款请求
 */
async function sendWithholdRefundEx(request: SendWithholdRefundRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendWithholdRefundResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.withhold.refund.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SendContractInvitationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务方id，重定向和回调时都回传这个id
  bizProcessId?: string(name='biz_process_id'),
  // 回调接口地址，默认为空，不回调
  callbackUrl?: string(name='callback_url'),
  // 被邀请人邮箱，若手机号和邮箱都传入，则仅手机号有效
  email?: string(name='email'),
  // 被邀请人证件号
  idNumber?: string(name='id_number'),
  // 被邀请人证件类型，详见个人证件类型说明 ，默认CRED_PSN_CH_IDCARD
  inviteeCertType?: string(name='invitee_cert_type'),
  // 邀请个人实名为PERSON，邀请企业为ORGAN
  inviteType: string(name='invite_type'),
  // 企业法定代表人证件类型，详见个人证件类型说明 ，默认CRED_PSN_CH_IDCARD
  legalCertType?: string(name='legal_cert_type'),
  // 企业法定代表人姓名
  legalName?: string(name='legal_name'),
  // 企业法定代表人证件号
  legalNo?: string(name='legal_no'),
  // 被邀请人手机号
  mobile?: string(name='mobile'),
  // 被邀请人姓名
  name?: string(name='name'),
  // 默认为空，传入“sms”表示短信，“email”表示邮件，若两者都传入，则只发送短信
  notifyType?: string(name='notify_type'),
  // 企业证件号
  organCertNo?: string(name='organ_cert_no'),
  // 企业证件类型，详见机构证件类型说明 ，默认CRED_ORG_USCC
  organCertType?: string(name='organ_cert_type'),
  // 企业名称
  organName?: string(name='organ_name'),
  // 结束后重定向地址（需加前缀https:// 或 http:// ），默认停留在当前页面
  redirectUrl?: string(name='redirect_url'),
}

model SendContractInvitationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 邀请任务id
  invitationId?: string(name='invitation_id'),
  // 邀请链接
  invitationUrl?: string(name='invitation_url'),
  // 业务码信息
  message?: string(name='message'),
}

/**
 * Description: 创建邀请任务，被邀请人收到通知后需要注册并完成实名认证方可开通电子签名服务。
 * Summary: 创建注册邀请任务
 */
async function sendContractInvitation(request: SendContractInvitationRequest): SendContractInvitationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return sendContractInvitationEx(request, headers, runtime);
}

/**
 * Description: 创建邀请任务，被邀请人收到通知后需要注册并完成实名认证方可开通电子签名服务。
 * Summary: 创建注册邀请任务
 */
async function sendContractInvitationEx(request: SendContractInvitationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendContractInvitationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.invitation.send', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListContractPayruleRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // flowId
  flowId: string(name='flow_id'),
}

model ListContractPayruleResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码，0表示成功
  code?: long(name='code'),
  // ""
  errMessage?: string(name='err_message'),
  // 代扣规则描述json表示
  responseData?: string(name='response_data'),
}

/**
 * Description: 查询代扣规则
 * Summary: 查询代扣规则
 */
async function listContractPayrule(request: ListContractPayruleRequest): ListContractPayruleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listContractPayruleEx(request, headers, runtime);
}

/**
 * Description: 查询代扣规则
 * Summary: 查询代扣规则
 */
async function listContractPayruleEx(request: ListContractPayruleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListContractPayruleResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.payrule.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateWithholdQrcodeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 第三方的用户id
  thirdPartyId: string(name='third_party_id'),
  // 请求签约的协议号
  externalAgreementNo: string(name='external_agreement_no'),
}

model CreateWithholdQrcodeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 二维码图片链接地址
  qrCodeUrl?: string(name='qr_code_url'),
}

/**
 * Description: 获取可信付免签协议的二维码
 * Summary: 获取可信付免签协议的二维码
 */
async function createWithholdQrcode(request: CreateWithholdQrcodeRequest): CreateWithholdQrcodeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createWithholdQrcodeEx(request, headers, runtime);
}

/**
 * Description: 获取可信付免签协议的二维码
 * Summary: 获取可信付免签协议的二维码
 */
async function createWithholdQrcodeEx(request: CreateWithholdQrcodeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateWithholdQrcodeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.withhold.qrcode.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CancelContractPaysingletradeRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 智能合同id
  flowId: string(name='flow_id'),
  // 被取消的某一期的代扣id
  cancelOutOrderNo: string(name='cancel_out_order_no'),
}

model CancelContractPaysingletradeResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误码，0表示成功
  code?: long(name='code'),
  // 错误信息描述
  errMessage?: string(name='err_message'),
  // 被取消的某一期代扣订单id
  canceledOutTradeNo?: string(name='canceled_out_trade_no'),
}

/**
 * Description: 取消某一期的代扣规则
 * Summary: 取消某一期的代扣规则
 */
async function cancelContractPaysingletrade(request: CancelContractPaysingletradeRequest): CancelContractPaysingletradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return cancelContractPaysingletradeEx(request, headers, runtime);
}

/**
 * Description: 取消某一期的代扣规则
 * Summary: 取消某一期的代扣规则
 */
async function cancelContractPaysingletradeEx(request: CancelContractPaysingletradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelContractPaysingletradeResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.paysingletrade.cancel', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyContractCallbackkeyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model ApplyContractCallbackkeyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 加签使用的key
  key?: string(name='key'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
}

/**
 * Description: 使用区块链合同回调服务，需要申请加签时使用的key。该key每个平台方对应一个，不可变更，多次申请结果幂等。
 * Summary: 申请区块链合同回调加签key
 */
async function applyContractCallbackkey(request: ApplyContractCallbackkeyRequest): ApplyContractCallbackkeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyContractCallbackkeyEx(request, headers, runtime);
}

/**
 * Description: 使用区块链合同回调服务，需要申请加签时使用的key。该key每个平台方对应一个，不可变更，多次申请结果幂等。
 * Summary: 申请区块链合同回调加签key
 */
async function applyContractCallbackkeyEx(request: ApplyContractCallbackkeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyContractCallbackkeyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.callbackkey.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContractOnestepflowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 是否自动归档，默认false。
  autoArchive?: boolean(name='auto_archive'),
  // 是否自动开启，默认false。
  autoInitiate?: boolean(name='auto_initiate'),
  // 文件主题
  businessScene: string(name='business_scene'),
  // 流程备注
  comment?: string(name='comment'),
  // 任务配置信息
  contractSignFlowConfig?: ContractSignFlowConfig(name='contract_sign_flow_config'),
  // 待签文档信息
  docs?: [ ContractDoc ](name='docs'),
  // 发起人账户id，即发起本次签署的操作人个人账号id；如不传，默认由对接平台发起
  initiatorAccountId?: string(name='initiator_account_id'),
  // 发起方主体id，如存在个人代机构发起签约，则需传入机构id；如不传，则默认是对接平台
  initiatorAuthorizedAccountId?: string(name='initiator_authorized_account_id'),
  // 流程中的签署区信息
  signFields?: [ OneStepSignField ](name='sign_fields'),
  // 签署平台，ALIPAY（支付宝小程序）或H5，默认H5
  signPlatform?: string(name='sign_platform'),
  // 签署有效截止日期，毫秒，默认3天失效
  signValidity?: long(name='sign_validity'),
}

model CreateContractOnestepflowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 流程ID
  flowId?: string(name='flow_id'),
  // 业务码信息
  message?: string(name='message'),
}

/**
 * Description: 快速创建签署流程，完成添加待签文档、流程基本信息、签署方，支持自动开启、自动归档。
 * Summary: 一步创建签署流程接口
 */
async function createContractOnestepflow(request: CreateContractOnestepflowRequest): CreateContractOnestepflowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContractOnestepflowEx(request, headers, runtime);
}

/**
 * Description: 快速创建签署流程，完成添加待签文档、流程基本信息、签署方，支持自动开启、自动归档。
 * Summary: 一步创建签署流程接口
 */
async function createContractOnestepflowEx(request: CreateContractOnestepflowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContractOnestepflowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.onestepflow.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContractNotaryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 签署流程ID
  flowId: string(name='flow_id'),
}

model QueryContractNotaryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
  // 存证信息列表
  notaries?: [ ContractNotaryInfo ](name='notaries'),
}

/**
 * Description: 通过流程ID查询合同存证信息
 * Summary: 查询合同存证信息
 */
async function queryContractNotary(request: QueryContractNotaryRequest): QueryContractNotaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContractNotaryEx(request, headers, runtime);
}

/**
 * Description: 通过流程ID查询合同存证信息
 * Summary: 查询合同存证信息
 */
async function queryContractNotaryEx(request: QueryContractNotaryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContractNotaryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.notary.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateEcocontractTransRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证关联实体（个人/企业）的身份识别信息
  customer: Identity(name='customer'),
  // 扩展属性
  properties?: string(name='properties'),
  // 业务子类型标识
  subBizId?: string(name='sub_biz_id'),
  // 是否使用可信时间戳，默认为false
  tsr?: boolean(name='tsr'),
}

model CreateEcocontractTransResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回事务ID，全局唯一
  transactionId?: string(name='transaction_id'),
  // 可信时间信息
  tsr?: TsrResponse(name='tsr'),
}

/**
 * Description: 获取合同存证事务ID
 * Summary: 获取合同存证事务ID
 */
async function createEcocontractTrans(request: CreateEcocontractTransRequest): CreateEcocontractTransResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createEcocontractTransEx(request, headers, runtime);
}

/**
 * Description: 获取合同存证事务ID
 * Summary: 获取合同存证事务ID
 */
async function createEcocontractTransEx(request: CreateEcocontractTransRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateEcocontractTransResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.ecocontract.trans.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateEcocontractTextRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 签署结束信息，phase为FINISH时必选
  finishInfo?: ContractNotaryFinishInfo(name='finish_info'),
  // 签署流程ID
  flowId: string(name='flow_id'),
  // 签署发起信息，phase为INIT时必选
  initInfo?: ContractNotaryInitInfo(name='init_info'),
  // 存证阶段，分为INIT(发起)，SIGN(签署)，FINISH(结束)
  phase: string(name='phase'),
  // 签署过程信息，phase为SIGN时必选
  signInfo?: ContractNotarySignInfo(name='sign_info'),
  // 存证事务ID
  transactionId: string(name='transaction_id'),
  // 签署文件存档阶段存证核验信息
  documentInfo?: ContractNotaryDocumentInfo(name='document_info'),
}

model CreateEcocontractTextResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证凭据,
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 合同文本存证
 * Summary: 合同文本存证
 */
async function createEcocontractText(request: CreateEcocontractTextRequest): CreateEcocontractTextResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createEcocontractTextEx(request, headers, runtime);
}

/**
 * Description: 合同文本存证
 * Summary: 合同文本存证
 */
async function createEcocontractTextEx(request: CreateEcocontractTextRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateEcocontractTextResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.ecocontract.text.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContractWordspositionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 文档id
  fileId: string(name='file_id'),
  // 关键字列表，逗号分割；注意要英文的逗号，不能中文逗号；关键字建议不要设置特殊字符，因Adobe无法识别部分符号，某些特殊字符会因解析失败从而导致搜索不到
  keywords: string(name='keywords'),
}

model QueryContractWordspositionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
  // 文档id
  fileId?: string(name='file_id'),
  // 关键字位置列表
  data?: [ KeywordsPosition ](name='data'),
}

/**
 * Description: 搜索关键字坐标，以关键字左下角为原点去查询坐标
 * Summary: 搜索关键字坐标
 */
async function queryContractWordsposition(request: QueryContractWordspositionRequest): QueryContractWordspositionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContractWordspositionEx(request, headers, runtime);
}

/**
 * Description: 搜索关键字坐标，以关键字左下角为原点去查询坐标
 * Summary: 搜索关键字坐标
 */
async function queryContractWordspositionEx(request: QueryContractWordspositionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContractWordspositionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.wordsposition.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteContractSignerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 签署流程ID
  flowId: string(name='flow_id'),
  // 签署人ID
  accountId: string(name='account_id'),
}

model DeleteContractSignerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
}

/**
 * Description: 执行签署人删除逻辑
 * Summary: 删除签署人
 */
async function deleteContractSigner(request: DeleteContractSignerRequest): DeleteContractSignerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteContractSignerEx(request, headers, runtime);
}

/**
 * Description: 执行签署人删除逻辑
 * Summary: 删除签署人
 */
async function deleteContractSignerEx(request: DeleteContractSignerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteContractSignerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.signer.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetContractCertificateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 签署流程ID
  flowId: string(name='flow_id'),
}

model GetContractCertificateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 下载文件地址(一小时内有效)
  url?: string(name='url'),
  // 状态值
  code?: long(name='code'),
  // 	状态信息描述
  message?: string(name='message'),
}

/**
 * Description: 获取区块链合同存证证明
 * Summary: 获取区块链合同存证证明
 */
async function getContractCertificate(request: GetContractCertificateRequest): GetContractCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getContractCertificateEx(request, headers, runtime);
}

/**
 * Description: 获取区块链合同存证证明
 * Summary: 获取区块链合同存证证明
 */
async function getContractCertificateEx(request: GetContractCertificateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetContractCertificateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.certificate.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContractSignfieldsealidRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 流程id
  flowId: string(name='flow_id'),
  // 账号id，默认所有签署人
  accountId?: string(name='account_id'),
  // 指定签署区id列表，逗号分割，默认所有签署区
  signfieldIds?: string(name='signfield_ids'),
}

model QueryContractSignfieldsealidResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: string(name='code'),
  // 业务码信息
  message?: string(name='message'),
  // 签署区列表数据
  signfields?: [ ContractSignFieldSealId ](name='signfields'),
}

/**
 * Description: 已归档的合同，支持根据合同流程签署区查询已使用的印章id
 * Summary: 根据合同流程签署区查询已使用的印章id
 */
async function queryContractSignfieldsealid(request: QueryContractSignfieldsealidRequest): QueryContractSignfieldsealidResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContractSignfieldsealidEx(request, headers, runtime);
}

/**
 * Description: 已归档的合同，支持根据合同流程签署区查询已使用的印章id
 * Summary: 根据合同流程签署区查询已使用的印章id
 */
async function queryContractSignfieldsealidEx(request: QueryContractSignfieldsealidRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContractSignfieldsealidResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.signfieldsealid.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model NotifyContractSignerRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 合同签署流程ID
  flowId: string(name='flow_id'),
}

model NotifyContractSignerResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功。
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
  // 发送通知的用户账号列表
  accountList?: [ string ](name='account_list'),
}

/**
 * Description: 本接口功能默认不开启，如有需求请联系技术支持。添加手动签署区，并启动签署流程之后，触发通知，提醒签署方执行签署。通知方式以创建流程时的配置为准（目前仅支持短信）。
 * Summary: 通知签署方执行合同签署
 */
async function notifyContractSigner(request: NotifyContractSignerRequest): NotifyContractSignerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return notifyContractSignerEx(request, headers, runtime);
}

/**
 * Description: 本接口功能默认不开启，如有需求请联系技术支持。添加手动签署区，并启动签署流程之后，触发通知，提醒签署方执行签署。通知方式以创建流程时的配置为准（目前仅支持短信）。
 * Summary: 通知签署方执行合同签署
 */
async function notifyContractSignerEx(request: NotifyContractSignerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): NotifyContractSignerResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.signer.notify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateContractPlatformRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 平台方企业信息
  platform: ContractPlatformOrganizationApplication(name='platform'),
  // 平台方经办人信息
  creator?: ContractPlatformAccountApplication(name='creator'),
}

model UpdateContractPlatformResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码
  code?: string(name='code'),
  // 状态信息
  message?: string(name='message'),
  // 更新后平台方企业信息
  platform?: ContractPlatformApplication(name='platform'),
  // 更新后平台方经办人信息
  creator?: ContractCreatorApplication(name='creator'),
}

/**
 * Description: 通过配置白名单，临时允许修改证件号/名称等所有字段以及经办人的信息，修改后从白名单中去除
 * Summary: 修改平台方注册信息
 */
async function updateContractPlatform(request: UpdateContractPlatformRequest): UpdateContractPlatformResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateContractPlatformEx(request, headers, runtime);
}

/**
 * Description: 通过配置白名单，临时允许修改证件号/名称等所有字段以及经办人的信息，修改后从白名单中去除
 * Summary: 修改平台方注册信息
 */
async function updateContractPlatformEx(request: UpdateContractPlatformRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateContractPlatformResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.platform.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateContractUserRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 邮箱地址，默认不变
  email?: string(name='email'),
  // 证件号，该字段只有为空才允许修改
  idNumber?: string(name='id_number'),
  // 证件类型，默认为身份证
  idType?: string(name='id_type'),
  // 手机号码，默认不变
  mobile?: string(name='mobile'),
  // 姓名，默认不变
  name?: string(name='name'),
  // 用户账号id，注册用户返回的个人账号id
  userId: string(name='user_id'),
}

model UpdateContractUserResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码
  code?: string(name='code'),
  // 状态信息
  message?: string(name='message'),
  // 邮箱地址
  email?: string(name='email'),
  // 证件号
  idNumber?: string(name='id_number'),
  // 证件类型
  idType?: string(name='id_type'),
  // 手机号码
  mobile?: string(name='mobile'),
  // 姓名
  name?: string(name='name'),
  // 用户账号id
  userId?: string(name='user_id'),
}

/**
 * Description: 个人的注册信息中证件信息为空时允许修改姓名、证件等各项信息，如果不为空，则不允许修改
 * Summary: 修改用户注册信息
 */
async function updateContractUser(request: UpdateContractUserRequest): UpdateContractUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateContractUserEx(request, headers, runtime);
}

/**
 * Description: 个人的注册信息中证件信息为空时允许修改姓名、证件等各项信息，如果不为空，则不允许修改
 * Summary: 修改用户注册信息
 */
async function updateContractUserEx(request: UpdateContractUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateContractUserResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.user.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateContractOrganizationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 证件号，该字段只有为空才允许修改
  idNumber?: string(name='id_number'),
  // 证件类型 ，默认CRED_ORG_USCC
  idType?: string(name='id_type'),
  // 企业法定代表人名称
  legalPerson?: string(name='legal_person'),
  // 企业法定代表人证件号
  legalPersonId?: string(name='legal_person_id'),
  // 机构名称
  name?: string(name='name'),
  // 机构账号id，注册机构账户时返回的机构账号id
  organizationId: string(name='organization_id'),
}

model UpdateContractOrganizationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 证件号
  idNumber?: string(name='id_number'),
  // 证件类型
  idType?: string(name='id_type'),
  // 企业法人名称
  legalPerson?: string(name='legal_person'),
  // 企业法人证件号
  legalPersonId?: string(name='legal_person_id'),
  // 机构名称
  name?: string(name='name'),
  // 机构账号id
  organizationId?: string(name='organization_id'),
}

/**
 * Description: 机构的注册信息中证件信息为空时允许修改机构名、证件等各项信息，但不允许修改经办人信息，如果不为空，则无法修改  
 * Summary: 修改机构用户注册信息
 */
async function updateContractOrganization(request: UpdateContractOrganizationRequest): UpdateContractOrganizationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateContractOrganizationEx(request, headers, runtime);
}

/**
 * Description: 机构的注册信息中证件信息为空时允许修改机构名、证件等各项信息，但不允许修改经办人信息，如果不为空，则无法修改  
 * Summary: 修改机构用户注册信息
 */
async function updateContractOrganizationEx(request: UpdateContractOrganizationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateContractOrganizationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.organization.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyContractMerchantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 入驻材料
  bizContent: string(name='biz_content'),
  // 代理商户账户ID，此参数不填默认平台机构账户入驻
  agentAccountId?: string(name='agent_account_id'),
}

model ApplyContractMerchantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否进件成功
  success?: boolean(name='success'),
  // 进件子结果码，0 成功，1 代理商户已进件，2 商户已进件，请走挂接接口进行代理商挂接，3 商户进件中
  subCode?: long(name='sub_code'),
  // 进件失败原因
  subMsg?: string(name='sub_msg'),
  // 已进件商户信息（当cert_no对应的商户已经进件过，会返回完整的已进件的商户信息）
  merchantInfo?: string(name='merchant_info'),
  // 已进件成功的商户ID（当cert_no表示的商户已经进件过，会返回进件生成的商户ID）
  smid?: string(name='smid'),
  // 订单ID
  orderId?: string(name='order_id'),
}

/**
 * Description: 商户入驻直付通新接口，通过此接口创建的商户，签约模式默认走单独签约授权模式（即不同商户都需要进行单独的代扣签约授权）。
 * Summary: 商户入驻直付通新接口
 */
async function applyContractMerchant(request: ApplyContractMerchantRequest): ApplyContractMerchantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyContractMerchantEx(request, headers, runtime);
}

/**
 * Description: 商户入驻直付通新接口，通过此接口创建的商户，签约模式默认走单独签约授权模式（即不同商户都需要进行单独的代扣签约授权）。
 * Summary: 商户入驻直付通新接口
 */
async function applyContractMerchantEx(request: ApplyContractMerchantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyContractMerchantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.merchant.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmContractMerchantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 商户入驻查询订单id
  orderId: string(name='order_id'),
  // 代理商户账户ID，此参数不填默认平台机构账户入驻
  agentAccountId?: string(name='agent_account_id'),
}

model ConfirmContractMerchantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 额外信息，包含smid
  extInfo?: string(name='ext_info'),
  // 支付宝的ipRoleId
  ipRoleId?: [ string ](name='ip_role_id'),
  // 申请时间
  applyId?: string(name='apply_id'),
  // 商户名称
  merchantName?: string(name='merchant_name'),
  // 直付通商户进件的状态
  status?: string(name='status'),
}

/**
 * Description: 直付通商户入驻确认（确认成功则表明入驻成功）
 * Summary: 直付通商户入驻确认
 */
async function confirmContractMerchant(request: ConfirmContractMerchantRequest): ConfirmContractMerchantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmContractMerchantEx(request, headers, runtime);
}

/**
 * Description: 直付通商户入驻确认（确认成功则表明入驻成功）
 * Summary: 直付通商户入驻确认
 */
async function confirmContractMerchantEx(request: ConfirmContractMerchantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmContractMerchantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.merchant.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreatePrivatecontractTransRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证关联实体（个人/企业）的身份识别信息
  customer: Identity(name='customer'),
  // 扩展属性
  properties?: string(name='properties'),
  // 业务子类型标识
  subBizId?: string(name='sub_biz_id'),
  // 是否使用可信时间戳，默认为false
  tsr?: boolean(name='tsr'),
}

model CreatePrivatecontractTransResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回事务ID，全局唯一
  transactionId?: string(name='transaction_id'),
  // 可信时间信息
  tsr?: TsrResponse(name='tsr'),
}

/**
 * Description: 创建合同存证事务ID。私有云使用。
 * Summary: 创建合同存证事务ID。私有云使用。
 */
async function createPrivatecontractTrans(request: CreatePrivatecontractTransRequest): CreatePrivatecontractTransResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createPrivatecontractTransEx(request, headers, runtime);
}

/**
 * Description: 创建合同存证事务ID。私有云使用。
 * Summary: 创建合同存证事务ID。私有云使用。
 */
async function createPrivatecontractTransEx(request: CreatePrivatecontractTransRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreatePrivatecontractTransResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.privatecontract.trans.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreatePrivatecontractTextRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 签署结束信息，phase为FINISH时必选
  finishInfo?: ContractNotaryFinishInfo(name='finish_info'),
  // 签署流程ID
  flowId: string(name='flow_id'),
  // 	签署发起信息，phase为INIT时必选
  initInfo?: ContractNotaryInitInfo(name='init_info'),
  // 存证阶段，分为INIT(发起)，SIGN(签署)，FINISH(结束)
  phase: string(name='phase'),
  // 签署过程信息，phase为SIGN时必选
  signInfo?: ContractNotarySignInfo(name='sign_info'),
  // 存证事务ID
  transactionId: string(name='transaction_id'),
  // 签署文件存档阶段存证核验信息
  documentInfo?: ContractNotaryDocumentInfo(name='document_info'),
}

model CreatePrivatecontractTextResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证凭据,
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 合同文本存证。私有云使用。
 * Summary: 合同文本存证。私有云使用。
 */
async function createPrivatecontractText(request: CreatePrivatecontractTextRequest): CreatePrivatecontractTextResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createPrivatecontractTextEx(request, headers, runtime);
}

/**
 * Description: 合同文本存证。私有云使用。
 * Summary: 合同文本存证。私有云使用。
 */
async function createPrivatecontractTextEx(request: CreatePrivatecontractTextRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreatePrivatecontractTextResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.privatecontract.text.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyPrivatepersonTwometaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 个人信息
  personInfo: PersonInfo(name='person_info'),
  // 私有云实例id
  instanceId: string(name='instance_id'),
}

model VerifyPrivatepersonTwometaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 调用返回值。"0"为调用成功。
  code?: string(name='code'),
  // 校验是否通过。
  pass?: boolean(name='pass'),
  // 错误信息描述
  message?: string(name='message'),
}

/**
 * Description: 个人二要素校验
 * Summary: 个人二要素校验
 */
async function verifyPrivatepersonTwometa(request: VerifyPrivatepersonTwometaRequest): VerifyPrivatepersonTwometaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyPrivatepersonTwometaEx(request, headers, runtime);
}

/**
 * Description: 个人二要素校验
 * Summary: 个人二要素校验
 */
async function verifyPrivatepersonTwometaEx(request: VerifyPrivatepersonTwometaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyPrivatepersonTwometaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.privateperson.twometa.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyPrivatecompanyTwometaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 私有云实例id
  instanceId: string(name='instance_id'),
  // 企业信息
  companyTwoMetaInfo: CompanyTwoMetaInfo(name='company_two_meta_info'),
}

model VerifyPrivatecompanyTwometaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 调用返回值。"0"为调用成功。
  code?: string(name='code'),
  // 校验是否通过。
  pass?: boolean(name='pass'),
  // 错误信息描述
  message?: string(name='message'),
}

/**
 * Description: 企业二要素校验
 * Summary: 企业二要素校验
 */
async function verifyPrivatecompanyTwometa(request: VerifyPrivatecompanyTwometaRequest): VerifyPrivatecompanyTwometaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyPrivatecompanyTwometaEx(request, headers, runtime);
}

/**
 * Description: 企业二要素校验
 * Summary: 企业二要素校验
 */
async function verifyPrivatecompanyTwometaEx(request: VerifyPrivatecompanyTwometaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyPrivatecompanyTwometaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.privatecompany.twometa.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model VerifyPrivatecompanyFourmetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 私有云实例id
  instanceId: string(name='instance_id'),
  // 企业信息
  companyFourMetaInfo: CompanyFourMetaInfo(name='company_four_meta_info'),
}

model VerifyPrivatecompanyFourmetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 调用返回值。"0"为调用成功。
  code?: string(name='code'),
  // 校验是否通过。
  pass?: boolean(name='pass'),
  // 错误信息描述
  message?: string(name='message'),
}

/**
 * Description: 企业四要素校验
 * Summary: 企业四要素校验
 */
async function verifyPrivatecompanyFourmeta(request: VerifyPrivatecompanyFourmetaRequest): VerifyPrivatecompanyFourmetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return verifyPrivatecompanyFourmetaEx(request, headers, runtime);
}

/**
 * Description: 企业四要素校验
 * Summary: 企业四要素校验
 */
async function verifyPrivatecompanyFourmetaEx(request: VerifyPrivatecompanyFourmetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyPrivatecompanyFourmetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.privatecompany.fourmeta.verify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyPrivatecontractCertRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 私有云实例id
  instanceId: string(name='instance_id'),
  // 私有云系统内部生成的id
  userInnerId: string(name='user_inner_id'),
  // 用户类型,个人PERSON，企业ORG
  userType: string(name='user_type'),
  // 用户名称, 个人为个人名称，企业为企业名称
  userName: string(name='user_name'),
  // 用户证件类型，默认个人,身份证CRED_PSN_CH_IDCARD；
  // 企业,统一社会信用代码,CRED_ORG_USCC
  userCertType: string(name='user_cert_type'),
  // 证件号码
  userCertNumber: string(name='user_cert_number'),
}

model ApplyPrivatecontractCertResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 注册是否成功
  success?: boolean(name='success'),
  // 返回code,200成功，其他均为失败
  code?: string(name='code'),
  // 返回信息，成功返回success，错误时会返回详细信息。
  message?: string(name='message'),
  // 用户的CA证书办法机构
  certAuthOrg?: string(name='cert_auth_org'),
  // 用户的CA证书序列号
  certSerialNumber?: string(name='cert_serial_number'),
  // 用户证书过期时间
  certEndTime?: long(name='cert_end_time'),
}

/**
 * Description: 开放给私有云的外部用户的注册接口.
 * Summary: 私有云的外部用户注册接口.
 */
async function applyPrivatecontractCert(request: ApplyPrivatecontractCertRequest): ApplyPrivatecontractCertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyPrivatecontractCertEx(request, headers, runtime);
}

/**
 * Description: 开放给私有云的外部用户的注册接口.
 * Summary: 私有云的外部用户注册接口.
 */
async function applyPrivatecontractCertEx(request: ApplyPrivatecontractCertRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyPrivatecontractCertResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.privatecontract.cert.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContractTradestatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 代扣计划外部订单号
  outTradeNo: string(name='out_trade_no'),
}

model QueryContractTradestatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 代扣计划的外部订单号
  outTradeNo?: string(name='out_trade_no'),
  // 最近一次扣款触发时间戳（单位：ms）
  deductTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='deduct_time'),
  // 创建代扣计划时设置的扣款时间戳（单位：ms）
  payDate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='pay_date'),
  // 计划扣款金额（单位：分）
  payMoney?: long(name='pay_money'),
  // 扣款状态
  // PAY_TOBE_TRIGGER 初始未扣款
  // TRADE_IN_PROGRESS 扣款中
  // TRADE_REFUNDED 已发生退款
  // TRADE_END 交易终止（未成功）
  // TRADE_SUCCESS 扣款成功
  // TRADE_FAIL 扣款失败
  // TRADE_FINISHED 交易终止（扣款成功，并且距离首次扣款超过180天）
  // TRADE_CANCEL 代扣取消
  status?: string(name='status'),
}

/**
 * Description: 代扣计划状态查询接口，仅能查询到由新状态机执行的代扣计划，未切换到新状态机的老数据查询不到
 * Summary: 代扣计划状态查询
 */
async function queryContractTradestatus(request: QueryContractTradestatusRequest): QueryContractTradestatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContractTradestatusEx(request, headers, runtime);
}

/**
 * Description: 代扣计划状态查询接口，仅能查询到由新状态机执行的代扣计划，未切换到新状态机的老数据查询不到
 * Summary: 代扣计划状态查询
 */
async function queryContractTradestatusEx(request: QueryContractTradestatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContractTradestatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.tradestatus.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContractRefundRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 退款ID，用户调用退款接口时传入的自定义第三方id
  refundId: string(name='refund_id'),
}

model QueryContractRefundResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 退款id
  refundId?: string(name='refund_id'),
  // 退款时间（时间戳，单位：ms）
  refundTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='refund_time'),
  // 本次退款请求的退款金额（单位：分）
  refundAmount?: long(name='refund_amount'),
  // 退款状态
  // REFUNDING 退款中
  // SUCCESS 退款成功
  // FAIL 退款失败
  status?: string(name='status'),
  // 退款错误信息
  errMsg?: string(name='err_msg'),
}

/**
 * Description: 代扣退款查询，仅支持新代扣状态机处理过的数据，老状态机处理的数据无法查到。
 * Summary: 代扣退款查询
 */
async function queryContractRefund(request: QueryContractRefundRequest): QueryContractRefundResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContractRefundEx(request, headers, runtime);
}

/**
 * Description: 代扣退款查询，仅支持新代扣状态机处理过的数据，老状态机处理的数据无法查到。
 * Summary: 代扣退款查询
 */
async function queryContractRefundEx(request: QueryContractRefundRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContractRefundResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.refund.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetPrivatecontractSignurlRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 私有云实例id
  instanceId: string(name='instance_id'),
  // 签署流程ID
  flowId: string(name='flow_id'),
  // 签署用户的内部ID
  userInnerId: string(name='user_inner_id'),
  // 签署平台，默认为H5页面，浏览器打开；也可填写ALIPAY，使用支付宝小程序打开
  signPlatform?: string(name='sign_platform'),
  // 签署流程过期时间
  expirationTime: long(name='expiration_time'),
}

model GetPrivatecontractSignurlResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 流程签署地址
  signUrl?: string(name='sign_url'),
  // 返回code,200成功，其他均为失败
  code?: string(name='code'),
  // 返回信息，成功返回success，错误时会返回详细信息。
  message?: string(name='message'),
}

/**
 * Description: 私有云合同服务通过调用公有云合同服务，获取可公网访问的外部客户的签署地址
 * Summary: 私有云服务获取外部用户签署地址
 */
async function getPrivatecontractSignurl(request: GetPrivatecontractSignurlRequest): GetPrivatecontractSignurlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getPrivatecontractSignurlEx(request, headers, runtime);
}

/**
 * Description: 私有云合同服务通过调用公有云合同服务，获取可公网访问的外部客户的签署地址
 * Summary: 私有云服务获取外部用户签署地址
 */
async function getPrivatecontractSignurlEx(request: GetPrivatecontractSignurlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPrivatecontractSignurlResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.privatecontract.signurl.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryContractMerchantorderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 申请单id，通过twc.notary.contract.merchant.apply或者twc.notary.contract.merchantindirectzft.create接口返回的order_id
  orderId: string(name='order_id'),
}

model QueryContractMerchantorderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 申请单id
  orderId?: string(name='order_id'),
  // 外部商户id
  externalId?: string(name='external_id'),
  // 进件时填写的商户名称
  merchantName?: string(name='merchant_name'),
  // 申请总体状态。99:已完结;-1:失败;031:审核中
  status?: string(name='status'),
  // 申请单创建时间
  applyTime?: string(name='apply_time'),
  // 风控审核状态。CREATE：已创建待审批、SKIP：跳过风控审批步骤、PASS：风控审核通过、REJECT：风控审批拒绝
  fkAudit?: string(name='fk_audit'),
  // 风控审批备注，如有则返回
  fkAuditMemo?: string(name='fk_audit_memo'),
  // 客资审核状态。CREATE：已创建待审批、SKIP：跳过客资审批步骤、PASS：客资审核通过、REJECT：客资审批拒绝
  kzAudit?: string(name='kz_audit'),
  // 客资审批备注，如有则返回
  kzAuditMemo?: string(name='kz_audit_memo'),
  // 二级商户确认状态。CREATE：已发起二级商户确认、SKIP：无需确认、FAIL：签约失败、NOT_CONFIRM：商户未确认、FINISH签约完成
  subConfirm?: string(name='sub_confirm'),
  // 进件生成的卡编号，在发起结算时可以作为结算账号
  cardAliasNo?: string(name='card_alias_no'),
  // 二级商户id。当总体申请状态status为99时，smid才算进件完成
  smid?: string(name='smid'),
  // 本申请单的请求类型。一般可选值包括ZHIFUTONG_CONSULT（直付通商户预校验）/ZHIFUTONG_CREATE（直付通商户创建）/ZHIFUTONG_MODIFY（直付通商户修改）
  applyType?: string(name='apply_type'),
  // 申请单处理失败时，通过此此段返回具体的失败理由；与kf_audit_memo和kz_audit_memo配合使用
  reason?: string(name='reason'),
}

/**
 * Description: 商户入驻直付通进度查询，替代twc.notary.contract.merchantindirectzft.query
 * Summary: 商户入驻直付通进度查询
 */
async function queryContractMerchantorder(request: QueryContractMerchantorderRequest): QueryContractMerchantorderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryContractMerchantorderEx(request, headers, runtime);
}

/**
 * Description: 商户入驻直付通进度查询，替代twc.notary.contract.merchantindirectzft.query
 * Summary: 商户入驻直付通进度查询
 */
async function queryContractMerchantorderEx(request: QueryContractMerchantorderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryContractMerchantorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.merchantorder.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateContractMerchantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 内容和商户进件信息类似，唯一区别在于此接口biz_content不要传external_id，改为传之前进件获取到的商户id信息smid，具体可见示例。
  bizContent: string(name='biz_content'),
}

model UpdateContractMerchantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 修改进件信息会产生修改订单，此字段标识修改订单id
  orderId?: string(name='order_id'),
}

/**
 * Description: 修改商户进件信息，单商户可能被多个用户代理，信息修改会生效到所有代理用户上。
 * Summary: 商户进件信息修改
 */
async function updateContractMerchant(request: UpdateContractMerchantRequest): UpdateContractMerchantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateContractMerchantEx(request, headers, runtime);
}

/**
 * Description: 修改商户进件信息，单商户可能被多个用户代理，信息修改会生效到所有代理用户上。
 * Summary: 商户进件信息修改
 */
async function updateContractMerchantEx(request: UpdateContractMerchantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateContractMerchantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.merchant.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model BindContractMerchantRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 商户ID
  smid: string(name='smid'),
  // 商户证件号
  certNo: string(name='cert_no'),
  // 代理用户id，不填默认挂接平台方
  agentAccountId?: string(name='agent_account_id'),
}

model BindContractMerchantResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否挂接成功
  success?: boolean(name='success'),
}

/**
 * Description: 一个二级商户可以挂接多个平台方用户，此接口可以对已进件的商户进行挂接操作。
 * Summary: 二级商户代理挂接接口
 */
async function bindContractMerchant(request: BindContractMerchantRequest): BindContractMerchantResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return bindContractMerchantEx(request, headers, runtime);
}

/**
 * Description: 一个二级商户可以挂接多个平台方用户，此接口可以对已进件的商户进行挂接操作。
 * Summary: 二级商户代理挂接接口
 */
async function bindContractMerchantEx(request: BindContractMerchantRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BindContractMerchantResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.merchant.bind', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitPrivatecontractIntanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 私有化服务地址（可不上传，后续通过更新实例信息的接口进行服务地址填充）
  serviceUrl?: string(name='service_url'),
  // 开通服务的用户租户ID
  tenantId: string(name='tenant_id'),
}

model InitPrivatecontractIntanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 私有化服务实例ID
  instanceId?: string(name='instance_id'),
  // 签名私钥的base64格式字符串
  privateKey?: string(name='private_key'),
  // 验签公钥的base64格式字符串
  publicKey?: string(name='public_key'),
  // 回调使用的签名私钥
  privateKeyCallback?: string(name='private_key_callback'),
  // 回调使用的验签公钥
  publicKeyCallback?: string(name='public_key_callback'),
}

/**
 * Description: 初始化私有化合同服务实例，生成服务验签的公/私钥，以及回调使用的公/私钥
 * Summary: 初始化新的私有化合同服务实例
 */
async function initPrivatecontractIntance(request: InitPrivatecontractIntanceRequest): InitPrivatecontractIntanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initPrivatecontractIntanceEx(request, headers, runtime);
}

/**
 * Description: 初始化私有化合同服务实例，生成服务验签的公/私钥，以及回调使用的公/私钥
 * Summary: 初始化新的私有化合同服务实例
 */
async function initPrivatecontractIntanceEx(request: InitPrivatecontractIntanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitPrivatecontractIntanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.privatecontract.intance.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdatePrivatecontractIntanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 私有化服务地址
  serviceUrl: string(name='service_url'),
  // 实例ID
  instanceId: string(name='instance_id'),
}

model UpdatePrivatecontractIntanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 更新已有的私有化合同服务实例信息，如私有化服务地址
 * Summary: 更新私有化合同服务实例信息
 */
async function updatePrivatecontractIntance(request: UpdatePrivatecontractIntanceRequest): UpdatePrivatecontractIntanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updatePrivatecontractIntanceEx(request, headers, runtime);
}

/**
 * Description: 更新已有的私有化合同服务实例信息，如私有化服务地址
 * Summary: 更新私有化合同服务实例信息
 */
async function updatePrivatecontractIntanceEx(request: UpdatePrivatecontractIntanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdatePrivatecontractIntanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.privatecontract.intance.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncInnerTransRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 事务id
  id: long(name='id'),
  // 存证事务id
  transactionId: string(name='transaction_id'),
  // 存证的用户id
  accountId: string(name='account_id'),
  // 业务id
  bizId: long(name='biz_id'),
  // 子业务id
  subBizId?: string(name='sub_biz_id'),
  // 存证主体的json字符串
  customer?: string(name='customer'),
  // 存证初始化时间
  registerTime: long(name='register_time'),
  // 到期时间
  expireTime?: long(name='expire_time'),
  // 扩展属性
  properties?: string(name='properties'),
  // 是否有效
  active?: boolean(name='active'),
  // 交易hash
  txHash?: string(name='tx_hash'),
}

model SyncInnerTransResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: baas-notary向notarycore同步生成的事务数据，仅做数据同步使用
 * Summary: 向notarycore同步事务数据
 */
async function syncInnerTrans(request: SyncInnerTransRequest): SyncInnerTransResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncInnerTransEx(request, headers, runtime);
}

/**
 * Description: baas-notary向notarycore同步生成的事务数据，仅做数据同步使用
 * Summary: 向notarycore同步事务数据
 */
async function syncInnerTransEx(request: SyncInnerTransRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncInnerTransResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.inner.trans.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncInnerNotaryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // DB的存证id
  id: long(name='id'),
  // 事务id
  transactionId: string(name='transaction_id'),
  // 交易hash
  txHash?: string(name='tx_hash'),
  // 阶段
  phase: string(name='phase'),
  // 内容hash
  contentHash: string(name='content_hash'),
  // 创建时间
  createTime?: long(name='create_time'),
  // 存证类型
  notaryType: string(name='notary_type'),
  // 大小
  notarySize?: long(name='notary_size'),
  // 用户id
  accountId: string(name='account_id'),
  // 业务id
  bizId: long(name='biz_id'),
  // 子业务id
  subBizId?: string(name='sub_biz_id'),
  // 是否需要可信时间
  tsr?: boolean(name='tsr'),
}

model SyncInnerNotaryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 从baas-notary向notarycore同步存证数据
 * Summary: 向notarycore同步存证数据
 */
async function syncInnerNotary(request: SyncInnerNotaryRequest): SyncInnerNotaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncInnerNotaryEx(request, headers, runtime);
}

/**
 * Description: 从baas-notary向notarycore同步存证数据
 * Summary: 向notarycore同步存证数据
 */
async function syncInnerNotaryEx(request: SyncInnerNotaryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncInnerNotaryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.inner.notary.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncInnerTwcopenRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // id
  id: long(name='id'),
  // 租户id
  tenantId: string(name='tenant_id'),
  // 产品code
  productCode: string(name='product_code'),
  // 状态
  status: string(name='status'),
  // 业务id
  bizId: long(name='biz_id'),
  // 开通渠道
  orderChannel: long(name='order_channel'),
  // 创建时间
  gmtCreate: long(name='gmt_create'),
  // 修改时间
  gmtModified: long(name='gmt_modified'),
}

model SyncInnerTwcopenResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 从baas-notary向notarycore同步自租户信息
 * Summary: 向notarycore同步子租户数据
 */
async function syncInnerTwcopen(request: SyncInnerTwcopenRequest): SyncInnerTwcopenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncInnerTwcopenEx(request, headers, runtime);
}

/**
 * Description: 从baas-notary向notarycore同步自租户信息
 * Summary: 向notarycore同步子租户数据
 */
async function syncInnerTwcopenEx(request: SyncInnerTwcopenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncInnerTwcopenResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.inner.twcopen.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncInnerProvisionRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 自增id
  id: long(name='id'),
  // 创建时间
  gmtCreate: long(name='gmt_create'),
  // 修改时间
  gmtModified?: long(name='gmt_modified'),
  // 租户id
  tenantId: string(name='tenant_id'),
  // 租户名称
  tenantName?: string(name='tenant_name'),
  // 产品码
  productCode: string(name='product_code'),
  // 是否正式账号
  isOfficial?: boolean(name='is_official'),
  // 业务分类
  bizId: long(name='biz_id'),
  // 是否法院节点
  legalAccount?: boolean(name='legal_account'),
  // 服务状态
  status: long(name='status'),
  // 商品开通实例id
  instanceId?: string(name='instance_id'),
  // 订单渠道
  orderChannel?: long(name='order_channel'),
}

model SyncInnerProvisionResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 从baas-notary向notarycore同步租户权限数据
 * Summary: 向notarycore同步租户数据
 */
async function syncInnerProvision(request: SyncInnerProvisionRequest): SyncInnerProvisionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncInnerProvisionEx(request, headers, runtime);
}

/**
 * Description: 从baas-notary向notarycore同步租户权限数据
 * Summary: 向notarycore同步租户数据
 */
async function syncInnerProvisionEx(request: SyncInnerProvisionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncInnerProvisionResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.inner.provision.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncInnerTsrRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // tsr的token信息
  token: string(name='token'),
}

model SyncInnerTsrResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 从baas-notary向notarycore同步tsr数据
 * Summary: 向notarycore同步tsr数据
 */
async function syncInnerTsr(request: SyncInnerTsrRequest): SyncInnerTsrResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncInnerTsrEx(request, headers, runtime);
}

/**
 * Description: 从baas-notary向notarycore同步tsr数据
 * Summary: 向notarycore同步tsr数据
 */
async function syncInnerTsrEx(request: SyncInnerTsrRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncInnerTsrResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.inner.tsr.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckEpidentityTwometaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 认证企业名称。
  epCertName: string(name='ep_cert_name'),
  // 企业证件号码。
  epCertNo: string(name='ep_cert_no'),
}

model CheckEpidentityTwometaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 企业状态。
  enterpriseStatus?: string(name='enterprise_status'),
  // 营业期限。
  openTime?: string(name='open_time'),
  // 核验是否通过。
  passed?: boolean(name='passed'),
  // 0:核验成功 1:企业信息有误 2:企业非正常营业
  code?: string(name='code'),
}

/**
 * Description: 输入企业名+证件号，发起企业二要素认证请求。
 * Summary: 企业二要素认证
 */
async function checkEpidentityTwometa(request: CheckEpidentityTwometaRequest): CheckEpidentityTwometaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkEpidentityTwometaEx(request, headers, runtime);
}

/**
 * Description: 输入企业名+证件号，发起企业二要素认证请求。
 * Summary: 企业二要素认证
 */
async function checkEpidentityTwometaEx(request: CheckEpidentityTwometaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckEpidentityTwometaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.epidentity.twometa.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckEpidentityThreemetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 认证企业名称。
  epCertName: string(name='ep_cert_name'),
  // 企业证件号码。
  epCertNo: string(name='ep_cert_no'),
  // 企业法人姓名。
  legalPersonCertName: string(name='legal_person_cert_name'),
}

model CheckEpidentityThreemetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 企业状态。
  enterpriseStatus?: string(name='enterprise_status'),
  // 营业期限。
  openTime?: string(name='open_time'),
  // 核验是否通过。
  passed?: boolean(name='passed'),
  // 0:核验成功 1:企业信息有误 2:企业非正常营业
  code?: string(name='code'),
}

/**
 * Description: 输入企业名+证件号+企业法人姓名，发起企业三要素认证请求。
 * Summary: 企业三要素认证
 */
async function checkEpidentityThreemeta(request: CheckEpidentityThreemetaRequest): CheckEpidentityThreemetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkEpidentityThreemetaEx(request, headers, runtime);
}

/**
 * Description: 输入企业名+证件号+企业法人姓名，发起企业三要素认证请求。
 * Summary: 企业三要素认证
 */
async function checkEpidentityThreemetaEx(request: CheckEpidentityThreemetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckEpidentityThreemetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.epidentity.threemeta.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckEpidentityFourmetaRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 认证企业名称。
  epCertName: string(name='ep_cert_name'),
  // 企业证件号码。
  epCertNo: string(name='ep_cert_no'),
  // 企业法人姓名。
  legalPersonCertName: string(name='legal_person_cert_name'),
  // 企业法人身份证号码。
  legalPersonCertNo: string(name='legal_person_cert_no'),
}

model CheckEpidentityFourmetaResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 企业状态。
  enterpriseStatus?: string(name='enterprise_status'),
  // 营业期限。
  openTime?: string(name='open_time'),
  // 核验是否通过。
  passed?: boolean(name='passed'),
  // 0:核验成功 1:企业信息有误 2:企业非正常营业
  code?: string(name='code'),
}

/**
 * Description: 输入企业名+证件号+企业法人姓+法人证件号，发起企业四要素认证请求。
 * Summary: 企业四要素认证
 */
async function checkEpidentityFourmeta(request: CheckEpidentityFourmetaRequest): CheckEpidentityFourmetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkEpidentityFourmetaEx(request, headers, runtime);
}

/**
 * Description: 输入企业名+证件号+企业法人姓+法人证件号，发起企业四要素认证请求。
 * Summary: 企业四要素认证
 */
async function checkEpidentityFourmetaEx(request: CheckEpidentityFourmetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckEpidentityFourmetaResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.epidentity.fourmeta.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckNotarizationOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 公证订单ID号
  orderId: string(name='order_id'),
}

model CheckNotarizationOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 下单的业务类型ID列表
  bizId?: [ string ](name='biz_id'),
  // 实人认证接口调用授权码，与公证订单一一对应，有效次数默认为3次，超过调用次数则失效
  faceAuthCode?: string(name='face_auth_code'),
  // 下单客户的账号ID
  userId?: string(name='user_id'),
  // 是否为合法订单
  valid?: boolean(name='valid'),
  // 平台公证机构ID
  orgId?: string(name='org_id'),
}

/**
 * Description: 查询公证订单的有效性
 * Summary: 查询公证订单的有效性
 */
async function checkNotarizationOrder(request: CheckNotarizationOrderRequest): CheckNotarizationOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkNotarizationOrderEx(request, headers, runtime);
}

/**
 * Description: 查询公证订单的有效性
 * Summary: 查询公证订单的有效性
 */
async function checkNotarizationOrderEx(request: CheckNotarizationOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckNotarizationOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.notarization.order.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateNotarizationOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 公证订单ID
  orderId: string(name='order_id'),
  // 如果出证失败，需要给出失败原因
  reason?: string(name='reason'),
  // 出证状态的枚举值
  status: string(name='status'),
}

model UpdateNotarizationOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态是否更新成功
  accepted?: boolean(name='accepted'),
  // 如更新失败，返回失败原因
  reason?: string(name='reason'),
}

/**
 * Description: 更新公证订单状态
 * Summary: 更新公证订单状态
 */
async function updateNotarizationOrder(request: UpdateNotarizationOrderRequest): UpdateNotarizationOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateNotarizationOrderEx(request, headers, runtime);
}

/**
 * Description: 更新公证订单状态
 * Summary: 更新公证订单状态
 */
async function updateNotarizationOrderEx(request: UpdateNotarizationOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateNotarizationOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.notarization.order.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetNotarizationOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 公证事项ID
  bizCode?: string(name='biz_code'),
  // 需设置的属性名称
  key: string(name='key'),
  // 公证订单ID
  orderId: string(name='order_id'),
  // 被设置字段的值
  value: string(name='value'),
}

model SetNotarizationOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否设置成功
  accepted?: boolean(name='accepted'),
  // 如设置失败，返回失败原因
  reason?: string(name='reason'),
}

/**
 * Description: 设置订单属性
 * Summary: 设置订单属性
 */
async function setNotarizationOrder(request: SetNotarizationOrderRequest): SetNotarizationOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setNotarizationOrderEx(request, headers, runtime);
}

/**
 * Description: 设置订单属性
 * Summary: 设置订单属性
 */
async function setNotarizationOrderEx(request: SetNotarizationOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetNotarizationOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.notarization.order.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitIdentificationFaceauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 认证人的姓名
  certName: string(name='cert_name'),
  // 被验证者的身份证号码
  certNo: string(name='cert_no'),
  // 授权码，针对某些特定场景使用，非必填
  authCode?: string(name='auth_code'),
}

model InitIdentificationFaceauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 发起一个实人认证流程，获取到流程ID
  certifyId?: string(name='certify_id'),
}

/**
 * Description: 实人认证初始化
 * Summary: 实人认证初始化
 */
async function initIdentificationFaceauth(request: InitIdentificationFaceauthRequest): InitIdentificationFaceauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initIdentificationFaceauthEx(request, headers, runtime);
}

/**
 * Description: 实人认证初始化
 * Summary: 实人认证初始化
 */
async function initIdentificationFaceauthEx(request: InitIdentificationFaceauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitIdentificationFaceauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.identification.faceauth.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CertifyIdentificationFaceauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实人认证流程ID
  certifyId: string(name='certify_id'),
  // 认证流程结束回调通知地址，非必传
  callbackUrl?: string(name='callback_url'),
  // 认证结束后跳转地址，非必填
  redirectUrl?: string(name='redirect_url'),
  // 授权码，针对某些特定场景使用，非必填
  authCode?: string(name='auth_code'),
}

model CertifyIdentificationFaceauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 实人认证流程ID
  certifyId?: string(name='certify_id'),
  // 发起实人认证的地址
  verifyUrl?: string(name='verify_url'),
}

/**
 * Description: 发起实人认证
 * Summary: 发起实人认证
 */
async function certifyIdentificationFaceauth(request: CertifyIdentificationFaceauthRequest): CertifyIdentificationFaceauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return certifyIdentificationFaceauthEx(request, headers, runtime);
}

/**
 * Description: 发起实人认证
 * Summary: 发起实人认证
 */
async function certifyIdentificationFaceauthEx(request: CertifyIdentificationFaceauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CertifyIdentificationFaceauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.identification.faceauth.certify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryIdentificationFaceauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实人认证流程ID
  certifyId: string(name='certify_id'),
  // 授权码，针对某些特定场景使用，非必填
  authCode?: string(name='auth_code'),
}

model QueryIdentificationFaceauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 实人认证流程ID
  certifyId?: string(name='certify_id'),
  // 是否通过实人认证
  passed?: boolean(name='passed'),
}

/**
 * Description: 查询实人认证结果
 * Summary: 查询实人认证结果
 */
async function queryIdentificationFaceauth(request: QueryIdentificationFaceauthRequest): QueryIdentificationFaceauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryIdentificationFaceauthEx(request, headers, runtime);
}

/**
 * Description: 查询实人认证结果
 * Summary: 查询实人认证结果
 */
async function queryIdentificationFaceauthEx(request: QueryIdentificationFaceauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryIdentificationFaceauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.identification.faceauth.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryEnterpriseFaceauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业法人认证查询
  bizNo: string(name='biz_no'),
}

model QueryEnterpriseFaceauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 认证唯一性标识
  bizNo?: string(name='biz_no'),
  // 认证失败错误码
  failedCode?: string(name='failed_code'),
  // 认证是否通过
  passed?: boolean(name='passed'),
}

/**
 * Description: 企业法人认证查询结果接口
 * Summary: 企业法人认证查询
 */
async function queryEnterpriseFaceauth(request: QueryEnterpriseFaceauthRequest): QueryEnterpriseFaceauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryEnterpriseFaceauthEx(request, headers, runtime);
}

/**
 * Description: 企业法人认证查询结果接口
 * Summary: 企业法人认证查询
 */
async function queryEnterpriseFaceauthEx(request: QueryEnterpriseFaceauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryEnterpriseFaceauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.enterprise.faceauth.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitEnterpriseFaceauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 企业名称
  epCertName: string(name='ep_cert_name'),
  // 企业证件号
  epCertNo: string(name='ep_cert_no'),
  // 企业证件类型（NATIONAL_LEGAL（工商注册号）或 NATIONAL_LEGAL_MERGE （ 社会统一信用代码））
  epCertType: string(name='ep_cert_type'),
  // 企业法人姓名
  legalPersonCertName: string(name='legal_person_cert_name'),
  // 企业法人身份证号（目前仅支持身份证号）
  legalPersonCertNo: string(name='legal_person_cert_no'),
}

model InitEnterpriseFaceauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 本次认证的业务唯一性标示
  bizNo?: string(name='biz_no'),
}

/**
 * Description: 企业法人认证初始化接口
 * Summary: 企业法人认证初始化
 */
async function initEnterpriseFaceauth(request: InitEnterpriseFaceauthRequest): InitEnterpriseFaceauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initEnterpriseFaceauthEx(request, headers, runtime);
}

/**
 * Description: 企业法人认证初始化接口
 * Summary: 企业法人认证初始化
 */
async function initEnterpriseFaceauthEx(request: InitEnterpriseFaceauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitEnterpriseFaceauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.enterprise.faceauth.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CertifyEnterpriseFaceauthRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务唯一性标识
  bizNo: string(name='biz_no'),
  // 回调通知地址
  callbackUrl?: string(name='callback_url'),
  // 认证完成后回跳地址
  redirectUrl?: string(name='redirect_url'),
}

model CertifyEnterpriseFaceauthResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务唯一性标识
  bizNo?: string(name='biz_no'),
  // 认证 url
  verifyUrl?: string(name='verify_url'),
}

/**
 * Description: 企业法人认证开始接口
 * Summary: 企业法人认证开始
 */
async function certifyEnterpriseFaceauth(request: CertifyEnterpriseFaceauthRequest): CertifyEnterpriseFaceauthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return certifyEnterpriseFaceauthEx(request, headers, runtime);
}

/**
 * Description: 企业法人认证开始接口
 * Summary: 企业法人认证开始
 */
async function certifyEnterpriseFaceauthEx(request: CertifyEnterpriseFaceauthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CertifyEnterpriseFaceauthResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.enterprise.faceauth.certify', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseOrderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 账号标识，可弃用
  accountId?: string(name='account_id'),
  // 支付宝交易金额
  alipayOrderAmount: long(minimum=0, name='alipay_order_amount'),
  // 支付宝订单号
  alipayOrderNo: string(name='alipay_order_no'),
  // 支付宝交易总金额
  alipayOrderTotalAmount: long(minimum=0, name='alipay_order_total_amount'),
  // 免押金额
  depositWaiveAmount: long(minimum=0, name='deposit_waive_amount'),
  // 订单总保额，单位分，insured为True时必填
  insuranceCoverage?: long(minimum=0, name='insurance_coverage'),
  // 保单号，insured为True时必填，仅支持数字和字母
  insuranceOrderNo?: string(name='insurance_order_no'),
  // 商品名称
  itemName: string(name='item_name'),
  // 商品市场价格
  itemPrice: long(minimum=0, name='item_price'),
  // 商品类目
  itemType: string(name='item_type'),
  // 商户支付宝账号
  merchantAlipayAccount: string(name='merchant_alipay_account'),
  // 商户支付宝ID
  merchantAlipayId: string(name='merchant_alipay_id'),
  // 商户名称
  merchantName: string(name='merchant_name'),
  // 商户单号
  merchantOrderNo?: string(name='merchant_order_no'),
  // 支付渠道，包括支付宝（Alipay）、第三方收单机构（ThirdParty）、信用卡（CreditCard）、银行转账（BankTransfer）、微信（WeChatPay）、其他（Other）
  paymentChannel?: string(name='payment_channel'),
  // 租约结束日期
  tenancyTermEnd: long(minimum=0, name='tenancy_term_end'),
  // 租约起始日期
  tenancyTermStart: long(minimum=0, name='tenancy_term_start'),
  // 是否投保，默认为True
  insured?: boolean(name='insured'),
  // 保单查询地址，insured为True时必填
  insuranceOrderUrl?: string(name='insurance_order_url'),
  // 保险缴费单号，insured为True时必填，仅支持数字和字母，长度20
  insuranceBillNo?: string(name='insurance_bill_no'),
  // 保险缴费北京时间，格式为"YYYYMMDDHHMISS"，时区为UTC+8
  insuranceBillTime?: string(name='insurance_bill_time'),
  // 保险缴费金额，单位分
  insuranceBillAmount?: long(name='insurance_bill_amount'),
  // 订单产品保额，单位分，insured为True时必填
  insuranceProductCoverage?: long(name='insurance_product_coverage'),
}

model CreateLeaseOrderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否成功
  success?: boolean(name='success'),
}

/**
 * Description: 创建租赁订单
 * Summary: 租赁订单创建
 */
async function createLeaseOrder(request: CreateLeaseOrderRequest): CreateLeaseOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseOrderEx(request, headers, runtime);
}

/**
 * Description: 创建租赁订单
 * Summary: 租赁订单创建
 */
async function createLeaseOrderEx(request: CreateLeaseOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseOrderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.order.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateNotarizationBillRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 支付宝交易订单号
  alipayOrderNo?: string(name='alipay_order_no'),
  // 支付宝用户ID
  alipayUid?: string(name='alipay_uid'),
  // 申请者名称
  certName?: string(name='cert_name'),
  // 申请者证件号码：身份证号码（个人用户）或企业统一社会信用代码（企业用户）
  certNo?: string(name='cert_no'),
  // 电子公证书业务细项，如“200”对应出生公证
  eNotarizationBiz?: string(name='e_notarization_biz'),
  // 电子公证书下载地址
  eNotarizationDownloadUrl?: string(name='e_notarization_download_url'),
  // 电子公证书编号
  eNotarizationNo?: string(name='e_notarization_no'),
  // 电子公证书页数
  eNotarizationPageNo?: string(name='e_notarization_page_no'),
  // 电子公证书状态码
  eNotarizationStatus?: string(name='e_notarization_status'),
  // 电子公证书业务用途
  eNotarizationUsage?: string(name='e_notarization_usage'),
  // 电子公证书有效期
  eNotarizationValidDate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='e_notarization_valid_date'),
  // 企业法人姓名（企业用户必填）
  legalPersonName?: string(name='legal_person_name'),
  // 出证订单ID
  orderId?: string(name='order_id'),
  // 出证机构ID
  orgId?: string(name='org_id'),
  // 支付宝交易订单支付金额（人民币），单位为分
  paymentAmount?: long(name='payment_amount'),
  // 联系电话
  phone?: string(name='phone'),
  // 场景枚举：E_NOTARIZATION（电子公证），NOTARY_CERTIFICATION（存证证明）
  scenario: string(name='scenario'),
  // 申请者身份类型，1个人，2企业
  userType?: long(name='user_type'),
  // 是否为酬金分润方式，是则按照订金额一定比例分润，否则直接支付订单金额
  feeSplitting: boolean(name='fee_splitting'),
}

model CreateNotarizationBillResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 计费订单是否创建成功
  accepted?: boolean(name='accepted'),
}

/**
 * Description: 电子公证或存证证明场景中，用户通过回传相关信息创建收费订单。
 * Summary: 公证场景创建收费订单
 */
async function createNotarizationBill(request: CreateNotarizationBillRequest): CreateNotarizationBillResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createNotarizationBillEx(request, headers, runtime);
}

/**
 * Description: 电子公证或存证证明场景中，用户通过回传相关信息创建收费订单。
 * Summary: 公证场景创建收费订单
 */
async function createNotarizationBillEx(request: CreateNotarizationBillRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateNotarizationBillResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.notarization.bill.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitCertificationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 申请人的身份信息
  applier: Identity(name='applier'),
  // 存证证明所要展示的存证信息，可填多个
  notaryInfo: [ NotaryInfo ](name='notary_info'),
  // 存证证明的类型：STANDARD（标准存证证明）或COPYRIGHT（版权存证证明），默认为COPYRIGHT
  type?: string(name='type'),
}

model InitCertificationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回值状态码，0000则为成功
  code?: string(name='code'),
  // 异常状态时的错误信息
  message?: string(name='message'),
  // 后端生成的存证证明申请订单ID
  orderId?: string(name='order_id'),
  // 如果是记账模式则为空，其余情况返回支付宝SDK生成的支付内容信息
  payContent?: string(name='pay_content'),
}

/**
 * Description: 提供必要的存证信息，初始化一个存证证明的订单，提交公证处审核，并返回订单号
 * Summary: 初始化存证证明订单
 */
async function initCertification(request: InitCertificationRequest): InitCertificationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initCertificationEx(request, headers, runtime);
}

/**
 * Description: 提供必要的存证信息，初始化一个存证证明的订单，提交公证处审核，并返回订单号
 * Summary: 初始化存证证明订单
 */
async function initCertificationEx(request: InitCertificationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitCertificationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.certification.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryCertificationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证证明申请的订单ID
  orderId: string(name='order_id'),
}

model QueryCertificationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证证明的证书信息列表
  certificateInfo?: [ CertificateInfo ](name='certificate_info'),
  // 返回值状态码，0000则为成功
  code?: string(name='code'),
  // 异常状态时的错误信息
  message?: string(name='message'),
}

/**
 * Description: 输入申请ID，查询存证证明申请状态，成功后返回下载地址等信息
 * Summary: 查询存证证明申请状态
 */
async function queryCertification(request: QueryCertificationRequest): QueryCertificationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryCertificationEx(request, headers, runtime);
}

/**
 * Description: 输入申请ID，查询存证证明申请状态，成功后返回下载地址等信息
 * Summary: 查询存证证明申请状态
 */
async function queryCertificationEx(request: QueryCertificationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCertificationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.certification.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetTsrCertificateRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model GetTsrCertificateResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 可以根据存证过程中获得当可信时间戳凭证，获取国家授时中心颁发的PDF格式可信时间证书
 * Summary: 可信时间凭证服务 - 获取时间凭证证书
 */
async function getTsrCertificate(request: GetTsrCertificateRequest): GetTsrCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getTsrCertificateEx(request, headers, runtime);
}

/**
 * Description: 可以根据存证过程中获得当可信时间戳凭证，获取国家授时中心颁发的PDF格式可信时间证书
 * Summary: 可信时间凭证服务 - 获取时间凭证证书
 */
async function getTsrCertificateEx(request: GetTsrCertificateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTsrCertificateResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.tsr.certificate.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveJointconstraintRecordRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 收款账户
  beneficiaryAccountCode?: string(name='beneficiary_account_code'),
  // 收款账户类型
  // 
  // 1：支付宝
  beneficiaryAccountType?: long(name='beneficiary_account_type'),
  // 应收方证件号码
  // 
  // 
  beneficiaryCertNumber: string(name='beneficiary_cert_number'),
  // 应收方证件类型
  // 
  // 0：统一社会信用代码
  // 
  // 1：身份证号码
  beneficiaryCertType: long(name='beneficiary_cert_type'),
  // 	
  // 应收方类型
  // 
  // 0：企业
  // 
  // 1：个人
  beneficiaryType: long(name='beneficiary_type'),
  // 合同编号
  contractCode: string(name='contract_code'),
  // 合同履行记录标签
  contractFulfillmentCode: string(name='contract_fulfillment_code'),
  // 合同名称
  contractName: string(name='contract_name'),
  // 合同存证哈希
  contractTxhash: string(name='contract_txhash'),
  // 商户端合同链接
  // 
  // 从智能合同小程序中跳转至商户端查看合同内容链接
  externalUrl?: string(name='external_url'),
  // 所属行业，来自合同
  // 
  // 
  industryCode?: string(name='industry_code'),
  // 已付金额
  // 
  // 
  paidAmount?: string(name='paid_amount'),
  // 支付凭据
  // 
  // 
  paidProof?: string(name='paid_proof'),
  // 付款时间
  // 
  // 
  paidTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='paid_time'),
  // 付款账户
  // 
  // 
  payerAccountCode?: string(name='payer_account_code'),
  // 	
  // 付款账户类型
  // 
  // 1：支付宝
  payerAccountType?: long(name='payer_account_type'),
  // 应付方证件号码
  // 
  // 
  payerCertNumber: string(name='payer_cert_number'),
  // 应付方证件类型
  // 
  // 0：统一社会信用代码
  // 
  // 1：身份证号码
  payerCertType: long(name='payer_cert_type'),
  // 应付方类型
  // 
  // 0：企业
  // 
  // 1：个人
  payerType: long(name='payer_type'),
  // 履约标的金额
  // 
  // 
  paymentAmount: string(name='payment_amount'),
  // 履约宽限期，单位：天
  // 
  // 
  paymentDateBuffer?: long(name='payment_date_buffer'),
  // 目标履约日期
  // 
  // 
  paymentDeadline: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}([Z]|([\\\\.]\\\\d{1,9})?[\\\\+]\\\\d{2}[\\\\:]?\\\\d{2})', name='payment_deadline'),
}

model SaveJointconstraintRecordResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 新增/修改履行记录，依据contractCode与contractFulfillmentCode判断唯一性
 * Summary: 联合执行履行记录新增/修改接口
 */
async function saveJointconstraintRecord(request: SaveJointconstraintRecordRequest): SaveJointconstraintRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveJointconstraintRecordEx(request, headers, runtime);
}

/**
 * Description: 新增/修改履行记录，依据contractCode与contractFulfillmentCode判断唯一性
 * Summary: 联合执行履行记录新增/修改接口
 */
async function saveJointconstraintRecordEx(request: SaveJointconstraintRecordRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveJointconstraintRecordResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.jointconstraint.record.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteJointconstraintRecordRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 合同编号
  // 
  // 
  contractCode: string(name='contract_code'),
  // 合同履行记录标签
  // 
  // 
  contractFulfillmentCode: string(name='contract_fulfillment_code'),
  // 应付方证件号码
  // 
  // 
  payerCertNumber: string(name='payer_cert_number'),
  // 应付方证件类型
  // 
  // 0：统一社会信用代码
  // 
  // 1：身份证号码
  payerCertType: long(name='payer_cert_type'),
  // 应付方类型
  // 
  // 0：企业
  // 
  // 1：个人
  payerType: long(name='payer_type'),
}

model DeleteJointconstraintRecordResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 删除履行记录
 * Summary: 履行记录删除接口
 */
async function deleteJointconstraintRecord(request: DeleteJointconstraintRecordRequest): DeleteJointconstraintRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteJointconstraintRecordEx(request, headers, runtime);
}

/**
 * Description: 删除履行记录
 * Summary: 履行记录删除接口
 */
async function deleteJointconstraintRecordEx(request: DeleteJointconstraintRecordRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteJointconstraintRecordResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.jointconstraint.record.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryJointconstraintBreachrecordRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询对象实体类型
  // 
  // 0：企业
  // 
  // 1：个人
  entityType: long(name='entity_type'),
  // 对象实体证件类型
  // 
  // 0：统一社会信用代码
  // 
  // 1：身份证号码
  certType: long(name='cert_type'),
  // 对象实体证件号码
  // 
  // 
  certNumber: string(name='cert_number'),
}

model QueryJointconstraintBreachrecordResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否存在履行记录
  // 
  // 
  hasRecord?: boolean(name='has_record'),
  // 违约次数
  // 
  // 
  breachCount?: long(name='breach_count'),
}

/**
 * Description: 查询违约记录
 * Summary: 违约记录查询接口
 */
async function queryJointconstraintBreachrecord(request: QueryJointconstraintBreachrecordRequest): QueryJointconstraintBreachrecordResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryJointconstraintBreachrecordEx(request, headers, runtime);
}

/**
 * Description: 查询违约记录
 * Summary: 违约记录查询接口
 */
async function queryJointconstraintBreachrecordEx(request: QueryJointconstraintBreachrecordRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryJointconstraintBreachrecordResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.jointconstraint.breachrecord.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyJusticeMediationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 机构码 由蚂蚁分配
  productCode: string(name='product_code'),
  // 法院代码 由蚂蚁提供
  courtCode: string(name='court_code'),
  // 案件内容 JsonString 格式{"agencyRelations":[],"agents":[],"caseInfo":{},"litigants":{}} 
  caseBody: string(name='case_body'),
}

model ApplyJusticeMediationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
}

/**
 * Description: 提供给第三方调解申请提交
 * Summary: 调解申请
 */
async function applyJusticeMediation(request: ApplyJusticeMediationRequest): ApplyJusticeMediationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyJusticeMediationEx(request, headers, runtime);
}

/**
 * Description: 提供给第三方调解申请提交
 * Summary: 调解申请
 */
async function applyJusticeMediationEx(request: ApplyJusticeMediationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyJusticeMediationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.justice.mediation.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryJusticeMediationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 产品码 由蚂蚁分配
  // 
  productCode: string(name='product_code'),
  // 案件编号
  caseNumber: string(name='case_number'),
}

model QueryJusticeMediationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 	业务码信息
  message?: string(name='message'),
  // 案件处理进度信息对象
  mediationCaseDetailInfo?: string(name='mediation_case_detail_info'),
}

/**
 * Description: 调解申请进度查询
 * Summary: 调解申请进度查询
 */
async function queryJusticeMediation(request: QueryJusticeMediationRequest): QueryJusticeMediationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryJusticeMediationEx(request, headers, runtime);
}

/**
 * Description: 调解申请进度查询
 * Summary: 调解申请进度查询
 */
async function queryJusticeMediationEx(request: QueryJusticeMediationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryJusticeMediationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.justice.mediation.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryJusticeCaseinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。clientToken只支持ASCII字符，且不能超过64个字符。
  clientToken: string(name='client_token'),
  // 案件编号
  caseNo: string(name='case_no'),
}

model QueryJusticeCaseinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 查询的案件编号
  caseNo?: string(name='case_no'),
  // 证据要素
  evidentialElement?: EvidentialElement(name='evidential_element'),
  // 业务码，0表示成功
  code?: long(name='code'),
  // 业务码信息
  message?: string(name='message'),
}

/**
 * Description: 汇裁证据要素查询接口
 * Summary: 汇裁证据要素查询接口
 */
async function queryJusticeCaseinfo(request: QueryJusticeCaseinfoRequest): QueryJusticeCaseinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryJusticeCaseinfoEx(request, headers, runtime);
}

/**
 * Description: 汇裁证据要素查询接口
 * Summary: 汇裁证据要素查询接口
 */
async function queryJusticeCaseinfoEx(request: QueryJusticeCaseinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryJusticeCaseinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.justice.caseinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetJusticeUploadfilepathRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 文件名称（最长128个字符）
  fileName: string(name='file_name'),
  // 保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。clientToken只支持ASCII字符，且不能超过64个字符。
  clientToken?: string(name='client_token'),
}

model GetJusticeUploadfilepathResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // OSS上传链接
  uploadFileUrl?: string(name='upload_file_url'),
  // 文件key
  fileKey?: string(name='file_key'),
  // 业务码 0表示成功
  code?: long(name='code'),
  // 业务码描述
  message?: string(name='message'),
}

/**
 * Description: 获取oss文件上传路径，返回业务方oss文件上传链接和fileKey
 * Summary: 获取OSS文件上传路径
 */
async function getJusticeUploadfilepath(request: GetJusticeUploadfilepathRequest): GetJusticeUploadfilepathResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getJusticeUploadfilepathEx(request, headers, runtime);
}

/**
 * Description: 获取oss文件上传路径，返回业务方oss文件上传链接和fileKey
 * Summary: 获取OSS文件上传路径
 */
async function getJusticeUploadfilepathEx(request: GetJusticeUploadfilepathRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetJusticeUploadfilepathResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.justice.uploadfilepath.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateJusticeCasewritebackRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。clientToken只支持ASCII字符，且不能超过64个字符。
  clientToken: string(name='client_token'),
  // 自动进件案件基础信息
  caseBasicInfo: CaseBasicInfo(name='case_basic_info'),
  // 发起人对象列表
  proposerObjects: [ ProposerObject ](name='proposer_objects'),
  // 答辩人对象列表
  pleaderObjects: [ PleaderObject ](name='pleader_objects'),
  // 自动进件证据要素
  leaseEvidentialElement: LeaseEvidentialElement(name='lease_evidential_element'),
  // 证据清单列表
  evidentialCheckList: [ EvidentialCheckList ](name='evidential_check_list'),
}

model CreateJusticeCasewritebackResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 创建成功状态
  // success, fail
  createStatus?: string(name='create_status'),
  // 创建状态说明
  createStatusMessage?: string(name='create_status_message'),
  // 创建时间（如创建成功，则返回创建日期时间）
  createTime?: string(name='create_time'),
  // 业务来源主键
  inputSourceId?: string(name='input_source_id'),
  // 案件ID
  caseId?: string(name='case_id'),
  // 业务码 0表示成功
  code?: long(name='code'),
  // 业务码描述
  message?: string(name='message'),
}

/**
 * Description: 纠纷处理平台提供回调接口供业务平台自动插入案件模型中，业务方需要调用回写接口创建案件。
 * Summary: 自动进件案件回写
 */
async function createJusticeCasewriteback(request: CreateJusticeCasewritebackRequest): CreateJusticeCasewritebackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createJusticeCasewritebackEx(request, headers, runtime);
}

/**
 * Description: 纠纷处理平台提供回调接口供业务平台自动插入案件模型中，业务方需要调用回写接口创建案件。
 * Summary: 自动进件案件回写
 */
async function createJusticeCasewritebackEx(request: CreateJusticeCasewritebackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateJusticeCasewritebackResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.justice.casewriteback.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateLeaseContractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 被升级的合约名称
  contractId: string(name='contract_id'),
  // 合约业务层id
  applicationId?: string(name='application_id'),
}

model UpdateLeaseContractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码 0表示成功
  code?: long(name='code'),
  // 错误信息
  // 
  errMessage?: string(name='err_message'),
  // 升级合约所在的区块链交易哈希
  responseData?: string(name='response_data'),
}

/**
 * Description: 升级融资租赁合约
 * Summary: 升级融资租赁合约
 */
async function updateLeaseContract(request: UpdateLeaseContractRequest): UpdateLeaseContractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateLeaseContractEx(request, headers, runtime);
}

/**
 * Description: 升级融资租赁合约
 * Summary: 升级融资租赁合约
 */
async function updateLeaseContractEx(request: UpdateLeaseContractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateLeaseContractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.contract.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseAssetagentregisterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 被代理机构的金融科技租户id
  agentLeaseId: string(name='agent_lease_id'),
  // 代理合同id，作为存证使用
  contractId: string(name='contract_id'),
  // 被代理租赁机构统一社会信用码
  // 
  // 
  leaseCorpId: string(name='lease_corp_id'),
  // 被代理租赁机构名称
  leaseCorpName: string(name='lease_corp_name'),
  // 被代理租赁机构法人姓名
  leaseCorpOwnerName: string(name='lease_corp_owner_name'),
}

model CreateLeaseAssetagentregisterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务层错误码
  bizErrorCode?: string(name='biz_error_code'),
  // 错误信息描述
  bizErrorMsg?: string(name='biz_error_msg'),
  // 代理关系链上存证哈希
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 租赁平台isv模式代理商户入驻
 * Summary: 租赁平台isv模式代理商户入驻
 */
async function createLeaseAssetagentregister(request: CreateLeaseAssetagentregisterRequest): CreateLeaseAssetagentregisterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseAssetagentregisterEx(request, headers, runtime);
}

/**
 * Description: 租赁平台isv模式代理商户入驻
 * Summary: 租赁平台isv模式代理商户入驻
 */
async function createLeaseAssetagentregisterEx(request: CreateLeaseAssetagentregisterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseAssetagentregisterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.assetagentregister.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLeaseProductinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 商品id
  productId: string(name='product_id'),
  // 供应商本版号
  supplierVersion: long(name='supplier_version'),
  // 合约id
  applicationId: string(name='application_id'),
  // 租赁方id
  leaseId: string(name='lease_id'),
  // 资方id
  creditId: string(name='credit_id'),
}

model QueryLeaseProductinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码200表示成功
  code?: long(name='code'),
  // 错误信息
  errMessage?: string(name='err_message'),
  // 商品信息
  responseData?: string(name='response_data'),
}

/**
 * Description: 融资租赁商品信息查询接口
 * Summary: 融资租赁商品信息查询接口
 */
async function queryLeaseProductinfo(request: QueryLeaseProductinfoRequest): QueryLeaseProductinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLeaseProductinfoEx(request, headers, runtime);
}

/**
 * Description: 融资租赁商品信息查询接口
 * Summary: 融资租赁商品信息查询接口
 */
async function queryLeaseProductinfoEx(request: QueryLeaseProductinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLeaseProductinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.productinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SyncLeaseSupplierorderstatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id
  orderId: string(name='order_id'),
  // 订单采购状态，已取消[CANCEL，已拒收REFUSE_DELIVER，待发货TOBE_DELIVER，已退货RETURN_BACK]
  supplierStatus: string(name='supplier_status'),
  // 租赁商家金融科技租户id
  leaseId: string(name='lease_id'),
}

model SyncLeaseSupplierorderstatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码,0表示正常
  code?: long(name='code'),
  // 错误信息描述
  errMessage?: string(name='err_message'),
  // CANCEL：可以取消  REFUSE：不能取消
  status?: string(name='status'),
}

/**
 * Description: 同步采购平台订单状态
 * Summary: 同步采购平台订单状态
 */
async function syncLeaseSupplierorderstatus(request: SyncLeaseSupplierorderstatusRequest): SyncLeaseSupplierorderstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return syncLeaseSupplierorderstatusEx(request, headers, runtime);
}

/**
 * Description: 同步采购平台订单状态
 * Summary: 同步采购平台订单状态
 */
async function syncLeaseSupplierorderstatusEx(request: SyncLeaseSupplierorderstatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SyncLeaseSupplierorderstatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.supplierorderstatus.sync', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitLeaseSupplierRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 供应商来源
  origin: string(name='origin'),
  // 供应商信息
  supplier: SupplierInfo(name='supplier'),
  // 额外信息
  extraInfo?: string(name='extra_info'),
}

model InitLeaseSupplierResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码 0表示成功
  code?: long(name='code'),
  // 错误信息描述
  errMessage?: string(name='err_message'),
}

/**
 * Description: 采购供应商初始化 
 * Summary: 采购供应商初始化 
 */
async function initLeaseSupplier(request: InitLeaseSupplierRequest): InitLeaseSupplierResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initLeaseSupplierEx(request, headers, runtime);
}

/**
 * Description: 采购供应商初始化 
 * Summary: 采购供应商初始化 
 */
async function initLeaseSupplierEx(request: InitLeaseSupplierRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitLeaseSupplierResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.supplier.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model FinishLeaseSupplierstatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 采购订单id，由采购平台生成
  supplierOrderNo: string(name='supplier_order_no'),
  // 租赁订单id
  orderId: string(name='order_id'),
  // 租赁方id，非采购平台
  leaseId: string(name='lease_id'),
  // 当前的采购状态
  supplierOrderStatus: string(name='supplier_order_status'),
  // 物流订单id
  supplierLogisticInfo: SupplierLogisticInfo(name='supplier_logistic_info'),
  // 采购平台回传的商品订单信息
  supplierOrderProductInfos: [ SupplierOrderProductInfo ](name='supplier_order_product_infos'),
  // 供应商id
  supplierId: string(name='supplier_id'),
}

model FinishLeaseSupplierstatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 租赁信息上链后，链上对应的txHash
  responseData?: string(name='response_data'),
  // 错误码
  code?: string(name='code'),
  // 错误信息描述
  errMessage?: string(name='err_message'),
}

/**
 * Description: 租赁订单接收采购平台的采购状态信息，完成采购流程
 * Summary: 租赁订单接收采购状态信息，完成采购流程
 */
async function finishLeaseSupplierstatus(request: FinishLeaseSupplierstatusRequest): FinishLeaseSupplierstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return finishLeaseSupplierstatusEx(request, headers, runtime);
}

/**
 * Description: 租赁订单接收采购平台的采购状态信息，完成采购流程
 * Summary: 租赁订单接收采购状态信息，完成采购流程
 */
async function finishLeaseSupplierstatusEx(request: FinishLeaseSupplierstatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FinishLeaseSupplierstatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.supplierstatus.finish', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseSupplierproductRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 系统来源
  origin: string(name='origin'),
  // 采购商品信息
  productInfo: SupplierProductItem(name='product_info'),
  // 本阶段额外信息
  extraInfo?: string(name='extra_info'),
}

model CreateLeaseSupplierproductResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码 0为成功
  code?: long(name='code'),
  // 状态错误信息
  errMessage?: string(name='err_message'),
}

/**
 * Description: 采购商品初始化 
 * Summary: 采购商品初始化 
 */
async function createLeaseSupplierproduct(request: CreateLeaseSupplierproductRequest): CreateLeaseSupplierproductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseSupplierproductEx(request, headers, runtime);
}

/**
 * Description: 采购商品初始化 
 * Summary: 采购商品初始化 
 */
async function createLeaseSupplierproductEx(request: CreateLeaseSupplierproductRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseSupplierproductResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.supplierproduct.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyLeaseSupplierorderRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id
  orderId: string(name='order_id'),
  // 供应商id
  supplierId: string(name='supplier_id'),
  // 商品信息
  productInfos: [ ApplySupplierOrderProductInput ](name='product_infos'),
  // isv代理模式
  mode?: string(name='mode'),
  // 被代理的租户id
  agentLeaseId?: string(name='agent_lease_id'),
}

model ApplyLeaseSupplierorderResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 订单信息
  orderInfo?: ApplySupplierOrderProductOutput(name='order_info'),
  // 错误码，0表示成功
  code?: long(name='code'),
  // 错误信息描述
  errMessage?: string(name='err_message'),
  // 商户本次采购的所有商品信息
  productInfos?: [ ApplySupplierOrderProductInput ](name='product_infos'),
}

/**
 * Description: 链上采购申请
 * Summary: 链上采购申请
 */
async function applyLeaseSupplierorder(request: ApplyLeaseSupplierorderRequest): ApplyLeaseSupplierorderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyLeaseSupplierorderEx(request, headers, runtime);
}

/**
 * Description: 链上采购申请
 * Summary: 链上采购申请
 */
async function applyLeaseSupplierorderEx(request: ApplyLeaseSupplierorderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyLeaseSupplierorderResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.supplierorder.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseFinancecertifyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id
  orderId: string(name='order_id'),
  // 融资租赁合约id
  applicationId: string(name='application_id'),
  // 直付通代扣协议号
  agreementNo: string(name='agreement_no'),
  // 还款类型
  rentalReturnType: string(name='rental_return_type'),
  // 认证类型
  certifyWay: string(name='certify_way'),
  // 承租人姓名
  userName: string(name='user_name'),
  // 承租人身份证
  userId: string(name='user_id'),
  // 人脸识别认证id
  certifyId: string(name='certify_id'),
  // 承租人支付宝uid
  alipayUid: string(name='alipay_uid'),
  // 提前还款信息
  rentalInfos: [ FinanceCertifyRentalInfo ](name='rental_infos'),
}

model CreateLeaseFinancecertifyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 本次认证是否通过
  certifyResult?: string(name='certify_result'),
  // 通过的人脸认证id
  leaseCertifyId?: string(name='lease_certify_id'),
  // 本次调用核验结果码
  code?: string(name='code'),
  // 错误信息描述
  message?: string(name='message'),
}

/**
 * Description: 创建融资租赁提前还款人脸认证信息
 * Summary: 创建融资租赁提前还款人脸认证信息
 */
async function createLeaseFinancecertify(request: CreateLeaseFinancecertifyRequest): CreateLeaseFinancecertifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseFinancecertifyEx(request, headers, runtime);
}

/**
 * Description: 创建融资租赁提前还款人脸认证信息
 * Summary: 创建融资租赁提前还款人脸认证信息
 */
async function createLeaseFinancecertifyEx(request: CreateLeaseFinancecertifyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseFinancecertifyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.financecertify.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLeaseFinancecertifyRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id
  orderId: string(name='order_id'),
  // 租赁商户金融科技租户id
  leaseId?: string(name='lease_id'),
  // 核验凭证
  leaseCertifyId: string(name='lease_certify_id'),
}

model QueryLeaseFinancecertifyResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 核验结果
  certifyResult?: string(name='certify_result'),
  // 1636600547
  certifyTime?: long(name='certify_time'),
  // 还款信息详情
  rentalInfos?: [ FinanceCertifyRentalInfo ](name='rental_infos'),
  // 错误码
  code?: string(name='code'),
  // 错误码描述
  message?: string(name='message'),
}

/**
 * Description: 融资租赁提前还款人脸识别核验
 * Summary: 融资租赁提前还款人脸识别核验
 */
async function queryLeaseFinancecertify(request: QueryLeaseFinancecertifyRequest): QueryLeaseFinancecertifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLeaseFinancecertifyEx(request, headers, runtime);
}

/**
 * Description: 融资租赁提前还款人脸识别核验
 * Summary: 融资租赁提前还款人脸识别核验
 */
async function queryLeaseFinancecertifyEx(request: QueryLeaseFinancecertifyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLeaseFinancecertifyResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.financecertify.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLeaseFinancecertifyincontractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 合约id
  applicationId: string(name='application_id'),
  // 订单id
  orderId: string(name='order_id'),
  // 核验id
  leaseCertifyId: string(name='lease_certify_id'),
}

model QueryLeaseFinancecertifyincontractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 核验结果
  responseData?: string(name='response_data'),
  // 错误码
  code?: string(name='code'),
  // 错误信息描述
  message?: string(name='message'),
}

/**
 * Description: 查询融资租赁合约内核验结果
 * Summary: 查询融资租赁合约内核验结果
 */
async function queryLeaseFinancecertifyincontract(request: QueryLeaseFinancecertifyincontractRequest): QueryLeaseFinancecertifyincontractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLeaseFinancecertifyincontractEx(request, headers, runtime);
}

/**
 * Description: 查询融资租赁合约内核验结果
 * Summary: 查询融资租赁合约内核验结果
 */
async function queryLeaseFinancecertifyincontractEx(request: QueryLeaseFinancecertifyincontractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLeaseFinancecertifyincontractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.financecertifyincontract.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateWitnessFlowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务场景，最大255长度
  businessScene: string(name='business_scene'),
  // 客户端名称，比如签章客户端，最长长度50
  clientName?: string(name='client_name'),
  // 客户端版本
  clientVersion?: string(name='client_version'),
  // 合同有效截止时间，时间戳
  contractValidity?: string(name='contract_validity'),
  // 流程id
  flowId?: string(name='flow_id'),
  // 发起方账号id
  initiatorAccountId?: string(name='initiator_account_id'),
  // 发起端，TIANYIN_H5 - H5端，TIANYIN_WEB - WEB端，TIANYIN_API - API
  launchEndpoint: string(name='launch_endpoint'),
  // 发起ip
  launchIp: string(name='launch_ip'),
  // 手机盾逻辑版本，0-不支持用印审批、需要扣费，1-支持用印审批、无需扣费，默认0
  mobileShieldVersion?: long(name='mobile_shield_version'),
  // 扣费方账号id
  payerAccountId?: string(name='payer_account_id'),
  // 签署截止时间，时间戳
  signDeadline?: string(name='sign_deadline'),
  // 签署顺序，SIGN_SEQUENCE-顺序签署，SIGN_NON_SEQUENCE-无序签署
  signOrder: string(name='sign_order'),
  // 流程类型，0-签署流程，1-作废流程，默认0
  type?: long(name='type'),
  // 发起请求的实例应用ID
  appId: string(name='app_id'),
  // 发起请求的鉴权token
  token: string(name='token'),
}

model CreateWitnessFlowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误码
  code?: long(name='code'),
  // 流程配置
  flowConfig?: WitnessFlowConfig(name='flow_config'),
  // 流程创建响应数据
  message?: string(name='message'),
  // 见证流程
  witnessFlowId?: string(name='witness_flow_id'),
}

/**
 * Description: 创建签署见证流程
 * Summary: 创建见证流程
 */
async function createWitnessFlow(request: CreateWitnessFlowRequest): CreateWitnessFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createWitnessFlowEx(request, headers, runtime);
}

/**
 * Description: 创建签署见证流程
 * Summary: 创建见证流程
 */
async function createWitnessFlowEx(request: CreateWitnessFlowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateWitnessFlowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.witness.flow.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SaveWitnessSnapshotRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 快照数据
  data: string(name='data'),
  // 快照步骤，最大20长度，START-开始，UPDATE-更新，FINISH-结束，允许自定义
  step: string(name='step'),
  // 快照步骤描述，最大40长度
  stepDescription: string(name='step_description'),
  // 见证流程id
  witnessFlowId: string(name='witness_flow_id'),
  // 发起请求的实例应用ID
  appId: string(name='app_id'),
  // 发起请求的鉴权token
  token: string(name='token'),
}

model SaveWitnessSnapshotResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误码
  code?: long(name='code'),
  // 错误信息
  message?: string(name='message'),
}

/**
 * Description: 保存见证流程快照数据
 * Summary: 保存见证流程快照数据
 */
async function saveWitnessSnapshot(request: SaveWitnessSnapshotRequest): SaveWitnessSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return saveWitnessSnapshotEx(request, headers, runtime);
}

/**
 * Description: 保存见证流程快照数据
 * Summary: 保存见证流程快照数据
 */
async function saveWitnessSnapshotEx(request: SaveWitnessSnapshotRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SaveWitnessSnapshotResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.witness.snapshot.save', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckWitnessSignaccessRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 审批流程id
  approvalFlowId?: string(name='approval_flow_id'),
  // 审批结果通知
  approvalNotifyUrl?: string(name='approval_notify_url'),
  // 签署文档信息
  docs: [ WitnessDocs ](name='docs'),
  // 签署端，TIANYIN_H5 - H5端，TIANYIN_WEB - WEB端，TIANYIN_API - API
  endpoint: string(name='endpoint'),
  // 是否发起审批，默认TRUE
  launchApproval?: boolean(name='launch_approval'),
  // 手机盾任务id，用于手机盾审批场景
  mobileShieldTaskId?: string(name='mobile_shield_task_id'),
  // 实名认证凭证
  realnameAuthCode?: string(name='realname_auth_code'),
  // 印章id列表
  sealIds?: [ string ](name='seal_ids'),
  // 签署人账号id
  signerAccountId: string(name='signer_account_id'),
  // 签署人ip
  signerIp: string(name='signer_ip'),
  // 签署人类型，1-私有云用户，2-公有云用户，3-手机盾用户
  signerType: long(name='signer_type'),
  // 签署预览地址
  signPreviewUrl?: string(name='sign_preview_url'),
  // 意愿认证凭证
  willAuthCode?: string(name='will_auth_code'),
  // 见证流程id
  witnessFlowId: string(name='witness_flow_id'),
  // 发起请求的实例应用ID
  appId: string(name='app_id'),
  // 发起请求的鉴权token
  token: string(name='token'),
}

model CheckWitnessSignaccessResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 有权限的印章id列表
  accessSealIds?: [ string ](name='access_seal_ids'),
  // 审批数据
  approvalDatas?: [ WitnessApprovalData ](name='approval_datas'),
  // 错误码
  code?: long(name='code'),
  // 错误信息
  message?: string(name='message'),
  // 签署票证
  signTicket?: string(name='sign_ticket'),
}

/**
 * Description: 见证流程签署权限校验
 * Summary: 见证流程签署权限校验
 */
async function checkWitnessSignaccess(request: CheckWitnessSignaccessRequest): CheckWitnessSignaccessResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkWitnessSignaccessEx(request, headers, runtime);
}

/**
 * Description: 见证流程签署权限校验
 * Summary: 见证流程签署权限校验
 */
async function checkWitnessSignaccessEx(request: CheckWitnessSignaccessRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckWitnessSignaccessResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.witness.signaccess.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AuthWitnessFlowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 发起请求的实例应用ID
  appId: string(name='app_id'),
  // 证书id
  certId?: string(name='cert_id'),
  // 签署页码，单个签时必传
  page?: string(name='page'),
  // 签署x坐标，单个签时必传
  posX?: string(name='pos_x'),
  // 签署y坐标，单个签时必传
  posY?: string(name='pos_y'),
  // 印章图片key
  sealFileKey?: string(name='seal_file_key'),
  // 印章id
  sealId?: string(name='seal_id'),
  // 印章类型，1-模板，2-手绘
  sealType: long(name='seal_type'),
  // 签署类型，单个签时必传
  signatureType?: string(name='signature_type'),
  // 批量签署信息，批量签时必传
  signDatas?: string(name='sign_datas'),
  // 待签署文档摘要值，单个签时必传
  signHash?: string(name='sign_hash'),
  // 签署票证
  signTicket: string(name='sign_ticket'),
  // 签署主体账号id
  subjectAccountId?: string(name='subject_account_id'),
  // 第三方文档id，单个签时必传
  thirdDocId?: string(name='third_doc_id'),
  // 发起请求的鉴权token
  token: string(name='token'),
  // 见证流程id
  witnessFlowId: string(name='witness_flow_id'),
}

model AuthWitnessFlowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误码
  code?: long(name='code'),
  // 错误信息
  message?: string(name='message'),
  // 二维码内容
  qrcodeContent?: string(name='qrcode_content'),
  // 签署日志id，外部用户签署返回
  signlogId?: string(name='signlog_id'),
  // 签名结果，外部用户签署返回
  signResult?: string(name='sign_result'),
  // 签署结果，批量签署返回
  signResults?: [ WitnessSignResult ](name='sign_results'),
  // 签署方式，1-单个签署，2-批量签署
  signWay?: long(name='sign_way'),
  // 手机盾用户签署返回
  taskId?: string(name='task_id'),
}

/**
 * Description: 见证流程签署
 * Summary: 见证流程签署
 */
async function authWitnessFlow(request: AuthWitnessFlowRequest): AuthWitnessFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return authWitnessFlowEx(request, headers, runtime);
}

/**
 * Description: 见证流程签署
 * Summary: 见证流程签署
 */
async function authWitnessFlowEx(request: AuthWitnessFlowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AuthWitnessFlowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.witness.flow.auth', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ConfirmWitnessFlowRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 签署确认数据
  confirmDatas: [ WitnessConfirmData ](name='confirm_datas'),
  // 证据id列表，内部用户必传
  evidenceIds?: [ string ](name='evidence_ids'),
  // 签署记录id列表，外部用户必传
  signlogIds?: [ string ](name='signlog_ids'),
  // 签署票证
  signTicket: string(name='sign_ticket'),
  // 见证流程id
  witnessFlowId: string(name='witness_flow_id'),
  // 发起请求的实例应用ID
  appId: string(name='app_id'),
  // 发起请求的鉴权token
  token: string(name='token'),
}

model ConfirmWitnessFlowResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误码
  code?: long(name='code'),
  // 错误信息
  message?: string(name='message'),
}

/**
 * Description: 见证流程签署确认
 * Summary: 见证流程签署确认
 */
async function confirmWitnessFlow(request: ConfirmWitnessFlowRequest): ConfirmWitnessFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return confirmWitnessFlowEx(request, headers, runtime);
}

/**
 * Description: 见证流程签署确认
 * Summary: 见证流程签署确认
 */
async function confirmWitnessFlowEx(request: ConfirmWitnessFlowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmWitnessFlowResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.witness.flow.confirm', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateTransRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证关联实体（个人/企业）的身份识别信息
  customer: Identity(name='customer'),
  // 扩展属性
  properties?: string(name='properties'),
  // 业务子类型标识
  subBizId?: string(name='sub_biz_id'),
  // 是否使用可信时间戳，默认为false
  tsr?: boolean(name='tsr'),
}

model CreateTransResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回事务ID，全局唯一
  transactionId?: string(name='transaction_id'),
  // 可信时间信息
  tsr?: TsrResponse(name='tsr'),
}

/**
 * Description: 获取存证事务ID
 * Summary: 获取存证事务ID
 */
async function createTrans(request: CreateTransRequest): CreateTransResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createTransEx(request, headers, runtime);
}

/**
 * Description: 获取存证事务ID
 * Summary: 获取存证事务ID
 */
async function createTransEx(request: CreateTransRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTransResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.trans.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetTransRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证事务ID
  transactionId: string(name='transaction_id'),
}

model GetTransResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回文件下载路径列表
  fileUrl?: [ string ](name='file_url'),
  // 存证事务ID
  transactionId?: string(name='transaction_id'),
}

/**
 * Description: 通过存证事务Token，获取事务中所有的存证信息
 * Summary: 获取事务中所有的存证信息
 */
async function getTrans(request: GetTransRequest): GetTransResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getTransEx(request, headers, runtime);
}

/**
 * Description: 通过存证事务Token，获取事务中所有的存证信息
 * Summary: 获取事务中所有的存证信息
 */
async function getTransEx(request: GetTransRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTransResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.trans.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateTextRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
  location?: Location(name='location'),
  // 存证内容
  notaryContent: string(name='notary_content'),
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase: string(name='phase'),
  // 扩展属性
  properties?: string(name='properties'),
  // 存证事务id
  transactionId: string(name='transaction_id'),
  // 是否使用可信时间戳，默认为false
  tsr?: boolean(name='tsr'),
  // 文本存证类型，支持源文本/文本哈希
  textNotaryType?: string(name='text_notary_type'),
  // 哈希算法，目前仅支持 SHA256
  hashAlgorithm?: string(name='hash_algorithm'),
}

model CreateTextResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可信时间信息
  tsr?: TsrResponse(name='tsr'),
  // 存证凭据
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 发起文本存证，将文本内容存证上链
 * Summary: 文本存证，将文本内容存证上链
 */
async function createText(request: CreateTextRequest): CreateTextResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createTextEx(request, headers, runtime);
}

/**
 * Description: 发起文本存证，将文本内容存证上链
 * Summary: 文本存证，将文本内容存证上链
 */
async function createTextEx(request: CreateTextRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTextResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.text.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetTextRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
  location?: Location(name='location'),
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase?: string(name='phase'),
  // 扩展属性
  properties?: string(name='properties'),
  // 存证事务id
  transactionId?: string(name='transaction_id'),
  // 存证凭据
  txHash: string(name='tx_hash'),
}

model GetTextResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证信息
  content?: string(name='content'),
  // 可信信息
  tsr?: TsrResponse(name='tsr'),
  // 文本存证类型
  textNotaryType?: string(name='text_notary_type'),
  // 哈希算法
  hashAlgorithm?: string(name='hash_algorithm'),
}

/**
 * Description: 用户通过交易哈希获取自己上传的文本存证内容
 * Summary: 获取文本存证内容
 */
async function getText(request: GetTextRequest): GetTextResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getTextEx(request, headers, runtime);
}

/**
 * Description: 用户通过交易哈希获取自己上传的文本存证内容
 * Summary: 获取文本存证内容
 */
async function getTextEx(request: GetTextRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTextResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.text.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateFileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 文件存证模式，目前仅支持 FILE_RAW 和 FILE_HASH
  fileNotaryType?: string(name='file_notary_type'),
  // 当文件存证模式为FILE_HASH时，用户可以指定该参数。当前服务仅支持 SHA256，若不填写，则默认值为 SHA256。
  hashAlgorithm?: string(name='hash_algorithm'),
  // 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
  location?: Location(name='location'),
  // 存证文件内容，对文件内容做base64编码后得到。例如FILE_RAW模式下，文件内容为“test”，那么base64编码后的结果则为“dGVzdA==”。如果是FILE_HASh模式，则该字段直接为文件hash。
  notaryFile: string(name='notary_file'),
  // 存证文件名称
  notaryName: string(name='notary_name'),
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase: string(name='phase'),
  // 扩展属性
  properties?: string(name='properties'),
  // 存证事务ID
  transactionId: string(name='transaction_id'),
  // 是否使用可信时间戳，默认为false
  tsr?: boolean(name='tsr'),
}

model CreateFileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可信时间信息
  tsr?: TsrResponse(name='tsr'),
  // 存证凭证
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 发起文件存证，将文件内容存证上链
 * Summary: 文件内容存证上链
 */
async function createFile(request: CreateFileRequest): CreateFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createFileEx(request, headers, runtime);
}

/**
 * Description: 发起文件存证，将文件内容存证上链
 * Summary: 文件内容存证上链
 */
async function createFileEx(request: CreateFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.file.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetFileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
  location?: Location(name='location'),
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase?: string(name='phase'),
  // 扩展属性
  properties?: string(name='properties'),
  // 存证事务ID
  transactionId?: string(name='transaction_id'),
  // 存证凭据
  txHash: string(name='tx_hash'),
}

model GetFileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 文件哈希，当 file_notary_type 为 FILE_HASH 时才有此值。
  fileHash?: string(name='file_hash'),
  // 文件存证模式，有 FILE_RAW 和 FILE_HASH 两种可能值。
  fileNotaryType?: string(name='file_notary_type'),
  // 哈希算法，当 file_notary_type 为 FILE_HASH 时，此返回值才有效。
  hashAlgorithm?: string(name='hash_algorithm'),
  // 文件下载地址，当 file_notary_type 为 FILE_RAW 时才有此值。
  ossPath?: string(name='oss_path'),
}

/**
 * Description: 用户通过交易哈希获取自己上传的文件存证oss下载地址
 * Summary: 获取文件存证oss下载地址
 */
async function getFile(request: GetFileRequest): GetFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getFileEx(request, headers, runtime);
}

/**
 * Description: 用户通过交易哈希获取自己上传的文件存证oss下载地址
 * Summary: 获取文件存证oss下载地址
 */
async function getFileEx(request: GetFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetFileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.file.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
  location?: Location(name='location'),
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase: string(name='phase'),
  // 扩展属性
  properties?: string(name='properties'),
  // 原文文件描述
  sourceDesc: string(name='source_desc'),
  // 存证文件内容，对文件内容做base64编码后得到。例如文件内容为“test”，那么base64编码后的结果则为“dGVzdA==”
  sourceFile: string(name='source_file'),
  // 存证原文名称
  sourceName: string(name='source_name'),
  // 存证事务ID
  transactionId: string(name='transaction_id'),
  // 是否使用可信时间戳，默认为false
  tsr?: boolean(name='tsr'),
}

model CreateSourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可信时间信息
  tsr?: TsrResponse(name='tsr'),
  // 存证凭据
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 发起原文存证，将原文内容存证上链
 * Summary: 原文内容存证
 */
async function createSource(request: CreateSourceRequest): CreateSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSourceEx(request, headers, runtime);
}

/**
 * Description: 发起原文存证，将原文内容存证上链
 * Summary: 原文内容存证
 */
async function createSourceEx(request: CreateSourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.source.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetSourceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
  location?: Location(name='location'),
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase?: string(name='phase'),
  // 扩展属性
  properties?: string(name='properties'),
  // 存证事务id
  transactionId?: string(name='transaction_id'),
  // 存证凭据
  txHash: string(name='tx_hash'),
}

model GetSourceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 文件下载地址
  ossPath?: string(name='oss_path'),
}

/**
 * Description: 用户通过交易哈希获取自己上传的原文存证oss下载地址
 * Summary: 获取原文存证oss下载地址
 */
async function getSource(request: GetSourceRequest): GetSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getSourceEx(request, headers, runtime);
}

/**
 * Description: 用户通过交易哈希获取自己上传的原文存证oss下载地址
 * Summary: 获取原文存证oss下载地址
 */
async function getSourceEx(request: GetSourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSourceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.source.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckStatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证核验数据组
  notaryCheckMetaList: [ NotaryCheckMeta ](name='notary_check_meta_list'),
}

model CheckStatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证核验结果
  notaryCheckResults?: [ NotaryCheckResult ](name='notary_check_results'),
}

/**
 * Description: 创建存证后，使用存证凭据核验存证状态。
 * Summary: 存证内容核验
 */
async function checkStatus(request: CheckStatusRequest): CheckStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkStatusEx(request, headers, runtime);
}

/**
 * Description: 创建存证后，使用存证凭据核验存证状态。
 * Summary: 存证内容核验
 */
async function checkStatusEx(request: CheckStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckStatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.status.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeployLeaseContractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租赁服务平台对应的合约ID
  contractId: string(name='contract_id'),
}

model DeployLeaseContractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码
  // 0表示成功
  code?: long(name='code'),
  // 错误信息
  errMessage?: string(name='err_message'),
  // 合约部署成功的交易哈希
  responseData?: string(name='response_data'),
}

/**
 * Description: 融资服务平台部署合约
 * Summary: 融资服务平台部署合约
 */
async function deployLeaseContract(request: DeployLeaseContractRequest): DeployLeaseContractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deployLeaseContractEx(request, headers, runtime);
}

/**
 * Description: 融资服务平台部署合约
 * Summary: 融资服务平台部署合约
 */
async function deployLeaseContractEx(request: DeployLeaseContractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeployLeaseContractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.contract.deploy', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseProductinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 合约id
  applicationId?: string(name='application_id'),
  // 保证金  精确到毫厘，即123400表示12.34元
  depositPrice: long(name='deposit_price'),
  // 安装拆卸费 精确到毫厘，即123400表示12.34元
  installPrice: long(name='install_price'),
  // 租赁服务平台id
  leaseId: string(name='lease_id'),
  // 一级分类
  mainClass: string(name='main_class'),
  // 商品编码 长度不可超过50
  productId: string(name='product_id'),
  // 商品名称
  productName: string(name='product_name'),
  // 采购价  精确到毫厘，即123400表示12.34元
  productPrice: long(name='product_price'),
  // 出租详细信息
  rentinfos: [ RentInfo ](name='rentinfos'),
  // 二级分类
  subClass: string(name='sub_class'),
  // 供应商id
  supplierId?: string(name='supplier_id'),
  // 供应商
  supplierName: string(name='supplier_name'),
  // 供应商对该产品版本
  supplierVersion?: string(name='supplier_version'),
  // 商品目录额外信息
  extraInfo?: string(name='extra_info'),
  // 商品规格
  productModel?: string(name='product_model'),
}

model CreateLeaseProductinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码 0表示成功
  code?: long(name='code'),
  // 错误信息
  errMessage?: string(name='err_message'),
  // 用户信息存储到合约中对应的区块链交易哈希
  responseData?: string(name='response_data'),
}

/**
 * Description: 融资服务平台上传商品类别信息
 * Summary: 融资服务平台上传商品类别信息
 */
async function createLeaseProductinfo(request: CreateLeaseProductinfoRequest): CreateLeaseProductinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseProductinfoEx(request, headers, runtime);
}

/**
 * Description: 融资服务平台上传商品类别信息
 * Summary: 融资服务平台上传商品类别信息
 */
async function createLeaseProductinfoEx(request: CreateLeaseProductinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseProductinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.productinfo.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model AuthLeaseContractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 融资服务平台ID 长度不可超过50
  creditId: string(name='credit_id'),
}

model AuthLeaseContractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码
  // 0表示成功
  code?: long(name='code'),
  // 错误信息
  errMessage?: string(name='err_message'),
  // 授权信息存储到合约中对应的区块链交易哈希
  responseData?: string(name='response_data'),
}

/**
 * Description: 租赁服务平台授权融资服务平台
 * Summary: 租赁服务平台授权融资服务平台
 */
async function authLeaseContract(request: AuthLeaseContractRequest): AuthLeaseContractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return authLeaseContractEx(request, headers, runtime);
}

/**
 * Description: 租赁服务平台授权融资服务平台
 * Summary: 租赁服务平台授权融资服务平台
 */
async function authLeaseContractEx(request: AuthLeaseContractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AuthLeaseContractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.contract.auth', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseUserinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 支付宝账号信息
  alipayUid: string(name='alipay_uid'),
  // 融资租赁业务id，由资方控制台生成返回
  applicationId?: string(name='application_id'),
  // 是否启动异步
  async?: long(name='async'),
  // 融资租赁用户信息额外字段
  extraInfo?: string(name='extra_info'),
  // 承租企业统一社会信用代码 长度不可超过50
  leaseCorpId: string(name='lease_corp_id'),
  // 承租企业名称 长度不可超过50
  leaseCorpName: string(name='lease_corp_name'),
  // 承租法定代表人姓名 长度不可超过50
  leaseCorpOwnerName: string(name='lease_corp_owner_name'),
  // 用户登录名，租赁平台会员ID/支付宝ID 长度不可超过50
  loginId: string(name='login_id'),
  // 用户登录时间 格式为2019-8-31 12:00:00
  loginTime: string(name='login_time'),
  // 用户登录名类型 1.商户会员2.支付宝3.其他
  loginType: long(name='login_type'),
  // 订单id 长度不可超过50
  orderId: string(name='order_id'),
  // 区块链认证Hash，若为支付宝实人，必填
  userBlockchainVerifyHash?: string(name='user_blockchain_verify_hash'),
  // 承租人电子邮件，法院/仲裁电子送达必填项，长度不超过5
  userEmail?: string(name='user_email'),
  // 承租人身份证
  userId: string(name='user_id'),
  // 承租人身份证照片哈希
  userImageHash: string(name='user_image_hash'),
  // 承租人身份证照片存证交易哈希
  userImageTxHash: string(name='user_image_tx_hash'),
  // 承租人姓名 长度不可超过10
  userName: string(name='user_name'),
  // 承租人手机号
  userPhoneNumber: string(name='user_phone_number'),
  // 身份认证类型 1支付宝实人，2芝麻实人，3非蚂蚁实人
  userType: long(name='user_type'),
  // 额外通知第三方，如果需要通知相关方外的第三方，需要在此设置关联方的租户id，若不设置则只通知资方
  relatedNotify?: [ string ](name='related_notify'),
}

model CreateLeaseUserinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码 0表示成功
  code?: long(name='code'),
  // 错误信息
  errMessage?: string(name='err_message'),
  // 用户信息存储到合约中对应的区块链交易哈希
  responseData?: string(name='response_data'),
}

/**
 * Description: 租赁服务平台上传用户信息
 * Summary: 租赁服务平台上传用户信息
 */
async function createLeaseUserinfo(request: CreateLeaseUserinfoRequest): CreateLeaseUserinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseUserinfoEx(request, headers, runtime);
}

/**
 * Description: 租赁服务平台上传用户信息
 * Summary: 租赁服务平台上传用户信息
 */
async function createLeaseUserinfoEx(request: CreateLeaseUserinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseUserinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.userinfo.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseOrderinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 实际预授权金额，芝麻信用免押金额 精确到毫厘，即123400表示12.34元
  acutalPreAuthFree: long(name='acutal_pre_auth_free'),
  // 融资租赁业务id，由资方控制台创建返回
  applicationId?: string(name='application_id'),
  // 是否启动异步处理订单
  async?: long(name='async'),
  // 采购发票地址
  billUrl?: string(name='bill_url'),
  // 到期买断价 精确到毫厘，即123400表示12.34元
  buyOutPrice: long(name='buy_out_price'),
  // 市编码
  cityCode?: string(name='city_code'),
  // 免押金额 精确到毫厘，即123400表示12.34元
  depositFree: long(name='deposit_free'),
  // 区编码
  districtCode?: string(name='district_code'),
  // 融资租赁额外字段
  extraInfo?: string(name='extra_info'),
  // 安装服务记录哈希
  installHash?: string(name='install_hash'),
  // 安装拆卸费 精确到毫厘，即123400表示12.34元
  installPrice?: long(name='install_price'),
  // 安装服务记录链上存证交易哈希
  installTxHash?: string(name='install_tx_hash'),
  // 保险单号
  insuranceNumber?: string(name='insurance_number'),
  // 保险链接
  insuranceUrl?: string(name='insurance_url'),
  // 租赁物入库日  格式为2019-8-31 12:00:00
  inStoreTime?: string(name='in_store_time'),
  // 订单额外信息
  leaseOrderExtra?: [ LeaseOrderExtra ](name='lease_order_extra'),
  // 融资租赁及服务协议之补充协议文件
  leaseServiceAdditionalFileHash?: string(name='lease_service_additional_file_hash'),
  // 融资租赁及服务协议之补充协议文件链上存证交易哈希
  leaseServiceAdditionalFileTxHash?: string(name='lease_service_additional_file_tx_hash'),
  // 融资租赁及服务协议文件hash，三方协议
  leaseServiceFileHash: string(name='lease_service_file_hash'),
  // 融资租赁及服务协议文件链上存证交易哈希
  leaseServiceFileTxHash: string(name='lease_service_file_tx_hash'),
  // 订单创建时间 格式为2019-8-31 12:00:00
  orderCreateTime: string(name='order_create_time'),
  // 订单id 长度不可超过50
  orderId: string(name='order_id'),
  // 支付订单ID
  orderPayId?: string(name='order_pay_id'),
  // 订单支付时间 格式为2019-8-31 12:00:00
  orderPayTime: string(name='order_pay_time'),
  // 订单支付类型 1 预授权，2信用套餐，3支付宝代扣，4其他
  orderPayType?: long(name='order_pay_type'),
  // 租赁物出库物流编号
  outStoreDeliverNumber?: string(name='out_store_deliver_number'),
  // 租赁物出库日  格式为2019-8-31 12:00:00
  outStoreTime?: string(name='out_store_time'),
  // 支付凭证地址
  payProofUrl?: string(name='pay_proof_url'),
  // 预授权支付订单ID
  preAuthPayOrderId?: string(name='pre_auth_pay_order_id'),
  // 产品详细信息
  productInfo: [ ProductInfo ](name='product_info'),
  // 省编码
  provinceCode?: string(name='province_code'),
  // 采购发票文件哈希
  purchaseContractBillHash?: string(name='purchase_contract_bill_hash'),
  // 采购发票文件链上存证交易哈希
  purchaseContractBillTxHash?: string(name='purchase_contract_bill_tx_hash'),
  // 采购合同文件哈希
  purchaseContractHash?: string(name='purchase_contract_hash'),
  // 采购合同文件链上存证交易哈希
  purchaseContractTxHash?: string(name='purchase_contract_tx_hash'),
  // 采购合同地址
  purchaseContractUrl?: string(name='purchase_contract_url'),
  // 额外通知第三方，如果需要通知相关方外的第三方，需要在此设置关联方的租户id，若不设置则只通知资方	
  // 
  relatedNotify?: [ string ](name='related_notify'),
  // 租赁合同地址
  rentContractUrl?: string(name='rent_contract_url'),
  // 月租金 精确到毫厘，即123400表示12.34元
  rentPricePerMonth: long(name='rent_price_per_month'),
  // 租期
  rentTerm: long(name='rent_term'),
  // 承租人签收记录哈希
  signHash?: string(name='sign_hash'),
  // 承租人签收时间  格式为2019-8-31 12:00:00
  signTime?: string(name='sign_time'),
  // 承租人签收记录链上存证哈希
  signTxHash?: string(name='sign_tx_hash'),
  // 仓库类型 1实体仓 2虚拟仓
  storeType?: long(name='store_type'),
  // 补充协议地址
  supplementProtocolUrl?: string(name='supplement_protocol_url'),
  // 供应商对应的金融科技租户id，若有此字段，则会授权相应的供应商上传采购等相关信息
  supplierIsvAccount?: string(name='supplier_isv_account'),
  // 承租人收货地址
  userAddress: string(name='user_address'),
  // 智能合同的合同id
  leaseServiceContractId?: string(name='lease_service_contract_id'),
  // 网商直付通模式的代扣协议号
  agreementNo?: string(name='agreement_no'),
  // 直付通代扣受理订单号
  agreementOrderId?: string(name='agreement_order_id'),
  // 单位是毫厘，123400
  downPayment?: long(name='down_payment'),
}

model CreateLeaseOrderinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码
  // 0 表示成功
  code?: long(name='code'),
  // 错误信息
  errMessage?: string(name='err_message'),
  // 订单产品/服务信息存储到合约中对应的区块链交易哈希
  responseData?: string(name='response_data'),
}

/**
 * Description: 租赁服务平台上传订单产品/服务信息
 * Summary: 租赁服务平台上传订单产品/服务信息
 */
async function createLeaseOrderinfo(request: CreateLeaseOrderinfoRequest): CreateLeaseOrderinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseOrderinfoEx(request, headers, runtime);
}

/**
 * Description: 租赁服务平台上传订单产品/服务信息
 * Summary: 租赁服务平台上传订单产品/服务信息
 */
async function createLeaseOrderinfoEx(request: CreateLeaseOrderinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseOrderinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.orderinfo.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeasePromiseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 融资租赁业务id，由资方控制台生成返回
  applicationId?: string(name='application_id'),
  // 审核方式,0为系统自动审核，1为人工审核
  auditMode: long(name='audit_mode'),
  // 清分机构金融科技租户ID
  clearingOrg?: string(name='clearing_org'),
  // 放款机构金融科技租户ID
  creditOrg: string(name='credit_org'),
  // 第一次还款时的日期
  firstPayDate?: string(name='first_pay_date'),
  // 融资机构的阿里uid
  leaseAlipayUid: string(name='lease_alipay_uid'),
  // 宽限期，精确到毫秒
  limit: long(name='limit'),
  // 订单id 长度不可超过50
  orderId: string(name='order_id'),
  // 应付租金，精确到毫厘，即123400表示12.34元
  payDateList: [ string ](name='pay_date_list'),
  // 租赁方承诺额外字段
  payExtraInfoList?: [ string ](name='pay_extra_info_list'),
  // 应付租金 精确到毫厘，即123400表示12.34元	
  // 
  payMoney?: long(name='pay_money'),
  // 应付租金 精确到毫厘，即123400表示12.34元
  payMoneyList: [ long ](name='pay_money_list'),
  // 应付租金的期数
  payPeriod: long(name='pay_period'),
  // 是否启动异步订单处理
  async?: long(name='async'),
  // 首付款代扣流水号，最大长度是128
  downPaymentSerialNumber?: string(maxLength=128, minLength=0, name='down_payment_serial_number'),
}

model CreateLeasePromiseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码
  code?: long(name='code'),
  // 错误信息
  errMessage?: string(name='err_message'),
  // 租方承诺信息存储到合约中对应的区块链交易哈希
  responseData?: string(name='response_data'),
}

/**
 * Description: 租赁服务平台上传承诺信息
 * Summary: 租赁服务平台上传承诺信息
 */
async function createLeasePromise(request: CreateLeasePromiseRequest): CreateLeasePromiseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeasePromiseEx(request, headers, runtime);
}

/**
 * Description: 租赁服务平台上传承诺信息
 * Summary: 租赁服务平台上传承诺信息
 */
async function createLeasePromiseEx(request: CreateLeasePromiseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeasePromiseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.promise.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseVerifyinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 融资租赁业务id，由资方控制台生成返回
  applicationId?: string(name='application_id'),
  // 是否启动订单的异步处理
  async?: long(name='async'),
  // 放款账户
  cardNumber?: string(name='card_number'),
  // 授信终止时间，格式为"2019-07-31 12:00:00"
  creditEndTime?: string(name='credit_end_time'),
  // 授信额度，精确到毫厘，即123400表示12.34元
  creditLimit?: long(name='credit_limit'),
  // 授信起始时间，格式为"2019-07-31 12:00:00"
  creditStartTime?: string(name='credit_start_time'),
  // 融资租赁审贷信息额外字段
  extraInfo?: string(name='extra_info'),
  // 承租企业统一社会信用代码 长度不可超过50
  leaseCorpId?: string(name='lease_corp_id'),
  // 承租企业名称 长度不可超过50
  leaseCorpName?: string(name='lease_corp_name'),
  // 承租法定代表人姓名 长度不可超过50
  leaseCorpOwnerName?: string(name='lease_corp_owner_name'),
  // 租赁服务平台id
  leaseId: string(name='lease_id'),
  // 放款流水单号
  loan?: string(name='loan'),
  // 订单id 长度不可超过50
  orderId: string(name='order_id'),
  // 还款计划文件哈希
  payBackHash?: string(name='pay_back_hash'),
  // 还款计划文件存证交易哈希
  payBackTxHash?: string(name='pay_back_tx_hash'),
  // 承租人身份证
  userId?: string(name='user_id'),
  // 承租人姓名 长度不可超过10
  userName?: string(name='user_name'),
  // 承租人手机号
  userPhoneNumber?: string(name='user_phone_number'),
  // 是否通过，0表示不通过，1表示通过
  verifyResult: long(name='verify_result'),
  // 付款汇款凭证 民盛转账成功后上传
  voucher?: string(name='voucher'),
  // 拒绝的理由
  verifyRefuseDesc?: string(name='verify_refuse_desc'),
}

model CreateLeaseVerifyinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码
  // 0表示成功
  code?: long(name='code'),
  // 错误信息
  errMessage?: string(name='err_message'),
  // 审贷信息存储到合约中对应的区块链交易哈希
  responseData?: string(name='response_data'),
}

/**
 * Description: 融资平台上传租赁物购买贷款订单信息
 * Summary: 融资平台上传租赁物购买贷款订单信息
 */
async function createLeaseVerifyinfo(request: CreateLeaseVerifyinfoRequest): CreateLeaseVerifyinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseVerifyinfoEx(request, headers, runtime);
}

/**
 * Description: 融资平台上传租赁物购买贷款订单信息
 * Summary: 融资平台上传租赁物购买贷款订单信息
 */
async function createLeaseVerifyinfoEx(request: CreateLeaseVerifyinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseVerifyinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.verifyinfo.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseCreditpromiseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 融资租赁业务id，由资方控制台创建返回
  applicationId?: string(name='application_id'),
  // 融资租赁承诺额外字段
  creditPromiseExtraInfoList?: [ string ](name='credit_promise_extra_info_list'),
  // 租赁平台金融科技id
  leaseId: string(name='lease_id'),
  // 订单id 长度不可超过50
  orderId: string(name='order_id'),
  // 垫付金额
  payInAdvanceMoney?: long(name='pay_in_advance_money'),
  // 垫付金额，精确到毫厘，即123400表示12.34元
  payInAdvanceMoneyList?: [ long ](name='pay_in_advance_money_list'),
  // 垫付日期
  payInAdvanceTime?: string(name='pay_in_advance_time'),
  // 垫付日  格式为2019-8-31 12:00:00
  payInAdvanceTimeList: [ string ](name='pay_in_advance_time_list'),
  // 根据融资租赁合同及其补充协议哈希
  promiseHash: string(name='promise_hash'),
  // 根据融资租赁合同及其补充协议存证交易hash
  promiseTxHash: string(name='promise_tx_hash'),
  // 归还金额
  returnMoney?: long(name='return_money'),
  // 还款金额，精确到毫厘，即123400表示12.34元
  returnMoneyList: [ long ](name='return_money_list'),
  // 还款比例，精确到小数点后四位 12.34% 表示为1234
  returnRate?: long(name='return_rate'),
  // 归还日，格式为"2019-07-31 12:00:00"
  returnTime?: string(name='return_time'),
  // 归还日，格式为"2019-07-31 12:00:00"
  returnTimeList: [ string ](name='return_time_list'),
  // 是否启动异步订单处理
  async?: long(name='async'),
}

model CreateLeaseCreditpromiseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码
  // 0表示成功
  code?: long(name='code'),
  // 错误信息
  errMessage?: string(name='err_message'),
  // 资方承诺信息存储到合约中对应的区块链交易哈希
  responseData?: string(name='response_data'),
}

/**
 * Description: 融资方上传承诺信息
 * Summary: 融资方上传承诺信息
 */
async function createLeaseCreditpromise(request: CreateLeaseCreditpromiseRequest): CreateLeaseCreditpromiseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseCreditpromiseEx(request, headers, runtime);
}

/**
 * Description: 融资方上传承诺信息
 * Summary: 融资方上传承诺信息
 */
async function createLeaseCreditpromiseEx(request: CreateLeaseCreditpromiseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseCreditpromiseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.creditpromise.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseDisburseinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 共管账户，网商清分
  activeAccount: string(name='active_account'),
  // 对结果的简要描述信息
  activeResultDesc: string(name='active_result_desc'),
  // 成功/失败 0表示失败，1表示成功
  activeResultStatus: long(name='active_result_status'),
  // 授信成功日期，格式为"2019-07-31 12:00:00"
  activeReturnDate: string(name='active_return_date'),
  // 本金+利息，精确到毫厘，即123400表示12.34元
  activeReturnMoney: long(name='active_return_money'),
  // 支用期限，精确到毫秒
  disburseLimit: long(name='disburse_limit'),
  // 支用金额，精确到毫厘，即123400表示12.34元
  disburseMoney: long(name='disburse_money'),
  // 支用科目，服务费/租金，精确到毫厘，即123400表示12.34元
  disburseService: long(name='disburse_service'),
  // 逾期天数，支用到期日开始计算，天数为单位
  exceedDuration: long(name='exceed_duration'),
  // 1未还款，2已还款
  exceedPayBackStatus: long(name='exceed_pay_back_status'),
  // 逾期利率，精确到小数点后四位 12.34% 表示为1234
  exceedRate: long(name='exceed_rate'),
  // 逾期应还款总额，本金+利息+逾期利息，精确到毫厘，即123400表示12.34元
  exceedReturnMoney: long(name='exceed_return_money'),
  // 贷款利率,银行同步利率，年化8%-15%,精确到小数点后四位 12.34% 表示为1234
  loanRate: long(name='loan_rate'),
  // 订单id 长度不可超过50
  orderId: string(name='order_id'),
  // 到期还款日，T+支用期限，节假日顺延至第一个工作日，格式为"2019-07-31 12:00:00"
  payBackDate: string(name='pay_back_date'),
  // 到期还款金额，本金+利息，精确到毫厘，即123400表示12.34元
  payBackMoney: long(name='pay_back_money'),
  // 应还利息，系统自动计算当日应还利息（T+1），精确到毫厘，即123400表示12.34元
  returnInterest: long(name='return_interest'),
}

model CreateLeaseDisburseinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码
  // 0表示成功
  code?: long(name='code'),
  // 错误信息描述
  errMessage?: string(name='err_message'),
  // 贷后字段存储到合约中对应的区块链交易哈希
  responseData?: string(name='response_data'),
}

/**
 * Description: 租赁平台上传支用/还款信息
 * Summary: 租赁平台上传支用/还款信息
 */
async function createLeaseDisburseinfo(request: CreateLeaseDisburseinfoRequest): CreateLeaseDisburseinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseDisburseinfoEx(request, headers, runtime);
}

/**
 * Description: 租赁平台上传支用/还款信息
 * Summary: 租赁平台上传支用/还款信息
 */
async function createLeaseDisburseinfoEx(request: CreateLeaseDisburseinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseDisburseinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.disburseinfo.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLeaseOrderinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 融资租赁业务id，由资方控制台生成返回
  applicationId?: string(name='application_id'),
  // 租赁平台金融科技租户id
  leaseId: string(name='lease_id'),
  // 订单id 长度不可超过50
  orderId: string(name='order_id'),
  // 阶段描述
  phaseInfo?: string(name='phase_info'),
}

model QueryLeaseOrderinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误码
  // 0表示成功
  code?: long(name='code'),
  // 错误信息描述
  errMessage?: string(name='err_message'),
  // 订单详细信息
  responseData?: string(name='response_data'),
}

/**
 * Description:  查询订单详细信息
 * Summary:  查询订单详细信息
 */
async function queryLeaseOrderinfo(request: QueryLeaseOrderinfoRequest): QueryLeaseOrderinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLeaseOrderinfoEx(request, headers, runtime);
}

/**
 * Description:  查询订单详细信息
 * Summary:  查询订单详细信息
 */
async function queryLeaseOrderinfoEx(request: QueryLeaseOrderinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLeaseOrderinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.orderinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateFinanceTextnotaryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 反欺诈查询对应的身份证号码
  certNo?: string(name='cert_no'),
  // 哈希算法
  hashAlgorithm: string(name='hash_algorithm'),
  // 位置描述信息
  location?: Location(name='location'),
  // 反欺诈查询需要的手机号码
  mobile?: string(name='mobile'),
  // 存证阶段，用户可自行维护
  phase: string(name='phase'),
  // 扩展属性
  properties?: string(name='properties'),
  // 文本哈希
  textHash: string(name='text_hash'),
  // 存证事务ID
  transactionId: string(name='transaction_id'),
  // 是否使用可信时间戳
  tsr?: boolean(name='tsr'),
  // 反欺诈查询需要的姓名
  userName?: string(name='user_name'),
  // 本次请求的唯一id
  thirdMessageId?: string(name='third_message_id'),
}

model CreateFinanceTextnotaryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 反欺诈对应的信用值
  creditRiskScore?: string(name='credit_risk_score'),
  // 可信时间戳
  tsr?: TsrResponse(name='tsr'),
  // 交易哈希
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 创建金融行业标准文本存证
 * Summary: 创建金融行业文本存证
 */
async function createFinanceTextnotary(request: CreateFinanceTextnotaryRequest): CreateFinanceTextnotaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createFinanceTextnotaryEx(request, headers, runtime);
}

/**
 * Description: 创建金融行业标准文本存证
 * Summary: 创建金融行业文本存证
 */
async function createFinanceTextnotaryEx(request: CreateFinanceTextnotaryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFinanceTextnotaryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.finance.textnotary.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetFinanceTextnotaryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 位置信息
  location?: Location(name='location'),
  // 存证阶段
  phase?: string(name='phase'),
  // 扩展属性，用户可自行维护
  properties?: string(name='properties'),
  // 存证事务ID
  transactionId?: string(name='transaction_id'),
  // 交易哈希
  txHash: string(name='tx_hash'),
}

model GetFinanceTextnotaryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 哈希算法
  hashAlgorithm?: string(name='hash_algorithm'),
  // 文本哈希
  textHash?: string(name='text_hash'),
  // 可信时间戳
  tsr?: TsrResponse(name='tsr'),
  // 存证阶段
  phase?: string(name='phase'),
  // 扩展属性
  properties?: string(name='properties'),
}

/**
 * Description: 获取金融行业文本存证接口描述
 * Summary: 获取金融行业文本存证
 */
async function getFinanceTextnotary(request: GetFinanceTextnotaryRequest): GetFinanceTextnotaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getFinanceTextnotaryEx(request, headers, runtime);
}

/**
 * Description: 获取金融行业文本存证接口描述
 * Summary: 获取金融行业文本存证
 */
async function getFinanceTextnotaryEx(request: GetFinanceTextnotaryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetFinanceTextnotaryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.finance.textnotary.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateFinanceFilenotaryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 反欺诈需要的证件号码
  certNo?: string(name='cert_no'),
  // 创建日期，时间戳类型，单位毫秒
  createdDate: long(name='created_date'),
  // 存证文件名称
  fileName: string(name='file_name'),
  // 文件存证类型，支持小于 1M 源文件或者文件哈希
  fileNotaryType: string(name='file_notary_type'),
  // 文件大小，单位 Bytes
  fileSize?: long(name='file_size'),
  // 文件类型
  fileType: string(name='file_type'),
  // 文件地址
  fileUrl?: string(name='file_url'),
  // 哈希算法
  hashAlgorithm?: string(name='hash_algorithm'),
  // 位置信息
  location?: Location(name='location'),
  // 反欺诈查询需要的手机号
  mobile?: string(name='mobile'),
  // 文件存证内容
  notaryContent: string(name='notary_content'),
  // 存证阶段
  phase: string(name='phase'),
  // 扩展属性，用户可自行维护
  properties?: string(name='properties'),
  // 存证事务ID
  transactionId: string(name='transaction_id'),
  // 是否使用可信时间戳
  tsr?: boolean(name='tsr'),
  // 反欺诈查询需要的证件上的姓名
  userName?: string(name='user_name'),
  // 本次请求的唯一ID
  thirdMessageId?: string(name='third_message_id'),
}

model CreateFinanceFilenotaryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 反欺诈查询返回的信用值
  creditRiskScore?: string(name='credit_risk_score'),
  // 可信时间戳
  tsr?: TsrResponse(name='tsr'),
  // 交易哈希
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 创建金融行业文件存证接口描述
 * Summary: 创建金融行业文件存证
 */
async function createFinanceFilenotary(request: CreateFinanceFilenotaryRequest): CreateFinanceFilenotaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createFinanceFilenotaryEx(request, headers, runtime);
}

/**
 * Description: 创建金融行业文件存证接口描述
 * Summary: 创建金融行业文件存证
 */
async function createFinanceFilenotaryEx(request: CreateFinanceFilenotaryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFinanceFilenotaryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.finance.filenotary.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetFinanceFilenotaryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 位置信息
  location?: Location(name='location'),
  // 存证状态
  phase?: string(name='phase'),
  // 扩展属性，用户自行维护
  properties?: string(name='properties'),
  // 存证事务ID
  transactionId?: string(name='transaction_id'),
  // 交易哈希
  txHash: string(name='tx_hash'),
}

model GetFinanceFilenotaryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证文件名称
  fileName?: string(name='file_name'),
  // 文件存证类型
  fileNotaryType?: string(name='file_notary_type'),
  // 哈希算法
  hashAlgorithm?: string(name='hash_algorithm'),
  // FILE_HASH 模式时该值为文件哈希；FILE_RAW 模式时该值为临时 oss 下载地址
  notaryContent?: string(name='notary_content'),
  // 存证阶段
  phase?: string(name='phase'),
  // 扩展属性
  properties?: string(name='properties'),
  // 可信时间戳
  tsr?: TsrResponse(name='tsr'),
}

/**
 * Description: 获取金融行业文件存证接口描述
 * Summary: 获取金融行业文件存证
 */
async function getFinanceFilenotary(request: GetFinanceFilenotaryRequest): GetFinanceFilenotaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getFinanceFilenotaryEx(request, headers, runtime);
}

/**
 * Description: 获取金融行业文件存证接口描述
 * Summary: 获取金融行业文件存证
 */
async function getFinanceFilenotaryEx(request: GetFinanceFilenotaryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetFinanceFilenotaryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.finance.filenotary.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CheckIndustryNotaryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 行业类型
  industryType: string(name='industry_type'),
  // 核验数据列表
  notaryCheckMetaList: [ NotaryCheckMeta ](name='notary_check_meta_list'),
}

model CheckIndustryNotaryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 核验结果数组
  notaryCheckResults?: [ NotaryCheckResult ](name='notary_check_results'),
}

/**
 * Description: 统一存证核验接口
 * Summary: 统一存证核验接口（已下架）
 */
async function checkIndustryNotary(request: CheckIndustryNotaryRequest): CheckIndustryNotaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return checkIndustryNotaryEx(request, headers, runtime);
}

/**
 * Description: 统一存证核验接口
 * Summary: 统一存证核验接口（已下架）
 */
async function checkIndustryNotaryEx(request: CheckIndustryNotaryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckIndustryNotaryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.industry.notary.check', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateSueBreakpromiseinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 合同唯一标识
  // 
  orderId: string(name='order_id'),
  // 当事人身份证号
  userId: string(name='user_id'),
  // 当事人姓名
  userName: string(name='user_name'),
  // 当事人手机号
  phoneNumber: string(name='phone_number'),
  // 当事人邮箱地址
  email: string(name='email'),
  // 诉前Id
  preSueId: string(name='pre_sue_id'),
  // 应履约日期，格式为"2019-07-31 12:00:00"
  promiseDate: string(name='promise_date'),
  // 宽限期(天数，从应履约日期到进行诉前违约惩戒的自然日数）
  promiseLimit: long(name='promise_limit'),
  // 起诉期，格式为"2019-07-31 12:00:00"
  // 
  sueDate: string(name='sue_date'),
  // 商户统一社会信用代码或个人身份证
  initiatorId: string(name='initiator_id'),
  // 商户或个人名称
  // 
  initiatorName: string(name='initiator_name'),
  // 管辖法院名称
  courtName: string(name='court_name'),
  // 法院唯一标识
  courtId: string(name='court_id'),
  // 违约金额，精确到毫厘，即123400表示12.34元
  breakPromiseMoney: long(name='break_promise_money'),
  // 所属行业
  businessClass: string(name='business_class'),
}

model CreateSueBreakpromiseinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 成功插入违约数据到区块链的交易哈希
  responseData?: string(name='response_data'),
  // 状态码,0表示成功
  // 
  code?: string(name='code'),
  // 错误信息
  errMessage?: string(name='err_message'),
}

/**
 * Description: 违约案件信息提交服务
 * Summary: 违约案件信息提交服务
 */
async function createSueBreakpromiseinfo(request: CreateSueBreakpromiseinfoRequest): CreateSueBreakpromiseinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createSueBreakpromiseinfoEx(request, headers, runtime);
}

/**
 * Description: 违约案件信息提交服务
 * Summary: 违约案件信息提交服务
 */
async function createSueBreakpromiseinfoEx(request: CreateSueBreakpromiseinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSueBreakpromiseinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.sue.breakpromiseinfo.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSueBreakpromiseinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 合同唯一标识，不可更新
  // 
  orderId: string(name='order_id'),
  // 当事人手机号
  phoneNumber: string(name='phone_number'),
  // 当事人电子邮箱地址
  email: string(name='email'),
  // 诉前Id，不可更新
  // 
  preSueId: string(name='pre_sue_id'),
  // 应履约日期，格式为"2019-07-31 12:00:00"
  promiseDate: string(name='promise_date'),
  // 宽限期(天数，从应履约日期到进行诉前违约惩戒的自然日数）
  promiseLimit: long(name='promise_limit'),
  // 起诉期，格式为"2019-07-31 12:00:00"
  sueDate: string(name='sue_date'),
  // 违约金额，精确到毫厘，即123400表示12.34元
  breakPromiseMoney: long(name='break_promise_money'),
  // 所属行业
  // 
  businessClass: string(name='business_class'),
}

model UpdateSueBreakpromiseinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 违约案件信息提交对应的区块链交易哈希
  responseData?: string(name='response_data'),
  // 状态码,0表示成功
  // 
  code?: long(name='code'),
  // 错误信息
  errMessage?: string(name='err_message'),
}

/**
 * Description: 违约案件信息修改服务
 * Summary: 违约案件信息修改服务
 */
async function updateSueBreakpromiseinfo(request: UpdateSueBreakpromiseinfoRequest): UpdateSueBreakpromiseinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSueBreakpromiseinfoEx(request, headers, runtime);
}

/**
 * Description: 违约案件信息修改服务
 * Summary: 违约案件信息修改服务
 */
async function updateSueBreakpromiseinfoEx(request: UpdateSueBreakpromiseinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSueBreakpromiseinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.sue.breakpromiseinfo.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeleteSueBreakpromiseinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 合同唯一标识，不可更新
  orderId: string(name='order_id'),
  // 诉前id，不可更新
  preSueId: string(name='pre_sue_id'),
}

model DeleteSueBreakpromiseinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 违约案件信息提交对应的区块链交易哈希
  responseData?: string(name='response_data'),
  // 状态码 0表示成功
  code?: long(name='code'),
  // 错误信息
  errMessage?: string(name='err_message'),
}

/**
 * Description: 违约案件信息删除服务
 * Summary: 违约案件信息删除服务
 */
async function deleteSueBreakpromiseinfo(request: DeleteSueBreakpromiseinfoRequest): DeleteSueBreakpromiseinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deleteSueBreakpromiseinfoEx(request, headers, runtime);
}

/**
 * Description: 违约案件信息删除服务
 * Summary: 违约案件信息删除服务
 */
async function deleteSueBreakpromiseinfoEx(request: DeleteSueBreakpromiseinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSueBreakpromiseinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.sue.breakpromiseinfo.delete', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QuerySueUserinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 被查者身份证号
  userId: string(name='user_id'),
}

model QuerySueUserinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码 0表示成功
  code?: long(name='code'),
  // 错误信息
  errMessage?: string(name='err_message'),
  // 用户违约个数
  responseData?: long(name='response_data'),
}

/**
 * Description: 查询惩戒信息
 * Summary: 查询惩戒信息
 */
async function querySueUserinfo(request: QuerySueUserinfoRequest): QuerySueUserinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return querySueUserinfoEx(request, headers, runtime);
}

/**
 * Description: 查询惩戒信息
 * Summary: 查询惩戒信息
 */
async function querySueUserinfoEx(request: QuerySueUserinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QuerySueUserinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.sue.userinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSueExeplarycontractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 合约名称
  contractId: string(name='contract_id'),
}

model UpdateSueExeplarycontractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 0xabcdef123324234
  responseData?: string(name='response_data'),
  // 状态码 0表示成功
  code?: long(name='code'),
  // 错误信息
  errMessage?: string(name='err_message'),
}

/**
 * Description: 升级用户管理合约
 * Summary: 升级用户管理合约
 */
async function updateSueExeplarycontract(request: UpdateSueExeplarycontractRequest): UpdateSueExeplarycontractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSueExeplarycontractEx(request, headers, runtime);
}

/**
 * Description: 升级用户管理合约
 * Summary: 升级用户管理合约
 */
async function updateSueExeplarycontractEx(request: UpdateSueExeplarycontractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSueExeplarycontractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.sue.exeplarycontract.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model UpdateSueExemplaryrevertRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 用户管理合约id
  contractId: string(name='contract_id'),
}

model UpdateSueExemplaryrevertResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 回退合约所对应的区块链交易哈希
  responseData?: string(name='response_data'),
  // 错误码 0表示成功
  code?: long(name='code'),
  // 错误信息描述
  errMessage?: string(name='err_message'),
}

/**
 * Description: 回退用户管理合约
 * Summary: 回退用户管理合约
 */
async function updateSueExemplaryrevert(request: UpdateSueExemplaryrevertRequest): UpdateSueExemplaryrevertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return updateSueExemplaryrevertEx(request, headers, runtime);
}

/**
 * Description: 回退用户管理合约
 * Summary: 回退用户管理合约
 */
async function updateSueExemplaryrevertEx(request: UpdateSueExemplaryrevertRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSueExemplaryrevertResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.sue.exemplaryrevert.update', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseAuditRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 融资租赁业务id，由资方控制台创建返回
  applicationId?: string(name='application_id'),
  // 是否启动订单的异步处理
  async?: long(name='async'),
  // 融资机构审核批次
  // 
  batchIndex?: string(name='batch_index'),
  // 当前订单处于本批次中的index
  currentAuditIndex?: long(name='current_audit_index'),
  // 融资租赁额外字段
  extraInfo?: string(name='extra_info'),
  // 租赁服务平台ID 长度不可超过50
  leaseId: string(name='lease_id'),
  // 融资机构审核状态，0.审核中1.审核失败2.审核成功
  manualAudit: long(name='manual_audit'),
  // 融资结构审核说明，非必填，审核失败必填失败原因
  manualAuditComments?: string(name='manual_audit_comments'),
  // 订单id 长度不可超过50
  // 
  orderId: string(name='order_id'),
  // 总审核的个数
  totalAuditNumber?: long(name='total_audit_number'),
  // 额外通知第三方，如果需要通知相关方外的第三方，需要在此设置关联方的租户id，若不设置则只通知资方	
  // 
  relatedNotify?: [ string ](name='related_notify'),
}

model CreateLeaseAuditResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 0表示成功
  code?: long(name='code'),
  // 错误信息
  // 
  errMessage?: string(name='err_message'),
  // 融资平台审核订单信息存储到合约中对应的区块链交易哈希
  responseData?: string(name='response_data'),
}

/**
 * Description: 融资平台审核订单信息
 * Summary: 融资平台审核订单信息
 */
async function createLeaseAudit(request: CreateLeaseAuditRequest): CreateLeaseAuditResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseAuditEx(request, headers, runtime);
}

/**
 * Description: 融资平台审核订单信息
 * Summary: 融资平台审核订单信息
 */
async function createLeaseAuditEx(request: CreateLeaseAuditRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseAuditResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.audit.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeasePaymentfileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 融资租赁业务id，由资方控制台生成
  applicationId?: string(name='application_id'),
  // 是否启动订单的异步处理
  async?: long(name='async'),
  // 融资租赁额外字段
  extraInfo?: string(name='extra_info'),
  // 租赁服务平台ID 长度不可超过50
  leaseId: string(name='lease_id'),
  // 订单id 长度不可超过50
  orderId: string(name='order_id'),
  // 付款通知书加签完电子签名后，PDF文件hash
  paymentFileHash?: string(name='payment_file_hash'),
  // 付款通知书存证交易哈希
  paymentFileTxHash?: string(name='payment_file_tx_hash'),
  // 付款通知所在路径
  paymentUrl?: string(name='payment_url'),
  // 额外通知第三方，如果需要通知相关方外的第三方，需要在此设置关联方的租户id，若不设置则只通知资方	
  // 
  relatedNotify?: [ string ](name='related_notify'),
}

model CreateLeasePaymentfileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码 0表示成功
  // 
  code?: long(name='code'),
  // 错误信息
  // 
  errMessage?: string(name='err_message'),
  // 租赁平台上传付款通知到合约中对应
  responseData?: string(name='response_data'),
}

/**
 * Description: 租赁平台上传付款通知信息
 * Summary: 租赁平台上传付款通知信息
 */
async function createLeasePaymentfile(request: CreateLeasePaymentfileRequest): CreateLeasePaymentfileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeasePaymentfileEx(request, headers, runtime);
}

/**
 * Description: 租赁平台上传付款通知信息
 * Summary: 租赁平台上传付款通知信息
 */
async function createLeasePaymentfileEx(request: CreateLeasePaymentfileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeasePaymentfileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.paymentfile.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseRentalRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 融资租赁业务id，由资方控制台生成返回
  applicationId?: string(name='application_id'),
  // 手续费，如通过预授权、代扣的方式规划，必填
  charge: long(name='charge'),
  // 融资租赁用户还款额外字段
  extraInfo?: string(name='extra_info'),
  // 是否本订单所有租金还款状态结束
  isFinish: boolean(name='is_finish'),
  // 租期编号，从1开始
  leaseTermIndex: long(name='lease_term_index'),
  // 订单id 长度不可超过50
  orderId: string(name='order_id'),
  // 剩余租金总数,会核验剩余租金与承诺等额
  remainRental: long(name='remain_rental'),
  // 剩余归还期数
  remainTerm: long(name='remain_term'),
  // 租金归还金额,精确到毫厘，即123400表示12.34元
  rentalMoney: long(name='rental_money'),
  // 租金归还状态，1.足额归还2.部分归还3.未归还
  rentalReturnState: long(name='rental_return_state'),
  // 归还时间，格式为"2019-07-31 12:00:00"
  returnTime: string(name='return_time'),
  // 还款凭证编号，不超过128字符，1.支付宝流水号
  returnVoucherSerial: string(name='return_voucher_serial'),
  // 还款凭证类型，1.支付宝2.平台代收（客户主动还款）3.其他
  returnVoucherType: long(name='return_voucher_type'),
  // 归还方式，1.预授权代扣2.支付宝代扣3.主动还款4.其他
  returnWay: long(name='return_way'),
  // 是否启动订单的异步处理
  async?: long(name='async'),
}

model CreateLeaseRentalResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码 0表示成功
  code?: long(name='code'),
  // 错误信息
  // 
  errMessage?: string(name='err_message'),
  // 租金归还记录上传到链上的哈希
  responseData?: string(name='response_data'),
}

/**
 * Description: 租赁系统上传租金归还记录 分期调用
 * Summary: 租赁系统上传租金归还记录 分期调用
 */
async function createLeaseRental(request: CreateLeaseRentalRequest): CreateLeaseRentalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseRentalEx(request, headers, runtime);
}

/**
 * Description: 租赁系统上传租金归还记录 分期调用
 * Summary: 租赁系统上传租金归还记录 分期调用
 */
async function createLeaseRentalEx(request: CreateLeaseRentalRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseRentalResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.rental.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseClearingRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 融资租赁业务id，由资方控制台创建返回
  applicationId?: string(name='application_id'),
  // 清分收款账号 长度不超过64
  clearingAccount: string(name='clearing_account'),
  // 清分金额,精确到毫厘，即123400表示12.34元
  clearingMoney: long(name='clearing_money'),
  // 清分订单号 长度不超过128
  clearingOrderIds: [ string ](name='clearing_order_ids'),
  // 清分状态,1.足额2.部分3.零
  clearingState?: long(name='clearing_state'),
  // 结束时间，格式为"2019-07-31 12:00:00"
  endTime: string(name='end_time'),
  // 融资租赁额外字段
  extraInfo?: string(name='extra_info'),
  // 租赁平台商户Id 长度不可超过50
  leaseId: string(name='lease_id'),
  // 订单id 长度不可超过50
  // 
  orderId: string(name='order_id'),
  // 还款批次
  returnIndex: long(name='return_index'),
  // 开始时间，格式为"2019-07-31 12:00:00"
  startTime: string(name='start_time'),
  // 是否启动订单的异步处理
  async?: long(name='async'),
  // 清分资金的来源，比如用户xx元，商家yy元
  memo?: string(name='memo'),
}

model CreateLeaseClearingResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码 0表示成功
  code?: long(name='code'),
  // 错误信息
  // 
  errMessage?: string(name='err_message'),
  // 清分信息链上交易哈希
  // 
  responseData?: string(name='response_data'),
}

/**
 * Description: 清分服务机构上传资金清算记录，分期
 * Summary: 清分服务机构上传资金清算记录，分期
 */
async function createLeaseClearing(request: CreateLeaseClearingRequest): CreateLeaseClearingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseClearingEx(request, headers, runtime);
}

/**
 * Description: 清分服务机构上传资金清算记录，分期
 * Summary: 清分服务机构上传资金清算记录，分期
 */
async function createLeaseClearingEx(request: CreateLeaseClearingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseClearingResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.clearing.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseRepaymentRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 融资租赁业务id，由资方控制台生成返回
  applicationId?: string(name='application_id'),
  // 融资租赁租户还款额外字段
  extraInfo?: string(name='extra_info'),
  // 是否最终订单还款结束
  isFinish: boolean(name='is_finish'),
  // 租赁平台商户Id 长度不可超过50
  leaseId: string(name='lease_id'),
  // 订单id 长度不可超过50
  // 
  orderId: string(name='order_id'),
  // 逾期天数,支用到期日开始计算
  overdueDay?: long(name='overdue_day'),
  // 逾期应还款总额,本金+利息+逾期利息,精确到毫厘，即123400表示12.34元
  overdueMoney?: long(name='overdue_money'),
  // 逾期利率（日利率）,精确到小数点后四位 12.34% 表示为1234
  overdueRate?: long(name='overdue_rate'),
  // 逾期状态,暂时都以0处理，目前不处理
  overdueStatus?: long(name='overdue_status'),
  // 剩余应还金额，精确到毫厘，即123400表示12.34元
  remainReturnMoney: long(name='remain_return_money'),
  // 剩余应还期数
  // 
  remainReturnTerm: long(name='remain_return_term'),
  // 每次还款流水凭证，需要融资方确认，id一样则不处理
  repaymentUniqueId: string(name='repayment_unique_id'),
  // 还款结果简要描述,长度不超过256
  returnDescription: string(name='return_description'),
  // 还款批次
  // 
  returnIndex: long(name='return_index'),
  // 还款总额,本金+利息，精确到毫厘，即123400表示12.34元
  returnMoney: long(name='return_money'),
  // 还款结果状态,1.成功 2.失败
  returnStatus: long(name='return_status'),
  // 还款日期，格式为"2019-07-31 12:00:00"
  returnTime: string(name='return_time'),
  // 还款来源,1.共管账号，2.网商清分
  source: long(name='source'),
  // 逾期后还款状态,1未还款,2已还款
  status?: long(name='status'),
  // 是否启动订单的异步处理
  async?: long(name='async'),
  // 原所有权id
  // 
  // 
  oldOwnershipId?: string(name='old_ownership_id'),
  // 现所有权id
  // 
  // 
  newOwnershipId?: string(name='new_ownership_id'),
}

model CreateLeaseRepaymentResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码 0表示成功
  code?: long(name='code'),
  // 错误信息
  errMessage?: string(name='err_message'),
  // 融资租赁金融机构上传还款信息链上交易哈希值
  responseData?: string(name='response_data'),
}

/**
 * Description: 融资金融机构上传还款信息 每期
 * Summary: 融资金融机构上传还款信息 每期
 */
async function createLeaseRepayment(request: CreateLeaseRepaymentRequest): CreateLeaseRepaymentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseRepaymentEx(request, headers, runtime);
}

/**
 * Description: 融资金融机构上传还款信息 每期
 * Summary: 融资金融机构上传还款信息 每期
 */
async function createLeaseRepaymentEx(request: CreateLeaseRepaymentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseRepaymentResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.repayment.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseNotifyregisterRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
}

model CreateLeaseNotifyregisterResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 0表示成功
  code?: long(name='code'),
  // 错误描述
  errMessage?: string(name='err_message'),
}

/**
 * Description: 融资租赁通知系统注册
 * Summary: 融资租赁通知系统注册
 */
async function createLeaseNotifyregister(request: CreateLeaseNotifyregisterRequest): CreateLeaseNotifyregisterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseNotifyregisterEx(request, headers, runtime);
}

/**
 * Description: 融资租赁通知系统注册
 * Summary: 融资租赁通知系统注册
 */
async function createLeaseNotifyregisterEx(request: CreateLeaseNotifyregisterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseNotifyregisterResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.notifyregister.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLeaseIotinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 查询截止时间
  endTime: string(name='end_time'),
  // 设备唯一id imei id
  productImeiId: string(name='product_imei_id'),
  // 查询开启时间
  startTime: string(name='start_time'),
}

model QueryLeaseIotinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误码
  code?: long(name='code'),
  // ""
  errMessage?: string(name='err_message'),
  // 设备详情
  leaseIotItemInfo?: [ LeaseIotItemInfo ](name='lease_iot_item_info'),
}

/**
 * Description: 根据imeiID查询iot设备的详情
 * Summary: 根据imeiID查询iot设备的详情
 */
async function queryLeaseIotinfo(request: QueryLeaseIotinfoRequest): QueryLeaseIotinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLeaseIotinfoEx(request, headers, runtime);
}

/**
 * Description: 根据imeiID查询iot设备的详情
 * Summary: 根据imeiID查询iot设备的详情
 */
async function queryLeaseIotinfoEx(request: QueryLeaseIotinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLeaseIotinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.iotinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCourtTextnotaryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 对应的法院编号
  agencyCode?: string(name='agency_code'),
  // 对应的法院应用ID
  applicationCode?: string(name='application_code'),
  // 业务类型标识
  businessType?: string(name='business_type'),
  // 数据类型标识
  dataType?: string(name='data_type'),
  // 地理位置信息
  location?: Location(name='location'),
  // 存证阶段
  phase: string(name='phase'),
  // 扩展属性
  properties?: string(name='properties'),
  // 文本数据
  textContent: string(name='text_content'),
  // 存证事务ID
  transactionId: string(name='transaction_id'),
  // 是否使用可信时间戳
  tsr?: boolean(name='tsr'),
}

model CreateCourtTextnotaryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可信时间戳
  tsr?: TsrResponse(name='tsr'),
  // 交易哈希
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 创建法院通用文本存证
 * Summary: 法院通用文本存证创建接口
 */
async function createCourtTextnotary(request: CreateCourtTextnotaryRequest): CreateCourtTextnotaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCourtTextnotaryEx(request, headers, runtime);
}

/**
 * Description: 创建法院通用文本存证
 * Summary: 法院通用文本存证创建接口
 */
async function createCourtTextnotaryEx(request: CreateCourtTextnotaryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCourtTextnotaryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.court.textnotary.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetCourtTextnotaryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 地理位置信息
  location?: Location(name='location'),
  // 存证阶段
  phase?: string(name='phase'),
  // 扩展属性
  properties?: string(name='properties'),
  // 存证事务ID
  transactionId?: string(name='transaction_id'),
  // 交易哈希
  txHash: string(name='tx_hash'),
}

model GetCourtTextnotaryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务类型标识
  businessType?: string(name='business_type'),
  // 数据类型标识
  dataType?: string(name='data_type'),
  // 文本数据
  textContent?: string(name='text_content'),
  // 可信时间戳
  tsr?: TsrResponse(name='tsr'),
  // 对应的法院编号
  agencyCode?: string(name='agency_code'),
  // 对应的法院应用ID
  applicationCode?: string(name='application_code'),
}

/**
 * Description: 获取法院通用文本存证
 * Summary: 法院通用文本存证获取接口
 */
async function getCourtTextnotary(request: GetCourtTextnotaryRequest): GetCourtTextnotaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getCourtTextnotaryEx(request, headers, runtime);
}

/**
 * Description: 获取法院通用文本存证
 * Summary: 法院通用文本存证获取接口
 */
async function getCourtTextnotaryEx(request: GetCourtTextnotaryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetCourtTextnotaryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.court.textnotary.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateCourtFilenotaryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 对应的法院编号
  agencyCode?: string(name='agency_code'),
  // 对应的法院应用ID	
  applicationCode?: string(name='application_code'),
  // 业务类型标识
  businessType?: string(name='business_type'),
  // 数据类型标识
  dataType?: string(name='data_type'),
  // 文件哈希
  fileHash: string(name='file_hash'),
  // 文件名
  fileName: string(name='file_name'),
  // 哈希算法，目前仅支持SHA256
  hashAlgorithm: string(name='hash_algorithm'),
  // 地理位置信息
  location?: Location(name='location'),
  // 存证阶段
  phase: string(name='phase'),
  // 扩展属性
  properties?: string(name='properties'),
  // 存证事务ID
  transactionId: string(name='transaction_id'),
  // 是否使用可信时间戳
  tsr?: boolean(name='tsr'),
}

model CreateCourtFilenotaryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可信时间戳
  tsr?: TsrResponse(name='tsr'),
  // 交易哈希
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 创建法院通用文件存证接口
 * Summary: 法院通用文件存证创建接口
 */
async function createCourtFilenotary(request: CreateCourtFilenotaryRequest): CreateCourtFilenotaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createCourtFilenotaryEx(request, headers, runtime);
}

/**
 * Description: 创建法院通用文件存证接口
 * Summary: 法院通用文件存证创建接口
 */
async function createCourtFilenotaryEx(request: CreateCourtFilenotaryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCourtFilenotaryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.court.filenotary.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetCourtFilenotaryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 地理位置信息
  location?: Location(name='location'),
  // 存证阶段
  phase?: string(name='phase'),
  // 扩展属性
  properties?: string(name='properties'),
  // 存证事务ID
  transactionId?: string(name='transaction_id'),
  // 交易哈希
  txHash: string(name='tx_hash'),
}

model GetCourtFilenotaryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 业务类型标识
  businessType?: string(name='business_type'),
  // 数据类型标识
  dataType?: string(name='data_type'),
  // 文件哈希
  fileHash?: string(name='file_hash'),
  // 文件名
  fileName?: string(name='file_name'),
  // 可信时间戳
  tsr?: TsrResponse(name='tsr'),
  // 对应的法院编号
  agencyCode?: string(name='agency_code'),
  // 对应的法院应用ID
  applicationCode?: string(name='application_code'),
}

/**
 * Description: 获取法院通用文件存证
 * Summary: 法院通用文件存证获取接口
 */
async function getCourtFilenotary(request: GetCourtFilenotaryRequest): GetCourtFilenotaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getCourtFilenotaryEx(request, headers, runtime);
}

/**
 * Description: 获取法院通用文件存证
 * Summary: 法院通用文件存证获取接口
 */
async function getCourtFilenotaryEx(request: GetCourtFilenotaryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetCourtFilenotaryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.court.filenotary.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseRouteRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 方法名
  route: string(name='route'),
  // 具体业务字段，json形式
  bizContent: string(name='biz_content'),
}

model CreateLeaseRouteResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码
  // 
  code?: long(name='code'),
  // 错误信息
  // 
  errMessage?: string(name='err_message'),
  // 租方承诺信息存储到合约中对应的区块链交易哈希
  // 
  responseData?: string(name='response_data'),
}

/**
 * Description: 融资租赁定制化统一入口
 * Summary: 融资租赁定制化统一入口
 */
async function createLeaseRoute(request: CreateLeaseRouteRequest): CreateLeaseRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseRouteEx(request, headers, runtime);
}

/**
 * Description: 融资租赁定制化统一入口
 * Summary: 融资租赁定制化统一入口
 */
async function createLeaseRouteEx(request: CreateLeaseRouteRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseRouteResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.route.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLeaseEncryptedinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 被查询的租赁公司对应的租户ID
  leaseId: string(name='lease_id'),
  // 订单id
  orderId: string(name='order_id'),
  // 融资租赁业务id，由资方控制台创建返回
  applicationId?: string(name='application_id'),
}

model QueryLeaseEncryptedinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误码
  code?: long(name='code'),
  // 错误描述信息
  errMessage?: string(name='err_message'),
  // 对应的加密后的具体信息
  responseData?: string(name='response_data'),
}

/**
 * Description: 查询用户等加密信息，返回加密后的结果，用户自己进行解密
 * Summary: 查询用户等加密信息
 */
async function queryLeaseEncryptedinfo(request: QueryLeaseEncryptedinfoRequest): QueryLeaseEncryptedinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLeaseEncryptedinfoEx(request, headers, runtime);
}

/**
 * Description: 查询用户等加密信息，返回加密后的结果，用户自己进行解密
 * Summary: 查询用户等加密信息
 */
async function queryLeaseEncryptedinfoEx(request: QueryLeaseEncryptedinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLeaseEncryptedinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.encryptedinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateContractTextRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 签署结束信息，phase为FINISH时必选
  finishInfo?: ContractNotaryFinishInfo(name='finish_info'),
  // 签署流程ID
  flowId: string(name='flow_id'),
  // 签署发起信息，phase为INIT时必选
  initInfo?: ContractNotaryInitInfo(name='init_info'),
  // 存证阶段，分为INIT(发起)，SIGN(签署)，FINISH(结束)
  phase: string(name='phase'),
  // 签署过程信息，phase为SIGN时必选
  signInfo?: ContractNotarySignInfo(name='sign_info'),
  // 存证事务ID
  transactionId: string(name='transaction_id'),
  // 签署文件存档阶段存证核验信息
  documentInfo?: ContractNotaryDocumentInfo(name='document_info'),
}

model CreateContractTextResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证凭据
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 电子合同文本存证
 * Summary: 电子合同文本存证
 */
async function createContractText(request: CreateContractTextRequest): CreateContractTextResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createContractTextEx(request, headers, runtime);
}

/**
 * Description: 电子合同文本存证
 * Summary: 电子合同文本存证
 */
async function createContractTextEx(request: CreateContractTextRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateContractTextResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.text.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ApplyContractReportRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 签署文件存档阶段存证核验信息
  documentInfo?: [ ContractNotaryDocumentInfo ](name='document_info'),
  // 签署结束阶段存证核验信息
  finishInfo: ContractNotaryFinishInfo(name='finish_info'),
  // 签署流程ID
  flowId: string(name='flow_id'),
  // 签署发起阶段存证核验信息
  initInfo: ContractNotaryInitInfo(name='init_info'),
  // 签署过程阶段存证核验信息
  signInfo: [ ContractNotarySignInfo ](name='sign_info'),
  // 存证事务ID
  transactionId: string(name='transaction_id'),
}

model ApplyContractReportResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 出证报告授权码，通过核验后获得
  authCode?: string(name='auth_code'),
}

/**
 * Description: 全流程存证后，批量提交全流程核验信息，申请出证报告授权码。成功后可生成全流程上链报告
 * Summary: 申请电子合同存证报告
 */
async function applyContractReport(request: ApplyContractReportRequest): ApplyContractReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return applyContractReportEx(request, headers, runtime);
}

/**
 * Description: 全流程存证后，批量提交全流程核验信息，申请出证报告授权码。成功后可生成全流程上链报告
 * Summary: 申请电子合同存证报告
 */
async function applyContractReportEx(request: ApplyContractReportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyContractReportResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.report.apply', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetContractTextRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证凭据
  txHash: string(name='tx_hash'),
}

model GetContractTextResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证信息对象的JSON序列化形式
  notaryData?: string(name='notary_data'),
}

/**
 * Description: 下载合同存证某个环节的内容，得到存证信息对象最终上链的JSON序列化形式，该内容可用于统一核验
 * Summary: 下载合同存证
 */
async function getContractText(request: GetContractTextRequest): GetContractTextResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getContractTextEx(request, headers, runtime);
}

/**
 * Description: 下载合同存证某个环节的内容，得到存证信息对象最终上链的JSON序列化形式，该内容可用于统一核验
 * Summary: 下载合同存证
 */
async function getContractTextEx(request: GetContractTextRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetContractTextResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.contract.text.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateInternalTransRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证关联实体（个人/企业）的身份识别信息
  customer: Identity(name='customer'),
  // 扩展属性
  properties?: string(name='properties'),
  // 业务子类型标识
  subBizId?: string(name='sub_biz_id'),
  // 是否使用可信时间戳，默认为false
  tsr?: boolean(name='tsr'),
  // 代理客户存证时，实际用户的租户ID
  realTenant?: string(name='real_tenant'),
  // 授权码
  authCode?: string(name='auth_code'),
  // 授权码对应的产品码
  product?: string(name='product'),
}

model CreateInternalTransResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回事务ID，全局唯一
  transactionId?: string(name='transaction_id'),
  // 可信时间信息
  tsr?: TsrResponse(name='tsr'),
}

/**
 * Description: 获取存证事务ID内部接口
 * Summary: 获取存证事务ID内部接口
 */
async function createInternalTrans(request: CreateInternalTransRequest): CreateInternalTransResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createInternalTransEx(request, headers, runtime);
}

/**
 * Description: 获取存证事务ID内部接口
 * Summary: 获取存证事务ID内部接口
 */
async function createInternalTransEx(request: CreateInternalTransRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateInternalTransResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.internal.trans.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateInternalTextRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 哈希算法，目前仅支持 SHA256
  hashAlgorithm?: string(name='hash_algorithm'),
  // 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
  location?: Location(name='location'),
  // 存证内容
  notaryContent: string(name='notary_content'),
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase: string(name='phase'),
  // 扩展属性
  properties?: string(name='properties'),
  // 文本存证类型，支持源文本/文本哈希
  textNotaryType?: string(name='text_notary_type'),
  // 存证事务id
  transactionId: string(name='transaction_id'),
  // 是否使用可信时间戳，默认为false
  tsr?: boolean(name='tsr'),
  // 代理客户存证时，实际用户的租户ID
  realTenant?: string(name='real_tenant'),
  // 授权码
  authCode?: string(name='auth_code'),
  // 授权码对应产品码
  product?: string(name='product'),
  // 版权文本存证支持hash存证
  bizCategory?: string(name='biz_category'),
}

model CreateInternalTextResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可信时间信息
  tsr?: TsrResponse(name='tsr'),
  // 存证凭据
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 文本存证内部接口，将文本内容存证上链
 * Summary: 文本存证内部接口，将文本内容存证上链
 */
async function createInternalText(request: CreateInternalTextRequest): CreateInternalTextResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createInternalTextEx(request, headers, runtime);
}

/**
 * Description: 文本存证内部接口，将文本内容存证上链
 * Summary: 文本存证内部接口，将文本内容存证上链
 */
async function createInternalTextEx(request: CreateInternalTextRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateInternalTextResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.internal.text.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseTextRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 哈希算法，目前仅支持 SHA256
  hashAlgorithm?: string(name='hash_algorithm'),
  // 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
  location?: Location(name='location'),
  // 存证内容
  notaryContent: string(name='notary_content'),
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase: string(name='phase'),
  // 扩展属性
  properties?: string(name='properties'),
  // 文本存证类型，支持源文本/文本哈希
  textNotaryType?: string(name='text_notary_type'),
  // 存证事务id
  transactionId: string(name='transaction_id'),
}

model CreateLeaseTextResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 入参中传入的存证阶段，可同用于租赁存证列表(twc.notary.lease.notary.list)的记录对账
  phase?: string(name='phase'),
}

/**
 * Description: 发起文本存证，将文本内容存证上链，租赁业务专用。
 * Summary: 租赁业务文本存证，将文本内容存证上链
 */
async function createLeaseText(request: CreateLeaseTextRequest): CreateLeaseTextResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseTextEx(request, headers, runtime);
}

/**
 * Description: 发起文本存证，将文本内容存证上链，租赁业务专用。
 * Summary: 租赁业务文本存证，将文本内容存证上链
 */
async function createLeaseTextEx(request: CreateLeaseTextRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseTextResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.text.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseFileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 文件存证模式，目前仅支持 FILE_RAW 和 FILE_HASH
  fileNotaryType?: string(name='file_notary_type'),
  // 当文件存证模式为FILE_HASH时，用户可以指定该参数。当前服务仅支持 SHA256，若不填写，则默认值为 SHA256。
  hashAlgorithm?: string(name='hash_algorithm'),
  // 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
  location?: Location(name='location'),
  // 存证文件内容，对文件内容做base64编码后得到。例如FILE_RAW模式下，文件内容为“test”，那么base64编码后的结果则为“dGVzdA==”。如果是FILE_HASh模式，则该字段直接为文件hash。
  notaryFile: string(name='notary_file'),
  // 存证文件名称
  notaryName: string(name='notary_name'),
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase: string(name='phase'),
  // 扩展属性
  properties?: string(name='properties'),
  // 存证事务ID
  transactionId: string(name='transaction_id'),
}

model CreateLeaseFileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 入参中的存证阶段信息，可同用于租赁存证列表(twc.notary.lease.notary.list)的记录对账
  phase?: string(name='phase'),
}

/**
 * Description: 发起文件存证，将文件内容存证上链，租赁业务专用。
 * Summary: 租赁业务文件内容存证上链
 */
async function createLeaseFile(request: CreateLeaseFileRequest): CreateLeaseFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseFileEx(request, headers, runtime);
}

/**
 * Description: 发起文件存证，将文件内容存证上链，租赁业务专用。
 * Summary: 租赁业务文件内容存证上链
 */
async function createLeaseFileEx(request: CreateLeaseFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseFileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.file.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model ListLeaseNotaryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 商户订单号，需要同twc.notary.lease.order.create接口的传参一致
  merchantOrderNo?: string(name='merchant_order_no'),
  // 接口订单号，需要同twc.notary.lease.order.create接口的传参一致
  orderNo: string(name='order_no'),
  // 支付渠道，默认支持Alipay|ThirdParty|CreditCard|BankTransfer|WeChatPay|Other，需要同twc.notary.lease.order.create接口的传参一致
  paymentChannel?: string(name='payment_channel'),
}

model ListLeaseNotaryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证记录列表
  records?: [ LeaseNotaryRecord ](name='records'),
}

/**
 * Description: 使用接口查询订单存证的信息，需要在完成订单回传后才可返回。获取到txhash后，用户可使用 获取文本存证、存证核验 等存证服务功能。
 * Summary: 租赁业务获取订单存证列表
 */
async function listLeaseNotary(request: ListLeaseNotaryRequest): ListLeaseNotaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return listLeaseNotaryEx(request, headers, runtime);
}

/**
 * Description: 使用接口查询订单存证的信息，需要在完成订单回传后才可返回。获取到txhash后，用户可使用 获取文本存证、存证核验 等存证服务功能。
 * Summary: 租赁业务获取订单存证列表
 */
async function listLeaseNotaryEx(request: ListLeaseNotaryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListLeaseNotaryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.notary.list', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLeaseApplicationRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 每页的大小
  pageSize: long(name='page_size'),
  // 起始id
  startId: long(name='start_id'),
}

model QueryLeaseApplicationResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误码
  code?: long(name='code'),
  // 错误描述
  errMessage?: string(name='err_message'),
  // 返回值
  responseData?: string(name='response_data'),
}

/**
 * Description: 查询融资租赁application
 * Summary: 查询融资租赁application
 */
async function queryLeaseApplication(request: QueryLeaseApplicationRequest): QueryLeaseApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLeaseApplicationEx(request, headers, runtime);
}

/**
 * Description: 查询融资租赁application
 * Summary: 查询融资租赁application
 */
async function queryLeaseApplicationEx(request: QueryLeaseApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLeaseApplicationResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.application.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLeaseApplicationdetailinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 合约id
  applicationId: string(name='application_id'),
}

model QueryLeaseApplicationdetailinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误码
  code?: long(name='code'),
  // 错误描述
  errMessage?: string(name='err_message'),
  // 合约定义详情
  responseData?: string(name='response_data'),
}

/**
 * Description: 查询融资租赁application的定义详情
 * Summary: 查询application的定义详情
 */
async function queryLeaseApplicationdetailinfo(request: QueryLeaseApplicationdetailinfoRequest): QueryLeaseApplicationdetailinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLeaseApplicationdetailinfoEx(request, headers, runtime);
}

/**
 * Description: 查询融资租赁application的定义详情
 * Summary: 查询application的定义详情
 */
async function queryLeaseApplicationdetailinfoEx(request: QueryLeaseApplicationdetailinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLeaseApplicationdetailinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.applicationdetailinfo.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model SetLeaseRepaymentstatusRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租赁机构金融科技租户Id
  leaseId: string(name='lease_id'),
  // 融资租赁对应的合约id
  applicationId?: string(name='application_id'),
  // 融资租赁对应的订单id
  orderId: string(name='order_id'),
  // finish只能为0或1，0表示订单重置此状态下订单可以被再次操作【如清分记录上传、还款记录上传等】，1表示订单结束，在1的状态下不会再进行清分、还款记录上传等操作
  finish: long(name='finish'),
  // 原所有权人金融科技租户id
  oldOwnershipId?: string(name='old_ownership_id'),
  // 新所有权人租户id
  newOwnershipId?: string(name='new_ownership_id'),
}

model SetLeaseRepaymentstatusResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态重置对应的链上交易哈希
  responseData?: string(name='response_data'),
  // 状态码，0表示成功
  code?: long(name='code'),
  // 错误信息描述
  errMessage?: string(name='err_message'),
}

/**
 * Description: 融资租赁资方重置订单状态
 * Summary: 融资租赁资方重置订单状态
 */
async function setLeaseRepaymentstatus(request: SetLeaseRepaymentstatusRequest): SetLeaseRepaymentstatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return setLeaseRepaymentstatusEx(request, headers, runtime);
}

/**
 * Description: 融资租赁资方重置订单状态
 * Summary: 融资租赁资方重置订单状态
 */
async function setLeaseRepaymentstatusEx(request: SetLeaseRepaymentstatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetLeaseRepaymentstatusResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.repaymentstatus.set', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseSupplierinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租赁方及资方定义的合约id
  applicationId: string(name='application_id'),
  // 额外字段定义
  extraInfo?: string(name='extra_info'),
  // 供应商发货的物流单号
  logisticsOrderId: string(name='logistics_order_id'),
  // 用户的租赁订单id
  orderId: string(name='order_id'),
  // 额外字段定义对应的阶段，请咨询对应的资方
  phase: string(name='phase'),
  // 采购订单id
  purchaseOrderId: string(name='purchase_order_id'),
  // 产品详细信息
  supplierProductList: [ SupplierProductInfo ](name='supplier_product_list'),
  // 1自有物流 2顺丰
  maintainedBySupplier: long(name='maintained_by_supplier'),
  // 发货时间
  deliverTime: string(name='deliver_time'),
}

model CreateLeaseSupplierinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误码，0表示成功
  code?: long(name='code'),
  // 错误信息描述
  errMessage?: string(name='err_message'),
  // 供应商上传采购等相关信息对应的链上哈希
  responseData?: string(name='response_data'),
}

/**
 * Description: 供应商上传采购等相关信息
 * Summary: 供应商上传采购等相关信息
 */
async function createLeaseSupplierinfo(request: CreateLeaseSupplierinfoRequest): CreateLeaseSupplierinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseSupplierinfoEx(request, headers, runtime);
}

/**
 * Description: 供应商上传采购等相关信息
 * Summary: 供应商上传采购等相关信息
 */
async function createLeaseSupplierinfoEx(request: CreateLeaseSupplierinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseSupplierinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.supplierinfo.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DeployMytfTappRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // tappId
  tappId: string(name='tapp_id'),
}

model DeployMytfTappResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: mytf的tapp部署
 * Summary: mytf的tapp部署
 */
async function deployMytfTapp(request: DeployMytfTappRequest): DeployMytfTappResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return deployMytfTappEx(request, headers, runtime);
}

/**
 * Description: mytf的tapp部署
 * Summary: mytf的tapp部署
 */
async function deployMytfTappEx(request: DeployMytfTappRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeployMytfTappResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.mytf.tapp.deploy', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseSupplierdynamicinfoRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 合约id
  applicationId: string(name='application_id'),
  // 签收记录哈希，已签收需要必填
  arriveConfirmHash?: string(name='arrive_confirm_hash'),
  // 用户签收时间，格式为2019-8-31 12:00:00，已签收需要必填
  arriveConfirmTime?: string(name='arrive_confirm_time'),
  // 签收记录存证哈希，已签收需要必填
  arriveConfirmTxHash?: string(name='arrive_confirm_tx_hash'),
  // 签收记录对应的url，已签收需要必填
  arriveConfirmUrl?: string(name='arrive_confirm_url'),
  // 物流状态额外信息
  extraInfo?: string(name='extra_info'),
  // 物流状态，1.已发货 2运输中 3已签收 0其他
  logisticStatus: string(name='logistic_status'),
  // 订单id
  orderId: string(name='order_id'),
  // 阶段名称
  phase: string(name='phase'),
}

model CreateLeaseSupplierdynamicinfoResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态码
  code?: long(name='code'),
  // 错误信息描述
  errMessage?: string(name='err_message'),
  // 链上哈希
  responseData?: string(name='response_data'),
}

/**
 * Description: 供应商更新物流状态、签收记录等信息
 * Summary: 供应商更新物流状态、签收记录等信息
 */
async function createLeaseSupplierdynamicinfo(request: CreateLeaseSupplierdynamicinfoRequest): CreateLeaseSupplierdynamicinfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseSupplierdynamicinfoEx(request, headers, runtime);
}

/**
 * Description: 供应商更新物流状态、签收记录等信息
 * Summary: 供应商更新物流状态、签收记录等信息
 */
async function createLeaseSupplierdynamicinfoEx(request: CreateLeaseSupplierdynamicinfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseSupplierdynamicinfoResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.supplierdynamicinfo.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseBizRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租赁订单相关内容，以json形式发送
  bizContent: string(name='biz_content'),
  // 租赁订单所属阶段
  type: string(name='type'),
  // 租赁订单操作类型
  operationType?: string(name='operation_type'),
}

model CreateLeaseBizResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 租赁信息上链后，链上对应的txHash
  responseData?: string(name='response_data'),
  // 错误码
  code?: string(name='code'),
  // 错误信息描述
  errMessage?: string(name='err_message'),
}

/**
 * Description: 创建租赁订单相关信息，融资租赁的前置条件
 * Summary: 创建租赁订单相关信息，融资租赁的前置条件
 */
async function createLeaseBiz(request: CreateLeaseBizRequest): CreateLeaseBizResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseBizEx(request, headers, runtime);
}

/**
 * Description: 创建租赁订单相关信息，融资租赁的前置条件
 * Summary: 创建租赁订单相关信息，融资租赁的前置条件
 */
async function createLeaseBizEx(request: CreateLeaseBizRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseBizResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.biz.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLeaseProofRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 业务逻辑的订单id
  orderId: string(name='order_id'),
  // 2020
  applicationId: string(name='application_id'),
}

model QueryLeaseProofResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 核验结果数据
  responseData?: string(name='response_data'),
}

/**
 * Description: 查询核验结果
 * Summary: 查询核验结果
 */
async function queryLeaseProof(request: QueryLeaseProofRequest): QueryLeaseProofResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLeaseProofEx(request, headers, runtime);
}

/**
 * Description: 查询核验结果
 * Summary: 查询核验结果
 */
async function queryLeaseProofEx(request: QueryLeaseProofRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLeaseProofResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.proof.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLargefileRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 上传至中枢文件扩展服务后得到的文件ID
  fileId: string(name='file_id'),
  // 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
  location?: Location(name='location'),
  // 存证事务ID
  transactionId: string(name='transaction_id'),
  // 是否使用可信时间戳，默认为false
  tsr?: boolean(name='tsr'),
  // 存证文件名称
  notaryName: string(name='notary_name'),
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase: string(name='phase'),
  // 扩展属性
  properties?: string(name='properties'),
}

model CreateLargefileResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 可信时间信息
  tsr?: TsrResponse(name='tsr'),
  // 存证凭证
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 发起文件存证，将文件内容存证上链，可存证10M以内的文件
 * Summary: 大文件内容存证接口
 */
async function createLargefile(request: CreateLargefileRequest): CreateLargefileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLargefileEx(request, headers, runtime);
}

/**
 * Description: 发起文件存证，将文件内容存证上链，可存证10M以内的文件
 * Summary: 大文件内容存证接口
 */
async function createLargefileEx(request: CreateLargefileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLargefileResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.largefile.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryLeaseBizRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 租赁订单相关内容，以json形式发送
  bizContent: string(name='biz_content'),
  // 租赁订单所属阶段
  type: string(name='type'),
}

model QueryLeaseBizResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 返回的查询值
  responseData?: string(name='response_data'),
}

/**
 * Description: 租赁平台查询接口
 * Summary: 租赁平台查询接口
 */
async function queryLeaseBiz(request: QueryLeaseBizRequest): QueryLeaseBizResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryLeaseBizEx(request, headers, runtime);
}

/**
 * Description: 租赁平台查询接口
 * Summary: 租赁平台查询接口
 */
async function queryLeaseBizEx(request: QueryLeaseBizRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryLeaseBizResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.biz.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseBiznotaryRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 要存证的文件哈希
  hash: string(name='hash'),
  // 租赁机构社会统一信用码
  leaseCorpId: string(name='lease_corp_id'),
  // 租赁机构公司名称
  leaseCorpName: string(name='lease_corp_name'),
  // 租赁机构法人姓名
  leaseCorpOwnerName: string(name='lease_corp_owner_name'),
  // 被代理机构金融科技租户id
  agentLeaseId?: string(name='agent_lease_id'),
  // 模式，代理模式为isvMode
  mode?: string(name='mode'),
}

model CreateLeaseBiznotaryResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 是否租赁宝存证哈希成功，成功则为0，否则不为0
  code?: long(name='code'),
  // 错误码具体详情
  errMessage?: string(name='err_message'),
}

/**
 * Description: 租赁宝哈希存证
 * Summary: 租赁宝哈希存证
 */
async function createLeaseBiznotary(request: CreateLeaseBiznotaryRequest): CreateLeaseBiznotaryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseBiznotaryEx(request, headers, runtime);
}

/**
 * Description: 租赁宝哈希存证
 * Summary: 租赁宝哈希存证
 */
async function createLeaseBiznotaryEx(request: CreateLeaseBiznotaryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseBiznotaryResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.biznotary.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateInternalContractRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 签署结束信息，phase为FINISH时必选
  finishInfo?: ContractNotaryFinishInfo(name='finish_info'),
  // 签署流程ID
  flowId: string(name='flow_id'),
  // 签署发起信息，phase为INIT时必选
  initInfo?: ContractNotaryInitInfo(name='init_info'),
  // 存证阶段，分为INIT(发起)，SIGN(签署)，FINISH(结束)，DOCUMENT(正式合同文件)，DEDUCT_CANCEL(代扣计划取消)，DEDUCT_EXECUTION(代扣计划执行)，DEDUCT_PLAN(代扣计划保存)，DEDUCT_REFUND(代扣计划退款)
  phase: string(name='phase'),
  // 签署过程信息，phase为SIGN时必选
  signInfo?: ContractNotarySignInfo(name='sign_info'),
  // 存证事务ID
  transactionId: string(name='transaction_id'),
  // 签署文件存档阶段存证核验信息
  documentInfo?: ContractNotaryDocumentInfo(name='document_info'),
  // 电子合同代扣计划取消操作信息
  cancelInfo?: ContractNotaryDeductCancelInfo(name='cancel_info'),
  // 电子合同存证代扣计划执行操作信息
  executionInfo?: ContractNotaryDeductExecutionInfo(name='execution_info'),
  // 电子合同存证代扣计划信息
  planInfo?: ContractNotaryDeductPlanInfo(name='plan_info'),
  // 电子合同存证代扣计划退款信息
  refundInfo?: ContractNotaryDeductRefundInfo(name='refund_info'),
}

model CreateInternalContractResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证凭据
  txHash?: string(name='tx_hash'),
}

/**
 * Description: 合同内部文本存证
 * Summary: 合同内部文本存证
 */
async function createInternalContract(request: CreateInternalContractRequest): CreateInternalContractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createInternalContractEx(request, headers, runtime);
}

/**
 * Description: 合同内部文本存证
 * Summary: 合同内部文本存证
 */
async function createInternalContractEx(request: CreateInternalContractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateInternalContractResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.internal.contract.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseZftagreementsignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id
  orderId: string(name='order_id'),
  // 合约id
  applicationId: string(name='application_id'),
  // 网商直付通代扣协议号
  agreementNo: string(name='agreement_no'),
  // 实际签署协议的用户支付宝uid
  alipayUserId?: string(name='alipay_user_id'),
  // 签署时间
  signTime?: string(name='sign_time'),
  // 协议生效时间
  validTime?: string(name='valid_time'),
  // 协议失效时间
  invalidTime?: string(name='invalid_time'),
  // 租赁方金融科技租户id
  leaseId: string(name='lease_id'),
  // 核验结果，1表示通过，-1表示不通过
  agreementStatus: long(name='agreement_status'),
  // 租赁机构支付宝uid
  leaseCorpAlipayUid?: string(name='lease_corp_alipay_uid'),
  // 直付通代扣协议核验结果说明
  failMessage?: string(name='fail_message'),
}

model CreateLeaseZftagreementsignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误码描述
  errMessage?: string(name='err_message'),
  // 错误码
  code?: long(name='code'),
  // 协议上链哈希
  responseData?: string(name='response_data'),
}

/**
 * Description: 资方上传网商直付通代扣协议核验结果
 * Summary: 资方上传网商直付通代扣协议核验结果
 */
async function createLeaseZftagreementsign(request: CreateLeaseZftagreementsignRequest): CreateLeaseZftagreementsignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseZftagreementsignEx(request, headers, runtime);
}

/**
 * Description: 资方上传网商直付通代扣协议核验结果
 * Summary: 资方上传网商直付通代扣协议核验结果
 */
async function createLeaseZftagreementsignEx(request: CreateLeaseZftagreementsignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseZftagreementsignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.zftagreementsign.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateLeaseZftagreementunsignRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 订单id
  orderId: string(name='order_id'),
  // 合约id
  applicationId: string(name='application_id'),
  // 租赁方金融科技租户id
  leaseId: string(name='lease_id'),
  // 直付通网商模式代扣协议号
  agreementNo: string(name='agreement_no'),
  // 直付通代扣协议解约时间
  unsignTime: string(name='unsign_time'),
}

model CreateLeaseZftagreementunsignResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 错误码描述信息
  errMessage?: string(name='err_message'),
  // 错误码
  code?: long(name='code'),
  // 网商直付通解约链上哈希
  responseData?: string(name='response_data'),
}

/**
 * Description: 资方上传网商直付通代扣协议解约相关信息
 * Summary: 资方上传网商直付通代扣协议解约相关信息
 */
async function createLeaseZftagreementunsign(request: CreateLeaseZftagreementunsignRequest): CreateLeaseZftagreementunsignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createLeaseZftagreementunsignEx(request, headers, runtime);
}

/**
 * Description: 资方上传网商直付通代扣协议解约相关信息
 * Summary: 资方上传网商直付通代扣协议解约相关信息
 */
async function createLeaseZftagreementunsignEx(request: CreateLeaseZftagreementunsignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLeaseZftagreementunsignResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.lease.zftagreementunsign.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetCertificateDetailRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证哈希地址
  txHash: string(name='tx_hash'),
}

model GetCertificateDetailResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证证明下载地址
  url?: string(name='url'),
  // 状态值
  code?: long(name='code'),
  // 状态信息描述
  message?: string(name='message'),
}

/**
 * Description: 获取蚂蚁链版存证证明
 * Summary: 获取蚂蚁链版存证证明
 */
async function getCertificateDetail(request: GetCertificateDetailRequest): GetCertificateDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getCertificateDetailEx(request, headers, runtime);
}

/**
 * Description: 获取蚂蚁链版存证证明
 * Summary: 获取蚂蚁链版存证证明
 */
async function getCertificateDetailEx(request: GetCertificateDetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetCertificateDetailResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.certificate.detail.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model GetInternalTextRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
  location?: Location(name='location'),
  // 描述本条存证在存证事务中的阶段，用户可自行维护
  phase?: string(name='phase'),
  // 扩展属性
  properties?: string(name='properties'),
  // 存证事务id
  transactionId?: string(name='transaction_id'),
  // 存证凭据
  txHash: string(name='tx_hash'),
  // 租户
  realTenant?: string(name='real_tenant'),
  // 授权码
  authCode?: string(name='auth_code'),
  // 产品码
  product?: string(name='product'),
}

model GetInternalTextResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 存证信息
  content?: string(name='content'),
  // 可信信息
  tsr?: TsrResponse(name='tsr'),
  // 文本存证类型
  textNotaryType?: string(name='text_notary_type'),
  // 哈希算法
  hashAlgorithm?: string(name='hash_algorithm'),
}

/**
 * Description: 用户通过交易哈希获取自己上传的文本存证内容
 * Summary: 获取文本存证内容
 */
async function getInternalText(request: GetInternalTextRequest): GetInternalTextResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return getInternalTextEx(request, headers, runtime);
}

/**
 * Description: 用户通过交易哈希获取自己上传的文本存证内容
 * Summary: 获取文本存证内容
 */
async function getInternalTextEx(request: GetInternalTextRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetInternalTextResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.internal.text.get', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model OpenInternalTwcRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 授权开通的租户ID
  tenantId: string(name='tenant_id'),
  // 授权开通的产品码
  product: string(name='product'),
  // 授权开通的行业类型（版权/租赁）
  customerBizId: string(name='customer_biz_id'),
  // 授权码
  authCode: string(name='auth_code'),
}

model OpenInternalTwcResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 状态值
  code?: string(name='code'),
  // 状态信息描述
  message?: string(name='message'),
}

/**
 * Description: 三方服务获取开通权限，标记开通状态。
 * Summary: 三方服务获取开通权限，标记开通状态。
 */
async function openInternalTwc(request: OpenInternalTwcRequest): OpenInternalTwcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return openInternalTwcEx(request, headers, runtime);
}

/**
 * Description: 三方服务获取开通权限，标记开通状态。
 * Summary: 三方服务获取开通权限，标记开通状态。
 */
async function openInternalTwcEx(request: OpenInternalTwcRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OpenInternalTwcResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.internal.twc.open', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model CreateFlowInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 全流程模板id，需要提前创建好模板才能获取
  templateId: string(name='template_id'),
  // 流程名称，同一个租户下同一个模板，建议唯一不重复
  flowName: string(name='flow_name'),
  // 存证关联实体（个人/企业）的身份识别信息
  notaryUser: NotaryUser(name='notary_user'),
  // 扩展属性
  properties?: string(name='properties'),
}

model CreateFlowInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 流程ID，全局唯一
  flowId?: string(name='flow_id'),
}

/**
 * Description: 创建存证流程实例
 * Summary: 创建存证流程实例
 */
async function createFlowInstance(request: CreateFlowInstanceRequest): CreateFlowInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return createFlowInstanceEx(request, headers, runtime);
}

/**
 * Description: 创建存证流程实例
 * Summary: 创建存证流程实例
 */
async function createFlowInstanceEx(request: CreateFlowInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFlowInstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.flow.instance.create', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model FinishFlowInstanceRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 流程id，通过twc.notary.instance.create(创建存证流程实例)获取
  flowId: string(name='flow_id'),
}

model FinishFlowInstanceResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 存证流程实例完结
 * Summary: 存证流程实例完结
 */
async function finishFlowInstance(request: FinishFlowInstanceRequest): FinishFlowInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return finishFlowInstanceEx(request, headers, runtime);
}

/**
 * Description: 存证流程实例完结
 * Summary: 存证流程实例完结
 */
async function finishFlowInstanceEx(request: FinishFlowInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FinishFlowInstanceResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.flow.instance.finish', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model InitFlowPhaseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 流程id，通过twc.notary.instance.create(创建存证流程实例)获取
  flowId: string(name='flow_id'),
  // 阶段编号，与模板阶段编号保持一致，不同阶段阶段编号不一样，要与阶段存证内容保持一致
  phaseNo: long(name='phase_no'),
  // 阶段存证内容，如果模板数据类型定义是Hash(哈希)则填入Hash即可，如果定义是Structure(结构化)，则填入模板所有字段json对象的字符串Base64后的值
  notaryContent: string(name='notary_content'),
  // 业务方原始数据ID，方便与业务方进行数据核对使用
  originDataId: string(name='origin_data_id'),
}

model InitFlowPhaseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 阶段id
  phaseId?: string(name='phase_id'),
}

/**
 * Description: 创建阶段存证
 * Summary: 创建阶段存证
 */
async function initFlowPhase(request: InitFlowPhaseRequest): InitFlowPhaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return initFlowPhaseEx(request, headers, runtime);
}

/**
 * Description: 创建阶段存证
 * Summary: 创建阶段存证
 */
async function initFlowPhaseEx(request: InitFlowPhaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InitFlowPhaseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.flow.phase.init', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model QueryFlowPhaseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 流程id，通过twc.notary.instance.create(创建存证流程实例)获取
  flowId: string(name='flow_id'),
  // 阶段id，通过twc.notary.flow.phase.init获取
  phaseId: string(name='phase_id'),
}

model QueryFlowPhaseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 交易Hash
  txHash?: string(name='tx_hash'),
  // 存证状态，FINISH(生成完毕)、INIT(初始化中)、FAILED(生成失败)
  status?: string(name='status'),
}

/**
 * Description: 查询阶段存证结果
 * Summary: 查询阶段存证结果
 */
async function queryFlowPhase(request: QueryFlowPhaseRequest): QueryFlowPhaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return queryFlowPhaseEx(request, headers, runtime);
}

/**
 * Description: 查询阶段存证结果
 * Summary: 查询阶段存证结果
 */
async function queryFlowPhaseEx(request: QueryFlowPhaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryFlowPhaseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.flow.phase.query', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

model DetailFlowPhaseRequest = {
  // OAuth模式下的授权token
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  // 流程id，通过twc.notary.instance.create(创建存证流程实例)获取
  flowId: string(name='flow_id'),
  // 阶段ID，通过twc.notary.flow.phase.create(创建阶段存证)创建了阶段存证获取
  phaseId: string(name='phase_id'),
  // 链上交易Hash，必须成功阶段存证后，通过twc.notary.flow.phase.query获取
  txHash: string(name='tx_hash'),
}

model DetailFlowPhaseResponse = {
  // 请求唯一ID，用于链路跟踪和问题排查
  reqMsgId?: string(name='req_msg_id'),
  // 结果码，一般OK表示调用成功
  resultCode?: string(name='result_code'),
  // 异常信息的文本描述
  resultMsg?: string(name='result_msg'),
  // 阶段存证交易hash
  txHash?: string(name='tx_hash'),
  // 模板字段类型，Hash/Structure，(Hash->哈希,Structure->结构化)
  dataType?: string(name='data_type'),
  // 阶段存证内容，如果模板数据类型定义是Hash(哈希)则返回存证时Hash，如果定义是Structure(结构化)，则返回所有字段json对象的字符串Base64后的值
  notaryContent?: string(name='notary_content'),
  // 结构化数据里面英文key对应的中文名称关系，json格式，key为字段英文名，value为字段中文名称
  // 
  dataTypeKey?: string(name='data_type_key'),
  // 阶段存证内容csv下载地址，暂时预留，存证内容过大时采用文件形式输出，有效期1个小时
  url?: string(name='url'),
  // 交易所在的区块Hash
  blockHash?: string(name='block_hash'),
  // 交易所在的区块高
  blockHeight?: string(name='block_height'),
}

/**
 * Description: 阶段存证数据详情
 * Summary: 阶段存证数据详情
 */
async function detailFlowPhase(request: DetailFlowPhaseRequest): DetailFlowPhaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string= {};
  return detailFlowPhaseEx(request, headers, runtime);
}

/**
 * Description: 阶段存证数据详情
 * Summary: 阶段存证数据详情
 */
async function detailFlowPhaseEx(request: DetailFlowPhaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DetailFlowPhaseResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'twc.notary.flow.phase.detail', 'HTTPS', 'POST', `/gateway.do`, request, headers, runtime);
}

