// This file is auto-generated, don't edit it. Thanks.
package client

import (
	rpcutil "github.com/alibabacloud-go/tea-rpc-utils/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
	antchainutil "github.com/antchain-openapi-sdk-go/antchain-util/service"
)

/**
 * Model for initing client
 */
type Config struct {
	// accesskey id
	AccessKeyId *string `json:"accessKeyId,omitempty" xml:"accessKeyId,omitempty"`
	// accesskey secret
	AccessKeySecret *string `json:"accessKeySecret,omitempty" xml:"accessKeySecret,omitempty"`
	// security token
	SecurityToken *string `json:"securityToken,omitempty" xml:"securityToken,omitempty"`
	// http protocol
	Protocol *string `json:"protocol,omitempty" xml:"protocol,omitempty"`
	// read timeout
	ReadTimeout *int `json:"readTimeout,omitempty" xml:"readTimeout,omitempty"`
	// connect timeout
	ConnectTimeout *int `json:"connectTimeout,omitempty" xml:"connectTimeout,omitempty"`
	// http proxy
	HttpProxy *string `json:"httpProxy,omitempty" xml:"httpProxy,omitempty"`
	// https proxy
	HttpsProxy *string `json:"httpsProxy,omitempty" xml:"httpsProxy,omitempty"`
	// endpoint
	Endpoint *string `json:"endpoint,omitempty" xml:"endpoint,omitempty"`
	// proxy white list
	NoProxy *string `json:"noProxy,omitempty" xml:"noProxy,omitempty"`
	// max idle conns
	MaxIdleConns *int `json:"maxIdleConns,omitempty" xml:"maxIdleConns,omitempty"`
	// user agent
	UserAgent *string `json:"userAgent,omitempty" xml:"userAgent,omitempty"`
	// socks5 proxy
	Socks5Proxy *string `json:"socks5Proxy,omitempty" xml:"socks5Proxy,omitempty"`
	// socks5 network
	Socks5NetWork *string `json:"socks5NetWork,omitempty" xml:"socks5NetWork,omitempty"`
	// 长链接最大空闲时长
	MaxIdleTimeMillis *int `json:"maxIdleTimeMillis,omitempty" xml:"maxIdleTimeMillis,omitempty"`
	// 长链接最大连接时长
	KeepAliveDurationMillis *int `json:"keepAliveDurationMillis,omitempty" xml:"keepAliveDurationMillis,omitempty"`
	// 最大连接数（长链接最大总数）
	MaxRequests *int `json:"maxRequests,omitempty" xml:"maxRequests,omitempty"`
	// 每个目标主机的最大连接数（分主机域名的长链接最大总数
	MaxRequestsPerHost *int `json:"maxRequestsPerHost,omitempty" xml:"maxRequestsPerHost,omitempty"`
}

func (s Config) String() string {
	return tea.Prettify(s)
}

func (s Config) GoString() string {
	return s.String()
}

func (s *Config) SetAccessKeyId(v string) *Config {
	s.AccessKeyId = &v
	return s
}

func (s *Config) SetAccessKeySecret(v string) *Config {
	s.AccessKeySecret = &v
	return s
}

func (s *Config) SetSecurityToken(v string) *Config {
	s.SecurityToken = &v
	return s
}

func (s *Config) SetProtocol(v string) *Config {
	s.Protocol = &v
	return s
}

func (s *Config) SetReadTimeout(v int) *Config {
	s.ReadTimeout = &v
	return s
}

func (s *Config) SetConnectTimeout(v int) *Config {
	s.ConnectTimeout = &v
	return s
}

func (s *Config) SetHttpProxy(v string) *Config {
	s.HttpProxy = &v
	return s
}

func (s *Config) SetHttpsProxy(v string) *Config {
	s.HttpsProxy = &v
	return s
}

func (s *Config) SetEndpoint(v string) *Config {
	s.Endpoint = &v
	return s
}

func (s *Config) SetNoProxy(v string) *Config {
	s.NoProxy = &v
	return s
}

func (s *Config) SetMaxIdleConns(v int) *Config {
	s.MaxIdleConns = &v
	return s
}

func (s *Config) SetUserAgent(v string) *Config {
	s.UserAgent = &v
	return s
}

func (s *Config) SetSocks5Proxy(v string) *Config {
	s.Socks5Proxy = &v
	return s
}

func (s *Config) SetSocks5NetWork(v string) *Config {
	s.Socks5NetWork = &v
	return s
}

func (s *Config) SetMaxIdleTimeMillis(v int) *Config {
	s.MaxIdleTimeMillis = &v
	return s
}

func (s *Config) SetKeepAliveDurationMillis(v int) *Config {
	s.KeepAliveDurationMillis = &v
	return s
}

func (s *Config) SetMaxRequests(v int) *Config {
	s.MaxRequests = &v
	return s
}

func (s *Config) SetMaxRequestsPerHost(v int) *Config {
	s.MaxRequestsPerHost = &v
	return s
}

// 司法纠纷平台通用文件信息结构体
type JudicialFileInfo struct {
	// 文件全名, 包含后缀
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty"`
	// 文件key
	FileKey *string `json:"file_key,omitempty" xml:"file_key,omitempty"`
	// 文件下载地址
	DownloadUrl *string `json:"download_url,omitempty" xml:"download_url,omitempty"`
	// 司法纠纷平台文件类型
	JudicialFileType *string `json:"judicial_file_type,omitempty" xml:"judicial_file_type,omitempty"`
}

func (s JudicialFileInfo) String() string {
	return tea.Prettify(s)
}

func (s JudicialFileInfo) GoString() string {
	return s.String()
}

func (s *JudicialFileInfo) SetFileName(v string) *JudicialFileInfo {
	s.FileName = &v
	return s
}

func (s *JudicialFileInfo) SetFileKey(v string) *JudicialFileInfo {
	s.FileKey = &v
	return s
}

func (s *JudicialFileInfo) SetDownloadUrl(v string) *JudicialFileInfo {
	s.DownloadUrl = &v
	return s
}

func (s *JudicialFileInfo) SetJudicialFileType(v string) *JudicialFileInfo {
	s.JudicialFileType = &v
	return s
}

// 文件key和文件名称
type FileInfo struct {
	// 文件key
	FileKey *string `json:"file_key,omitempty" xml:"file_key,omitempty" require:"true"`
	// 文件名称
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty" require:"true"`
	// 文件类型(枚举)
	// CASE_NOTICE: 立案通知书
	// CASE_VERDICT: 仲裁裁决书
	// CASE_EFFECT_PROVE: 裁决书司法生效证明
	// CASE_SERVED_NOTICE: 电子送达通知
	// PAYMETN_INFO: 缴费相关文件
	FileType *string `json:"file_type,omitempty" xml:"file_type,omitempty"`
}

func (s FileInfo) String() string {
	return tea.Prettify(s)
}

func (s FileInfo) GoString() string {
	return s.String()
}

func (s *FileInfo) SetFileKey(v string) *FileInfo {
	s.FileKey = &v
	return s
}

func (s *FileInfo) SetFileName(v string) *FileInfo {
	s.FileName = &v
	return s
}

func (s *FileInfo) SetFileType(v string) *FileInfo {
	s.FileType = &v
	return s
}

// 租赁分期履约信息
type RentalInstallmentPerformance struct {
	// 被申请人还款期数
	RepaymentPeriod *int64 `json:"repayment_period,omitempty" xml:"repayment_period,omitempty" require:"true"`
	// 被申请人第几期租金支付方式
	RentPaymentType *string `json:"rent_payment_type,omitempty" xml:"rent_payment_type,omitempty" require:"true"`
	// 被申请人第几期还款时间
	AppliedRepaymentTime *string `json:"applied_repayment_time,omitempty" xml:"applied_repayment_time,omitempty" require:"true"`
	// 被申请人第几期还款金额
	AppliedRepaymentAmount *string `json:"applied_repayment_amount,omitempty" xml:"applied_repayment_amount,omitempty" require:"true"`
}

func (s RentalInstallmentPerformance) String() string {
	return tea.Prettify(s)
}

func (s RentalInstallmentPerformance) GoString() string {
	return s.String()
}

func (s *RentalInstallmentPerformance) SetRepaymentPeriod(v int64) *RentalInstallmentPerformance {
	s.RepaymentPeriod = &v
	return s
}

func (s *RentalInstallmentPerformance) SetRentPaymentType(v string) *RentalInstallmentPerformance {
	s.RentPaymentType = &v
	return s
}

func (s *RentalInstallmentPerformance) SetAppliedRepaymentTime(v string) *RentalInstallmentPerformance {
	s.AppliedRepaymentTime = &v
	return s
}

func (s *RentalInstallmentPerformance) SetAppliedRepaymentAmount(v string) *RentalInstallmentPerformance {
	s.AppliedRepaymentAmount = &v
	return s
}

// 订单商品信息
type OrderItem struct {
	// 产品名称
	ProductName *string `json:"product_name,omitempty" xml:"product_name,omitempty" require:"true"`
	// 商品品牌
	CommodityBrand *string `json:"commodity_brand,omitempty" xml:"commodity_brand,omitempty" require:"true"`
	// 商品版本
	CommodityVersion *string `json:"commodity_version,omitempty" xml:"commodity_version,omitempty" require:"true"`
	// 商品规格
	CommoditySpecification *string `json:"commodity_specification,omitempty" xml:"commodity_specification,omitempty" require:"true"`
	// 商品颜色
	CommodityColor *string `json:"commodity_color,omitempty" xml:"commodity_color,omitempty"`
	// 商品详情
	CommodityDetails *string `json:"commodity_details,omitempty" xml:"commodity_details,omitempty"`
	// 商品官方价格
	CommodityOfficialPrice *string `json:"commodity_official_price,omitempty" xml:"commodity_official_price,omitempty" require:"true"`
	// 租赁物数量
	LeaseNumber *int64 `json:"lease_number,omitempty" xml:"lease_number,omitempty" require:"true"`
}

func (s OrderItem) String() string {
	return tea.Prettify(s)
}

func (s OrderItem) GoString() string {
	return s.String()
}

func (s *OrderItem) SetProductName(v string) *OrderItem {
	s.ProductName = &v
	return s
}

func (s *OrderItem) SetCommodityBrand(v string) *OrderItem {
	s.CommodityBrand = &v
	return s
}

func (s *OrderItem) SetCommodityVersion(v string) *OrderItem {
	s.CommodityVersion = &v
	return s
}

func (s *OrderItem) SetCommoditySpecification(v string) *OrderItem {
	s.CommoditySpecification = &v
	return s
}

func (s *OrderItem) SetCommodityColor(v string) *OrderItem {
	s.CommodityColor = &v
	return s
}

func (s *OrderItem) SetCommodityDetails(v string) *OrderItem {
	s.CommodityDetails = &v
	return s
}

func (s *OrderItem) SetCommodityOfficialPrice(v string) *OrderItem {
	s.CommodityOfficialPrice = &v
	return s
}

func (s *OrderItem) SetLeaseNumber(v int64) *OrderItem {
	s.LeaseNumber = &v
	return s
}

// 签署信息
type BclSignField struct {
	// 页码信息：当签署区sign_type为RIDE_SEAM时, 页码可以_-_分割, 例如1到15页，填"1-15"； 其他情况只能是数字；
	PosPage *string `json:"pos_page,omitempty" xml:"pos_page,omitempty" require:"true" maxLength:"8"`
	// 页面签署位置x坐标
	// 非负数，小数位最多两位x坐标
	// sign_type：SINGLE_PAGE 必填
	// sign_type：RIDE_SEAM  无需填写
	PosX *string `json:"pos_x,omitempty" xml:"pos_x,omitempty" maxLength:"8"`
	// 页面签署位置y坐标
	// 非负数，小数位最多两位，y坐标
	PosY *string `json:"pos_y,omitempty" xml:"pos_y,omitempty" require:"true" maxLength:"8"`
	// 签署类型
	// 1.单页签署: SINGLE_PAGE
	// 2.骑缝签署: RIDE_SEAM
	// 默认：SINGLE_PAGE
	SignFieldType *string `json:"sign_field_type,omitempty" xml:"sign_field_type,omitempty" require:"true" maxLength:"16"`
	// 是否添加签署时间
	// 1.不添加: false
	// 2.添加: true
	// 默认：false
	AddSignDate *bool `json:"add_sign_date,omitempty" xml:"add_sign_date,omitempty"`
	// 签章日期字体大小
	// 默认12，范围10-20
	// 商家签署区不支持；
	// 当add_sign_date为true时,该字段必填；为false是该字段不能传值，必须为空；
	SignDateFontSize *int64 `json:"sign_date_font_size,omitempty" xml:"sign_date_font_size,omitempty" maximum:"20" minimum:"10"`
	// 签章日期格式
	// yyyy年MM月dd日（默认值） yyyy-MM-dd
	// yyyy/MM/dd
	// yyyy-MM-dd HH:mm:ss
	// 商家签署区不支持；
	//  当add_sign_date为true时,该字段必填；为false是该字段不能传值，必须为空；
	SignDateFormat *string `json:"sign_date_format,omitempty" xml:"sign_date_format,omitempty" maxLength:"32"`
	// 页码信息
	// 当add_sign_date为true时，代表签署的印章必须展示签署日期，默认放在印章正下方，签署人可拖拽日期到当前页面的其他位置，如果发起方指定签署位置的同时，需要同时指定日期盖章位置，则需传入日期盖章页码（与印章页码相同），在传入X\Y坐标即可
	// 商家签署区不支持；
	//  当add_sign_date为true时,该字段必填；为false是该字段不能传值，必须为空；
	SignDatePosPage *int64 `json:"sign_date_pos_page,omitempty" xml:"sign_date_pos_page,omitempty" minimum:"1"`
	// 页面签章日期x坐标
	// 非负数，小数位最多两位，默认0
	// 商家签署区不支持；
	//  当add_sign_date为true时,该字段必填；为false是该字段不能传值，必须为空；
	SignDatePosX *string `json:"sign_date_pos_x,omitempty" xml:"sign_date_pos_x,omitempty" maxLength:"8"`
	// 页面签章日期y坐标
	// 非负数，小数位最多两位，默认0
	// 商家签署区不支持；
	//  当add_sign_date为true时,该字段必填；为false是该字段不能传值，必须为空；
	SignDatePosY *string `json:"sign_date_pos_y,omitempty" xml:"sign_date_pos_y,omitempty" maxLength:"8"`
}

func (s BclSignField) String() string {
	return tea.Prettify(s)
}

func (s BclSignField) GoString() string {
	return s.String()
}

func (s *BclSignField) SetPosPage(v string) *BclSignField {
	s.PosPage = &v
	return s
}

func (s *BclSignField) SetPosX(v string) *BclSignField {
	s.PosX = &v
	return s
}

func (s *BclSignField) SetPosY(v string) *BclSignField {
	s.PosY = &v
	return s
}

func (s *BclSignField) SetSignFieldType(v string) *BclSignField {
	s.SignFieldType = &v
	return s
}

func (s *BclSignField) SetAddSignDate(v bool) *BclSignField {
	s.AddSignDate = &v
	return s
}

func (s *BclSignField) SetSignDateFontSize(v int64) *BclSignField {
	s.SignDateFontSize = &v
	return s
}

func (s *BclSignField) SetSignDateFormat(v string) *BclSignField {
	s.SignDateFormat = &v
	return s
}

func (s *BclSignField) SetSignDatePosPage(v int64) *BclSignField {
	s.SignDatePosPage = &v
	return s
}

func (s *BclSignField) SetSignDatePosX(v string) *BclSignField {
	s.SignDatePosX = &v
	return s
}

func (s *BclSignField) SetSignDatePosY(v string) *BclSignField {
	s.SignDatePosY = &v
	return s
}

// 租赁分期信息
type RentalStagingInformation struct {
	// 分期期数
	InstallmentsNumber *int64 `json:"installments_number,omitempty" xml:"installments_number,omitempty" require:"true"`
	// 租金每期应还款时间
	PaymentTimeEachCycle *string `json:"payment_time_each_cycle,omitempty" xml:"payment_time_each_cycle,omitempty" require:"true"`
	// 租金每期应还款额
	PaymentEachCycle *string `json:"payment_each_cycle,omitempty" xml:"payment_each_cycle,omitempty" require:"true"`
}

func (s RentalStagingInformation) String() string {
	return tea.Prettify(s)
}

func (s RentalStagingInformation) GoString() string {
	return s.String()
}

func (s *RentalStagingInformation) SetInstallmentsNumber(v int64) *RentalStagingInformation {
	s.InstallmentsNumber = &v
	return s
}

func (s *RentalStagingInformation) SetPaymentTimeEachCycle(v string) *RentalStagingInformation {
	s.PaymentTimeEachCycle = &v
	return s
}

func (s *RentalStagingInformation) SetPaymentEachCycle(v string) *RentalStagingInformation {
	s.PaymentEachCycle = &v
	return s
}

// 租赁订单关联的商品
type BclOrderProductInfo struct {
	// 创建商品后返回的商品id
	ProductId *string `json:"product_id,omitempty" xml:"product_id,omitempty" require:"true" maxLength:"32"`
	// 商品数量
	// 目前只允许一个商品
	ProductNumber *int64 `json:"product_number,omitempty" xml:"product_number,omitempty" require:"true" minimum:"1"`
}

func (s BclOrderProductInfo) String() string {
	return tea.Prettify(s)
}

func (s BclOrderProductInfo) GoString() string {
	return s.String()
}

func (s *BclOrderProductInfo) SetProductId(v string) *BclOrderProductInfo {
	s.ProductId = &v
	return s
}

func (s *BclOrderProductInfo) SetProductNumber(v int64) *BclOrderProductInfo {
	s.ProductNumber = &v
	return s
}

// 存证关联实体（个人/企业）的身份识别信息
type NotaryUser struct {
	// 用户类型，PERSON或者ENTERPRISE
	UserType *string `json:"user_type,omitempty" xml:"user_type,omitempty" require:"true"`
	// 证件类型
	// ● 个人：支持身份证IDENTITY_CARD
	// ● 企业：支持UNIFIED_SOCIAL_CREDIT_CODE（统一社会信用代码）和ENTERPRISE_REGISTERED_NUMBER（企业工商注册号）
	CertType *string `json:"cert_type,omitempty" xml:"cert_type,omitempty" require:"true"`
	// 证件用户名称
	// ● 个人：身份证姓名
	// ● 企业：企业名称
	CertName *string `json:"cert_name,omitempty" xml:"cert_name,omitempty" require:"true"`
	// 证件号
	// ● 个人：身份证号
	// ● 企业：社会统一信用代码或企业工商注册号，与证件类型保持一致即可
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 个人必填，用户手机号码
	PersonMobileNo *string `json:"person_mobile_no,omitempty" xml:"person_mobile_no,omitempty"`
	// 企业选填，法人证件类型，仅支持身份证，IDENTITY_CARD
	LegalPersonCertType *string `json:"legal_person_cert_type,omitempty" xml:"legal_person_cert_type,omitempty"`
	// 企业选填，法人身份证姓名
	LegalPersonCertName *string `json:"legal_person_cert_name,omitempty" xml:"legal_person_cert_name,omitempty"`
	// 企业选填，法人身份证号
	LegalPersonCertNo *string `json:"legal_person_cert_no,omitempty" xml:"legal_person_cert_no,omitempty"`
	// 企业选填，法人手机号
	LegalPersonMobileNo *string `json:"legal_person_mobile_no,omitempty" xml:"legal_person_mobile_no,omitempty"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
}

func (s NotaryUser) String() string {
	return tea.Prettify(s)
}

func (s NotaryUser) GoString() string {
	return s.String()
}

func (s *NotaryUser) SetUserType(v string) *NotaryUser {
	s.UserType = &v
	return s
}

func (s *NotaryUser) SetCertType(v string) *NotaryUser {
	s.CertType = &v
	return s
}

func (s *NotaryUser) SetCertName(v string) *NotaryUser {
	s.CertName = &v
	return s
}

func (s *NotaryUser) SetCertNo(v string) *NotaryUser {
	s.CertNo = &v
	return s
}

func (s *NotaryUser) SetPersonMobileNo(v string) *NotaryUser {
	s.PersonMobileNo = &v
	return s
}

func (s *NotaryUser) SetLegalPersonCertType(v string) *NotaryUser {
	s.LegalPersonCertType = &v
	return s
}

func (s *NotaryUser) SetLegalPersonCertName(v string) *NotaryUser {
	s.LegalPersonCertName = &v
	return s
}

func (s *NotaryUser) SetLegalPersonCertNo(v string) *NotaryUser {
	s.LegalPersonCertNo = &v
	return s
}

func (s *NotaryUser) SetLegalPersonMobileNo(v string) *NotaryUser {
	s.LegalPersonMobileNo = &v
	return s
}

func (s *NotaryUser) SetProperties(v string) *NotaryUser {
	s.Properties = &v
	return s
}

// 订单信息
type OrderInfo struct {
	// 出租方平台名称
	LessorPlatformName *string `json:"lessor_platform_name,omitempty" xml:"lessor_platform_name,omitempty" require:"true"`
	// 订单号
	OrderNumber *string `json:"order_number,omitempty" xml:"order_number,omitempty" require:"true"`
	// 合同编号
	ContractNo *string `json:"contract_no,omitempty" xml:"contract_no,omitempty" require:"true"`
	// 合同名称
	ContractName *string `json:"contract_name,omitempty" xml:"contract_name,omitempty" require:"true"`
	// 订单商品信息
	OrderItems []*OrderItem `json:"order_items,omitempty" xml:"order_items,omitempty" require:"true" type:"Repeated"`
	// 设备及配件总价
	TotalDevicePrice *string `json:"total_device_price,omitempty" xml:"total_device_price,omitempty" require:"true"`
	// 押金金额
	DepositAmount *string `json:"deposit_amount,omitempty" xml:"deposit_amount,omitempty" require:"true"`
	// 免押金额
	FreeDeposit *string `json:"free_deposit,omitempty" xml:"free_deposit,omitempty" require:"true"`
	// 签约时间
	SigningTime *string `json:"signing_time,omitempty" xml:"signing_time,omitempty" require:"true"`
	// 租期起始时间
	LeaseStartTime *string `json:"lease_start_time,omitempty" xml:"lease_start_time,omitempty" require:"true"`
	// 租期结束时间
	LeaseEndTime *string `json:"lease_end_time,omitempty" xml:"lease_end_time,omitempty" require:"true"`
	// 买断金额计算公式
	BuyoutAmountFormulaCalc *string `json:"buyout_amount_formula_calc,omitempty" xml:"buyout_amount_formula_calc,omitempty" require:"true"`
	// 首付款
	PayInAdvance *string `json:"pay_in_advance,omitempty" xml:"pay_in_advance,omitempty" require:"true"`
}

func (s OrderInfo) String() string {
	return tea.Prettify(s)
}

func (s OrderInfo) GoString() string {
	return s.String()
}

func (s *OrderInfo) SetLessorPlatformName(v string) *OrderInfo {
	s.LessorPlatformName = &v
	return s
}

func (s *OrderInfo) SetOrderNumber(v string) *OrderInfo {
	s.OrderNumber = &v
	return s
}

func (s *OrderInfo) SetContractNo(v string) *OrderInfo {
	s.ContractNo = &v
	return s
}

func (s *OrderInfo) SetContractName(v string) *OrderInfo {
	s.ContractName = &v
	return s
}

func (s *OrderInfo) SetOrderItems(v []*OrderItem) *OrderInfo {
	s.OrderItems = v
	return s
}

func (s *OrderInfo) SetTotalDevicePrice(v string) *OrderInfo {
	s.TotalDevicePrice = &v
	return s
}

func (s *OrderInfo) SetDepositAmount(v string) *OrderInfo {
	s.DepositAmount = &v
	return s
}

func (s *OrderInfo) SetFreeDeposit(v string) *OrderInfo {
	s.FreeDeposit = &v
	return s
}

func (s *OrderInfo) SetSigningTime(v string) *OrderInfo {
	s.SigningTime = &v
	return s
}

func (s *OrderInfo) SetLeaseStartTime(v string) *OrderInfo {
	s.LeaseStartTime = &v
	return s
}

func (s *OrderInfo) SetLeaseEndTime(v string) *OrderInfo {
	s.LeaseEndTime = &v
	return s
}

func (s *OrderInfo) SetBuyoutAmountFormulaCalc(v string) *OrderInfo {
	s.BuyoutAmountFormulaCalc = &v
	return s
}

func (s *OrderInfo) SetPayInAdvance(v string) *OrderInfo {
	s.PayInAdvance = &v
	return s
}

// 物流信息
type LogisticsInfo struct {
	// 发货时间
	DeliveryTime *string `json:"delivery_time,omitempty" xml:"delivery_time,omitempty" require:"true"`
	// 快递物流公司
	ExpressLogisticsCompany *string `json:"express_logistics_company,omitempty" xml:"express_logistics_company,omitempty" require:"true"`
	// 快递单号
	CourierNumber *string `json:"courier_number,omitempty" xml:"courier_number,omitempty" require:"true"`
	// 签收时间
	SignTime *string `json:"sign_time,omitempty" xml:"sign_time,omitempty" require:"true"`
}

func (s LogisticsInfo) String() string {
	return tea.Prettify(s)
}

func (s LogisticsInfo) GoString() string {
	return s.String()
}

func (s *LogisticsInfo) SetDeliveryTime(v string) *LogisticsInfo {
	s.DeliveryTime = &v
	return s
}

func (s *LogisticsInfo) SetExpressLogisticsCompany(v string) *LogisticsInfo {
	s.ExpressLogisticsCompany = &v
	return s
}

func (s *LogisticsInfo) SetCourierNumber(v string) *LogisticsInfo {
	s.CourierNumber = &v
	return s
}

func (s *LogisticsInfo) SetSignTime(v string) *LogisticsInfo {
	s.SignTime = &v
	return s
}

// 文件验签签名数据
type ContractDocSignVerifySignatureInfo struct {
	// 是否篡改
	IsModify *bool `json:"is_modify,omitempty" xml:"is_modify,omitempty"`
	// 签署时间来源
	TimeFrom *string `json:"time_from,omitempty" xml:"time_from,omitempty"`
	// 签署时间
	SignDate *string `json:"sign_date,omitempty" xml:"sign_date,omitempty"`
}

func (s ContractDocSignVerifySignatureInfo) String() string {
	return tea.Prettify(s)
}

func (s ContractDocSignVerifySignatureInfo) GoString() string {
	return s.String()
}

func (s *ContractDocSignVerifySignatureInfo) SetIsModify(v bool) *ContractDocSignVerifySignatureInfo {
	s.IsModify = &v
	return s
}

func (s *ContractDocSignVerifySignatureInfo) SetTimeFrom(v string) *ContractDocSignVerifySignatureInfo {
	s.TimeFrom = &v
	return s
}

func (s *ContractDocSignVerifySignatureInfo) SetSignDate(v string) *ContractDocSignVerifySignatureInfo {
	s.SignDate = &v
	return s
}

// 合同文件信息
type BclContractFileInfo struct {
	// 文件OSS Id
	OssFileId *string `json:"oss_file_id,omitempty" xml:"oss_file_id,omitempty" require:"true" maxLength:"64"`
	// 买家用户签署区信息
	UserSignFields []*BclSignField `json:"user_sign_fields,omitempty" xml:"user_sign_fields,omitempty" require:"true" type:"Repeated"`
	// 租赁商家签署区信息
	MerchantSignFields []*BclSignField `json:"merchant_sign_fields,omitempty" xml:"merchant_sign_fields,omitempty" type:"Repeated"`
	// 合同模板填充项内容扩展字段:
	// 以key:value传入，JSON对象模板签署链路，不能传"  "或空"{}"，k-v模式，k和v都必须有。
	// 当订单创建选择是模板签署时，该字段必填。
	SimpleFormFields *string `json:"simple_form_fields,omitempty" xml:"simple_form_fields,omitempty" maxLength:"2048"`
}

func (s BclContractFileInfo) String() string {
	return tea.Prettify(s)
}

func (s BclContractFileInfo) GoString() string {
	return s.String()
}

func (s *BclContractFileInfo) SetOssFileId(v string) *BclContractFileInfo {
	s.OssFileId = &v
	return s
}

func (s *BclContractFileInfo) SetUserSignFields(v []*BclSignField) *BclContractFileInfo {
	s.UserSignFields = v
	return s
}

func (s *BclContractFileInfo) SetMerchantSignFields(v []*BclSignField) *BclContractFileInfo {
	s.MerchantSignFields = v
	return s
}

func (s *BclContractFileInfo) SetSimpleFormFields(v string) *BclContractFileInfo {
	s.SimpleFormFields = &v
	return s
}

// 履约信息
type PerformanceInfo struct {
	// 支付租金总额
	RentPayTotal *string `json:"rent_pay_total,omitempty" xml:"rent_pay_total,omitempty" require:"true"`
	// 买断金额
	BuyoutAmount *string `json:"buyout_amount,omitempty" xml:"buyout_amount,omitempty" require:"true"`
	// 租赁分期履约信息
	RentalInstallmentPerformance []*RentalInstallmentPerformance `json:"rental_installment_performance,omitempty" xml:"rental_installment_performance,omitempty" type:"Repeated"`
}

func (s PerformanceInfo) String() string {
	return tea.Prettify(s)
}

func (s PerformanceInfo) GoString() string {
	return s.String()
}

func (s *PerformanceInfo) SetRentPayTotal(v string) *PerformanceInfo {
	s.RentPayTotal = &v
	return s
}

func (s *PerformanceInfo) SetBuyoutAmount(v string) *PerformanceInfo {
	s.BuyoutAmount = &v
	return s
}

func (s *PerformanceInfo) SetRentalInstallmentPerformance(v []*RentalInstallmentPerformance) *PerformanceInfo {
	s.RentalInstallmentPerformance = v
	return s
}

// 文本签证书信息
type ContractTextSignVerifyCertInfo struct {
	// 证书所有者
	Owner *string `json:"owner,omitempty" xml:"owner,omitempty"`
	// 证书序列号
	Serial *string `json:"serial,omitempty" xml:"serial,omitempty"`
	// 证书有效期开始时间
	StartDate *string `json:"start_date,omitempty" xml:"start_date,omitempty"`
	// 证书有效期结束时间
	EndDate *string `json:"end_date,omitempty" xml:"end_date,omitempty"`
	// 证书发布者名称
	IssuerCn *string `json:"issuer_cn,omitempty" xml:"issuer_cn,omitempty"`
}

func (s ContractTextSignVerifyCertInfo) String() string {
	return tea.Prettify(s)
}

func (s ContractTextSignVerifyCertInfo) GoString() string {
	return s.String()
}

func (s *ContractTextSignVerifyCertInfo) SetOwner(v string) *ContractTextSignVerifyCertInfo {
	s.Owner = &v
	return s
}

func (s *ContractTextSignVerifyCertInfo) SetSerial(v string) *ContractTextSignVerifyCertInfo {
	s.Serial = &v
	return s
}

func (s *ContractTextSignVerifyCertInfo) SetStartDate(v string) *ContractTextSignVerifyCertInfo {
	s.StartDate = &v
	return s
}

func (s *ContractTextSignVerifyCertInfo) SetEndDate(v string) *ContractTextSignVerifyCertInfo {
	s.EndDate = &v
	return s
}

func (s *ContractTextSignVerifyCertInfo) SetIssuerCn(v string) *ContractTextSignVerifyCertInfo {
	s.IssuerCn = &v
	return s
}

// 承诺详情
type BclPromiseDetailInfo struct {
	// 承诺期数
	Period *int64 `json:"period,omitempty" xml:"period,omitempty" require:"true"`
	// 承诺金额 单位分
	Amount *int64 `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 本期还款状态
	// 1.已还款：PAID
	// 2.部分还款：PART_PAID
	// 3.未还款：UN_PAID
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 每期约定还款时间
	// 示例：2023-06-7T10:50:23+08:00
	PromiseTime *string `json:"promise_time,omitempty" xml:"promise_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 每期应还日期
	// 示例：2023-06-27T10:50:23+08:00
	PayTime *string `json:"pay_time,omitempty" xml:"pay_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 归还方式
	// 1.租赁代扣： PROXY_WITHHOLDING
	// 2.主动还款：ACTIVE_REPAYMENT
	// 3.网商委托代扣：MY_BANK_DIRECT_PAYMENT
	// 4.预授权代扣：PRE_AUTHORIZATION_WITHHOLDING
	Way *string `json:"way,omitempty" xml:"way,omitempty" require:"true" maxLength:"32"`
}

func (s BclPromiseDetailInfo) String() string {
	return tea.Prettify(s)
}

func (s BclPromiseDetailInfo) GoString() string {
	return s.String()
}

func (s *BclPromiseDetailInfo) SetPeriod(v int64) *BclPromiseDetailInfo {
	s.Period = &v
	return s
}

func (s *BclPromiseDetailInfo) SetAmount(v int64) *BclPromiseDetailInfo {
	s.Amount = &v
	return s
}

func (s *BclPromiseDetailInfo) SetStatus(v string) *BclPromiseDetailInfo {
	s.Status = &v
	return s
}

func (s *BclPromiseDetailInfo) SetPromiseTime(v string) *BclPromiseDetailInfo {
	s.PromiseTime = &v
	return s
}

func (s *BclPromiseDetailInfo) SetPayTime(v string) *BclPromiseDetailInfo {
	s.PayTime = &v
	return s
}

func (s *BclPromiseDetailInfo) SetWay(v string) *BclPromiseDetailInfo {
	s.Way = &v
	return s
}

// 文件信息
type BclFileInfo struct {
	// 文件名称 包含后缀
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty" require:"true"`
	// 文件下载链接
	FileUrl *string `json:"file_url,omitempty" xml:"file_url,omitempty" require:"true"`
}

func (s BclFileInfo) String() string {
	return tea.Prettify(s)
}

func (s BclFileInfo) GoString() string {
	return s.String()
}

func (s *BclFileInfo) SetFileName(v string) *BclFileInfo {
	s.FileName = &v
	return s
}

func (s *BclFileInfo) SetFileUrl(v string) *BclFileInfo {
	s.FileUrl = &v
	return s
}

// 自动进件订单信息
type LeaseOrderInfo struct {
	// 出租方平台名称
	LessorPlatformName *string `json:"lessor_platform_name,omitempty" xml:"lessor_platform_name,omitempty"`
	// 订单号
	OrderNumber *string `json:"order_number,omitempty" xml:"order_number,omitempty" require:"true"`
	// 合同编号
	ContractNo *string `json:"contract_no,omitempty" xml:"contract_no,omitempty"`
	// 合同名称
	ContractName *string `json:"contract_name,omitempty" xml:"contract_name,omitempty"`
	// 订单商品信息列表
	OrderItems []*OrderItem `json:"order_items,omitempty" xml:"order_items,omitempty" require:"true" type:"Repeated"`
	// 设备及配件总价（单位元）
	TotalDevicePrice *string `json:"total_device_price,omitempty" xml:"total_device_price,omitempty" require:"true"`
	// 押金金额（单位元）
	DepositAmount *string `json:"deposit_amount,omitempty" xml:"deposit_amount,omitempty"`
	// 免押金额
	FreeDeposit *string `json:"free_deposit,omitempty" xml:"free_deposit,omitempty"`
	// 签约时间
	SignTime *string `json:"sign_time,omitempty" xml:"sign_time,omitempty"`
	// 租期起始时间
	LeaseStartTime *string `json:"lease_start_time,omitempty" xml:"lease_start_time,omitempty"`
	// 租期结束时间
	LeaseEndTime *string `json:"lease_end_time,omitempty" xml:"lease_end_time,omitempty"`
	// 买断金额计算公式
	BuyoutAmountFormulaCalc *string `json:"buyout_amount_formula_calc,omitempty" xml:"buyout_amount_formula_calc,omitempty"`
	// 首付款（单位元）
	PayInAdvance *string `json:"pay_in_advance,omitempty" xml:"pay_in_advance,omitempty"`
	// 创建时间
	OrderCreateTime *string `json:"order_create_time,omitempty" xml:"order_create_time,omitempty"`
	// 到期买断价 保留两位小数 单位元
	BuyOutPrice *string `json:"buy_out_price,omitempty" xml:"buy_out_price,omitempty"`
}

func (s LeaseOrderInfo) String() string {
	return tea.Prettify(s)
}

func (s LeaseOrderInfo) GoString() string {
	return s.String()
}

func (s *LeaseOrderInfo) SetLessorPlatformName(v string) *LeaseOrderInfo {
	s.LessorPlatformName = &v
	return s
}

func (s *LeaseOrderInfo) SetOrderNumber(v string) *LeaseOrderInfo {
	s.OrderNumber = &v
	return s
}

func (s *LeaseOrderInfo) SetContractNo(v string) *LeaseOrderInfo {
	s.ContractNo = &v
	return s
}

func (s *LeaseOrderInfo) SetContractName(v string) *LeaseOrderInfo {
	s.ContractName = &v
	return s
}

func (s *LeaseOrderInfo) SetOrderItems(v []*OrderItem) *LeaseOrderInfo {
	s.OrderItems = v
	return s
}

func (s *LeaseOrderInfo) SetTotalDevicePrice(v string) *LeaseOrderInfo {
	s.TotalDevicePrice = &v
	return s
}

func (s *LeaseOrderInfo) SetDepositAmount(v string) *LeaseOrderInfo {
	s.DepositAmount = &v
	return s
}

func (s *LeaseOrderInfo) SetFreeDeposit(v string) *LeaseOrderInfo {
	s.FreeDeposit = &v
	return s
}

func (s *LeaseOrderInfo) SetSignTime(v string) *LeaseOrderInfo {
	s.SignTime = &v
	return s
}

func (s *LeaseOrderInfo) SetLeaseStartTime(v string) *LeaseOrderInfo {
	s.LeaseStartTime = &v
	return s
}

func (s *LeaseOrderInfo) SetLeaseEndTime(v string) *LeaseOrderInfo {
	s.LeaseEndTime = &v
	return s
}

func (s *LeaseOrderInfo) SetBuyoutAmountFormulaCalc(v string) *LeaseOrderInfo {
	s.BuyoutAmountFormulaCalc = &v
	return s
}

func (s *LeaseOrderInfo) SetPayInAdvance(v string) *LeaseOrderInfo {
	s.PayInAdvance = &v
	return s
}

func (s *LeaseOrderInfo) SetOrderCreateTime(v string) *LeaseOrderInfo {
	s.OrderCreateTime = &v
	return s
}

func (s *LeaseOrderInfo) SetBuyOutPrice(v string) *LeaseOrderInfo {
	s.BuyOutPrice = &v
	return s
}

// 返回的bcl订单签署区信息
type BclContractSignFieldInfo struct {
	// 签署流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty"`
	// 文件id
	ContractFileId *string `json:"contract_file_id,omitempty" xml:"contract_file_id,omitempty"`
	// 签署人id
	ContractUserId *string `json:"contract_user_id,omitempty" xml:"contract_user_id,omitempty"`
	// 签署页码
	PosPage *string `json:"pos_page,omitempty" xml:"pos_page,omitempty"`
	// x坐标
	PosX *string `json:"pos_x,omitempty" xml:"pos_x,omitempty"`
	// y坐标
	PosY *string `json:"pos_y,omitempty" xml:"pos_y,omitempty"`
	// 签署类型，AUTO-自动，HAND-手动
	SignType *string `json:"sign_type,omitempty" xml:"sign_type,omitempty"`
	// 签署区类型，
	// 单页签署: SINGLE_PAGE，
	// 骑缝签署: RIDE_SEAM，
	// 默认 SINGLE_PAGE
	SignFieldType *string `json:"sign_field_type,omitempty" xml:"sign_field_type,omitempty"`
	// 是否添加签署时间
	// 不添加: false 添加: true ， 默认false, 商家不支持指定日期坐标
	AddSignDate *bool `json:"add_sign_date,omitempty" xml:"add_sign_date,omitempty"`
	// 签章日期字体大小,默认12 商家签署区不支持
	SignDateFontSize *int64 `json:"sign_date_font_size,omitempty" xml:"sign_date_font_size,omitempty"`
	// 签章日期格式，yyyy年MM月dd日 商家签署区不支持
	SignDateFormat *string `json:"sign_date_format,omitempty" xml:"sign_date_format,omitempty"`
	// 签章日期页码信息
	SignDatePosPage *int64 `json:"sign_date_pos_page,omitempty" xml:"sign_date_pos_page,omitempty"`
	// 签章日期x坐标
	SignDatePosX *string `json:"sign_date_pos_x,omitempty" xml:"sign_date_pos_x,omitempty"`
	// 签章日期y坐标
	SignDatePosY *string `json:"sign_date_pos_y,omitempty" xml:"sign_date_pos_y,omitempty"`
}

func (s BclContractSignFieldInfo) String() string {
	return tea.Prettify(s)
}

func (s BclContractSignFieldInfo) GoString() string {
	return s.String()
}

func (s *BclContractSignFieldInfo) SetFlowId(v string) *BclContractSignFieldInfo {
	s.FlowId = &v
	return s
}

func (s *BclContractSignFieldInfo) SetContractFileId(v string) *BclContractSignFieldInfo {
	s.ContractFileId = &v
	return s
}

func (s *BclContractSignFieldInfo) SetContractUserId(v string) *BclContractSignFieldInfo {
	s.ContractUserId = &v
	return s
}

func (s *BclContractSignFieldInfo) SetPosPage(v string) *BclContractSignFieldInfo {
	s.PosPage = &v
	return s
}

func (s *BclContractSignFieldInfo) SetPosX(v string) *BclContractSignFieldInfo {
	s.PosX = &v
	return s
}

func (s *BclContractSignFieldInfo) SetPosY(v string) *BclContractSignFieldInfo {
	s.PosY = &v
	return s
}

func (s *BclContractSignFieldInfo) SetSignType(v string) *BclContractSignFieldInfo {
	s.SignType = &v
	return s
}

func (s *BclContractSignFieldInfo) SetSignFieldType(v string) *BclContractSignFieldInfo {
	s.SignFieldType = &v
	return s
}

func (s *BclContractSignFieldInfo) SetAddSignDate(v bool) *BclContractSignFieldInfo {
	s.AddSignDate = &v
	return s
}

func (s *BclContractSignFieldInfo) SetSignDateFontSize(v int64) *BclContractSignFieldInfo {
	s.SignDateFontSize = &v
	return s
}

func (s *BclContractSignFieldInfo) SetSignDateFormat(v string) *BclContractSignFieldInfo {
	s.SignDateFormat = &v
	return s
}

func (s *BclContractSignFieldInfo) SetSignDatePosPage(v int64) *BclContractSignFieldInfo {
	s.SignDatePosPage = &v
	return s
}

func (s *BclContractSignFieldInfo) SetSignDatePosX(v string) *BclContractSignFieldInfo {
	s.SignDatePosX = &v
	return s
}

func (s *BclContractSignFieldInfo) SetSignDatePosY(v string) *BclContractSignFieldInfo {
	s.SignDatePosY = &v
	return s
}

// 司法纠纷平台自然人通用结构体
type JudicialPersonInfo struct {
	// 姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 身份证号码
	CertNumber *string `json:"cert_number,omitempty" xml:"cert_number,omitempty"`
	// 联系电话
	Phone *string `json:"phone,omitempty" xml:"phone,omitempty"`
	// 民族
	Nationality *string `json:"nationality,omitempty" xml:"nationality,omitempty"`
	// 通讯地址
	Address *string `json:"address,omitempty" xml:"address,omitempty"`
	// 身份证明
	IdentityCertification *JudicialFileInfo `json:"identity_certification,omitempty" xml:"identity_certification,omitempty"`
	// 职务
	JobTitle *string `json:"job_title,omitempty" xml:"job_title,omitempty"`
	// 任职证明
	JobCertification *JudicialFileInfo `json:"job_certification,omitempty" xml:"job_certification,omitempty"`
	// 性别， 0-男，1-女
	Sex *int64 `json:"sex,omitempty" xml:"sex,omitempty"`
	// 联系邮件地址
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
}

func (s JudicialPersonInfo) String() string {
	return tea.Prettify(s)
}

func (s JudicialPersonInfo) GoString() string {
	return s.String()
}

func (s *JudicialPersonInfo) SetName(v string) *JudicialPersonInfo {
	s.Name = &v
	return s
}

func (s *JudicialPersonInfo) SetCertNumber(v string) *JudicialPersonInfo {
	s.CertNumber = &v
	return s
}

func (s *JudicialPersonInfo) SetPhone(v string) *JudicialPersonInfo {
	s.Phone = &v
	return s
}

func (s *JudicialPersonInfo) SetNationality(v string) *JudicialPersonInfo {
	s.Nationality = &v
	return s
}

func (s *JudicialPersonInfo) SetAddress(v string) *JudicialPersonInfo {
	s.Address = &v
	return s
}

func (s *JudicialPersonInfo) SetIdentityCertification(v *JudicialFileInfo) *JudicialPersonInfo {
	s.IdentityCertification = v
	return s
}

func (s *JudicialPersonInfo) SetJobTitle(v string) *JudicialPersonInfo {
	s.JobTitle = &v
	return s
}

func (s *JudicialPersonInfo) SetJobCertification(v *JudicialFileInfo) *JudicialPersonInfo {
	s.JobCertification = v
	return s
}

func (s *JudicialPersonInfo) SetSex(v int64) *JudicialPersonInfo {
	s.Sex = &v
	return s
}

func (s *JudicialPersonInfo) SetEmail(v string) *JudicialPersonInfo {
	s.Email = &v
	return s
}

// 承诺信息
type CommitmentInfo struct {
	// 租金总额
	TotalRent *string `json:"total_rent,omitempty" xml:"total_rent,omitempty" require:"true"`
	// 租赁分期信息
	RentalStagingInformation []*RentalStagingInformation `json:"rental_staging_information,omitempty" xml:"rental_staging_information,omitempty" require:"true" type:"Repeated"`
}

func (s CommitmentInfo) String() string {
	return tea.Prettify(s)
}

func (s CommitmentInfo) GoString() string {
	return s.String()
}

func (s *CommitmentInfo) SetTotalRent(v string) *CommitmentInfo {
	s.TotalRent = &v
	return s
}

func (s *CommitmentInfo) SetRentalStagingInformation(v []*RentalStagingInformation) *CommitmentInfo {
	s.RentalStagingInformation = v
	return s
}

// 当被申请人为法人
type LegalPerson struct {
	// 被申请人姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 法人统一社会信用编码
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty" require:"true"`
	// 法定代表人姓名
	RepresentativeName *string `json:"representative_name,omitempty" xml:"representative_name,omitempty"`
	// 联系方式
	LegalPhoneNumber *string `json:"legal_phone_number,omitempty" xml:"legal_phone_number,omitempty"`
	// 住所地（同营业执照地址）
	LegalAddress *string `json:"legal_address,omitempty" xml:"legal_address,omitempty"`
	// 企业经营地址
	LegalBusinessAddress *string `json:"legal_business_address,omitempty" xml:"legal_business_address,omitempty"`
	// 营业执照照片
	// 文件信息列表（先调用接口获取上传url和fileKey）
	LegalIdNumberFile []*FileInfo `json:"legal_id_number_file,omitempty" xml:"legal_id_number_file,omitempty" type:"Repeated"`
}

func (s LegalPerson) String() string {
	return tea.Prettify(s)
}

func (s LegalPerson) GoString() string {
	return s.String()
}

func (s *LegalPerson) SetName(v string) *LegalPerson {
	s.Name = &v
	return s
}

func (s *LegalPerson) SetIdNumber(v string) *LegalPerson {
	s.IdNumber = &v
	return s
}

func (s *LegalPerson) SetRepresentativeName(v string) *LegalPerson {
	s.RepresentativeName = &v
	return s
}

func (s *LegalPerson) SetLegalPhoneNumber(v string) *LegalPerson {
	s.LegalPhoneNumber = &v
	return s
}

func (s *LegalPerson) SetLegalAddress(v string) *LegalPerson {
	s.LegalAddress = &v
	return s
}

func (s *LegalPerson) SetLegalBusinessAddress(v string) *LegalPerson {
	s.LegalBusinessAddress = &v
	return s
}

func (s *LegalPerson) SetLegalIdNumberFile(v []*FileInfo) *LegalPerson {
	s.LegalIdNumberFile = v
	return s
}

// 司法纠纷平台银行信息结构体
type JudicialBankInfo struct {
	// 开户行
	AccountBank *string `json:"account_bank,omitempty" xml:"account_bank,omitempty" require:"true"`
	// 开户账号
	AccountNumber *string `json:"account_number,omitempty" xml:"account_number,omitempty" require:"true"`
	// 开户名称
	AccountName *string `json:"account_name,omitempty" xml:"account_name,omitempty" require:"true"`
	// 开户联系电话
	AccountContactPhone *string `json:"account_contact_phone,omitempty" xml:"account_contact_phone,omitempty" require:"true"`
}

func (s JudicialBankInfo) String() string {
	return tea.Prettify(s)
}

func (s JudicialBankInfo) GoString() string {
	return s.String()
}

func (s *JudicialBankInfo) SetAccountBank(v string) *JudicialBankInfo {
	s.AccountBank = &v
	return s
}

func (s *JudicialBankInfo) SetAccountNumber(v string) *JudicialBankInfo {
	s.AccountNumber = &v
	return s
}

func (s *JudicialBankInfo) SetAccountName(v string) *JudicialBankInfo {
	s.AccountName = &v
	return s
}

func (s *JudicialBankInfo) SetAccountContactPhone(v string) *JudicialBankInfo {
	s.AccountContactPhone = &v
	return s
}

// 文本签签名信息
type ContractTextSignVerifySignatureInfo struct {
	// 是否被篡改
	IsModify *bool `json:"is_modify,omitempty" xml:"is_modify,omitempty"`
}

func (s ContractTextSignVerifySignatureInfo) String() string {
	return tea.Prettify(s)
}

func (s ContractTextSignVerifySignatureInfo) GoString() string {
	return s.String()
}

func (s *ContractTextSignVerifySignatureInfo) SetIsModify(v bool) *ContractTextSignVerifySignatureInfo {
	s.IsModify = &v
	return s
}

// 阶段存证内容类表，根据模板定义传入
type PhaseNotary struct {
	// 阶段编号，与模板阶段编号保持一致，不同阶段阶段编号不一样，要与阶段存证内容保持一致
	PhaseNo *int64 `json:"phase_no,omitempty" xml:"phase_no,omitempty" require:"true"`
	// 阶段存证内容，如果模板数据类型定义是Hash(哈希)则填入Hash即可，如果定义是Structure(结构化)，则填入模板所有字段json对象的字符串Base64后的值
	NotaryContent *string `json:"notary_content,omitempty" xml:"notary_content,omitempty" require:"true"`
	// 业务方原始数据ID，业务方确保唯一，方便与业务方进行数据核对使用
	//
	OriginDataId *string `json:"origin_data_id,omitempty" xml:"origin_data_id,omitempty" require:"true"`
}

func (s PhaseNotary) String() string {
	return tea.Prettify(s)
}

func (s PhaseNotary) GoString() string {
	return s.String()
}

func (s *PhaseNotary) SetPhaseNo(v int64) *PhaseNotary {
	s.PhaseNo = &v
	return s
}

func (s *PhaseNotary) SetNotaryContent(v string) *PhaseNotary {
	s.NotaryContent = &v
	return s
}

func (s *PhaseNotary) SetOriginDataId(v string) *PhaseNotary {
	s.OriginDataId = &v
	return s
}

// 租赁用户信息
type BclUserInfo struct {
	// 用户账号ID
	// 长度不超过64位，本期只支持支付宝userid
	UserAccountId *string `json:"user_account_id,omitempty" xml:"user_account_id,omitempty" require:"true" maxLength:"64"`
	// 用户账号平台类型
	// 1.支付宝：ALIPAY
	// 本期暂时只支持支付宝
	UserAccountType *string `json:"user_account_type,omitempty" xml:"user_account_type,omitempty" require:"true" maxLength:"16"`
	// 承租人/企业姓名,长度不超过32位
	UserCertName *string `json:"user_cert_name,omitempty" xml:"user_cert_name,omitempty" require:"true" maxLength:"128"`
	// 承租人/企业证件号,长度不超过64位
	UserCertNo *string `json:"user_cert_no,omitempty" xml:"user_cert_no,omitempty" require:"true" maxLength:"64"`
	// 承租人/企业证件类型:
	// 1.身份证：IDENTITY_CARD
	// 本期暂时只支持个人身份证
	UserCertType *string `json:"user_cert_type,omitempty" xml:"user_cert_type,omitempty" require:"true" maxLength:"32"`
	// 承租人/企业手机号,长度不超过32位
	UserPhoneNumber *string `json:"user_phone_number,omitempty" xml:"user_phone_number,omitempty" require:"true" maxLength:"32"`
	// 承租人身份证人像面/企业营业执照 先调用文件上传的接口,这里填上传后返回的fileid
	UserCertFrontFileId *string `json:"user_cert_front_file_id,omitempty" xml:"user_cert_front_file_id,omitempty" require:"true" maxLength:"64"`
	// 承租人身份证国徽面 先调用文件上传的接口,这里填上传后返回的fileid
	UserCertBackFileId *string `json:"user_cert_back_file_id,omitempty" xml:"user_cert_back_file_id,omitempty" maxLength:"64"`
}

func (s BclUserInfo) String() string {
	return tea.Prettify(s)
}

func (s BclUserInfo) GoString() string {
	return s.String()
}

func (s *BclUserInfo) SetUserAccountId(v string) *BclUserInfo {
	s.UserAccountId = &v
	return s
}

func (s *BclUserInfo) SetUserAccountType(v string) *BclUserInfo {
	s.UserAccountType = &v
	return s
}

func (s *BclUserInfo) SetUserCertName(v string) *BclUserInfo {
	s.UserCertName = &v
	return s
}

func (s *BclUserInfo) SetUserCertNo(v string) *BclUserInfo {
	s.UserCertNo = &v
	return s
}

func (s *BclUserInfo) SetUserCertType(v string) *BclUserInfo {
	s.UserCertType = &v
	return s
}

func (s *BclUserInfo) SetUserPhoneNumber(v string) *BclUserInfo {
	s.UserPhoneNumber = &v
	return s
}

func (s *BclUserInfo) SetUserCertFrontFileId(v string) *BclUserInfo {
	s.UserCertFrontFileId = &v
	return s
}

func (s *BclUserInfo) SetUserCertBackFileId(v string) *BclUserInfo {
	s.UserCertBackFileId = &v
	return s
}

// 自动进件履约信息
type LeasePerformanceInfo struct {
	// 支付租金总额
	RentPayTotal *string `json:"rent_pay_total,omitempty" xml:"rent_pay_total,omitempty" require:"true"`
	// 买断金额
	BuyoutAmount *string `json:"buyout_amount,omitempty" xml:"buyout_amount,omitempty"`
	// 租赁分期履约信息
	RentalInstallmentPerformance []*RentalInstallmentPerformance `json:"rental_installment_performance,omitempty" xml:"rental_installment_performance,omitempty" type:"Repeated"`
}

func (s LeasePerformanceInfo) String() string {
	return tea.Prettify(s)
}

func (s LeasePerformanceInfo) GoString() string {
	return s.String()
}

func (s *LeasePerformanceInfo) SetRentPayTotal(v string) *LeasePerformanceInfo {
	s.RentPayTotal = &v
	return s
}

func (s *LeasePerformanceInfo) SetBuyoutAmount(v string) *LeasePerformanceInfo {
	s.BuyoutAmount = &v
	return s
}

func (s *LeasePerformanceInfo) SetRentalInstallmentPerformance(v []*RentalInstallmentPerformance) *LeasePerformanceInfo {
	s.RentalInstallmentPerformance = v
	return s
}

// 答辩人为自然人对象
type NaturalPerson struct {
	// 自然人姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 自然人手机号码
	MobileNumber *string `json:"mobile_number,omitempty" xml:"mobile_number,omitempty" require:"true"`
	// 自然人身份号码
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty" require:"true"`
	// 自然人民族
	Nation *string `json:"nation,omitempty" xml:"nation,omitempty"`
	// 自然人身份地址
	Address *string `json:"address,omitempty" xml:"address,omitempty"`
	// 自然人电子邮箱
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// 自然人身份证正反面照片
	// 文件信息 列表（先调用接口获取上传url和fileKey）
	IdNumberFile []*FileInfo `json:"id_number_file,omitempty" xml:"id_number_file,omitempty" type:"Repeated"`
}

func (s NaturalPerson) String() string {
	return tea.Prettify(s)
}

func (s NaturalPerson) GoString() string {
	return s.String()
}

func (s *NaturalPerson) SetName(v string) *NaturalPerson {
	s.Name = &v
	return s
}

func (s *NaturalPerson) SetMobileNumber(v string) *NaturalPerson {
	s.MobileNumber = &v
	return s
}

func (s *NaturalPerson) SetIdNumber(v string) *NaturalPerson {
	s.IdNumber = &v
	return s
}

func (s *NaturalPerson) SetNation(v string) *NaturalPerson {
	s.Nation = &v
	return s
}

func (s *NaturalPerson) SetAddress(v string) *NaturalPerson {
	s.Address = &v
	return s
}

func (s *NaturalPerson) SetEmail(v string) *NaturalPerson {
	s.Email = &v
	return s
}

func (s *NaturalPerson) SetIdNumberFile(v []*FileInfo) *NaturalPerson {
	s.IdNumberFile = v
	return s
}

// 文件签验签证书结构体
type ContractDocSignVerifyCertInfo struct {
	// 证书所有者
	Owner *string `json:"owner,omitempty" xml:"owner,omitempty"`
	// 证书序列号
	Serial *string `json:"serial,omitempty" xml:"serial,omitempty"`
	// 证书开始日期
	StartDate *string `json:"start_date,omitempty" xml:"start_date,omitempty"`
	// 证书结束日期
	EndDate *string `json:"end_date,omitempty" xml:"end_date,omitempty"`
	// 证书颁发机构
	IssuerCn *string `json:"issuer_cn,omitempty" xml:"issuer_cn,omitempty"`
}

func (s ContractDocSignVerifyCertInfo) String() string {
	return tea.Prettify(s)
}

func (s ContractDocSignVerifyCertInfo) GoString() string {
	return s.String()
}

func (s *ContractDocSignVerifyCertInfo) SetOwner(v string) *ContractDocSignVerifyCertInfo {
	s.Owner = &v
	return s
}

func (s *ContractDocSignVerifyCertInfo) SetSerial(v string) *ContractDocSignVerifyCertInfo {
	s.Serial = &v
	return s
}

func (s *ContractDocSignVerifyCertInfo) SetStartDate(v string) *ContractDocSignVerifyCertInfo {
	s.StartDate = &v
	return s
}

func (s *ContractDocSignVerifyCertInfo) SetEndDate(v string) *ContractDocSignVerifyCertInfo {
	s.EndDate = &v
	return s
}

func (s *ContractDocSignVerifyCertInfo) SetIssuerCn(v string) *ContractDocSignVerifyCertInfo {
	s.IssuerCn = &v
	return s
}

// 可信存证存证地点信息
type Location struct {
	// 所在城市
	City *string `json:"city,omitempty" xml:"city,omitempty"`
	// 使用设备的IMEI号
	Imei *string `json:"imei,omitempty" xml:"imei,omitempty"`
	// 使用设备的IMSI号
	Imsi *string `json:"imsi,omitempty" xml:"imsi,omitempty"`
	// 使用设备的IP地址
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
	// 纬度
	Latitude *string `json:"latitude,omitempty" xml:"latitude,omitempty"`
	// 经度
	Longitude *string `json:"longitude,omitempty" xml:"longitude,omitempty"`
	// 使用设备的Wi-Fi物理地址
	MacAddr *string `json:"mac_addr,omitempty" xml:"mac_addr,omitempty"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
}

func (s Location) String() string {
	return tea.Prettify(s)
}

func (s Location) GoString() string {
	return s.String()
}

func (s *Location) SetCity(v string) *Location {
	s.City = &v
	return s
}

func (s *Location) SetImei(v string) *Location {
	s.Imei = &v
	return s
}

func (s *Location) SetImsi(v string) *Location {
	s.Imsi = &v
	return s
}

func (s *Location) SetIp(v string) *Location {
	s.Ip = &v
	return s
}

func (s *Location) SetLatitude(v string) *Location {
	s.Latitude = &v
	return s
}

func (s *Location) SetLongitude(v string) *Location {
	s.Longitude = &v
	return s
}

func (s *Location) SetMacAddr(v string) *Location {
	s.MacAddr = &v
	return s
}

func (s *Location) SetProperties(v string) *Location {
	s.Properties = &v
	return s
}

// 自动进件案件基础信息
type CaseBasicInfo struct {
	// 案件租户id
	BizTenantId *string `json:"biz_tenant_id,omitempty" xml:"biz_tenant_id,omitempty" require:"true"`
	// 案件类型:LEASE：租赁，FINANCIAL：金融，OTHER：其他
	CaseType *string `json:"case_type,omitempty" xml:"case_type,omitempty" require:"true"`
	// 标的金额（单位元）
	Amount *string `json:"amount,omitempty" xml:"amount,omitempty"`
	// 业务来源主键
	InputSourceId *string `json:"input_source_id,omitempty" xml:"input_source_id,omitempty" require:"true"`
	// 案件进件来源
	InputSource *string `json:"input_source,omitempty" xml:"input_source,omitempty" require:"true"`
	// 根据业务来源主键对应订单号下的租赁事实报告和证据列表页面的嵌入URL
	CaseExt *string `json:"case_ext,omitempty" xml:"case_ext,omitempty"`
}

func (s CaseBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s CaseBasicInfo) GoString() string {
	return s.String()
}

func (s *CaseBasicInfo) SetBizTenantId(v string) *CaseBasicInfo {
	s.BizTenantId = &v
	return s
}

func (s *CaseBasicInfo) SetCaseType(v string) *CaseBasicInfo {
	s.CaseType = &v
	return s
}

func (s *CaseBasicInfo) SetAmount(v string) *CaseBasicInfo {
	s.Amount = &v
	return s
}

func (s *CaseBasicInfo) SetInputSourceId(v string) *CaseBasicInfo {
	s.InputSourceId = &v
	return s
}

func (s *CaseBasicInfo) SetInputSource(v string) *CaseBasicInfo {
	s.InputSource = &v
	return s
}

func (s *CaseBasicInfo) SetCaseExt(v string) *CaseBasicInfo {
	s.CaseExt = &v
	return s
}

// 电子合同存证代扣计划执行操作信息
type ContractNotaryDeductExecutionInfo struct {
	// 付款方的区块链合同签署账号
	PayerId *string `json:"payer_id,omitempty" xml:"payer_id,omitempty" require:"true"`
	// 扣款金额，单位分
	Amount *int64 `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 扣款渠道
	Channel *string `json:"channel,omitempty" xml:"channel,omitempty" require:"true"`
	// 扣款操作是否成功
	Result *bool `json:"result,omitempty" xml:"result,omitempty" require:"true"`
	// 扣款操作发起时间
	Timestamp *string `json:"timestamp,omitempty" xml:"timestamp,omitempty" require:"true"`
	// 代扣计划ID
	Order *string `json:"order,omitempty" xml:"order,omitempty" require:"true"`
}

func (s ContractNotaryDeductExecutionInfo) String() string {
	return tea.Prettify(s)
}

func (s ContractNotaryDeductExecutionInfo) GoString() string {
	return s.String()
}

func (s *ContractNotaryDeductExecutionInfo) SetPayerId(v string) *ContractNotaryDeductExecutionInfo {
	s.PayerId = &v
	return s
}

func (s *ContractNotaryDeductExecutionInfo) SetAmount(v int64) *ContractNotaryDeductExecutionInfo {
	s.Amount = &v
	return s
}

func (s *ContractNotaryDeductExecutionInfo) SetChannel(v string) *ContractNotaryDeductExecutionInfo {
	s.Channel = &v
	return s
}

func (s *ContractNotaryDeductExecutionInfo) SetResult(v bool) *ContractNotaryDeductExecutionInfo {
	s.Result = &v
	return s
}

func (s *ContractNotaryDeductExecutionInfo) SetTimestamp(v string) *ContractNotaryDeductExecutionInfo {
	s.Timestamp = &v
	return s
}

func (s *ContractNotaryDeductExecutionInfo) SetOrder(v string) *ContractNotaryDeductExecutionInfo {
	s.Order = &v
	return s
}

// 数字票根计量字段
type MetricInfo struct {
	// 实际计收金额，单位：分。如传100，即为100分，1元
	CollectAmount *int64 `json:"collect_amount,omitempty" xml:"collect_amount,omitempty" require:"true"`
	// 计收受理时间
	CollectTime *string `json:"collect_time,omitempty" xml:"collect_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 计收的订单流水号
	CollectSerialNumber *string `json:"collect_serial_number,omitempty" xml:"collect_serial_number,omitempty" require:"true"`
}

func (s MetricInfo) String() string {
	return tea.Prettify(s)
}

func (s MetricInfo) GoString() string {
	return s.String()
}

func (s *MetricInfo) SetCollectAmount(v int64) *MetricInfo {
	s.CollectAmount = &v
	return s
}

func (s *MetricInfo) SetCollectTime(v string) *MetricInfo {
	s.CollectTime = &v
	return s
}

func (s *MetricInfo) SetCollectSerialNumber(v string) *MetricInfo {
	s.CollectSerialNumber = &v
	return s
}

// 融资租赁资方承诺
type LeaseCreditPromiseInfo struct {
	// 租期index
	Term *int64 `json:"term,omitempty" xml:"term,omitempty" require:"true"`
	// 应还金额
	PayMoney *int64 `json:"pay_money,omitempty" xml:"pay_money,omitempty" require:"true"`
	// 应还款时间
	PayDate *string `json:"pay_date,omitempty" xml:"pay_date,omitempty" require:"true"`
	// 垫付日
	PayInAdvanceTime *string `json:"pay_in_advance_time,omitempty" xml:"pay_in_advance_time,omitempty" require:"true"`
	// 垫付金额
	PayInAdvanceMoney *int64 `json:"pay_in_advance_money,omitempty" xml:"pay_in_advance_money,omitempty" require:"true"`
}

func (s LeaseCreditPromiseInfo) String() string {
	return tea.Prettify(s)
}

func (s LeaseCreditPromiseInfo) GoString() string {
	return s.String()
}

func (s *LeaseCreditPromiseInfo) SetTerm(v int64) *LeaseCreditPromiseInfo {
	s.Term = &v
	return s
}

func (s *LeaseCreditPromiseInfo) SetPayMoney(v int64) *LeaseCreditPromiseInfo {
	s.PayMoney = &v
	return s
}

func (s *LeaseCreditPromiseInfo) SetPayDate(v string) *LeaseCreditPromiseInfo {
	s.PayDate = &v
	return s
}

func (s *LeaseCreditPromiseInfo) SetPayInAdvanceTime(v string) *LeaseCreditPromiseInfo {
	s.PayInAdvanceTime = &v
	return s
}

func (s *LeaseCreditPromiseInfo) SetPayInAdvanceMoney(v int64) *LeaseCreditPromiseInfo {
	s.PayInAdvanceMoney = &v
	return s
}

// 融资租赁订单额外信息
type LeaseOrderExtra struct {
	// 额外信息的主键
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// 额外信息的值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s LeaseOrderExtra) String() string {
	return tea.Prettify(s)
}

func (s LeaseOrderExtra) GoString() string {
	return s.String()
}

func (s *LeaseOrderExtra) SetKey(v string) *LeaseOrderExtra {
	s.Key = &v
	return s
}

func (s *LeaseOrderExtra) SetValue(v string) *LeaseOrderExtra {
	s.Value = &v
	return s
}

// 发起人对象
type ProposerObject struct {
	// 申请人姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 统一社会信用代码
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty" require:"true"`
	// 联系电话
	PhoneNumber *string `json:"phone_number,omitempty" xml:"phone_number,omitempty"`
	// 电子邮箱地址
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// 经营地址
	BusinessAddress *string `json:"business_address,omitempty" xml:"business_address,omitempty"`
	// 营业执照照片
	// 文件信息 列表
	IdNumberFile []*FileInfo `json:"id_number_file,omitempty" xml:"id_number_file,omitempty" type:"Repeated"`
	// 法定代表人姓名
	RepresentativeName *string `json:"representative_name,omitempty" xml:"representative_name,omitempty"`
	// 法定代表人性别
	// 0: 男 1: 女
	RepresentativeSex *int64 `json:"representative_sex,omitempty" xml:"representative_sex,omitempty"`
	// 法定代表人身份证号码
	RepresentativeIdNumber *string `json:"representative_id_number,omitempty" xml:"representative_id_number,omitempty"`
	// 法定代表人手机号码
	RepresentativeMobileNumber *string `json:"representative_mobile_number,omitempty" xml:"representative_mobile_number,omitempty"`
	// 法定代表人代表身份证明
	// 文件信息列表
	RepresentativeIdNumberFile []*FileInfo `json:"representative_id_number_file,omitempty" xml:"representative_id_number_file,omitempty" type:"Repeated"`
	// 法定代表人职务
	RepresentativePost *string `json:"representative_post,omitempty" xml:"representative_post,omitempty"`
	// 法定代表人职务证明
	// 文件信息列表
	RepresentativePostFile []*FileInfo `json:"representative_post_file,omitempty" xml:"representative_post_file,omitempty" type:"Repeated"`
	// 签章管理员姓名
	SignatureManagerName *string `json:"signature_manager_name,omitempty" xml:"signature_manager_name,omitempty"`
	// 签章管理员身份证号码
	SignatureManagerIdCard *string `json:"signature_manager_id_card,omitempty" xml:"signature_manager_id_card,omitempty"`
	// 签章管理员手机号码
	SignatureManagerPhone *string `json:"signature_manager_phone,omitempty" xml:"signature_manager_phone,omitempty"`
}

func (s ProposerObject) String() string {
	return tea.Prettify(s)
}

func (s ProposerObject) GoString() string {
	return s.String()
}

func (s *ProposerObject) SetName(v string) *ProposerObject {
	s.Name = &v
	return s
}

func (s *ProposerObject) SetIdNumber(v string) *ProposerObject {
	s.IdNumber = &v
	return s
}

func (s *ProposerObject) SetPhoneNumber(v string) *ProposerObject {
	s.PhoneNumber = &v
	return s
}

func (s *ProposerObject) SetEmail(v string) *ProposerObject {
	s.Email = &v
	return s
}

func (s *ProposerObject) SetBusinessAddress(v string) *ProposerObject {
	s.BusinessAddress = &v
	return s
}

func (s *ProposerObject) SetIdNumberFile(v []*FileInfo) *ProposerObject {
	s.IdNumberFile = v
	return s
}

func (s *ProposerObject) SetRepresentativeName(v string) *ProposerObject {
	s.RepresentativeName = &v
	return s
}

func (s *ProposerObject) SetRepresentativeSex(v int64) *ProposerObject {
	s.RepresentativeSex = &v
	return s
}

func (s *ProposerObject) SetRepresentativeIdNumber(v string) *ProposerObject {
	s.RepresentativeIdNumber = &v
	return s
}

func (s *ProposerObject) SetRepresentativeMobileNumber(v string) *ProposerObject {
	s.RepresentativeMobileNumber = &v
	return s
}

func (s *ProposerObject) SetRepresentativeIdNumberFile(v []*FileInfo) *ProposerObject {
	s.RepresentativeIdNumberFile = v
	return s
}

func (s *ProposerObject) SetRepresentativePost(v string) *ProposerObject {
	s.RepresentativePost = &v
	return s
}

func (s *ProposerObject) SetRepresentativePostFile(v []*FileInfo) *ProposerObject {
	s.RepresentativePostFile = v
	return s
}

func (s *ProposerObject) SetSignatureManagerName(v string) *ProposerObject {
	s.SignatureManagerName = &v
	return s
}

func (s *ProposerObject) SetSignatureManagerIdCard(v string) *ProposerObject {
	s.SignatureManagerIdCard = &v
	return s
}

func (s *ProposerObject) SetSignatureManagerPhone(v string) *ProposerObject {
	s.SignatureManagerPhone = &v
	return s
}

// 融资租赁人脸认证提前还款租期记录
type FinanceCertifyRentalInfo struct {
	// 租期
	RentTerm *int64 `json:"rent_term,omitempty" xml:"rent_term,omitempty" require:"true"`
	// 本期扣款金额，123400表示12.34元
	RentalMoney *int64 `json:"rental_money,omitempty" xml:"rental_money,omitempty" require:"true"`
	// 还款日期，格式为"2019-07-31 12:00:00"
	RentalReturnTime *string `json:"rental_return_time,omitempty" xml:"rental_return_time,omitempty" require:"true"`
}

func (s FinanceCertifyRentalInfo) String() string {
	return tea.Prettify(s)
}

func (s FinanceCertifyRentalInfo) GoString() string {
	return s.String()
}

func (s *FinanceCertifyRentalInfo) SetRentTerm(v int64) *FinanceCertifyRentalInfo {
	s.RentTerm = &v
	return s
}

func (s *FinanceCertifyRentalInfo) SetRentalMoney(v int64) *FinanceCertifyRentalInfo {
	s.RentalMoney = &v
	return s
}

func (s *FinanceCertifyRentalInfo) SetRentalReturnTime(v string) *FinanceCertifyRentalInfo {
	s.RentalReturnTime = &v
	return s
}

// 创建电子合同签署盖章区时的申请信息
type ContractSignFieldApplication struct {
	// 是否添加签署时间戳，默认不添加，时间格式如"2019-03-11 10:12:12"
	AddSignTime *bool `json:"add_sign_time,omitempty" xml:"add_sign_time,omitempty"`
	// 签约主体账号标识， 将使用该主体账号对应的数字证书完成本次签署，如：当存在签署操作人代某机构签署时，需要传入该机构的账号id
	AuthorizedAccountId *string `json:"authorized_account_id,omitempty" xml:"authorized_account_id,omitempty" require:"true"`
	// 电子合同文件ID
	FileId *string `json:"file_id,omitempty" xml:"file_id,omitempty" require:"true"`
	// 签署区顺序，默认1,且不小于1，顺序越小越先处理
	Order *int64 `json:"order,omitempty" xml:"order,omitempty"`
	// 页码信息：当签署区signType为2时, 页码可以_-_分割, 例如1到15页，填"1-15"； 其他情况只能是数字
	PosPage *string `json:"pos_page,omitempty" xml:"pos_page,omitempty" require:"true"`
	// x坐标转为字符串的值，默认空，页面签章必填，骑缝签章不填写
	PosX *string `json:"pos_x,omitempty" xml:"pos_x,omitempty"`
	// y坐标转为字符串的值
	PosY *string `json:"pos_y,omitempty" xml:"pos_y,omitempty" require:"true"`
	// 印章id ，如不传，则采用账号下的默认印章
	SealId *string `json:"seal_id,omitempty" xml:"seal_id,omitempty"`
	// 第三方业务流水号id，保证相同签署人、相同签约主体、相同签署顺序的任务，对应的第三方业务流水id唯一，默认空
	ThirdOrderNo *string `json:"third_order_no,omitempty" xml:"third_order_no,omitempty"`
	// 签署区宽，默认印章宽度
	Width *string `json:"width,omitempty" xml:"width,omitempty"`
	// 签署类型，1-单页签署，2-骑缝签署，默认1
	SignType *int64 `json:"sign_type,omitempty" xml:"sign_type,omitempty"`
}

func (s ContractSignFieldApplication) String() string {
	return tea.Prettify(s)
}

func (s ContractSignFieldApplication) GoString() string {
	return s.String()
}

func (s *ContractSignFieldApplication) SetAddSignTime(v bool) *ContractSignFieldApplication {
	s.AddSignTime = &v
	return s
}

func (s *ContractSignFieldApplication) SetAuthorizedAccountId(v string) *ContractSignFieldApplication {
	s.AuthorizedAccountId = &v
	return s
}

func (s *ContractSignFieldApplication) SetFileId(v string) *ContractSignFieldApplication {
	s.FileId = &v
	return s
}

func (s *ContractSignFieldApplication) SetOrder(v int64) *ContractSignFieldApplication {
	s.Order = &v
	return s
}

func (s *ContractSignFieldApplication) SetPosPage(v string) *ContractSignFieldApplication {
	s.PosPage = &v
	return s
}

func (s *ContractSignFieldApplication) SetPosX(v string) *ContractSignFieldApplication {
	s.PosX = &v
	return s
}

func (s *ContractSignFieldApplication) SetPosY(v string) *ContractSignFieldApplication {
	s.PosY = &v
	return s
}

func (s *ContractSignFieldApplication) SetSealId(v string) *ContractSignFieldApplication {
	s.SealId = &v
	return s
}

func (s *ContractSignFieldApplication) SetThirdOrderNo(v string) *ContractSignFieldApplication {
	s.ThirdOrderNo = &v
	return s
}

func (s *ContractSignFieldApplication) SetWidth(v string) *ContractSignFieldApplication {
	s.Width = &v
	return s
}

func (s *ContractSignFieldApplication) SetSignType(v int64) *ContractSignFieldApplication {
	s.SignType = &v
	return s
}

// 机构信息
type ContractUserOrganizationApplication struct {
	// 证件号，该字段只有为空才允许修改
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty"`
	// 证件类型 ，默认CRED_ORG_USCC
	IdType *string `json:"id_type,omitempty" xml:"id_type,omitempty"`
	// 企业法定代表人名称
	LegalPerson *string `json:"legal_person,omitempty" xml:"legal_person,omitempty"`
	// 企业法定代表人证件号
	LegalPersonId *string `json:"legal_person_id,omitempty" xml:"legal_person_id,omitempty"`
	// 机构名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 机构账号id
	OrganizationId *string `json:"organization_id,omitempty" xml:"organization_id,omitempty" require:"true"`
}

func (s ContractUserOrganizationApplication) String() string {
	return tea.Prettify(s)
}

func (s ContractUserOrganizationApplication) GoString() string {
	return s.String()
}

func (s *ContractUserOrganizationApplication) SetIdNumber(v string) *ContractUserOrganizationApplication {
	s.IdNumber = &v
	return s
}

func (s *ContractUserOrganizationApplication) SetIdType(v string) *ContractUserOrganizationApplication {
	s.IdType = &v
	return s
}

func (s *ContractUserOrganizationApplication) SetLegalPerson(v string) *ContractUserOrganizationApplication {
	s.LegalPerson = &v
	return s
}

func (s *ContractUserOrganizationApplication) SetLegalPersonId(v string) *ContractUserOrganizationApplication {
	s.LegalPersonId = &v
	return s
}

func (s *ContractUserOrganizationApplication) SetName(v string) *ContractUserOrganizationApplication {
	s.Name = &v
	return s
}

func (s *ContractUserOrganizationApplication) SetOrganizationId(v string) *ContractUserOrganizationApplication {
	s.OrganizationId = &v
	return s
}

// 自动进件证据要素
type LeaseEvidentialElement struct {
	// 订单信息
	LeaseOrderInfo *LeaseOrderInfo `json:"lease_order_info,omitempty" xml:"lease_order_info,omitempty" require:"true"`
	// 承诺信息
	CommitmentInfo *CommitmentInfo `json:"commitment_info,omitempty" xml:"commitment_info,omitempty" require:"true"`
	// 物流信息
	LogisticsInfo *LogisticsInfo `json:"logistics_info,omitempty" xml:"logistics_info,omitempty" require:"true"`
	// 履约信息
	PerformanceInfo *LeasePerformanceInfo `json:"performance_info,omitempty" xml:"performance_info,omitempty" require:"true"`
}

func (s LeaseEvidentialElement) String() string {
	return tea.Prettify(s)
}

func (s LeaseEvidentialElement) GoString() string {
	return s.String()
}

func (s *LeaseEvidentialElement) SetLeaseOrderInfo(v *LeaseOrderInfo) *LeaseEvidentialElement {
	s.LeaseOrderInfo = v
	return s
}

func (s *LeaseEvidentialElement) SetCommitmentInfo(v *CommitmentInfo) *LeaseEvidentialElement {
	s.CommitmentInfo = v
	return s
}

func (s *LeaseEvidentialElement) SetLogisticsInfo(v *LogisticsInfo) *LeaseEvidentialElement {
	s.LogisticsInfo = v
	return s
}

func (s *LeaseEvidentialElement) SetPerformanceInfo(v *LeasePerformanceInfo) *LeaseEvidentialElement {
	s.PerformanceInfo = v
	return s
}

// 电子合同签署盖章区
type ContractSignField struct {
	// 电子合同用户ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 电子合同文档ID
	FileId *string `json:"file_id,omitempty" xml:"file_id,omitempty" require:"true"`
	// 电子合同签署区id
	SignfieldId *string `json:"signfield_id,omitempty" xml:"signfield_id,omitempty" require:"true"`
}

func (s ContractSignField) String() string {
	return tea.Prettify(s)
}

func (s ContractSignField) GoString() string {
	return s.String()
}

func (s *ContractSignField) SetAccountId(v string) *ContractSignField {
	s.AccountId = &v
	return s
}

func (s *ContractSignField) SetFileId(v string) *ContractSignField {
	s.FileId = &v
	return s
}

func (s *ContractSignField) SetSignfieldId(v string) *ContractSignField {
	s.SignfieldId = &v
	return s
}

// 订单查询承诺信息
type BclPromiseInfo struct {
	// 承诺租期 单位
	// 月 MONTH
	RentUnit *string `json:"rent_unit,omitempty" xml:"rent_unit,omitempty" require:"true"`
	// 总期数
	RentTerm *int64 `json:"rent_term,omitempty" xml:"rent_term,omitempty" require:"true"`
	// 总金额 单位分
	TotalRentMoney *int64 `json:"total_rent_money,omitempty" xml:"total_rent_money,omitempty" require:"true"`
	// 承诺履约详情
	PromiseDetails []*BclPromiseDetailInfo `json:"promise_details,omitempty" xml:"promise_details,omitempty" require:"true" type:"Repeated"`
}

func (s BclPromiseInfo) String() string {
	return tea.Prettify(s)
}

func (s BclPromiseInfo) GoString() string {
	return s.String()
}

func (s *BclPromiseInfo) SetRentUnit(v string) *BclPromiseInfo {
	s.RentUnit = &v
	return s
}

func (s *BclPromiseInfo) SetRentTerm(v int64) *BclPromiseInfo {
	s.RentTerm = &v
	return s
}

func (s *BclPromiseInfo) SetTotalRentMoney(v int64) *BclPromiseInfo {
	s.TotalRentMoney = &v
	return s
}

func (s *BclPromiseInfo) SetPromiseDetails(v []*BclPromiseDetailInfo) *BclPromiseInfo {
	s.PromiseDetails = v
	return s
}

// 签署区详情
type ContractSignFieldDetail struct {
	// 签约主体类别，0-个人，1-机构，默认0,2 是不限
	ActorIndentityType *int64 `json:"actor_indentity_type,omitempty" xml:"actor_indentity_type,omitempty"`
	// 添加时间
	AddTime *int64 `json:"add_time,omitempty" xml:"add_time,omitempty"`
	// 是否指定位置，TRUE表示不允许更新位置，配置项，无默认值
	AssignedPosbean *bool `json:"assigned_posbean,omitempty" xml:"assigned_posbean,omitempty"`
	// 是否指定印章数据，TRUE表示不允许更新印章，配置项，无默认值
	AssignedSeal *bool `json:"assigned_seal,omitempty" xml:"assigned_seal,omitempty"`
	// 签约主体账号标识，将使用该主体账号对应的数字证书完成本次签署，如：当存在签署操作人代某机构签署时，需要传入该机构的账号id
	AuthorizedAccountId *string `json:"authorized_account_id,omitempty" xml:"authorized_account_id,omitempty"`
	// 是否自动执行，TRUE需要静默授权，配置项，无默认值
	AutoExecute *bool `json:"auto_execute,omitempty" xml:"auto_execute,omitempty"`
	// 执行失败原因
	ExecuteFailedReason *string `json:"execute_failed_reason,omitempty" xml:"execute_failed_reason,omitempty"`
	// 文件file id
	FileId *string `json:"file_id,omitempty" xml:"file_id,omitempty"`
	// 流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty"`
	// 签署区顺序，默认1,且不小于1，顺序越小越先处理
	Order *int64 `json:"order,omitempty" xml:"order,omitempty"`
	// 页码信息，可以_,_或_-_分割
	PosPage *string `json:"pos_page,omitempty" xml:"pos_page,omitempty"`
	// x坐标
	PosX *string `json:"pos_x,omitempty" xml:"pos_x,omitempty"`
	// y坐标
	PosY *string `json:"pos_y,omitempty" xml:"pos_y,omitempty"`
	// 印章文件file key
	SealFileKey *string `json:"seal_file_key,omitempty" xml:"seal_file_key,omitempty"`
	// 印章id
	SealId *string `json:"seal_id,omitempty" xml:"seal_id,omitempty"`
	// 印章类型，支持多种类型时逗号分割，0-手绘印章，1-模版印章，为空不限制
	SealType *string `json:"seal_type,omitempty" xml:"seal_type,omitempty"`
	// 签署操作人个人账号标识，即操作本次签署的个人，如需e签宝通知用户签署，则系统向该账号下绑定的手机、邮箱发送签署链接
	SignerAccountId *string `json:"signer_account_id,omitempty" xml:"signer_account_id,omitempty"`
	// 签署区Id
	SignfieldId *string `json:"signfield_id,omitempty" xml:"signfield_id,omitempty"`
	// 签署类型，0-不限，1-单页签署，2-骑缝签署,4-关键字签署，默认1
	SignType *int64 `json:"sign_type,omitempty" xml:"sign_type,omitempty"`
	// 签署区状态（0："等待执行，1："执行中"，2："执行失败"，3："审批中"，4： "执行完成"）
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 状态描述
	StatusDescription *string `json:"status_description,omitempty" xml:"status_description,omitempty"`
	// 签署区宽
	Width *string `json:"width,omitempty" xml:"width,omitempty"`
}

func (s ContractSignFieldDetail) String() string {
	return tea.Prettify(s)
}

func (s ContractSignFieldDetail) GoString() string {
	return s.String()
}

func (s *ContractSignFieldDetail) SetActorIndentityType(v int64) *ContractSignFieldDetail {
	s.ActorIndentityType = &v
	return s
}

func (s *ContractSignFieldDetail) SetAddTime(v int64) *ContractSignFieldDetail {
	s.AddTime = &v
	return s
}

func (s *ContractSignFieldDetail) SetAssignedPosbean(v bool) *ContractSignFieldDetail {
	s.AssignedPosbean = &v
	return s
}

func (s *ContractSignFieldDetail) SetAssignedSeal(v bool) *ContractSignFieldDetail {
	s.AssignedSeal = &v
	return s
}

func (s *ContractSignFieldDetail) SetAuthorizedAccountId(v string) *ContractSignFieldDetail {
	s.AuthorizedAccountId = &v
	return s
}

func (s *ContractSignFieldDetail) SetAutoExecute(v bool) *ContractSignFieldDetail {
	s.AutoExecute = &v
	return s
}

func (s *ContractSignFieldDetail) SetExecuteFailedReason(v string) *ContractSignFieldDetail {
	s.ExecuteFailedReason = &v
	return s
}

func (s *ContractSignFieldDetail) SetFileId(v string) *ContractSignFieldDetail {
	s.FileId = &v
	return s
}

func (s *ContractSignFieldDetail) SetFlowId(v string) *ContractSignFieldDetail {
	s.FlowId = &v
	return s
}

func (s *ContractSignFieldDetail) SetOrder(v int64) *ContractSignFieldDetail {
	s.Order = &v
	return s
}

func (s *ContractSignFieldDetail) SetPosPage(v string) *ContractSignFieldDetail {
	s.PosPage = &v
	return s
}

func (s *ContractSignFieldDetail) SetPosX(v string) *ContractSignFieldDetail {
	s.PosX = &v
	return s
}

func (s *ContractSignFieldDetail) SetPosY(v string) *ContractSignFieldDetail {
	s.PosY = &v
	return s
}

func (s *ContractSignFieldDetail) SetSealFileKey(v string) *ContractSignFieldDetail {
	s.SealFileKey = &v
	return s
}

func (s *ContractSignFieldDetail) SetSealId(v string) *ContractSignFieldDetail {
	s.SealId = &v
	return s
}

func (s *ContractSignFieldDetail) SetSealType(v string) *ContractSignFieldDetail {
	s.SealType = &v
	return s
}

func (s *ContractSignFieldDetail) SetSignerAccountId(v string) *ContractSignFieldDetail {
	s.SignerAccountId = &v
	return s
}

func (s *ContractSignFieldDetail) SetSignfieldId(v string) *ContractSignFieldDetail {
	s.SignfieldId = &v
	return s
}

func (s *ContractSignFieldDetail) SetSignType(v int64) *ContractSignFieldDetail {
	s.SignType = &v
	return s
}

func (s *ContractSignFieldDetail) SetStatus(v int64) *ContractSignFieldDetail {
	s.Status = &v
	return s
}

func (s *ContractSignFieldDetail) SetStatusDescription(v string) *ContractSignFieldDetail {
	s.StatusDescription = &v
	return s
}

func (s *ContractSignFieldDetail) SetWidth(v string) *ContractSignFieldDetail {
	s.Width = &v
	return s
}

// 采购供应商初始化
type SupplierInfo struct {
	// 供应商id
	AgentSupplierId *string `json:"agent_supplier_id,omitempty" xml:"agent_supplier_id,omitempty" require:"true"`
	// 被代理机构社会统一信用码
	AgentSupplierCorpId *string `json:"agent_supplier_corp_id,omitempty" xml:"agent_supplier_corp_id,omitempty" require:"true"`
	// 被代理机构名称
	AgentSupplierCorpName *string `json:"agent_supplier_corp_name,omitempty" xml:"agent_supplier_corp_name,omitempty" require:"true"`
	// 被代理供应商名称
	AgentSupplierName *string `json:"agent_supplier_name,omitempty" xml:"agent_supplier_name,omitempty" require:"true"`
	// 被代理机构的法人名称
	AgentSupplierCorpOwnerName *string `json:"agent_supplier_corp_owner_name,omitempty" xml:"agent_supplier_corp_owner_name,omitempty" require:"true"`
	// 额外信息
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
}

func (s SupplierInfo) String() string {
	return tea.Prettify(s)
}

func (s SupplierInfo) GoString() string {
	return s.String()
}

func (s *SupplierInfo) SetAgentSupplierId(v string) *SupplierInfo {
	s.AgentSupplierId = &v
	return s
}

func (s *SupplierInfo) SetAgentSupplierCorpId(v string) *SupplierInfo {
	s.AgentSupplierCorpId = &v
	return s
}

func (s *SupplierInfo) SetAgentSupplierCorpName(v string) *SupplierInfo {
	s.AgentSupplierCorpName = &v
	return s
}

func (s *SupplierInfo) SetAgentSupplierName(v string) *SupplierInfo {
	s.AgentSupplierName = &v
	return s
}

func (s *SupplierInfo) SetAgentSupplierCorpOwnerName(v string) *SupplierInfo {
	s.AgentSupplierCorpOwnerName = &v
	return s
}

func (s *SupplierInfo) SetExtraInfo(v string) *SupplierInfo {
	s.ExtraInfo = &v
	return s
}

// 电子合同存证代扣计划信息
type ContractNotaryDeductPlanInfo struct {
	// PAYERIDNUMBER
	PayerId *string `json:"payer_id,omitempty" xml:"payer_id,omitempty" require:"true"`
	// “总金额：”+总金额“+”“总期数：”+总期数，“+”每期金额时间（X期金额，时间）
	DeductPlanInfo *string `json:"deduct_plan_info,omitempty" xml:"deduct_plan_info,omitempty" require:"true"`
	// AGREEMEND_ID_NUMBER
	AgreementNo *string `json:"agreement_no,omitempty" xml:"agreement_no,omitempty" require:"true"`
	// 代扣计划发起时间
	Timestamp *string `json:"timestamp,omitempty" xml:"timestamp,omitempty" require:"true"`
}

func (s ContractNotaryDeductPlanInfo) String() string {
	return tea.Prettify(s)
}

func (s ContractNotaryDeductPlanInfo) GoString() string {
	return s.String()
}

func (s *ContractNotaryDeductPlanInfo) SetPayerId(v string) *ContractNotaryDeductPlanInfo {
	s.PayerId = &v
	return s
}

func (s *ContractNotaryDeductPlanInfo) SetDeductPlanInfo(v string) *ContractNotaryDeductPlanInfo {
	s.DeductPlanInfo = &v
	return s
}

func (s *ContractNotaryDeductPlanInfo) SetAgreementNo(v string) *ContractNotaryDeductPlanInfo {
	s.AgreementNo = &v
	return s
}

func (s *ContractNotaryDeductPlanInfo) SetTimestamp(v string) *ContractNotaryDeductPlanInfo {
	s.Timestamp = &v
	return s
}

// 电子合同存证结束信息
type ContractNotaryFinishInfo struct {
	// 本阶段存证内容哈希值
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
	// 签署文件份数
	FileNum *int64 `json:"file_num,omitempty" xml:"file_num,omitempty" require:"true"`
	// 发起人ID
	Initiator *string `json:"initiator,omitempty" xml:"initiator,omitempty" require:"true"`
	// 签署人ID（支持多个，不同ID间用“,”分隔开）
	Signatories *string `json:"signatories,omitempty" xml:"signatories,omitempty" require:"true"`
	// 存证阶段发生时间，UNIX时间戳(毫秒)
	Timestamp *string `json:"timestamp,omitempty" xml:"timestamp,omitempty" require:"true"`
	// 存证凭据，仅在批量核验时需要填写
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
	// signatories对应的用户类型
	UserTypes *string `json:"user_types,omitempty" xml:"user_types,omitempty"`
	// 签署合同所属行业
	BusinessType *string `json:"business_type,omitempty" xml:"business_type,omitempty"`
	// 合同对应的金额，如果不涉及金额，填充为0，个数与file_num对应
	Amounts *string `json:"amounts,omitempty" xml:"amounts,omitempty"`
	// 签署方数量
	SignPartyCount *int64 `json:"sign_party_count,omitempty" xml:"sign_party_count,omitempty"`
	// 发起人名称
	IntiatorName *string `json:"intiator_name,omitempty" xml:"intiator_name,omitempty"`
	// 签署人名称,多个逗号隔开
	SignatorNames *string `json:"signator_names,omitempty" xml:"signator_names,omitempty"`
	// 详细文件哈希
	DetailInfoFileHash *string `json:"detail_info_file_hash,omitempty" xml:"detail_info_file_hash,omitempty"`
}

func (s ContractNotaryFinishInfo) String() string {
	return tea.Prettify(s)
}

func (s ContractNotaryFinishInfo) GoString() string {
	return s.String()
}

func (s *ContractNotaryFinishInfo) SetContent(v string) *ContractNotaryFinishInfo {
	s.Content = &v
	return s
}

func (s *ContractNotaryFinishInfo) SetFileNum(v int64) *ContractNotaryFinishInfo {
	s.FileNum = &v
	return s
}

func (s *ContractNotaryFinishInfo) SetInitiator(v string) *ContractNotaryFinishInfo {
	s.Initiator = &v
	return s
}

func (s *ContractNotaryFinishInfo) SetSignatories(v string) *ContractNotaryFinishInfo {
	s.Signatories = &v
	return s
}

func (s *ContractNotaryFinishInfo) SetTimestamp(v string) *ContractNotaryFinishInfo {
	s.Timestamp = &v
	return s
}

func (s *ContractNotaryFinishInfo) SetTxHash(v string) *ContractNotaryFinishInfo {
	s.TxHash = &v
	return s
}

func (s *ContractNotaryFinishInfo) SetUserTypes(v string) *ContractNotaryFinishInfo {
	s.UserTypes = &v
	return s
}

func (s *ContractNotaryFinishInfo) SetBusinessType(v string) *ContractNotaryFinishInfo {
	s.BusinessType = &v
	return s
}

func (s *ContractNotaryFinishInfo) SetAmounts(v string) *ContractNotaryFinishInfo {
	s.Amounts = &v
	return s
}

func (s *ContractNotaryFinishInfo) SetSignPartyCount(v int64) *ContractNotaryFinishInfo {
	s.SignPartyCount = &v
	return s
}

func (s *ContractNotaryFinishInfo) SetIntiatorName(v string) *ContractNotaryFinishInfo {
	s.IntiatorName = &v
	return s
}

func (s *ContractNotaryFinishInfo) SetSignatorNames(v string) *ContractNotaryFinishInfo {
	s.SignatorNames = &v
	return s
}

func (s *ContractNotaryFinishInfo) SetDetailInfoFileHash(v string) *ContractNotaryFinishInfo {
	s.DetailInfoFileHash = &v
	return s
}

// 见证流程文档检验数据
type WitnessDocs struct {
	// 文档摘要值
	DocHash *string `json:"doc_hash,omitempty" xml:"doc_hash,omitempty" require:"true"`
	// 第三方文档id
	ThirdDocId *string `json:"third_doc_id,omitempty" xml:"third_doc_id,omitempty" require:"true"`
}

func (s WitnessDocs) String() string {
	return tea.Prettify(s)
}

func (s WitnessDocs) GoString() string {
	return s.String()
}

func (s *WitnessDocs) SetDocHash(v string) *WitnessDocs {
	s.DocHash = &v
	return s
}

func (s *WitnessDocs) SetThirdDocId(v string) *WitnessDocs {
	s.ThirdDocId = &v
	return s
}

// 平台方自动签署区信息
type ContractPlatformSignField struct {
	// 是否添加签署时间戳，默认不添加，时间格式如"2019-03-11 10:12:12"
	AddSignTime *bool `json:"add_sign_time,omitempty" xml:"add_sign_time,omitempty"`
	// 签署区顺序，默认1,且不小于1，顺序越小越先处理
	Order *int64 `json:"order,omitempty" xml:"order,omitempty"`
	// 页码信息，当签署区signType为2时, 页码可以_-_分割, 其他情况只能是数字
	PosPage *string `json:"pos_page,omitempty" xml:"pos_page,omitempty" require:"true"`
	// x坐标转为字符串的值，默认空
	PosX *string `json:"pos_x,omitempty" xml:"pos_x,omitempty"`
	// y坐标转为字符串的值
	PosY *string `json:"pos_y,omitempty" xml:"pos_y,omitempty" require:"true"`
	// 印章id ，如不传，则采用账号下的默认印章
	SealId *string `json:"seal_id,omitempty" xml:"seal_id,omitempty"`
	// 第三方业务流水号id，保证相同签署人、相同签约主体、相同签署顺序的任务，对应的第三方业务流水id唯一，默认空
	ThirdOrderNo *string `json:"third_order_no,omitempty" xml:"third_order_no,omitempty"`
	// 签署区宽，默认印章宽度
	Width *string `json:"width,omitempty" xml:"width,omitempty"`
}

func (s ContractPlatformSignField) String() string {
	return tea.Prettify(s)
}

func (s ContractPlatformSignField) GoString() string {
	return s.String()
}

func (s *ContractPlatformSignField) SetAddSignTime(v bool) *ContractPlatformSignField {
	s.AddSignTime = &v
	return s
}

func (s *ContractPlatformSignField) SetOrder(v int64) *ContractPlatformSignField {
	s.Order = &v
	return s
}

func (s *ContractPlatformSignField) SetPosPage(v string) *ContractPlatformSignField {
	s.PosPage = &v
	return s
}

func (s *ContractPlatformSignField) SetPosX(v string) *ContractPlatformSignField {
	s.PosX = &v
	return s
}

func (s *ContractPlatformSignField) SetPosY(v string) *ContractPlatformSignField {
	s.PosY = &v
	return s
}

func (s *ContractPlatformSignField) SetSealId(v string) *ContractPlatformSignField {
	s.SealId = &v
	return s
}

func (s *ContractPlatformSignField) SetThirdOrderNo(v string) *ContractPlatformSignField {
	s.ThirdOrderNo = &v
	return s
}

func (s *ContractPlatformSignField) SetWidth(v string) *ContractPlatformSignField {
	s.Width = &v
	return s
}

// 文件签署签署信息,包含证书与签名
type ContractDocSignVerifyInfo struct {
	// 证书信息
	Cert *ContractDocSignVerifyCertInfo `json:"cert,omitempty" xml:"cert,omitempty"`
	// 签名信息
	Signature *ContractDocSignVerifySignatureInfo `json:"signature,omitempty" xml:"signature,omitempty"`
	// 印章数据
	SealData *string `json:"seal_data,omitempty" xml:"seal_data,omitempty"`
}

func (s ContractDocSignVerifyInfo) String() string {
	return tea.Prettify(s)
}

func (s ContractDocSignVerifyInfo) GoString() string {
	return s.String()
}

func (s *ContractDocSignVerifyInfo) SetCert(v *ContractDocSignVerifyCertInfo) *ContractDocSignVerifyInfo {
	s.Cert = v
	return s
}

func (s *ContractDocSignVerifyInfo) SetSignature(v *ContractDocSignVerifySignatureInfo) *ContractDocSignVerifyInfo {
	s.Signature = v
	return s
}

func (s *ContractDocSignVerifyInfo) SetSealData(v string) *ContractDocSignVerifyInfo {
	s.SealData = &v
	return s
}

// 见证流程签署数据
type WitnessSignData struct {
	// 印章图片fileKey列表
	SealFileKeys []*string `json:"seal_file_keys,omitempty" xml:"seal_file_keys,omitempty" type:"Repeated"`
	// 印章id列表
	SealIds []*string `json:"seal_ids,omitempty" xml:"seal_ids,omitempty" type:"Repeated"`
	// 待签署文档摘要值，批量签时必传
	SignHash *string `json:"sign_hash,omitempty" xml:"sign_hash,omitempty"`
	// 签署位置信息
	SignPosData *string `json:"sign_pos_data,omitempty" xml:"sign_pos_data,omitempty"`
	// 第三方文档id，批量签时必传
	ThirdDocId *string `json:"third_doc_id,omitempty" xml:"third_doc_id,omitempty"`
}

func (s WitnessSignData) String() string {
	return tea.Prettify(s)
}

func (s WitnessSignData) GoString() string {
	return s.String()
}

func (s *WitnessSignData) SetSealFileKeys(v []*string) *WitnessSignData {
	s.SealFileKeys = v
	return s
}

func (s *WitnessSignData) SetSealIds(v []*string) *WitnessSignData {
	s.SealIds = v
	return s
}

func (s *WitnessSignData) SetSignHash(v string) *WitnessSignData {
	s.SignHash = &v
	return s
}

func (s *WitnessSignData) SetSignPosData(v string) *WitnessSignData {
	s.SignPosData = &v
	return s
}

func (s *WitnessSignData) SetThirdDocId(v string) *WitnessSignData {
	s.ThirdDocId = &v
	return s
}

// 案件基础信息
type CaseBaseInfo struct {
	// caseID
	CaseId *string `json:"case_id,omitempty" xml:"case_id,omitempty" require:"true"`
	// PENDING_RIGHTS_PROTECTION(1, "待发起维权"),
	// TO_BE_SUBMITTED(2, "待提交"),
	// ACCEPTED_AND_PROCESSED(3, "收案处理中"),
	// RESULTS_TO_BE_CONFIRMED(4, "结果待确认"),
	// CLOSED(5, "已关闭"),
	CasePhase *string `json:"case_phase,omitempty" xml:"case_phase,omitempty" require:"true"`
	// 维权ID
	RecordId *string `json:"record_id,omitempty" xml:"record_id,omitempty" require:"true"`
	// MEDIATION(1, "调解"),
	// LITIGATION(2, "诉讼"),
	// ARBITRATION(3, "仲裁"),
	// CARRIED_OUT(4, "执行"),
	RecordType *string `json:"record_type,omitempty" xml:"record_type,omitempty" require:"true"`
	// MATERIAL_PREPARATION(1, "材料准备中"),
	// SUBMITTED(2, "已提交"),
	// FILED(3, "已立案"),
	// CLOSED(4, "已结案"),
	// WITHDRAW_THE_CASE(5, "撤案"),
	// REVOKE(6, "撤销"),
	// INADMISSIBLE(7, "不予受理"),
	// SUBMITTING(8, "提交中"),
	// SUBMISSION_FAILED(9, "提交失败"),
	// FINAL_RULING(10, "裁定终本"),
	// CARRIED_OUT_FINISHED(11, "执行完毕"),
	// TO_BE_SIGNED(12, "签署中"),
	// SIGNING_TIMED_OUT(13, "签署超时"),
	// SIGN_REJECTED(14, "签署被拒绝"),
	// SIGN_REVOCATION(15, "签署撤销"),
	// WITHDRAW_THE_CASE_ING(16, "撤案处理中"),
	// WITHDRAW_SIGNING_TIMED_OUT(17, "撤案签署超时"),
	// WITHDRAW_SIGN_REJECTED(18, "撤案签署被拒绝"),
	// WITHDRAW_SIGN_REVOCATION(19, "撤案签署撤销"),
	// SIGNED(20, "签署完成"),
	// WITHDRAW_SIGNED(21, "撤案签署完成"),
	CaseStatus *string `json:"case_status,omitempty" xml:"case_status,omitempty" require:"true"`
	// 案件提交时间
	SubmitTime *string `json:"submit_time,omitempty" xml:"submit_time,omitempty" require:"true"`
	// 维权机构
	ArbitralBody *string `json:"arbitral_body,omitempty" xml:"arbitral_body,omitempty" require:"true"`
	// 结案时间 如没有则为""
	CloseTime *string `json:"close_time,omitempty" xml:"close_time,omitempty"`
	// 案号 如没有则为""
	AcceptanceNumber *string `json:"acceptance_number,omitempty" xml:"acceptance_number,omitempty"`
	// 案件回款金额,两位小数 单位(元) 如没有则为""
	CasePaymentActualAmount *string `json:"case_payment_actual_amount,omitempty" xml:"case_payment_actual_amount,omitempty"`
	// 是否能够下载 true可以下载 false没有可下载文件
	CanDownload *string `json:"can_download,omitempty" xml:"can_download,omitempty" require:"true"`
}

func (s CaseBaseInfo) String() string {
	return tea.Prettify(s)
}

func (s CaseBaseInfo) GoString() string {
	return s.String()
}

func (s *CaseBaseInfo) SetCaseId(v string) *CaseBaseInfo {
	s.CaseId = &v
	return s
}

func (s *CaseBaseInfo) SetCasePhase(v string) *CaseBaseInfo {
	s.CasePhase = &v
	return s
}

func (s *CaseBaseInfo) SetRecordId(v string) *CaseBaseInfo {
	s.RecordId = &v
	return s
}

func (s *CaseBaseInfo) SetRecordType(v string) *CaseBaseInfo {
	s.RecordType = &v
	return s
}

func (s *CaseBaseInfo) SetCaseStatus(v string) *CaseBaseInfo {
	s.CaseStatus = &v
	return s
}

func (s *CaseBaseInfo) SetSubmitTime(v string) *CaseBaseInfo {
	s.SubmitTime = &v
	return s
}

func (s *CaseBaseInfo) SetArbitralBody(v string) *CaseBaseInfo {
	s.ArbitralBody = &v
	return s
}

func (s *CaseBaseInfo) SetCloseTime(v string) *CaseBaseInfo {
	s.CloseTime = &v
	return s
}

func (s *CaseBaseInfo) SetAcceptanceNumber(v string) *CaseBaseInfo {
	s.AcceptanceNumber = &v
	return s
}

func (s *CaseBaseInfo) SetCasePaymentActualAmount(v string) *CaseBaseInfo {
	s.CasePaymentActualAmount = &v
	return s
}

func (s *CaseBaseInfo) SetCanDownload(v string) *CaseBaseInfo {
	s.CanDownload = &v
	return s
}

// 电子合同存证合同文档信息
type ContractNotaryDocumentInfo struct {
	// 签署完成的合同hash
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
	// 签署人ID（支持多个，不同ID间用“,”分隔开）
	Signatories *string `json:"signatories,omitempty" xml:"signatories,omitempty" require:"true"`
	// 存证结束时间，UNIX时间戳(毫秒)
	Timestamp *string `json:"timestamp,omitempty" xml:"timestamp,omitempty" require:"true"`
	// 存证凭据，仅在批量核验时需要填写
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
	// 签署的文件ID
	FileId *string `json:"file_id,omitempty" xml:"file_id,omitempty" require:"true"`
}

func (s ContractNotaryDocumentInfo) String() string {
	return tea.Prettify(s)
}

func (s ContractNotaryDocumentInfo) GoString() string {
	return s.String()
}

func (s *ContractNotaryDocumentInfo) SetContent(v string) *ContractNotaryDocumentInfo {
	s.Content = &v
	return s
}

func (s *ContractNotaryDocumentInfo) SetSignatories(v string) *ContractNotaryDocumentInfo {
	s.Signatories = &v
	return s
}

func (s *ContractNotaryDocumentInfo) SetTimestamp(v string) *ContractNotaryDocumentInfo {
	s.Timestamp = &v
	return s
}

func (s *ContractNotaryDocumentInfo) SetTxHash(v string) *ContractNotaryDocumentInfo {
	s.TxHash = &v
	return s
}

func (s *ContractNotaryDocumentInfo) SetFileId(v string) *ContractNotaryDocumentInfo {
	s.FileId = &v
	return s
}

// 关键字位置列表
type KeywordsPosition struct {
	// 关键字
	Keyword *string `json:"keyword,omitempty" xml:"keyword,omitempty" require:"true"`
	// 页码
	PageIndex *int64 `json:"page_index,omitempty" xml:"page_index,omitempty" require:"true"`
	// x坐标
	PosX *string `json:"pos_x,omitempty" xml:"pos_x,omitempty" require:"true"`
	// y坐标
	PosY *string `json:"pos_y,omitempty" xml:"pos_y,omitempty" require:"true"`
}

func (s KeywordsPosition) String() string {
	return tea.Prettify(s)
}

func (s KeywordsPosition) GoString() string {
	return s.String()
}

func (s *KeywordsPosition) SetKeyword(v string) *KeywordsPosition {
	s.Keyword = &v
	return s
}

func (s *KeywordsPosition) SetPageIndex(v int64) *KeywordsPosition {
	s.PageIndex = &v
	return s
}

func (s *KeywordsPosition) SetPosX(v string) *KeywordsPosition {
	s.PosX = &v
	return s
}

func (s *KeywordsPosition) SetPosY(v string) *KeywordsPosition {
	s.PosY = &v
	return s
}

// 电子合同文档的下载地址
type ContractDocAddress struct {
	// 电子合同文档ID
	FileId *string `json:"file_id,omitempty" xml:"file_id,omitempty" require:"true"`
	// 电子合同文档名称，默认文件名称
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty" require:"true"`
	// 电子合同下载文档地址, 有效时间1小时
	FileUrl *string `json:"file_url,omitempty" xml:"file_url,omitempty" require:"true"`
	// 合同文件的存证地址
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s ContractDocAddress) String() string {
	return tea.Prettify(s)
}

func (s ContractDocAddress) GoString() string {
	return s.String()
}

func (s *ContractDocAddress) SetFileId(v string) *ContractDocAddress {
	s.FileId = &v
	return s
}

func (s *ContractDocAddress) SetFileName(v string) *ContractDocAddress {
	s.FileName = &v
	return s
}

func (s *ContractDocAddress) SetFileUrl(v string) *ContractDocAddress {
	s.FileUrl = &v
	return s
}

func (s *ContractDocAddress) SetTxHash(v string) *ContractDocAddress {
	s.TxHash = &v
	return s
}

// 数字票根通用字段
type StubCommonInfo struct {
	// 项目名称
	ProjectName *string `json:"project_name,omitempty" xml:"project_name,omitempty" require:"true"`
	// 客户名称（三方合约中甲方名称：景区或服务商）
	SceneName *string `json:"scene_name,omitempty" xml:"scene_name,omitempty" require:"true"`
	// 业务类型。目前只有数字票根这一个情景，枚举为：TICKET_STUB
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 业务来源；Alipay：支付宝，Scene：景区
	BizSource *string `json:"biz_source,omitempty" xml:"biz_source,omitempty" require:"true"`
	// 订单id。若bizSource为支付宝情况下传支付宝流水号（业务系统的出票流水号）；若bizSource为景区时传上游生成的订单号
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 订单名称
	OrderName *string `json:"order_name,omitempty" xml:"order_name,omitempty"`
	// 订单总金额，单位：分。如传100，即为100分，1元
	OrderAmount *int64 `json:"order_amount,omitempty" xml:"order_amount,omitempty" require:"true"`
	// 下单时间
	OrderTime *string `json:"order_time,omitempty" xml:"order_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 待分账金额，单位：分。如传100，即为100分，1元
	StubAmount *int64 `json:"stub_amount,omitempty" xml:"stub_amount,omitempty" require:"true"`
	// 客户id。支付宝情况下传支付宝id，2088打头；景区时可传自定义的客户id
	CustomerId *string `json:"customer_id,omitempty" xml:"customer_id,omitempty" require:"true"`
	// 景区支付宝id，当biz_source为Alipay时，该字段必填
	SceneAlipayId *string `json:"scene_alipay_id,omitempty" xml:"scene_alipay_id,omitempty"`
	// 数字票根背面业务类型，如 IMAGE（背面上传照片业务）、IMAGEANDAR（背面上传照片和AR孔明灯业务）
	BackType *string `json:"back_type,omitempty" xml:"back_type,omitempty"`
}

func (s StubCommonInfo) String() string {
	return tea.Prettify(s)
}

func (s StubCommonInfo) GoString() string {
	return s.String()
}

func (s *StubCommonInfo) SetProjectName(v string) *StubCommonInfo {
	s.ProjectName = &v
	return s
}

func (s *StubCommonInfo) SetSceneName(v string) *StubCommonInfo {
	s.SceneName = &v
	return s
}

func (s *StubCommonInfo) SetBizType(v string) *StubCommonInfo {
	s.BizType = &v
	return s
}

func (s *StubCommonInfo) SetBizSource(v string) *StubCommonInfo {
	s.BizSource = &v
	return s
}

func (s *StubCommonInfo) SetOrderId(v string) *StubCommonInfo {
	s.OrderId = &v
	return s
}

func (s *StubCommonInfo) SetOrderName(v string) *StubCommonInfo {
	s.OrderName = &v
	return s
}

func (s *StubCommonInfo) SetOrderAmount(v int64) *StubCommonInfo {
	s.OrderAmount = &v
	return s
}

func (s *StubCommonInfo) SetOrderTime(v string) *StubCommonInfo {
	s.OrderTime = &v
	return s
}

func (s *StubCommonInfo) SetStubAmount(v int64) *StubCommonInfo {
	s.StubAmount = &v
	return s
}

func (s *StubCommonInfo) SetCustomerId(v string) *StubCommonInfo {
	s.CustomerId = &v
	return s
}

func (s *StubCommonInfo) SetSceneAlipayId(v string) *StubCommonInfo {
	s.SceneAlipayId = &v
	return s
}

func (s *StubCommonInfo) SetBackType(v string) *StubCommonInfo {
	s.BackType = &v
	return s
}

// 见证流程创建响应数据
type WitnessFlowConfig struct {
	// 企业实名认证方式,对公打款：1；企业芝麻认证：3；法定代表授权：4；
	OrganRealnameTypes []*int64 `json:"organ_realname_types,omitempty" xml:"organ_realname_types,omitempty" type:"Repeated"`
	// 个人实名认证方式, 银行四要素：2；芝麻认证-人脸识别：3；微众-人脸识别：4；
	PersonRealnameTypes []*int64 `json:"person_realname_types,omitempty" xml:"person_realname_types,omitempty" type:"Repeated"`
	// 是否需要实名认证
	RealNameCert *bool `json:"real_name_cert,omitempty" xml:"real_name_cert,omitempty"`
	// 意愿认证方式, 芝麻认证-人脸识别：2；短信验证码：3；微众-人脸识别：4；ukey认证：5；签署密码认证：6；
	WillingnessTypes []*int64 `json:"willingness_types,omitempty" xml:"willingness_types,omitempty" type:"Repeated"`
}

func (s WitnessFlowConfig) String() string {
	return tea.Prettify(s)
}

func (s WitnessFlowConfig) GoString() string {
	return s.String()
}

func (s *WitnessFlowConfig) SetOrganRealnameTypes(v []*int64) *WitnessFlowConfig {
	s.OrganRealnameTypes = v
	return s
}

func (s *WitnessFlowConfig) SetPersonRealnameTypes(v []*int64) *WitnessFlowConfig {
	s.PersonRealnameTypes = v
	return s
}

func (s *WitnessFlowConfig) SetRealNameCert(v bool) *WitnessFlowConfig {
	s.RealNameCert = &v
	return s
}

func (s *WitnessFlowConfig) SetWillingnessTypes(v []*int64) *WitnessFlowConfig {
	s.WillingnessTypes = v
	return s
}

// 见证流程审批数据
type WitnessApprovalData struct {
	// 审批流程id
	ApprovalFlowId *string `json:"approval_flow_id,omitempty" xml:"approval_flow_id,omitempty"`
	// 印章id列表
	SealIds []*string `json:"seal_ids,omitempty" xml:"seal_ids,omitempty" type:"Repeated"`
}

func (s WitnessApprovalData) String() string {
	return tea.Prettify(s)
}

func (s WitnessApprovalData) GoString() string {
	return s.String()
}

func (s *WitnessApprovalData) SetApprovalFlowId(v string) *WitnessApprovalData {
	s.ApprovalFlowId = &v
	return s
}

func (s *WitnessApprovalData) SetSealIds(v []*string) *WitnessApprovalData {
	s.SealIds = v
	return s
}

// 供应商商品信息
type SupplierProductItem struct {
	// 供应商名称
	SupplierName *string `json:"supplier_name,omitempty" xml:"supplier_name,omitempty"`
	// 商品型号
	ProductModel *string `json:"product_model,omitempty" xml:"product_model,omitempty" require:"true"`
	// 供应商id
	SupplierId *string `json:"supplier_id,omitempty" xml:"supplier_id,omitempty"`
	// 商品唯一id
	ProductId *string `json:"product_id,omitempty" xml:"product_id,omitempty" require:"true"`
	// 3C
	MainClass *string `json:"main_class,omitempty" xml:"main_class,omitempty" require:"true"`
	// 预计发货量
	EstimatedShipment *int64 `json:"estimated_shipment,omitempty" xml:"estimated_shipment,omitempty"`
	// 二级类目
	SubClass *string `json:"sub_class,omitempty" xml:"sub_class,omitempty" require:"true"`
	// 商品详情
	ProductDetailInfo *string `json:"product_detail_info,omitempty" xml:"product_detail_info,omitempty" require:"true"`
	// 商品品牌
	ProductBrand *string `json:"product_brand,omitempty" xml:"product_brand,omitempty" require:"true"`
	// 商品来源
	ProductOrigin *int64 `json:"product_origin,omitempty" xml:"product_origin,omitempty" require:"true"`
	// 商品名称
	ProductName *string `json:"product_name,omitempty" xml:"product_name,omitempty" require:"true"`
	// 商品版本
	ProductVersion *int64 `json:"product_version,omitempty" xml:"product_version,omitempty" require:"true"`
	// 商品安装费用
	InstallPrice *int64 `json:"install_price,omitempty" xml:"install_price,omitempty"`
	// 实际库存
	RealStock *int64 `json:"real_stock,omitempty" xml:"real_stock,omitempty"`
	// 保证金
	DepositPrice *int64 `json:"deposit_price,omitempty" xml:"deposit_price,omitempty"`
	// 商品url
	ProductUrl *string `json:"product_url,omitempty" xml:"product_url,omitempty"`
	// 官网价
	ProductPrice *int64 `json:"product_price,omitempty" xml:"product_price,omitempty" require:"true"`
	// 商品预留字段
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
}

func (s SupplierProductItem) String() string {
	return tea.Prettify(s)
}

func (s SupplierProductItem) GoString() string {
	return s.String()
}

func (s *SupplierProductItem) SetSupplierName(v string) *SupplierProductItem {
	s.SupplierName = &v
	return s
}

func (s *SupplierProductItem) SetProductModel(v string) *SupplierProductItem {
	s.ProductModel = &v
	return s
}

func (s *SupplierProductItem) SetSupplierId(v string) *SupplierProductItem {
	s.SupplierId = &v
	return s
}

func (s *SupplierProductItem) SetProductId(v string) *SupplierProductItem {
	s.ProductId = &v
	return s
}

func (s *SupplierProductItem) SetMainClass(v string) *SupplierProductItem {
	s.MainClass = &v
	return s
}

func (s *SupplierProductItem) SetEstimatedShipment(v int64) *SupplierProductItem {
	s.EstimatedShipment = &v
	return s
}

func (s *SupplierProductItem) SetSubClass(v string) *SupplierProductItem {
	s.SubClass = &v
	return s
}

func (s *SupplierProductItem) SetProductDetailInfo(v string) *SupplierProductItem {
	s.ProductDetailInfo = &v
	return s
}

func (s *SupplierProductItem) SetProductBrand(v string) *SupplierProductItem {
	s.ProductBrand = &v
	return s
}

func (s *SupplierProductItem) SetProductOrigin(v int64) *SupplierProductItem {
	s.ProductOrigin = &v
	return s
}

func (s *SupplierProductItem) SetProductName(v string) *SupplierProductItem {
	s.ProductName = &v
	return s
}

func (s *SupplierProductItem) SetProductVersion(v int64) *SupplierProductItem {
	s.ProductVersion = &v
	return s
}

func (s *SupplierProductItem) SetInstallPrice(v int64) *SupplierProductItem {
	s.InstallPrice = &v
	return s
}

func (s *SupplierProductItem) SetRealStock(v int64) *SupplierProductItem {
	s.RealStock = &v
	return s
}

func (s *SupplierProductItem) SetDepositPrice(v int64) *SupplierProductItem {
	s.DepositPrice = &v
	return s
}

func (s *SupplierProductItem) SetProductUrl(v string) *SupplierProductItem {
	s.ProductUrl = &v
	return s
}

func (s *SupplierProductItem) SetProductPrice(v int64) *SupplierProductItem {
	s.ProductPrice = &v
	return s
}

func (s *SupplierProductItem) SetExtraInfo(v string) *SupplierProductItem {
	s.ExtraInfo = &v
	return s
}

// 阶段存证进度查询结果
type PhaseQueryResult struct {
	// 阶段ID
	PhaseId *string `json:"phase_id,omitempty" xml:"phase_id,omitempty" require:"true"`
	// 阶段存证的链上交易Hash，只有status为FINISH才会返回
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
	// 阶段存证状态
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 阶段注册成功时间戳
	RegisterTime *int64 `json:"register_time,omitempty" xml:"register_time,omitempty" require:"true"`
}

func (s PhaseQueryResult) String() string {
	return tea.Prettify(s)
}

func (s PhaseQueryResult) GoString() string {
	return s.String()
}

func (s *PhaseQueryResult) SetPhaseId(v string) *PhaseQueryResult {
	s.PhaseId = &v
	return s
}

func (s *PhaseQueryResult) SetTxHash(v string) *PhaseQueryResult {
	s.TxHash = &v
	return s
}

func (s *PhaseQueryResult) SetStatus(v string) *PhaseQueryResult {
	s.Status = &v
	return s
}

func (s *PhaseQueryResult) SetRegisterTime(v int64) *PhaseQueryResult {
	s.RegisterTime = &v
	return s
}

// 采购商品信息
type ApplySupplierOrderProductInput struct {
	// 采购商品id
	ProductId *string `json:"product_id,omitempty" xml:"product_id,omitempty" require:"true"`
	// 采购商品数量
	ProductNum *int64 `json:"product_num,omitempty" xml:"product_num,omitempty" require:"true"`
}

func (s ApplySupplierOrderProductInput) String() string {
	return tea.Prettify(s)
}

func (s ApplySupplierOrderProductInput) GoString() string {
	return s.String()
}

func (s *ApplySupplierOrderProductInput) SetProductId(v string) *ApplySupplierOrderProductInput {
	s.ProductId = &v
	return s
}

func (s *ApplySupplierOrderProductInput) SetProductNum(v int64) *ApplySupplierOrderProductInput {
	s.ProductNum = &v
	return s
}

// 智能合同机构账户创建申请信息
type ContractOrganizationApplication struct {
	// 证件号
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty" require:"true"`
	// 证件类型，默认CRED_ORG_USCC，详见机构证件类型说明 （https://antchain.antgroup.com/docs/2/424437#）
	IdType *string `json:"id_type,omitempty" xml:"id_type,omitempty" require:"true"`
	// 企业法人名称
	LegalPerson *string `json:"legal_person,omitempty" xml:"legal_person,omitempty"`
	// 企业法人证件号
	LegalPersonId *string `json:"legal_person_id,omitempty" xml:"legal_person_id,omitempty"`
	// 机构名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 机构唯一标识，可传入第三方平台的机构用户id等
	OrganizationId *string `json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// 机构子类型：ENTERPRISE（企业）、SELF-EMPLOYED（个体工商户）、SUBSIDIARY（分公司）、OTHERORG（其他机构）。若填入这些类型，将会进行相应参数校验，例如：企业类型要求进行企业四要素校验，企业证件号必须是91开头，并且企业类型在签署时会需要授权后才可进行签署；个体工商户要求证件号必须是92开头，其余类型无其他校验。不填入此参数不会进行校验。
	OrgType *string `json:"org_type,omitempty" xml:"org_type,omitempty"`
}

func (s ContractOrganizationApplication) String() string {
	return tea.Prettify(s)
}

func (s ContractOrganizationApplication) GoString() string {
	return s.String()
}

func (s *ContractOrganizationApplication) SetIdNumber(v string) *ContractOrganizationApplication {
	s.IdNumber = &v
	return s
}

func (s *ContractOrganizationApplication) SetIdType(v string) *ContractOrganizationApplication {
	s.IdType = &v
	return s
}

func (s *ContractOrganizationApplication) SetLegalPerson(v string) *ContractOrganizationApplication {
	s.LegalPerson = &v
	return s
}

func (s *ContractOrganizationApplication) SetLegalPersonId(v string) *ContractOrganizationApplication {
	s.LegalPersonId = &v
	return s
}

func (s *ContractOrganizationApplication) SetName(v string) *ContractOrganizationApplication {
	s.Name = &v
	return s
}

func (s *ContractOrganizationApplication) SetOrganizationId(v string) *ContractOrganizationApplication {
	s.OrganizationId = &v
	return s
}

func (s *ContractOrganizationApplication) SetOrgType(v string) *ContractOrganizationApplication {
	s.OrgType = &v
	return s
}

// 阶段存证结果
type PhaseCreateResult struct {
	// 阶段编号，与模板阶段编号保持一致，不同阶段阶段编号不一样，要与阶段存证内容保持一致
	PhaseNo *int64 `json:"phase_no,omitempty" xml:"phase_no,omitempty" require:"true"`
	// 阶段ID，阶段存证的唯一标记
	PhaseId *string `json:"phase_id,omitempty" xml:"phase_id,omitempty" require:"true"`
	// 业务方原始数据ID，方便与业务方进行数据核对使用，并且如果同一个阶段多次存证，则需要根据业务方原始数据ID识别不同的阶段存证响应
	OriginDataId *string `json:"origin_data_id,omitempty" xml:"origin_data_id,omitempty" require:"true"`
}

func (s PhaseCreateResult) String() string {
	return tea.Prettify(s)
}

func (s PhaseCreateResult) GoString() string {
	return s.String()
}

func (s *PhaseCreateResult) SetPhaseNo(v int64) *PhaseCreateResult {
	s.PhaseNo = &v
	return s
}

func (s *PhaseCreateResult) SetPhaseId(v string) *PhaseCreateResult {
	s.PhaseId = &v
	return s
}

func (s *PhaseCreateResult) SetOriginDataId(v string) *PhaseCreateResult {
	s.OriginDataId = &v
	return s
}

// 证据清单
type EvidentialCheckList struct {
	// 证据名称英文
	EvidentialNameEn *string `json:"evidential_name_en,omitempty" xml:"evidential_name_en,omitempty" require:"true"`
	// 文件名称
	OssFileName *string `json:"oss_file_name,omitempty" xml:"oss_file_name,omitempty" require:"true"`
	// 文件fileKey ，调用获取文件上传链接时对应的fileKey
	OssFileKey *string `json:"oss_file_key,omitempty" xml:"oss_file_key,omitempty" require:"true"`
	// 证据来源
	// BUSINESS_UPLOAD	业务传入
	// ADD_MANULLY	手动添加
	SourcesOfEvidence *string `json:"sources_of_evidence,omitempty" xml:"sources_of_evidence,omitempty" require:"true"`
	// 证据类型
	// BLOCKCHAIN_DEPOSIT	区块链存证
	// USER_UPLOAD	用户上传
	EvidenceType *string `json:"evidence_type,omitempty" xml:"evidence_type,omitempty" require:"true"`
	// 存证类型
	// TEXT	文本
	// FILE	文件
	DepositType *string `json:"deposit_type,omitempty" xml:"deposit_type,omitempty" require:"true"`
	// 存证哈希 当为区块链存证必填
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
	// 存证时间 当为区块链存证必填
	DepositTime *string `json:"deposit_time,omitempty" xml:"deposit_time,omitempty"`
}

func (s EvidentialCheckList) String() string {
	return tea.Prettify(s)
}

func (s EvidentialCheckList) GoString() string {
	return s.String()
}

func (s *EvidentialCheckList) SetEvidentialNameEn(v string) *EvidentialCheckList {
	s.EvidentialNameEn = &v
	return s
}

func (s *EvidentialCheckList) SetOssFileName(v string) *EvidentialCheckList {
	s.OssFileName = &v
	return s
}

func (s *EvidentialCheckList) SetOssFileKey(v string) *EvidentialCheckList {
	s.OssFileKey = &v
	return s
}

func (s *EvidentialCheckList) SetSourcesOfEvidence(v string) *EvidentialCheckList {
	s.SourcesOfEvidence = &v
	return s
}

func (s *EvidentialCheckList) SetEvidenceType(v string) *EvidentialCheckList {
	s.EvidenceType = &v
	return s
}

func (s *EvidentialCheckList) SetDepositType(v string) *EvidentialCheckList {
	s.DepositType = &v
	return s
}

func (s *EvidentialCheckList) SetTxHash(v string) *EvidentialCheckList {
	s.TxHash = &v
	return s
}

func (s *EvidentialCheckList) SetDepositTime(v string) *EvidentialCheckList {
	s.DepositTime = &v
	return s
}

// 见证流程签署结果数据
type WitnessSignResult struct {
	// 签名结果，外部用户签署返回
	SignResult *string `json:"sign_result,omitempty" xml:"sign_result,omitempty"`
	// 签署日志id，外部用户签署返回
	SignlogId *string `json:"signlog_id,omitempty" xml:"signlog_id,omitempty"`
	// 第三方文档id
	ThirdDocId *string `json:"third_doc_id,omitempty" xml:"third_doc_id,omitempty"`
}

func (s WitnessSignResult) String() string {
	return tea.Prettify(s)
}

func (s WitnessSignResult) GoString() string {
	return s.String()
}

func (s *WitnessSignResult) SetSignResult(v string) *WitnessSignResult {
	s.SignResult = &v
	return s
}

func (s *WitnessSignResult) SetSignlogId(v string) *WitnessSignResult {
	s.SignlogId = &v
	return s
}

func (s *WitnessSignResult) SetThirdDocId(v string) *WitnessSignResult {
	s.ThirdDocId = &v
	return s
}

// 核验请求时对应的存证元数据
type NotaryCheckMeta struct {
	// 对应的法院编号
	AgencyCode *string `json:"agency_code,omitempty" xml:"agency_code,omitempty"`
	// 哈希算法, notary_type 为 HASH 时此参数必填
	HashAlgorithm *string `json:"hash_algorithm,omitempty" xml:"hash_algorithm,omitempty"`
	// 存证内容
	NotaryContent *string `json:"notary_content,omitempty" xml:"notary_content,omitempty" require:"true"`
	// 交易哈希
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
	// 应用ID
	ApplicationCode *string `json:"application_code,omitempty" xml:"application_code,omitempty"`
}

func (s NotaryCheckMeta) String() string {
	return tea.Prettify(s)
}

func (s NotaryCheckMeta) GoString() string {
	return s.String()
}

func (s *NotaryCheckMeta) SetAgencyCode(v string) *NotaryCheckMeta {
	s.AgencyCode = &v
	return s
}

func (s *NotaryCheckMeta) SetHashAlgorithm(v string) *NotaryCheckMeta {
	s.HashAlgorithm = &v
	return s
}

func (s *NotaryCheckMeta) SetNotaryContent(v string) *NotaryCheckMeta {
	s.NotaryContent = &v
	return s
}

func (s *NotaryCheckMeta) SetTxHash(v string) *NotaryCheckMeta {
	s.TxHash = &v
	return s
}

func (s *NotaryCheckMeta) SetApplicationCode(v string) *NotaryCheckMeta {
	s.ApplicationCode = &v
	return s
}

// 电子合同存证代扣计划退款信息
type ContractNotaryDeductRefundInfo struct {
	// PAYERIDNUMBER
	PayerId *string `json:"payer_id,omitempty" xml:"payer_id,omitempty" require:"true"`
	// 退款金额，单位分
	Amount *int64 `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 代扣计划ID
	Order *string `json:"order,omitempty" xml:"order,omitempty" require:"true"`
	// 退款操作发起时间
	Timestamp *string `json:"timestamp,omitempty" xml:"timestamp,omitempty" require:"true"`
}

func (s ContractNotaryDeductRefundInfo) String() string {
	return tea.Prettify(s)
}

func (s ContractNotaryDeductRefundInfo) GoString() string {
	return s.String()
}

func (s *ContractNotaryDeductRefundInfo) SetPayerId(v string) *ContractNotaryDeductRefundInfo {
	s.PayerId = &v
	return s
}

func (s *ContractNotaryDeductRefundInfo) SetAmount(v int64) *ContractNotaryDeductRefundInfo {
	s.Amount = &v
	return s
}

func (s *ContractNotaryDeductRefundInfo) SetOrder(v string) *ContractNotaryDeductRefundInfo {
	s.Order = &v
	return s
}

func (s *ContractNotaryDeductRefundInfo) SetTimestamp(v string) *ContractNotaryDeductRefundInfo {
	s.Timestamp = &v
	return s
}

// 共享项目，资产端的采购平台回传的物流信息
type SupplierLogisticInfo struct {
	// 采购平台的物流单号
	LogisticOrderId *string `json:"logistic_order_id,omitempty" xml:"logistic_order_id,omitempty" require:"true"`
}

func (s SupplierLogisticInfo) String() string {
	return tea.Prettify(s)
}

func (s SupplierLogisticInfo) GoString() string {
	return s.String()
}

func (s *SupplierLogisticInfo) SetLogisticOrderId(v string) *SupplierLogisticInfo {
	s.LogisticOrderId = &v
	return s
}

// 人保扩展信息
type RenbaoExtInfo struct {
	// 银行区域代码，可网上查询各银行最新对应的区域代码，比如杭州的区域代码为：3301
	RecBankAreaCode *string `json:"rec_bank_area_code,omitempty" xml:"rec_bank_area_code,omitempty" require:"true" maxLength:"8"`
	// 投保人收款账号
	AccountNo *string `json:"account_no,omitempty" xml:"account_no,omitempty" require:"true" maxLength:"32"`
	// 完整银行名称，不需要具体到分行
	BankName *string `json:"bank_name,omitempty" xml:"bank_name,omitempty" require:"true" maxLength:"32"`
	// 投保人户名
	AccountName *string `json:"account_name,omitempty" xml:"account_name,omitempty" require:"true" maxLength:"64"`
	// 联行号
	Cnaps *string `json:"cnaps,omitempty" xml:"cnaps,omitempty" require:"true" maxLength:"16"`
	// 统一社会信用代码
	IdentifyNo *string `json:"identify_no,omitempty" xml:"identify_no,omitempty" require:"true" maxLength:"32"`
	// 银行代码
	BankCode *string `json:"bank_code,omitempty" xml:"bank_code,omitempty" require:"true" maxLength:"16"`
}

func (s RenbaoExtInfo) String() string {
	return tea.Prettify(s)
}

func (s RenbaoExtInfo) GoString() string {
	return s.String()
}

func (s *RenbaoExtInfo) SetRecBankAreaCode(v string) *RenbaoExtInfo {
	s.RecBankAreaCode = &v
	return s
}

func (s *RenbaoExtInfo) SetAccountNo(v string) *RenbaoExtInfo {
	s.AccountNo = &v
	return s
}

func (s *RenbaoExtInfo) SetBankName(v string) *RenbaoExtInfo {
	s.BankName = &v
	return s
}

func (s *RenbaoExtInfo) SetAccountName(v string) *RenbaoExtInfo {
	s.AccountName = &v
	return s
}

func (s *RenbaoExtInfo) SetCnaps(v string) *RenbaoExtInfo {
	s.Cnaps = &v
	return s
}

func (s *RenbaoExtInfo) SetIdentifyNo(v string) *RenbaoExtInfo {
	s.IdentifyNo = &v
	return s
}

func (s *RenbaoExtInfo) SetBankCode(v string) *RenbaoExtInfo {
	s.BankCode = &v
	return s
}

// 司法纠纷平台案件维权事件响应信息
type JudicialEventOperateInfo struct {
	// 响应类型:
	// 司法调解
	//   延期确认: DELAY_CONFIRM
	//   回款确认: CASH_CONFIRM
	//
	OperateType *string `json:"operate_type,omitempty" xml:"operate_type,omitempty" require:"true"`
	// 响应内容
	// 延期确认
	//   确认-CONFIRM
	//   否认-DENY
	// 回款确认:
	//   确认-CONFIRM
	//   有异议-DISSENT
	OperateOpinion *string `json:"operate_opinion,omitempty" xml:"operate_opinion,omitempty" require:"true"`
	// 当延期申请不同意,回款确认有异议时填写原因
	OperateReason *string `json:"operate_reason,omitempty" xml:"operate_reason,omitempty"`
	// 回款记录编号,回款确认时必填
	ReqBizNo *string `json:"req_biz_no,omitempty" xml:"req_biz_no,omitempty"`
}

func (s JudicialEventOperateInfo) String() string {
	return tea.Prettify(s)
}

func (s JudicialEventOperateInfo) GoString() string {
	return s.String()
}

func (s *JudicialEventOperateInfo) SetOperateType(v string) *JudicialEventOperateInfo {
	s.OperateType = &v
	return s
}

func (s *JudicialEventOperateInfo) SetOperateOpinion(v string) *JudicialEventOperateInfo {
	s.OperateOpinion = &v
	return s
}

func (s *JudicialEventOperateInfo) SetOperateReason(v string) *JudicialEventOperateInfo {
	s.OperateReason = &v
	return s
}

func (s *JudicialEventOperateInfo) SetReqBizNo(v string) *JudicialEventOperateInfo {
	s.ReqBizNo = &v
	return s
}

// 电子合同签署流程的配置信息
type ContractSignFlowConfig struct {
	// 回调通知地址 ,默认取项目配置通知地址
	NoticeDeveloperUrl *string `json:"notice_developer_url,omitempty" xml:"notice_developer_url,omitempty"`
	// 签署通知和审批通知的通知方式，传 "" 表示不需要通知，传"1"表示短信通知。短信功能需要联系售后开白名单才会生效。
	NoticeType *string `json:"notice_type,omitempty" xml:"notice_type,omitempty" require:"true"`
	// 签署成功或者流程结束后的默认重定向地址，默认签署完成停在当前页面
	RedirectUrl *string `json:"redirect_url,omitempty" xml:"redirect_url,omitempty"`
	// 【该字段已废弃】签署平台，逗号分割，1-开放服务h5，2-支付宝签 ，默认值1
	SignPlatform *string `json:"sign_platform,omitempty" xml:"sign_platform,omitempty"`
	// 签署失败时的跳转地址，如果不做单独配置，默认与redirect_url一致（配合twc.notary.contract.signflow.create接口使用）
	RedirectUrlOnFailure *string `json:"redirect_url_on_failure,omitempty" xml:"redirect_url_on_failure,omitempty"`
	// 是否允许自由签署，默认false（配合twc.notary.contract.signflow.create接口使用）
	FreeSignature *bool `json:"free_signature,omitempty" xml:"free_signature,omitempty"`
}

func (s ContractSignFlowConfig) String() string {
	return tea.Prettify(s)
}

func (s ContractSignFlowConfig) GoString() string {
	return s.String()
}

func (s *ContractSignFlowConfig) SetNoticeDeveloperUrl(v string) *ContractSignFlowConfig {
	s.NoticeDeveloperUrl = &v
	return s
}

func (s *ContractSignFlowConfig) SetNoticeType(v string) *ContractSignFlowConfig {
	s.NoticeType = &v
	return s
}

func (s *ContractSignFlowConfig) SetRedirectUrl(v string) *ContractSignFlowConfig {
	s.RedirectUrl = &v
	return s
}

func (s *ContractSignFlowConfig) SetSignPlatform(v string) *ContractSignFlowConfig {
	s.SignPlatform = &v
	return s
}

func (s *ContractSignFlowConfig) SetRedirectUrlOnFailure(v string) *ContractSignFlowConfig {
	s.RedirectUrlOnFailure = &v
	return s
}

func (s *ContractSignFlowConfig) SetFreeSignature(v bool) *ContractSignFlowConfig {
	s.FreeSignature = &v
	return s
}

// 融资租赁商品出租详细信息
type RentInfo struct {
	// 租金
	RentPrice *int64 `json:"rent_price,omitempty" xml:"rent_price,omitempty" require:"true"`
	// 租期
	RentTerm *int64 `json:"rent_term,omitempty" xml:"rent_term,omitempty" require:"true"`
	// 手续费
	Commission *int64 `json:"commission,omitempty" xml:"commission,omitempty" require:"true"`
	// 买断价
	BuyoutPrice *int64 `json:"buyout_price,omitempty" xml:"buyout_price,omitempty" require:"true"`
	// 留购价
	RetainedPrice *int64 `json:"retained_price,omitempty" xml:"retained_price,omitempty" require:"true"`
}

func (s RentInfo) String() string {
	return tea.Prettify(s)
}

func (s RentInfo) GoString() string {
	return s.String()
}

func (s *RentInfo) SetRentPrice(v int64) *RentInfo {
	s.RentPrice = &v
	return s
}

func (s *RentInfo) SetRentTerm(v int64) *RentInfo {
	s.RentTerm = &v
	return s
}

func (s *RentInfo) SetCommission(v int64) *RentInfo {
	s.Commission = &v
	return s
}

func (s *RentInfo) SetBuyoutPrice(v int64) *RentInfo {
	s.BuyoutPrice = &v
	return s
}

func (s *RentInfo) SetRetainedPrice(v int64) *RentInfo {
	s.RetainedPrice = &v
	return s
}

// 融资租赁清分信息
type LeaseClearingInfo struct {
	// 还款批次
	ReturnIndex *int64 `json:"return_index,omitempty" xml:"return_index,omitempty" require:"true"`
	// 清分状态
	ClearingState *int64 `json:"clearing_state,omitempty" xml:"clearing_state,omitempty" require:"true"`
	// 清分金额,精确到毫厘，即123400表示12.34元
	ClearingMoney *int64 `json:"clearing_money,omitempty" xml:"clearing_money,omitempty" require:"true"`
	// 开始清分时间
	StartTime *string `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 结束清分时间
	EndTime *string `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 清分单号
	ClearingOrderId *string `json:"clearing_order_id,omitempty" xml:"clearing_order_id,omitempty" require:"true"`
	// 清分收款账号
	ClearingAccount *string `json:"clearing_account,omitempty" xml:"clearing_account,omitempty" require:"true"`
	// 清分额外说明
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty" require:"true"`
}

func (s LeaseClearingInfo) String() string {
	return tea.Prettify(s)
}

func (s LeaseClearingInfo) GoString() string {
	return s.String()
}

func (s *LeaseClearingInfo) SetReturnIndex(v int64) *LeaseClearingInfo {
	s.ReturnIndex = &v
	return s
}

func (s *LeaseClearingInfo) SetClearingState(v int64) *LeaseClearingInfo {
	s.ClearingState = &v
	return s
}

func (s *LeaseClearingInfo) SetClearingMoney(v int64) *LeaseClearingInfo {
	s.ClearingMoney = &v
	return s
}

func (s *LeaseClearingInfo) SetStartTime(v string) *LeaseClearingInfo {
	s.StartTime = &v
	return s
}

func (s *LeaseClearingInfo) SetEndTime(v string) *LeaseClearingInfo {
	s.EndTime = &v
	return s
}

func (s *LeaseClearingInfo) SetClearingOrderId(v string) *LeaseClearingInfo {
	s.ClearingOrderId = &v
	return s
}

func (s *LeaseClearingInfo) SetClearingAccount(v string) *LeaseClearingInfo {
	s.ClearingAccount = &v
	return s
}

func (s *LeaseClearingInfo) SetMemo(v string) *LeaseClearingInfo {
	s.Memo = &v
	return s
}

// 实人信息
type BclCertifyInfo struct {
	// 认证id
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty"`
	// 认证url 如果status待认证,该字段非空,
	// 如果认证失败,这里的新的认证链接,支持重复认证
	CertifyUrl *string `json:"certify_url,omitempty" xml:"certify_url,omitempty"`
	// 认证描述
	ResultDesc *string `json:"result_desc,omitempty" xml:"result_desc,omitempty"`
	// 认证状态
	// 1.待认证：INIT
	// 2.认证成功：PASS
	// 3.认证失败：FAIL
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
}

func (s BclCertifyInfo) String() string {
	return tea.Prettify(s)
}

func (s BclCertifyInfo) GoString() string {
	return s.String()
}

func (s *BclCertifyInfo) SetCertifyId(v string) *BclCertifyInfo {
	s.CertifyId = &v
	return s
}

func (s *BclCertifyInfo) SetCertifyUrl(v string) *BclCertifyInfo {
	s.CertifyUrl = &v
	return s
}

func (s *BclCertifyInfo) SetResultDesc(v string) *BclCertifyInfo {
	s.ResultDesc = &v
	return s
}

func (s *BclCertifyInfo) SetStatus(v string) *BclCertifyInfo {
	s.Status = &v
	return s
}

// 合同流程信息
type BclContractFlowInfo struct {
	// 合同主题
	// 注：名称不支持以下9个字符：/ \ : * " < > | ？
	// 仅当使用合同服务时必填
	BusinessScene *string `json:"business_scene,omitempty" xml:"business_scene,omitempty" maxLength:"32"`
	// 流程中的签署文件信息
	// 本期只支持一个文件
	// 仅当使用合同服务时必填
	FileInfo []*BclContractFileInfo `json:"file_info,omitempty" xml:"file_info,omitempty" type:"Repeated"`
	// 签署失败时的跳转地址
	// 如果不做单独配置，默认与redirect_url一致
	RedirectUrlOnFailure *string `json:"redirect_url_on_failure,omitempty" xml:"redirect_url_on_failure,omitempty" maxLength:"512"`
	// 流程结束后的默认重定向地址
	// 默认签署完成停在当前页面
	RedirectUrl *string `json:"redirect_url,omitempty" xml:"redirect_url,omitempty" maxLength:"512"`
	// 签署平台，ALIPAY（支付宝小程序）或H5，默认H5
	SignPlatform *string `json:"sign_platform,omitempty" xml:"sign_platform,omitempty"`
	// 收款方的ID，调用创建收款方接口获得
	PayeeId *string `json:"payee_id,omitempty" xml:"payee_id,omitempty"`
	// 签署模式:
	// 模板签署:TEMPLATE_SIGN,使用同模板流程创建合同信息；
	// 原文签署:ORIGINAL_SIGN，使用原来的流程创建合同信息;
	// 未传值即为(原文签署:ORIGINAL_SIGN)
	SignMode *string `json:"sign_mode,omitempty" xml:"sign_mode,omitempty"`
}

func (s BclContractFlowInfo) String() string {
	return tea.Prettify(s)
}

func (s BclContractFlowInfo) GoString() string {
	return s.String()
}

func (s *BclContractFlowInfo) SetBusinessScene(v string) *BclContractFlowInfo {
	s.BusinessScene = &v
	return s
}

func (s *BclContractFlowInfo) SetFileInfo(v []*BclContractFileInfo) *BclContractFlowInfo {
	s.FileInfo = v
	return s
}

func (s *BclContractFlowInfo) SetRedirectUrlOnFailure(v string) *BclContractFlowInfo {
	s.RedirectUrlOnFailure = &v
	return s
}

func (s *BclContractFlowInfo) SetRedirectUrl(v string) *BclContractFlowInfo {
	s.RedirectUrl = &v
	return s
}

func (s *BclContractFlowInfo) SetSignPlatform(v string) *BclContractFlowInfo {
	s.SignPlatform = &v
	return s
}

func (s *BclContractFlowInfo) SetPayeeId(v string) *BclContractFlowInfo {
	s.PayeeId = &v
	return s
}

func (s *BclContractFlowInfo) SetSignMode(v string) *BclContractFlowInfo {
	s.SignMode = &v
	return s
}

// 阶段详情信息
type PhaseDetail struct {
	// 阶段id
	PhaseId *string `json:"phase_id,omitempty" xml:"phase_id,omitempty" require:"true"`
	// 阶段编号
	PhaseNo *int64 `json:"phase_no,omitempty" xml:"phase_no,omitempty" require:"true"`
	// 阶段存证时间
	RegisterTime *int64 `json:"register_time,omitempty" xml:"register_time,omitempty" require:"true"`
	// 阶段存证凭据
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
	// 模板字段类型，Hash/Structure，(Hash->哈希,Structure->结构化)
	DataType *string `json:"data_type,omitempty" xml:"data_type,omitempty" require:"true"`
	// 阶段存证内容
	// 如果模板数据类型定义是Hash(哈希)则返回存证时Hash
	// 如果定义是Structure(结构化)，则返回所有字段json对象的字符串Base64后的值
	NotaryContent *string `json:"notary_content,omitempty" xml:"notary_content,omitempty" require:"true"`
	// 模板字段类型为Structure时才有值，结构化数据里面英文key对应的中文名称关系，json格式，key为字段英文名，value为字段中文名称
	DataTypeKey *string `json:"data_type_key,omitempty" xml:"data_type_key,omitempty" require:"true"`
}

func (s PhaseDetail) String() string {
	return tea.Prettify(s)
}

func (s PhaseDetail) GoString() string {
	return s.String()
}

func (s *PhaseDetail) SetPhaseId(v string) *PhaseDetail {
	s.PhaseId = &v
	return s
}

func (s *PhaseDetail) SetPhaseNo(v int64) *PhaseDetail {
	s.PhaseNo = &v
	return s
}

func (s *PhaseDetail) SetRegisterTime(v int64) *PhaseDetail {
	s.RegisterTime = &v
	return s
}

func (s *PhaseDetail) SetTxHash(v string) *PhaseDetail {
	s.TxHash = &v
	return s
}

func (s *PhaseDetail) SetDataType(v string) *PhaseDetail {
	s.DataType = &v
	return s
}

func (s *PhaseDetail) SetNotaryContent(v string) *PhaseDetail {
	s.NotaryContent = &v
	return s
}

func (s *PhaseDetail) SetDataTypeKey(v string) *PhaseDetail {
	s.DataTypeKey = &v
	return s
}

// 企业四要素校验
type CompanyFourMetaInfo struct {
	// 企业证件名称
	CompanyCertName *string `json:"company_cert_name,omitempty" xml:"company_cert_name,omitempty" require:"true"`
	// 企业证件号码
	CompanyCertNo *string `json:"company_cert_no,omitempty" xml:"company_cert_no,omitempty" require:"true"`
	// 证件类型, 默认社会统一信用代码  NATIONAL_LEGAL_MERGE:统一社会信用代码，NATIONAL_LEGAL：营业执照号码
	CompanyCertType *string `json:"company_cert_type,omitempty" xml:"company_cert_type,omitempty"`
	// 法人证件名称
	LegalPersonCertName *string `json:"legal_person_cert_name,omitempty" xml:"legal_person_cert_name,omitempty" require:"true"`
	// 法人证件号码
	LegalPersonCertNo *string `json:"legal_person_cert_no,omitempty" xml:"legal_person_cert_no,omitempty" require:"true"`
	// 法人证件类型 RESIDENT：居民身份证号，PASSPORT：护照，MILITARY：军官证
	LegalPersonCertType *string `json:"legal_person_cert_type,omitempty" xml:"legal_person_cert_type,omitempty"`
}

func (s CompanyFourMetaInfo) String() string {
	return tea.Prettify(s)
}

func (s CompanyFourMetaInfo) GoString() string {
	return s.String()
}

func (s *CompanyFourMetaInfo) SetCompanyCertName(v string) *CompanyFourMetaInfo {
	s.CompanyCertName = &v
	return s
}

func (s *CompanyFourMetaInfo) SetCompanyCertNo(v string) *CompanyFourMetaInfo {
	s.CompanyCertNo = &v
	return s
}

func (s *CompanyFourMetaInfo) SetCompanyCertType(v string) *CompanyFourMetaInfo {
	s.CompanyCertType = &v
	return s
}

func (s *CompanyFourMetaInfo) SetLegalPersonCertName(v string) *CompanyFourMetaInfo {
	s.LegalPersonCertName = &v
	return s
}

func (s *CompanyFourMetaInfo) SetLegalPersonCertNo(v string) *CompanyFourMetaInfo {
	s.LegalPersonCertNo = &v
	return s
}

func (s *CompanyFourMetaInfo) SetLegalPersonCertType(v string) *CompanyFourMetaInfo {
	s.LegalPersonCertType = &v
	return s
}

// 案件进度查询返回结果
type MediationCaseDetailInfo struct {
	// 案件编码
	CaseNumber *string `json:"case_number,omitempty" xml:"case_number,omitempty" require:"true"`
	// 案号
	CaseCode *string `json:"case_code,omitempty" xml:"case_code,omitempty" require:"true"`
	// 案由
	CauseActionName *string `json:"cause_action_name,omitempty" xml:"cause_action_name,omitempty" require:"true"`
	// 案件状态
	CaseTatus *string `json:"case_tatus,omitempty" xml:"case_tatus,omitempty" require:"true"`
	// 调解平台
	MediationPlatform *string `json:"mediation_platform,omitempty" xml:"mediation_platform,omitempty" require:"true"`
	// 调解机构
	MediationOrg *string `json:"mediation_org,omitempty" xml:"mediation_org,omitempty" require:"true"`
	// 调解员
	Mediator *string `json:"mediator,omitempty" xml:"mediator,omitempty" require:"true"`
	// 申请时间
	ApplyTime *int64 `json:"apply_time,omitempty" xml:"apply_time,omitempty" require:"true"`
	// 调解结果
	MediationResult *string `json:"mediation_result,omitempty" xml:"mediation_result,omitempty" require:"true"`
	// 申请人意向金额
	AccuserIntentAmount *int64 `json:"accuser_intent_amount,omitempty" xml:"accuser_intent_amount,omitempty" require:"true"`
	// 被申请人意向金额
	AccusedIntentAmount *int64 `json:"accused_intent_amount,omitempty" xml:"accused_intent_amount,omitempty" require:"true"`
	// 和解金额
	MediationAmount *int64 `json:"mediation_amount,omitempty" xml:"mediation_amount,omitempty" require:"true"`
	// 已确认事实
	ConfirmFact *string `json:"confirm_fact,omitempty" xml:"confirm_fact,omitempty" require:"true"`
	// 调解协议（已达成调解协议或未达成原因）
	MediationAgreement *string `json:"mediation_agreement,omitempty" xml:"mediation_agreement,omitempty" require:"true"`
}

func (s MediationCaseDetailInfo) String() string {
	return tea.Prettify(s)
}

func (s MediationCaseDetailInfo) GoString() string {
	return s.String()
}

func (s *MediationCaseDetailInfo) SetCaseNumber(v string) *MediationCaseDetailInfo {
	s.CaseNumber = &v
	return s
}

func (s *MediationCaseDetailInfo) SetCaseCode(v string) *MediationCaseDetailInfo {
	s.CaseCode = &v
	return s
}

func (s *MediationCaseDetailInfo) SetCauseActionName(v string) *MediationCaseDetailInfo {
	s.CauseActionName = &v
	return s
}

func (s *MediationCaseDetailInfo) SetCaseTatus(v string) *MediationCaseDetailInfo {
	s.CaseTatus = &v
	return s
}

func (s *MediationCaseDetailInfo) SetMediationPlatform(v string) *MediationCaseDetailInfo {
	s.MediationPlatform = &v
	return s
}

func (s *MediationCaseDetailInfo) SetMediationOrg(v string) *MediationCaseDetailInfo {
	s.MediationOrg = &v
	return s
}

func (s *MediationCaseDetailInfo) SetMediator(v string) *MediationCaseDetailInfo {
	s.Mediator = &v
	return s
}

func (s *MediationCaseDetailInfo) SetApplyTime(v int64) *MediationCaseDetailInfo {
	s.ApplyTime = &v
	return s
}

func (s *MediationCaseDetailInfo) SetMediationResult(v string) *MediationCaseDetailInfo {
	s.MediationResult = &v
	return s
}

func (s *MediationCaseDetailInfo) SetAccuserIntentAmount(v int64) *MediationCaseDetailInfo {
	s.AccuserIntentAmount = &v
	return s
}

func (s *MediationCaseDetailInfo) SetAccusedIntentAmount(v int64) *MediationCaseDetailInfo {
	s.AccusedIntentAmount = &v
	return s
}

func (s *MediationCaseDetailInfo) SetMediationAmount(v int64) *MediationCaseDetailInfo {
	s.MediationAmount = &v
	return s
}

func (s *MediationCaseDetailInfo) SetConfirmFact(v string) *MediationCaseDetailInfo {
	s.ConfirmFact = &v
	return s
}

func (s *MediationCaseDetailInfo) SetMediationAgreement(v string) *MediationCaseDetailInfo {
	s.MediationAgreement = &v
	return s
}

// 答辩人对象
type PleaderObject struct {
	// 法人或自然人标识，法人为1，自然人为0
	PartyType *int64 `json:"party_type,omitempty" xml:"party_type,omitempty" require:"true"`
	// 自然人信息
	// 当partyType=1必填
	NaturalPerson *NaturalPerson `json:"natural_person,omitempty" xml:"natural_person,omitempty"`
	// 法人信息
	// 当partyType=0必填
	LegalPerson *LegalPerson `json:"legal_person,omitempty" xml:"legal_person,omitempty"`
}

func (s PleaderObject) String() string {
	return tea.Prettify(s)
}

func (s PleaderObject) GoString() string {
	return s.String()
}

func (s *PleaderObject) SetPartyType(v int64) *PleaderObject {
	s.PartyType = &v
	return s
}

func (s *PleaderObject) SetNaturalPerson(v *NaturalPerson) *PleaderObject {
	s.NaturalPerson = v
	return s
}

func (s *PleaderObject) SetLegalPerson(v *LegalPerson) *PleaderObject {
	s.LegalPerson = v
	return s
}

// 电子合同存证签署信息
type ContractNotarySignInfo struct {
	// 本阶段存证内容哈希值
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
	// 电子合同文件hash，可能一次性签署多个文件，不同文件的hash间用“,”分隔开
	ContractHash *string `json:"contract_hash,omitempty" xml:"contract_hash,omitempty" require:"true"`
	// 签署人ID
	Signatory *string `json:"signatory,omitempty" xml:"signatory,omitempty" require:"true"`
	// 存证阶段发生时间，UNIX时间戳(毫秒)
	Timestamp *string `json:"timestamp,omitempty" xml:"timestamp,omitempty" require:"true"`
	// 存证凭据，仅在批量核验时需要填写
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
	// 发起人名称
	IntiatorName *string `json:"intiator_name,omitempty" xml:"intiator_name,omitempty"`
	// 签署人名称,多个逗号隔开
	SignatorNames *string `json:"signator_names,omitempty" xml:"signator_names,omitempty"`
	// 详细文件哈希
	DetailInfoFileHash *string `json:"detail_info_file_hash,omitempty" xml:"detail_info_file_hash,omitempty"`
}

func (s ContractNotarySignInfo) String() string {
	return tea.Prettify(s)
}

func (s ContractNotarySignInfo) GoString() string {
	return s.String()
}

func (s *ContractNotarySignInfo) SetContent(v string) *ContractNotarySignInfo {
	s.Content = &v
	return s
}

func (s *ContractNotarySignInfo) SetContractHash(v string) *ContractNotarySignInfo {
	s.ContractHash = &v
	return s
}

func (s *ContractNotarySignInfo) SetSignatory(v string) *ContractNotarySignInfo {
	s.Signatory = &v
	return s
}

func (s *ContractNotarySignInfo) SetTimestamp(v string) *ContractNotarySignInfo {
	s.Timestamp = &v
	return s
}

func (s *ContractNotarySignInfo) SetTxHash(v string) *ContractNotarySignInfo {
	s.TxHash = &v
	return s
}

func (s *ContractNotarySignInfo) SetIntiatorName(v string) *ContractNotarySignInfo {
	s.IntiatorName = &v
	return s
}

func (s *ContractNotarySignInfo) SetSignatorNames(v string) *ContractNotarySignInfo {
	s.SignatorNames = &v
	return s
}

func (s *ContractNotarySignInfo) SetDetailInfoFileHash(v string) *ContractNotarySignInfo {
	s.DetailInfoFileHash = &v
	return s
}

// 存证信息说明
type NotaryInfo struct {
	// 存证内容的哈希值，默认采用SHA256算法
	ContentHash *string `json:"content_hash,omitempty" xml:"content_hash,omitempty" require:"true"`
	// 合作人（版权存证函专用），会展示在存证证明中
	Cooperation *string `json:"cooperation,omitempty" xml:"cooperation,omitempty"`
	// 作品名称类型（版权存证函使用），会展示在存证证明中
	CreationType *string `json:"creation_type,omitempty" xml:"creation_type,omitempty"`
	// 如果是文件存证，可填写文件名称
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty"`
	// 计算content_hash的哈希算法，目前只支持SHA256
	HashAlgorithm *string `json:"hash_algorithm,omitempty" xml:"hash_algorithm,omitempty"`
	// 申请平台名，用于在存证函上显示用名称
	Platform *string `json:"platform,omitempty" xml:"platform,omitempty"`
	// 文件容量，默认为0
	Size *int64 `json:"size,omitempty" xml:"size,omitempty"`
	// 发起存证成功后，返回的存证凭据
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
	// 存证事务ID
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
}

func (s NotaryInfo) String() string {
	return tea.Prettify(s)
}

func (s NotaryInfo) GoString() string {
	return s.String()
}

func (s *NotaryInfo) SetContentHash(v string) *NotaryInfo {
	s.ContentHash = &v
	return s
}

func (s *NotaryInfo) SetCooperation(v string) *NotaryInfo {
	s.Cooperation = &v
	return s
}

func (s *NotaryInfo) SetCreationType(v string) *NotaryInfo {
	s.CreationType = &v
	return s
}

func (s *NotaryInfo) SetFileName(v string) *NotaryInfo {
	s.FileName = &v
	return s
}

func (s *NotaryInfo) SetHashAlgorithm(v string) *NotaryInfo {
	s.HashAlgorithm = &v
	return s
}

func (s *NotaryInfo) SetPlatform(v string) *NotaryInfo {
	s.Platform = &v
	return s
}

func (s *NotaryInfo) SetSize(v int64) *NotaryInfo {
	s.Size = &v
	return s
}

func (s *NotaryInfo) SetTxHash(v string) *NotaryInfo {
	s.TxHash = &v
	return s
}

func (s *NotaryInfo) SetTransactionId(v string) *NotaryInfo {
	s.TransactionId = &v
	return s
}

// 司法纠纷平台企业信息通用结构体
type JudicialOrgInfo struct {
	// 企业名称
	OrgName *string `json:"org_name,omitempty" xml:"org_name,omitempty" require:"true"`
	// 企业或机构社会统一信用代码
	OrgCertNum *string `json:"org_cert_num,omitempty" xml:"org_cert_num,omitempty" require:"true"`
	// 企业联系电话
	OrgPhone *string `json:"org_phone,omitempty" xml:"org_phone,omitempty" require:"true"`
	// 企业联系邮箱
	OrgEmail *string `json:"org_email,omitempty" xml:"org_email,omitempty"`
	// 企业通讯地址
	OrgAddress *string `json:"org_address,omitempty" xml:"org_address,omitempty"`
	// 企业营业执照地址
	ResidenceAddress *string `json:"residence_address,omitempty" xml:"residence_address,omitempty"`
	// 企业或机构营业执照信息
	OrgBizLicenseInfo *JudicialFileInfo `json:"org_biz_license_info,omitempty" xml:"org_biz_license_info,omitempty"`
	// 企业法人信息
	OrgLegalPersonInfo *JudicialPersonInfo `json:"org_legal_person_info,omitempty" xml:"org_legal_person_info,omitempty"`
	// 企业或机构签章管理员信息
	OrgSignatureManagerPersonInfo *JudicialPersonInfo `json:"org_signature_manager_person_info,omitempty" xml:"org_signature_manager_person_info,omitempty"`
	// 企业或机构收款银行账户信息
	OrgBankInfo *JudicialBankInfo `json:"org_bank_info,omitempty" xml:"org_bank_info,omitempty"`
}

func (s JudicialOrgInfo) String() string {
	return tea.Prettify(s)
}

func (s JudicialOrgInfo) GoString() string {
	return s.String()
}

func (s *JudicialOrgInfo) SetOrgName(v string) *JudicialOrgInfo {
	s.OrgName = &v
	return s
}

func (s *JudicialOrgInfo) SetOrgCertNum(v string) *JudicialOrgInfo {
	s.OrgCertNum = &v
	return s
}

func (s *JudicialOrgInfo) SetOrgPhone(v string) *JudicialOrgInfo {
	s.OrgPhone = &v
	return s
}

func (s *JudicialOrgInfo) SetOrgEmail(v string) *JudicialOrgInfo {
	s.OrgEmail = &v
	return s
}

func (s *JudicialOrgInfo) SetOrgAddress(v string) *JudicialOrgInfo {
	s.OrgAddress = &v
	return s
}

func (s *JudicialOrgInfo) SetResidenceAddress(v string) *JudicialOrgInfo {
	s.ResidenceAddress = &v
	return s
}

func (s *JudicialOrgInfo) SetOrgBizLicenseInfo(v *JudicialFileInfo) *JudicialOrgInfo {
	s.OrgBizLicenseInfo = v
	return s
}

func (s *JudicialOrgInfo) SetOrgLegalPersonInfo(v *JudicialPersonInfo) *JudicialOrgInfo {
	s.OrgLegalPersonInfo = v
	return s
}

func (s *JudicialOrgInfo) SetOrgSignatureManagerPersonInfo(v *JudicialPersonInfo) *JudicialOrgInfo {
	s.OrgSignatureManagerPersonInfo = v
	return s
}

func (s *JudicialOrgInfo) SetOrgBankInfo(v *JudicialBankInfo) *JudicialOrgInfo {
	s.OrgBankInfo = v
	return s
}

// 合同存证信息
type ContractNotaryInfo struct {
	// 存证地址
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
	// 存证相关联的文档ID
	DocId *string `json:"doc_id,omitempty" xml:"doc_id,omitempty"`
	// 存证的内容哈希值
	ContentHash *string `json:"content_hash,omitempty" xml:"content_hash,omitempty"`
	// 存证事务ID
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
}

func (s ContractNotaryInfo) String() string {
	return tea.Prettify(s)
}

func (s ContractNotaryInfo) GoString() string {
	return s.String()
}

func (s *ContractNotaryInfo) SetTxHash(v string) *ContractNotaryInfo {
	s.TxHash = &v
	return s
}

func (s *ContractNotaryInfo) SetDocId(v string) *ContractNotaryInfo {
	s.DocId = &v
	return s
}

func (s *ContractNotaryInfo) SetContentHash(v string) *ContractNotaryInfo {
	s.ContentHash = &v
	return s
}

func (s *ContractNotaryInfo) SetTransactionId(v string) *ContractNotaryInfo {
	s.TransactionId = &v
	return s
}

// 个人信息
type PersonInfo struct {
	// 个人证件名称
	CertName *string `json:"cert_name,omitempty" xml:"cert_name,omitempty" require:"true"`
	// 个人证件号码
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 证件类型, 默认身份证 RESIDENT：居民身份证号，PASSPORT：护照，MILITARY：军官证
	CertType *string `json:"cert_type,omitempty" xml:"cert_type,omitempty"`
}

func (s PersonInfo) String() string {
	return tea.Prettify(s)
}

func (s PersonInfo) GoString() string {
	return s.String()
}

func (s *PersonInfo) SetCertName(v string) *PersonInfo {
	s.CertName = &v
	return s
}

func (s *PersonInfo) SetCertNo(v string) *PersonInfo {
	s.CertNo = &v
	return s
}

func (s *PersonInfo) SetCertType(v string) *PersonInfo {
	s.CertType = &v
	return s
}

// 共享项目，资产端的采购平台回传的订单商品信息
type SupplierOrderProductInfo struct {
	// 商品id
	ProductId *string `json:"product_id,omitempty" xml:"product_id,omitempty" require:"true"`
	// 商品采购单价，单位：毫厘
	ProductPrice *int64 `json:"product_price,omitempty" xml:"product_price,omitempty" require:"true"`
	// 商品的sn信息
	SnList []*string `json:"sn_list,omitempty" xml:"sn_list,omitempty" require:"true" type:"Repeated"`
}

func (s SupplierOrderProductInfo) String() string {
	return tea.Prettify(s)
}

func (s SupplierOrderProductInfo) GoString() string {
	return s.String()
}

func (s *SupplierOrderProductInfo) SetProductId(v string) *SupplierOrderProductInfo {
	s.ProductId = &v
	return s
}

func (s *SupplierOrderProductInfo) SetProductPrice(v int64) *SupplierOrderProductInfo {
	s.ProductPrice = &v
	return s
}

func (s *SupplierOrderProductInfo) SetSnList(v []*string) *SupplierOrderProductInfo {
	s.SnList = v
	return s
}

// 租赁订单信息
type BclOrderInfo struct {
	// 订单外部id,商户自己定义的订单id
	OrderOuterId *string `json:"order_outer_id,omitempty" xml:"order_outer_id,omitempty" require:"true"`
	// 订单创建时间
	OrderCreateTime *string `json:"order_create_time,omitempty" xml:"order_create_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// DUE_BUYOUT 到期买断
	// DUE_RETURN 到期归还
	DueMode *string `json:"due_mode,omitempty" xml:"due_mode,omitempty" require:"true"`
	// 订单总金额 单位分
	TotalMoney *int64 `json:"total_money,omitempty" xml:"total_money,omitempty" require:"true"`
	// 到期买断价  单位分，
	// 到期金额，若为买断形式传买断金额，否则传到期归还金额
	BuyOutPrice *int64 `json:"buy_out_price,omitempty" xml:"buy_out_price,omitempty"`
	// 芝麻信用订单免押金额 单位分
	DepositFree *int64 `json:"deposit_free,omitempty" xml:"deposit_free,omitempty"`
	// 芝麻信用 实际预授权金额 单位分
	AcutalPreAuthFree *int64 `json:"acutal_pre_auth_free,omitempty" xml:"acutal_pre_auth_free,omitempty"`
	// 网商直付通模式的代扣协议号
	MybankAgreementNo *string `json:"mybank_agreement_no,omitempty" xml:"mybank_agreement_no,omitempty"`
	// 直付通代扣受理订单号
	MybankAgreementOrderId *string `json:"mybank_agreement_order_id,omitempty" xml:"mybank_agreement_order_id,omitempty"`
	// -网商代扣：MY_BANK_PROXY_WITHHOLDING
	// -合同代扣：CONTRACT_PROXY_WITHHOLDING
	OrderWithholdType *string `json:"order_withhold_type,omitempty" xml:"order_withhold_type,omitempty" require:"true"`
	// 首付款金额 单位分
	DownPayment *int64 `json:"down_payment,omitempty" xml:"down_payment,omitempty"`
	// 商品列表
	ProductInfos []*BclOrderProductInfo `json:"product_infos,omitempty" xml:"product_infos,omitempty" require:"true" type:"Repeated"`
	// 物流方式： POST 邮寄 OFFLINE 线下自取
	LogisticType *string `json:"logistic_type,omitempty" xml:"logistic_type,omitempty" require:"true"`
	// 订单状态
	// 已创建 CREATED
	// 待发起 PRE_SUBMIT
	// 已发起 SUBMIT
	// 履约中 PERFORMING
	// 履约完成 PERFORMED
	// 订单完结 ORDER_FINISH
	// 风控失败 RISK_FAIL
	// 核身失败 IDENTITY_NOT_MATCH
	// 网商订单核验失败 MY_BANK_VERIFY_FAIL
	// 实人中 PERSON_FACE_VERIFY
	// 实人认证失败 PERSON_FACE_VERIFY_FAIL
	// 订单异常 ORDER_ERROR
	//
	//
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 订单状态失败的描述
	StatusRemark *string `json:"status_remark,omitempty" xml:"status_remark,omitempty"`
	// 承租方用户信息
	UserInfo *BclUserInfo `json:"user_info,omitempty" xml:"user_info,omitempty" require:"true"`
}

func (s BclOrderInfo) String() string {
	return tea.Prettify(s)
}

func (s BclOrderInfo) GoString() string {
	return s.String()
}

func (s *BclOrderInfo) SetOrderOuterId(v string) *BclOrderInfo {
	s.OrderOuterId = &v
	return s
}

func (s *BclOrderInfo) SetOrderCreateTime(v string) *BclOrderInfo {
	s.OrderCreateTime = &v
	return s
}

func (s *BclOrderInfo) SetDueMode(v string) *BclOrderInfo {
	s.DueMode = &v
	return s
}

func (s *BclOrderInfo) SetTotalMoney(v int64) *BclOrderInfo {
	s.TotalMoney = &v
	return s
}

func (s *BclOrderInfo) SetBuyOutPrice(v int64) *BclOrderInfo {
	s.BuyOutPrice = &v
	return s
}

func (s *BclOrderInfo) SetDepositFree(v int64) *BclOrderInfo {
	s.DepositFree = &v
	return s
}

func (s *BclOrderInfo) SetAcutalPreAuthFree(v int64) *BclOrderInfo {
	s.AcutalPreAuthFree = &v
	return s
}

func (s *BclOrderInfo) SetMybankAgreementNo(v string) *BclOrderInfo {
	s.MybankAgreementNo = &v
	return s
}

func (s *BclOrderInfo) SetMybankAgreementOrderId(v string) *BclOrderInfo {
	s.MybankAgreementOrderId = &v
	return s
}

func (s *BclOrderInfo) SetOrderWithholdType(v string) *BclOrderInfo {
	s.OrderWithholdType = &v
	return s
}

func (s *BclOrderInfo) SetDownPayment(v int64) *BclOrderInfo {
	s.DownPayment = &v
	return s
}

func (s *BclOrderInfo) SetProductInfos(v []*BclOrderProductInfo) *BclOrderInfo {
	s.ProductInfos = v
	return s
}

func (s *BclOrderInfo) SetLogisticType(v string) *BclOrderInfo {
	s.LogisticType = &v
	return s
}

func (s *BclOrderInfo) SetStatus(v string) *BclOrderInfo {
	s.Status = &v
	return s
}

func (s *BclOrderInfo) SetStatusRemark(v string) *BclOrderInfo {
	s.StatusRemark = &v
	return s
}

func (s *BclOrderInfo) SetUserInfo(v *BclUserInfo) *BclOrderInfo {
	s.UserInfo = v
	return s
}

// 电子合同文档
type ContractDoc struct {
	// 上传的电子合同文档是否被加密过，0-未被加密，1-被加密过，默认0
	Encryption *int64 `json:"encryption,omitempty" xml:"encryption,omitempty"`
	// 电子合同文档的ID
	FileId *string `json:"file_id,omitempty" xml:"file_id,omitempty" require:"true"`
	// 电子合同文档名称，默认文件名称
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty"`
	// 电子合同文档密码, 如果encryption值为1, 文档密码不能为空，默认没有密码
	FilePassword *string `json:"file_password,omitempty" xml:"file_password,omitempty"`
}

func (s ContractDoc) String() string {
	return tea.Prettify(s)
}

func (s ContractDoc) GoString() string {
	return s.String()
}

func (s *ContractDoc) SetEncryption(v int64) *ContractDoc {
	s.Encryption = &v
	return s
}

func (s *ContractDoc) SetFileId(v string) *ContractDoc {
	s.FileId = &v
	return s
}

func (s *ContractDoc) SetFileName(v string) *ContractDoc {
	s.FileName = &v
	return s
}

func (s *ContractDoc) SetFilePassword(v string) *ContractDoc {
	s.FilePassword = &v
	return s
}

// 合同印章
type ContractSeal struct {
	// 印章别名
	Alias *string `json:"alias,omitempty" xml:"alias,omitempty"`
	// 印章创建时间
	CreateDate *int64 `json:"create_date,omitempty" xml:"create_date,omitempty"`
	// 默认印章标识
	DefaultFlag *bool `json:"default_flag,omitempty" xml:"default_flag,omitempty"`
	// 印章fileKey
	FileKey *string `json:"file_key,omitempty" xml:"file_key,omitempty"`
	// 印章高度
	Height *int64 `json:"height,omitempty" xml:"height,omitempty"`
	// 印章宽度
	Width *int64 `json:"width,omitempty" xml:"width,omitempty"`
	// 印章id
	SealId *string `json:"seal_id,omitempty" xml:"seal_id,omitempty"`
	// 印章类型，1-机构模板章，2-个人模板章，3-自定义印章，4-手绘章
	SealType *int64 `json:"seal_type,omitempty" xml:"seal_type,omitempty"`
	// 印章下载地址, 有效时间1小时
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
	// 印章业务类型，CANCELLATION-作废章，COMMON-其它
	SealBizType *string `json:"seal_biz_type,omitempty" xml:"seal_biz_type,omitempty"`
}

func (s ContractSeal) String() string {
	return tea.Prettify(s)
}

func (s ContractSeal) GoString() string {
	return s.String()
}

func (s *ContractSeal) SetAlias(v string) *ContractSeal {
	s.Alias = &v
	return s
}

func (s *ContractSeal) SetCreateDate(v int64) *ContractSeal {
	s.CreateDate = &v
	return s
}

func (s *ContractSeal) SetDefaultFlag(v bool) *ContractSeal {
	s.DefaultFlag = &v
	return s
}

func (s *ContractSeal) SetFileKey(v string) *ContractSeal {
	s.FileKey = &v
	return s
}

func (s *ContractSeal) SetHeight(v int64) *ContractSeal {
	s.Height = &v
	return s
}

func (s *ContractSeal) SetWidth(v int64) *ContractSeal {
	s.Width = &v
	return s
}

func (s *ContractSeal) SetSealId(v string) *ContractSeal {
	s.SealId = &v
	return s
}

func (s *ContractSeal) SetSealType(v int64) *ContractSeal {
	s.SealType = &v
	return s
}

func (s *ContractSeal) SetUrl(v string) *ContractSeal {
	s.Url = &v
	return s
}

func (s *ContractSeal) SetSealBizType(v string) *ContractSeal {
	s.SealBizType = &v
	return s
}

// 智能合同个人账户创建申请信息
type ContractAccountApplication struct {
	// 邮箱地址，默认空
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// 证件号
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty" require:"true"`
	// 目前仅支持CRED_PSN_CH_IDCARD，即身份证号码
	IdType *string `json:"id_type,omitempty" xml:"id_type,omitempty" require:"true"`
	// 手机号码，默认空
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty"`
	// 姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 用户唯一标识，可传入第三方平台的个人用户id等
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
}

func (s ContractAccountApplication) String() string {
	return tea.Prettify(s)
}

func (s ContractAccountApplication) GoString() string {
	return s.String()
}

func (s *ContractAccountApplication) SetEmail(v string) *ContractAccountApplication {
	s.Email = &v
	return s
}

func (s *ContractAccountApplication) SetIdNumber(v string) *ContractAccountApplication {
	s.IdNumber = &v
	return s
}

func (s *ContractAccountApplication) SetIdType(v string) *ContractAccountApplication {
	s.IdType = &v
	return s
}

func (s *ContractAccountApplication) SetMobile(v string) *ContractAccountApplication {
	s.Mobile = &v
	return s
}

func (s *ContractAccountApplication) SetName(v string) *ContractAccountApplication {
	s.Name = &v
	return s
}

func (s *ContractAccountApplication) SetUserId(v string) *ContractAccountApplication {
	s.UserId = &v
	return s
}

// 签署区列表数据
type ContractPlatformSignFieldApplication struct {
	// 文件file id
	FileId *string `json:"file_id,omitempty" xml:"file_id,omitempty" require:"true"`
	// 签署顺序，默认1,且不小于1，顺序越小越先处理
	Order *int64 `json:"order,omitempty" xml:"order,omitempty"`
	// 印章id， 仅限企业公章，暂不支持指定企业法定代表人印章 ，如不传，则采用账号下的默认印章
	SealId *string `json:"seal_id,omitempty" xml:"seal_id,omitempty"`
	// 第三方业务流水号id，保证相同签署人、相同签约主体、相同签署顺序的任务，对应的第三方业务流水id唯一，默认空
	ThirdOrderNo *string `json:"third_order_no,omitempty" xml:"third_order_no,omitempty"`
	// 页码信息，当签署区signType为2时, 页码可以_-_分割, 其他情况只能是数字
	PosPage *string `json:"pos_page,omitempty" xml:"pos_page,omitempty" require:"true"`
	// x坐标，默认空
	PosX *string `json:"pos_x,omitempty" xml:"pos_x,omitempty"`
	// y坐标
	PosY *string `json:"pos_y,omitempty" xml:"pos_y,omitempty" require:"true"`
	// 签署区宽，默认印章宽度
	Width *string `json:"width,omitempty" xml:"width,omitempty"`
	// 是否添加签署时间戳， 默认不添加，默认格式 yyyy-MM-dd HH : mm : ss
	AddSignTime *bool `json:"add_sign_time,omitempty" xml:"add_sign_time,omitempty"`
	// 签署类型， 1-单页签署，2-骑缝签署，默认1
	SignType *int64 `json:"sign_type,omitempty" xml:"sign_type,omitempty"`
}

func (s ContractPlatformSignFieldApplication) String() string {
	return tea.Prettify(s)
}

func (s ContractPlatformSignFieldApplication) GoString() string {
	return s.String()
}

func (s *ContractPlatformSignFieldApplication) SetFileId(v string) *ContractPlatformSignFieldApplication {
	s.FileId = &v
	return s
}

func (s *ContractPlatformSignFieldApplication) SetOrder(v int64) *ContractPlatformSignFieldApplication {
	s.Order = &v
	return s
}

func (s *ContractPlatformSignFieldApplication) SetSealId(v string) *ContractPlatformSignFieldApplication {
	s.SealId = &v
	return s
}

func (s *ContractPlatformSignFieldApplication) SetThirdOrderNo(v string) *ContractPlatformSignFieldApplication {
	s.ThirdOrderNo = &v
	return s
}

func (s *ContractPlatformSignFieldApplication) SetPosPage(v string) *ContractPlatformSignFieldApplication {
	s.PosPage = &v
	return s
}

func (s *ContractPlatformSignFieldApplication) SetPosX(v string) *ContractPlatformSignFieldApplication {
	s.PosX = &v
	return s
}

func (s *ContractPlatformSignFieldApplication) SetPosY(v string) *ContractPlatformSignFieldApplication {
	s.PosY = &v
	return s
}

func (s *ContractPlatformSignFieldApplication) SetWidth(v string) *ContractPlatformSignFieldApplication {
	s.Width = &v
	return s
}

func (s *ContractPlatformSignFieldApplication) SetAddSignTime(v bool) *ContractPlatformSignFieldApplication {
	s.AddSignTime = &v
	return s
}

func (s *ContractPlatformSignFieldApplication) SetSignType(v int64) *ContractPlatformSignFieldApplication {
	s.SignType = &v
	return s
}

// 租赁业务存证信息记录
type LeaseNotaryRecord struct {
	// 存证阶段
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 交易哈希，存证记录唯一标识
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
}

func (s LeaseNotaryRecord) String() string {
	return tea.Prettify(s)
}

func (s LeaseNotaryRecord) GoString() string {
	return s.String()
}

func (s *LeaseNotaryRecord) SetPhase(v string) *LeaseNotaryRecord {
	s.Phase = &v
	return s
}

func (s *LeaseNotaryRecord) SetTxHash(v string) *LeaseNotaryRecord {
	s.TxHash = &v
	return s
}

// 证据要素
type EvidentialElement struct {
	// 订单信息
	OrderInfo *OrderInfo `json:"order_info,omitempty" xml:"order_info,omitempty" require:"true"`
	// 承诺信息
	CommitmentInfo *CommitmentInfo `json:"commitment_info,omitempty" xml:"commitment_info,omitempty" require:"true"`
	// 物流信息
	LogisticsInfo *LogisticsInfo `json:"logistics_info,omitempty" xml:"logistics_info,omitempty" require:"true"`
	// 履约信息
	PerformanceInfo *PerformanceInfo `json:"performance_info,omitempty" xml:"performance_info,omitempty" require:"true"`
}

func (s EvidentialElement) String() string {
	return tea.Prettify(s)
}

func (s EvidentialElement) GoString() string {
	return s.String()
}

func (s *EvidentialElement) SetOrderInfo(v *OrderInfo) *EvidentialElement {
	s.OrderInfo = v
	return s
}

func (s *EvidentialElement) SetCommitmentInfo(v *CommitmentInfo) *EvidentialElement {
	s.CommitmentInfo = v
	return s
}

func (s *EvidentialElement) SetLogisticsInfo(v *LogisticsInfo) *EvidentialElement {
	s.LogisticsInfo = v
	return s
}

func (s *EvidentialElement) SetPerformanceInfo(v *PerformanceInfo) *EvidentialElement {
	s.PerformanceInfo = v
	return s
}

// 创建电子合同手动签署盖章区时的申请信息
type ContractHandSignFieldApplication struct {
	// 签署操作人个人账号标识，即操作本次签署的个人
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 电子合同文件ID
	FileId *string `json:"file_id,omitempty" xml:"file_id,omitempty" require:"true"`
	// 签署区顺序，默认1,且不小于1，顺序越小越先处理
	Order *int64 `json:"order,omitempty" xml:"order,omitempty"`
	// 页码信息：当签署区signType为2时, 页码可以_-_分割, 例如1到15页，填"1-15"； 其他情况只能是数字；不指定xy坐标签署区可不填写
	PosPage *string `json:"pos_page,omitempty" xml:"pos_page,omitempty"`
	// x坐标，页面签章必填，骑缝签章不填写
	PosX *string `json:"pos_x,omitempty" xml:"pos_x,omitempty"`
	// y坐标
	PosY *string `json:"pos_y,omitempty" xml:"pos_y,omitempty"`
	// 印章id
	SealId *string `json:"seal_id,omitempty" xml:"seal_id,omitempty"`
	// 是否需要添加签署日期，0-禁止 1-必须 ，默认0
	SignDateBeanType *int64 `json:"sign_date_bean_type,omitempty" xml:"sign_date_bean_type,omitempty"`
	// 签章日期字体大小,默认12
	SignDateFontSize *int64 `json:"sign_date_font_size,omitempty" xml:"sign_date_font_size,omitempty"`
	// 签章日期格式，yyyy年MM月dd日
	SignDateFormat *string `json:"sign_date_format,omitempty" xml:"sign_date_format,omitempty"`
	// 页码信息，当signDateBeanType为1时，代表签署的印章必须展示签署日期，默认放在印章正下方，签署人可拖拽日期到当前页面的其他位置，如果发起方指定签署位置的同时，需要同时指定日期盖章位置，则需传入日期盖章页码（与印章页码相同），在传入X\Y坐标即可。
	SignDatePosPage *int64 `json:"sign_date_pos_page,omitempty" xml:"sign_date_pos_page,omitempty"`
	// 签章日期x坐标，默认0
	SignDatePosX *string `json:"sign_date_pos_x,omitempty" xml:"sign_date_pos_x,omitempty"`
	// 签章日期y坐标，默认0
	SignDatePosY *string `json:"sign_date_pos_y,omitempty" xml:"sign_date_pos_y,omitempty"`
	// 签署类型，1-单页签署，2-骑缝签署，默认1
	SignType *int64 `json:"sign_type,omitempty" xml:"sign_type,omitempty"`
	// 第三方业务流水号id，保证相同签署人、相同签约主体、相同签署顺序的任务，对应的第三方业务流水id唯一，默认空
	ThirdOrderNo *string `json:"third_order_no,omitempty" xml:"third_order_no,omitempty"`
	// 签署区宽，默认印章宽度
	Width *string `json:"width,omitempty" xml:"width,omitempty"`
	// 印章ids，只支持企业用户进行印章ID列表的设置；用于手动签署时，指定企业印章进行展示，实现手动选择印章进行签署。
	SealIds []*string `json:"seal_ids,omitempty" xml:"seal_ids,omitempty" type:"Repeated"`
	// 签署区预设xy坐标类型，0：不指定X/Y坐标 1：指定X/Y坐标 默认：指定X/Y坐标 ; 签署区设置时可以不指定XY坐标，签署方在签署时拖拽确定最终签署区域，支持在页面任何区域拖拽，个人和企业签署用印都支持
	SignFieldType *int64 `json:"sign_field_type,omitempty" xml:"sign_field_type,omitempty"`
}

func (s ContractHandSignFieldApplication) String() string {
	return tea.Prettify(s)
}

func (s ContractHandSignFieldApplication) GoString() string {
	return s.String()
}

func (s *ContractHandSignFieldApplication) SetAccountId(v string) *ContractHandSignFieldApplication {
	s.AccountId = &v
	return s
}

func (s *ContractHandSignFieldApplication) SetFileId(v string) *ContractHandSignFieldApplication {
	s.FileId = &v
	return s
}

func (s *ContractHandSignFieldApplication) SetOrder(v int64) *ContractHandSignFieldApplication {
	s.Order = &v
	return s
}

func (s *ContractHandSignFieldApplication) SetPosPage(v string) *ContractHandSignFieldApplication {
	s.PosPage = &v
	return s
}

func (s *ContractHandSignFieldApplication) SetPosX(v string) *ContractHandSignFieldApplication {
	s.PosX = &v
	return s
}

func (s *ContractHandSignFieldApplication) SetPosY(v string) *ContractHandSignFieldApplication {
	s.PosY = &v
	return s
}

func (s *ContractHandSignFieldApplication) SetSealId(v string) *ContractHandSignFieldApplication {
	s.SealId = &v
	return s
}

func (s *ContractHandSignFieldApplication) SetSignDateBeanType(v int64) *ContractHandSignFieldApplication {
	s.SignDateBeanType = &v
	return s
}

func (s *ContractHandSignFieldApplication) SetSignDateFontSize(v int64) *ContractHandSignFieldApplication {
	s.SignDateFontSize = &v
	return s
}

func (s *ContractHandSignFieldApplication) SetSignDateFormat(v string) *ContractHandSignFieldApplication {
	s.SignDateFormat = &v
	return s
}

func (s *ContractHandSignFieldApplication) SetSignDatePosPage(v int64) *ContractHandSignFieldApplication {
	s.SignDatePosPage = &v
	return s
}

func (s *ContractHandSignFieldApplication) SetSignDatePosX(v string) *ContractHandSignFieldApplication {
	s.SignDatePosX = &v
	return s
}

func (s *ContractHandSignFieldApplication) SetSignDatePosY(v string) *ContractHandSignFieldApplication {
	s.SignDatePosY = &v
	return s
}

func (s *ContractHandSignFieldApplication) SetSignType(v int64) *ContractHandSignFieldApplication {
	s.SignType = &v
	return s
}

func (s *ContractHandSignFieldApplication) SetThirdOrderNo(v string) *ContractHandSignFieldApplication {
	s.ThirdOrderNo = &v
	return s
}

func (s *ContractHandSignFieldApplication) SetWidth(v string) *ContractHandSignFieldApplication {
	s.Width = &v
	return s
}

func (s *ContractHandSignFieldApplication) SetSealIds(v []*string) *ContractHandSignFieldApplication {
	s.SealIds = v
	return s
}

func (s *ContractHandSignFieldApplication) SetSignFieldType(v int64) *ContractHandSignFieldApplication {
	s.SignFieldType = &v
	return s
}

// 再融资订单信息
type RefinanceOrderInfoResponse struct {
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty" require:"true"`
}

func (s RefinanceOrderInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s RefinanceOrderInfoResponse) GoString() string {
	return s.String()
}

func (s *RefinanceOrderInfoResponse) SetOrderId(v string) *RefinanceOrderInfoResponse {
	s.OrderId = &v
	return s
}

func (s *RefinanceOrderInfoResponse) SetApplicationId(v string) *RefinanceOrderInfoResponse {
	s.ApplicationId = &v
	return s
}

// 供应商对应的产品详细信息
type SupplierProductInfo struct {
	// 产品额外信息
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// 产品id
	ProductId *string `json:"product_id,omitempty" xml:"product_id,omitempty" require:"true"`
	// 电子商品唯一标识码
	ProductImeiId *string `json:"product_imei_id,omitempty" xml:"product_imei_id,omitempty" require:"true"`
	// 产品名称
	ProductName *string `json:"product_name,omitempty" xml:"product_name,omitempty" require:"true" maxLength:"50" minLength:"1"`
	// 采购产品的个数
	ProductNumber *int64 `json:"product_number,omitempty" xml:"product_number,omitempty" require:"true"`
	// 采购产品的价格，精确到毫厘，如12.34元表示为123400
	ProductPrice *int64 `json:"product_price,omitempty" xml:"product_price,omitempty" require:"true"`
	// 产品版本
	SupplierVersion *string `json:"supplier_version,omitempty" xml:"supplier_version,omitempty"`
}

func (s SupplierProductInfo) String() string {
	return tea.Prettify(s)
}

func (s SupplierProductInfo) GoString() string {
	return s.String()
}

func (s *SupplierProductInfo) SetExtraInfo(v string) *SupplierProductInfo {
	s.ExtraInfo = &v
	return s
}

func (s *SupplierProductInfo) SetProductId(v string) *SupplierProductInfo {
	s.ProductId = &v
	return s
}

func (s *SupplierProductInfo) SetProductImeiId(v string) *SupplierProductInfo {
	s.ProductImeiId = &v
	return s
}

func (s *SupplierProductInfo) SetProductName(v string) *SupplierProductInfo {
	s.ProductName = &v
	return s
}

func (s *SupplierProductInfo) SetProductNumber(v int64) *SupplierProductInfo {
	s.ProductNumber = &v
	return s
}

func (s *SupplierProductInfo) SetProductPrice(v int64) *SupplierProductInfo {
	s.ProductPrice = &v
	return s
}

func (s *SupplierProductInfo) SetSupplierVersion(v string) *SupplierProductInfo {
	s.SupplierVersion = &v
	return s
}

// 承诺详情
type BclCreatePromiseDetailInfo struct {
	// 承诺期数，最小值：1
	Period *int64 `json:"period,omitempty" xml:"period,omitempty" require:"true" minimum:"1"`
	// 承诺金额，单位：分
	// 最小值：1，正整数
	Amount *int64 `json:"amount,omitempty" xml:"amount,omitempty" require:"true" minimum:"1"`
	// 每期应还的日期
	// 示例：格式 2023-06-27T10:50:23+08:00
	PromiseTime *string `json:"promise_time,omitempty" xml:"promise_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s BclCreatePromiseDetailInfo) String() string {
	return tea.Prettify(s)
}

func (s BclCreatePromiseDetailInfo) GoString() string {
	return s.String()
}

func (s *BclCreatePromiseDetailInfo) SetPeriod(v int64) *BclCreatePromiseDetailInfo {
	s.Period = &v
	return s
}

func (s *BclCreatePromiseDetailInfo) SetAmount(v int64) *BclCreatePromiseDetailInfo {
	s.Amount = &v
	return s
}

func (s *BclCreatePromiseDetailInfo) SetPromiseTime(v string) *BclCreatePromiseDetailInfo {
	s.PromiseTime = &v
	return s
}

// 订单商品
type LeaseOrderProductInfo struct {
	// 商品编码 长度不可超过50
	ProductId *string `json:"product_id,omitempty" xml:"product_id,omitempty" require:"true"`
	// 产品版本，每个版本可以对应一个价格 长度不可超过50，版本号未正整数，示例"123"
	ProductVersion *string `json:"product_version,omitempty" xml:"product_version,omitempty" require:"true"`
	// 商品名称 长度不可超过50
	ProductName *string `json:"product_name,omitempty" xml:"product_name,omitempty" require:"true"`
	// 采购价  精确到毫厘，即123400表示12.34元
	ProductPrice *int64 `json:"product_price,omitempty" xml:"product_price,omitempty" require:"true"`
	// 供应商Id，用以做索引 长度不可超过50
	SupplierIsvAccount *string `json:"supplier_isv_account,omitempty" xml:"supplier_isv_account,omitempty" require:"true"`
}

func (s LeaseOrderProductInfo) String() string {
	return tea.Prettify(s)
}

func (s LeaseOrderProductInfo) GoString() string {
	return s.String()
}

func (s *LeaseOrderProductInfo) SetProductId(v string) *LeaseOrderProductInfo {
	s.ProductId = &v
	return s
}

func (s *LeaseOrderProductInfo) SetProductVersion(v string) *LeaseOrderProductInfo {
	s.ProductVersion = &v
	return s
}

func (s *LeaseOrderProductInfo) SetProductName(v string) *LeaseOrderProductInfo {
	s.ProductName = &v
	return s
}

func (s *LeaseOrderProductInfo) SetProductPrice(v int64) *LeaseOrderProductInfo {
	s.ProductPrice = &v
	return s
}

func (s *LeaseOrderProductInfo) SetSupplierIsvAccount(v string) *LeaseOrderProductInfo {
	s.SupplierIsvAccount = &v
	return s
}

// 租赁风控查询的实体描述
type LesseePerson struct {
	// 承租人姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 承租人身份证号
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 承租人手机号
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty" require:"true"`
}

func (s LesseePerson) String() string {
	return tea.Prettify(s)
}

func (s LesseePerson) GoString() string {
	return s.String()
}

func (s *LesseePerson) SetName(v string) *LesseePerson {
	s.Name = &v
	return s
}

func (s *LesseePerson) SetCertNo(v string) *LesseePerson {
	s.CertNo = &v
	return s
}

func (s *LesseePerson) SetMobile(v string) *LesseePerson {
	s.Mobile = &v
	return s
}

// 数字票根一键全流程存证相关参数
type OnestepFlowNotaryInfo struct {
	// 全流程模板id，需要提前创建好模板才能获取
	TemplateId *string `json:"template_id,omitempty" xml:"template_id,omitempty" require:"true"`
	// 流程名称，同一个租户下同一个模板，建议唯一不重复
	FlowName *string `json:"flow_name,omitempty" xml:"flow_name,omitempty" require:"true"`
	// 存证关联实体（个人/企业）的身份识别信息
	NotaryUser *NotaryUser `json:"notary_user,omitempty" xml:"notary_user,omitempty" require:"true"`
	// 阶段存证内容列表，根据模板定义传入
	PhaseNotaryList []*PhaseNotary `json:"phase_notary_list,omitempty" xml:"phase_notary_list,omitempty" require:"true" type:"Repeated"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
}

func (s OnestepFlowNotaryInfo) String() string {
	return tea.Prettify(s)
}

func (s OnestepFlowNotaryInfo) GoString() string {
	return s.String()
}

func (s *OnestepFlowNotaryInfo) SetTemplateId(v string) *OnestepFlowNotaryInfo {
	s.TemplateId = &v
	return s
}

func (s *OnestepFlowNotaryInfo) SetFlowName(v string) *OnestepFlowNotaryInfo {
	s.FlowName = &v
	return s
}

func (s *OnestepFlowNotaryInfo) SetNotaryUser(v *NotaryUser) *OnestepFlowNotaryInfo {
	s.NotaryUser = v
	return s
}

func (s *OnestepFlowNotaryInfo) SetPhaseNotaryList(v []*PhaseNotary) *OnestepFlowNotaryInfo {
	s.PhaseNotaryList = v
	return s
}

func (s *OnestepFlowNotaryInfo) SetProperties(v string) *OnestepFlowNotaryInfo {
	s.Properties = &v
	return s
}

// 更新后平台方经办人信息
type ContractCreatorApplication struct {
	// 邮箱地址
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// 证件号
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty" require:"true"`
	// 证件类型
	IdType *string `json:"id_type,omitempty" xml:"id_type,omitempty" require:"true"`
	// 手机号码
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty"`
	// 姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 创建人ID
	CreatorId *string `json:"creator_id,omitempty" xml:"creator_id,omitempty" require:"true"`
}

func (s ContractCreatorApplication) String() string {
	return tea.Prettify(s)
}

func (s ContractCreatorApplication) GoString() string {
	return s.String()
}

func (s *ContractCreatorApplication) SetEmail(v string) *ContractCreatorApplication {
	s.Email = &v
	return s
}

func (s *ContractCreatorApplication) SetIdNumber(v string) *ContractCreatorApplication {
	s.IdNumber = &v
	return s
}

func (s *ContractCreatorApplication) SetIdType(v string) *ContractCreatorApplication {
	s.IdType = &v
	return s
}

func (s *ContractCreatorApplication) SetMobile(v string) *ContractCreatorApplication {
	s.Mobile = &v
	return s
}

func (s *ContractCreatorApplication) SetName(v string) *ContractCreatorApplication {
	s.Name = &v
	return s
}

func (s *ContractCreatorApplication) SetCreatorId(v string) *ContractCreatorApplication {
	s.CreatorId = &v
	return s
}

// 合同信息
type BclContractInfo struct {
	// 签署状态
	// 1.合同待签署：SIGNING
	// 2.代扣待签署：PROXY_SIGNING
	// 3.合同拒签：REJECT
	// 4.代扣拒签：PROXY_REJECT
	// 5.合同签署失败：SIGN_FAIL
	// 6.签署完成：FINISH
	SignStatus *string `json:"sign_status,omitempty" xml:"sign_status,omitempty" require:"true"`
	// 签署完成的合同文件
	// 如果使用合同服务，只有签署完成才可获取
	SignedFiles []*BclFileInfo `json:"signed_files,omitempty" xml:"signed_files,omitempty" type:"Repeated"`
	// 签署链接，使用租赁宝代扣并且发起订单后才可以查询获取
	SignUrl *string `json:"sign_url,omitempty" xml:"sign_url,omitempty"`
	// 签署场景
	BusinessScene *string `json:"business_scene,omitempty" xml:"business_scene,omitempty"`
	// 合同创建失败原因
	FlowErrMsg *string `json:"flow_err_msg,omitempty" xml:"flow_err_msg,omitempty"`
	// 签署区列表
	SignFieldInfos []*BclContractSignFieldInfo `json:"sign_field_infos,omitempty" xml:"sign_field_infos,omitempty" type:"Repeated"`
	// 签署长链接，使用租赁宝代扣并且发起订单后才可以查询获取
	DestUrl *string `json:"dest_url,omitempty" xml:"dest_url,omitempty"`
	// 签署模式：
	// 模板签署:TEMPLATE_SIGN,使用同模板流程创建合同信息；
	// 原文签署:ORIGINAL_SIGN，使用原来的流程创建合同信息
	SignMode *string `json:"sign_mode,omitempty" xml:"sign_mode,omitempty"`
}

func (s BclContractInfo) String() string {
	return tea.Prettify(s)
}

func (s BclContractInfo) GoString() string {
	return s.String()
}

func (s *BclContractInfo) SetSignStatus(v string) *BclContractInfo {
	s.SignStatus = &v
	return s
}

func (s *BclContractInfo) SetSignedFiles(v []*BclFileInfo) *BclContractInfo {
	s.SignedFiles = v
	return s
}

func (s *BclContractInfo) SetSignUrl(v string) *BclContractInfo {
	s.SignUrl = &v
	return s
}

func (s *BclContractInfo) SetBusinessScene(v string) *BclContractInfo {
	s.BusinessScene = &v
	return s
}

func (s *BclContractInfo) SetFlowErrMsg(v string) *BclContractInfo {
	s.FlowErrMsg = &v
	return s
}

func (s *BclContractInfo) SetSignFieldInfos(v []*BclContractSignFieldInfo) *BclContractInfo {
	s.SignFieldInfos = v
	return s
}

func (s *BclContractInfo) SetDestUrl(v string) *BclContractInfo {
	s.DestUrl = &v
	return s
}

func (s *BclContractInfo) SetSignMode(v string) *BclContractInfo {
	s.SignMode = &v
	return s
}

// 融资租赁里的产品详细信息
type ProductInfo struct {
	// 是否需要创建did
	NeedDid *bool `json:"need_did,omitempty" xml:"need_did,omitempty"`
	// 产品品牌，长度不超过50
	ProductBrand *string `json:"product_brand,omitempty" xml:"product_brand,omitempty"`
	// 产品Id，长度不超过50
	ProductId *string `json:"product_id,omitempty" xml:"product_id,omitempty" require:"true"`
	// 唯一标识码，imeiID，长度不超过50
	ProductImeiId *string `json:"product_imei_id,omitempty" xml:"product_imei_id,omitempty"`
	// 产品规格型号，长度不超过255
	ProductModel *string `json:"product_model,omitempty" xml:"product_model,omitempty"`
	// 产品名称，长度不超过50
	ProductName *string `json:"product_name,omitempty" xml:"product_name,omitempty" require:"true"`
	// 产品数量
	ProductNumber *int64 `json:"product_number,omitempty" xml:"product_number,omitempty" require:"true"`
	// 产品采购含税价 精确到毫厘，即123400表示12.34元
	ProductPrice *int64 `json:"product_price,omitempty" xml:"product_price,omitempty" require:"true"`
	// 供应商id
	SupplierId *string `json:"supplier_id,omitempty" xml:"supplier_id,omitempty"`
	// 供应商对应的产品版本，每个版本可以对应一个价格
	SupplierVersion *string `json:"supplier_version,omitempty" xml:"supplier_version,omitempty"`
	// 额外字段
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
}

func (s ProductInfo) String() string {
	return tea.Prettify(s)
}

func (s ProductInfo) GoString() string {
	return s.String()
}

func (s *ProductInfo) SetNeedDid(v bool) *ProductInfo {
	s.NeedDid = &v
	return s
}

func (s *ProductInfo) SetProductBrand(v string) *ProductInfo {
	s.ProductBrand = &v
	return s
}

func (s *ProductInfo) SetProductId(v string) *ProductInfo {
	s.ProductId = &v
	return s
}

func (s *ProductInfo) SetProductImeiId(v string) *ProductInfo {
	s.ProductImeiId = &v
	return s
}

func (s *ProductInfo) SetProductModel(v string) *ProductInfo {
	s.ProductModel = &v
	return s
}

func (s *ProductInfo) SetProductName(v string) *ProductInfo {
	s.ProductName = &v
	return s
}

func (s *ProductInfo) SetProductNumber(v int64) *ProductInfo {
	s.ProductNumber = &v
	return s
}

func (s *ProductInfo) SetProductPrice(v int64) *ProductInfo {
	s.ProductPrice = &v
	return s
}

func (s *ProductInfo) SetSupplierId(v string) *ProductInfo {
	s.SupplierId = &v
	return s
}

func (s *ProductInfo) SetSupplierVersion(v string) *ProductInfo {
	s.SupplierVersion = &v
	return s
}

func (s *ProductInfo) SetExtraInfo(v string) *ProductInfo {
	s.ExtraInfo = &v
	return s
}

// 商家联系人信息
type BclContactInfo struct {
	// 联系人名称，最大长度：128
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 联系人手机号
	// 最大长度：20
	// 示例：13812348888
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty" require:"true"`
	// 联系人电话
	// 最大长度：20
	// 示例：0571-12345678
	Phone *string `json:"phone,omitempty" xml:"phone,omitempty"`
}

func (s BclContactInfo) String() string {
	return tea.Prettify(s)
}

func (s BclContactInfo) GoString() string {
	return s.String()
}

func (s *BclContactInfo) SetName(v string) *BclContactInfo {
	s.Name = &v
	return s
}

func (s *BclContactInfo) SetMobile(v string) *BclContactInfo {
	s.Mobile = &v
	return s
}

func (s *BclContactInfo) SetPhone(v string) *BclContactInfo {
	s.Phone = &v
	return s
}

// 查询全流程存证证据详情查询的请求信息
type NotaryFlowDetailQueryReq struct {
	// 全流程存证模板ID
	TemplateId *string `json:"template_id,omitempty" xml:"template_id,omitempty" require:"true"`
	// 全流程存证流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 链上证据包对应的链上交易Hash
	ChainPackTxHash *string `json:"chain_pack_tx_hash,omitempty" xml:"chain_pack_tx_hash,omitempty" require:"true"`
	// 链上证据包授权码
	Authcode *string `json:"authcode,omitempty" xml:"authcode,omitempty" require:"true"`
}

func (s NotaryFlowDetailQueryReq) String() string {
	return tea.Prettify(s)
}

func (s NotaryFlowDetailQueryReq) GoString() string {
	return s.String()
}

func (s *NotaryFlowDetailQueryReq) SetTemplateId(v string) *NotaryFlowDetailQueryReq {
	s.TemplateId = &v
	return s
}

func (s *NotaryFlowDetailQueryReq) SetFlowId(v string) *NotaryFlowDetailQueryReq {
	s.FlowId = &v
	return s
}

func (s *NotaryFlowDetailQueryReq) SetChainPackTxHash(v string) *NotaryFlowDetailQueryReq {
	s.ChainPackTxHash = &v
	return s
}

func (s *NotaryFlowDetailQueryReq) SetAuthcode(v string) *NotaryFlowDetailQueryReq {
	s.Authcode = &v
	return s
}

// 履约详情
type BclRentalInfo struct {
	// 期数
	Period *int64 `json:"period,omitempty" xml:"period,omitempty" require:"true"`
	// 金额 单位分
	Amount *int64 `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 租金归还时间
	Time *string `json:"time,omitempty" xml:"time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 归还方式
	// 1.租赁代扣: PROXY_WITHHOLDING
	// 2.主动还款：ACTIVE_REPAYMENT
	// 3.网商委托代扣：MY_BANK_DIRECT_PAYMENT
	// 4.预授权代扣：PRE_AUTHORIZATION_WITHHOLDING
	Way *string `json:"way,omitempty" xml:"way,omitempty" require:"true"`
	// 还款渠道
	// 1.支付宝：ALIPAY
	// 2.平台代收（客户主动还款）：PLATFORM_COLLECTION
	// 3.网商银行：MY_BANK
	// 4.其他：OTHER
	VoucherType *string `json:"voucher_type,omitempty" xml:"voucher_type,omitempty" require:"true"`
	// 还款凭证编号
	VoucherSerial *string `json:"voucher_serial,omitempty" xml:"voucher_serial,omitempty" require:"true"`
	// 手续费 如通过预授权、代扣的方式规划，必填
	Premium *int64 `json:"premium,omitempty" xml:"premium,omitempty" require:"true"`
}

func (s BclRentalInfo) String() string {
	return tea.Prettify(s)
}

func (s BclRentalInfo) GoString() string {
	return s.String()
}

func (s *BclRentalInfo) SetPeriod(v int64) *BclRentalInfo {
	s.Period = &v
	return s
}

func (s *BclRentalInfo) SetAmount(v int64) *BclRentalInfo {
	s.Amount = &v
	return s
}

func (s *BclRentalInfo) SetTime(v string) *BclRentalInfo {
	s.Time = &v
	return s
}

func (s *BclRentalInfo) SetWay(v string) *BclRentalInfo {
	s.Way = &v
	return s
}

func (s *BclRentalInfo) SetVoucherType(v string) *BclRentalInfo {
	s.VoucherType = &v
	return s
}

func (s *BclRentalInfo) SetVoucherSerial(v string) *BclRentalInfo {
	s.VoucherSerial = &v
	return s
}

func (s *BclRentalInfo) SetPremium(v int64) *BclRentalInfo {
	s.Premium = &v
	return s
}

// 支付扣款详情
type PaymentDetail struct {
	// 业务自定义扣款id，长度不能超过64
	BizTradeId *string `json:"biz_trade_id,omitempty" xml:"biz_trade_id,omitempty" require:"true"`
	// 扣款期数
	Period *int64 `json:"period,omitempty" xml:"period,omitempty" require:"true"`
	// 支付金额，单位：分
	PayMoney *int64 `json:"pay_money,omitempty" xml:"pay_money,omitempty" require:"true"`
	// 计划扣款时间，格式"yyyy-MM-dd HH:mm:ss"
	PayDate *string `json:"pay_date,omitempty" xml:"pay_date,omitempty" require:"true"`
}

func (s PaymentDetail) String() string {
	return tea.Prettify(s)
}

func (s PaymentDetail) GoString() string {
	return s.String()
}

func (s *PaymentDetail) SetBizTradeId(v string) *PaymentDetail {
	s.BizTradeId = &v
	return s
}

func (s *PaymentDetail) SetPeriod(v int64) *PaymentDetail {
	s.Period = &v
	return s
}

func (s *PaymentDetail) SetPayMoney(v int64) *PaymentDetail {
	s.PayMoney = &v
	return s
}

func (s *PaymentDetail) SetPayDate(v string) *PaymentDetail {
	s.PayDate = &v
	return s
}

// 电子合同代扣计划取消操作信息
type ContractNotaryDeductCancelInfo struct {
	// 付款方的区块链合同签署账号
	PayerId *string `json:"payer_id,omitempty" xml:"payer_id,omitempty" require:"true"`
	// 是否取消成功
	CancelStatus *bool `json:"cancel_status,omitempty" xml:"cancel_status,omitempty" require:"true"`
	// 取消操作发起时间
	Timestamp *string `json:"timestamp,omitempty" xml:"timestamp,omitempty" require:"true"`
	// 代扣订单号，多个订单号之间以‘,’隔开
	Orders *string `json:"orders,omitempty" xml:"orders,omitempty" require:"true"`
}

func (s ContractNotaryDeductCancelInfo) String() string {
	return tea.Prettify(s)
}

func (s ContractNotaryDeductCancelInfo) GoString() string {
	return s.String()
}

func (s *ContractNotaryDeductCancelInfo) SetPayerId(v string) *ContractNotaryDeductCancelInfo {
	s.PayerId = &v
	return s
}

func (s *ContractNotaryDeductCancelInfo) SetCancelStatus(v bool) *ContractNotaryDeductCancelInfo {
	s.CancelStatus = &v
	return s
}

func (s *ContractNotaryDeductCancelInfo) SetTimestamp(v string) *ContractNotaryDeductCancelInfo {
	s.Timestamp = &v
	return s
}

func (s *ContractNotaryDeductCancelInfo) SetOrders(v string) *ContractNotaryDeductCancelInfo {
	s.Orders = &v
	return s
}

// 平台方经办人信息
type ContractPlatformAccountApplication struct {
	// 邮箱地址
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// 证件号
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty" require:"true"`
	// 证件类型
	IdType *string `json:"id_type,omitempty" xml:"id_type,omitempty" require:"true"`
	// 手机号码
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty"`
	// 姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 用户唯一标识，可传入第三方平台的个人用户id等
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
}

func (s ContractPlatformAccountApplication) String() string {
	return tea.Prettify(s)
}

func (s ContractPlatformAccountApplication) GoString() string {
	return s.String()
}

func (s *ContractPlatformAccountApplication) SetEmail(v string) *ContractPlatformAccountApplication {
	s.Email = &v
	return s
}

func (s *ContractPlatformAccountApplication) SetIdNumber(v string) *ContractPlatformAccountApplication {
	s.IdNumber = &v
	return s
}

func (s *ContractPlatformAccountApplication) SetIdType(v string) *ContractPlatformAccountApplication {
	s.IdType = &v
	return s
}

func (s *ContractPlatformAccountApplication) SetMobile(v string) *ContractPlatformAccountApplication {
	s.Mobile = &v
	return s
}

func (s *ContractPlatformAccountApplication) SetName(v string) *ContractPlatformAccountApplication {
	s.Name = &v
	return s
}

func (s *ContractPlatformAccountApplication) SetUserId(v string) *ContractPlatformAccountApplication {
	s.UserId = &v
	return s
}

// 调解回款银行账户
type BankAccountInfo struct {
	// 开户名称
	AccountName *string `json:"account_name,omitempty" xml:"account_name,omitempty" require:"true"`
	// 开户行
	AccountBank *string `json:"account_bank,omitempty" xml:"account_bank,omitempty" require:"true"`
	// 开户账号
	AccountNumber *string `json:"account_number,omitempty" xml:"account_number,omitempty" require:"true"`
	// 联系电话
	AccountPhone *string `json:"account_phone,omitempty" xml:"account_phone,omitempty" require:"true"`
}

func (s BankAccountInfo) String() string {
	return tea.Prettify(s)
}

func (s BankAccountInfo) GoString() string {
	return s.String()
}

func (s *BankAccountInfo) SetAccountName(v string) *BankAccountInfo {
	s.AccountName = &v
	return s
}

func (s *BankAccountInfo) SetAccountBank(v string) *BankAccountInfo {
	s.AccountBank = &v
	return s
}

func (s *BankAccountInfo) SetAccountNumber(v string) *BankAccountInfo {
	s.AccountNumber = &v
	return s
}

func (s *BankAccountInfo) SetAccountPhone(v string) *BankAccountInfo {
	s.AccountPhone = &v
	return s
}

// 更新后平台方企业信息
type ContractPlatformApplication struct {
	// 证件号
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty" require:"true"`
	// 证件类型
	IdType *string `json:"id_type,omitempty" xml:"id_type,omitempty" require:"true"`
	// 企业法人名称
	OrgLegalName *string `json:"org_legal_name,omitempty" xml:"org_legal_name,omitempty"`
	// 企业法人证件号
	OrgLegalIdNumber *string `json:"org_legal_id_number,omitempty" xml:"org_legal_id_number,omitempty"`
	// 机构名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 平台方账号id
	PlatformId *string `json:"platform_id,omitempty" xml:"platform_id,omitempty" require:"true"`
}

func (s ContractPlatformApplication) String() string {
	return tea.Prettify(s)
}

func (s ContractPlatformApplication) GoString() string {
	return s.String()
}

func (s *ContractPlatformApplication) SetIdNumber(v string) *ContractPlatformApplication {
	s.IdNumber = &v
	return s
}

func (s *ContractPlatformApplication) SetIdType(v string) *ContractPlatformApplication {
	s.IdType = &v
	return s
}

func (s *ContractPlatformApplication) SetOrgLegalName(v string) *ContractPlatformApplication {
	s.OrgLegalName = &v
	return s
}

func (s *ContractPlatformApplication) SetOrgLegalIdNumber(v string) *ContractPlatformApplication {
	s.OrgLegalIdNumber = &v
	return s
}

func (s *ContractPlatformApplication) SetName(v string) *ContractPlatformApplication {
	s.Name = &v
	return s
}

func (s *ContractPlatformApplication) SetPlatformId(v string) *ContractPlatformApplication {
	s.PlatformId = &v
	return s
}

// 融资租赁用户侧还款条目
type LeaseRentalInfo struct {
	// 租期编号
	Term *int64 `json:"term,omitempty" xml:"term,omitempty" require:"true"`
	// 租金归还状态，1.足额归还2.部分归还3.未归还
	RentalReturnState *int64 `json:"rental_return_state,omitempty" xml:"rental_return_state,omitempty" require:"true"`
	// 租金归还金额,精确到毫厘，即123400表示12.34元
	RentalMoney *int64 `json:"rental_money,omitempty" xml:"rental_money,omitempty" require:"true"`
	// 归还时间
	ReturnTime *string `json:"return_time,omitempty" xml:"return_time,omitempty" require:"true"`
	// 归还方式，1.预授权代扣2.支付宝代扣3.主动还款4.其他，5网商直付通代扣
	ReturnWay *int64 `json:"return_way,omitempty" xml:"return_way,omitempty" require:"true"`
	// 还款凭证类型，1.支付宝2.平台代收（客户主动还款）3.其他
	ReturnVoucherType *int64 `json:"return_voucher_type,omitempty" xml:"return_voucher_type,omitempty" require:"true"`
	// 还款凭证编号，不超过128字符，支付宝流水号
	ReturnVoucherSerial *string `json:"return_voucher_serial,omitempty" xml:"return_voucher_serial,omitempty" require:"true"`
	// 剩余归还期数
	RemainTerm *int64 `json:"remain_term,omitempty" xml:"remain_term,omitempty" require:"true"`
}

func (s LeaseRentalInfo) String() string {
	return tea.Prettify(s)
}

func (s LeaseRentalInfo) GoString() string {
	return s.String()
}

func (s *LeaseRentalInfo) SetTerm(v int64) *LeaseRentalInfo {
	s.Term = &v
	return s
}

func (s *LeaseRentalInfo) SetRentalReturnState(v int64) *LeaseRentalInfo {
	s.RentalReturnState = &v
	return s
}

func (s *LeaseRentalInfo) SetRentalMoney(v int64) *LeaseRentalInfo {
	s.RentalMoney = &v
	return s
}

func (s *LeaseRentalInfo) SetReturnTime(v string) *LeaseRentalInfo {
	s.ReturnTime = &v
	return s
}

func (s *LeaseRentalInfo) SetReturnWay(v int64) *LeaseRentalInfo {
	s.ReturnWay = &v
	return s
}

func (s *LeaseRentalInfo) SetReturnVoucherType(v int64) *LeaseRentalInfo {
	s.ReturnVoucherType = &v
	return s
}

func (s *LeaseRentalInfo) SetReturnVoucherSerial(v string) *LeaseRentalInfo {
	s.ReturnVoucherSerial = &v
	return s
}

func (s *LeaseRentalInfo) SetRemainTerm(v int64) *LeaseRentalInfo {
	s.RemainTerm = &v
	return s
}

// 核验结果
type NotaryCheckResult struct {
	// 存证所在区块高度
	BlockHeight *int64 `json:"block_height,omitempty" xml:"block_height,omitempty" require:"true" minimum:"0"`
	// 核验结果错误码
	ErrorCode *int64 `json:"error_code,omitempty" xml:"error_code,omitempty" require:"true"`
	// 错误信息
	ErrorMessage *string `json:"error_message,omitempty" xml:"error_message,omitempty" require:"true"`
	// 存证时间
	NotaryTime *string `json:"notary_time,omitempty" xml:"notary_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 存证类型
	NotaryType *string `json:"notary_type,omitempty" xml:"notary_type,omitempty" require:"true"`
	// 核验是否成功
	Result *bool `json:"result,omitempty" xml:"result,omitempty" require:"true"`
	// 存证事务ID
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
	// 交易哈希
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
	// 区块哈希
	BlockHash *string `json:"block_hash,omitempty" xml:"block_hash,omitempty" require:"true"`
	// 存证阶段
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
}

func (s NotaryCheckResult) String() string {
	return tea.Prettify(s)
}

func (s NotaryCheckResult) GoString() string {
	return s.String()
}

func (s *NotaryCheckResult) SetBlockHeight(v int64) *NotaryCheckResult {
	s.BlockHeight = &v
	return s
}

func (s *NotaryCheckResult) SetErrorCode(v int64) *NotaryCheckResult {
	s.ErrorCode = &v
	return s
}

func (s *NotaryCheckResult) SetErrorMessage(v string) *NotaryCheckResult {
	s.ErrorMessage = &v
	return s
}

func (s *NotaryCheckResult) SetNotaryTime(v string) *NotaryCheckResult {
	s.NotaryTime = &v
	return s
}

func (s *NotaryCheckResult) SetNotaryType(v string) *NotaryCheckResult {
	s.NotaryType = &v
	return s
}

func (s *NotaryCheckResult) SetResult(v bool) *NotaryCheckResult {
	s.Result = &v
	return s
}

func (s *NotaryCheckResult) SetTransactionId(v string) *NotaryCheckResult {
	s.TransactionId = &v
	return s
}

func (s *NotaryCheckResult) SetTxHash(v string) *NotaryCheckResult {
	s.TxHash = &v
	return s
}

func (s *NotaryCheckResult) SetBlockHash(v string) *NotaryCheckResult {
	s.BlockHash = &v
	return s
}

func (s *NotaryCheckResult) SetPhase(v string) *NotaryCheckResult {
	s.Phase = &v
	return s
}

// 物流信息
type BclLogisticsInfo struct {
	// 物流订单
	LogisticsOrderId *string `json:"logistics_order_id,omitempty" xml:"logistics_order_id,omitempty" require:"true"`
	// 物流公司
	LogisticCompany *string `json:"logistic_company,omitempty" xml:"logistic_company,omitempty" require:"true"`
	// 物流状态
	// 1.已发货：SHIPPED
	// 2.已签收：SIGNED
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 发货时间
	// 示例：2023-06-27T10:50:23+08:00
	DeliverTime *string `json:"deliver_time,omitempty" xml:"deliver_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 租赁类型
	// 1.租赁：LEASE
	// 2.退租：RETURN_LEASE
	LeaseType *string `json:"lease_type,omitempty" xml:"lease_type,omitempty" require:"true"`
	// 签收时间
	// 示例：2023-06-27T10:50:23+08:00
	ArriveConfirmTime *string `json:"arrive_confirm_time,omitempty" xml:"arrive_confirm_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 签收文件下载链接
	ArriveConfirmFileUrl *string `json:"arrive_confirm_file_url,omitempty" xml:"arrive_confirm_file_url,omitempty" require:"true"`
	// 发货地址
	DeliverAddress *string `json:"deliver_address,omitempty" xml:"deliver_address,omitempty" require:"true"`
	// 收货地址
	ArriveAddress *string `json:"arrive_address,omitempty" xml:"arrive_address,omitempty" require:"true"`
	// 收货人姓名 脱敏
	ArriveName *string `json:"arrive_name,omitempty" xml:"arrive_name,omitempty" require:"true"`
	// 收货人联系电话 脱敏
	ArriveMobile *string `json:"arrive_mobile,omitempty" xml:"arrive_mobile,omitempty" require:"true"`
	// 物流公司标志,参考菜鸟的物流公司定义
	LogisticCompanyCode *string `json:"logistic_company_code,omitempty" xml:"logistic_company_code,omitempty"`
}

func (s BclLogisticsInfo) String() string {
	return tea.Prettify(s)
}

func (s BclLogisticsInfo) GoString() string {
	return s.String()
}

func (s *BclLogisticsInfo) SetLogisticsOrderId(v string) *BclLogisticsInfo {
	s.LogisticsOrderId = &v
	return s
}

func (s *BclLogisticsInfo) SetLogisticCompany(v string) *BclLogisticsInfo {
	s.LogisticCompany = &v
	return s
}

func (s *BclLogisticsInfo) SetStatus(v string) *BclLogisticsInfo {
	s.Status = &v
	return s
}

func (s *BclLogisticsInfo) SetDeliverTime(v string) *BclLogisticsInfo {
	s.DeliverTime = &v
	return s
}

func (s *BclLogisticsInfo) SetLeaseType(v string) *BclLogisticsInfo {
	s.LeaseType = &v
	return s
}

func (s *BclLogisticsInfo) SetArriveConfirmTime(v string) *BclLogisticsInfo {
	s.ArriveConfirmTime = &v
	return s
}

func (s *BclLogisticsInfo) SetArriveConfirmFileUrl(v string) *BclLogisticsInfo {
	s.ArriveConfirmFileUrl = &v
	return s
}

func (s *BclLogisticsInfo) SetDeliverAddress(v string) *BclLogisticsInfo {
	s.DeliverAddress = &v
	return s
}

func (s *BclLogisticsInfo) SetArriveAddress(v string) *BclLogisticsInfo {
	s.ArriveAddress = &v
	return s
}

func (s *BclLogisticsInfo) SetArriveName(v string) *BclLogisticsInfo {
	s.ArriveName = &v
	return s
}

func (s *BclLogisticsInfo) SetArriveMobile(v string) *BclLogisticsInfo {
	s.ArriveMobile = &v
	return s
}

func (s *BclLogisticsInfo) SetLogisticCompanyCode(v string) *BclLogisticsInfo {
	s.LogisticCompanyCode = &v
	return s
}

// 融资租赁资金方还款条目信息
type LeaseRepaymentInfo struct {
	// 融资租赁还款流水
	RepaymentUniqueId *string `json:"repayment_unique_id,omitempty" xml:"repayment_unique_id,omitempty" require:"true"`
	// 还款批次
	ReturnIndex *string `json:"return_index,omitempty" xml:"return_index,omitempty" require:"true"`
	// 还款日期
	ReturnTime *string `json:"return_time,omitempty" xml:"return_time,omitempty" require:"true"`
	// 还款总额,本金+利息，精确到毫厘，即123400表示12.34元
	ReturnMoney *int64 `json:"return_money,omitempty" xml:"return_money,omitempty" require:"true"`
	// 还款结果状态,1.成功 2.失败
	ReturnStatus *int64 `json:"return_status,omitempty" xml:"return_status,omitempty" require:"true"`
	// 还款结果简要描述,长度不超过256
	ReturnDescription *string `json:"return_description,omitempty" xml:"return_description,omitempty" require:"true"`
	// 还款来源,1.共管账号，2.网商清分
	Source *int64 `json:"source,omitempty" xml:"source,omitempty" require:"true"`
	// 剩余应还期数
	RemainReturnTerm *int64 `json:"remain_return_term,omitempty" xml:"remain_return_term,omitempty" require:"true"`
	// 本期剩余应还金额，精确到毫厘，即123400表示12.34元
	RemainReturnMoney *int64 `json:"remain_return_money,omitempty" xml:"remain_return_money,omitempty" require:"true"`
	// 逾期状态,0为未逾期，1表示逾期
	OverdueStatus *int64 `json:"overdue_status,omitempty" xml:"overdue_status,omitempty" require:"true"`
	// 逾期利率（日利率）,精确到小数点后四位 12.34% 表示为1234
	OverdueRate *int64 `json:"overdue_rate,omitempty" xml:"overdue_rate,omitempty" require:"true"`
	// 逾期天数,支用到期日开始计算
	OverdueDay *int64 `json:"overdue_day,omitempty" xml:"overdue_day,omitempty" require:"true"`
	// 逾期应还款总额,本金+利息+逾期利息,精确到毫厘，即123400表示12.34元
	OverdueMoney *int64 `json:"overdue_money,omitempty" xml:"overdue_money,omitempty" require:"true"`
}

func (s LeaseRepaymentInfo) String() string {
	return tea.Prettify(s)
}

func (s LeaseRepaymentInfo) GoString() string {
	return s.String()
}

func (s *LeaseRepaymentInfo) SetRepaymentUniqueId(v string) *LeaseRepaymentInfo {
	s.RepaymentUniqueId = &v
	return s
}

func (s *LeaseRepaymentInfo) SetReturnIndex(v string) *LeaseRepaymentInfo {
	s.ReturnIndex = &v
	return s
}

func (s *LeaseRepaymentInfo) SetReturnTime(v string) *LeaseRepaymentInfo {
	s.ReturnTime = &v
	return s
}

func (s *LeaseRepaymentInfo) SetReturnMoney(v int64) *LeaseRepaymentInfo {
	s.ReturnMoney = &v
	return s
}

func (s *LeaseRepaymentInfo) SetReturnStatus(v int64) *LeaseRepaymentInfo {
	s.ReturnStatus = &v
	return s
}

func (s *LeaseRepaymentInfo) SetReturnDescription(v string) *LeaseRepaymentInfo {
	s.ReturnDescription = &v
	return s
}

func (s *LeaseRepaymentInfo) SetSource(v int64) *LeaseRepaymentInfo {
	s.Source = &v
	return s
}

func (s *LeaseRepaymentInfo) SetRemainReturnTerm(v int64) *LeaseRepaymentInfo {
	s.RemainReturnTerm = &v
	return s
}

func (s *LeaseRepaymentInfo) SetRemainReturnMoney(v int64) *LeaseRepaymentInfo {
	s.RemainReturnMoney = &v
	return s
}

func (s *LeaseRepaymentInfo) SetOverdueStatus(v int64) *LeaseRepaymentInfo {
	s.OverdueStatus = &v
	return s
}

func (s *LeaseRepaymentInfo) SetOverdueRate(v int64) *LeaseRepaymentInfo {
	s.OverdueRate = &v
	return s
}

func (s *LeaseRepaymentInfo) SetOverdueDay(v int64) *LeaseRepaymentInfo {
	s.OverdueDay = &v
	return s
}

func (s *LeaseRepaymentInfo) SetOverdueMoney(v int64) *LeaseRepaymentInfo {
	s.OverdueMoney = &v
	return s
}

// 数字票根扩展字段
type StubExtraInfo struct {
	// 票面视觉
	TicketVision *string `json:"ticket_vision,omitempty" xml:"ticket_vision,omitempty"`
}

func (s StubExtraInfo) String() string {
	return tea.Prettify(s)
}

func (s StubExtraInfo) GoString() string {
	return s.String()
}

func (s *StubExtraInfo) SetTicketVision(v string) *StubExtraInfo {
	s.TicketVision = &v
	return s
}

// 文本签信息, 包含证书与签名
type ContractTextSignVerifySignInfo struct {
	// 签名信息
	Signature *ContractTextSignVerifySignatureInfo `json:"signature,omitempty" xml:"signature,omitempty"`
	// 证书信息
	Cert *ContractTextSignVerifyCertInfo `json:"cert,omitempty" xml:"cert,omitempty"`
}

func (s ContractTextSignVerifySignInfo) String() string {
	return tea.Prettify(s)
}

func (s ContractTextSignVerifySignInfo) GoString() string {
	return s.String()
}

func (s *ContractTextSignVerifySignInfo) SetSignature(v *ContractTextSignVerifySignatureInfo) *ContractTextSignVerifySignInfo {
	s.Signature = v
	return s
}

func (s *ContractTextSignVerifySignInfo) SetCert(v *ContractTextSignVerifyCertInfo) *ContractTextSignVerifySignInfo {
	s.Cert = v
	return s
}

// 用户端承诺信息
type LeasePromiseInfo struct {
	// 租期index
	Term *int64 `json:"term,omitempty" xml:"term,omitempty" require:"true"`
	// 应还款金额
	PayMoney *int64 `json:"pay_money,omitempty" xml:"pay_money,omitempty" require:"true"`
	// 应还款时间
	PayDate *string `json:"pay_date,omitempty" xml:"pay_date,omitempty" require:"true"`
}

func (s LeasePromiseInfo) String() string {
	return tea.Prettify(s)
}

func (s LeasePromiseInfo) GoString() string {
	return s.String()
}

func (s *LeasePromiseInfo) SetTerm(v int64) *LeasePromiseInfo {
	s.Term = &v
	return s
}

func (s *LeasePromiseInfo) SetPayMoney(v int64) *LeasePromiseInfo {
	s.PayMoney = &v
	return s
}

func (s *LeasePromiseInfo) SetPayDate(v string) *LeasePromiseInfo {
	s.PayDate = &v
	return s
}

// 个人信息
type ContractUserAccountApplication struct {
	// 邮箱地址，默认不变
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// 证件号，该字段只有为空才允许修改
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty"`
	// 证件类型，默认为身份证
	IdType *string `json:"id_type,omitempty" xml:"id_type,omitempty"`
	// 手机号码，默认不变
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty"`
	// 姓名，默认不变
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 用户/经办人账号id
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
}

func (s ContractUserAccountApplication) String() string {
	return tea.Prettify(s)
}

func (s ContractUserAccountApplication) GoString() string {
	return s.String()
}

func (s *ContractUserAccountApplication) SetEmail(v string) *ContractUserAccountApplication {
	s.Email = &v
	return s
}

func (s *ContractUserAccountApplication) SetIdNumber(v string) *ContractUserAccountApplication {
	s.IdNumber = &v
	return s
}

func (s *ContractUserAccountApplication) SetIdType(v string) *ContractUserAccountApplication {
	s.IdType = &v
	return s
}

func (s *ContractUserAccountApplication) SetMobile(v string) *ContractUserAccountApplication {
	s.Mobile = &v
	return s
}

func (s *ContractUserAccountApplication) SetName(v string) *ContractUserAccountApplication {
	s.Name = &v
	return s
}

func (s *ContractUserAccountApplication) SetUserId(v string) *ContractUserAccountApplication {
	s.UserId = &v
	return s
}

// 合约核验结果
type ContractCheckResult struct {
	// 交易hash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 合约执行结果，Base64编码后的
	ContentBase64 *string `json:"content_base64,omitempty" xml:"content_base64,omitempty"`
	// 块高
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
	// 消耗gas量
	GasUsed *int64 `json:"gas_used,omitempty" xml:"gas_used,omitempty"`
	// log信息
	LogBase64 *string `json:"log_base64,omitempty" xml:"log_base64,omitempty"`
}

func (s ContractCheckResult) String() string {
	return tea.Prettify(s)
}

func (s ContractCheckResult) GoString() string {
	return s.String()
}

func (s *ContractCheckResult) SetTxHash(v string) *ContractCheckResult {
	s.TxHash = &v
	return s
}

func (s *ContractCheckResult) SetOrderId(v string) *ContractCheckResult {
	s.OrderId = &v
	return s
}

func (s *ContractCheckResult) SetContentBase64(v string) *ContractCheckResult {
	s.ContentBase64 = &v
	return s
}

func (s *ContractCheckResult) SetBlockNumber(v int64) *ContractCheckResult {
	s.BlockNumber = &v
	return s
}

func (s *ContractCheckResult) SetGasUsed(v int64) *ContractCheckResult {
	s.GasUsed = &v
	return s
}

func (s *ContractCheckResult) SetLogBase64(v string) *ContractCheckResult {
	s.LogBase64 = &v
	return s
}

// 企业信息
type CompanyTwoMetaInfo struct {
	// 企业证件名称
	CertName *string `json:"cert_name,omitempty" xml:"cert_name,omitempty" require:"true"`
	// 企业证件号码
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 证件类型, 默认社会统一信用代码  NATIONAL_LEGAL_MERGE:统一社会信用代码，NATIONAL_LEGAL：营业执照号码
	CertType *string `json:"cert_type,omitempty" xml:"cert_type,omitempty"`
}

func (s CompanyTwoMetaInfo) String() string {
	return tea.Prettify(s)
}

func (s CompanyTwoMetaInfo) GoString() string {
	return s.String()
}

func (s *CompanyTwoMetaInfo) SetCertName(v string) *CompanyTwoMetaInfo {
	s.CertName = &v
	return s
}

func (s *CompanyTwoMetaInfo) SetCertNo(v string) *CompanyTwoMetaInfo {
	s.CertNo = &v
	return s
}

func (s *CompanyTwoMetaInfo) SetCertType(v string) *CompanyTwoMetaInfo {
	s.CertType = &v
	return s
}

// 签字人
type ContractFlowSigner struct {
	// 签署顺序
	SignOrder *int64 `json:"sign_order,omitempty" xml:"sign_order,omitempty"`
	// 签署状态, 0-待签, 1-未签, 2-已签 3-待审批 4-拒签
	SignStatus *int64 `json:"sign_status,omitempty" xml:"sign_status,omitempty"`
	// 签署人账号id
	SignerAccountId *string `json:"signer_account_id,omitempty" xml:"signer_account_id,omitempty"`
	// 签署人名称
	SignerName *string `json:"signer_name,omitempty" xml:"signer_name,omitempty"`
	// 签署人是否已实名
	SignerRealName *bool `json:"signer_real_name,omitempty" xml:"signer_real_name,omitempty"`
	// 签约主体的账号id（个人/企业）；如签署人本签署，则返回签署人账号id；如签署人代机构签署，则返回机构账号id
	SignerAuthorizedAccountId *string `json:"signer_authorized_account_id,omitempty" xml:"signer_authorized_account_id,omitempty"`
	// 签约主体名称
	SignerAuthorizedAccountName *string `json:"signer_authorized_account_name,omitempty" xml:"signer_authorized_account_name,omitempty"`
	// 签署主体是否已实名
	SignerAuthorizedAccountRealName *bool `json:"signer_authorized_account_real_name,omitempty" xml:"signer_authorized_account_real_name,omitempty"`
	// 签署主体类型, 0-个人, 1-机构
	SignerAuthorizedAccountType *int64 `json:"signer_authorized_account_type,omitempty" xml:"signer_authorized_account_type,omitempty"`
	// 本次签署任务对应指定的第三方业务流水号id，当存在多个第三方业务流水号id时，返回多个，并逗号隔开
	ThirdOrderNo *string `json:"third_order_no,omitempty" xml:"third_order_no,omitempty"`
}

func (s ContractFlowSigner) String() string {
	return tea.Prettify(s)
}

func (s ContractFlowSigner) GoString() string {
	return s.String()
}

func (s *ContractFlowSigner) SetSignOrder(v int64) *ContractFlowSigner {
	s.SignOrder = &v
	return s
}

func (s *ContractFlowSigner) SetSignStatus(v int64) *ContractFlowSigner {
	s.SignStatus = &v
	return s
}

func (s *ContractFlowSigner) SetSignerAccountId(v string) *ContractFlowSigner {
	s.SignerAccountId = &v
	return s
}

func (s *ContractFlowSigner) SetSignerName(v string) *ContractFlowSigner {
	s.SignerName = &v
	return s
}

func (s *ContractFlowSigner) SetSignerRealName(v bool) *ContractFlowSigner {
	s.SignerRealName = &v
	return s
}

func (s *ContractFlowSigner) SetSignerAuthorizedAccountId(v string) *ContractFlowSigner {
	s.SignerAuthorizedAccountId = &v
	return s
}

func (s *ContractFlowSigner) SetSignerAuthorizedAccountName(v string) *ContractFlowSigner {
	s.SignerAuthorizedAccountName = &v
	return s
}

func (s *ContractFlowSigner) SetSignerAuthorizedAccountRealName(v bool) *ContractFlowSigner {
	s.SignerAuthorizedAccountRealName = &v
	return s
}

func (s *ContractFlowSigner) SetSignerAuthorizedAccountType(v int64) *ContractFlowSigner {
	s.SignerAuthorizedAccountType = &v
	return s
}

func (s *ContractFlowSigner) SetThirdOrderNo(v string) *ContractFlowSigner {
	s.ThirdOrderNo = &v
	return s
}

// 普通代扣规则
type RepaymentOrderRequest struct {
	// 代扣触发时间，精确到毫秒
	// java.lang.System#currentTimeMillis()
	PayDate *int64 `json:"pay_date,omitempty" xml:"pay_date,omitempty" require:"true"`
	// 代扣金额，整数 精确到分
	PayMoney *int64 `json:"pay_money,omitempty" xml:"pay_money,omitempty" require:"true"`
	// 是否用户签署成功后立即触发第一期代扣
	TriggerImmediately *int64 `json:"trigger_immediately,omitempty" xml:"trigger_immediately,omitempty"`
}

func (s RepaymentOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s RepaymentOrderRequest) GoString() string {
	return s.String()
}

func (s *RepaymentOrderRequest) SetPayDate(v int64) *RepaymentOrderRequest {
	s.PayDate = &v
	return s
}

func (s *RepaymentOrderRequest) SetPayMoney(v int64) *RepaymentOrderRequest {
	s.PayMoney = &v
	return s
}

func (s *RepaymentOrderRequest) SetTriggerImmediately(v int64) *RepaymentOrderRequest {
	s.TriggerImmediately = &v
	return s
}

// 用户与商家之间的协商记录
type ReplyDetailInfo struct {
	// 回复人名称
	ReplierName *string `json:"replier_name,omitempty" xml:"replier_name,omitempty" require:"true"`
	// 回复人角色 用户：USER 商家：MERCHANT 系统：SYSTEM 审核小二：AUDITOR 政府单位：GOVERNMENT
	ReplierRole *string `json:"replier_role,omitempty" xml:"replier_role,omitempty" require:"true"`
	// 回复时间
	//
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 回复内容
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
	// 回复图片
	Images []*string `json:"images,omitempty" xml:"images,omitempty" require:"true" type:"Repeated"`
}

func (s ReplyDetailInfo) String() string {
	return tea.Prettify(s)
}

func (s ReplyDetailInfo) GoString() string {
	return s.String()
}

func (s *ReplyDetailInfo) SetReplierName(v string) *ReplyDetailInfo {
	s.ReplierName = &v
	return s
}

func (s *ReplyDetailInfo) SetReplierRole(v string) *ReplyDetailInfo {
	s.ReplierRole = &v
	return s
}

func (s *ReplyDetailInfo) SetGmtCreate(v string) *ReplyDetailInfo {
	s.GmtCreate = &v
	return s
}

func (s *ReplyDetailInfo) SetContent(v string) *ReplyDetailInfo {
	s.Content = &v
	return s
}

func (s *ReplyDetailInfo) SetImages(v []*string) *ReplyDetailInfo {
	s.Images = v
	return s
}

// 一步创建签署流程的签署区信息
type OneStepSignField struct {
	// 签署操作人个人账号标识，即操作本次签署的个人
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 电子合同文件ID
	FileId *string `json:"file_id,omitempty" xml:"file_id,omitempty" require:"true"`
	// 签署区顺序，默认1,且不小于1，顺序越小越先处理
	Order *int64 `json:"order,omitempty" xml:"order,omitempty"`
	// 页码信息：当签署区signType为2时, 页码可以_-_分割, 例如1到15页，填"1-15"； 其他情况只能是数字；不指定xy坐标签署区可不填写
	PosPage *string `json:"pos_page,omitempty" xml:"pos_page,omitempty"`
	// x坐标
	PosX *string `json:"pos_x,omitempty" xml:"pos_x,omitempty"`
	// y坐标
	PosY *string `json:"pos_y,omitempty" xml:"pos_y,omitempty"`
	// 印章id
	SealId *string `json:"seal_id,omitempty" xml:"seal_id,omitempty"`
	// 是否需要添加签署日期，0-禁止 1-必须 2-不限制，默认0
	SignDateBeanType *int64 `json:"sign_date_bean_type,omitempty" xml:"sign_date_bean_type,omitempty"`
	// 签章日期字体大小,默认12
	SignDateFontSize *int64 `json:"sign_date_font_size,omitempty" xml:"sign_date_font_size,omitempty"`
	// 签章日期格式，yyyy年MM月dd日
	SignDateFormat *string `json:"sign_date_format,omitempty" xml:"sign_date_format,omitempty"`
	// 页码信息，当signDateBeanType为1时，代表签署的印章必须展示签署日期，默认放在印章正下方，签署人可拖拽日期到当前页面的其他位置，如果发起方指定签署位置的同时，需要同时指定日期盖章位置，则需传入日期盖章页码（与印章页码相同），在传入X\Y坐标即可。
	SignDatePosPage *int64 `json:"sign_date_pos_page,omitempty" xml:"sign_date_pos_page,omitempty"`
	// 签章日期x坐标，默认0
	SignDatePosX *string `json:"sign_date_pos_x,omitempty" xml:"sign_date_pos_x,omitempty"`
	// 签章日期y坐标，默认0
	SignDatePosY *string `json:"sign_date_pos_y,omitempty" xml:"sign_date_pos_y,omitempty"`
	// 签署类型，1-单页签署，2-骑缝签署，默认1
	SignType *int64 `json:"sign_type,omitempty" xml:"sign_type,omitempty"`
	// 第三方业务流水号id，保证相同签署人、相同签约主体、相同签署顺序的任务，对应的第三方业务流水id唯一，默认空
	ThirdOrderNo *string `json:"third_order_no,omitempty" xml:"third_order_no,omitempty"`
	// 签署区宽，默认印章宽度
	Width *string `json:"width,omitempty" xml:"width,omitempty"`
	// 是否自动执行签署，默认false，false-手动签署，true-自动签署
	AutoExecute *bool `json:"auto_execute,omitempty" xml:"auto_execute,omitempty"`
}

func (s OneStepSignField) String() string {
	return tea.Prettify(s)
}

func (s OneStepSignField) GoString() string {
	return s.String()
}

func (s *OneStepSignField) SetAccountId(v string) *OneStepSignField {
	s.AccountId = &v
	return s
}

func (s *OneStepSignField) SetFileId(v string) *OneStepSignField {
	s.FileId = &v
	return s
}

func (s *OneStepSignField) SetOrder(v int64) *OneStepSignField {
	s.Order = &v
	return s
}

func (s *OneStepSignField) SetPosPage(v string) *OneStepSignField {
	s.PosPage = &v
	return s
}

func (s *OneStepSignField) SetPosX(v string) *OneStepSignField {
	s.PosX = &v
	return s
}

func (s *OneStepSignField) SetPosY(v string) *OneStepSignField {
	s.PosY = &v
	return s
}

func (s *OneStepSignField) SetSealId(v string) *OneStepSignField {
	s.SealId = &v
	return s
}

func (s *OneStepSignField) SetSignDateBeanType(v int64) *OneStepSignField {
	s.SignDateBeanType = &v
	return s
}

func (s *OneStepSignField) SetSignDateFontSize(v int64) *OneStepSignField {
	s.SignDateFontSize = &v
	return s
}

func (s *OneStepSignField) SetSignDateFormat(v string) *OneStepSignField {
	s.SignDateFormat = &v
	return s
}

func (s *OneStepSignField) SetSignDatePosPage(v int64) *OneStepSignField {
	s.SignDatePosPage = &v
	return s
}

func (s *OneStepSignField) SetSignDatePosX(v string) *OneStepSignField {
	s.SignDatePosX = &v
	return s
}

func (s *OneStepSignField) SetSignDatePosY(v string) *OneStepSignField {
	s.SignDatePosY = &v
	return s
}

func (s *OneStepSignField) SetSignType(v int64) *OneStepSignField {
	s.SignType = &v
	return s
}

func (s *OneStepSignField) SetThirdOrderNo(v string) *OneStepSignField {
	s.ThirdOrderNo = &v
	return s
}

func (s *OneStepSignField) SetWidth(v string) *OneStepSignField {
	s.Width = &v
	return s
}

func (s *OneStepSignField) SetAutoExecute(v bool) *OneStepSignField {
	s.AutoExecute = &v
	return s
}

// 缴费账户信息
type PaymentInfo struct {
	// 收款账户-户名 不超过64字符
	AccountName *string `json:"account_name,omitempty" xml:"account_name,omitempty" require:"true"`
	// 收款账户-开户银行 不超过64字符
	BankName *string `json:"bank_name,omitempty" xml:"bank_name,omitempty" require:"true"`
	// 收款账户-收款账户银行账号 不超过64字符
	BankNum *string `json:"bank_num,omitempty" xml:"bank_num,omitempty" require:"true"`
}

func (s PaymentInfo) String() string {
	return tea.Prettify(s)
}

func (s PaymentInfo) GoString() string {
	return s.String()
}

func (s *PaymentInfo) SetAccountName(v string) *PaymentInfo {
	s.AccountName = &v
	return s
}

func (s *PaymentInfo) SetBankName(v string) *PaymentInfo {
	s.BankName = &v
	return s
}

func (s *PaymentInfo) SetBankNum(v string) *PaymentInfo {
	s.BankNum = &v
	return s
}

// 电子合同存证初始化信息
type ContractNotaryInitInfo struct {
	// 本阶段存证内容哈希值
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
	// 签署文件份数
	FileNum *int64 `json:"file_num,omitempty" xml:"file_num,omitempty" require:"true"`
	// 签署流程发起人ID
	Initiator *string `json:"initiator,omitempty" xml:"initiator,omitempty" require:"true"`
	// 签署人ID（支持多个，不同ID间用“,”分隔开），由于流程中签署人可后续追加，最终以ContractNotaryFinishInfo中的singatories信息为准。
	Signatories *string `json:"signatories,omitempty" xml:"signatories,omitempty"`
	// 存证阶段发生时间，UNIX时间戳(毫秒)
	Timestamp *string `json:"timestamp,omitempty" xml:"timestamp,omitempty" require:"true"`
	// 存证凭据，仅在批量核验时需要填写
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
	// 发起人名称
	IntiatorName *string `json:"intiator_name,omitempty" xml:"intiator_name,omitempty"`
	// 签署人名称,多个逗号隔开
	SignatorNames *string `json:"signator_names,omitempty" xml:"signator_names,omitempty"`
	// 详细文件哈希
	DetailInfoFileHash *string `json:"detail_info_file_hash,omitempty" xml:"detail_info_file_hash,omitempty"`
}

func (s ContractNotaryInitInfo) String() string {
	return tea.Prettify(s)
}

func (s ContractNotaryInitInfo) GoString() string {
	return s.String()
}

func (s *ContractNotaryInitInfo) SetContent(v string) *ContractNotaryInitInfo {
	s.Content = &v
	return s
}

func (s *ContractNotaryInitInfo) SetFileNum(v int64) *ContractNotaryInitInfo {
	s.FileNum = &v
	return s
}

func (s *ContractNotaryInitInfo) SetInitiator(v string) *ContractNotaryInitInfo {
	s.Initiator = &v
	return s
}

func (s *ContractNotaryInitInfo) SetSignatories(v string) *ContractNotaryInitInfo {
	s.Signatories = &v
	return s
}

func (s *ContractNotaryInitInfo) SetTimestamp(v string) *ContractNotaryInitInfo {
	s.Timestamp = &v
	return s
}

func (s *ContractNotaryInitInfo) SetTxHash(v string) *ContractNotaryInitInfo {
	s.TxHash = &v
	return s
}

func (s *ContractNotaryInitInfo) SetIntiatorName(v string) *ContractNotaryInitInfo {
	s.IntiatorName = &v
	return s
}

func (s *ContractNotaryInitInfo) SetSignatorNames(v string) *ContractNotaryInitInfo {
	s.SignatorNames = &v
	return s
}

func (s *ContractNotaryInitInfo) SetDetailInfoFileHash(v string) *ContractNotaryInitInfo {
	s.DetailInfoFileHash = &v
	return s
}

// 可信存证身份识别信息
type Identity struct {
	// 经办人姓名，企业认证选填
	Agent *string `json:"agent,omitempty" xml:"agent,omitempty"`
	// 经办人身份证，企业认证选填
	AgentId *string `json:"agent_id,omitempty" xml:"agent_id,omitempty"`
	// 用户名称
	CertName *string `json:"cert_name,omitempty" xml:"cert_name,omitempty" require:"true"`
	// 证件号
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 证件类型，个人只支持身份证IDENTITY_CARD，企业支持UNIFIED_SOCIAL_CREDIT_CODE（统一社会信用代码）和ENTERPRISE_REGISTERED_NUMBER（企业工商注册号）
	CertType *string `json:"cert_type,omitempty" xml:"cert_type,omitempty" require:"true"`
	// 法人姓名，企业认证必选
	LegalPerson *string `json:"legal_person,omitempty" xml:"legal_person,omitempty"`
	// 法人身份证，企业认证必选
	LegalPersonId *string `json:"legal_person_id,omitempty" xml:"legal_person_id,omitempty"`
	// 用户手机号码
	MobileNo *string `json:"mobile_no,omitempty" xml:"mobile_no,omitempty"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 用户类型，PERSON或者ENTERPRISE
	UserType *string `json:"user_type,omitempty" xml:"user_type,omitempty" require:"true"`
	// 经办人证件类型，企业认证选填
	AgentCertType *string `json:"agent_cert_type,omitempty" xml:"agent_cert_type,omitempty"`
	// 法人证件类型，企业认证必选
	LegalPersonCertType *string `json:"legal_person_cert_type,omitempty" xml:"legal_person_cert_type,omitempty"`
}

func (s Identity) String() string {
	return tea.Prettify(s)
}

func (s Identity) GoString() string {
	return s.String()
}

func (s *Identity) SetAgent(v string) *Identity {
	s.Agent = &v
	return s
}

func (s *Identity) SetAgentId(v string) *Identity {
	s.AgentId = &v
	return s
}

func (s *Identity) SetCertName(v string) *Identity {
	s.CertName = &v
	return s
}

func (s *Identity) SetCertNo(v string) *Identity {
	s.CertNo = &v
	return s
}

func (s *Identity) SetCertType(v string) *Identity {
	s.CertType = &v
	return s
}

func (s *Identity) SetLegalPerson(v string) *Identity {
	s.LegalPerson = &v
	return s
}

func (s *Identity) SetLegalPersonId(v string) *Identity {
	s.LegalPersonId = &v
	return s
}

func (s *Identity) SetMobileNo(v string) *Identity {
	s.MobileNo = &v
	return s
}

func (s *Identity) SetProperties(v string) *Identity {
	s.Properties = &v
	return s
}

func (s *Identity) SetUserType(v string) *Identity {
	s.UserType = &v
	return s
}

func (s *Identity) SetAgentCertType(v string) *Identity {
	s.AgentCertType = &v
	return s
}

func (s *Identity) SetLegalPersonCertType(v string) *Identity {
	s.LegalPersonCertType = &v
	return s
}

// 调解沟通联系人
type ContactInfo struct {
	// 联系人-姓名
	ContactName *string `json:"contact_name,omitempty" xml:"contact_name,omitempty" require:"true"`
	// 联系人-电话
	ContactPhone *string `json:"contact_phone,omitempty" xml:"contact_phone,omitempty" require:"true"`
	// 联系人-电子邮箱
	ContactEmail *string `json:"contact_email,omitempty" xml:"contact_email,omitempty" require:"true"`
}

func (s ContactInfo) String() string {
	return tea.Prettify(s)
}

func (s ContactInfo) GoString() string {
	return s.String()
}

func (s *ContactInfo) SetContactName(v string) *ContactInfo {
	s.ContactName = &v
	return s
}

func (s *ContactInfo) SetContactPhone(v string) *ContactInfo {
	s.ContactPhone = &v
	return s
}

func (s *ContactInfo) SetContactEmail(v string) *ContactInfo {
	s.ContactEmail = &v
	return s
}

// 存证证明的证书信息
type CertificateInfo struct {
	// 存证证明的证书内容的SHA256哈希值
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty" require:"true"`
	// 存证证明的证书文件名
	ResourceName *string `json:"resource_name,omitempty" xml:"resource_name,omitempty" require:"true"`
	// 存证证明的证书下载地址
	ResourceUrl *string `json:"resource_url,omitempty" xml:"resource_url,omitempty" require:"true"`
}

func (s CertificateInfo) String() string {
	return tea.Prettify(s)
}

func (s CertificateInfo) GoString() string {
	return s.String()
}

func (s *CertificateInfo) SetHash(v string) *CertificateInfo {
	s.Hash = &v
	return s
}

func (s *CertificateInfo) SetResourceName(v string) *CertificateInfo {
	s.ResourceName = &v
	return s
}

func (s *CertificateInfo) SetResourceUrl(v string) *CertificateInfo {
	s.ResourceUrl = &v
	return s
}

// 完结的分期信息
type BclFinishInstallment struct {
	// 期次号
	TermNo *int64 `json:"term_no,omitempty" xml:"term_no,omitempty" require:"true"`
}

func (s BclFinishInstallment) String() string {
	return tea.Prettify(s)
}

func (s BclFinishInstallment) GoString() string {
	return s.String()
}

func (s *BclFinishInstallment) SetTermNo(v int64) *BclFinishInstallment {
	s.TermNo = &v
	return s
}

// 存证信息
type BclNotaryInfo struct {
	// 存证类型
	// 1.文件：FILE
	// 2.文本：TEXT
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 存证内容
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// 文件下载链接
	// 存证类型为FILE时此参数必填；
	FileUrl *string `json:"file_url,omitempty" xml:"file_url,omitempty"`
	// 存证内容hash
	ContentHash *string `json:"content_hash,omitempty" xml:"content_hash,omitempty" require:"true"`
	// 存证哈希
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
	// 存证阶段描述：
	// 1.上传履约流水：UPLOAD_PROMISE_FLOW
	// 2.上传物流信息：UPLOAD_LOGISTIC_INFO
	// 3.合同签署后文件存证：SIGNED_CONTRACT_FILE
	// 4.租赁订单履约中存证：BCL_ORDER_PROMISING
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
}

func (s BclNotaryInfo) String() string {
	return tea.Prettify(s)
}

func (s BclNotaryInfo) GoString() string {
	return s.String()
}

func (s *BclNotaryInfo) SetType(v string) *BclNotaryInfo {
	s.Type = &v
	return s
}

func (s *BclNotaryInfo) SetContent(v string) *BclNotaryInfo {
	s.Content = &v
	return s
}

func (s *BclNotaryInfo) SetFileUrl(v string) *BclNotaryInfo {
	s.FileUrl = &v
	return s
}

func (s *BclNotaryInfo) SetContentHash(v string) *BclNotaryInfo {
	s.ContentHash = &v
	return s
}

func (s *BclNotaryInfo) SetTxHash(v string) *BclNotaryInfo {
	s.TxHash = &v
	return s
}

func (s *BclNotaryInfo) SetPhase(v string) *BclNotaryInfo {
	s.Phase = &v
	return s
}

// 采购订单信息
type ApplySupplierOrderProductOutput struct {
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 链上采购单id
	PurOrderId *string `json:"pur_order_id,omitempty" xml:"pur_order_id,omitempty" require:"true"`
	// 待采购：READY_DELIVER
	// 已采购：DELIVERED
	// 已拒发：REJECTED
	// 已退货：RETURNED
	// 已取消：CANCELED
	PurOrderStatus *string `json:"pur_order_status,omitempty" xml:"pur_order_status,omitempty" require:"true"`
	// 供应商id
	SupplierId *string `json:"supplier_id,omitempty" xml:"supplier_id,omitempty"`
}

func (s ApplySupplierOrderProductOutput) String() string {
	return tea.Prettify(s)
}

func (s ApplySupplierOrderProductOutput) GoString() string {
	return s.String()
}

func (s *ApplySupplierOrderProductOutput) SetOrderId(v string) *ApplySupplierOrderProductOutput {
	s.OrderId = &v
	return s
}

func (s *ApplySupplierOrderProductOutput) SetPurOrderId(v string) *ApplySupplierOrderProductOutput {
	s.PurOrderId = &v
	return s
}

func (s *ApplySupplierOrderProductOutput) SetPurOrderStatus(v string) *ApplySupplierOrderProductOutput {
	s.PurOrderStatus = &v
	return s
}

func (s *ApplySupplierOrderProductOutput) SetSupplierId(v string) *ApplySupplierOrderProductOutput {
	s.SupplierId = &v
	return s
}

// 平台方企业信息
type ContractPlatformOrganizationApplication struct {
	// 证件号
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty" require:"true"`
	// 证件类型
	IdType *string `json:"id_type,omitempty" xml:"id_type,omitempty" require:"true"`
	// 企业法人名称
	OrgLegalName *string `json:"org_legal_name,omitempty" xml:"org_legal_name,omitempty"`
	// 企业法人证件号
	OrgLegalIdNumber *string `json:"org_legal_id_number,omitempty" xml:"org_legal_id_number,omitempty"`
	// 机构名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
}

func (s ContractPlatformOrganizationApplication) String() string {
	return tea.Prettify(s)
}

func (s ContractPlatformOrganizationApplication) GoString() string {
	return s.String()
}

func (s *ContractPlatformOrganizationApplication) SetIdNumber(v string) *ContractPlatformOrganizationApplication {
	s.IdNumber = &v
	return s
}

func (s *ContractPlatformOrganizationApplication) SetIdType(v string) *ContractPlatformOrganizationApplication {
	s.IdType = &v
	return s
}

func (s *ContractPlatformOrganizationApplication) SetOrgLegalName(v string) *ContractPlatformOrganizationApplication {
	s.OrgLegalName = &v
	return s
}

func (s *ContractPlatformOrganizationApplication) SetOrgLegalIdNumber(v string) *ContractPlatformOrganizationApplication {
	s.OrgLegalIdNumber = &v
	return s
}

func (s *ContractPlatformOrganizationApplication) SetName(v string) *ContractPlatformOrganizationApplication {
	s.Name = &v
	return s
}

// 签署区列表包含印章id数据
type ContractSignFieldSealId struct {
	// 文件file id
	FileId *string `json:"file_id,omitempty" xml:"file_id,omitempty"`
	// 流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty"`
	// 印章id
	SealId *string `json:"seal_id,omitempty" xml:"seal_id,omitempty"`
	// 印章类型，支持多种类型时逗号分割，0-手绘印章，1-模版印章，为空不限制
	SealType *string `json:"seal_type,omitempty" xml:"seal_type,omitempty"`
	// 签署区Id
	SignfieldId *string `json:"signfield_id,omitempty" xml:"signfield_id,omitempty"`
}

func (s ContractSignFieldSealId) String() string {
	return tea.Prettify(s)
}

func (s ContractSignFieldSealId) GoString() string {
	return s.String()
}

func (s *ContractSignFieldSealId) SetFileId(v string) *ContractSignFieldSealId {
	s.FileId = &v
	return s
}

func (s *ContractSignFieldSealId) SetFlowId(v string) *ContractSignFieldSealId {
	s.FlowId = &v
	return s
}

func (s *ContractSignFieldSealId) SetSealId(v string) *ContractSignFieldSealId {
	s.SealId = &v
	return s
}

func (s *ContractSignFieldSealId) SetSealType(v string) *ContractSignFieldSealId {
	s.SealType = &v
	return s
}

func (s *ContractSignFieldSealId) SetSignfieldId(v string) *ContractSignFieldSealId {
	s.SignfieldId = &v
	return s
}

// 协商记录
type ReplayDetailInfo struct {
	// 回复人名称
	ReplierName *string `json:"replier_name,omitempty" xml:"replier_name,omitempty" require:"true"`
	// 回复人角色
	// 用户：USER
	// 商家：MERCHANT
	// 系统：SYSTEM
	// 审核小二：AUDITOR
	// 政府单位：GOVERNMENT
	ReplierRole *string `json:"replier_role,omitempty" xml:"replier_role,omitempty" require:"true"`
	// 回复时间
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 回复内容
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
	// 回复图片
	Images []*string `json:"images,omitempty" xml:"images,omitempty" require:"true" type:"Repeated"`
}

func (s ReplayDetailInfo) String() string {
	return tea.Prettify(s)
}

func (s ReplayDetailInfo) GoString() string {
	return s.String()
}

func (s *ReplayDetailInfo) SetReplierName(v string) *ReplayDetailInfo {
	s.ReplierName = &v
	return s
}

func (s *ReplayDetailInfo) SetReplierRole(v string) *ReplayDetailInfo {
	s.ReplierRole = &v
	return s
}

func (s *ReplayDetailInfo) SetGmtCreate(v string) *ReplayDetailInfo {
	s.GmtCreate = &v
	return s
}

func (s *ReplayDetailInfo) SetContent(v string) *ReplayDetailInfo {
	s.Content = &v
	return s
}

func (s *ReplayDetailInfo) SetImages(v []*string) *ReplayDetailInfo {
	s.Images = v
	return s
}

// 文件模板中的输入项组件
type ContractTemplateStructComponent struct {
	// 填充字体,默认1，1-宋体，2-新宋体,4-黑体，5-楷体
	Font *int64 `json:"font,omitempty" xml:"font,omitempty"`
	// 填充字体大小,默认12
	FontSize *string `json:"font_size,omitempty" xml:"font_size,omitempty"`
	// 输入项组件高度
	Height *string `json:"height,omitempty" xml:"height,omitempty"`
	// 输入项组件id，使用时可用id填充，为空时表示添加，不为空时表示修改
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// 模板下输入项组件唯一标识，使用模板时也可用根据key值填充
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// 输入项组件显示名称
	Label *string `json:"label,omitempty" xml:"label,omitempty"`
	// 输入项组件type=2,type=3时填充格式校验规则;数字格式如：#,#00.0# 日期格式如： yyyy-MM-dd
	Limit *string `json:"limit,omitempty" xml:"limit,omitempty"`
	// 页码
	Page *int64 `json:"page,omitempty" xml:"page,omitempty"`
	// 是否必填，默认true
	Required *bool `json:"required,omitempty" xml:"required,omitempty"`
	// 字体颜色，默认#000000黑色
	TextColor *string `json:"text_color,omitempty" xml:"text_color,omitempty"`
	// 输入项组件类型，1-文本，2-数字,3-日期，6-签约区
	Type *int64 `json:"type,omitempty" xml:"type,omitempty"`
	// 输入项组件宽度
	Width *string `json:"width,omitempty" xml:"width,omitempty"`
	// x轴坐标，左下角为原点
	X *string `json:"x,omitempty" xml:"x,omitempty"`
	// y轴坐标，左下角为原点
	Y *string `json:"y,omitempty" xml:"y,omitempty"`
}

func (s ContractTemplateStructComponent) String() string {
	return tea.Prettify(s)
}

func (s ContractTemplateStructComponent) GoString() string {
	return s.String()
}

func (s *ContractTemplateStructComponent) SetFont(v int64) *ContractTemplateStructComponent {
	s.Font = &v
	return s
}

func (s *ContractTemplateStructComponent) SetFontSize(v string) *ContractTemplateStructComponent {
	s.FontSize = &v
	return s
}

func (s *ContractTemplateStructComponent) SetHeight(v string) *ContractTemplateStructComponent {
	s.Height = &v
	return s
}

func (s *ContractTemplateStructComponent) SetId(v string) *ContractTemplateStructComponent {
	s.Id = &v
	return s
}

func (s *ContractTemplateStructComponent) SetKey(v string) *ContractTemplateStructComponent {
	s.Key = &v
	return s
}

func (s *ContractTemplateStructComponent) SetLabel(v string) *ContractTemplateStructComponent {
	s.Label = &v
	return s
}

func (s *ContractTemplateStructComponent) SetLimit(v string) *ContractTemplateStructComponent {
	s.Limit = &v
	return s
}

func (s *ContractTemplateStructComponent) SetPage(v int64) *ContractTemplateStructComponent {
	s.Page = &v
	return s
}

func (s *ContractTemplateStructComponent) SetRequired(v bool) *ContractTemplateStructComponent {
	s.Required = &v
	return s
}

func (s *ContractTemplateStructComponent) SetTextColor(v string) *ContractTemplateStructComponent {
	s.TextColor = &v
	return s
}

func (s *ContractTemplateStructComponent) SetType(v int64) *ContractTemplateStructComponent {
	s.Type = &v
	return s
}

func (s *ContractTemplateStructComponent) SetWidth(v string) *ContractTemplateStructComponent {
	s.Width = &v
	return s
}

func (s *ContractTemplateStructComponent) SetX(v string) *ContractTemplateStructComponent {
	s.X = &v
	return s
}

func (s *ContractTemplateStructComponent) SetY(v string) *ContractTemplateStructComponent {
	s.Y = &v
	return s
}

// 可信时间信息结构
type TsrResponse struct {
	// 可信时间请求结果状态吗
	Code *string `json:"code,omitempty" xml:"code,omitempty" require:"true"`
	// hash后的信息
	HashedMessage *string `json:"hashed_message,omitempty" xml:"hashed_message,omitempty" require:"true"`
	// 哈希算法
	HashAlgorithm *string `json:"hash_algorithm,omitempty" xml:"hash_algorithm,omitempty" require:"true"`
	// 请求失败时候的错误信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 时间
	Ts *string `json:"ts,omitempty" xml:"ts,omitempty" require:"true"`
	// 精简后的时间戳完整编码（在校验时需要提交）
	Ctsr *string `json:"ctsr,omitempty" xml:"ctsr,omitempty" require:"true"`
	// 凭证序列号 （在校验的时需要先填写凭证编号）
	//
	Sn *string `json:"sn,omitempty" xml:"sn,omitempty" require:"true"`
}

func (s TsrResponse) String() string {
	return tea.Prettify(s)
}

func (s TsrResponse) GoString() string {
	return s.String()
}

func (s *TsrResponse) SetCode(v string) *TsrResponse {
	s.Code = &v
	return s
}

func (s *TsrResponse) SetHashedMessage(v string) *TsrResponse {
	s.HashedMessage = &v
	return s
}

func (s *TsrResponse) SetHashAlgorithm(v string) *TsrResponse {
	s.HashAlgorithm = &v
	return s
}

func (s *TsrResponse) SetMessage(v string) *TsrResponse {
	s.Message = &v
	return s
}

func (s *TsrResponse) SetTs(v string) *TsrResponse {
	s.Ts = &v
	return s
}

func (s *TsrResponse) SetCtsr(v string) *TsrResponse {
	s.Ctsr = &v
	return s
}

func (s *TsrResponse) SetSn(v string) *TsrResponse {
	s.Sn = &v
	return s
}

// 融资租赁中IOT设备详情
type LeaseIotItemInfo struct {
	// 证据的时间
	Date *string `json:"date,omitempty" xml:"date,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 证据的txHash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
	// 证据的原始数据，默认为空或加密状态，除非调用方为授权用户（如出资方等
	RawData *string `json:"raw_data,omitempty" xml:"raw_data,omitempty" require:"true"`
}

func (s LeaseIotItemInfo) String() string {
	return tea.Prettify(s)
}

func (s LeaseIotItemInfo) GoString() string {
	return s.String()
}

func (s *LeaseIotItemInfo) SetDate(v string) *LeaseIotItemInfo {
	s.Date = &v
	return s
}

func (s *LeaseIotItemInfo) SetTxHash(v string) *LeaseIotItemInfo {
	s.TxHash = &v
	return s
}

func (s *LeaseIotItemInfo) SetRawData(v string) *LeaseIotItemInfo {
	s.RawData = &v
	return s
}

// 见证流程文档确认数据
type WitnessConfirmData struct {
	// 文档fileKey
	DocFileKey *string `json:"doc_file_key,omitempty" xml:"doc_file_key,omitempty"`
	// 文档摘要算法，SHA256
	HashAlgorithm *string `json:"hash_algorithm,omitempty" xml:"hash_algorithm,omitempty" require:"true"`
	// 签署后文档摘要值
	SignedHash *string `json:"signed_hash,omitempty" xml:"signed_hash,omitempty" require:"true"`
	// 第三方文档id
	ThirdDocId *string `json:"third_doc_id,omitempty" xml:"third_doc_id,omitempty" require:"true"`
}

func (s WitnessConfirmData) String() string {
	return tea.Prettify(s)
}

func (s WitnessConfirmData) GoString() string {
	return s.String()
}

func (s *WitnessConfirmData) SetDocFileKey(v string) *WitnessConfirmData {
	s.DocFileKey = &v
	return s
}

func (s *WitnessConfirmData) SetHashAlgorithm(v string) *WitnessConfirmData {
	s.HashAlgorithm = &v
	return s
}

func (s *WitnessConfirmData) SetSignedHash(v string) *WitnessConfirmData {
	s.SignedHash = &v
	return s
}

func (s *WitnessConfirmData) SetThirdDocId(v string) *WitnessConfirmData {
	s.ThirdDocId = &v
	return s
}

// 智能合同个人账号信息
type ContractAccount struct {
}

func (s ContractAccount) String() string {
	return tea.Prettify(s)
}

func (s ContractAccount) GoString() string {
	return s.String()
}

// 司法调解基础参数
type JudicialMediationBaseParamInfo struct {
	// 委托调解时长(天), 仅支持:30,60,90
	MediationDayLimit *int64 `json:"mediation_day_limit,omitempty" xml:"mediation_day_limit,omitempty" require:"true"`
	// 调解总标的金额
	MediationTotalAmount *string `json:"mediation_total_amount,omitempty" xml:"mediation_total_amount,omitempty" require:"true"`
	// 可接受最低调解回款金额
	MinAmount *string `json:"min_amount,omitempty" xml:"min_amount,omitempty" require:"true"`
}

func (s JudicialMediationBaseParamInfo) String() string {
	return tea.Prettify(s)
}

func (s JudicialMediationBaseParamInfo) GoString() string {
	return s.String()
}

func (s *JudicialMediationBaseParamInfo) SetMediationDayLimit(v int64) *JudicialMediationBaseParamInfo {
	s.MediationDayLimit = &v
	return s
}

func (s *JudicialMediationBaseParamInfo) SetMediationTotalAmount(v string) *JudicialMediationBaseParamInfo {
	s.MediationTotalAmount = &v
	return s
}

func (s *JudicialMediationBaseParamInfo) SetMinAmount(v string) *JudicialMediationBaseParamInfo {
	s.MinAmount = &v
	return s
}

type CallbackArbitrationStatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 案件文书号
	AcceptanceNumber *string `json:"acceptance_number,omitempty" xml:"acceptance_number,omitempty"`
	// 案件编号
	CaseNo *string `json:"case_no,omitempty" xml:"case_no,omitempty" require:"true"`
	// 确认时间时间戳
	ConfirmTime *int64 `json:"confirm_time,omitempty" xml:"confirm_time,omitempty"`
	// 预处理案号
	PreacceptanceNumber *string `json:"preacceptance_number,omitempty" xml:"preacceptance_number,omitempty"`
	// 发送时间时间戳
	SendTime *int64 `json:"send_time,omitempty" xml:"send_time,omitempty"`
	// 案件状态
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
}

func (s CallbackArbitrationStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s CallbackArbitrationStatusRequest) GoString() string {
	return s.String()
}

func (s *CallbackArbitrationStatusRequest) SetAuthToken(v string) *CallbackArbitrationStatusRequest {
	s.AuthToken = &v
	return s
}

func (s *CallbackArbitrationStatusRequest) SetProductInstanceId(v string) *CallbackArbitrationStatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CallbackArbitrationStatusRequest) SetAcceptanceNumber(v string) *CallbackArbitrationStatusRequest {
	s.AcceptanceNumber = &v
	return s
}

func (s *CallbackArbitrationStatusRequest) SetCaseNo(v string) *CallbackArbitrationStatusRequest {
	s.CaseNo = &v
	return s
}

func (s *CallbackArbitrationStatusRequest) SetConfirmTime(v int64) *CallbackArbitrationStatusRequest {
	s.ConfirmTime = &v
	return s
}

func (s *CallbackArbitrationStatusRequest) SetPreacceptanceNumber(v string) *CallbackArbitrationStatusRequest {
	s.PreacceptanceNumber = &v
	return s
}

func (s *CallbackArbitrationStatusRequest) SetSendTime(v int64) *CallbackArbitrationStatusRequest {
	s.SendTime = &v
	return s
}

func (s *CallbackArbitrationStatusRequest) SetStatus(v string) *CallbackArbitrationStatusRequest {
	s.Status = &v
	return s
}

type CallbackArbitrationStatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CallbackArbitrationStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s CallbackArbitrationStatusResponse) GoString() string {
	return s.String()
}

func (s *CallbackArbitrationStatusResponse) SetReqMsgId(v string) *CallbackArbitrationStatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CallbackArbitrationStatusResponse) SetResultCode(v string) *CallbackArbitrationStatusResponse {
	s.ResultCode = &v
	return s
}

func (s *CallbackArbitrationStatusResponse) SetResultMsg(v string) *CallbackArbitrationStatusResponse {
	s.ResultMsg = &v
	return s
}

type CallbackArbitrationSignstatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 案件号
	CaseNo *string `json:"case_no,omitempty" xml:"case_no,omitempty" require:"true"`
	// 签署文件代码 01 申请书 04 撤案申请书
	DocCode *string `json:"doc_code,omitempty" xml:"doc_code,omitempty" require:"true"`
	// 处理结果码 10000成功 其余都是签署失败
	ResCode *string `json:"res_code,omitempty" xml:"res_code,omitempty" require:"true"`
	// 失败原因
	Message *string `json:"message,omitempty" xml:"message,omitempty" require:"true"`
	// 发送时间 yyyy-MM-dd
	SendTime *string `json:"send_time,omitempty" xml:"send_time,omitempty" require:"true"`
	// 签名,采用公钥验签
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty" require:"true"`
}

func (s CallbackArbitrationSignstatusRequest) String() string {
	return tea.Prettify(s)
}

func (s CallbackArbitrationSignstatusRequest) GoString() string {
	return s.String()
}

func (s *CallbackArbitrationSignstatusRequest) SetAuthToken(v string) *CallbackArbitrationSignstatusRequest {
	s.AuthToken = &v
	return s
}

func (s *CallbackArbitrationSignstatusRequest) SetProductInstanceId(v string) *CallbackArbitrationSignstatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CallbackArbitrationSignstatusRequest) SetCaseNo(v string) *CallbackArbitrationSignstatusRequest {
	s.CaseNo = &v
	return s
}

func (s *CallbackArbitrationSignstatusRequest) SetDocCode(v string) *CallbackArbitrationSignstatusRequest {
	s.DocCode = &v
	return s
}

func (s *CallbackArbitrationSignstatusRequest) SetResCode(v string) *CallbackArbitrationSignstatusRequest {
	s.ResCode = &v
	return s
}

func (s *CallbackArbitrationSignstatusRequest) SetMessage(v string) *CallbackArbitrationSignstatusRequest {
	s.Message = &v
	return s
}

func (s *CallbackArbitrationSignstatusRequest) SetSendTime(v string) *CallbackArbitrationSignstatusRequest {
	s.SendTime = &v
	return s
}

func (s *CallbackArbitrationSignstatusRequest) SetSignature(v string) *CallbackArbitrationSignstatusRequest {
	s.Signature = &v
	return s
}

type CallbackArbitrationSignstatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否处理回调成功 true成功
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CallbackArbitrationSignstatusResponse) String() string {
	return tea.Prettify(s)
}

func (s CallbackArbitrationSignstatusResponse) GoString() string {
	return s.String()
}

func (s *CallbackArbitrationSignstatusResponse) SetReqMsgId(v string) *CallbackArbitrationSignstatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CallbackArbitrationSignstatusResponse) SetResultCode(v string) *CallbackArbitrationSignstatusResponse {
	s.ResultCode = &v
	return s
}

func (s *CallbackArbitrationSignstatusResponse) SetResultMsg(v string) *CallbackArbitrationSignstatusResponse {
	s.ResultMsg = &v
	return s
}

func (s *CallbackArbitrationSignstatusResponse) SetResult(v string) *CallbackArbitrationSignstatusResponse {
	s.Result = &v
	return s
}

type AddBclLogisticinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 租赁订单ID
	// 最大长度：32
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true" maxLength:"32"`
	// 物流状态
	// 1.已发货：SHIPPED
	// 2.已签收：SIGNED
	LogisticStatus *string `json:"logistic_status,omitempty" xml:"logistic_status,omitempty" require:"true" maxLength:"16"`
	// 物流照片网关文件ID
	// 先调用文件上传的接口,这里填上传后返回的fileid
	LogisticsFileId *string `json:"logistics_file_id,omitempty" xml:"logistics_file_id,omitempty" maxLength:"64"`
	// 签收记录,网关文件ID
	// 先调用文件上传的接口,这里填上传后返回的fileid
	ArriveConfirmFileId *string `json:"arrive_confirm_file_id,omitempty" xml:"arrive_confirm_file_id,omitempty" maxLength:"64"`
	// 用户签收时间
	// 示例：2023-06-27T10:50:23+08:00
	ArriveConfirmTime *string `json:"arrive_confirm_time,omitempty" xml:"arrive_confirm_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 物流公司简称
	LogisticCompanyName *string `json:"logistic_company_name,omitempty" xml:"logistic_company_name,omitempty" require:"true" maxLength:"32"`
	// 物流公司code：
	// 1.圆通速递：YTO
	// 2.韵达快递：YUNDA
	// 3.顺丰速运：SF
	// 4.EMS：EMS
	// 5.申通快递：STO
	// 6.中通快递：ZTO
	// 7.天天快递：TTKDEX
	// 8.全峰快递：QFKD
	// 9.中铁物流：ZTKY
	// 10.其他：OTHER
	LogisticCompanyCode *string `json:"logistic_company_code,omitempty" xml:"logistic_company_code,omitempty" require:"true" maxLength:"32"`
	// 物流订单ID
	// 最大长度64
	LogisticsOrderId *string `json:"logistics_order_id,omitempty" xml:"logistics_order_id,omitempty" require:"true" maxLength:"64"`
	// 物流发货时间
	// 示例：2023-06-27T10:50:23+08:00
	DeliverTime *string `json:"deliver_time,omitempty" xml:"deliver_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 租赁状态
	// LEASE,租赁
	// RETURN_LEASE,退租
	LeaseType *string `json:"lease_type,omitempty" xml:"lease_type,omitempty" require:"true" maxLength:"16"`
	// 发货地址
	DeliverAddress *string `json:"deliver_address,omitempty" xml:"deliver_address,omitempty" require:"true" maxLength:"512"`
	// 收货地址
	ArriveAddress *string `json:"arrive_address,omitempty" xml:"arrive_address,omitempty" require:"true" maxLength:"512"`
	// 收货人姓名
	ArriveName *string `json:"arrive_name,omitempty" xml:"arrive_name,omitempty" require:"true" maxLength:"128"`
	// 收货人联系电话
	ArriveMobile *string `json:"arrive_mobile,omitempty" xml:"arrive_mobile,omitempty" require:"true" maxLength:"32"`
}

func (s AddBclLogisticinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s AddBclLogisticinfoRequest) GoString() string {
	return s.String()
}

func (s *AddBclLogisticinfoRequest) SetAuthToken(v string) *AddBclLogisticinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *AddBclLogisticinfoRequest) SetProductInstanceId(v string) *AddBclLogisticinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AddBclLogisticinfoRequest) SetOrderId(v string) *AddBclLogisticinfoRequest {
	s.OrderId = &v
	return s
}

func (s *AddBclLogisticinfoRequest) SetLogisticStatus(v string) *AddBclLogisticinfoRequest {
	s.LogisticStatus = &v
	return s
}

func (s *AddBclLogisticinfoRequest) SetLogisticsFileId(v string) *AddBclLogisticinfoRequest {
	s.LogisticsFileId = &v
	return s
}

func (s *AddBclLogisticinfoRequest) SetArriveConfirmFileId(v string) *AddBclLogisticinfoRequest {
	s.ArriveConfirmFileId = &v
	return s
}

func (s *AddBclLogisticinfoRequest) SetArriveConfirmTime(v string) *AddBclLogisticinfoRequest {
	s.ArriveConfirmTime = &v
	return s
}

func (s *AddBclLogisticinfoRequest) SetLogisticCompanyName(v string) *AddBclLogisticinfoRequest {
	s.LogisticCompanyName = &v
	return s
}

func (s *AddBclLogisticinfoRequest) SetLogisticCompanyCode(v string) *AddBclLogisticinfoRequest {
	s.LogisticCompanyCode = &v
	return s
}

func (s *AddBclLogisticinfoRequest) SetLogisticsOrderId(v string) *AddBclLogisticinfoRequest {
	s.LogisticsOrderId = &v
	return s
}

func (s *AddBclLogisticinfoRequest) SetDeliverTime(v string) *AddBclLogisticinfoRequest {
	s.DeliverTime = &v
	return s
}

func (s *AddBclLogisticinfoRequest) SetLeaseType(v string) *AddBclLogisticinfoRequest {
	s.LeaseType = &v
	return s
}

func (s *AddBclLogisticinfoRequest) SetDeliverAddress(v string) *AddBclLogisticinfoRequest {
	s.DeliverAddress = &v
	return s
}

func (s *AddBclLogisticinfoRequest) SetArriveAddress(v string) *AddBclLogisticinfoRequest {
	s.ArriveAddress = &v
	return s
}

func (s *AddBclLogisticinfoRequest) SetArriveName(v string) *AddBclLogisticinfoRequest {
	s.ArriveName = &v
	return s
}

func (s *AddBclLogisticinfoRequest) SetArriveMobile(v string) *AddBclLogisticinfoRequest {
	s.ArriveMobile = &v
	return s
}

type AddBclLogisticinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s AddBclLogisticinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s AddBclLogisticinfoResponse) GoString() string {
	return s.String()
}

func (s *AddBclLogisticinfoResponse) SetReqMsgId(v string) *AddBclLogisticinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddBclLogisticinfoResponse) SetResultCode(v string) *AddBclLogisticinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *AddBclLogisticinfoResponse) SetResultMsg(v string) *AddBclLogisticinfoResponse {
	s.ResultMsg = &v
	return s
}

type SubmitBclOrderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 租赁订单ID
	// 长度不超过32位
	// 订单状态为 待发起 PRE_SUBMIT 才可以调用
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true" maxLength:"32"`
}

func (s SubmitBclOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitBclOrderRequest) GoString() string {
	return s.String()
}

func (s *SubmitBclOrderRequest) SetAuthToken(v string) *SubmitBclOrderRequest {
	s.AuthToken = &v
	return s
}

func (s *SubmitBclOrderRequest) SetProductInstanceId(v string) *SubmitBclOrderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SubmitBclOrderRequest) SetOrderId(v string) *SubmitBclOrderRequest {
	s.OrderId = &v
	return s
}

type SubmitBclOrderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
}

func (s SubmitBclOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitBclOrderResponse) GoString() string {
	return s.String()
}

func (s *SubmitBclOrderResponse) SetReqMsgId(v string) *SubmitBclOrderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SubmitBclOrderResponse) SetResultCode(v string) *SubmitBclOrderResponse {
	s.ResultCode = &v
	return s
}

func (s *SubmitBclOrderResponse) SetResultMsg(v string) *SubmitBclOrderResponse {
	s.ResultMsg = &v
	return s
}

func (s *SubmitBclOrderResponse) SetOrderId(v string) *SubmitBclOrderResponse {
	s.OrderId = &v
	return s
}

type CreateBclOrderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单外部id 商家关联自己的订单,长度不超过64位
	OrderOuterId *string `json:"order_outer_id,omitempty" xml:"order_outer_id,omitempty" require:"true" maxLength:"64"`
	// 商家租赁订单创建时间
	// 长度不超过32位
	// 示例：2023-06-27T10:50:23+08:00
	OrderCreateTime *string `json:"order_create_time,omitempty" xml:"order_create_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 承租人用户信息
	UserInfo *BclUserInfo `json:"user_info,omitempty" xml:"user_info,omitempty" require:"true"`
	// 到期形式
	// DUE_BUYOUT 到期买断
	// DUE_RETURN 到期归还
	DueMode *string `json:"due_mode,omitempty" xml:"due_mode,omitempty" require:"true" maxLength:"16"`
	// 租金总额，单位：分
	// 最小值需大于0
	TotalRentMoney *int64 `json:"total_rent_money,omitempty" xml:"total_rent_money,omitempty" require:"true" minimum:"1"`
	// 租期，单位：月
	// 最小值需大于0
	RentTerm *int64 `json:"rent_term,omitempty" xml:"rent_term,omitempty" require:"true" minimum:"1"`
	// 订单租期单位，
	// 1.月：MONTH
	// 例如：rent_term入参12，rent_unit入参MONTH代表租期12个月
	RentUnit *string `json:"rent_unit,omitempty" xml:"rent_unit,omitempty" require:"true" maxLength:"16"`
	// 到期买断价，单位：分
	// 到期金额，最小值需大于0，若为买断形式传买断金额，否则传到期归还金额
	BuyOutPrice *int64 `json:"buy_out_price,omitempty" xml:"buy_out_price,omitempty" minimum:"1"`
	// 芝麻信用订单免押金额，单位：分
	// 最小值需大于0
	DepositFree *int64 `json:"deposit_free,omitempty" xml:"deposit_free,omitempty" minimum:"1"`
	// 芝麻信用实际预授权金额，单位：分
	// 最小值需大于0
	AcutalPreAuthFree *int64 `json:"acutal_pre_auth_free,omitempty" xml:"acutal_pre_auth_free,omitempty" minimum:"1"`
	// 代扣协议号
	// 网商代扣和预授权代扣必填，长度不超过64位
	MybankAgreementNo *string `json:"mybank_agreement_no,omitempty" xml:"mybank_agreement_no,omitempty" maxLength:"64"`
	// 网商代扣受理订单号
	// 网商代扣必填，长度不超过64位
	MybankAgreementOrderId *string `json:"mybank_agreement_order_id,omitempty" xml:"mybank_agreement_order_id,omitempty" maxLength:"64"`
	// 租金支付方式
	// 1.网商代扣：MY_BANK_PROXY_WITHHOLDING
	// 2.预授权代扣：PRE_AUTHORIZATION_WITHHOLDING
	// 3.租赁代扣：PROXY_WITHHOLDING
	OrderWithholdType *string `json:"order_withhold_type,omitempty" xml:"order_withhold_type,omitempty" require:"true" maxLength:"32"`
	// 首付款金额 单位分
	DownPayment *int64 `json:"down_payment,omitempty" xml:"down_payment,omitempty" minimum:"1"`
	// 承诺详情
	// 按期数从小到大且连续排序
	PromiseDetails []*BclCreatePromiseDetailInfo `json:"promise_details,omitempty" xml:"promise_details,omitempty" type:"Repeated"`
	// 物流方式
	// 1.邮寄：POST
	// 2.线下自取：OFFLINE
	LogisticType *string `json:"logistic_type,omitempty" xml:"logistic_type,omitempty" require:"true" maxLength:"16"`
	// 商品列表
	ProductInfos []*BclOrderProductInfo `json:"product_infos,omitempty" xml:"product_infos,omitempty" require:"true" type:"Repeated"`
	// 需要使用的增值服务
	// 1.实名：REAL_PERSON
	// 2.风控：RISK
	// 3.租赁合同：CONTRACT
	// 实人和合同服务使用最长超时时间为72小时
	ServiceTypes []*string `json:"service_types,omitempty" xml:"service_types,omitempty" type:"Repeated"`
	// 用户下单时的ip地址
	// 如果可选服务选择了风控，必须填写，长度不超过32位
	UserIp *string `json:"user_ip,omitempty" xml:"user_ip,omitempty" maxLength:"32"`
	// 承租人实人认证完成后回跳地址
	// 比如商户小程序下单地址，选择实人认证服务时必填
	RealPersonReturnUrl *string `json:"real_person_return_url,omitempty" xml:"real_person_return_url,omitempty" maxLength:"512"`
	// 签署流程信息
	// 当service_types为包含CONTRACT时或order_withhold_type为PROXY_WITHHOLDING时必填
	ContractFlowInfo *BclContractFlowInfo `json:"contract_flow_info,omitempty" xml:"contract_flow_info,omitempty"`
	// 是否不需要融资：
	// 1.明确这笔订单不需要融资：true
	// 2.该笔订单后续可能融资也可能不融资：false
	// 注意：标明不需要融资可以提升代扣回款速度
	NoneFinancing *bool `json:"none_financing,omitempty" xml:"none_financing,omitempty"`
}

func (s CreateBclOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBclOrderRequest) GoString() string {
	return s.String()
}

func (s *CreateBclOrderRequest) SetAuthToken(v string) *CreateBclOrderRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateBclOrderRequest) SetProductInstanceId(v string) *CreateBclOrderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateBclOrderRequest) SetOrderOuterId(v string) *CreateBclOrderRequest {
	s.OrderOuterId = &v
	return s
}

func (s *CreateBclOrderRequest) SetOrderCreateTime(v string) *CreateBclOrderRequest {
	s.OrderCreateTime = &v
	return s
}

func (s *CreateBclOrderRequest) SetUserInfo(v *BclUserInfo) *CreateBclOrderRequest {
	s.UserInfo = v
	return s
}

func (s *CreateBclOrderRequest) SetDueMode(v string) *CreateBclOrderRequest {
	s.DueMode = &v
	return s
}

func (s *CreateBclOrderRequest) SetTotalRentMoney(v int64) *CreateBclOrderRequest {
	s.TotalRentMoney = &v
	return s
}

func (s *CreateBclOrderRequest) SetRentTerm(v int64) *CreateBclOrderRequest {
	s.RentTerm = &v
	return s
}

func (s *CreateBclOrderRequest) SetRentUnit(v string) *CreateBclOrderRequest {
	s.RentUnit = &v
	return s
}

func (s *CreateBclOrderRequest) SetBuyOutPrice(v int64) *CreateBclOrderRequest {
	s.BuyOutPrice = &v
	return s
}

func (s *CreateBclOrderRequest) SetDepositFree(v int64) *CreateBclOrderRequest {
	s.DepositFree = &v
	return s
}

func (s *CreateBclOrderRequest) SetAcutalPreAuthFree(v int64) *CreateBclOrderRequest {
	s.AcutalPreAuthFree = &v
	return s
}

func (s *CreateBclOrderRequest) SetMybankAgreementNo(v string) *CreateBclOrderRequest {
	s.MybankAgreementNo = &v
	return s
}

func (s *CreateBclOrderRequest) SetMybankAgreementOrderId(v string) *CreateBclOrderRequest {
	s.MybankAgreementOrderId = &v
	return s
}

func (s *CreateBclOrderRequest) SetOrderWithholdType(v string) *CreateBclOrderRequest {
	s.OrderWithholdType = &v
	return s
}

func (s *CreateBclOrderRequest) SetDownPayment(v int64) *CreateBclOrderRequest {
	s.DownPayment = &v
	return s
}

func (s *CreateBclOrderRequest) SetPromiseDetails(v []*BclCreatePromiseDetailInfo) *CreateBclOrderRequest {
	s.PromiseDetails = v
	return s
}

func (s *CreateBclOrderRequest) SetLogisticType(v string) *CreateBclOrderRequest {
	s.LogisticType = &v
	return s
}

func (s *CreateBclOrderRequest) SetProductInfos(v []*BclOrderProductInfo) *CreateBclOrderRequest {
	s.ProductInfos = v
	return s
}

func (s *CreateBclOrderRequest) SetServiceTypes(v []*string) *CreateBclOrderRequest {
	s.ServiceTypes = v
	return s
}

func (s *CreateBclOrderRequest) SetUserIp(v string) *CreateBclOrderRequest {
	s.UserIp = &v
	return s
}

func (s *CreateBclOrderRequest) SetRealPersonReturnUrl(v string) *CreateBclOrderRequest {
	s.RealPersonReturnUrl = &v
	return s
}

func (s *CreateBclOrderRequest) SetContractFlowInfo(v *BclContractFlowInfo) *CreateBclOrderRequest {
	s.ContractFlowInfo = v
	return s
}

func (s *CreateBclOrderRequest) SetNoneFinancing(v bool) *CreateBclOrderRequest {
	s.NoneFinancing = &v
	return s
}

type CreateBclOrderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 租赁定义,全局唯一,串联整个租赁订单
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
}

func (s CreateBclOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBclOrderResponse) GoString() string {
	return s.String()
}

func (s *CreateBclOrderResponse) SetReqMsgId(v string) *CreateBclOrderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateBclOrderResponse) SetResultCode(v string) *CreateBclOrderResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateBclOrderResponse) SetResultMsg(v string) *CreateBclOrderResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateBclOrderResponse) SetOrderId(v string) *CreateBclOrderResponse {
	s.OrderId = &v
	return s
}

type QueryBclOrderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id,长度不超过32位
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true" maxLength:"32"`
}

func (s QueryBclOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBclOrderRequest) GoString() string {
	return s.String()
}

func (s *QueryBclOrderRequest) SetAuthToken(v string) *QueryBclOrderRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBclOrderRequest) SetProductInstanceId(v string) *QueryBclOrderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBclOrderRequest) SetOrderId(v string) *QueryBclOrderRequest {
	s.OrderId = &v
	return s
}

type QueryBclOrderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单信息
	OrderInfo *BclOrderInfo `json:"order_info,omitempty" xml:"order_info,omitempty"`
	// 实人信息
	CertifyInfo *BclCertifyInfo `json:"certify_info,omitempty" xml:"certify_info,omitempty"`
	// 风控分数
	// 分数0-100，小数2位，分数越高风险越大
	RiskScore *string `json:"risk_score,omitempty" xml:"risk_score,omitempty"`
	// 用户身份信息和支付宝ID的核验
	// 1.匹配，PASS
	// 2.不匹配，UN_PASS
	IdentityVerification *string `json:"identity_verification,omitempty" xml:"identity_verification,omitempty"`
	// 合同信息
	ContractInfo *BclContractInfo `json:"contract_info,omitempty" xml:"contract_info,omitempty"`
	// 承诺信息
	PromiseInfo *BclPromiseInfo `json:"promise_info,omitempty" xml:"promise_info,omitempty"`
	// 履约详情
	RentalInfos []*BclRentalInfo `json:"rental_infos,omitempty" xml:"rental_infos,omitempty" type:"Repeated"`
	// 物流信息
	LogisticsInfos []*BclLogisticsInfo `json:"logistics_infos,omitempty" xml:"logistics_infos,omitempty" type:"Repeated"`
	// 存证信息
	NotaryInfos []*BclNotaryInfo `json:"notary_infos,omitempty" xml:"notary_infos,omitempty" type:"Repeated"`
}

func (s QueryBclOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBclOrderResponse) GoString() string {
	return s.String()
}

func (s *QueryBclOrderResponse) SetReqMsgId(v string) *QueryBclOrderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBclOrderResponse) SetResultCode(v string) *QueryBclOrderResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBclOrderResponse) SetResultMsg(v string) *QueryBclOrderResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBclOrderResponse) SetOrderInfo(v *BclOrderInfo) *QueryBclOrderResponse {
	s.OrderInfo = v
	return s
}

func (s *QueryBclOrderResponse) SetCertifyInfo(v *BclCertifyInfo) *QueryBclOrderResponse {
	s.CertifyInfo = v
	return s
}

func (s *QueryBclOrderResponse) SetRiskScore(v string) *QueryBclOrderResponse {
	s.RiskScore = &v
	return s
}

func (s *QueryBclOrderResponse) SetIdentityVerification(v string) *QueryBclOrderResponse {
	s.IdentityVerification = &v
	return s
}

func (s *QueryBclOrderResponse) SetContractInfo(v *BclContractInfo) *QueryBclOrderResponse {
	s.ContractInfo = v
	return s
}

func (s *QueryBclOrderResponse) SetPromiseInfo(v *BclPromiseInfo) *QueryBclOrderResponse {
	s.PromiseInfo = v
	return s
}

func (s *QueryBclOrderResponse) SetRentalInfos(v []*BclRentalInfo) *QueryBclOrderResponse {
	s.RentalInfos = v
	return s
}

func (s *QueryBclOrderResponse) SetLogisticsInfos(v []*BclLogisticsInfo) *QueryBclOrderResponse {
	s.LogisticsInfos = v
	return s
}

func (s *QueryBclOrderResponse) SetNotaryInfos(v []*BclNotaryInfo) *QueryBclOrderResponse {
	s.NotaryInfos = v
	return s
}

type UploadBclPerformanceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单编号ID,长度不超过32位
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true" maxLength:"32"`
	// 租期编号，如：1表示第一期;
	// 目前还款支持最大期数为120期；
	Period *int64 `json:"period,omitempty" xml:"period,omitempty" require:"true" maximum:"120" minimum:"1"`
	// 租金归还金额，单位精确到分。如：56309表示563.09元
	Amount *int64 `json:"amount,omitempty" xml:"amount,omitempty" require:"true" minimum:"1"`
	// 租金归还时间
	// 示例：2023-06-27T10:50:23+08:00
	Time *string `json:"time,omitempty" xml:"time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 归还方式
	// 1.主动还款：ACTIVE_REPAYMENT
	// 2.网商委托代扣：MY_BANK_PROXY_WITHHOLDING
	// 3.预授权代扣：PRE_AUTHORIZATION_WITHHOLDING
	Way *string `json:"way,omitempty" xml:"way,omitempty" require:"true" maxLength:"32"`
	// 还款凭证类型
	// 1.平台代收（客户主动还款）：PLATFORM_COLLECTION
	// 2.网商银行：MY_BANK
	// 3.支付宝：ALIPAY
	// 4.其他：OTHER
	VoucherType *string `json:"voucher_type,omitempty" xml:"voucher_type,omitempty" require:"true" maxLength:"32"`
	// 还款凭证编号,
	// 如支付宝还款时，为支付宝流水编号
	VoucherSerial *string `json:"voucher_serial,omitempty" xml:"voucher_serial,omitempty" require:"true" maxLength:"64"`
	// 手续费，单位分。如：128则表示手续费为12.8元；
	// 说明：如通过预授权、代扣的方式归还，该值必填
	Premium *int64 `json:"premium,omitempty" xml:"premium,omitempty" minimum:"1"`
}

func (s UploadBclPerformanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadBclPerformanceRequest) GoString() string {
	return s.String()
}

func (s *UploadBclPerformanceRequest) SetAuthToken(v string) *UploadBclPerformanceRequest {
	s.AuthToken = &v
	return s
}

func (s *UploadBclPerformanceRequest) SetProductInstanceId(v string) *UploadBclPerformanceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UploadBclPerformanceRequest) SetOrderId(v string) *UploadBclPerformanceRequest {
	s.OrderId = &v
	return s
}

func (s *UploadBclPerformanceRequest) SetPeriod(v int64) *UploadBclPerformanceRequest {
	s.Period = &v
	return s
}

func (s *UploadBclPerformanceRequest) SetAmount(v int64) *UploadBclPerformanceRequest {
	s.Amount = &v
	return s
}

func (s *UploadBclPerformanceRequest) SetTime(v string) *UploadBclPerformanceRequest {
	s.Time = &v
	return s
}

func (s *UploadBclPerformanceRequest) SetWay(v string) *UploadBclPerformanceRequest {
	s.Way = &v
	return s
}

func (s *UploadBclPerformanceRequest) SetVoucherType(v string) *UploadBclPerformanceRequest {
	s.VoucherType = &v
	return s
}

func (s *UploadBclPerformanceRequest) SetVoucherSerial(v string) *UploadBclPerformanceRequest {
	s.VoucherSerial = &v
	return s
}

func (s *UploadBclPerformanceRequest) SetPremium(v int64) *UploadBclPerformanceRequest {
	s.Premium = &v
	return s
}

type UploadBclPerformanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否处理成功,true表示上传成功，false表示上传失败。
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UploadBclPerformanceResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadBclPerformanceResponse) GoString() string {
	return s.String()
}

func (s *UploadBclPerformanceResponse) SetReqMsgId(v string) *UploadBclPerformanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UploadBclPerformanceResponse) SetResultCode(v string) *UploadBclPerformanceResponse {
	s.ResultCode = &v
	return s
}

func (s *UploadBclPerformanceResponse) SetResultMsg(v string) *UploadBclPerformanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *UploadBclPerformanceResponse) SetSuccess(v bool) *UploadBclPerformanceResponse {
	s.Success = &v
	return s
}

type CreateBclProductRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 商品编码
	// 最大长度不能超过32
	ProductOuterId *string `json:"product_outer_id,omitempty" xml:"product_outer_id,omitempty" require:"true" maxLength:"32"`
	// 商品版本;
	// 每个商品的编码+版本 唯一确认一个产品信息，必须为自然数，如"0","1","10"等
	ProductVersion *string `json:"product_version,omitempty" xml:"product_version,omitempty" require:"true" maxLength:"8"`
	// 商品名称，
	// 长度不超过64位
	ProductName *string `json:"product_name,omitempty" xml:"product_name,omitempty" require:"true" maxLength:"64"`
	// 商品官网价格,单位为分。如：856400，表示8564元，大于0
	ProductPrice *int64 `json:"product_price,omitempty" xml:"product_price,omitempty" require:"true" minimum:"1"`
	// 一级行业代码，
	// 本期暂时只支持 3C，后续扩充
	MainClass *string `json:"main_class,omitempty" xml:"main_class,omitempty" require:"true" maxLength:"32"`
	// 二级行业代码
	// 1.手机：3c_mobile
	// 2.电脑：3c_pc
	// 3.摄影：3c_camera
	// 4.办公设备：3c_office
	// 5.3C其他：3c_other
	SubClass *string `json:"sub_class,omitempty" xml:"sub_class,omitempty" require:"true" maxLength:"32"`
	// 供应商名称
	// 商品从供应商采购为供应商名称，否则为平台自己名称，最大长度不能超过64
	SupplierName *string `json:"supplier_name,omitempty" xml:"supplier_name,omitempty" require:"true" maxLength:"64"`
	// 供应商数字科技租户ID
	// 商品从供应商采购为供应商租户ID，否则为平台自己租户ID
	SupplierId *string `json:"supplier_id,omitempty" xml:"supplier_id,omitempty" require:"true" maxLength:"8"`
	// 安装服务费，单位为分，150000则表示1500元；
	// 不能为负数；
	InstallPrice *int64 `json:"install_price,omitempty" xml:"install_price,omitempty" minimum:"1"`
	// 商品来源
	// 长度不超过32位
	// 1.供应商：SUPPLIER
	// 2.租赁机构：LEASING_COMPANY
	ProductOrigin *string `json:"product_origin,omitempty" xml:"product_origin,omitempty" require:"true" maxLength:"32"`
	// 实际库存量，不能为负数
	RealStock *int64 `json:"real_stock,omitempty" xml:"real_stock,omitempty" require:"true" minimum:"1"`
	// 预估出货量,不能为负数
	EstimatedShipment *int64 `json:"estimated_shipment,omitempty" xml:"estimated_shipment,omitempty" require:"true" minimum:"1"`
	// 商品详情
	// 最大长度不能超过256
	ProductDetailInfo *string `json:"product_detail_info,omitempty" xml:"product_detail_info,omitempty" require:"true" maxLength:"256"`
	// 商品链接
	// 最大长度不能超过256
	ProductUrl *string `json:"product_url,omitempty" xml:"product_url,omitempty" require:"true" maxLength:"256"`
	// 商品品牌
	// 最大长度不能超过64
	ProductBrand *string `json:"product_brand,omitempty" xml:"product_brand,omitempty" require:"true" maxLength:"64"`
	// 产品规格
	// 识别物品的编号，最大长度不能超过256
	ProductModel *string `json:"product_model,omitempty" xml:"product_model,omitempty" require:"true" maxLength:"256"`
	// 免押金额，单位：分
	// 示例：15600表示免押金额为156元，最小值需大于0
	DepositPrice *int64 `json:"deposit_price,omitempty" xml:"deposit_price,omitempty" minimum:"1"`
}

func (s CreateBclProductRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBclProductRequest) GoString() string {
	return s.String()
}

func (s *CreateBclProductRequest) SetAuthToken(v string) *CreateBclProductRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateBclProductRequest) SetProductInstanceId(v string) *CreateBclProductRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateBclProductRequest) SetProductOuterId(v string) *CreateBclProductRequest {
	s.ProductOuterId = &v
	return s
}

func (s *CreateBclProductRequest) SetProductVersion(v string) *CreateBclProductRequest {
	s.ProductVersion = &v
	return s
}

func (s *CreateBclProductRequest) SetProductName(v string) *CreateBclProductRequest {
	s.ProductName = &v
	return s
}

func (s *CreateBclProductRequest) SetProductPrice(v int64) *CreateBclProductRequest {
	s.ProductPrice = &v
	return s
}

func (s *CreateBclProductRequest) SetMainClass(v string) *CreateBclProductRequest {
	s.MainClass = &v
	return s
}

func (s *CreateBclProductRequest) SetSubClass(v string) *CreateBclProductRequest {
	s.SubClass = &v
	return s
}

func (s *CreateBclProductRequest) SetSupplierName(v string) *CreateBclProductRequest {
	s.SupplierName = &v
	return s
}

func (s *CreateBclProductRequest) SetSupplierId(v string) *CreateBclProductRequest {
	s.SupplierId = &v
	return s
}

func (s *CreateBclProductRequest) SetInstallPrice(v int64) *CreateBclProductRequest {
	s.InstallPrice = &v
	return s
}

func (s *CreateBclProductRequest) SetProductOrigin(v string) *CreateBclProductRequest {
	s.ProductOrigin = &v
	return s
}

func (s *CreateBclProductRequest) SetRealStock(v int64) *CreateBclProductRequest {
	s.RealStock = &v
	return s
}

func (s *CreateBclProductRequest) SetEstimatedShipment(v int64) *CreateBclProductRequest {
	s.EstimatedShipment = &v
	return s
}

func (s *CreateBclProductRequest) SetProductDetailInfo(v string) *CreateBclProductRequest {
	s.ProductDetailInfo = &v
	return s
}

func (s *CreateBclProductRequest) SetProductUrl(v string) *CreateBclProductRequest {
	s.ProductUrl = &v
	return s
}

func (s *CreateBclProductRequest) SetProductBrand(v string) *CreateBclProductRequest {
	s.ProductBrand = &v
	return s
}

func (s *CreateBclProductRequest) SetProductModel(v string) *CreateBclProductRequest {
	s.ProductModel = &v
	return s
}

func (s *CreateBclProductRequest) SetDepositPrice(v int64) *CreateBclProductRequest {
	s.DepositPrice = &v
	return s
}

type CreateBclProductResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 商品ID
	// 租赁维护的商品ID，全局唯一，用户后面创建订单和商品查询
	ProductId *string `json:"product_id,omitempty" xml:"product_id,omitempty"`
}

func (s CreateBclProductResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBclProductResponse) GoString() string {
	return s.String()
}

func (s *CreateBclProductResponse) SetReqMsgId(v string) *CreateBclProductResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateBclProductResponse) SetResultCode(v string) *CreateBclProductResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateBclProductResponse) SetResultMsg(v string) *CreateBclProductResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateBclProductResponse) SetProductId(v string) *CreateBclProductResponse {
	s.ProductId = &v
	return s
}

type QueryBclProductRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 商品ID
	// 最大长度：32
	ProductId *string `json:"product_id,omitempty" xml:"product_id,omitempty" require:"true" maxLength:"32"`
}

func (s QueryBclProductRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBclProductRequest) GoString() string {
	return s.String()
}

func (s *QueryBclProductRequest) SetAuthToken(v string) *QueryBclProductRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBclProductRequest) SetProductInstanceId(v string) *QueryBclProductRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBclProductRequest) SetProductId(v string) *QueryBclProductRequest {
	s.ProductId = &v
	return s
}

type QueryBclProductResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 商品编码
	ProductOuterId *string `json:"product_outer_id,omitempty" xml:"product_outer_id,omitempty"`
	// 商品版本; 每个商品的编码+版本 唯一确认一个产品信息，必须为自然数，如"0","1","10"等
	ProductVersion *string `json:"product_version,omitempty" xml:"product_version,omitempty"`
	// 商品名称
	ProductName *string `json:"product_name,omitempty" xml:"product_name,omitempty"`
	// 商品官网价格，单位：分
	// 示例：856400，表示8564元，必须大于0
	ProductPrice *int64 `json:"product_price,omitempty" xml:"product_price,omitempty"`
	// 一级行业代码
	MainClass *string `json:"main_class,omitempty" xml:"main_class,omitempty"`
	// 二级行业代码
	SubClass *string `json:"sub_class,omitempty" xml:"sub_class,omitempty"`
	// 供应商名称
	// 商品从供应商采购为供应商名称，否则为平台自己名称，最大长度不能超过64
	SupplierName *string `json:"supplier_name,omitempty" xml:"supplier_name,omitempty"`
	// 供应商数字科技租户ID
	// 商品从供应商采购为供应商租户ID，否则为平台自己租户ID
	SupplierId *string `json:"supplier_id,omitempty" xml:"supplier_id,omitempty"`
	// 安装服务费，单位：分
	// 示例：150000则表示1500元，不能为负数
	InstallPrice *int64 `json:"install_price,omitempty" xml:"install_price,omitempty"`
	// 商品来源，如 传 SUPPLIER 则表示来源为供应商。 取值范围如下： 【SUPPLIER： 供应商】 【LEASING_COMPANY ：租赁机构】
	ProductOrigin *string `json:"product_origin,omitempty" xml:"product_origin,omitempty"`
	// 实际库存量
	RealStock *int64 `json:"real_stock,omitempty" xml:"real_stock,omitempty"`
	// 预估出货量
	EstimatedShipment *int64 `json:"estimated_shipment,omitempty" xml:"estimated_shipment,omitempty"`
	// 商品详情
	ProductDetailInfo *string `json:"product_detail_info,omitempty" xml:"product_detail_info,omitempty"`
	// 商品链接
	ProductUrl *string `json:"product_url,omitempty" xml:"product_url,omitempty"`
	// 商品品牌
	ProductBrand *string `json:"product_brand,omitempty" xml:"product_brand,omitempty"`
	// 产品规格
	// 识别物品的编号，最大长度不能超过256
	ProductModel *string `json:"product_model,omitempty" xml:"product_model,omitempty"`
	// 免押金额，单位：分
	// 示例：15600表示免押金额为156元，不能为负数
	DepositPrice *int64 `json:"deposit_price,omitempty" xml:"deposit_price,omitempty"`
}

func (s QueryBclProductResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBclProductResponse) GoString() string {
	return s.String()
}

func (s *QueryBclProductResponse) SetReqMsgId(v string) *QueryBclProductResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBclProductResponse) SetResultCode(v string) *QueryBclProductResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBclProductResponse) SetResultMsg(v string) *QueryBclProductResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBclProductResponse) SetProductOuterId(v string) *QueryBclProductResponse {
	s.ProductOuterId = &v
	return s
}

func (s *QueryBclProductResponse) SetProductVersion(v string) *QueryBclProductResponse {
	s.ProductVersion = &v
	return s
}

func (s *QueryBclProductResponse) SetProductName(v string) *QueryBclProductResponse {
	s.ProductName = &v
	return s
}

func (s *QueryBclProductResponse) SetProductPrice(v int64) *QueryBclProductResponse {
	s.ProductPrice = &v
	return s
}

func (s *QueryBclProductResponse) SetMainClass(v string) *QueryBclProductResponse {
	s.MainClass = &v
	return s
}

func (s *QueryBclProductResponse) SetSubClass(v string) *QueryBclProductResponse {
	s.SubClass = &v
	return s
}

func (s *QueryBclProductResponse) SetSupplierName(v string) *QueryBclProductResponse {
	s.SupplierName = &v
	return s
}

func (s *QueryBclProductResponse) SetSupplierId(v string) *QueryBclProductResponse {
	s.SupplierId = &v
	return s
}

func (s *QueryBclProductResponse) SetInstallPrice(v int64) *QueryBclProductResponse {
	s.InstallPrice = &v
	return s
}

func (s *QueryBclProductResponse) SetProductOrigin(v string) *QueryBclProductResponse {
	s.ProductOrigin = &v
	return s
}

func (s *QueryBclProductResponse) SetRealStock(v int64) *QueryBclProductResponse {
	s.RealStock = &v
	return s
}

func (s *QueryBclProductResponse) SetEstimatedShipment(v int64) *QueryBclProductResponse {
	s.EstimatedShipment = &v
	return s
}

func (s *QueryBclProductResponse) SetProductDetailInfo(v string) *QueryBclProductResponse {
	s.ProductDetailInfo = &v
	return s
}

func (s *QueryBclProductResponse) SetProductUrl(v string) *QueryBclProductResponse {
	s.ProductUrl = &v
	return s
}

func (s *QueryBclProductResponse) SetProductBrand(v string) *QueryBclProductResponse {
	s.ProductBrand = &v
	return s
}

func (s *QueryBclProductResponse) SetProductModel(v string) *QueryBclProductResponse {
	s.ProductModel = &v
	return s
}

func (s *QueryBclProductResponse) SetDepositPrice(v int64) *QueryBclProductResponse {
	s.DepositPrice = &v
	return s
}

type VerifyBclContractmetricRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 接口使用场景
	// - RESOURCE_CHECK, 权限与资源量校验
	// - METRIC，签署达到终态，资源量扣减
	ServiceType *string `json:"service_type,omitempty" xml:"service_type,omitempty" require:"true"`
	// 合同流程id，该接口返回的，该流程均为已完成
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty"`
	// 合同流程状态
	FlowStatus *int64 `json:"flow_status,omitempty" xml:"flow_status,omitempty"`
	// 租赁宝订单id
	BclOrderId *string `json:"bcl_order_id,omitempty" xml:"bcl_order_id,omitempty" require:"true"`
	// 8位租户英文id
	ContractTenantId *string `json:"contract_tenant_id,omitempty" xml:"contract_tenant_id,omitempty" require:"true"`
	// RESOURCE_CHECK必填，代扣总金额,单位为分
	TotalAmount *int64 `json:"total_amount,omitempty" xml:"total_amount,omitempty"`
	// 总期数，12
	TotalPeriod *int64 `json:"total_period,omitempty" xml:"total_period,omitempty"`
}

func (s VerifyBclContractmetricRequest) String() string {
	return tea.Prettify(s)
}

func (s VerifyBclContractmetricRequest) GoString() string {
	return s.String()
}

func (s *VerifyBclContractmetricRequest) SetAuthToken(v string) *VerifyBclContractmetricRequest {
	s.AuthToken = &v
	return s
}

func (s *VerifyBclContractmetricRequest) SetProductInstanceId(v string) *VerifyBclContractmetricRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *VerifyBclContractmetricRequest) SetServiceType(v string) *VerifyBclContractmetricRequest {
	s.ServiceType = &v
	return s
}

func (s *VerifyBclContractmetricRequest) SetFlowId(v string) *VerifyBclContractmetricRequest {
	s.FlowId = &v
	return s
}

func (s *VerifyBclContractmetricRequest) SetFlowStatus(v int64) *VerifyBclContractmetricRequest {
	s.FlowStatus = &v
	return s
}

func (s *VerifyBclContractmetricRequest) SetBclOrderId(v string) *VerifyBclContractmetricRequest {
	s.BclOrderId = &v
	return s
}

func (s *VerifyBclContractmetricRequest) SetContractTenantId(v string) *VerifyBclContractmetricRequest {
	s.ContractTenantId = &v
	return s
}

func (s *VerifyBclContractmetricRequest) SetTotalAmount(v int64) *VerifyBclContractmetricRequest {
	s.TotalAmount = &v
	return s
}

func (s *VerifyBclContractmetricRequest) SetTotalPeriod(v int64) *VerifyBclContractmetricRequest {
	s.TotalPeriod = &v
	return s
}

type VerifyBclContractmetricResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s VerifyBclContractmetricResponse) String() string {
	return tea.Prettify(s)
}

func (s VerifyBclContractmetricResponse) GoString() string {
	return s.String()
}

func (s *VerifyBclContractmetricResponse) SetReqMsgId(v string) *VerifyBclContractmetricResponse {
	s.ReqMsgId = &v
	return s
}

func (s *VerifyBclContractmetricResponse) SetResultCode(v string) *VerifyBclContractmetricResponse {
	s.ResultCode = &v
	return s
}

func (s *VerifyBclContractmetricResponse) SetResultMsg(v string) *VerifyBclContractmetricResponse {
	s.ResultMsg = &v
	return s
}

type GetBclUploadurlRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 文件名称（最长128个字符，需要带文件后缀，不包含中文）
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty" require:"true" maxLength:"128"`
}

func (s GetBclUploadurlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBclUploadurlRequest) GoString() string {
	return s.String()
}

func (s *GetBclUploadurlRequest) SetAuthToken(v string) *GetBclUploadurlRequest {
	s.AuthToken = &v
	return s
}

func (s *GetBclUploadurlRequest) SetProductInstanceId(v string) *GetBclUploadurlRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetBclUploadurlRequest) SetFileName(v string) *GetBclUploadurlRequest {
	s.FileName = &v
	return s
}

type GetBclUploadurlResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// OSS上传链接
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
	// 文件OSS ID
	FileId *string `json:"file_id,omitempty" xml:"file_id,omitempty"`
}

func (s GetBclUploadurlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBclUploadurlResponse) GoString() string {
	return s.String()
}

func (s *GetBclUploadurlResponse) SetReqMsgId(v string) *GetBclUploadurlResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetBclUploadurlResponse) SetResultCode(v string) *GetBclUploadurlResponse {
	s.ResultCode = &v
	return s
}

func (s *GetBclUploadurlResponse) SetResultMsg(v string) *GetBclUploadurlResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetBclUploadurlResponse) SetUrl(v string) *GetBclUploadurlResponse {
	s.Url = &v
	return s
}

func (s *GetBclUploadurlResponse) SetFileId(v string) *GetBclUploadurlResponse {
	s.FileId = &v
	return s
}

type UpdateBclPromiserepaymentRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单编号ID,长度不超过32位
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true" maxLength:"32"`
	// 租期编号，如：1表示第一期; 目前还款支持最大期数为120期；
	Period *int64 `json:"period,omitempty" xml:"period,omitempty" require:"true" maximum:"120" minimum:"1"`
}

func (s UpdateBclPromiserepaymentRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateBclPromiserepaymentRequest) GoString() string {
	return s.String()
}

func (s *UpdateBclPromiserepaymentRequest) SetAuthToken(v string) *UpdateBclPromiserepaymentRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateBclPromiserepaymentRequest) SetProductInstanceId(v string) *UpdateBclPromiserepaymentRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateBclPromiserepaymentRequest) SetOrderId(v string) *UpdateBclPromiserepaymentRequest {
	s.OrderId = &v
	return s
}

func (s *UpdateBclPromiserepaymentRequest) SetPeriod(v int64) *UpdateBclPromiserepaymentRequest {
	s.Period = &v
	return s
}

type UpdateBclPromiserepaymentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdateBclPromiserepaymentResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateBclPromiserepaymentResponse) GoString() string {
	return s.String()
}

func (s *UpdateBclPromiserepaymentResponse) SetReqMsgId(v string) *UpdateBclPromiserepaymentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateBclPromiserepaymentResponse) SetResultCode(v string) *UpdateBclPromiserepaymentResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateBclPromiserepaymentResponse) SetResultMsg(v string) *UpdateBclPromiserepaymentResponse {
	s.ResultMsg = &v
	return s
}

type CreateBclPayeeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 企业证件姓名
	CertName *string `json:"cert_name,omitempty" xml:"cert_name,omitempty" require:"true" maxLength:"96"`
	// 企业证件号
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true" maxLength:"32"`
	// 企业证件类型
	// unified_social_credit_code（统一社会信用代码）
	// enterprise_registered_number（企业工商注册号）
	CertType *string `json:"cert_type,omitempty" xml:"cert_type,omitempty" require:"true"`
	// 企业法定代表人名称
	LegalPersonCertName *string `json:"legal_person_cert_name,omitempty" xml:"legal_person_cert_name,omitempty" require:"true" maxLength:"32"`
	// 企业法定代表人证件号
	LegalPersonCertNo *string `json:"legal_person_cert_no,omitempty" xml:"legal_person_cert_no,omitempty" require:"true" maxLength:"32"`
}

func (s CreateBclPayeeRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBclPayeeRequest) GoString() string {
	return s.String()
}

func (s *CreateBclPayeeRequest) SetAuthToken(v string) *CreateBclPayeeRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateBclPayeeRequest) SetProductInstanceId(v string) *CreateBclPayeeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateBclPayeeRequest) SetCertName(v string) *CreateBclPayeeRequest {
	s.CertName = &v
	return s
}

func (s *CreateBclPayeeRequest) SetCertNo(v string) *CreateBclPayeeRequest {
	s.CertNo = &v
	return s
}

func (s *CreateBclPayeeRequest) SetCertType(v string) *CreateBclPayeeRequest {
	s.CertType = &v
	return s
}

func (s *CreateBclPayeeRequest) SetLegalPersonCertName(v string) *CreateBclPayeeRequest {
	s.LegalPersonCertName = &v
	return s
}

func (s *CreateBclPayeeRequest) SetLegalPersonCertNo(v string) *CreateBclPayeeRequest {
	s.LegalPersonCertNo = &v
	return s
}

type CreateBclPayeeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 收款方的ID，后续进行商家进件和创建订单需要用到。
	PayeeId *string `json:"payee_id,omitempty" xml:"payee_id,omitempty"`
}

func (s CreateBclPayeeResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBclPayeeResponse) GoString() string {
	return s.String()
}

func (s *CreateBclPayeeResponse) SetReqMsgId(v string) *CreateBclPayeeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateBclPayeeResponse) SetResultCode(v string) *CreateBclPayeeResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateBclPayeeResponse) SetResultMsg(v string) *CreateBclPayeeResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateBclPayeeResponse) SetPayeeId(v string) *CreateBclPayeeResponse {
	s.PayeeId = &v
	return s
}

type ApplyBclFinancingRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id,长度不超过32位
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 客户端token：
	// 幂等号，用来保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。clientToken只支持ASCII字符，且不能超过64个字符。更多详情，请参见如何保证幂等性。
	ClientToken *string `json:"client_token,omitempty" xml:"client_token,omitempty" require:"true"`
}

func (s ApplyBclFinancingRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyBclFinancingRequest) GoString() string {
	return s.String()
}

func (s *ApplyBclFinancingRequest) SetAuthToken(v string) *ApplyBclFinancingRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyBclFinancingRequest) SetProductInstanceId(v string) *ApplyBclFinancingRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyBclFinancingRequest) SetOrderId(v string) *ApplyBclFinancingRequest {
	s.OrderId = &v
	return s
}

func (s *ApplyBclFinancingRequest) SetClientToken(v string) *ApplyBclFinancingRequest {
	s.ClientToken = &v
	return s
}

type ApplyBclFinancingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 融资申请单号
	// 使用方可保存用于与租赁宝PLUS订单关联
	FinancingApplyNo *string `json:"financing_apply_no,omitempty" xml:"financing_apply_no,omitempty"`
}

func (s ApplyBclFinancingResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyBclFinancingResponse) GoString() string {
	return s.String()
}

func (s *ApplyBclFinancingResponse) SetReqMsgId(v string) *ApplyBclFinancingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyBclFinancingResponse) SetResultCode(v string) *ApplyBclFinancingResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyBclFinancingResponse) SetResultMsg(v string) *ApplyBclFinancingResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyBclFinancingResponse) SetFinancingApplyNo(v string) *ApplyBclFinancingResponse {
	s.FinancingApplyNo = &v
	return s
}

type QueryBclMerchantRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 入驻编号
	EnrollmentNo *string `json:"enrollment_no,omitempty" xml:"enrollment_no,omitempty" require:"true"`
}

func (s QueryBclMerchantRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBclMerchantRequest) GoString() string {
	return s.String()
}

func (s *QueryBclMerchantRequest) SetAuthToken(v string) *QueryBclMerchantRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBclMerchantRequest) SetProductInstanceId(v string) *QueryBclMerchantRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBclMerchantRequest) SetEnrollmentNo(v string) *QueryBclMerchantRequest {
	s.EnrollmentNo = &v
	return s
}

type QueryBclMerchantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 入驻状态：入驻中：EXEC（表示等待商家去支付宝平台签约）；SUCCESS：入驻成功；FAIL：入驻失败
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 是否需要使用租赁代扣
	NeedProxyWithholding *bool `json:"need_proxy_withholding,omitempty" xml:"need_proxy_withholding,omitempty"`
	// 入驻失败的原因，在入驻失败时才会有值
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty"`
}

func (s QueryBclMerchantResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBclMerchantResponse) GoString() string {
	return s.String()
}

func (s *QueryBclMerchantResponse) SetReqMsgId(v string) *QueryBclMerchantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBclMerchantResponse) SetResultCode(v string) *QueryBclMerchantResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBclMerchantResponse) SetResultMsg(v string) *QueryBclMerchantResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBclMerchantResponse) SetStatus(v string) *QueryBclMerchantResponse {
	s.Status = &v
	return s
}

func (s *QueryBclMerchantResponse) SetNeedProxyWithholding(v bool) *QueryBclMerchantResponse {
	s.NeedProxyWithholding = &v
	return s
}

func (s *QueryBclMerchantResponse) SetReason(v string) *QueryBclMerchantResponse {
	s.Reason = &v
	return s
}

type RegisterBclMerchantRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 商家实体名称
	// 要与证件的名称相同，会在用户签署代扣协议时或者支付宝扣款账单中展示，请规范填写，最大长度：128
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 商家实体别名
	// 会在用户签署代扣协议时或者支付宝扣款账单中展示，请规范填写，最大长度：128
	// 如果need_proxy_withholding为true则必填
	AliasName *string `json:"alias_name,omitempty" xml:"alias_name,omitempty"`
	// 商家实体类型：
	// 1.企业：ENTERPRISE
	// 当前暂时只支持企业
	MerchantType *string `json:"merchant_type,omitempty" xml:"merchant_type,omitempty" require:"true"`
	// 商家营业执照号
	// 最大长度20
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 法人名称
	// 最大长度64
	LegalName *string `json:"legal_name,omitempty" xml:"legal_name,omitempty" require:"true"`
	// 法人身份证号
	// 最大长度：18
	// 当前暂时只支持中国大陆个人身份证
	LegalCertNo *string `json:"legal_cert_no,omitempty" xml:"legal_cert_no,omitempty" require:"true"`
	// 商户联系人信息
	// 当前只支持一个联系人
	// 如果need_proxy_withholding为true则必填
	ContactInfos []*BclContactInfo `json:"contact_infos,omitempty" xml:"contact_infos,omitempty" type:"Repeated"`
	// 商家实体支付宝账号
	// 用作结算账号。本字段支付宝账号实名信息要求与商户名称cert_name同名，且是实名认证支付宝企业账户，最大长度：64
	// 如果need_proxy_withholding为true则必填
	AlipayLogonId *string `json:"alipay_logon_id,omitempty" xml:"alipay_logon_id,omitempty"`
	// 租赁经营类型
	// 1.数码/娱乐设备租赁：DIGITAL_LEASE
	// 2.共享充电宝及其他共享租赁：SHARE_LEASE
	// 3.汽车租赁：CAR_LEASE
	ManagementType *string `json:"management_type,omitempty" xml:"management_type,omitempty" require:"true"`
	// 是否需要使用租赁代扣
	// true 为需要使用
	// false 为不需要使用
	NeedProxyWithholding *bool `json:"need_proxy_withholding,omitempty" xml:"need_proxy_withholding,omitempty" require:"true"`
	// 客户端token：
	// 幂等号，用来保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。clientToken只支持ASCII字符，且不能超过64个字符。更多详情，请参见如何保证幂等性。
	ClientToken *string `json:"client_token,omitempty" xml:"client_token,omitempty" require:"true"`
}

func (s RegisterBclMerchantRequest) String() string {
	return tea.Prettify(s)
}

func (s RegisterBclMerchantRequest) GoString() string {
	return s.String()
}

func (s *RegisterBclMerchantRequest) SetAuthToken(v string) *RegisterBclMerchantRequest {
	s.AuthToken = &v
	return s
}

func (s *RegisterBclMerchantRequest) SetProductInstanceId(v string) *RegisterBclMerchantRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *RegisterBclMerchantRequest) SetName(v string) *RegisterBclMerchantRequest {
	s.Name = &v
	return s
}

func (s *RegisterBclMerchantRequest) SetAliasName(v string) *RegisterBclMerchantRequest {
	s.AliasName = &v
	return s
}

func (s *RegisterBclMerchantRequest) SetMerchantType(v string) *RegisterBclMerchantRequest {
	s.MerchantType = &v
	return s
}

func (s *RegisterBclMerchantRequest) SetCertNo(v string) *RegisterBclMerchantRequest {
	s.CertNo = &v
	return s
}

func (s *RegisterBclMerchantRequest) SetLegalName(v string) *RegisterBclMerchantRequest {
	s.LegalName = &v
	return s
}

func (s *RegisterBclMerchantRequest) SetLegalCertNo(v string) *RegisterBclMerchantRequest {
	s.LegalCertNo = &v
	return s
}

func (s *RegisterBclMerchantRequest) SetContactInfos(v []*BclContactInfo) *RegisterBclMerchantRequest {
	s.ContactInfos = v
	return s
}

func (s *RegisterBclMerchantRequest) SetAlipayLogonId(v string) *RegisterBclMerchantRequest {
	s.AlipayLogonId = &v
	return s
}

func (s *RegisterBclMerchantRequest) SetManagementType(v string) *RegisterBclMerchantRequest {
	s.ManagementType = &v
	return s
}

func (s *RegisterBclMerchantRequest) SetNeedProxyWithholding(v bool) *RegisterBclMerchantRequest {
	s.NeedProxyWithholding = &v
	return s
}

func (s *RegisterBclMerchantRequest) SetClientToken(v string) *RegisterBclMerchantRequest {
	s.ClientToken = &v
	return s
}

type RegisterBclMerchantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 入驻编号，受理成功时才会有值，务必保存，可用于后续查询入驻的结果
	EnrollmentNo *string `json:"enrollment_no,omitempty" xml:"enrollment_no,omitempty"`
}

func (s RegisterBclMerchantResponse) String() string {
	return tea.Prettify(s)
}

func (s RegisterBclMerchantResponse) GoString() string {
	return s.String()
}

func (s *RegisterBclMerchantResponse) SetReqMsgId(v string) *RegisterBclMerchantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *RegisterBclMerchantResponse) SetResultCode(v string) *RegisterBclMerchantResponse {
	s.ResultCode = &v
	return s
}

func (s *RegisterBclMerchantResponse) SetResultMsg(v string) *RegisterBclMerchantResponse {
	s.ResultMsg = &v
	return s
}

func (s *RegisterBclMerchantResponse) SetEnrollmentNo(v string) *RegisterBclMerchantResponse {
	s.EnrollmentNo = &v
	return s
}

type CancelBclWithholdRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 解约申请单号
	CancelApplyNo *string `json:"cancel_apply_no,omitempty" xml:"cancel_apply_no,omitempty" require:"true"`
	// 是否允许解除代扣
	AllowCancelWithhold *bool `json:"allow_cancel_withhold,omitempty" xml:"allow_cancel_withhold,omitempty" require:"true"`
	// 拒绝解约的原因,拒绝解约时必传
	RejectReason *string `json:"reject_reason,omitempty" xml:"reject_reason,omitempty" maxLength:"128"`
}

func (s CancelBclWithholdRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelBclWithholdRequest) GoString() string {
	return s.String()
}

func (s *CancelBclWithholdRequest) SetAuthToken(v string) *CancelBclWithholdRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelBclWithholdRequest) SetProductInstanceId(v string) *CancelBclWithholdRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CancelBclWithholdRequest) SetCancelApplyNo(v string) *CancelBclWithholdRequest {
	s.CancelApplyNo = &v
	return s
}

func (s *CancelBclWithholdRequest) SetAllowCancelWithhold(v bool) *CancelBclWithholdRequest {
	s.AllowCancelWithhold = &v
	return s
}

func (s *CancelBclWithholdRequest) SetRejectReason(v string) *CancelBclWithholdRequest {
	s.RejectReason = &v
	return s
}

type CancelBclWithholdResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CancelBclWithholdResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelBclWithholdResponse) GoString() string {
	return s.String()
}

func (s *CancelBclWithholdResponse) SetReqMsgId(v string) *CancelBclWithholdResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelBclWithholdResponse) SetResultCode(v string) *CancelBclWithholdResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelBclWithholdResponse) SetResultMsg(v string) *CancelBclWithholdResponse {
	s.ResultMsg = &v
	return s
}

type QueryBclComplainRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 投诉订单号
	ComplainEventId *string `json:"complain_event_id,omitempty" xml:"complain_event_id,omitempty" require:"true" maxLength:"64"`
}

func (s QueryBclComplainRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBclComplainRequest) GoString() string {
	return s.String()
}

func (s *QueryBclComplainRequest) SetAuthToken(v string) *QueryBclComplainRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBclComplainRequest) SetProductInstanceId(v string) *QueryBclComplainRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBclComplainRequest) SetComplainEventId(v string) *QueryBclComplainRequest {
	s.ComplainEventId = &v
	return s
}

type QueryBclComplainResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 租赁订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
	// 投诉订单号
	ComplainEventId *string `json:"complain_event_id,omitempty" xml:"complain_event_id,omitempty"`
	// 投诉单状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 支付宝交易号
	AlipayTradeNo *string `json:"alipay_trade_no,omitempty" xml:"alipay_trade_no,omitempty"`
	// 投诉单创建时间
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	// 投诉单修改时间
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
	// 投诉单修改时间
	GmtFinished *string `json:"gmt_finished,omitempty" xml:"gmt_finished,omitempty"`
	// 用户投诉诉求
	LeafCategoryName *string `json:"leaf_category_name,omitempty" xml:"leaf_category_name,omitempty"`
	// 用户投诉原因
	ComplainReason *string `json:"complain_reason,omitempty" xml:"complain_reason,omitempty"`
	// 投诉人电话号码
	PhoneNo *string `json:"phone_no,omitempty" xml:"phone_no,omitempty"`
	// 交易金额，单位元
	TradeAmount *string `json:"trade_amount,omitempty" xml:"trade_amount,omitempty"`
	// 用户与商家之间的协商记录
	ReplyDetailInfos []*ReplyDetailInfo `json:"reply_detail_infos,omitempty" xml:"reply_detail_infos,omitempty" type:"Repeated"`
}

func (s QueryBclComplainResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBclComplainResponse) GoString() string {
	return s.String()
}

func (s *QueryBclComplainResponse) SetReqMsgId(v string) *QueryBclComplainResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBclComplainResponse) SetResultCode(v string) *QueryBclComplainResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBclComplainResponse) SetResultMsg(v string) *QueryBclComplainResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBclComplainResponse) SetOrderId(v string) *QueryBclComplainResponse {
	s.OrderId = &v
	return s
}

func (s *QueryBclComplainResponse) SetComplainEventId(v string) *QueryBclComplainResponse {
	s.ComplainEventId = &v
	return s
}

func (s *QueryBclComplainResponse) SetStatus(v string) *QueryBclComplainResponse {
	s.Status = &v
	return s
}

func (s *QueryBclComplainResponse) SetAlipayTradeNo(v string) *QueryBclComplainResponse {
	s.AlipayTradeNo = &v
	return s
}

func (s *QueryBclComplainResponse) SetGmtCreate(v string) *QueryBclComplainResponse {
	s.GmtCreate = &v
	return s
}

func (s *QueryBclComplainResponse) SetGmtModified(v string) *QueryBclComplainResponse {
	s.GmtModified = &v
	return s
}

func (s *QueryBclComplainResponse) SetGmtFinished(v string) *QueryBclComplainResponse {
	s.GmtFinished = &v
	return s
}

func (s *QueryBclComplainResponse) SetLeafCategoryName(v string) *QueryBclComplainResponse {
	s.LeafCategoryName = &v
	return s
}

func (s *QueryBclComplainResponse) SetComplainReason(v string) *QueryBclComplainResponse {
	s.ComplainReason = &v
	return s
}

func (s *QueryBclComplainResponse) SetPhoneNo(v string) *QueryBclComplainResponse {
	s.PhoneNo = &v
	return s
}

func (s *QueryBclComplainResponse) SetTradeAmount(v string) *QueryBclComplainResponse {
	s.TradeAmount = &v
	return s
}

func (s *QueryBclComplainResponse) SetReplyDetailInfos(v []*ReplyDetailInfo) *QueryBclComplainResponse {
	s.ReplyDetailInfos = v
	return s
}

type UploadBclComplainimageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 图片格式，支持格式：jpg、jpeg、png
	ImageName *string `json:"image_name,omitempty" xml:"image_name,omitempty" require:"true" maxLength:"64"`
	// 图片二进制字节流
	ImageContent *string `json:"image_content,omitempty" xml:"image_content,omitempty" require:"true"`
}

func (s UploadBclComplainimageRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadBclComplainimageRequest) GoString() string {
	return s.String()
}

func (s *UploadBclComplainimageRequest) SetAuthToken(v string) *UploadBclComplainimageRequest {
	s.AuthToken = &v
	return s
}

func (s *UploadBclComplainimageRequest) SetProductInstanceId(v string) *UploadBclComplainimageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UploadBclComplainimageRequest) SetImageName(v string) *UploadBclComplainimageRequest {
	s.ImageName = &v
	return s
}

func (s *UploadBclComplainimageRequest) SetImageContent(v string) *UploadBclComplainimageRequest {
	s.ImageContent = &v
	return s
}

type UploadBclComplainimageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 图片在文件存储平台的标识
	IamgeId *string `json:"iamge_id,omitempty" xml:"iamge_id,omitempty"`
}

func (s UploadBclComplainimageResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadBclComplainimageResponse) GoString() string {
	return s.String()
}

func (s *UploadBclComplainimageResponse) SetReqMsgId(v string) *UploadBclComplainimageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UploadBclComplainimageResponse) SetResultCode(v string) *UploadBclComplainimageResponse {
	s.ResultCode = &v
	return s
}

func (s *UploadBclComplainimageResponse) SetResultMsg(v string) *UploadBclComplainimageResponse {
	s.ResultMsg = &v
	return s
}

func (s *UploadBclComplainimageResponse) SetIamgeId(v string) *UploadBclComplainimageResponse {
	s.IamgeId = &v
	return s
}

type SubmitBclComplainfeedbackRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 投诉订单号
	ComplainEventId *string `json:"complain_event_id,omitempty" xml:"complain_event_id,omitempty" require:"true" maxLength:"64"`
	// 反馈类目ID
	// 00:使用体验保障金退款；
	// 02:通过其他方式退款;
	// 03:已发货;
	// 04:其他;
	// 05:已完成售后服务;
	// 06:非我方责任范围；
	FeedbackCode *string `json:"feedback_code,omitempty" xml:"feedback_code,omitempty" require:"true" maxLength:"32"`
	// 反馈内容，不超过200字
	FeedbackContent *string `json:"feedback_content,omitempty" xml:"feedback_content,omitempty" require:"true" maxLength:"1024"`
	// 商家处理投诉时反馈凭证的图片id，多个逗号隔开（图片id可以通过"商户上传处理图片"接口获取）
	//
	FeedbackImages *string `json:"feedback_images,omitempty" xml:"feedback_images,omitempty" require:"true" maxLength:"1024"`
	// 处理投诉人，字数不超过6个字
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" require:"true" maxLength:"32"`
}

func (s SubmitBclComplainfeedbackRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitBclComplainfeedbackRequest) GoString() string {
	return s.String()
}

func (s *SubmitBclComplainfeedbackRequest) SetAuthToken(v string) *SubmitBclComplainfeedbackRequest {
	s.AuthToken = &v
	return s
}

func (s *SubmitBclComplainfeedbackRequest) SetProductInstanceId(v string) *SubmitBclComplainfeedbackRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SubmitBclComplainfeedbackRequest) SetComplainEventId(v string) *SubmitBclComplainfeedbackRequest {
	s.ComplainEventId = &v
	return s
}

func (s *SubmitBclComplainfeedbackRequest) SetFeedbackCode(v string) *SubmitBclComplainfeedbackRequest {
	s.FeedbackCode = &v
	return s
}

func (s *SubmitBclComplainfeedbackRequest) SetFeedbackContent(v string) *SubmitBclComplainfeedbackRequest {
	s.FeedbackContent = &v
	return s
}

func (s *SubmitBclComplainfeedbackRequest) SetFeedbackImages(v string) *SubmitBclComplainfeedbackRequest {
	s.FeedbackImages = &v
	return s
}

func (s *SubmitBclComplainfeedbackRequest) SetOperator(v string) *SubmitBclComplainfeedbackRequest {
	s.Operator = &v
	return s
}

type SubmitBclComplainfeedbackResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SubmitBclComplainfeedbackResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitBclComplainfeedbackResponse) GoString() string {
	return s.String()
}

func (s *SubmitBclComplainfeedbackResponse) SetReqMsgId(v string) *SubmitBclComplainfeedbackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SubmitBclComplainfeedbackResponse) SetResultCode(v string) *SubmitBclComplainfeedbackResponse {
	s.ResultCode = &v
	return s
}

func (s *SubmitBclComplainfeedbackResponse) SetResultMsg(v string) *SubmitBclComplainfeedbackResponse {
	s.ResultMsg = &v
	return s
}

type QueryBclComplaineventidsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 客诉单开始时间
	StartDate *string `json:"start_date,omitempty" xml:"start_date,omitempty" require:"true" maxLength:"16"`
	// 客诉单结束时间
	EndDate *string `json:"end_date,omitempty" xml:"end_date,omitempty" require:"true" maxLength:"16"`
	// 每页数量
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty" require:"true" minimum:"1"`
}

func (s QueryBclComplaineventidsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBclComplaineventidsRequest) GoString() string {
	return s.String()
}

func (s *QueryBclComplaineventidsRequest) SetAuthToken(v string) *QueryBclComplaineventidsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBclComplaineventidsRequest) SetProductInstanceId(v string) *QueryBclComplaineventidsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBclComplaineventidsRequest) SetStartDate(v string) *QueryBclComplaineventidsRequest {
	s.StartDate = &v
	return s
}

func (s *QueryBclComplaineventidsRequest) SetEndDate(v string) *QueryBclComplaineventidsRequest {
	s.EndDate = &v
	return s
}

func (s *QueryBclComplaineventidsRequest) SetPageSize(v int64) *QueryBclComplaineventidsRequest {
	s.PageSize = &v
	return s
}

func (s *QueryBclComplaineventidsRequest) SetPageNum(v int64) *QueryBclComplaineventidsRequest {
	s.PageNum = &v
	return s
}

type QueryBclComplaineventidsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 投诉单id列表
	ComplainEventIds []*string `json:"complain_event_ids,omitempty" xml:"complain_event_ids,omitempty" type:"Repeated"`
	// 总量
	Count *int64 `json:"count,omitempty" xml:"count,omitempty"`
	// 每页数量
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	// 页码
	PageNum *int64 `json:"page_num,omitempty" xml:"page_num,omitempty"`
}

func (s QueryBclComplaineventidsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBclComplaineventidsResponse) GoString() string {
	return s.String()
}

func (s *QueryBclComplaineventidsResponse) SetReqMsgId(v string) *QueryBclComplaineventidsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBclComplaineventidsResponse) SetResultCode(v string) *QueryBclComplaineventidsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBclComplaineventidsResponse) SetResultMsg(v string) *QueryBclComplaineventidsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBclComplaineventidsResponse) SetComplainEventIds(v []*string) *QueryBclComplaineventidsResponse {
	s.ComplainEventIds = v
	return s
}

func (s *QueryBclComplaineventidsResponse) SetCount(v int64) *QueryBclComplaineventidsResponse {
	s.Count = &v
	return s
}

func (s *QueryBclComplaineventidsResponse) SetPageSize(v int64) *QueryBclComplaineventidsResponse {
	s.PageSize = &v
	return s
}

func (s *QueryBclComplaineventidsResponse) SetPageNum(v int64) *QueryBclComplaineventidsResponse {
	s.PageNum = &v
	return s
}

type UploadBclFileRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 文件名称
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty" require:"true"`
	// 文件的Base64编码，需小于1M
	FileContent *string `json:"file_content,omitempty" xml:"file_content,omitempty" require:"true"`
	// 文件类型
	FileType *string `json:"file_type,omitempty" xml:"file_type,omitempty" require:"true"`
}

func (s UploadBclFileRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadBclFileRequest) GoString() string {
	return s.String()
}

func (s *UploadBclFileRequest) SetAuthToken(v string) *UploadBclFileRequest {
	s.AuthToken = &v
	return s
}

func (s *UploadBclFileRequest) SetProductInstanceId(v string) *UploadBclFileRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UploadBclFileRequest) SetFileName(v string) *UploadBclFileRequest {
	s.FileName = &v
	return s
}

func (s *UploadBclFileRequest) SetFileContent(v string) *UploadBclFileRequest {
	s.FileContent = &v
	return s
}

func (s *UploadBclFileRequest) SetFileType(v string) *UploadBclFileRequest {
	s.FileType = &v
	return s
}

type UploadBclFileResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 文件id
	FileId *string `json:"file_id,omitempty" xml:"file_id,omitempty"`
}

func (s UploadBclFileResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadBclFileResponse) GoString() string {
	return s.String()
}

func (s *UploadBclFileResponse) SetReqMsgId(v string) *UploadBclFileResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UploadBclFileResponse) SetResultCode(v string) *UploadBclFileResponse {
	s.ResultCode = &v
	return s
}

func (s *UploadBclFileResponse) SetResultMsg(v string) *UploadBclFileResponse {
	s.ResultMsg = &v
	return s
}

func (s *UploadBclFileResponse) SetFileId(v string) *UploadBclFileResponse {
	s.FileId = &v
	return s
}

type FinishBclOrderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 租赁宝plus服务返回的订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 资方尾款金额，单位为分且最小值：1（租赁单有融资时必传）
	InvestorFinalPayment *int64 `json:"investor_final_payment,omitempty" xml:"investor_final_payment,omitempty"`
	// 买家还款金额，单位分（提前还款，到期买断，到期归还场景必传）
	BuyerRepayAmount *int64 `json:"buyer_repay_amount,omitempty" xml:"buyer_repay_amount,omitempty"`
	// 幂等号，用来保证请求幂等性，标识一次完结请求，确保同笔订单下该值唯一。
	// 注意：
	// ● clientToken只支持ASCII字符，且不能超过64个字符；
	// ● 针对同一次完结请求如果调用接口失败或异常了，重试时要保证该值不变；
	ClientToken *string `json:"client_token,omitempty" xml:"client_token,omitempty" require:"true"`
	// 完结场景：
	// ● BUYER_PRE_REPAY：买家提前还款
	// ● BUYER_DUE_GIVE_BACK：买家到期归还
	// ● BUYER_DUE_BUYOUT：买家到期买断
	// ● BUYER_BAD_DEBT：买家坏账
	// ● BUYER_CANCEL_AGREEMENT：买家解约
	// ● MERCHANT_CANCEL_ORDER：商家取消订单
	FinishScene *string `json:"finish_scene,omitempty" xml:"finish_scene,omitempty" require:"true"`
	// 完结的分期信息（买家到期归还和买家到期买断场景不传，其他场景必传）
	FinishInstallments []*BclFinishInstallment `json:"finish_installments,omitempty" xml:"finish_installments,omitempty" type:"Repeated"`
}

func (s FinishBclOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s FinishBclOrderRequest) GoString() string {
	return s.String()
}

func (s *FinishBclOrderRequest) SetAuthToken(v string) *FinishBclOrderRequest {
	s.AuthToken = &v
	return s
}

func (s *FinishBclOrderRequest) SetProductInstanceId(v string) *FinishBclOrderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *FinishBclOrderRequest) SetOrderId(v string) *FinishBclOrderRequest {
	s.OrderId = &v
	return s
}

func (s *FinishBclOrderRequest) SetInvestorFinalPayment(v int64) *FinishBclOrderRequest {
	s.InvestorFinalPayment = &v
	return s
}

func (s *FinishBclOrderRequest) SetBuyerRepayAmount(v int64) *FinishBclOrderRequest {
	s.BuyerRepayAmount = &v
	return s
}

func (s *FinishBclOrderRequest) SetClientToken(v string) *FinishBclOrderRequest {
	s.ClientToken = &v
	return s
}

func (s *FinishBclOrderRequest) SetFinishScene(v string) *FinishBclOrderRequest {
	s.FinishScene = &v
	return s
}

func (s *FinishBclOrderRequest) SetFinishInstallments(v []*BclFinishInstallment) *FinishBclOrderRequest {
	s.FinishInstallments = v
	return s
}

type FinishBclOrderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 完结申请单号
	FinishApplyNo *string `json:"finish_apply_no,omitempty" xml:"finish_apply_no,omitempty"`
}

func (s FinishBclOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s FinishBclOrderResponse) GoString() string {
	return s.String()
}

func (s *FinishBclOrderResponse) SetReqMsgId(v string) *FinishBclOrderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *FinishBclOrderResponse) SetResultCode(v string) *FinishBclOrderResponse {
	s.ResultCode = &v
	return s
}

func (s *FinishBclOrderResponse) SetResultMsg(v string) *FinishBclOrderResponse {
	s.ResultMsg = &v
	return s
}

func (s *FinishBclOrderResponse) SetFinishApplyNo(v string) *FinishBclOrderResponse {
	s.FinishApplyNo = &v
	return s
}

type CreateBclRefundRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 例如：PROD202312312321301
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true" maxLength:"32" minLength:"16"`
	// 代扣成功的期数, 1,5,7,12
	TermNo *int64 `json:"term_no,omitempty" xml:"term_no,omitempty" require:"true" maximum:"120" minimum:"1"`
	// 退款金额: 单位分, 最小值1, 最大值不能超过当前代扣的总金额, 如果多次退款,本次退款金额加已退款成功的金额不大于当前代扣总金额
	RefundAmount *int64 `json:"refund_amount,omitempty" xml:"refund_amount,omitempty" require:"true" minimum:"1"`
	// 幂等号，用来保证请求幂等性.
	// 注意：
	// ● clientToken只支持ASCII字符，且不能超过64个字符；
	ClientToken *string `json:"client_token,omitempty" xml:"client_token,omitempty" require:"true" maxLength:"64" minLength:"16"`
}

func (s CreateBclRefundRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBclRefundRequest) GoString() string {
	return s.String()
}

func (s *CreateBclRefundRequest) SetAuthToken(v string) *CreateBclRefundRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateBclRefundRequest) SetProductInstanceId(v string) *CreateBclRefundRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateBclRefundRequest) SetOrderId(v string) *CreateBclRefundRequest {
	s.OrderId = &v
	return s
}

func (s *CreateBclRefundRequest) SetTermNo(v int64) *CreateBclRefundRequest {
	s.TermNo = &v
	return s
}

func (s *CreateBclRefundRequest) SetRefundAmount(v int64) *CreateBclRefundRequest {
	s.RefundAmount = &v
	return s
}

func (s *CreateBclRefundRequest) SetClientToken(v string) *CreateBclRefundRequest {
	s.ClientToken = &v
	return s
}

type CreateBclRefundResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 退款id, 用于关联退款网关消息以及退款查询的入参
	RefundId *string `json:"refund_id,omitempty" xml:"refund_id,omitempty"`
}

func (s CreateBclRefundResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBclRefundResponse) GoString() string {
	return s.String()
}

func (s *CreateBclRefundResponse) SetReqMsgId(v string) *CreateBclRefundResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateBclRefundResponse) SetResultCode(v string) *CreateBclRefundResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateBclRefundResponse) SetResultMsg(v string) *CreateBclRefundResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateBclRefundResponse) SetRefundId(v string) *CreateBclRefundResponse {
	s.RefundId = &v
	return s
}

type QueryBclRefundRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 退款接口返回的退款id
	RefundId *string `json:"refund_id,omitempty" xml:"refund_id,omitempty" require:"true" maxLength:"64" minLength:"16"`
}

func (s QueryBclRefundRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBclRefundRequest) GoString() string {
	return s.String()
}

func (s *QueryBclRefundRequest) SetAuthToken(v string) *QueryBclRefundRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryBclRefundRequest) SetProductInstanceId(v string) *QueryBclRefundRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryBclRefundRequest) SetRefundId(v string) *QueryBclRefundRequest {
	s.RefundId = &v
	return s
}

type QueryBclRefundResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 退款id
	RefundId *string `json:"refund_id,omitempty" xml:"refund_id,omitempty"`
	// 退款成功的时间, 退款成功返回
	RefundTime *string `json:"refund_time,omitempty" xml:"refund_time,omitempty"`
	// 退款金额, 单位分, 退款成功时返回
	RefundAmount *int64 `json:"refund_amount,omitempty" xml:"refund_amount,omitempty"`
	// ● 退款中，REFUNDING（需要调用查询接口查询结果)；
	// ● 退款成功REFUND_SUCCESS
	// ● 退款失败REFUND_FAIL
	RefundStatus *string `json:"refund_status,omitempty" xml:"refund_status,omitempty"`
	// 退款失败原因, 退款失败时返回
	ErrMsg *string `json:"err_msg,omitempty" xml:"err_msg,omitempty"`
}

func (s QueryBclRefundResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBclRefundResponse) GoString() string {
	return s.String()
}

func (s *QueryBclRefundResponse) SetReqMsgId(v string) *QueryBclRefundResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryBclRefundResponse) SetResultCode(v string) *QueryBclRefundResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryBclRefundResponse) SetResultMsg(v string) *QueryBclRefundResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryBclRefundResponse) SetRefundId(v string) *QueryBclRefundResponse {
	s.RefundId = &v
	return s
}

func (s *QueryBclRefundResponse) SetRefundTime(v string) *QueryBclRefundResponse {
	s.RefundTime = &v
	return s
}

func (s *QueryBclRefundResponse) SetRefundAmount(v int64) *QueryBclRefundResponse {
	s.RefundAmount = &v
	return s
}

func (s *QueryBclRefundResponse) SetRefundStatus(v string) *QueryBclRefundResponse {
	s.RefundStatus = &v
	return s
}

func (s *QueryBclRefundResponse) SetErrMsg(v string) *QueryBclRefundResponse {
	s.ErrMsg = &v
	return s
}

type CreateContractAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 邮箱地址，默认空
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// 证件号
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty" require:"true"`
	// 证件类型，默认CRED_PSN_CH_IDCARD，详见个人证件类型说明文档（https://tech.antfin.com/docs/2/155166）
	IdType *string `json:"id_type,omitempty" xml:"id_type,omitempty" require:"true"`
	// 手机号码，默认空
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty"`
	// 姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 用户唯一标识，可传入第三方平台的个人用户id、证件号、手机号、邮箱等，如果设置则作为账号唯一性字段，相同信息不可重复创建。（个人用户与机构的唯一标识不可重复）
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
}

func (s CreateContractAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractAccountRequest) GoString() string {
	return s.String()
}

func (s *CreateContractAccountRequest) SetAuthToken(v string) *CreateContractAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractAccountRequest) SetProductInstanceId(v string) *CreateContractAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateContractAccountRequest) SetEmail(v string) *CreateContractAccountRequest {
	s.Email = &v
	return s
}

func (s *CreateContractAccountRequest) SetIdNumber(v string) *CreateContractAccountRequest {
	s.IdNumber = &v
	return s
}

func (s *CreateContractAccountRequest) SetIdType(v string) *CreateContractAccountRequest {
	s.IdType = &v
	return s
}

func (s *CreateContractAccountRequest) SetMobile(v string) *CreateContractAccountRequest {
	s.Mobile = &v
	return s
}

func (s *CreateContractAccountRequest) SetName(v string) *CreateContractAccountRequest {
	s.Name = &v
	return s
}

func (s *CreateContractAccountRequest) SetUserId(v string) *CreateContractAccountRequest {
	s.UserId = &v
	return s
}

type CreateContractAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 个人账号ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s CreateContractAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractAccountResponse) GoString() string {
	return s.String()
}

func (s *CreateContractAccountResponse) SetReqMsgId(v string) *CreateContractAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractAccountResponse) SetResultCode(v string) *CreateContractAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractAccountResponse) SetResultMsg(v string) *CreateContractAccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractAccountResponse) SetAccountId(v string) *CreateContractAccountResponse {
	s.AccountId = &v
	return s
}

func (s *CreateContractAccountResponse) SetCode(v int64) *CreateContractAccountResponse {
	s.Code = &v
	return s
}

func (s *CreateContractAccountResponse) SetMessage(v string) *CreateContractAccountResponse {
	s.Message = &v
	return s
}

type CreateContractAccountsealRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 电子合同用户ID（在twc.notary.contract.account.create接口中创建）
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 印章别名
	Alias *string `json:"alias,omitempty" xml:"alias,omitempty"`
	// 印章颜色，RED-红色， BLUE-蓝色，BLACK-黑色
	Color *string `json:"color,omitempty" xml:"color,omitempty" require:"true"`
	// 印章高度, 默认95px
	Height *int64 `json:"height,omitempty" xml:"height,omitempty"`
	// 印章宽度, 默认95px
	Width *int64 `json:"width,omitempty" xml:"width,omitempty"`
	// 模板类型, 详见个人印章样式说明 SQUARE, BORDERLESS, FZKC, HWLS, HWXK, HWXKBORDER, HYLSF, RECTANGLE, YGYJFCS, YGYMBXS, YYGXSF
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s CreateContractAccountsealRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractAccountsealRequest) GoString() string {
	return s.String()
}

func (s *CreateContractAccountsealRequest) SetAuthToken(v string) *CreateContractAccountsealRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractAccountsealRequest) SetProductInstanceId(v string) *CreateContractAccountsealRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateContractAccountsealRequest) SetAccountId(v string) *CreateContractAccountsealRequest {
	s.AccountId = &v
	return s
}

func (s *CreateContractAccountsealRequest) SetAlias(v string) *CreateContractAccountsealRequest {
	s.Alias = &v
	return s
}

func (s *CreateContractAccountsealRequest) SetColor(v string) *CreateContractAccountsealRequest {
	s.Color = &v
	return s
}

func (s *CreateContractAccountsealRequest) SetHeight(v int64) *CreateContractAccountsealRequest {
	s.Height = &v
	return s
}

func (s *CreateContractAccountsealRequest) SetWidth(v int64) *CreateContractAccountsealRequest {
	s.Width = &v
	return s
}

func (s *CreateContractAccountsealRequest) SetType(v string) *CreateContractAccountsealRequest {
	s.Type = &v
	return s
}

type CreateContractAccountsealResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 印章fileKey
	FileKey *string `json:"file_key,omitempty" xml:"file_key,omitempty"`
	// 印章id
	SealId *string `json:"seal_id,omitempty" xml:"seal_id,omitempty"`
	// 印章下载地址, 有效时间1小时
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
}

func (s CreateContractAccountsealResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractAccountsealResponse) GoString() string {
	return s.String()
}

func (s *CreateContractAccountsealResponse) SetReqMsgId(v string) *CreateContractAccountsealResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractAccountsealResponse) SetResultCode(v string) *CreateContractAccountsealResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractAccountsealResponse) SetResultMsg(v string) *CreateContractAccountsealResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractAccountsealResponse) SetCode(v int64) *CreateContractAccountsealResponse {
	s.Code = &v
	return s
}

func (s *CreateContractAccountsealResponse) SetMessage(v string) *CreateContractAccountsealResponse {
	s.Message = &v
	return s
}

func (s *CreateContractAccountsealResponse) SetFileKey(v string) *CreateContractAccountsealResponse {
	s.FileKey = &v
	return s
}

func (s *CreateContractAccountsealResponse) SetSealId(v string) *CreateContractAccountsealResponse {
	s.SealId = &v
	return s
}

func (s *CreateContractAccountsealResponse) SetUrl(v string) *CreateContractAccountsealResponse {
	s.Url = &v
	return s
}

type CreateContractOrganizationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 创建人个人账号ID，也就是调用个人账号创建接口（twc.notary.contract.account.create
	// ）返回的accountId
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty" require:"true"`
	// 证件号
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty" require:"true"`
	// 证件类型，默认CRED_ORG_USCC，详见机构证件类型说明 （https://tech.antfin.com/docs/2/155166）
	IdType *string `json:"id_type,omitempty" xml:"id_type,omitempty" require:"true"`
	// 企业法人名称
	LegalPerson *string `json:"legal_person,omitempty" xml:"legal_person,omitempty"`
	// 企业法人证件号
	LegalPersonId *string `json:"legal_person_id,omitempty" xml:"legal_person_id,omitempty"`
	// 机构名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 机构唯一标识，可传入第三方平台机构id、企业证件号、企业邮箱等如果设置则作为账号唯一性字段，相同id不可重复创建。（个人用户与机构的唯一标识不可重复）
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
}

func (s CreateContractOrganizationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractOrganizationRequest) GoString() string {
	return s.String()
}

func (s *CreateContractOrganizationRequest) SetAuthToken(v string) *CreateContractOrganizationRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractOrganizationRequest) SetProductInstanceId(v string) *CreateContractOrganizationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateContractOrganizationRequest) SetCreator(v string) *CreateContractOrganizationRequest {
	s.Creator = &v
	return s
}

func (s *CreateContractOrganizationRequest) SetIdNumber(v string) *CreateContractOrganizationRequest {
	s.IdNumber = &v
	return s
}

func (s *CreateContractOrganizationRequest) SetIdType(v string) *CreateContractOrganizationRequest {
	s.IdType = &v
	return s
}

func (s *CreateContractOrganizationRequest) SetLegalPerson(v string) *CreateContractOrganizationRequest {
	s.LegalPerson = &v
	return s
}

func (s *CreateContractOrganizationRequest) SetLegalPersonId(v string) *CreateContractOrganizationRequest {
	s.LegalPersonId = &v
	return s
}

func (s *CreateContractOrganizationRequest) SetName(v string) *CreateContractOrganizationRequest {
	s.Name = &v
	return s
}

func (s *CreateContractOrganizationRequest) SetUserId(v string) *CreateContractOrganizationRequest {
	s.UserId = &v
	return s
}

type CreateContractOrganizationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 机构账号ID
	OrgId *string `json:"org_id,omitempty" xml:"org_id,omitempty"`
}

func (s CreateContractOrganizationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractOrganizationResponse) GoString() string {
	return s.String()
}

func (s *CreateContractOrganizationResponse) SetReqMsgId(v string) *CreateContractOrganizationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractOrganizationResponse) SetResultCode(v string) *CreateContractOrganizationResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractOrganizationResponse) SetResultMsg(v string) *CreateContractOrganizationResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractOrganizationResponse) SetCode(v int64) *CreateContractOrganizationResponse {
	s.Code = &v
	return s
}

func (s *CreateContractOrganizationResponse) SetMessage(v string) *CreateContractOrganizationResponse {
	s.Message = &v
	return s
}

func (s *CreateContractOrganizationResponse) SetOrgId(v string) *CreateContractOrganizationResponse {
	s.OrgId = &v
	return s
}

type CreateContractOrgsealRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 印章别名
	Alias *string `json:"alias,omitempty" xml:"alias,omitempty"`
	// 中心图案类型，STAR-圆形有五角星，NONE-圆形无五角星， 详见机构印章样式说明
	Central *string `json:"central,omitempty" xml:"central,omitempty" require:"true"`
	// 印章颜色，RED-红色，BLUE-蓝色，BLACK-黑色
	Color *string `json:"color,omitempty" xml:"color,omitempty" require:"true"`
	// 印章高度，默认159px
	Height *int64 `json:"height,omitempty" xml:"height,omitempty"`
	// 横向文，可设置0-8个字，企业名称超出25个字后，不支持设置横向文
	Htext *string `json:"htext,omitempty" xml:"htext,omitempty"`
	// 机构ID
	OrgId *string `json:"org_id,omitempty" xml:"org_id,omitempty" require:"true"`
	// 下弦文，可设置0-20个字，企业企业名称超出25个字后，不支持设置下弦文
	Qtext *string `json:"qtext,omitempty" xml:"qtext,omitempty"`
	// 模板类型，TEMPLATE_ROUND-圆章，TEMPLATE_OVAL-椭圆章， 详见机构印章样式说明
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 印章宽度，默认159px
	Width *int64 `json:"width,omitempty" xml:"width,omitempty"`
}

func (s CreateContractOrgsealRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractOrgsealRequest) GoString() string {
	return s.String()
}

func (s *CreateContractOrgsealRequest) SetAuthToken(v string) *CreateContractOrgsealRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractOrgsealRequest) SetProductInstanceId(v string) *CreateContractOrgsealRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateContractOrgsealRequest) SetAlias(v string) *CreateContractOrgsealRequest {
	s.Alias = &v
	return s
}

func (s *CreateContractOrgsealRequest) SetCentral(v string) *CreateContractOrgsealRequest {
	s.Central = &v
	return s
}

func (s *CreateContractOrgsealRequest) SetColor(v string) *CreateContractOrgsealRequest {
	s.Color = &v
	return s
}

func (s *CreateContractOrgsealRequest) SetHeight(v int64) *CreateContractOrgsealRequest {
	s.Height = &v
	return s
}

func (s *CreateContractOrgsealRequest) SetHtext(v string) *CreateContractOrgsealRequest {
	s.Htext = &v
	return s
}

func (s *CreateContractOrgsealRequest) SetOrgId(v string) *CreateContractOrgsealRequest {
	s.OrgId = &v
	return s
}

func (s *CreateContractOrgsealRequest) SetQtext(v string) *CreateContractOrgsealRequest {
	s.Qtext = &v
	return s
}

func (s *CreateContractOrgsealRequest) SetType(v string) *CreateContractOrgsealRequest {
	s.Type = &v
	return s
}

func (s *CreateContractOrgsealRequest) SetWidth(v int64) *CreateContractOrgsealRequest {
	s.Width = &v
	return s
}

type CreateContractOrgsealResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 印章fileKey
	FileKey *string `json:"file_key,omitempty" xml:"file_key,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 印章ID
	SealId *string `json:"seal_id,omitempty" xml:"seal_id,omitempty"`
	// 印章下载地址, 有效时间1小时
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
}

func (s CreateContractOrgsealResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractOrgsealResponse) GoString() string {
	return s.String()
}

func (s *CreateContractOrgsealResponse) SetReqMsgId(v string) *CreateContractOrgsealResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractOrgsealResponse) SetResultCode(v string) *CreateContractOrgsealResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractOrgsealResponse) SetResultMsg(v string) *CreateContractOrgsealResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractOrgsealResponse) SetCode(v int64) *CreateContractOrgsealResponse {
	s.Code = &v
	return s
}

func (s *CreateContractOrgsealResponse) SetFileKey(v string) *CreateContractOrgsealResponse {
	s.FileKey = &v
	return s
}

func (s *CreateContractOrgsealResponse) SetMessage(v string) *CreateContractOrgsealResponse {
	s.Message = &v
	return s
}

func (s *CreateContractOrgsealResponse) SetSealId(v string) *CreateContractOrgsealResponse {
	s.SealId = &v
	return s
}

func (s *CreateContractOrgsealResponse) SetUrl(v string) *CreateContractOrgsealResponse {
	s.Url = &v
	return s
}

type AuthContractSignRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 授权人ID，即个人账号ID或机构账号ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 授权截止时间, 格式为yyyy-MM-dd HH:mm:ss，默认无限期
	Deadline *string `json:"deadline,omitempty" xml:"deadline,omitempty"`
}

func (s AuthContractSignRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthContractSignRequest) GoString() string {
	return s.String()
}

func (s *AuthContractSignRequest) SetAuthToken(v string) *AuthContractSignRequest {
	s.AuthToken = &v
	return s
}

func (s *AuthContractSignRequest) SetProductInstanceId(v string) *AuthContractSignRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AuthContractSignRequest) SetAccountId(v string) *AuthContractSignRequest {
	s.AccountId = &v
	return s
}

func (s *AuthContractSignRequest) SetDeadline(v string) *AuthContractSignRequest {
	s.Deadline = &v
	return s
}

type AuthContractSignResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 业务数据, 是否授权成功
	Accepted *bool `json:"accepted,omitempty" xml:"accepted,omitempty"`
}

func (s AuthContractSignResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthContractSignResponse) GoString() string {
	return s.String()
}

func (s *AuthContractSignResponse) SetReqMsgId(v string) *AuthContractSignResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AuthContractSignResponse) SetResultCode(v string) *AuthContractSignResponse {
	s.ResultCode = &v
	return s
}

func (s *AuthContractSignResponse) SetResultMsg(v string) *AuthContractSignResponse {
	s.ResultMsg = &v
	return s
}

func (s *AuthContractSignResponse) SetCode(v int64) *AuthContractSignResponse {
	s.Code = &v
	return s
}

func (s *AuthContractSignResponse) SetMessage(v string) *AuthContractSignResponse {
	s.Message = &v
	return s
}

func (s *AuthContractSignResponse) SetAccepted(v bool) *AuthContractSignResponse {
	s.Accepted = &v
	return s
}

type CreateContractTemplateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 模板文件md5值，再做base64编码
	ContentMd5 *string `json:"content_md5,omitempty" xml:"content_md5,omitempty" require:"true"`
	// 目标文件的MIME类型
	ContentType *string `json:"content_type,omitempty" xml:"content_type,omitempty" require:"true"`
	// 是否需要转成pdf，如果模板文件为.doc/.docx 传true，为pdf传false
	Convert2Pdf *bool `json:"convert2_pdf,omitempty" xml:"convert2_pdf,omitempty" require:"true"`
	// 文件名称，必须带扩展名如:.pdf,.doc,.docx
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty" require:"true"`
}

func (s CreateContractTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateContractTemplateRequest) SetAuthToken(v string) *CreateContractTemplateRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractTemplateRequest) SetProductInstanceId(v string) *CreateContractTemplateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateContractTemplateRequest) SetContentMd5(v string) *CreateContractTemplateRequest {
	s.ContentMd5 = &v
	return s
}

func (s *CreateContractTemplateRequest) SetContentType(v string) *CreateContractTemplateRequest {
	s.ContentType = &v
	return s
}

func (s *CreateContractTemplateRequest) SetConvert2Pdf(v bool) *CreateContractTemplateRequest {
	s.Convert2Pdf = &v
	return s
}

func (s *CreateContractTemplateRequest) SetFileName(v string) *CreateContractTemplateRequest {
	s.FileName = &v
	return s
}

type CreateContractTemplateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 模板ID
	TemplateId *string `json:"template_id,omitempty" xml:"template_id,omitempty"`
	// 文件直传地址，需要用此上传地址使用put方式上传文件，只有文件上传后模板才可用
	UploadUrl *string `json:"upload_url,omitempty" xml:"upload_url,omitempty"`
}

func (s CreateContractTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateContractTemplateResponse) SetReqMsgId(v string) *CreateContractTemplateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractTemplateResponse) SetResultCode(v string) *CreateContractTemplateResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractTemplateResponse) SetResultMsg(v string) *CreateContractTemplateResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractTemplateResponse) SetCode(v int64) *CreateContractTemplateResponse {
	s.Code = &v
	return s
}

func (s *CreateContractTemplateResponse) SetMessage(v string) *CreateContractTemplateResponse {
	s.Message = &v
	return s
}

func (s *CreateContractTemplateResponse) SetTemplateId(v string) *CreateContractTemplateResponse {
	s.TemplateId = &v
	return s
}

func (s *CreateContractTemplateResponse) SetUploadUrl(v string) *CreateContractTemplateResponse {
	s.UploadUrl = &v
	return s
}

type CreateContractFlowRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 是否自动归档，默认false。如设置为true，则在调用签署流程开启(twc.notary.contract.flow.start)后，当所有签署人签署完毕，系统自动将流程归档，状态变为“已完成”状态，在流程状态为“已完成”前，可随时添加签署人；如设置为false，则在调用签署流程开启后，需主动调用签署流程归档接口，将流程状态变更为“已完成”，归档前可随时添加签署人；已完成的流程才可下载签署后的文件
	AutoArchive *bool `json:"auto_archive,omitempty" xml:"auto_archive,omitempty"`
	// 文件主题
	BusinessScene *string `json:"business_scene,omitempty" xml:"business_scene,omitempty" require:"true"`
	// 任务配置信息
	ConfigInfo *ContractSignFlowConfig `json:"config_info,omitempty" xml:"config_info,omitempty"`
	// 文件到期前，提前多久回调提醒续签，单位为小时，时间区间：1小时——15天（360小时），默认不提醒
	ContractRemind *int64 `json:"contract_remind,omitempty" xml:"contract_remind,omitempty"`
	// 文件有效截止日期,毫秒，默认不失效
	ContractValidity *int64 `json:"contract_validity,omitempty" xml:"contract_validity,omitempty"`
	// 发起人账户id，即发起本次签署的操作人个人账号id；如不传，默认由对接平台发起
	InitiatorAccountId *string `json:"initiator_account_id,omitempty" xml:"initiator_account_id,omitempty"`
	// 发起方主体id，如存在个人代机构发起签约，则需传入机构id；如不传，则默认是对接平台
	InitiatorAuthorizedAccountId *string `json:"initiator_authorized_account_id,omitempty" xml:"initiator_authorized_account_id,omitempty"`
	// 签署有效截止日期,毫秒，默认不失效
	SignValidity *int64 `json:"sign_validity,omitempty" xml:"sign_validity,omitempty"`
}

func (s CreateContractFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractFlowRequest) GoString() string {
	return s.String()
}

func (s *CreateContractFlowRequest) SetAuthToken(v string) *CreateContractFlowRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractFlowRequest) SetProductInstanceId(v string) *CreateContractFlowRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateContractFlowRequest) SetAutoArchive(v bool) *CreateContractFlowRequest {
	s.AutoArchive = &v
	return s
}

func (s *CreateContractFlowRequest) SetBusinessScene(v string) *CreateContractFlowRequest {
	s.BusinessScene = &v
	return s
}

func (s *CreateContractFlowRequest) SetConfigInfo(v *ContractSignFlowConfig) *CreateContractFlowRequest {
	s.ConfigInfo = v
	return s
}

func (s *CreateContractFlowRequest) SetContractRemind(v int64) *CreateContractFlowRequest {
	s.ContractRemind = &v
	return s
}

func (s *CreateContractFlowRequest) SetContractValidity(v int64) *CreateContractFlowRequest {
	s.ContractValidity = &v
	return s
}

func (s *CreateContractFlowRequest) SetInitiatorAccountId(v string) *CreateContractFlowRequest {
	s.InitiatorAccountId = &v
	return s
}

func (s *CreateContractFlowRequest) SetInitiatorAuthorizedAccountId(v string) *CreateContractFlowRequest {
	s.InitiatorAuthorizedAccountId = &v
	return s
}

func (s *CreateContractFlowRequest) SetSignValidity(v int64) *CreateContractFlowRequest {
	s.SignValidity = &v
	return s
}

type CreateContractFlowResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 流程ID
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty"`
}

func (s CreateContractFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractFlowResponse) GoString() string {
	return s.String()
}

func (s *CreateContractFlowResponse) SetReqMsgId(v string) *CreateContractFlowResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractFlowResponse) SetResultCode(v string) *CreateContractFlowResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractFlowResponse) SetResultMsg(v string) *CreateContractFlowResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractFlowResponse) SetCode(v int64) *CreateContractFlowResponse {
	s.Code = &v
	return s
}

func (s *CreateContractFlowResponse) SetMessage(v string) *CreateContractFlowResponse {
	s.Message = &v
	return s
}

func (s *CreateContractFlowResponse) SetFlowId(v string) *CreateContractFlowResponse {
	s.FlowId = &v
	return s
}

type AddContractDocumentRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程ID
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 文档列表数据
	Docs []*ContractDoc `json:"docs,omitempty" xml:"docs,omitempty" require:"true" type:"Repeated"`
}

func (s AddContractDocumentRequest) String() string {
	return tea.Prettify(s)
}

func (s AddContractDocumentRequest) GoString() string {
	return s.String()
}

func (s *AddContractDocumentRequest) SetAuthToken(v string) *AddContractDocumentRequest {
	s.AuthToken = &v
	return s
}

func (s *AddContractDocumentRequest) SetProductInstanceId(v string) *AddContractDocumentRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AddContractDocumentRequest) SetFlowId(v string) *AddContractDocumentRequest {
	s.FlowId = &v
	return s
}

func (s *AddContractDocumentRequest) SetDocs(v []*ContractDoc) *AddContractDocumentRequest {
	s.Docs = v
	return s
}

type AddContractDocumentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s AddContractDocumentResponse) String() string {
	return tea.Prettify(s)
}

func (s AddContractDocumentResponse) GoString() string {
	return s.String()
}

func (s *AddContractDocumentResponse) SetReqMsgId(v string) *AddContractDocumentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddContractDocumentResponse) SetResultCode(v string) *AddContractDocumentResponse {
	s.ResultCode = &v
	return s
}

func (s *AddContractDocumentResponse) SetResultMsg(v string) *AddContractDocumentResponse {
	s.ResultMsg = &v
	return s
}

func (s *AddContractDocumentResponse) SetCode(v int64) *AddContractDocumentResponse {
	s.Code = &v
	return s
}

func (s *AddContractDocumentResponse) SetMessage(v string) *AddContractDocumentResponse {
	s.Message = &v
	return s
}

type AddContractSignfieldRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 签署流程ID
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 签署区列表数据
	Signfields []*ContractSignFieldApplication `json:"signfields,omitempty" xml:"signfields,omitempty" require:"true" type:"Repeated"`
}

func (s AddContractSignfieldRequest) String() string {
	return tea.Prettify(s)
}

func (s AddContractSignfieldRequest) GoString() string {
	return s.String()
}

func (s *AddContractSignfieldRequest) SetAuthToken(v string) *AddContractSignfieldRequest {
	s.AuthToken = &v
	return s
}

func (s *AddContractSignfieldRequest) SetProductInstanceId(v string) *AddContractSignfieldRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AddContractSignfieldRequest) SetFlowId(v string) *AddContractSignfieldRequest {
	s.FlowId = &v
	return s
}

func (s *AddContractSignfieldRequest) SetSignfields(v []*ContractSignFieldApplication) *AddContractSignfieldRequest {
	s.Signfields = v
	return s
}

type AddContractSignfieldResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 签署区列表数据
	Signfields []*ContractSignField `json:"signfields,omitempty" xml:"signfields,omitempty" type:"Repeated"`
}

func (s AddContractSignfieldResponse) String() string {
	return tea.Prettify(s)
}

func (s AddContractSignfieldResponse) GoString() string {
	return s.String()
}

func (s *AddContractSignfieldResponse) SetReqMsgId(v string) *AddContractSignfieldResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddContractSignfieldResponse) SetResultCode(v string) *AddContractSignfieldResponse {
	s.ResultCode = &v
	return s
}

func (s *AddContractSignfieldResponse) SetResultMsg(v string) *AddContractSignfieldResponse {
	s.ResultMsg = &v
	return s
}

func (s *AddContractSignfieldResponse) SetCode(v int64) *AddContractSignfieldResponse {
	s.Code = &v
	return s
}

func (s *AddContractSignfieldResponse) SetMessage(v string) *AddContractSignfieldResponse {
	s.Message = &v
	return s
}

func (s *AddContractSignfieldResponse) SetSignfields(v []*ContractSignField) *AddContractSignfieldResponse {
	s.Signfields = v
	return s
}

type StartContractFlowRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程ID
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
}

func (s StartContractFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s StartContractFlowRequest) GoString() string {
	return s.String()
}

func (s *StartContractFlowRequest) SetAuthToken(v string) *StartContractFlowRequest {
	s.AuthToken = &v
	return s
}

func (s *StartContractFlowRequest) SetProductInstanceId(v string) *StartContractFlowRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartContractFlowRequest) SetFlowId(v string) *StartContractFlowRequest {
	s.FlowId = &v
	return s
}

type StartContractFlowResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s StartContractFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s StartContractFlowResponse) GoString() string {
	return s.String()
}

func (s *StartContractFlowResponse) SetReqMsgId(v string) *StartContractFlowResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartContractFlowResponse) SetResultCode(v string) *StartContractFlowResponse {
	s.ResultCode = &v
	return s
}

func (s *StartContractFlowResponse) SetResultMsg(v string) *StartContractFlowResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartContractFlowResponse) SetCode(v int64) *StartContractFlowResponse {
	s.Code = &v
	return s
}

func (s *StartContractFlowResponse) SetMessage(v string) *StartContractFlowResponse {
	s.Message = &v
	return s
}

type SaveContractFlowRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程ID
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
}

func (s SaveContractFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveContractFlowRequest) GoString() string {
	return s.String()
}

func (s *SaveContractFlowRequest) SetAuthToken(v string) *SaveContractFlowRequest {
	s.AuthToken = &v
	return s
}

func (s *SaveContractFlowRequest) SetProductInstanceId(v string) *SaveContractFlowRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SaveContractFlowRequest) SetFlowId(v string) *SaveContractFlowRequest {
	s.FlowId = &v
	return s
}

type SaveContractFlowResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s SaveContractFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveContractFlowResponse) GoString() string {
	return s.String()
}

func (s *SaveContractFlowResponse) SetReqMsgId(v string) *SaveContractFlowResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SaveContractFlowResponse) SetResultCode(v string) *SaveContractFlowResponse {
	s.ResultCode = &v
	return s
}

func (s *SaveContractFlowResponse) SetResultMsg(v string) *SaveContractFlowResponse {
	s.ResultMsg = &v
	return s
}

func (s *SaveContractFlowResponse) SetCode(v int64) *SaveContractFlowResponse {
	s.Code = &v
	return s
}

func (s *SaveContractFlowResponse) SetMessage(v string) *SaveContractFlowResponse {
	s.Message = &v
	return s
}

type DownloadContractDocumentRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程ID
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
}

func (s DownloadContractDocumentRequest) String() string {
	return tea.Prettify(s)
}

func (s DownloadContractDocumentRequest) GoString() string {
	return s.String()
}

func (s *DownloadContractDocumentRequest) SetAuthToken(v string) *DownloadContractDocumentRequest {
	s.AuthToken = &v
	return s
}

func (s *DownloadContractDocumentRequest) SetProductInstanceId(v string) *DownloadContractDocumentRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DownloadContractDocumentRequest) SetFlowId(v string) *DownloadContractDocumentRequest {
	s.FlowId = &v
	return s
}

type DownloadContractDocumentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 文档下载地址信息列表
	Docs []*ContractDocAddress `json:"docs,omitempty" xml:"docs,omitempty" type:"Repeated"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s DownloadContractDocumentResponse) String() string {
	return tea.Prettify(s)
}

func (s DownloadContractDocumentResponse) GoString() string {
	return s.String()
}

func (s *DownloadContractDocumentResponse) SetReqMsgId(v string) *DownloadContractDocumentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DownloadContractDocumentResponse) SetResultCode(v string) *DownloadContractDocumentResponse {
	s.ResultCode = &v
	return s
}

func (s *DownloadContractDocumentResponse) SetResultMsg(v string) *DownloadContractDocumentResponse {
	s.ResultMsg = &v
	return s
}

func (s *DownloadContractDocumentResponse) SetCode(v int64) *DownloadContractDocumentResponse {
	s.Code = &v
	return s
}

func (s *DownloadContractDocumentResponse) SetDocs(v []*ContractDocAddress) *DownloadContractDocumentResponse {
	s.Docs = v
	return s
}

func (s *DownloadContractDocumentResponse) SetMessage(v string) *DownloadContractDocumentResponse {
	s.Message = &v
	return s
}

type AddContractFileRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 文件名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 模板编号
	TemplateId *string `json:"template_id,omitempty" xml:"template_id,omitempty" require:"true"`
	// 输入项填充内容，以key:value传入
	SimpleFormFields *string `json:"simple_form_fields,omitempty" xml:"simple_form_fields,omitempty" require:"true"`
}

func (s AddContractFileRequest) String() string {
	return tea.Prettify(s)
}

func (s AddContractFileRequest) GoString() string {
	return s.String()
}

func (s *AddContractFileRequest) SetAuthToken(v string) *AddContractFileRequest {
	s.AuthToken = &v
	return s
}

func (s *AddContractFileRequest) SetProductInstanceId(v string) *AddContractFileRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AddContractFileRequest) SetName(v string) *AddContractFileRequest {
	s.Name = &v
	return s
}

func (s *AddContractFileRequest) SetTemplateId(v string) *AddContractFileRequest {
	s.TemplateId = &v
	return s
}

func (s *AddContractFileRequest) SetSimpleFormFields(v string) *AddContractFileRequest {
	s.SimpleFormFields = &v
	return s
}

type AddContractFileResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 文件下载地址，有效期一小时
	DownloadUrl *string `json:"download_url,omitempty" xml:"download_url,omitempty"`
	// 文件id
	FileId *string `json:"file_id,omitempty" xml:"file_id,omitempty"`
	// 文件名称
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s AddContractFileResponse) String() string {
	return tea.Prettify(s)
}

func (s AddContractFileResponse) GoString() string {
	return s.String()
}

func (s *AddContractFileResponse) SetReqMsgId(v string) *AddContractFileResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddContractFileResponse) SetResultCode(v string) *AddContractFileResponse {
	s.ResultCode = &v
	return s
}

func (s *AddContractFileResponse) SetResultMsg(v string) *AddContractFileResponse {
	s.ResultMsg = &v
	return s
}

func (s *AddContractFileResponse) SetDownloadUrl(v string) *AddContractFileResponse {
	s.DownloadUrl = &v
	return s
}

func (s *AddContractFileResponse) SetFileId(v string) *AddContractFileResponse {
	s.FileId = &v
	return s
}

func (s *AddContractFileResponse) SetFileName(v string) *AddContractFileResponse {
	s.FileName = &v
	return s
}

func (s *AddContractFileResponse) SetCode(v int64) *AddContractFileResponse {
	s.Code = &v
	return s
}

func (s *AddContractFileResponse) SetMessage(v string) *AddContractFileResponse {
	s.Message = &v
	return s
}

type CreateContractPlatformRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 平台方经办人信息
	Creator *ContractAccountApplication `json:"creator,omitempty" xml:"creator,omitempty" require:"true"`
	// 平台机构信息
	Platform *ContractOrganizationApplication `json:"platform,omitempty" xml:"platform,omitempty" require:"true"`
	// 代理客户时，实际用户的租户ID
	//
	SubTenantId *string `json:"sub_tenant_id,omitempty" xml:"sub_tenant_id,omitempty"`
}

func (s CreateContractPlatformRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractPlatformRequest) GoString() string {
	return s.String()
}

func (s *CreateContractPlatformRequest) SetAuthToken(v string) *CreateContractPlatformRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractPlatformRequest) SetProductInstanceId(v string) *CreateContractPlatformRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateContractPlatformRequest) SetCreator(v *ContractAccountApplication) *CreateContractPlatformRequest {
	s.Creator = v
	return s
}

func (s *CreateContractPlatformRequest) SetPlatform(v *ContractOrganizationApplication) *CreateContractPlatformRequest {
	s.Platform = v
	return s
}

func (s *CreateContractPlatformRequest) SetSubTenantId(v string) *CreateContractPlatformRequest {
	s.SubTenantId = &v
	return s
}

type CreateContractPlatformResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建人ID
	CreatorId *string `json:"creator_id,omitempty" xml:"creator_id,omitempty"`
	// 平台方ID
	PlatformId *string `json:"platform_id,omitempty" xml:"platform_id,omitempty"`
	// 平台用户与智能合同服务间鉴权使用的密钥
	Secret *string `json:"secret,omitempty" xml:"secret,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s CreateContractPlatformResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractPlatformResponse) GoString() string {
	return s.String()
}

func (s *CreateContractPlatformResponse) SetReqMsgId(v string) *CreateContractPlatformResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractPlatformResponse) SetResultCode(v string) *CreateContractPlatformResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractPlatformResponse) SetResultMsg(v string) *CreateContractPlatformResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractPlatformResponse) SetCreatorId(v string) *CreateContractPlatformResponse {
	s.CreatorId = &v
	return s
}

func (s *CreateContractPlatformResponse) SetPlatformId(v string) *CreateContractPlatformResponse {
	s.PlatformId = &v
	return s
}

func (s *CreateContractPlatformResponse) SetSecret(v string) *CreateContractPlatformResponse {
	s.Secret = &v
	return s
}

func (s *CreateContractPlatformResponse) SetCode(v int64) *CreateContractPlatformResponse {
	s.Code = &v
	return s
}

func (s *CreateContractPlatformResponse) SetMessage(v string) *CreateContractPlatformResponse {
	s.Message = &v
	return s
}

type CreateContractUserRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户类型为机构时，填写机构信息
	Organization *ContractOrganizationApplication `json:"organization,omitempty" xml:"organization,omitempty"`
	// 用户类型为个人时，则为个人用户信息；用户类型为机构时，则为机构账号经办人信息
	User *ContractAccountApplication `json:"user,omitempty" xml:"user,omitempty" require:"true"`
	// 用户类型，个人（PERSON）或机构（ORGANIZATION）
	UserType *string `json:"user_type,omitempty" xml:"user_type,omitempty" require:"true"`
	// 代理客户时，实际用户的租户ID
	SubTenantId *string `json:"sub_tenant_id,omitempty" xml:"sub_tenant_id,omitempty"`
}

func (s CreateContractUserRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractUserRequest) GoString() string {
	return s.String()
}

func (s *CreateContractUserRequest) SetAuthToken(v string) *CreateContractUserRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractUserRequest) SetProductInstanceId(v string) *CreateContractUserRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateContractUserRequest) SetOrganization(v *ContractOrganizationApplication) *CreateContractUserRequest {
	s.Organization = v
	return s
}

func (s *CreateContractUserRequest) SetUser(v *ContractAccountApplication) *CreateContractUserRequest {
	s.User = v
	return s
}

func (s *CreateContractUserRequest) SetUserType(v string) *CreateContractUserRequest {
	s.UserType = &v
	return s
}

func (s *CreateContractUserRequest) SetSubTenantId(v string) *CreateContractUserRequest {
	s.SubTenantId = &v
	return s
}

type CreateContractUserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 机构账号
	OrganizationId *string `json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// 用户类型为个人时返回用户账号；用户类型为机构时返回经办人账号
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s CreateContractUserResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractUserResponse) GoString() string {
	return s.String()
}

func (s *CreateContractUserResponse) SetReqMsgId(v string) *CreateContractUserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractUserResponse) SetResultCode(v string) *CreateContractUserResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractUserResponse) SetResultMsg(v string) *CreateContractUserResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractUserResponse) SetOrganizationId(v string) *CreateContractUserResponse {
	s.OrganizationId = &v
	return s
}

func (s *CreateContractUserResponse) SetUserId(v string) *CreateContractUserResponse {
	s.UserId = &v
	return s
}

func (s *CreateContractUserResponse) SetCode(v int64) *CreateContractUserResponse {
	s.Code = &v
	return s
}

func (s *CreateContractUserResponse) SetMessage(v string) *CreateContractUserResponse {
	s.Message = &v
	return s
}

type StartContractHandsignRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 代理商户账户
	AgentAccountId *string `json:"agent_account_id,omitempty" xml:"agent_account_id,omitempty"`
	// 是否自动归档，默认为true
	AutoArchive *bool `json:"auto_archive,omitempty" xml:"auto_archive,omitempty"`
	// 合同文件主题
	BusinessScene *string `json:"business_scene,omitempty" xml:"business_scene,omitempty" require:"true"`
	// 文件到期前，提前多少小时回调提醒续签，小时（时间区间：1小时——15天），默认不提醒
	ContractRemind *int64 `json:"contract_remind,omitempty" xml:"contract_remind,omitempty"`
	// 签署流程任务配置信息
	ContractSignFlowConfig *ContractSignFlowConfig `json:"contract_sign_flow_config,omitempty" xml:"contract_sign_flow_config,omitempty"`
	// 文件有效截止日期,毫秒，默认不失效
	ContractValidity *int64 `json:"contract_validity,omitempty" xml:"contract_validity,omitempty"`
	// 发起人账户id，即发起本次签署的操作人个人账号id；如不传，默认由对接平台发起
	InitiatorAccountId *string `json:"initiator_account_id,omitempty" xml:"initiator_account_id,omitempty"`
	// 发起方主体id，如存在个人代机构发起签约，则需传入机构id；如不传，则默认是对接平台
	//
	//
	InitiatorAuthorizedAccountId *string `json:"initiator_authorized_account_id,omitempty" xml:"initiator_authorized_account_id,omitempty"`
	// 代扣规则详情，不可为空
	RepaymentOrderInfo []*RepaymentOrderRequest `json:"repayment_order_info,omitempty" xml:"repayment_order_info,omitempty" type:"Repeated"`
	// 签署平台，ALIPAY（支付宝小程序）或H5，默认H5
	SignPlatform *string `json:"sign_platform,omitempty" xml:"sign_platform,omitempty"`
	// 签署有效截止日期,毫秒，默认不失效
	SignValidity *string `json:"sign_validity,omitempty" xml:"sign_validity,omitempty"`
	// 输入项填充内容，以key:value传入
	SimpleFormFields *string `json:"simple_form_fields,omitempty" xml:"simple_form_fields,omitempty" require:"true"`
	// 待签署的智能合同模板ID
	Template *string `json:"template,omitempty" xml:"template,omitempty" require:"true"`
	// 待签署客户的账户ID
	UserAccount *string `json:"user_account,omitempty" xml:"user_account,omitempty" require:"true"`
	// 是否需要短网址
	ShortUrl *bool `json:"short_url,omitempty" xml:"short_url,omitempty"`
	// 租赁订单Id
	BclOrderId *string `json:"bcl_order_id,omitempty" xml:"bcl_order_id,omitempty" maxLength:"32"`
}

func (s StartContractHandsignRequest) String() string {
	return tea.Prettify(s)
}

func (s StartContractHandsignRequest) GoString() string {
	return s.String()
}

func (s *StartContractHandsignRequest) SetAuthToken(v string) *StartContractHandsignRequest {
	s.AuthToken = &v
	return s
}

func (s *StartContractHandsignRequest) SetProductInstanceId(v string) *StartContractHandsignRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartContractHandsignRequest) SetAgentAccountId(v string) *StartContractHandsignRequest {
	s.AgentAccountId = &v
	return s
}

func (s *StartContractHandsignRequest) SetAutoArchive(v bool) *StartContractHandsignRequest {
	s.AutoArchive = &v
	return s
}

func (s *StartContractHandsignRequest) SetBusinessScene(v string) *StartContractHandsignRequest {
	s.BusinessScene = &v
	return s
}

func (s *StartContractHandsignRequest) SetContractRemind(v int64) *StartContractHandsignRequest {
	s.ContractRemind = &v
	return s
}

func (s *StartContractHandsignRequest) SetContractSignFlowConfig(v *ContractSignFlowConfig) *StartContractHandsignRequest {
	s.ContractSignFlowConfig = v
	return s
}

func (s *StartContractHandsignRequest) SetContractValidity(v int64) *StartContractHandsignRequest {
	s.ContractValidity = &v
	return s
}

func (s *StartContractHandsignRequest) SetInitiatorAccountId(v string) *StartContractHandsignRequest {
	s.InitiatorAccountId = &v
	return s
}

func (s *StartContractHandsignRequest) SetInitiatorAuthorizedAccountId(v string) *StartContractHandsignRequest {
	s.InitiatorAuthorizedAccountId = &v
	return s
}

func (s *StartContractHandsignRequest) SetRepaymentOrderInfo(v []*RepaymentOrderRequest) *StartContractHandsignRequest {
	s.RepaymentOrderInfo = v
	return s
}

func (s *StartContractHandsignRequest) SetSignPlatform(v string) *StartContractHandsignRequest {
	s.SignPlatform = &v
	return s
}

func (s *StartContractHandsignRequest) SetSignValidity(v string) *StartContractHandsignRequest {
	s.SignValidity = &v
	return s
}

func (s *StartContractHandsignRequest) SetSimpleFormFields(v string) *StartContractHandsignRequest {
	s.SimpleFormFields = &v
	return s
}

func (s *StartContractHandsignRequest) SetTemplate(v string) *StartContractHandsignRequest {
	s.Template = &v
	return s
}

func (s *StartContractHandsignRequest) SetUserAccount(v string) *StartContractHandsignRequest {
	s.UserAccount = &v
	return s
}

func (s *StartContractHandsignRequest) SetShortUrl(v bool) *StartContractHandsignRequest {
	s.ShortUrl = &v
	return s
}

func (s *StartContractHandsignRequest) SetBclOrderId(v string) *StartContractHandsignRequest {
	s.BclOrderId = &v
	return s
}

type StartContractHandsignResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 签署流程ID
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 手动签约唤起地址
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
	// 唤起签约地址短网址
	ShortUrl *string `json:"short_url,omitempty" xml:"short_url,omitempty"`
}

func (s StartContractHandsignResponse) String() string {
	return tea.Prettify(s)
}

func (s StartContractHandsignResponse) GoString() string {
	return s.String()
}

func (s *StartContractHandsignResponse) SetReqMsgId(v string) *StartContractHandsignResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartContractHandsignResponse) SetResultCode(v string) *StartContractHandsignResponse {
	s.ResultCode = &v
	return s
}

func (s *StartContractHandsignResponse) SetResultMsg(v string) *StartContractHandsignResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartContractHandsignResponse) SetCode(v int64) *StartContractHandsignResponse {
	s.Code = &v
	return s
}

func (s *StartContractHandsignResponse) SetFlowId(v string) *StartContractHandsignResponse {
	s.FlowId = &v
	return s
}

func (s *StartContractHandsignResponse) SetMessage(v string) *StartContractHandsignResponse {
	s.Message = &v
	return s
}

func (s *StartContractHandsignResponse) SetUrl(v string) *StartContractHandsignResponse {
	s.Url = &v
	return s
}

func (s *StartContractHandsignResponse) SetShortUrl(v string) *StartContractHandsignResponse {
	s.ShortUrl = &v
	return s
}

type QueryContractFlowRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
}

func (s QueryContractFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContractFlowRequest) GoString() string {
	return s.String()
}

func (s *QueryContractFlowRequest) SetAuthToken(v string) *QueryContractFlowRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContractFlowRequest) SetProductInstanceId(v string) *QueryContractFlowRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryContractFlowRequest) SetFlowId(v string) *QueryContractFlowRequest {
	s.FlowId = &v
	return s
}

type QueryContractFlowResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否自动归档
	AutoArchive *bool `json:"auto_archive,omitempty" xml:"auto_archive,omitempty"`
	// 文件主题
	BusinessScene *string `json:"business_scene,omitempty" xml:"business_scene,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 流程配置信息
	ConfigInfo *ContractSignFlowConfig `json:"config_info,omitempty" xml:"config_info,omitempty"`
	// 文件到期前，提前多少小时提醒续签
	ContractRemind *int64 `json:"contract_remind,omitempty" xml:"contract_remind,omitempty"`
	// 文件有效截止日期
	ContractValidity *int64 `json:"contract_validity,omitempty" xml:"contract_validity,omitempty"`
	// 流程描述, 如果流程已拒签或已撤回, 并且存在拒签或撤回原因, 流程描述显示为原因, 否则默认为流程状态描述
	FlowDesc *string `json:"flow_desc,omitempty" xml:"flow_desc,omitempty"`
	// 流程结束时间
	FlowEndTime *string `json:"flow_end_time,omitempty" xml:"flow_end_time,omitempty"`
	// 流程ID
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty"`
	// 流程开始时间
	FlowStartTime *string `json:"flow_start_time,omitempty" xml:"flow_start_time,omitempty"`
	// 流程状态,0-草稿 1-签署中 2-完成 3-撤销 4-终止 5-过期 6-删除 7-拒签
	FlowStatus *int64 `json:"flow_status,omitempty" xml:"flow_status,omitempty"`
	// 发起人账户id
	InitiatorAccountId *string `json:"initiator_account_id,omitempty" xml:"initiator_account_id,omitempty"`
	// 发起方主体id
	InitiatorAuthorizedAccountId *string `json:"initiator_authorized_account_id,omitempty" xml:"initiator_authorized_account_id,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 签署有效截止日期
	SignValidity *string `json:"sign_validity,omitempty" xml:"sign_validity,omitempty"`
}

func (s QueryContractFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContractFlowResponse) GoString() string {
	return s.String()
}

func (s *QueryContractFlowResponse) SetReqMsgId(v string) *QueryContractFlowResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContractFlowResponse) SetResultCode(v string) *QueryContractFlowResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContractFlowResponse) SetResultMsg(v string) *QueryContractFlowResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContractFlowResponse) SetAutoArchive(v bool) *QueryContractFlowResponse {
	s.AutoArchive = &v
	return s
}

func (s *QueryContractFlowResponse) SetBusinessScene(v string) *QueryContractFlowResponse {
	s.BusinessScene = &v
	return s
}

func (s *QueryContractFlowResponse) SetCode(v int64) *QueryContractFlowResponse {
	s.Code = &v
	return s
}

func (s *QueryContractFlowResponse) SetConfigInfo(v *ContractSignFlowConfig) *QueryContractFlowResponse {
	s.ConfigInfo = v
	return s
}

func (s *QueryContractFlowResponse) SetContractRemind(v int64) *QueryContractFlowResponse {
	s.ContractRemind = &v
	return s
}

func (s *QueryContractFlowResponse) SetContractValidity(v int64) *QueryContractFlowResponse {
	s.ContractValidity = &v
	return s
}

func (s *QueryContractFlowResponse) SetFlowDesc(v string) *QueryContractFlowResponse {
	s.FlowDesc = &v
	return s
}

func (s *QueryContractFlowResponse) SetFlowEndTime(v string) *QueryContractFlowResponse {
	s.FlowEndTime = &v
	return s
}

func (s *QueryContractFlowResponse) SetFlowId(v string) *QueryContractFlowResponse {
	s.FlowId = &v
	return s
}

func (s *QueryContractFlowResponse) SetFlowStartTime(v string) *QueryContractFlowResponse {
	s.FlowStartTime = &v
	return s
}

func (s *QueryContractFlowResponse) SetFlowStatus(v int64) *QueryContractFlowResponse {
	s.FlowStatus = &v
	return s
}

func (s *QueryContractFlowResponse) SetInitiatorAccountId(v string) *QueryContractFlowResponse {
	s.InitiatorAccountId = &v
	return s
}

func (s *QueryContractFlowResponse) SetInitiatorAuthorizedAccountId(v string) *QueryContractFlowResponse {
	s.InitiatorAuthorizedAccountId = &v
	return s
}

func (s *QueryContractFlowResponse) SetMessage(v string) *QueryContractFlowResponse {
	s.Message = &v
	return s
}

func (s *QueryContractFlowResponse) SetSignValidity(v string) *QueryContractFlowResponse {
	s.SignValidity = &v
	return s
}

type CreateContractAccountsealimageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 印章别名
	Alias *string `json:"alias,omitempty" xml:"alias,omitempty"`
	// 印章高度, 个人默认95px, 机构默认159px
	Height *int64 `json:"height,omitempty" xml:"height,omitempty"`
	// 印章宽度, 个人默认95px, 机构默认159px
	Width *int64 `json:"width,omitempty" xml:"width,omitempty"`
	// 印章数据类型，BASE64：base64格式
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 印章数据，base64格式字符串，不包含格式前缀
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
	// 是否对图片进行透明化处理，默认false。仅对图片整体做透明化处理，无法去除图片背景
	TransparentFlag *bool `json:"transparent_flag,omitempty" xml:"transparent_flag,omitempty"`
}

func (s CreateContractAccountsealimageRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractAccountsealimageRequest) GoString() string {
	return s.String()
}

func (s *CreateContractAccountsealimageRequest) SetAuthToken(v string) *CreateContractAccountsealimageRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractAccountsealimageRequest) SetProductInstanceId(v string) *CreateContractAccountsealimageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateContractAccountsealimageRequest) SetAccountId(v string) *CreateContractAccountsealimageRequest {
	s.AccountId = &v
	return s
}

func (s *CreateContractAccountsealimageRequest) SetAlias(v string) *CreateContractAccountsealimageRequest {
	s.Alias = &v
	return s
}

func (s *CreateContractAccountsealimageRequest) SetHeight(v int64) *CreateContractAccountsealimageRequest {
	s.Height = &v
	return s
}

func (s *CreateContractAccountsealimageRequest) SetWidth(v int64) *CreateContractAccountsealimageRequest {
	s.Width = &v
	return s
}

func (s *CreateContractAccountsealimageRequest) SetType(v string) *CreateContractAccountsealimageRequest {
	s.Type = &v
	return s
}

func (s *CreateContractAccountsealimageRequest) SetData(v string) *CreateContractAccountsealimageRequest {
	s.Data = &v
	return s
}

func (s *CreateContractAccountsealimageRequest) SetTransparentFlag(v bool) *CreateContractAccountsealimageRequest {
	s.TransparentFlag = &v
	return s
}

type CreateContractAccountsealimageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 印章fileKey
	FileKey *string `json:"file_key,omitempty" xml:"file_key,omitempty"`
	// 印章id
	SealId *string `json:"seal_id,omitempty" xml:"seal_id,omitempty"`
	// 印章下载地址, 有效时间1小时
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
	// 印章高度
	Height *int64 `json:"height,omitempty" xml:"height,omitempty"`
	// 印章宽度
	Width *int64 `json:"width,omitempty" xml:"width,omitempty"`
}

func (s CreateContractAccountsealimageResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractAccountsealimageResponse) GoString() string {
	return s.String()
}

func (s *CreateContractAccountsealimageResponse) SetReqMsgId(v string) *CreateContractAccountsealimageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractAccountsealimageResponse) SetResultCode(v string) *CreateContractAccountsealimageResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractAccountsealimageResponse) SetResultMsg(v string) *CreateContractAccountsealimageResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractAccountsealimageResponse) SetCode(v int64) *CreateContractAccountsealimageResponse {
	s.Code = &v
	return s
}

func (s *CreateContractAccountsealimageResponse) SetMessage(v string) *CreateContractAccountsealimageResponse {
	s.Message = &v
	return s
}

func (s *CreateContractAccountsealimageResponse) SetFileKey(v string) *CreateContractAccountsealimageResponse {
	s.FileKey = &v
	return s
}

func (s *CreateContractAccountsealimageResponse) SetSealId(v string) *CreateContractAccountsealimageResponse {
	s.SealId = &v
	return s
}

func (s *CreateContractAccountsealimageResponse) SetUrl(v string) *CreateContractAccountsealimageResponse {
	s.Url = &v
	return s
}

func (s *CreateContractAccountsealimageResponse) SetHeight(v int64) *CreateContractAccountsealimageResponse {
	s.Height = &v
	return s
}

func (s *CreateContractAccountsealimageResponse) SetWidth(v int64) *CreateContractAccountsealimageResponse {
	s.Width = &v
	return s
}

type GetContractFileuploadurlRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 所属账号id，即个人账号id或机构账号id，如不传，则默认属于对接平台
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
	// 先计算文件md5值，在对该md5值进行base64编码
	ContentMd5 *string `json:"content_md5,omitempty" xml:"content_md5,omitempty" require:"true"`
	// 目标文件的MIME类型
	ContentType *string `json:"content_type,omitempty" xml:"content_type,omitempty" require:"true"`
	// 是否转换成pdf文档，默认false，代表不做转换。转换是异步行为，如果指定要转换，需要调用查询文件信息接口查询状态，转换完成后才可使用。
	Convert2Pdf *string `json:"convert_2_pdf,omitempty" xml:"convert_2_pdf,omitempty" require:"true"`
	// 文件大小，单位byte
	FileSize *int64 `json:"file_size,omitempty" xml:"file_size,omitempty" require:"true"`
	// 文件名称（必须带上文件扩展名，不然会导致后续发起流程校验过不去 示例：合同.pdf ）
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty" require:"true"`
	// 代理客户时，实际用户的租户ID
	SubTenantId *string `json:"sub_tenant_id,omitempty" xml:"sub_tenant_id,omitempty"`
}

func (s GetContractFileuploadurlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetContractFileuploadurlRequest) GoString() string {
	return s.String()
}

func (s *GetContractFileuploadurlRequest) SetAuthToken(v string) *GetContractFileuploadurlRequest {
	s.AuthToken = &v
	return s
}

func (s *GetContractFileuploadurlRequest) SetProductInstanceId(v string) *GetContractFileuploadurlRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetContractFileuploadurlRequest) SetAccountId(v string) *GetContractFileuploadurlRequest {
	s.AccountId = &v
	return s
}

func (s *GetContractFileuploadurlRequest) SetContentMd5(v string) *GetContractFileuploadurlRequest {
	s.ContentMd5 = &v
	return s
}

func (s *GetContractFileuploadurlRequest) SetContentType(v string) *GetContractFileuploadurlRequest {
	s.ContentType = &v
	return s
}

func (s *GetContractFileuploadurlRequest) SetConvert2Pdf(v string) *GetContractFileuploadurlRequest {
	s.Convert2Pdf = &v
	return s
}

func (s *GetContractFileuploadurlRequest) SetFileSize(v int64) *GetContractFileuploadurlRequest {
	s.FileSize = &v
	return s
}

func (s *GetContractFileuploadurlRequest) SetFileName(v string) *GetContractFileuploadurlRequest {
	s.FileName = &v
	return s
}

func (s *GetContractFileuploadurlRequest) SetSubTenantId(v string) *GetContractFileuploadurlRequest {
	s.SubTenantId = &v
	return s
}

type GetContractFileuploadurlResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 文件Id
	FileId *string `json:"file_id,omitempty" xml:"file_id,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 文件直传地址, 可以重复使用，但是只能传一样的文件，有效期一小时
	UploadUrl *string `json:"upload_url,omitempty" xml:"upload_url,omitempty"`
}

func (s GetContractFileuploadurlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetContractFileuploadurlResponse) GoString() string {
	return s.String()
}

func (s *GetContractFileuploadurlResponse) SetReqMsgId(v string) *GetContractFileuploadurlResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetContractFileuploadurlResponse) SetResultCode(v string) *GetContractFileuploadurlResponse {
	s.ResultCode = &v
	return s
}

func (s *GetContractFileuploadurlResponse) SetResultMsg(v string) *GetContractFileuploadurlResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetContractFileuploadurlResponse) SetCode(v int64) *GetContractFileuploadurlResponse {
	s.Code = &v
	return s
}

func (s *GetContractFileuploadurlResponse) SetFileId(v string) *GetContractFileuploadurlResponse {
	s.FileId = &v
	return s
}

func (s *GetContractFileuploadurlResponse) SetMessage(v string) *GetContractFileuploadurlResponse {
	s.Message = &v
	return s
}

func (s *GetContractFileuploadurlResponse) SetUploadUrl(v string) *GetContractFileuploadurlResponse {
	s.UploadUrl = &v
	return s
}

type AddContractPlatformsignfieldsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 签署区列表数据
	Signfields *ContractPlatformSignFieldApplication `json:"signfields,omitempty" xml:"signfields,omitempty" require:"true"`
}

func (s AddContractPlatformsignfieldsRequest) String() string {
	return tea.Prettify(s)
}

func (s AddContractPlatformsignfieldsRequest) GoString() string {
	return s.String()
}

func (s *AddContractPlatformsignfieldsRequest) SetAuthToken(v string) *AddContractPlatformsignfieldsRequest {
	s.AuthToken = &v
	return s
}

func (s *AddContractPlatformsignfieldsRequest) SetProductInstanceId(v string) *AddContractPlatformsignfieldsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AddContractPlatformsignfieldsRequest) SetFlowId(v string) *AddContractPlatformsignfieldsRequest {
	s.FlowId = &v
	return s
}

func (s *AddContractPlatformsignfieldsRequest) SetSignfields(v *ContractPlatformSignFieldApplication) *AddContractPlatformsignfieldsRequest {
	s.Signfields = v
	return s
}

type AddContractPlatformsignfieldsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 签署区列表数据
	Signfields []*ContractSignField `json:"signfields,omitempty" xml:"signfields,omitempty" type:"Repeated"`
}

func (s AddContractPlatformsignfieldsResponse) String() string {
	return tea.Prettify(s)
}

func (s AddContractPlatformsignfieldsResponse) GoString() string {
	return s.String()
}

func (s *AddContractPlatformsignfieldsResponse) SetReqMsgId(v string) *AddContractPlatformsignfieldsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AddContractPlatformsignfieldsResponse) SetResultCode(v string) *AddContractPlatformsignfieldsResponse {
	s.ResultCode = &v
	return s
}

func (s *AddContractPlatformsignfieldsResponse) SetResultMsg(v string) *AddContractPlatformsignfieldsResponse {
	s.ResultMsg = &v
	return s
}

func (s *AddContractPlatformsignfieldsResponse) SetCode(v int64) *AddContractPlatformsignfieldsResponse {
	s.Code = &v
	return s
}

func (s *AddContractPlatformsignfieldsResponse) SetMessage(v string) *AddContractPlatformsignfieldsResponse {
	s.Message = &v
	return s
}

func (s *AddContractPlatformsignfieldsResponse) SetSignfields(v []*ContractSignField) *AddContractPlatformsignfieldsResponse {
	s.Signfields = v
	return s
}

type GetContractFileRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 文件id
	FileId *string `json:"file_id,omitempty" xml:"file_id,omitempty" require:"true"`
}

func (s GetContractFileRequest) String() string {
	return tea.Prettify(s)
}

func (s GetContractFileRequest) GoString() string {
	return s.String()
}

func (s *GetContractFileRequest) SetAuthToken(v string) *GetContractFileRequest {
	s.AuthToken = &v
	return s
}

func (s *GetContractFileRequest) SetProductInstanceId(v string) *GetContractFileRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetContractFileRequest) SetFileId(v string) *GetContractFileRequest {
	s.FileId = &v
	return s
}

type GetContractFileResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 文件id
	FileId *string `json:"file_id,omitempty" xml:"file_id,omitempty"`
	// 文件名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 下载地址
	DownloadUrl *string `json:"download_url,omitempty" xml:"download_url,omitempty"`
	// 文件大小，单位byte
	Size *int64 `json:"size,omitempty" xml:"size,omitempty"`
	// 文件状态, 0:文件未上传；1:文件上传中 ；2：文件上传已完成,；3：文件上传失败 ；4：文件等待转pdf ；5：文件已转换pdf 。
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// pdf文件总页数,仅当文件类型为pdf时有值
	PdfTotalPages *int64 `json:"pdf_total_pages,omitempty" xml:"pdf_total_pages,omitempty"`
}

func (s GetContractFileResponse) String() string {
	return tea.Prettify(s)
}

func (s GetContractFileResponse) GoString() string {
	return s.String()
}

func (s *GetContractFileResponse) SetReqMsgId(v string) *GetContractFileResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetContractFileResponse) SetResultCode(v string) *GetContractFileResponse {
	s.ResultCode = &v
	return s
}

func (s *GetContractFileResponse) SetResultMsg(v string) *GetContractFileResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetContractFileResponse) SetCode(v int64) *GetContractFileResponse {
	s.Code = &v
	return s
}

func (s *GetContractFileResponse) SetMessage(v string) *GetContractFileResponse {
	s.Message = &v
	return s
}

func (s *GetContractFileResponse) SetFileId(v string) *GetContractFileResponse {
	s.FileId = &v
	return s
}

func (s *GetContractFileResponse) SetName(v string) *GetContractFileResponse {
	s.Name = &v
	return s
}

func (s *GetContractFileResponse) SetDownloadUrl(v string) *GetContractFileResponse {
	s.DownloadUrl = &v
	return s
}

func (s *GetContractFileResponse) SetSize(v int64) *GetContractFileResponse {
	s.Size = &v
	return s
}

func (s *GetContractFileResponse) SetStatus(v int64) *GetContractFileResponse {
	s.Status = &v
	return s
}

func (s *GetContractFileResponse) SetPdfTotalPages(v int64) *GetContractFileResponse {
	s.PdfTotalPages = &v
	return s
}

type QueryContractAccountsealsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 分页起始位置
	Offset *int64 `json:"offset,omitempty" xml:"offset,omitempty" require:"true"`
	// 单页数量
	Size *int64 `json:"size,omitempty" xml:"size,omitempty" require:"true"`
}

func (s QueryContractAccountsealsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContractAccountsealsRequest) GoString() string {
	return s.String()
}

func (s *QueryContractAccountsealsRequest) SetAuthToken(v string) *QueryContractAccountsealsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContractAccountsealsRequest) SetProductInstanceId(v string) *QueryContractAccountsealsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryContractAccountsealsRequest) SetAccountId(v string) *QueryContractAccountsealsRequest {
	s.AccountId = &v
	return s
}

func (s *QueryContractAccountsealsRequest) SetOffset(v int64) *QueryContractAccountsealsRequest {
	s.Offset = &v
	return s
}

func (s *QueryContractAccountsealsRequest) SetSize(v int64) *QueryContractAccountsealsRequest {
	s.Size = &v
	return s
}

type QueryContractAccountsealsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 查询总数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
	// 印章列表
	Seals []*ContractSeal `json:"seals,omitempty" xml:"seals,omitempty" type:"Repeated"`
}

func (s QueryContractAccountsealsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContractAccountsealsResponse) GoString() string {
	return s.String()
}

func (s *QueryContractAccountsealsResponse) SetReqMsgId(v string) *QueryContractAccountsealsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContractAccountsealsResponse) SetResultCode(v string) *QueryContractAccountsealsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContractAccountsealsResponse) SetResultMsg(v string) *QueryContractAccountsealsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContractAccountsealsResponse) SetCode(v int64) *QueryContractAccountsealsResponse {
	s.Code = &v
	return s
}

func (s *QueryContractAccountsealsResponse) SetMessage(v string) *QueryContractAccountsealsResponse {
	s.Message = &v
	return s
}

func (s *QueryContractAccountsealsResponse) SetTotal(v int64) *QueryContractAccountsealsResponse {
	s.Total = &v
	return s
}

func (s *QueryContractAccountsealsResponse) SetSeals(v []*ContractSeal) *QueryContractAccountsealsResponse {
	s.Seals = v
	return s
}

type QueryContractOrganizationsealsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 机构id
	OrgId *string `json:"org_id,omitempty" xml:"org_id,omitempty" require:"true"`
	// 分页起始位置
	Offset *int64 `json:"offset,omitempty" xml:"offset,omitempty" require:"true"`
	// 单页数量
	Size *int64 `json:"size,omitempty" xml:"size,omitempty" require:"true"`
}

func (s QueryContractOrganizationsealsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContractOrganizationsealsRequest) GoString() string {
	return s.String()
}

func (s *QueryContractOrganizationsealsRequest) SetAuthToken(v string) *QueryContractOrganizationsealsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContractOrganizationsealsRequest) SetProductInstanceId(v string) *QueryContractOrganizationsealsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryContractOrganizationsealsRequest) SetOrgId(v string) *QueryContractOrganizationsealsRequest {
	s.OrgId = &v
	return s
}

func (s *QueryContractOrganizationsealsRequest) SetOffset(v int64) *QueryContractOrganizationsealsRequest {
	s.Offset = &v
	return s
}

func (s *QueryContractOrganizationsealsRequest) SetSize(v int64) *QueryContractOrganizationsealsRequest {
	s.Size = &v
	return s
}

type QueryContractOrganizationsealsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 查询总数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
	// 印章列表
	Seals []*ContractSeal `json:"seals,omitempty" xml:"seals,omitempty" type:"Repeated"`
}

func (s QueryContractOrganizationsealsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContractOrganizationsealsResponse) GoString() string {
	return s.String()
}

func (s *QueryContractOrganizationsealsResponse) SetReqMsgId(v string) *QueryContractOrganizationsealsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContractOrganizationsealsResponse) SetResultCode(v string) *QueryContractOrganizationsealsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContractOrganizationsealsResponse) SetResultMsg(v string) *QueryContractOrganizationsealsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContractOrganizationsealsResponse) SetCode(v int64) *QueryContractOrganizationsealsResponse {
	s.Code = &v
	return s
}

func (s *QueryContractOrganizationsealsResponse) SetMessage(v string) *QueryContractOrganizationsealsResponse {
	s.Message = &v
	return s
}

func (s *QueryContractOrganizationsealsResponse) SetTotal(v int64) *QueryContractOrganizationsealsResponse {
	s.Total = &v
	return s
}

func (s *QueryContractOrganizationsealsResponse) SetSeals(v []*ContractSeal) *QueryContractOrganizationsealsResponse {
	s.Seals = v
	return s
}

type QueryContractFlowsignerRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
}

func (s QueryContractFlowsignerRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContractFlowsignerRequest) GoString() string {
	return s.String()
}

func (s *QueryContractFlowsignerRequest) SetAuthToken(v string) *QueryContractFlowsignerRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContractFlowsignerRequest) SetProductInstanceId(v string) *QueryContractFlowsignerRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryContractFlowsignerRequest) SetFlowId(v string) *QueryContractFlowsignerRequest {
	s.FlowId = &v
	return s
}

type QueryContractFlowsignerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 签字人列表
	Signers []*ContractFlowSigner `json:"signers,omitempty" xml:"signers,omitempty" type:"Repeated"`
}

func (s QueryContractFlowsignerResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContractFlowsignerResponse) GoString() string {
	return s.String()
}

func (s *QueryContractFlowsignerResponse) SetReqMsgId(v string) *QueryContractFlowsignerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContractFlowsignerResponse) SetResultCode(v string) *QueryContractFlowsignerResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContractFlowsignerResponse) SetResultMsg(v string) *QueryContractFlowsignerResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContractFlowsignerResponse) SetCode(v int64) *QueryContractFlowsignerResponse {
	s.Code = &v
	return s
}

func (s *QueryContractFlowsignerResponse) SetMessage(v string) *QueryContractFlowsignerResponse {
	s.Message = &v
	return s
}

func (s *QueryContractFlowsignerResponse) SetSigners(v []*ContractFlowSigner) *QueryContractFlowsignerResponse {
	s.Signers = v
	return s
}

type QueryContractSignfieldsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 账号id，默认所有签署人
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
	// 指定签署区id列表，逗号分割，默认所有签署区
	SignfieldIds *string `json:"signfield_ids,omitempty" xml:"signfield_ids,omitempty"`
}

func (s QueryContractSignfieldsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContractSignfieldsRequest) GoString() string {
	return s.String()
}

func (s *QueryContractSignfieldsRequest) SetAuthToken(v string) *QueryContractSignfieldsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContractSignfieldsRequest) SetProductInstanceId(v string) *QueryContractSignfieldsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryContractSignfieldsRequest) SetFlowId(v string) *QueryContractSignfieldsRequest {
	s.FlowId = &v
	return s
}

func (s *QueryContractSignfieldsRequest) SetAccountId(v string) *QueryContractSignfieldsRequest {
	s.AccountId = &v
	return s
}

func (s *QueryContractSignfieldsRequest) SetSignfieldIds(v string) *QueryContractSignfieldsRequest {
	s.SignfieldIds = &v
	return s
}

type QueryContractSignfieldsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 签署区列表数据
	Signfields []*ContractSignFieldDetail `json:"signfields,omitempty" xml:"signfields,omitempty" type:"Repeated"`
}

func (s QueryContractSignfieldsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContractSignfieldsResponse) GoString() string {
	return s.String()
}

func (s *QueryContractSignfieldsResponse) SetReqMsgId(v string) *QueryContractSignfieldsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContractSignfieldsResponse) SetResultCode(v string) *QueryContractSignfieldsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContractSignfieldsResponse) SetResultMsg(v string) *QueryContractSignfieldsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContractSignfieldsResponse) SetCode(v int64) *QueryContractSignfieldsResponse {
	s.Code = &v
	return s
}

func (s *QueryContractSignfieldsResponse) SetMessage(v string) *QueryContractSignfieldsResponse {
	s.Message = &v
	return s
}

func (s *QueryContractSignfieldsResponse) SetSignfields(v []*ContractSignFieldDetail) *QueryContractSignfieldsResponse {
	s.Signfields = v
	return s
}

type QueryContractAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 个人账号id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
}

func (s QueryContractAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContractAccountRequest) GoString() string {
	return s.String()
}

func (s *QueryContractAccountRequest) SetAuthToken(v string) *QueryContractAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContractAccountRequest) SetProductInstanceId(v string) *QueryContractAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryContractAccountRequest) SetAccountId(v string) *QueryContractAccountRequest {
	s.AccountId = &v
	return s
}

type QueryContractAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 个人账号id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
	// 姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 证件类型，详见个人证件类型说明
	IdType *string `json:"id_type,omitempty" xml:"id_type,omitempty"`
	// 证件号
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty"`
	// 联系方式，手机号码
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty"`
	// 联系方式，邮箱地址
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// 第三方平台的用户id
	ThirdPartyUserId *string `json:"third_party_user_id,omitempty" xml:"third_party_user_id,omitempty"`
}

func (s QueryContractAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContractAccountResponse) GoString() string {
	return s.String()
}

func (s *QueryContractAccountResponse) SetReqMsgId(v string) *QueryContractAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContractAccountResponse) SetResultCode(v string) *QueryContractAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContractAccountResponse) SetResultMsg(v string) *QueryContractAccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContractAccountResponse) SetCode(v int64) *QueryContractAccountResponse {
	s.Code = &v
	return s
}

func (s *QueryContractAccountResponse) SetMessage(v string) *QueryContractAccountResponse {
	s.Message = &v
	return s
}

func (s *QueryContractAccountResponse) SetAccountId(v string) *QueryContractAccountResponse {
	s.AccountId = &v
	return s
}

func (s *QueryContractAccountResponse) SetName(v string) *QueryContractAccountResponse {
	s.Name = &v
	return s
}

func (s *QueryContractAccountResponse) SetIdType(v string) *QueryContractAccountResponse {
	s.IdType = &v
	return s
}

func (s *QueryContractAccountResponse) SetIdNumber(v string) *QueryContractAccountResponse {
	s.IdNumber = &v
	return s
}

func (s *QueryContractAccountResponse) SetMobile(v string) *QueryContractAccountResponse {
	s.Mobile = &v
	return s
}

func (s *QueryContractAccountResponse) SetEmail(v string) *QueryContractAccountResponse {
	s.Email = &v
	return s
}

func (s *QueryContractAccountResponse) SetThirdPartyUserId(v string) *QueryContractAccountResponse {
	s.ThirdPartyUserId = &v
	return s
}

type QueryContractOrganizationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 机构账号id
	OrgId *string `json:"org_id,omitempty" xml:"org_id,omitempty" require:"true"`
}

func (s QueryContractOrganizationRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContractOrganizationRequest) GoString() string {
	return s.String()
}

func (s *QueryContractOrganizationRequest) SetAuthToken(v string) *QueryContractOrganizationRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContractOrganizationRequest) SetProductInstanceId(v string) *QueryContractOrganizationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryContractOrganizationRequest) SetOrgId(v string) *QueryContractOrganizationRequest {
	s.OrgId = &v
	return s
}

type QueryContractOrganizationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 机构账号Id
	OrgId *string `json:"org_id,omitempty" xml:"org_id,omitempty"`
	// 机构名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 证件类型，详见机构证件类型说明
	IdType *string `json:"id_type,omitempty" xml:"id_type,omitempty"`
	// 证件号
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty"`
	// 企业法人证件号
	OrgLegalIdNumber *string `json:"org_legal_id_number,omitempty" xml:"org_legal_id_number,omitempty"`
	// 企业法人名称
	OrgLegalName *string `json:"org_legal_name,omitempty" xml:"org_legal_name,omitempty"`
	// 第三方平台的机构id
	ThirdPartyUserId *string `json:"third_party_user_id,omitempty" xml:"third_party_user_id,omitempty"`
}

func (s QueryContractOrganizationResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContractOrganizationResponse) GoString() string {
	return s.String()
}

func (s *QueryContractOrganizationResponse) SetReqMsgId(v string) *QueryContractOrganizationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContractOrganizationResponse) SetResultCode(v string) *QueryContractOrganizationResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContractOrganizationResponse) SetResultMsg(v string) *QueryContractOrganizationResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContractOrganizationResponse) SetCode(v int64) *QueryContractOrganizationResponse {
	s.Code = &v
	return s
}

func (s *QueryContractOrganizationResponse) SetMessage(v string) *QueryContractOrganizationResponse {
	s.Message = &v
	return s
}

func (s *QueryContractOrganizationResponse) SetOrgId(v string) *QueryContractOrganizationResponse {
	s.OrgId = &v
	return s
}

func (s *QueryContractOrganizationResponse) SetName(v string) *QueryContractOrganizationResponse {
	s.Name = &v
	return s
}

func (s *QueryContractOrganizationResponse) SetIdType(v string) *QueryContractOrganizationResponse {
	s.IdType = &v
	return s
}

func (s *QueryContractOrganizationResponse) SetIdNumber(v string) *QueryContractOrganizationResponse {
	s.IdNumber = &v
	return s
}

func (s *QueryContractOrganizationResponse) SetOrgLegalIdNumber(v string) *QueryContractOrganizationResponse {
	s.OrgLegalIdNumber = &v
	return s
}

func (s *QueryContractOrganizationResponse) SetOrgLegalName(v string) *QueryContractOrganizationResponse {
	s.OrgLegalName = &v
	return s
}

func (s *QueryContractOrganizationResponse) SetThirdPartyUserId(v string) *QueryContractOrganizationResponse {
	s.ThirdPartyUserId = &v
	return s
}

type QueryContractTemplateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 模板id
	TemplateId *string `json:"template_id,omitempty" xml:"template_id,omitempty" require:"true"`
}

func (s QueryContractTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContractTemplateRequest) GoString() string {
	return s.String()
}

func (s *QueryContractTemplateRequest) SetAuthToken(v string) *QueryContractTemplateRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContractTemplateRequest) SetProductInstanceId(v string) *QueryContractTemplateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryContractTemplateRequest) SetTemplateId(v string) *QueryContractTemplateRequest {
	s.TemplateId = &v
	return s
}

type QueryContractTemplateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 创建时间
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// 模板文件下载地址
	DownloadUrl *string `json:"download_url,omitempty" xml:"download_url,omitempty"`
	// 模板文件大小
	FileSize *int64 `json:"file_size,omitempty" xml:"file_size,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 文件模板中的输入项组件列表
	StructComponents []*ContractTemplateStructComponent `json:"struct_components,omitempty" xml:"struct_components,omitempty" type:"Repeated"`
	// 模板id
	TemplateId *string `json:"template_id,omitempty" xml:"template_id,omitempty"`
	// 模板名称
	TemplateName *string `json:"template_name,omitempty" xml:"template_name,omitempty"`
	// 更新时间
	UpdateTime *int64 `json:"update_time,omitempty" xml:"update_time,omitempty"`
}

func (s QueryContractTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContractTemplateResponse) GoString() string {
	return s.String()
}

func (s *QueryContractTemplateResponse) SetReqMsgId(v string) *QueryContractTemplateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContractTemplateResponse) SetResultCode(v string) *QueryContractTemplateResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContractTemplateResponse) SetResultMsg(v string) *QueryContractTemplateResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContractTemplateResponse) SetCode(v int64) *QueryContractTemplateResponse {
	s.Code = &v
	return s
}

func (s *QueryContractTemplateResponse) SetCreateTime(v int64) *QueryContractTemplateResponse {
	s.CreateTime = &v
	return s
}

func (s *QueryContractTemplateResponse) SetDownloadUrl(v string) *QueryContractTemplateResponse {
	s.DownloadUrl = &v
	return s
}

func (s *QueryContractTemplateResponse) SetFileSize(v int64) *QueryContractTemplateResponse {
	s.FileSize = &v
	return s
}

func (s *QueryContractTemplateResponse) SetMessage(v string) *QueryContractTemplateResponse {
	s.Message = &v
	return s
}

func (s *QueryContractTemplateResponse) SetStructComponents(v []*ContractTemplateStructComponent) *QueryContractTemplateResponse {
	s.StructComponents = v
	return s
}

func (s *QueryContractTemplateResponse) SetTemplateId(v string) *QueryContractTemplateResponse {
	s.TemplateId = &v
	return s
}

func (s *QueryContractTemplateResponse) SetTemplateName(v string) *QueryContractTemplateResponse {
	s.TemplateName = &v
	return s
}

func (s *QueryContractTemplateResponse) SetUpdateTime(v int64) *QueryContractTemplateResponse {
	s.UpdateTime = &v
	return s
}

type CreateContractSignflowRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 是否自动归档，默认false 如设置为true，则在流程开启后，当所有签署人签署完毕，系统自动将流程归档，状态变为“已完成”状态，在流程状态为“已完成”前，可随时添加签署人；如设置为false，则在调用流程开启后，需主动调用签署流程归档接口，将流程状态变更为“已完成”，归档前可随时添加签署人；已完成的流程才可下载签署后的文件
	AutoArchive *bool `json:"auto_archive,omitempty" xml:"auto_archive,omitempty"`
	// 是否强制代扣
	AutoDeductionForce *bool `json:"auto_deduction_force,omitempty" xml:"auto_deduction_force,omitempty"`
	// 文件主题
	BusinessScene *string `json:"business_scene,omitempty" xml:"business_scene,omitempty" require:"true"`
	// 任务配置信息
	ContractSignFlowConfig *ContractSignFlowConfig `json:"contract_sign_flow_config,omitempty" xml:"contract_sign_flow_config,omitempty"`
	// 发起人账户id，即发起本次签署的操作人个人账号id；如不传，默认由对接平台发起
	InitiatorAccountId *string `json:"initiator_account_id,omitempty" xml:"initiator_account_id,omitempty"`
	// 发起方主体id，如存在个人代机构发起签约，则需传入机构id；如不传，则默认是对接平台
	InitiatorAuthorizedAccountId *string `json:"initiator_authorized_account_id,omitempty" xml:"initiator_authorized_account_id,omitempty"`
	// 代扣规则详情
	RepaymentOrderInfo []*RepaymentOrderRequest `json:"repayment_order_info,omitempty" xml:"repayment_order_info,omitempty" type:"Repeated"`
	// 签署平台，ALIPAY（支付宝小程序）或H5
	SignPlatform *string `json:"sign_platform,omitempty" xml:"sign_platform,omitempty"`
	// 签署有效截止日期，毫秒，默认3天失效
	SignValidity *int64 `json:"sign_validity,omitempty" xml:"sign_validity,omitempty"`
	//  付款方ID（个人）
	PayerTuid *string `json:"payer_tuid,omitempty" xml:"payer_tuid,omitempty"`
	// 收款方ID(机构)
	PayeeTuid *string `json:"payee_tuid,omitempty" xml:"payee_tuid,omitempty"`
	// 租赁订单Id
	BclOrderId *string `json:"bcl_order_id,omitempty" xml:"bcl_order_id,omitempty" maxLength:"32"`
}

func (s CreateContractSignflowRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractSignflowRequest) GoString() string {
	return s.String()
}

func (s *CreateContractSignflowRequest) SetAuthToken(v string) *CreateContractSignflowRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractSignflowRequest) SetProductInstanceId(v string) *CreateContractSignflowRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateContractSignflowRequest) SetAutoArchive(v bool) *CreateContractSignflowRequest {
	s.AutoArchive = &v
	return s
}

func (s *CreateContractSignflowRequest) SetAutoDeductionForce(v bool) *CreateContractSignflowRequest {
	s.AutoDeductionForce = &v
	return s
}

func (s *CreateContractSignflowRequest) SetBusinessScene(v string) *CreateContractSignflowRequest {
	s.BusinessScene = &v
	return s
}

func (s *CreateContractSignflowRequest) SetContractSignFlowConfig(v *ContractSignFlowConfig) *CreateContractSignflowRequest {
	s.ContractSignFlowConfig = v
	return s
}

func (s *CreateContractSignflowRequest) SetInitiatorAccountId(v string) *CreateContractSignflowRequest {
	s.InitiatorAccountId = &v
	return s
}

func (s *CreateContractSignflowRequest) SetInitiatorAuthorizedAccountId(v string) *CreateContractSignflowRequest {
	s.InitiatorAuthorizedAccountId = &v
	return s
}

func (s *CreateContractSignflowRequest) SetRepaymentOrderInfo(v []*RepaymentOrderRequest) *CreateContractSignflowRequest {
	s.RepaymentOrderInfo = v
	return s
}

func (s *CreateContractSignflowRequest) SetSignPlatform(v string) *CreateContractSignflowRequest {
	s.SignPlatform = &v
	return s
}

func (s *CreateContractSignflowRequest) SetSignValidity(v int64) *CreateContractSignflowRequest {
	s.SignValidity = &v
	return s
}

func (s *CreateContractSignflowRequest) SetPayerTuid(v string) *CreateContractSignflowRequest {
	s.PayerTuid = &v
	return s
}

func (s *CreateContractSignflowRequest) SetPayeeTuid(v string) *CreateContractSignflowRequest {
	s.PayeeTuid = &v
	return s
}

func (s *CreateContractSignflowRequest) SetBclOrderId(v string) *CreateContractSignflowRequest {
	s.BclOrderId = &v
	return s
}

type CreateContractSignflowResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 签约流程ID
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s CreateContractSignflowResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractSignflowResponse) GoString() string {
	return s.String()
}

func (s *CreateContractSignflowResponse) SetReqMsgId(v string) *CreateContractSignflowResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractSignflowResponse) SetResultCode(v string) *CreateContractSignflowResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractSignflowResponse) SetResultMsg(v string) *CreateContractSignflowResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractSignflowResponse) SetCode(v int64) *CreateContractSignflowResponse {
	s.Code = &v
	return s
}

func (s *CreateContractSignflowResponse) SetFlowId(v string) *CreateContractSignflowResponse {
	s.FlowId = &v
	return s
}

func (s *CreateContractSignflowResponse) SetMessage(v string) *CreateContractSignflowResponse {
	s.Message = &v
	return s
}

type CreateContractRegisterzftRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 地址。商户详细经营地址或人员所在地点
	Address *string `json:"address,omitempty" xml:"address,omitempty" require:"true"`
	// 代理商户的账户。如为isv商家入驻，需要传agent_account_id字段，agent_account_id是isv为商家用户注册返回的机构id
	AgentAccountId *string `json:"agent_account_id,omitempty" xml:"agent_account_id,omitempty"`
	// 商户别名
	AliasName *string `json:"alias_name,omitempty" xml:"alias_name,omitempty" require:"true"`
	// 商户支付宝账户
	AlipayLogonId *string `json:"alipay_logon_id,omitempty" xml:"alipay_logon_id,omitempty" require:"true"`
	// 申请时间
	ApplyTime *string `json:"apply_time,omitempty" xml:"apply_time,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 二级商户支付宝账户，用于协议确认。目前商业场景（除医疗、中小学教育等）下必填。本字段要求与商户名称name同名，且是实名认证支付宝账户
	BindingAlipayLogonId *string `json:"binding_alipay_logon_id,omitempty" xml:"binding_alipay_logon_id,omitempty" require:"true"`
	// 结算卡id
	CardAliasNo *string `json:"card_alias_no,omitempty" xml:"card_alias_no,omitempty"`
	// 营业执照图片url，本业务接口中，如果是特殊行业必填。其值为使用ant.merchant.expand.indirect.image.upload上传图片得到的一串oss key。
	CertImage *string `json:"cert_image,omitempty" xml:"cert_image,omitempty" require:"true"`
	// 商户社会信用码
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 商户证件类型，取值范围：201：营业执照；2011:营业执照(统一社会信用代码)；204：民办非企业登记证书；206：社会团体法人登记证书；218：事业单位法人证书；219：党政机关批准设立文件/行政执法主体资格证；100：个人商户身份证
	CertType *string `json:"cert_type,omitempty" xml:"cert_type,omitempty" require:"true"`
	// 城市编码。请按照https://gw.alipayobjects.com/os/basement_prod/253c4dcb-b8a4-4a1e-8be2-79e191a9b6db.xlsx 表格中内容填写。
	// （参考资料：
	// http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/）
	CityCode *string `json:"city_code,omitempty" xml:"city_code,omitempty" require:"true"`
	// 电子邮箱
	ContactEmail *string `json:"contact_email,omitempty" xml:"contact_email,omitempty" require:"true"`
	// 商户联系人信息
	ContactMobile *string `json:"contact_mobile,omitempty" xml:"contact_mobile,omitempty" require:"true"`
	// 联系人名字
	ContactName *string `json:"contact_name,omitempty" xml:"contact_name,omitempty" require:"true"`
	// 商户联系人电话信息
	ContactPhone *string `json:"contact_phone,omitempty" xml:"contact_phone,omitempty" require:"true"`
	// 商户联系人业务标识枚举，表示商户联系人的职责。异议处理接口人:02;商户关键联系人:06;数据反馈接口人:11;服务联动接口人:08
	ContactTag *string `json:"contact_tag,omitempty" xml:"contact_tag,omitempty" require:"true"`
	// 联系人类型，取值范围：LEGAL_PERSON：法人；CONTROLLER：实际控制人；AGENT：代理人；OTHER：其他
	ContactType *string `json:"contact_type,omitempty" xml:"contact_type,omitempty" require:"true"`
	// 区县编码。请按照https://gw.alipayobjects.com/os/basement_prod/253c4dcb-b8a4-4a1e-8be2-79e191a9b6db.xlsx 表格中内容填写。
	// （参考资料：
	// http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/）
	DistrictCode *string `json:"district_code,omitempty" xml:"district_code,omitempty" require:"true"`
	// 返回申请单相关参数。当前返回内容有cardAliasNo，smid
	ExtInfo *string `json:"ext_info,omitempty" xml:"ext_info,omitempty" require:"true"`
	// 商户角色id。审核通过后生成。间连商户或平台商二级商户业务中，本字段表示smid
	IpRoleId *string `json:"ip_role_id,omitempty" xml:"ip_role_id,omitempty" require:"true"`
	// 法人身份证反面url，其值为使用ant.merchant.expand.indirect.image.upload上传图片得到的一串oss key。本业务接口中，如果是特殊行业必填
	LegalCertBackImage *string `json:"legal_cert_back_image,omitempty" xml:"legal_cert_back_image,omitempty" require:"true"`
	// 法人身份证正面url，其值为使用ant.merchant.expand.indirect.image.upload上传图片得到的一串oss key。本业务接口中，如果是特殊行业必填
	LegalCertFrontImage *string `json:"legal_cert_front_image,omitempty" xml:"legal_cert_front_image,omitempty" require:"true"`
	// 法人身份证号
	LegalCertNo *string `json:"legal_cert_no,omitempty" xml:"legal_cert_no,omitempty" require:"true"`
	// 法人名称
	LegalName *string `json:"legal_name,omitempty" xml:"legal_name,omitempty" require:"true"`
	// 商户类别码mcc，参见附件描述中的“类目code” https://gw.alipayobjects.com/os/basement_prod/82cb70f7-abbd-417a-91ba-73c1849f07ea.xlsx 如果要求资质一栏不为空，表明是特殊行业，会有人工审核。注：文档更新可能有滞后性，以实际为准
	Mcc *string `json:"mcc,omitempty" xml:"mcc,omitempty" require:"true"`
	// 蚂蚁金服（杭*****术有限公司
	MerchantName *string `json:"merchant_name,omitempty" xml:"merchant_name,omitempty" require:"true"`
	// 商家类型：01：企业；02：事业单位；03：民办非企业组织；04：社会团体；05：党政及国家机关；06：个人商户；07：个体工商户
	MerchantType *string `json:"merchant_type,omitempty" xml:"merchant_type,omitempty" require:"true"`
	// 商户名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 申请单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 外部业务号。比如某种业务标准外部订单号,比如交易外部订单号，代表服务商端自己订单号。用于做并发控制，防止一笔外部订单发起两次进件。非必要场景禁止传入本字段，如要使用务必理清场景及字段生成规则，与蚂蚁金服对接人咨询。
	OutBizNo *string `json:"out_biz_no,omitempty" xml:"out_biz_no,omitempty" require:"true"`
	// 门头照，其值为使用ant.merchant.expand.indirect.image.upload上传图片得到的一串oss key。如果使用当面付服务则必填
	OutDoorImage *string `json:"out_door_image,omitempty" xml:"out_door_image,omitempty" require:"true"`
	// 商户在智能合同平台唯一id
	PlatformTuid *string `json:"platform_tuid,omitempty" xml:"platform_tuid,omitempty" require:"true"`
	// 省份编码。请按照https://gw.alipayobjects.com/os/basement_prod/253c4dcb-b8a4-4a1e-8be2-79e191a9b6db.xlsx 表格中内容填写。
	// （参考资料：
	// http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/）
	ProvinceCode *string `json:"province_code,omitempty" xml:"province_code,omitempty" require:"true"`
	// 商户使用服务，可选值有：当面付、app支付、wap支付、电脑支付
	Service *string `json:"service,omitempty" xml:"service,omitempty" require:"true"`
	// 客服电话
	ServicePhone *string `json:"service_phone,omitempty" xml:"service_phone,omitempty" require:"true"`
	// 二级商户与服务商的签约时间
	SignTimeWithIsv *string `json:"sign_time_with_isv,omitempty" xml:"sign_time_with_isv,omitempty" require:"true"`
	// 站点名称
	SiteName *string `json:"site_name,omitempty" xml:"site_name,omitempty" require:"true"`
	// 网站：01
	// APP : 02
	// 服务窗:03
	// 公众号:04
	// 其他:05
	// 支付宝小程序:06
	SiteType *string `json:"site_type,omitempty" xml:"site_type,omitempty" require:"true"`
	// 站点地址
	SiteUrl *string `json:"site_url,omitempty" xml:"site_url,omitempty" require:"true"`
	// 二级商户id
	Smid *string `json:"smid,omitempty" xml:"smid,omitempty" require:"true"`
	// 申请单状态。99:已完结;-1:失败;031:已提交审核
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 0表示不更新，1表示强制更新
	Update *int64 `json:"update,omitempty" xml:"update,omitempty" require:"true"`
}

func (s CreateContractRegisterzftRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractRegisterzftRequest) GoString() string {
	return s.String()
}

func (s *CreateContractRegisterzftRequest) SetAuthToken(v string) *CreateContractRegisterzftRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetProductInstanceId(v string) *CreateContractRegisterzftRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetAddress(v string) *CreateContractRegisterzftRequest {
	s.Address = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetAgentAccountId(v string) *CreateContractRegisterzftRequest {
	s.AgentAccountId = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetAliasName(v string) *CreateContractRegisterzftRequest {
	s.AliasName = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetAlipayLogonId(v string) *CreateContractRegisterzftRequest {
	s.AlipayLogonId = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetApplyTime(v string) *CreateContractRegisterzftRequest {
	s.ApplyTime = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetBindingAlipayLogonId(v string) *CreateContractRegisterzftRequest {
	s.BindingAlipayLogonId = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetCardAliasNo(v string) *CreateContractRegisterzftRequest {
	s.CardAliasNo = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetCertImage(v string) *CreateContractRegisterzftRequest {
	s.CertImage = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetCertNo(v string) *CreateContractRegisterzftRequest {
	s.CertNo = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetCertType(v string) *CreateContractRegisterzftRequest {
	s.CertType = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetCityCode(v string) *CreateContractRegisterzftRequest {
	s.CityCode = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetContactEmail(v string) *CreateContractRegisterzftRequest {
	s.ContactEmail = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetContactMobile(v string) *CreateContractRegisterzftRequest {
	s.ContactMobile = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetContactName(v string) *CreateContractRegisterzftRequest {
	s.ContactName = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetContactPhone(v string) *CreateContractRegisterzftRequest {
	s.ContactPhone = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetContactTag(v string) *CreateContractRegisterzftRequest {
	s.ContactTag = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetContactType(v string) *CreateContractRegisterzftRequest {
	s.ContactType = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetDistrictCode(v string) *CreateContractRegisterzftRequest {
	s.DistrictCode = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetExtInfo(v string) *CreateContractRegisterzftRequest {
	s.ExtInfo = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetIpRoleId(v string) *CreateContractRegisterzftRequest {
	s.IpRoleId = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetLegalCertBackImage(v string) *CreateContractRegisterzftRequest {
	s.LegalCertBackImage = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetLegalCertFrontImage(v string) *CreateContractRegisterzftRequest {
	s.LegalCertFrontImage = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetLegalCertNo(v string) *CreateContractRegisterzftRequest {
	s.LegalCertNo = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetLegalName(v string) *CreateContractRegisterzftRequest {
	s.LegalName = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetMcc(v string) *CreateContractRegisterzftRequest {
	s.Mcc = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetMerchantName(v string) *CreateContractRegisterzftRequest {
	s.MerchantName = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetMerchantType(v string) *CreateContractRegisterzftRequest {
	s.MerchantType = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetName(v string) *CreateContractRegisterzftRequest {
	s.Name = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetOrderId(v string) *CreateContractRegisterzftRequest {
	s.OrderId = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetOutBizNo(v string) *CreateContractRegisterzftRequest {
	s.OutBizNo = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetOutDoorImage(v string) *CreateContractRegisterzftRequest {
	s.OutDoorImage = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetPlatformTuid(v string) *CreateContractRegisterzftRequest {
	s.PlatformTuid = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetProvinceCode(v string) *CreateContractRegisterzftRequest {
	s.ProvinceCode = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetService(v string) *CreateContractRegisterzftRequest {
	s.Service = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetServicePhone(v string) *CreateContractRegisterzftRequest {
	s.ServicePhone = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetSignTimeWithIsv(v string) *CreateContractRegisterzftRequest {
	s.SignTimeWithIsv = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetSiteName(v string) *CreateContractRegisterzftRequest {
	s.SiteName = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetSiteType(v string) *CreateContractRegisterzftRequest {
	s.SiteType = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetSiteUrl(v string) *CreateContractRegisterzftRequest {
	s.SiteUrl = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetSmid(v string) *CreateContractRegisterzftRequest {
	s.Smid = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetStatus(v string) *CreateContractRegisterzftRequest {
	s.Status = &v
	return s
}

func (s *CreateContractRegisterzftRequest) SetUpdate(v int64) *CreateContractRegisterzftRequest {
	s.Update = &v
	return s
}

type CreateContractRegisterzftResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误码
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
}

func (s CreateContractRegisterzftResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractRegisterzftResponse) GoString() string {
	return s.String()
}

func (s *CreateContractRegisterzftResponse) SetReqMsgId(v string) *CreateContractRegisterzftResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractRegisterzftResponse) SetResultCode(v string) *CreateContractRegisterzftResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractRegisterzftResponse) SetResultMsg(v string) *CreateContractRegisterzftResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractRegisterzftResponse) SetCode(v string) *CreateContractRegisterzftResponse {
	s.Code = &v
	return s
}

type CreateContractPlatformtemplateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 是否包含代扣规则，如果设置为true，则在创建手动签署流程时，必须传入代扣规则。默认为false
	AutoDeduction *bool `json:"auto_deduction,omitempty" xml:"auto_deduction,omitempty"`
	// Base64编码的模板文件的MD5值
	ContentMd5 *string `json:"content_md5,omitempty" xml:"content_md5,omitempty" require:"true"`
	// 目标文件的MIME类型
	ContentType *string `json:"content_type,omitempty" xml:"content_type,omitempty" require:"true"`
	// 是否需要转成pdf，如果模板文件为.doc/.docx 传true，为pdf传false
	Convert2Pdf *bool `json:"convert2_pdf,omitempty" xml:"convert2_pdf,omitempty" require:"true"`
	// 文件名称，必须带扩展名如:.pdf,.doc,.docx
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty" require:"true"`
	// 平台方的签署信息列表
	SignFields []*ContractPlatformSignField `json:"sign_fields,omitempty" xml:"sign_fields,omitempty" require:"true" type:"Repeated"`
	// 用户需要签章的页面列表（默认为最后一页）
	UserSignPages []*int64 `json:"user_sign_pages,omitempty" xml:"user_sign_pages,omitempty" type:"Repeated"`
	// 是否强制用户选择代扣
	AutoDeductionForce *bool `json:"auto_deduction_force,omitempty" xml:"auto_deduction_force,omitempty"`
}

func (s CreateContractPlatformtemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractPlatformtemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateContractPlatformtemplateRequest) SetAuthToken(v string) *CreateContractPlatformtemplateRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractPlatformtemplateRequest) SetProductInstanceId(v string) *CreateContractPlatformtemplateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateContractPlatformtemplateRequest) SetAutoDeduction(v bool) *CreateContractPlatformtemplateRequest {
	s.AutoDeduction = &v
	return s
}

func (s *CreateContractPlatformtemplateRequest) SetContentMd5(v string) *CreateContractPlatformtemplateRequest {
	s.ContentMd5 = &v
	return s
}

func (s *CreateContractPlatformtemplateRequest) SetContentType(v string) *CreateContractPlatformtemplateRequest {
	s.ContentType = &v
	return s
}

func (s *CreateContractPlatformtemplateRequest) SetConvert2Pdf(v bool) *CreateContractPlatformtemplateRequest {
	s.Convert2Pdf = &v
	return s
}

func (s *CreateContractPlatformtemplateRequest) SetFileName(v string) *CreateContractPlatformtemplateRequest {
	s.FileName = &v
	return s
}

func (s *CreateContractPlatformtemplateRequest) SetSignFields(v []*ContractPlatformSignField) *CreateContractPlatformtemplateRequest {
	s.SignFields = v
	return s
}

func (s *CreateContractPlatformtemplateRequest) SetUserSignPages(v []*int64) *CreateContractPlatformtemplateRequest {
	s.UserSignPages = v
	return s
}

func (s *CreateContractPlatformtemplateRequest) SetAutoDeductionForce(v bool) *CreateContractPlatformtemplateRequest {
	s.AutoDeductionForce = &v
	return s
}

type CreateContractPlatformtemplateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 模板ID
	TemplateId *string `json:"template_id,omitempty" xml:"template_id,omitempty"`
	// 文件直传地址，需要用此上传地址使用put方式上传文件，只有文件上传后模板才可用
	UploadUrl *string `json:"upload_url,omitempty" xml:"upload_url,omitempty"`
}

func (s CreateContractPlatformtemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractPlatformtemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateContractPlatformtemplateResponse) SetReqMsgId(v string) *CreateContractPlatformtemplateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractPlatformtemplateResponse) SetResultCode(v string) *CreateContractPlatformtemplateResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractPlatformtemplateResponse) SetResultMsg(v string) *CreateContractPlatformtemplateResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractPlatformtemplateResponse) SetCode(v int64) *CreateContractPlatformtemplateResponse {
	s.Code = &v
	return s
}

func (s *CreateContractPlatformtemplateResponse) SetMessage(v string) *CreateContractPlatformtemplateResponse {
	s.Message = &v
	return s
}

func (s *CreateContractPlatformtemplateResponse) SetTemplateId(v string) *CreateContractPlatformtemplateResponse {
	s.TemplateId = &v
	return s
}

func (s *CreateContractPlatformtemplateResponse) SetUploadUrl(v string) *CreateContractPlatformtemplateResponse {
	s.UploadUrl = &v
	return s
}

type QueryContractMerchantzftRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 代理商户账户
	AgentAccountId *string `json:"agent_account_id,omitempty" xml:"agent_account_id,omitempty"`
}

func (s QueryContractMerchantzftRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContractMerchantzftRequest) GoString() string {
	return s.String()
}

func (s *QueryContractMerchantzftRequest) SetAuthToken(v string) *QueryContractMerchantzftRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContractMerchantzftRequest) SetProductInstanceId(v string) *QueryContractMerchantzftRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryContractMerchantzftRequest) SetAgentAccountId(v string) *QueryContractMerchantzftRequest {
	s.AgentAccountId = &v
	return s
}

type QueryContractMerchantzftResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 0表示成功，其他为失败
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 商户入驻查询信息
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// 错误信息描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
}

func (s QueryContractMerchantzftResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContractMerchantzftResponse) GoString() string {
	return s.String()
}

func (s *QueryContractMerchantzftResponse) SetReqMsgId(v string) *QueryContractMerchantzftResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContractMerchantzftResponse) SetResultCode(v string) *QueryContractMerchantzftResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContractMerchantzftResponse) SetResultMsg(v string) *QueryContractMerchantzftResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContractMerchantzftResponse) SetCode(v int64) *QueryContractMerchantzftResponse {
	s.Code = &v
	return s
}

func (s *QueryContractMerchantzftResponse) SetData(v string) *QueryContractMerchantzftResponse {
	s.Data = &v
	return s
}

func (s *QueryContractMerchantzftResponse) SetErrMessage(v string) *QueryContractMerchantzftResponse {
	s.ErrMessage = &v
	return s
}

type ListContractOuttradeidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 合同id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 分页第几页
	PageIndex *int64 `json:"page_index,omitempty" xml:"page_index,omitempty" require:"true"`
	// 每页的大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
}

func (s ListContractOuttradeidRequest) String() string {
	return tea.Prettify(s)
}

func (s ListContractOuttradeidRequest) GoString() string {
	return s.String()
}

func (s *ListContractOuttradeidRequest) SetAuthToken(v string) *ListContractOuttradeidRequest {
	s.AuthToken = &v
	return s
}

func (s *ListContractOuttradeidRequest) SetProductInstanceId(v string) *ListContractOuttradeidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListContractOuttradeidRequest) SetFlowId(v string) *ListContractOuttradeidRequest {
	s.FlowId = &v
	return s
}

func (s *ListContractOuttradeidRequest) SetPageIndex(v int64) *ListContractOuttradeidRequest {
	s.PageIndex = &v
	return s
}

func (s *ListContractOuttradeidRequest) SetPageSize(v int64) *ListContractOuttradeidRequest {
	s.PageSize = &v
	return s
}

type ListContractOuttradeidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误码
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 总符合条件的交易个数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
	// 所有符合条件交易相关的id
	OutTradeNo []*string `json:"out_trade_no,omitempty" xml:"out_trade_no,omitempty" type:"Repeated"`
}

func (s ListContractOuttradeidResponse) String() string {
	return tea.Prettify(s)
}

func (s ListContractOuttradeidResponse) GoString() string {
	return s.String()
}

func (s *ListContractOuttradeidResponse) SetReqMsgId(v string) *ListContractOuttradeidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListContractOuttradeidResponse) SetResultCode(v string) *ListContractOuttradeidResponse {
	s.ResultCode = &v
	return s
}

func (s *ListContractOuttradeidResponse) SetResultMsg(v string) *ListContractOuttradeidResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListContractOuttradeidResponse) SetCode(v int64) *ListContractOuttradeidResponse {
	s.Code = &v
	return s
}

func (s *ListContractOuttradeidResponse) SetErrMessage(v string) *ListContractOuttradeidResponse {
	s.ErrMessage = &v
	return s
}

func (s *ListContractOuttradeidResponse) SetTotal(v int64) *ListContractOuttradeidResponse {
	s.Total = &v
	return s
}

func (s *ListContractOuttradeidResponse) SetOutTradeNo(v []*string) *ListContractOuttradeidResponse {
	s.OutTradeNo = v
	return s
}

type QueryContractTradedetailRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 合同id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// out_trade_no
	OutTradeNo *string `json:"out_trade_no,omitempty" xml:"out_trade_no,omitempty" require:"true"`
}

func (s QueryContractTradedetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContractTradedetailRequest) GoString() string {
	return s.String()
}

func (s *QueryContractTradedetailRequest) SetAuthToken(v string) *QueryContractTradedetailRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContractTradedetailRequest) SetProductInstanceId(v string) *QueryContractTradedetailRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryContractTradedetailRequest) SetFlowId(v string) *QueryContractTradedetailRequest {
	s.FlowId = &v
	return s
}

func (s *QueryContractTradedetailRequest) SetOutTradeNo(v string) *QueryContractTradedetailRequest {
	s.OutTradeNo = &v
	return s
}

type QueryContractTradedetailResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误码
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 订单详情
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// 错误信息描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
}

func (s QueryContractTradedetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContractTradedetailResponse) GoString() string {
	return s.String()
}

func (s *QueryContractTradedetailResponse) SetReqMsgId(v string) *QueryContractTradedetailResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContractTradedetailResponse) SetResultCode(v string) *QueryContractTradedetailResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContractTradedetailResponse) SetResultMsg(v string) *QueryContractTradedetailResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContractTradedetailResponse) SetCode(v int64) *QueryContractTradedetailResponse {
	s.Code = &v
	return s
}

func (s *QueryContractTradedetailResponse) SetData(v string) *QueryContractTradedetailResponse {
	s.Data = &v
	return s
}

func (s *QueryContractTradedetailResponse) SetErrMessage(v string) *QueryContractTradedetailResponse {
	s.ErrMessage = &v
	return s
}

type CreateContractMerchantrefundRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 合同id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 退款请求对应的第三方ID（也叫退款ID），需保证同一平台方下唯一
	OutRequestNo *string `json:"out_request_no,omitempty" xml:"out_request_no,omitempty" require:"true"`
	// 订单id
	OutTradeNo *string `json:"out_trade_no,omitempty" xml:"out_trade_no,omitempty" require:"true"`
	// 退款金额（单位：分）
	RefundAmount *int64 `json:"refund_amount,omitempty" xml:"refund_amount,omitempty" require:"true"`
	// 租赁宝租赁订单号
	BclOrderId *string `json:"bcl_order_id,omitempty" xml:"bcl_order_id,omitempty"`
	// 租赁订单对应的租户id
	BclTenantId *string `json:"bcl_tenant_id,omitempty" xml:"bcl_tenant_id,omitempty"`
}

func (s CreateContractMerchantrefundRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractMerchantrefundRequest) GoString() string {
	return s.String()
}

func (s *CreateContractMerchantrefundRequest) SetAuthToken(v string) *CreateContractMerchantrefundRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractMerchantrefundRequest) SetProductInstanceId(v string) *CreateContractMerchantrefundRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateContractMerchantrefundRequest) SetFlowId(v string) *CreateContractMerchantrefundRequest {
	s.FlowId = &v
	return s
}

func (s *CreateContractMerchantrefundRequest) SetOutRequestNo(v string) *CreateContractMerchantrefundRequest {
	s.OutRequestNo = &v
	return s
}

func (s *CreateContractMerchantrefundRequest) SetOutTradeNo(v string) *CreateContractMerchantrefundRequest {
	s.OutTradeNo = &v
	return s
}

func (s *CreateContractMerchantrefundRequest) SetRefundAmount(v int64) *CreateContractMerchantrefundRequest {
	s.RefundAmount = &v
	return s
}

func (s *CreateContractMerchantrefundRequest) SetBclOrderId(v string) *CreateContractMerchantrefundRequest {
	s.BclOrderId = &v
	return s
}

func (s *CreateContractMerchantrefundRequest) SetBclTenantId(v string) *CreateContractMerchantrefundRequest {
	s.BclTenantId = &v
	return s
}

type CreateContractMerchantrefundResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误码
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 本次请求对应的操作单号
	OutRequestNo *string `json:"out_request_no,omitempty" xml:"out_request_no,omitempty"`
	// 订单id
	OutTradeNo *string `json:"out_trade_no,omitempty" xml:"out_trade_no,omitempty"`
}

func (s CreateContractMerchantrefundResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractMerchantrefundResponse) GoString() string {
	return s.String()
}

func (s *CreateContractMerchantrefundResponse) SetReqMsgId(v string) *CreateContractMerchantrefundResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractMerchantrefundResponse) SetResultCode(v string) *CreateContractMerchantrefundResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractMerchantrefundResponse) SetResultMsg(v string) *CreateContractMerchantrefundResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractMerchantrefundResponse) SetCode(v int64) *CreateContractMerchantrefundResponse {
	s.Code = &v
	return s
}

func (s *CreateContractMerchantrefundResponse) SetMessage(v string) *CreateContractMerchantrefundResponse {
	s.Message = &v
	return s
}

func (s *CreateContractMerchantrefundResponse) SetOutRequestNo(v string) *CreateContractMerchantrefundResponse {
	s.OutRequestNo = &v
	return s
}

func (s *CreateContractMerchantrefundResponse) SetOutTradeNo(v string) *CreateContractMerchantrefundResponse {
	s.OutTradeNo = &v
	return s
}

type CreateContractAdminaccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
}

func (s CreateContractAdminaccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractAdminaccountRequest) GoString() string {
	return s.String()
}

func (s *CreateContractAdminaccountRequest) SetAuthToken(v string) *CreateContractAdminaccountRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractAdminaccountRequest) SetProductInstanceId(v string) *CreateContractAdminaccountRequest {
	s.ProductInstanceId = &v
	return s
}

type CreateContractAdminaccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误码
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
}

func (s CreateContractAdminaccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractAdminaccountResponse) GoString() string {
	return s.String()
}

func (s *CreateContractAdminaccountResponse) SetReqMsgId(v string) *CreateContractAdminaccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractAdminaccountResponse) SetResultCode(v string) *CreateContractAdminaccountResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractAdminaccountResponse) SetResultMsg(v string) *CreateContractAdminaccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractAdminaccountResponse) SetCode(v int64) *CreateContractAdminaccountResponse {
	s.Code = &v
	return s
}

func (s *CreateContractAdminaccountResponse) SetErrMessage(v string) *CreateContractAdminaccountResponse {
	s.ErrMessage = &v
	return s
}

type ListContractTradeidsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 合同id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 1
	PageIndex *int64 `json:"page_index,omitempty" xml:"page_index,omitempty" require:"true"`
	// 页面大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
}

func (s ListContractTradeidsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListContractTradeidsRequest) GoString() string {
	return s.String()
}

func (s *ListContractTradeidsRequest) SetAuthToken(v string) *ListContractTradeidsRequest {
	s.AuthToken = &v
	return s
}

func (s *ListContractTradeidsRequest) SetProductInstanceId(v string) *ListContractTradeidsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListContractTradeidsRequest) SetFlowId(v string) *ListContractTradeidsRequest {
	s.FlowId = &v
	return s
}

func (s *ListContractTradeidsRequest) SetPageIndex(v int64) *ListContractTradeidsRequest {
	s.PageIndex = &v
	return s
}

func (s *ListContractTradeidsRequest) SetPageSize(v int64) *ListContractTradeidsRequest {
	s.PageSize = &v
	return s
}

type ListContractTradeidsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 所有item的个数
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
	// 所有满足条件的订单
	OutTradeNo []*string `json:"out_trade_no,omitempty" xml:"out_trade_no,omitempty" type:"Repeated"`
}

func (s ListContractTradeidsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListContractTradeidsResponse) GoString() string {
	return s.String()
}

func (s *ListContractTradeidsResponse) SetReqMsgId(v string) *ListContractTradeidsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListContractTradeidsResponse) SetResultCode(v string) *ListContractTradeidsResponse {
	s.ResultCode = &v
	return s
}

func (s *ListContractTradeidsResponse) SetResultMsg(v string) *ListContractTradeidsResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListContractTradeidsResponse) SetCode(v int64) *ListContractTradeidsResponse {
	s.Code = &v
	return s
}

func (s *ListContractTradeidsResponse) SetErrMessage(v string) *ListContractTradeidsResponse {
	s.ErrMessage = &v
	return s
}

func (s *ListContractTradeidsResponse) SetTotal(v int64) *ListContractTradeidsResponse {
	s.Total = &v
	return s
}

func (s *ListContractTradeidsResponse) SetOutTradeNo(v []*string) *ListContractTradeidsResponse {
	s.OutTradeNo = v
	return s
}

type CreateContractCommontriggerRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 代扣规则详情
	RepaymentOrderInfo []*RepaymentOrderRequest `json:"repayment_order_info,omitempty" xml:"repayment_order_info,omitempty" require:"true" type:"Repeated"`
	// 合同id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 用户在智能合同平台的身份
	UserTuid *string `json:"user_tuid,omitempty" xml:"user_tuid,omitempty" require:"true"`
}

func (s CreateContractCommontriggerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractCommontriggerRequest) GoString() string {
	return s.String()
}

func (s *CreateContractCommontriggerRequest) SetAuthToken(v string) *CreateContractCommontriggerRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractCommontriggerRequest) SetProductInstanceId(v string) *CreateContractCommontriggerRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateContractCommontriggerRequest) SetRepaymentOrderInfo(v []*RepaymentOrderRequest) *CreateContractCommontriggerRequest {
	s.RepaymentOrderInfo = v
	return s
}

func (s *CreateContractCommontriggerRequest) SetFlowId(v string) *CreateContractCommontriggerRequest {
	s.FlowId = &v
	return s
}

func (s *CreateContractCommontriggerRequest) SetUserTuid(v string) *CreateContractCommontriggerRequest {
	s.UserTuid = &v
	return s
}

type CreateContractCommontriggerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误码
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 合同id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty"`
	// 商户在智能合同平台id
	PlatformTuid *string `json:"platform_tuid,omitempty" xml:"platform_tuid,omitempty"`
	// 用户在智能合同平台的id
	UserTuid *string `json:"user_tuid,omitempty" xml:"user_tuid,omitempty"`
}

func (s CreateContractCommontriggerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractCommontriggerResponse) GoString() string {
	return s.String()
}

func (s *CreateContractCommontriggerResponse) SetReqMsgId(v string) *CreateContractCommontriggerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractCommontriggerResponse) SetResultCode(v string) *CreateContractCommontriggerResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractCommontriggerResponse) SetResultMsg(v string) *CreateContractCommontriggerResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractCommontriggerResponse) SetCode(v int64) *CreateContractCommontriggerResponse {
	s.Code = &v
	return s
}

func (s *CreateContractCommontriggerResponse) SetErrMessage(v string) *CreateContractCommontriggerResponse {
	s.ErrMessage = &v
	return s
}

func (s *CreateContractCommontriggerResponse) SetFlowId(v string) *CreateContractCommontriggerResponse {
	s.FlowId = &v
	return s
}

func (s *CreateContractCommontriggerResponse) SetPlatformTuid(v string) *CreateContractCommontriggerResponse {
	s.PlatformTuid = &v
	return s
}

func (s *CreateContractCommontriggerResponse) SetUserTuid(v string) *CreateContractCommontriggerResponse {
	s.UserTuid = &v
	return s
}

type CreateContractMerchantindirectzftRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 入驻材料
	BizContent *string `json:"biz_content,omitempty" xml:"biz_content,omitempty" require:"true"`
}

func (s CreateContractMerchantindirectzftRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractMerchantindirectzftRequest) GoString() string {
	return s.String()
}

func (s *CreateContractMerchantindirectzftRequest) SetAuthToken(v string) *CreateContractMerchantindirectzftRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractMerchantindirectzftRequest) SetProductInstanceId(v string) *CreateContractMerchantindirectzftRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateContractMerchantindirectzftRequest) SetBizContent(v string) *CreateContractMerchantindirectzftRequest {
	s.BizContent = &v
	return s
}

type CreateContractMerchantindirectzftResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 传入参数内容
	Body *string `json:"body,omitempty" xml:"body,omitempty"`
	// 错误码
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
	// 支付宝返回的二级错误信息
	SubCode *string `json:"sub_code,omitempty" xml:"sub_code,omitempty"`
	// 支付宝返回的二级错误信息描述
	SubMsg *string `json:"sub_msg,omitempty" xml:"sub_msg,omitempty"`
}

func (s CreateContractMerchantindirectzftResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractMerchantindirectzftResponse) GoString() string {
	return s.String()
}

func (s *CreateContractMerchantindirectzftResponse) SetReqMsgId(v string) *CreateContractMerchantindirectzftResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractMerchantindirectzftResponse) SetResultCode(v string) *CreateContractMerchantindirectzftResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractMerchantindirectzftResponse) SetResultMsg(v string) *CreateContractMerchantindirectzftResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractMerchantindirectzftResponse) SetBody(v string) *CreateContractMerchantindirectzftResponse {
	s.Body = &v
	return s
}

func (s *CreateContractMerchantindirectzftResponse) SetCode(v int64) *CreateContractMerchantindirectzftResponse {
	s.Code = &v
	return s
}

func (s *CreateContractMerchantindirectzftResponse) SetMessage(v string) *CreateContractMerchantindirectzftResponse {
	s.Message = &v
	return s
}

func (s *CreateContractMerchantindirectzftResponse) SetOrderId(v string) *CreateContractMerchantindirectzftResponse {
	s.OrderId = &v
	return s
}

func (s *CreateContractMerchantindirectzftResponse) SetSubCode(v string) *CreateContractMerchantindirectzftResponse {
	s.SubCode = &v
	return s
}

func (s *CreateContractMerchantindirectzftResponse) SetSubMsg(v string) *CreateContractMerchantindirectzftResponse {
	s.SubMsg = &v
	return s
}

type QueryContractMerchantindirectzftRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 商户入驻查询订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
}

func (s QueryContractMerchantindirectzftRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContractMerchantindirectzftRequest) GoString() string {
	return s.String()
}

func (s *QueryContractMerchantindirectzftRequest) SetAuthToken(v string) *QueryContractMerchantindirectzftRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContractMerchantindirectzftRequest) SetProductInstanceId(v string) *QueryContractMerchantindirectzftRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryContractMerchantindirectzftRequest) SetOrderId(v string) *QueryContractMerchantindirectzftRequest {
	s.OrderId = &v
	return s
}

type QueryContractMerchantindirectzftResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误状态码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 额外信息，包含smid
	ExtInfo *string `json:"ext_info,omitempty" xml:"ext_info,omitempty"`
	// 支付宝的ipRoleId
	IpRoleId []*string `json:"ip_role_id,omitempty" xml:"ip_role_id,omitempty" type:"Repeated"`
	// 申请时间
	ApplyId *string `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	// 商户名称
	MerchantName *string `json:"merchant_name,omitempty" xml:"merchant_name,omitempty"`
	// 直付通商户进件的状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 支付宝返回的错误状态码
	SubCode *string `json:"sub_code,omitempty" xml:"sub_code,omitempty"`
	// 支付宝返回的错误信息描述
	SubMsg *string `json:"sub_msg,omitempty" xml:"sub_msg,omitempty"`
}

func (s QueryContractMerchantindirectzftResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContractMerchantindirectzftResponse) GoString() string {
	return s.String()
}

func (s *QueryContractMerchantindirectzftResponse) SetReqMsgId(v string) *QueryContractMerchantindirectzftResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContractMerchantindirectzftResponse) SetResultCode(v string) *QueryContractMerchantindirectzftResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContractMerchantindirectzftResponse) SetResultMsg(v string) *QueryContractMerchantindirectzftResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContractMerchantindirectzftResponse) SetCode(v int64) *QueryContractMerchantindirectzftResponse {
	s.Code = &v
	return s
}

func (s *QueryContractMerchantindirectzftResponse) SetMessage(v string) *QueryContractMerchantindirectzftResponse {
	s.Message = &v
	return s
}

func (s *QueryContractMerchantindirectzftResponse) SetExtInfo(v string) *QueryContractMerchantindirectzftResponse {
	s.ExtInfo = &v
	return s
}

func (s *QueryContractMerchantindirectzftResponse) SetIpRoleId(v []*string) *QueryContractMerchantindirectzftResponse {
	s.IpRoleId = v
	return s
}

func (s *QueryContractMerchantindirectzftResponse) SetApplyId(v string) *QueryContractMerchantindirectzftResponse {
	s.ApplyId = &v
	return s
}

func (s *QueryContractMerchantindirectzftResponse) SetMerchantName(v string) *QueryContractMerchantindirectzftResponse {
	s.MerchantName = &v
	return s
}

func (s *QueryContractMerchantindirectzftResponse) SetStatus(v string) *QueryContractMerchantindirectzftResponse {
	s.Status = &v
	return s
}

func (s *QueryContractMerchantindirectzftResponse) SetSubCode(v string) *QueryContractMerchantindirectzftResponse {
	s.SubCode = &v
	return s
}

func (s *QueryContractMerchantindirectzftResponse) SetSubMsg(v string) *QueryContractMerchantindirectzftResponse {
	s.SubMsg = &v
	return s
}

type QueryPayresultfileurlRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 对账日期
	BillDate *string `json:"bill_date,omitempty" xml:"bill_date,omitempty" require:"true"`
	// 交易类型
	BillType *string `json:"bill_type,omitempty" xml:"bill_type,omitempty" require:"true"`
}

func (s QueryPayresultfileurlRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPayresultfileurlRequest) GoString() string {
	return s.String()
}

func (s *QueryPayresultfileurlRequest) SetAuthToken(v string) *QueryPayresultfileurlRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryPayresultfileurlRequest) SetProductInstanceId(v string) *QueryPayresultfileurlRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryPayresultfileurlRequest) SetBillDate(v string) *QueryPayresultfileurlRequest {
	s.BillDate = &v
	return s
}

func (s *QueryPayresultfileurlRequest) SetBillType(v string) *QueryPayresultfileurlRequest {
	s.BillType = &v
	return s
}

type QueryPayresultfileurlResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 对账文件的下载地址
	PayUrl *string `json:"pay_url,omitempty" xml:"pay_url,omitempty"`
}

func (s QueryPayresultfileurlResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPayresultfileurlResponse) GoString() string {
	return s.String()
}

func (s *QueryPayresultfileurlResponse) SetReqMsgId(v string) *QueryPayresultfileurlResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryPayresultfileurlResponse) SetResultCode(v string) *QueryPayresultfileurlResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryPayresultfileurlResponse) SetResultMsg(v string) *QueryPayresultfileurlResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryPayresultfileurlResponse) SetPayUrl(v string) *QueryPayresultfileurlResponse {
	s.PayUrl = &v
	return s
}

type CreateContractMerchantimageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 图片内容，base64
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
	// 图片名称，必须带标准图片后缀
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty" require:"true"`
}

func (s CreateContractMerchantimageRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractMerchantimageRequest) GoString() string {
	return s.String()
}

func (s *CreateContractMerchantimageRequest) SetAuthToken(v string) *CreateContractMerchantimageRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractMerchantimageRequest) SetProductInstanceId(v string) *CreateContractMerchantimageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateContractMerchantimageRequest) SetContent(v string) *CreateContractMerchantimageRequest {
	s.Content = &v
	return s
}

func (s *CreateContractMerchantimageRequest) SetFileName(v string) *CreateContractMerchantimageRequest {
	s.FileName = &v
	return s
}

type CreateContractMerchantimageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 图片在oss上的id
	ImageId *string `json:"image_id,omitempty" xml:"image_id,omitempty"`
}

func (s CreateContractMerchantimageResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractMerchantimageResponse) GoString() string {
	return s.String()
}

func (s *CreateContractMerchantimageResponse) SetReqMsgId(v string) *CreateContractMerchantimageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractMerchantimageResponse) SetResultCode(v string) *CreateContractMerchantimageResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractMerchantimageResponse) SetResultMsg(v string) *CreateContractMerchantimageResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractMerchantimageResponse) SetImageId(v string) *CreateContractMerchantimageResponse {
	s.ImageId = &v
	return s
}

type CancelContractPaytradeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 智能合同id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
}

func (s CancelContractPaytradeRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelContractPaytradeRequest) GoString() string {
	return s.String()
}

func (s *CancelContractPaytradeRequest) SetAuthToken(v string) *CancelContractPaytradeRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelContractPaytradeRequest) SetProductInstanceId(v string) *CancelContractPaytradeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CancelContractPaytradeRequest) SetFlowId(v string) *CancelContractPaytradeRequest {
	s.FlowId = &v
	return s
}

type CancelContractPaytradeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误码
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 取消的代扣条目
	CanceledOutTradeNo []*string `json:"canceled_out_trade_no,omitempty" xml:"canceled_out_trade_no,omitempty" type:"Repeated"`
}

func (s CancelContractPaytradeResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelContractPaytradeResponse) GoString() string {
	return s.String()
}

func (s *CancelContractPaytradeResponse) SetReqMsgId(v string) *CancelContractPaytradeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelContractPaytradeResponse) SetResultCode(v string) *CancelContractPaytradeResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelContractPaytradeResponse) SetResultMsg(v string) *CancelContractPaytradeResponse {
	s.ResultMsg = &v
	return s
}

func (s *CancelContractPaytradeResponse) SetCode(v int64) *CancelContractPaytradeResponse {
	s.Code = &v
	return s
}

func (s *CancelContractPaytradeResponse) SetErrMessage(v string) *CancelContractPaytradeResponse {
	s.ErrMessage = &v
	return s
}

func (s *CancelContractPaytradeResponse) SetCanceledOutTradeNo(v []*string) *CancelContractPaytradeResponse {
	s.CanceledOutTradeNo = v
	return s
}

type CreateContractHandsignflowRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 是否自动归档，默认false。如设置为true，当所有签署人签署完毕，系统自动将流程归档，状态变为“已完成”状态，在流程状态为“已完成”前，可随时添加签署人；如设置为false，则在调用签署流程开启后，需主动调用签署流程归档接口，将流程状态变更为“已完成”，归档前可随时添加签署人；已完成的流程才可下载签署后的文件。
	AutoArchive *bool `json:"auto_archive,omitempty" xml:"auto_archive,omitempty"`
	// 文件主题
	BusinessScene *string `json:"business_scene,omitempty" xml:"business_scene,omitempty" require:"true"`
	// 任务配置信息
	ConfigInfo *ContractSignFlowConfig `json:"config_info,omitempty" xml:"config_info,omitempty"`
	// 文件到期前，提前多久回调提醒续签，单位为小时，时间区间：1小时——15天（360小时），默认不提醒
	ContractRemind *int64 `json:"contract_remind,omitempty" xml:"contract_remind,omitempty"`
	// 文件有效截止日期,毫秒，默认不失效
	ContractValidity *int64 `json:"contract_validity,omitempty" xml:"contract_validity,omitempty"`
	// 发起人账户id，即发起本次签署的操作人个人账号id；如不传，默认由对接平台发起
	InitiatorAccountId *string `json:"initiator_account_id,omitempty" xml:"initiator_account_id,omitempty"`
	// 发起方主体id，如存在个人代机构发起签约，则需传入机构id；如不传，则默认是对接平台
	InitiatorAuthorizedAccountId *string `json:"initiator_authorized_account_id,omitempty" xml:"initiator_authorized_account_id,omitempty"`
	// 签署有效截止日期,毫秒，默认不失效
	SignValidity *int64 `json:"sign_validity,omitempty" xml:"sign_validity,omitempty"`
}

func (s CreateContractHandsignflowRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractHandsignflowRequest) GoString() string {
	return s.String()
}

func (s *CreateContractHandsignflowRequest) SetAuthToken(v string) *CreateContractHandsignflowRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractHandsignflowRequest) SetProductInstanceId(v string) *CreateContractHandsignflowRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateContractHandsignflowRequest) SetAutoArchive(v bool) *CreateContractHandsignflowRequest {
	s.AutoArchive = &v
	return s
}

func (s *CreateContractHandsignflowRequest) SetBusinessScene(v string) *CreateContractHandsignflowRequest {
	s.BusinessScene = &v
	return s
}

func (s *CreateContractHandsignflowRequest) SetConfigInfo(v *ContractSignFlowConfig) *CreateContractHandsignflowRequest {
	s.ConfigInfo = v
	return s
}

func (s *CreateContractHandsignflowRequest) SetContractRemind(v int64) *CreateContractHandsignflowRequest {
	s.ContractRemind = &v
	return s
}

func (s *CreateContractHandsignflowRequest) SetContractValidity(v int64) *CreateContractHandsignflowRequest {
	s.ContractValidity = &v
	return s
}

func (s *CreateContractHandsignflowRequest) SetInitiatorAccountId(v string) *CreateContractHandsignflowRequest {
	s.InitiatorAccountId = &v
	return s
}

func (s *CreateContractHandsignflowRequest) SetInitiatorAuthorizedAccountId(v string) *CreateContractHandsignflowRequest {
	s.InitiatorAuthorizedAccountId = &v
	return s
}

func (s *CreateContractHandsignflowRequest) SetSignValidity(v int64) *CreateContractHandsignflowRequest {
	s.SignValidity = &v
	return s
}

type CreateContractHandsignflowResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 流程ID
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s CreateContractHandsignflowResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractHandsignflowResponse) GoString() string {
	return s.String()
}

func (s *CreateContractHandsignflowResponse) SetReqMsgId(v string) *CreateContractHandsignflowResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractHandsignflowResponse) SetResultCode(v string) *CreateContractHandsignflowResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractHandsignflowResponse) SetResultMsg(v string) *CreateContractHandsignflowResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractHandsignflowResponse) SetCode(v int64) *CreateContractHandsignflowResponse {
	s.Code = &v
	return s
}

func (s *CreateContractHandsignflowResponse) SetFlowId(v string) *CreateContractHandsignflowResponse {
	s.FlowId = &v
	return s
}

func (s *CreateContractHandsignflowResponse) SetMessage(v string) *CreateContractHandsignflowResponse {
	s.Message = &v
	return s
}

type CreateContractHandsignfieldRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 签署区列表数据
	SignFields []*ContractHandSignFieldApplication `json:"sign_fields,omitempty" xml:"sign_fields,omitempty" require:"true" type:"Repeated"`
}

func (s CreateContractHandsignfieldRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractHandsignfieldRequest) GoString() string {
	return s.String()
}

func (s *CreateContractHandsignfieldRequest) SetAuthToken(v string) *CreateContractHandsignfieldRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractHandsignfieldRequest) SetProductInstanceId(v string) *CreateContractHandsignfieldRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateContractHandsignfieldRequest) SetFlowId(v string) *CreateContractHandsignfieldRequest {
	s.FlowId = &v
	return s
}

func (s *CreateContractHandsignfieldRequest) SetSignFields(v []*ContractHandSignFieldApplication) *CreateContractHandsignfieldRequest {
	s.SignFields = v
	return s
}

type CreateContractHandsignfieldResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 签署区列表数据
	Signfields []*ContractSignField `json:"signfields,omitempty" xml:"signfields,omitempty" type:"Repeated"`
}

func (s CreateContractHandsignfieldResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractHandsignfieldResponse) GoString() string {
	return s.String()
}

func (s *CreateContractHandsignfieldResponse) SetReqMsgId(v string) *CreateContractHandsignfieldResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractHandsignfieldResponse) SetResultCode(v string) *CreateContractHandsignfieldResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractHandsignfieldResponse) SetResultMsg(v string) *CreateContractHandsignfieldResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractHandsignfieldResponse) SetCode(v int64) *CreateContractHandsignfieldResponse {
	s.Code = &v
	return s
}

func (s *CreateContractHandsignfieldResponse) SetMessage(v string) *CreateContractHandsignfieldResponse {
	s.Message = &v
	return s
}

func (s *CreateContractHandsignfieldResponse) SetSignfields(v []*ContractSignField) *CreateContractHandsignfieldResponse {
	s.Signfields = v
	return s
}

type GetContractSignurlRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 签署人账号id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 存量参数，已废弃
	OrganizeId *string `json:"organize_id,omitempty" xml:"organize_id,omitempty"`
	// 是否需要同时返回短链接，默认为false
	ShortUrl *bool `json:"short_url,omitempty" xml:"short_url,omitempty"`
	// 本功能需要单独审批开放。当account_id为机构账户时，可以在执行签署时单独指定经办人账户，代为完成本次签署操作。
	AgentAccountId *string `json:"agent_account_id,omitempty" xml:"agent_account_id,omitempty"`
	// 代理客户时，实际用户的租户ID
	SubTenantId *string `json:"sub_tenant_id,omitempty" xml:"sub_tenant_id,omitempty"`
}

func (s GetContractSignurlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetContractSignurlRequest) GoString() string {
	return s.String()
}

func (s *GetContractSignurlRequest) SetAuthToken(v string) *GetContractSignurlRequest {
	s.AuthToken = &v
	return s
}

func (s *GetContractSignurlRequest) SetProductInstanceId(v string) *GetContractSignurlRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetContractSignurlRequest) SetAccountId(v string) *GetContractSignurlRequest {
	s.AccountId = &v
	return s
}

func (s *GetContractSignurlRequest) SetFlowId(v string) *GetContractSignurlRequest {
	s.FlowId = &v
	return s
}

func (s *GetContractSignurlRequest) SetOrganizeId(v string) *GetContractSignurlRequest {
	s.OrganizeId = &v
	return s
}

func (s *GetContractSignurlRequest) SetShortUrl(v bool) *GetContractSignurlRequest {
	s.ShortUrl = &v
	return s
}

func (s *GetContractSignurlRequest) SetAgentAccountId(v string) *GetContractSignurlRequest {
	s.AgentAccountId = &v
	return s
}

func (s *GetContractSignurlRequest) SetSubTenantId(v string) *GetContractSignurlRequest {
	s.SubTenantId = &v
	return s
}

type GetContractSignurlResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 长链地址
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
	// 短链地址
	ShortUrl *string `json:"short_url,omitempty" xml:"short_url,omitempty"`
}

func (s GetContractSignurlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetContractSignurlResponse) GoString() string {
	return s.String()
}

func (s *GetContractSignurlResponse) SetReqMsgId(v string) *GetContractSignurlResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetContractSignurlResponse) SetResultCode(v string) *GetContractSignurlResponse {
	s.ResultCode = &v
	return s
}

func (s *GetContractSignurlResponse) SetResultMsg(v string) *GetContractSignurlResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetContractSignurlResponse) SetCode(v int64) *GetContractSignurlResponse {
	s.Code = &v
	return s
}

func (s *GetContractSignurlResponse) SetMessage(v string) *GetContractSignurlResponse {
	s.Message = &v
	return s
}

func (s *GetContractSignurlResponse) SetUrl(v string) *GetContractSignurlResponse {
	s.Url = &v
	return s
}

func (s *GetContractSignurlResponse) SetShortUrl(v string) *GetContractSignurlResponse {
	s.ShortUrl = &v
	return s
}

type CreateWithholdAgreementRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 授信总金额，单位元
	CreditAmount *string `json:"credit_amount,omitempty" xml:"credit_amount,omitempty" require:"true"`
	// 商户签约号，代扣协议中标示用户的唯一签约号（确保在商户系统中唯一）
	ExternalAgreementNo *string `json:"external_agreement_no,omitempty" xml:"external_agreement_no,omitempty" require:"true"`
	// 收款方账号类型，可取值：ALIPAY_USER_ID（支付宝uid);商户id，2088123412341234
	MerchantId *string `json:"merchant_id,omitempty" xml:"merchant_id,omitempty" require:"true"`
	// 商户名称
	MerchantName *string `json:"merchant_name,omitempty" xml:"merchant_name,omitempty" require:"true"`
	// 对服务产品的描述
	MerchantServiceDescription *string `json:"merchant_service_description,omitempty" xml:"merchant_service_description,omitempty"`
	// 商户的服务名称，滴滴出行免密支付
	MerchantServiceName *string `json:"merchant_service_name,omitempty" xml:"merchant_service_name,omitempty" require:"true"`
	// 姓名和身份证号拼接sha256的hash
	NameCertHash *string `json:"name_cert_hash,omitempty" xml:"name_cert_hash,omitempty" require:"true"`
	// 还款计划的链接
	RepaymentUrl *string `json:"repayment_url,omitempty" xml:"repayment_url,omitempty" require:"true"`
	// 签约成功后回调的地址
	ReturnUrl *string `json:"return_url,omitempty" xml:"return_url,omitempty"`
	// 第三方用户id
	ThirdPartyId *string `json:"third_party_id,omitempty" xml:"third_party_id,omitempty" require:"true"`
}

func (s CreateWithholdAgreementRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWithholdAgreementRequest) GoString() string {
	return s.String()
}

func (s *CreateWithholdAgreementRequest) SetAuthToken(v string) *CreateWithholdAgreementRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateWithholdAgreementRequest) SetProductInstanceId(v string) *CreateWithholdAgreementRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateWithholdAgreementRequest) SetCreditAmount(v string) *CreateWithholdAgreementRequest {
	s.CreditAmount = &v
	return s
}

func (s *CreateWithholdAgreementRequest) SetExternalAgreementNo(v string) *CreateWithholdAgreementRequest {
	s.ExternalAgreementNo = &v
	return s
}

func (s *CreateWithholdAgreementRequest) SetMerchantId(v string) *CreateWithholdAgreementRequest {
	s.MerchantId = &v
	return s
}

func (s *CreateWithholdAgreementRequest) SetMerchantName(v string) *CreateWithholdAgreementRequest {
	s.MerchantName = &v
	return s
}

func (s *CreateWithholdAgreementRequest) SetMerchantServiceDescription(v string) *CreateWithholdAgreementRequest {
	s.MerchantServiceDescription = &v
	return s
}

func (s *CreateWithholdAgreementRequest) SetMerchantServiceName(v string) *CreateWithholdAgreementRequest {
	s.MerchantServiceName = &v
	return s
}

func (s *CreateWithholdAgreementRequest) SetNameCertHash(v string) *CreateWithholdAgreementRequest {
	s.NameCertHash = &v
	return s
}

func (s *CreateWithholdAgreementRequest) SetRepaymentUrl(v string) *CreateWithholdAgreementRequest {
	s.RepaymentUrl = &v
	return s
}

func (s *CreateWithholdAgreementRequest) SetReturnUrl(v string) *CreateWithholdAgreementRequest {
	s.ReturnUrl = &v
	return s
}

func (s *CreateWithholdAgreementRequest) SetThirdPartyId(v string) *CreateWithholdAgreementRequest {
	s.ThirdPartyId = &v
	return s
}

type CreateWithholdAgreementResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateWithholdAgreementResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWithholdAgreementResponse) GoString() string {
	return s.String()
}

func (s *CreateWithholdAgreementResponse) SetReqMsgId(v string) *CreateWithholdAgreementResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateWithholdAgreementResponse) SetResultCode(v string) *CreateWithholdAgreementResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateWithholdAgreementResponse) SetResultMsg(v string) *CreateWithholdAgreementResponse {
	s.ResultMsg = &v
	return s
}

type QueryWithholdAgreementRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 商户签约号，代扣协议中标示用户的唯一签约号（确保在商户系统中唯一）
	ExternalAgreementNo *string `json:"external_agreement_no,omitempty" xml:"external_agreement_no,omitempty" require:"true"`
	// 第三方用户id
	ThirdPartyId *string `json:"third_party_id,omitempty" xml:"third_party_id,omitempty" require:"true"`
}

func (s QueryWithholdAgreementRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryWithholdAgreementRequest) GoString() string {
	return s.String()
}

func (s *QueryWithholdAgreementRequest) SetAuthToken(v string) *QueryWithholdAgreementRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryWithholdAgreementRequest) SetProductInstanceId(v string) *QueryWithholdAgreementRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryWithholdAgreementRequest) SetExternalAgreementNo(v string) *QueryWithholdAgreementRequest {
	s.ExternalAgreementNo = &v
	return s
}

func (s *QueryWithholdAgreementRequest) SetThirdPartyId(v string) *QueryWithholdAgreementRequest {
	s.ThirdPartyId = &v
	return s
}

type QueryWithholdAgreementResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 总授信金额
	CreditAmount *string `json:"credit_amount,omitempty" xml:"credit_amount,omitempty"`
	// 商家的支付宝uid
	MerchantId *string `json:"merchant_id,omitempty" xml:"merchant_id,omitempty"`
	// 商户名称
	MerchantName *string `json:"merchant_name,omitempty" xml:"merchant_name,omitempty"`
	// 商户的服务名称
	MerchantServiceName *string `json:"merchant_service_name,omitempty" xml:"merchant_service_name,omitempty"`
	// 姓名身份证号拼接后的hash
	NameCertHash *string `json:"name_cert_hash,omitempty" xml:"name_cert_hash,omitempty"`
	// 还款计划的超链接
	RepaymentUrl *string `json:"repayment_url,omitempty" xml:"repayment_url,omitempty"`
	// 协议的状态，如果签署成功返回success,未签是空
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 第三方的用户id
	ThirdPartyId *string `json:"third_party_id,omitempty" xml:"third_party_id,omitempty"`
	// 商家请求的协议号
	ExternalAgreementNo *string `json:"external_agreement_no,omitempty" xml:"external_agreement_no,omitempty"`
}

func (s QueryWithholdAgreementResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryWithholdAgreementResponse) GoString() string {
	return s.String()
}

func (s *QueryWithholdAgreementResponse) SetReqMsgId(v string) *QueryWithholdAgreementResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryWithholdAgreementResponse) SetResultCode(v string) *QueryWithholdAgreementResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryWithholdAgreementResponse) SetResultMsg(v string) *QueryWithholdAgreementResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryWithholdAgreementResponse) SetCreditAmount(v string) *QueryWithholdAgreementResponse {
	s.CreditAmount = &v
	return s
}

func (s *QueryWithholdAgreementResponse) SetMerchantId(v string) *QueryWithholdAgreementResponse {
	s.MerchantId = &v
	return s
}

func (s *QueryWithholdAgreementResponse) SetMerchantName(v string) *QueryWithholdAgreementResponse {
	s.MerchantName = &v
	return s
}

func (s *QueryWithholdAgreementResponse) SetMerchantServiceName(v string) *QueryWithholdAgreementResponse {
	s.MerchantServiceName = &v
	return s
}

func (s *QueryWithholdAgreementResponse) SetNameCertHash(v string) *QueryWithholdAgreementResponse {
	s.NameCertHash = &v
	return s
}

func (s *QueryWithholdAgreementResponse) SetRepaymentUrl(v string) *QueryWithholdAgreementResponse {
	s.RepaymentUrl = &v
	return s
}

func (s *QueryWithholdAgreementResponse) SetStatus(v string) *QueryWithholdAgreementResponse {
	s.Status = &v
	return s
}

func (s *QueryWithholdAgreementResponse) SetThirdPartyId(v string) *QueryWithholdAgreementResponse {
	s.ThirdPartyId = &v
	return s
}

func (s *QueryWithholdAgreementResponse) SetExternalAgreementNo(v string) *QueryWithholdAgreementResponse {
	s.ExternalAgreementNo = &v
	return s
}

type QueryWithholdAgreementurlRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 商户签约号，代扣协议中标示用户的唯一签约号（确保在商户系统中唯一）
	ExternalAgreementNo *string `json:"external_agreement_no,omitempty" xml:"external_agreement_no,omitempty" require:"true"`
	// 第三方用户id
	ThirdPartyId *string `json:"third_party_id,omitempty" xml:"third_party_id,omitempty" require:"true"`
}

func (s QueryWithholdAgreementurlRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryWithholdAgreementurlRequest) GoString() string {
	return s.String()
}

func (s *QueryWithholdAgreementurlRequest) SetAuthToken(v string) *QueryWithholdAgreementurlRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryWithholdAgreementurlRequest) SetProductInstanceId(v string) *QueryWithholdAgreementurlRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryWithholdAgreementurlRequest) SetExternalAgreementNo(v string) *QueryWithholdAgreementurlRequest {
	s.ExternalAgreementNo = &v
	return s
}

func (s *QueryWithholdAgreementurlRequest) SetThirdPartyId(v string) *QueryWithholdAgreementurlRequest {
	s.ThirdPartyId = &v
	return s
}

type QueryWithholdAgreementurlResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 成功
	ResultMessage *string `json:"result_message,omitempty" xml:"result_message,omitempty"`
	// 代扣协议签署的入口
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
}

func (s QueryWithholdAgreementurlResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryWithholdAgreementurlResponse) GoString() string {
	return s.String()
}

func (s *QueryWithholdAgreementurlResponse) SetReqMsgId(v string) *QueryWithholdAgreementurlResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryWithholdAgreementurlResponse) SetResultCode(v string) *QueryWithholdAgreementurlResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryWithholdAgreementurlResponse) SetResultMsg(v string) *QueryWithholdAgreementurlResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryWithholdAgreementurlResponse) SetResultMessage(v string) *QueryWithholdAgreementurlResponse {
	s.ResultMessage = &v
	return s
}

func (s *QueryWithholdAgreementurlResponse) SetUrl(v string) *QueryWithholdAgreementurlResponse {
	s.Url = &v
	return s
}

type CreateWithholdOverduetimeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 首款方id
	MerchantId *string `json:"merchant_id,omitempty" xml:"merchant_id,omitempty" require:"true"`
	// 商家名称
	MerchantName *string `json:"merchant_name,omitempty" xml:"merchant_name,omitempty" require:"true"`
	// 商家提供的产品名称
	MerchantServiceName *string `json:"merchant_service_name,omitempty" xml:"merchant_service_name,omitempty" require:"true"`
	// 租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
}

func (s CreateWithholdOverduetimeRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWithholdOverduetimeRequest) GoString() string {
	return s.String()
}

func (s *CreateWithholdOverduetimeRequest) SetAuthToken(v string) *CreateWithholdOverduetimeRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateWithholdOverduetimeRequest) SetProductInstanceId(v string) *CreateWithholdOverduetimeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateWithholdOverduetimeRequest) SetMerchantId(v string) *CreateWithholdOverduetimeRequest {
	s.MerchantId = &v
	return s
}

func (s *CreateWithholdOverduetimeRequest) SetMerchantName(v string) *CreateWithholdOverduetimeRequest {
	s.MerchantName = &v
	return s
}

func (s *CreateWithholdOverduetimeRequest) SetMerchantServiceName(v string) *CreateWithholdOverduetimeRequest {
	s.MerchantServiceName = &v
	return s
}

func (s *CreateWithholdOverduetimeRequest) SetTenantId(v string) *CreateWithholdOverduetimeRequest {
	s.TenantId = &v
	return s
}

type CreateWithholdOverduetimeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateWithholdOverduetimeResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWithholdOverduetimeResponse) GoString() string {
	return s.String()
}

func (s *CreateWithholdOverduetimeResponse) SetReqMsgId(v string) *CreateWithholdOverduetimeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateWithholdOverduetimeResponse) SetResultCode(v string) *CreateWithholdOverduetimeResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateWithholdOverduetimeResponse) SetResultMsg(v string) *CreateWithholdOverduetimeResponse {
	s.ResultMsg = &v
	return s
}

type SendWithholdDeductRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 委托支付订单总金额，单位为元，精确到小数点后两位
	Amount *string `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// JSON格式，传递业务扩展参数
	BusinessParams *string `json:"business_params,omitempty" xml:"business_params,omitempty"`
	// 商户签约号，代扣协议中标示用户的唯一签约号（确保在商户系统中唯一）
	ExternalAgreementNo *string `json:"external_agreement_no,omitempty" xml:"external_agreement_no,omitempty" require:"true"`
	// 订单标题信息
	OrderTitle *string `json:"order_title,omitempty" xml:"order_title,omitempty"`
	// 外部订单号,请求方保证唯一性
	OutBizNo *string `json:"out_biz_no,omitempty" xml:"out_biz_no,omitempty" require:"true"`
	// 备注
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
	// 第三方的用户id
	ThirdPartyId *string `json:"third_party_id,omitempty" xml:"third_party_id,omitempty" require:"true"`
}

func (s SendWithholdDeductRequest) String() string {
	return tea.Prettify(s)
}

func (s SendWithholdDeductRequest) GoString() string {
	return s.String()
}

func (s *SendWithholdDeductRequest) SetAuthToken(v string) *SendWithholdDeductRequest {
	s.AuthToken = &v
	return s
}

func (s *SendWithholdDeductRequest) SetProductInstanceId(v string) *SendWithholdDeductRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SendWithholdDeductRequest) SetAmount(v string) *SendWithholdDeductRequest {
	s.Amount = &v
	return s
}

func (s *SendWithholdDeductRequest) SetBusinessParams(v string) *SendWithholdDeductRequest {
	s.BusinessParams = &v
	return s
}

func (s *SendWithholdDeductRequest) SetExternalAgreementNo(v string) *SendWithholdDeductRequest {
	s.ExternalAgreementNo = &v
	return s
}

func (s *SendWithholdDeductRequest) SetOrderTitle(v string) *SendWithholdDeductRequest {
	s.OrderTitle = &v
	return s
}

func (s *SendWithholdDeductRequest) SetOutBizNo(v string) *SendWithholdDeductRequest {
	s.OutBizNo = &v
	return s
}

func (s *SendWithholdDeductRequest) SetRemark(v string) *SendWithholdDeductRequest {
	s.Remark = &v
	return s
}

func (s *SendWithholdDeductRequest) SetThirdPartyId(v string) *SendWithholdDeductRequest {
	s.ThirdPartyId = &v
	return s
}

type SendWithholdDeductResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 该笔转账在支付宝系统内部的单据ID
	EntrustOrderId *string `json:"entrust_order_id,omitempty" xml:"entrust_order_id,omitempty"`
	// INIT：受理成功，扣款中
	// FINISHED：扣款成功
	// CLOSED：商户已关单
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s SendWithholdDeductResponse) String() string {
	return tea.Prettify(s)
}

func (s SendWithholdDeductResponse) GoString() string {
	return s.String()
}

func (s *SendWithholdDeductResponse) SetReqMsgId(v string) *SendWithholdDeductResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SendWithholdDeductResponse) SetResultCode(v string) *SendWithholdDeductResponse {
	s.ResultCode = &v
	return s
}

func (s *SendWithholdDeductResponse) SetResultMsg(v string) *SendWithholdDeductResponse {
	s.ResultMsg = &v
	return s
}

func (s *SendWithholdDeductResponse) SetEntrustOrderId(v string) *SendWithholdDeductResponse {
	s.EntrustOrderId = &v
	return s
}

func (s *SendWithholdDeductResponse) SetStatus(v string) *SendWithholdDeductResponse {
	s.Status = &v
	return s
}

type QueryWithholdPayresultRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 请求扣款时，返回的委托单号,该笔转账在支付宝系统内部的单据ID
	EntrustOrderId *string `json:"entrust_order_id,omitempty" xml:"entrust_order_id,omitempty" require:"true"`
	// 外部订单号,请求方保证唯一性
	OutBizNo *string `json:"out_biz_no,omitempty" xml:"out_biz_no,omitempty" require:"true"`
}

func (s QueryWithholdPayresultRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryWithholdPayresultRequest) GoString() string {
	return s.String()
}

func (s *QueryWithholdPayresultRequest) SetAuthToken(v string) *QueryWithholdPayresultRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryWithholdPayresultRequest) SetProductInstanceId(v string) *QueryWithholdPayresultRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryWithholdPayresultRequest) SetEntrustOrderId(v string) *QueryWithholdPayresultRequest {
	s.EntrustOrderId = &v
	return s
}

func (s *QueryWithholdPayresultRequest) SetOutBizNo(v string) *QueryWithholdPayresultRequest {
	s.OutBizNo = &v
	return s
}

type QueryWithholdPayresultResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 支付完成日期
	PayDate *string `json:"pay_date,omitempty" xml:"pay_date,omitempty"`
	// 支付宝支付单据号
	PayOrderId *string `json:"pay_order_id,omitempty" xml:"pay_order_id,omitempty"`
	// INIT：受理成功，扣款中
	// FINISHED：扣款成功
	// CLOSED：商户已关单
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 扣款金额
	TransAmount *string `json:"trans_amount,omitempty" xml:"trans_amount,omitempty"`
}

func (s QueryWithholdPayresultResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryWithholdPayresultResponse) GoString() string {
	return s.String()
}

func (s *QueryWithholdPayresultResponse) SetReqMsgId(v string) *QueryWithholdPayresultResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryWithholdPayresultResponse) SetResultCode(v string) *QueryWithholdPayresultResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryWithholdPayresultResponse) SetResultMsg(v string) *QueryWithholdPayresultResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryWithholdPayresultResponse) SetPayDate(v string) *QueryWithholdPayresultResponse {
	s.PayDate = &v
	return s
}

func (s *QueryWithholdPayresultResponse) SetPayOrderId(v string) *QueryWithholdPayresultResponse {
	s.PayOrderId = &v
	return s
}

func (s *QueryWithholdPayresultResponse) SetStatus(v string) *QueryWithholdPayresultResponse {
	s.Status = &v
	return s
}

func (s *QueryWithholdPayresultResponse) SetTransAmount(v string) *QueryWithholdPayresultResponse {
	s.TransAmount = &v
	return s
}

type SendWithholdRefundRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 支付宝支付单据号
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 外部订单号,请求方保证唯一性
	OutRequestNo *string `json:"out_request_no,omitempty" xml:"out_request_no,omitempty" require:"true"`
	// 需要退款的金额，该金额不能大于订单金额,单位为元，支持两位小数
	RefundAmount *string `json:"refund_amount,omitempty" xml:"refund_amount,omitempty" require:"true"`
	// 退款备注
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty" require:"true"`
}

func (s SendWithholdRefundRequest) String() string {
	return tea.Prettify(s)
}

func (s SendWithholdRefundRequest) GoString() string {
	return s.String()
}

func (s *SendWithholdRefundRequest) SetAuthToken(v string) *SendWithholdRefundRequest {
	s.AuthToken = &v
	return s
}

func (s *SendWithholdRefundRequest) SetProductInstanceId(v string) *SendWithholdRefundRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SendWithholdRefundRequest) SetOrderId(v string) *SendWithholdRefundRequest {
	s.OrderId = &v
	return s
}

func (s *SendWithholdRefundRequest) SetOutRequestNo(v string) *SendWithholdRefundRequest {
	s.OutRequestNo = &v
	return s
}

func (s *SendWithholdRefundRequest) SetRefundAmount(v string) *SendWithholdRefundRequest {
	s.RefundAmount = &v
	return s
}

func (s *SendWithholdRefundRequest) SetRemark(v string) *SendWithholdRefundRequest {
	s.Remark = &v
	return s
}

type SendWithholdRefundResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 需要退款的金额，该金额不能大于订单金额,单位为元，支持两位小数
	RefundAmount *string `json:"refund_amount,omitempty" xml:"refund_amount,omitempty"`
	// 退款成功的日期
	RefundDate *string `json:"refund_date,omitempty" xml:"refund_date,omitempty"`
	// 退款的支付宝系统内部单据id
	RefundOrderId *string `json:"refund_order_id,omitempty" xml:"refund_order_id,omitempty"`
	// FINISHED,退款成功的状态值
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s SendWithholdRefundResponse) String() string {
	return tea.Prettify(s)
}

func (s SendWithholdRefundResponse) GoString() string {
	return s.String()
}

func (s *SendWithholdRefundResponse) SetReqMsgId(v string) *SendWithholdRefundResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SendWithholdRefundResponse) SetResultCode(v string) *SendWithholdRefundResponse {
	s.ResultCode = &v
	return s
}

func (s *SendWithholdRefundResponse) SetResultMsg(v string) *SendWithholdRefundResponse {
	s.ResultMsg = &v
	return s
}

func (s *SendWithholdRefundResponse) SetRefundAmount(v string) *SendWithholdRefundResponse {
	s.RefundAmount = &v
	return s
}

func (s *SendWithholdRefundResponse) SetRefundDate(v string) *SendWithholdRefundResponse {
	s.RefundDate = &v
	return s
}

func (s *SendWithholdRefundResponse) SetRefundOrderId(v string) *SendWithholdRefundResponse {
	s.RefundOrderId = &v
	return s
}

func (s *SendWithholdRefundResponse) SetStatus(v string) *SendWithholdRefundResponse {
	s.Status = &v
	return s
}

type SendContractInvitationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务方id，重定向和回调时都回传这个id
	BizProcessId *string `json:"biz_process_id,omitempty" xml:"biz_process_id,omitempty"`
	// 回调接口地址，默认为空，不回调
	CallbackUrl *string `json:"callback_url,omitempty" xml:"callback_url,omitempty"`
	// 被邀请人邮箱，若手机号和邮箱都传入，则仅手机号有效
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// 被邀请人证件号
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty"`
	// 被邀请人证件类型，详见个人证件类型说明 ，默认CRED_PSN_CH_IDCARD
	InviteeCertType *string `json:"invitee_cert_type,omitempty" xml:"invitee_cert_type,omitempty"`
	// 邀请个人实名为PERSON，邀请企业为ORGAN
	InviteType *string `json:"invite_type,omitempty" xml:"invite_type,omitempty" require:"true"`
	// 企业法定代表人证件类型，详见个人证件类型说明 ，默认CRED_PSN_CH_IDCARD
	LegalCertType *string `json:"legal_cert_type,omitempty" xml:"legal_cert_type,omitempty"`
	// 企业法定代表人姓名
	LegalName *string `json:"legal_name,omitempty" xml:"legal_name,omitempty"`
	// 企业法定代表人证件号
	LegalNo *string `json:"legal_no,omitempty" xml:"legal_no,omitempty"`
	// 被邀请人手机号
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty"`
	// 被邀请人姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 默认为空，传入“sms”表示短信，“email”表示邮件，若两者都传入，则只发送短信
	NotifyType *string `json:"notify_type,omitempty" xml:"notify_type,omitempty"`
	// 企业证件号
	OrganCertNo *string `json:"organ_cert_no,omitempty" xml:"organ_cert_no,omitempty"`
	// 企业证件类型，详见机构证件类型说明 ，默认CRED_ORG_USCC
	OrganCertType *string `json:"organ_cert_type,omitempty" xml:"organ_cert_type,omitempty"`
	// 企业名称
	OrganName *string `json:"organ_name,omitempty" xml:"organ_name,omitempty"`
	// 结束后重定向地址（需加前缀https:// 或 http:// ），默认停留在当前页面
	RedirectUrl *string `json:"redirect_url,omitempty" xml:"redirect_url,omitempty"`
}

func (s SendContractInvitationRequest) String() string {
	return tea.Prettify(s)
}

func (s SendContractInvitationRequest) GoString() string {
	return s.String()
}

func (s *SendContractInvitationRequest) SetAuthToken(v string) *SendContractInvitationRequest {
	s.AuthToken = &v
	return s
}

func (s *SendContractInvitationRequest) SetProductInstanceId(v string) *SendContractInvitationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SendContractInvitationRequest) SetBizProcessId(v string) *SendContractInvitationRequest {
	s.BizProcessId = &v
	return s
}

func (s *SendContractInvitationRequest) SetCallbackUrl(v string) *SendContractInvitationRequest {
	s.CallbackUrl = &v
	return s
}

func (s *SendContractInvitationRequest) SetEmail(v string) *SendContractInvitationRequest {
	s.Email = &v
	return s
}

func (s *SendContractInvitationRequest) SetIdNumber(v string) *SendContractInvitationRequest {
	s.IdNumber = &v
	return s
}

func (s *SendContractInvitationRequest) SetInviteeCertType(v string) *SendContractInvitationRequest {
	s.InviteeCertType = &v
	return s
}

func (s *SendContractInvitationRequest) SetInviteType(v string) *SendContractInvitationRequest {
	s.InviteType = &v
	return s
}

func (s *SendContractInvitationRequest) SetLegalCertType(v string) *SendContractInvitationRequest {
	s.LegalCertType = &v
	return s
}

func (s *SendContractInvitationRequest) SetLegalName(v string) *SendContractInvitationRequest {
	s.LegalName = &v
	return s
}

func (s *SendContractInvitationRequest) SetLegalNo(v string) *SendContractInvitationRequest {
	s.LegalNo = &v
	return s
}

func (s *SendContractInvitationRequest) SetMobile(v string) *SendContractInvitationRequest {
	s.Mobile = &v
	return s
}

func (s *SendContractInvitationRequest) SetName(v string) *SendContractInvitationRequest {
	s.Name = &v
	return s
}

func (s *SendContractInvitationRequest) SetNotifyType(v string) *SendContractInvitationRequest {
	s.NotifyType = &v
	return s
}

func (s *SendContractInvitationRequest) SetOrganCertNo(v string) *SendContractInvitationRequest {
	s.OrganCertNo = &v
	return s
}

func (s *SendContractInvitationRequest) SetOrganCertType(v string) *SendContractInvitationRequest {
	s.OrganCertType = &v
	return s
}

func (s *SendContractInvitationRequest) SetOrganName(v string) *SendContractInvitationRequest {
	s.OrganName = &v
	return s
}

func (s *SendContractInvitationRequest) SetRedirectUrl(v string) *SendContractInvitationRequest {
	s.RedirectUrl = &v
	return s
}

type SendContractInvitationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 邀请任务id
	InvitationId *string `json:"invitation_id,omitempty" xml:"invitation_id,omitempty"`
	// 邀请链接
	InvitationUrl *string `json:"invitation_url,omitempty" xml:"invitation_url,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s SendContractInvitationResponse) String() string {
	return tea.Prettify(s)
}

func (s SendContractInvitationResponse) GoString() string {
	return s.String()
}

func (s *SendContractInvitationResponse) SetReqMsgId(v string) *SendContractInvitationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SendContractInvitationResponse) SetResultCode(v string) *SendContractInvitationResponse {
	s.ResultCode = &v
	return s
}

func (s *SendContractInvitationResponse) SetResultMsg(v string) *SendContractInvitationResponse {
	s.ResultMsg = &v
	return s
}

func (s *SendContractInvitationResponse) SetCode(v int64) *SendContractInvitationResponse {
	s.Code = &v
	return s
}

func (s *SendContractInvitationResponse) SetInvitationId(v string) *SendContractInvitationResponse {
	s.InvitationId = &v
	return s
}

func (s *SendContractInvitationResponse) SetInvitationUrl(v string) *SendContractInvitationResponse {
	s.InvitationUrl = &v
	return s
}

func (s *SendContractInvitationResponse) SetMessage(v string) *SendContractInvitationResponse {
	s.Message = &v
	return s
}

type ListContractPayruleRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// flowId
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
}

func (s ListContractPayruleRequest) String() string {
	return tea.Prettify(s)
}

func (s ListContractPayruleRequest) GoString() string {
	return s.String()
}

func (s *ListContractPayruleRequest) SetAuthToken(v string) *ListContractPayruleRequest {
	s.AuthToken = &v
	return s
}

func (s *ListContractPayruleRequest) SetProductInstanceId(v string) *ListContractPayruleRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListContractPayruleRequest) SetFlowId(v string) *ListContractPayruleRequest {
	s.FlowId = &v
	return s
}

type ListContractPayruleResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// ""
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 代扣规则描述json表示
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s ListContractPayruleResponse) String() string {
	return tea.Prettify(s)
}

func (s ListContractPayruleResponse) GoString() string {
	return s.String()
}

func (s *ListContractPayruleResponse) SetReqMsgId(v string) *ListContractPayruleResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListContractPayruleResponse) SetResultCode(v string) *ListContractPayruleResponse {
	s.ResultCode = &v
	return s
}

func (s *ListContractPayruleResponse) SetResultMsg(v string) *ListContractPayruleResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListContractPayruleResponse) SetCode(v int64) *ListContractPayruleResponse {
	s.Code = &v
	return s
}

func (s *ListContractPayruleResponse) SetErrMessage(v string) *ListContractPayruleResponse {
	s.ErrMessage = &v
	return s
}

func (s *ListContractPayruleResponse) SetResponseData(v string) *ListContractPayruleResponse {
	s.ResponseData = &v
	return s
}

type CreateWithholdQrcodeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 第三方的用户id
	ThirdPartyId *string `json:"third_party_id,omitempty" xml:"third_party_id,omitempty" require:"true"`
	// 请求签约的协议号
	ExternalAgreementNo *string `json:"external_agreement_no,omitempty" xml:"external_agreement_no,omitempty" require:"true"`
}

func (s CreateWithholdQrcodeRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWithholdQrcodeRequest) GoString() string {
	return s.String()
}

func (s *CreateWithholdQrcodeRequest) SetAuthToken(v string) *CreateWithholdQrcodeRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateWithholdQrcodeRequest) SetProductInstanceId(v string) *CreateWithholdQrcodeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateWithholdQrcodeRequest) SetThirdPartyId(v string) *CreateWithholdQrcodeRequest {
	s.ThirdPartyId = &v
	return s
}

func (s *CreateWithholdQrcodeRequest) SetExternalAgreementNo(v string) *CreateWithholdQrcodeRequest {
	s.ExternalAgreementNo = &v
	return s
}

type CreateWithholdQrcodeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 二维码图片链接地址
	QrCodeUrl *string `json:"qr_code_url,omitempty" xml:"qr_code_url,omitempty"`
}

func (s CreateWithholdQrcodeResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWithholdQrcodeResponse) GoString() string {
	return s.String()
}

func (s *CreateWithholdQrcodeResponse) SetReqMsgId(v string) *CreateWithholdQrcodeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateWithholdQrcodeResponse) SetResultCode(v string) *CreateWithholdQrcodeResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateWithholdQrcodeResponse) SetResultMsg(v string) *CreateWithholdQrcodeResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateWithholdQrcodeResponse) SetQrCodeUrl(v string) *CreateWithholdQrcodeResponse {
	s.QrCodeUrl = &v
	return s
}

type CancelContractPaysingletradeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 智能合同id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 被取消的某一期的代扣id
	CancelOutOrderNo *string `json:"cancel_out_order_no,omitempty" xml:"cancel_out_order_no,omitempty" require:"true"`
	// 租赁宝租赁订单号
	BclOrderId *string `json:"bcl_order_id,omitempty" xml:"bcl_order_id,omitempty"`
	// 租赁订单对应的租户id
	BclTenantId *string `json:"bcl_tenant_id,omitempty" xml:"bcl_tenant_id,omitempty"`
}

func (s CancelContractPaysingletradeRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelContractPaysingletradeRequest) GoString() string {
	return s.String()
}

func (s *CancelContractPaysingletradeRequest) SetAuthToken(v string) *CancelContractPaysingletradeRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelContractPaysingletradeRequest) SetProductInstanceId(v string) *CancelContractPaysingletradeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CancelContractPaysingletradeRequest) SetFlowId(v string) *CancelContractPaysingletradeRequest {
	s.FlowId = &v
	return s
}

func (s *CancelContractPaysingletradeRequest) SetCancelOutOrderNo(v string) *CancelContractPaysingletradeRequest {
	s.CancelOutOrderNo = &v
	return s
}

func (s *CancelContractPaysingletradeRequest) SetBclOrderId(v string) *CancelContractPaysingletradeRequest {
	s.BclOrderId = &v
	return s
}

func (s *CancelContractPaysingletradeRequest) SetBclTenantId(v string) *CancelContractPaysingletradeRequest {
	s.BclTenantId = &v
	return s
}

type CancelContractPaysingletradeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 被取消的某一期代扣订单id
	CanceledOutTradeNo *string `json:"canceled_out_trade_no,omitempty" xml:"canceled_out_trade_no,omitempty"`
}

func (s CancelContractPaysingletradeResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelContractPaysingletradeResponse) GoString() string {
	return s.String()
}

func (s *CancelContractPaysingletradeResponse) SetReqMsgId(v string) *CancelContractPaysingletradeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelContractPaysingletradeResponse) SetResultCode(v string) *CancelContractPaysingletradeResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelContractPaysingletradeResponse) SetResultMsg(v string) *CancelContractPaysingletradeResponse {
	s.ResultMsg = &v
	return s
}

func (s *CancelContractPaysingletradeResponse) SetCode(v int64) *CancelContractPaysingletradeResponse {
	s.Code = &v
	return s
}

func (s *CancelContractPaysingletradeResponse) SetErrMessage(v string) *CancelContractPaysingletradeResponse {
	s.ErrMessage = &v
	return s
}

func (s *CancelContractPaysingletradeResponse) SetCanceledOutTradeNo(v string) *CancelContractPaysingletradeResponse {
	s.CanceledOutTradeNo = &v
	return s
}

type ApplyContractCallbackkeyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
}

func (s ApplyContractCallbackkeyRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyContractCallbackkeyRequest) GoString() string {
	return s.String()
}

func (s *ApplyContractCallbackkeyRequest) SetAuthToken(v string) *ApplyContractCallbackkeyRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyContractCallbackkeyRequest) SetProductInstanceId(v string) *ApplyContractCallbackkeyRequest {
	s.ProductInstanceId = &v
	return s
}

type ApplyContractCallbackkeyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 加签使用的key
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s ApplyContractCallbackkeyResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyContractCallbackkeyResponse) GoString() string {
	return s.String()
}

func (s *ApplyContractCallbackkeyResponse) SetReqMsgId(v string) *ApplyContractCallbackkeyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyContractCallbackkeyResponse) SetResultCode(v string) *ApplyContractCallbackkeyResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyContractCallbackkeyResponse) SetResultMsg(v string) *ApplyContractCallbackkeyResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyContractCallbackkeyResponse) SetKey(v string) *ApplyContractCallbackkeyResponse {
	s.Key = &v
	return s
}

func (s *ApplyContractCallbackkeyResponse) SetCode(v int64) *ApplyContractCallbackkeyResponse {
	s.Code = &v
	return s
}

func (s *ApplyContractCallbackkeyResponse) SetMessage(v string) *ApplyContractCallbackkeyResponse {
	s.Message = &v
	return s
}

type CreateContractOnestepflowRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 是否自动归档，默认false。
	AutoArchive *bool `json:"auto_archive,omitempty" xml:"auto_archive,omitempty"`
	// 是否自动开启，默认false。
	AutoInitiate *bool `json:"auto_initiate,omitempty" xml:"auto_initiate,omitempty"`
	// 文件主题
	BusinessScene *string `json:"business_scene,omitempty" xml:"business_scene,omitempty" require:"true"`
	// 流程备注
	Comment *string `json:"comment,omitempty" xml:"comment,omitempty"`
	// 任务配置信息
	ContractSignFlowConfig *ContractSignFlowConfig `json:"contract_sign_flow_config,omitempty" xml:"contract_sign_flow_config,omitempty"`
	// 待签文档信息
	Docs []*ContractDoc `json:"docs,omitempty" xml:"docs,omitempty" type:"Repeated"`
	// 发起人账户id，即发起本次签署的操作人个人账号id；如不传，默认由对接平台发起
	InitiatorAccountId *string `json:"initiator_account_id,omitempty" xml:"initiator_account_id,omitempty"`
	// 发起方主体id，如存在个人代机构发起签约，则需传入机构id；如不传，则默认是对接平台
	InitiatorAuthorizedAccountId *string `json:"initiator_authorized_account_id,omitempty" xml:"initiator_authorized_account_id,omitempty"`
	// 流程中的签署区信息
	SignFields []*OneStepSignField `json:"sign_fields,omitempty" xml:"sign_fields,omitempty" type:"Repeated"`
	// 签署平台，ALIPAY（支付宝小程序）或H5，默认H5
	SignPlatform *string `json:"sign_platform,omitempty" xml:"sign_platform,omitempty"`
	// 签署有效截止日期，毫秒，默认3天失效
	SignValidity *int64 `json:"sign_validity,omitempty" xml:"sign_validity,omitempty"`
	// 是否强制代扣
	AutoDeductionForce *bool `json:"auto_deduction_force,omitempty" xml:"auto_deduction_force,omitempty"`
	// 代扣规则详情
	RepaymentOrderInfo []*RepaymentOrderRequest `json:"repayment_order_info,omitempty" xml:"repayment_order_info,omitempty" type:"Repeated"`
	// 付款方ID（个人）
	PayerTuid *string `json:"payer_tuid,omitempty" xml:"payer_tuid,omitempty"`
	// 收款方ID(机构)
	PayeeTuid *string `json:"payee_tuid,omitempty" xml:"payee_tuid,omitempty"`
	// 租赁订单Id
	BclOrderId *string `json:"bcl_order_id,omitempty" xml:"bcl_order_id,omitempty" maxLength:"32"`
	// 代理客户时，实际用户的租户ID
	SubTenantId *string `json:"sub_tenant_id,omitempty" xml:"sub_tenant_id,omitempty"`
}

func (s CreateContractOnestepflowRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractOnestepflowRequest) GoString() string {
	return s.String()
}

func (s *CreateContractOnestepflowRequest) SetAuthToken(v string) *CreateContractOnestepflowRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractOnestepflowRequest) SetProductInstanceId(v string) *CreateContractOnestepflowRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateContractOnestepflowRequest) SetAutoArchive(v bool) *CreateContractOnestepflowRequest {
	s.AutoArchive = &v
	return s
}

func (s *CreateContractOnestepflowRequest) SetAutoInitiate(v bool) *CreateContractOnestepflowRequest {
	s.AutoInitiate = &v
	return s
}

func (s *CreateContractOnestepflowRequest) SetBusinessScene(v string) *CreateContractOnestepflowRequest {
	s.BusinessScene = &v
	return s
}

func (s *CreateContractOnestepflowRequest) SetComment(v string) *CreateContractOnestepflowRequest {
	s.Comment = &v
	return s
}

func (s *CreateContractOnestepflowRequest) SetContractSignFlowConfig(v *ContractSignFlowConfig) *CreateContractOnestepflowRequest {
	s.ContractSignFlowConfig = v
	return s
}

func (s *CreateContractOnestepflowRequest) SetDocs(v []*ContractDoc) *CreateContractOnestepflowRequest {
	s.Docs = v
	return s
}

func (s *CreateContractOnestepflowRequest) SetInitiatorAccountId(v string) *CreateContractOnestepflowRequest {
	s.InitiatorAccountId = &v
	return s
}

func (s *CreateContractOnestepflowRequest) SetInitiatorAuthorizedAccountId(v string) *CreateContractOnestepflowRequest {
	s.InitiatorAuthorizedAccountId = &v
	return s
}

func (s *CreateContractOnestepflowRequest) SetSignFields(v []*OneStepSignField) *CreateContractOnestepflowRequest {
	s.SignFields = v
	return s
}

func (s *CreateContractOnestepflowRequest) SetSignPlatform(v string) *CreateContractOnestepflowRequest {
	s.SignPlatform = &v
	return s
}

func (s *CreateContractOnestepflowRequest) SetSignValidity(v int64) *CreateContractOnestepflowRequest {
	s.SignValidity = &v
	return s
}

func (s *CreateContractOnestepflowRequest) SetAutoDeductionForce(v bool) *CreateContractOnestepflowRequest {
	s.AutoDeductionForce = &v
	return s
}

func (s *CreateContractOnestepflowRequest) SetRepaymentOrderInfo(v []*RepaymentOrderRequest) *CreateContractOnestepflowRequest {
	s.RepaymentOrderInfo = v
	return s
}

func (s *CreateContractOnestepflowRequest) SetPayerTuid(v string) *CreateContractOnestepflowRequest {
	s.PayerTuid = &v
	return s
}

func (s *CreateContractOnestepflowRequest) SetPayeeTuid(v string) *CreateContractOnestepflowRequest {
	s.PayeeTuid = &v
	return s
}

func (s *CreateContractOnestepflowRequest) SetBclOrderId(v string) *CreateContractOnestepflowRequest {
	s.BclOrderId = &v
	return s
}

func (s *CreateContractOnestepflowRequest) SetSubTenantId(v string) *CreateContractOnestepflowRequest {
	s.SubTenantId = &v
	return s
}

type CreateContractOnestepflowResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 流程ID
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s CreateContractOnestepflowResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractOnestepflowResponse) GoString() string {
	return s.String()
}

func (s *CreateContractOnestepflowResponse) SetReqMsgId(v string) *CreateContractOnestepflowResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractOnestepflowResponse) SetResultCode(v string) *CreateContractOnestepflowResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractOnestepflowResponse) SetResultMsg(v string) *CreateContractOnestepflowResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractOnestepflowResponse) SetCode(v int64) *CreateContractOnestepflowResponse {
	s.Code = &v
	return s
}

func (s *CreateContractOnestepflowResponse) SetFlowId(v string) *CreateContractOnestepflowResponse {
	s.FlowId = &v
	return s
}

func (s *CreateContractOnestepflowResponse) SetMessage(v string) *CreateContractOnestepflowResponse {
	s.Message = &v
	return s
}

type QueryContractNotaryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 签署流程ID
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
}

func (s QueryContractNotaryRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContractNotaryRequest) GoString() string {
	return s.String()
}

func (s *QueryContractNotaryRequest) SetAuthToken(v string) *QueryContractNotaryRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContractNotaryRequest) SetProductInstanceId(v string) *QueryContractNotaryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryContractNotaryRequest) SetFlowId(v string) *QueryContractNotaryRequest {
	s.FlowId = &v
	return s
}

type QueryContractNotaryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 存证信息列表
	Notaries []*ContractNotaryInfo `json:"notaries,omitempty" xml:"notaries,omitempty" type:"Repeated"`
}

func (s QueryContractNotaryResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContractNotaryResponse) GoString() string {
	return s.String()
}

func (s *QueryContractNotaryResponse) SetReqMsgId(v string) *QueryContractNotaryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContractNotaryResponse) SetResultCode(v string) *QueryContractNotaryResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContractNotaryResponse) SetResultMsg(v string) *QueryContractNotaryResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContractNotaryResponse) SetCode(v int64) *QueryContractNotaryResponse {
	s.Code = &v
	return s
}

func (s *QueryContractNotaryResponse) SetMessage(v string) *QueryContractNotaryResponse {
	s.Message = &v
	return s
}

func (s *QueryContractNotaryResponse) SetNotaries(v []*ContractNotaryInfo) *QueryContractNotaryResponse {
	s.Notaries = v
	return s
}

type CreateEcocontractTransRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证关联实体（个人/企业）的身份识别信息
	Customer *Identity `json:"customer,omitempty" xml:"customer,omitempty" require:"true"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 业务子类型标识
	SubBizId *string `json:"sub_biz_id,omitempty" xml:"sub_biz_id,omitempty"`
	// 是否使用可信时间戳，默认为false
	Tsr *bool `json:"tsr,omitempty" xml:"tsr,omitempty"`
}

func (s CreateEcocontractTransRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEcocontractTransRequest) GoString() string {
	return s.String()
}

func (s *CreateEcocontractTransRequest) SetAuthToken(v string) *CreateEcocontractTransRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateEcocontractTransRequest) SetProductInstanceId(v string) *CreateEcocontractTransRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateEcocontractTransRequest) SetCustomer(v *Identity) *CreateEcocontractTransRequest {
	s.Customer = v
	return s
}

func (s *CreateEcocontractTransRequest) SetProperties(v string) *CreateEcocontractTransRequest {
	s.Properties = &v
	return s
}

func (s *CreateEcocontractTransRequest) SetSubBizId(v string) *CreateEcocontractTransRequest {
	s.SubBizId = &v
	return s
}

func (s *CreateEcocontractTransRequest) SetTsr(v bool) *CreateEcocontractTransRequest {
	s.Tsr = &v
	return s
}

type CreateEcocontractTransResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回事务ID，全局唯一
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty"`
	// 可信时间信息
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
}

func (s CreateEcocontractTransResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEcocontractTransResponse) GoString() string {
	return s.String()
}

func (s *CreateEcocontractTransResponse) SetReqMsgId(v string) *CreateEcocontractTransResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateEcocontractTransResponse) SetResultCode(v string) *CreateEcocontractTransResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateEcocontractTransResponse) SetResultMsg(v string) *CreateEcocontractTransResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateEcocontractTransResponse) SetTransactionId(v string) *CreateEcocontractTransResponse {
	s.TransactionId = &v
	return s
}

func (s *CreateEcocontractTransResponse) SetTsr(v *TsrResponse) *CreateEcocontractTransResponse {
	s.Tsr = v
	return s
}

type CreateEcocontractTextRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 签署结束信息，phase为FINISH时必选
	FinishInfo *ContractNotaryFinishInfo `json:"finish_info,omitempty" xml:"finish_info,omitempty"`
	// 签署流程ID
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 签署发起信息，phase为INIT时必选
	InitInfo *ContractNotaryInitInfo `json:"init_info,omitempty" xml:"init_info,omitempty"`
	// 存证阶段，分为INIT(发起)，SIGN(签署)，FINISH(结束)
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 签署过程信息，phase为SIGN时必选
	SignInfo *ContractNotarySignInfo `json:"sign_info,omitempty" xml:"sign_info,omitempty"`
	// 存证事务ID
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
	// 签署文件存档阶段存证核验信息
	DocumentInfo *ContractNotaryDocumentInfo `json:"document_info,omitempty" xml:"document_info,omitempty"`
}

func (s CreateEcocontractTextRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEcocontractTextRequest) GoString() string {
	return s.String()
}

func (s *CreateEcocontractTextRequest) SetAuthToken(v string) *CreateEcocontractTextRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateEcocontractTextRequest) SetProductInstanceId(v string) *CreateEcocontractTextRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateEcocontractTextRequest) SetFinishInfo(v *ContractNotaryFinishInfo) *CreateEcocontractTextRequest {
	s.FinishInfo = v
	return s
}

func (s *CreateEcocontractTextRequest) SetFlowId(v string) *CreateEcocontractTextRequest {
	s.FlowId = &v
	return s
}

func (s *CreateEcocontractTextRequest) SetInitInfo(v *ContractNotaryInitInfo) *CreateEcocontractTextRequest {
	s.InitInfo = v
	return s
}

func (s *CreateEcocontractTextRequest) SetPhase(v string) *CreateEcocontractTextRequest {
	s.Phase = &v
	return s
}

func (s *CreateEcocontractTextRequest) SetSignInfo(v *ContractNotarySignInfo) *CreateEcocontractTextRequest {
	s.SignInfo = v
	return s
}

func (s *CreateEcocontractTextRequest) SetTransactionId(v string) *CreateEcocontractTextRequest {
	s.TransactionId = &v
	return s
}

func (s *CreateEcocontractTextRequest) SetDocumentInfo(v *ContractNotaryDocumentInfo) *CreateEcocontractTextRequest {
	s.DocumentInfo = v
	return s
}

type CreateEcocontractTextResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证凭据,
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateEcocontractTextResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEcocontractTextResponse) GoString() string {
	return s.String()
}

func (s *CreateEcocontractTextResponse) SetReqMsgId(v string) *CreateEcocontractTextResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateEcocontractTextResponse) SetResultCode(v string) *CreateEcocontractTextResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateEcocontractTextResponse) SetResultMsg(v string) *CreateEcocontractTextResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateEcocontractTextResponse) SetTxHash(v string) *CreateEcocontractTextResponse {
	s.TxHash = &v
	return s
}

type QueryContractWordspositionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 文档id
	FileId *string `json:"file_id,omitempty" xml:"file_id,omitempty" require:"true"`
	// 关键字列表，逗号分割；注意要英文的逗号，不能中文逗号；关键字建议不要设置特殊字符，因Adobe无法识别部分符号，某些特殊字符会因解析失败从而导致搜索不到
	Keywords *string `json:"keywords,omitempty" xml:"keywords,omitempty" require:"true"`
}

func (s QueryContractWordspositionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContractWordspositionRequest) GoString() string {
	return s.String()
}

func (s *QueryContractWordspositionRequest) SetAuthToken(v string) *QueryContractWordspositionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContractWordspositionRequest) SetProductInstanceId(v string) *QueryContractWordspositionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryContractWordspositionRequest) SetFileId(v string) *QueryContractWordspositionRequest {
	s.FileId = &v
	return s
}

func (s *QueryContractWordspositionRequest) SetKeywords(v string) *QueryContractWordspositionRequest {
	s.Keywords = &v
	return s
}

type QueryContractWordspositionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 文档id
	FileId *string `json:"file_id,omitempty" xml:"file_id,omitempty"`
	// 关键字位置列表
	Data []*KeywordsPosition `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s QueryContractWordspositionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContractWordspositionResponse) GoString() string {
	return s.String()
}

func (s *QueryContractWordspositionResponse) SetReqMsgId(v string) *QueryContractWordspositionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContractWordspositionResponse) SetResultCode(v string) *QueryContractWordspositionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContractWordspositionResponse) SetResultMsg(v string) *QueryContractWordspositionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContractWordspositionResponse) SetCode(v int64) *QueryContractWordspositionResponse {
	s.Code = &v
	return s
}

func (s *QueryContractWordspositionResponse) SetMessage(v string) *QueryContractWordspositionResponse {
	s.Message = &v
	return s
}

func (s *QueryContractWordspositionResponse) SetFileId(v string) *QueryContractWordspositionResponse {
	s.FileId = &v
	return s
}

func (s *QueryContractWordspositionResponse) SetData(v []*KeywordsPosition) *QueryContractWordspositionResponse {
	s.Data = v
	return s
}

type DeleteContractSignerRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 签署流程ID
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 签署人ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
}

func (s DeleteContractSignerRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteContractSignerRequest) GoString() string {
	return s.String()
}

func (s *DeleteContractSignerRequest) SetAuthToken(v string) *DeleteContractSignerRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteContractSignerRequest) SetProductInstanceId(v string) *DeleteContractSignerRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteContractSignerRequest) SetFlowId(v string) *DeleteContractSignerRequest {
	s.FlowId = &v
	return s
}

func (s *DeleteContractSignerRequest) SetAccountId(v string) *DeleteContractSignerRequest {
	s.AccountId = &v
	return s
}

type DeleteContractSignerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s DeleteContractSignerResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteContractSignerResponse) GoString() string {
	return s.String()
}

func (s *DeleteContractSignerResponse) SetReqMsgId(v string) *DeleteContractSignerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteContractSignerResponse) SetResultCode(v string) *DeleteContractSignerResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteContractSignerResponse) SetResultMsg(v string) *DeleteContractSignerResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteContractSignerResponse) SetCode(v int64) *DeleteContractSignerResponse {
	s.Code = &v
	return s
}

func (s *DeleteContractSignerResponse) SetMessage(v string) *DeleteContractSignerResponse {
	s.Message = &v
	return s
}

type GetContractCertificateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 签署流程ID
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
}

func (s GetContractCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetContractCertificateRequest) GoString() string {
	return s.String()
}

func (s *GetContractCertificateRequest) SetAuthToken(v string) *GetContractCertificateRequest {
	s.AuthToken = &v
	return s
}

func (s *GetContractCertificateRequest) SetProductInstanceId(v string) *GetContractCertificateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetContractCertificateRequest) SetFlowId(v string) *GetContractCertificateRequest {
	s.FlowId = &v
	return s
}

type GetContractCertificateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 下载文件地址(一小时内有效)
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
	// 状态值
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 	状态信息描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s GetContractCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetContractCertificateResponse) GoString() string {
	return s.String()
}

func (s *GetContractCertificateResponse) SetReqMsgId(v string) *GetContractCertificateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetContractCertificateResponse) SetResultCode(v string) *GetContractCertificateResponse {
	s.ResultCode = &v
	return s
}

func (s *GetContractCertificateResponse) SetResultMsg(v string) *GetContractCertificateResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetContractCertificateResponse) SetUrl(v string) *GetContractCertificateResponse {
	s.Url = &v
	return s
}

func (s *GetContractCertificateResponse) SetCode(v int64) *GetContractCertificateResponse {
	s.Code = &v
	return s
}

func (s *GetContractCertificateResponse) SetMessage(v string) *GetContractCertificateResponse {
	s.Message = &v
	return s
}

type QueryContractSignfieldsealidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 账号id，默认所有签署人
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
	// 指定签署区id列表，逗号分割，默认所有签署区
	SignfieldIds *string `json:"signfield_ids,omitempty" xml:"signfield_ids,omitempty"`
}

func (s QueryContractSignfieldsealidRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContractSignfieldsealidRequest) GoString() string {
	return s.String()
}

func (s *QueryContractSignfieldsealidRequest) SetAuthToken(v string) *QueryContractSignfieldsealidRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContractSignfieldsealidRequest) SetProductInstanceId(v string) *QueryContractSignfieldsealidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryContractSignfieldsealidRequest) SetFlowId(v string) *QueryContractSignfieldsealidRequest {
	s.FlowId = &v
	return s
}

func (s *QueryContractSignfieldsealidRequest) SetAccountId(v string) *QueryContractSignfieldsealidRequest {
	s.AccountId = &v
	return s
}

func (s *QueryContractSignfieldsealidRequest) SetSignfieldIds(v string) *QueryContractSignfieldsealidRequest {
	s.SignfieldIds = &v
	return s
}

type QueryContractSignfieldsealidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 签署区列表数据
	Signfields []*ContractSignFieldSealId `json:"signfields,omitempty" xml:"signfields,omitempty" type:"Repeated"`
}

func (s QueryContractSignfieldsealidResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContractSignfieldsealidResponse) GoString() string {
	return s.String()
}

func (s *QueryContractSignfieldsealidResponse) SetReqMsgId(v string) *QueryContractSignfieldsealidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContractSignfieldsealidResponse) SetResultCode(v string) *QueryContractSignfieldsealidResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContractSignfieldsealidResponse) SetResultMsg(v string) *QueryContractSignfieldsealidResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContractSignfieldsealidResponse) SetCode(v string) *QueryContractSignfieldsealidResponse {
	s.Code = &v
	return s
}

func (s *QueryContractSignfieldsealidResponse) SetMessage(v string) *QueryContractSignfieldsealidResponse {
	s.Message = &v
	return s
}

func (s *QueryContractSignfieldsealidResponse) SetSignfields(v []*ContractSignFieldSealId) *QueryContractSignfieldsealidResponse {
	s.Signfields = v
	return s
}

type NotifyContractSignerRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 合同签署流程ID
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
}

func (s NotifyContractSignerRequest) String() string {
	return tea.Prettify(s)
}

func (s NotifyContractSignerRequest) GoString() string {
	return s.String()
}

func (s *NotifyContractSignerRequest) SetAuthToken(v string) *NotifyContractSignerRequest {
	s.AuthToken = &v
	return s
}

func (s *NotifyContractSignerRequest) SetProductInstanceId(v string) *NotifyContractSignerRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *NotifyContractSignerRequest) SetFlowId(v string) *NotifyContractSignerRequest {
	s.FlowId = &v
	return s
}

type NotifyContractSignerResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功。
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 发送通知的用户账号列表
	AccountList []*string `json:"account_list,omitempty" xml:"account_list,omitempty" type:"Repeated"`
}

func (s NotifyContractSignerResponse) String() string {
	return tea.Prettify(s)
}

func (s NotifyContractSignerResponse) GoString() string {
	return s.String()
}

func (s *NotifyContractSignerResponse) SetReqMsgId(v string) *NotifyContractSignerResponse {
	s.ReqMsgId = &v
	return s
}

func (s *NotifyContractSignerResponse) SetResultCode(v string) *NotifyContractSignerResponse {
	s.ResultCode = &v
	return s
}

func (s *NotifyContractSignerResponse) SetResultMsg(v string) *NotifyContractSignerResponse {
	s.ResultMsg = &v
	return s
}

func (s *NotifyContractSignerResponse) SetCode(v int64) *NotifyContractSignerResponse {
	s.Code = &v
	return s
}

func (s *NotifyContractSignerResponse) SetMessage(v string) *NotifyContractSignerResponse {
	s.Message = &v
	return s
}

func (s *NotifyContractSignerResponse) SetAccountList(v []*string) *NotifyContractSignerResponse {
	s.AccountList = v
	return s
}

type UpdateContractPlatformRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 平台方企业信息
	Platform *ContractPlatformOrganizationApplication `json:"platform,omitempty" xml:"platform,omitempty" require:"true"`
	// 平台方经办人信息
	Creator *ContractPlatformAccountApplication `json:"creator,omitempty" xml:"creator,omitempty"`
}

func (s UpdateContractPlatformRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateContractPlatformRequest) GoString() string {
	return s.String()
}

func (s *UpdateContractPlatformRequest) SetAuthToken(v string) *UpdateContractPlatformRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateContractPlatformRequest) SetProductInstanceId(v string) *UpdateContractPlatformRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateContractPlatformRequest) SetPlatform(v *ContractPlatformOrganizationApplication) *UpdateContractPlatformRequest {
	s.Platform = v
	return s
}

func (s *UpdateContractPlatformRequest) SetCreator(v *ContractPlatformAccountApplication) *UpdateContractPlatformRequest {
	s.Creator = v
	return s
}

type UpdateContractPlatformResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 状态信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 更新后平台方企业信息
	Platform *ContractPlatformApplication `json:"platform,omitempty" xml:"platform,omitempty"`
	// 更新后平台方经办人信息
	Creator *ContractCreatorApplication `json:"creator,omitempty" xml:"creator,omitempty"`
}

func (s UpdateContractPlatformResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateContractPlatformResponse) GoString() string {
	return s.String()
}

func (s *UpdateContractPlatformResponse) SetReqMsgId(v string) *UpdateContractPlatformResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateContractPlatformResponse) SetResultCode(v string) *UpdateContractPlatformResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateContractPlatformResponse) SetResultMsg(v string) *UpdateContractPlatformResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateContractPlatformResponse) SetCode(v string) *UpdateContractPlatformResponse {
	s.Code = &v
	return s
}

func (s *UpdateContractPlatformResponse) SetMessage(v string) *UpdateContractPlatformResponse {
	s.Message = &v
	return s
}

func (s *UpdateContractPlatformResponse) SetPlatform(v *ContractPlatformApplication) *UpdateContractPlatformResponse {
	s.Platform = v
	return s
}

func (s *UpdateContractPlatformResponse) SetCreator(v *ContractCreatorApplication) *UpdateContractPlatformResponse {
	s.Creator = v
	return s
}

type UpdateContractUserRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 邮箱地址，默认不变
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// 证件号，该字段只有为空才允许修改
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty"`
	// 证件类型，默认为身份证
	IdType *string `json:"id_type,omitempty" xml:"id_type,omitempty"`
	// 手机号码，默认不变
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty"`
	// 姓名，默认不变
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 用户账号id，注册用户返回的个人账号id
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
}

func (s UpdateContractUserRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateContractUserRequest) GoString() string {
	return s.String()
}

func (s *UpdateContractUserRequest) SetAuthToken(v string) *UpdateContractUserRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateContractUserRequest) SetProductInstanceId(v string) *UpdateContractUserRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateContractUserRequest) SetEmail(v string) *UpdateContractUserRequest {
	s.Email = &v
	return s
}

func (s *UpdateContractUserRequest) SetIdNumber(v string) *UpdateContractUserRequest {
	s.IdNumber = &v
	return s
}

func (s *UpdateContractUserRequest) SetIdType(v string) *UpdateContractUserRequest {
	s.IdType = &v
	return s
}

func (s *UpdateContractUserRequest) SetMobile(v string) *UpdateContractUserRequest {
	s.Mobile = &v
	return s
}

func (s *UpdateContractUserRequest) SetName(v string) *UpdateContractUserRequest {
	s.Name = &v
	return s
}

func (s *UpdateContractUserRequest) SetUserId(v string) *UpdateContractUserRequest {
	s.UserId = &v
	return s
}

type UpdateContractUserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 状态信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 邮箱地址
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// 证件号
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty"`
	// 证件类型
	IdType *string `json:"id_type,omitempty" xml:"id_type,omitempty"`
	// 手机号码
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty"`
	// 姓名
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 用户账号id
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s UpdateContractUserResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateContractUserResponse) GoString() string {
	return s.String()
}

func (s *UpdateContractUserResponse) SetReqMsgId(v string) *UpdateContractUserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateContractUserResponse) SetResultCode(v string) *UpdateContractUserResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateContractUserResponse) SetResultMsg(v string) *UpdateContractUserResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateContractUserResponse) SetCode(v string) *UpdateContractUserResponse {
	s.Code = &v
	return s
}

func (s *UpdateContractUserResponse) SetMessage(v string) *UpdateContractUserResponse {
	s.Message = &v
	return s
}

func (s *UpdateContractUserResponse) SetEmail(v string) *UpdateContractUserResponse {
	s.Email = &v
	return s
}

func (s *UpdateContractUserResponse) SetIdNumber(v string) *UpdateContractUserResponse {
	s.IdNumber = &v
	return s
}

func (s *UpdateContractUserResponse) SetIdType(v string) *UpdateContractUserResponse {
	s.IdType = &v
	return s
}

func (s *UpdateContractUserResponse) SetMobile(v string) *UpdateContractUserResponse {
	s.Mobile = &v
	return s
}

func (s *UpdateContractUserResponse) SetName(v string) *UpdateContractUserResponse {
	s.Name = &v
	return s
}

func (s *UpdateContractUserResponse) SetUserId(v string) *UpdateContractUserResponse {
	s.UserId = &v
	return s
}

type UpdateContractOrganizationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 证件号，该字段只有为空才允许修改
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty"`
	// 证件类型 ，默认CRED_ORG_USCC
	IdType *string `json:"id_type,omitempty" xml:"id_type,omitempty"`
	// 企业法定代表人名称
	LegalPerson *string `json:"legal_person,omitempty" xml:"legal_person,omitempty"`
	// 企业法定代表人证件号
	LegalPersonId *string `json:"legal_person_id,omitempty" xml:"legal_person_id,omitempty"`
	// 机构名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 机构账号id，注册机构账户时返回的机构账号id
	OrganizationId *string `json:"organization_id,omitempty" xml:"organization_id,omitempty" require:"true"`
}

func (s UpdateContractOrganizationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateContractOrganizationRequest) GoString() string {
	return s.String()
}

func (s *UpdateContractOrganizationRequest) SetAuthToken(v string) *UpdateContractOrganizationRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateContractOrganizationRequest) SetProductInstanceId(v string) *UpdateContractOrganizationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateContractOrganizationRequest) SetIdNumber(v string) *UpdateContractOrganizationRequest {
	s.IdNumber = &v
	return s
}

func (s *UpdateContractOrganizationRequest) SetIdType(v string) *UpdateContractOrganizationRequest {
	s.IdType = &v
	return s
}

func (s *UpdateContractOrganizationRequest) SetLegalPerson(v string) *UpdateContractOrganizationRequest {
	s.LegalPerson = &v
	return s
}

func (s *UpdateContractOrganizationRequest) SetLegalPersonId(v string) *UpdateContractOrganizationRequest {
	s.LegalPersonId = &v
	return s
}

func (s *UpdateContractOrganizationRequest) SetName(v string) *UpdateContractOrganizationRequest {
	s.Name = &v
	return s
}

func (s *UpdateContractOrganizationRequest) SetOrganizationId(v string) *UpdateContractOrganizationRequest {
	s.OrganizationId = &v
	return s
}

type UpdateContractOrganizationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 证件号
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty"`
	// 证件类型
	IdType *string `json:"id_type,omitempty" xml:"id_type,omitempty"`
	// 企业法人名称
	LegalPerson *string `json:"legal_person,omitempty" xml:"legal_person,omitempty"`
	// 企业法人证件号
	LegalPersonId *string `json:"legal_person_id,omitempty" xml:"legal_person_id,omitempty"`
	// 机构名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// 机构账号id
	OrganizationId *string `json:"organization_id,omitempty" xml:"organization_id,omitempty"`
}

func (s UpdateContractOrganizationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateContractOrganizationResponse) GoString() string {
	return s.String()
}

func (s *UpdateContractOrganizationResponse) SetReqMsgId(v string) *UpdateContractOrganizationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateContractOrganizationResponse) SetResultCode(v string) *UpdateContractOrganizationResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateContractOrganizationResponse) SetResultMsg(v string) *UpdateContractOrganizationResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateContractOrganizationResponse) SetIdNumber(v string) *UpdateContractOrganizationResponse {
	s.IdNumber = &v
	return s
}

func (s *UpdateContractOrganizationResponse) SetIdType(v string) *UpdateContractOrganizationResponse {
	s.IdType = &v
	return s
}

func (s *UpdateContractOrganizationResponse) SetLegalPerson(v string) *UpdateContractOrganizationResponse {
	s.LegalPerson = &v
	return s
}

func (s *UpdateContractOrganizationResponse) SetLegalPersonId(v string) *UpdateContractOrganizationResponse {
	s.LegalPersonId = &v
	return s
}

func (s *UpdateContractOrganizationResponse) SetName(v string) *UpdateContractOrganizationResponse {
	s.Name = &v
	return s
}

func (s *UpdateContractOrganizationResponse) SetOrganizationId(v string) *UpdateContractOrganizationResponse {
	s.OrganizationId = &v
	return s
}

type ApplyContractMerchantRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 入驻信息，必须是json字符串
	BizContent *string `json:"biz_content,omitempty" xml:"biz_content,omitempty" require:"true"`
	// 代理商户账户ID，此参数传null默认平台机构账户入驻，不允许传空字符串
	AgentAccountId *string `json:"agent_account_id,omitempty" xml:"agent_account_id,omitempty"`
}

func (s ApplyContractMerchantRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyContractMerchantRequest) GoString() string {
	return s.String()
}

func (s *ApplyContractMerchantRequest) SetAuthToken(v string) *ApplyContractMerchantRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyContractMerchantRequest) SetProductInstanceId(v string) *ApplyContractMerchantRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyContractMerchantRequest) SetBizContent(v string) *ApplyContractMerchantRequest {
	s.BizContent = &v
	return s
}

func (s *ApplyContractMerchantRequest) SetAgentAccountId(v string) *ApplyContractMerchantRequest {
	s.AgentAccountId = &v
	return s
}

type ApplyContractMerchantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否进件成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// 进件子结果码，0 成功，1 代理商户已进件，2 商户已进件，请走挂接接口进行代理商挂接，3 商户进件中
	SubCode *int64 `json:"sub_code,omitempty" xml:"sub_code,omitempty"`
	// 进件失败原因
	SubMsg *string `json:"sub_msg,omitempty" xml:"sub_msg,omitempty"`
	// 已进件商户信息（当cert_no对应的商户已经进件过，会返回完整的已进件的商户信息）
	MerchantInfo *string `json:"merchant_info,omitempty" xml:"merchant_info,omitempty"`
	// 已进件成功的商户ID（当cert_no表示的商户已经进件过，会返回进件生成的商户ID）
	Smid *string `json:"smid,omitempty" xml:"smid,omitempty"`
	// 订单ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
}

func (s ApplyContractMerchantResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyContractMerchantResponse) GoString() string {
	return s.String()
}

func (s *ApplyContractMerchantResponse) SetReqMsgId(v string) *ApplyContractMerchantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyContractMerchantResponse) SetResultCode(v string) *ApplyContractMerchantResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyContractMerchantResponse) SetResultMsg(v string) *ApplyContractMerchantResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyContractMerchantResponse) SetSuccess(v bool) *ApplyContractMerchantResponse {
	s.Success = &v
	return s
}

func (s *ApplyContractMerchantResponse) SetSubCode(v int64) *ApplyContractMerchantResponse {
	s.SubCode = &v
	return s
}

func (s *ApplyContractMerchantResponse) SetSubMsg(v string) *ApplyContractMerchantResponse {
	s.SubMsg = &v
	return s
}

func (s *ApplyContractMerchantResponse) SetMerchantInfo(v string) *ApplyContractMerchantResponse {
	s.MerchantInfo = &v
	return s
}

func (s *ApplyContractMerchantResponse) SetSmid(v string) *ApplyContractMerchantResponse {
	s.Smid = &v
	return s
}

func (s *ApplyContractMerchantResponse) SetOrderId(v string) *ApplyContractMerchantResponse {
	s.OrderId = &v
	return s
}

type ConfirmContractMerchantRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 商户入驻查询订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 代理商户账户ID，此参数不填默认平台机构账户入驻
	AgentAccountId *string `json:"agent_account_id,omitempty" xml:"agent_account_id,omitempty"`
}

func (s ConfirmContractMerchantRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmContractMerchantRequest) GoString() string {
	return s.String()
}

func (s *ConfirmContractMerchantRequest) SetAuthToken(v string) *ConfirmContractMerchantRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmContractMerchantRequest) SetProductInstanceId(v string) *ConfirmContractMerchantRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ConfirmContractMerchantRequest) SetOrderId(v string) *ConfirmContractMerchantRequest {
	s.OrderId = &v
	return s
}

func (s *ConfirmContractMerchantRequest) SetAgentAccountId(v string) *ConfirmContractMerchantRequest {
	s.AgentAccountId = &v
	return s
}

type ConfirmContractMerchantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 额外信息，包含smid
	ExtInfo *string `json:"ext_info,omitempty" xml:"ext_info,omitempty"`
	// 支付宝的ipRoleId
	IpRoleId []*string `json:"ip_role_id,omitempty" xml:"ip_role_id,omitempty" type:"Repeated"`
	// 申请时间
	ApplyId *string `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	// 商户名称
	MerchantName *string `json:"merchant_name,omitempty" xml:"merchant_name,omitempty"`
	// 直付通商户进件的状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s ConfirmContractMerchantResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmContractMerchantResponse) GoString() string {
	return s.String()
}

func (s *ConfirmContractMerchantResponse) SetReqMsgId(v string) *ConfirmContractMerchantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmContractMerchantResponse) SetResultCode(v string) *ConfirmContractMerchantResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmContractMerchantResponse) SetResultMsg(v string) *ConfirmContractMerchantResponse {
	s.ResultMsg = &v
	return s
}

func (s *ConfirmContractMerchantResponse) SetExtInfo(v string) *ConfirmContractMerchantResponse {
	s.ExtInfo = &v
	return s
}

func (s *ConfirmContractMerchantResponse) SetIpRoleId(v []*string) *ConfirmContractMerchantResponse {
	s.IpRoleId = v
	return s
}

func (s *ConfirmContractMerchantResponse) SetApplyId(v string) *ConfirmContractMerchantResponse {
	s.ApplyId = &v
	return s
}

func (s *ConfirmContractMerchantResponse) SetMerchantName(v string) *ConfirmContractMerchantResponse {
	s.MerchantName = &v
	return s
}

func (s *ConfirmContractMerchantResponse) SetStatus(v string) *ConfirmContractMerchantResponse {
	s.Status = &v
	return s
}

type CreatePrivatecontractTransRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证关联实体（个人/企业）的身份识别信息
	Customer *Identity `json:"customer,omitempty" xml:"customer,omitempty" require:"true"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 业务子类型标识
	SubBizId *string `json:"sub_biz_id,omitempty" xml:"sub_biz_id,omitempty"`
	// 是否使用可信时间戳，默认为false
	Tsr *bool `json:"tsr,omitempty" xml:"tsr,omitempty"`
}

func (s CreatePrivatecontractTransRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePrivatecontractTransRequest) GoString() string {
	return s.String()
}

func (s *CreatePrivatecontractTransRequest) SetAuthToken(v string) *CreatePrivatecontractTransRequest {
	s.AuthToken = &v
	return s
}

func (s *CreatePrivatecontractTransRequest) SetProductInstanceId(v string) *CreatePrivatecontractTransRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreatePrivatecontractTransRequest) SetCustomer(v *Identity) *CreatePrivatecontractTransRequest {
	s.Customer = v
	return s
}

func (s *CreatePrivatecontractTransRequest) SetProperties(v string) *CreatePrivatecontractTransRequest {
	s.Properties = &v
	return s
}

func (s *CreatePrivatecontractTransRequest) SetSubBizId(v string) *CreatePrivatecontractTransRequest {
	s.SubBizId = &v
	return s
}

func (s *CreatePrivatecontractTransRequest) SetTsr(v bool) *CreatePrivatecontractTransRequest {
	s.Tsr = &v
	return s
}

type CreatePrivatecontractTransResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回事务ID，全局唯一
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty"`
	// 可信时间信息
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
}

func (s CreatePrivatecontractTransResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePrivatecontractTransResponse) GoString() string {
	return s.String()
}

func (s *CreatePrivatecontractTransResponse) SetReqMsgId(v string) *CreatePrivatecontractTransResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreatePrivatecontractTransResponse) SetResultCode(v string) *CreatePrivatecontractTransResponse {
	s.ResultCode = &v
	return s
}

func (s *CreatePrivatecontractTransResponse) SetResultMsg(v string) *CreatePrivatecontractTransResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreatePrivatecontractTransResponse) SetTransactionId(v string) *CreatePrivatecontractTransResponse {
	s.TransactionId = &v
	return s
}

func (s *CreatePrivatecontractTransResponse) SetTsr(v *TsrResponse) *CreatePrivatecontractTransResponse {
	s.Tsr = v
	return s
}

type CreatePrivatecontractTextRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 签署结束信息，phase为FINISH时必选
	FinishInfo *ContractNotaryFinishInfo `json:"finish_info,omitempty" xml:"finish_info,omitempty"`
	// 签署流程ID
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 	签署发起信息，phase为INIT时必选
	InitInfo *ContractNotaryInitInfo `json:"init_info,omitempty" xml:"init_info,omitempty"`
	// 存证阶段，分为INIT(发起)，SIGN(签署)，FINISH(结束)
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 签署过程信息，phase为SIGN时必选
	SignInfo *ContractNotarySignInfo `json:"sign_info,omitempty" xml:"sign_info,omitempty"`
	// 存证事务ID
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
	// 签署文件存档阶段存证核验信息
	DocumentInfo *ContractNotaryDocumentInfo `json:"document_info,omitempty" xml:"document_info,omitempty"`
}

func (s CreatePrivatecontractTextRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePrivatecontractTextRequest) GoString() string {
	return s.String()
}

func (s *CreatePrivatecontractTextRequest) SetAuthToken(v string) *CreatePrivatecontractTextRequest {
	s.AuthToken = &v
	return s
}

func (s *CreatePrivatecontractTextRequest) SetProductInstanceId(v string) *CreatePrivatecontractTextRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreatePrivatecontractTextRequest) SetFinishInfo(v *ContractNotaryFinishInfo) *CreatePrivatecontractTextRequest {
	s.FinishInfo = v
	return s
}

func (s *CreatePrivatecontractTextRequest) SetFlowId(v string) *CreatePrivatecontractTextRequest {
	s.FlowId = &v
	return s
}

func (s *CreatePrivatecontractTextRequest) SetInitInfo(v *ContractNotaryInitInfo) *CreatePrivatecontractTextRequest {
	s.InitInfo = v
	return s
}

func (s *CreatePrivatecontractTextRequest) SetPhase(v string) *CreatePrivatecontractTextRequest {
	s.Phase = &v
	return s
}

func (s *CreatePrivatecontractTextRequest) SetSignInfo(v *ContractNotarySignInfo) *CreatePrivatecontractTextRequest {
	s.SignInfo = v
	return s
}

func (s *CreatePrivatecontractTextRequest) SetTransactionId(v string) *CreatePrivatecontractTextRequest {
	s.TransactionId = &v
	return s
}

func (s *CreatePrivatecontractTextRequest) SetDocumentInfo(v *ContractNotaryDocumentInfo) *CreatePrivatecontractTextRequest {
	s.DocumentInfo = v
	return s
}

type CreatePrivatecontractTextResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证凭据,
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreatePrivatecontractTextResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePrivatecontractTextResponse) GoString() string {
	return s.String()
}

func (s *CreatePrivatecontractTextResponse) SetReqMsgId(v string) *CreatePrivatecontractTextResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreatePrivatecontractTextResponse) SetResultCode(v string) *CreatePrivatecontractTextResponse {
	s.ResultCode = &v
	return s
}

func (s *CreatePrivatecontractTextResponse) SetResultMsg(v string) *CreatePrivatecontractTextResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreatePrivatecontractTextResponse) SetTxHash(v string) *CreatePrivatecontractTextResponse {
	s.TxHash = &v
	return s
}

type VerifyPrivatepersonTwometaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 个人信息
	PersonInfo *PersonInfo `json:"person_info,omitempty" xml:"person_info,omitempty" require:"true"`
	// 私有云实例id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s VerifyPrivatepersonTwometaRequest) String() string {
	return tea.Prettify(s)
}

func (s VerifyPrivatepersonTwometaRequest) GoString() string {
	return s.String()
}

func (s *VerifyPrivatepersonTwometaRequest) SetAuthToken(v string) *VerifyPrivatepersonTwometaRequest {
	s.AuthToken = &v
	return s
}

func (s *VerifyPrivatepersonTwometaRequest) SetProductInstanceId(v string) *VerifyPrivatepersonTwometaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *VerifyPrivatepersonTwometaRequest) SetPersonInfo(v *PersonInfo) *VerifyPrivatepersonTwometaRequest {
	s.PersonInfo = v
	return s
}

func (s *VerifyPrivatepersonTwometaRequest) SetInstanceId(v string) *VerifyPrivatepersonTwometaRequest {
	s.InstanceId = &v
	return s
}

type VerifyPrivatepersonTwometaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 调用返回值。"0"为调用成功。
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 校验是否通过。
	Pass *bool `json:"pass,omitempty" xml:"pass,omitempty"`
	// 错误信息描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s VerifyPrivatepersonTwometaResponse) String() string {
	return tea.Prettify(s)
}

func (s VerifyPrivatepersonTwometaResponse) GoString() string {
	return s.String()
}

func (s *VerifyPrivatepersonTwometaResponse) SetReqMsgId(v string) *VerifyPrivatepersonTwometaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *VerifyPrivatepersonTwometaResponse) SetResultCode(v string) *VerifyPrivatepersonTwometaResponse {
	s.ResultCode = &v
	return s
}

func (s *VerifyPrivatepersonTwometaResponse) SetResultMsg(v string) *VerifyPrivatepersonTwometaResponse {
	s.ResultMsg = &v
	return s
}

func (s *VerifyPrivatepersonTwometaResponse) SetCode(v string) *VerifyPrivatepersonTwometaResponse {
	s.Code = &v
	return s
}

func (s *VerifyPrivatepersonTwometaResponse) SetPass(v bool) *VerifyPrivatepersonTwometaResponse {
	s.Pass = &v
	return s
}

func (s *VerifyPrivatepersonTwometaResponse) SetMessage(v string) *VerifyPrivatepersonTwometaResponse {
	s.Message = &v
	return s
}

type VerifyPrivatecompanyTwometaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 私有云实例id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 企业信息
	CompanyTwoMetaInfo *CompanyTwoMetaInfo `json:"company_two_meta_info,omitempty" xml:"company_two_meta_info,omitempty" require:"true"`
}

func (s VerifyPrivatecompanyTwometaRequest) String() string {
	return tea.Prettify(s)
}

func (s VerifyPrivatecompanyTwometaRequest) GoString() string {
	return s.String()
}

func (s *VerifyPrivatecompanyTwometaRequest) SetAuthToken(v string) *VerifyPrivatecompanyTwometaRequest {
	s.AuthToken = &v
	return s
}

func (s *VerifyPrivatecompanyTwometaRequest) SetProductInstanceId(v string) *VerifyPrivatecompanyTwometaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *VerifyPrivatecompanyTwometaRequest) SetInstanceId(v string) *VerifyPrivatecompanyTwometaRequest {
	s.InstanceId = &v
	return s
}

func (s *VerifyPrivatecompanyTwometaRequest) SetCompanyTwoMetaInfo(v *CompanyTwoMetaInfo) *VerifyPrivatecompanyTwometaRequest {
	s.CompanyTwoMetaInfo = v
	return s
}

type VerifyPrivatecompanyTwometaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 调用返回值。"0"为调用成功。
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 校验是否通过。
	Pass *bool `json:"pass,omitempty" xml:"pass,omitempty"`
	// 错误信息描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s VerifyPrivatecompanyTwometaResponse) String() string {
	return tea.Prettify(s)
}

func (s VerifyPrivatecompanyTwometaResponse) GoString() string {
	return s.String()
}

func (s *VerifyPrivatecompanyTwometaResponse) SetReqMsgId(v string) *VerifyPrivatecompanyTwometaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *VerifyPrivatecompanyTwometaResponse) SetResultCode(v string) *VerifyPrivatecompanyTwometaResponse {
	s.ResultCode = &v
	return s
}

func (s *VerifyPrivatecompanyTwometaResponse) SetResultMsg(v string) *VerifyPrivatecompanyTwometaResponse {
	s.ResultMsg = &v
	return s
}

func (s *VerifyPrivatecompanyTwometaResponse) SetCode(v string) *VerifyPrivatecompanyTwometaResponse {
	s.Code = &v
	return s
}

func (s *VerifyPrivatecompanyTwometaResponse) SetPass(v bool) *VerifyPrivatecompanyTwometaResponse {
	s.Pass = &v
	return s
}

func (s *VerifyPrivatecompanyTwometaResponse) SetMessage(v string) *VerifyPrivatecompanyTwometaResponse {
	s.Message = &v
	return s
}

type VerifyPrivatecompanyFourmetaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 私有云实例id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 企业信息
	CompanyFourMetaInfo *CompanyFourMetaInfo `json:"company_four_meta_info,omitempty" xml:"company_four_meta_info,omitempty" require:"true"`
}

func (s VerifyPrivatecompanyFourmetaRequest) String() string {
	return tea.Prettify(s)
}

func (s VerifyPrivatecompanyFourmetaRequest) GoString() string {
	return s.String()
}

func (s *VerifyPrivatecompanyFourmetaRequest) SetAuthToken(v string) *VerifyPrivatecompanyFourmetaRequest {
	s.AuthToken = &v
	return s
}

func (s *VerifyPrivatecompanyFourmetaRequest) SetProductInstanceId(v string) *VerifyPrivatecompanyFourmetaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *VerifyPrivatecompanyFourmetaRequest) SetInstanceId(v string) *VerifyPrivatecompanyFourmetaRequest {
	s.InstanceId = &v
	return s
}

func (s *VerifyPrivatecompanyFourmetaRequest) SetCompanyFourMetaInfo(v *CompanyFourMetaInfo) *VerifyPrivatecompanyFourmetaRequest {
	s.CompanyFourMetaInfo = v
	return s
}

type VerifyPrivatecompanyFourmetaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 调用返回值。"0"为调用成功。
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 校验是否通过。
	Pass *bool `json:"pass,omitempty" xml:"pass,omitempty"`
	// 错误信息描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s VerifyPrivatecompanyFourmetaResponse) String() string {
	return tea.Prettify(s)
}

func (s VerifyPrivatecompanyFourmetaResponse) GoString() string {
	return s.String()
}

func (s *VerifyPrivatecompanyFourmetaResponse) SetReqMsgId(v string) *VerifyPrivatecompanyFourmetaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *VerifyPrivatecompanyFourmetaResponse) SetResultCode(v string) *VerifyPrivatecompanyFourmetaResponse {
	s.ResultCode = &v
	return s
}

func (s *VerifyPrivatecompanyFourmetaResponse) SetResultMsg(v string) *VerifyPrivatecompanyFourmetaResponse {
	s.ResultMsg = &v
	return s
}

func (s *VerifyPrivatecompanyFourmetaResponse) SetCode(v string) *VerifyPrivatecompanyFourmetaResponse {
	s.Code = &v
	return s
}

func (s *VerifyPrivatecompanyFourmetaResponse) SetPass(v bool) *VerifyPrivatecompanyFourmetaResponse {
	s.Pass = &v
	return s
}

func (s *VerifyPrivatecompanyFourmetaResponse) SetMessage(v string) *VerifyPrivatecompanyFourmetaResponse {
	s.Message = &v
	return s
}

type ApplyPrivatecontractCertRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 私有云实例id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 私有云系统内部生成的id
	UserInnerId *string `json:"user_inner_id,omitempty" xml:"user_inner_id,omitempty" require:"true"`
	// 用户类型,个人PERSON，企业ORG
	UserType *string `json:"user_type,omitempty" xml:"user_type,omitempty" require:"true"`
	// 用户名称, 个人为个人名称，企业为企业名称
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty" require:"true"`
	// 用户证件类型，默认个人,身份证CRED_PSN_CH_IDCARD；
	// 企业,统一社会信用代码,CRED_ORG_USCC
	UserCertType *string `json:"user_cert_type,omitempty" xml:"user_cert_type,omitempty" require:"true"`
	// 证件号码
	UserCertNumber *string `json:"user_cert_number,omitempty" xml:"user_cert_number,omitempty" require:"true"`
}

func (s ApplyPrivatecontractCertRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyPrivatecontractCertRequest) GoString() string {
	return s.String()
}

func (s *ApplyPrivatecontractCertRequest) SetAuthToken(v string) *ApplyPrivatecontractCertRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyPrivatecontractCertRequest) SetProductInstanceId(v string) *ApplyPrivatecontractCertRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyPrivatecontractCertRequest) SetInstanceId(v string) *ApplyPrivatecontractCertRequest {
	s.InstanceId = &v
	return s
}

func (s *ApplyPrivatecontractCertRequest) SetUserInnerId(v string) *ApplyPrivatecontractCertRequest {
	s.UserInnerId = &v
	return s
}

func (s *ApplyPrivatecontractCertRequest) SetUserType(v string) *ApplyPrivatecontractCertRequest {
	s.UserType = &v
	return s
}

func (s *ApplyPrivatecontractCertRequest) SetUserName(v string) *ApplyPrivatecontractCertRequest {
	s.UserName = &v
	return s
}

func (s *ApplyPrivatecontractCertRequest) SetUserCertType(v string) *ApplyPrivatecontractCertRequest {
	s.UserCertType = &v
	return s
}

func (s *ApplyPrivatecontractCertRequest) SetUserCertNumber(v string) *ApplyPrivatecontractCertRequest {
	s.UserCertNumber = &v
	return s
}

type ApplyPrivatecontractCertResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 注册是否成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// 返回code,200成功，其他均为失败
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 返回信息，成功返回success，错误时会返回详细信息。
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 用户的CA证书办法机构
	CertAuthOrg *string `json:"cert_auth_org,omitempty" xml:"cert_auth_org,omitempty"`
	// 用户的CA证书序列号
	CertSerialNumber *string `json:"cert_serial_number,omitempty" xml:"cert_serial_number,omitempty"`
	// 用户证书过期时间
	CertEndTime *int64 `json:"cert_end_time,omitempty" xml:"cert_end_time,omitempty"`
}

func (s ApplyPrivatecontractCertResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyPrivatecontractCertResponse) GoString() string {
	return s.String()
}

func (s *ApplyPrivatecontractCertResponse) SetReqMsgId(v string) *ApplyPrivatecontractCertResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyPrivatecontractCertResponse) SetResultCode(v string) *ApplyPrivatecontractCertResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyPrivatecontractCertResponse) SetResultMsg(v string) *ApplyPrivatecontractCertResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyPrivatecontractCertResponse) SetSuccess(v bool) *ApplyPrivatecontractCertResponse {
	s.Success = &v
	return s
}

func (s *ApplyPrivatecontractCertResponse) SetCode(v string) *ApplyPrivatecontractCertResponse {
	s.Code = &v
	return s
}

func (s *ApplyPrivatecontractCertResponse) SetMessage(v string) *ApplyPrivatecontractCertResponse {
	s.Message = &v
	return s
}

func (s *ApplyPrivatecontractCertResponse) SetCertAuthOrg(v string) *ApplyPrivatecontractCertResponse {
	s.CertAuthOrg = &v
	return s
}

func (s *ApplyPrivatecontractCertResponse) SetCertSerialNumber(v string) *ApplyPrivatecontractCertResponse {
	s.CertSerialNumber = &v
	return s
}

func (s *ApplyPrivatecontractCertResponse) SetCertEndTime(v int64) *ApplyPrivatecontractCertResponse {
	s.CertEndTime = &v
	return s
}

type QueryContractTradestatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 代扣计划外部订单号
	OutTradeNo *string `json:"out_trade_no,omitempty" xml:"out_trade_no,omitempty" require:"true"`
}

func (s QueryContractTradestatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContractTradestatusRequest) GoString() string {
	return s.String()
}

func (s *QueryContractTradestatusRequest) SetAuthToken(v string) *QueryContractTradestatusRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContractTradestatusRequest) SetProductInstanceId(v string) *QueryContractTradestatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryContractTradestatusRequest) SetOutTradeNo(v string) *QueryContractTradestatusRequest {
	s.OutTradeNo = &v
	return s
}

type QueryContractTradestatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 代扣计划的外部订单号
	OutTradeNo *string `json:"out_trade_no,omitempty" xml:"out_trade_no,omitempty"`
	// 最近一次扣款触发时间戳（单位：ms）
	DeductTime *string `json:"deduct_time,omitempty" xml:"deduct_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 创建代扣计划时设置的扣款时间戳（单位：ms）
	PayDate *string `json:"pay_date,omitempty" xml:"pay_date,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 计划扣款金额（单位：分）
	PayMoney *int64 `json:"pay_money,omitempty" xml:"pay_money,omitempty"`
	// 扣款状态
	// PAY_TOBE_TRIGGER 初始未扣款
	// PAY_TRIGGERING 准备扣款状态
	// WAIT_BUYER_PAY 扣款中状态
	// PAY_SYNC_TRADE_SUCCESS 扣款中状态
	// TRADE_REFUNDED 已发生退款
	// TRADE_CLOSED 交易终止（未成功）
	// TRADE_SUCCESS 扣款成功
	// PAY_FAIL 扣款失败
	// TRADE_FINISHED 交易终止（扣款成功）
	// TRADE_CANCEL 代扣取消
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 唯一订单号
	PayIndex *string `json:"pay_index,omitempty" xml:"pay_index,omitempty"`
}

func (s QueryContractTradestatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContractTradestatusResponse) GoString() string {
	return s.String()
}

func (s *QueryContractTradestatusResponse) SetReqMsgId(v string) *QueryContractTradestatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContractTradestatusResponse) SetResultCode(v string) *QueryContractTradestatusResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContractTradestatusResponse) SetResultMsg(v string) *QueryContractTradestatusResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContractTradestatusResponse) SetOutTradeNo(v string) *QueryContractTradestatusResponse {
	s.OutTradeNo = &v
	return s
}

func (s *QueryContractTradestatusResponse) SetDeductTime(v string) *QueryContractTradestatusResponse {
	s.DeductTime = &v
	return s
}

func (s *QueryContractTradestatusResponse) SetPayDate(v string) *QueryContractTradestatusResponse {
	s.PayDate = &v
	return s
}

func (s *QueryContractTradestatusResponse) SetPayMoney(v int64) *QueryContractTradestatusResponse {
	s.PayMoney = &v
	return s
}

func (s *QueryContractTradestatusResponse) SetStatus(v string) *QueryContractTradestatusResponse {
	s.Status = &v
	return s
}

func (s *QueryContractTradestatusResponse) SetPayIndex(v string) *QueryContractTradestatusResponse {
	s.PayIndex = &v
	return s
}

type QueryContractRefundRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 退款ID，用户调用退款接口时传入的自定义第三方id
	RefundId *string `json:"refund_id,omitempty" xml:"refund_id,omitempty" require:"true"`
	// 合同流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty"`
	// 租赁宝租赁订单号
	BclOrderId *string `json:"bcl_order_id,omitempty" xml:"bcl_order_id,omitempty"`
	//
	// 租赁订单对应的租户id
	BclTenantId *string `json:"bcl_tenant_id,omitempty" xml:"bcl_tenant_id,omitempty"`
}

func (s QueryContractRefundRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContractRefundRequest) GoString() string {
	return s.String()
}

func (s *QueryContractRefundRequest) SetAuthToken(v string) *QueryContractRefundRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContractRefundRequest) SetProductInstanceId(v string) *QueryContractRefundRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryContractRefundRequest) SetRefundId(v string) *QueryContractRefundRequest {
	s.RefundId = &v
	return s
}

func (s *QueryContractRefundRequest) SetFlowId(v string) *QueryContractRefundRequest {
	s.FlowId = &v
	return s
}

func (s *QueryContractRefundRequest) SetBclOrderId(v string) *QueryContractRefundRequest {
	s.BclOrderId = &v
	return s
}

func (s *QueryContractRefundRequest) SetBclTenantId(v string) *QueryContractRefundRequest {
	s.BclTenantId = &v
	return s
}

type QueryContractRefundResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 退款id
	RefundId *string `json:"refund_id,omitempty" xml:"refund_id,omitempty"`
	// 退款时间（时间戳，单位：ms）
	RefundTime *string `json:"refund_time,omitempty" xml:"refund_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 本次退款请求的退款金额（单位：分）
	RefundAmount *int64 `json:"refund_amount,omitempty" xml:"refund_amount,omitempty"`
	// 退款状态
	// REFUNDING 退款中
	// SUCCESS 退款成功
	// FAIL 退款失败
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 退款错误信息
	ErrMsg *string `json:"err_msg,omitempty" xml:"err_msg,omitempty"`
}

func (s QueryContractRefundResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContractRefundResponse) GoString() string {
	return s.String()
}

func (s *QueryContractRefundResponse) SetReqMsgId(v string) *QueryContractRefundResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContractRefundResponse) SetResultCode(v string) *QueryContractRefundResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContractRefundResponse) SetResultMsg(v string) *QueryContractRefundResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContractRefundResponse) SetRefundId(v string) *QueryContractRefundResponse {
	s.RefundId = &v
	return s
}

func (s *QueryContractRefundResponse) SetRefundTime(v string) *QueryContractRefundResponse {
	s.RefundTime = &v
	return s
}

func (s *QueryContractRefundResponse) SetRefundAmount(v int64) *QueryContractRefundResponse {
	s.RefundAmount = &v
	return s
}

func (s *QueryContractRefundResponse) SetStatus(v string) *QueryContractRefundResponse {
	s.Status = &v
	return s
}

func (s *QueryContractRefundResponse) SetErrMsg(v string) *QueryContractRefundResponse {
	s.ErrMsg = &v
	return s
}

type GetPrivatecontractSignurlRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 私有云实例id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 签署流程ID
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 签署用户的内部ID
	UserInnerId *string `json:"user_inner_id,omitempty" xml:"user_inner_id,omitempty" require:"true"`
	// 签署平台，默认为H5页面，浏览器打开；也可填写ALIPAY，使用支付宝小程序打开
	SignPlatform *string `json:"sign_platform,omitempty" xml:"sign_platform,omitempty"`
	// 签署流程过期时间
	ExpirationTime *int64 `json:"expiration_time,omitempty" xml:"expiration_time,omitempty" require:"true"`
}

func (s GetPrivatecontractSignurlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPrivatecontractSignurlRequest) GoString() string {
	return s.String()
}

func (s *GetPrivatecontractSignurlRequest) SetAuthToken(v string) *GetPrivatecontractSignurlRequest {
	s.AuthToken = &v
	return s
}

func (s *GetPrivatecontractSignurlRequest) SetProductInstanceId(v string) *GetPrivatecontractSignurlRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetPrivatecontractSignurlRequest) SetInstanceId(v string) *GetPrivatecontractSignurlRequest {
	s.InstanceId = &v
	return s
}

func (s *GetPrivatecontractSignurlRequest) SetFlowId(v string) *GetPrivatecontractSignurlRequest {
	s.FlowId = &v
	return s
}

func (s *GetPrivatecontractSignurlRequest) SetUserInnerId(v string) *GetPrivatecontractSignurlRequest {
	s.UserInnerId = &v
	return s
}

func (s *GetPrivatecontractSignurlRequest) SetSignPlatform(v string) *GetPrivatecontractSignurlRequest {
	s.SignPlatform = &v
	return s
}

func (s *GetPrivatecontractSignurlRequest) SetExpirationTime(v int64) *GetPrivatecontractSignurlRequest {
	s.ExpirationTime = &v
	return s
}

type GetPrivatecontractSignurlResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 流程签署地址
	SignUrl *string `json:"sign_url,omitempty" xml:"sign_url,omitempty"`
	// 返回code,200成功，其他均为失败
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 返回信息，成功返回success，错误时会返回详细信息。
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s GetPrivatecontractSignurlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPrivatecontractSignurlResponse) GoString() string {
	return s.String()
}

func (s *GetPrivatecontractSignurlResponse) SetReqMsgId(v string) *GetPrivatecontractSignurlResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetPrivatecontractSignurlResponse) SetResultCode(v string) *GetPrivatecontractSignurlResponse {
	s.ResultCode = &v
	return s
}

func (s *GetPrivatecontractSignurlResponse) SetResultMsg(v string) *GetPrivatecontractSignurlResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetPrivatecontractSignurlResponse) SetSignUrl(v string) *GetPrivatecontractSignurlResponse {
	s.SignUrl = &v
	return s
}

func (s *GetPrivatecontractSignurlResponse) SetCode(v string) *GetPrivatecontractSignurlResponse {
	s.Code = &v
	return s
}

func (s *GetPrivatecontractSignurlResponse) SetMessage(v string) *GetPrivatecontractSignurlResponse {
	s.Message = &v
	return s
}

type QueryContractMerchantorderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 申请单id，通过twc.notary.contract.merchant.apply或者twc.notary.contract.merchantindirectzft.create接口返回的order_id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
}

func (s QueryContractMerchantorderRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContractMerchantorderRequest) GoString() string {
	return s.String()
}

func (s *QueryContractMerchantorderRequest) SetAuthToken(v string) *QueryContractMerchantorderRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContractMerchantorderRequest) SetProductInstanceId(v string) *QueryContractMerchantorderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryContractMerchantorderRequest) SetOrderId(v string) *QueryContractMerchantorderRequest {
	s.OrderId = &v
	return s
}

type QueryContractMerchantorderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 申请单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
	// 外部商户id
	ExternalId *string `json:"external_id,omitempty" xml:"external_id,omitempty"`
	// 进件时填写的商户名称
	MerchantName *string `json:"merchant_name,omitempty" xml:"merchant_name,omitempty"`
	// 申请总体状态。99:已完结;-1:失败;031:审核中
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 申请单创建时间
	ApplyTime *string `json:"apply_time,omitempty" xml:"apply_time,omitempty"`
	// 风控审核状态。CREATE：已创建待审批、SKIP：跳过风控审批步骤、PASS：风控审核通过、REJECT：风控审批拒绝
	FkAudit *string `json:"fk_audit,omitempty" xml:"fk_audit,omitempty"`
	// 风控审批备注，如有则返回
	FkAuditMemo *string `json:"fk_audit_memo,omitempty" xml:"fk_audit_memo,omitempty"`
	// 客资审核状态。CREATE：已创建待审批、SKIP：跳过客资审批步骤、PASS：客资审核通过、REJECT：客资审批拒绝
	KzAudit *string `json:"kz_audit,omitempty" xml:"kz_audit,omitempty"`
	// 客资审批备注，如有则返回
	KzAuditMemo *string `json:"kz_audit_memo,omitempty" xml:"kz_audit_memo,omitempty"`
	// 二级商户确认状态。CREATE：已发起二级商户确认、SKIP：无需确认、FAIL：签约失败、NOT_CONFIRM：商户未确认、FINISH签约完成
	SubConfirm *string `json:"sub_confirm,omitempty" xml:"sub_confirm,omitempty"`
	// 进件生成的卡编号，在发起结算时可以作为结算账号
	CardAliasNo *string `json:"card_alias_no,omitempty" xml:"card_alias_no,omitempty"`
	// 二级商户id。当总体申请状态status为99时，smid才算进件完成
	Smid *string `json:"smid,omitempty" xml:"smid,omitempty"`
	// 本申请单的请求类型。一般可选值包括ZHIFUTONG_CONSULT（直付通商户预校验）/ZHIFUTONG_CREATE（直付通商户创建）/ZHIFUTONG_MODIFY（直付通商户修改）
	ApplyType *string `json:"apply_type,omitempty" xml:"apply_type,omitempty"`
	// 申请单处理失败时，通过此此段返回具体的失败理由；与kf_audit_memo和kz_audit_memo配合使用
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty"`
}

func (s QueryContractMerchantorderResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContractMerchantorderResponse) GoString() string {
	return s.String()
}

func (s *QueryContractMerchantorderResponse) SetReqMsgId(v string) *QueryContractMerchantorderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContractMerchantorderResponse) SetResultCode(v string) *QueryContractMerchantorderResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContractMerchantorderResponse) SetResultMsg(v string) *QueryContractMerchantorderResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContractMerchantorderResponse) SetOrderId(v string) *QueryContractMerchantorderResponse {
	s.OrderId = &v
	return s
}

func (s *QueryContractMerchantorderResponse) SetExternalId(v string) *QueryContractMerchantorderResponse {
	s.ExternalId = &v
	return s
}

func (s *QueryContractMerchantorderResponse) SetMerchantName(v string) *QueryContractMerchantorderResponse {
	s.MerchantName = &v
	return s
}

func (s *QueryContractMerchantorderResponse) SetStatus(v string) *QueryContractMerchantorderResponse {
	s.Status = &v
	return s
}

func (s *QueryContractMerchantorderResponse) SetApplyTime(v string) *QueryContractMerchantorderResponse {
	s.ApplyTime = &v
	return s
}

func (s *QueryContractMerchantorderResponse) SetFkAudit(v string) *QueryContractMerchantorderResponse {
	s.FkAudit = &v
	return s
}

func (s *QueryContractMerchantorderResponse) SetFkAuditMemo(v string) *QueryContractMerchantorderResponse {
	s.FkAuditMemo = &v
	return s
}

func (s *QueryContractMerchantorderResponse) SetKzAudit(v string) *QueryContractMerchantorderResponse {
	s.KzAudit = &v
	return s
}

func (s *QueryContractMerchantorderResponse) SetKzAuditMemo(v string) *QueryContractMerchantorderResponse {
	s.KzAuditMemo = &v
	return s
}

func (s *QueryContractMerchantorderResponse) SetSubConfirm(v string) *QueryContractMerchantorderResponse {
	s.SubConfirm = &v
	return s
}

func (s *QueryContractMerchantorderResponse) SetCardAliasNo(v string) *QueryContractMerchantorderResponse {
	s.CardAliasNo = &v
	return s
}

func (s *QueryContractMerchantorderResponse) SetSmid(v string) *QueryContractMerchantorderResponse {
	s.Smid = &v
	return s
}

func (s *QueryContractMerchantorderResponse) SetApplyType(v string) *QueryContractMerchantorderResponse {
	s.ApplyType = &v
	return s
}

func (s *QueryContractMerchantorderResponse) SetReason(v string) *QueryContractMerchantorderResponse {
	s.Reason = &v
	return s
}

type UpdateContractMerchantRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 内容和商户进件信息类似，唯一区别在于此接口biz_content不要传external_id，改为传之前进件获取到的商户id信息smid，具体可见示例。
	BizContent *string `json:"biz_content,omitempty" xml:"biz_content,omitempty" require:"true"`
}

func (s UpdateContractMerchantRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateContractMerchantRequest) GoString() string {
	return s.String()
}

func (s *UpdateContractMerchantRequest) SetAuthToken(v string) *UpdateContractMerchantRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateContractMerchantRequest) SetProductInstanceId(v string) *UpdateContractMerchantRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateContractMerchantRequest) SetBizContent(v string) *UpdateContractMerchantRequest {
	s.BizContent = &v
	return s
}

type UpdateContractMerchantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 修改进件信息会产生修改订单，此字段标识修改订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
}

func (s UpdateContractMerchantResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateContractMerchantResponse) GoString() string {
	return s.String()
}

func (s *UpdateContractMerchantResponse) SetReqMsgId(v string) *UpdateContractMerchantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateContractMerchantResponse) SetResultCode(v string) *UpdateContractMerchantResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateContractMerchantResponse) SetResultMsg(v string) *UpdateContractMerchantResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateContractMerchantResponse) SetOrderId(v string) *UpdateContractMerchantResponse {
	s.OrderId = &v
	return s
}

type BindContractMerchantRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 商户ID
	Smid *string `json:"smid,omitempty" xml:"smid,omitempty" require:"true"`
	// 商户证件号
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 代理用户id，传null默认挂接平台方，不允许传空字符串
	AgentAccountId *string `json:"agent_account_id,omitempty" xml:"agent_account_id,omitempty"`
}

func (s BindContractMerchantRequest) String() string {
	return tea.Prettify(s)
}

func (s BindContractMerchantRequest) GoString() string {
	return s.String()
}

func (s *BindContractMerchantRequest) SetAuthToken(v string) *BindContractMerchantRequest {
	s.AuthToken = &v
	return s
}

func (s *BindContractMerchantRequest) SetProductInstanceId(v string) *BindContractMerchantRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *BindContractMerchantRequest) SetSmid(v string) *BindContractMerchantRequest {
	s.Smid = &v
	return s
}

func (s *BindContractMerchantRequest) SetCertNo(v string) *BindContractMerchantRequest {
	s.CertNo = &v
	return s
}

func (s *BindContractMerchantRequest) SetAgentAccountId(v string) *BindContractMerchantRequest {
	s.AgentAccountId = &v
	return s
}

type BindContractMerchantResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否挂接成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s BindContractMerchantResponse) String() string {
	return tea.Prettify(s)
}

func (s BindContractMerchantResponse) GoString() string {
	return s.String()
}

func (s *BindContractMerchantResponse) SetReqMsgId(v string) *BindContractMerchantResponse {
	s.ReqMsgId = &v
	return s
}

func (s *BindContractMerchantResponse) SetResultCode(v string) *BindContractMerchantResponse {
	s.ResultCode = &v
	return s
}

func (s *BindContractMerchantResponse) SetResultMsg(v string) *BindContractMerchantResponse {
	s.ResultMsg = &v
	return s
}

func (s *BindContractMerchantResponse) SetSuccess(v bool) *BindContractMerchantResponse {
	s.Success = &v
	return s
}

type InitPrivatecontractIntanceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 私有化服务地址（可不上传，后续通过更新实例信息的接口进行服务地址填充）
	ServiceUrl *string `json:"service_url,omitempty" xml:"service_url,omitempty"`
	// 开通服务的用户租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
}

func (s InitPrivatecontractIntanceRequest) String() string {
	return tea.Prettify(s)
}

func (s InitPrivatecontractIntanceRequest) GoString() string {
	return s.String()
}

func (s *InitPrivatecontractIntanceRequest) SetAuthToken(v string) *InitPrivatecontractIntanceRequest {
	s.AuthToken = &v
	return s
}

func (s *InitPrivatecontractIntanceRequest) SetProductInstanceId(v string) *InitPrivatecontractIntanceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *InitPrivatecontractIntanceRequest) SetServiceUrl(v string) *InitPrivatecontractIntanceRequest {
	s.ServiceUrl = &v
	return s
}

func (s *InitPrivatecontractIntanceRequest) SetTenantId(v string) *InitPrivatecontractIntanceRequest {
	s.TenantId = &v
	return s
}

type InitPrivatecontractIntanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 私有化服务实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
	// 签名私钥的base64格式字符串
	PrivateKey *string `json:"private_key,omitempty" xml:"private_key,omitempty"`
	// 验签公钥的base64格式字符串
	PublicKey *string `json:"public_key,omitempty" xml:"public_key,omitempty"`
	// 回调使用的签名私钥
	PrivateKeyCallback *string `json:"private_key_callback,omitempty" xml:"private_key_callback,omitempty"`
	// 回调使用的验签公钥
	PublicKeyCallback *string `json:"public_key_callback,omitempty" xml:"public_key_callback,omitempty"`
}

func (s InitPrivatecontractIntanceResponse) String() string {
	return tea.Prettify(s)
}

func (s InitPrivatecontractIntanceResponse) GoString() string {
	return s.String()
}

func (s *InitPrivatecontractIntanceResponse) SetReqMsgId(v string) *InitPrivatecontractIntanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InitPrivatecontractIntanceResponse) SetResultCode(v string) *InitPrivatecontractIntanceResponse {
	s.ResultCode = &v
	return s
}

func (s *InitPrivatecontractIntanceResponse) SetResultMsg(v string) *InitPrivatecontractIntanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *InitPrivatecontractIntanceResponse) SetInstanceId(v string) *InitPrivatecontractIntanceResponse {
	s.InstanceId = &v
	return s
}

func (s *InitPrivatecontractIntanceResponse) SetPrivateKey(v string) *InitPrivatecontractIntanceResponse {
	s.PrivateKey = &v
	return s
}

func (s *InitPrivatecontractIntanceResponse) SetPublicKey(v string) *InitPrivatecontractIntanceResponse {
	s.PublicKey = &v
	return s
}

func (s *InitPrivatecontractIntanceResponse) SetPrivateKeyCallback(v string) *InitPrivatecontractIntanceResponse {
	s.PrivateKeyCallback = &v
	return s
}

func (s *InitPrivatecontractIntanceResponse) SetPublicKeyCallback(v string) *InitPrivatecontractIntanceResponse {
	s.PublicKeyCallback = &v
	return s
}

type UpdatePrivatecontractIntanceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 私有化服务地址
	ServiceUrl *string `json:"service_url,omitempty" xml:"service_url,omitempty" require:"true"`
	// 实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s UpdatePrivatecontractIntanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrivatecontractIntanceRequest) GoString() string {
	return s.String()
}

func (s *UpdatePrivatecontractIntanceRequest) SetAuthToken(v string) *UpdatePrivatecontractIntanceRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdatePrivatecontractIntanceRequest) SetProductInstanceId(v string) *UpdatePrivatecontractIntanceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdatePrivatecontractIntanceRequest) SetServiceUrl(v string) *UpdatePrivatecontractIntanceRequest {
	s.ServiceUrl = &v
	return s
}

func (s *UpdatePrivatecontractIntanceRequest) SetInstanceId(v string) *UpdatePrivatecontractIntanceRequest {
	s.InstanceId = &v
	return s
}

type UpdatePrivatecontractIntanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s UpdatePrivatecontractIntanceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrivatecontractIntanceResponse) GoString() string {
	return s.String()
}

func (s *UpdatePrivatecontractIntanceResponse) SetReqMsgId(v string) *UpdatePrivatecontractIntanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdatePrivatecontractIntanceResponse) SetResultCode(v string) *UpdatePrivatecontractIntanceResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdatePrivatecontractIntanceResponse) SetResultMsg(v string) *UpdatePrivatecontractIntanceResponse {
	s.ResultMsg = &v
	return s
}

type UpdatePrivatecontractCertRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 私有云实例id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 私有云系统内部生成的用户id
	//
	UserInnerId *string `json:"user_inner_id,omitempty" xml:"user_inner_id,omitempty" require:"true"`
	// 用户类型,个人PERSON，企业ORG
	UserType *string `json:"user_type,omitempty" xml:"user_type,omitempty" require:"true"`
	// 用户名称, 个人为个人名称，企业为企业名称
	//
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty" require:"true"`
	// 用户证件类型，默认个人,身份证CRED_PSN_CH_IDCARD； 企业,统一社会信用代码,CRED_ORG_USCC
	//
	UserCertType *string `json:"user_cert_type,omitempty" xml:"user_cert_type,omitempty" require:"true"`
	// 证件号码
	UserCertNumber *string `json:"user_cert_number,omitempty" xml:"user_cert_number,omitempty" require:"true"`
	// 是否需要更新机构印模
	UpdateOrgSeal *bool `json:"update_org_seal,omitempty" xml:"update_org_seal,omitempty" require:"true"`
}

func (s UpdatePrivatecontractCertRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrivatecontractCertRequest) GoString() string {
	return s.String()
}

func (s *UpdatePrivatecontractCertRequest) SetAuthToken(v string) *UpdatePrivatecontractCertRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdatePrivatecontractCertRequest) SetProductInstanceId(v string) *UpdatePrivatecontractCertRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdatePrivatecontractCertRequest) SetInstanceId(v string) *UpdatePrivatecontractCertRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdatePrivatecontractCertRequest) SetUserInnerId(v string) *UpdatePrivatecontractCertRequest {
	s.UserInnerId = &v
	return s
}

func (s *UpdatePrivatecontractCertRequest) SetUserType(v string) *UpdatePrivatecontractCertRequest {
	s.UserType = &v
	return s
}

func (s *UpdatePrivatecontractCertRequest) SetUserName(v string) *UpdatePrivatecontractCertRequest {
	s.UserName = &v
	return s
}

func (s *UpdatePrivatecontractCertRequest) SetUserCertType(v string) *UpdatePrivatecontractCertRequest {
	s.UserCertType = &v
	return s
}

func (s *UpdatePrivatecontractCertRequest) SetUserCertNumber(v string) *UpdatePrivatecontractCertRequest {
	s.UserCertNumber = &v
	return s
}

func (s *UpdatePrivatecontractCertRequest) SetUpdateOrgSeal(v bool) *UpdatePrivatecontractCertRequest {
	s.UpdateOrgSeal = &v
	return s
}

type UpdatePrivatecontractCertResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 更新是否成功
	//
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// 返回code,0成功，其他均为失败
	//
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 返回信息，成功返回success，错误时会返回详细信息。
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 用户的CA证书办法机构
	CertAuthOrg *string `json:"cert_auth_org,omitempty" xml:"cert_auth_org,omitempty"`
	// 用户的CA证书序列号
	CertSerialNumber *string `json:"cert_serial_number,omitempty" xml:"cert_serial_number,omitempty"`
	// 用户证书过期时间
	CertEndTime *int64 `json:"cert_end_time,omitempty" xml:"cert_end_time,omitempty"`
}

func (s UpdatePrivatecontractCertResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdatePrivatecontractCertResponse) GoString() string {
	return s.String()
}

func (s *UpdatePrivatecontractCertResponse) SetReqMsgId(v string) *UpdatePrivatecontractCertResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdatePrivatecontractCertResponse) SetResultCode(v string) *UpdatePrivatecontractCertResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdatePrivatecontractCertResponse) SetResultMsg(v string) *UpdatePrivatecontractCertResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdatePrivatecontractCertResponse) SetSuccess(v bool) *UpdatePrivatecontractCertResponse {
	s.Success = &v
	return s
}

func (s *UpdatePrivatecontractCertResponse) SetCode(v string) *UpdatePrivatecontractCertResponse {
	s.Code = &v
	return s
}

func (s *UpdatePrivatecontractCertResponse) SetMessage(v string) *UpdatePrivatecontractCertResponse {
	s.Message = &v
	return s
}

func (s *UpdatePrivatecontractCertResponse) SetCertAuthOrg(v string) *UpdatePrivatecontractCertResponse {
	s.CertAuthOrg = &v
	return s
}

func (s *UpdatePrivatecontractCertResponse) SetCertSerialNumber(v string) *UpdatePrivatecontractCertResponse {
	s.CertSerialNumber = &v
	return s
}

func (s *UpdatePrivatecontractCertResponse) SetCertEndTime(v int64) *UpdatePrivatecontractCertResponse {
	s.CertEndTime = &v
	return s
}

type ResetContractMerchantapplyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 进件或进件修改申请订单id，从进件申请接口的返回字段中获取
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 进件类型,1 创建、2 修改、3 申请创建、4 申请修改
	ApplyType *int64 `json:"apply_type,omitempty" xml:"apply_type,omitempty" require:"true"`
}

func (s ResetContractMerchantapplyRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetContractMerchantapplyRequest) GoString() string {
	return s.String()
}

func (s *ResetContractMerchantapplyRequest) SetAuthToken(v string) *ResetContractMerchantapplyRequest {
	s.AuthToken = &v
	return s
}

func (s *ResetContractMerchantapplyRequest) SetProductInstanceId(v string) *ResetContractMerchantapplyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ResetContractMerchantapplyRequest) SetOrderId(v string) *ResetContractMerchantapplyRequest {
	s.OrderId = &v
	return s
}

func (s *ResetContractMerchantapplyRequest) SetApplyType(v int64) *ResetContractMerchantapplyRequest {
	s.ApplyType = &v
	return s
}

type ResetContractMerchantapplyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ResetContractMerchantapplyResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetContractMerchantapplyResponse) GoString() string {
	return s.String()
}

func (s *ResetContractMerchantapplyResponse) SetReqMsgId(v string) *ResetContractMerchantapplyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ResetContractMerchantapplyResponse) SetResultCode(v string) *ResetContractMerchantapplyResponse {
	s.ResultCode = &v
	return s
}

func (s *ResetContractMerchantapplyResponse) SetResultMsg(v string) *ResetContractMerchantapplyResponse {
	s.ResultMsg = &v
	return s
}

func (s *ResetContractMerchantapplyResponse) SetSuccess(v bool) *ResetContractMerchantapplyResponse {
	s.Success = &v
	return s
}

type CheckPrivatecontractProvisionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 私有云合同服务实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
}

func (s CheckPrivatecontractProvisionRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckPrivatecontractProvisionRequest) GoString() string {
	return s.String()
}

func (s *CheckPrivatecontractProvisionRequest) SetAuthToken(v string) *CheckPrivatecontractProvisionRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckPrivatecontractProvisionRequest) SetProductInstanceId(v string) *CheckPrivatecontractProvisionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CheckPrivatecontractProvisionRequest) SetInstanceId(v string) *CheckPrivatecontractProvisionRequest {
	s.InstanceId = &v
	return s
}

type CheckPrivatecontractProvisionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 服务开通状态，0未找到，1已开通，2停服，3已释放
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s CheckPrivatecontractProvisionResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckPrivatecontractProvisionResponse) GoString() string {
	return s.String()
}

func (s *CheckPrivatecontractProvisionResponse) SetReqMsgId(v string) *CheckPrivatecontractProvisionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckPrivatecontractProvisionResponse) SetResultCode(v string) *CheckPrivatecontractProvisionResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckPrivatecontractProvisionResponse) SetResultMsg(v string) *CheckPrivatecontractProvisionResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckPrivatecontractProvisionResponse) SetStatus(v int64) *CheckPrivatecontractProvisionResponse {
	s.Status = &v
	return s
}

type PushPrivatecontractGaugeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 私有云合同服务实例ID
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty" require:"true"`
	// 计量数量
	Amount *int64 `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 本次上报的唯一订单幂等ID，用流程ID和文件ID拼接生成
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
}

func (s PushPrivatecontractGaugeRequest) String() string {
	return tea.Prettify(s)
}

func (s PushPrivatecontractGaugeRequest) GoString() string {
	return s.String()
}

func (s *PushPrivatecontractGaugeRequest) SetAuthToken(v string) *PushPrivatecontractGaugeRequest {
	s.AuthToken = &v
	return s
}

func (s *PushPrivatecontractGaugeRequest) SetProductInstanceId(v string) *PushPrivatecontractGaugeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PushPrivatecontractGaugeRequest) SetInstanceId(v string) *PushPrivatecontractGaugeRequest {
	s.InstanceId = &v
	return s
}

func (s *PushPrivatecontractGaugeRequest) SetAmount(v int64) *PushPrivatecontractGaugeRequest {
	s.Amount = &v
	return s
}

func (s *PushPrivatecontractGaugeRequest) SetOrderId(v string) *PushPrivatecontractGaugeRequest {
	s.OrderId = &v
	return s
}

type PushPrivatecontractGaugeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否上报成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s PushPrivatecontractGaugeResponse) String() string {
	return tea.Prettify(s)
}

func (s PushPrivatecontractGaugeResponse) GoString() string {
	return s.String()
}

func (s *PushPrivatecontractGaugeResponse) SetReqMsgId(v string) *PushPrivatecontractGaugeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PushPrivatecontractGaugeResponse) SetResultCode(v string) *PushPrivatecontractGaugeResponse {
	s.ResultCode = &v
	return s
}

func (s *PushPrivatecontractGaugeResponse) SetResultMsg(v string) *PushPrivatecontractGaugeResponse {
	s.ResultMsg = &v
	return s
}

func (s *PushPrivatecontractGaugeResponse) SetSuccess(v bool) *PushPrivatecontractGaugeResponse {
	s.Success = &v
	return s
}

type CheckContractCourtdeductRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 付款账户人姓名
	PayerName *string `json:"payer_name,omitempty" xml:"payer_name,omitempty" require:"true"`
	// 付款人银行账户
	PayerAccount *string `json:"payer_account,omitempty" xml:"payer_account,omitempty" require:"true"`
	// 银行类型：icbc(工行)
	BankType *string `json:"bank_type,omitempty" xml:"bank_type,omitempty" require:"true"`
}

func (s CheckContractCourtdeductRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckContractCourtdeductRequest) GoString() string {
	return s.String()
}

func (s *CheckContractCourtdeductRequest) SetAuthToken(v string) *CheckContractCourtdeductRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckContractCourtdeductRequest) SetProductInstanceId(v string) *CheckContractCourtdeductRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CheckContractCourtdeductRequest) SetPayerName(v string) *CheckContractCourtdeductRequest {
	s.PayerName = &v
	return s
}

func (s *CheckContractCourtdeductRequest) SetPayerAccount(v string) *CheckContractCourtdeductRequest {
	s.PayerAccount = &v
	return s
}

func (s *CheckContractCourtdeductRequest) SetBankType(v string) *CheckContractCourtdeductRequest {
	s.BankType = &v
	return s
}

type CheckContractCourtdeductResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否预校验成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// 预校验详细信息
	CheckMsg *string `json:"check_msg,omitempty" xml:"check_msg,omitempty"`
}

func (s CheckContractCourtdeductResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckContractCourtdeductResponse) GoString() string {
	return s.String()
}

func (s *CheckContractCourtdeductResponse) SetReqMsgId(v string) *CheckContractCourtdeductResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckContractCourtdeductResponse) SetResultCode(v string) *CheckContractCourtdeductResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckContractCourtdeductResponse) SetResultMsg(v string) *CheckContractCourtdeductResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckContractCourtdeductResponse) SetSuccess(v bool) *CheckContractCourtdeductResponse {
	s.Success = &v
	return s
}

func (s *CheckContractCourtdeductResponse) SetCheckMsg(v string) *CheckContractCourtdeductResponse {
	s.CheckMsg = &v
	return s
}

type CreateContractCourtdeductRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 客户自定义案件id
	CaseId *string `json:"case_id,omitempty" xml:"case_id,omitempty" require:"true"`
	// 案件名称
	CaseName *string `json:"case_name,omitempty" xml:"case_name,omitempty" require:"true"`
	// 收款方人姓名
	PayeeName *string `json:"payee_name,omitempty" xml:"payee_name,omitempty" require:"true"`
	// 收款方人银行账户
	PayeeAccount *string `json:"payee_account,omitempty" xml:"payee_account,omitempty" require:"true"`
	// 收款方银行类型
	PayeeBankType *string `json:"payee_bank_type,omitempty" xml:"payee_bank_type,omitempty" require:"true"`
	// 付款方人姓名
	PayerName *string `json:"payer_name,omitempty" xml:"payer_name,omitempty" require:"true"`
	// 付款方银行账户
	PayerAccount *string `json:"payer_account,omitempty" xml:"payer_account,omitempty" require:"true"`
	// 付款方银行类型，例如：icbc（工行）
	PayerBankType *string `json:"payer_bank_type,omitempty" xml:"payer_bank_type,omitempty" require:"true"`
	// 扣款计划详情列表
	PaymentDetailList []*PaymentDetail `json:"payment_detail_list,omitempty" xml:"payment_detail_list,omitempty" require:"true" type:"Repeated"`
}

func (s CreateContractCourtdeductRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractCourtdeductRequest) GoString() string {
	return s.String()
}

func (s *CreateContractCourtdeductRequest) SetAuthToken(v string) *CreateContractCourtdeductRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractCourtdeductRequest) SetProductInstanceId(v string) *CreateContractCourtdeductRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateContractCourtdeductRequest) SetFlowId(v string) *CreateContractCourtdeductRequest {
	s.FlowId = &v
	return s
}

func (s *CreateContractCourtdeductRequest) SetCaseId(v string) *CreateContractCourtdeductRequest {
	s.CaseId = &v
	return s
}

func (s *CreateContractCourtdeductRequest) SetCaseName(v string) *CreateContractCourtdeductRequest {
	s.CaseName = &v
	return s
}

func (s *CreateContractCourtdeductRequest) SetPayeeName(v string) *CreateContractCourtdeductRequest {
	s.PayeeName = &v
	return s
}

func (s *CreateContractCourtdeductRequest) SetPayeeAccount(v string) *CreateContractCourtdeductRequest {
	s.PayeeAccount = &v
	return s
}

func (s *CreateContractCourtdeductRequest) SetPayeeBankType(v string) *CreateContractCourtdeductRequest {
	s.PayeeBankType = &v
	return s
}

func (s *CreateContractCourtdeductRequest) SetPayerName(v string) *CreateContractCourtdeductRequest {
	s.PayerName = &v
	return s
}

func (s *CreateContractCourtdeductRequest) SetPayerAccount(v string) *CreateContractCourtdeductRequest {
	s.PayerAccount = &v
	return s
}

func (s *CreateContractCourtdeductRequest) SetPayerBankType(v string) *CreateContractCourtdeductRequest {
	s.PayerBankType = &v
	return s
}

func (s *CreateContractCourtdeductRequest) SetPaymentDetailList(v []*PaymentDetail) *CreateContractCourtdeductRequest {
	s.PaymentDetailList = v
	return s
}

type CreateContractCourtdeductResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 给工行上传的调解书文件名
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty"`
	// 存证txHash，存证核验时需要
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
	// 存证原文
	NotaryContent *string `json:"notary_content,omitempty" xml:"notary_content,omitempty"`
	// 存证原文hash
	NotaryContentHash *string `json:"notary_content_hash,omitempty" xml:"notary_content_hash,omitempty"`
}

func (s CreateContractCourtdeductResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractCourtdeductResponse) GoString() string {
	return s.String()
}

func (s *CreateContractCourtdeductResponse) SetReqMsgId(v string) *CreateContractCourtdeductResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractCourtdeductResponse) SetResultCode(v string) *CreateContractCourtdeductResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractCourtdeductResponse) SetResultMsg(v string) *CreateContractCourtdeductResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractCourtdeductResponse) SetFileName(v string) *CreateContractCourtdeductResponse {
	s.FileName = &v
	return s
}

func (s *CreateContractCourtdeductResponse) SetTxHash(v string) *CreateContractCourtdeductResponse {
	s.TxHash = &v
	return s
}

func (s *CreateContractCourtdeductResponse) SetNotaryContent(v string) *CreateContractCourtdeductResponse {
	s.NotaryContent = &v
	return s
}

func (s *CreateContractCourtdeductResponse) SetNotaryContentHash(v string) *CreateContractCourtdeductResponse {
	s.NotaryContentHash = &v
	return s
}

type ExecContractCourtdeductRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 付款银行卡类型，例如：icbc（工行）
	BankType *string `json:"bank_type,omitempty" xml:"bank_type,omitempty" require:"true"`
	// 自定义交易id
	BizTradeId *string `json:"biz_trade_id,omitempty" xml:"biz_trade_id,omitempty" require:"true"`
}

func (s ExecContractCourtdeductRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecContractCourtdeductRequest) GoString() string {
	return s.String()
}

func (s *ExecContractCourtdeductRequest) SetAuthToken(v string) *ExecContractCourtdeductRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecContractCourtdeductRequest) SetProductInstanceId(v string) *ExecContractCourtdeductRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecContractCourtdeductRequest) SetBankType(v string) *ExecContractCourtdeductRequest {
	s.BankType = &v
	return s
}

func (s *ExecContractCourtdeductRequest) SetBizTradeId(v string) *ExecContractCourtdeductRequest {
	s.BizTradeId = &v
	return s
}

type ExecContractCourtdeductResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否执行成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// 扣款金额，单位：分
	PayMoney *int64 `json:"pay_money,omitempty" xml:"pay_money,omitempty"`
	// 扣款详情信息
	PayDetailMsg *string `json:"pay_detail_msg,omitempty" xml:"pay_detail_msg,omitempty"`
}

func (s ExecContractCourtdeductResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecContractCourtdeductResponse) GoString() string {
	return s.String()
}

func (s *ExecContractCourtdeductResponse) SetReqMsgId(v string) *ExecContractCourtdeductResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecContractCourtdeductResponse) SetResultCode(v string) *ExecContractCourtdeductResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecContractCourtdeductResponse) SetResultMsg(v string) *ExecContractCourtdeductResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecContractCourtdeductResponse) SetSuccess(v bool) *ExecContractCourtdeductResponse {
	s.Success = &v
	return s
}

func (s *ExecContractCourtdeductResponse) SetPayMoney(v int64) *ExecContractCourtdeductResponse {
	s.PayMoney = &v
	return s
}

func (s *ExecContractCourtdeductResponse) SetPayDetailMsg(v string) *ExecContractCourtdeductResponse {
	s.PayDetailMsg = &v
	return s
}

type GetContractTextsignRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 平台方注册的用户ID
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 待签名的原文本
	OriginText *string `json:"origin_text,omitempty" xml:"origin_text,omitempty" require:"true"`
}

func (s GetContractTextsignRequest) String() string {
	return tea.Prettify(s)
}

func (s GetContractTextsignRequest) GoString() string {
	return s.String()
}

func (s *GetContractTextsignRequest) SetAuthToken(v string) *GetContractTextsignRequest {
	s.AuthToken = &v
	return s
}

func (s *GetContractTextsignRequest) SetProductInstanceId(v string) *GetContractTextsignRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetContractTextsignRequest) SetAccountId(v string) *GetContractTextsignRequest {
	s.AccountId = &v
	return s
}

func (s *GetContractTextsignRequest) SetOriginText(v string) *GetContractTextsignRequest {
	s.OriginText = &v
	return s
}

type GetContractTextsignResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务结果码, 成功: 0
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务结果信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 签名结果值
	SignResult *string `json:"sign_result,omitempty" xml:"sign_result,omitempty"`
	// 签名流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty"`
}

func (s GetContractTextsignResponse) String() string {
	return tea.Prettify(s)
}

func (s GetContractTextsignResponse) GoString() string {
	return s.String()
}

func (s *GetContractTextsignResponse) SetReqMsgId(v string) *GetContractTextsignResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetContractTextsignResponse) SetResultCode(v string) *GetContractTextsignResponse {
	s.ResultCode = &v
	return s
}

func (s *GetContractTextsignResponse) SetResultMsg(v string) *GetContractTextsignResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetContractTextsignResponse) SetCode(v int64) *GetContractTextsignResponse {
	s.Code = &v
	return s
}

func (s *GetContractTextsignResponse) SetMessage(v string) *GetContractTextsignResponse {
	s.Message = &v
	return s
}

func (s *GetContractTextsignResponse) SetSignResult(v string) *GetContractTextsignResponse {
	s.SignResult = &v
	return s
}

func (s *GetContractTextsignResponse) SetFlowId(v string) *GetContractTextsignResponse {
	s.FlowId = &v
	return s
}

type VerifyContractTextsignRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 注册的平台方用户id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 签名原文本
	OriginText *string `json:"origin_text,omitempty" xml:"origin_text,omitempty" require:"true"`
	// 文本签名值
	SignResult *string `json:"sign_result,omitempty" xml:"sign_result,omitempty" require:"true"`
}

func (s VerifyContractTextsignRequest) String() string {
	return tea.Prettify(s)
}

func (s VerifyContractTextsignRequest) GoString() string {
	return s.String()
}

func (s *VerifyContractTextsignRequest) SetAuthToken(v string) *VerifyContractTextsignRequest {
	s.AuthToken = &v
	return s
}

func (s *VerifyContractTextsignRequest) SetProductInstanceId(v string) *VerifyContractTextsignRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *VerifyContractTextsignRequest) SetAccountId(v string) *VerifyContractTextsignRequest {
	s.AccountId = &v
	return s
}

func (s *VerifyContractTextsignRequest) SetOriginText(v string) *VerifyContractTextsignRequest {
	s.OriginText = &v
	return s
}

func (s *VerifyContractTextsignRequest) SetSignResult(v string) *VerifyContractTextsignRequest {
	s.SignResult = &v
	return s
}

type VerifyContractTextsignResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务结果码, 成功0
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 结果信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 签署信息, 包含签名与证书
	SignInfo *ContractTextSignVerifySignInfo `json:"sign_info,omitempty" xml:"sign_info,omitempty"`
}

func (s VerifyContractTextsignResponse) String() string {
	return tea.Prettify(s)
}

func (s VerifyContractTextsignResponse) GoString() string {
	return s.String()
}

func (s *VerifyContractTextsignResponse) SetReqMsgId(v string) *VerifyContractTextsignResponse {
	s.ReqMsgId = &v
	return s
}

func (s *VerifyContractTextsignResponse) SetResultCode(v string) *VerifyContractTextsignResponse {
	s.ResultCode = &v
	return s
}

func (s *VerifyContractTextsignResponse) SetResultMsg(v string) *VerifyContractTextsignResponse {
	s.ResultMsg = &v
	return s
}

func (s *VerifyContractTextsignResponse) SetCode(v int64) *VerifyContractTextsignResponse {
	s.Code = &v
	return s
}

func (s *VerifyContractTextsignResponse) SetMessage(v string) *VerifyContractTextsignResponse {
	s.Message = &v
	return s
}

func (s *VerifyContractTextsignResponse) SetSignInfo(v *ContractTextSignVerifySignInfo) *VerifyContractTextsignResponse {
	s.SignInfo = v
	return s
}

type VerifyContractDocsignRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 文件id
	FileId *string `json:"file_id,omitempty" xml:"file_id,omitempty" require:"true"`
	// 平台方用户注册id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
}

func (s VerifyContractDocsignRequest) String() string {
	return tea.Prettify(s)
}

func (s VerifyContractDocsignRequest) GoString() string {
	return s.String()
}

func (s *VerifyContractDocsignRequest) SetAuthToken(v string) *VerifyContractDocsignRequest {
	s.AuthToken = &v
	return s
}

func (s *VerifyContractDocsignRequest) SetProductInstanceId(v string) *VerifyContractDocsignRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *VerifyContractDocsignRequest) SetFileId(v string) *VerifyContractDocsignRequest {
	s.FileId = &v
	return s
}

func (s *VerifyContractDocsignRequest) SetAccountId(v string) *VerifyContractDocsignRequest {
	s.AccountId = &v
	return s
}

type VerifyContractDocsignResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果码
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 结果信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 文件签署信息
	SignInfos []*ContractDocSignVerifyInfo `json:"sign_infos,omitempty" xml:"sign_infos,omitempty" type:"Repeated"`
}

func (s VerifyContractDocsignResponse) String() string {
	return tea.Prettify(s)
}

func (s VerifyContractDocsignResponse) GoString() string {
	return s.String()
}

func (s *VerifyContractDocsignResponse) SetReqMsgId(v string) *VerifyContractDocsignResponse {
	s.ReqMsgId = &v
	return s
}

func (s *VerifyContractDocsignResponse) SetResultCode(v string) *VerifyContractDocsignResponse {
	s.ResultCode = &v
	return s
}

func (s *VerifyContractDocsignResponse) SetResultMsg(v string) *VerifyContractDocsignResponse {
	s.ResultMsg = &v
	return s
}

func (s *VerifyContractDocsignResponse) SetCode(v int64) *VerifyContractDocsignResponse {
	s.Code = &v
	return s
}

func (s *VerifyContractDocsignResponse) SetMessage(v string) *VerifyContractDocsignResponse {
	s.Message = &v
	return s
}

func (s *VerifyContractDocsignResponse) SetSignInfos(v []*ContractDocSignVerifyInfo) *VerifyContractDocsignResponse {
	s.SignInfos = v
	return s
}

type DeleteContractSignfieldRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 签署流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 删除签署区id列表
	DeleteSignfields []*string `json:"delete_signfields,omitempty" xml:"delete_signfields,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteContractSignfieldRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteContractSignfieldRequest) GoString() string {
	return s.String()
}

func (s *DeleteContractSignfieldRequest) SetAuthToken(v string) *DeleteContractSignfieldRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteContractSignfieldRequest) SetProductInstanceId(v string) *DeleteContractSignfieldRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteContractSignfieldRequest) SetFlowId(v string) *DeleteContractSignfieldRequest {
	s.FlowId = &v
	return s
}

func (s *DeleteContractSignfieldRequest) SetDeleteSignfields(v []*string) *DeleteContractSignfieldRequest {
	s.DeleteSignfields = v
	return s
}

type DeleteContractSignfieldResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否操作成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// 结果码(数字), 成功0
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 结果备注（具体错误解释）
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s DeleteContractSignfieldResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteContractSignfieldResponse) GoString() string {
	return s.String()
}

func (s *DeleteContractSignfieldResponse) SetReqMsgId(v string) *DeleteContractSignfieldResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteContractSignfieldResponse) SetResultCode(v string) *DeleteContractSignfieldResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteContractSignfieldResponse) SetResultMsg(v string) *DeleteContractSignfieldResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteContractSignfieldResponse) SetSuccess(v bool) *DeleteContractSignfieldResponse {
	s.Success = &v
	return s
}

func (s *DeleteContractSignfieldResponse) SetCode(v int64) *DeleteContractSignfieldResponse {
	s.Code = &v
	return s
}

func (s *DeleteContractSignfieldResponse) SetMessage(v string) *DeleteContractSignfieldResponse {
	s.Message = &v
	return s
}

type CreateContractEncrypteduserRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 注册机构用户。类型为机构时(userType = "ORGANIZATION")，该字段必填。
	Organization *ContractOrganizationApplication `json:"organization,omitempty" xml:"organization,omitempty"`
	// 注册为个人用户时，该字段表示个人用户的相关信息；
	// 注册为机构用户时，该字段表示对应机构经办人的个人信息。
	User *ContractAccountApplication `json:"user,omitempty" xml:"user,omitempty" require:"true"`
	// 用户类型
	// 个人：PERSON；
	// 机构：ORGANIZATION
	UserType *string `json:"user_type,omitempty" xml:"user_type,omitempty" require:"true"`
}

func (s CreateContractEncrypteduserRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractEncrypteduserRequest) GoString() string {
	return s.String()
}

func (s *CreateContractEncrypteduserRequest) SetAuthToken(v string) *CreateContractEncrypteduserRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractEncrypteduserRequest) SetProductInstanceId(v string) *CreateContractEncrypteduserRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateContractEncrypteduserRequest) SetOrganization(v *ContractOrganizationApplication) *CreateContractEncrypteduserRequest {
	s.Organization = v
	return s
}

func (s *CreateContractEncrypteduserRequest) SetUser(v *ContractAccountApplication) *CreateContractEncrypteduserRequest {
	s.User = v
	return s
}

func (s *CreateContractEncrypteduserRequest) SetUserType(v string) *CreateContractEncrypteduserRequest {
	s.UserType = &v
	return s
}

type CreateContractEncrypteduserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 机构账号
	OrganizationId *string `json:"organization_id,omitempty" xml:"organization_id,omitempty"`
	// 用户类型为个人时返回用户账号；
	// 用户类型为机构时返回经办人账号
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s CreateContractEncrypteduserResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractEncrypteduserResponse) GoString() string {
	return s.String()
}

func (s *CreateContractEncrypteduserResponse) SetReqMsgId(v string) *CreateContractEncrypteduserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractEncrypteduserResponse) SetResultCode(v string) *CreateContractEncrypteduserResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractEncrypteduserResponse) SetResultMsg(v string) *CreateContractEncrypteduserResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractEncrypteduserResponse) SetOrganizationId(v string) *CreateContractEncrypteduserResponse {
	s.OrganizationId = &v
	return s
}

func (s *CreateContractEncrypteduserResponse) SetUserId(v string) *CreateContractEncrypteduserResponse {
	s.UserId = &v
	return s
}

func (s *CreateContractEncrypteduserResponse) SetCode(v int64) *CreateContractEncrypteduserResponse {
	s.Code = &v
	return s
}

func (s *CreateContractEncrypteduserResponse) SetMessage(v string) *CreateContractEncrypteduserResponse {
	s.Message = &v
	return s
}

type SetContractTenantkeyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 被通信秘钥加密后的解密密钥字符串。
	FileDecryptKey *string `json:"file_decrypt_key,omitempty" xml:"file_decrypt_key,omitempty" require:"true"`
	// 使用base64编码后的RSA公钥；用于解密decryptKey以及加密入参
	SignalPubKeyEncoded *string `json:"signal_pub_key_encoded,omitempty" xml:"signal_pub_key_encoded,omitempty"`
}

func (s SetContractTenantkeyRequest) String() string {
	return tea.Prettify(s)
}

func (s SetContractTenantkeyRequest) GoString() string {
	return s.String()
}

func (s *SetContractTenantkeyRequest) SetAuthToken(v string) *SetContractTenantkeyRequest {
	s.AuthToken = &v
	return s
}

func (s *SetContractTenantkeyRequest) SetProductInstanceId(v string) *SetContractTenantkeyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetContractTenantkeyRequest) SetFileDecryptKey(v string) *SetContractTenantkeyRequest {
	s.FileDecryptKey = &v
	return s
}

func (s *SetContractTenantkeyRequest) SetSignalPubKeyEncoded(v string) *SetContractTenantkeyRequest {
	s.SignalPubKeyEncoded = &v
	return s
}

type SetContractTenantkeyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s SetContractTenantkeyResponse) String() string {
	return tea.Prettify(s)
}

func (s SetContractTenantkeyResponse) GoString() string {
	return s.String()
}

func (s *SetContractTenantkeyResponse) SetReqMsgId(v string) *SetContractTenantkeyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetContractTenantkeyResponse) SetResultCode(v string) *SetContractTenantkeyResponse {
	s.ResultCode = &v
	return s
}

func (s *SetContractTenantkeyResponse) SetResultMsg(v string) *SetContractTenantkeyResponse {
	s.ResultMsg = &v
	return s
}

func (s *SetContractTenantkeyResponse) SetSuccess(v bool) *SetContractTenantkeyResponse {
	s.Success = &v
	return s
}

type GetContractEncryptedfileuploadurlRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 包含后缀的文件全名, 合同.pdf
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty" require:"true"`
	// 是否已加密, 默认否
	Encrypted *bool `json:"encrypted,omitempty" xml:"encrypted,omitempty"`
	// 明文文件的md5码，用于完整性校验
	Md5 *string `json:"md5,omitempty" xml:"md5,omitempty" require:"true"`
}

func (s GetContractEncryptedfileuploadurlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetContractEncryptedfileuploadurlRequest) GoString() string {
	return s.String()
}

func (s *GetContractEncryptedfileuploadurlRequest) SetAuthToken(v string) *GetContractEncryptedfileuploadurlRequest {
	s.AuthToken = &v
	return s
}

func (s *GetContractEncryptedfileuploadurlRequest) SetProductInstanceId(v string) *GetContractEncryptedfileuploadurlRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetContractEncryptedfileuploadurlRequest) SetFileName(v string) *GetContractEncryptedfileuploadurlRequest {
	s.FileName = &v
	return s
}

func (s *GetContractEncryptedfileuploadurlRequest) SetEncrypted(v bool) *GetContractEncryptedfileuploadurlRequest {
	s.Encrypted = &v
	return s
}

func (s *GetContractEncryptedfileuploadurlRequest) SetMd5(v string) *GetContractEncryptedfileuploadurlRequest {
	s.Md5 = &v
	return s
}

type GetContractEncryptedfileuploadurlResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 上传的原始文件记录id
	FileLogId *string `json:"file_log_id,omitempty" xml:"file_log_id,omitempty"`
	// 文件上传链接
	FileUploadUrl *string `json:"file_upload_url,omitempty" xml:"file_upload_url,omitempty"`
	// 上传链接过期时间. yyyy-MM-dd HH:mm:ss
	ExpiredTime *string `json:"expired_time,omitempty" xml:"expired_time,omitempty"`
}

func (s GetContractEncryptedfileuploadurlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetContractEncryptedfileuploadurlResponse) GoString() string {
	return s.String()
}

func (s *GetContractEncryptedfileuploadurlResponse) SetReqMsgId(v string) *GetContractEncryptedfileuploadurlResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetContractEncryptedfileuploadurlResponse) SetResultCode(v string) *GetContractEncryptedfileuploadurlResponse {
	s.ResultCode = &v
	return s
}

func (s *GetContractEncryptedfileuploadurlResponse) SetResultMsg(v string) *GetContractEncryptedfileuploadurlResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetContractEncryptedfileuploadurlResponse) SetFileLogId(v string) *GetContractEncryptedfileuploadurlResponse {
	s.FileLogId = &v
	return s
}

func (s *GetContractEncryptedfileuploadurlResponse) SetFileUploadUrl(v string) *GetContractEncryptedfileuploadurlResponse {
	s.FileUploadUrl = &v
	return s
}

func (s *GetContractEncryptedfileuploadurlResponse) SetExpiredTime(v string) *GetContractEncryptedfileuploadurlResponse {
	s.ExpiredTime = &v
	return s
}

type CreateContractTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 任务类型枚举值
	//   文件解密上传任务，FILE_DECRYPT_ESIGN_UPLOAD
	TaskType *string `json:"task_type,omitempty" xml:"task_type,omitempty" require:"true"`
	// 文件内容文件解密上传任务时，为原始文件id
	TaskContent *string `json:"task_content,omitempty" xml:"task_content,omitempty" require:"true"`
}

func (s CreateContractTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateContractTaskRequest) SetAuthToken(v string) *CreateContractTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractTaskRequest) SetProductInstanceId(v string) *CreateContractTaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateContractTaskRequest) SetTaskType(v string) *CreateContractTaskRequest {
	s.TaskType = &v
	return s
}

func (s *CreateContractTaskRequest) SetTaskContent(v string) *CreateContractTaskRequest {
	s.TaskContent = &v
	return s
}

type CreateContractTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建的任务id
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
}

func (s CreateContractTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateContractTaskResponse) SetReqMsgId(v string) *CreateContractTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractTaskResponse) SetResultCode(v string) *CreateContractTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractTaskResponse) SetResultMsg(v string) *CreateContractTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractTaskResponse) SetTaskId(v string) *CreateContractTaskResponse {
	s.TaskId = &v
	return s
}

type QueryContractTaskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 创建任务时，返回的任务id
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty" require:"true"`
	// 任务类型
	TaskType *string `json:"task_type,omitempty" xml:"task_type,omitempty" require:"true"`
}

func (s QueryContractTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContractTaskRequest) GoString() string {
	return s.String()
}

func (s *QueryContractTaskRequest) SetAuthToken(v string) *QueryContractTaskRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContractTaskRequest) SetProductInstanceId(v string) *QueryContractTaskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryContractTaskRequest) SetTaskId(v string) *QueryContractTaskRequest {
	s.TaskId = &v
	return s
}

func (s *QueryContractTaskRequest) SetTaskType(v string) *QueryContractTaskRequest {
	s.TaskType = &v
	return s
}

type QueryContractTaskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 任务类型,FILE_DECRYPT_ESIGN_UPLOAD
	TaskType *string `json:"task_type,omitempty" xml:"task_type,omitempty"`
	// 任务结果
	//  INIT,初始化
	//  DOING，处理中
	//  FAIL，失败
	//  SUCCESS，成功
	TaskStatus *string `json:"task_status,omitempty" xml:"task_status,omitempty"`
	// 当任务为FILE_DECRYPT_ESIGN_UPLOAD时，为处理成功后的文件id
	TaskResult *string `json:"task_result,omitempty" xml:"task_result,omitempty"`
	// 失败原因
	FailReason *string `json:"fail_reason,omitempty" xml:"fail_reason,omitempty"`
}

func (s QueryContractTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContractTaskResponse) GoString() string {
	return s.String()
}

func (s *QueryContractTaskResponse) SetReqMsgId(v string) *QueryContractTaskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContractTaskResponse) SetResultCode(v string) *QueryContractTaskResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContractTaskResponse) SetResultMsg(v string) *QueryContractTaskResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContractTaskResponse) SetTaskType(v string) *QueryContractTaskResponse {
	s.TaskType = &v
	return s
}

func (s *QueryContractTaskResponse) SetTaskStatus(v string) *QueryContractTaskResponse {
	s.TaskStatus = &v
	return s
}

func (s *QueryContractTaskResponse) SetTaskResult(v string) *QueryContractTaskResponse {
	s.TaskResult = &v
	return s
}

func (s *QueryContractTaskResponse) SetFailReason(v string) *QueryContractTaskResponse {
	s.FailReason = &v
	return s
}

type ExecContractPayRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 合同流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 每期代扣的唯一编号
	PayIndex *string `json:"pay_index,omitempty" xml:"pay_index,omitempty" require:"true"`
}

func (s ExecContractPayRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecContractPayRequest) GoString() string {
	return s.String()
}

func (s *ExecContractPayRequest) SetAuthToken(v string) *ExecContractPayRequest {
	s.AuthToken = &v
	return s
}

func (s *ExecContractPayRequest) SetProductInstanceId(v string) *ExecContractPayRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExecContractPayRequest) SetFlowId(v string) *ExecContractPayRequest {
	s.FlowId = &v
	return s
}

func (s *ExecContractPayRequest) SetPayIndex(v string) *ExecContractPayRequest {
	s.PayIndex = &v
	return s
}

type ExecContractPayResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否触发成功
	TriggerSuccess *bool `json:"trigger_success,omitempty" xml:"trigger_success,omitempty"`
	// 结果code
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 结果描述
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty"`
}

func (s ExecContractPayResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecContractPayResponse) GoString() string {
	return s.String()
}

func (s *ExecContractPayResponse) SetReqMsgId(v string) *ExecContractPayResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExecContractPayResponse) SetResultCode(v string) *ExecContractPayResponse {
	s.ResultCode = &v
	return s
}

func (s *ExecContractPayResponse) SetResultMsg(v string) *ExecContractPayResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExecContractPayResponse) SetTriggerSuccess(v bool) *ExecContractPayResponse {
	s.TriggerSuccess = &v
	return s
}

func (s *ExecContractPayResponse) SetCode(v string) *ExecContractPayResponse {
	s.Code = &v
	return s
}

func (s *ExecContractPayResponse) SetMsg(v string) *ExecContractPayResponse {
	s.Msg = &v
	return s
}

type UnbindContractPayRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户id，平台方用户创建时生成的id。用户解约失败时该字段会通过解约申请消息透传给商家。
	UserTuid *string `json:"user_tuid,omitempty" xml:"user_tuid,omitempty" require:"true"`
	// 外部代扣协议号，用户解约失败时该字段会通过解约申请消息透传给商家。
	ExternalAgreementNo *string `json:"external_agreement_no,omitempty" xml:"external_agreement_no,omitempty" require:"true"`
	// 是否允许解约
	AllowUnsign *bool `json:"allow_unsign,omitempty" xml:"allow_unsign,omitempty" require:"true"`
}

func (s UnbindContractPayRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindContractPayRequest) GoString() string {
	return s.String()
}

func (s *UnbindContractPayRequest) SetAuthToken(v string) *UnbindContractPayRequest {
	s.AuthToken = &v
	return s
}

func (s *UnbindContractPayRequest) SetProductInstanceId(v string) *UnbindContractPayRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UnbindContractPayRequest) SetUserTuid(v string) *UnbindContractPayRequest {
	s.UserTuid = &v
	return s
}

func (s *UnbindContractPayRequest) SetExternalAgreementNo(v string) *UnbindContractPayRequest {
	s.ExternalAgreementNo = &v
	return s
}

func (s *UnbindContractPayRequest) SetAllowUnsign(v bool) *UnbindContractPayRequest {
	s.AllowUnsign = &v
	return s
}

type UnbindContractPayResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否解约成功
	UnsignSuccess *bool `json:"unsign_success,omitempty" xml:"unsign_success,omitempty"`
	// 业务处理结果码
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 业务结果描述
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty"`
}

func (s UnbindContractPayResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindContractPayResponse) GoString() string {
	return s.String()
}

func (s *UnbindContractPayResponse) SetReqMsgId(v string) *UnbindContractPayResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UnbindContractPayResponse) SetResultCode(v string) *UnbindContractPayResponse {
	s.ResultCode = &v
	return s
}

func (s *UnbindContractPayResponse) SetResultMsg(v string) *UnbindContractPayResponse {
	s.ResultMsg = &v
	return s
}

func (s *UnbindContractPayResponse) SetUnsignSuccess(v bool) *UnbindContractPayResponse {
	s.UnsignSuccess = &v
	return s
}

func (s *UnbindContractPayResponse) SetCode(v string) *UnbindContractPayResponse {
	s.Code = &v
	return s
}

func (s *UnbindContractPayResponse) SetMsg(v string) *UnbindContractPayResponse {
	s.Msg = &v
	return s
}

type QueryContractComplainRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 投诉单号
	ComplainEventId *string `json:"complain_event_id,omitempty" xml:"complain_event_id,omitempty" require:"true" maxLength:"64"`
}

func (s QueryContractComplainRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContractComplainRequest) GoString() string {
	return s.String()
}

func (s *QueryContractComplainRequest) SetAuthToken(v string) *QueryContractComplainRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContractComplainRequest) SetProductInstanceId(v string) *QueryContractComplainRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryContractComplainRequest) SetComplainEventId(v string) *QueryContractComplainRequest {
	s.ComplainEventId = &v
	return s
}

type QueryContractComplainResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 投诉单号
	ComplainEventId *string `json:"complain_event_id,omitempty" xml:"complain_event_id,omitempty"`
	// 投诉单状态
	// 商家处理中：MERCHANT_PROCESSING
	// 商家已反馈：MERCHANT_FEEDBACKED
	// 投诉已完结：FINISHED
	// 投诉已撤销：CANCELLED
	// 平台处理中：PLATFORM_PROCESSING
	// 平台处理完结：PLATFORM_FINISH
	// 系统关闭：CLOSED
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 支付宝交易号
	TradeNo *string `json:"trade_no,omitempty" xml:"trade_no,omitempty"`
	// 商家订单号
	MerchantOrderNo *string `json:"merchant_order_no,omitempty" xml:"merchant_order_no,omitempty"`
	// 投诉单创建时间
	GmtCreate *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	// 投诉单修改时间
	GmtModified *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
	// 投诉单完结时间
	GmtFinished *string `json:"gmt_finished,omitempty" xml:"gmt_finished,omitempty"`
	// 用户投诉诉求
	LeafCategoryName *string `json:"leaf_category_name,omitempty" xml:"leaf_category_name,omitempty"`
	// 用户投诉原因
	ComplainReason *string `json:"complain_reason,omitempty" xml:"complain_reason,omitempty"`
	// 用户投诉内容
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// 投诉图片
	Images []*string `json:"images,omitempty" xml:"images,omitempty" type:"Repeated"`
	// 投诉人电话号码
	PhoneNo *string `json:"phone_no,omitempty" xml:"phone_no,omitempty"`
	// 交易金额，单位元
	TradeAmount *string `json:"trade_amount,omitempty" xml:"trade_amount,omitempty"`
	// 用户与商家之间的协商记录
	ReplyDetailInfos []*ReplayDetailInfo `json:"reply_detail_infos,omitempty" xml:"reply_detail_infos,omitempty" type:"Repeated"`
}

func (s QueryContractComplainResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContractComplainResponse) GoString() string {
	return s.String()
}

func (s *QueryContractComplainResponse) SetReqMsgId(v string) *QueryContractComplainResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContractComplainResponse) SetResultCode(v string) *QueryContractComplainResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContractComplainResponse) SetResultMsg(v string) *QueryContractComplainResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContractComplainResponse) SetComplainEventId(v string) *QueryContractComplainResponse {
	s.ComplainEventId = &v
	return s
}

func (s *QueryContractComplainResponse) SetStatus(v string) *QueryContractComplainResponse {
	s.Status = &v
	return s
}

func (s *QueryContractComplainResponse) SetTradeNo(v string) *QueryContractComplainResponse {
	s.TradeNo = &v
	return s
}

func (s *QueryContractComplainResponse) SetMerchantOrderNo(v string) *QueryContractComplainResponse {
	s.MerchantOrderNo = &v
	return s
}

func (s *QueryContractComplainResponse) SetGmtCreate(v string) *QueryContractComplainResponse {
	s.GmtCreate = &v
	return s
}

func (s *QueryContractComplainResponse) SetGmtModified(v string) *QueryContractComplainResponse {
	s.GmtModified = &v
	return s
}

func (s *QueryContractComplainResponse) SetGmtFinished(v string) *QueryContractComplainResponse {
	s.GmtFinished = &v
	return s
}

func (s *QueryContractComplainResponse) SetLeafCategoryName(v string) *QueryContractComplainResponse {
	s.LeafCategoryName = &v
	return s
}

func (s *QueryContractComplainResponse) SetComplainReason(v string) *QueryContractComplainResponse {
	s.ComplainReason = &v
	return s
}

func (s *QueryContractComplainResponse) SetContent(v string) *QueryContractComplainResponse {
	s.Content = &v
	return s
}

func (s *QueryContractComplainResponse) SetImages(v []*string) *QueryContractComplainResponse {
	s.Images = v
	return s
}

func (s *QueryContractComplainResponse) SetPhoneNo(v string) *QueryContractComplainResponse {
	s.PhoneNo = &v
	return s
}

func (s *QueryContractComplainResponse) SetTradeAmount(v string) *QueryContractComplainResponse {
	s.TradeAmount = &v
	return s
}

func (s *QueryContractComplainResponse) SetReplyDetailInfos(v []*ReplayDetailInfo) *QueryContractComplainResponse {
	s.ReplyDetailInfos = v
	return s
}

type SendContractComplainfeedbackRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 支付宝侧投诉单号
	ComplainEventId *string `json:"complain_event_id,omitempty" xml:"complain_event_id,omitempty" require:"true" maxLength:"64"`
	// 反馈类目ID
	// 00:使用体验保障金退款；
	// 02:通过其他方式退款;
	// 03:已发货;
	// 04:其他;
	// 05:已完成售后服务;
	// 06:非我方责任范围；
	FeedbackCode *string `json:"feedback_code,omitempty" xml:"feedback_code,omitempty" require:"true" maxLength:"32"`
	// 反馈内容，字数不超过200个字
	FeedbackContent *string `json:"feedback_content,omitempty" xml:"feedback_content,omitempty" require:"true" maxLength:"200"`
	// 商家处理投诉时反馈凭证的图片id，多个逗号隔开（图片id可以通过"商户上传处理图片"接口获取）
	FeedbackImages *string `json:"feedback_images,omitempty" xml:"feedback_images,omitempty"`
	// 处理投诉人，字数不超过6个字
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty" maxLength:"32"`
}

func (s SendContractComplainfeedbackRequest) String() string {
	return tea.Prettify(s)
}

func (s SendContractComplainfeedbackRequest) GoString() string {
	return s.String()
}

func (s *SendContractComplainfeedbackRequest) SetAuthToken(v string) *SendContractComplainfeedbackRequest {
	s.AuthToken = &v
	return s
}

func (s *SendContractComplainfeedbackRequest) SetProductInstanceId(v string) *SendContractComplainfeedbackRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SendContractComplainfeedbackRequest) SetComplainEventId(v string) *SendContractComplainfeedbackRequest {
	s.ComplainEventId = &v
	return s
}

func (s *SendContractComplainfeedbackRequest) SetFeedbackCode(v string) *SendContractComplainfeedbackRequest {
	s.FeedbackCode = &v
	return s
}

func (s *SendContractComplainfeedbackRequest) SetFeedbackContent(v string) *SendContractComplainfeedbackRequest {
	s.FeedbackContent = &v
	return s
}

func (s *SendContractComplainfeedbackRequest) SetFeedbackImages(v string) *SendContractComplainfeedbackRequest {
	s.FeedbackImages = &v
	return s
}

func (s *SendContractComplainfeedbackRequest) SetOperator(v string) *SendContractComplainfeedbackRequest {
	s.Operator = &v
	return s
}

type SendContractComplainfeedbackResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否反馈成功
	SubmitSuccess *bool `json:"submit_success,omitempty" xml:"submit_success,omitempty"`
	// 业务处理结果码
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 业务结果描述
	Msg *string `json:"msg,omitempty" xml:"msg,omitempty"`
}

func (s SendContractComplainfeedbackResponse) String() string {
	return tea.Prettify(s)
}

func (s SendContractComplainfeedbackResponse) GoString() string {
	return s.String()
}

func (s *SendContractComplainfeedbackResponse) SetReqMsgId(v string) *SendContractComplainfeedbackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SendContractComplainfeedbackResponse) SetResultCode(v string) *SendContractComplainfeedbackResponse {
	s.ResultCode = &v
	return s
}

func (s *SendContractComplainfeedbackResponse) SetResultMsg(v string) *SendContractComplainfeedbackResponse {
	s.ResultMsg = &v
	return s
}

func (s *SendContractComplainfeedbackResponse) SetSubmitSuccess(v bool) *SendContractComplainfeedbackResponse {
	s.SubmitSuccess = &v
	return s
}

func (s *SendContractComplainfeedbackResponse) SetCode(v string) *SendContractComplainfeedbackResponse {
	s.Code = &v
	return s
}

func (s *SendContractComplainfeedbackResponse) SetMsg(v string) *SendContractComplainfeedbackResponse {
	s.Msg = &v
	return s
}

type UploadContractComplainimageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 图片名称，支持后缀格式：jpg、jpeg、png
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty" require:"true" maxLength:"32"`
	// 图片二进制字节流
	Content *string `json:"content,omitempty" xml:"content,omitempty" require:"true"`
}

func (s UploadContractComplainimageRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadContractComplainimageRequest) GoString() string {
	return s.String()
}

func (s *UploadContractComplainimageRequest) SetAuthToken(v string) *UploadContractComplainimageRequest {
	s.AuthToken = &v
	return s
}

func (s *UploadContractComplainimageRequest) SetProductInstanceId(v string) *UploadContractComplainimageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UploadContractComplainimageRequest) SetFileName(v string) *UploadContractComplainimageRequest {
	s.FileName = &v
	return s
}

func (s *UploadContractComplainimageRequest) SetContent(v string) *UploadContractComplainimageRequest {
	s.Content = &v
	return s
}

type UploadContractComplainimageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 图片id
	ImageId *string `json:"image_id,omitempty" xml:"image_id,omitempty"`
}

func (s UploadContractComplainimageResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadContractComplainimageResponse) GoString() string {
	return s.String()
}

func (s *UploadContractComplainimageResponse) SetReqMsgId(v string) *UploadContractComplainimageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UploadContractComplainimageResponse) SetResultCode(v string) *UploadContractComplainimageResponse {
	s.ResultCode = &v
	return s
}

func (s *UploadContractComplainimageResponse) SetResultMsg(v string) *UploadContractComplainimageResponse {
	s.ResultMsg = &v
	return s
}

func (s *UploadContractComplainimageResponse) SetImageId(v string) *UploadContractComplainimageResponse {
	s.ImageId = &v
	return s
}

type QueryContractComplaineventidsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 客诉单创建开始日期
	ComplainStartDate *string `json:"complain_start_date,omitempty" xml:"complain_start_date,omitempty" require:"true"`
	// 客诉单创建开始日期
	ComplainEndDate *string `json:"complain_end_date,omitempty" xml:"complain_end_date,omitempty" require:"true"`
}

func (s QueryContractComplaineventidsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContractComplaineventidsRequest) GoString() string {
	return s.String()
}

func (s *QueryContractComplaineventidsRequest) SetAuthToken(v string) *QueryContractComplaineventidsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContractComplaineventidsRequest) SetProductInstanceId(v string) *QueryContractComplaineventidsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryContractComplaineventidsRequest) SetComplainStartDate(v string) *QueryContractComplaineventidsRequest {
	s.ComplainStartDate = &v
	return s
}

func (s *QueryContractComplaineventidsRequest) SetComplainEndDate(v string) *QueryContractComplaineventidsRequest {
	s.ComplainEndDate = &v
	return s
}

type QueryContractComplaineventidsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 投诉单id列表
	ComplainEventIds []*string `json:"complain_event_ids,omitempty" xml:"complain_event_ids,omitempty" type:"Repeated"`
}

func (s QueryContractComplaineventidsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContractComplaineventidsResponse) GoString() string {
	return s.String()
}

func (s *QueryContractComplaineventidsResponse) SetReqMsgId(v string) *QueryContractComplaineventidsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContractComplaineventidsResponse) SetResultCode(v string) *QueryContractComplaineventidsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContractComplaineventidsResponse) SetResultMsg(v string) *QueryContractComplaineventidsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContractComplaineventidsResponse) SetComplainEventIds(v []*string) *QueryContractComplaineventidsResponse {
	s.ComplainEventIds = v
	return s
}

type PushDigitalcontentUsageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 内容id
	ContentId *string `json:"content_id,omitempty" xml:"content_id,omitempty" require:"true"`
	// 设备id
	DeviceId *string `json:"device_id,omitempty" xml:"device_id,omitempty" require:"true"`
	// 使用量，按次使用需要为数字
	Usage *string `json:"usage,omitempty" xml:"usage,omitempty" require:"true"`
	// 客户端幂等token
	ClientToken *string `json:"client_token,omitempty" xml:"client_token,omitempty" require:"true"`
}

func (s PushDigitalcontentUsageRequest) String() string {
	return tea.Prettify(s)
}

func (s PushDigitalcontentUsageRequest) GoString() string {
	return s.String()
}

func (s *PushDigitalcontentUsageRequest) SetAuthToken(v string) *PushDigitalcontentUsageRequest {
	s.AuthToken = &v
	return s
}

func (s *PushDigitalcontentUsageRequest) SetProductInstanceId(v string) *PushDigitalcontentUsageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PushDigitalcontentUsageRequest) SetContentId(v string) *PushDigitalcontentUsageRequest {
	s.ContentId = &v
	return s
}

func (s *PushDigitalcontentUsageRequest) SetDeviceId(v string) *PushDigitalcontentUsageRequest {
	s.DeviceId = &v
	return s
}

func (s *PushDigitalcontentUsageRequest) SetUsage(v string) *PushDigitalcontentUsageRequest {
	s.Usage = &v
	return s
}

func (s *PushDigitalcontentUsageRequest) SetClientToken(v string) *PushDigitalcontentUsageRequest {
	s.ClientToken = &v
	return s
}

type PushDigitalcontentUsageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 上报成功返回的订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
}

func (s PushDigitalcontentUsageResponse) String() string {
	return tea.Prettify(s)
}

func (s PushDigitalcontentUsageResponse) GoString() string {
	return s.String()
}

func (s *PushDigitalcontentUsageResponse) SetReqMsgId(v string) *PushDigitalcontentUsageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PushDigitalcontentUsageResponse) SetResultCode(v string) *PushDigitalcontentUsageResponse {
	s.ResultCode = &v
	return s
}

func (s *PushDigitalcontentUsageResponse) SetResultMsg(v string) *PushDigitalcontentUsageResponse {
	s.ResultMsg = &v
	return s
}

func (s *PushDigitalcontentUsageResponse) SetOrderId(v string) *PushDigitalcontentUsageResponse {
	s.OrderId = &v
	return s
}

type ApplyDigitalcontentOrderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 内容id
	ContentId *string `json:"content_id,omitempty" xml:"content_id,omitempty" require:"true"`
	// 设备id
	DeviceId *string `json:"device_id,omitempty" xml:"device_id,omitempty" require:"true"`
}

func (s ApplyDigitalcontentOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyDigitalcontentOrderRequest) GoString() string {
	return s.String()
}

func (s *ApplyDigitalcontentOrderRequest) SetAuthToken(v string) *ApplyDigitalcontentOrderRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyDigitalcontentOrderRequest) SetProductInstanceId(v string) *ApplyDigitalcontentOrderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyDigitalcontentOrderRequest) SetContentId(v string) *ApplyDigitalcontentOrderRequest {
	s.ContentId = &v
	return s
}

func (s *ApplyDigitalcontentOrderRequest) SetDeviceId(v string) *ApplyDigitalcontentOrderRequest {
	s.DeviceId = &v
	return s
}

type ApplyDigitalcontentOrderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 生成的订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
}

func (s ApplyDigitalcontentOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyDigitalcontentOrderResponse) GoString() string {
	return s.String()
}

func (s *ApplyDigitalcontentOrderResponse) SetReqMsgId(v string) *ApplyDigitalcontentOrderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyDigitalcontentOrderResponse) SetResultCode(v string) *ApplyDigitalcontentOrderResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyDigitalcontentOrderResponse) SetResultMsg(v string) *ApplyDigitalcontentOrderResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyDigitalcontentOrderResponse) SetOrderId(v string) *ApplyDigitalcontentOrderResponse {
	s.OrderId = &v
	return s
}

type SubmitDigitalcontentOrderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 支付id
	PaymentId *string `json:"payment_id,omitempty" xml:"payment_id,omitempty"`
	// 付款方式
	// ●AliPay，支付宝
	// ● WeChatPay，微信支付
	// ● Bank，银行卡支付
	// ● Other，其他
	PaymentType *string `json:"payment_type,omitempty" xml:"payment_type,omitempty"`
	// 按次使用时需要为整数
	Usage *string `json:"usage,omitempty" xml:"usage,omitempty" require:"true"`
	// 用作幂等，防重调用
	ClientToken *string `json:"client_token,omitempty" xml:"client_token,omitempty" require:"true"`
}

func (s SubmitDigitalcontentOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitDigitalcontentOrderRequest) GoString() string {
	return s.String()
}

func (s *SubmitDigitalcontentOrderRequest) SetAuthToken(v string) *SubmitDigitalcontentOrderRequest {
	s.AuthToken = &v
	return s
}

func (s *SubmitDigitalcontentOrderRequest) SetProductInstanceId(v string) *SubmitDigitalcontentOrderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SubmitDigitalcontentOrderRequest) SetOrderId(v string) *SubmitDigitalcontentOrderRequest {
	s.OrderId = &v
	return s
}

func (s *SubmitDigitalcontentOrderRequest) SetPaymentId(v string) *SubmitDigitalcontentOrderRequest {
	s.PaymentId = &v
	return s
}

func (s *SubmitDigitalcontentOrderRequest) SetPaymentType(v string) *SubmitDigitalcontentOrderRequest {
	s.PaymentType = &v
	return s
}

func (s *SubmitDigitalcontentOrderRequest) SetUsage(v string) *SubmitDigitalcontentOrderRequest {
	s.Usage = &v
	return s
}

func (s *SubmitDigitalcontentOrderRequest) SetClientToken(v string) *SubmitDigitalcontentOrderRequest {
	s.ClientToken = &v
	return s
}

type SubmitDigitalcontentOrderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 传递给apk使用的token
	Token *string `json:"token,omitempty" xml:"token,omitempty"`
}

func (s SubmitDigitalcontentOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitDigitalcontentOrderResponse) GoString() string {
	return s.String()
}

func (s *SubmitDigitalcontentOrderResponse) SetReqMsgId(v string) *SubmitDigitalcontentOrderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SubmitDigitalcontentOrderResponse) SetResultCode(v string) *SubmitDigitalcontentOrderResponse {
	s.ResultCode = &v
	return s
}

func (s *SubmitDigitalcontentOrderResponse) SetResultMsg(v string) *SubmitDigitalcontentOrderResponse {
	s.ResultMsg = &v
	return s
}

func (s *SubmitDigitalcontentOrderResponse) SetToken(v string) *SubmitDigitalcontentOrderResponse {
	s.Token = &v
	return s
}

type SyncInnerTransRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 事务id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 存证事务id
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
	// 存证的用户id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 业务id
	BizId *int64 `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 子业务id
	SubBizId *string `json:"sub_biz_id,omitempty" xml:"sub_biz_id,omitempty"`
	// 存证主体的json字符串
	Customer *string `json:"customer,omitempty" xml:"customer,omitempty"`
	// 存证初始化时间
	RegisterTime *int64 `json:"register_time,omitempty" xml:"register_time,omitempty" require:"true"`
	// 到期时间
	ExpireTime *int64 `json:"expire_time,omitempty" xml:"expire_time,omitempty"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 是否有效
	Active *bool `json:"active,omitempty" xml:"active,omitempty"`
	// 交易hash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s SyncInnerTransRequest) String() string {
	return tea.Prettify(s)
}

func (s SyncInnerTransRequest) GoString() string {
	return s.String()
}

func (s *SyncInnerTransRequest) SetAuthToken(v string) *SyncInnerTransRequest {
	s.AuthToken = &v
	return s
}

func (s *SyncInnerTransRequest) SetProductInstanceId(v string) *SyncInnerTransRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SyncInnerTransRequest) SetId(v int64) *SyncInnerTransRequest {
	s.Id = &v
	return s
}

func (s *SyncInnerTransRequest) SetTransactionId(v string) *SyncInnerTransRequest {
	s.TransactionId = &v
	return s
}

func (s *SyncInnerTransRequest) SetAccountId(v string) *SyncInnerTransRequest {
	s.AccountId = &v
	return s
}

func (s *SyncInnerTransRequest) SetBizId(v int64) *SyncInnerTransRequest {
	s.BizId = &v
	return s
}

func (s *SyncInnerTransRequest) SetSubBizId(v string) *SyncInnerTransRequest {
	s.SubBizId = &v
	return s
}

func (s *SyncInnerTransRequest) SetCustomer(v string) *SyncInnerTransRequest {
	s.Customer = &v
	return s
}

func (s *SyncInnerTransRequest) SetRegisterTime(v int64) *SyncInnerTransRequest {
	s.RegisterTime = &v
	return s
}

func (s *SyncInnerTransRequest) SetExpireTime(v int64) *SyncInnerTransRequest {
	s.ExpireTime = &v
	return s
}

func (s *SyncInnerTransRequest) SetProperties(v string) *SyncInnerTransRequest {
	s.Properties = &v
	return s
}

func (s *SyncInnerTransRequest) SetActive(v bool) *SyncInnerTransRequest {
	s.Active = &v
	return s
}

func (s *SyncInnerTransRequest) SetTxHash(v string) *SyncInnerTransRequest {
	s.TxHash = &v
	return s
}

type SyncInnerTransResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SyncInnerTransResponse) String() string {
	return tea.Prettify(s)
}

func (s SyncInnerTransResponse) GoString() string {
	return s.String()
}

func (s *SyncInnerTransResponse) SetReqMsgId(v string) *SyncInnerTransResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SyncInnerTransResponse) SetResultCode(v string) *SyncInnerTransResponse {
	s.ResultCode = &v
	return s
}

func (s *SyncInnerTransResponse) SetResultMsg(v string) *SyncInnerTransResponse {
	s.ResultMsg = &v
	return s
}

type SyncInnerNotaryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// DB的存证id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 事务id
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
	// 交易hash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
	// 阶段
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 内容hash
	ContentHash *string `json:"content_hash,omitempty" xml:"content_hash,omitempty" require:"true"`
	// 创建时间
	CreateTime *int64 `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// 存证类型
	NotaryType *string `json:"notary_type,omitempty" xml:"notary_type,omitempty" require:"true"`
	// 大小
	NotarySize *int64 `json:"notary_size,omitempty" xml:"notary_size,omitempty"`
	// 用户id
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty" require:"true"`
	// 业务id
	BizId *int64 `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 子业务id
	SubBizId *string `json:"sub_biz_id,omitempty" xml:"sub_biz_id,omitempty"`
	// 是否需要可信时间
	Tsr *bool `json:"tsr,omitempty" xml:"tsr,omitempty"`
}

func (s SyncInnerNotaryRequest) String() string {
	return tea.Prettify(s)
}

func (s SyncInnerNotaryRequest) GoString() string {
	return s.String()
}

func (s *SyncInnerNotaryRequest) SetAuthToken(v string) *SyncInnerNotaryRequest {
	s.AuthToken = &v
	return s
}

func (s *SyncInnerNotaryRequest) SetProductInstanceId(v string) *SyncInnerNotaryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SyncInnerNotaryRequest) SetId(v int64) *SyncInnerNotaryRequest {
	s.Id = &v
	return s
}

func (s *SyncInnerNotaryRequest) SetTransactionId(v string) *SyncInnerNotaryRequest {
	s.TransactionId = &v
	return s
}

func (s *SyncInnerNotaryRequest) SetTxHash(v string) *SyncInnerNotaryRequest {
	s.TxHash = &v
	return s
}

func (s *SyncInnerNotaryRequest) SetPhase(v string) *SyncInnerNotaryRequest {
	s.Phase = &v
	return s
}

func (s *SyncInnerNotaryRequest) SetContentHash(v string) *SyncInnerNotaryRequest {
	s.ContentHash = &v
	return s
}

func (s *SyncInnerNotaryRequest) SetCreateTime(v int64) *SyncInnerNotaryRequest {
	s.CreateTime = &v
	return s
}

func (s *SyncInnerNotaryRequest) SetNotaryType(v string) *SyncInnerNotaryRequest {
	s.NotaryType = &v
	return s
}

func (s *SyncInnerNotaryRequest) SetNotarySize(v int64) *SyncInnerNotaryRequest {
	s.NotarySize = &v
	return s
}

func (s *SyncInnerNotaryRequest) SetAccountId(v string) *SyncInnerNotaryRequest {
	s.AccountId = &v
	return s
}

func (s *SyncInnerNotaryRequest) SetBizId(v int64) *SyncInnerNotaryRequest {
	s.BizId = &v
	return s
}

func (s *SyncInnerNotaryRequest) SetSubBizId(v string) *SyncInnerNotaryRequest {
	s.SubBizId = &v
	return s
}

func (s *SyncInnerNotaryRequest) SetTsr(v bool) *SyncInnerNotaryRequest {
	s.Tsr = &v
	return s
}

type SyncInnerNotaryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SyncInnerNotaryResponse) String() string {
	return tea.Prettify(s)
}

func (s SyncInnerNotaryResponse) GoString() string {
	return s.String()
}

func (s *SyncInnerNotaryResponse) SetReqMsgId(v string) *SyncInnerNotaryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SyncInnerNotaryResponse) SetResultCode(v string) *SyncInnerNotaryResponse {
	s.ResultCode = &v
	return s
}

func (s *SyncInnerNotaryResponse) SetResultMsg(v string) *SyncInnerNotaryResponse {
	s.ResultMsg = &v
	return s
}

type SyncInnerTwcopenRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 产品code
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
	// 状态
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 业务id
	BizId *int64 `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 开通渠道
	OrderChannel *int64 `json:"order_channel,omitempty" xml:"order_channel,omitempty" require:"true"`
	// 创建时间
	GmtCreate *int64 `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 修改时间
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty" require:"true"`
}

func (s SyncInnerTwcopenRequest) String() string {
	return tea.Prettify(s)
}

func (s SyncInnerTwcopenRequest) GoString() string {
	return s.String()
}

func (s *SyncInnerTwcopenRequest) SetAuthToken(v string) *SyncInnerTwcopenRequest {
	s.AuthToken = &v
	return s
}

func (s *SyncInnerTwcopenRequest) SetProductInstanceId(v string) *SyncInnerTwcopenRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SyncInnerTwcopenRequest) SetId(v int64) *SyncInnerTwcopenRequest {
	s.Id = &v
	return s
}

func (s *SyncInnerTwcopenRequest) SetTenantId(v string) *SyncInnerTwcopenRequest {
	s.TenantId = &v
	return s
}

func (s *SyncInnerTwcopenRequest) SetProductCode(v string) *SyncInnerTwcopenRequest {
	s.ProductCode = &v
	return s
}

func (s *SyncInnerTwcopenRequest) SetStatus(v string) *SyncInnerTwcopenRequest {
	s.Status = &v
	return s
}

func (s *SyncInnerTwcopenRequest) SetBizId(v int64) *SyncInnerTwcopenRequest {
	s.BizId = &v
	return s
}

func (s *SyncInnerTwcopenRequest) SetOrderChannel(v int64) *SyncInnerTwcopenRequest {
	s.OrderChannel = &v
	return s
}

func (s *SyncInnerTwcopenRequest) SetGmtCreate(v int64) *SyncInnerTwcopenRequest {
	s.GmtCreate = &v
	return s
}

func (s *SyncInnerTwcopenRequest) SetGmtModified(v int64) *SyncInnerTwcopenRequest {
	s.GmtModified = &v
	return s
}

type SyncInnerTwcopenResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SyncInnerTwcopenResponse) String() string {
	return tea.Prettify(s)
}

func (s SyncInnerTwcopenResponse) GoString() string {
	return s.String()
}

func (s *SyncInnerTwcopenResponse) SetReqMsgId(v string) *SyncInnerTwcopenResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SyncInnerTwcopenResponse) SetResultCode(v string) *SyncInnerTwcopenResponse {
	s.ResultCode = &v
	return s
}

func (s *SyncInnerTwcopenResponse) SetResultMsg(v string) *SyncInnerTwcopenResponse {
	s.ResultMsg = &v
	return s
}

type SyncInnerProvisionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 自增id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty" require:"true"`
	// 创建时间
	GmtCreate *int64 `json:"gmt_create,omitempty" xml:"gmt_create,omitempty" require:"true"`
	// 修改时间
	GmtModified *int64 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
	// 租户id
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 租户名称
	TenantName *string `json:"tenant_name,omitempty" xml:"tenant_name,omitempty"`
	// 产品码
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
	// 是否正式账号
	IsOfficial *bool `json:"is_official,omitempty" xml:"is_official,omitempty"`
	// 业务分类
	BizId *int64 `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
	// 是否法院节点
	LegalAccount *bool `json:"legal_account,omitempty" xml:"legal_account,omitempty"`
	// 服务状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty" require:"true"`
	// 商品开通实例id
	InstanceId *string `json:"instance_id,omitempty" xml:"instance_id,omitempty"`
	// 订单渠道
	OrderChannel *int64 `json:"order_channel,omitempty" xml:"order_channel,omitempty"`
}

func (s SyncInnerProvisionRequest) String() string {
	return tea.Prettify(s)
}

func (s SyncInnerProvisionRequest) GoString() string {
	return s.String()
}

func (s *SyncInnerProvisionRequest) SetAuthToken(v string) *SyncInnerProvisionRequest {
	s.AuthToken = &v
	return s
}

func (s *SyncInnerProvisionRequest) SetProductInstanceId(v string) *SyncInnerProvisionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SyncInnerProvisionRequest) SetId(v int64) *SyncInnerProvisionRequest {
	s.Id = &v
	return s
}

func (s *SyncInnerProvisionRequest) SetGmtCreate(v int64) *SyncInnerProvisionRequest {
	s.GmtCreate = &v
	return s
}

func (s *SyncInnerProvisionRequest) SetGmtModified(v int64) *SyncInnerProvisionRequest {
	s.GmtModified = &v
	return s
}

func (s *SyncInnerProvisionRequest) SetTenantId(v string) *SyncInnerProvisionRequest {
	s.TenantId = &v
	return s
}

func (s *SyncInnerProvisionRequest) SetTenantName(v string) *SyncInnerProvisionRequest {
	s.TenantName = &v
	return s
}

func (s *SyncInnerProvisionRequest) SetProductCode(v string) *SyncInnerProvisionRequest {
	s.ProductCode = &v
	return s
}

func (s *SyncInnerProvisionRequest) SetIsOfficial(v bool) *SyncInnerProvisionRequest {
	s.IsOfficial = &v
	return s
}

func (s *SyncInnerProvisionRequest) SetBizId(v int64) *SyncInnerProvisionRequest {
	s.BizId = &v
	return s
}

func (s *SyncInnerProvisionRequest) SetLegalAccount(v bool) *SyncInnerProvisionRequest {
	s.LegalAccount = &v
	return s
}

func (s *SyncInnerProvisionRequest) SetStatus(v int64) *SyncInnerProvisionRequest {
	s.Status = &v
	return s
}

func (s *SyncInnerProvisionRequest) SetInstanceId(v string) *SyncInnerProvisionRequest {
	s.InstanceId = &v
	return s
}

func (s *SyncInnerProvisionRequest) SetOrderChannel(v int64) *SyncInnerProvisionRequest {
	s.OrderChannel = &v
	return s
}

type SyncInnerProvisionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SyncInnerProvisionResponse) String() string {
	return tea.Prettify(s)
}

func (s SyncInnerProvisionResponse) GoString() string {
	return s.String()
}

func (s *SyncInnerProvisionResponse) SetReqMsgId(v string) *SyncInnerProvisionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SyncInnerProvisionResponse) SetResultCode(v string) *SyncInnerProvisionResponse {
	s.ResultCode = &v
	return s
}

func (s *SyncInnerProvisionResponse) SetResultMsg(v string) *SyncInnerProvisionResponse {
	s.ResultMsg = &v
	return s
}

type SyncInnerTsrRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// tsr的token信息
	Token *string `json:"token,omitempty" xml:"token,omitempty" require:"true"`
}

func (s SyncInnerTsrRequest) String() string {
	return tea.Prettify(s)
}

func (s SyncInnerTsrRequest) GoString() string {
	return s.String()
}

func (s *SyncInnerTsrRequest) SetAuthToken(v string) *SyncInnerTsrRequest {
	s.AuthToken = &v
	return s
}

func (s *SyncInnerTsrRequest) SetProductInstanceId(v string) *SyncInnerTsrRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SyncInnerTsrRequest) SetToken(v string) *SyncInnerTsrRequest {
	s.Token = &v
	return s
}

type SyncInnerTsrResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SyncInnerTsrResponse) String() string {
	return tea.Prettify(s)
}

func (s SyncInnerTsrResponse) GoString() string {
	return s.String()
}

func (s *SyncInnerTsrResponse) SetReqMsgId(v string) *SyncInnerTsrResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SyncInnerTsrResponse) SetResultCode(v string) *SyncInnerTsrResponse {
	s.ResultCode = &v
	return s
}

func (s *SyncInnerTsrResponse) SetResultMsg(v string) *SyncInnerTsrResponse {
	s.ResultMsg = &v
	return s
}

type CheckEpidentityTwometaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 认证企业名称。
	EpCertName *string `json:"ep_cert_name,omitempty" xml:"ep_cert_name,omitempty" require:"true"`
	// 企业证件号码。
	EpCertNo *string `json:"ep_cert_no,omitempty" xml:"ep_cert_no,omitempty" require:"true"`
}

func (s CheckEpidentityTwometaRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckEpidentityTwometaRequest) GoString() string {
	return s.String()
}

func (s *CheckEpidentityTwometaRequest) SetAuthToken(v string) *CheckEpidentityTwometaRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckEpidentityTwometaRequest) SetProductInstanceId(v string) *CheckEpidentityTwometaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CheckEpidentityTwometaRequest) SetEpCertName(v string) *CheckEpidentityTwometaRequest {
	s.EpCertName = &v
	return s
}

func (s *CheckEpidentityTwometaRequest) SetEpCertNo(v string) *CheckEpidentityTwometaRequest {
	s.EpCertNo = &v
	return s
}

type CheckEpidentityTwometaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 企业状态。
	EnterpriseStatus *string `json:"enterprise_status,omitempty" xml:"enterprise_status,omitempty"`
	// 营业期限。
	OpenTime *string `json:"open_time,omitempty" xml:"open_time,omitempty"`
	// 核验是否通过。
	Passed *bool `json:"passed,omitempty" xml:"passed,omitempty"`
	// 0:核验成功 1:企业信息有误 2:企业非正常营业
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
}

func (s CheckEpidentityTwometaResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckEpidentityTwometaResponse) GoString() string {
	return s.String()
}

func (s *CheckEpidentityTwometaResponse) SetReqMsgId(v string) *CheckEpidentityTwometaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckEpidentityTwometaResponse) SetResultCode(v string) *CheckEpidentityTwometaResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckEpidentityTwometaResponse) SetResultMsg(v string) *CheckEpidentityTwometaResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckEpidentityTwometaResponse) SetEnterpriseStatus(v string) *CheckEpidentityTwometaResponse {
	s.EnterpriseStatus = &v
	return s
}

func (s *CheckEpidentityTwometaResponse) SetOpenTime(v string) *CheckEpidentityTwometaResponse {
	s.OpenTime = &v
	return s
}

func (s *CheckEpidentityTwometaResponse) SetPassed(v bool) *CheckEpidentityTwometaResponse {
	s.Passed = &v
	return s
}

func (s *CheckEpidentityTwometaResponse) SetCode(v string) *CheckEpidentityTwometaResponse {
	s.Code = &v
	return s
}

type CheckEpidentityThreemetaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 认证企业名称。
	EpCertName *string `json:"ep_cert_name,omitempty" xml:"ep_cert_name,omitempty" require:"true"`
	// 企业证件号码。
	EpCertNo *string `json:"ep_cert_no,omitempty" xml:"ep_cert_no,omitempty" require:"true"`
	// 企业法人姓名。
	LegalPersonCertName *string `json:"legal_person_cert_name,omitempty" xml:"legal_person_cert_name,omitempty" require:"true"`
}

func (s CheckEpidentityThreemetaRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckEpidentityThreemetaRequest) GoString() string {
	return s.String()
}

func (s *CheckEpidentityThreemetaRequest) SetAuthToken(v string) *CheckEpidentityThreemetaRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckEpidentityThreemetaRequest) SetProductInstanceId(v string) *CheckEpidentityThreemetaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CheckEpidentityThreemetaRequest) SetEpCertName(v string) *CheckEpidentityThreemetaRequest {
	s.EpCertName = &v
	return s
}

func (s *CheckEpidentityThreemetaRequest) SetEpCertNo(v string) *CheckEpidentityThreemetaRequest {
	s.EpCertNo = &v
	return s
}

func (s *CheckEpidentityThreemetaRequest) SetLegalPersonCertName(v string) *CheckEpidentityThreemetaRequest {
	s.LegalPersonCertName = &v
	return s
}

type CheckEpidentityThreemetaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 企业状态。
	EnterpriseStatus *string `json:"enterprise_status,omitempty" xml:"enterprise_status,omitempty"`
	// 营业期限。
	OpenTime *string `json:"open_time,omitempty" xml:"open_time,omitempty"`
	// 核验是否通过。
	Passed *bool `json:"passed,omitempty" xml:"passed,omitempty"`
	// 0:核验成功 1:企业信息有误 2:企业非正常营业
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
}

func (s CheckEpidentityThreemetaResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckEpidentityThreemetaResponse) GoString() string {
	return s.String()
}

func (s *CheckEpidentityThreemetaResponse) SetReqMsgId(v string) *CheckEpidentityThreemetaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckEpidentityThreemetaResponse) SetResultCode(v string) *CheckEpidentityThreemetaResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckEpidentityThreemetaResponse) SetResultMsg(v string) *CheckEpidentityThreemetaResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckEpidentityThreemetaResponse) SetEnterpriseStatus(v string) *CheckEpidentityThreemetaResponse {
	s.EnterpriseStatus = &v
	return s
}

func (s *CheckEpidentityThreemetaResponse) SetOpenTime(v string) *CheckEpidentityThreemetaResponse {
	s.OpenTime = &v
	return s
}

func (s *CheckEpidentityThreemetaResponse) SetPassed(v bool) *CheckEpidentityThreemetaResponse {
	s.Passed = &v
	return s
}

func (s *CheckEpidentityThreemetaResponse) SetCode(v string) *CheckEpidentityThreemetaResponse {
	s.Code = &v
	return s
}

type CheckEpidentityFourmetaRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 认证企业名称。
	EpCertName *string `json:"ep_cert_name,omitempty" xml:"ep_cert_name,omitempty" require:"true"`
	// 企业证件号码。
	EpCertNo *string `json:"ep_cert_no,omitempty" xml:"ep_cert_no,omitempty" require:"true"`
	// 企业法人姓名。
	LegalPersonCertName *string `json:"legal_person_cert_name,omitempty" xml:"legal_person_cert_name,omitempty" require:"true"`
	// 企业法人身份证号码。
	LegalPersonCertNo *string `json:"legal_person_cert_no,omitempty" xml:"legal_person_cert_no,omitempty" require:"true"`
}

func (s CheckEpidentityFourmetaRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckEpidentityFourmetaRequest) GoString() string {
	return s.String()
}

func (s *CheckEpidentityFourmetaRequest) SetAuthToken(v string) *CheckEpidentityFourmetaRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckEpidentityFourmetaRequest) SetProductInstanceId(v string) *CheckEpidentityFourmetaRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CheckEpidentityFourmetaRequest) SetEpCertName(v string) *CheckEpidentityFourmetaRequest {
	s.EpCertName = &v
	return s
}

func (s *CheckEpidentityFourmetaRequest) SetEpCertNo(v string) *CheckEpidentityFourmetaRequest {
	s.EpCertNo = &v
	return s
}

func (s *CheckEpidentityFourmetaRequest) SetLegalPersonCertName(v string) *CheckEpidentityFourmetaRequest {
	s.LegalPersonCertName = &v
	return s
}

func (s *CheckEpidentityFourmetaRequest) SetLegalPersonCertNo(v string) *CheckEpidentityFourmetaRequest {
	s.LegalPersonCertNo = &v
	return s
}

type CheckEpidentityFourmetaResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 企业状态。
	EnterpriseStatus *string `json:"enterprise_status,omitempty" xml:"enterprise_status,omitempty"`
	// 营业期限。
	OpenTime *string `json:"open_time,omitempty" xml:"open_time,omitempty"`
	// 核验是否通过。
	Passed *bool `json:"passed,omitempty" xml:"passed,omitempty"`
	// 0:核验成功 1:企业信息有误 2:企业非正常营业
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
}

func (s CheckEpidentityFourmetaResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckEpidentityFourmetaResponse) GoString() string {
	return s.String()
}

func (s *CheckEpidentityFourmetaResponse) SetReqMsgId(v string) *CheckEpidentityFourmetaResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckEpidentityFourmetaResponse) SetResultCode(v string) *CheckEpidentityFourmetaResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckEpidentityFourmetaResponse) SetResultMsg(v string) *CheckEpidentityFourmetaResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckEpidentityFourmetaResponse) SetEnterpriseStatus(v string) *CheckEpidentityFourmetaResponse {
	s.EnterpriseStatus = &v
	return s
}

func (s *CheckEpidentityFourmetaResponse) SetOpenTime(v string) *CheckEpidentityFourmetaResponse {
	s.OpenTime = &v
	return s
}

func (s *CheckEpidentityFourmetaResponse) SetPassed(v bool) *CheckEpidentityFourmetaResponse {
	s.Passed = &v
	return s
}

func (s *CheckEpidentityFourmetaResponse) SetCode(v string) *CheckEpidentityFourmetaResponse {
	s.Code = &v
	return s
}

type CheckNotarizationOrderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 公证订单ID号
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
}

func (s CheckNotarizationOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckNotarizationOrderRequest) GoString() string {
	return s.String()
}

func (s *CheckNotarizationOrderRequest) SetAuthToken(v string) *CheckNotarizationOrderRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckNotarizationOrderRequest) SetProductInstanceId(v string) *CheckNotarizationOrderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CheckNotarizationOrderRequest) SetOrderId(v string) *CheckNotarizationOrderRequest {
	s.OrderId = &v
	return s
}

type CheckNotarizationOrderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 下单的业务类型ID列表
	BizId []*string `json:"biz_id,omitempty" xml:"biz_id,omitempty" type:"Repeated"`
	// 实人认证接口调用授权码，与公证订单一一对应，有效次数默认为3次，超过调用次数则失效
	FaceAuthCode *string `json:"face_auth_code,omitempty" xml:"face_auth_code,omitempty"`
	// 下单客户的账号ID
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	// 是否为合法订单
	Valid *bool `json:"valid,omitempty" xml:"valid,omitempty"`
	// 平台公证机构ID
	OrgId *string `json:"org_id,omitempty" xml:"org_id,omitempty"`
}

func (s CheckNotarizationOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckNotarizationOrderResponse) GoString() string {
	return s.String()
}

func (s *CheckNotarizationOrderResponse) SetReqMsgId(v string) *CheckNotarizationOrderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckNotarizationOrderResponse) SetResultCode(v string) *CheckNotarizationOrderResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckNotarizationOrderResponse) SetResultMsg(v string) *CheckNotarizationOrderResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckNotarizationOrderResponse) SetBizId(v []*string) *CheckNotarizationOrderResponse {
	s.BizId = v
	return s
}

func (s *CheckNotarizationOrderResponse) SetFaceAuthCode(v string) *CheckNotarizationOrderResponse {
	s.FaceAuthCode = &v
	return s
}

func (s *CheckNotarizationOrderResponse) SetUserId(v string) *CheckNotarizationOrderResponse {
	s.UserId = &v
	return s
}

func (s *CheckNotarizationOrderResponse) SetValid(v bool) *CheckNotarizationOrderResponse {
	s.Valid = &v
	return s
}

func (s *CheckNotarizationOrderResponse) SetOrgId(v string) *CheckNotarizationOrderResponse {
	s.OrgId = &v
	return s
}

type UpdateNotarizationOrderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 公证订单ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 如果出证失败，需要给出失败原因
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty"`
	// 出证状态的枚举值
	Status *string `json:"status,omitempty" xml:"status,omitempty" require:"true"`
}

func (s UpdateNotarizationOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateNotarizationOrderRequest) GoString() string {
	return s.String()
}

func (s *UpdateNotarizationOrderRequest) SetAuthToken(v string) *UpdateNotarizationOrderRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateNotarizationOrderRequest) SetProductInstanceId(v string) *UpdateNotarizationOrderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateNotarizationOrderRequest) SetOrderId(v string) *UpdateNotarizationOrderRequest {
	s.OrderId = &v
	return s
}

func (s *UpdateNotarizationOrderRequest) SetReason(v string) *UpdateNotarizationOrderRequest {
	s.Reason = &v
	return s
}

func (s *UpdateNotarizationOrderRequest) SetStatus(v string) *UpdateNotarizationOrderRequest {
	s.Status = &v
	return s
}

type UpdateNotarizationOrderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态是否更新成功
	Accepted *bool `json:"accepted,omitempty" xml:"accepted,omitempty"`
	// 如更新失败，返回失败原因
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty"`
}

func (s UpdateNotarizationOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateNotarizationOrderResponse) GoString() string {
	return s.String()
}

func (s *UpdateNotarizationOrderResponse) SetReqMsgId(v string) *UpdateNotarizationOrderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateNotarizationOrderResponse) SetResultCode(v string) *UpdateNotarizationOrderResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateNotarizationOrderResponse) SetResultMsg(v string) *UpdateNotarizationOrderResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateNotarizationOrderResponse) SetAccepted(v bool) *UpdateNotarizationOrderResponse {
	s.Accepted = &v
	return s
}

func (s *UpdateNotarizationOrderResponse) SetReason(v string) *UpdateNotarizationOrderResponse {
	s.Reason = &v
	return s
}

type SetNotarizationOrderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 公证事项ID
	BizCode *string `json:"biz_code,omitempty" xml:"biz_code,omitempty"`
	// 需设置的属性名称
	Key *string `json:"key,omitempty" xml:"key,omitempty" require:"true"`
	// 公证订单ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 被设置字段的值
	Value *string `json:"value,omitempty" xml:"value,omitempty" require:"true"`
}

func (s SetNotarizationOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s SetNotarizationOrderRequest) GoString() string {
	return s.String()
}

func (s *SetNotarizationOrderRequest) SetAuthToken(v string) *SetNotarizationOrderRequest {
	s.AuthToken = &v
	return s
}

func (s *SetNotarizationOrderRequest) SetProductInstanceId(v string) *SetNotarizationOrderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetNotarizationOrderRequest) SetBizCode(v string) *SetNotarizationOrderRequest {
	s.BizCode = &v
	return s
}

func (s *SetNotarizationOrderRequest) SetKey(v string) *SetNotarizationOrderRequest {
	s.Key = &v
	return s
}

func (s *SetNotarizationOrderRequest) SetOrderId(v string) *SetNotarizationOrderRequest {
	s.OrderId = &v
	return s
}

func (s *SetNotarizationOrderRequest) SetValue(v string) *SetNotarizationOrderRequest {
	s.Value = &v
	return s
}

type SetNotarizationOrderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否设置成功
	Accepted *bool `json:"accepted,omitempty" xml:"accepted,omitempty"`
	// 如设置失败，返回失败原因
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty"`
}

func (s SetNotarizationOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s SetNotarizationOrderResponse) GoString() string {
	return s.String()
}

func (s *SetNotarizationOrderResponse) SetReqMsgId(v string) *SetNotarizationOrderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetNotarizationOrderResponse) SetResultCode(v string) *SetNotarizationOrderResponse {
	s.ResultCode = &v
	return s
}

func (s *SetNotarizationOrderResponse) SetResultMsg(v string) *SetNotarizationOrderResponse {
	s.ResultMsg = &v
	return s
}

func (s *SetNotarizationOrderResponse) SetAccepted(v bool) *SetNotarizationOrderResponse {
	s.Accepted = &v
	return s
}

func (s *SetNotarizationOrderResponse) SetReason(v string) *SetNotarizationOrderResponse {
	s.Reason = &v
	return s
}

type InitIdentificationFaceauthRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 认证人的姓名
	CertName *string `json:"cert_name,omitempty" xml:"cert_name,omitempty" require:"true"`
	// 被验证者的身份证号码
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 授权码，针对某些特定场景使用，非必填
	AuthCode *string `json:"auth_code,omitempty" xml:"auth_code,omitempty"`
}

func (s InitIdentificationFaceauthRequest) String() string {
	return tea.Prettify(s)
}

func (s InitIdentificationFaceauthRequest) GoString() string {
	return s.String()
}

func (s *InitIdentificationFaceauthRequest) SetAuthToken(v string) *InitIdentificationFaceauthRequest {
	s.AuthToken = &v
	return s
}

func (s *InitIdentificationFaceauthRequest) SetProductInstanceId(v string) *InitIdentificationFaceauthRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *InitIdentificationFaceauthRequest) SetCertName(v string) *InitIdentificationFaceauthRequest {
	s.CertName = &v
	return s
}

func (s *InitIdentificationFaceauthRequest) SetCertNo(v string) *InitIdentificationFaceauthRequest {
	s.CertNo = &v
	return s
}

func (s *InitIdentificationFaceauthRequest) SetAuthCode(v string) *InitIdentificationFaceauthRequest {
	s.AuthCode = &v
	return s
}

type InitIdentificationFaceauthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 发起一个实人认证流程，获取到流程ID
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty"`
}

func (s InitIdentificationFaceauthResponse) String() string {
	return tea.Prettify(s)
}

func (s InitIdentificationFaceauthResponse) GoString() string {
	return s.String()
}

func (s *InitIdentificationFaceauthResponse) SetReqMsgId(v string) *InitIdentificationFaceauthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InitIdentificationFaceauthResponse) SetResultCode(v string) *InitIdentificationFaceauthResponse {
	s.ResultCode = &v
	return s
}

func (s *InitIdentificationFaceauthResponse) SetResultMsg(v string) *InitIdentificationFaceauthResponse {
	s.ResultMsg = &v
	return s
}

func (s *InitIdentificationFaceauthResponse) SetCertifyId(v string) *InitIdentificationFaceauthResponse {
	s.CertifyId = &v
	return s
}

type CertifyIdentificationFaceauthRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实人认证流程ID
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty" require:"true"`
	// 认证流程结束回调通知地址，非必传
	CallbackUrl *string `json:"callback_url,omitempty" xml:"callback_url,omitempty"`
	// 认证结束后跳转地址，非必填
	RedirectUrl *string `json:"redirect_url,omitempty" xml:"redirect_url,omitempty"`
	// 授权码，针对某些特定场景使用，非必填
	AuthCode *string `json:"auth_code,omitempty" xml:"auth_code,omitempty"`
}

func (s CertifyIdentificationFaceauthRequest) String() string {
	return tea.Prettify(s)
}

func (s CertifyIdentificationFaceauthRequest) GoString() string {
	return s.String()
}

func (s *CertifyIdentificationFaceauthRequest) SetAuthToken(v string) *CertifyIdentificationFaceauthRequest {
	s.AuthToken = &v
	return s
}

func (s *CertifyIdentificationFaceauthRequest) SetProductInstanceId(v string) *CertifyIdentificationFaceauthRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CertifyIdentificationFaceauthRequest) SetCertifyId(v string) *CertifyIdentificationFaceauthRequest {
	s.CertifyId = &v
	return s
}

func (s *CertifyIdentificationFaceauthRequest) SetCallbackUrl(v string) *CertifyIdentificationFaceauthRequest {
	s.CallbackUrl = &v
	return s
}

func (s *CertifyIdentificationFaceauthRequest) SetRedirectUrl(v string) *CertifyIdentificationFaceauthRequest {
	s.RedirectUrl = &v
	return s
}

func (s *CertifyIdentificationFaceauthRequest) SetAuthCode(v string) *CertifyIdentificationFaceauthRequest {
	s.AuthCode = &v
	return s
}

type CertifyIdentificationFaceauthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 实人认证流程ID
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty"`
	// 发起实人认证的地址
	VerifyUrl *string `json:"verify_url,omitempty" xml:"verify_url,omitempty"`
}

func (s CertifyIdentificationFaceauthResponse) String() string {
	return tea.Prettify(s)
}

func (s CertifyIdentificationFaceauthResponse) GoString() string {
	return s.String()
}

func (s *CertifyIdentificationFaceauthResponse) SetReqMsgId(v string) *CertifyIdentificationFaceauthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CertifyIdentificationFaceauthResponse) SetResultCode(v string) *CertifyIdentificationFaceauthResponse {
	s.ResultCode = &v
	return s
}

func (s *CertifyIdentificationFaceauthResponse) SetResultMsg(v string) *CertifyIdentificationFaceauthResponse {
	s.ResultMsg = &v
	return s
}

func (s *CertifyIdentificationFaceauthResponse) SetCertifyId(v string) *CertifyIdentificationFaceauthResponse {
	s.CertifyId = &v
	return s
}

func (s *CertifyIdentificationFaceauthResponse) SetVerifyUrl(v string) *CertifyIdentificationFaceauthResponse {
	s.VerifyUrl = &v
	return s
}

type QueryIdentificationFaceauthRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实人认证流程ID
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty" require:"true"`
	// 授权码，针对某些特定场景使用，非必填
	AuthCode *string `json:"auth_code,omitempty" xml:"auth_code,omitempty"`
}

func (s QueryIdentificationFaceauthRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIdentificationFaceauthRequest) GoString() string {
	return s.String()
}

func (s *QueryIdentificationFaceauthRequest) SetAuthToken(v string) *QueryIdentificationFaceauthRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIdentificationFaceauthRequest) SetProductInstanceId(v string) *QueryIdentificationFaceauthRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIdentificationFaceauthRequest) SetCertifyId(v string) *QueryIdentificationFaceauthRequest {
	s.CertifyId = &v
	return s
}

func (s *QueryIdentificationFaceauthRequest) SetAuthCode(v string) *QueryIdentificationFaceauthRequest {
	s.AuthCode = &v
	return s
}

type QueryIdentificationFaceauthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 实人认证流程ID
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty"`
	// 是否通过实人认证
	Passed *bool `json:"passed,omitempty" xml:"passed,omitempty"`
}

func (s QueryIdentificationFaceauthResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIdentificationFaceauthResponse) GoString() string {
	return s.String()
}

func (s *QueryIdentificationFaceauthResponse) SetReqMsgId(v string) *QueryIdentificationFaceauthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIdentificationFaceauthResponse) SetResultCode(v string) *QueryIdentificationFaceauthResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIdentificationFaceauthResponse) SetResultMsg(v string) *QueryIdentificationFaceauthResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIdentificationFaceauthResponse) SetCertifyId(v string) *QueryIdentificationFaceauthResponse {
	s.CertifyId = &v
	return s
}

func (s *QueryIdentificationFaceauthResponse) SetPassed(v bool) *QueryIdentificationFaceauthResponse {
	s.Passed = &v
	return s
}

type QueryEnterpriseFaceauthRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 企业法人认证查询
	BizNo *string `json:"biz_no,omitempty" xml:"biz_no,omitempty" require:"true"`
}

func (s QueryEnterpriseFaceauthRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEnterpriseFaceauthRequest) GoString() string {
	return s.String()
}

func (s *QueryEnterpriseFaceauthRequest) SetAuthToken(v string) *QueryEnterpriseFaceauthRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryEnterpriseFaceauthRequest) SetProductInstanceId(v string) *QueryEnterpriseFaceauthRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryEnterpriseFaceauthRequest) SetBizNo(v string) *QueryEnterpriseFaceauthRequest {
	s.BizNo = &v
	return s
}

type QueryEnterpriseFaceauthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 认证唯一性标识
	BizNo *string `json:"biz_no,omitempty" xml:"biz_no,omitempty"`
	// 认证失败错误码
	FailedCode *string `json:"failed_code,omitempty" xml:"failed_code,omitempty"`
	// 认证是否通过
	Passed *bool `json:"passed,omitempty" xml:"passed,omitempty"`
}

func (s QueryEnterpriseFaceauthResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEnterpriseFaceauthResponse) GoString() string {
	return s.String()
}

func (s *QueryEnterpriseFaceauthResponse) SetReqMsgId(v string) *QueryEnterpriseFaceauthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryEnterpriseFaceauthResponse) SetResultCode(v string) *QueryEnterpriseFaceauthResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryEnterpriseFaceauthResponse) SetResultMsg(v string) *QueryEnterpriseFaceauthResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryEnterpriseFaceauthResponse) SetBizNo(v string) *QueryEnterpriseFaceauthResponse {
	s.BizNo = &v
	return s
}

func (s *QueryEnterpriseFaceauthResponse) SetFailedCode(v string) *QueryEnterpriseFaceauthResponse {
	s.FailedCode = &v
	return s
}

func (s *QueryEnterpriseFaceauthResponse) SetPassed(v bool) *QueryEnterpriseFaceauthResponse {
	s.Passed = &v
	return s
}

type InitEnterpriseFaceauthRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 企业名称
	EpCertName *string `json:"ep_cert_name,omitempty" xml:"ep_cert_name,omitempty" require:"true"`
	// 企业证件号
	EpCertNo *string `json:"ep_cert_no,omitempty" xml:"ep_cert_no,omitempty" require:"true"`
	// 企业证件类型（NATIONAL_LEGAL（工商注册号）或 NATIONAL_LEGAL_MERGE （ 社会统一信用代码））
	EpCertType *string `json:"ep_cert_type,omitempty" xml:"ep_cert_type,omitempty" require:"true"`
	// 企业法人姓名
	LegalPersonCertName *string `json:"legal_person_cert_name,omitempty" xml:"legal_person_cert_name,omitempty" require:"true"`
	// 企业法人身份证号（目前仅支持身份证号）
	LegalPersonCertNo *string `json:"legal_person_cert_no,omitempty" xml:"legal_person_cert_no,omitempty" require:"true"`
}

func (s InitEnterpriseFaceauthRequest) String() string {
	return tea.Prettify(s)
}

func (s InitEnterpriseFaceauthRequest) GoString() string {
	return s.String()
}

func (s *InitEnterpriseFaceauthRequest) SetAuthToken(v string) *InitEnterpriseFaceauthRequest {
	s.AuthToken = &v
	return s
}

func (s *InitEnterpriseFaceauthRequest) SetProductInstanceId(v string) *InitEnterpriseFaceauthRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *InitEnterpriseFaceauthRequest) SetEpCertName(v string) *InitEnterpriseFaceauthRequest {
	s.EpCertName = &v
	return s
}

func (s *InitEnterpriseFaceauthRequest) SetEpCertNo(v string) *InitEnterpriseFaceauthRequest {
	s.EpCertNo = &v
	return s
}

func (s *InitEnterpriseFaceauthRequest) SetEpCertType(v string) *InitEnterpriseFaceauthRequest {
	s.EpCertType = &v
	return s
}

func (s *InitEnterpriseFaceauthRequest) SetLegalPersonCertName(v string) *InitEnterpriseFaceauthRequest {
	s.LegalPersonCertName = &v
	return s
}

func (s *InitEnterpriseFaceauthRequest) SetLegalPersonCertNo(v string) *InitEnterpriseFaceauthRequest {
	s.LegalPersonCertNo = &v
	return s
}

type InitEnterpriseFaceauthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 本次认证的业务唯一性标示
	BizNo *string `json:"biz_no,omitempty" xml:"biz_no,omitempty"`
}

func (s InitEnterpriseFaceauthResponse) String() string {
	return tea.Prettify(s)
}

func (s InitEnterpriseFaceauthResponse) GoString() string {
	return s.String()
}

func (s *InitEnterpriseFaceauthResponse) SetReqMsgId(v string) *InitEnterpriseFaceauthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InitEnterpriseFaceauthResponse) SetResultCode(v string) *InitEnterpriseFaceauthResponse {
	s.ResultCode = &v
	return s
}

func (s *InitEnterpriseFaceauthResponse) SetResultMsg(v string) *InitEnterpriseFaceauthResponse {
	s.ResultMsg = &v
	return s
}

func (s *InitEnterpriseFaceauthResponse) SetBizNo(v string) *InitEnterpriseFaceauthResponse {
	s.BizNo = &v
	return s
}

type CertifyEnterpriseFaceauthRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务唯一性标识
	BizNo *string `json:"biz_no,omitempty" xml:"biz_no,omitempty" require:"true"`
	// 回调通知地址
	CallbackUrl *string `json:"callback_url,omitempty" xml:"callback_url,omitempty"`
	// 认证完成后回跳地址
	RedirectUrl *string `json:"redirect_url,omitempty" xml:"redirect_url,omitempty"`
}

func (s CertifyEnterpriseFaceauthRequest) String() string {
	return tea.Prettify(s)
}

func (s CertifyEnterpriseFaceauthRequest) GoString() string {
	return s.String()
}

func (s *CertifyEnterpriseFaceauthRequest) SetAuthToken(v string) *CertifyEnterpriseFaceauthRequest {
	s.AuthToken = &v
	return s
}

func (s *CertifyEnterpriseFaceauthRequest) SetProductInstanceId(v string) *CertifyEnterpriseFaceauthRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CertifyEnterpriseFaceauthRequest) SetBizNo(v string) *CertifyEnterpriseFaceauthRequest {
	s.BizNo = &v
	return s
}

func (s *CertifyEnterpriseFaceauthRequest) SetCallbackUrl(v string) *CertifyEnterpriseFaceauthRequest {
	s.CallbackUrl = &v
	return s
}

func (s *CertifyEnterpriseFaceauthRequest) SetRedirectUrl(v string) *CertifyEnterpriseFaceauthRequest {
	s.RedirectUrl = &v
	return s
}

type CertifyEnterpriseFaceauthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务唯一性标识
	BizNo *string `json:"biz_no,omitempty" xml:"biz_no,omitempty"`
	// 认证 url
	VerifyUrl *string `json:"verify_url,omitempty" xml:"verify_url,omitempty"`
}

func (s CertifyEnterpriseFaceauthResponse) String() string {
	return tea.Prettify(s)
}

func (s CertifyEnterpriseFaceauthResponse) GoString() string {
	return s.String()
}

func (s *CertifyEnterpriseFaceauthResponse) SetReqMsgId(v string) *CertifyEnterpriseFaceauthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CertifyEnterpriseFaceauthResponse) SetResultCode(v string) *CertifyEnterpriseFaceauthResponse {
	s.ResultCode = &v
	return s
}

func (s *CertifyEnterpriseFaceauthResponse) SetResultMsg(v string) *CertifyEnterpriseFaceauthResponse {
	s.ResultMsg = &v
	return s
}

func (s *CertifyEnterpriseFaceauthResponse) SetBizNo(v string) *CertifyEnterpriseFaceauthResponse {
	s.BizNo = &v
	return s
}

func (s *CertifyEnterpriseFaceauthResponse) SetVerifyUrl(v string) *CertifyEnterpriseFaceauthResponse {
	s.VerifyUrl = &v
	return s
}

type CreateLeaseOrderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 账号标识，可弃用
	AccountId *string `json:"account_id,omitempty" xml:"account_id,omitempty"`
	// 支付宝交易金额
	AlipayOrderAmount *int64 `json:"alipay_order_amount,omitempty" xml:"alipay_order_amount,omitempty" require:"true" minimum:"0"`
	// 支付宝订单号
	AlipayOrderNo *string `json:"alipay_order_no,omitempty" xml:"alipay_order_no,omitempty" require:"true"`
	// 支付宝交易总金额
	AlipayOrderTotalAmount *int64 `json:"alipay_order_total_amount,omitempty" xml:"alipay_order_total_amount,omitempty" require:"true" minimum:"0"`
	// 免押金额
	DepositWaiveAmount *int64 `json:"deposit_waive_amount,omitempty" xml:"deposit_waive_amount,omitempty" require:"true" minimum:"0"`
	// 订单总保额，单位分，insured为True时必填
	InsuranceCoverage *int64 `json:"insurance_coverage,omitempty" xml:"insurance_coverage,omitempty" minimum:"0"`
	// 保单号，insured为True时必填，仅支持数字和字母
	InsuranceOrderNo *string `json:"insurance_order_no,omitempty" xml:"insurance_order_no,omitempty"`
	// 商品名称
	ItemName *string `json:"item_name,omitempty" xml:"item_name,omitempty" require:"true"`
	// 商品市场价格
	ItemPrice *int64 `json:"item_price,omitempty" xml:"item_price,omitempty" require:"true" minimum:"0"`
	// 商品类目
	ItemType *string `json:"item_type,omitempty" xml:"item_type,omitempty" require:"true"`
	// 商户支付宝账号
	MerchantAlipayAccount *string `json:"merchant_alipay_account,omitempty" xml:"merchant_alipay_account,omitempty" require:"true"`
	// 商户支付宝ID
	MerchantAlipayId *string `json:"merchant_alipay_id,omitempty" xml:"merchant_alipay_id,omitempty" require:"true"`
	// 商户名称
	MerchantName *string `json:"merchant_name,omitempty" xml:"merchant_name,omitempty" require:"true"`
	// 商户单号
	MerchantOrderNo *string `json:"merchant_order_no,omitempty" xml:"merchant_order_no,omitempty"`
	// 支付渠道，包括支付宝（Alipay）、第三方收单机构（ThirdParty）、信用卡（CreditCard）、银行转账（BankTransfer）、微信（WeChatPay）、其他（Other）
	PaymentChannel *string `json:"payment_channel,omitempty" xml:"payment_channel,omitempty"`
	// 租约结束日期
	TenancyTermEnd *int64 `json:"tenancy_term_end,omitempty" xml:"tenancy_term_end,omitempty" require:"true" minimum:"0"`
	// 租约起始日期
	TenancyTermStart *int64 `json:"tenancy_term_start,omitempty" xml:"tenancy_term_start,omitempty" require:"true" minimum:"0"`
	// 是否投保，默认为True
	Insured *bool `json:"insured,omitempty" xml:"insured,omitempty"`
	// 保单查询地址，insured为True时必填
	InsuranceOrderUrl *string `json:"insurance_order_url,omitempty" xml:"insurance_order_url,omitempty"`
	// 保险缴费单号，insured为True时必填，仅支持数字和字母，长度20
	InsuranceBillNo *string `json:"insurance_bill_no,omitempty" xml:"insurance_bill_no,omitempty"`
	// 保险缴费北京时间，格式为"YYYYMMDDHHMISS"，时区为UTC+8
	InsuranceBillTime *string `json:"insurance_bill_time,omitempty" xml:"insurance_bill_time,omitempty"`
	// 保险缴费金额，单位分
	InsuranceBillAmount *int64 `json:"insurance_bill_amount,omitempty" xml:"insurance_bill_amount,omitempty"`
	// 订单产品保额，单位分，insured为True时必填
	InsuranceProductCoverage *int64 `json:"insurance_product_coverage,omitempty" xml:"insurance_product_coverage,omitempty"`
}

func (s CreateLeaseOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseOrderRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseOrderRequest) SetAuthToken(v string) *CreateLeaseOrderRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseOrderRequest) SetProductInstanceId(v string) *CreateLeaseOrderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseOrderRequest) SetAccountId(v string) *CreateLeaseOrderRequest {
	s.AccountId = &v
	return s
}

func (s *CreateLeaseOrderRequest) SetAlipayOrderAmount(v int64) *CreateLeaseOrderRequest {
	s.AlipayOrderAmount = &v
	return s
}

func (s *CreateLeaseOrderRequest) SetAlipayOrderNo(v string) *CreateLeaseOrderRequest {
	s.AlipayOrderNo = &v
	return s
}

func (s *CreateLeaseOrderRequest) SetAlipayOrderTotalAmount(v int64) *CreateLeaseOrderRequest {
	s.AlipayOrderTotalAmount = &v
	return s
}

func (s *CreateLeaseOrderRequest) SetDepositWaiveAmount(v int64) *CreateLeaseOrderRequest {
	s.DepositWaiveAmount = &v
	return s
}

func (s *CreateLeaseOrderRequest) SetInsuranceCoverage(v int64) *CreateLeaseOrderRequest {
	s.InsuranceCoverage = &v
	return s
}

func (s *CreateLeaseOrderRequest) SetInsuranceOrderNo(v string) *CreateLeaseOrderRequest {
	s.InsuranceOrderNo = &v
	return s
}

func (s *CreateLeaseOrderRequest) SetItemName(v string) *CreateLeaseOrderRequest {
	s.ItemName = &v
	return s
}

func (s *CreateLeaseOrderRequest) SetItemPrice(v int64) *CreateLeaseOrderRequest {
	s.ItemPrice = &v
	return s
}

func (s *CreateLeaseOrderRequest) SetItemType(v string) *CreateLeaseOrderRequest {
	s.ItemType = &v
	return s
}

func (s *CreateLeaseOrderRequest) SetMerchantAlipayAccount(v string) *CreateLeaseOrderRequest {
	s.MerchantAlipayAccount = &v
	return s
}

func (s *CreateLeaseOrderRequest) SetMerchantAlipayId(v string) *CreateLeaseOrderRequest {
	s.MerchantAlipayId = &v
	return s
}

func (s *CreateLeaseOrderRequest) SetMerchantName(v string) *CreateLeaseOrderRequest {
	s.MerchantName = &v
	return s
}

func (s *CreateLeaseOrderRequest) SetMerchantOrderNo(v string) *CreateLeaseOrderRequest {
	s.MerchantOrderNo = &v
	return s
}

func (s *CreateLeaseOrderRequest) SetPaymentChannel(v string) *CreateLeaseOrderRequest {
	s.PaymentChannel = &v
	return s
}

func (s *CreateLeaseOrderRequest) SetTenancyTermEnd(v int64) *CreateLeaseOrderRequest {
	s.TenancyTermEnd = &v
	return s
}

func (s *CreateLeaseOrderRequest) SetTenancyTermStart(v int64) *CreateLeaseOrderRequest {
	s.TenancyTermStart = &v
	return s
}

func (s *CreateLeaseOrderRequest) SetInsured(v bool) *CreateLeaseOrderRequest {
	s.Insured = &v
	return s
}

func (s *CreateLeaseOrderRequest) SetInsuranceOrderUrl(v string) *CreateLeaseOrderRequest {
	s.InsuranceOrderUrl = &v
	return s
}

func (s *CreateLeaseOrderRequest) SetInsuranceBillNo(v string) *CreateLeaseOrderRequest {
	s.InsuranceBillNo = &v
	return s
}

func (s *CreateLeaseOrderRequest) SetInsuranceBillTime(v string) *CreateLeaseOrderRequest {
	s.InsuranceBillTime = &v
	return s
}

func (s *CreateLeaseOrderRequest) SetInsuranceBillAmount(v int64) *CreateLeaseOrderRequest {
	s.InsuranceBillAmount = &v
	return s
}

func (s *CreateLeaseOrderRequest) SetInsuranceProductCoverage(v int64) *CreateLeaseOrderRequest {
	s.InsuranceProductCoverage = &v
	return s
}

type CreateLeaseOrderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateLeaseOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseOrderResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseOrderResponse) SetReqMsgId(v string) *CreateLeaseOrderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseOrderResponse) SetResultCode(v string) *CreateLeaseOrderResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseOrderResponse) SetResultMsg(v string) *CreateLeaseOrderResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseOrderResponse) SetSuccess(v bool) *CreateLeaseOrderResponse {
	s.Success = &v
	return s
}

type CreateNotarizationBillRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 支付宝交易订单号
	AlipayOrderNo *string `json:"alipay_order_no,omitempty" xml:"alipay_order_no,omitempty"`
	// 支付宝用户ID
	AlipayUid *string `json:"alipay_uid,omitempty" xml:"alipay_uid,omitempty"`
	// 申请者名称
	CertName *string `json:"cert_name,omitempty" xml:"cert_name,omitempty"`
	// 申请者证件号码：身份证号码（个人用户）或企业统一社会信用代码（企业用户）
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty"`
	// 电子公证书业务细项，如“200”对应出生公证
	ENotarizationBiz *string `json:"e_notarization_biz,omitempty" xml:"e_notarization_biz,omitempty"`
	// 电子公证书下载地址
	ENotarizationDownloadUrl *string `json:"e_notarization_download_url,omitempty" xml:"e_notarization_download_url,omitempty"`
	// 电子公证书编号
	ENotarizationNo *string `json:"e_notarization_no,omitempty" xml:"e_notarization_no,omitempty"`
	// 电子公证书页数
	ENotarizationPageNo *string `json:"e_notarization_page_no,omitempty" xml:"e_notarization_page_no,omitempty"`
	// 电子公证书状态码
	ENotarizationStatus *string `json:"e_notarization_status,omitempty" xml:"e_notarization_status,omitempty"`
	// 电子公证书业务用途
	ENotarizationUsage *string `json:"e_notarization_usage,omitempty" xml:"e_notarization_usage,omitempty"`
	// 电子公证书有效期
	ENotarizationValidDate *string `json:"e_notarization_valid_date,omitempty" xml:"e_notarization_valid_date,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 企业法人姓名（企业用户必填）
	LegalPersonName *string `json:"legal_person_name,omitempty" xml:"legal_person_name,omitempty"`
	// 出证订单ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
	// 出证机构ID
	OrgId *string `json:"org_id,omitempty" xml:"org_id,omitempty"`
	// 支付宝交易订单支付金额（人民币），单位为分
	PaymentAmount *int64 `json:"payment_amount,omitempty" xml:"payment_amount,omitempty"`
	// 联系电话
	Phone *string `json:"phone,omitempty" xml:"phone,omitempty"`
	// 场景枚举：E_NOTARIZATION（电子公证），NOTARY_CERTIFICATION（存证证明）
	Scenario *string `json:"scenario,omitempty" xml:"scenario,omitempty" require:"true"`
	// 申请者身份类型，1个人，2企业
	UserType *int64 `json:"user_type,omitempty" xml:"user_type,omitempty"`
	// 是否为酬金分润方式，是则按照订金额一定比例分润，否则直接支付订单金额
	FeeSplitting *bool `json:"fee_splitting,omitempty" xml:"fee_splitting,omitempty" require:"true"`
}

func (s CreateNotarizationBillRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNotarizationBillRequest) GoString() string {
	return s.String()
}

func (s *CreateNotarizationBillRequest) SetAuthToken(v string) *CreateNotarizationBillRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateNotarizationBillRequest) SetProductInstanceId(v string) *CreateNotarizationBillRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateNotarizationBillRequest) SetAlipayOrderNo(v string) *CreateNotarizationBillRequest {
	s.AlipayOrderNo = &v
	return s
}

func (s *CreateNotarizationBillRequest) SetAlipayUid(v string) *CreateNotarizationBillRequest {
	s.AlipayUid = &v
	return s
}

func (s *CreateNotarizationBillRequest) SetCertName(v string) *CreateNotarizationBillRequest {
	s.CertName = &v
	return s
}

func (s *CreateNotarizationBillRequest) SetCertNo(v string) *CreateNotarizationBillRequest {
	s.CertNo = &v
	return s
}

func (s *CreateNotarizationBillRequest) SetENotarizationBiz(v string) *CreateNotarizationBillRequest {
	s.ENotarizationBiz = &v
	return s
}

func (s *CreateNotarizationBillRequest) SetENotarizationDownloadUrl(v string) *CreateNotarizationBillRequest {
	s.ENotarizationDownloadUrl = &v
	return s
}

func (s *CreateNotarizationBillRequest) SetENotarizationNo(v string) *CreateNotarizationBillRequest {
	s.ENotarizationNo = &v
	return s
}

func (s *CreateNotarizationBillRequest) SetENotarizationPageNo(v string) *CreateNotarizationBillRequest {
	s.ENotarizationPageNo = &v
	return s
}

func (s *CreateNotarizationBillRequest) SetENotarizationStatus(v string) *CreateNotarizationBillRequest {
	s.ENotarizationStatus = &v
	return s
}

func (s *CreateNotarizationBillRequest) SetENotarizationUsage(v string) *CreateNotarizationBillRequest {
	s.ENotarizationUsage = &v
	return s
}

func (s *CreateNotarizationBillRequest) SetENotarizationValidDate(v string) *CreateNotarizationBillRequest {
	s.ENotarizationValidDate = &v
	return s
}

func (s *CreateNotarizationBillRequest) SetLegalPersonName(v string) *CreateNotarizationBillRequest {
	s.LegalPersonName = &v
	return s
}

func (s *CreateNotarizationBillRequest) SetOrderId(v string) *CreateNotarizationBillRequest {
	s.OrderId = &v
	return s
}

func (s *CreateNotarizationBillRequest) SetOrgId(v string) *CreateNotarizationBillRequest {
	s.OrgId = &v
	return s
}

func (s *CreateNotarizationBillRequest) SetPaymentAmount(v int64) *CreateNotarizationBillRequest {
	s.PaymentAmount = &v
	return s
}

func (s *CreateNotarizationBillRequest) SetPhone(v string) *CreateNotarizationBillRequest {
	s.Phone = &v
	return s
}

func (s *CreateNotarizationBillRequest) SetScenario(v string) *CreateNotarizationBillRequest {
	s.Scenario = &v
	return s
}

func (s *CreateNotarizationBillRequest) SetUserType(v int64) *CreateNotarizationBillRequest {
	s.UserType = &v
	return s
}

func (s *CreateNotarizationBillRequest) SetFeeSplitting(v bool) *CreateNotarizationBillRequest {
	s.FeeSplitting = &v
	return s
}

type CreateNotarizationBillResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 计费订单是否创建成功
	Accepted *bool `json:"accepted,omitempty" xml:"accepted,omitempty"`
}

func (s CreateNotarizationBillResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNotarizationBillResponse) GoString() string {
	return s.String()
}

func (s *CreateNotarizationBillResponse) SetReqMsgId(v string) *CreateNotarizationBillResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateNotarizationBillResponse) SetResultCode(v string) *CreateNotarizationBillResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateNotarizationBillResponse) SetResultMsg(v string) *CreateNotarizationBillResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateNotarizationBillResponse) SetAccepted(v bool) *CreateNotarizationBillResponse {
	s.Accepted = &v
	return s
}

type InitCertificationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 申请人的身份信息
	Applier *Identity `json:"applier,omitempty" xml:"applier,omitempty" require:"true"`
	// 存证证明所要展示的存证信息，可填多个
	NotaryInfo []*NotaryInfo `json:"notary_info,omitempty" xml:"notary_info,omitempty" require:"true" type:"Repeated"`
	// 存证证明的类型：STANDARD（标准存证证明）或COPYRIGHT（版权存证证明），默认为COPYRIGHT
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s InitCertificationRequest) String() string {
	return tea.Prettify(s)
}

func (s InitCertificationRequest) GoString() string {
	return s.String()
}

func (s *InitCertificationRequest) SetAuthToken(v string) *InitCertificationRequest {
	s.AuthToken = &v
	return s
}

func (s *InitCertificationRequest) SetProductInstanceId(v string) *InitCertificationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *InitCertificationRequest) SetApplier(v *Identity) *InitCertificationRequest {
	s.Applier = v
	return s
}

func (s *InitCertificationRequest) SetNotaryInfo(v []*NotaryInfo) *InitCertificationRequest {
	s.NotaryInfo = v
	return s
}

func (s *InitCertificationRequest) SetType(v string) *InitCertificationRequest {
	s.Type = &v
	return s
}

type InitCertificationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回值状态码，0000则为成功
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 异常状态时的错误信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 后端生成的存证证明申请订单ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
	// 如果是记账模式则为空，其余情况返回支付宝SDK生成的支付内容信息
	PayContent *string `json:"pay_content,omitempty" xml:"pay_content,omitempty"`
}

func (s InitCertificationResponse) String() string {
	return tea.Prettify(s)
}

func (s InitCertificationResponse) GoString() string {
	return s.String()
}

func (s *InitCertificationResponse) SetReqMsgId(v string) *InitCertificationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InitCertificationResponse) SetResultCode(v string) *InitCertificationResponse {
	s.ResultCode = &v
	return s
}

func (s *InitCertificationResponse) SetResultMsg(v string) *InitCertificationResponse {
	s.ResultMsg = &v
	return s
}

func (s *InitCertificationResponse) SetCode(v string) *InitCertificationResponse {
	s.Code = &v
	return s
}

func (s *InitCertificationResponse) SetMessage(v string) *InitCertificationResponse {
	s.Message = &v
	return s
}

func (s *InitCertificationResponse) SetOrderId(v string) *InitCertificationResponse {
	s.OrderId = &v
	return s
}

func (s *InitCertificationResponse) SetPayContent(v string) *InitCertificationResponse {
	s.PayContent = &v
	return s
}

type QueryCertificationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证证明申请的订单ID
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
}

func (s QueryCertificationRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCertificationRequest) GoString() string {
	return s.String()
}

func (s *QueryCertificationRequest) SetAuthToken(v string) *QueryCertificationRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryCertificationRequest) SetProductInstanceId(v string) *QueryCertificationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryCertificationRequest) SetOrderId(v string) *QueryCertificationRequest {
	s.OrderId = &v
	return s
}

type QueryCertificationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证证明的证书信息列表
	CertificateInfo []*CertificateInfo `json:"certificate_info,omitempty" xml:"certificate_info,omitempty" type:"Repeated"`
	// 返回值状态码，0000则为成功
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 异常状态时的错误信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s QueryCertificationResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCertificationResponse) GoString() string {
	return s.String()
}

func (s *QueryCertificationResponse) SetReqMsgId(v string) *QueryCertificationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryCertificationResponse) SetResultCode(v string) *QueryCertificationResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryCertificationResponse) SetResultMsg(v string) *QueryCertificationResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryCertificationResponse) SetCertificateInfo(v []*CertificateInfo) *QueryCertificationResponse {
	s.CertificateInfo = v
	return s
}

func (s *QueryCertificationResponse) SetCode(v string) *QueryCertificationResponse {
	s.Code = &v
	return s
}

func (s *QueryCertificationResponse) SetMessage(v string) *QueryCertificationResponse {
	s.Message = &v
	return s
}

type GetTsrCertificateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
}

func (s GetTsrCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTsrCertificateRequest) GoString() string {
	return s.String()
}

func (s *GetTsrCertificateRequest) SetAuthToken(v string) *GetTsrCertificateRequest {
	s.AuthToken = &v
	return s
}

func (s *GetTsrCertificateRequest) SetProductInstanceId(v string) *GetTsrCertificateRequest {
	s.ProductInstanceId = &v
	return s
}

type GetTsrCertificateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s GetTsrCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTsrCertificateResponse) GoString() string {
	return s.String()
}

func (s *GetTsrCertificateResponse) SetReqMsgId(v string) *GetTsrCertificateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetTsrCertificateResponse) SetResultCode(v string) *GetTsrCertificateResponse {
	s.ResultCode = &v
	return s
}

func (s *GetTsrCertificateResponse) SetResultMsg(v string) *GetTsrCertificateResponse {
	s.ResultMsg = &v
	return s
}

type CreateIdentificationRealpersonRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 认证人的姓名
	CertName *string `json:"cert_name,omitempty" xml:"cert_name,omitempty" require:"true"`
	// 被验证者的身份证号码
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty" require:"true"`
	// 授权码，针对某些特定场景使用，非必填
	AuthCode *string `json:"auth_code,omitempty" xml:"auth_code,omitempty"`
	// 认证流程结束回调通知地址，非必传
	CallbackUrl *string `json:"callback_url,omitempty" xml:"callback_url,omitempty"`
	// 认证结束后跳转地址，非必填
	ReturnUrl *string `json:"return_url,omitempty" xml:"return_url,omitempty"`
}

func (s CreateIdentificationRealpersonRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateIdentificationRealpersonRequest) GoString() string {
	return s.String()
}

func (s *CreateIdentificationRealpersonRequest) SetAuthToken(v string) *CreateIdentificationRealpersonRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateIdentificationRealpersonRequest) SetProductInstanceId(v string) *CreateIdentificationRealpersonRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateIdentificationRealpersonRequest) SetCertName(v string) *CreateIdentificationRealpersonRequest {
	s.CertName = &v
	return s
}

func (s *CreateIdentificationRealpersonRequest) SetCertNo(v string) *CreateIdentificationRealpersonRequest {
	s.CertNo = &v
	return s
}

func (s *CreateIdentificationRealpersonRequest) SetAuthCode(v string) *CreateIdentificationRealpersonRequest {
	s.AuthCode = &v
	return s
}

func (s *CreateIdentificationRealpersonRequest) SetCallbackUrl(v string) *CreateIdentificationRealpersonRequest {
	s.CallbackUrl = &v
	return s
}

func (s *CreateIdentificationRealpersonRequest) SetReturnUrl(v string) *CreateIdentificationRealpersonRequest {
	s.ReturnUrl = &v
	return s
}

type CreateIdentificationRealpersonResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 实人认证流程ID
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty"`
	// 发起实人认证的地址
	CertifyUrl *string `json:"certify_url,omitempty" xml:"certify_url,omitempty"`
}

func (s CreateIdentificationRealpersonResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateIdentificationRealpersonResponse) GoString() string {
	return s.String()
}

func (s *CreateIdentificationRealpersonResponse) SetReqMsgId(v string) *CreateIdentificationRealpersonResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateIdentificationRealpersonResponse) SetResultCode(v string) *CreateIdentificationRealpersonResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateIdentificationRealpersonResponse) SetResultMsg(v string) *CreateIdentificationRealpersonResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateIdentificationRealpersonResponse) SetCertifyId(v string) *CreateIdentificationRealpersonResponse {
	s.CertifyId = &v
	return s
}

func (s *CreateIdentificationRealpersonResponse) SetCertifyUrl(v string) *CreateIdentificationRealpersonResponse {
	s.CertifyUrl = &v
	return s
}

type QueryIdentificationRealpersonRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实人认证流程ID
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty" require:"true"`
	// 授权码，针对某些特定场景使用，非必填
	AuthCode *string `json:"auth_code,omitempty" xml:"auth_code,omitempty"`
}

func (s QueryIdentificationRealpersonRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIdentificationRealpersonRequest) GoString() string {
	return s.String()
}

func (s *QueryIdentificationRealpersonRequest) SetAuthToken(v string) *QueryIdentificationRealpersonRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryIdentificationRealpersonRequest) SetProductInstanceId(v string) *QueryIdentificationRealpersonRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryIdentificationRealpersonRequest) SetCertifyId(v string) *QueryIdentificationRealpersonRequest {
	s.CertifyId = &v
	return s
}

func (s *QueryIdentificationRealpersonRequest) SetAuthCode(v string) *QueryIdentificationRealpersonRequest {
	s.AuthCode = &v
	return s
}

type QueryIdentificationRealpersonResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 实人认证流程ID
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty"`
	// 是否通过实人认证
	Passed *bool `json:"passed,omitempty" xml:"passed,omitempty"`
}

func (s QueryIdentificationRealpersonResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIdentificationRealpersonResponse) GoString() string {
	return s.String()
}

func (s *QueryIdentificationRealpersonResponse) SetReqMsgId(v string) *QueryIdentificationRealpersonResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryIdentificationRealpersonResponse) SetResultCode(v string) *QueryIdentificationRealpersonResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryIdentificationRealpersonResponse) SetResultMsg(v string) *QueryIdentificationRealpersonResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryIdentificationRealpersonResponse) SetCertifyId(v string) *QueryIdentificationRealpersonResponse {
	s.CertifyId = &v
	return s
}

func (s *QueryIdentificationRealpersonResponse) SetPassed(v bool) *QueryIdentificationRealpersonResponse {
	s.Passed = &v
	return s
}

type SaveJointconstraintRecordRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 收款账户
	BeneficiaryAccountCode *string `json:"beneficiary_account_code,omitempty" xml:"beneficiary_account_code,omitempty"`
	// 收款账户类型
	//
	// 1：支付宝
	BeneficiaryAccountType *int64 `json:"beneficiary_account_type,omitempty" xml:"beneficiary_account_type,omitempty"`
	// 应收方证件号码
	//
	//
	BeneficiaryCertNumber *string `json:"beneficiary_cert_number,omitempty" xml:"beneficiary_cert_number,omitempty" require:"true"`
	// 应收方证件类型
	//
	// 0：统一社会信用代码
	//
	// 1：身份证号码
	BeneficiaryCertType *int64 `json:"beneficiary_cert_type,omitempty" xml:"beneficiary_cert_type,omitempty" require:"true"`
	//
	// 应收方类型
	//
	// 0：企业
	//
	// 1：个人
	BeneficiaryType *int64 `json:"beneficiary_type,omitempty" xml:"beneficiary_type,omitempty" require:"true"`
	// 合同编号
	ContractCode *string `json:"contract_code,omitempty" xml:"contract_code,omitempty" require:"true"`
	// 合同履行记录标签
	ContractFulfillmentCode *string `json:"contract_fulfillment_code,omitempty" xml:"contract_fulfillment_code,omitempty" require:"true"`
	// 合同名称
	ContractName *string `json:"contract_name,omitempty" xml:"contract_name,omitempty" require:"true"`
	// 合同存证哈希
	ContractTxhash *string `json:"contract_txhash,omitempty" xml:"contract_txhash,omitempty" require:"true"`
	// 商户端合同链接
	//
	// 从智能合同小程序中跳转至商户端查看合同内容链接
	ExternalUrl *string `json:"external_url,omitempty" xml:"external_url,omitempty"`
	// 所属行业，来自合同
	//
	//
	IndustryCode *string `json:"industry_code,omitempty" xml:"industry_code,omitempty"`
	// 已付金额
	//
	//
	PaidAmount *string `json:"paid_amount,omitempty" xml:"paid_amount,omitempty"`
	// 支付凭据
	//
	//
	PaidProof *string `json:"paid_proof,omitempty" xml:"paid_proof,omitempty"`
	// 付款时间
	//
	//
	PaidTime *string `json:"paid_time,omitempty" xml:"paid_time,omitempty" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
	// 付款账户
	//
	//
	PayerAccountCode *string `json:"payer_account_code,omitempty" xml:"payer_account_code,omitempty"`
	//
	// 付款账户类型
	//
	// 1：支付宝
	PayerAccountType *int64 `json:"payer_account_type,omitempty" xml:"payer_account_type,omitempty"`
	// 应付方证件号码
	//
	//
	PayerCertNumber *string `json:"payer_cert_number,omitempty" xml:"payer_cert_number,omitempty" require:"true"`
	// 应付方证件类型
	//
	// 0：统一社会信用代码
	//
	// 1：身份证号码
	PayerCertType *int64 `json:"payer_cert_type,omitempty" xml:"payer_cert_type,omitempty" require:"true"`
	// 应付方类型
	//
	// 0：企业
	//
	// 1：个人
	PayerType *int64 `json:"payer_type,omitempty" xml:"payer_type,omitempty" require:"true"`
	// 履约标的金额
	//
	//
	PaymentAmount *string `json:"payment_amount,omitempty" xml:"payment_amount,omitempty" require:"true"`
	// 履约宽限期，单位：天
	//
	//
	PaymentDateBuffer *int64 `json:"payment_date_buffer,omitempty" xml:"payment_date_buffer,omitempty"`
	// 目标履约日期
	//
	//
	PaymentDeadline *string `json:"payment_deadline,omitempty" xml:"payment_deadline,omitempty" require:"true" pattern:"\\d{4}[-]\\d{1,2}[-]\\d{1,2}[T]\\d{2}:\\d{2}:\\d{2}([Z]|([\\.]\\d{1,9})?[\\+]\\d{2}[\\:]?\\d{2})"`
}

func (s SaveJointconstraintRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveJointconstraintRecordRequest) GoString() string {
	return s.String()
}

func (s *SaveJointconstraintRecordRequest) SetAuthToken(v string) *SaveJointconstraintRecordRequest {
	s.AuthToken = &v
	return s
}

func (s *SaveJointconstraintRecordRequest) SetProductInstanceId(v string) *SaveJointconstraintRecordRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SaveJointconstraintRecordRequest) SetBeneficiaryAccountCode(v string) *SaveJointconstraintRecordRequest {
	s.BeneficiaryAccountCode = &v
	return s
}

func (s *SaveJointconstraintRecordRequest) SetBeneficiaryAccountType(v int64) *SaveJointconstraintRecordRequest {
	s.BeneficiaryAccountType = &v
	return s
}

func (s *SaveJointconstraintRecordRequest) SetBeneficiaryCertNumber(v string) *SaveJointconstraintRecordRequest {
	s.BeneficiaryCertNumber = &v
	return s
}

func (s *SaveJointconstraintRecordRequest) SetBeneficiaryCertType(v int64) *SaveJointconstraintRecordRequest {
	s.BeneficiaryCertType = &v
	return s
}

func (s *SaveJointconstraintRecordRequest) SetBeneficiaryType(v int64) *SaveJointconstraintRecordRequest {
	s.BeneficiaryType = &v
	return s
}

func (s *SaveJointconstraintRecordRequest) SetContractCode(v string) *SaveJointconstraintRecordRequest {
	s.ContractCode = &v
	return s
}

func (s *SaveJointconstraintRecordRequest) SetContractFulfillmentCode(v string) *SaveJointconstraintRecordRequest {
	s.ContractFulfillmentCode = &v
	return s
}

func (s *SaveJointconstraintRecordRequest) SetContractName(v string) *SaveJointconstraintRecordRequest {
	s.ContractName = &v
	return s
}

func (s *SaveJointconstraintRecordRequest) SetContractTxhash(v string) *SaveJointconstraintRecordRequest {
	s.ContractTxhash = &v
	return s
}

func (s *SaveJointconstraintRecordRequest) SetExternalUrl(v string) *SaveJointconstraintRecordRequest {
	s.ExternalUrl = &v
	return s
}

func (s *SaveJointconstraintRecordRequest) SetIndustryCode(v string) *SaveJointconstraintRecordRequest {
	s.IndustryCode = &v
	return s
}

func (s *SaveJointconstraintRecordRequest) SetPaidAmount(v string) *SaveJointconstraintRecordRequest {
	s.PaidAmount = &v
	return s
}

func (s *SaveJointconstraintRecordRequest) SetPaidProof(v string) *SaveJointconstraintRecordRequest {
	s.PaidProof = &v
	return s
}

func (s *SaveJointconstraintRecordRequest) SetPaidTime(v string) *SaveJointconstraintRecordRequest {
	s.PaidTime = &v
	return s
}

func (s *SaveJointconstraintRecordRequest) SetPayerAccountCode(v string) *SaveJointconstraintRecordRequest {
	s.PayerAccountCode = &v
	return s
}

func (s *SaveJointconstraintRecordRequest) SetPayerAccountType(v int64) *SaveJointconstraintRecordRequest {
	s.PayerAccountType = &v
	return s
}

func (s *SaveJointconstraintRecordRequest) SetPayerCertNumber(v string) *SaveJointconstraintRecordRequest {
	s.PayerCertNumber = &v
	return s
}

func (s *SaveJointconstraintRecordRequest) SetPayerCertType(v int64) *SaveJointconstraintRecordRequest {
	s.PayerCertType = &v
	return s
}

func (s *SaveJointconstraintRecordRequest) SetPayerType(v int64) *SaveJointconstraintRecordRequest {
	s.PayerType = &v
	return s
}

func (s *SaveJointconstraintRecordRequest) SetPaymentAmount(v string) *SaveJointconstraintRecordRequest {
	s.PaymentAmount = &v
	return s
}

func (s *SaveJointconstraintRecordRequest) SetPaymentDateBuffer(v int64) *SaveJointconstraintRecordRequest {
	s.PaymentDateBuffer = &v
	return s
}

func (s *SaveJointconstraintRecordRequest) SetPaymentDeadline(v string) *SaveJointconstraintRecordRequest {
	s.PaymentDeadline = &v
	return s
}

type SaveJointconstraintRecordResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s SaveJointconstraintRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveJointconstraintRecordResponse) GoString() string {
	return s.String()
}

func (s *SaveJointconstraintRecordResponse) SetReqMsgId(v string) *SaveJointconstraintRecordResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SaveJointconstraintRecordResponse) SetResultCode(v string) *SaveJointconstraintRecordResponse {
	s.ResultCode = &v
	return s
}

func (s *SaveJointconstraintRecordResponse) SetResultMsg(v string) *SaveJointconstraintRecordResponse {
	s.ResultMsg = &v
	return s
}

type DeleteJointconstraintRecordRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 合同编号
	//
	//
	ContractCode *string `json:"contract_code,omitempty" xml:"contract_code,omitempty" require:"true"`
	// 合同履行记录标签
	//
	//
	ContractFulfillmentCode *string `json:"contract_fulfillment_code,omitempty" xml:"contract_fulfillment_code,omitempty" require:"true"`
	// 应付方证件号码
	//
	//
	PayerCertNumber *string `json:"payer_cert_number,omitempty" xml:"payer_cert_number,omitempty" require:"true"`
	// 应付方证件类型
	//
	// 0：统一社会信用代码
	//
	// 1：身份证号码
	PayerCertType *int64 `json:"payer_cert_type,omitempty" xml:"payer_cert_type,omitempty" require:"true"`
	// 应付方类型
	//
	// 0：企业
	//
	// 1：个人
	PayerType *int64 `json:"payer_type,omitempty" xml:"payer_type,omitempty" require:"true"`
}

func (s DeleteJointconstraintRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteJointconstraintRecordRequest) GoString() string {
	return s.String()
}

func (s *DeleteJointconstraintRecordRequest) SetAuthToken(v string) *DeleteJointconstraintRecordRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteJointconstraintRecordRequest) SetProductInstanceId(v string) *DeleteJointconstraintRecordRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteJointconstraintRecordRequest) SetContractCode(v string) *DeleteJointconstraintRecordRequest {
	s.ContractCode = &v
	return s
}

func (s *DeleteJointconstraintRecordRequest) SetContractFulfillmentCode(v string) *DeleteJointconstraintRecordRequest {
	s.ContractFulfillmentCode = &v
	return s
}

func (s *DeleteJointconstraintRecordRequest) SetPayerCertNumber(v string) *DeleteJointconstraintRecordRequest {
	s.PayerCertNumber = &v
	return s
}

func (s *DeleteJointconstraintRecordRequest) SetPayerCertType(v int64) *DeleteJointconstraintRecordRequest {
	s.PayerCertType = &v
	return s
}

func (s *DeleteJointconstraintRecordRequest) SetPayerType(v int64) *DeleteJointconstraintRecordRequest {
	s.PayerType = &v
	return s
}

type DeleteJointconstraintRecordResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeleteJointconstraintRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteJointconstraintRecordResponse) GoString() string {
	return s.String()
}

func (s *DeleteJointconstraintRecordResponse) SetReqMsgId(v string) *DeleteJointconstraintRecordResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteJointconstraintRecordResponse) SetResultCode(v string) *DeleteJointconstraintRecordResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteJointconstraintRecordResponse) SetResultMsg(v string) *DeleteJointconstraintRecordResponse {
	s.ResultMsg = &v
	return s
}

type QueryJointconstraintBreachrecordRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 查询对象实体类型
	//
	// 0：企业
	//
	// 1：个人
	EntityType *int64 `json:"entity_type,omitempty" xml:"entity_type,omitempty" require:"true"`
	// 对象实体证件类型
	//
	// 0：统一社会信用代码
	//
	// 1：身份证号码
	CertType *int64 `json:"cert_type,omitempty" xml:"cert_type,omitempty" require:"true"`
	// 对象实体证件号码
	//
	//
	CertNumber *string `json:"cert_number,omitempty" xml:"cert_number,omitempty" require:"true"`
}

func (s QueryJointconstraintBreachrecordRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryJointconstraintBreachrecordRequest) GoString() string {
	return s.String()
}

func (s *QueryJointconstraintBreachrecordRequest) SetAuthToken(v string) *QueryJointconstraintBreachrecordRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryJointconstraintBreachrecordRequest) SetProductInstanceId(v string) *QueryJointconstraintBreachrecordRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryJointconstraintBreachrecordRequest) SetEntityType(v int64) *QueryJointconstraintBreachrecordRequest {
	s.EntityType = &v
	return s
}

func (s *QueryJointconstraintBreachrecordRequest) SetCertType(v int64) *QueryJointconstraintBreachrecordRequest {
	s.CertType = &v
	return s
}

func (s *QueryJointconstraintBreachrecordRequest) SetCertNumber(v string) *QueryJointconstraintBreachrecordRequest {
	s.CertNumber = &v
	return s
}

type QueryJointconstraintBreachrecordResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否存在履行记录
	//
	//
	HasRecord *bool `json:"has_record,omitempty" xml:"has_record,omitempty"`
	// 违约次数
	//
	//
	BreachCount *int64 `json:"breach_count,omitempty" xml:"breach_count,omitempty"`
}

func (s QueryJointconstraintBreachrecordResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryJointconstraintBreachrecordResponse) GoString() string {
	return s.String()
}

func (s *QueryJointconstraintBreachrecordResponse) SetReqMsgId(v string) *QueryJointconstraintBreachrecordResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryJointconstraintBreachrecordResponse) SetResultCode(v string) *QueryJointconstraintBreachrecordResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryJointconstraintBreachrecordResponse) SetResultMsg(v string) *QueryJointconstraintBreachrecordResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryJointconstraintBreachrecordResponse) SetHasRecord(v bool) *QueryJointconstraintBreachrecordResponse {
	s.HasRecord = &v
	return s
}

func (s *QueryJointconstraintBreachrecordResponse) SetBreachCount(v int64) *QueryJointconstraintBreachrecordResponse {
	s.BreachCount = &v
	return s
}

type ApplyJusticeMediationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 机构码 由蚂蚁分配
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
	// 法院代码 由蚂蚁提供
	CourtCode *string `json:"court_code,omitempty" xml:"court_code,omitempty" require:"true"`
	// 案件内容 JsonString 格式{"agencyRelations":[],"agents":[],"caseInfo":{},"litigants":{}}
	CaseBody *string `json:"case_body,omitempty" xml:"case_body,omitempty" require:"true"`
}

func (s ApplyJusticeMediationRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyJusticeMediationRequest) GoString() string {
	return s.String()
}

func (s *ApplyJusticeMediationRequest) SetAuthToken(v string) *ApplyJusticeMediationRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyJusticeMediationRequest) SetProductInstanceId(v string) *ApplyJusticeMediationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyJusticeMediationRequest) SetProductCode(v string) *ApplyJusticeMediationRequest {
	s.ProductCode = &v
	return s
}

func (s *ApplyJusticeMediationRequest) SetCourtCode(v string) *ApplyJusticeMediationRequest {
	s.CourtCode = &v
	return s
}

func (s *ApplyJusticeMediationRequest) SetCaseBody(v string) *ApplyJusticeMediationRequest {
	s.CaseBody = &v
	return s
}

type ApplyJusticeMediationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s ApplyJusticeMediationResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyJusticeMediationResponse) GoString() string {
	return s.String()
}

func (s *ApplyJusticeMediationResponse) SetReqMsgId(v string) *ApplyJusticeMediationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyJusticeMediationResponse) SetResultCode(v string) *ApplyJusticeMediationResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyJusticeMediationResponse) SetResultMsg(v string) *ApplyJusticeMediationResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyJusticeMediationResponse) SetCode(v int64) *ApplyJusticeMediationResponse {
	s.Code = &v
	return s
}

func (s *ApplyJusticeMediationResponse) SetMessage(v string) *ApplyJusticeMediationResponse {
	s.Message = &v
	return s
}

type QueryJusticeMediationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 产品码 由蚂蚁分配
	//
	ProductCode *string `json:"product_code,omitempty" xml:"product_code,omitempty" require:"true"`
	// 案件编号
	CaseNumber *string `json:"case_number,omitempty" xml:"case_number,omitempty" require:"true"`
}

func (s QueryJusticeMediationRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryJusticeMediationRequest) GoString() string {
	return s.String()
}

func (s *QueryJusticeMediationRequest) SetAuthToken(v string) *QueryJusticeMediationRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryJusticeMediationRequest) SetProductInstanceId(v string) *QueryJusticeMediationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryJusticeMediationRequest) SetProductCode(v string) *QueryJusticeMediationRequest {
	s.ProductCode = &v
	return s
}

func (s *QueryJusticeMediationRequest) SetCaseNumber(v string) *QueryJusticeMediationRequest {
	s.CaseNumber = &v
	return s
}

type QueryJusticeMediationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 	业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 案件处理进度信息对象
	MediationCaseDetailInfo *string `json:"mediation_case_detail_info,omitempty" xml:"mediation_case_detail_info,omitempty"`
}

func (s QueryJusticeMediationResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryJusticeMediationResponse) GoString() string {
	return s.String()
}

func (s *QueryJusticeMediationResponse) SetReqMsgId(v string) *QueryJusticeMediationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryJusticeMediationResponse) SetResultCode(v string) *QueryJusticeMediationResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryJusticeMediationResponse) SetResultMsg(v string) *QueryJusticeMediationResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryJusticeMediationResponse) SetCode(v int64) *QueryJusticeMediationResponse {
	s.Code = &v
	return s
}

func (s *QueryJusticeMediationResponse) SetMessage(v string) *QueryJusticeMediationResponse {
	s.Message = &v
	return s
}

func (s *QueryJusticeMediationResponse) SetMediationCaseDetailInfo(v string) *QueryJusticeMediationResponse {
	s.MediationCaseDetailInfo = &v
	return s
}

type QueryJusticeCaseinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。clientToken只支持ASCII字符，且不能超过64个字符。
	ClientToken *string `json:"client_token,omitempty" xml:"client_token,omitempty" require:"true"`
	// 案件编号
	CaseNo *string `json:"case_no,omitempty" xml:"case_no,omitempty" require:"true"`
}

func (s QueryJusticeCaseinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryJusticeCaseinfoRequest) GoString() string {
	return s.String()
}

func (s *QueryJusticeCaseinfoRequest) SetAuthToken(v string) *QueryJusticeCaseinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryJusticeCaseinfoRequest) SetProductInstanceId(v string) *QueryJusticeCaseinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryJusticeCaseinfoRequest) SetClientToken(v string) *QueryJusticeCaseinfoRequest {
	s.ClientToken = &v
	return s
}

func (s *QueryJusticeCaseinfoRequest) SetCaseNo(v string) *QueryJusticeCaseinfoRequest {
	s.CaseNo = &v
	return s
}

type QueryJusticeCaseinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 查询的案件编号
	CaseNo *string `json:"case_no,omitempty" xml:"case_no,omitempty"`
	// 证据要素
	EvidentialElement *EvidentialElement `json:"evidential_element,omitempty" xml:"evidential_element,omitempty"`
	// 业务码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s QueryJusticeCaseinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryJusticeCaseinfoResponse) GoString() string {
	return s.String()
}

func (s *QueryJusticeCaseinfoResponse) SetReqMsgId(v string) *QueryJusticeCaseinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryJusticeCaseinfoResponse) SetResultCode(v string) *QueryJusticeCaseinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryJusticeCaseinfoResponse) SetResultMsg(v string) *QueryJusticeCaseinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryJusticeCaseinfoResponse) SetCaseNo(v string) *QueryJusticeCaseinfoResponse {
	s.CaseNo = &v
	return s
}

func (s *QueryJusticeCaseinfoResponse) SetEvidentialElement(v *EvidentialElement) *QueryJusticeCaseinfoResponse {
	s.EvidentialElement = v
	return s
}

func (s *QueryJusticeCaseinfoResponse) SetCode(v int64) *QueryJusticeCaseinfoResponse {
	s.Code = &v
	return s
}

func (s *QueryJusticeCaseinfoResponse) SetMessage(v string) *QueryJusticeCaseinfoResponse {
	s.Message = &v
	return s
}

type GetJusticeUploadfilepathRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 文件名称（最长128个字符）
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty" require:"true"`
	// 保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。clientToken只支持ASCII字符，且不能超过64个字符。
	ClientToken *string `json:"client_token,omitempty" xml:"client_token,omitempty"`
}

func (s GetJusticeUploadfilepathRequest) String() string {
	return tea.Prettify(s)
}

func (s GetJusticeUploadfilepathRequest) GoString() string {
	return s.String()
}

func (s *GetJusticeUploadfilepathRequest) SetAuthToken(v string) *GetJusticeUploadfilepathRequest {
	s.AuthToken = &v
	return s
}

func (s *GetJusticeUploadfilepathRequest) SetProductInstanceId(v string) *GetJusticeUploadfilepathRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetJusticeUploadfilepathRequest) SetFileName(v string) *GetJusticeUploadfilepathRequest {
	s.FileName = &v
	return s
}

func (s *GetJusticeUploadfilepathRequest) SetClientToken(v string) *GetJusticeUploadfilepathRequest {
	s.ClientToken = &v
	return s
}

type GetJusticeUploadfilepathResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// OSS上传链接
	UploadFileUrl *string `json:"upload_file_url,omitempty" xml:"upload_file_url,omitempty"`
	// 文件key
	FileKey *string `json:"file_key,omitempty" xml:"file_key,omitempty"`
	// 业务码 0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s GetJusticeUploadfilepathResponse) String() string {
	return tea.Prettify(s)
}

func (s GetJusticeUploadfilepathResponse) GoString() string {
	return s.String()
}

func (s *GetJusticeUploadfilepathResponse) SetReqMsgId(v string) *GetJusticeUploadfilepathResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetJusticeUploadfilepathResponse) SetResultCode(v string) *GetJusticeUploadfilepathResponse {
	s.ResultCode = &v
	return s
}

func (s *GetJusticeUploadfilepathResponse) SetResultMsg(v string) *GetJusticeUploadfilepathResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetJusticeUploadfilepathResponse) SetUploadFileUrl(v string) *GetJusticeUploadfilepathResponse {
	s.UploadFileUrl = &v
	return s
}

func (s *GetJusticeUploadfilepathResponse) SetFileKey(v string) *GetJusticeUploadfilepathResponse {
	s.FileKey = &v
	return s
}

func (s *GetJusticeUploadfilepathResponse) SetCode(v int64) *GetJusticeUploadfilepathResponse {
	s.Code = &v
	return s
}

func (s *GetJusticeUploadfilepathResponse) SetMessage(v string) *GetJusticeUploadfilepathResponse {
	s.Message = &v
	return s
}

type CreateJusticeCasewritebackRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。clientToken只支持ASCII字符，且不能超过64个字符。
	ClientToken *string `json:"client_token,omitempty" xml:"client_token,omitempty" require:"true"`
	// 自动进件案件基础信息
	CaseBasicInfo *CaseBasicInfo `json:"case_basic_info,omitempty" xml:"case_basic_info,omitempty" require:"true"`
	// 发起人对象列表
	ProposerObjects []*ProposerObject `json:"proposer_objects,omitempty" xml:"proposer_objects,omitempty" require:"true" type:"Repeated"`
	// 答辩人对象列表
	PleaderObjects []*PleaderObject `json:"pleader_objects,omitempty" xml:"pleader_objects,omitempty" require:"true" type:"Repeated"`
	// 自动进件证据要素
	LeaseEvidentialElement *LeaseEvidentialElement `json:"lease_evidential_element,omitempty" xml:"lease_evidential_element,omitempty" require:"true"`
	// 证据清单列表
	EvidentialCheckList []*EvidentialCheckList `json:"evidential_check_list,omitempty" xml:"evidential_check_list,omitempty" require:"true" type:"Repeated"`
}

func (s CreateJusticeCasewritebackRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateJusticeCasewritebackRequest) GoString() string {
	return s.String()
}

func (s *CreateJusticeCasewritebackRequest) SetAuthToken(v string) *CreateJusticeCasewritebackRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateJusticeCasewritebackRequest) SetProductInstanceId(v string) *CreateJusticeCasewritebackRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateJusticeCasewritebackRequest) SetClientToken(v string) *CreateJusticeCasewritebackRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateJusticeCasewritebackRequest) SetCaseBasicInfo(v *CaseBasicInfo) *CreateJusticeCasewritebackRequest {
	s.CaseBasicInfo = v
	return s
}

func (s *CreateJusticeCasewritebackRequest) SetProposerObjects(v []*ProposerObject) *CreateJusticeCasewritebackRequest {
	s.ProposerObjects = v
	return s
}

func (s *CreateJusticeCasewritebackRequest) SetPleaderObjects(v []*PleaderObject) *CreateJusticeCasewritebackRequest {
	s.PleaderObjects = v
	return s
}

func (s *CreateJusticeCasewritebackRequest) SetLeaseEvidentialElement(v *LeaseEvidentialElement) *CreateJusticeCasewritebackRequest {
	s.LeaseEvidentialElement = v
	return s
}

func (s *CreateJusticeCasewritebackRequest) SetEvidentialCheckList(v []*EvidentialCheckList) *CreateJusticeCasewritebackRequest {
	s.EvidentialCheckList = v
	return s
}

type CreateJusticeCasewritebackResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 创建成功状态
	// success, fail
	CreateStatus *string `json:"create_status,omitempty" xml:"create_status,omitempty"`
	// 创建状态说明
	CreateStatusMessage *string `json:"create_status_message,omitempty" xml:"create_status_message,omitempty"`
	// 创建时间（如创建成功，则返回创建日期时间）
	CreateTime *string `json:"create_time,omitempty" xml:"create_time,omitempty"`
	// 业务来源主键
	InputSourceId *string `json:"input_source_id,omitempty" xml:"input_source_id,omitempty"`
	// 案件ID
	CaseId *string `json:"case_id,omitempty" xml:"case_id,omitempty"`
	// 业务码 0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 业务码描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s CreateJusticeCasewritebackResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateJusticeCasewritebackResponse) GoString() string {
	return s.String()
}

func (s *CreateJusticeCasewritebackResponse) SetReqMsgId(v string) *CreateJusticeCasewritebackResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateJusticeCasewritebackResponse) SetResultCode(v string) *CreateJusticeCasewritebackResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateJusticeCasewritebackResponse) SetResultMsg(v string) *CreateJusticeCasewritebackResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateJusticeCasewritebackResponse) SetCreateStatus(v string) *CreateJusticeCasewritebackResponse {
	s.CreateStatus = &v
	return s
}

func (s *CreateJusticeCasewritebackResponse) SetCreateStatusMessage(v string) *CreateJusticeCasewritebackResponse {
	s.CreateStatusMessage = &v
	return s
}

func (s *CreateJusticeCasewritebackResponse) SetCreateTime(v string) *CreateJusticeCasewritebackResponse {
	s.CreateTime = &v
	return s
}

func (s *CreateJusticeCasewritebackResponse) SetInputSourceId(v string) *CreateJusticeCasewritebackResponse {
	s.InputSourceId = &v
	return s
}

func (s *CreateJusticeCasewritebackResponse) SetCaseId(v string) *CreateJusticeCasewritebackResponse {
	s.CaseId = &v
	return s
}

func (s *CreateJusticeCasewritebackResponse) SetCode(v int64) *CreateJusticeCasewritebackResponse {
	s.Code = &v
	return s
}

func (s *CreateJusticeCasewritebackResponse) SetMessage(v string) *CreateJusticeCasewritebackResponse {
	s.Message = &v
	return s
}

type QueryJusticeBasecaseRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 针对案件信息查询的索引方式，01为根据案件caseID索引，02为根据申请人的统一社会信用代码与业务订单号进行索引
	IndexMethod *string `json:"index_method,omitempty" xml:"index_method,omitempty" require:"true"`
	// 纠纷处理平台后台唯一的caseID 当索引方式为01时必填
	CaseId *string `json:"case_id,omitempty" xml:"case_id,omitempty"`
	// 案件申请人（企业）的统一社会信用代码 当索引方式为02时必填
	IdNumber *string `json:"id_number,omitempty" xml:"id_number,omitempty"`
	// 案件的业务订单ID 当索引方式为02时必填
	BusinessNumber *string `json:"business_number,omitempty" xml:"business_number,omitempty"`
}

func (s QueryJusticeBasecaseRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryJusticeBasecaseRequest) GoString() string {
	return s.String()
}

func (s *QueryJusticeBasecaseRequest) SetAuthToken(v string) *QueryJusticeBasecaseRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryJusticeBasecaseRequest) SetProductInstanceId(v string) *QueryJusticeBasecaseRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryJusticeBasecaseRequest) SetIndexMethod(v string) *QueryJusticeBasecaseRequest {
	s.IndexMethod = &v
	return s
}

func (s *QueryJusticeBasecaseRequest) SetCaseId(v string) *QueryJusticeBasecaseRequest {
	s.CaseId = &v
	return s
}

func (s *QueryJusticeBasecaseRequest) SetIdNumber(v string) *QueryJusticeBasecaseRequest {
	s.IdNumber = &v
	return s
}

func (s *QueryJusticeBasecaseRequest) SetBusinessNumber(v string) *QueryJusticeBasecaseRequest {
	s.BusinessNumber = &v
	return s
}

type QueryJusticeBasecaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功 其余都是代表失败
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 案件基础信息出参
	CaseBaseInfoList []*CaseBaseInfo `json:"case_base_info_list,omitempty" xml:"case_base_info_list,omitempty" type:"Repeated"`
	// 响应的详细信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s QueryJusticeBasecaseResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryJusticeBasecaseResponse) GoString() string {
	return s.String()
}

func (s *QueryJusticeBasecaseResponse) SetReqMsgId(v string) *QueryJusticeBasecaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryJusticeBasecaseResponse) SetResultCode(v string) *QueryJusticeBasecaseResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryJusticeBasecaseResponse) SetResultMsg(v string) *QueryJusticeBasecaseResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryJusticeBasecaseResponse) SetCode(v int64) *QueryJusticeBasecaseResponse {
	s.Code = &v
	return s
}

func (s *QueryJusticeBasecaseResponse) SetCaseBaseInfoList(v []*CaseBaseInfo) *QueryJusticeBasecaseResponse {
	s.CaseBaseInfoList = v
	return s
}

func (s *QueryJusticeBasecaseResponse) SetMessage(v string) *QueryJusticeBasecaseResponse {
	s.Message = &v
	return s
}

type DownloadJusticeCasefileRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 案件id
	CaseId *string `json:"case_id,omitempty" xml:"case_id,omitempty" require:"true"`
	// 维权记录id
	RecordId *string `json:"record_id,omitempty" xml:"record_id,omitempty" require:"true"`
}

func (s DownloadJusticeCasefileRequest) String() string {
	return tea.Prettify(s)
}

func (s DownloadJusticeCasefileRequest) GoString() string {
	return s.String()
}

func (s *DownloadJusticeCasefileRequest) SetAuthToken(v string) *DownloadJusticeCasefileRequest {
	s.AuthToken = &v
	return s
}

func (s *DownloadJusticeCasefileRequest) SetProductInstanceId(v string) *DownloadJusticeCasefileRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DownloadJusticeCasefileRequest) SetCaseId(v string) *DownloadJusticeCasefileRequest {
	s.CaseId = &v
	return s
}

func (s *DownloadJusticeCasefileRequest) SetRecordId(v string) *DownloadJusticeCasefileRequest {
	s.RecordId = &v
	return s
}

type DownloadJusticeCasefileResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务码，0表示成功 其余都是代表失败
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 文件下载地址 默认24小时内有效
	DownloadUrl *string `json:"download_url,omitempty" xml:"download_url,omitempty"`
	// 响应的详细信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s DownloadJusticeCasefileResponse) String() string {
	return tea.Prettify(s)
}

func (s DownloadJusticeCasefileResponse) GoString() string {
	return s.String()
}

func (s *DownloadJusticeCasefileResponse) SetReqMsgId(v string) *DownloadJusticeCasefileResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DownloadJusticeCasefileResponse) SetResultCode(v string) *DownloadJusticeCasefileResponse {
	s.ResultCode = &v
	return s
}

func (s *DownloadJusticeCasefileResponse) SetResultMsg(v string) *DownloadJusticeCasefileResponse {
	s.ResultMsg = &v
	return s
}

func (s *DownloadJusticeCasefileResponse) SetCode(v int64) *DownloadJusticeCasefileResponse {
	s.Code = &v
	return s
}

func (s *DownloadJusticeCasefileResponse) SetDownloadUrl(v string) *DownloadJusticeCasefileResponse {
	s.DownloadUrl = &v
	return s
}

func (s *DownloadJusticeCasefileResponse) SetMessage(v string) *DownloadJusticeCasefileResponse {
	s.Message = &v
	return s
}

type OpenInternalJudicialRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 授权开通纠纷行业的真实租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 调用接口的授权码
	AuthCode *string `json:"auth_code,omitempty" xml:"auth_code,omitempty" require:"true"`
}

func (s OpenInternalJudicialRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenInternalJudicialRequest) GoString() string {
	return s.String()
}

func (s *OpenInternalJudicialRequest) SetAuthToken(v string) *OpenInternalJudicialRequest {
	s.AuthToken = &v
	return s
}

func (s *OpenInternalJudicialRequest) SetProductInstanceId(v string) *OpenInternalJudicialRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *OpenInternalJudicialRequest) SetTenantId(v string) *OpenInternalJudicialRequest {
	s.TenantId = &v
	return s
}

func (s *OpenInternalJudicialRequest) SetAuthCode(v string) *OpenInternalJudicialRequest {
	s.AuthCode = &v
	return s
}

type OpenInternalJudicialResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务响应码 0成功 其余都是失败
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 状态码描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s OpenInternalJudicialResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenInternalJudicialResponse) GoString() string {
	return s.String()
}

func (s *OpenInternalJudicialResponse) SetReqMsgId(v string) *OpenInternalJudicialResponse {
	s.ReqMsgId = &v
	return s
}

func (s *OpenInternalJudicialResponse) SetResultCode(v string) *OpenInternalJudicialResponse {
	s.ResultCode = &v
	return s
}

func (s *OpenInternalJudicialResponse) SetResultMsg(v string) *OpenInternalJudicialResponse {
	s.ResultMsg = &v
	return s
}

func (s *OpenInternalJudicialResponse) SetCode(v string) *OpenInternalJudicialResponse {
	s.Code = &v
	return s
}

func (s *OpenInternalJudicialResponse) SetMessage(v string) *OpenInternalJudicialResponse {
	s.Message = &v
	return s
}

type SaveJusticePartyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 委托申请方配置ID
	PartyId *int64 `json:"party_id,omitempty" xml:"party_id,omitempty"`
	// 委托申请方类型,目前仅支持企业.
	// 个人: PERSON
	// 企业:ORG
	PartyType *string `json:"party_type,omitempty" xml:"party_type,omitempty" require:"true"`
	// 企业信息实体;
	// 当申请方类型为企业时,该字段必填;
	PartyOrganizationInfo *JudicialOrgInfo `json:"party_organization_info,omitempty" xml:"party_organization_info,omitempty"`
	// 案件协同工作联系人信息实体
	CoordinatorPersonInfo *JudicialPersonInfo `json:"coordinator_person_info,omitempty" xml:"coordinator_person_info,omitempty"`
	// 案件协同人银行账户信息
	CoordinatorBankInfo *JudicialBankInfo `json:"coordinator_bank_info,omitempty" xml:"coordinator_bank_info,omitempty"`
	// adsada
	SubTenantId *string `json:"sub_tenant_id,omitempty" xml:"sub_tenant_id,omitempty"`
	// 默认为空,true表示为二级商户创建或者修改申请人,sub_tenant_id不能为空,
	// false表示为当前商户创建或者修改申请人,sub_tenant_id为空
	AgentCreateParty *bool `json:"agent_create_party,omitempty" xml:"agent_create_party,omitempty"`
}

func (s SaveJusticePartyRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveJusticePartyRequest) GoString() string {
	return s.String()
}

func (s *SaveJusticePartyRequest) SetAuthToken(v string) *SaveJusticePartyRequest {
	s.AuthToken = &v
	return s
}

func (s *SaveJusticePartyRequest) SetProductInstanceId(v string) *SaveJusticePartyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SaveJusticePartyRequest) SetPartyId(v int64) *SaveJusticePartyRequest {
	s.PartyId = &v
	return s
}

func (s *SaveJusticePartyRequest) SetPartyType(v string) *SaveJusticePartyRequest {
	s.PartyType = &v
	return s
}

func (s *SaveJusticePartyRequest) SetPartyOrganizationInfo(v *JudicialOrgInfo) *SaveJusticePartyRequest {
	s.PartyOrganizationInfo = v
	return s
}

func (s *SaveJusticePartyRequest) SetCoordinatorPersonInfo(v *JudicialPersonInfo) *SaveJusticePartyRequest {
	s.CoordinatorPersonInfo = v
	return s
}

func (s *SaveJusticePartyRequest) SetCoordinatorBankInfo(v *JudicialBankInfo) *SaveJusticePartyRequest {
	s.CoordinatorBankInfo = v
	return s
}

func (s *SaveJusticePartyRequest) SetSubTenantId(v string) *SaveJusticePartyRequest {
	s.SubTenantId = &v
	return s
}

func (s *SaveJusticePartyRequest) SetAgentCreateParty(v bool) *SaveJusticePartyRequest {
	s.AgentCreateParty = &v
	return s
}

type SaveJusticePartyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否保存成功,true,false
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// 委托申请方配置ID
	PartyId *int64 `json:"party_id,omitempty" xml:"party_id,omitempty"`
}

func (s SaveJusticePartyResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveJusticePartyResponse) GoString() string {
	return s.String()
}

func (s *SaveJusticePartyResponse) SetReqMsgId(v string) *SaveJusticePartyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SaveJusticePartyResponse) SetResultCode(v string) *SaveJusticePartyResponse {
	s.ResultCode = &v
	return s
}

func (s *SaveJusticePartyResponse) SetResultMsg(v string) *SaveJusticePartyResponse {
	s.ResultMsg = &v
	return s
}

func (s *SaveJusticePartyResponse) SetSuccess(v bool) *SaveJusticePartyResponse {
	s.Success = &v
	return s
}

func (s *SaveJusticePartyResponse) SetPartyId(v int64) *SaveJusticePartyResponse {
	s.PartyId = &v
	return s
}

type CreateJusticeNormalcaseRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 案由
	CaseReason *string `json:"case_reason,omitempty" xml:"case_reason,omitempty" require:"true"`
	// 业务类型
	// LEASE- 租赁
	// HB_FINANCIAL - HB金融
	CaseType *string `json:"case_type,omitempty" xml:"case_type,omitempty" require:"true"`
	// 外部业务ID
	ExternalBizId *string `json:"external_biz_id,omitempty" xml:"external_biz_id,omitempty" require:"true"`
	// 业务描述,用于案件的补充描述; 没有则不填
	CaseDesc *string `json:"case_desc,omitempty" xml:"case_desc,omitempty"`
	// 针对对应业务类型的案件要素补充.
	CaseBizElementInfo *string `json:"case_biz_element_info,omitempty" xml:"case_biz_element_info,omitempty"`
	// 当事人(申请人)ID, 案件填充信息返回
	PartyId *int64 `json:"party_id,omitempty" xml:"party_id,omitempty" require:"true"`
	// 答辩人类型, 目前仅支持个人.
	// PERSON , 个人
	// ORG , 机构
	PleaderType *string `json:"pleader_type,omitempty" xml:"pleader_type,omitempty"`
	// 答辩人(自然人)信息, 类型为个人时必填
	PleaderPersonInfo *JudicialPersonInfo `json:"pleader_person_info,omitempty" xml:"pleader_person_info,omitempty"`
	// 是否使用模板
	UseTemplate *bool `json:"use_template,omitempty" xml:"use_template,omitempty"`
	// 使用模板时必填，根据案件要素模板对应提供要素信息
	BusinessInfo *string `json:"business_info,omitempty" xml:"business_info,omitempty"`
	// 使用模板时必填，根据案件要素模板对应提供证据信息
	EvidenceInfo *string `json:"evidence_info,omitempty" xml:"evidence_info,omitempty"`
}

func (s CreateJusticeNormalcaseRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateJusticeNormalcaseRequest) GoString() string {
	return s.String()
}

func (s *CreateJusticeNormalcaseRequest) SetAuthToken(v string) *CreateJusticeNormalcaseRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateJusticeNormalcaseRequest) SetProductInstanceId(v string) *CreateJusticeNormalcaseRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateJusticeNormalcaseRequest) SetCaseReason(v string) *CreateJusticeNormalcaseRequest {
	s.CaseReason = &v
	return s
}

func (s *CreateJusticeNormalcaseRequest) SetCaseType(v string) *CreateJusticeNormalcaseRequest {
	s.CaseType = &v
	return s
}

func (s *CreateJusticeNormalcaseRequest) SetExternalBizId(v string) *CreateJusticeNormalcaseRequest {
	s.ExternalBizId = &v
	return s
}

func (s *CreateJusticeNormalcaseRequest) SetCaseDesc(v string) *CreateJusticeNormalcaseRequest {
	s.CaseDesc = &v
	return s
}

func (s *CreateJusticeNormalcaseRequest) SetCaseBizElementInfo(v string) *CreateJusticeNormalcaseRequest {
	s.CaseBizElementInfo = &v
	return s
}

func (s *CreateJusticeNormalcaseRequest) SetPartyId(v int64) *CreateJusticeNormalcaseRequest {
	s.PartyId = &v
	return s
}

func (s *CreateJusticeNormalcaseRequest) SetPleaderType(v string) *CreateJusticeNormalcaseRequest {
	s.PleaderType = &v
	return s
}

func (s *CreateJusticeNormalcaseRequest) SetPleaderPersonInfo(v *JudicialPersonInfo) *CreateJusticeNormalcaseRequest {
	s.PleaderPersonInfo = v
	return s
}

func (s *CreateJusticeNormalcaseRequest) SetUseTemplate(v bool) *CreateJusticeNormalcaseRequest {
	s.UseTemplate = &v
	return s
}

func (s *CreateJusticeNormalcaseRequest) SetBusinessInfo(v string) *CreateJusticeNormalcaseRequest {
	s.BusinessInfo = &v
	return s
}

func (s *CreateJusticeNormalcaseRequest) SetEvidenceInfo(v string) *CreateJusticeNormalcaseRequest {
	s.EvidenceInfo = &v
	return s
}

type CreateJusticeNormalcaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 案件创建是否成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// 案件ID, 创建成功后, 返回的案件ID
	CaseId *int64 `json:"case_id,omitempty" xml:"case_id,omitempty"`
}

func (s CreateJusticeNormalcaseResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateJusticeNormalcaseResponse) GoString() string {
	return s.String()
}

func (s *CreateJusticeNormalcaseResponse) SetReqMsgId(v string) *CreateJusticeNormalcaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateJusticeNormalcaseResponse) SetResultCode(v string) *CreateJusticeNormalcaseResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateJusticeNormalcaseResponse) SetResultMsg(v string) *CreateJusticeNormalcaseResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateJusticeNormalcaseResponse) SetSuccess(v bool) *CreateJusticeNormalcaseResponse {
	s.Success = &v
	return s
}

func (s *CreateJusticeNormalcaseResponse) SetCaseId(v int64) *CreateJusticeNormalcaseResponse {
	s.CaseId = &v
	return s
}

type CreateJusticeChaincaseRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 案由
	CaseReason *string `json:"case_reason,omitempty" xml:"case_reason,omitempty" require:"true"`
	// 业务类型
	// LEASE- 租赁
	// HB_FINANCIAL - HB金融,其他不支持
	CaseType *string `json:"case_type,omitempty" xml:"case_type,omitempty" require:"true"`
	// 外部业务ID
	ExternalBizId *string `json:"external_biz_id,omitempty" xml:"external_biz_id,omitempty" require:"true"`
	// 业务描述,用于案件的补充描述; 没有则不填
	CaseDesc *string `json:"case_desc,omitempty" xml:"case_desc,omitempty"`
	// 当事人(申请人)ID, 案件填充信息返回
	PartyId *int64 `json:"party_id,omitempty" xml:"party_id,omitempty" require:"true"`
	// 全流程存证信息
	NotaryFlowInfos []*NotaryFlowDetailQueryReq `json:"notary_flow_infos,omitempty" xml:"notary_flow_infos,omitempty" require:"true" type:"Repeated"`
}

func (s CreateJusticeChaincaseRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateJusticeChaincaseRequest) GoString() string {
	return s.String()
}

func (s *CreateJusticeChaincaseRequest) SetAuthToken(v string) *CreateJusticeChaincaseRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateJusticeChaincaseRequest) SetProductInstanceId(v string) *CreateJusticeChaincaseRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateJusticeChaincaseRequest) SetCaseReason(v string) *CreateJusticeChaincaseRequest {
	s.CaseReason = &v
	return s
}

func (s *CreateJusticeChaincaseRequest) SetCaseType(v string) *CreateJusticeChaincaseRequest {
	s.CaseType = &v
	return s
}

func (s *CreateJusticeChaincaseRequest) SetExternalBizId(v string) *CreateJusticeChaincaseRequest {
	s.ExternalBizId = &v
	return s
}

func (s *CreateJusticeChaincaseRequest) SetCaseDesc(v string) *CreateJusticeChaincaseRequest {
	s.CaseDesc = &v
	return s
}

func (s *CreateJusticeChaincaseRequest) SetPartyId(v int64) *CreateJusticeChaincaseRequest {
	s.PartyId = &v
	return s
}

func (s *CreateJusticeChaincaseRequest) SetNotaryFlowInfos(v []*NotaryFlowDetailQueryReq) *CreateJusticeChaincaseRequest {
	s.NotaryFlowInfos = v
	return s
}

type CreateJusticeChaincaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 案件创建是否成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// 案件ID, 创建成功后, 返回的案件ID
	CaseId *int64 `json:"case_id,omitempty" xml:"case_id,omitempty"`
}

func (s CreateJusticeChaincaseResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateJusticeChaincaseResponse) GoString() string {
	return s.String()
}

func (s *CreateJusticeChaincaseResponse) SetReqMsgId(v string) *CreateJusticeChaincaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateJusticeChaincaseResponse) SetResultCode(v string) *CreateJusticeChaincaseResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateJusticeChaincaseResponse) SetResultMsg(v string) *CreateJusticeChaincaseResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateJusticeChaincaseResponse) SetSuccess(v bool) *CreateJusticeChaincaseResponse {
	s.Success = &v
	return s
}

func (s *CreateJusticeChaincaseResponse) SetCaseId(v int64) *CreateJusticeChaincaseResponse {
	s.CaseId = &v
	return s
}

type StartJusticeCaseRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 案件Id,创建案件返回的id
	CaseId *int64 `json:"case_id,omitempty" xml:"case_id,omitempty" require:"true"`
	// 处置端租户ID
	IsvTenantId *string `json:"isv_tenant_id,omitempty" xml:"isv_tenant_id,omitempty" require:"true"`
	// 处置方式
	// JUDICIAL_MEDIATION-司法调解
	JudicialBizType *string `json:"judicial_biz_type,omitempty" xml:"judicial_biz_type,omitempty" require:"true"`
	// 司法调解基础参数, 当处置方式为5, 必填.
	JudicialMediationParam *JudicialMediationBaseParamInfo `json:"judicial_mediation_param,omitempty" xml:"judicial_mediation_param,omitempty"`
	// 调解沟通联系人(如果不传则使用租户维度的配置信息)
	ContactInfo *ContactInfo `json:"contact_info,omitempty" xml:"contact_info,omitempty"`
	// 调解回款银行账户(如果不传则使用租户维度的配置信息)
	BankAccountInfo *BankAccountInfo `json:"bank_account_info,omitempty" xml:"bank_account_info,omitempty"`
	// 维权类型为仲裁时填写:SIGN_SILENTLY-静默签署,SIGN_MANUALLY-人工签署
	SignMethod *string `json:"sign_method,omitempty" xml:"sign_method,omitempty"`
	// 仲裁委,提交仲裁时必填 41952695X: 宁波仲裁委 123325004722618740: 丽水仲裁委
	CourtCode *string `json:"court_code,omitempty" xml:"court_code,omitempty"`
	// 标的额,提交仲裁时必填
	Amount *string `json:"amount,omitempty" xml:"amount,omitempty"`
}

func (s StartJusticeCaseRequest) String() string {
	return tea.Prettify(s)
}

func (s StartJusticeCaseRequest) GoString() string {
	return s.String()
}

func (s *StartJusticeCaseRequest) SetAuthToken(v string) *StartJusticeCaseRequest {
	s.AuthToken = &v
	return s
}

func (s *StartJusticeCaseRequest) SetProductInstanceId(v string) *StartJusticeCaseRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *StartJusticeCaseRequest) SetCaseId(v int64) *StartJusticeCaseRequest {
	s.CaseId = &v
	return s
}

func (s *StartJusticeCaseRequest) SetIsvTenantId(v string) *StartJusticeCaseRequest {
	s.IsvTenantId = &v
	return s
}

func (s *StartJusticeCaseRequest) SetJudicialBizType(v string) *StartJusticeCaseRequest {
	s.JudicialBizType = &v
	return s
}

func (s *StartJusticeCaseRequest) SetJudicialMediationParam(v *JudicialMediationBaseParamInfo) *StartJusticeCaseRequest {
	s.JudicialMediationParam = v
	return s
}

func (s *StartJusticeCaseRequest) SetContactInfo(v *ContactInfo) *StartJusticeCaseRequest {
	s.ContactInfo = v
	return s
}

func (s *StartJusticeCaseRequest) SetBankAccountInfo(v *BankAccountInfo) *StartJusticeCaseRequest {
	s.BankAccountInfo = v
	return s
}

func (s *StartJusticeCaseRequest) SetSignMethod(v string) *StartJusticeCaseRequest {
	s.SignMethod = &v
	return s
}

func (s *StartJusticeCaseRequest) SetCourtCode(v string) *StartJusticeCaseRequest {
	s.CourtCode = &v
	return s
}

func (s *StartJusticeCaseRequest) SetAmount(v string) *StartJusticeCaseRequest {
	s.Amount = &v
	return s
}

type StartJusticeCaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 维权记录ID, 维权成功后,返回的对应的维权记录ID
	RecordId *int64 `json:"record_id,omitempty" xml:"record_id,omitempty"`
	// 案件发起是否成功,true,false
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s StartJusticeCaseResponse) String() string {
	return tea.Prettify(s)
}

func (s StartJusticeCaseResponse) GoString() string {
	return s.String()
}

func (s *StartJusticeCaseResponse) SetReqMsgId(v string) *StartJusticeCaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *StartJusticeCaseResponse) SetResultCode(v string) *StartJusticeCaseResponse {
	s.ResultCode = &v
	return s
}

func (s *StartJusticeCaseResponse) SetResultMsg(v string) *StartJusticeCaseResponse {
	s.ResultMsg = &v
	return s
}

func (s *StartJusticeCaseResponse) SetRecordId(v int64) *StartJusticeCaseResponse {
	s.RecordId = &v
	return s
}

func (s *StartJusticeCaseResponse) SetSuccess(v bool) *StartJusticeCaseResponse {
	s.Success = &v
	return s
}

type QueryJusticeCaseRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 案件Id,创建案件返回的id
	CaseId *int64 `json:"case_id,omitempty" xml:"case_id,omitempty" require:"true"`
	// 维权记录ID, 维权成功后,返回的对应的维权记录ID
	RecordId *int64 `json:"record_id,omitempty" xml:"record_id,omitempty"`
}

func (s QueryJusticeCaseRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryJusticeCaseRequest) GoString() string {
	return s.String()
}

func (s *QueryJusticeCaseRequest) SetAuthToken(v string) *QueryJusticeCaseRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryJusticeCaseRequest) SetProductInstanceId(v string) *QueryJusticeCaseRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryJusticeCaseRequest) SetCaseId(v int64) *QueryJusticeCaseRequest {
	s.CaseId = &v
	return s
}

func (s *QueryJusticeCaseRequest) SetRecordId(v int64) *QueryJusticeCaseRequest {
	s.RecordId = &v
	return s
}

type QueryJusticeCaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 案件ID
	CaseId *int64 `json:"case_id,omitempty" xml:"case_id,omitempty"`
	// 维权记录ID
	RecordId *int64 `json:"record_id,omitempty" xml:"record_id,omitempty"`
	// 外部业务id
	ExternalBizId *string `json:"external_biz_id,omitempty" xml:"external_biz_id,omitempty"`
	// 案件阶段
	// 待发起维权
	// 待提交
	// 收案处理中
	// 结果待确认
	// 已关闭
	CasePhaseDesc *string `json:"case_phase_desc,omitempty" xml:"case_phase_desc,omitempty"`
	// 维权方式, (目前仅支持司法调解)
	// 诉讼-2
	// 仲裁-3
	// 仲裁执行-4
	// 司法调解-5
	JudicialRecordTypeDesc *string `json:"judicial_record_type_desc,omitempty" xml:"judicial_record_type_desc,omitempty"`
	// 维权状态字段描述.
	//
	JudicialRecordStatusDesc *string `json:"judicial_record_status_desc,omitempty" xml:"judicial_record_status_desc,omitempty"`
	// "yyyy-MM-dd" , 当前的状态更新时间
	JudicialRecordStatusTime *string `json:"judicial_record_status_time,omitempty" xml:"judicial_record_status_time,omitempty"`
	// 维权过程中的文件列表
	JudicialFiles []*JudicialFileInfo `json:"judicial_files,omitempty" xml:"judicial_files,omitempty" type:"Repeated"`
	// 案件提交失败的原因,维权状态为提交失败时存在
	SubmitErrorMsg *string `json:"submit_error_msg,omitempty" xml:"submit_error_msg,omitempty"`
}

func (s QueryJusticeCaseResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryJusticeCaseResponse) GoString() string {
	return s.String()
}

func (s *QueryJusticeCaseResponse) SetReqMsgId(v string) *QueryJusticeCaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryJusticeCaseResponse) SetResultCode(v string) *QueryJusticeCaseResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryJusticeCaseResponse) SetResultMsg(v string) *QueryJusticeCaseResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryJusticeCaseResponse) SetCaseId(v int64) *QueryJusticeCaseResponse {
	s.CaseId = &v
	return s
}

func (s *QueryJusticeCaseResponse) SetRecordId(v int64) *QueryJusticeCaseResponse {
	s.RecordId = &v
	return s
}

func (s *QueryJusticeCaseResponse) SetExternalBizId(v string) *QueryJusticeCaseResponse {
	s.ExternalBizId = &v
	return s
}

func (s *QueryJusticeCaseResponse) SetCasePhaseDesc(v string) *QueryJusticeCaseResponse {
	s.CasePhaseDesc = &v
	return s
}

func (s *QueryJusticeCaseResponse) SetJudicialRecordTypeDesc(v string) *QueryJusticeCaseResponse {
	s.JudicialRecordTypeDesc = &v
	return s
}

func (s *QueryJusticeCaseResponse) SetJudicialRecordStatusDesc(v string) *QueryJusticeCaseResponse {
	s.JudicialRecordStatusDesc = &v
	return s
}

func (s *QueryJusticeCaseResponse) SetJudicialRecordStatusTime(v string) *QueryJusticeCaseResponse {
	s.JudicialRecordStatusTime = &v
	return s
}

func (s *QueryJusticeCaseResponse) SetJudicialFiles(v []*JudicialFileInfo) *QueryJusticeCaseResponse {
	s.JudicialFiles = v
	return s
}

func (s *QueryJusticeCaseResponse) SetSubmitErrorMsg(v string) *QueryJusticeCaseResponse {
	s.SubmitErrorMsg = &v
	return s
}

type OperateJusticeEventRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 案件Id,创建案件返回的id
	CaseId *int64 `json:"case_id,omitempty" xml:"case_id,omitempty" require:"true"`
	// 维权记录id,发起维权返回的Id
	RecordId *int64 `json:"record_id,omitempty" xml:"record_id,omitempty" require:"true"`
	// 事件类型(目前仅支持司法调解类):
	// 司法调解-JUDICIAL_MEDIATION
	// 仲裁-ARBITRATION
	// 执行-CARRIED_OUT
	// 补证-SUPPLEMENT
	EventType *string `json:"event_type,omitempty" xml:"event_type,omitempty" require:"true"`
	// 针对事件响应的信息
	OperateInfo *JudicialEventOperateInfo `json:"operate_info,omitempty" xml:"operate_info,omitempty" require:"true"`
}

func (s OperateJusticeEventRequest) String() string {
	return tea.Prettify(s)
}

func (s OperateJusticeEventRequest) GoString() string {
	return s.String()
}

func (s *OperateJusticeEventRequest) SetAuthToken(v string) *OperateJusticeEventRequest {
	s.AuthToken = &v
	return s
}

func (s *OperateJusticeEventRequest) SetProductInstanceId(v string) *OperateJusticeEventRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *OperateJusticeEventRequest) SetCaseId(v int64) *OperateJusticeEventRequest {
	s.CaseId = &v
	return s
}

func (s *OperateJusticeEventRequest) SetRecordId(v int64) *OperateJusticeEventRequest {
	s.RecordId = &v
	return s
}

func (s *OperateJusticeEventRequest) SetEventType(v string) *OperateJusticeEventRequest {
	s.EventType = &v
	return s
}

func (s *OperateJusticeEventRequest) SetOperateInfo(v *JudicialEventOperateInfo) *OperateJusticeEventRequest {
	s.OperateInfo = v
	return s
}

type OperateJusticeEventResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 触发响应是否成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s OperateJusticeEventResponse) String() string {
	return tea.Prettify(s)
}

func (s OperateJusticeEventResponse) GoString() string {
	return s.String()
}

func (s *OperateJusticeEventResponse) SetReqMsgId(v string) *OperateJusticeEventResponse {
	s.ReqMsgId = &v
	return s
}

func (s *OperateJusticeEventResponse) SetResultCode(v string) *OperateJusticeEventResponse {
	s.ResultCode = &v
	return s
}

func (s *OperateJusticeEventResponse) SetResultMsg(v string) *OperateJusticeEventResponse {
	s.ResultMsg = &v
	return s
}

func (s *OperateJusticeEventResponse) SetSuccess(v bool) *OperateJusticeEventResponse {
	s.Success = &v
	return s
}

type CreateJusticeCasetemplateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 案件要素模板名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 模板业务类型名称
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 全流程存证模板ID列表，多个用“,”隔开
	FlowTemplates *string `json:"flow_templates,omitempty" xml:"flow_templates,omitempty" require:"true"`
	// 模板文件下载地址
	TemplateFileUrl *string `json:"template_file_url,omitempty" xml:"template_file_url,omitempty" require:"true"`
}

func (s CreateJusticeCasetemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateJusticeCasetemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateJusticeCasetemplateRequest) SetAuthToken(v string) *CreateJusticeCasetemplateRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateJusticeCasetemplateRequest) SetProductInstanceId(v string) *CreateJusticeCasetemplateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateJusticeCasetemplateRequest) SetName(v string) *CreateJusticeCasetemplateRequest {
	s.Name = &v
	return s
}

func (s *CreateJusticeCasetemplateRequest) SetBizType(v string) *CreateJusticeCasetemplateRequest {
	s.BizType = &v
	return s
}

func (s *CreateJusticeCasetemplateRequest) SetFlowTemplates(v string) *CreateJusticeCasetemplateRequest {
	s.FlowTemplates = &v
	return s
}

func (s *CreateJusticeCasetemplateRequest) SetTemplateFileUrl(v string) *CreateJusticeCasetemplateRequest {
	s.TemplateFileUrl = &v
	return s
}

type CreateJusticeCasetemplateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 案件要素模板ID，创建成功时返回
	TemplateId *string `json:"template_id,omitempty" xml:"template_id,omitempty"`
}

func (s CreateJusticeCasetemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateJusticeCasetemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateJusticeCasetemplateResponse) SetReqMsgId(v string) *CreateJusticeCasetemplateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateJusticeCasetemplateResponse) SetResultCode(v string) *CreateJusticeCasetemplateResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateJusticeCasetemplateResponse) SetResultMsg(v string) *CreateJusticeCasetemplateResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateJusticeCasetemplateResponse) SetTemplateId(v string) *CreateJusticeCasetemplateResponse {
	s.TemplateId = &v
	return s
}

type CreateJusticeRightprotecttemplateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 维权要素模板名称
	Name *string `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	// 维权要素模板业务类型
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 维权措施，枚举值，包括：
	// ARBITRATION，仲裁
	// ARBITRATION_EXECUTION，仲裁执行
	// MEDIATION，调解
	RightProtectType *string `json:"right_protect_type,omitempty" xml:"right_protect_type,omitempty" require:"true"`
	// 要素模板关联的案件要素模板ID，要素模板和案件模板必须属于同一个业务类型才可以关联
	CaseTemplateId *string `json:"case_template_id,omitempty" xml:"case_template_id,omitempty" require:"true"`
	// 维权要素模板文件下载地址，文件为excel格式，包含维权要素的所有算法信息、字段信息和文件附件信息
	TemplateFileUrl *string `json:"template_file_url,omitempty" xml:"template_file_url,omitempty" require:"true"`
}

func (s CreateJusticeRightprotecttemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateJusticeRightprotecttemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateJusticeRightprotecttemplateRequest) SetAuthToken(v string) *CreateJusticeRightprotecttemplateRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateJusticeRightprotecttemplateRequest) SetProductInstanceId(v string) *CreateJusticeRightprotecttemplateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateJusticeRightprotecttemplateRequest) SetName(v string) *CreateJusticeRightprotecttemplateRequest {
	s.Name = &v
	return s
}

func (s *CreateJusticeRightprotecttemplateRequest) SetBizType(v string) *CreateJusticeRightprotecttemplateRequest {
	s.BizType = &v
	return s
}

func (s *CreateJusticeRightprotecttemplateRequest) SetRightProtectType(v string) *CreateJusticeRightprotecttemplateRequest {
	s.RightProtectType = &v
	return s
}

func (s *CreateJusticeRightprotecttemplateRequest) SetCaseTemplateId(v string) *CreateJusticeRightprotecttemplateRequest {
	s.CaseTemplateId = &v
	return s
}

func (s *CreateJusticeRightprotecttemplateRequest) SetTemplateFileUrl(v string) *CreateJusticeRightprotecttemplateRequest {
	s.TemplateFileUrl = &v
	return s
}

type CreateJusticeRightprotecttemplateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 维权要素模板ID，创建成功时返回
	TemplateId *string `json:"template_id,omitempty" xml:"template_id,omitempty"`
}

func (s CreateJusticeRightprotecttemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateJusticeRightprotecttemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateJusticeRightprotecttemplateResponse) SetReqMsgId(v string) *CreateJusticeRightprotecttemplateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateJusticeRightprotecttemplateResponse) SetResultCode(v string) *CreateJusticeRightprotecttemplateResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateJusticeRightprotecttemplateResponse) SetResultMsg(v string) *CreateJusticeRightprotecttemplateResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateJusticeRightprotecttemplateResponse) SetTemplateId(v string) *CreateJusticeRightprotecttemplateResponse {
	s.TemplateId = &v
	return s
}

type GetJusticeFileuploadurlRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 上传文件全名
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty" require:"true"`
	// 文件Md5值，用于上传后的文件校验
	FileMd5 *string `json:"file_md5,omitempty" xml:"file_md5,omitempty" require:"true"`
	// 枚举值：案件证据文件：EVIDENCE
	FileType *string `json:"file_type,omitempty" xml:"file_type,omitempty" require:"true"`
}

func (s GetJusticeFileuploadurlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetJusticeFileuploadurlRequest) GoString() string {
	return s.String()
}

func (s *GetJusticeFileuploadurlRequest) SetAuthToken(v string) *GetJusticeFileuploadurlRequest {
	s.AuthToken = &v
	return s
}

func (s *GetJusticeFileuploadurlRequest) SetProductInstanceId(v string) *GetJusticeFileuploadurlRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetJusticeFileuploadurlRequest) SetFileName(v string) *GetJusticeFileuploadurlRequest {
	s.FileName = &v
	return s
}

func (s *GetJusticeFileuploadurlRequest) SetFileMd5(v string) *GetJusticeFileuploadurlRequest {
	s.FileMd5 = &v
	return s
}

func (s *GetJusticeFileuploadurlRequest) SetFileType(v string) *GetJusticeFileuploadurlRequest {
	s.FileType = &v
	return s
}

type GetJusticeFileuploadurlResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 获取的文件key, 请妥善保存, 用于后续接口调用.
	FileKey *string `json:"file_key,omitempty" xml:"file_key,omitempty"`
	// 文件上传链接url
	UploadUrl *string `json:"upload_url,omitempty" xml:"upload_url,omitempty"`
	// 链接失效时间戳（毫秒）
	ExpiredTime *int64 `json:"expired_time,omitempty" xml:"expired_time,omitempty"`
}

func (s GetJusticeFileuploadurlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetJusticeFileuploadurlResponse) GoString() string {
	return s.String()
}

func (s *GetJusticeFileuploadurlResponse) SetReqMsgId(v string) *GetJusticeFileuploadurlResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetJusticeFileuploadurlResponse) SetResultCode(v string) *GetJusticeFileuploadurlResponse {
	s.ResultCode = &v
	return s
}

func (s *GetJusticeFileuploadurlResponse) SetResultMsg(v string) *GetJusticeFileuploadurlResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetJusticeFileuploadurlResponse) SetFileKey(v string) *GetJusticeFileuploadurlResponse {
	s.FileKey = &v
	return s
}

func (s *GetJusticeFileuploadurlResponse) SetUploadUrl(v string) *GetJusticeFileuploadurlResponse {
	s.UploadUrl = &v
	return s
}

func (s *GetJusticeFileuploadurlResponse) SetExpiredTime(v int64) *GetJusticeFileuploadurlResponse {
	s.ExpiredTime = &v
	return s
}

type CreateJusticeDocumenttemplateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 维权要素模板id + 文书模板类型
	// 1.仲裁-申请请求 ARBITRATION_REQUEST_FOR_APPLICATION
	// 2.仲裁-事实和理由：ARBITRATION_FACTS_AND_REASONS
	DocumentTemplateId *string `json:"document_template_id,omitempty" xml:"document_template_id,omitempty" require:"true"`
	// 维权要素模板id
	RightProtectTemplateId *string `json:"right_protect_template_id,omitempty" xml:"right_protect_template_id,omitempty" require:"true"`
	// 文书模板类型名称，如“仲裁申请书”、“调解协议书”、“起诉状”等
	TemplateName *string `json:"template_name,omitempty" xml:"template_name,omitempty" require:"true"`
	// 文书生成格式类型，枚举
	// NORMAL：普通文本，
	// RICHTEXT：富文本，
	// PDF：pdf格式文件
	OutputType *string `json:"output_type,omitempty" xml:"output_type,omitempty" require:"true"`
	// 传入的模板样式文件格式（目前只支持txt、doc）
	// TXT：txt格式
	// DOC：doc格式
	InputType *string `json:"input_type,omitempty" xml:"input_type,omitempty" require:"true"`
	// 原始模板文件下载地址，如果inputType为DOC则必填
	DownloadUrl *string `json:"download_url,omitempty" xml:"download_url,omitempty"`
	// 模板数据内容，如果inputType为TXT则必填
	TextContent *string `json:"text_content,omitempty" xml:"text_content,omitempty"`
}

func (s CreateJusticeDocumenttemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateJusticeDocumenttemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateJusticeDocumenttemplateRequest) SetAuthToken(v string) *CreateJusticeDocumenttemplateRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateJusticeDocumenttemplateRequest) SetProductInstanceId(v string) *CreateJusticeDocumenttemplateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateJusticeDocumenttemplateRequest) SetDocumentTemplateId(v string) *CreateJusticeDocumenttemplateRequest {
	s.DocumentTemplateId = &v
	return s
}

func (s *CreateJusticeDocumenttemplateRequest) SetRightProtectTemplateId(v string) *CreateJusticeDocumenttemplateRequest {
	s.RightProtectTemplateId = &v
	return s
}

func (s *CreateJusticeDocumenttemplateRequest) SetTemplateName(v string) *CreateJusticeDocumenttemplateRequest {
	s.TemplateName = &v
	return s
}

func (s *CreateJusticeDocumenttemplateRequest) SetOutputType(v string) *CreateJusticeDocumenttemplateRequest {
	s.OutputType = &v
	return s
}

func (s *CreateJusticeDocumenttemplateRequest) SetInputType(v string) *CreateJusticeDocumenttemplateRequest {
	s.InputType = &v
	return s
}

func (s *CreateJusticeDocumenttemplateRequest) SetDownloadUrl(v string) *CreateJusticeDocumenttemplateRequest {
	s.DownloadUrl = &v
	return s
}

func (s *CreateJusticeDocumenttemplateRequest) SetTextContent(v string) *CreateJusticeDocumenttemplateRequest {
	s.TextContent = &v
	return s
}

type CreateJusticeDocumenttemplateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 文书模板ID，创建成功时返回
	TemplateId *string `json:"template_id,omitempty" xml:"template_id,omitempty"`
}

func (s CreateJusticeDocumenttemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateJusticeDocumenttemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateJusticeDocumenttemplateResponse) SetReqMsgId(v string) *CreateJusticeDocumenttemplateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateJusticeDocumenttemplateResponse) SetResultCode(v string) *CreateJusticeDocumenttemplateResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateJusticeDocumenttemplateResponse) SetResultMsg(v string) *CreateJusticeDocumenttemplateResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateJusticeDocumenttemplateResponse) SetTemplateId(v string) *CreateJusticeDocumenttemplateResponse {
	s.TemplateId = &v
	return s
}

type QueryJusticeCommoncaseinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 案件号
	CaseNo *string `json:"case_no,omitempty" xml:"case_no,omitempty" require:"true"`
	// 用户幂等字段
	ClientToken *string `json:"client_token,omitempty" xml:"client_token,omitempty" require:"true"`
}

func (s QueryJusticeCommoncaseinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryJusticeCommoncaseinfoRequest) GoString() string {
	return s.String()
}

func (s *QueryJusticeCommoncaseinfoRequest) SetAuthToken(v string) *QueryJusticeCommoncaseinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryJusticeCommoncaseinfoRequest) SetProductInstanceId(v string) *QueryJusticeCommoncaseinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryJusticeCommoncaseinfoRequest) SetCaseNo(v string) *QueryJusticeCommoncaseinfoRequest {
	s.CaseNo = &v
	return s
}

func (s *QueryJusticeCommoncaseinfoRequest) SetClientToken(v string) *QueryJusticeCommoncaseinfoRequest {
	s.ClientToken = &v
	return s
}

type QueryJusticeCommoncaseinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 要素信息
	BusinessInfo *string `json:"business_info,omitempty" xml:"business_info,omitempty"`
	// 查询的案件编号
	CaseNo *string `json:"case_no,omitempty" xml:"case_no,omitempty"`
	// 业务类型
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty"`
}

func (s QueryJusticeCommoncaseinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryJusticeCommoncaseinfoResponse) GoString() string {
	return s.String()
}

func (s *QueryJusticeCommoncaseinfoResponse) SetReqMsgId(v string) *QueryJusticeCommoncaseinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryJusticeCommoncaseinfoResponse) SetResultCode(v string) *QueryJusticeCommoncaseinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryJusticeCommoncaseinfoResponse) SetResultMsg(v string) *QueryJusticeCommoncaseinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryJusticeCommoncaseinfoResponse) SetBusinessInfo(v string) *QueryJusticeCommoncaseinfoResponse {
	s.BusinessInfo = &v
	return s
}

func (s *QueryJusticeCommoncaseinfoResponse) SetCaseNo(v string) *QueryJusticeCommoncaseinfoResponse {
	s.CaseNo = &v
	return s
}

func (s *QueryJusticeCommoncaseinfoResponse) SetBizType(v string) *QueryJusticeCommoncaseinfoResponse {
	s.BizType = &v
	return s
}

type CreateJusticeAgentcaseRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 案由
	CaseReason *string `json:"case_reason,omitempty" xml:"case_reason,omitempty" require:"true"`
	// 业务类型，LEASE- 租赁 ，HB_FINANCIAL - HB金融， 模板创建的其他业务类型
	BizType *string `json:"biz_type,omitempty" xml:"biz_type,omitempty" require:"true"`
	// 二级商户租户ID，八位字母
	SubTenantId *string `json:"sub_tenant_id,omitempty" xml:"sub_tenant_id,omitempty" require:"true"`
	// 外部业务ID
	ExternalBizId *string `json:"external_biz_id,omitempty" xml:"external_biz_id,omitempty" require:"true"`
	// 业务描述,用于案件的补充描述; 没有则不填
	CaseDesc *string `json:"case_desc,omitempty" xml:"case_desc,omitempty"`
	// 根据案件要素模板对应提供要素信息
	BusinessInfo *string `json:"business_info,omitempty" xml:"business_info,omitempty" require:"true"`
	// 根据案件要素模板对应提供证据信息
	EvidenceInfo *string `json:"evidence_info,omitempty" xml:"evidence_info,omitempty"`
}

func (s CreateJusticeAgentcaseRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateJusticeAgentcaseRequest) GoString() string {
	return s.String()
}

func (s *CreateJusticeAgentcaseRequest) SetAuthToken(v string) *CreateJusticeAgentcaseRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateJusticeAgentcaseRequest) SetProductInstanceId(v string) *CreateJusticeAgentcaseRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateJusticeAgentcaseRequest) SetCaseReason(v string) *CreateJusticeAgentcaseRequest {
	s.CaseReason = &v
	return s
}

func (s *CreateJusticeAgentcaseRequest) SetBizType(v string) *CreateJusticeAgentcaseRequest {
	s.BizType = &v
	return s
}

func (s *CreateJusticeAgentcaseRequest) SetSubTenantId(v string) *CreateJusticeAgentcaseRequest {
	s.SubTenantId = &v
	return s
}

func (s *CreateJusticeAgentcaseRequest) SetExternalBizId(v string) *CreateJusticeAgentcaseRequest {
	s.ExternalBizId = &v
	return s
}

func (s *CreateJusticeAgentcaseRequest) SetCaseDesc(v string) *CreateJusticeAgentcaseRequest {
	s.CaseDesc = &v
	return s
}

func (s *CreateJusticeAgentcaseRequest) SetBusinessInfo(v string) *CreateJusticeAgentcaseRequest {
	s.BusinessInfo = &v
	return s
}

func (s *CreateJusticeAgentcaseRequest) SetEvidenceInfo(v string) *CreateJusticeAgentcaseRequest {
	s.EvidenceInfo = &v
	return s
}

type CreateJusticeAgentcaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 案件创建是否成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// 案件ID, 创建成功后, 返回的案件ID
	CaseId *int64 `json:"case_id,omitempty" xml:"case_id,omitempty"`
}

func (s CreateJusticeAgentcaseResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateJusticeAgentcaseResponse) GoString() string {
	return s.String()
}

func (s *CreateJusticeAgentcaseResponse) SetReqMsgId(v string) *CreateJusticeAgentcaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateJusticeAgentcaseResponse) SetResultCode(v string) *CreateJusticeAgentcaseResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateJusticeAgentcaseResponse) SetResultMsg(v string) *CreateJusticeAgentcaseResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateJusticeAgentcaseResponse) SetSuccess(v bool) *CreateJusticeAgentcaseResponse {
	s.Success = &v
	return s
}

func (s *CreateJusticeAgentcaseResponse) SetCaseId(v int64) *CreateJusticeAgentcaseResponse {
	s.CaseId = &v
	return s
}

type QueryJusticeRightsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 案件维权记录编号
	RecordId *int64 `json:"record_id,omitempty" xml:"record_id,omitempty" require:"true"`
}

func (s QueryJusticeRightsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryJusticeRightsRequest) GoString() string {
	return s.String()
}

func (s *QueryJusticeRightsRequest) SetAuthToken(v string) *QueryJusticeRightsRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryJusticeRightsRequest) SetProductInstanceId(v string) *QueryJusticeRightsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryJusticeRightsRequest) SetRecordId(v int64) *QueryJusticeRightsRequest {
	s.RecordId = &v
	return s
}

type QueryJusticeRightsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 案件业务信息(申请人,被申请人,业务要素),示例查看对接文档
	BusinessInfo *string `json:"business_info,omitempty" xml:"business_info,omitempty"`
	// 证据信息,示例查看对接文档
	EvidenceInfo *string `json:"evidence_info,omitempty" xml:"evidence_info,omitempty"`
}

func (s QueryJusticeRightsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryJusticeRightsResponse) GoString() string {
	return s.String()
}

func (s *QueryJusticeRightsResponse) SetReqMsgId(v string) *QueryJusticeRightsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryJusticeRightsResponse) SetResultCode(v string) *QueryJusticeRightsResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryJusticeRightsResponse) SetResultMsg(v string) *QueryJusticeRightsResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryJusticeRightsResponse) SetBusinessInfo(v string) *QueryJusticeRightsResponse {
	s.BusinessInfo = &v
	return s
}

func (s *QueryJusticeRightsResponse) SetEvidenceInfo(v string) *QueryJusticeRightsResponse {
	s.EvidenceInfo = &v
	return s
}

type UpdateJusticeRightsRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 案件维权记录编号
	RecordId *int64 `json:"record_id,omitempty" xml:"record_id,omitempty" require:"true"`
	// 案件状态(枚举)
	CaseStatus *string `json:"case_status,omitempty" xml:"case_status,omitempty" require:"true"`
	// 状态扩展信息示例查看对接文档
	StatusExt *string `json:"status_ext,omitempty" xml:"status_ext,omitempty"`
	// 文件信息,示例查看对接文档
	StatusFileInfos []*FileInfo `json:"status_file_infos,omitempty" xml:"status_file_infos,omitempty" type:"Repeated"`
	// 案件状态对应的实际时间
	CaseStatusDate *string `json:"case_status_date,omitempty" xml:"case_status_date,omitempty" require:"true"`
}

func (s UpdateJusticeRightsRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateJusticeRightsRequest) GoString() string {
	return s.String()
}

func (s *UpdateJusticeRightsRequest) SetAuthToken(v string) *UpdateJusticeRightsRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateJusticeRightsRequest) SetProductInstanceId(v string) *UpdateJusticeRightsRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateJusticeRightsRequest) SetRecordId(v int64) *UpdateJusticeRightsRequest {
	s.RecordId = &v
	return s
}

func (s *UpdateJusticeRightsRequest) SetCaseStatus(v string) *UpdateJusticeRightsRequest {
	s.CaseStatus = &v
	return s
}

func (s *UpdateJusticeRightsRequest) SetStatusExt(v string) *UpdateJusticeRightsRequest {
	s.StatusExt = &v
	return s
}

func (s *UpdateJusticeRightsRequest) SetStatusFileInfos(v []*FileInfo) *UpdateJusticeRightsRequest {
	s.StatusFileInfos = v
	return s
}

func (s *UpdateJusticeRightsRequest) SetCaseStatusDate(v string) *UpdateJusticeRightsRequest {
	s.CaseStatusDate = &v
	return s
}

type UpdateJusticeRightsResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否处理成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateJusticeRightsResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateJusticeRightsResponse) GoString() string {
	return s.String()
}

func (s *UpdateJusticeRightsResponse) SetReqMsgId(v string) *UpdateJusticeRightsResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateJusticeRightsResponse) SetResultCode(v string) *UpdateJusticeRightsResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateJusticeRightsResponse) SetResultMsg(v string) *UpdateJusticeRightsResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateJusticeRightsResponse) SetSuccess(v bool) *UpdateJusticeRightsResponse {
	s.Success = &v
	return s
}

type NotifyJusticeRightspaymentRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 案件维权记录编号
	RecordId *int64 `json:"record_id,omitempty" xml:"record_id,omitempty" require:"true"`
	// 缴费金额(支持两位小数)
	Amount *string `json:"amount,omitempty" xml:"amount,omitempty" require:"true"`
	// 费用类型(枚举)
	// ARBITRATION: 仲裁案件受理费
	PaymentType *string `json:"payment_type,omitempty" xml:"payment_type,omitempty" require:"true"`
	// 缴费状态(枚举)
	// WAIT_FEE: 待缴费
	// SUCCESS: 成功
	// FAIL: 失败
	PaymentStatus *string `json:"payment_status,omitempty" xml:"payment_status,omitempty" require:"true"`
	// 缴费失败的描述(不是缴费完成时,必填)
	// 不超过500字符
	PaymentRemark *string `json:"payment_remark,omitempty" xml:"payment_remark,omitempty"`
	// 相关的文件信息列表,示例查看对接文档
	PaymentFileInfos []*FileInfo `json:"payment_file_infos,omitempty" xml:"payment_file_infos,omitempty" type:"Repeated"`
	// 缴费账户信息(待缴费时必填),示例查看对接文档
	PaymentInfo *PaymentInfo `json:"payment_info,omitempty" xml:"payment_info,omitempty"`
	// 缴费状态(SUCCESS)实际对应时间
	PaymentStatusSuccessDate *string `json:"payment_status_success_date,omitempty" xml:"payment_status_success_date,omitempty"`
}

func (s NotifyJusticeRightspaymentRequest) String() string {
	return tea.Prettify(s)
}

func (s NotifyJusticeRightspaymentRequest) GoString() string {
	return s.String()
}

func (s *NotifyJusticeRightspaymentRequest) SetAuthToken(v string) *NotifyJusticeRightspaymentRequest {
	s.AuthToken = &v
	return s
}

func (s *NotifyJusticeRightspaymentRequest) SetProductInstanceId(v string) *NotifyJusticeRightspaymentRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *NotifyJusticeRightspaymentRequest) SetRecordId(v int64) *NotifyJusticeRightspaymentRequest {
	s.RecordId = &v
	return s
}

func (s *NotifyJusticeRightspaymentRequest) SetAmount(v string) *NotifyJusticeRightspaymentRequest {
	s.Amount = &v
	return s
}

func (s *NotifyJusticeRightspaymentRequest) SetPaymentType(v string) *NotifyJusticeRightspaymentRequest {
	s.PaymentType = &v
	return s
}

func (s *NotifyJusticeRightspaymentRequest) SetPaymentStatus(v string) *NotifyJusticeRightspaymentRequest {
	s.PaymentStatus = &v
	return s
}

func (s *NotifyJusticeRightspaymentRequest) SetPaymentRemark(v string) *NotifyJusticeRightspaymentRequest {
	s.PaymentRemark = &v
	return s
}

func (s *NotifyJusticeRightspaymentRequest) SetPaymentFileInfos(v []*FileInfo) *NotifyJusticeRightspaymentRequest {
	s.PaymentFileInfos = v
	return s
}

func (s *NotifyJusticeRightspaymentRequest) SetPaymentInfo(v *PaymentInfo) *NotifyJusticeRightspaymentRequest {
	s.PaymentInfo = v
	return s
}

func (s *NotifyJusticeRightspaymentRequest) SetPaymentStatusSuccessDate(v string) *NotifyJusticeRightspaymentRequest {
	s.PaymentStatusSuccessDate = &v
	return s
}

type NotifyJusticeRightspaymentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否处理成功
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s NotifyJusticeRightspaymentResponse) String() string {
	return tea.Prettify(s)
}

func (s NotifyJusticeRightspaymentResponse) GoString() string {
	return s.String()
}

func (s *NotifyJusticeRightspaymentResponse) SetReqMsgId(v string) *NotifyJusticeRightspaymentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *NotifyJusticeRightspaymentResponse) SetResultCode(v string) *NotifyJusticeRightspaymentResponse {
	s.ResultCode = &v
	return s
}

func (s *NotifyJusticeRightspaymentResponse) SetResultMsg(v string) *NotifyJusticeRightspaymentResponse {
	s.ResultMsg = &v
	return s
}

func (s *NotifyJusticeRightspaymentResponse) SetSuccess(v bool) *NotifyJusticeRightspaymentResponse {
	s.Success = &v
	return s
}

type CreateLeaseProductinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 保证金  精确到毫厘，即123400表示12.34元
	DepositPrice *int64 `json:"deposit_price,omitempty" xml:"deposit_price,omitempty" require:"true"`
	// 安装拆卸费 精确到毫厘，即123400表示12.34元
	InstallPrice *int64 `json:"install_price,omitempty" xml:"install_price,omitempty" require:"true"`
	// 租赁服务平台id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
	// 一级分类
	MainClass *string `json:"main_class,omitempty" xml:"main_class,omitempty" require:"true"`
	// 商品编码 长度不可超过50
	ProductId *string `json:"product_id,omitempty" xml:"product_id,omitempty" require:"true"`
	// 商品名称
	ProductName *string `json:"product_name,omitempty" xml:"product_name,omitempty" require:"true"`
	// 采购价  精确到毫厘，即123400表示12.34元
	ProductPrice *int64 `json:"product_price,omitempty" xml:"product_price,omitempty" require:"true"`
	// 出租详细信息
	Rentinfos []*RentInfo `json:"rentinfos,omitempty" xml:"rentinfos,omitempty" require:"true" type:"Repeated"`
	// 二级分类
	SubClass *string `json:"sub_class,omitempty" xml:"sub_class,omitempty" require:"true"`
	// 供应商id
	SupplierId *string `json:"supplier_id,omitempty" xml:"supplier_id,omitempty"`
	// 供应商
	SupplierName *string `json:"supplier_name,omitempty" xml:"supplier_name,omitempty" require:"true"`
	// 供应商对该产品版本
	SupplierVersion *string `json:"supplier_version,omitempty" xml:"supplier_version,omitempty"`
	// 商品目录额外信息
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// 商品规格
	ProductModel *string `json:"product_model,omitempty" xml:"product_model,omitempty"`
}

func (s CreateLeaseProductinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseProductinfoRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseProductinfoRequest) SetAuthToken(v string) *CreateLeaseProductinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseProductinfoRequest) SetProductInstanceId(v string) *CreateLeaseProductinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseProductinfoRequest) SetApplicationId(v string) *CreateLeaseProductinfoRequest {
	s.ApplicationId = &v
	return s
}

func (s *CreateLeaseProductinfoRequest) SetDepositPrice(v int64) *CreateLeaseProductinfoRequest {
	s.DepositPrice = &v
	return s
}

func (s *CreateLeaseProductinfoRequest) SetInstallPrice(v int64) *CreateLeaseProductinfoRequest {
	s.InstallPrice = &v
	return s
}

func (s *CreateLeaseProductinfoRequest) SetLeaseId(v string) *CreateLeaseProductinfoRequest {
	s.LeaseId = &v
	return s
}

func (s *CreateLeaseProductinfoRequest) SetMainClass(v string) *CreateLeaseProductinfoRequest {
	s.MainClass = &v
	return s
}

func (s *CreateLeaseProductinfoRequest) SetProductId(v string) *CreateLeaseProductinfoRequest {
	s.ProductId = &v
	return s
}

func (s *CreateLeaseProductinfoRequest) SetProductName(v string) *CreateLeaseProductinfoRequest {
	s.ProductName = &v
	return s
}

func (s *CreateLeaseProductinfoRequest) SetProductPrice(v int64) *CreateLeaseProductinfoRequest {
	s.ProductPrice = &v
	return s
}

func (s *CreateLeaseProductinfoRequest) SetRentinfos(v []*RentInfo) *CreateLeaseProductinfoRequest {
	s.Rentinfos = v
	return s
}

func (s *CreateLeaseProductinfoRequest) SetSubClass(v string) *CreateLeaseProductinfoRequest {
	s.SubClass = &v
	return s
}

func (s *CreateLeaseProductinfoRequest) SetSupplierId(v string) *CreateLeaseProductinfoRequest {
	s.SupplierId = &v
	return s
}

func (s *CreateLeaseProductinfoRequest) SetSupplierName(v string) *CreateLeaseProductinfoRequest {
	s.SupplierName = &v
	return s
}

func (s *CreateLeaseProductinfoRequest) SetSupplierVersion(v string) *CreateLeaseProductinfoRequest {
	s.SupplierVersion = &v
	return s
}

func (s *CreateLeaseProductinfoRequest) SetExtraInfo(v string) *CreateLeaseProductinfoRequest {
	s.ExtraInfo = &v
	return s
}

func (s *CreateLeaseProductinfoRequest) SetProductModel(v string) *CreateLeaseProductinfoRequest {
	s.ProductModel = &v
	return s
}

type CreateLeaseProductinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码 0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 用户信息存储到合约中对应的区块链交易哈希
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s CreateLeaseProductinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseProductinfoResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseProductinfoResponse) SetReqMsgId(v string) *CreateLeaseProductinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseProductinfoResponse) SetResultCode(v string) *CreateLeaseProductinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseProductinfoResponse) SetResultMsg(v string) *CreateLeaseProductinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseProductinfoResponse) SetCode(v int64) *CreateLeaseProductinfoResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseProductinfoResponse) SetErrMessage(v string) *CreateLeaseProductinfoResponse {
	s.ErrMessage = &v
	return s
}

func (s *CreateLeaseProductinfoResponse) SetResponseData(v string) *CreateLeaseProductinfoResponse {
	s.ResponseData = &v
	return s
}

type UpdateLeaseContractRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 被升级的合约名称
	ContractId *string `json:"contract_id,omitempty" xml:"contract_id,omitempty" require:"true"`
	// 合约业务层id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
}

func (s UpdateLeaseContractRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLeaseContractRequest) GoString() string {
	return s.String()
}

func (s *UpdateLeaseContractRequest) SetAuthToken(v string) *UpdateLeaseContractRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateLeaseContractRequest) SetProductInstanceId(v string) *UpdateLeaseContractRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateLeaseContractRequest) SetContractId(v string) *UpdateLeaseContractRequest {
	s.ContractId = &v
	return s
}

func (s *UpdateLeaseContractRequest) SetApplicationId(v string) *UpdateLeaseContractRequest {
	s.ApplicationId = &v
	return s
}

type UpdateLeaseContractResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码 0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	//
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 升级合约所在的区块链交易哈希
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s UpdateLeaseContractResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLeaseContractResponse) GoString() string {
	return s.String()
}

func (s *UpdateLeaseContractResponse) SetReqMsgId(v string) *UpdateLeaseContractResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateLeaseContractResponse) SetResultCode(v string) *UpdateLeaseContractResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateLeaseContractResponse) SetResultMsg(v string) *UpdateLeaseContractResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateLeaseContractResponse) SetCode(v int64) *UpdateLeaseContractResponse {
	s.Code = &v
	return s
}

func (s *UpdateLeaseContractResponse) SetErrMessage(v string) *UpdateLeaseContractResponse {
	s.ErrMessage = &v
	return s
}

func (s *UpdateLeaseContractResponse) SetResponseData(v string) *UpdateLeaseContractResponse {
	s.ResponseData = &v
	return s
}

type CreateLeaseAssetagentregisterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 被代理机构的金融科技租户id
	AgentLeaseId *string `json:"agent_lease_id,omitempty" xml:"agent_lease_id,omitempty" require:"true"`
	// 代理合同id，作为存证使用
	ContractId *string `json:"contract_id,omitempty" xml:"contract_id,omitempty" require:"true"`
	// 被代理租赁机构统一社会信用码
	//
	//
	LeaseCorpId *string `json:"lease_corp_id,omitempty" xml:"lease_corp_id,omitempty" require:"true"`
	// 被代理租赁机构名称
	LeaseCorpName *string `json:"lease_corp_name,omitempty" xml:"lease_corp_name,omitempty" require:"true"`
	// 被代理租赁机构法人姓名
	LeaseCorpOwnerName *string `json:"lease_corp_owner_name,omitempty" xml:"lease_corp_owner_name,omitempty" require:"true"`
}

func (s CreateLeaseAssetagentregisterRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseAssetagentregisterRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseAssetagentregisterRequest) SetAuthToken(v string) *CreateLeaseAssetagentregisterRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseAssetagentregisterRequest) SetProductInstanceId(v string) *CreateLeaseAssetagentregisterRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseAssetagentregisterRequest) SetAgentLeaseId(v string) *CreateLeaseAssetagentregisterRequest {
	s.AgentLeaseId = &v
	return s
}

func (s *CreateLeaseAssetagentregisterRequest) SetContractId(v string) *CreateLeaseAssetagentregisterRequest {
	s.ContractId = &v
	return s
}

func (s *CreateLeaseAssetagentregisterRequest) SetLeaseCorpId(v string) *CreateLeaseAssetagentregisterRequest {
	s.LeaseCorpId = &v
	return s
}

func (s *CreateLeaseAssetagentregisterRequest) SetLeaseCorpName(v string) *CreateLeaseAssetagentregisterRequest {
	s.LeaseCorpName = &v
	return s
}

func (s *CreateLeaseAssetagentregisterRequest) SetLeaseCorpOwnerName(v string) *CreateLeaseAssetagentregisterRequest {
	s.LeaseCorpOwnerName = &v
	return s
}

type CreateLeaseAssetagentregisterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务层错误码
	BizErrorCode *string `json:"biz_error_code,omitempty" xml:"biz_error_code,omitempty"`
	// 错误信息描述
	BizErrorMsg *string `json:"biz_error_msg,omitempty" xml:"biz_error_msg,omitempty"`
	// 代理关系链上存证哈希
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateLeaseAssetagentregisterResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseAssetagentregisterResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseAssetagentregisterResponse) SetReqMsgId(v string) *CreateLeaseAssetagentregisterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseAssetagentregisterResponse) SetResultCode(v string) *CreateLeaseAssetagentregisterResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseAssetagentregisterResponse) SetResultMsg(v string) *CreateLeaseAssetagentregisterResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseAssetagentregisterResponse) SetBizErrorCode(v string) *CreateLeaseAssetagentregisterResponse {
	s.BizErrorCode = &v
	return s
}

func (s *CreateLeaseAssetagentregisterResponse) SetBizErrorMsg(v string) *CreateLeaseAssetagentregisterResponse {
	s.BizErrorMsg = &v
	return s
}

func (s *CreateLeaseAssetagentregisterResponse) SetTxHash(v string) *CreateLeaseAssetagentregisterResponse {
	s.TxHash = &v
	return s
}

type QueryLeaseProductinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 商品id
	ProductId *string `json:"product_id,omitempty" xml:"product_id,omitempty" require:"true"`
	// 供应商本版号
	SupplierVersion *int64 `json:"supplier_version,omitempty" xml:"supplier_version,omitempty" require:"true"`
	// 合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty" require:"true"`
	// 租赁方id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
	// 资方id
	CreditId *string `json:"credit_id,omitempty" xml:"credit_id,omitempty" require:"true"`
}

func (s QueryLeaseProductinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseProductinfoRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseProductinfoRequest) SetAuthToken(v string) *QueryLeaseProductinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseProductinfoRequest) SetProductInstanceId(v string) *QueryLeaseProductinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseProductinfoRequest) SetProductId(v string) *QueryLeaseProductinfoRequest {
	s.ProductId = &v
	return s
}

func (s *QueryLeaseProductinfoRequest) SetSupplierVersion(v int64) *QueryLeaseProductinfoRequest {
	s.SupplierVersion = &v
	return s
}

func (s *QueryLeaseProductinfoRequest) SetApplicationId(v string) *QueryLeaseProductinfoRequest {
	s.ApplicationId = &v
	return s
}

func (s *QueryLeaseProductinfoRequest) SetLeaseId(v string) *QueryLeaseProductinfoRequest {
	s.LeaseId = &v
	return s
}

func (s *QueryLeaseProductinfoRequest) SetCreditId(v string) *QueryLeaseProductinfoRequest {
	s.CreditId = &v
	return s
}

type QueryLeaseProductinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码200表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 商品信息
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s QueryLeaseProductinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseProductinfoResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseProductinfoResponse) SetReqMsgId(v string) *QueryLeaseProductinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseProductinfoResponse) SetResultCode(v string) *QueryLeaseProductinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseProductinfoResponse) SetResultMsg(v string) *QueryLeaseProductinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseProductinfoResponse) SetCode(v int64) *QueryLeaseProductinfoResponse {
	s.Code = &v
	return s
}

func (s *QueryLeaseProductinfoResponse) SetErrMessage(v string) *QueryLeaseProductinfoResponse {
	s.ErrMessage = &v
	return s
}

func (s *QueryLeaseProductinfoResponse) SetResponseData(v string) *QueryLeaseProductinfoResponse {
	s.ResponseData = &v
	return s
}

type SyncLeaseSupplierorderstatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 订单采购状态，已取消[CANCEL，已拒收REFUSE_DELIVER，待发货TOBE_DELIVER，已退货RETURN_BACK]
	SupplierStatus *string `json:"supplier_status,omitempty" xml:"supplier_status,omitempty" require:"true"`
	// 租赁商家金融科技租户id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
}

func (s SyncLeaseSupplierorderstatusRequest) String() string {
	return tea.Prettify(s)
}

func (s SyncLeaseSupplierorderstatusRequest) GoString() string {
	return s.String()
}

func (s *SyncLeaseSupplierorderstatusRequest) SetAuthToken(v string) *SyncLeaseSupplierorderstatusRequest {
	s.AuthToken = &v
	return s
}

func (s *SyncLeaseSupplierorderstatusRequest) SetProductInstanceId(v string) *SyncLeaseSupplierorderstatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SyncLeaseSupplierorderstatusRequest) SetOrderId(v string) *SyncLeaseSupplierorderstatusRequest {
	s.OrderId = &v
	return s
}

func (s *SyncLeaseSupplierorderstatusRequest) SetSupplierStatus(v string) *SyncLeaseSupplierorderstatusRequest {
	s.SupplierStatus = &v
	return s
}

func (s *SyncLeaseSupplierorderstatusRequest) SetLeaseId(v string) *SyncLeaseSupplierorderstatusRequest {
	s.LeaseId = &v
	return s
}

type SyncLeaseSupplierorderstatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码,0表示正常
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// CANCEL：可以取消  REFUSE：不能取消
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s SyncLeaseSupplierorderstatusResponse) String() string {
	return tea.Prettify(s)
}

func (s SyncLeaseSupplierorderstatusResponse) GoString() string {
	return s.String()
}

func (s *SyncLeaseSupplierorderstatusResponse) SetReqMsgId(v string) *SyncLeaseSupplierorderstatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SyncLeaseSupplierorderstatusResponse) SetResultCode(v string) *SyncLeaseSupplierorderstatusResponse {
	s.ResultCode = &v
	return s
}

func (s *SyncLeaseSupplierorderstatusResponse) SetResultMsg(v string) *SyncLeaseSupplierorderstatusResponse {
	s.ResultMsg = &v
	return s
}

func (s *SyncLeaseSupplierorderstatusResponse) SetCode(v int64) *SyncLeaseSupplierorderstatusResponse {
	s.Code = &v
	return s
}

func (s *SyncLeaseSupplierorderstatusResponse) SetErrMessage(v string) *SyncLeaseSupplierorderstatusResponse {
	s.ErrMessage = &v
	return s
}

func (s *SyncLeaseSupplierorderstatusResponse) SetStatus(v string) *SyncLeaseSupplierorderstatusResponse {
	s.Status = &v
	return s
}

type InitLeaseSupplierRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 供应商来源
	Origin *string `json:"origin,omitempty" xml:"origin,omitempty" require:"true"`
	// 供应商信息
	Supplier *SupplierInfo `json:"supplier,omitempty" xml:"supplier,omitempty" require:"true"`
	// 额外信息
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
}

func (s InitLeaseSupplierRequest) String() string {
	return tea.Prettify(s)
}

func (s InitLeaseSupplierRequest) GoString() string {
	return s.String()
}

func (s *InitLeaseSupplierRequest) SetAuthToken(v string) *InitLeaseSupplierRequest {
	s.AuthToken = &v
	return s
}

func (s *InitLeaseSupplierRequest) SetProductInstanceId(v string) *InitLeaseSupplierRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *InitLeaseSupplierRequest) SetOrigin(v string) *InitLeaseSupplierRequest {
	s.Origin = &v
	return s
}

func (s *InitLeaseSupplierRequest) SetSupplier(v *SupplierInfo) *InitLeaseSupplierRequest {
	s.Supplier = v
	return s
}

func (s *InitLeaseSupplierRequest) SetExtraInfo(v string) *InitLeaseSupplierRequest {
	s.ExtraInfo = &v
	return s
}

type InitLeaseSupplierResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码 0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
}

func (s InitLeaseSupplierResponse) String() string {
	return tea.Prettify(s)
}

func (s InitLeaseSupplierResponse) GoString() string {
	return s.String()
}

func (s *InitLeaseSupplierResponse) SetReqMsgId(v string) *InitLeaseSupplierResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InitLeaseSupplierResponse) SetResultCode(v string) *InitLeaseSupplierResponse {
	s.ResultCode = &v
	return s
}

func (s *InitLeaseSupplierResponse) SetResultMsg(v string) *InitLeaseSupplierResponse {
	s.ResultMsg = &v
	return s
}

func (s *InitLeaseSupplierResponse) SetCode(v int64) *InitLeaseSupplierResponse {
	s.Code = &v
	return s
}

func (s *InitLeaseSupplierResponse) SetErrMessage(v string) *InitLeaseSupplierResponse {
	s.ErrMessage = &v
	return s
}

type FinishLeaseSupplierstatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 采购订单id，由采购平台生成
	SupplierOrderNo *string `json:"supplier_order_no,omitempty" xml:"supplier_order_no,omitempty" require:"true"`
	// 租赁订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 租赁方id，非采购平台
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
	// 当前的采购状态
	SupplierOrderStatus *string `json:"supplier_order_status,omitempty" xml:"supplier_order_status,omitempty" require:"true"`
	// 物流订单id
	SupplierLogisticInfo *SupplierLogisticInfo `json:"supplier_logistic_info,omitempty" xml:"supplier_logistic_info,omitempty" require:"true"`
	// 采购平台回传的商品订单信息
	SupplierOrderProductInfos []*SupplierOrderProductInfo `json:"supplier_order_product_infos,omitempty" xml:"supplier_order_product_infos,omitempty" require:"true" type:"Repeated"`
	// 供应商id
	SupplierId *string `json:"supplier_id,omitempty" xml:"supplier_id,omitempty" require:"true"`
}

func (s FinishLeaseSupplierstatusRequest) String() string {
	return tea.Prettify(s)
}

func (s FinishLeaseSupplierstatusRequest) GoString() string {
	return s.String()
}

func (s *FinishLeaseSupplierstatusRequest) SetAuthToken(v string) *FinishLeaseSupplierstatusRequest {
	s.AuthToken = &v
	return s
}

func (s *FinishLeaseSupplierstatusRequest) SetProductInstanceId(v string) *FinishLeaseSupplierstatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *FinishLeaseSupplierstatusRequest) SetSupplierOrderNo(v string) *FinishLeaseSupplierstatusRequest {
	s.SupplierOrderNo = &v
	return s
}

func (s *FinishLeaseSupplierstatusRequest) SetOrderId(v string) *FinishLeaseSupplierstatusRequest {
	s.OrderId = &v
	return s
}

func (s *FinishLeaseSupplierstatusRequest) SetLeaseId(v string) *FinishLeaseSupplierstatusRequest {
	s.LeaseId = &v
	return s
}

func (s *FinishLeaseSupplierstatusRequest) SetSupplierOrderStatus(v string) *FinishLeaseSupplierstatusRequest {
	s.SupplierOrderStatus = &v
	return s
}

func (s *FinishLeaseSupplierstatusRequest) SetSupplierLogisticInfo(v *SupplierLogisticInfo) *FinishLeaseSupplierstatusRequest {
	s.SupplierLogisticInfo = v
	return s
}

func (s *FinishLeaseSupplierstatusRequest) SetSupplierOrderProductInfos(v []*SupplierOrderProductInfo) *FinishLeaseSupplierstatusRequest {
	s.SupplierOrderProductInfos = v
	return s
}

func (s *FinishLeaseSupplierstatusRequest) SetSupplierId(v string) *FinishLeaseSupplierstatusRequest {
	s.SupplierId = &v
	return s
}

type FinishLeaseSupplierstatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 租赁信息上链后，链上对应的txHash
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
	// 错误码
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
}

func (s FinishLeaseSupplierstatusResponse) String() string {
	return tea.Prettify(s)
}

func (s FinishLeaseSupplierstatusResponse) GoString() string {
	return s.String()
}

func (s *FinishLeaseSupplierstatusResponse) SetReqMsgId(v string) *FinishLeaseSupplierstatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *FinishLeaseSupplierstatusResponse) SetResultCode(v string) *FinishLeaseSupplierstatusResponse {
	s.ResultCode = &v
	return s
}

func (s *FinishLeaseSupplierstatusResponse) SetResultMsg(v string) *FinishLeaseSupplierstatusResponse {
	s.ResultMsg = &v
	return s
}

func (s *FinishLeaseSupplierstatusResponse) SetResponseData(v string) *FinishLeaseSupplierstatusResponse {
	s.ResponseData = &v
	return s
}

func (s *FinishLeaseSupplierstatusResponse) SetCode(v string) *FinishLeaseSupplierstatusResponse {
	s.Code = &v
	return s
}

func (s *FinishLeaseSupplierstatusResponse) SetErrMessage(v string) *FinishLeaseSupplierstatusResponse {
	s.ErrMessage = &v
	return s
}

type CreateLeaseSupplierproductRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 系统来源
	Origin *string `json:"origin,omitempty" xml:"origin,omitempty" require:"true"`
	// 采购商品信息
	ProductInfo *SupplierProductItem `json:"product_info,omitempty" xml:"product_info,omitempty" require:"true"`
	// 本阶段额外信息
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
}

func (s CreateLeaseSupplierproductRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseSupplierproductRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseSupplierproductRequest) SetAuthToken(v string) *CreateLeaseSupplierproductRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseSupplierproductRequest) SetProductInstanceId(v string) *CreateLeaseSupplierproductRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseSupplierproductRequest) SetOrigin(v string) *CreateLeaseSupplierproductRequest {
	s.Origin = &v
	return s
}

func (s *CreateLeaseSupplierproductRequest) SetProductInfo(v *SupplierProductItem) *CreateLeaseSupplierproductRequest {
	s.ProductInfo = v
	return s
}

func (s *CreateLeaseSupplierproductRequest) SetExtraInfo(v string) *CreateLeaseSupplierproductRequest {
	s.ExtraInfo = &v
	return s
}

type CreateLeaseSupplierproductResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码 0为成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 状态错误信息
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
}

func (s CreateLeaseSupplierproductResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseSupplierproductResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseSupplierproductResponse) SetReqMsgId(v string) *CreateLeaseSupplierproductResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseSupplierproductResponse) SetResultCode(v string) *CreateLeaseSupplierproductResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseSupplierproductResponse) SetResultMsg(v string) *CreateLeaseSupplierproductResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseSupplierproductResponse) SetCode(v int64) *CreateLeaseSupplierproductResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseSupplierproductResponse) SetErrMessage(v string) *CreateLeaseSupplierproductResponse {
	s.ErrMessage = &v
	return s
}

type ApplyLeaseSupplierorderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 供应商id
	SupplierId *string `json:"supplier_id,omitempty" xml:"supplier_id,omitempty" require:"true"`
	// 商品信息
	ProductInfos []*ApplySupplierOrderProductInput `json:"product_infos,omitempty" xml:"product_infos,omitempty" require:"true" type:"Repeated"`
	// isv代理模式
	Mode *string `json:"mode,omitempty" xml:"mode,omitempty"`
	// 被代理的租户id
	AgentLeaseId *string `json:"agent_lease_id,omitempty" xml:"agent_lease_id,omitempty"`
}

func (s ApplyLeaseSupplierorderRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyLeaseSupplierorderRequest) GoString() string {
	return s.String()
}

func (s *ApplyLeaseSupplierorderRequest) SetAuthToken(v string) *ApplyLeaseSupplierorderRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyLeaseSupplierorderRequest) SetProductInstanceId(v string) *ApplyLeaseSupplierorderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyLeaseSupplierorderRequest) SetOrderId(v string) *ApplyLeaseSupplierorderRequest {
	s.OrderId = &v
	return s
}

func (s *ApplyLeaseSupplierorderRequest) SetSupplierId(v string) *ApplyLeaseSupplierorderRequest {
	s.SupplierId = &v
	return s
}

func (s *ApplyLeaseSupplierorderRequest) SetProductInfos(v []*ApplySupplierOrderProductInput) *ApplyLeaseSupplierorderRequest {
	s.ProductInfos = v
	return s
}

func (s *ApplyLeaseSupplierorderRequest) SetMode(v string) *ApplyLeaseSupplierorderRequest {
	s.Mode = &v
	return s
}

func (s *ApplyLeaseSupplierorderRequest) SetAgentLeaseId(v string) *ApplyLeaseSupplierorderRequest {
	s.AgentLeaseId = &v
	return s
}

type ApplyLeaseSupplierorderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单信息
	OrderInfo *ApplySupplierOrderProductOutput `json:"order_info,omitempty" xml:"order_info,omitempty"`
	// 错误码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 商户本次采购的所有商品信息
	ProductInfos []*ApplySupplierOrderProductInput `json:"product_infos,omitempty" xml:"product_infos,omitempty" type:"Repeated"`
}

func (s ApplyLeaseSupplierorderResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyLeaseSupplierorderResponse) GoString() string {
	return s.String()
}

func (s *ApplyLeaseSupplierorderResponse) SetReqMsgId(v string) *ApplyLeaseSupplierorderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyLeaseSupplierorderResponse) SetResultCode(v string) *ApplyLeaseSupplierorderResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyLeaseSupplierorderResponse) SetResultMsg(v string) *ApplyLeaseSupplierorderResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyLeaseSupplierorderResponse) SetOrderInfo(v *ApplySupplierOrderProductOutput) *ApplyLeaseSupplierorderResponse {
	s.OrderInfo = v
	return s
}

func (s *ApplyLeaseSupplierorderResponse) SetCode(v int64) *ApplyLeaseSupplierorderResponse {
	s.Code = &v
	return s
}

func (s *ApplyLeaseSupplierorderResponse) SetErrMessage(v string) *ApplyLeaseSupplierorderResponse {
	s.ErrMessage = &v
	return s
}

func (s *ApplyLeaseSupplierorderResponse) SetProductInfos(v []*ApplySupplierOrderProductInput) *ApplyLeaseSupplierorderResponse {
	s.ProductInfos = v
	return s
}

type CreateLeaseFinancecertifyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 融资租赁合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty" require:"true"`
	// 直付通代扣协议号
	AgreementNo *string `json:"agreement_no,omitempty" xml:"agreement_no,omitempty" require:"true"`
	// 还款类型
	RentalReturnType *string `json:"rental_return_type,omitempty" xml:"rental_return_type,omitempty" require:"true"`
	// 认证类型
	CertifyWay *string `json:"certify_way,omitempty" xml:"certify_way,omitempty" require:"true"`
	// 承租人姓名
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty" require:"true"`
	// 承租人身份证
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 人脸识别认证id
	CertifyId *string `json:"certify_id,omitempty" xml:"certify_id,omitempty" require:"true"`
	// 承租人支付宝uid
	AlipayUid *string `json:"alipay_uid,omitempty" xml:"alipay_uid,omitempty" require:"true"`
	// 提前还款信息
	RentalInfos []*FinanceCertifyRentalInfo `json:"rental_infos,omitempty" xml:"rental_infos,omitempty" require:"true" type:"Repeated"`
}

func (s CreateLeaseFinancecertifyRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseFinancecertifyRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseFinancecertifyRequest) SetAuthToken(v string) *CreateLeaseFinancecertifyRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseFinancecertifyRequest) SetProductInstanceId(v string) *CreateLeaseFinancecertifyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseFinancecertifyRequest) SetOrderId(v string) *CreateLeaseFinancecertifyRequest {
	s.OrderId = &v
	return s
}

func (s *CreateLeaseFinancecertifyRequest) SetApplicationId(v string) *CreateLeaseFinancecertifyRequest {
	s.ApplicationId = &v
	return s
}

func (s *CreateLeaseFinancecertifyRequest) SetAgreementNo(v string) *CreateLeaseFinancecertifyRequest {
	s.AgreementNo = &v
	return s
}

func (s *CreateLeaseFinancecertifyRequest) SetRentalReturnType(v string) *CreateLeaseFinancecertifyRequest {
	s.RentalReturnType = &v
	return s
}

func (s *CreateLeaseFinancecertifyRequest) SetCertifyWay(v string) *CreateLeaseFinancecertifyRequest {
	s.CertifyWay = &v
	return s
}

func (s *CreateLeaseFinancecertifyRequest) SetUserName(v string) *CreateLeaseFinancecertifyRequest {
	s.UserName = &v
	return s
}

func (s *CreateLeaseFinancecertifyRequest) SetUserId(v string) *CreateLeaseFinancecertifyRequest {
	s.UserId = &v
	return s
}

func (s *CreateLeaseFinancecertifyRequest) SetCertifyId(v string) *CreateLeaseFinancecertifyRequest {
	s.CertifyId = &v
	return s
}

func (s *CreateLeaseFinancecertifyRequest) SetAlipayUid(v string) *CreateLeaseFinancecertifyRequest {
	s.AlipayUid = &v
	return s
}

func (s *CreateLeaseFinancecertifyRequest) SetRentalInfos(v []*FinanceCertifyRentalInfo) *CreateLeaseFinancecertifyRequest {
	s.RentalInfos = v
	return s
}

type CreateLeaseFinancecertifyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 本次认证是否通过
	CertifyResult *string `json:"certify_result,omitempty" xml:"certify_result,omitempty"`
	// 通过的人脸认证id
	LeaseCertifyId *string `json:"lease_certify_id,omitempty" xml:"lease_certify_id,omitempty"`
	// 本次调用核验结果码
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s CreateLeaseFinancecertifyResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseFinancecertifyResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseFinancecertifyResponse) SetReqMsgId(v string) *CreateLeaseFinancecertifyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseFinancecertifyResponse) SetResultCode(v string) *CreateLeaseFinancecertifyResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseFinancecertifyResponse) SetResultMsg(v string) *CreateLeaseFinancecertifyResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseFinancecertifyResponse) SetCertifyResult(v string) *CreateLeaseFinancecertifyResponse {
	s.CertifyResult = &v
	return s
}

func (s *CreateLeaseFinancecertifyResponse) SetLeaseCertifyId(v string) *CreateLeaseFinancecertifyResponse {
	s.LeaseCertifyId = &v
	return s
}

func (s *CreateLeaseFinancecertifyResponse) SetCode(v string) *CreateLeaseFinancecertifyResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseFinancecertifyResponse) SetMessage(v string) *CreateLeaseFinancecertifyResponse {
	s.Message = &v
	return s
}

type QueryLeaseFinancecertifyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 租赁商户金融科技租户id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty"`
	// 核验凭证
	LeaseCertifyId *string `json:"lease_certify_id,omitempty" xml:"lease_certify_id,omitempty" require:"true"`
}

func (s QueryLeaseFinancecertifyRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseFinancecertifyRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseFinancecertifyRequest) SetAuthToken(v string) *QueryLeaseFinancecertifyRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseFinancecertifyRequest) SetProductInstanceId(v string) *QueryLeaseFinancecertifyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseFinancecertifyRequest) SetOrderId(v string) *QueryLeaseFinancecertifyRequest {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseFinancecertifyRequest) SetLeaseId(v string) *QueryLeaseFinancecertifyRequest {
	s.LeaseId = &v
	return s
}

func (s *QueryLeaseFinancecertifyRequest) SetLeaseCertifyId(v string) *QueryLeaseFinancecertifyRequest {
	s.LeaseCertifyId = &v
	return s
}

type QueryLeaseFinancecertifyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 核验结果
	CertifyResult *string `json:"certify_result,omitempty" xml:"certify_result,omitempty"`
	// 1636600547
	CertifyTime *int64 `json:"certify_time,omitempty" xml:"certify_time,omitempty"`
	// 还款信息详情
	RentalInfos []*FinanceCertifyRentalInfo `json:"rental_infos,omitempty" xml:"rental_infos,omitempty" type:"Repeated"`
	// 错误码
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 错误码描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s QueryLeaseFinancecertifyResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseFinancecertifyResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseFinancecertifyResponse) SetReqMsgId(v string) *QueryLeaseFinancecertifyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseFinancecertifyResponse) SetResultCode(v string) *QueryLeaseFinancecertifyResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseFinancecertifyResponse) SetResultMsg(v string) *QueryLeaseFinancecertifyResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseFinancecertifyResponse) SetCertifyResult(v string) *QueryLeaseFinancecertifyResponse {
	s.CertifyResult = &v
	return s
}

func (s *QueryLeaseFinancecertifyResponse) SetCertifyTime(v int64) *QueryLeaseFinancecertifyResponse {
	s.CertifyTime = &v
	return s
}

func (s *QueryLeaseFinancecertifyResponse) SetRentalInfos(v []*FinanceCertifyRentalInfo) *QueryLeaseFinancecertifyResponse {
	s.RentalInfos = v
	return s
}

func (s *QueryLeaseFinancecertifyResponse) SetCode(v string) *QueryLeaseFinancecertifyResponse {
	s.Code = &v
	return s
}

func (s *QueryLeaseFinancecertifyResponse) SetMessage(v string) *QueryLeaseFinancecertifyResponse {
	s.Message = &v
	return s
}

type QueryLeaseFinancecertifyincontractRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty" require:"true"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 核验id
	LeaseCertifyId *string `json:"lease_certify_id,omitempty" xml:"lease_certify_id,omitempty" require:"true"`
}

func (s QueryLeaseFinancecertifyincontractRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseFinancecertifyincontractRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseFinancecertifyincontractRequest) SetAuthToken(v string) *QueryLeaseFinancecertifyincontractRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseFinancecertifyincontractRequest) SetProductInstanceId(v string) *QueryLeaseFinancecertifyincontractRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseFinancecertifyincontractRequest) SetApplicationId(v string) *QueryLeaseFinancecertifyincontractRequest {
	s.ApplicationId = &v
	return s
}

func (s *QueryLeaseFinancecertifyincontractRequest) SetOrderId(v string) *QueryLeaseFinancecertifyincontractRequest {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseFinancecertifyincontractRequest) SetLeaseCertifyId(v string) *QueryLeaseFinancecertifyincontractRequest {
	s.LeaseCertifyId = &v
	return s
}

type QueryLeaseFinancecertifyincontractResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 核验结果
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
	// 错误码
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s QueryLeaseFinancecertifyincontractResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseFinancecertifyincontractResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseFinancecertifyincontractResponse) SetReqMsgId(v string) *QueryLeaseFinancecertifyincontractResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseFinancecertifyincontractResponse) SetResultCode(v string) *QueryLeaseFinancecertifyincontractResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseFinancecertifyincontractResponse) SetResultMsg(v string) *QueryLeaseFinancecertifyincontractResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseFinancecertifyincontractResponse) SetResponseData(v string) *QueryLeaseFinancecertifyincontractResponse {
	s.ResponseData = &v
	return s
}

func (s *QueryLeaseFinancecertifyincontractResponse) SetCode(v string) *QueryLeaseFinancecertifyincontractResponse {
	s.Code = &v
	return s
}

func (s *QueryLeaseFinancecertifyincontractResponse) SetMessage(v string) *QueryLeaseFinancecertifyincontractResponse {
	s.Message = &v
	return s
}

type QueryLeaseUserRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 租赁机构id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
	// 合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
}

func (s QueryLeaseUserRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseUserRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseUserRequest) SetAuthToken(v string) *QueryLeaseUserRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseUserRequest) SetProductInstanceId(v string) *QueryLeaseUserRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseUserRequest) SetOrderId(v string) *QueryLeaseUserRequest {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseUserRequest) SetLeaseId(v string) *QueryLeaseUserRequest {
	s.LeaseId = &v
	return s
}

func (s *QueryLeaseUserRequest) SetApplicationId(v string) *QueryLeaseUserRequest {
	s.ApplicationId = &v
	return s
}

type QueryLeaseUserResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
	// 用户登录名，租赁平台会员ID/若支付宝ID必传 长度不可超过50
	LoginId *string `json:"login_id,omitempty" xml:"login_id,omitempty"`
	// 用户登录名类型 1.商户会员2.支付宝3.其他
	LoginType *string `json:"login_type,omitempty" xml:"login_type,omitempty"`
	// 用户登录时间 格式为2019-8-31 12:00:00
	LoginTime *string `json:"login_time,omitempty" xml:"login_time,omitempty"`
	// 承租人姓名，加密返回
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
	// 承租人身份证号，加密返回
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	// 承租人手机号
	UserPhoneNumber *string `json:"user_phone_number,omitempty" xml:"user_phone_number,omitempty"`
	// 身份认证类型 1支付宝实人，2芝麻实人，3非蚂蚁实人
	UserType *string `json:"user_type,omitempty" xml:"user_type,omitempty"`
	// 承租人支付宝账号信息
	AlipayUid *string `json:"alipay_uid,omitempty" xml:"alipay_uid,omitempty"`
	// 出租企业名称
	LeaseCorpName *string `json:"lease_corp_name,omitempty" xml:"lease_corp_name,omitempty"`
	// 出租企业法人名称
	LeaseCorpOwnerName *string `json:"lease_corp_owner_name,omitempty" xml:"lease_corp_owner_name,omitempty"`
	// 承租企业统一社会信用代码 长度不可超过50
	LeaseCorpId *string `json:"lease_corp_id,omitempty" xml:"lease_corp_id,omitempty"`
	// 错误码
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s QueryLeaseUserResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseUserResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseUserResponse) SetReqMsgId(v string) *QueryLeaseUserResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseUserResponse) SetResultCode(v string) *QueryLeaseUserResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseUserResponse) SetResultMsg(v string) *QueryLeaseUserResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseUserResponse) SetOrderId(v string) *QueryLeaseUserResponse {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseUserResponse) SetLoginId(v string) *QueryLeaseUserResponse {
	s.LoginId = &v
	return s
}

func (s *QueryLeaseUserResponse) SetLoginType(v string) *QueryLeaseUserResponse {
	s.LoginType = &v
	return s
}

func (s *QueryLeaseUserResponse) SetLoginTime(v string) *QueryLeaseUserResponse {
	s.LoginTime = &v
	return s
}

func (s *QueryLeaseUserResponse) SetUserName(v string) *QueryLeaseUserResponse {
	s.UserName = &v
	return s
}

func (s *QueryLeaseUserResponse) SetUserId(v string) *QueryLeaseUserResponse {
	s.UserId = &v
	return s
}

func (s *QueryLeaseUserResponse) SetUserPhoneNumber(v string) *QueryLeaseUserResponse {
	s.UserPhoneNumber = &v
	return s
}

func (s *QueryLeaseUserResponse) SetUserType(v string) *QueryLeaseUserResponse {
	s.UserType = &v
	return s
}

func (s *QueryLeaseUserResponse) SetAlipayUid(v string) *QueryLeaseUserResponse {
	s.AlipayUid = &v
	return s
}

func (s *QueryLeaseUserResponse) SetLeaseCorpName(v string) *QueryLeaseUserResponse {
	s.LeaseCorpName = &v
	return s
}

func (s *QueryLeaseUserResponse) SetLeaseCorpOwnerName(v string) *QueryLeaseUserResponse {
	s.LeaseCorpOwnerName = &v
	return s
}

func (s *QueryLeaseUserResponse) SetLeaseCorpId(v string) *QueryLeaseUserResponse {
	s.LeaseCorpId = &v
	return s
}

func (s *QueryLeaseUserResponse) SetCode(v string) *QueryLeaseUserResponse {
	s.Code = &v
	return s
}

func (s *QueryLeaseUserResponse) SetMessage(v string) *QueryLeaseUserResponse {
	s.Message = &v
	return s
}

type QueryLeaseOrderdetailinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 融资租赁租赁机构id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
	// 融资租赁合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
}

func (s QueryLeaseOrderdetailinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseOrderdetailinfoRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseOrderdetailinfoRequest) SetAuthToken(v string) *QueryLeaseOrderdetailinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoRequest) SetProductInstanceId(v string) *QueryLeaseOrderdetailinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoRequest) SetOrderId(v string) *QueryLeaseOrderdetailinfoRequest {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoRequest) SetLeaseId(v string) *QueryLeaseOrderdetailinfoRequest {
	s.LeaseId = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoRequest) SetApplicationId(v string) *QueryLeaseOrderdetailinfoRequest {
	s.ApplicationId = &v
	return s
}

type QueryLeaseOrderdetailinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 融资租赁订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
	// 订单创建时间
	OrderCreateTime *string `json:"order_create_time,omitempty" xml:"order_create_time,omitempty"`
	// 订单支付时间 格式为
	OrderPayTime *string `json:"order_pay_time,omitempty" xml:"order_pay_time,omitempty"`
	// 支付订单id
	OrderPayId *string `json:"order_pay_id,omitempty" xml:"order_pay_id,omitempty"`
	// 订单支付类型 1 预授权，2信用套餐，3支付宝代扣，4其他，5网商直付通代扣
	OrderPayType *int64 `json:"order_pay_type,omitempty" xml:"order_pay_type,omitempty"`
	// 免押金额，芝麻信用免押金额 精确到毫厘，即123400表示12.34元
	DepositFree *int64 `json:"deposit_free,omitempty" xml:"deposit_free,omitempty"`
	// 实际预授权金额，芝麻信用免押金额 精确到毫厘，即123400表示12.34元
	AcutalPreAuthFree *int64 `json:"acutal_pre_auth_free,omitempty" xml:"acutal_pre_auth_free,omitempty"`
	// 租期单位月
	RentTerm *int64 `json:"rent_term,omitempty" xml:"rent_term,omitempty"`
	// 月租金 精确到毫厘，即123400表示12.34元
	RentPricePerMonth *int64 `json:"rent_price_per_month,omitempty" xml:"rent_price_per_month,omitempty"`
	// 到期买断价
	BuyOutPrice *int64 `json:"buy_out_price,omitempty" xml:"buy_out_price,omitempty"`
	// 承租人收货地址
	UserAddress *string `json:"user_address,omitempty" xml:"user_address,omitempty"`
	// 省份编码
	ProvinceCode *string `json:"province_code,omitempty" xml:"province_code,omitempty"`
	// 城市编码
	CityCode *string `json:"city_code,omitempty" xml:"city_code,omitempty"`
	// 地区编码
	DistrictCode *string `json:"district_code,omitempty" xml:"district_code,omitempty"`
	// 租赁合同链接
	RentContractUrl *string `json:"rent_contract_url,omitempty" xml:"rent_contract_url,omitempty"`
	// 保险单号
	InsuranceNumber *string `json:"insurance_number,omitempty" xml:"insurance_number,omitempty"`
	// 保险链接
	InsuranceUrl *string `json:"insurance_url,omitempty" xml:"insurance_url,omitempty"`
	// 采购合同协议
	PurchaseContractUrl *string `json:"purchase_contract_url,omitempty" xml:"purchase_contract_url,omitempty"`
	// 蚁盾分数
	YidunScore *int64 `json:"yidun_score,omitempty" xml:"yidun_score,omitempty"`
	// 物流订单id
	OutStoreDeliverNumber *string `json:"out_store_deliver_number,omitempty" xml:"out_store_deliver_number,omitempty"`
	// 物流发货时间
	OutStoreTime *string `json:"out_store_time,omitempty" xml:"out_store_time,omitempty"`
}

func (s QueryLeaseOrderdetailinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseOrderdetailinfoResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseOrderdetailinfoResponse) SetReqMsgId(v string) *QueryLeaseOrderdetailinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoResponse) SetResultCode(v string) *QueryLeaseOrderdetailinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoResponse) SetResultMsg(v string) *QueryLeaseOrderdetailinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoResponse) SetOrderId(v string) *QueryLeaseOrderdetailinfoResponse {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoResponse) SetOrderCreateTime(v string) *QueryLeaseOrderdetailinfoResponse {
	s.OrderCreateTime = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoResponse) SetOrderPayTime(v string) *QueryLeaseOrderdetailinfoResponse {
	s.OrderPayTime = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoResponse) SetOrderPayId(v string) *QueryLeaseOrderdetailinfoResponse {
	s.OrderPayId = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoResponse) SetOrderPayType(v int64) *QueryLeaseOrderdetailinfoResponse {
	s.OrderPayType = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoResponse) SetDepositFree(v int64) *QueryLeaseOrderdetailinfoResponse {
	s.DepositFree = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoResponse) SetAcutalPreAuthFree(v int64) *QueryLeaseOrderdetailinfoResponse {
	s.AcutalPreAuthFree = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoResponse) SetRentTerm(v int64) *QueryLeaseOrderdetailinfoResponse {
	s.RentTerm = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoResponse) SetRentPricePerMonth(v int64) *QueryLeaseOrderdetailinfoResponse {
	s.RentPricePerMonth = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoResponse) SetBuyOutPrice(v int64) *QueryLeaseOrderdetailinfoResponse {
	s.BuyOutPrice = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoResponse) SetUserAddress(v string) *QueryLeaseOrderdetailinfoResponse {
	s.UserAddress = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoResponse) SetProvinceCode(v string) *QueryLeaseOrderdetailinfoResponse {
	s.ProvinceCode = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoResponse) SetCityCode(v string) *QueryLeaseOrderdetailinfoResponse {
	s.CityCode = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoResponse) SetDistrictCode(v string) *QueryLeaseOrderdetailinfoResponse {
	s.DistrictCode = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoResponse) SetRentContractUrl(v string) *QueryLeaseOrderdetailinfoResponse {
	s.RentContractUrl = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoResponse) SetInsuranceNumber(v string) *QueryLeaseOrderdetailinfoResponse {
	s.InsuranceNumber = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoResponse) SetInsuranceUrl(v string) *QueryLeaseOrderdetailinfoResponse {
	s.InsuranceUrl = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoResponse) SetPurchaseContractUrl(v string) *QueryLeaseOrderdetailinfoResponse {
	s.PurchaseContractUrl = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoResponse) SetYidunScore(v int64) *QueryLeaseOrderdetailinfoResponse {
	s.YidunScore = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoResponse) SetOutStoreDeliverNumber(v string) *QueryLeaseOrderdetailinfoResponse {
	s.OutStoreDeliverNumber = &v
	return s
}

func (s *QueryLeaseOrderdetailinfoResponse) SetOutStoreTime(v string) *QueryLeaseOrderdetailinfoResponse {
	s.OutStoreTime = &v
	return s
}

type QueryLeaseLeasepromiseRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 租赁机构id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
	// 融资租赁合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
}

func (s QueryLeaseLeasepromiseRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseLeasepromiseRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseLeasepromiseRequest) SetAuthToken(v string) *QueryLeaseLeasepromiseRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseLeasepromiseRequest) SetProductInstanceId(v string) *QueryLeaseLeasepromiseRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseLeasepromiseRequest) SetOrderId(v string) *QueryLeaseLeasepromiseRequest {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseLeasepromiseRequest) SetLeaseId(v string) *QueryLeaseLeasepromiseRequest {
	s.LeaseId = &v
	return s
}

func (s *QueryLeaseLeasepromiseRequest) SetApplicationId(v string) *QueryLeaseLeasepromiseRequest {
	s.ApplicationId = &v
	return s
}

type QueryLeaseLeasepromiseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
	// 用户端承诺
	LeasePromiseInfo []*LeasePromiseInfo `json:"lease_promise_info,omitempty" xml:"lease_promise_info,omitempty" type:"Repeated"`
	// 租期
	PayPeriod *int64 `json:"pay_period,omitempty" xml:"pay_period,omitempty"`
	// 租赁机构支付宝uid
	LeaseAlipayUid *string `json:"lease_alipay_uid,omitempty" xml:"lease_alipay_uid,omitempty"`
	// 错误码
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s QueryLeaseLeasepromiseResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseLeasepromiseResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseLeasepromiseResponse) SetReqMsgId(v string) *QueryLeaseLeasepromiseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseLeasepromiseResponse) SetResultCode(v string) *QueryLeaseLeasepromiseResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseLeasepromiseResponse) SetResultMsg(v string) *QueryLeaseLeasepromiseResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseLeasepromiseResponse) SetOrderId(v string) *QueryLeaseLeasepromiseResponse {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseLeasepromiseResponse) SetLeasePromiseInfo(v []*LeasePromiseInfo) *QueryLeaseLeasepromiseResponse {
	s.LeasePromiseInfo = v
	return s
}

func (s *QueryLeaseLeasepromiseResponse) SetPayPeriod(v int64) *QueryLeaseLeasepromiseResponse {
	s.PayPeriod = &v
	return s
}

func (s *QueryLeaseLeasepromiseResponse) SetLeaseAlipayUid(v string) *QueryLeaseLeasepromiseResponse {
	s.LeaseAlipayUid = &v
	return s
}

func (s *QueryLeaseLeasepromiseResponse) SetCode(v string) *QueryLeaseLeasepromiseResponse {
	s.Code = &v
	return s
}

func (s *QueryLeaseLeasepromiseResponse) SetMessage(v string) *QueryLeaseLeasepromiseResponse {
	s.Message = &v
	return s
}

type QueryLeaseCreditpromiseRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 租赁机构id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
	// 融资租赁合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
}

func (s QueryLeaseCreditpromiseRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseCreditpromiseRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseCreditpromiseRequest) SetAuthToken(v string) *QueryLeaseCreditpromiseRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseCreditpromiseRequest) SetProductInstanceId(v string) *QueryLeaseCreditpromiseRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseCreditpromiseRequest) SetOrderId(v string) *QueryLeaseCreditpromiseRequest {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseCreditpromiseRequest) SetLeaseId(v string) *QueryLeaseCreditpromiseRequest {
	s.LeaseId = &v
	return s
}

func (s *QueryLeaseCreditpromiseRequest) SetApplicationId(v string) *QueryLeaseCreditpromiseRequest {
	s.ApplicationId = &v
	return s
}

type QueryLeaseCreditpromiseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
	// 融资租赁资方承诺列表
	LeaseCreditPromiseInfo []*LeaseCreditPromiseInfo `json:"lease_credit_promise_info,omitempty" xml:"lease_credit_promise_info,omitempty" type:"Repeated"`
	// 错误码
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s QueryLeaseCreditpromiseResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseCreditpromiseResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseCreditpromiseResponse) SetReqMsgId(v string) *QueryLeaseCreditpromiseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseCreditpromiseResponse) SetResultCode(v string) *QueryLeaseCreditpromiseResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseCreditpromiseResponse) SetResultMsg(v string) *QueryLeaseCreditpromiseResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseCreditpromiseResponse) SetOrderId(v string) *QueryLeaseCreditpromiseResponse {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseCreditpromiseResponse) SetLeaseCreditPromiseInfo(v []*LeaseCreditPromiseInfo) *QueryLeaseCreditpromiseResponse {
	s.LeaseCreditPromiseInfo = v
	return s
}

func (s *QueryLeaseCreditpromiseResponse) SetCode(v string) *QueryLeaseCreditpromiseResponse {
	s.Code = &v
	return s
}

func (s *QueryLeaseCreditpromiseResponse) SetMessage(v string) *QueryLeaseCreditpromiseResponse {
	s.Message = &v
	return s
}

type QueryLeaseClearingRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 租赁机构id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
	// 融资租赁合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
}

func (s QueryLeaseClearingRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseClearingRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseClearingRequest) SetAuthToken(v string) *QueryLeaseClearingRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseClearingRequest) SetProductInstanceId(v string) *QueryLeaseClearingRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseClearingRequest) SetOrderId(v string) *QueryLeaseClearingRequest {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseClearingRequest) SetLeaseId(v string) *QueryLeaseClearingRequest {
	s.LeaseId = &v
	return s
}

func (s *QueryLeaseClearingRequest) SetApplicationId(v string) *QueryLeaseClearingRequest {
	s.ApplicationId = &v
	return s
}

type QueryLeaseClearingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
	// 融资租赁清分信息
	CleearingInfos []*LeaseClearingInfo `json:"cleearing_infos,omitempty" xml:"cleearing_infos,omitempty" type:"Repeated"`
	// 错误码
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s QueryLeaseClearingResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseClearingResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseClearingResponse) SetReqMsgId(v string) *QueryLeaseClearingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseClearingResponse) SetResultCode(v string) *QueryLeaseClearingResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseClearingResponse) SetResultMsg(v string) *QueryLeaseClearingResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseClearingResponse) SetOrderId(v string) *QueryLeaseClearingResponse {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseClearingResponse) SetCleearingInfos(v []*LeaseClearingInfo) *QueryLeaseClearingResponse {
	s.CleearingInfos = v
	return s
}

func (s *QueryLeaseClearingResponse) SetCode(v string) *QueryLeaseClearingResponse {
	s.Code = &v
	return s
}

func (s *QueryLeaseClearingResponse) SetMessage(v string) *QueryLeaseClearingResponse {
	s.Message = &v
	return s
}

type QueryLeaseRentalinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 融资租赁合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 租赁机构id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
}

func (s QueryLeaseRentalinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseRentalinfoRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseRentalinfoRequest) SetAuthToken(v string) *QueryLeaseRentalinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseRentalinfoRequest) SetProductInstanceId(v string) *QueryLeaseRentalinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseRentalinfoRequest) SetOrderId(v string) *QueryLeaseRentalinfoRequest {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseRentalinfoRequest) SetApplicationId(v string) *QueryLeaseRentalinfoRequest {
	s.ApplicationId = &v
	return s
}

func (s *QueryLeaseRentalinfoRequest) SetLeaseId(v string) *QueryLeaseRentalinfoRequest {
	s.LeaseId = &v
	return s
}

type QueryLeaseRentalinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 融资租赁订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
	// 用户侧还款信息
	RentalInfos []*LeaseRentalInfo `json:"rental_infos,omitempty" xml:"rental_infos,omitempty" type:"Repeated"`
	// 错误码
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s QueryLeaseRentalinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseRentalinfoResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseRentalinfoResponse) SetReqMsgId(v string) *QueryLeaseRentalinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseRentalinfoResponse) SetResultCode(v string) *QueryLeaseRentalinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseRentalinfoResponse) SetResultMsg(v string) *QueryLeaseRentalinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseRentalinfoResponse) SetOrderId(v string) *QueryLeaseRentalinfoResponse {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseRentalinfoResponse) SetRentalInfos(v []*LeaseRentalInfo) *QueryLeaseRentalinfoResponse {
	s.RentalInfos = v
	return s
}

func (s *QueryLeaseRentalinfoResponse) SetCode(v string) *QueryLeaseRentalinfoResponse {
	s.Code = &v
	return s
}

func (s *QueryLeaseRentalinfoResponse) SetMessage(v string) *QueryLeaseRentalinfoResponse {
	s.Message = &v
	return s
}

type QueryLeaseRepaymentRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 租赁机构id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
	// 融资租赁合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty" require:"true"`
}

func (s QueryLeaseRepaymentRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseRepaymentRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseRepaymentRequest) SetAuthToken(v string) *QueryLeaseRepaymentRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseRepaymentRequest) SetProductInstanceId(v string) *QueryLeaseRepaymentRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseRepaymentRequest) SetOrderId(v string) *QueryLeaseRepaymentRequest {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseRepaymentRequest) SetLeaseId(v string) *QueryLeaseRepaymentRequest {
	s.LeaseId = &v
	return s
}

func (s *QueryLeaseRepaymentRequest) SetApplicationId(v string) *QueryLeaseRepaymentRequest {
	s.ApplicationId = &v
	return s
}

type QueryLeaseRepaymentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
	// 租赁机构端还款信息
	RepaymentInfos []*LeaseRepaymentInfo `json:"repayment_infos,omitempty" xml:"repayment_infos,omitempty" type:"Repeated"`
	// 错误码
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s QueryLeaseRepaymentResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseRepaymentResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseRepaymentResponse) SetReqMsgId(v string) *QueryLeaseRepaymentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseRepaymentResponse) SetResultCode(v string) *QueryLeaseRepaymentResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseRepaymentResponse) SetResultMsg(v string) *QueryLeaseRepaymentResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseRepaymentResponse) SetOrderId(v string) *QueryLeaseRepaymentResponse {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseRepaymentResponse) SetRepaymentInfos(v []*LeaseRepaymentInfo) *QueryLeaseRepaymentResponse {
	s.RepaymentInfos = v
	return s
}

func (s *QueryLeaseRepaymentResponse) SetCode(v string) *QueryLeaseRepaymentResponse {
	s.Code = &v
	return s
}

func (s *QueryLeaseRepaymentResponse) SetMessage(v string) *QueryLeaseRepaymentResponse {
	s.Message = &v
	return s
}

type QueryLeaseOrderproductRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 租赁机构id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
	// 合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty" require:"true"`
}

func (s QueryLeaseOrderproductRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseOrderproductRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseOrderproductRequest) SetAuthToken(v string) *QueryLeaseOrderproductRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseOrderproductRequest) SetProductInstanceId(v string) *QueryLeaseOrderproductRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseOrderproductRequest) SetOrderId(v string) *QueryLeaseOrderproductRequest {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseOrderproductRequest) SetLeaseId(v string) *QueryLeaseOrderproductRequest {
	s.LeaseId = &v
	return s
}

func (s *QueryLeaseOrderproductRequest) SetApplicationId(v string) *QueryLeaseOrderproductRequest {
	s.ApplicationId = &v
	return s
}

type QueryLeaseOrderproductResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误码
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 返回信息描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
	// 订单商品信息的数组
	ProductInfos []*LeaseOrderProductInfo `json:"product_infos,omitempty" xml:"product_infos,omitempty" type:"Repeated"`
}

func (s QueryLeaseOrderproductResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseOrderproductResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseOrderproductResponse) SetReqMsgId(v string) *QueryLeaseOrderproductResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseOrderproductResponse) SetResultCode(v string) *QueryLeaseOrderproductResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseOrderproductResponse) SetResultMsg(v string) *QueryLeaseOrderproductResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseOrderproductResponse) SetCode(v string) *QueryLeaseOrderproductResponse {
	s.Code = &v
	return s
}

func (s *QueryLeaseOrderproductResponse) SetMessage(v string) *QueryLeaseOrderproductResponse {
	s.Message = &v
	return s
}

func (s *QueryLeaseOrderproductResponse) SetOrderId(v string) *QueryLeaseOrderproductResponse {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseOrderproductResponse) SetProductInfos(v []*LeaseOrderProductInfo) *QueryLeaseOrderproductResponse {
	s.ProductInfos = v
	return s
}

type QueryLeaseFinancecreditRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 租赁机构金融科技租户id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
	// 融资租赁合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 融资租赁清分期数
	Term *int64 `json:"term,omitempty" xml:"term,omitempty" require:"true"`
}

func (s QueryLeaseFinancecreditRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseFinancecreditRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseFinancecreditRequest) SetAuthToken(v string) *QueryLeaseFinancecreditRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseFinancecreditRequest) SetProductInstanceId(v string) *QueryLeaseFinancecreditRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseFinancecreditRequest) SetOrderId(v string) *QueryLeaseFinancecreditRequest {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseFinancecreditRequest) SetLeaseId(v string) *QueryLeaseFinancecreditRequest {
	s.LeaseId = &v
	return s
}

func (s *QueryLeaseFinancecreditRequest) SetApplicationId(v string) *QueryLeaseFinancecreditRequest {
	s.ApplicationId = &v
	return s
}

func (s *QueryLeaseFinancecreditRequest) SetTerm(v int64) *QueryLeaseFinancecreditRequest {
	s.Term = &v
	return s
}

type QueryLeaseFinancecreditResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 融资租赁资金方金融科技租户id
	CreditId *string `json:"credit_id,omitempty" xml:"credit_id,omitempty"`
}

func (s QueryLeaseFinancecreditResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseFinancecreditResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseFinancecreditResponse) SetReqMsgId(v string) *QueryLeaseFinancecreditResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseFinancecreditResponse) SetResultCode(v string) *QueryLeaseFinancecreditResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseFinancecreditResponse) SetResultMsg(v string) *QueryLeaseFinancecreditResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseFinancecreditResponse) SetCreditId(v string) *QueryLeaseFinancecreditResponse {
	s.CreditId = &v
	return s
}

type QueryRefinanceOrderidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 资产包id
	PackageId *string `json:"package_id,omitempty" xml:"package_id,omitempty" require:"true"`
	// 从第0页开始
	Page *int64 `json:"page,omitempty" xml:"page,omitempty" require:"true"`
	// 每次max最多查询的个数
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
}

func (s QueryRefinanceOrderidRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRefinanceOrderidRequest) GoString() string {
	return s.String()
}

func (s *QueryRefinanceOrderidRequest) SetAuthToken(v string) *QueryRefinanceOrderidRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRefinanceOrderidRequest) SetProductInstanceId(v string) *QueryRefinanceOrderidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryRefinanceOrderidRequest) SetPackageId(v string) *QueryRefinanceOrderidRequest {
	s.PackageId = &v
	return s
}

func (s *QueryRefinanceOrderidRequest) SetPage(v int64) *QueryRefinanceOrderidRequest {
	s.Page = &v
	return s
}

func (s *QueryRefinanceOrderidRequest) SetPageSize(v int64) *QueryRefinanceOrderidRequest {
	s.PageSize = &v
	return s
}

type QueryRefinanceOrderidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单id列表
	OrderInfoList []*RefinanceOrderInfoResponse `json:"order_info_list,omitempty" xml:"order_info_list,omitempty" type:"Repeated"`
}

func (s QueryRefinanceOrderidResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRefinanceOrderidResponse) GoString() string {
	return s.String()
}

func (s *QueryRefinanceOrderidResponse) SetReqMsgId(v string) *QueryRefinanceOrderidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRefinanceOrderidResponse) SetResultCode(v string) *QueryRefinanceOrderidResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRefinanceOrderidResponse) SetResultMsg(v string) *QueryRefinanceOrderidResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRefinanceOrderidResponse) SetOrderInfoList(v []*RefinanceOrderInfoResponse) *QueryRefinanceOrderidResponse {
	s.OrderInfoList = v
	return s
}

type QueryRefinanceOrderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 资产包id
	PackageId *string `json:"package_id,omitempty" xml:"package_id,omitempty" require:"true"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 阶段描述
	PhaseInfo *string `json:"phase_info,omitempty" xml:"phase_info,omitempty"`
}

func (s QueryRefinanceOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRefinanceOrderRequest) GoString() string {
	return s.String()
}

func (s *QueryRefinanceOrderRequest) SetAuthToken(v string) *QueryRefinanceOrderRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRefinanceOrderRequest) SetProductInstanceId(v string) *QueryRefinanceOrderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryRefinanceOrderRequest) SetPackageId(v string) *QueryRefinanceOrderRequest {
	s.PackageId = &v
	return s
}

func (s *QueryRefinanceOrderRequest) SetOrderId(v string) *QueryRefinanceOrderRequest {
	s.OrderId = &v
	return s
}

func (s *QueryRefinanceOrderRequest) SetPhaseInfo(v string) *QueryRefinanceOrderRequest {
	s.PhaseInfo = &v
	return s
}

type QueryRefinanceOrderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// json串，详见接口文档
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryRefinanceOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRefinanceOrderResponse) GoString() string {
	return s.String()
}

func (s *QueryRefinanceOrderResponse) SetReqMsgId(v string) *QueryRefinanceOrderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRefinanceOrderResponse) SetResultCode(v string) *QueryRefinanceOrderResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRefinanceOrderResponse) SetResultMsg(v string) *QueryRefinanceOrderResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRefinanceOrderResponse) SetData(v string) *QueryRefinanceOrderResponse {
	s.Data = &v
	return s
}

type QueryRefinanceProductRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 资产包id
	PackageId *string `json:"package_id,omitempty" xml:"package_id,omitempty" require:"true"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty" require:"true"`
	// 商品id
	ProductId *string `json:"product_id,omitempty" xml:"product_id,omitempty" require:"true"`
	// 商品版本号
	ProductVersion *string `json:"product_version,omitempty" xml:"product_version,omitempty" require:"true"`
}

func (s QueryRefinanceProductRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRefinanceProductRequest) GoString() string {
	return s.String()
}

func (s *QueryRefinanceProductRequest) SetAuthToken(v string) *QueryRefinanceProductRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryRefinanceProductRequest) SetProductInstanceId(v string) *QueryRefinanceProductRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryRefinanceProductRequest) SetPackageId(v string) *QueryRefinanceProductRequest {
	s.PackageId = &v
	return s
}

func (s *QueryRefinanceProductRequest) SetOrderId(v string) *QueryRefinanceProductRequest {
	s.OrderId = &v
	return s
}

func (s *QueryRefinanceProductRequest) SetApplicationId(v string) *QueryRefinanceProductRequest {
	s.ApplicationId = &v
	return s
}

func (s *QueryRefinanceProductRequest) SetProductId(v string) *QueryRefinanceProductRequest {
	s.ProductId = &v
	return s
}

func (s *QueryRefinanceProductRequest) SetProductVersion(v string) *QueryRefinanceProductRequest {
	s.ProductVersion = &v
	return s
}

type QueryRefinanceProductResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 商品信息，json格式
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s QueryRefinanceProductResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRefinanceProductResponse) GoString() string {
	return s.String()
}

func (s *QueryRefinanceProductResponse) SetReqMsgId(v string) *QueryRefinanceProductResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryRefinanceProductResponse) SetResultCode(v string) *QueryRefinanceProductResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryRefinanceProductResponse) SetResultMsg(v string) *QueryRefinanceProductResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryRefinanceProductResponse) SetResponseData(v string) *QueryRefinanceProductResponse {
	s.ResponseData = &v
	return s
}

type VerifyRefinancePackageRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 资产包id
	PackageId *string `json:"package_id,omitempty" xml:"package_id,omitempty" require:"true"`
	// AUDIT_SUCCESS(审核通过), AUDIT_REFUSE(审核驳回), AUDITING(审核中，需要调无效资产推送将无效资产分批推送过来)
	AuditStatus *string `json:"audit_status,omitempty" xml:"audit_status,omitempty" require:"true"`
	// 放款金额，单位毫厘
	RecreditLimit *int64 `json:"recredit_limit,omitempty" xml:"recredit_limit,omitempty"`
	// 再融资放款流水号
	RecreditSerialNumber *string `json:"recredit_serial_number,omitempty" xml:"recredit_serial_number,omitempty"`
	// 额外审核信息说明
	AuditMessage *string `json:"audit_message,omitempty" xml:"audit_message,omitempty"`
}

func (s VerifyRefinancePackageRequest) String() string {
	return tea.Prettify(s)
}

func (s VerifyRefinancePackageRequest) GoString() string {
	return s.String()
}

func (s *VerifyRefinancePackageRequest) SetAuthToken(v string) *VerifyRefinancePackageRequest {
	s.AuthToken = &v
	return s
}

func (s *VerifyRefinancePackageRequest) SetProductInstanceId(v string) *VerifyRefinancePackageRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *VerifyRefinancePackageRequest) SetPackageId(v string) *VerifyRefinancePackageRequest {
	s.PackageId = &v
	return s
}

func (s *VerifyRefinancePackageRequest) SetAuditStatus(v string) *VerifyRefinancePackageRequest {
	s.AuditStatus = &v
	return s
}

func (s *VerifyRefinancePackageRequest) SetRecreditLimit(v int64) *VerifyRefinancePackageRequest {
	s.RecreditLimit = &v
	return s
}

func (s *VerifyRefinancePackageRequest) SetRecreditSerialNumber(v string) *VerifyRefinancePackageRequest {
	s.RecreditSerialNumber = &v
	return s
}

func (s *VerifyRefinancePackageRequest) SetAuditMessage(v string) *VerifyRefinancePackageRequest {
	s.AuditMessage = &v
	return s
}

type VerifyRefinancePackageResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 资产包当前的状态
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s VerifyRefinancePackageResponse) String() string {
	return tea.Prettify(s)
}

func (s VerifyRefinancePackageResponse) GoString() string {
	return s.String()
}

func (s *VerifyRefinancePackageResponse) SetReqMsgId(v string) *VerifyRefinancePackageResponse {
	s.ReqMsgId = &v
	return s
}

func (s *VerifyRefinancePackageResponse) SetResultCode(v string) *VerifyRefinancePackageResponse {
	s.ResultCode = &v
	return s
}

func (s *VerifyRefinancePackageResponse) SetResultMsg(v string) *VerifyRefinancePackageResponse {
	s.ResultMsg = &v
	return s
}

func (s *VerifyRefinancePackageResponse) SetStatus(v string) *VerifyRefinancePackageResponse {
	s.Status = &v
	return s
}

type QueryLeaseOrderclearingRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 期数
	Term *int64 `json:"term,omitempty" xml:"term,omitempty" require:"true"`
	// 融资租赁合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 清分单号
	ClearingOrderId *string `json:"clearing_order_id,omitempty" xml:"clearing_order_id,omitempty" require:"true"`
	// 租赁机构id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty"`
}

func (s QueryLeaseOrderclearingRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseOrderclearingRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseOrderclearingRequest) SetAuthToken(v string) *QueryLeaseOrderclearingRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseOrderclearingRequest) SetProductInstanceId(v string) *QueryLeaseOrderclearingRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseOrderclearingRequest) SetOrderId(v string) *QueryLeaseOrderclearingRequest {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseOrderclearingRequest) SetTerm(v int64) *QueryLeaseOrderclearingRequest {
	s.Term = &v
	return s
}

func (s *QueryLeaseOrderclearingRequest) SetApplicationId(v string) *QueryLeaseOrderclearingRequest {
	s.ApplicationId = &v
	return s
}

func (s *QueryLeaseOrderclearingRequest) SetClearingOrderId(v string) *QueryLeaseOrderclearingRequest {
	s.ClearingOrderId = &v
	return s
}

func (s *QueryLeaseOrderclearingRequest) SetLeaseId(v string) *QueryLeaseOrderclearingRequest {
	s.LeaseId = &v
	return s
}

type QueryLeaseOrderclearingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单清分信息
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// 错误信息描述
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
}

func (s QueryLeaseOrderclearingResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseOrderclearingResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseOrderclearingResponse) SetReqMsgId(v string) *QueryLeaseOrderclearingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseOrderclearingResponse) SetResultCode(v string) *QueryLeaseOrderclearingResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseOrderclearingResponse) SetResultMsg(v string) *QueryLeaseOrderclearingResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseOrderclearingResponse) SetData(v string) *QueryLeaseOrderclearingResponse {
	s.Data = &v
	return s
}

func (s *QueryLeaseOrderclearingResponse) SetCode(v string) *QueryLeaseOrderclearingResponse {
	s.Code = &v
	return s
}

func (s *QueryLeaseOrderclearingResponse) SetErrMessage(v string) *QueryLeaseOrderclearingResponse {
	s.ErrMessage = &v
	return s
}

type QueryLeaseRepaymentstatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 融资租赁合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 租赁机构id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty"`
}

func (s QueryLeaseRepaymentstatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseRepaymentstatusRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseRepaymentstatusRequest) SetAuthToken(v string) *QueryLeaseRepaymentstatusRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseRepaymentstatusRequest) SetProductInstanceId(v string) *QueryLeaseRepaymentstatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseRepaymentstatusRequest) SetOrderId(v string) *QueryLeaseRepaymentstatusRequest {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseRepaymentstatusRequest) SetApplicationId(v string) *QueryLeaseRepaymentstatusRequest {
	s.ApplicationId = &v
	return s
}

func (s *QueryLeaseRepaymentstatusRequest) SetLeaseId(v string) *QueryLeaseRepaymentstatusRequest {
	s.LeaseId = &v
	return s
}

type QueryLeaseRepaymentstatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单结清详细信息
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// 错误码
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
}

func (s QueryLeaseRepaymentstatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseRepaymentstatusResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseRepaymentstatusResponse) SetReqMsgId(v string) *QueryLeaseRepaymentstatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseRepaymentstatusResponse) SetResultCode(v string) *QueryLeaseRepaymentstatusResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseRepaymentstatusResponse) SetResultMsg(v string) *QueryLeaseRepaymentstatusResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseRepaymentstatusResponse) SetData(v string) *QueryLeaseRepaymentstatusResponse {
	s.Data = &v
	return s
}

func (s *QueryLeaseRepaymentstatusResponse) SetCode(v string) *QueryLeaseRepaymentstatusResponse {
	s.Code = &v
	return s
}

func (s *QueryLeaseRepaymentstatusResponse) SetErrMessage(v string) *QueryLeaseRepaymentstatusResponse {
	s.ErrMessage = &v
	return s
}

type QueryLeaseUserperformanceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 本次融资的订单号
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 首租订单号
	FirstOrderId *string `json:"first_order_id,omitempty" xml:"first_order_id,omitempty" require:"true"`
	// 本次融资双方的合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty" require:"true"`
	// 商家的租户id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
	// 首次融资的合约id
	FirstApplicationId *string `json:"first_application_id,omitempty" xml:"first_application_id,omitempty"`
}

func (s QueryLeaseUserperformanceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseUserperformanceRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseUserperformanceRequest) SetAuthToken(v string) *QueryLeaseUserperformanceRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseUserperformanceRequest) SetProductInstanceId(v string) *QueryLeaseUserperformanceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseUserperformanceRequest) SetOrderId(v string) *QueryLeaseUserperformanceRequest {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseUserperformanceRequest) SetFirstOrderId(v string) *QueryLeaseUserperformanceRequest {
	s.FirstOrderId = &v
	return s
}

func (s *QueryLeaseUserperformanceRequest) SetApplicationId(v string) *QueryLeaseUserperformanceRequest {
	s.ApplicationId = &v
	return s
}

func (s *QueryLeaseUserperformanceRequest) SetLeaseId(v string) *QueryLeaseUserperformanceRequest {
	s.LeaseId = &v
	return s
}

func (s *QueryLeaseUserperformanceRequest) SetFirstApplicationId(v string) *QueryLeaseUserperformanceRequest {
	s.FirstApplicationId = &v
	return s
}

type QueryLeaseUserperformanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 链上不存在该订单，该订单存在链上，但未获取链上融资，全部履约，累积逾期次数
	ResultMessage *string `json:"result_message,omitempty" xml:"result_message,omitempty"`
	// 预期次数
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s QueryLeaseUserperformanceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseUserperformanceResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseUserperformanceResponse) SetReqMsgId(v string) *QueryLeaseUserperformanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseUserperformanceResponse) SetResultCode(v string) *QueryLeaseUserperformanceResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseUserperformanceResponse) SetResultMsg(v string) *QueryLeaseUserperformanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseUserperformanceResponse) SetResultMessage(v string) *QueryLeaseUserperformanceResponse {
	s.ResultMessage = &v
	return s
}

func (s *QueryLeaseUserperformanceResponse) SetResponseData(v string) *QueryLeaseUserperformanceResponse {
	s.ResponseData = &v
	return s
}

type QueryLeaseRentalverifyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 约定的合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty" require:"true"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 核验类型
	ProofType *string `json:"proof_type,omitempty" xml:"proof_type,omitempty" require:"true"`
	// 还款流水号
	ReturnVoucherSerial *string `json:"return_voucher_serial,omitempty" xml:"return_voucher_serial,omitempty" require:"true"`
	// 归还期数
	ReturnTerm *int64 `json:"return_term,omitempty" xml:"return_term,omitempty" require:"true"`
	// 租赁商户的id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
}

func (s QueryLeaseRentalverifyRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseRentalverifyRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseRentalverifyRequest) SetAuthToken(v string) *QueryLeaseRentalverifyRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseRentalverifyRequest) SetProductInstanceId(v string) *QueryLeaseRentalverifyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseRentalverifyRequest) SetApplicationId(v string) *QueryLeaseRentalverifyRequest {
	s.ApplicationId = &v
	return s
}

func (s *QueryLeaseRentalverifyRequest) SetOrderId(v string) *QueryLeaseRentalverifyRequest {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseRentalverifyRequest) SetProofType(v string) *QueryLeaseRentalverifyRequest {
	s.ProofType = &v
	return s
}

func (s *QueryLeaseRentalverifyRequest) SetReturnVoucherSerial(v string) *QueryLeaseRentalverifyRequest {
	s.ReturnVoucherSerial = &v
	return s
}

func (s *QueryLeaseRentalverifyRequest) SetReturnTerm(v int64) *QueryLeaseRentalverifyRequest {
	s.ReturnTerm = &v
	return s
}

func (s *QueryLeaseRentalverifyRequest) SetLeaseId(v string) *QueryLeaseRentalverifyRequest {
	s.LeaseId = &v
	return s
}

type QueryLeaseRentalverifyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误信息
	ResultMessage *string `json:"result_message,omitempty" xml:"result_message,omitempty"`
	// 不匹配的时候，相应的信息
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s QueryLeaseRentalverifyResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseRentalverifyResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseRentalverifyResponse) SetReqMsgId(v string) *QueryLeaseRentalverifyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseRentalverifyResponse) SetResultCode(v string) *QueryLeaseRentalverifyResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseRentalverifyResponse) SetResultMsg(v string) *QueryLeaseRentalverifyResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseRentalverifyResponse) SetResultMessage(v string) *QueryLeaseRentalverifyResponse {
	s.ResultMessage = &v
	return s
}

func (s *QueryLeaseRentalverifyResponse) SetResponseData(v string) *QueryLeaseRentalverifyResponse {
	s.ResponseData = &v
	return s
}

type QueryLeaseInstallmentRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 归还的第几期
	Term *string `json:"term,omitempty" xml:"term,omitempty" require:"true"`
	// 商家租户id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
}

func (s QueryLeaseInstallmentRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseInstallmentRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseInstallmentRequest) SetAuthToken(v string) *QueryLeaseInstallmentRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseInstallmentRequest) SetProductInstanceId(v string) *QueryLeaseInstallmentRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseInstallmentRequest) SetApplicationId(v string) *QueryLeaseInstallmentRequest {
	s.ApplicationId = &v
	return s
}

func (s *QueryLeaseInstallmentRequest) SetOrderId(v string) *QueryLeaseInstallmentRequest {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseInstallmentRequest) SetTerm(v string) *QueryLeaseInstallmentRequest {
	s.Term = &v
	return s
}

func (s *QueryLeaseInstallmentRequest) SetLeaseId(v string) *QueryLeaseInstallmentRequest {
	s.LeaseId = &v
	return s
}

type QueryLeaseInstallmentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回对应的
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s QueryLeaseInstallmentResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseInstallmentResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseInstallmentResponse) SetReqMsgId(v string) *QueryLeaseInstallmentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseInstallmentResponse) SetResultCode(v string) *QueryLeaseInstallmentResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseInstallmentResponse) SetResultMsg(v string) *QueryLeaseInstallmentResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseInstallmentResponse) SetResponseData(v string) *QueryLeaseInstallmentResponse {
	s.ResponseData = &v
	return s
}

type CancelLeaseInsuranceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 租赁订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 人保扩展信息，订单投保时的保司为人保时，此字段必填
	RenbaoExtInfo *RenbaoExtInfo `json:"renbao_ext_info,omitempty" xml:"renbao_ext_info,omitempty"`
}

func (s CancelLeaseInsuranceRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelLeaseInsuranceRequest) GoString() string {
	return s.String()
}

func (s *CancelLeaseInsuranceRequest) SetAuthToken(v string) *CancelLeaseInsuranceRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelLeaseInsuranceRequest) SetProductInstanceId(v string) *CancelLeaseInsuranceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CancelLeaseInsuranceRequest) SetOrderId(v string) *CancelLeaseInsuranceRequest {
	s.OrderId = &v
	return s
}

func (s *CancelLeaseInsuranceRequest) SetRenbaoExtInfo(v *RenbaoExtInfo) *CancelLeaseInsuranceRequest {
	s.RenbaoExtInfo = v
	return s
}

type CancelLeaseInsuranceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 退保状态：CALCE_FAIL退保失败、CACEL_SUCCESS退保成功、CANCELING退保中
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 退保保单号
	PolicyNo *string `json:"policy_no,omitempty" xml:"policy_no,omitempty"`
	// 退还保费，单位：分
	SrdPremium *string `json:"srd_premium,omitempty" xml:"srd_premium,omitempty"`
	// 结果码，00表示成功
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 结果描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 是否为实收保单退保
	RepayFlag *string `json:"repay_flag,omitempty" xml:"repay_flag,omitempty"`
}

func (s CancelLeaseInsuranceResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelLeaseInsuranceResponse) GoString() string {
	return s.String()
}

func (s *CancelLeaseInsuranceResponse) SetReqMsgId(v string) *CancelLeaseInsuranceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelLeaseInsuranceResponse) SetResultCode(v string) *CancelLeaseInsuranceResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelLeaseInsuranceResponse) SetResultMsg(v string) *CancelLeaseInsuranceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CancelLeaseInsuranceResponse) SetStatus(v string) *CancelLeaseInsuranceResponse {
	s.Status = &v
	return s
}

func (s *CancelLeaseInsuranceResponse) SetPolicyNo(v string) *CancelLeaseInsuranceResponse {
	s.PolicyNo = &v
	return s
}

func (s *CancelLeaseInsuranceResponse) SetSrdPremium(v string) *CancelLeaseInsuranceResponse {
	s.SrdPremium = &v
	return s
}

func (s *CancelLeaseInsuranceResponse) SetCode(v string) *CancelLeaseInsuranceResponse {
	s.Code = &v
	return s
}

func (s *CancelLeaseInsuranceResponse) SetMessage(v string) *CancelLeaseInsuranceResponse {
	s.Message = &v
	return s
}

func (s *CancelLeaseInsuranceResponse) SetRepayFlag(v string) *CancelLeaseInsuranceResponse {
	s.RepayFlag = &v
	return s
}

type PushRefinanceInvalidorderRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 资产包id
	PackageId *string `json:"package_id,omitempty" xml:"package_id,omitempty" require:"true" maxLength:"64"`
	// 无效资产订单id列表，单次不限笔数，如果没有无效资产，传空列表即可
	OrderIdList []*string `json:"order_id_list,omitempty" xml:"order_id_list,omitempty" type:"Repeated"`
}

func (s PushRefinanceInvalidorderRequest) String() string {
	return tea.Prettify(s)
}

func (s PushRefinanceInvalidorderRequest) GoString() string {
	return s.String()
}

func (s *PushRefinanceInvalidorderRequest) SetAuthToken(v string) *PushRefinanceInvalidorderRequest {
	s.AuthToken = &v
	return s
}

func (s *PushRefinanceInvalidorderRequest) SetProductInstanceId(v string) *PushRefinanceInvalidorderRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *PushRefinanceInvalidorderRequest) SetPackageId(v string) *PushRefinanceInvalidorderRequest {
	s.PackageId = &v
	return s
}

func (s *PushRefinanceInvalidorderRequest) SetOrderIdList(v []*string) *PushRefinanceInvalidorderRequest {
	s.OrderIdList = v
	return s
}

type PushRefinanceInvalidorderResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否受让成功
	AcceptSuccess *bool `json:"accept_success,omitempty" xml:"accept_success,omitempty"`
}

func (s PushRefinanceInvalidorderResponse) String() string {
	return tea.Prettify(s)
}

func (s PushRefinanceInvalidorderResponse) GoString() string {
	return s.String()
}

func (s *PushRefinanceInvalidorderResponse) SetReqMsgId(v string) *PushRefinanceInvalidorderResponse {
	s.ReqMsgId = &v
	return s
}

func (s *PushRefinanceInvalidorderResponse) SetResultCode(v string) *PushRefinanceInvalidorderResponse {
	s.ResultCode = &v
	return s
}

func (s *PushRefinanceInvalidorderResponse) SetResultMsg(v string) *PushRefinanceInvalidorderResponse {
	s.ResultMsg = &v
	return s
}

func (s *PushRefinanceInvalidorderResponse) SetAcceptSuccess(v bool) *PushRefinanceInvalidorderResponse {
	s.AcceptSuccess = &v
	return s
}

type CreateLeaseRiskRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 承租人信息
	Person *LesseePerson `json:"person,omitempty" xml:"person,omitempty" require:"true"`
	// 承租人类型，目前仅支持个人类型
	// PERSONAL 个人
	// ENTERPRISE 企业
	LesseeType *string `json:"lessee_type,omitempty" xml:"lessee_type,omitempty" require:"true"`
}

func (s CreateLeaseRiskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseRiskRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseRiskRequest) SetAuthToken(v string) *CreateLeaseRiskRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseRiskRequest) SetProductInstanceId(v string) *CreateLeaseRiskRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseRiskRequest) SetOrderId(v string) *CreateLeaseRiskRequest {
	s.OrderId = &v
	return s
}

func (s *CreateLeaseRiskRequest) SetPerson(v *LesseePerson) *CreateLeaseRiskRequest {
	s.Person = v
	return s
}

func (s *CreateLeaseRiskRequest) SetLesseeType(v string) *CreateLeaseRiskRequest {
	s.LesseeType = &v
	return s
}

type CreateLeaseRiskResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 风控结果
	// SUCCESS：通过
	// FAIL：不通过
	Paas *string `json:"paas,omitempty" xml:"paas,omitempty"`
	// 风控识别id，与订单id对应
	RiskId *string `json:"risk_id,omitempty" xml:"risk_id,omitempty"`
	// 风控规则对应的版本号
	RiskVersion *string `json:"risk_version,omitempty" xml:"risk_version,omitempty"`
}

func (s CreateLeaseRiskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseRiskResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseRiskResponse) SetReqMsgId(v string) *CreateLeaseRiskResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseRiskResponse) SetResultCode(v string) *CreateLeaseRiskResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseRiskResponse) SetResultMsg(v string) *CreateLeaseRiskResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseRiskResponse) SetPaas(v string) *CreateLeaseRiskResponse {
	s.Paas = &v
	return s
}

func (s *CreateLeaseRiskResponse) SetRiskId(v string) *CreateLeaseRiskResponse {
	s.RiskId = &v
	return s
}

func (s *CreateLeaseRiskResponse) SetRiskVersion(v string) *CreateLeaseRiskResponse {
	s.RiskVersion = &v
	return s
}

type CreateLeaseAsyncverifyinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 融资租赁业务id，由资方控制台生成返回
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 放款账户
	CardNumber *string `json:"card_number,omitempty" xml:"card_number,omitempty"`
	// 授信终止时间，格式为"2019-07-31 12:00:00"
	CreditEndTime *string `json:"credit_end_time,omitempty" xml:"credit_end_time,omitempty"`
	// 授信额度，精确到毫厘，即123400表示12.34元
	CreditLimit *int64 `json:"credit_limit,omitempty" xml:"credit_limit,omitempty"`
	// 授信起始时间，格式为"2019-07-31 12:00:00"
	CreditStartTime *string `json:"credit_start_time,omitempty" xml:"credit_start_time,omitempty"`
	// 融资租赁审贷信息额外字段
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// 承租企业统一社会信用代码 长度不可超过50
	LeaseCorpId *string `json:"lease_corp_id,omitempty" xml:"lease_corp_id,omitempty" maxLength:"50"`
	// 承租企业名称 长度不可超过50
	LeaseCorpName *string `json:"lease_corp_name,omitempty" xml:"lease_corp_name,omitempty" maxLength:"50"`
	// 承租法定代表人姓名 长度不可超过50
	LeaseCorpOwnerName *string `json:"lease_corp_owner_name,omitempty" xml:"lease_corp_owner_name,omitempty" maxLength:"50"`
	// 租赁服务平台id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true" maxLength:"32" minLength:"1"`
	// 放款流水单号
	Loan *string `json:"loan,omitempty" xml:"loan,omitempty"`
	// 订单id 长度不可超过50
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true" maxLength:"50"`
	// 还款计划文件哈希
	PayBackHash *string `json:"pay_back_hash,omitempty" xml:"pay_back_hash,omitempty"`
	// 还款计划文件存证交易哈希
	PayBackTxHash *string `json:"pay_back_tx_hash,omitempty" xml:"pay_back_tx_hash,omitempty"`
	// 承租人身份证
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	// 承租人姓名 长度不可超过10
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty" maxLength:"10"`
	// 承租人手机号
	UserPhoneNumber *string `json:"user_phone_number,omitempty" xml:"user_phone_number,omitempty"`
	// 拒绝的理由
	VerifyRefuseDesc *string `json:"verify_refuse_desc,omitempty" xml:"verify_refuse_desc,omitempty"`
	// 是否通过，0表示不通过，1表示通过
	VerifyResult *int64 `json:"verify_result,omitempty" xml:"verify_result,omitempty" require:"true"`
	// 付款汇款凭证 民盛转账成功后上传
	Voucher *string `json:"voucher,omitempty" xml:"voucher,omitempty"`
}

func (s CreateLeaseAsyncverifyinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseAsyncverifyinfoRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseAsyncverifyinfoRequest) SetAuthToken(v string) *CreateLeaseAsyncverifyinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoRequest) SetProductInstanceId(v string) *CreateLeaseAsyncverifyinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoRequest) SetApplicationId(v string) *CreateLeaseAsyncverifyinfoRequest {
	s.ApplicationId = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoRequest) SetCardNumber(v string) *CreateLeaseAsyncverifyinfoRequest {
	s.CardNumber = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoRequest) SetCreditEndTime(v string) *CreateLeaseAsyncverifyinfoRequest {
	s.CreditEndTime = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoRequest) SetCreditLimit(v int64) *CreateLeaseAsyncverifyinfoRequest {
	s.CreditLimit = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoRequest) SetCreditStartTime(v string) *CreateLeaseAsyncverifyinfoRequest {
	s.CreditStartTime = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoRequest) SetExtraInfo(v string) *CreateLeaseAsyncverifyinfoRequest {
	s.ExtraInfo = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoRequest) SetLeaseCorpId(v string) *CreateLeaseAsyncverifyinfoRequest {
	s.LeaseCorpId = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoRequest) SetLeaseCorpName(v string) *CreateLeaseAsyncverifyinfoRequest {
	s.LeaseCorpName = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoRequest) SetLeaseCorpOwnerName(v string) *CreateLeaseAsyncverifyinfoRequest {
	s.LeaseCorpOwnerName = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoRequest) SetLeaseId(v string) *CreateLeaseAsyncverifyinfoRequest {
	s.LeaseId = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoRequest) SetLoan(v string) *CreateLeaseAsyncverifyinfoRequest {
	s.Loan = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoRequest) SetOrderId(v string) *CreateLeaseAsyncverifyinfoRequest {
	s.OrderId = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoRequest) SetPayBackHash(v string) *CreateLeaseAsyncverifyinfoRequest {
	s.PayBackHash = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoRequest) SetPayBackTxHash(v string) *CreateLeaseAsyncverifyinfoRequest {
	s.PayBackTxHash = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoRequest) SetUserId(v string) *CreateLeaseAsyncverifyinfoRequest {
	s.UserId = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoRequest) SetUserName(v string) *CreateLeaseAsyncverifyinfoRequest {
	s.UserName = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoRequest) SetUserPhoneNumber(v string) *CreateLeaseAsyncverifyinfoRequest {
	s.UserPhoneNumber = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoRequest) SetVerifyRefuseDesc(v string) *CreateLeaseAsyncverifyinfoRequest {
	s.VerifyRefuseDesc = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoRequest) SetVerifyResult(v int64) *CreateLeaseAsyncverifyinfoRequest {
	s.VerifyResult = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoRequest) SetVoucher(v string) *CreateLeaseAsyncverifyinfoRequest {
	s.Voucher = &v
	return s
}

type CreateLeaseAsyncverifyinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 异步回执id，可用于查看合约执行结果
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty"`
	// 结果码，成功为OK
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 结果描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s CreateLeaseAsyncverifyinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseAsyncverifyinfoResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseAsyncverifyinfoResponse) SetReqMsgId(v string) *CreateLeaseAsyncverifyinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoResponse) SetResultCode(v string) *CreateLeaseAsyncverifyinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoResponse) SetResultMsg(v string) *CreateLeaseAsyncverifyinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoResponse) SetBizId(v string) *CreateLeaseAsyncverifyinfoResponse {
	s.BizId = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoResponse) SetCode(v string) *CreateLeaseAsyncverifyinfoResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseAsyncverifyinfoResponse) SetMessage(v string) *CreateLeaseAsyncverifyinfoResponse {
	s.Message = &v
	return s
}

type CreateLeaseAsynccreditpromiseRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 融资租赁业务id，由资方控制台创建返回
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 融资租赁承诺额外字段
	CreditPromiseExtraInfoList []*string `json:"credit_promise_extra_info_list,omitempty" xml:"credit_promise_extra_info_list,omitempty" type:"Repeated"`
	// 租赁平台金融科技id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true" maxLength:"32" minLength:"1"`
	// 订单id 长度不可超过50
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true" maxLength:"50"`
	// 垫付金额
	PayInAdvanceMoney *int64 `json:"pay_in_advance_money,omitempty" xml:"pay_in_advance_money,omitempty"`
	// 垫付金额，精确到毫厘，即123400表示12.34元
	PayInAdvanceMoneyList []*int64 `json:"pay_in_advance_money_list,omitempty" xml:"pay_in_advance_money_list,omitempty" type:"Repeated"`
	// 垫付日期
	PayInAdvanceTime *string `json:"pay_in_advance_time,omitempty" xml:"pay_in_advance_time,omitempty"`
	// 垫付日 格式为2019-8-31 12:00:00
	PayInAdvanceTimeList []*string `json:"pay_in_advance_time_list,omitempty" xml:"pay_in_advance_time_list,omitempty" require:"true" type:"Repeated"`
	// 根据融资租赁合同及其补充协议哈希
	PromiseHash *string `json:"promise_hash,omitempty" xml:"promise_hash,omitempty" require:"true" maxLength:"70" minLength:"1"`
	// 根据融资租赁合同及其补充协议存证交易hash
	PromiseTxHash *string `json:"promise_tx_hash,omitempty" xml:"promise_tx_hash,omitempty" require:"true" maxLength:"70" minLength:"1"`
	// 归还金额
	ReturnMoney *int64 `json:"return_money,omitempty" xml:"return_money,omitempty"`
	// 还款金额，精确到毫厘，即123400表示12.34元
	ReturnMoneyList []*int64 `json:"return_money_list,omitempty" xml:"return_money_list,omitempty" require:"true" type:"Repeated"`
	// 还款比例，精确到小数点后四位 12.34% 表示为1234
	ReturnRate *int64 `json:"return_rate,omitempty" xml:"return_rate,omitempty" minimum:"0"`
	// 归还日，格式为"2019-07-31 12:00:00"
	ReturnTime *string `json:"return_time,omitempty" xml:"return_time,omitempty"`
	// 归还日，格式为"2019-07-31 12:00:00"
	ReturnTimeList []*string `json:"return_time_list,omitempty" xml:"return_time_list,omitempty" require:"true" type:"Repeated"`
}

func (s CreateLeaseAsynccreditpromiseRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseAsynccreditpromiseRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseAsynccreditpromiseRequest) SetAuthToken(v string) *CreateLeaseAsynccreditpromiseRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseAsynccreditpromiseRequest) SetProductInstanceId(v string) *CreateLeaseAsynccreditpromiseRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseAsynccreditpromiseRequest) SetApplicationId(v string) *CreateLeaseAsynccreditpromiseRequest {
	s.ApplicationId = &v
	return s
}

func (s *CreateLeaseAsynccreditpromiseRequest) SetCreditPromiseExtraInfoList(v []*string) *CreateLeaseAsynccreditpromiseRequest {
	s.CreditPromiseExtraInfoList = v
	return s
}

func (s *CreateLeaseAsynccreditpromiseRequest) SetLeaseId(v string) *CreateLeaseAsynccreditpromiseRequest {
	s.LeaseId = &v
	return s
}

func (s *CreateLeaseAsynccreditpromiseRequest) SetOrderId(v string) *CreateLeaseAsynccreditpromiseRequest {
	s.OrderId = &v
	return s
}

func (s *CreateLeaseAsynccreditpromiseRequest) SetPayInAdvanceMoney(v int64) *CreateLeaseAsynccreditpromiseRequest {
	s.PayInAdvanceMoney = &v
	return s
}

func (s *CreateLeaseAsynccreditpromiseRequest) SetPayInAdvanceMoneyList(v []*int64) *CreateLeaseAsynccreditpromiseRequest {
	s.PayInAdvanceMoneyList = v
	return s
}

func (s *CreateLeaseAsynccreditpromiseRequest) SetPayInAdvanceTime(v string) *CreateLeaseAsynccreditpromiseRequest {
	s.PayInAdvanceTime = &v
	return s
}

func (s *CreateLeaseAsynccreditpromiseRequest) SetPayInAdvanceTimeList(v []*string) *CreateLeaseAsynccreditpromiseRequest {
	s.PayInAdvanceTimeList = v
	return s
}

func (s *CreateLeaseAsynccreditpromiseRequest) SetPromiseHash(v string) *CreateLeaseAsynccreditpromiseRequest {
	s.PromiseHash = &v
	return s
}

func (s *CreateLeaseAsynccreditpromiseRequest) SetPromiseTxHash(v string) *CreateLeaseAsynccreditpromiseRequest {
	s.PromiseTxHash = &v
	return s
}

func (s *CreateLeaseAsynccreditpromiseRequest) SetReturnMoney(v int64) *CreateLeaseAsynccreditpromiseRequest {
	s.ReturnMoney = &v
	return s
}

func (s *CreateLeaseAsynccreditpromiseRequest) SetReturnMoneyList(v []*int64) *CreateLeaseAsynccreditpromiseRequest {
	s.ReturnMoneyList = v
	return s
}

func (s *CreateLeaseAsynccreditpromiseRequest) SetReturnRate(v int64) *CreateLeaseAsynccreditpromiseRequest {
	s.ReturnRate = &v
	return s
}

func (s *CreateLeaseAsynccreditpromiseRequest) SetReturnTime(v string) *CreateLeaseAsynccreditpromiseRequest {
	s.ReturnTime = &v
	return s
}

func (s *CreateLeaseAsynccreditpromiseRequest) SetReturnTimeList(v []*string) *CreateLeaseAsynccreditpromiseRequest {
	s.ReturnTimeList = v
	return s
}

type CreateLeaseAsynccreditpromiseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 异步回执id，可用于查看合约执行结果
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty"`
	// 结果码，OK表示成功
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 结果描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s CreateLeaseAsynccreditpromiseResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseAsynccreditpromiseResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseAsynccreditpromiseResponse) SetReqMsgId(v string) *CreateLeaseAsynccreditpromiseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseAsynccreditpromiseResponse) SetResultCode(v string) *CreateLeaseAsynccreditpromiseResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseAsynccreditpromiseResponse) SetResultMsg(v string) *CreateLeaseAsynccreditpromiseResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseAsynccreditpromiseResponse) SetBizId(v string) *CreateLeaseAsynccreditpromiseResponse {
	s.BizId = &v
	return s
}

func (s *CreateLeaseAsynccreditpromiseResponse) SetCode(v string) *CreateLeaseAsynccreditpromiseResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseAsynccreditpromiseResponse) SetMessage(v string) *CreateLeaseAsynccreditpromiseResponse {
	s.Message = &v
	return s
}

type CreateLeaseAsyncclearingRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 融资租赁业务id，由资方控制台创建返回
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 清分收款账号 长度不超过64
	ClearingAccount *string `json:"clearing_account,omitempty" xml:"clearing_account,omitempty" require:"true" maxLength:"64" minLength:"0"`
	// 清分金额,精确到毫厘，即123400表示12.34元
	ClearingMoney *int64 `json:"clearing_money,omitempty" xml:"clearing_money,omitempty" require:"true"`
	// 清分订单号 长度不超过128
	ClearingOrderIds []*string `json:"clearing_order_ids,omitempty" xml:"clearing_order_ids,omitempty" require:"true" type:"Repeated"`
	// 清分状态,1.足额2.部分3.零
	ClearingState *int64 `json:"clearing_state,omitempty" xml:"clearing_state,omitempty"`
	// 结束时间，格式为"2019-07-31 12:00:00"
	EndTime *string `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 融资租赁额外字段
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// 租赁平台商户Id 长度不可超过50
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true" maxLength:"50" minLength:"1"`
	// 订单id 长度不可超过50
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true" maxLength:"50"`
	// 还款批次
	ReturnIndex *int64 `json:"return_index,omitempty" xml:"return_index,omitempty" require:"true" maximum:"1024" minimum:"1"`
	// 开始时间，格式为"2019-07-31 12:00:00"
	StartTime *string `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 清分资金的来源，比如用户xx元，商家yy元
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty" maxLength:"128"`
	// 融资租赁资金方id
	CreditId *string `json:"credit_id,omitempty" xml:"credit_id,omitempty"`
}

func (s CreateLeaseAsyncclearingRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseAsyncclearingRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseAsyncclearingRequest) SetAuthToken(v string) *CreateLeaseAsyncclearingRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseAsyncclearingRequest) SetProductInstanceId(v string) *CreateLeaseAsyncclearingRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseAsyncclearingRequest) SetApplicationId(v string) *CreateLeaseAsyncclearingRequest {
	s.ApplicationId = &v
	return s
}

func (s *CreateLeaseAsyncclearingRequest) SetClearingAccount(v string) *CreateLeaseAsyncclearingRequest {
	s.ClearingAccount = &v
	return s
}

func (s *CreateLeaseAsyncclearingRequest) SetClearingMoney(v int64) *CreateLeaseAsyncclearingRequest {
	s.ClearingMoney = &v
	return s
}

func (s *CreateLeaseAsyncclearingRequest) SetClearingOrderIds(v []*string) *CreateLeaseAsyncclearingRequest {
	s.ClearingOrderIds = v
	return s
}

func (s *CreateLeaseAsyncclearingRequest) SetClearingState(v int64) *CreateLeaseAsyncclearingRequest {
	s.ClearingState = &v
	return s
}

func (s *CreateLeaseAsyncclearingRequest) SetEndTime(v string) *CreateLeaseAsyncclearingRequest {
	s.EndTime = &v
	return s
}

func (s *CreateLeaseAsyncclearingRequest) SetExtraInfo(v string) *CreateLeaseAsyncclearingRequest {
	s.ExtraInfo = &v
	return s
}

func (s *CreateLeaseAsyncclearingRequest) SetLeaseId(v string) *CreateLeaseAsyncclearingRequest {
	s.LeaseId = &v
	return s
}

func (s *CreateLeaseAsyncclearingRequest) SetOrderId(v string) *CreateLeaseAsyncclearingRequest {
	s.OrderId = &v
	return s
}

func (s *CreateLeaseAsyncclearingRequest) SetReturnIndex(v int64) *CreateLeaseAsyncclearingRequest {
	s.ReturnIndex = &v
	return s
}

func (s *CreateLeaseAsyncclearingRequest) SetStartTime(v string) *CreateLeaseAsyncclearingRequest {
	s.StartTime = &v
	return s
}

func (s *CreateLeaseAsyncclearingRequest) SetMemo(v string) *CreateLeaseAsyncclearingRequest {
	s.Memo = &v
	return s
}

func (s *CreateLeaseAsyncclearingRequest) SetCreditId(v string) *CreateLeaseAsyncclearingRequest {
	s.CreditId = &v
	return s
}

type CreateLeaseAsyncclearingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 异步回执id，可用于查看合约执行结果
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty"`
	// 结果码，OK表示成功
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 结果描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s CreateLeaseAsyncclearingResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseAsyncclearingResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseAsyncclearingResponse) SetReqMsgId(v string) *CreateLeaseAsyncclearingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseAsyncclearingResponse) SetResultCode(v string) *CreateLeaseAsyncclearingResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseAsyncclearingResponse) SetResultMsg(v string) *CreateLeaseAsyncclearingResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseAsyncclearingResponse) SetBizId(v string) *CreateLeaseAsyncclearingResponse {
	s.BizId = &v
	return s
}

func (s *CreateLeaseAsyncclearingResponse) SetCode(v string) *CreateLeaseAsyncclearingResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseAsyncclearingResponse) SetMessage(v string) *CreateLeaseAsyncclearingResponse {
	s.Message = &v
	return s
}

type CreateLeaseAsyncrepaymentRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 融资租赁业务id，由资方控制台生成返回
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 融资租赁租户还款额外字段
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// 是否最终订单还款结束
	IsFinish *bool `json:"is_finish,omitempty" xml:"is_finish,omitempty" require:"true"`
	// 租赁平台商户Id 长度不可超过50
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true" maxLength:"50" minLength:"1"`
	// 订单id 长度不可超过50
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true" maxLength:"50"`
	// 逾期天数,支用到期日开始计算
	OverdueDay *int64 `json:"overdue_day,omitempty" xml:"overdue_day,omitempty"`
	// 逾期应还款总额,本金+利息+逾期利息,精确到毫厘，即123400表示12.34元
	OverdueMoney *int64 `json:"overdue_money,omitempty" xml:"overdue_money,omitempty"`
	// 逾期利率（日利率）,精确到小数点后四位 12.34% 表示为1234
	OverdueRate *int64 `json:"overdue_rate,omitempty" xml:"overdue_rate,omitempty"`
	// 逾期状态,暂时都以0处理，目前不处理
	OverdueStatus *int64 `json:"overdue_status,omitempty" xml:"overdue_status,omitempty"`
	// 剩余应还金额，精确到毫厘，即123400表示12.34元
	RemainReturnMoney *int64 `json:"remain_return_money,omitempty" xml:"remain_return_money,omitempty" require:"true" minimum:"0"`
	// 剩余应还期数
	RemainReturnTerm *int64 `json:"remain_return_term,omitempty" xml:"remain_return_term,omitempty" require:"true" maximum:"1024" minimum:"0"`
	// 每次还款流水凭证，需要融资方确认，id一样则不处理
	RepaymentUniqueId *string `json:"repayment_unique_id,omitempty" xml:"repayment_unique_id,omitempty" require:"true"`
	// 还款结果简要描述,长度不超过256
	ReturnDescription *string `json:"return_description,omitempty" xml:"return_description,omitempty" require:"true" maxLength:"256" minLength:"1"`
	// 还款批次
	ReturnIndex *int64 `json:"return_index,omitempty" xml:"return_index,omitempty" require:"true" maximum:"1024" minimum:"1"`
	// 还款总额,本金+利息，精确到毫厘，即123400表示12.34元
	ReturnMoney *int64 `json:"return_money,omitempty" xml:"return_money,omitempty" require:"true" minimum:"0"`
	// 还款结果状态,1.成功 2.失败
	ReturnStatus *int64 `json:"return_status,omitempty" xml:"return_status,omitempty" require:"true"`
	// 还款日期，格式为"2019-07-31 12:00:00"
	ReturnTime *string `json:"return_time,omitempty" xml:"return_time,omitempty" require:"true"`
	// 还款来源,1.共管账号，2.网商清分
	Source *int64 `json:"source,omitempty" xml:"source,omitempty" require:"true" maximum:"2" minimum:"1"`
	// 逾期后还款状态,1未还款,2已还款
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 原所有权id
	OldOwnershipId *string `json:"old_ownership_id,omitempty" xml:"old_ownership_id,omitempty"`
	// 现所有权id
	NewOwnershipId *string `json:"new_ownership_id,omitempty" xml:"new_ownership_id,omitempty"`
}

func (s CreateLeaseAsyncrepaymentRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseAsyncrepaymentRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseAsyncrepaymentRequest) SetAuthToken(v string) *CreateLeaseAsyncrepaymentRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentRequest) SetProductInstanceId(v string) *CreateLeaseAsyncrepaymentRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentRequest) SetApplicationId(v string) *CreateLeaseAsyncrepaymentRequest {
	s.ApplicationId = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentRequest) SetExtraInfo(v string) *CreateLeaseAsyncrepaymentRequest {
	s.ExtraInfo = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentRequest) SetIsFinish(v bool) *CreateLeaseAsyncrepaymentRequest {
	s.IsFinish = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentRequest) SetLeaseId(v string) *CreateLeaseAsyncrepaymentRequest {
	s.LeaseId = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentRequest) SetOrderId(v string) *CreateLeaseAsyncrepaymentRequest {
	s.OrderId = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentRequest) SetOverdueDay(v int64) *CreateLeaseAsyncrepaymentRequest {
	s.OverdueDay = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentRequest) SetOverdueMoney(v int64) *CreateLeaseAsyncrepaymentRequest {
	s.OverdueMoney = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentRequest) SetOverdueRate(v int64) *CreateLeaseAsyncrepaymentRequest {
	s.OverdueRate = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentRequest) SetOverdueStatus(v int64) *CreateLeaseAsyncrepaymentRequest {
	s.OverdueStatus = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentRequest) SetRemainReturnMoney(v int64) *CreateLeaseAsyncrepaymentRequest {
	s.RemainReturnMoney = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentRequest) SetRemainReturnTerm(v int64) *CreateLeaseAsyncrepaymentRequest {
	s.RemainReturnTerm = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentRequest) SetRepaymentUniqueId(v string) *CreateLeaseAsyncrepaymentRequest {
	s.RepaymentUniqueId = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentRequest) SetReturnDescription(v string) *CreateLeaseAsyncrepaymentRequest {
	s.ReturnDescription = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentRequest) SetReturnIndex(v int64) *CreateLeaseAsyncrepaymentRequest {
	s.ReturnIndex = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentRequest) SetReturnMoney(v int64) *CreateLeaseAsyncrepaymentRequest {
	s.ReturnMoney = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentRequest) SetReturnStatus(v int64) *CreateLeaseAsyncrepaymentRequest {
	s.ReturnStatus = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentRequest) SetReturnTime(v string) *CreateLeaseAsyncrepaymentRequest {
	s.ReturnTime = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentRequest) SetSource(v int64) *CreateLeaseAsyncrepaymentRequest {
	s.Source = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentRequest) SetStatus(v int64) *CreateLeaseAsyncrepaymentRequest {
	s.Status = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentRequest) SetOldOwnershipId(v string) *CreateLeaseAsyncrepaymentRequest {
	s.OldOwnershipId = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentRequest) SetNewOwnershipId(v string) *CreateLeaseAsyncrepaymentRequest {
	s.NewOwnershipId = &v
	return s
}

type CreateLeaseAsyncrepaymentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 异步回执id，可用于查看合约执行结果
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty"`
	// 结果码，OK表示成功
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 结果描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s CreateLeaseAsyncrepaymentResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseAsyncrepaymentResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseAsyncrepaymentResponse) SetReqMsgId(v string) *CreateLeaseAsyncrepaymentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentResponse) SetResultCode(v string) *CreateLeaseAsyncrepaymentResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentResponse) SetResultMsg(v string) *CreateLeaseAsyncrepaymentResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentResponse) SetBizId(v string) *CreateLeaseAsyncrepaymentResponse {
	s.BizId = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentResponse) SetCode(v string) *CreateLeaseAsyncrepaymentResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseAsyncrepaymentResponse) SetMessage(v string) *CreateLeaseAsyncrepaymentResponse {
	s.Message = &v
	return s
}

type CreateLeaseAsyncauditRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 融资租赁业务id，由资方控制台创建返回
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 融资机构审核批次
	BatchIndex *string `json:"batch_index,omitempty" xml:"batch_index,omitempty"`
	// 当前订单处于本批次中的index
	CurrentAuditIndex *int64 `json:"current_audit_index,omitempty" xml:"current_audit_index,omitempty"`
	// 融资租赁额外字段
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// 租赁服务平台ID 长度不可超过50
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true" maxLength:"50"`
	// 融资机构审核状态，0.审核中1.审核失败2.审核成功
	ManualAudit *int64 `json:"manual_audit,omitempty" xml:"manual_audit,omitempty" require:"true"`
	// 融资结构审核说明，非必填，审核失败必填失败原因
	ManualAuditComments *string `json:"manual_audit_comments,omitempty" xml:"manual_audit_comments,omitempty"`
	// 订单id 长度不可超过50
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true" maxLength:"50"`
	// 额外通知第三方，如果需要通知相关方外的第三方，需要在此设置关联方的租户id，若不设置则只通知资方
	RelatedNotify []*string `json:"related_notify,omitempty" xml:"related_notify,omitempty" type:"Repeated"`
	// 总审核的个数
	TotalAuditNumber *int64 `json:"total_audit_number,omitempty" xml:"total_audit_number,omitempty"`
}

func (s CreateLeaseAsyncauditRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseAsyncauditRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseAsyncauditRequest) SetAuthToken(v string) *CreateLeaseAsyncauditRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseAsyncauditRequest) SetProductInstanceId(v string) *CreateLeaseAsyncauditRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseAsyncauditRequest) SetApplicationId(v string) *CreateLeaseAsyncauditRequest {
	s.ApplicationId = &v
	return s
}

func (s *CreateLeaseAsyncauditRequest) SetBatchIndex(v string) *CreateLeaseAsyncauditRequest {
	s.BatchIndex = &v
	return s
}

func (s *CreateLeaseAsyncauditRequest) SetCurrentAuditIndex(v int64) *CreateLeaseAsyncauditRequest {
	s.CurrentAuditIndex = &v
	return s
}

func (s *CreateLeaseAsyncauditRequest) SetExtraInfo(v string) *CreateLeaseAsyncauditRequest {
	s.ExtraInfo = &v
	return s
}

func (s *CreateLeaseAsyncauditRequest) SetLeaseId(v string) *CreateLeaseAsyncauditRequest {
	s.LeaseId = &v
	return s
}

func (s *CreateLeaseAsyncauditRequest) SetManualAudit(v int64) *CreateLeaseAsyncauditRequest {
	s.ManualAudit = &v
	return s
}

func (s *CreateLeaseAsyncauditRequest) SetManualAuditComments(v string) *CreateLeaseAsyncauditRequest {
	s.ManualAuditComments = &v
	return s
}

func (s *CreateLeaseAsyncauditRequest) SetOrderId(v string) *CreateLeaseAsyncauditRequest {
	s.OrderId = &v
	return s
}

func (s *CreateLeaseAsyncauditRequest) SetRelatedNotify(v []*string) *CreateLeaseAsyncauditRequest {
	s.RelatedNotify = v
	return s
}

func (s *CreateLeaseAsyncauditRequest) SetTotalAuditNumber(v int64) *CreateLeaseAsyncauditRequest {
	s.TotalAuditNumber = &v
	return s
}

type CreateLeaseAsyncauditResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 异步回执id，可用于查看合约执行结果
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty"`
	// 结果码，OK表示成功
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 结果描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s CreateLeaseAsyncauditResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseAsyncauditResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseAsyncauditResponse) SetReqMsgId(v string) *CreateLeaseAsyncauditResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseAsyncauditResponse) SetResultCode(v string) *CreateLeaseAsyncauditResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseAsyncauditResponse) SetResultMsg(v string) *CreateLeaseAsyncauditResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseAsyncauditResponse) SetBizId(v string) *CreateLeaseAsyncauditResponse {
	s.BizId = &v
	return s
}

func (s *CreateLeaseAsyncauditResponse) SetCode(v string) *CreateLeaseAsyncauditResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseAsyncauditResponse) SetMessage(v string) *CreateLeaseAsyncauditResponse {
	s.Message = &v
	return s
}

type CreateLeaseAsyncpaymentfileRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 融资租赁业务id，由资方控制台生成
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 融资租赁额外字段
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// 租赁服务平台ID 长度不可超过50
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true" maxLength:"50"`
	// 订单id 长度不可超过50
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true" maxLength:"50"`
	// 付款通知书加签完电子签名后，PDF文件hash
	PaymentFileHash *string `json:"payment_file_hash,omitempty" xml:"payment_file_hash,omitempty"`
	// 付款通知书存证交易哈希
	PaymentFileTxHash *string `json:"payment_file_tx_hash,omitempty" xml:"payment_file_tx_hash,omitempty"`
	// 付款通知所在路径
	PaymentUrl *string `json:"payment_url,omitempty" xml:"payment_url,omitempty"`
	// 额外通知第三方，如果需要通知相关方外的第三方，需要在此设置关联方的租户id，若不设置则只通知资方
	RelatedNotify []*string `json:"related_notify,omitempty" xml:"related_notify,omitempty" type:"Repeated"`
}

func (s CreateLeaseAsyncpaymentfileRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseAsyncpaymentfileRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseAsyncpaymentfileRequest) SetAuthToken(v string) *CreateLeaseAsyncpaymentfileRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseAsyncpaymentfileRequest) SetProductInstanceId(v string) *CreateLeaseAsyncpaymentfileRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseAsyncpaymentfileRequest) SetApplicationId(v string) *CreateLeaseAsyncpaymentfileRequest {
	s.ApplicationId = &v
	return s
}

func (s *CreateLeaseAsyncpaymentfileRequest) SetExtraInfo(v string) *CreateLeaseAsyncpaymentfileRequest {
	s.ExtraInfo = &v
	return s
}

func (s *CreateLeaseAsyncpaymentfileRequest) SetLeaseId(v string) *CreateLeaseAsyncpaymentfileRequest {
	s.LeaseId = &v
	return s
}

func (s *CreateLeaseAsyncpaymentfileRequest) SetOrderId(v string) *CreateLeaseAsyncpaymentfileRequest {
	s.OrderId = &v
	return s
}

func (s *CreateLeaseAsyncpaymentfileRequest) SetPaymentFileHash(v string) *CreateLeaseAsyncpaymentfileRequest {
	s.PaymentFileHash = &v
	return s
}

func (s *CreateLeaseAsyncpaymentfileRequest) SetPaymentFileTxHash(v string) *CreateLeaseAsyncpaymentfileRequest {
	s.PaymentFileTxHash = &v
	return s
}

func (s *CreateLeaseAsyncpaymentfileRequest) SetPaymentUrl(v string) *CreateLeaseAsyncpaymentfileRequest {
	s.PaymentUrl = &v
	return s
}

func (s *CreateLeaseAsyncpaymentfileRequest) SetRelatedNotify(v []*string) *CreateLeaseAsyncpaymentfileRequest {
	s.RelatedNotify = v
	return s
}

type CreateLeaseAsyncpaymentfileResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 异步回执id，可用于查看合约执行结果
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty"`
	// 结果码，OK表示成功
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 结果描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s CreateLeaseAsyncpaymentfileResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseAsyncpaymentfileResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseAsyncpaymentfileResponse) SetReqMsgId(v string) *CreateLeaseAsyncpaymentfileResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseAsyncpaymentfileResponse) SetResultCode(v string) *CreateLeaseAsyncpaymentfileResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseAsyncpaymentfileResponse) SetResultMsg(v string) *CreateLeaseAsyncpaymentfileResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseAsyncpaymentfileResponse) SetBizId(v string) *CreateLeaseAsyncpaymentfileResponse {
	s.BizId = &v
	return s
}

func (s *CreateLeaseAsyncpaymentfileResponse) SetCode(v string) *CreateLeaseAsyncpaymentfileResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseAsyncpaymentfileResponse) SetMessage(v string) *CreateLeaseAsyncpaymentfileResponse {
	s.Message = &v
	return s
}

type QueryLeaseAsyncencryptedinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 融资租赁业务id，由资方控制台创建返回
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 被查询的租赁公司对应的租户ID
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
	//
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
}

func (s QueryLeaseAsyncencryptedinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseAsyncencryptedinfoRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseAsyncencryptedinfoRequest) SetAuthToken(v string) *QueryLeaseAsyncencryptedinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseAsyncencryptedinfoRequest) SetProductInstanceId(v string) *QueryLeaseAsyncencryptedinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseAsyncencryptedinfoRequest) SetApplicationId(v string) *QueryLeaseAsyncencryptedinfoRequest {
	s.ApplicationId = &v
	return s
}

func (s *QueryLeaseAsyncencryptedinfoRequest) SetLeaseId(v string) *QueryLeaseAsyncencryptedinfoRequest {
	s.LeaseId = &v
	return s
}

func (s *QueryLeaseAsyncencryptedinfoRequest) SetOrderId(v string) *QueryLeaseAsyncencryptedinfoRequest {
	s.OrderId = &v
	return s
}

type QueryLeaseAsyncencryptedinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 结果码，OK表示成功
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 结果描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 对应的加密后的具体信息（只有当query_status状态为SUCCESS时才返回此数据）
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
	// 链上查询状态枚举
	// TOBE_CHAIN 待上链查询
	// CHAINING 查询中
	// SUCCESS 查询成功
	// FAIL 查询失败
	QueryStatus *string `json:"query_status,omitempty" xml:"query_status,omitempty"`
	// 回执id
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty"`
}

func (s QueryLeaseAsyncencryptedinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseAsyncencryptedinfoResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseAsyncencryptedinfoResponse) SetReqMsgId(v string) *QueryLeaseAsyncencryptedinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseAsyncencryptedinfoResponse) SetResultCode(v string) *QueryLeaseAsyncencryptedinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseAsyncencryptedinfoResponse) SetResultMsg(v string) *QueryLeaseAsyncencryptedinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseAsyncencryptedinfoResponse) SetCode(v string) *QueryLeaseAsyncencryptedinfoResponse {
	s.Code = &v
	return s
}

func (s *QueryLeaseAsyncencryptedinfoResponse) SetMessage(v string) *QueryLeaseAsyncencryptedinfoResponse {
	s.Message = &v
	return s
}

func (s *QueryLeaseAsyncencryptedinfoResponse) SetResponseData(v string) *QueryLeaseAsyncencryptedinfoResponse {
	s.ResponseData = &v
	return s
}

func (s *QueryLeaseAsyncencryptedinfoResponse) SetQueryStatus(v string) *QueryLeaseAsyncencryptedinfoResponse {
	s.QueryStatus = &v
	return s
}

func (s *QueryLeaseAsyncencryptedinfoResponse) SetBizId(v string) *QueryLeaseAsyncencryptedinfoResponse {
	s.BizId = &v
	return s
}

type QueryLeaseAsynccallRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 上链时返回的回执id
	BizId *string `json:"biz_id,omitempty" xml:"biz_id,omitempty" require:"true"`
}

func (s QueryLeaseAsynccallRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseAsynccallRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseAsynccallRequest) SetAuthToken(v string) *QueryLeaseAsynccallRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseAsynccallRequest) SetProductInstanceId(v string) *QueryLeaseAsynccallRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseAsynccallRequest) SetOrderId(v string) *QueryLeaseAsynccallRequest {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseAsynccallRequest) SetBizId(v string) *QueryLeaseAsynccallRequest {
	s.BizId = &v
	return s
}

type QueryLeaseAsynccallResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 上链状态
	// TOBE_CHAIN(待上链)
	// CHAINING（上链中）SUCCESS(上链成功)
	// FAIL(上链失败)
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 成功的时候返回txHash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
	// 上链失败信息，status为FAIL时返回
	ChainFailMessage *string `json:"chain_fail_message,omitempty" xml:"chain_fail_message,omitempty"`
	// 结果码，OK表示成功
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 结果描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 查询对应的具体的数据
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s QueryLeaseAsynccallResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseAsynccallResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseAsynccallResponse) SetReqMsgId(v string) *QueryLeaseAsynccallResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseAsynccallResponse) SetResultCode(v string) *QueryLeaseAsynccallResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseAsynccallResponse) SetResultMsg(v string) *QueryLeaseAsynccallResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseAsynccallResponse) SetStatus(v string) *QueryLeaseAsynccallResponse {
	s.Status = &v
	return s
}

func (s *QueryLeaseAsynccallResponse) SetTxHash(v string) *QueryLeaseAsynccallResponse {
	s.TxHash = &v
	return s
}

func (s *QueryLeaseAsynccallResponse) SetChainFailMessage(v string) *QueryLeaseAsynccallResponse {
	s.ChainFailMessage = &v
	return s
}

func (s *QueryLeaseAsynccallResponse) SetCode(v string) *QueryLeaseAsynccallResponse {
	s.Code = &v
	return s
}

func (s *QueryLeaseAsynccallResponse) SetMessage(v string) *QueryLeaseAsynccallResponse {
	s.Message = &v
	return s
}

func (s *QueryLeaseAsynccallResponse) SetResponseData(v string) *QueryLeaseAsynccallResponse {
	s.ResponseData = &v
	return s
}

type CreateWitnessFlowRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务场景，最大255长度
	BusinessScene *string `json:"business_scene,omitempty" xml:"business_scene,omitempty" require:"true"`
	// 客户端名称，比如签章客户端，最长长度50
	ClientName *string `json:"client_name,omitempty" xml:"client_name,omitempty"`
	// 客户端版本
	ClientVersion *string `json:"client_version,omitempty" xml:"client_version,omitempty"`
	// 合同有效截止时间，时间戳
	ContractValidity *string `json:"contract_validity,omitempty" xml:"contract_validity,omitempty"`
	// 流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty"`
	// 发起方账号id
	InitiatorAccountId *string `json:"initiator_account_id,omitempty" xml:"initiator_account_id,omitempty"`
	// 发起端，TIANYIN_H5 - H5端，TIANYIN_WEB - WEB端，TIANYIN_API - API
	LaunchEndpoint *string `json:"launch_endpoint,omitempty" xml:"launch_endpoint,omitempty" require:"true"`
	// 发起ip
	LaunchIp *string `json:"launch_ip,omitempty" xml:"launch_ip,omitempty" require:"true"`
	// 手机盾逻辑版本，0-不支持用印审批、需要扣费，1-支持用印审批、无需扣费，默认0
	MobileShieldVersion *int64 `json:"mobile_shield_version,omitempty" xml:"mobile_shield_version,omitempty"`
	// 扣费方账号id
	PayerAccountId *string `json:"payer_account_id,omitempty" xml:"payer_account_id,omitempty"`
	// 签署截止时间，时间戳
	SignDeadline *string `json:"sign_deadline,omitempty" xml:"sign_deadline,omitempty"`
	// 签署顺序，SIGN_SEQUENCE-顺序签署，SIGN_NON_SEQUENCE-无序签署
	SignOrder *string `json:"sign_order,omitempty" xml:"sign_order,omitempty" require:"true"`
	// 流程类型，0-签署流程，1-作废流程，默认0
	Type *int64 `json:"type,omitempty" xml:"type,omitempty"`
	// 发起请求的实例应用ID
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
	// 发起请求的鉴权token
	Token *string `json:"token,omitempty" xml:"token,omitempty" require:"true"`
}

func (s CreateWitnessFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWitnessFlowRequest) GoString() string {
	return s.String()
}

func (s *CreateWitnessFlowRequest) SetAuthToken(v string) *CreateWitnessFlowRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateWitnessFlowRequest) SetProductInstanceId(v string) *CreateWitnessFlowRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateWitnessFlowRequest) SetBusinessScene(v string) *CreateWitnessFlowRequest {
	s.BusinessScene = &v
	return s
}

func (s *CreateWitnessFlowRequest) SetClientName(v string) *CreateWitnessFlowRequest {
	s.ClientName = &v
	return s
}

func (s *CreateWitnessFlowRequest) SetClientVersion(v string) *CreateWitnessFlowRequest {
	s.ClientVersion = &v
	return s
}

func (s *CreateWitnessFlowRequest) SetContractValidity(v string) *CreateWitnessFlowRequest {
	s.ContractValidity = &v
	return s
}

func (s *CreateWitnessFlowRequest) SetFlowId(v string) *CreateWitnessFlowRequest {
	s.FlowId = &v
	return s
}

func (s *CreateWitnessFlowRequest) SetInitiatorAccountId(v string) *CreateWitnessFlowRequest {
	s.InitiatorAccountId = &v
	return s
}

func (s *CreateWitnessFlowRequest) SetLaunchEndpoint(v string) *CreateWitnessFlowRequest {
	s.LaunchEndpoint = &v
	return s
}

func (s *CreateWitnessFlowRequest) SetLaunchIp(v string) *CreateWitnessFlowRequest {
	s.LaunchIp = &v
	return s
}

func (s *CreateWitnessFlowRequest) SetMobileShieldVersion(v int64) *CreateWitnessFlowRequest {
	s.MobileShieldVersion = &v
	return s
}

func (s *CreateWitnessFlowRequest) SetPayerAccountId(v string) *CreateWitnessFlowRequest {
	s.PayerAccountId = &v
	return s
}

func (s *CreateWitnessFlowRequest) SetSignDeadline(v string) *CreateWitnessFlowRequest {
	s.SignDeadline = &v
	return s
}

func (s *CreateWitnessFlowRequest) SetSignOrder(v string) *CreateWitnessFlowRequest {
	s.SignOrder = &v
	return s
}

func (s *CreateWitnessFlowRequest) SetType(v int64) *CreateWitnessFlowRequest {
	s.Type = &v
	return s
}

func (s *CreateWitnessFlowRequest) SetAppId(v string) *CreateWitnessFlowRequest {
	s.AppId = &v
	return s
}

func (s *CreateWitnessFlowRequest) SetToken(v string) *CreateWitnessFlowRequest {
	s.Token = &v
	return s
}

type CreateWitnessFlowResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误码
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 流程配置
	FlowConfig *WitnessFlowConfig `json:"flow_config,omitempty" xml:"flow_config,omitempty"`
	// 流程创建响应数据
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 见证流程
	WitnessFlowId *string `json:"witness_flow_id,omitempty" xml:"witness_flow_id,omitempty"`
}

func (s CreateWitnessFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWitnessFlowResponse) GoString() string {
	return s.String()
}

func (s *CreateWitnessFlowResponse) SetReqMsgId(v string) *CreateWitnessFlowResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateWitnessFlowResponse) SetResultCode(v string) *CreateWitnessFlowResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateWitnessFlowResponse) SetResultMsg(v string) *CreateWitnessFlowResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateWitnessFlowResponse) SetCode(v int64) *CreateWitnessFlowResponse {
	s.Code = &v
	return s
}

func (s *CreateWitnessFlowResponse) SetFlowConfig(v *WitnessFlowConfig) *CreateWitnessFlowResponse {
	s.FlowConfig = v
	return s
}

func (s *CreateWitnessFlowResponse) SetMessage(v string) *CreateWitnessFlowResponse {
	s.Message = &v
	return s
}

func (s *CreateWitnessFlowResponse) SetWitnessFlowId(v string) *CreateWitnessFlowResponse {
	s.WitnessFlowId = &v
	return s
}

type SaveWitnessSnapshotRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 快照数据
	Data *string `json:"data,omitempty" xml:"data,omitempty" require:"true"`
	// 快照步骤，最大20长度，START-开始，UPDATE-更新，FINISH-结束，允许自定义
	Step *string `json:"step,omitempty" xml:"step,omitempty" require:"true"`
	// 快照步骤描述，最大40长度
	StepDescription *string `json:"step_description,omitempty" xml:"step_description,omitempty" require:"true"`
	// 见证流程id
	WitnessFlowId *string `json:"witness_flow_id,omitempty" xml:"witness_flow_id,omitempty" require:"true"`
	// 发起请求的实例应用ID
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
	// 发起请求的鉴权token
	Token *string `json:"token,omitempty" xml:"token,omitempty" require:"true"`
}

func (s SaveWitnessSnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveWitnessSnapshotRequest) GoString() string {
	return s.String()
}

func (s *SaveWitnessSnapshotRequest) SetAuthToken(v string) *SaveWitnessSnapshotRequest {
	s.AuthToken = &v
	return s
}

func (s *SaveWitnessSnapshotRequest) SetProductInstanceId(v string) *SaveWitnessSnapshotRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SaveWitnessSnapshotRequest) SetData(v string) *SaveWitnessSnapshotRequest {
	s.Data = &v
	return s
}

func (s *SaveWitnessSnapshotRequest) SetStep(v string) *SaveWitnessSnapshotRequest {
	s.Step = &v
	return s
}

func (s *SaveWitnessSnapshotRequest) SetStepDescription(v string) *SaveWitnessSnapshotRequest {
	s.StepDescription = &v
	return s
}

func (s *SaveWitnessSnapshotRequest) SetWitnessFlowId(v string) *SaveWitnessSnapshotRequest {
	s.WitnessFlowId = &v
	return s
}

func (s *SaveWitnessSnapshotRequest) SetAppId(v string) *SaveWitnessSnapshotRequest {
	s.AppId = &v
	return s
}

func (s *SaveWitnessSnapshotRequest) SetToken(v string) *SaveWitnessSnapshotRequest {
	s.Token = &v
	return s
}

type SaveWitnessSnapshotResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误码
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s SaveWitnessSnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveWitnessSnapshotResponse) GoString() string {
	return s.String()
}

func (s *SaveWitnessSnapshotResponse) SetReqMsgId(v string) *SaveWitnessSnapshotResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SaveWitnessSnapshotResponse) SetResultCode(v string) *SaveWitnessSnapshotResponse {
	s.ResultCode = &v
	return s
}

func (s *SaveWitnessSnapshotResponse) SetResultMsg(v string) *SaveWitnessSnapshotResponse {
	s.ResultMsg = &v
	return s
}

func (s *SaveWitnessSnapshotResponse) SetCode(v int64) *SaveWitnessSnapshotResponse {
	s.Code = &v
	return s
}

func (s *SaveWitnessSnapshotResponse) SetMessage(v string) *SaveWitnessSnapshotResponse {
	s.Message = &v
	return s
}

type CheckWitnessSignaccessRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 审批流程id
	ApprovalFlowId *string `json:"approval_flow_id,omitempty" xml:"approval_flow_id,omitempty"`
	// 审批结果通知
	ApprovalNotifyUrl *string `json:"approval_notify_url,omitempty" xml:"approval_notify_url,omitempty"`
	// 签署文档信息
	Docs []*WitnessDocs `json:"docs,omitempty" xml:"docs,omitempty" require:"true" type:"Repeated"`
	// 签署端，TIANYIN_H5 - H5端，TIANYIN_WEB - WEB端，TIANYIN_API - API
	Endpoint *string `json:"endpoint,omitempty" xml:"endpoint,omitempty" require:"true"`
	// 是否发起审批，默认TRUE
	LaunchApproval *bool `json:"launch_approval,omitempty" xml:"launch_approval,omitempty"`
	// 手机盾任务id，用于手机盾审批场景
	MobileShieldTaskId *string `json:"mobile_shield_task_id,omitempty" xml:"mobile_shield_task_id,omitempty"`
	// 实名认证凭证
	RealnameAuthCode *string `json:"realname_auth_code,omitempty" xml:"realname_auth_code,omitempty"`
	// 印章id列表
	SealIds []*string `json:"seal_ids,omitempty" xml:"seal_ids,omitempty" type:"Repeated"`
	// 签署人账号id
	SignerAccountId *string `json:"signer_account_id,omitempty" xml:"signer_account_id,omitempty" require:"true"`
	// 签署人ip
	SignerIp *string `json:"signer_ip,omitempty" xml:"signer_ip,omitempty" require:"true"`
	// 签署人类型，1-私有云用户，2-公有云用户，3-手机盾用户
	SignerType *int64 `json:"signer_type,omitempty" xml:"signer_type,omitempty" require:"true"`
	// 签署预览地址
	SignPreviewUrl *string `json:"sign_preview_url,omitempty" xml:"sign_preview_url,omitempty"`
	// 意愿认证凭证
	WillAuthCode *string `json:"will_auth_code,omitempty" xml:"will_auth_code,omitempty"`
	// 见证流程id
	WitnessFlowId *string `json:"witness_flow_id,omitempty" xml:"witness_flow_id,omitempty" require:"true"`
	// 发起请求的实例应用ID
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
	// 发起请求的鉴权token
	Token *string `json:"token,omitempty" xml:"token,omitempty" require:"true"`
}

func (s CheckWitnessSignaccessRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckWitnessSignaccessRequest) GoString() string {
	return s.String()
}

func (s *CheckWitnessSignaccessRequest) SetAuthToken(v string) *CheckWitnessSignaccessRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckWitnessSignaccessRequest) SetProductInstanceId(v string) *CheckWitnessSignaccessRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CheckWitnessSignaccessRequest) SetApprovalFlowId(v string) *CheckWitnessSignaccessRequest {
	s.ApprovalFlowId = &v
	return s
}

func (s *CheckWitnessSignaccessRequest) SetApprovalNotifyUrl(v string) *CheckWitnessSignaccessRequest {
	s.ApprovalNotifyUrl = &v
	return s
}

func (s *CheckWitnessSignaccessRequest) SetDocs(v []*WitnessDocs) *CheckWitnessSignaccessRequest {
	s.Docs = v
	return s
}

func (s *CheckWitnessSignaccessRequest) SetEndpoint(v string) *CheckWitnessSignaccessRequest {
	s.Endpoint = &v
	return s
}

func (s *CheckWitnessSignaccessRequest) SetLaunchApproval(v bool) *CheckWitnessSignaccessRequest {
	s.LaunchApproval = &v
	return s
}

func (s *CheckWitnessSignaccessRequest) SetMobileShieldTaskId(v string) *CheckWitnessSignaccessRequest {
	s.MobileShieldTaskId = &v
	return s
}

func (s *CheckWitnessSignaccessRequest) SetRealnameAuthCode(v string) *CheckWitnessSignaccessRequest {
	s.RealnameAuthCode = &v
	return s
}

func (s *CheckWitnessSignaccessRequest) SetSealIds(v []*string) *CheckWitnessSignaccessRequest {
	s.SealIds = v
	return s
}

func (s *CheckWitnessSignaccessRequest) SetSignerAccountId(v string) *CheckWitnessSignaccessRequest {
	s.SignerAccountId = &v
	return s
}

func (s *CheckWitnessSignaccessRequest) SetSignerIp(v string) *CheckWitnessSignaccessRequest {
	s.SignerIp = &v
	return s
}

func (s *CheckWitnessSignaccessRequest) SetSignerType(v int64) *CheckWitnessSignaccessRequest {
	s.SignerType = &v
	return s
}

func (s *CheckWitnessSignaccessRequest) SetSignPreviewUrl(v string) *CheckWitnessSignaccessRequest {
	s.SignPreviewUrl = &v
	return s
}

func (s *CheckWitnessSignaccessRequest) SetWillAuthCode(v string) *CheckWitnessSignaccessRequest {
	s.WillAuthCode = &v
	return s
}

func (s *CheckWitnessSignaccessRequest) SetWitnessFlowId(v string) *CheckWitnessSignaccessRequest {
	s.WitnessFlowId = &v
	return s
}

func (s *CheckWitnessSignaccessRequest) SetAppId(v string) *CheckWitnessSignaccessRequest {
	s.AppId = &v
	return s
}

func (s *CheckWitnessSignaccessRequest) SetToken(v string) *CheckWitnessSignaccessRequest {
	s.Token = &v
	return s
}

type CheckWitnessSignaccessResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 有权限的印章id列表
	AccessSealIds []*string `json:"access_seal_ids,omitempty" xml:"access_seal_ids,omitempty" type:"Repeated"`
	// 审批数据
	ApprovalDatas []*WitnessApprovalData `json:"approval_datas,omitempty" xml:"approval_datas,omitempty" type:"Repeated"`
	// 错误码
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 签署票证
	SignTicket *string `json:"sign_ticket,omitempty" xml:"sign_ticket,omitempty"`
}

func (s CheckWitnessSignaccessResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckWitnessSignaccessResponse) GoString() string {
	return s.String()
}

func (s *CheckWitnessSignaccessResponse) SetReqMsgId(v string) *CheckWitnessSignaccessResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckWitnessSignaccessResponse) SetResultCode(v string) *CheckWitnessSignaccessResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckWitnessSignaccessResponse) SetResultMsg(v string) *CheckWitnessSignaccessResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckWitnessSignaccessResponse) SetAccessSealIds(v []*string) *CheckWitnessSignaccessResponse {
	s.AccessSealIds = v
	return s
}

func (s *CheckWitnessSignaccessResponse) SetApprovalDatas(v []*WitnessApprovalData) *CheckWitnessSignaccessResponse {
	s.ApprovalDatas = v
	return s
}

func (s *CheckWitnessSignaccessResponse) SetCode(v int64) *CheckWitnessSignaccessResponse {
	s.Code = &v
	return s
}

func (s *CheckWitnessSignaccessResponse) SetMessage(v string) *CheckWitnessSignaccessResponse {
	s.Message = &v
	return s
}

func (s *CheckWitnessSignaccessResponse) SetSignTicket(v string) *CheckWitnessSignaccessResponse {
	s.SignTicket = &v
	return s
}

type AuthWitnessFlowRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 发起请求的实例应用ID
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
	// 证书id
	CertId *string `json:"cert_id,omitempty" xml:"cert_id,omitempty"`
	// 签署页码，单个签时必传
	Page *string `json:"page,omitempty" xml:"page,omitempty"`
	// 签署x坐标，单个签时必传
	PosX *string `json:"pos_x,omitempty" xml:"pos_x,omitempty"`
	// 签署y坐标，单个签时必传
	PosY *string `json:"pos_y,omitempty" xml:"pos_y,omitempty"`
	// 印章图片key
	SealFileKey *string `json:"seal_file_key,omitempty" xml:"seal_file_key,omitempty"`
	// 印章id
	SealId *string `json:"seal_id,omitempty" xml:"seal_id,omitempty"`
	// 印章类型，1-模板，2-手绘
	SealType *int64 `json:"seal_type,omitempty" xml:"seal_type,omitempty" require:"true"`
	// 签署类型，单个签时必传
	SignatureType *string `json:"signature_type,omitempty" xml:"signature_type,omitempty"`
	// 批量签署信息，批量签时必传
	SignDatas *string `json:"sign_datas,omitempty" xml:"sign_datas,omitempty"`
	// 待签署文档摘要值，单个签时必传
	SignHash *string `json:"sign_hash,omitempty" xml:"sign_hash,omitempty"`
	// 签署票证
	SignTicket *string `json:"sign_ticket,omitempty" xml:"sign_ticket,omitempty" require:"true"`
	// 签署主体账号id
	SubjectAccountId *string `json:"subject_account_id,omitempty" xml:"subject_account_id,omitempty"`
	// 第三方文档id，单个签时必传
	ThirdDocId *string `json:"third_doc_id,omitempty" xml:"third_doc_id,omitempty"`
	// 发起请求的鉴权token
	Token *string `json:"token,omitempty" xml:"token,omitempty" require:"true"`
	// 见证流程id
	WitnessFlowId *string `json:"witness_flow_id,omitempty" xml:"witness_flow_id,omitempty" require:"true"`
}

func (s AuthWitnessFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthWitnessFlowRequest) GoString() string {
	return s.String()
}

func (s *AuthWitnessFlowRequest) SetAuthToken(v string) *AuthWitnessFlowRequest {
	s.AuthToken = &v
	return s
}

func (s *AuthWitnessFlowRequest) SetProductInstanceId(v string) *AuthWitnessFlowRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AuthWitnessFlowRequest) SetAppId(v string) *AuthWitnessFlowRequest {
	s.AppId = &v
	return s
}

func (s *AuthWitnessFlowRequest) SetCertId(v string) *AuthWitnessFlowRequest {
	s.CertId = &v
	return s
}

func (s *AuthWitnessFlowRequest) SetPage(v string) *AuthWitnessFlowRequest {
	s.Page = &v
	return s
}

func (s *AuthWitnessFlowRequest) SetPosX(v string) *AuthWitnessFlowRequest {
	s.PosX = &v
	return s
}

func (s *AuthWitnessFlowRequest) SetPosY(v string) *AuthWitnessFlowRequest {
	s.PosY = &v
	return s
}

func (s *AuthWitnessFlowRequest) SetSealFileKey(v string) *AuthWitnessFlowRequest {
	s.SealFileKey = &v
	return s
}

func (s *AuthWitnessFlowRequest) SetSealId(v string) *AuthWitnessFlowRequest {
	s.SealId = &v
	return s
}

func (s *AuthWitnessFlowRequest) SetSealType(v int64) *AuthWitnessFlowRequest {
	s.SealType = &v
	return s
}

func (s *AuthWitnessFlowRequest) SetSignatureType(v string) *AuthWitnessFlowRequest {
	s.SignatureType = &v
	return s
}

func (s *AuthWitnessFlowRequest) SetSignDatas(v string) *AuthWitnessFlowRequest {
	s.SignDatas = &v
	return s
}

func (s *AuthWitnessFlowRequest) SetSignHash(v string) *AuthWitnessFlowRequest {
	s.SignHash = &v
	return s
}

func (s *AuthWitnessFlowRequest) SetSignTicket(v string) *AuthWitnessFlowRequest {
	s.SignTicket = &v
	return s
}

func (s *AuthWitnessFlowRequest) SetSubjectAccountId(v string) *AuthWitnessFlowRequest {
	s.SubjectAccountId = &v
	return s
}

func (s *AuthWitnessFlowRequest) SetThirdDocId(v string) *AuthWitnessFlowRequest {
	s.ThirdDocId = &v
	return s
}

func (s *AuthWitnessFlowRequest) SetToken(v string) *AuthWitnessFlowRequest {
	s.Token = &v
	return s
}

func (s *AuthWitnessFlowRequest) SetWitnessFlowId(v string) *AuthWitnessFlowRequest {
	s.WitnessFlowId = &v
	return s
}

type AuthWitnessFlowResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误码
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// 二维码内容
	QrcodeContent *string `json:"qrcode_content,omitempty" xml:"qrcode_content,omitempty"`
	// 签署日志id，外部用户签署返回
	SignlogId *string `json:"signlog_id,omitempty" xml:"signlog_id,omitempty"`
	// 签名结果，外部用户签署返回
	SignResult *string `json:"sign_result,omitempty" xml:"sign_result,omitempty"`
	// 签署结果，批量签署返回
	SignResults []*WitnessSignResult `json:"sign_results,omitempty" xml:"sign_results,omitempty" type:"Repeated"`
	// 签署方式，1-单个签署，2-批量签署
	SignWay *int64 `json:"sign_way,omitempty" xml:"sign_way,omitempty"`
	// 手机盾用户签署返回
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
}

func (s AuthWitnessFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthWitnessFlowResponse) GoString() string {
	return s.String()
}

func (s *AuthWitnessFlowResponse) SetReqMsgId(v string) *AuthWitnessFlowResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AuthWitnessFlowResponse) SetResultCode(v string) *AuthWitnessFlowResponse {
	s.ResultCode = &v
	return s
}

func (s *AuthWitnessFlowResponse) SetResultMsg(v string) *AuthWitnessFlowResponse {
	s.ResultMsg = &v
	return s
}

func (s *AuthWitnessFlowResponse) SetCode(v int64) *AuthWitnessFlowResponse {
	s.Code = &v
	return s
}

func (s *AuthWitnessFlowResponse) SetMessage(v string) *AuthWitnessFlowResponse {
	s.Message = &v
	return s
}

func (s *AuthWitnessFlowResponse) SetQrcodeContent(v string) *AuthWitnessFlowResponse {
	s.QrcodeContent = &v
	return s
}

func (s *AuthWitnessFlowResponse) SetSignlogId(v string) *AuthWitnessFlowResponse {
	s.SignlogId = &v
	return s
}

func (s *AuthWitnessFlowResponse) SetSignResult(v string) *AuthWitnessFlowResponse {
	s.SignResult = &v
	return s
}

func (s *AuthWitnessFlowResponse) SetSignResults(v []*WitnessSignResult) *AuthWitnessFlowResponse {
	s.SignResults = v
	return s
}

func (s *AuthWitnessFlowResponse) SetSignWay(v int64) *AuthWitnessFlowResponse {
	s.SignWay = &v
	return s
}

func (s *AuthWitnessFlowResponse) SetTaskId(v string) *AuthWitnessFlowResponse {
	s.TaskId = &v
	return s
}

type ConfirmWitnessFlowRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 签署确认数据
	ConfirmDatas []*WitnessConfirmData `json:"confirm_datas,omitempty" xml:"confirm_datas,omitempty" require:"true" type:"Repeated"`
	// 证据id列表，内部用户必传
	EvidenceIds []*string `json:"evidence_ids,omitempty" xml:"evidence_ids,omitempty" type:"Repeated"`
	// 签署记录id列表，外部用户必传
	SignlogIds []*string `json:"signlog_ids,omitempty" xml:"signlog_ids,omitempty" type:"Repeated"`
	// 签署票证
	SignTicket *string `json:"sign_ticket,omitempty" xml:"sign_ticket,omitempty" require:"true"`
	// 见证流程id
	WitnessFlowId *string `json:"witness_flow_id,omitempty" xml:"witness_flow_id,omitempty" require:"true"`
	// 发起请求的实例应用ID
	AppId *string `json:"app_id,omitempty" xml:"app_id,omitempty" require:"true"`
	// 发起请求的鉴权token
	Token *string `json:"token,omitempty" xml:"token,omitempty" require:"true"`
}

func (s ConfirmWitnessFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmWitnessFlowRequest) GoString() string {
	return s.String()
}

func (s *ConfirmWitnessFlowRequest) SetAuthToken(v string) *ConfirmWitnessFlowRequest {
	s.AuthToken = &v
	return s
}

func (s *ConfirmWitnessFlowRequest) SetProductInstanceId(v string) *ConfirmWitnessFlowRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ConfirmWitnessFlowRequest) SetConfirmDatas(v []*WitnessConfirmData) *ConfirmWitnessFlowRequest {
	s.ConfirmDatas = v
	return s
}

func (s *ConfirmWitnessFlowRequest) SetEvidenceIds(v []*string) *ConfirmWitnessFlowRequest {
	s.EvidenceIds = v
	return s
}

func (s *ConfirmWitnessFlowRequest) SetSignlogIds(v []*string) *ConfirmWitnessFlowRequest {
	s.SignlogIds = v
	return s
}

func (s *ConfirmWitnessFlowRequest) SetSignTicket(v string) *ConfirmWitnessFlowRequest {
	s.SignTicket = &v
	return s
}

func (s *ConfirmWitnessFlowRequest) SetWitnessFlowId(v string) *ConfirmWitnessFlowRequest {
	s.WitnessFlowId = &v
	return s
}

func (s *ConfirmWitnessFlowRequest) SetAppId(v string) *ConfirmWitnessFlowRequest {
	s.AppId = &v
	return s
}

func (s *ConfirmWitnessFlowRequest) SetToken(v string) *ConfirmWitnessFlowRequest {
	s.Token = &v
	return s
}

type ConfirmWitnessFlowResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误码
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s ConfirmWitnessFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmWitnessFlowResponse) GoString() string {
	return s.String()
}

func (s *ConfirmWitnessFlowResponse) SetReqMsgId(v string) *ConfirmWitnessFlowResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ConfirmWitnessFlowResponse) SetResultCode(v string) *ConfirmWitnessFlowResponse {
	s.ResultCode = &v
	return s
}

func (s *ConfirmWitnessFlowResponse) SetResultMsg(v string) *ConfirmWitnessFlowResponse {
	s.ResultMsg = &v
	return s
}

func (s *ConfirmWitnessFlowResponse) SetCode(v int64) *ConfirmWitnessFlowResponse {
	s.Code = &v
	return s
}

func (s *ConfirmWitnessFlowResponse) SetMessage(v string) *ConfirmWitnessFlowResponse {
	s.Message = &v
	return s
}

type CreateTransRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证关联实体（个人/企业）的身份识别信息
	Customer *Identity `json:"customer,omitempty" xml:"customer,omitempty" require:"true"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 业务子类型标识
	SubBizId *string `json:"sub_biz_id,omitempty" xml:"sub_biz_id,omitempty"`
	// 是否使用可信时间戳，默认为false
	Tsr *bool `json:"tsr,omitempty" xml:"tsr,omitempty"`
}

func (s CreateTransRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTransRequest) GoString() string {
	return s.String()
}

func (s *CreateTransRequest) SetAuthToken(v string) *CreateTransRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateTransRequest) SetProductInstanceId(v string) *CreateTransRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateTransRequest) SetCustomer(v *Identity) *CreateTransRequest {
	s.Customer = v
	return s
}

func (s *CreateTransRequest) SetProperties(v string) *CreateTransRequest {
	s.Properties = &v
	return s
}

func (s *CreateTransRequest) SetSubBizId(v string) *CreateTransRequest {
	s.SubBizId = &v
	return s
}

func (s *CreateTransRequest) SetTsr(v bool) *CreateTransRequest {
	s.Tsr = &v
	return s
}

type CreateTransResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回事务ID，全局唯一
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty"`
	// 可信时间信息
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
}

func (s CreateTransResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTransResponse) GoString() string {
	return s.String()
}

func (s *CreateTransResponse) SetReqMsgId(v string) *CreateTransResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateTransResponse) SetResultCode(v string) *CreateTransResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateTransResponse) SetResultMsg(v string) *CreateTransResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateTransResponse) SetTransactionId(v string) *CreateTransResponse {
	s.TransactionId = &v
	return s
}

func (s *CreateTransResponse) SetTsr(v *TsrResponse) *CreateTransResponse {
	s.Tsr = v
	return s
}

type GetTransRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证事务ID
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
}

func (s GetTransRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTransRequest) GoString() string {
	return s.String()
}

func (s *GetTransRequest) SetAuthToken(v string) *GetTransRequest {
	s.AuthToken = &v
	return s
}

func (s *GetTransRequest) SetProductInstanceId(v string) *GetTransRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetTransRequest) SetTransactionId(v string) *GetTransRequest {
	s.TransactionId = &v
	return s
}

type GetTransResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回文件下载路径列表
	FileUrl []*string `json:"file_url,omitempty" xml:"file_url,omitempty" type:"Repeated"`
	// 存证事务ID
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty"`
}

func (s GetTransResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTransResponse) GoString() string {
	return s.String()
}

func (s *GetTransResponse) SetReqMsgId(v string) *GetTransResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetTransResponse) SetResultCode(v string) *GetTransResponse {
	s.ResultCode = &v
	return s
}

func (s *GetTransResponse) SetResultMsg(v string) *GetTransResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetTransResponse) SetFileUrl(v []*string) *GetTransResponse {
	s.FileUrl = v
	return s
}

func (s *GetTransResponse) SetTransactionId(v string) *GetTransResponse {
	s.TransactionId = &v
	return s
}

type CreateTextRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 存证内容
	NotaryContent *string `json:"notary_content,omitempty" xml:"notary_content,omitempty" require:"true"`
	// 描述本条存证在存证事务中的阶段，用户可自行维护
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 存证事务id
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
	// 是否使用可信时间戳，默认为false
	Tsr *bool `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 文本存证类型，支持源文本/文本哈希
	TextNotaryType *string `json:"text_notary_type,omitempty" xml:"text_notary_type,omitempty"`
	// 哈希算法，目前仅支持 SHA256
	HashAlgorithm *string `json:"hash_algorithm,omitempty" xml:"hash_algorithm,omitempty"`
}

func (s CreateTextRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTextRequest) GoString() string {
	return s.String()
}

func (s *CreateTextRequest) SetAuthToken(v string) *CreateTextRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateTextRequest) SetProductInstanceId(v string) *CreateTextRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateTextRequest) SetLocation(v *Location) *CreateTextRequest {
	s.Location = v
	return s
}

func (s *CreateTextRequest) SetNotaryContent(v string) *CreateTextRequest {
	s.NotaryContent = &v
	return s
}

func (s *CreateTextRequest) SetPhase(v string) *CreateTextRequest {
	s.Phase = &v
	return s
}

func (s *CreateTextRequest) SetProperties(v string) *CreateTextRequest {
	s.Properties = &v
	return s
}

func (s *CreateTextRequest) SetTransactionId(v string) *CreateTextRequest {
	s.TransactionId = &v
	return s
}

func (s *CreateTextRequest) SetTsr(v bool) *CreateTextRequest {
	s.Tsr = &v
	return s
}

func (s *CreateTextRequest) SetTextNotaryType(v string) *CreateTextRequest {
	s.TextNotaryType = &v
	return s
}

func (s *CreateTextRequest) SetHashAlgorithm(v string) *CreateTextRequest {
	s.HashAlgorithm = &v
	return s
}

type CreateTextResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可信时间信息
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 存证凭据
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateTextResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTextResponse) GoString() string {
	return s.String()
}

func (s *CreateTextResponse) SetReqMsgId(v string) *CreateTextResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateTextResponse) SetResultCode(v string) *CreateTextResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateTextResponse) SetResultMsg(v string) *CreateTextResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateTextResponse) SetTsr(v *TsrResponse) *CreateTextResponse {
	s.Tsr = v
	return s
}

func (s *CreateTextResponse) SetTxHash(v string) *CreateTextResponse {
	s.TxHash = &v
	return s
}

type GetTextRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 描述本条存证在存证事务中的阶段，用户可自行维护
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 存证事务id
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty"`
	// 存证凭据
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
}

func (s GetTextRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTextRequest) GoString() string {
	return s.String()
}

func (s *GetTextRequest) SetAuthToken(v string) *GetTextRequest {
	s.AuthToken = &v
	return s
}

func (s *GetTextRequest) SetProductInstanceId(v string) *GetTextRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetTextRequest) SetLocation(v *Location) *GetTextRequest {
	s.Location = v
	return s
}

func (s *GetTextRequest) SetPhase(v string) *GetTextRequest {
	s.Phase = &v
	return s
}

func (s *GetTextRequest) SetProperties(v string) *GetTextRequest {
	s.Properties = &v
	return s
}

func (s *GetTextRequest) SetTransactionId(v string) *GetTextRequest {
	s.TransactionId = &v
	return s
}

func (s *GetTextRequest) SetTxHash(v string) *GetTextRequest {
	s.TxHash = &v
	return s
}

type GetTextResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证信息
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// 可信信息
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 文本存证类型
	TextNotaryType *string `json:"text_notary_type,omitempty" xml:"text_notary_type,omitempty"`
	// 哈希算法
	HashAlgorithm *string `json:"hash_algorithm,omitempty" xml:"hash_algorithm,omitempty"`
}

func (s GetTextResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTextResponse) GoString() string {
	return s.String()
}

func (s *GetTextResponse) SetReqMsgId(v string) *GetTextResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetTextResponse) SetResultCode(v string) *GetTextResponse {
	s.ResultCode = &v
	return s
}

func (s *GetTextResponse) SetResultMsg(v string) *GetTextResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetTextResponse) SetContent(v string) *GetTextResponse {
	s.Content = &v
	return s
}

func (s *GetTextResponse) SetTsr(v *TsrResponse) *GetTextResponse {
	s.Tsr = v
	return s
}

func (s *GetTextResponse) SetTextNotaryType(v string) *GetTextResponse {
	s.TextNotaryType = &v
	return s
}

func (s *GetTextResponse) SetHashAlgorithm(v string) *GetTextResponse {
	s.HashAlgorithm = &v
	return s
}

type CreateFileRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 文件存证模式，目前仅支持 FILE_RAW 和 FILE_HASH
	FileNotaryType *string `json:"file_notary_type,omitempty" xml:"file_notary_type,omitempty"`
	// 当文件存证模式为FILE_HASH时，用户可以指定该参数。当前服务仅支持 SHA256，若不填写，则默认值为 SHA256。
	HashAlgorithm *string `json:"hash_algorithm,omitempty" xml:"hash_algorithm,omitempty"`
	// 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 存证文件内容，对文件内容做base64编码后得到。例如FILE_RAW模式下，文件内容为“test”，那么base64编码后的结果则为“dGVzdA==”。如果是FILE_HASh模式，则该字段直接为文件hash。
	NotaryFile *string `json:"notary_file,omitempty" xml:"notary_file,omitempty" require:"true"`
	// 存证文件名称
	NotaryName *string `json:"notary_name,omitempty" xml:"notary_name,omitempty" require:"true"`
	// 描述本条存证在存证事务中的阶段，用户可自行维护
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 存证事务ID
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
	// 是否使用可信时间戳，默认为false
	Tsr *bool `json:"tsr,omitempty" xml:"tsr,omitempty"`
}

func (s CreateFileRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFileRequest) GoString() string {
	return s.String()
}

func (s *CreateFileRequest) SetAuthToken(v string) *CreateFileRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateFileRequest) SetProductInstanceId(v string) *CreateFileRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateFileRequest) SetFileNotaryType(v string) *CreateFileRequest {
	s.FileNotaryType = &v
	return s
}

func (s *CreateFileRequest) SetHashAlgorithm(v string) *CreateFileRequest {
	s.HashAlgorithm = &v
	return s
}

func (s *CreateFileRequest) SetLocation(v *Location) *CreateFileRequest {
	s.Location = v
	return s
}

func (s *CreateFileRequest) SetNotaryFile(v string) *CreateFileRequest {
	s.NotaryFile = &v
	return s
}

func (s *CreateFileRequest) SetNotaryName(v string) *CreateFileRequest {
	s.NotaryName = &v
	return s
}

func (s *CreateFileRequest) SetPhase(v string) *CreateFileRequest {
	s.Phase = &v
	return s
}

func (s *CreateFileRequest) SetProperties(v string) *CreateFileRequest {
	s.Properties = &v
	return s
}

func (s *CreateFileRequest) SetTransactionId(v string) *CreateFileRequest {
	s.TransactionId = &v
	return s
}

func (s *CreateFileRequest) SetTsr(v bool) *CreateFileRequest {
	s.Tsr = &v
	return s
}

type CreateFileResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可信时间信息
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 存证凭证
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateFileResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFileResponse) GoString() string {
	return s.String()
}

func (s *CreateFileResponse) SetReqMsgId(v string) *CreateFileResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateFileResponse) SetResultCode(v string) *CreateFileResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateFileResponse) SetResultMsg(v string) *CreateFileResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateFileResponse) SetTsr(v *TsrResponse) *CreateFileResponse {
	s.Tsr = v
	return s
}

func (s *CreateFileResponse) SetTxHash(v string) *CreateFileResponse {
	s.TxHash = &v
	return s
}

type GetFileRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 描述本条存证在存证事务中的阶段，用户可自行维护
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 存证事务ID
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty"`
	// 存证凭据
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
}

func (s GetFileRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFileRequest) GoString() string {
	return s.String()
}

func (s *GetFileRequest) SetAuthToken(v string) *GetFileRequest {
	s.AuthToken = &v
	return s
}

func (s *GetFileRequest) SetProductInstanceId(v string) *GetFileRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetFileRequest) SetLocation(v *Location) *GetFileRequest {
	s.Location = v
	return s
}

func (s *GetFileRequest) SetPhase(v string) *GetFileRequest {
	s.Phase = &v
	return s
}

func (s *GetFileRequest) SetProperties(v string) *GetFileRequest {
	s.Properties = &v
	return s
}

func (s *GetFileRequest) SetTransactionId(v string) *GetFileRequest {
	s.TransactionId = &v
	return s
}

func (s *GetFileRequest) SetTxHash(v string) *GetFileRequest {
	s.TxHash = &v
	return s
}

type GetFileResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 文件哈希，当 file_notary_type 为 FILE_HASH 时才有此值。
	FileHash *string `json:"file_hash,omitempty" xml:"file_hash,omitempty"`
	// 文件存证模式，有 FILE_RAW 和 FILE_HASH 两种可能值。
	FileNotaryType *string `json:"file_notary_type,omitempty" xml:"file_notary_type,omitempty"`
	// 哈希算法，当 file_notary_type 为 FILE_HASH 时，此返回值才有效。
	HashAlgorithm *string `json:"hash_algorithm,omitempty" xml:"hash_algorithm,omitempty"`
	// 文件下载地址，当 file_notary_type 为 FILE_RAW 时才有此值。
	OssPath *string `json:"oss_path,omitempty" xml:"oss_path,omitempty"`
}

func (s GetFileResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFileResponse) GoString() string {
	return s.String()
}

func (s *GetFileResponse) SetReqMsgId(v string) *GetFileResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetFileResponse) SetResultCode(v string) *GetFileResponse {
	s.ResultCode = &v
	return s
}

func (s *GetFileResponse) SetResultMsg(v string) *GetFileResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetFileResponse) SetFileHash(v string) *GetFileResponse {
	s.FileHash = &v
	return s
}

func (s *GetFileResponse) SetFileNotaryType(v string) *GetFileResponse {
	s.FileNotaryType = &v
	return s
}

func (s *GetFileResponse) SetHashAlgorithm(v string) *GetFileResponse {
	s.HashAlgorithm = &v
	return s
}

func (s *GetFileResponse) SetOssPath(v string) *GetFileResponse {
	s.OssPath = &v
	return s
}

type CreateSourceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 描述本条存证在存证事务中的阶段，用户可自行维护
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 原文文件描述
	SourceDesc *string `json:"source_desc,omitempty" xml:"source_desc,omitempty" require:"true"`
	// 存证文件内容，对文件内容做base64编码后得到。例如文件内容为“test”，那么base64编码后的结果则为“dGVzdA==”
	SourceFile *string `json:"source_file,omitempty" xml:"source_file,omitempty" require:"true"`
	// 存证原文名称
	SourceName *string `json:"source_name,omitempty" xml:"source_name,omitempty" require:"true"`
	// 存证事务ID
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
	// 是否使用可信时间戳，默认为false
	Tsr *bool `json:"tsr,omitempty" xml:"tsr,omitempty"`
}

func (s CreateSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSourceRequest) GoString() string {
	return s.String()
}

func (s *CreateSourceRequest) SetAuthToken(v string) *CreateSourceRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSourceRequest) SetProductInstanceId(v string) *CreateSourceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSourceRequest) SetLocation(v *Location) *CreateSourceRequest {
	s.Location = v
	return s
}

func (s *CreateSourceRequest) SetPhase(v string) *CreateSourceRequest {
	s.Phase = &v
	return s
}

func (s *CreateSourceRequest) SetProperties(v string) *CreateSourceRequest {
	s.Properties = &v
	return s
}

func (s *CreateSourceRequest) SetSourceDesc(v string) *CreateSourceRequest {
	s.SourceDesc = &v
	return s
}

func (s *CreateSourceRequest) SetSourceFile(v string) *CreateSourceRequest {
	s.SourceFile = &v
	return s
}

func (s *CreateSourceRequest) SetSourceName(v string) *CreateSourceRequest {
	s.SourceName = &v
	return s
}

func (s *CreateSourceRequest) SetTransactionId(v string) *CreateSourceRequest {
	s.TransactionId = &v
	return s
}

func (s *CreateSourceRequest) SetTsr(v bool) *CreateSourceRequest {
	s.Tsr = &v
	return s
}

type CreateSourceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可信时间信息
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 存证凭据
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSourceResponse) GoString() string {
	return s.String()
}

func (s *CreateSourceResponse) SetReqMsgId(v string) *CreateSourceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSourceResponse) SetResultCode(v string) *CreateSourceResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSourceResponse) SetResultMsg(v string) *CreateSourceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateSourceResponse) SetTsr(v *TsrResponse) *CreateSourceResponse {
	s.Tsr = v
	return s
}

func (s *CreateSourceResponse) SetTxHash(v string) *CreateSourceResponse {
	s.TxHash = &v
	return s
}

type GetSourceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 描述本条存证在存证事务中的阶段，用户可自行维护
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 存证事务id
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty"`
	// 存证凭据
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
}

func (s GetSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSourceRequest) GoString() string {
	return s.String()
}

func (s *GetSourceRequest) SetAuthToken(v string) *GetSourceRequest {
	s.AuthToken = &v
	return s
}

func (s *GetSourceRequest) SetProductInstanceId(v string) *GetSourceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetSourceRequest) SetLocation(v *Location) *GetSourceRequest {
	s.Location = v
	return s
}

func (s *GetSourceRequest) SetPhase(v string) *GetSourceRequest {
	s.Phase = &v
	return s
}

func (s *GetSourceRequest) SetProperties(v string) *GetSourceRequest {
	s.Properties = &v
	return s
}

func (s *GetSourceRequest) SetTransactionId(v string) *GetSourceRequest {
	s.TransactionId = &v
	return s
}

func (s *GetSourceRequest) SetTxHash(v string) *GetSourceRequest {
	s.TxHash = &v
	return s
}

type GetSourceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 文件下载地址
	OssPath *string `json:"oss_path,omitempty" xml:"oss_path,omitempty"`
}

func (s GetSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSourceResponse) GoString() string {
	return s.String()
}

func (s *GetSourceResponse) SetReqMsgId(v string) *GetSourceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetSourceResponse) SetResultCode(v string) *GetSourceResponse {
	s.ResultCode = &v
	return s
}

func (s *GetSourceResponse) SetResultMsg(v string) *GetSourceResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetSourceResponse) SetOssPath(v string) *GetSourceResponse {
	s.OssPath = &v
	return s
}

type CheckStatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证核验数据组
	NotaryCheckMetaList []*NotaryCheckMeta `json:"notary_check_meta_list,omitempty" xml:"notary_check_meta_list,omitempty" require:"true" type:"Repeated"`
}

func (s CheckStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckStatusRequest) GoString() string {
	return s.String()
}

func (s *CheckStatusRequest) SetAuthToken(v string) *CheckStatusRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckStatusRequest) SetProductInstanceId(v string) *CheckStatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CheckStatusRequest) SetNotaryCheckMetaList(v []*NotaryCheckMeta) *CheckStatusRequest {
	s.NotaryCheckMetaList = v
	return s
}

type CheckStatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证核验结果
	NotaryCheckResults []*NotaryCheckResult `json:"notary_check_results,omitempty" xml:"notary_check_results,omitempty" type:"Repeated"`
}

func (s CheckStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckStatusResponse) GoString() string {
	return s.String()
}

func (s *CheckStatusResponse) SetReqMsgId(v string) *CheckStatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckStatusResponse) SetResultCode(v string) *CheckStatusResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckStatusResponse) SetResultMsg(v string) *CheckStatusResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckStatusResponse) SetNotaryCheckResults(v []*NotaryCheckResult) *CheckStatusResponse {
	s.NotaryCheckResults = v
	return s
}

type DeployLeaseContractRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 租赁服务平台对应的合约ID
	ContractId *string `json:"contract_id,omitempty" xml:"contract_id,omitempty" require:"true"`
}

func (s DeployLeaseContractRequest) String() string {
	return tea.Prettify(s)
}

func (s DeployLeaseContractRequest) GoString() string {
	return s.String()
}

func (s *DeployLeaseContractRequest) SetAuthToken(v string) *DeployLeaseContractRequest {
	s.AuthToken = &v
	return s
}

func (s *DeployLeaseContractRequest) SetProductInstanceId(v string) *DeployLeaseContractRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeployLeaseContractRequest) SetContractId(v string) *DeployLeaseContractRequest {
	s.ContractId = &v
	return s
}

type DeployLeaseContractResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码
	// 0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 合约部署成功的交易哈希
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s DeployLeaseContractResponse) String() string {
	return tea.Prettify(s)
}

func (s DeployLeaseContractResponse) GoString() string {
	return s.String()
}

func (s *DeployLeaseContractResponse) SetReqMsgId(v string) *DeployLeaseContractResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeployLeaseContractResponse) SetResultCode(v string) *DeployLeaseContractResponse {
	s.ResultCode = &v
	return s
}

func (s *DeployLeaseContractResponse) SetResultMsg(v string) *DeployLeaseContractResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeployLeaseContractResponse) SetCode(v int64) *DeployLeaseContractResponse {
	s.Code = &v
	return s
}

func (s *DeployLeaseContractResponse) SetErrMessage(v string) *DeployLeaseContractResponse {
	s.ErrMessage = &v
	return s
}

func (s *DeployLeaseContractResponse) SetResponseData(v string) *DeployLeaseContractResponse {
	s.ResponseData = &v
	return s
}

type AuthLeaseContractRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 融资服务平台ID 长度不可超过50
	CreditId *string `json:"credit_id,omitempty" xml:"credit_id,omitempty" require:"true"`
}

func (s AuthLeaseContractRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthLeaseContractRequest) GoString() string {
	return s.String()
}

func (s *AuthLeaseContractRequest) SetAuthToken(v string) *AuthLeaseContractRequest {
	s.AuthToken = &v
	return s
}

func (s *AuthLeaseContractRequest) SetProductInstanceId(v string) *AuthLeaseContractRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AuthLeaseContractRequest) SetCreditId(v string) *AuthLeaseContractRequest {
	s.CreditId = &v
	return s
}

type AuthLeaseContractResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码
	// 0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 授权信息存储到合约中对应的区块链交易哈希
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s AuthLeaseContractResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthLeaseContractResponse) GoString() string {
	return s.String()
}

func (s *AuthLeaseContractResponse) SetReqMsgId(v string) *AuthLeaseContractResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AuthLeaseContractResponse) SetResultCode(v string) *AuthLeaseContractResponse {
	s.ResultCode = &v
	return s
}

func (s *AuthLeaseContractResponse) SetResultMsg(v string) *AuthLeaseContractResponse {
	s.ResultMsg = &v
	return s
}

func (s *AuthLeaseContractResponse) SetCode(v int64) *AuthLeaseContractResponse {
	s.Code = &v
	return s
}

func (s *AuthLeaseContractResponse) SetErrMessage(v string) *AuthLeaseContractResponse {
	s.ErrMessage = &v
	return s
}

func (s *AuthLeaseContractResponse) SetResponseData(v string) *AuthLeaseContractResponse {
	s.ResponseData = &v
	return s
}

type CreateLeaseUserinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 支付宝账号信息
	AlipayUid *string `json:"alipay_uid,omitempty" xml:"alipay_uid,omitempty" require:"true"`
	// 融资租赁业务id，由资方控制台生成返回
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 是否启动异步
	Async *int64 `json:"async,omitempty" xml:"async,omitempty"`
	// 融资租赁用户信息额外字段
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// 承租企业统一社会信用代码 长度不可超过50
	LeaseCorpId *string `json:"lease_corp_id,omitempty" xml:"lease_corp_id,omitempty" require:"true"`
	// 承租企业名称 长度不可超过50
	LeaseCorpName *string `json:"lease_corp_name,omitempty" xml:"lease_corp_name,omitempty" require:"true"`
	// 承租法定代表人姓名 长度不可超过50
	LeaseCorpOwnerName *string `json:"lease_corp_owner_name,omitempty" xml:"lease_corp_owner_name,omitempty" require:"true"`
	// 用户登录名，租赁平台会员ID/支付宝ID 长度不可超过50
	LoginId *string `json:"login_id,omitempty" xml:"login_id,omitempty" require:"true"`
	// 用户登录时间 格式为2019-8-31 12:00:00
	LoginTime *string `json:"login_time,omitempty" xml:"login_time,omitempty" require:"true"`
	// 用户登录名类型 1.商户会员2.支付宝3.其他
	LoginType *int64 `json:"login_type,omitempty" xml:"login_type,omitempty" require:"true"`
	// 订单id 长度不可超过50
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 区块链认证Hash，若为支付宝实人，必填
	UserBlockchainVerifyHash *string `json:"user_blockchain_verify_hash,omitempty" xml:"user_blockchain_verify_hash,omitempty"`
	// 承租人电子邮件，法院/仲裁电子送达必填项，长度不超过5
	UserEmail *string `json:"user_email,omitempty" xml:"user_email,omitempty"`
	// 承租人身份证
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 承租人身份证照片哈希
	UserImageHash *string `json:"user_image_hash,omitempty" xml:"user_image_hash,omitempty" require:"true"`
	// 承租人身份证照片存证交易哈希
	UserImageTxHash *string `json:"user_image_tx_hash,omitempty" xml:"user_image_tx_hash,omitempty" require:"true"`
	// 承租人姓名 长度不可超过10
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty" require:"true"`
	// 承租人手机号
	UserPhoneNumber *string `json:"user_phone_number,omitempty" xml:"user_phone_number,omitempty" require:"true"`
	// 身份认证类型 1支付宝实人，2芝麻实人，3非蚂蚁实人
	UserType *int64 `json:"user_type,omitempty" xml:"user_type,omitempty" require:"true"`
	// 额外通知第三方，如果需要通知相关方外的第三方，需要在此设置关联方的租户id，若不设置则只通知资方
	RelatedNotify []*string `json:"related_notify,omitempty" xml:"related_notify,omitempty" type:"Repeated"`
}

func (s CreateLeaseUserinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseUserinfoRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseUserinfoRequest) SetAuthToken(v string) *CreateLeaseUserinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseUserinfoRequest) SetProductInstanceId(v string) *CreateLeaseUserinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseUserinfoRequest) SetAlipayUid(v string) *CreateLeaseUserinfoRequest {
	s.AlipayUid = &v
	return s
}

func (s *CreateLeaseUserinfoRequest) SetApplicationId(v string) *CreateLeaseUserinfoRequest {
	s.ApplicationId = &v
	return s
}

func (s *CreateLeaseUserinfoRequest) SetAsync(v int64) *CreateLeaseUserinfoRequest {
	s.Async = &v
	return s
}

func (s *CreateLeaseUserinfoRequest) SetExtraInfo(v string) *CreateLeaseUserinfoRequest {
	s.ExtraInfo = &v
	return s
}

func (s *CreateLeaseUserinfoRequest) SetLeaseCorpId(v string) *CreateLeaseUserinfoRequest {
	s.LeaseCorpId = &v
	return s
}

func (s *CreateLeaseUserinfoRequest) SetLeaseCorpName(v string) *CreateLeaseUserinfoRequest {
	s.LeaseCorpName = &v
	return s
}

func (s *CreateLeaseUserinfoRequest) SetLeaseCorpOwnerName(v string) *CreateLeaseUserinfoRequest {
	s.LeaseCorpOwnerName = &v
	return s
}

func (s *CreateLeaseUserinfoRequest) SetLoginId(v string) *CreateLeaseUserinfoRequest {
	s.LoginId = &v
	return s
}

func (s *CreateLeaseUserinfoRequest) SetLoginTime(v string) *CreateLeaseUserinfoRequest {
	s.LoginTime = &v
	return s
}

func (s *CreateLeaseUserinfoRequest) SetLoginType(v int64) *CreateLeaseUserinfoRequest {
	s.LoginType = &v
	return s
}

func (s *CreateLeaseUserinfoRequest) SetOrderId(v string) *CreateLeaseUserinfoRequest {
	s.OrderId = &v
	return s
}

func (s *CreateLeaseUserinfoRequest) SetUserBlockchainVerifyHash(v string) *CreateLeaseUserinfoRequest {
	s.UserBlockchainVerifyHash = &v
	return s
}

func (s *CreateLeaseUserinfoRequest) SetUserEmail(v string) *CreateLeaseUserinfoRequest {
	s.UserEmail = &v
	return s
}

func (s *CreateLeaseUserinfoRequest) SetUserId(v string) *CreateLeaseUserinfoRequest {
	s.UserId = &v
	return s
}

func (s *CreateLeaseUserinfoRequest) SetUserImageHash(v string) *CreateLeaseUserinfoRequest {
	s.UserImageHash = &v
	return s
}

func (s *CreateLeaseUserinfoRequest) SetUserImageTxHash(v string) *CreateLeaseUserinfoRequest {
	s.UserImageTxHash = &v
	return s
}

func (s *CreateLeaseUserinfoRequest) SetUserName(v string) *CreateLeaseUserinfoRequest {
	s.UserName = &v
	return s
}

func (s *CreateLeaseUserinfoRequest) SetUserPhoneNumber(v string) *CreateLeaseUserinfoRequest {
	s.UserPhoneNumber = &v
	return s
}

func (s *CreateLeaseUserinfoRequest) SetUserType(v int64) *CreateLeaseUserinfoRequest {
	s.UserType = &v
	return s
}

func (s *CreateLeaseUserinfoRequest) SetRelatedNotify(v []*string) *CreateLeaseUserinfoRequest {
	s.RelatedNotify = v
	return s
}

type CreateLeaseUserinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码 0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 用户信息存储到合约中对应的区块链交易哈希
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s CreateLeaseUserinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseUserinfoResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseUserinfoResponse) SetReqMsgId(v string) *CreateLeaseUserinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseUserinfoResponse) SetResultCode(v string) *CreateLeaseUserinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseUserinfoResponse) SetResultMsg(v string) *CreateLeaseUserinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseUserinfoResponse) SetCode(v int64) *CreateLeaseUserinfoResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseUserinfoResponse) SetErrMessage(v string) *CreateLeaseUserinfoResponse {
	s.ErrMessage = &v
	return s
}

func (s *CreateLeaseUserinfoResponse) SetResponseData(v string) *CreateLeaseUserinfoResponse {
	s.ResponseData = &v
	return s
}

type CreateLeaseOrderinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 实际预授权金额，芝麻信用免押金额 精确到毫厘，即123400表示12.34元
	AcutalPreAuthFree *int64 `json:"acutal_pre_auth_free,omitempty" xml:"acutal_pre_auth_free,omitempty" require:"true"`
	// 融资租赁业务id，由资方控制台创建返回
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 是否启动异步处理订单
	Async *int64 `json:"async,omitempty" xml:"async,omitempty"`
	// 采购发票地址
	BillUrl *string `json:"bill_url,omitempty" xml:"bill_url,omitempty"`
	// 到期买断价 精确到毫厘，即123400表示12.34元
	BuyOutPrice *int64 `json:"buy_out_price,omitempty" xml:"buy_out_price,omitempty" require:"true"`
	// 市编码
	CityCode *string `json:"city_code,omitempty" xml:"city_code,omitempty"`
	// 免押金额 精确到毫厘，即123400表示12.34元
	DepositFree *int64 `json:"deposit_free,omitempty" xml:"deposit_free,omitempty" require:"true"`
	// 区编码
	DistrictCode *string `json:"district_code,omitempty" xml:"district_code,omitempty"`
	// 融资租赁额外字段
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// 安装服务记录哈希
	InstallHash *string `json:"install_hash,omitempty" xml:"install_hash,omitempty"`
	// 安装拆卸费 精确到毫厘，即123400表示12.34元
	InstallPrice *int64 `json:"install_price,omitempty" xml:"install_price,omitempty"`
	// 安装服务记录链上存证交易哈希
	InstallTxHash *string `json:"install_tx_hash,omitempty" xml:"install_tx_hash,omitempty"`
	// 保险单号
	InsuranceNumber *string `json:"insurance_number,omitempty" xml:"insurance_number,omitempty"`
	// 保险链接
	InsuranceUrl *string `json:"insurance_url,omitempty" xml:"insurance_url,omitempty"`
	// 租赁物入库日  格式为2019-8-31 12:00:00
	InStoreTime *string `json:"in_store_time,omitempty" xml:"in_store_time,omitempty"`
	// 订单额外信息
	LeaseOrderExtra []*LeaseOrderExtra `json:"lease_order_extra,omitempty" xml:"lease_order_extra,omitempty" type:"Repeated"`
	// 融资租赁及服务协议之补充协议文件
	LeaseServiceAdditionalFileHash *string `json:"lease_service_additional_file_hash,omitempty" xml:"lease_service_additional_file_hash,omitempty"`
	// 融资租赁及服务协议之补充协议文件链上存证交易哈希
	LeaseServiceAdditionalFileTxHash *string `json:"lease_service_additional_file_tx_hash,omitempty" xml:"lease_service_additional_file_tx_hash,omitempty"`
	// 融资租赁及服务协议文件hash，三方协议
	LeaseServiceFileHash *string `json:"lease_service_file_hash,omitempty" xml:"lease_service_file_hash,omitempty" require:"true"`
	// 融资租赁及服务协议文件链上存证交易哈希
	LeaseServiceFileTxHash *string `json:"lease_service_file_tx_hash,omitempty" xml:"lease_service_file_tx_hash,omitempty" require:"true"`
	// 订单创建时间 格式为2019-8-31 12:00:00
	OrderCreateTime *string `json:"order_create_time,omitempty" xml:"order_create_time,omitempty" require:"true"`
	// 订单id 长度不可超过50
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 支付订单ID
	OrderPayId *string `json:"order_pay_id,omitempty" xml:"order_pay_id,omitempty"`
	// 订单支付时间 格式为2019-8-31 12:00:00
	OrderPayTime *string `json:"order_pay_time,omitempty" xml:"order_pay_time,omitempty" require:"true"`
	// 订单支付类型 1 预授权，2信用套餐，3支付宝代扣，4其他
	OrderPayType *int64 `json:"order_pay_type,omitempty" xml:"order_pay_type,omitempty"`
	// 租赁物出库物流编号
	OutStoreDeliverNumber *string `json:"out_store_deliver_number,omitempty" xml:"out_store_deliver_number,omitempty"`
	// 租赁物出库日  格式为2019-8-31 12:00:00
	OutStoreTime *string `json:"out_store_time,omitempty" xml:"out_store_time,omitempty"`
	// 支付凭证地址
	PayProofUrl *string `json:"pay_proof_url,omitempty" xml:"pay_proof_url,omitempty"`
	// 预授权支付订单ID
	PreAuthPayOrderId *string `json:"pre_auth_pay_order_id,omitempty" xml:"pre_auth_pay_order_id,omitempty"`
	// 产品详细信息
	ProductInfo []*ProductInfo `json:"product_info,omitempty" xml:"product_info,omitempty" require:"true" type:"Repeated"`
	// 省编码
	ProvinceCode *string `json:"province_code,omitempty" xml:"province_code,omitempty"`
	// 采购发票文件哈希
	PurchaseContractBillHash *string `json:"purchase_contract_bill_hash,omitempty" xml:"purchase_contract_bill_hash,omitempty"`
	// 采购发票文件链上存证交易哈希
	PurchaseContractBillTxHash *string `json:"purchase_contract_bill_tx_hash,omitempty" xml:"purchase_contract_bill_tx_hash,omitempty"`
	// 采购合同文件哈希
	PurchaseContractHash *string `json:"purchase_contract_hash,omitempty" xml:"purchase_contract_hash,omitempty"`
	// 采购合同文件链上存证交易哈希
	PurchaseContractTxHash *string `json:"purchase_contract_tx_hash,omitempty" xml:"purchase_contract_tx_hash,omitempty"`
	// 采购合同地址
	PurchaseContractUrl *string `json:"purchase_contract_url,omitempty" xml:"purchase_contract_url,omitempty"`
	// 额外通知第三方，如果需要通知相关方外的第三方，需要在此设置关联方的租户id，若不设置则只通知资方
	//
	RelatedNotify []*string `json:"related_notify,omitempty" xml:"related_notify,omitempty" type:"Repeated"`
	// 租赁合同地址
	RentContractUrl *string `json:"rent_contract_url,omitempty" xml:"rent_contract_url,omitempty"`
	// 月租金 精确到毫厘，即123400表示12.34元
	RentPricePerMonth *int64 `json:"rent_price_per_month,omitempty" xml:"rent_price_per_month,omitempty" require:"true"`
	// 租期
	RentTerm *int64 `json:"rent_term,omitempty" xml:"rent_term,omitempty" require:"true"`
	// 承租人签收记录哈希
	SignHash *string `json:"sign_hash,omitempty" xml:"sign_hash,omitempty"`
	// 承租人签收时间  格式为2019-8-31 12:00:00
	SignTime *string `json:"sign_time,omitempty" xml:"sign_time,omitempty"`
	// 承租人签收记录链上存证哈希
	SignTxHash *string `json:"sign_tx_hash,omitempty" xml:"sign_tx_hash,omitempty"`
	// 仓库类型 1实体仓 2虚拟仓
	StoreType *int64 `json:"store_type,omitempty" xml:"store_type,omitempty"`
	// 补充协议地址
	SupplementProtocolUrl *string `json:"supplement_protocol_url,omitempty" xml:"supplement_protocol_url,omitempty"`
	// 供应商对应的金融科技租户id，若有此字段，则会授权相应的供应商上传采购等相关信息
	SupplierIsvAccount *string `json:"supplier_isv_account,omitempty" xml:"supplier_isv_account,omitempty"`
	// 承租人收货地址
	UserAddress *string `json:"user_address,omitempty" xml:"user_address,omitempty" require:"true"`
	// 智能合同的合同id
	LeaseServiceContractId *string `json:"lease_service_contract_id,omitempty" xml:"lease_service_contract_id,omitempty"`
	// 网商直付通模式的代扣协议号
	AgreementNo *string `json:"agreement_no,omitempty" xml:"agreement_no,omitempty"`
	// 直付通代扣受理订单号
	AgreementOrderId *string `json:"agreement_order_id,omitempty" xml:"agreement_order_id,omitempty"`
	// 单位是毫厘，123400
	DownPayment *int64 `json:"down_payment,omitempty" xml:"down_payment,omitempty"`
}

func (s CreateLeaseOrderinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseOrderinfoRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseOrderinfoRequest) SetAuthToken(v string) *CreateLeaseOrderinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetProductInstanceId(v string) *CreateLeaseOrderinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetAcutalPreAuthFree(v int64) *CreateLeaseOrderinfoRequest {
	s.AcutalPreAuthFree = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetApplicationId(v string) *CreateLeaseOrderinfoRequest {
	s.ApplicationId = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetAsync(v int64) *CreateLeaseOrderinfoRequest {
	s.Async = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetBillUrl(v string) *CreateLeaseOrderinfoRequest {
	s.BillUrl = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetBuyOutPrice(v int64) *CreateLeaseOrderinfoRequest {
	s.BuyOutPrice = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetCityCode(v string) *CreateLeaseOrderinfoRequest {
	s.CityCode = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetDepositFree(v int64) *CreateLeaseOrderinfoRequest {
	s.DepositFree = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetDistrictCode(v string) *CreateLeaseOrderinfoRequest {
	s.DistrictCode = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetExtraInfo(v string) *CreateLeaseOrderinfoRequest {
	s.ExtraInfo = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetInstallHash(v string) *CreateLeaseOrderinfoRequest {
	s.InstallHash = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetInstallPrice(v int64) *CreateLeaseOrderinfoRequest {
	s.InstallPrice = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetInstallTxHash(v string) *CreateLeaseOrderinfoRequest {
	s.InstallTxHash = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetInsuranceNumber(v string) *CreateLeaseOrderinfoRequest {
	s.InsuranceNumber = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetInsuranceUrl(v string) *CreateLeaseOrderinfoRequest {
	s.InsuranceUrl = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetInStoreTime(v string) *CreateLeaseOrderinfoRequest {
	s.InStoreTime = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetLeaseOrderExtra(v []*LeaseOrderExtra) *CreateLeaseOrderinfoRequest {
	s.LeaseOrderExtra = v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetLeaseServiceAdditionalFileHash(v string) *CreateLeaseOrderinfoRequest {
	s.LeaseServiceAdditionalFileHash = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetLeaseServiceAdditionalFileTxHash(v string) *CreateLeaseOrderinfoRequest {
	s.LeaseServiceAdditionalFileTxHash = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetLeaseServiceFileHash(v string) *CreateLeaseOrderinfoRequest {
	s.LeaseServiceFileHash = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetLeaseServiceFileTxHash(v string) *CreateLeaseOrderinfoRequest {
	s.LeaseServiceFileTxHash = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetOrderCreateTime(v string) *CreateLeaseOrderinfoRequest {
	s.OrderCreateTime = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetOrderId(v string) *CreateLeaseOrderinfoRequest {
	s.OrderId = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetOrderPayId(v string) *CreateLeaseOrderinfoRequest {
	s.OrderPayId = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetOrderPayTime(v string) *CreateLeaseOrderinfoRequest {
	s.OrderPayTime = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetOrderPayType(v int64) *CreateLeaseOrderinfoRequest {
	s.OrderPayType = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetOutStoreDeliverNumber(v string) *CreateLeaseOrderinfoRequest {
	s.OutStoreDeliverNumber = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetOutStoreTime(v string) *CreateLeaseOrderinfoRequest {
	s.OutStoreTime = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetPayProofUrl(v string) *CreateLeaseOrderinfoRequest {
	s.PayProofUrl = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetPreAuthPayOrderId(v string) *CreateLeaseOrderinfoRequest {
	s.PreAuthPayOrderId = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetProductInfo(v []*ProductInfo) *CreateLeaseOrderinfoRequest {
	s.ProductInfo = v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetProvinceCode(v string) *CreateLeaseOrderinfoRequest {
	s.ProvinceCode = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetPurchaseContractBillHash(v string) *CreateLeaseOrderinfoRequest {
	s.PurchaseContractBillHash = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetPurchaseContractBillTxHash(v string) *CreateLeaseOrderinfoRequest {
	s.PurchaseContractBillTxHash = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetPurchaseContractHash(v string) *CreateLeaseOrderinfoRequest {
	s.PurchaseContractHash = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetPurchaseContractTxHash(v string) *CreateLeaseOrderinfoRequest {
	s.PurchaseContractTxHash = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetPurchaseContractUrl(v string) *CreateLeaseOrderinfoRequest {
	s.PurchaseContractUrl = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetRelatedNotify(v []*string) *CreateLeaseOrderinfoRequest {
	s.RelatedNotify = v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetRentContractUrl(v string) *CreateLeaseOrderinfoRequest {
	s.RentContractUrl = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetRentPricePerMonth(v int64) *CreateLeaseOrderinfoRequest {
	s.RentPricePerMonth = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetRentTerm(v int64) *CreateLeaseOrderinfoRequest {
	s.RentTerm = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetSignHash(v string) *CreateLeaseOrderinfoRequest {
	s.SignHash = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetSignTime(v string) *CreateLeaseOrderinfoRequest {
	s.SignTime = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetSignTxHash(v string) *CreateLeaseOrderinfoRequest {
	s.SignTxHash = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetStoreType(v int64) *CreateLeaseOrderinfoRequest {
	s.StoreType = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetSupplementProtocolUrl(v string) *CreateLeaseOrderinfoRequest {
	s.SupplementProtocolUrl = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetSupplierIsvAccount(v string) *CreateLeaseOrderinfoRequest {
	s.SupplierIsvAccount = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetUserAddress(v string) *CreateLeaseOrderinfoRequest {
	s.UserAddress = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetLeaseServiceContractId(v string) *CreateLeaseOrderinfoRequest {
	s.LeaseServiceContractId = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetAgreementNo(v string) *CreateLeaseOrderinfoRequest {
	s.AgreementNo = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetAgreementOrderId(v string) *CreateLeaseOrderinfoRequest {
	s.AgreementOrderId = &v
	return s
}

func (s *CreateLeaseOrderinfoRequest) SetDownPayment(v int64) *CreateLeaseOrderinfoRequest {
	s.DownPayment = &v
	return s
}

type CreateLeaseOrderinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码
	// 0 表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 订单产品/服务信息存储到合约中对应的区块链交易哈希
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s CreateLeaseOrderinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseOrderinfoResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseOrderinfoResponse) SetReqMsgId(v string) *CreateLeaseOrderinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseOrderinfoResponse) SetResultCode(v string) *CreateLeaseOrderinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseOrderinfoResponse) SetResultMsg(v string) *CreateLeaseOrderinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseOrderinfoResponse) SetCode(v int64) *CreateLeaseOrderinfoResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseOrderinfoResponse) SetErrMessage(v string) *CreateLeaseOrderinfoResponse {
	s.ErrMessage = &v
	return s
}

func (s *CreateLeaseOrderinfoResponse) SetResponseData(v string) *CreateLeaseOrderinfoResponse {
	s.ResponseData = &v
	return s
}

type CreateLeasePromiseRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 融资租赁业务id，由资方控制台生成返回
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 审核方式,0为系统自动审核，1为人工审核
	AuditMode *int64 `json:"audit_mode,omitempty" xml:"audit_mode,omitempty" require:"true"`
	// 清分机构金融科技租户ID
	ClearingOrg *string `json:"clearing_org,omitempty" xml:"clearing_org,omitempty"`
	// 放款机构金融科技租户ID
	CreditOrg *string `json:"credit_org,omitempty" xml:"credit_org,omitempty" require:"true"`
	// 第一次还款时的日期
	FirstPayDate *string `json:"first_pay_date,omitempty" xml:"first_pay_date,omitempty"`
	// 融资机构的阿里uid
	LeaseAlipayUid *string `json:"lease_alipay_uid,omitempty" xml:"lease_alipay_uid,omitempty" require:"true"`
	// 宽限期，精确到毫秒
	Limit *int64 `json:"limit,omitempty" xml:"limit,omitempty" require:"true"`
	// 订单id 长度不可超过50
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 应付租金，精确到毫厘，即123400表示12.34元
	PayDateList []*string `json:"pay_date_list,omitempty" xml:"pay_date_list,omitempty" require:"true" type:"Repeated"`
	// 租赁方承诺额外字段
	PayExtraInfoList []*string `json:"pay_extra_info_list,omitempty" xml:"pay_extra_info_list,omitempty" type:"Repeated"`
	// 应付租金 精确到毫厘，即123400表示12.34元
	//
	PayMoney *int64 `json:"pay_money,omitempty" xml:"pay_money,omitempty"`
	// 应付租金 精确到毫厘，即123400表示12.34元
	PayMoneyList []*int64 `json:"pay_money_list,omitempty" xml:"pay_money_list,omitempty" require:"true" type:"Repeated"`
	// 应付租金的期数
	PayPeriod *int64 `json:"pay_period,omitempty" xml:"pay_period,omitempty" require:"true"`
	// 是否启动异步订单处理
	Async *int64 `json:"async,omitempty" xml:"async,omitempty"`
	// 首付款代扣流水号，最大长度是128
	DownPaymentSerialNumber *string `json:"down_payment_serial_number,omitempty" xml:"down_payment_serial_number,omitempty" maxLength:"128" minLength:"0"`
}

func (s CreateLeasePromiseRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeasePromiseRequest) GoString() string {
	return s.String()
}

func (s *CreateLeasePromiseRequest) SetAuthToken(v string) *CreateLeasePromiseRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeasePromiseRequest) SetProductInstanceId(v string) *CreateLeasePromiseRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeasePromiseRequest) SetApplicationId(v string) *CreateLeasePromiseRequest {
	s.ApplicationId = &v
	return s
}

func (s *CreateLeasePromiseRequest) SetAuditMode(v int64) *CreateLeasePromiseRequest {
	s.AuditMode = &v
	return s
}

func (s *CreateLeasePromiseRequest) SetClearingOrg(v string) *CreateLeasePromiseRequest {
	s.ClearingOrg = &v
	return s
}

func (s *CreateLeasePromiseRequest) SetCreditOrg(v string) *CreateLeasePromiseRequest {
	s.CreditOrg = &v
	return s
}

func (s *CreateLeasePromiseRequest) SetFirstPayDate(v string) *CreateLeasePromiseRequest {
	s.FirstPayDate = &v
	return s
}

func (s *CreateLeasePromiseRequest) SetLeaseAlipayUid(v string) *CreateLeasePromiseRequest {
	s.LeaseAlipayUid = &v
	return s
}

func (s *CreateLeasePromiseRequest) SetLimit(v int64) *CreateLeasePromiseRequest {
	s.Limit = &v
	return s
}

func (s *CreateLeasePromiseRequest) SetOrderId(v string) *CreateLeasePromiseRequest {
	s.OrderId = &v
	return s
}

func (s *CreateLeasePromiseRequest) SetPayDateList(v []*string) *CreateLeasePromiseRequest {
	s.PayDateList = v
	return s
}

func (s *CreateLeasePromiseRequest) SetPayExtraInfoList(v []*string) *CreateLeasePromiseRequest {
	s.PayExtraInfoList = v
	return s
}

func (s *CreateLeasePromiseRequest) SetPayMoney(v int64) *CreateLeasePromiseRequest {
	s.PayMoney = &v
	return s
}

func (s *CreateLeasePromiseRequest) SetPayMoneyList(v []*int64) *CreateLeasePromiseRequest {
	s.PayMoneyList = v
	return s
}

func (s *CreateLeasePromiseRequest) SetPayPeriod(v int64) *CreateLeasePromiseRequest {
	s.PayPeriod = &v
	return s
}

func (s *CreateLeasePromiseRequest) SetAsync(v int64) *CreateLeasePromiseRequest {
	s.Async = &v
	return s
}

func (s *CreateLeasePromiseRequest) SetDownPaymentSerialNumber(v string) *CreateLeasePromiseRequest {
	s.DownPaymentSerialNumber = &v
	return s
}

type CreateLeasePromiseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 租方承诺信息存储到合约中对应的区块链交易哈希
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s CreateLeasePromiseResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeasePromiseResponse) GoString() string {
	return s.String()
}

func (s *CreateLeasePromiseResponse) SetReqMsgId(v string) *CreateLeasePromiseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeasePromiseResponse) SetResultCode(v string) *CreateLeasePromiseResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeasePromiseResponse) SetResultMsg(v string) *CreateLeasePromiseResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeasePromiseResponse) SetCode(v int64) *CreateLeasePromiseResponse {
	s.Code = &v
	return s
}

func (s *CreateLeasePromiseResponse) SetErrMessage(v string) *CreateLeasePromiseResponse {
	s.ErrMessage = &v
	return s
}

func (s *CreateLeasePromiseResponse) SetResponseData(v string) *CreateLeasePromiseResponse {
	s.ResponseData = &v
	return s
}

type CreateLeaseVerifyinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 融资租赁业务id，由资方控制台生成返回
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 是否启动订单的异步处理
	Async *int64 `json:"async,omitempty" xml:"async,omitempty"`
	// 放款账户
	CardNumber *string `json:"card_number,omitempty" xml:"card_number,omitempty"`
	// 授信终止时间，格式为"2019-07-31 12:00:00"
	CreditEndTime *string `json:"credit_end_time,omitempty" xml:"credit_end_time,omitempty"`
	// 授信额度，精确到毫厘，即123400表示12.34元
	CreditLimit *int64 `json:"credit_limit,omitempty" xml:"credit_limit,omitempty"`
	// 授信起始时间，格式为"2019-07-31 12:00:00"
	CreditStartTime *string `json:"credit_start_time,omitempty" xml:"credit_start_time,omitempty"`
	// 融资租赁审贷信息额外字段
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// 承租企业统一社会信用代码 长度不可超过50
	LeaseCorpId *string `json:"lease_corp_id,omitempty" xml:"lease_corp_id,omitempty"`
	// 承租企业名称 长度不可超过50
	LeaseCorpName *string `json:"lease_corp_name,omitempty" xml:"lease_corp_name,omitempty"`
	// 承租法定代表人姓名 长度不可超过50
	LeaseCorpOwnerName *string `json:"lease_corp_owner_name,omitempty" xml:"lease_corp_owner_name,omitempty"`
	// 租赁服务平台id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
	// 放款流水单号
	Loan *string `json:"loan,omitempty" xml:"loan,omitempty"`
	// 订单id 长度不可超过50
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 还款计划文件哈希
	PayBackHash *string `json:"pay_back_hash,omitempty" xml:"pay_back_hash,omitempty"`
	// 还款计划文件存证交易哈希
	PayBackTxHash *string `json:"pay_back_tx_hash,omitempty" xml:"pay_back_tx_hash,omitempty"`
	// 承租人身份证
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	// 承租人姓名 长度不可超过10
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
	// 承租人手机号
	UserPhoneNumber *string `json:"user_phone_number,omitempty" xml:"user_phone_number,omitempty"`
	// 是否通过，0表示不通过，1表示通过
	VerifyResult *int64 `json:"verify_result,omitempty" xml:"verify_result,omitempty" require:"true"`
	// 付款汇款凭证 民盛转账成功后上传
	Voucher *string `json:"voucher,omitempty" xml:"voucher,omitempty"`
	// 拒绝的理由
	VerifyRefuseDesc *string `json:"verify_refuse_desc,omitempty" xml:"verify_refuse_desc,omitempty"`
}

func (s CreateLeaseVerifyinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseVerifyinfoRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseVerifyinfoRequest) SetAuthToken(v string) *CreateLeaseVerifyinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseVerifyinfoRequest) SetProductInstanceId(v string) *CreateLeaseVerifyinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseVerifyinfoRequest) SetApplicationId(v string) *CreateLeaseVerifyinfoRequest {
	s.ApplicationId = &v
	return s
}

func (s *CreateLeaseVerifyinfoRequest) SetAsync(v int64) *CreateLeaseVerifyinfoRequest {
	s.Async = &v
	return s
}

func (s *CreateLeaseVerifyinfoRequest) SetCardNumber(v string) *CreateLeaseVerifyinfoRequest {
	s.CardNumber = &v
	return s
}

func (s *CreateLeaseVerifyinfoRequest) SetCreditEndTime(v string) *CreateLeaseVerifyinfoRequest {
	s.CreditEndTime = &v
	return s
}

func (s *CreateLeaseVerifyinfoRequest) SetCreditLimit(v int64) *CreateLeaseVerifyinfoRequest {
	s.CreditLimit = &v
	return s
}

func (s *CreateLeaseVerifyinfoRequest) SetCreditStartTime(v string) *CreateLeaseVerifyinfoRequest {
	s.CreditStartTime = &v
	return s
}

func (s *CreateLeaseVerifyinfoRequest) SetExtraInfo(v string) *CreateLeaseVerifyinfoRequest {
	s.ExtraInfo = &v
	return s
}

func (s *CreateLeaseVerifyinfoRequest) SetLeaseCorpId(v string) *CreateLeaseVerifyinfoRequest {
	s.LeaseCorpId = &v
	return s
}

func (s *CreateLeaseVerifyinfoRequest) SetLeaseCorpName(v string) *CreateLeaseVerifyinfoRequest {
	s.LeaseCorpName = &v
	return s
}

func (s *CreateLeaseVerifyinfoRequest) SetLeaseCorpOwnerName(v string) *CreateLeaseVerifyinfoRequest {
	s.LeaseCorpOwnerName = &v
	return s
}

func (s *CreateLeaseVerifyinfoRequest) SetLeaseId(v string) *CreateLeaseVerifyinfoRequest {
	s.LeaseId = &v
	return s
}

func (s *CreateLeaseVerifyinfoRequest) SetLoan(v string) *CreateLeaseVerifyinfoRequest {
	s.Loan = &v
	return s
}

func (s *CreateLeaseVerifyinfoRequest) SetOrderId(v string) *CreateLeaseVerifyinfoRequest {
	s.OrderId = &v
	return s
}

func (s *CreateLeaseVerifyinfoRequest) SetPayBackHash(v string) *CreateLeaseVerifyinfoRequest {
	s.PayBackHash = &v
	return s
}

func (s *CreateLeaseVerifyinfoRequest) SetPayBackTxHash(v string) *CreateLeaseVerifyinfoRequest {
	s.PayBackTxHash = &v
	return s
}

func (s *CreateLeaseVerifyinfoRequest) SetUserId(v string) *CreateLeaseVerifyinfoRequest {
	s.UserId = &v
	return s
}

func (s *CreateLeaseVerifyinfoRequest) SetUserName(v string) *CreateLeaseVerifyinfoRequest {
	s.UserName = &v
	return s
}

func (s *CreateLeaseVerifyinfoRequest) SetUserPhoneNumber(v string) *CreateLeaseVerifyinfoRequest {
	s.UserPhoneNumber = &v
	return s
}

func (s *CreateLeaseVerifyinfoRequest) SetVerifyResult(v int64) *CreateLeaseVerifyinfoRequest {
	s.VerifyResult = &v
	return s
}

func (s *CreateLeaseVerifyinfoRequest) SetVoucher(v string) *CreateLeaseVerifyinfoRequest {
	s.Voucher = &v
	return s
}

func (s *CreateLeaseVerifyinfoRequest) SetVerifyRefuseDesc(v string) *CreateLeaseVerifyinfoRequest {
	s.VerifyRefuseDesc = &v
	return s
}

type CreateLeaseVerifyinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码
	// 0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 审贷信息存储到合约中对应的区块链交易哈希
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s CreateLeaseVerifyinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseVerifyinfoResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseVerifyinfoResponse) SetReqMsgId(v string) *CreateLeaseVerifyinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseVerifyinfoResponse) SetResultCode(v string) *CreateLeaseVerifyinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseVerifyinfoResponse) SetResultMsg(v string) *CreateLeaseVerifyinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseVerifyinfoResponse) SetCode(v int64) *CreateLeaseVerifyinfoResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseVerifyinfoResponse) SetErrMessage(v string) *CreateLeaseVerifyinfoResponse {
	s.ErrMessage = &v
	return s
}

func (s *CreateLeaseVerifyinfoResponse) SetResponseData(v string) *CreateLeaseVerifyinfoResponse {
	s.ResponseData = &v
	return s
}

type CreateLeaseCreditpromiseRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 融资租赁业务id，由资方控制台创建返回
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 融资租赁承诺额外字段
	CreditPromiseExtraInfoList []*string `json:"credit_promise_extra_info_list,omitempty" xml:"credit_promise_extra_info_list,omitempty" type:"Repeated"`
	// 租赁平台金融科技id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
	// 订单id 长度不可超过50
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 垫付金额
	PayInAdvanceMoney *int64 `json:"pay_in_advance_money,omitempty" xml:"pay_in_advance_money,omitempty"`
	// 垫付金额，精确到毫厘，即123400表示12.34元
	PayInAdvanceMoneyList []*int64 `json:"pay_in_advance_money_list,omitempty" xml:"pay_in_advance_money_list,omitempty" type:"Repeated"`
	// 垫付日期
	PayInAdvanceTime *string `json:"pay_in_advance_time,omitempty" xml:"pay_in_advance_time,omitempty"`
	// 垫付日  格式为2019-8-31 12:00:00
	PayInAdvanceTimeList []*string `json:"pay_in_advance_time_list,omitempty" xml:"pay_in_advance_time_list,omitempty" require:"true" type:"Repeated"`
	// 根据融资租赁合同及其补充协议哈希
	PromiseHash *string `json:"promise_hash,omitempty" xml:"promise_hash,omitempty" require:"true"`
	// 根据融资租赁合同及其补充协议存证交易hash
	PromiseTxHash *string `json:"promise_tx_hash,omitempty" xml:"promise_tx_hash,omitempty" require:"true"`
	// 归还金额
	ReturnMoney *int64 `json:"return_money,omitempty" xml:"return_money,omitempty"`
	// 还款金额，精确到毫厘，即123400表示12.34元
	ReturnMoneyList []*int64 `json:"return_money_list,omitempty" xml:"return_money_list,omitempty" require:"true" type:"Repeated"`
	// 还款比例，精确到小数点后四位 12.34% 表示为1234
	ReturnRate *int64 `json:"return_rate,omitempty" xml:"return_rate,omitempty"`
	// 归还日，格式为"2019-07-31 12:00:00"
	ReturnTime *string `json:"return_time,omitempty" xml:"return_time,omitempty"`
	// 归还日，格式为"2019-07-31 12:00:00"
	ReturnTimeList []*string `json:"return_time_list,omitempty" xml:"return_time_list,omitempty" require:"true" type:"Repeated"`
	// 是否启动异步订单处理
	Async *int64 `json:"async,omitempty" xml:"async,omitempty"`
}

func (s CreateLeaseCreditpromiseRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseCreditpromiseRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseCreditpromiseRequest) SetAuthToken(v string) *CreateLeaseCreditpromiseRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseCreditpromiseRequest) SetProductInstanceId(v string) *CreateLeaseCreditpromiseRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseCreditpromiseRequest) SetApplicationId(v string) *CreateLeaseCreditpromiseRequest {
	s.ApplicationId = &v
	return s
}

func (s *CreateLeaseCreditpromiseRequest) SetCreditPromiseExtraInfoList(v []*string) *CreateLeaseCreditpromiseRequest {
	s.CreditPromiseExtraInfoList = v
	return s
}

func (s *CreateLeaseCreditpromiseRequest) SetLeaseId(v string) *CreateLeaseCreditpromiseRequest {
	s.LeaseId = &v
	return s
}

func (s *CreateLeaseCreditpromiseRequest) SetOrderId(v string) *CreateLeaseCreditpromiseRequest {
	s.OrderId = &v
	return s
}

func (s *CreateLeaseCreditpromiseRequest) SetPayInAdvanceMoney(v int64) *CreateLeaseCreditpromiseRequest {
	s.PayInAdvanceMoney = &v
	return s
}

func (s *CreateLeaseCreditpromiseRequest) SetPayInAdvanceMoneyList(v []*int64) *CreateLeaseCreditpromiseRequest {
	s.PayInAdvanceMoneyList = v
	return s
}

func (s *CreateLeaseCreditpromiseRequest) SetPayInAdvanceTime(v string) *CreateLeaseCreditpromiseRequest {
	s.PayInAdvanceTime = &v
	return s
}

func (s *CreateLeaseCreditpromiseRequest) SetPayInAdvanceTimeList(v []*string) *CreateLeaseCreditpromiseRequest {
	s.PayInAdvanceTimeList = v
	return s
}

func (s *CreateLeaseCreditpromiseRequest) SetPromiseHash(v string) *CreateLeaseCreditpromiseRequest {
	s.PromiseHash = &v
	return s
}

func (s *CreateLeaseCreditpromiseRequest) SetPromiseTxHash(v string) *CreateLeaseCreditpromiseRequest {
	s.PromiseTxHash = &v
	return s
}

func (s *CreateLeaseCreditpromiseRequest) SetReturnMoney(v int64) *CreateLeaseCreditpromiseRequest {
	s.ReturnMoney = &v
	return s
}

func (s *CreateLeaseCreditpromiseRequest) SetReturnMoneyList(v []*int64) *CreateLeaseCreditpromiseRequest {
	s.ReturnMoneyList = v
	return s
}

func (s *CreateLeaseCreditpromiseRequest) SetReturnRate(v int64) *CreateLeaseCreditpromiseRequest {
	s.ReturnRate = &v
	return s
}

func (s *CreateLeaseCreditpromiseRequest) SetReturnTime(v string) *CreateLeaseCreditpromiseRequest {
	s.ReturnTime = &v
	return s
}

func (s *CreateLeaseCreditpromiseRequest) SetReturnTimeList(v []*string) *CreateLeaseCreditpromiseRequest {
	s.ReturnTimeList = v
	return s
}

func (s *CreateLeaseCreditpromiseRequest) SetAsync(v int64) *CreateLeaseCreditpromiseRequest {
	s.Async = &v
	return s
}

type CreateLeaseCreditpromiseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码
	// 0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 资方承诺信息存储到合约中对应的区块链交易哈希
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s CreateLeaseCreditpromiseResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseCreditpromiseResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseCreditpromiseResponse) SetReqMsgId(v string) *CreateLeaseCreditpromiseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseCreditpromiseResponse) SetResultCode(v string) *CreateLeaseCreditpromiseResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseCreditpromiseResponse) SetResultMsg(v string) *CreateLeaseCreditpromiseResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseCreditpromiseResponse) SetCode(v int64) *CreateLeaseCreditpromiseResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseCreditpromiseResponse) SetErrMessage(v string) *CreateLeaseCreditpromiseResponse {
	s.ErrMessage = &v
	return s
}

func (s *CreateLeaseCreditpromiseResponse) SetResponseData(v string) *CreateLeaseCreditpromiseResponse {
	s.ResponseData = &v
	return s
}

type CreateLeaseDisburseinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 共管账户，网商清分
	ActiveAccount *string `json:"active_account,omitempty" xml:"active_account,omitempty" require:"true"`
	// 对结果的简要描述信息
	ActiveResultDesc *string `json:"active_result_desc,omitempty" xml:"active_result_desc,omitempty" require:"true"`
	// 成功/失败 0表示失败，1表示成功
	ActiveResultStatus *int64 `json:"active_result_status,omitempty" xml:"active_result_status,omitempty" require:"true"`
	// 授信成功日期，格式为"2019-07-31 12:00:00"
	ActiveReturnDate *string `json:"active_return_date,omitempty" xml:"active_return_date,omitempty" require:"true"`
	// 本金+利息，精确到毫厘，即123400表示12.34元
	ActiveReturnMoney *int64 `json:"active_return_money,omitempty" xml:"active_return_money,omitempty" require:"true"`
	// 支用期限，精确到毫秒
	DisburseLimit *int64 `json:"disburse_limit,omitempty" xml:"disburse_limit,omitempty" require:"true"`
	// 支用金额，精确到毫厘，即123400表示12.34元
	DisburseMoney *int64 `json:"disburse_money,omitempty" xml:"disburse_money,omitempty" require:"true"`
	// 支用科目，服务费/租金，精确到毫厘，即123400表示12.34元
	DisburseService *int64 `json:"disburse_service,omitempty" xml:"disburse_service,omitempty" require:"true"`
	// 逾期天数，支用到期日开始计算，天数为单位
	ExceedDuration *int64 `json:"exceed_duration,omitempty" xml:"exceed_duration,omitempty" require:"true"`
	// 1未还款，2已还款
	ExceedPayBackStatus *int64 `json:"exceed_pay_back_status,omitempty" xml:"exceed_pay_back_status,omitempty" require:"true"`
	// 逾期利率，精确到小数点后四位 12.34% 表示为1234
	ExceedRate *int64 `json:"exceed_rate,omitempty" xml:"exceed_rate,omitempty" require:"true"`
	// 逾期应还款总额，本金+利息+逾期利息，精确到毫厘，即123400表示12.34元
	ExceedReturnMoney *int64 `json:"exceed_return_money,omitempty" xml:"exceed_return_money,omitempty" require:"true"`
	// 贷款利率,银行同步利率，年化8%-15%,精确到小数点后四位 12.34% 表示为1234
	LoanRate *int64 `json:"loan_rate,omitempty" xml:"loan_rate,omitempty" require:"true"`
	// 订单id 长度不可超过50
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 到期还款日，T+支用期限，节假日顺延至第一个工作日，格式为"2019-07-31 12:00:00"
	PayBackDate *string `json:"pay_back_date,omitempty" xml:"pay_back_date,omitempty" require:"true"`
	// 到期还款金额，本金+利息，精确到毫厘，即123400表示12.34元
	PayBackMoney *int64 `json:"pay_back_money,omitempty" xml:"pay_back_money,omitempty" require:"true"`
	// 应还利息，系统自动计算当日应还利息（T+1），精确到毫厘，即123400表示12.34元
	ReturnInterest *int64 `json:"return_interest,omitempty" xml:"return_interest,omitempty" require:"true"`
}

func (s CreateLeaseDisburseinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseDisburseinfoRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseDisburseinfoRequest) SetAuthToken(v string) *CreateLeaseDisburseinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseDisburseinfoRequest) SetProductInstanceId(v string) *CreateLeaseDisburseinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseDisburseinfoRequest) SetActiveAccount(v string) *CreateLeaseDisburseinfoRequest {
	s.ActiveAccount = &v
	return s
}

func (s *CreateLeaseDisburseinfoRequest) SetActiveResultDesc(v string) *CreateLeaseDisburseinfoRequest {
	s.ActiveResultDesc = &v
	return s
}

func (s *CreateLeaseDisburseinfoRequest) SetActiveResultStatus(v int64) *CreateLeaseDisburseinfoRequest {
	s.ActiveResultStatus = &v
	return s
}

func (s *CreateLeaseDisburseinfoRequest) SetActiveReturnDate(v string) *CreateLeaseDisburseinfoRequest {
	s.ActiveReturnDate = &v
	return s
}

func (s *CreateLeaseDisburseinfoRequest) SetActiveReturnMoney(v int64) *CreateLeaseDisburseinfoRequest {
	s.ActiveReturnMoney = &v
	return s
}

func (s *CreateLeaseDisburseinfoRequest) SetDisburseLimit(v int64) *CreateLeaseDisburseinfoRequest {
	s.DisburseLimit = &v
	return s
}

func (s *CreateLeaseDisburseinfoRequest) SetDisburseMoney(v int64) *CreateLeaseDisburseinfoRequest {
	s.DisburseMoney = &v
	return s
}

func (s *CreateLeaseDisburseinfoRequest) SetDisburseService(v int64) *CreateLeaseDisburseinfoRequest {
	s.DisburseService = &v
	return s
}

func (s *CreateLeaseDisburseinfoRequest) SetExceedDuration(v int64) *CreateLeaseDisburseinfoRequest {
	s.ExceedDuration = &v
	return s
}

func (s *CreateLeaseDisburseinfoRequest) SetExceedPayBackStatus(v int64) *CreateLeaseDisburseinfoRequest {
	s.ExceedPayBackStatus = &v
	return s
}

func (s *CreateLeaseDisburseinfoRequest) SetExceedRate(v int64) *CreateLeaseDisburseinfoRequest {
	s.ExceedRate = &v
	return s
}

func (s *CreateLeaseDisburseinfoRequest) SetExceedReturnMoney(v int64) *CreateLeaseDisburseinfoRequest {
	s.ExceedReturnMoney = &v
	return s
}

func (s *CreateLeaseDisburseinfoRequest) SetLoanRate(v int64) *CreateLeaseDisburseinfoRequest {
	s.LoanRate = &v
	return s
}

func (s *CreateLeaseDisburseinfoRequest) SetOrderId(v string) *CreateLeaseDisburseinfoRequest {
	s.OrderId = &v
	return s
}

func (s *CreateLeaseDisburseinfoRequest) SetPayBackDate(v string) *CreateLeaseDisburseinfoRequest {
	s.PayBackDate = &v
	return s
}

func (s *CreateLeaseDisburseinfoRequest) SetPayBackMoney(v int64) *CreateLeaseDisburseinfoRequest {
	s.PayBackMoney = &v
	return s
}

func (s *CreateLeaseDisburseinfoRequest) SetReturnInterest(v int64) *CreateLeaseDisburseinfoRequest {
	s.ReturnInterest = &v
	return s
}

type CreateLeaseDisburseinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码
	// 0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 贷后字段存储到合约中对应的区块链交易哈希
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s CreateLeaseDisburseinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseDisburseinfoResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseDisburseinfoResponse) SetReqMsgId(v string) *CreateLeaseDisburseinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseDisburseinfoResponse) SetResultCode(v string) *CreateLeaseDisburseinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseDisburseinfoResponse) SetResultMsg(v string) *CreateLeaseDisburseinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseDisburseinfoResponse) SetCode(v int64) *CreateLeaseDisburseinfoResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseDisburseinfoResponse) SetErrMessage(v string) *CreateLeaseDisburseinfoResponse {
	s.ErrMessage = &v
	return s
}

func (s *CreateLeaseDisburseinfoResponse) SetResponseData(v string) *CreateLeaseDisburseinfoResponse {
	s.ResponseData = &v
	return s
}

type QueryLeaseOrderinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 融资租赁业务id，由资方控制台生成返回
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 租赁平台金融科技租户id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
	// 订单id 长度不可超过50
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 阶段描述
	PhaseInfo *string `json:"phase_info,omitempty" xml:"phase_info,omitempty"`
}

func (s QueryLeaseOrderinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseOrderinfoRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseOrderinfoRequest) SetAuthToken(v string) *QueryLeaseOrderinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseOrderinfoRequest) SetProductInstanceId(v string) *QueryLeaseOrderinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseOrderinfoRequest) SetApplicationId(v string) *QueryLeaseOrderinfoRequest {
	s.ApplicationId = &v
	return s
}

func (s *QueryLeaseOrderinfoRequest) SetLeaseId(v string) *QueryLeaseOrderinfoRequest {
	s.LeaseId = &v
	return s
}

func (s *QueryLeaseOrderinfoRequest) SetOrderId(v string) *QueryLeaseOrderinfoRequest {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseOrderinfoRequest) SetPhaseInfo(v string) *QueryLeaseOrderinfoRequest {
	s.PhaseInfo = &v
	return s
}

type QueryLeaseOrderinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误码
	// 0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 订单详细信息
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s QueryLeaseOrderinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseOrderinfoResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseOrderinfoResponse) SetReqMsgId(v string) *QueryLeaseOrderinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseOrderinfoResponse) SetResultCode(v string) *QueryLeaseOrderinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseOrderinfoResponse) SetResultMsg(v string) *QueryLeaseOrderinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseOrderinfoResponse) SetCode(v int64) *QueryLeaseOrderinfoResponse {
	s.Code = &v
	return s
}

func (s *QueryLeaseOrderinfoResponse) SetErrMessage(v string) *QueryLeaseOrderinfoResponse {
	s.ErrMessage = &v
	return s
}

func (s *QueryLeaseOrderinfoResponse) SetResponseData(v string) *QueryLeaseOrderinfoResponse {
	s.ResponseData = &v
	return s
}

type CreateFinanceTextnotaryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 反欺诈查询对应的身份证号码
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty"`
	// 哈希算法
	HashAlgorithm *string `json:"hash_algorithm,omitempty" xml:"hash_algorithm,omitempty" require:"true"`
	// 位置描述信息
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 反欺诈查询需要的手机号码
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty"`
	// 存证阶段，用户可自行维护
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 文本哈希
	TextHash *string `json:"text_hash,omitempty" xml:"text_hash,omitempty" require:"true"`
	// 存证事务ID
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
	// 是否使用可信时间戳
	Tsr *bool `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 反欺诈查询需要的姓名
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
	// 本次请求的唯一id
	ThirdMessageId *string `json:"third_message_id,omitempty" xml:"third_message_id,omitempty"`
}

func (s CreateFinanceTextnotaryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFinanceTextnotaryRequest) GoString() string {
	return s.String()
}

func (s *CreateFinanceTextnotaryRequest) SetAuthToken(v string) *CreateFinanceTextnotaryRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateFinanceTextnotaryRequest) SetProductInstanceId(v string) *CreateFinanceTextnotaryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateFinanceTextnotaryRequest) SetCertNo(v string) *CreateFinanceTextnotaryRequest {
	s.CertNo = &v
	return s
}

func (s *CreateFinanceTextnotaryRequest) SetHashAlgorithm(v string) *CreateFinanceTextnotaryRequest {
	s.HashAlgorithm = &v
	return s
}

func (s *CreateFinanceTextnotaryRequest) SetLocation(v *Location) *CreateFinanceTextnotaryRequest {
	s.Location = v
	return s
}

func (s *CreateFinanceTextnotaryRequest) SetMobile(v string) *CreateFinanceTextnotaryRequest {
	s.Mobile = &v
	return s
}

func (s *CreateFinanceTextnotaryRequest) SetPhase(v string) *CreateFinanceTextnotaryRequest {
	s.Phase = &v
	return s
}

func (s *CreateFinanceTextnotaryRequest) SetProperties(v string) *CreateFinanceTextnotaryRequest {
	s.Properties = &v
	return s
}

func (s *CreateFinanceTextnotaryRequest) SetTextHash(v string) *CreateFinanceTextnotaryRequest {
	s.TextHash = &v
	return s
}

func (s *CreateFinanceTextnotaryRequest) SetTransactionId(v string) *CreateFinanceTextnotaryRequest {
	s.TransactionId = &v
	return s
}

func (s *CreateFinanceTextnotaryRequest) SetTsr(v bool) *CreateFinanceTextnotaryRequest {
	s.Tsr = &v
	return s
}

func (s *CreateFinanceTextnotaryRequest) SetUserName(v string) *CreateFinanceTextnotaryRequest {
	s.UserName = &v
	return s
}

func (s *CreateFinanceTextnotaryRequest) SetThirdMessageId(v string) *CreateFinanceTextnotaryRequest {
	s.ThirdMessageId = &v
	return s
}

type CreateFinanceTextnotaryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 反欺诈对应的信用值
	CreditRiskScore *string `json:"credit_risk_score,omitempty" xml:"credit_risk_score,omitempty"`
	// 可信时间戳
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 交易哈希
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateFinanceTextnotaryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFinanceTextnotaryResponse) GoString() string {
	return s.String()
}

func (s *CreateFinanceTextnotaryResponse) SetReqMsgId(v string) *CreateFinanceTextnotaryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateFinanceTextnotaryResponse) SetResultCode(v string) *CreateFinanceTextnotaryResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateFinanceTextnotaryResponse) SetResultMsg(v string) *CreateFinanceTextnotaryResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateFinanceTextnotaryResponse) SetCreditRiskScore(v string) *CreateFinanceTextnotaryResponse {
	s.CreditRiskScore = &v
	return s
}

func (s *CreateFinanceTextnotaryResponse) SetTsr(v *TsrResponse) *CreateFinanceTextnotaryResponse {
	s.Tsr = v
	return s
}

func (s *CreateFinanceTextnotaryResponse) SetTxHash(v string) *CreateFinanceTextnotaryResponse {
	s.TxHash = &v
	return s
}

type GetFinanceTextnotaryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 位置信息
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 存证阶段
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty"`
	// 扩展属性，用户可自行维护
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 存证事务ID
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty"`
	// 交易哈希
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
}

func (s GetFinanceTextnotaryRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFinanceTextnotaryRequest) GoString() string {
	return s.String()
}

func (s *GetFinanceTextnotaryRequest) SetAuthToken(v string) *GetFinanceTextnotaryRequest {
	s.AuthToken = &v
	return s
}

func (s *GetFinanceTextnotaryRequest) SetProductInstanceId(v string) *GetFinanceTextnotaryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetFinanceTextnotaryRequest) SetLocation(v *Location) *GetFinanceTextnotaryRequest {
	s.Location = v
	return s
}

func (s *GetFinanceTextnotaryRequest) SetPhase(v string) *GetFinanceTextnotaryRequest {
	s.Phase = &v
	return s
}

func (s *GetFinanceTextnotaryRequest) SetProperties(v string) *GetFinanceTextnotaryRequest {
	s.Properties = &v
	return s
}

func (s *GetFinanceTextnotaryRequest) SetTransactionId(v string) *GetFinanceTextnotaryRequest {
	s.TransactionId = &v
	return s
}

func (s *GetFinanceTextnotaryRequest) SetTxHash(v string) *GetFinanceTextnotaryRequest {
	s.TxHash = &v
	return s
}

type GetFinanceTextnotaryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 哈希算法
	HashAlgorithm *string `json:"hash_algorithm,omitempty" xml:"hash_algorithm,omitempty"`
	// 文本哈希
	TextHash *string `json:"text_hash,omitempty" xml:"text_hash,omitempty"`
	// 可信时间戳
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 存证阶段
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
}

func (s GetFinanceTextnotaryResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFinanceTextnotaryResponse) GoString() string {
	return s.String()
}

func (s *GetFinanceTextnotaryResponse) SetReqMsgId(v string) *GetFinanceTextnotaryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetFinanceTextnotaryResponse) SetResultCode(v string) *GetFinanceTextnotaryResponse {
	s.ResultCode = &v
	return s
}

func (s *GetFinanceTextnotaryResponse) SetResultMsg(v string) *GetFinanceTextnotaryResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetFinanceTextnotaryResponse) SetHashAlgorithm(v string) *GetFinanceTextnotaryResponse {
	s.HashAlgorithm = &v
	return s
}

func (s *GetFinanceTextnotaryResponse) SetTextHash(v string) *GetFinanceTextnotaryResponse {
	s.TextHash = &v
	return s
}

func (s *GetFinanceTextnotaryResponse) SetTsr(v *TsrResponse) *GetFinanceTextnotaryResponse {
	s.Tsr = v
	return s
}

func (s *GetFinanceTextnotaryResponse) SetPhase(v string) *GetFinanceTextnotaryResponse {
	s.Phase = &v
	return s
}

func (s *GetFinanceTextnotaryResponse) SetProperties(v string) *GetFinanceTextnotaryResponse {
	s.Properties = &v
	return s
}

type CreateFinanceFilenotaryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 反欺诈需要的证件号码
	CertNo *string `json:"cert_no,omitempty" xml:"cert_no,omitempty"`
	// 创建日期，时间戳类型，单位毫秒
	CreatedDate *int64 `json:"created_date,omitempty" xml:"created_date,omitempty" require:"true"`
	// 存证文件名称
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty" require:"true"`
	// 文件存证类型，支持小于 1M 源文件或者文件哈希
	FileNotaryType *string `json:"file_notary_type,omitempty" xml:"file_notary_type,omitempty" require:"true"`
	// 文件大小，单位 Bytes
	FileSize *int64 `json:"file_size,omitempty" xml:"file_size,omitempty"`
	// 文件类型
	FileType *string `json:"file_type,omitempty" xml:"file_type,omitempty" require:"true"`
	// 文件地址
	FileUrl *string `json:"file_url,omitempty" xml:"file_url,omitempty"`
	// 哈希算法
	HashAlgorithm *string `json:"hash_algorithm,omitempty" xml:"hash_algorithm,omitempty"`
	// 位置信息
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 反欺诈查询需要的手机号
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty"`
	// 文件存证内容
	NotaryContent *string `json:"notary_content,omitempty" xml:"notary_content,omitempty" require:"true"`
	// 存证阶段
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 扩展属性，用户可自行维护
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 存证事务ID
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
	// 是否使用可信时间戳
	Tsr *bool `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 反欺诈查询需要的证件上的姓名
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
	// 本次请求的唯一ID
	ThirdMessageId *string `json:"third_message_id,omitempty" xml:"third_message_id,omitempty"`
}

func (s CreateFinanceFilenotaryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFinanceFilenotaryRequest) GoString() string {
	return s.String()
}

func (s *CreateFinanceFilenotaryRequest) SetAuthToken(v string) *CreateFinanceFilenotaryRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateFinanceFilenotaryRequest) SetProductInstanceId(v string) *CreateFinanceFilenotaryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateFinanceFilenotaryRequest) SetCertNo(v string) *CreateFinanceFilenotaryRequest {
	s.CertNo = &v
	return s
}

func (s *CreateFinanceFilenotaryRequest) SetCreatedDate(v int64) *CreateFinanceFilenotaryRequest {
	s.CreatedDate = &v
	return s
}

func (s *CreateFinanceFilenotaryRequest) SetFileName(v string) *CreateFinanceFilenotaryRequest {
	s.FileName = &v
	return s
}

func (s *CreateFinanceFilenotaryRequest) SetFileNotaryType(v string) *CreateFinanceFilenotaryRequest {
	s.FileNotaryType = &v
	return s
}

func (s *CreateFinanceFilenotaryRequest) SetFileSize(v int64) *CreateFinanceFilenotaryRequest {
	s.FileSize = &v
	return s
}

func (s *CreateFinanceFilenotaryRequest) SetFileType(v string) *CreateFinanceFilenotaryRequest {
	s.FileType = &v
	return s
}

func (s *CreateFinanceFilenotaryRequest) SetFileUrl(v string) *CreateFinanceFilenotaryRequest {
	s.FileUrl = &v
	return s
}

func (s *CreateFinanceFilenotaryRequest) SetHashAlgorithm(v string) *CreateFinanceFilenotaryRequest {
	s.HashAlgorithm = &v
	return s
}

func (s *CreateFinanceFilenotaryRequest) SetLocation(v *Location) *CreateFinanceFilenotaryRequest {
	s.Location = v
	return s
}

func (s *CreateFinanceFilenotaryRequest) SetMobile(v string) *CreateFinanceFilenotaryRequest {
	s.Mobile = &v
	return s
}

func (s *CreateFinanceFilenotaryRequest) SetNotaryContent(v string) *CreateFinanceFilenotaryRequest {
	s.NotaryContent = &v
	return s
}

func (s *CreateFinanceFilenotaryRequest) SetPhase(v string) *CreateFinanceFilenotaryRequest {
	s.Phase = &v
	return s
}

func (s *CreateFinanceFilenotaryRequest) SetProperties(v string) *CreateFinanceFilenotaryRequest {
	s.Properties = &v
	return s
}

func (s *CreateFinanceFilenotaryRequest) SetTransactionId(v string) *CreateFinanceFilenotaryRequest {
	s.TransactionId = &v
	return s
}

func (s *CreateFinanceFilenotaryRequest) SetTsr(v bool) *CreateFinanceFilenotaryRequest {
	s.Tsr = &v
	return s
}

func (s *CreateFinanceFilenotaryRequest) SetUserName(v string) *CreateFinanceFilenotaryRequest {
	s.UserName = &v
	return s
}

func (s *CreateFinanceFilenotaryRequest) SetThirdMessageId(v string) *CreateFinanceFilenotaryRequest {
	s.ThirdMessageId = &v
	return s
}

type CreateFinanceFilenotaryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 反欺诈查询返回的信用值
	CreditRiskScore *string `json:"credit_risk_score,omitempty" xml:"credit_risk_score,omitempty"`
	// 可信时间戳
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 交易哈希
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateFinanceFilenotaryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFinanceFilenotaryResponse) GoString() string {
	return s.String()
}

func (s *CreateFinanceFilenotaryResponse) SetReqMsgId(v string) *CreateFinanceFilenotaryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateFinanceFilenotaryResponse) SetResultCode(v string) *CreateFinanceFilenotaryResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateFinanceFilenotaryResponse) SetResultMsg(v string) *CreateFinanceFilenotaryResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateFinanceFilenotaryResponse) SetCreditRiskScore(v string) *CreateFinanceFilenotaryResponse {
	s.CreditRiskScore = &v
	return s
}

func (s *CreateFinanceFilenotaryResponse) SetTsr(v *TsrResponse) *CreateFinanceFilenotaryResponse {
	s.Tsr = v
	return s
}

func (s *CreateFinanceFilenotaryResponse) SetTxHash(v string) *CreateFinanceFilenotaryResponse {
	s.TxHash = &v
	return s
}

type GetFinanceFilenotaryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 位置信息
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 存证状态
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty"`
	// 扩展属性，用户自行维护
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 存证事务ID
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty"`
	// 交易哈希
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
}

func (s GetFinanceFilenotaryRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFinanceFilenotaryRequest) GoString() string {
	return s.String()
}

func (s *GetFinanceFilenotaryRequest) SetAuthToken(v string) *GetFinanceFilenotaryRequest {
	s.AuthToken = &v
	return s
}

func (s *GetFinanceFilenotaryRequest) SetProductInstanceId(v string) *GetFinanceFilenotaryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetFinanceFilenotaryRequest) SetLocation(v *Location) *GetFinanceFilenotaryRequest {
	s.Location = v
	return s
}

func (s *GetFinanceFilenotaryRequest) SetPhase(v string) *GetFinanceFilenotaryRequest {
	s.Phase = &v
	return s
}

func (s *GetFinanceFilenotaryRequest) SetProperties(v string) *GetFinanceFilenotaryRequest {
	s.Properties = &v
	return s
}

func (s *GetFinanceFilenotaryRequest) SetTransactionId(v string) *GetFinanceFilenotaryRequest {
	s.TransactionId = &v
	return s
}

func (s *GetFinanceFilenotaryRequest) SetTxHash(v string) *GetFinanceFilenotaryRequest {
	s.TxHash = &v
	return s
}

type GetFinanceFilenotaryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证文件名称
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty"`
	// 文件存证类型
	FileNotaryType *string `json:"file_notary_type,omitempty" xml:"file_notary_type,omitempty"`
	// 哈希算法
	HashAlgorithm *string `json:"hash_algorithm,omitempty" xml:"hash_algorithm,omitempty"`
	// FILE_HASH 模式时该值为文件哈希；FILE_RAW 模式时该值为临时 oss 下载地址
	NotaryContent *string `json:"notary_content,omitempty" xml:"notary_content,omitempty"`
	// 存证阶段
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 可信时间戳
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
}

func (s GetFinanceFilenotaryResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFinanceFilenotaryResponse) GoString() string {
	return s.String()
}

func (s *GetFinanceFilenotaryResponse) SetReqMsgId(v string) *GetFinanceFilenotaryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetFinanceFilenotaryResponse) SetResultCode(v string) *GetFinanceFilenotaryResponse {
	s.ResultCode = &v
	return s
}

func (s *GetFinanceFilenotaryResponse) SetResultMsg(v string) *GetFinanceFilenotaryResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetFinanceFilenotaryResponse) SetFileName(v string) *GetFinanceFilenotaryResponse {
	s.FileName = &v
	return s
}

func (s *GetFinanceFilenotaryResponse) SetFileNotaryType(v string) *GetFinanceFilenotaryResponse {
	s.FileNotaryType = &v
	return s
}

func (s *GetFinanceFilenotaryResponse) SetHashAlgorithm(v string) *GetFinanceFilenotaryResponse {
	s.HashAlgorithm = &v
	return s
}

func (s *GetFinanceFilenotaryResponse) SetNotaryContent(v string) *GetFinanceFilenotaryResponse {
	s.NotaryContent = &v
	return s
}

func (s *GetFinanceFilenotaryResponse) SetPhase(v string) *GetFinanceFilenotaryResponse {
	s.Phase = &v
	return s
}

func (s *GetFinanceFilenotaryResponse) SetProperties(v string) *GetFinanceFilenotaryResponse {
	s.Properties = &v
	return s
}

func (s *GetFinanceFilenotaryResponse) SetTsr(v *TsrResponse) *GetFinanceFilenotaryResponse {
	s.Tsr = v
	return s
}

type CheckIndustryNotaryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 行业类型
	IndustryType *string `json:"industry_type,omitempty" xml:"industry_type,omitempty" require:"true"`
	// 核验数据列表
	NotaryCheckMetaList []*NotaryCheckMeta `json:"notary_check_meta_list,omitempty" xml:"notary_check_meta_list,omitempty" require:"true" type:"Repeated"`
}

func (s CheckIndustryNotaryRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckIndustryNotaryRequest) GoString() string {
	return s.String()
}

func (s *CheckIndustryNotaryRequest) SetAuthToken(v string) *CheckIndustryNotaryRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckIndustryNotaryRequest) SetProductInstanceId(v string) *CheckIndustryNotaryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CheckIndustryNotaryRequest) SetIndustryType(v string) *CheckIndustryNotaryRequest {
	s.IndustryType = &v
	return s
}

func (s *CheckIndustryNotaryRequest) SetNotaryCheckMetaList(v []*NotaryCheckMeta) *CheckIndustryNotaryRequest {
	s.NotaryCheckMetaList = v
	return s
}

type CheckIndustryNotaryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 核验结果数组
	NotaryCheckResults []*NotaryCheckResult `json:"notary_check_results,omitempty" xml:"notary_check_results,omitempty" type:"Repeated"`
}

func (s CheckIndustryNotaryResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckIndustryNotaryResponse) GoString() string {
	return s.String()
}

func (s *CheckIndustryNotaryResponse) SetReqMsgId(v string) *CheckIndustryNotaryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckIndustryNotaryResponse) SetResultCode(v string) *CheckIndustryNotaryResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckIndustryNotaryResponse) SetResultMsg(v string) *CheckIndustryNotaryResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckIndustryNotaryResponse) SetNotaryCheckResults(v []*NotaryCheckResult) *CheckIndustryNotaryResponse {
	s.NotaryCheckResults = v
	return s
}

type CreateSueBreakpromiseinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 合同唯一标识
	//
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 当事人身份证号
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
	// 当事人姓名
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty" require:"true"`
	// 当事人手机号
	PhoneNumber *string `json:"phone_number,omitempty" xml:"phone_number,omitempty" require:"true"`
	// 当事人邮箱地址
	Email *string `json:"email,omitempty" xml:"email,omitempty" require:"true"`
	// 诉前Id
	PreSueId *string `json:"pre_sue_id,omitempty" xml:"pre_sue_id,omitempty" require:"true"`
	// 应履约日期，格式为"2019-07-31 12:00:00"
	PromiseDate *string `json:"promise_date,omitempty" xml:"promise_date,omitempty" require:"true"`
	// 宽限期(天数，从应履约日期到进行诉前违约惩戒的自然日数）
	PromiseLimit *int64 `json:"promise_limit,omitempty" xml:"promise_limit,omitempty" require:"true"`
	// 起诉期，格式为"2019-07-31 12:00:00"
	//
	SueDate *string `json:"sue_date,omitempty" xml:"sue_date,omitempty" require:"true"`
	// 商户统一社会信用代码或个人身份证
	InitiatorId *string `json:"initiator_id,omitempty" xml:"initiator_id,omitempty" require:"true"`
	// 商户或个人名称
	//
	InitiatorName *string `json:"initiator_name,omitempty" xml:"initiator_name,omitempty" require:"true"`
	// 管辖法院名称
	CourtName *string `json:"court_name,omitempty" xml:"court_name,omitempty" require:"true"`
	// 法院唯一标识
	CourtId *string `json:"court_id,omitempty" xml:"court_id,omitempty" require:"true"`
	// 违约金额，精确到毫厘，即123400表示12.34元
	BreakPromiseMoney *int64 `json:"break_promise_money,omitempty" xml:"break_promise_money,omitempty" require:"true"`
	// 所属行业
	BusinessClass *string `json:"business_class,omitempty" xml:"business_class,omitempty" require:"true"`
}

func (s CreateSueBreakpromiseinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSueBreakpromiseinfoRequest) GoString() string {
	return s.String()
}

func (s *CreateSueBreakpromiseinfoRequest) SetAuthToken(v string) *CreateSueBreakpromiseinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSueBreakpromiseinfoRequest) SetProductInstanceId(v string) *CreateSueBreakpromiseinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSueBreakpromiseinfoRequest) SetOrderId(v string) *CreateSueBreakpromiseinfoRequest {
	s.OrderId = &v
	return s
}

func (s *CreateSueBreakpromiseinfoRequest) SetUserId(v string) *CreateSueBreakpromiseinfoRequest {
	s.UserId = &v
	return s
}

func (s *CreateSueBreakpromiseinfoRequest) SetUserName(v string) *CreateSueBreakpromiseinfoRequest {
	s.UserName = &v
	return s
}

func (s *CreateSueBreakpromiseinfoRequest) SetPhoneNumber(v string) *CreateSueBreakpromiseinfoRequest {
	s.PhoneNumber = &v
	return s
}

func (s *CreateSueBreakpromiseinfoRequest) SetEmail(v string) *CreateSueBreakpromiseinfoRequest {
	s.Email = &v
	return s
}

func (s *CreateSueBreakpromiseinfoRequest) SetPreSueId(v string) *CreateSueBreakpromiseinfoRequest {
	s.PreSueId = &v
	return s
}

func (s *CreateSueBreakpromiseinfoRequest) SetPromiseDate(v string) *CreateSueBreakpromiseinfoRequest {
	s.PromiseDate = &v
	return s
}

func (s *CreateSueBreakpromiseinfoRequest) SetPromiseLimit(v int64) *CreateSueBreakpromiseinfoRequest {
	s.PromiseLimit = &v
	return s
}

func (s *CreateSueBreakpromiseinfoRequest) SetSueDate(v string) *CreateSueBreakpromiseinfoRequest {
	s.SueDate = &v
	return s
}

func (s *CreateSueBreakpromiseinfoRequest) SetInitiatorId(v string) *CreateSueBreakpromiseinfoRequest {
	s.InitiatorId = &v
	return s
}

func (s *CreateSueBreakpromiseinfoRequest) SetInitiatorName(v string) *CreateSueBreakpromiseinfoRequest {
	s.InitiatorName = &v
	return s
}

func (s *CreateSueBreakpromiseinfoRequest) SetCourtName(v string) *CreateSueBreakpromiseinfoRequest {
	s.CourtName = &v
	return s
}

func (s *CreateSueBreakpromiseinfoRequest) SetCourtId(v string) *CreateSueBreakpromiseinfoRequest {
	s.CourtId = &v
	return s
}

func (s *CreateSueBreakpromiseinfoRequest) SetBreakPromiseMoney(v int64) *CreateSueBreakpromiseinfoRequest {
	s.BreakPromiseMoney = &v
	return s
}

func (s *CreateSueBreakpromiseinfoRequest) SetBusinessClass(v string) *CreateSueBreakpromiseinfoRequest {
	s.BusinessClass = &v
	return s
}

type CreateSueBreakpromiseinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 成功插入违约数据到区块链的交易哈希
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
	// 状态码,0表示成功
	//
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
}

func (s CreateSueBreakpromiseinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSueBreakpromiseinfoResponse) GoString() string {
	return s.String()
}

func (s *CreateSueBreakpromiseinfoResponse) SetReqMsgId(v string) *CreateSueBreakpromiseinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSueBreakpromiseinfoResponse) SetResultCode(v string) *CreateSueBreakpromiseinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSueBreakpromiseinfoResponse) SetResultMsg(v string) *CreateSueBreakpromiseinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateSueBreakpromiseinfoResponse) SetResponseData(v string) *CreateSueBreakpromiseinfoResponse {
	s.ResponseData = &v
	return s
}

func (s *CreateSueBreakpromiseinfoResponse) SetCode(v string) *CreateSueBreakpromiseinfoResponse {
	s.Code = &v
	return s
}

func (s *CreateSueBreakpromiseinfoResponse) SetErrMessage(v string) *CreateSueBreakpromiseinfoResponse {
	s.ErrMessage = &v
	return s
}

type UpdateSueBreakpromiseinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 合同唯一标识，不可更新
	//
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 当事人手机号
	PhoneNumber *string `json:"phone_number,omitempty" xml:"phone_number,omitempty" require:"true"`
	// 当事人电子邮箱地址
	Email *string `json:"email,omitempty" xml:"email,omitempty" require:"true"`
	// 诉前Id，不可更新
	//
	PreSueId *string `json:"pre_sue_id,omitempty" xml:"pre_sue_id,omitempty" require:"true"`
	// 应履约日期，格式为"2019-07-31 12:00:00"
	PromiseDate *string `json:"promise_date,omitempty" xml:"promise_date,omitempty" require:"true"`
	// 宽限期(天数，从应履约日期到进行诉前违约惩戒的自然日数）
	PromiseLimit *int64 `json:"promise_limit,omitempty" xml:"promise_limit,omitempty" require:"true"`
	// 起诉期，格式为"2019-07-31 12:00:00"
	SueDate *string `json:"sue_date,omitempty" xml:"sue_date,omitempty" require:"true"`
	// 违约金额，精确到毫厘，即123400表示12.34元
	BreakPromiseMoney *int64 `json:"break_promise_money,omitempty" xml:"break_promise_money,omitempty" require:"true"`
	// 所属行业
	//
	BusinessClass *string `json:"business_class,omitempty" xml:"business_class,omitempty" require:"true"`
}

func (s UpdateSueBreakpromiseinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSueBreakpromiseinfoRequest) GoString() string {
	return s.String()
}

func (s *UpdateSueBreakpromiseinfoRequest) SetAuthToken(v string) *UpdateSueBreakpromiseinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSueBreakpromiseinfoRequest) SetProductInstanceId(v string) *UpdateSueBreakpromiseinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateSueBreakpromiseinfoRequest) SetOrderId(v string) *UpdateSueBreakpromiseinfoRequest {
	s.OrderId = &v
	return s
}

func (s *UpdateSueBreakpromiseinfoRequest) SetPhoneNumber(v string) *UpdateSueBreakpromiseinfoRequest {
	s.PhoneNumber = &v
	return s
}

func (s *UpdateSueBreakpromiseinfoRequest) SetEmail(v string) *UpdateSueBreakpromiseinfoRequest {
	s.Email = &v
	return s
}

func (s *UpdateSueBreakpromiseinfoRequest) SetPreSueId(v string) *UpdateSueBreakpromiseinfoRequest {
	s.PreSueId = &v
	return s
}

func (s *UpdateSueBreakpromiseinfoRequest) SetPromiseDate(v string) *UpdateSueBreakpromiseinfoRequest {
	s.PromiseDate = &v
	return s
}

func (s *UpdateSueBreakpromiseinfoRequest) SetPromiseLimit(v int64) *UpdateSueBreakpromiseinfoRequest {
	s.PromiseLimit = &v
	return s
}

func (s *UpdateSueBreakpromiseinfoRequest) SetSueDate(v string) *UpdateSueBreakpromiseinfoRequest {
	s.SueDate = &v
	return s
}

func (s *UpdateSueBreakpromiseinfoRequest) SetBreakPromiseMoney(v int64) *UpdateSueBreakpromiseinfoRequest {
	s.BreakPromiseMoney = &v
	return s
}

func (s *UpdateSueBreakpromiseinfoRequest) SetBusinessClass(v string) *UpdateSueBreakpromiseinfoRequest {
	s.BusinessClass = &v
	return s
}

type UpdateSueBreakpromiseinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 违约案件信息提交对应的区块链交易哈希
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
	// 状态码,0表示成功
	//
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
}

func (s UpdateSueBreakpromiseinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSueBreakpromiseinfoResponse) GoString() string {
	return s.String()
}

func (s *UpdateSueBreakpromiseinfoResponse) SetReqMsgId(v string) *UpdateSueBreakpromiseinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSueBreakpromiseinfoResponse) SetResultCode(v string) *UpdateSueBreakpromiseinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSueBreakpromiseinfoResponse) SetResultMsg(v string) *UpdateSueBreakpromiseinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateSueBreakpromiseinfoResponse) SetResponseData(v string) *UpdateSueBreakpromiseinfoResponse {
	s.ResponseData = &v
	return s
}

func (s *UpdateSueBreakpromiseinfoResponse) SetCode(v int64) *UpdateSueBreakpromiseinfoResponse {
	s.Code = &v
	return s
}

func (s *UpdateSueBreakpromiseinfoResponse) SetErrMessage(v string) *UpdateSueBreakpromiseinfoResponse {
	s.ErrMessage = &v
	return s
}

type DeleteSueBreakpromiseinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 合同唯一标识，不可更新
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 诉前id，不可更新
	PreSueId *string `json:"pre_sue_id,omitempty" xml:"pre_sue_id,omitempty" require:"true"`
}

func (s DeleteSueBreakpromiseinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSueBreakpromiseinfoRequest) GoString() string {
	return s.String()
}

func (s *DeleteSueBreakpromiseinfoRequest) SetAuthToken(v string) *DeleteSueBreakpromiseinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *DeleteSueBreakpromiseinfoRequest) SetProductInstanceId(v string) *DeleteSueBreakpromiseinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeleteSueBreakpromiseinfoRequest) SetOrderId(v string) *DeleteSueBreakpromiseinfoRequest {
	s.OrderId = &v
	return s
}

func (s *DeleteSueBreakpromiseinfoRequest) SetPreSueId(v string) *DeleteSueBreakpromiseinfoRequest {
	s.PreSueId = &v
	return s
}

type DeleteSueBreakpromiseinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 违约案件信息提交对应的区块链交易哈希
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
	// 状态码 0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
}

func (s DeleteSueBreakpromiseinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSueBreakpromiseinfoResponse) GoString() string {
	return s.String()
}

func (s *DeleteSueBreakpromiseinfoResponse) SetReqMsgId(v string) *DeleteSueBreakpromiseinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeleteSueBreakpromiseinfoResponse) SetResultCode(v string) *DeleteSueBreakpromiseinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *DeleteSueBreakpromiseinfoResponse) SetResultMsg(v string) *DeleteSueBreakpromiseinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeleteSueBreakpromiseinfoResponse) SetResponseData(v string) *DeleteSueBreakpromiseinfoResponse {
	s.ResponseData = &v
	return s
}

func (s *DeleteSueBreakpromiseinfoResponse) SetCode(v int64) *DeleteSueBreakpromiseinfoResponse {
	s.Code = &v
	return s
}

func (s *DeleteSueBreakpromiseinfoResponse) SetErrMessage(v string) *DeleteSueBreakpromiseinfoResponse {
	s.ErrMessage = &v
	return s
}

type QuerySueUserinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 被查者身份证号
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty" require:"true"`
}

func (s QuerySueUserinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySueUserinfoRequest) GoString() string {
	return s.String()
}

func (s *QuerySueUserinfoRequest) SetAuthToken(v string) *QuerySueUserinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *QuerySueUserinfoRequest) SetProductInstanceId(v string) *QuerySueUserinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QuerySueUserinfoRequest) SetUserId(v string) *QuerySueUserinfoRequest {
	s.UserId = &v
	return s
}

type QuerySueUserinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码 0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 用户违约个数
	ResponseData *int64 `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s QuerySueUserinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySueUserinfoResponse) GoString() string {
	return s.String()
}

func (s *QuerySueUserinfoResponse) SetReqMsgId(v string) *QuerySueUserinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QuerySueUserinfoResponse) SetResultCode(v string) *QuerySueUserinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *QuerySueUserinfoResponse) SetResultMsg(v string) *QuerySueUserinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *QuerySueUserinfoResponse) SetCode(v int64) *QuerySueUserinfoResponse {
	s.Code = &v
	return s
}

func (s *QuerySueUserinfoResponse) SetErrMessage(v string) *QuerySueUserinfoResponse {
	s.ErrMessage = &v
	return s
}

func (s *QuerySueUserinfoResponse) SetResponseData(v int64) *QuerySueUserinfoResponse {
	s.ResponseData = &v
	return s
}

type UpdateSueExeplarycontractRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 合约名称
	ContractId *string `json:"contract_id,omitempty" xml:"contract_id,omitempty" require:"true"`
}

func (s UpdateSueExeplarycontractRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSueExeplarycontractRequest) GoString() string {
	return s.String()
}

func (s *UpdateSueExeplarycontractRequest) SetAuthToken(v string) *UpdateSueExeplarycontractRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSueExeplarycontractRequest) SetProductInstanceId(v string) *UpdateSueExeplarycontractRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateSueExeplarycontractRequest) SetContractId(v string) *UpdateSueExeplarycontractRequest {
	s.ContractId = &v
	return s
}

type UpdateSueExeplarycontractResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 0xabcdef123324234
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
	// 状态码 0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
}

func (s UpdateSueExeplarycontractResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSueExeplarycontractResponse) GoString() string {
	return s.String()
}

func (s *UpdateSueExeplarycontractResponse) SetReqMsgId(v string) *UpdateSueExeplarycontractResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSueExeplarycontractResponse) SetResultCode(v string) *UpdateSueExeplarycontractResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSueExeplarycontractResponse) SetResultMsg(v string) *UpdateSueExeplarycontractResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateSueExeplarycontractResponse) SetResponseData(v string) *UpdateSueExeplarycontractResponse {
	s.ResponseData = &v
	return s
}

func (s *UpdateSueExeplarycontractResponse) SetCode(v int64) *UpdateSueExeplarycontractResponse {
	s.Code = &v
	return s
}

func (s *UpdateSueExeplarycontractResponse) SetErrMessage(v string) *UpdateSueExeplarycontractResponse {
	s.ErrMessage = &v
	return s
}

type UpdateSueExemplaryrevertRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户管理合约id
	ContractId *string `json:"contract_id,omitempty" xml:"contract_id,omitempty" require:"true"`
}

func (s UpdateSueExemplaryrevertRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSueExemplaryrevertRequest) GoString() string {
	return s.String()
}

func (s *UpdateSueExemplaryrevertRequest) SetAuthToken(v string) *UpdateSueExemplaryrevertRequest {
	s.AuthToken = &v
	return s
}

func (s *UpdateSueExemplaryrevertRequest) SetProductInstanceId(v string) *UpdateSueExemplaryrevertRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UpdateSueExemplaryrevertRequest) SetContractId(v string) *UpdateSueExemplaryrevertRequest {
	s.ContractId = &v
	return s
}

type UpdateSueExemplaryrevertResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 回退合约所对应的区块链交易哈希
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
	// 错误码 0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
}

func (s UpdateSueExemplaryrevertResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSueExemplaryrevertResponse) GoString() string {
	return s.String()
}

func (s *UpdateSueExemplaryrevertResponse) SetReqMsgId(v string) *UpdateSueExemplaryrevertResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UpdateSueExemplaryrevertResponse) SetResultCode(v string) *UpdateSueExemplaryrevertResponse {
	s.ResultCode = &v
	return s
}

func (s *UpdateSueExemplaryrevertResponse) SetResultMsg(v string) *UpdateSueExemplaryrevertResponse {
	s.ResultMsg = &v
	return s
}

func (s *UpdateSueExemplaryrevertResponse) SetResponseData(v string) *UpdateSueExemplaryrevertResponse {
	s.ResponseData = &v
	return s
}

func (s *UpdateSueExemplaryrevertResponse) SetCode(v int64) *UpdateSueExemplaryrevertResponse {
	s.Code = &v
	return s
}

func (s *UpdateSueExemplaryrevertResponse) SetErrMessage(v string) *UpdateSueExemplaryrevertResponse {
	s.ErrMessage = &v
	return s
}

type CreateLeaseAuditRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 融资租赁业务id，由资方控制台创建返回
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 是否启动订单的异步处理
	Async *int64 `json:"async,omitempty" xml:"async,omitempty"`
	// 融资机构审核批次
	//
	BatchIndex *string `json:"batch_index,omitempty" xml:"batch_index,omitempty"`
	// 当前订单处于本批次中的index
	CurrentAuditIndex *int64 `json:"current_audit_index,omitempty" xml:"current_audit_index,omitempty"`
	// 融资租赁额外字段
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// 租赁服务平台ID 长度不可超过50
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
	// 融资机构审核状态，0.审核中1.审核失败2.审核成功
	ManualAudit *int64 `json:"manual_audit,omitempty" xml:"manual_audit,omitempty" require:"true"`
	// 融资结构审核说明，非必填，审核失败必填失败原因
	ManualAuditComments *string `json:"manual_audit_comments,omitempty" xml:"manual_audit_comments,omitempty"`
	// 订单id 长度不可超过50
	//
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 总审核的个数
	TotalAuditNumber *int64 `json:"total_audit_number,omitempty" xml:"total_audit_number,omitempty"`
	// 额外通知第三方，如果需要通知相关方外的第三方，需要在此设置关联方的租户id，若不设置则只通知资方
	//
	RelatedNotify []*string `json:"related_notify,omitempty" xml:"related_notify,omitempty" type:"Repeated"`
}

func (s CreateLeaseAuditRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseAuditRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseAuditRequest) SetAuthToken(v string) *CreateLeaseAuditRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseAuditRequest) SetProductInstanceId(v string) *CreateLeaseAuditRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseAuditRequest) SetApplicationId(v string) *CreateLeaseAuditRequest {
	s.ApplicationId = &v
	return s
}

func (s *CreateLeaseAuditRequest) SetAsync(v int64) *CreateLeaseAuditRequest {
	s.Async = &v
	return s
}

func (s *CreateLeaseAuditRequest) SetBatchIndex(v string) *CreateLeaseAuditRequest {
	s.BatchIndex = &v
	return s
}

func (s *CreateLeaseAuditRequest) SetCurrentAuditIndex(v int64) *CreateLeaseAuditRequest {
	s.CurrentAuditIndex = &v
	return s
}

func (s *CreateLeaseAuditRequest) SetExtraInfo(v string) *CreateLeaseAuditRequest {
	s.ExtraInfo = &v
	return s
}

func (s *CreateLeaseAuditRequest) SetLeaseId(v string) *CreateLeaseAuditRequest {
	s.LeaseId = &v
	return s
}

func (s *CreateLeaseAuditRequest) SetManualAudit(v int64) *CreateLeaseAuditRequest {
	s.ManualAudit = &v
	return s
}

func (s *CreateLeaseAuditRequest) SetManualAuditComments(v string) *CreateLeaseAuditRequest {
	s.ManualAuditComments = &v
	return s
}

func (s *CreateLeaseAuditRequest) SetOrderId(v string) *CreateLeaseAuditRequest {
	s.OrderId = &v
	return s
}

func (s *CreateLeaseAuditRequest) SetTotalAuditNumber(v int64) *CreateLeaseAuditRequest {
	s.TotalAuditNumber = &v
	return s
}

func (s *CreateLeaseAuditRequest) SetRelatedNotify(v []*string) *CreateLeaseAuditRequest {
	s.RelatedNotify = v
	return s
}

type CreateLeaseAuditResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	//
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 融资平台审核订单信息存储到合约中对应的区块链交易哈希
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s CreateLeaseAuditResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseAuditResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseAuditResponse) SetReqMsgId(v string) *CreateLeaseAuditResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseAuditResponse) SetResultCode(v string) *CreateLeaseAuditResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseAuditResponse) SetResultMsg(v string) *CreateLeaseAuditResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseAuditResponse) SetCode(v int64) *CreateLeaseAuditResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseAuditResponse) SetErrMessage(v string) *CreateLeaseAuditResponse {
	s.ErrMessage = &v
	return s
}

func (s *CreateLeaseAuditResponse) SetResponseData(v string) *CreateLeaseAuditResponse {
	s.ResponseData = &v
	return s
}

type CreateLeasePaymentfileRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 融资租赁业务id，由资方控制台生成
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 是否启动订单的异步处理
	Async *int64 `json:"async,omitempty" xml:"async,omitempty"`
	// 融资租赁额外字段
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// 租赁服务平台ID 长度不可超过50
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
	// 订单id 长度不可超过50
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 付款通知书加签完电子签名后，PDF文件hash
	PaymentFileHash *string `json:"payment_file_hash,omitempty" xml:"payment_file_hash,omitempty"`
	// 付款通知书存证交易哈希
	PaymentFileTxHash *string `json:"payment_file_tx_hash,omitempty" xml:"payment_file_tx_hash,omitempty"`
	// 付款通知所在路径
	PaymentUrl *string `json:"payment_url,omitempty" xml:"payment_url,omitempty"`
	// 额外通知第三方，如果需要通知相关方外的第三方，需要在此设置关联方的租户id，若不设置则只通知资方
	//
	RelatedNotify []*string `json:"related_notify,omitempty" xml:"related_notify,omitempty" type:"Repeated"`
}

func (s CreateLeasePaymentfileRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeasePaymentfileRequest) GoString() string {
	return s.String()
}

func (s *CreateLeasePaymentfileRequest) SetAuthToken(v string) *CreateLeasePaymentfileRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeasePaymentfileRequest) SetProductInstanceId(v string) *CreateLeasePaymentfileRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeasePaymentfileRequest) SetApplicationId(v string) *CreateLeasePaymentfileRequest {
	s.ApplicationId = &v
	return s
}

func (s *CreateLeasePaymentfileRequest) SetAsync(v int64) *CreateLeasePaymentfileRequest {
	s.Async = &v
	return s
}

func (s *CreateLeasePaymentfileRequest) SetExtraInfo(v string) *CreateLeasePaymentfileRequest {
	s.ExtraInfo = &v
	return s
}

func (s *CreateLeasePaymentfileRequest) SetLeaseId(v string) *CreateLeasePaymentfileRequest {
	s.LeaseId = &v
	return s
}

func (s *CreateLeasePaymentfileRequest) SetOrderId(v string) *CreateLeasePaymentfileRequest {
	s.OrderId = &v
	return s
}

func (s *CreateLeasePaymentfileRequest) SetPaymentFileHash(v string) *CreateLeasePaymentfileRequest {
	s.PaymentFileHash = &v
	return s
}

func (s *CreateLeasePaymentfileRequest) SetPaymentFileTxHash(v string) *CreateLeasePaymentfileRequest {
	s.PaymentFileTxHash = &v
	return s
}

func (s *CreateLeasePaymentfileRequest) SetPaymentUrl(v string) *CreateLeasePaymentfileRequest {
	s.PaymentUrl = &v
	return s
}

func (s *CreateLeasePaymentfileRequest) SetRelatedNotify(v []*string) *CreateLeasePaymentfileRequest {
	s.RelatedNotify = v
	return s
}

type CreateLeasePaymentfileResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码 0表示成功
	//
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	//
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 租赁平台上传付款通知到合约中对应
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s CreateLeasePaymentfileResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeasePaymentfileResponse) GoString() string {
	return s.String()
}

func (s *CreateLeasePaymentfileResponse) SetReqMsgId(v string) *CreateLeasePaymentfileResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeasePaymentfileResponse) SetResultCode(v string) *CreateLeasePaymentfileResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeasePaymentfileResponse) SetResultMsg(v string) *CreateLeasePaymentfileResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeasePaymentfileResponse) SetCode(v int64) *CreateLeasePaymentfileResponse {
	s.Code = &v
	return s
}

func (s *CreateLeasePaymentfileResponse) SetErrMessage(v string) *CreateLeasePaymentfileResponse {
	s.ErrMessage = &v
	return s
}

func (s *CreateLeasePaymentfileResponse) SetResponseData(v string) *CreateLeasePaymentfileResponse {
	s.ResponseData = &v
	return s
}

type CreateLeaseRentalRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 融资租赁业务id，由资方控制台生成返回
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 手续费，如通过预授权、代扣的方式规划，必填
	Charge *int64 `json:"charge,omitempty" xml:"charge,omitempty" require:"true"`
	// 融资租赁用户还款额外字段
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// 是否本订单所有租金还款状态结束
	IsFinish *bool `json:"is_finish,omitempty" xml:"is_finish,omitempty" require:"true"`
	// 租期编号，从1开始
	LeaseTermIndex *int64 `json:"lease_term_index,omitempty" xml:"lease_term_index,omitempty" require:"true"`
	// 订单id 长度不可超过50
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 剩余租金总数,会核验剩余租金与承诺等额
	RemainRental *int64 `json:"remain_rental,omitempty" xml:"remain_rental,omitempty" require:"true"`
	// 剩余归还期数
	RemainTerm *int64 `json:"remain_term,omitempty" xml:"remain_term,omitempty" require:"true"`
	// 租金归还金额,精确到毫厘，即123400表示12.34元
	RentalMoney *int64 `json:"rental_money,omitempty" xml:"rental_money,omitempty" require:"true"`
	// 租金归还状态，1.足额归还2.部分归还3.未归还
	RentalReturnState *int64 `json:"rental_return_state,omitempty" xml:"rental_return_state,omitempty" require:"true"`
	// 归还时间，格式为"2019-07-31 12:00:00"
	ReturnTime *string `json:"return_time,omitempty" xml:"return_time,omitempty" require:"true"`
	// 还款凭证编号，不超过128字符，1.支付宝流水号
	ReturnVoucherSerial *string `json:"return_voucher_serial,omitempty" xml:"return_voucher_serial,omitempty" require:"true"`
	// 还款凭证类型，1.支付宝2.平台代收（客户主动还款）3.其他
	ReturnVoucherType *int64 `json:"return_voucher_type,omitempty" xml:"return_voucher_type,omitempty" require:"true"`
	// 归还方式，1.预授权代扣2.支付宝代扣3.主动还款4.其他
	ReturnWay *int64 `json:"return_way,omitempty" xml:"return_way,omitempty" require:"true"`
	// 是否启动订单的异步处理
	Async *int64 `json:"async,omitempty" xml:"async,omitempty"`
}

func (s CreateLeaseRentalRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseRentalRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseRentalRequest) SetAuthToken(v string) *CreateLeaseRentalRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseRentalRequest) SetProductInstanceId(v string) *CreateLeaseRentalRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseRentalRequest) SetApplicationId(v string) *CreateLeaseRentalRequest {
	s.ApplicationId = &v
	return s
}

func (s *CreateLeaseRentalRequest) SetCharge(v int64) *CreateLeaseRentalRequest {
	s.Charge = &v
	return s
}

func (s *CreateLeaseRentalRequest) SetExtraInfo(v string) *CreateLeaseRentalRequest {
	s.ExtraInfo = &v
	return s
}

func (s *CreateLeaseRentalRequest) SetIsFinish(v bool) *CreateLeaseRentalRequest {
	s.IsFinish = &v
	return s
}

func (s *CreateLeaseRentalRequest) SetLeaseTermIndex(v int64) *CreateLeaseRentalRequest {
	s.LeaseTermIndex = &v
	return s
}

func (s *CreateLeaseRentalRequest) SetOrderId(v string) *CreateLeaseRentalRequest {
	s.OrderId = &v
	return s
}

func (s *CreateLeaseRentalRequest) SetRemainRental(v int64) *CreateLeaseRentalRequest {
	s.RemainRental = &v
	return s
}

func (s *CreateLeaseRentalRequest) SetRemainTerm(v int64) *CreateLeaseRentalRequest {
	s.RemainTerm = &v
	return s
}

func (s *CreateLeaseRentalRequest) SetRentalMoney(v int64) *CreateLeaseRentalRequest {
	s.RentalMoney = &v
	return s
}

func (s *CreateLeaseRentalRequest) SetRentalReturnState(v int64) *CreateLeaseRentalRequest {
	s.RentalReturnState = &v
	return s
}

func (s *CreateLeaseRentalRequest) SetReturnTime(v string) *CreateLeaseRentalRequest {
	s.ReturnTime = &v
	return s
}

func (s *CreateLeaseRentalRequest) SetReturnVoucherSerial(v string) *CreateLeaseRentalRequest {
	s.ReturnVoucherSerial = &v
	return s
}

func (s *CreateLeaseRentalRequest) SetReturnVoucherType(v int64) *CreateLeaseRentalRequest {
	s.ReturnVoucherType = &v
	return s
}

func (s *CreateLeaseRentalRequest) SetReturnWay(v int64) *CreateLeaseRentalRequest {
	s.ReturnWay = &v
	return s
}

func (s *CreateLeaseRentalRequest) SetAsync(v int64) *CreateLeaseRentalRequest {
	s.Async = &v
	return s
}

type CreateLeaseRentalResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码 0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	//
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 租金归还记录上传到链上的哈希
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s CreateLeaseRentalResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseRentalResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseRentalResponse) SetReqMsgId(v string) *CreateLeaseRentalResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseRentalResponse) SetResultCode(v string) *CreateLeaseRentalResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseRentalResponse) SetResultMsg(v string) *CreateLeaseRentalResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseRentalResponse) SetCode(v int64) *CreateLeaseRentalResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseRentalResponse) SetErrMessage(v string) *CreateLeaseRentalResponse {
	s.ErrMessage = &v
	return s
}

func (s *CreateLeaseRentalResponse) SetResponseData(v string) *CreateLeaseRentalResponse {
	s.ResponseData = &v
	return s
}

type CreateLeaseClearingRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 融资租赁业务id，由资方控制台创建返回
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 清分收款账号 长度不超过64
	ClearingAccount *string `json:"clearing_account,omitempty" xml:"clearing_account,omitempty" require:"true"`
	// 清分金额,精确到毫厘，即123400表示12.34元
	ClearingMoney *int64 `json:"clearing_money,omitempty" xml:"clearing_money,omitempty" require:"true"`
	// 清分订单号 长度不超过128
	ClearingOrderIds []*string `json:"clearing_order_ids,omitempty" xml:"clearing_order_ids,omitempty" require:"true" type:"Repeated"`
	// 清分状态,1.足额2.部分3.零
	ClearingState *int64 `json:"clearing_state,omitempty" xml:"clearing_state,omitempty"`
	// 结束时间，格式为"2019-07-31 12:00:00"
	EndTime *string `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 融资租赁额外字段
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// 租赁平台商户Id 长度不可超过50
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
	// 订单id 长度不可超过50
	//
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 还款批次
	ReturnIndex *int64 `json:"return_index,omitempty" xml:"return_index,omitempty" require:"true"`
	// 开始时间，格式为"2019-07-31 12:00:00"
	StartTime *string `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
	// 是否启动订单的异步处理
	Async *int64 `json:"async,omitempty" xml:"async,omitempty"`
	// 清分资金的来源，比如用户xx元，商家yy元
	Memo *string `json:"memo,omitempty" xml:"memo,omitempty"`
	// 融资租赁资金方id
	CreditId *string `json:"credit_id,omitempty" xml:"credit_id,omitempty"`
}

func (s CreateLeaseClearingRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseClearingRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseClearingRequest) SetAuthToken(v string) *CreateLeaseClearingRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseClearingRequest) SetProductInstanceId(v string) *CreateLeaseClearingRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseClearingRequest) SetApplicationId(v string) *CreateLeaseClearingRequest {
	s.ApplicationId = &v
	return s
}

func (s *CreateLeaseClearingRequest) SetClearingAccount(v string) *CreateLeaseClearingRequest {
	s.ClearingAccount = &v
	return s
}

func (s *CreateLeaseClearingRequest) SetClearingMoney(v int64) *CreateLeaseClearingRequest {
	s.ClearingMoney = &v
	return s
}

func (s *CreateLeaseClearingRequest) SetClearingOrderIds(v []*string) *CreateLeaseClearingRequest {
	s.ClearingOrderIds = v
	return s
}

func (s *CreateLeaseClearingRequest) SetClearingState(v int64) *CreateLeaseClearingRequest {
	s.ClearingState = &v
	return s
}

func (s *CreateLeaseClearingRequest) SetEndTime(v string) *CreateLeaseClearingRequest {
	s.EndTime = &v
	return s
}

func (s *CreateLeaseClearingRequest) SetExtraInfo(v string) *CreateLeaseClearingRequest {
	s.ExtraInfo = &v
	return s
}

func (s *CreateLeaseClearingRequest) SetLeaseId(v string) *CreateLeaseClearingRequest {
	s.LeaseId = &v
	return s
}

func (s *CreateLeaseClearingRequest) SetOrderId(v string) *CreateLeaseClearingRequest {
	s.OrderId = &v
	return s
}

func (s *CreateLeaseClearingRequest) SetReturnIndex(v int64) *CreateLeaseClearingRequest {
	s.ReturnIndex = &v
	return s
}

func (s *CreateLeaseClearingRequest) SetStartTime(v string) *CreateLeaseClearingRequest {
	s.StartTime = &v
	return s
}

func (s *CreateLeaseClearingRequest) SetAsync(v int64) *CreateLeaseClearingRequest {
	s.Async = &v
	return s
}

func (s *CreateLeaseClearingRequest) SetMemo(v string) *CreateLeaseClearingRequest {
	s.Memo = &v
	return s
}

func (s *CreateLeaseClearingRequest) SetCreditId(v string) *CreateLeaseClearingRequest {
	s.CreditId = &v
	return s
}

type CreateLeaseClearingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码 0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	//
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 清分信息链上交易哈希
	//
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s CreateLeaseClearingResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseClearingResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseClearingResponse) SetReqMsgId(v string) *CreateLeaseClearingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseClearingResponse) SetResultCode(v string) *CreateLeaseClearingResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseClearingResponse) SetResultMsg(v string) *CreateLeaseClearingResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseClearingResponse) SetCode(v int64) *CreateLeaseClearingResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseClearingResponse) SetErrMessage(v string) *CreateLeaseClearingResponse {
	s.ErrMessage = &v
	return s
}

func (s *CreateLeaseClearingResponse) SetResponseData(v string) *CreateLeaseClearingResponse {
	s.ResponseData = &v
	return s
}

type CreateLeaseRepaymentRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 融资租赁业务id，由资方控制台生成返回
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 融资租赁租户还款额外字段
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// 是否最终订单还款结束
	IsFinish *bool `json:"is_finish,omitempty" xml:"is_finish,omitempty" require:"true"`
	// 租赁平台商户Id 长度不可超过50
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
	// 订单id 长度不可超过50
	//
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 逾期天数,支用到期日开始计算
	OverdueDay *int64 `json:"overdue_day,omitempty" xml:"overdue_day,omitempty"`
	// 逾期应还款总额,本金+利息+逾期利息,精确到毫厘，即123400表示12.34元
	OverdueMoney *int64 `json:"overdue_money,omitempty" xml:"overdue_money,omitempty"`
	// 逾期利率（日利率）,精确到小数点后四位 12.34% 表示为1234
	OverdueRate *int64 `json:"overdue_rate,omitempty" xml:"overdue_rate,omitempty"`
	// 逾期状态,暂时都以0处理，目前不处理
	OverdueStatus *int64 `json:"overdue_status,omitempty" xml:"overdue_status,omitempty"`
	// 剩余应还金额，精确到毫厘，即123400表示12.34元
	RemainReturnMoney *int64 `json:"remain_return_money,omitempty" xml:"remain_return_money,omitempty" require:"true"`
	// 剩余应还期数
	//
	RemainReturnTerm *int64 `json:"remain_return_term,omitempty" xml:"remain_return_term,omitempty" require:"true"`
	// 每次还款流水凭证，需要融资方确认，id一样则不处理
	RepaymentUniqueId *string `json:"repayment_unique_id,omitempty" xml:"repayment_unique_id,omitempty" require:"true"`
	// 还款结果简要描述,长度不超过256
	ReturnDescription *string `json:"return_description,omitempty" xml:"return_description,omitempty" require:"true"`
	// 还款批次
	//
	ReturnIndex *int64 `json:"return_index,omitempty" xml:"return_index,omitempty" require:"true"`
	// 还款总额,本金+利息，精确到毫厘，即123400表示12.34元
	ReturnMoney *int64 `json:"return_money,omitempty" xml:"return_money,omitempty" require:"true"`
	// 还款结果状态,1.成功 2.失败
	ReturnStatus *int64 `json:"return_status,omitempty" xml:"return_status,omitempty" require:"true"`
	// 还款日期，格式为"2019-07-31 12:00:00"
	ReturnTime *string `json:"return_time,omitempty" xml:"return_time,omitempty" require:"true"`
	// 还款来源,1.共管账号，2.网商清分
	Source *int64 `json:"source,omitempty" xml:"source,omitempty" require:"true"`
	// 逾期后还款状态,1未还款,2已还款
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 是否启动订单的异步处理
	Async *int64 `json:"async,omitempty" xml:"async,omitempty"`
	// 原所有权id
	//
	//
	OldOwnershipId *string `json:"old_ownership_id,omitempty" xml:"old_ownership_id,omitempty"`
	// 现所有权id
	//
	//
	NewOwnershipId *string `json:"new_ownership_id,omitempty" xml:"new_ownership_id,omitempty"`
}

func (s CreateLeaseRepaymentRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseRepaymentRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseRepaymentRequest) SetAuthToken(v string) *CreateLeaseRepaymentRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseRepaymentRequest) SetProductInstanceId(v string) *CreateLeaseRepaymentRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseRepaymentRequest) SetApplicationId(v string) *CreateLeaseRepaymentRequest {
	s.ApplicationId = &v
	return s
}

func (s *CreateLeaseRepaymentRequest) SetExtraInfo(v string) *CreateLeaseRepaymentRequest {
	s.ExtraInfo = &v
	return s
}

func (s *CreateLeaseRepaymentRequest) SetIsFinish(v bool) *CreateLeaseRepaymentRequest {
	s.IsFinish = &v
	return s
}

func (s *CreateLeaseRepaymentRequest) SetLeaseId(v string) *CreateLeaseRepaymentRequest {
	s.LeaseId = &v
	return s
}

func (s *CreateLeaseRepaymentRequest) SetOrderId(v string) *CreateLeaseRepaymentRequest {
	s.OrderId = &v
	return s
}

func (s *CreateLeaseRepaymentRequest) SetOverdueDay(v int64) *CreateLeaseRepaymentRequest {
	s.OverdueDay = &v
	return s
}

func (s *CreateLeaseRepaymentRequest) SetOverdueMoney(v int64) *CreateLeaseRepaymentRequest {
	s.OverdueMoney = &v
	return s
}

func (s *CreateLeaseRepaymentRequest) SetOverdueRate(v int64) *CreateLeaseRepaymentRequest {
	s.OverdueRate = &v
	return s
}

func (s *CreateLeaseRepaymentRequest) SetOverdueStatus(v int64) *CreateLeaseRepaymentRequest {
	s.OverdueStatus = &v
	return s
}

func (s *CreateLeaseRepaymentRequest) SetRemainReturnMoney(v int64) *CreateLeaseRepaymentRequest {
	s.RemainReturnMoney = &v
	return s
}

func (s *CreateLeaseRepaymentRequest) SetRemainReturnTerm(v int64) *CreateLeaseRepaymentRequest {
	s.RemainReturnTerm = &v
	return s
}

func (s *CreateLeaseRepaymentRequest) SetRepaymentUniqueId(v string) *CreateLeaseRepaymentRequest {
	s.RepaymentUniqueId = &v
	return s
}

func (s *CreateLeaseRepaymentRequest) SetReturnDescription(v string) *CreateLeaseRepaymentRequest {
	s.ReturnDescription = &v
	return s
}

func (s *CreateLeaseRepaymentRequest) SetReturnIndex(v int64) *CreateLeaseRepaymentRequest {
	s.ReturnIndex = &v
	return s
}

func (s *CreateLeaseRepaymentRequest) SetReturnMoney(v int64) *CreateLeaseRepaymentRequest {
	s.ReturnMoney = &v
	return s
}

func (s *CreateLeaseRepaymentRequest) SetReturnStatus(v int64) *CreateLeaseRepaymentRequest {
	s.ReturnStatus = &v
	return s
}

func (s *CreateLeaseRepaymentRequest) SetReturnTime(v string) *CreateLeaseRepaymentRequest {
	s.ReturnTime = &v
	return s
}

func (s *CreateLeaseRepaymentRequest) SetSource(v int64) *CreateLeaseRepaymentRequest {
	s.Source = &v
	return s
}

func (s *CreateLeaseRepaymentRequest) SetStatus(v int64) *CreateLeaseRepaymentRequest {
	s.Status = &v
	return s
}

func (s *CreateLeaseRepaymentRequest) SetAsync(v int64) *CreateLeaseRepaymentRequest {
	s.Async = &v
	return s
}

func (s *CreateLeaseRepaymentRequest) SetOldOwnershipId(v string) *CreateLeaseRepaymentRequest {
	s.OldOwnershipId = &v
	return s
}

func (s *CreateLeaseRepaymentRequest) SetNewOwnershipId(v string) *CreateLeaseRepaymentRequest {
	s.NewOwnershipId = &v
	return s
}

type CreateLeaseRepaymentResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码 0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 融资租赁金融机构上传还款信息链上交易哈希值
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s CreateLeaseRepaymentResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseRepaymentResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseRepaymentResponse) SetReqMsgId(v string) *CreateLeaseRepaymentResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseRepaymentResponse) SetResultCode(v string) *CreateLeaseRepaymentResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseRepaymentResponse) SetResultMsg(v string) *CreateLeaseRepaymentResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseRepaymentResponse) SetCode(v int64) *CreateLeaseRepaymentResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseRepaymentResponse) SetErrMessage(v string) *CreateLeaseRepaymentResponse {
	s.ErrMessage = &v
	return s
}

func (s *CreateLeaseRepaymentResponse) SetResponseData(v string) *CreateLeaseRepaymentResponse {
	s.ResponseData = &v
	return s
}

type CreateLeaseNotifyregisterRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
}

func (s CreateLeaseNotifyregisterRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseNotifyregisterRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseNotifyregisterRequest) SetAuthToken(v string) *CreateLeaseNotifyregisterRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseNotifyregisterRequest) SetProductInstanceId(v string) *CreateLeaseNotifyregisterRequest {
	s.ProductInstanceId = &v
	return s
}

type CreateLeaseNotifyregisterResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
}

func (s CreateLeaseNotifyregisterResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseNotifyregisterResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseNotifyregisterResponse) SetReqMsgId(v string) *CreateLeaseNotifyregisterResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseNotifyregisterResponse) SetResultCode(v string) *CreateLeaseNotifyregisterResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseNotifyregisterResponse) SetResultMsg(v string) *CreateLeaseNotifyregisterResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseNotifyregisterResponse) SetCode(v int64) *CreateLeaseNotifyregisterResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseNotifyregisterResponse) SetErrMessage(v string) *CreateLeaseNotifyregisterResponse {
	s.ErrMessage = &v
	return s
}

type QueryLeaseIotinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 查询截止时间
	EndTime *string `json:"end_time,omitempty" xml:"end_time,omitempty" require:"true"`
	// 设备唯一id imei id
	ProductImeiId *string `json:"product_imei_id,omitempty" xml:"product_imei_id,omitempty" require:"true"`
	// 查询开启时间
	StartTime *string `json:"start_time,omitempty" xml:"start_time,omitempty" require:"true"`
}

func (s QueryLeaseIotinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseIotinfoRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseIotinfoRequest) SetAuthToken(v string) *QueryLeaseIotinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseIotinfoRequest) SetProductInstanceId(v string) *QueryLeaseIotinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseIotinfoRequest) SetEndTime(v string) *QueryLeaseIotinfoRequest {
	s.EndTime = &v
	return s
}

func (s *QueryLeaseIotinfoRequest) SetProductImeiId(v string) *QueryLeaseIotinfoRequest {
	s.ProductImeiId = &v
	return s
}

func (s *QueryLeaseIotinfoRequest) SetStartTime(v string) *QueryLeaseIotinfoRequest {
	s.StartTime = &v
	return s
}

type QueryLeaseIotinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误码
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// ""
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 设备详情
	LeaseIotItemInfo []*LeaseIotItemInfo `json:"lease_iot_item_info,omitempty" xml:"lease_iot_item_info,omitempty" type:"Repeated"`
}

func (s QueryLeaseIotinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseIotinfoResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseIotinfoResponse) SetReqMsgId(v string) *QueryLeaseIotinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseIotinfoResponse) SetResultCode(v string) *QueryLeaseIotinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseIotinfoResponse) SetResultMsg(v string) *QueryLeaseIotinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseIotinfoResponse) SetCode(v int64) *QueryLeaseIotinfoResponse {
	s.Code = &v
	return s
}

func (s *QueryLeaseIotinfoResponse) SetErrMessage(v string) *QueryLeaseIotinfoResponse {
	s.ErrMessage = &v
	return s
}

func (s *QueryLeaseIotinfoResponse) SetLeaseIotItemInfo(v []*LeaseIotItemInfo) *QueryLeaseIotinfoResponse {
	s.LeaseIotItemInfo = v
	return s
}

type CreateCourtTextnotaryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 对应的法院编号
	AgencyCode *string `json:"agency_code,omitempty" xml:"agency_code,omitempty"`
	// 对应的法院应用ID
	ApplicationCode *string `json:"application_code,omitempty" xml:"application_code,omitempty"`
	// 业务类型标识
	BusinessType *string `json:"business_type,omitempty" xml:"business_type,omitempty"`
	// 数据类型标识
	DataType *string `json:"data_type,omitempty" xml:"data_type,omitempty"`
	// 地理位置信息
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 存证阶段
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 文本数据
	TextContent *string `json:"text_content,omitempty" xml:"text_content,omitempty" require:"true"`
	// 存证事务ID
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
	// 是否使用可信时间戳
	Tsr *bool `json:"tsr,omitempty" xml:"tsr,omitempty"`
}

func (s CreateCourtTextnotaryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCourtTextnotaryRequest) GoString() string {
	return s.String()
}

func (s *CreateCourtTextnotaryRequest) SetAuthToken(v string) *CreateCourtTextnotaryRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateCourtTextnotaryRequest) SetProductInstanceId(v string) *CreateCourtTextnotaryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateCourtTextnotaryRequest) SetAgencyCode(v string) *CreateCourtTextnotaryRequest {
	s.AgencyCode = &v
	return s
}

func (s *CreateCourtTextnotaryRequest) SetApplicationCode(v string) *CreateCourtTextnotaryRequest {
	s.ApplicationCode = &v
	return s
}

func (s *CreateCourtTextnotaryRequest) SetBusinessType(v string) *CreateCourtTextnotaryRequest {
	s.BusinessType = &v
	return s
}

func (s *CreateCourtTextnotaryRequest) SetDataType(v string) *CreateCourtTextnotaryRequest {
	s.DataType = &v
	return s
}

func (s *CreateCourtTextnotaryRequest) SetLocation(v *Location) *CreateCourtTextnotaryRequest {
	s.Location = v
	return s
}

func (s *CreateCourtTextnotaryRequest) SetPhase(v string) *CreateCourtTextnotaryRequest {
	s.Phase = &v
	return s
}

func (s *CreateCourtTextnotaryRequest) SetProperties(v string) *CreateCourtTextnotaryRequest {
	s.Properties = &v
	return s
}

func (s *CreateCourtTextnotaryRequest) SetTextContent(v string) *CreateCourtTextnotaryRequest {
	s.TextContent = &v
	return s
}

func (s *CreateCourtTextnotaryRequest) SetTransactionId(v string) *CreateCourtTextnotaryRequest {
	s.TransactionId = &v
	return s
}

func (s *CreateCourtTextnotaryRequest) SetTsr(v bool) *CreateCourtTextnotaryRequest {
	s.Tsr = &v
	return s
}

type CreateCourtTextnotaryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可信时间戳
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 交易哈希
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateCourtTextnotaryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCourtTextnotaryResponse) GoString() string {
	return s.String()
}

func (s *CreateCourtTextnotaryResponse) SetReqMsgId(v string) *CreateCourtTextnotaryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateCourtTextnotaryResponse) SetResultCode(v string) *CreateCourtTextnotaryResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateCourtTextnotaryResponse) SetResultMsg(v string) *CreateCourtTextnotaryResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateCourtTextnotaryResponse) SetTsr(v *TsrResponse) *CreateCourtTextnotaryResponse {
	s.Tsr = v
	return s
}

func (s *CreateCourtTextnotaryResponse) SetTxHash(v string) *CreateCourtTextnotaryResponse {
	s.TxHash = &v
	return s
}

type GetCourtTextnotaryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 地理位置信息
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 存证阶段
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 存证事务ID
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty"`
	// 交易哈希
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
}

func (s GetCourtTextnotaryRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCourtTextnotaryRequest) GoString() string {
	return s.String()
}

func (s *GetCourtTextnotaryRequest) SetAuthToken(v string) *GetCourtTextnotaryRequest {
	s.AuthToken = &v
	return s
}

func (s *GetCourtTextnotaryRequest) SetProductInstanceId(v string) *GetCourtTextnotaryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetCourtTextnotaryRequest) SetLocation(v *Location) *GetCourtTextnotaryRequest {
	s.Location = v
	return s
}

func (s *GetCourtTextnotaryRequest) SetPhase(v string) *GetCourtTextnotaryRequest {
	s.Phase = &v
	return s
}

func (s *GetCourtTextnotaryRequest) SetProperties(v string) *GetCourtTextnotaryRequest {
	s.Properties = &v
	return s
}

func (s *GetCourtTextnotaryRequest) SetTransactionId(v string) *GetCourtTextnotaryRequest {
	s.TransactionId = &v
	return s
}

func (s *GetCourtTextnotaryRequest) SetTxHash(v string) *GetCourtTextnotaryRequest {
	s.TxHash = &v
	return s
}

type GetCourtTextnotaryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务类型标识
	BusinessType *string `json:"business_type,omitempty" xml:"business_type,omitempty"`
	// 数据类型标识
	DataType *string `json:"data_type,omitempty" xml:"data_type,omitempty"`
	// 文本数据
	TextContent *string `json:"text_content,omitempty" xml:"text_content,omitempty"`
	// 可信时间戳
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 对应的法院编号
	AgencyCode *string `json:"agency_code,omitempty" xml:"agency_code,omitempty"`
	// 对应的法院应用ID
	ApplicationCode *string `json:"application_code,omitempty" xml:"application_code,omitempty"`
}

func (s GetCourtTextnotaryResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCourtTextnotaryResponse) GoString() string {
	return s.String()
}

func (s *GetCourtTextnotaryResponse) SetReqMsgId(v string) *GetCourtTextnotaryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetCourtTextnotaryResponse) SetResultCode(v string) *GetCourtTextnotaryResponse {
	s.ResultCode = &v
	return s
}

func (s *GetCourtTextnotaryResponse) SetResultMsg(v string) *GetCourtTextnotaryResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetCourtTextnotaryResponse) SetBusinessType(v string) *GetCourtTextnotaryResponse {
	s.BusinessType = &v
	return s
}

func (s *GetCourtTextnotaryResponse) SetDataType(v string) *GetCourtTextnotaryResponse {
	s.DataType = &v
	return s
}

func (s *GetCourtTextnotaryResponse) SetTextContent(v string) *GetCourtTextnotaryResponse {
	s.TextContent = &v
	return s
}

func (s *GetCourtTextnotaryResponse) SetTsr(v *TsrResponse) *GetCourtTextnotaryResponse {
	s.Tsr = v
	return s
}

func (s *GetCourtTextnotaryResponse) SetAgencyCode(v string) *GetCourtTextnotaryResponse {
	s.AgencyCode = &v
	return s
}

func (s *GetCourtTextnotaryResponse) SetApplicationCode(v string) *GetCourtTextnotaryResponse {
	s.ApplicationCode = &v
	return s
}

type CreateCourtFilenotaryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 对应的法院编号
	AgencyCode *string `json:"agency_code,omitempty" xml:"agency_code,omitempty"`
	// 对应的法院应用ID
	ApplicationCode *string `json:"application_code,omitempty" xml:"application_code,omitempty"`
	// 业务类型标识
	BusinessType *string `json:"business_type,omitempty" xml:"business_type,omitempty"`
	// 数据类型标识
	DataType *string `json:"data_type,omitempty" xml:"data_type,omitempty"`
	// 文件哈希
	FileHash *string `json:"file_hash,omitempty" xml:"file_hash,omitempty" require:"true"`
	// 文件名
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty" require:"true"`
	// 哈希算法，目前仅支持SHA256
	HashAlgorithm *string `json:"hash_algorithm,omitempty" xml:"hash_algorithm,omitempty" require:"true"`
	// 地理位置信息
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 存证阶段
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 存证事务ID
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
	// 是否使用可信时间戳
	Tsr *bool `json:"tsr,omitempty" xml:"tsr,omitempty"`
}

func (s CreateCourtFilenotaryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCourtFilenotaryRequest) GoString() string {
	return s.String()
}

func (s *CreateCourtFilenotaryRequest) SetAuthToken(v string) *CreateCourtFilenotaryRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateCourtFilenotaryRequest) SetProductInstanceId(v string) *CreateCourtFilenotaryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateCourtFilenotaryRequest) SetAgencyCode(v string) *CreateCourtFilenotaryRequest {
	s.AgencyCode = &v
	return s
}

func (s *CreateCourtFilenotaryRequest) SetApplicationCode(v string) *CreateCourtFilenotaryRequest {
	s.ApplicationCode = &v
	return s
}

func (s *CreateCourtFilenotaryRequest) SetBusinessType(v string) *CreateCourtFilenotaryRequest {
	s.BusinessType = &v
	return s
}

func (s *CreateCourtFilenotaryRequest) SetDataType(v string) *CreateCourtFilenotaryRequest {
	s.DataType = &v
	return s
}

func (s *CreateCourtFilenotaryRequest) SetFileHash(v string) *CreateCourtFilenotaryRequest {
	s.FileHash = &v
	return s
}

func (s *CreateCourtFilenotaryRequest) SetFileName(v string) *CreateCourtFilenotaryRequest {
	s.FileName = &v
	return s
}

func (s *CreateCourtFilenotaryRequest) SetHashAlgorithm(v string) *CreateCourtFilenotaryRequest {
	s.HashAlgorithm = &v
	return s
}

func (s *CreateCourtFilenotaryRequest) SetLocation(v *Location) *CreateCourtFilenotaryRequest {
	s.Location = v
	return s
}

func (s *CreateCourtFilenotaryRequest) SetPhase(v string) *CreateCourtFilenotaryRequest {
	s.Phase = &v
	return s
}

func (s *CreateCourtFilenotaryRequest) SetProperties(v string) *CreateCourtFilenotaryRequest {
	s.Properties = &v
	return s
}

func (s *CreateCourtFilenotaryRequest) SetTransactionId(v string) *CreateCourtFilenotaryRequest {
	s.TransactionId = &v
	return s
}

func (s *CreateCourtFilenotaryRequest) SetTsr(v bool) *CreateCourtFilenotaryRequest {
	s.Tsr = &v
	return s
}

type CreateCourtFilenotaryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可信时间戳
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 交易哈希
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateCourtFilenotaryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCourtFilenotaryResponse) GoString() string {
	return s.String()
}

func (s *CreateCourtFilenotaryResponse) SetReqMsgId(v string) *CreateCourtFilenotaryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateCourtFilenotaryResponse) SetResultCode(v string) *CreateCourtFilenotaryResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateCourtFilenotaryResponse) SetResultMsg(v string) *CreateCourtFilenotaryResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateCourtFilenotaryResponse) SetTsr(v *TsrResponse) *CreateCourtFilenotaryResponse {
	s.Tsr = v
	return s
}

func (s *CreateCourtFilenotaryResponse) SetTxHash(v string) *CreateCourtFilenotaryResponse {
	s.TxHash = &v
	return s
}

type GetCourtFilenotaryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 地理位置信息
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 存证阶段
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 存证事务ID
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty"`
	// 交易哈希
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
}

func (s GetCourtFilenotaryRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCourtFilenotaryRequest) GoString() string {
	return s.String()
}

func (s *GetCourtFilenotaryRequest) SetAuthToken(v string) *GetCourtFilenotaryRequest {
	s.AuthToken = &v
	return s
}

func (s *GetCourtFilenotaryRequest) SetProductInstanceId(v string) *GetCourtFilenotaryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetCourtFilenotaryRequest) SetLocation(v *Location) *GetCourtFilenotaryRequest {
	s.Location = v
	return s
}

func (s *GetCourtFilenotaryRequest) SetPhase(v string) *GetCourtFilenotaryRequest {
	s.Phase = &v
	return s
}

func (s *GetCourtFilenotaryRequest) SetProperties(v string) *GetCourtFilenotaryRequest {
	s.Properties = &v
	return s
}

func (s *GetCourtFilenotaryRequest) SetTransactionId(v string) *GetCourtFilenotaryRequest {
	s.TransactionId = &v
	return s
}

func (s *GetCourtFilenotaryRequest) SetTxHash(v string) *GetCourtFilenotaryRequest {
	s.TxHash = &v
	return s
}

type GetCourtFilenotaryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 业务类型标识
	BusinessType *string `json:"business_type,omitempty" xml:"business_type,omitempty"`
	// 数据类型标识
	DataType *string `json:"data_type,omitempty" xml:"data_type,omitempty"`
	// 文件哈希
	FileHash *string `json:"file_hash,omitempty" xml:"file_hash,omitempty"`
	// 文件名
	FileName *string `json:"file_name,omitempty" xml:"file_name,omitempty"`
	// 可信时间戳
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 对应的法院编号
	AgencyCode *string `json:"agency_code,omitempty" xml:"agency_code,omitempty"`
	// 对应的法院应用ID
	ApplicationCode *string `json:"application_code,omitempty" xml:"application_code,omitempty"`
}

func (s GetCourtFilenotaryResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCourtFilenotaryResponse) GoString() string {
	return s.String()
}

func (s *GetCourtFilenotaryResponse) SetReqMsgId(v string) *GetCourtFilenotaryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetCourtFilenotaryResponse) SetResultCode(v string) *GetCourtFilenotaryResponse {
	s.ResultCode = &v
	return s
}

func (s *GetCourtFilenotaryResponse) SetResultMsg(v string) *GetCourtFilenotaryResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetCourtFilenotaryResponse) SetBusinessType(v string) *GetCourtFilenotaryResponse {
	s.BusinessType = &v
	return s
}

func (s *GetCourtFilenotaryResponse) SetDataType(v string) *GetCourtFilenotaryResponse {
	s.DataType = &v
	return s
}

func (s *GetCourtFilenotaryResponse) SetFileHash(v string) *GetCourtFilenotaryResponse {
	s.FileHash = &v
	return s
}

func (s *GetCourtFilenotaryResponse) SetFileName(v string) *GetCourtFilenotaryResponse {
	s.FileName = &v
	return s
}

func (s *GetCourtFilenotaryResponse) SetTsr(v *TsrResponse) *GetCourtFilenotaryResponse {
	s.Tsr = v
	return s
}

func (s *GetCourtFilenotaryResponse) SetAgencyCode(v string) *GetCourtFilenotaryResponse {
	s.AgencyCode = &v
	return s
}

func (s *GetCourtFilenotaryResponse) SetApplicationCode(v string) *GetCourtFilenotaryResponse {
	s.ApplicationCode = &v
	return s
}

type CreateLeaseRouteRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 方法名
	Route *string `json:"route,omitempty" xml:"route,omitempty" require:"true"`
	// 具体业务字段，json形式
	BizContent *string `json:"biz_content,omitempty" xml:"biz_content,omitempty" require:"true"`
}

func (s CreateLeaseRouteRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseRouteRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseRouteRequest) SetAuthToken(v string) *CreateLeaseRouteRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseRouteRequest) SetProductInstanceId(v string) *CreateLeaseRouteRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseRouteRequest) SetRoute(v string) *CreateLeaseRouteRequest {
	s.Route = &v
	return s
}

func (s *CreateLeaseRouteRequest) SetBizContent(v string) *CreateLeaseRouteRequest {
	s.BizContent = &v
	return s
}

type CreateLeaseRouteResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码
	//
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息
	//
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 租方承诺信息存储到合约中对应的区块链交易哈希
	//
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s CreateLeaseRouteResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseRouteResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseRouteResponse) SetReqMsgId(v string) *CreateLeaseRouteResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseRouteResponse) SetResultCode(v string) *CreateLeaseRouteResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseRouteResponse) SetResultMsg(v string) *CreateLeaseRouteResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseRouteResponse) SetCode(v int64) *CreateLeaseRouteResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseRouteResponse) SetErrMessage(v string) *CreateLeaseRouteResponse {
	s.ErrMessage = &v
	return s
}

func (s *CreateLeaseRouteResponse) SetResponseData(v string) *CreateLeaseRouteResponse {
	s.ResponseData = &v
	return s
}

type QueryLeaseEncryptedinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 被查询的租赁公司对应的租户ID
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 融资租赁业务id，由资方控制台创建返回
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
}

func (s QueryLeaseEncryptedinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseEncryptedinfoRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseEncryptedinfoRequest) SetAuthToken(v string) *QueryLeaseEncryptedinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseEncryptedinfoRequest) SetProductInstanceId(v string) *QueryLeaseEncryptedinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseEncryptedinfoRequest) SetLeaseId(v string) *QueryLeaseEncryptedinfoRequest {
	s.LeaseId = &v
	return s
}

func (s *QueryLeaseEncryptedinfoRequest) SetOrderId(v string) *QueryLeaseEncryptedinfoRequest {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseEncryptedinfoRequest) SetApplicationId(v string) *QueryLeaseEncryptedinfoRequest {
	s.ApplicationId = &v
	return s
}

type QueryLeaseEncryptedinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误码
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误描述信息
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 对应的加密后的具体信息
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s QueryLeaseEncryptedinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseEncryptedinfoResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseEncryptedinfoResponse) SetReqMsgId(v string) *QueryLeaseEncryptedinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseEncryptedinfoResponse) SetResultCode(v string) *QueryLeaseEncryptedinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseEncryptedinfoResponse) SetResultMsg(v string) *QueryLeaseEncryptedinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseEncryptedinfoResponse) SetCode(v int64) *QueryLeaseEncryptedinfoResponse {
	s.Code = &v
	return s
}

func (s *QueryLeaseEncryptedinfoResponse) SetErrMessage(v string) *QueryLeaseEncryptedinfoResponse {
	s.ErrMessage = &v
	return s
}

func (s *QueryLeaseEncryptedinfoResponse) SetResponseData(v string) *QueryLeaseEncryptedinfoResponse {
	s.ResponseData = &v
	return s
}

type CreateContractTextRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 签署结束信息，phase为FINISH时必选
	FinishInfo *ContractNotaryFinishInfo `json:"finish_info,omitempty" xml:"finish_info,omitempty"`
	// 签署流程ID
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 签署发起信息，phase为INIT时必选
	InitInfo *ContractNotaryInitInfo `json:"init_info,omitempty" xml:"init_info,omitempty"`
	// 存证阶段，分为INIT(发起)，SIGN(签署)，FINISH(结束)
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 签署过程信息，phase为SIGN时必选
	SignInfo *ContractNotarySignInfo `json:"sign_info,omitempty" xml:"sign_info,omitempty"`
	// 存证事务ID
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
	// 签署文件存档阶段存证核验信息
	DocumentInfo *ContractNotaryDocumentInfo `json:"document_info,omitempty" xml:"document_info,omitempty"`
}

func (s CreateContractTextRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContractTextRequest) GoString() string {
	return s.String()
}

func (s *CreateContractTextRequest) SetAuthToken(v string) *CreateContractTextRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateContractTextRequest) SetProductInstanceId(v string) *CreateContractTextRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateContractTextRequest) SetFinishInfo(v *ContractNotaryFinishInfo) *CreateContractTextRequest {
	s.FinishInfo = v
	return s
}

func (s *CreateContractTextRequest) SetFlowId(v string) *CreateContractTextRequest {
	s.FlowId = &v
	return s
}

func (s *CreateContractTextRequest) SetInitInfo(v *ContractNotaryInitInfo) *CreateContractTextRequest {
	s.InitInfo = v
	return s
}

func (s *CreateContractTextRequest) SetPhase(v string) *CreateContractTextRequest {
	s.Phase = &v
	return s
}

func (s *CreateContractTextRequest) SetSignInfo(v *ContractNotarySignInfo) *CreateContractTextRequest {
	s.SignInfo = v
	return s
}

func (s *CreateContractTextRequest) SetTransactionId(v string) *CreateContractTextRequest {
	s.TransactionId = &v
	return s
}

func (s *CreateContractTextRequest) SetDocumentInfo(v *ContractNotaryDocumentInfo) *CreateContractTextRequest {
	s.DocumentInfo = v
	return s
}

type CreateContractTextResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证凭据
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateContractTextResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContractTextResponse) GoString() string {
	return s.String()
}

func (s *CreateContractTextResponse) SetReqMsgId(v string) *CreateContractTextResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateContractTextResponse) SetResultCode(v string) *CreateContractTextResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateContractTextResponse) SetResultMsg(v string) *CreateContractTextResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateContractTextResponse) SetTxHash(v string) *CreateContractTextResponse {
	s.TxHash = &v
	return s
}

type ApplyContractReportRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 签署文件存档阶段存证核验信息
	DocumentInfo []*ContractNotaryDocumentInfo `json:"document_info,omitempty" xml:"document_info,omitempty" type:"Repeated"`
	// 签署结束阶段存证核验信息
	FinishInfo *ContractNotaryFinishInfo `json:"finish_info,omitempty" xml:"finish_info,omitempty" require:"true"`
	// 签署流程ID
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 签署发起阶段存证核验信息
	InitInfo *ContractNotaryInitInfo `json:"init_info,omitempty" xml:"init_info,omitempty" require:"true"`
	// 签署过程阶段存证核验信息
	SignInfo []*ContractNotarySignInfo `json:"sign_info,omitempty" xml:"sign_info,omitempty" require:"true" type:"Repeated"`
	// 存证事务ID
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
}

func (s ApplyContractReportRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyContractReportRequest) GoString() string {
	return s.String()
}

func (s *ApplyContractReportRequest) SetAuthToken(v string) *ApplyContractReportRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyContractReportRequest) SetProductInstanceId(v string) *ApplyContractReportRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyContractReportRequest) SetDocumentInfo(v []*ContractNotaryDocumentInfo) *ApplyContractReportRequest {
	s.DocumentInfo = v
	return s
}

func (s *ApplyContractReportRequest) SetFinishInfo(v *ContractNotaryFinishInfo) *ApplyContractReportRequest {
	s.FinishInfo = v
	return s
}

func (s *ApplyContractReportRequest) SetFlowId(v string) *ApplyContractReportRequest {
	s.FlowId = &v
	return s
}

func (s *ApplyContractReportRequest) SetInitInfo(v *ContractNotaryInitInfo) *ApplyContractReportRequest {
	s.InitInfo = v
	return s
}

func (s *ApplyContractReportRequest) SetSignInfo(v []*ContractNotarySignInfo) *ApplyContractReportRequest {
	s.SignInfo = v
	return s
}

func (s *ApplyContractReportRequest) SetTransactionId(v string) *ApplyContractReportRequest {
	s.TransactionId = &v
	return s
}

type ApplyContractReportResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 出证报告授权码，通过核验后获得
	AuthCode *string `json:"auth_code,omitempty" xml:"auth_code,omitempty"`
}

func (s ApplyContractReportResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyContractReportResponse) GoString() string {
	return s.String()
}

func (s *ApplyContractReportResponse) SetReqMsgId(v string) *ApplyContractReportResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyContractReportResponse) SetResultCode(v string) *ApplyContractReportResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyContractReportResponse) SetResultMsg(v string) *ApplyContractReportResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyContractReportResponse) SetAuthCode(v string) *ApplyContractReportResponse {
	s.AuthCode = &v
	return s
}

type GetContractTextRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证凭据
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
}

func (s GetContractTextRequest) String() string {
	return tea.Prettify(s)
}

func (s GetContractTextRequest) GoString() string {
	return s.String()
}

func (s *GetContractTextRequest) SetAuthToken(v string) *GetContractTextRequest {
	s.AuthToken = &v
	return s
}

func (s *GetContractTextRequest) SetProductInstanceId(v string) *GetContractTextRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetContractTextRequest) SetTxHash(v string) *GetContractTextRequest {
	s.TxHash = &v
	return s
}

type GetContractTextResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证信息对象的JSON序列化形式
	NotaryData *string `json:"notary_data,omitempty" xml:"notary_data,omitempty"`
}

func (s GetContractTextResponse) String() string {
	return tea.Prettify(s)
}

func (s GetContractTextResponse) GoString() string {
	return s.String()
}

func (s *GetContractTextResponse) SetReqMsgId(v string) *GetContractTextResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetContractTextResponse) SetResultCode(v string) *GetContractTextResponse {
	s.ResultCode = &v
	return s
}

func (s *GetContractTextResponse) SetResultMsg(v string) *GetContractTextResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetContractTextResponse) SetNotaryData(v string) *GetContractTextResponse {
	s.NotaryData = &v
	return s
}

type CreateInternalTransRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证关联实体（个人/企业）的身份识别信息
	Customer *Identity `json:"customer,omitempty" xml:"customer,omitempty" require:"true"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 业务子类型标识
	SubBizId *string `json:"sub_biz_id,omitempty" xml:"sub_biz_id,omitempty"`
	// 是否使用可信时间戳，默认为false
	Tsr *bool `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 代理客户存证时，实际用户的租户ID
	RealTenant *string `json:"real_tenant,omitempty" xml:"real_tenant,omitempty"`
	// 授权码
	AuthCode *string `json:"auth_code,omitempty" xml:"auth_code,omitempty"`
	// 授权码对应的产品码
	Product *string `json:"product,omitempty" xml:"product,omitempty"`
}

func (s CreateInternalTransRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateInternalTransRequest) GoString() string {
	return s.String()
}

func (s *CreateInternalTransRequest) SetAuthToken(v string) *CreateInternalTransRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateInternalTransRequest) SetProductInstanceId(v string) *CreateInternalTransRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateInternalTransRequest) SetCustomer(v *Identity) *CreateInternalTransRequest {
	s.Customer = v
	return s
}

func (s *CreateInternalTransRequest) SetProperties(v string) *CreateInternalTransRequest {
	s.Properties = &v
	return s
}

func (s *CreateInternalTransRequest) SetSubBizId(v string) *CreateInternalTransRequest {
	s.SubBizId = &v
	return s
}

func (s *CreateInternalTransRequest) SetTsr(v bool) *CreateInternalTransRequest {
	s.Tsr = &v
	return s
}

func (s *CreateInternalTransRequest) SetRealTenant(v string) *CreateInternalTransRequest {
	s.RealTenant = &v
	return s
}

func (s *CreateInternalTransRequest) SetAuthCode(v string) *CreateInternalTransRequest {
	s.AuthCode = &v
	return s
}

func (s *CreateInternalTransRequest) SetProduct(v string) *CreateInternalTransRequest {
	s.Product = &v
	return s
}

type CreateInternalTransResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回事务ID，全局唯一
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty"`
	// 可信时间信息
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
}

func (s CreateInternalTransResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateInternalTransResponse) GoString() string {
	return s.String()
}

func (s *CreateInternalTransResponse) SetReqMsgId(v string) *CreateInternalTransResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateInternalTransResponse) SetResultCode(v string) *CreateInternalTransResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateInternalTransResponse) SetResultMsg(v string) *CreateInternalTransResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateInternalTransResponse) SetTransactionId(v string) *CreateInternalTransResponse {
	s.TransactionId = &v
	return s
}

func (s *CreateInternalTransResponse) SetTsr(v *TsrResponse) *CreateInternalTransResponse {
	s.Tsr = v
	return s
}

type CreateInternalTextRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 哈希算法，目前仅支持 SHA256
	HashAlgorithm *string `json:"hash_algorithm,omitempty" xml:"hash_algorithm,omitempty"`
	// 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 存证内容
	NotaryContent *string `json:"notary_content,omitempty" xml:"notary_content,omitempty" require:"true"`
	// 描述本条存证在存证事务中的阶段，用户可自行维护
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 文本存证类型，支持源文本/文本哈希
	TextNotaryType *string `json:"text_notary_type,omitempty" xml:"text_notary_type,omitempty"`
	// 存证事务id
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
	// 是否使用可信时间戳，默认为false
	Tsr *bool `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 代理客户存证时，实际用户的租户ID
	RealTenant *string `json:"real_tenant,omitempty" xml:"real_tenant,omitempty"`
	// 授权码
	AuthCode *string `json:"auth_code,omitempty" xml:"auth_code,omitempty"`
	// 授权码对应产品码
	Product *string `json:"product,omitempty" xml:"product,omitempty"`
	// 版权文本存证支持hash存证
	BizCategory *string `json:"biz_category,omitempty" xml:"biz_category,omitempty"`
}

func (s CreateInternalTextRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateInternalTextRequest) GoString() string {
	return s.String()
}

func (s *CreateInternalTextRequest) SetAuthToken(v string) *CreateInternalTextRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateInternalTextRequest) SetProductInstanceId(v string) *CreateInternalTextRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateInternalTextRequest) SetHashAlgorithm(v string) *CreateInternalTextRequest {
	s.HashAlgorithm = &v
	return s
}

func (s *CreateInternalTextRequest) SetLocation(v *Location) *CreateInternalTextRequest {
	s.Location = v
	return s
}

func (s *CreateInternalTextRequest) SetNotaryContent(v string) *CreateInternalTextRequest {
	s.NotaryContent = &v
	return s
}

func (s *CreateInternalTextRequest) SetPhase(v string) *CreateInternalTextRequest {
	s.Phase = &v
	return s
}

func (s *CreateInternalTextRequest) SetProperties(v string) *CreateInternalTextRequest {
	s.Properties = &v
	return s
}

func (s *CreateInternalTextRequest) SetTextNotaryType(v string) *CreateInternalTextRequest {
	s.TextNotaryType = &v
	return s
}

func (s *CreateInternalTextRequest) SetTransactionId(v string) *CreateInternalTextRequest {
	s.TransactionId = &v
	return s
}

func (s *CreateInternalTextRequest) SetTsr(v bool) *CreateInternalTextRequest {
	s.Tsr = &v
	return s
}

func (s *CreateInternalTextRequest) SetRealTenant(v string) *CreateInternalTextRequest {
	s.RealTenant = &v
	return s
}

func (s *CreateInternalTextRequest) SetAuthCode(v string) *CreateInternalTextRequest {
	s.AuthCode = &v
	return s
}

func (s *CreateInternalTextRequest) SetProduct(v string) *CreateInternalTextRequest {
	s.Product = &v
	return s
}

func (s *CreateInternalTextRequest) SetBizCategory(v string) *CreateInternalTextRequest {
	s.BizCategory = &v
	return s
}

type CreateInternalTextResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可信时间信息
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 存证凭据
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateInternalTextResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateInternalTextResponse) GoString() string {
	return s.String()
}

func (s *CreateInternalTextResponse) SetReqMsgId(v string) *CreateInternalTextResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateInternalTextResponse) SetResultCode(v string) *CreateInternalTextResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateInternalTextResponse) SetResultMsg(v string) *CreateInternalTextResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateInternalTextResponse) SetTsr(v *TsrResponse) *CreateInternalTextResponse {
	s.Tsr = v
	return s
}

func (s *CreateInternalTextResponse) SetTxHash(v string) *CreateInternalTextResponse {
	s.TxHash = &v
	return s
}

type CreateLeaseTextRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 哈希算法，目前仅支持 SHA256
	HashAlgorithm *string `json:"hash_algorithm,omitempty" xml:"hash_algorithm,omitempty"`
	// 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 存证内容
	NotaryContent *string `json:"notary_content,omitempty" xml:"notary_content,omitempty" require:"true"`
	// 描述本条存证在存证事务中的阶段，用户可自行维护
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 文本存证类型，支持源文本/文本哈希
	TextNotaryType *string `json:"text_notary_type,omitempty" xml:"text_notary_type,omitempty"`
	// 存证事务id
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
}

func (s CreateLeaseTextRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseTextRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseTextRequest) SetAuthToken(v string) *CreateLeaseTextRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseTextRequest) SetProductInstanceId(v string) *CreateLeaseTextRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseTextRequest) SetHashAlgorithm(v string) *CreateLeaseTextRequest {
	s.HashAlgorithm = &v
	return s
}

func (s *CreateLeaseTextRequest) SetLocation(v *Location) *CreateLeaseTextRequest {
	s.Location = v
	return s
}

func (s *CreateLeaseTextRequest) SetNotaryContent(v string) *CreateLeaseTextRequest {
	s.NotaryContent = &v
	return s
}

func (s *CreateLeaseTextRequest) SetPhase(v string) *CreateLeaseTextRequest {
	s.Phase = &v
	return s
}

func (s *CreateLeaseTextRequest) SetProperties(v string) *CreateLeaseTextRequest {
	s.Properties = &v
	return s
}

func (s *CreateLeaseTextRequest) SetTextNotaryType(v string) *CreateLeaseTextRequest {
	s.TextNotaryType = &v
	return s
}

func (s *CreateLeaseTextRequest) SetTransactionId(v string) *CreateLeaseTextRequest {
	s.TransactionId = &v
	return s
}

type CreateLeaseTextResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 入参中传入的存证阶段，可同用于租赁存证列表(twc.notary.lease.notary.list)的记录对账
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty"`
}

func (s CreateLeaseTextResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseTextResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseTextResponse) SetReqMsgId(v string) *CreateLeaseTextResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseTextResponse) SetResultCode(v string) *CreateLeaseTextResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseTextResponse) SetResultMsg(v string) *CreateLeaseTextResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseTextResponse) SetPhase(v string) *CreateLeaseTextResponse {
	s.Phase = &v
	return s
}

type CreateLeaseFileRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 文件存证模式，目前仅支持 FILE_RAW 和 FILE_HASH
	FileNotaryType *string `json:"file_notary_type,omitempty" xml:"file_notary_type,omitempty"`
	// 当文件存证模式为FILE_HASH时，用户可以指定该参数。当前服务仅支持 SHA256，若不填写，则默认值为 SHA256。
	HashAlgorithm *string `json:"hash_algorithm,omitempty" xml:"hash_algorithm,omitempty"`
	// 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 存证文件内容，对文件内容做base64编码后得到。例如FILE_RAW模式下，文件内容为“test”，那么base64编码后的结果则为“dGVzdA==”。如果是FILE_HASh模式，则该字段直接为文件hash。
	NotaryFile *string `json:"notary_file,omitempty" xml:"notary_file,omitempty" require:"true"`
	// 存证文件名称
	NotaryName *string `json:"notary_name,omitempty" xml:"notary_name,omitempty" require:"true"`
	// 描述本条存证在存证事务中的阶段，用户可自行维护
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 存证事务ID
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
}

func (s CreateLeaseFileRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseFileRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseFileRequest) SetAuthToken(v string) *CreateLeaseFileRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseFileRequest) SetProductInstanceId(v string) *CreateLeaseFileRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseFileRequest) SetFileNotaryType(v string) *CreateLeaseFileRequest {
	s.FileNotaryType = &v
	return s
}

func (s *CreateLeaseFileRequest) SetHashAlgorithm(v string) *CreateLeaseFileRequest {
	s.HashAlgorithm = &v
	return s
}

func (s *CreateLeaseFileRequest) SetLocation(v *Location) *CreateLeaseFileRequest {
	s.Location = v
	return s
}

func (s *CreateLeaseFileRequest) SetNotaryFile(v string) *CreateLeaseFileRequest {
	s.NotaryFile = &v
	return s
}

func (s *CreateLeaseFileRequest) SetNotaryName(v string) *CreateLeaseFileRequest {
	s.NotaryName = &v
	return s
}

func (s *CreateLeaseFileRequest) SetPhase(v string) *CreateLeaseFileRequest {
	s.Phase = &v
	return s
}

func (s *CreateLeaseFileRequest) SetProperties(v string) *CreateLeaseFileRequest {
	s.Properties = &v
	return s
}

func (s *CreateLeaseFileRequest) SetTransactionId(v string) *CreateLeaseFileRequest {
	s.TransactionId = &v
	return s
}

type CreateLeaseFileResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 入参中的存证阶段信息，可同用于租赁存证列表(twc.notary.lease.notary.list)的记录对账
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty"`
}

func (s CreateLeaseFileResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseFileResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseFileResponse) SetReqMsgId(v string) *CreateLeaseFileResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseFileResponse) SetResultCode(v string) *CreateLeaseFileResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseFileResponse) SetResultMsg(v string) *CreateLeaseFileResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseFileResponse) SetPhase(v string) *CreateLeaseFileResponse {
	s.Phase = &v
	return s
}

type ListLeaseNotaryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 商户订单号，需要同twc.notary.lease.order.create接口的传参一致
	MerchantOrderNo *string `json:"merchant_order_no,omitempty" xml:"merchant_order_no,omitempty"`
	// 接口订单号，需要同twc.notary.lease.order.create接口的传参一致
	OrderNo *string `json:"order_no,omitempty" xml:"order_no,omitempty" require:"true"`
	// 支付渠道，默认支持Alipay|ThirdParty|CreditCard|BankTransfer|WeChatPay|Other，需要同twc.notary.lease.order.create接口的传参一致
	PaymentChannel *string `json:"payment_channel,omitempty" xml:"payment_channel,omitempty"`
}

func (s ListLeaseNotaryRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLeaseNotaryRequest) GoString() string {
	return s.String()
}

func (s *ListLeaseNotaryRequest) SetAuthToken(v string) *ListLeaseNotaryRequest {
	s.AuthToken = &v
	return s
}

func (s *ListLeaseNotaryRequest) SetProductInstanceId(v string) *ListLeaseNotaryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ListLeaseNotaryRequest) SetMerchantOrderNo(v string) *ListLeaseNotaryRequest {
	s.MerchantOrderNo = &v
	return s
}

func (s *ListLeaseNotaryRequest) SetOrderNo(v string) *ListLeaseNotaryRequest {
	s.OrderNo = &v
	return s
}

func (s *ListLeaseNotaryRequest) SetPaymentChannel(v string) *ListLeaseNotaryRequest {
	s.PaymentChannel = &v
	return s
}

type ListLeaseNotaryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证记录列表
	Records []*LeaseNotaryRecord `json:"records,omitempty" xml:"records,omitempty" type:"Repeated"`
}

func (s ListLeaseNotaryResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLeaseNotaryResponse) GoString() string {
	return s.String()
}

func (s *ListLeaseNotaryResponse) SetReqMsgId(v string) *ListLeaseNotaryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ListLeaseNotaryResponse) SetResultCode(v string) *ListLeaseNotaryResponse {
	s.ResultCode = &v
	return s
}

func (s *ListLeaseNotaryResponse) SetResultMsg(v string) *ListLeaseNotaryResponse {
	s.ResultMsg = &v
	return s
}

func (s *ListLeaseNotaryResponse) SetRecords(v []*LeaseNotaryRecord) *ListLeaseNotaryResponse {
	s.Records = v
	return s
}

type QueryLeaseApplicationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 每页的大小
	PageSize *int64 `json:"page_size,omitempty" xml:"page_size,omitempty" require:"true"`
	// 起始id
	StartId *int64 `json:"start_id,omitempty" xml:"start_id,omitempty" require:"true"`
}

func (s QueryLeaseApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseApplicationRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseApplicationRequest) SetAuthToken(v string) *QueryLeaseApplicationRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseApplicationRequest) SetProductInstanceId(v string) *QueryLeaseApplicationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseApplicationRequest) SetPageSize(v int64) *QueryLeaseApplicationRequest {
	s.PageSize = &v
	return s
}

func (s *QueryLeaseApplicationRequest) SetStartId(v int64) *QueryLeaseApplicationRequest {
	s.StartId = &v
	return s
}

type QueryLeaseApplicationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误码
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 返回值
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s QueryLeaseApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseApplicationResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseApplicationResponse) SetReqMsgId(v string) *QueryLeaseApplicationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseApplicationResponse) SetResultCode(v string) *QueryLeaseApplicationResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseApplicationResponse) SetResultMsg(v string) *QueryLeaseApplicationResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseApplicationResponse) SetCode(v int64) *QueryLeaseApplicationResponse {
	s.Code = &v
	return s
}

func (s *QueryLeaseApplicationResponse) SetErrMessage(v string) *QueryLeaseApplicationResponse {
	s.ErrMessage = &v
	return s
}

func (s *QueryLeaseApplicationResponse) SetResponseData(v string) *QueryLeaseApplicationResponse {
	s.ResponseData = &v
	return s
}

type QueryLeaseApplicationdetailinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty" require:"true"`
}

func (s QueryLeaseApplicationdetailinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseApplicationdetailinfoRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseApplicationdetailinfoRequest) SetAuthToken(v string) *QueryLeaseApplicationdetailinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseApplicationdetailinfoRequest) SetProductInstanceId(v string) *QueryLeaseApplicationdetailinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseApplicationdetailinfoRequest) SetApplicationId(v string) *QueryLeaseApplicationdetailinfoRequest {
	s.ApplicationId = &v
	return s
}

type QueryLeaseApplicationdetailinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误码
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 合约定义详情
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s QueryLeaseApplicationdetailinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseApplicationdetailinfoResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseApplicationdetailinfoResponse) SetReqMsgId(v string) *QueryLeaseApplicationdetailinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseApplicationdetailinfoResponse) SetResultCode(v string) *QueryLeaseApplicationdetailinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseApplicationdetailinfoResponse) SetResultMsg(v string) *QueryLeaseApplicationdetailinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseApplicationdetailinfoResponse) SetCode(v int64) *QueryLeaseApplicationdetailinfoResponse {
	s.Code = &v
	return s
}

func (s *QueryLeaseApplicationdetailinfoResponse) SetErrMessage(v string) *QueryLeaseApplicationdetailinfoResponse {
	s.ErrMessage = &v
	return s
}

func (s *QueryLeaseApplicationdetailinfoResponse) SetResponseData(v string) *QueryLeaseApplicationdetailinfoResponse {
	s.ResponseData = &v
	return s
}

type SetLeaseRepaymentstatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 租赁机构金融科技租户Id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
	// 融资租赁对应的合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty"`
	// 融资租赁对应的订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// finish只能为0或1，0表示订单重置此状态下订单可以被再次操作【如清分记录上传、还款记录上传等】，1表示订单结束，在1的状态下不会再进行清分、还款记录上传等操作
	Finish *int64 `json:"finish,omitempty" xml:"finish,omitempty" require:"true"`
	// 原所有权人金融科技租户id
	OldOwnershipId *string `json:"old_ownership_id,omitempty" xml:"old_ownership_id,omitempty"`
	// 新所有权人租户id
	NewOwnershipId *string `json:"new_ownership_id,omitempty" xml:"new_ownership_id,omitempty"`
}

func (s SetLeaseRepaymentstatusRequest) String() string {
	return tea.Prettify(s)
}

func (s SetLeaseRepaymentstatusRequest) GoString() string {
	return s.String()
}

func (s *SetLeaseRepaymentstatusRequest) SetAuthToken(v string) *SetLeaseRepaymentstatusRequest {
	s.AuthToken = &v
	return s
}

func (s *SetLeaseRepaymentstatusRequest) SetProductInstanceId(v string) *SetLeaseRepaymentstatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *SetLeaseRepaymentstatusRequest) SetLeaseId(v string) *SetLeaseRepaymentstatusRequest {
	s.LeaseId = &v
	return s
}

func (s *SetLeaseRepaymentstatusRequest) SetApplicationId(v string) *SetLeaseRepaymentstatusRequest {
	s.ApplicationId = &v
	return s
}

func (s *SetLeaseRepaymentstatusRequest) SetOrderId(v string) *SetLeaseRepaymentstatusRequest {
	s.OrderId = &v
	return s
}

func (s *SetLeaseRepaymentstatusRequest) SetFinish(v int64) *SetLeaseRepaymentstatusRequest {
	s.Finish = &v
	return s
}

func (s *SetLeaseRepaymentstatusRequest) SetOldOwnershipId(v string) *SetLeaseRepaymentstatusRequest {
	s.OldOwnershipId = &v
	return s
}

func (s *SetLeaseRepaymentstatusRequest) SetNewOwnershipId(v string) *SetLeaseRepaymentstatusRequest {
	s.NewOwnershipId = &v
	return s
}

type SetLeaseRepaymentstatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态重置对应的链上交易哈希
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
	// 状态码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
}

func (s SetLeaseRepaymentstatusResponse) String() string {
	return tea.Prettify(s)
}

func (s SetLeaseRepaymentstatusResponse) GoString() string {
	return s.String()
}

func (s *SetLeaseRepaymentstatusResponse) SetReqMsgId(v string) *SetLeaseRepaymentstatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *SetLeaseRepaymentstatusResponse) SetResultCode(v string) *SetLeaseRepaymentstatusResponse {
	s.ResultCode = &v
	return s
}

func (s *SetLeaseRepaymentstatusResponse) SetResultMsg(v string) *SetLeaseRepaymentstatusResponse {
	s.ResultMsg = &v
	return s
}

func (s *SetLeaseRepaymentstatusResponse) SetResponseData(v string) *SetLeaseRepaymentstatusResponse {
	s.ResponseData = &v
	return s
}

func (s *SetLeaseRepaymentstatusResponse) SetCode(v int64) *SetLeaseRepaymentstatusResponse {
	s.Code = &v
	return s
}

func (s *SetLeaseRepaymentstatusResponse) SetErrMessage(v string) *SetLeaseRepaymentstatusResponse {
	s.ErrMessage = &v
	return s
}

type CreateLeaseSupplierinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 租赁方及资方定义的合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty" require:"true"`
	// 额外字段定义
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// 供应商发货的物流单号
	LogisticsOrderId *string `json:"logistics_order_id,omitempty" xml:"logistics_order_id,omitempty" require:"true"`
	// 用户的租赁订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 额外字段定义对应的阶段，请咨询对应的资方
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 采购订单id
	PurchaseOrderId *string `json:"purchase_order_id,omitempty" xml:"purchase_order_id,omitempty" require:"true"`
	// 产品详细信息
	SupplierProductList []*SupplierProductInfo `json:"supplier_product_list,omitempty" xml:"supplier_product_list,omitempty" require:"true" type:"Repeated"`
	// 1自有物流 2顺丰
	MaintainedBySupplier *int64 `json:"maintained_by_supplier,omitempty" xml:"maintained_by_supplier,omitempty" require:"true"`
	// 发货时间
	DeliverTime *string `json:"deliver_time,omitempty" xml:"deliver_time,omitempty" require:"true"`
}

func (s CreateLeaseSupplierinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseSupplierinfoRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseSupplierinfoRequest) SetAuthToken(v string) *CreateLeaseSupplierinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseSupplierinfoRequest) SetProductInstanceId(v string) *CreateLeaseSupplierinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseSupplierinfoRequest) SetApplicationId(v string) *CreateLeaseSupplierinfoRequest {
	s.ApplicationId = &v
	return s
}

func (s *CreateLeaseSupplierinfoRequest) SetExtraInfo(v string) *CreateLeaseSupplierinfoRequest {
	s.ExtraInfo = &v
	return s
}

func (s *CreateLeaseSupplierinfoRequest) SetLogisticsOrderId(v string) *CreateLeaseSupplierinfoRequest {
	s.LogisticsOrderId = &v
	return s
}

func (s *CreateLeaseSupplierinfoRequest) SetOrderId(v string) *CreateLeaseSupplierinfoRequest {
	s.OrderId = &v
	return s
}

func (s *CreateLeaseSupplierinfoRequest) SetPhase(v string) *CreateLeaseSupplierinfoRequest {
	s.Phase = &v
	return s
}

func (s *CreateLeaseSupplierinfoRequest) SetPurchaseOrderId(v string) *CreateLeaseSupplierinfoRequest {
	s.PurchaseOrderId = &v
	return s
}

func (s *CreateLeaseSupplierinfoRequest) SetSupplierProductList(v []*SupplierProductInfo) *CreateLeaseSupplierinfoRequest {
	s.SupplierProductList = v
	return s
}

func (s *CreateLeaseSupplierinfoRequest) SetMaintainedBySupplier(v int64) *CreateLeaseSupplierinfoRequest {
	s.MaintainedBySupplier = &v
	return s
}

func (s *CreateLeaseSupplierinfoRequest) SetDeliverTime(v string) *CreateLeaseSupplierinfoRequest {
	s.DeliverTime = &v
	return s
}

type CreateLeaseSupplierinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误码，0表示成功
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 供应商上传采购等相关信息对应的链上哈希
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s CreateLeaseSupplierinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseSupplierinfoResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseSupplierinfoResponse) SetReqMsgId(v string) *CreateLeaseSupplierinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseSupplierinfoResponse) SetResultCode(v string) *CreateLeaseSupplierinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseSupplierinfoResponse) SetResultMsg(v string) *CreateLeaseSupplierinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseSupplierinfoResponse) SetCode(v int64) *CreateLeaseSupplierinfoResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseSupplierinfoResponse) SetErrMessage(v string) *CreateLeaseSupplierinfoResponse {
	s.ErrMessage = &v
	return s
}

func (s *CreateLeaseSupplierinfoResponse) SetResponseData(v string) *CreateLeaseSupplierinfoResponse {
	s.ResponseData = &v
	return s
}

type DeployMytfTappRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// tappId
	TappId *string `json:"tapp_id,omitempty" xml:"tapp_id,omitempty" require:"true"`
}

func (s DeployMytfTappRequest) String() string {
	return tea.Prettify(s)
}

func (s DeployMytfTappRequest) GoString() string {
	return s.String()
}

func (s *DeployMytfTappRequest) SetAuthToken(v string) *DeployMytfTappRequest {
	s.AuthToken = &v
	return s
}

func (s *DeployMytfTappRequest) SetProductInstanceId(v string) *DeployMytfTappRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeployMytfTappRequest) SetTappId(v string) *DeployMytfTappRequest {
	s.TappId = &v
	return s
}

type DeployMytfTappResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s DeployMytfTappResponse) String() string {
	return tea.Prettify(s)
}

func (s DeployMytfTappResponse) GoString() string {
	return s.String()
}

func (s *DeployMytfTappResponse) SetReqMsgId(v string) *DeployMytfTappResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeployMytfTappResponse) SetResultCode(v string) *DeployMytfTappResponse {
	s.ResultCode = &v
	return s
}

func (s *DeployMytfTappResponse) SetResultMsg(v string) *DeployMytfTappResponse {
	s.ResultMsg = &v
	return s
}

type CreateLeaseSupplierdynamicinfoRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty" require:"true"`
	// 签收记录哈希，已签收需要必填
	ArriveConfirmHash *string `json:"arrive_confirm_hash,omitempty" xml:"arrive_confirm_hash,omitempty"`
	// 用户签收时间，格式为2019-8-31 12:00:00，已签收需要必填
	ArriveConfirmTime *string `json:"arrive_confirm_time,omitempty" xml:"arrive_confirm_time,omitempty"`
	// 签收记录存证哈希，已签收需要必填
	ArriveConfirmTxHash *string `json:"arrive_confirm_tx_hash,omitempty" xml:"arrive_confirm_tx_hash,omitempty"`
	// 签收记录对应的url，已签收需要必填
	ArriveConfirmUrl *string `json:"arrive_confirm_url,omitempty" xml:"arrive_confirm_url,omitempty"`
	// 物流状态额外信息
	ExtraInfo *string `json:"extra_info,omitempty" xml:"extra_info,omitempty"`
	// 物流状态，1.已发货 2运输中 3已签收 0其他
	LogisticStatus *string `json:"logistic_status,omitempty" xml:"logistic_status,omitempty" require:"true"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 阶段名称
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
}

func (s CreateLeaseSupplierdynamicinfoRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseSupplierdynamicinfoRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseSupplierdynamicinfoRequest) SetAuthToken(v string) *CreateLeaseSupplierdynamicinfoRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseSupplierdynamicinfoRequest) SetProductInstanceId(v string) *CreateLeaseSupplierdynamicinfoRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseSupplierdynamicinfoRequest) SetApplicationId(v string) *CreateLeaseSupplierdynamicinfoRequest {
	s.ApplicationId = &v
	return s
}

func (s *CreateLeaseSupplierdynamicinfoRequest) SetArriveConfirmHash(v string) *CreateLeaseSupplierdynamicinfoRequest {
	s.ArriveConfirmHash = &v
	return s
}

func (s *CreateLeaseSupplierdynamicinfoRequest) SetArriveConfirmTime(v string) *CreateLeaseSupplierdynamicinfoRequest {
	s.ArriveConfirmTime = &v
	return s
}

func (s *CreateLeaseSupplierdynamicinfoRequest) SetArriveConfirmTxHash(v string) *CreateLeaseSupplierdynamicinfoRequest {
	s.ArriveConfirmTxHash = &v
	return s
}

func (s *CreateLeaseSupplierdynamicinfoRequest) SetArriveConfirmUrl(v string) *CreateLeaseSupplierdynamicinfoRequest {
	s.ArriveConfirmUrl = &v
	return s
}

func (s *CreateLeaseSupplierdynamicinfoRequest) SetExtraInfo(v string) *CreateLeaseSupplierdynamicinfoRequest {
	s.ExtraInfo = &v
	return s
}

func (s *CreateLeaseSupplierdynamicinfoRequest) SetLogisticStatus(v string) *CreateLeaseSupplierdynamicinfoRequest {
	s.LogisticStatus = &v
	return s
}

func (s *CreateLeaseSupplierdynamicinfoRequest) SetOrderId(v string) *CreateLeaseSupplierdynamicinfoRequest {
	s.OrderId = &v
	return s
}

func (s *CreateLeaseSupplierdynamicinfoRequest) SetPhase(v string) *CreateLeaseSupplierdynamicinfoRequest {
	s.Phase = &v
	return s
}

type CreateLeaseSupplierdynamicinfoResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态码
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 链上哈希
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s CreateLeaseSupplierdynamicinfoResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseSupplierdynamicinfoResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseSupplierdynamicinfoResponse) SetReqMsgId(v string) *CreateLeaseSupplierdynamicinfoResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseSupplierdynamicinfoResponse) SetResultCode(v string) *CreateLeaseSupplierdynamicinfoResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseSupplierdynamicinfoResponse) SetResultMsg(v string) *CreateLeaseSupplierdynamicinfoResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseSupplierdynamicinfoResponse) SetCode(v int64) *CreateLeaseSupplierdynamicinfoResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseSupplierdynamicinfoResponse) SetErrMessage(v string) *CreateLeaseSupplierdynamicinfoResponse {
	s.ErrMessage = &v
	return s
}

func (s *CreateLeaseSupplierdynamicinfoResponse) SetResponseData(v string) *CreateLeaseSupplierdynamicinfoResponse {
	s.ResponseData = &v
	return s
}

type CreateLeaseBizRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 租赁订单相关内容，以json形式发送
	BizContent *string `json:"biz_content,omitempty" xml:"biz_content,omitempty" require:"true"`
	// 租赁订单所属阶段
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
	// 租赁订单操作类型
	OperationType *string `json:"operation_type,omitempty" xml:"operation_type,omitempty"`
}

func (s CreateLeaseBizRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseBizRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseBizRequest) SetAuthToken(v string) *CreateLeaseBizRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseBizRequest) SetProductInstanceId(v string) *CreateLeaseBizRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseBizRequest) SetBizContent(v string) *CreateLeaseBizRequest {
	s.BizContent = &v
	return s
}

func (s *CreateLeaseBizRequest) SetType(v string) *CreateLeaseBizRequest {
	s.Type = &v
	return s
}

func (s *CreateLeaseBizRequest) SetOperationType(v string) *CreateLeaseBizRequest {
	s.OperationType = &v
	return s
}

type CreateLeaseBizResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 租赁信息上链后，链上对应的txHash
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
	// 错误码
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 错误信息描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
}

func (s CreateLeaseBizResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseBizResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseBizResponse) SetReqMsgId(v string) *CreateLeaseBizResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseBizResponse) SetResultCode(v string) *CreateLeaseBizResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseBizResponse) SetResultMsg(v string) *CreateLeaseBizResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseBizResponse) SetResponseData(v string) *CreateLeaseBizResponse {
	s.ResponseData = &v
	return s
}

func (s *CreateLeaseBizResponse) SetCode(v string) *CreateLeaseBizResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseBizResponse) SetErrMessage(v string) *CreateLeaseBizResponse {
	s.ErrMessage = &v
	return s
}

type QueryLeaseProofRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务逻辑的订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 2020
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty" require:"true"`
}

func (s QueryLeaseProofRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseProofRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseProofRequest) SetAuthToken(v string) *QueryLeaseProofRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseProofRequest) SetProductInstanceId(v string) *QueryLeaseProofRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseProofRequest) SetOrderId(v string) *QueryLeaseProofRequest {
	s.OrderId = &v
	return s
}

func (s *QueryLeaseProofRequest) SetApplicationId(v string) *QueryLeaseProofRequest {
	s.ApplicationId = &v
	return s
}

type QueryLeaseProofResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 核验结果数据
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s QueryLeaseProofResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseProofResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseProofResponse) SetReqMsgId(v string) *QueryLeaseProofResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseProofResponse) SetResultCode(v string) *QueryLeaseProofResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseProofResponse) SetResultMsg(v string) *QueryLeaseProofResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseProofResponse) SetResponseData(v string) *QueryLeaseProofResponse {
	s.ResponseData = &v
	return s
}

type CreateLargefileRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 上传至中枢文件扩展服务后得到的文件ID
	FileId *string `json:"file_id,omitempty" xml:"file_id,omitempty" require:"true"`
	// 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 存证事务ID
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
	// 是否使用可信时间戳，默认为false
	Tsr *bool `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 存证文件名称
	NotaryName *string `json:"notary_name,omitempty" xml:"notary_name,omitempty" require:"true"`
	// 描述本条存证在存证事务中的阶段，用户可自行维护
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
}

func (s CreateLargefileRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLargefileRequest) GoString() string {
	return s.String()
}

func (s *CreateLargefileRequest) SetAuthToken(v string) *CreateLargefileRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLargefileRequest) SetProductInstanceId(v string) *CreateLargefileRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLargefileRequest) SetFileId(v string) *CreateLargefileRequest {
	s.FileId = &v
	return s
}

func (s *CreateLargefileRequest) SetLocation(v *Location) *CreateLargefileRequest {
	s.Location = v
	return s
}

func (s *CreateLargefileRequest) SetTransactionId(v string) *CreateLargefileRequest {
	s.TransactionId = &v
	return s
}

func (s *CreateLargefileRequest) SetTsr(v bool) *CreateLargefileRequest {
	s.Tsr = &v
	return s
}

func (s *CreateLargefileRequest) SetNotaryName(v string) *CreateLargefileRequest {
	s.NotaryName = &v
	return s
}

func (s *CreateLargefileRequest) SetPhase(v string) *CreateLargefileRequest {
	s.Phase = &v
	return s
}

func (s *CreateLargefileRequest) SetProperties(v string) *CreateLargefileRequest {
	s.Properties = &v
	return s
}

type CreateLargefileResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可信时间信息
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 存证凭证
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateLargefileResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLargefileResponse) GoString() string {
	return s.String()
}

func (s *CreateLargefileResponse) SetReqMsgId(v string) *CreateLargefileResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLargefileResponse) SetResultCode(v string) *CreateLargefileResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLargefileResponse) SetResultMsg(v string) *CreateLargefileResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLargefileResponse) SetTsr(v *TsrResponse) *CreateLargefileResponse {
	s.Tsr = v
	return s
}

func (s *CreateLargefileResponse) SetTxHash(v string) *CreateLargefileResponse {
	s.TxHash = &v
	return s
}

type QueryLeaseBizRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 租赁订单相关内容，以json形式发送
	BizContent *string `json:"biz_content,omitempty" xml:"biz_content,omitempty" require:"true"`
	// 租赁订单所属阶段
	Type *string `json:"type,omitempty" xml:"type,omitempty" require:"true"`
}

func (s QueryLeaseBizRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseBizRequest) GoString() string {
	return s.String()
}

func (s *QueryLeaseBizRequest) SetAuthToken(v string) *QueryLeaseBizRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryLeaseBizRequest) SetProductInstanceId(v string) *QueryLeaseBizRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryLeaseBizRequest) SetBizContent(v string) *QueryLeaseBizRequest {
	s.BizContent = &v
	return s
}

func (s *QueryLeaseBizRequest) SetType(v string) *QueryLeaseBizRequest {
	s.Type = &v
	return s
}

type QueryLeaseBizResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回的查询值
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s QueryLeaseBizResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLeaseBizResponse) GoString() string {
	return s.String()
}

func (s *QueryLeaseBizResponse) SetReqMsgId(v string) *QueryLeaseBizResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryLeaseBizResponse) SetResultCode(v string) *QueryLeaseBizResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryLeaseBizResponse) SetResultMsg(v string) *QueryLeaseBizResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryLeaseBizResponse) SetResponseData(v string) *QueryLeaseBizResponse {
	s.ResponseData = &v
	return s
}

type CreateLeaseBiznotaryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 要存证的文件哈希
	Hash *string `json:"hash,omitempty" xml:"hash,omitempty" require:"true"`
	// 租赁机构社会统一信用码
	LeaseCorpId *string `json:"lease_corp_id,omitempty" xml:"lease_corp_id,omitempty" require:"true"`
	// 租赁机构公司名称
	LeaseCorpName *string `json:"lease_corp_name,omitempty" xml:"lease_corp_name,omitempty" require:"true"`
	// 租赁机构法人姓名
	LeaseCorpOwnerName *string `json:"lease_corp_owner_name,omitempty" xml:"lease_corp_owner_name,omitempty" require:"true"`
	// 被代理机构金融科技租户id
	AgentLeaseId *string `json:"agent_lease_id,omitempty" xml:"agent_lease_id,omitempty"`
	// 模式，代理模式为isvMode
	Mode *string `json:"mode,omitempty" xml:"mode,omitempty"`
}

func (s CreateLeaseBiznotaryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseBiznotaryRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseBiznotaryRequest) SetAuthToken(v string) *CreateLeaseBiznotaryRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseBiznotaryRequest) SetProductInstanceId(v string) *CreateLeaseBiznotaryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseBiznotaryRequest) SetHash(v string) *CreateLeaseBiznotaryRequest {
	s.Hash = &v
	return s
}

func (s *CreateLeaseBiznotaryRequest) SetLeaseCorpId(v string) *CreateLeaseBiznotaryRequest {
	s.LeaseCorpId = &v
	return s
}

func (s *CreateLeaseBiznotaryRequest) SetLeaseCorpName(v string) *CreateLeaseBiznotaryRequest {
	s.LeaseCorpName = &v
	return s
}

func (s *CreateLeaseBiznotaryRequest) SetLeaseCorpOwnerName(v string) *CreateLeaseBiznotaryRequest {
	s.LeaseCorpOwnerName = &v
	return s
}

func (s *CreateLeaseBiznotaryRequest) SetAgentLeaseId(v string) *CreateLeaseBiznotaryRequest {
	s.AgentLeaseId = &v
	return s
}

func (s *CreateLeaseBiznotaryRequest) SetMode(v string) *CreateLeaseBiznotaryRequest {
	s.Mode = &v
	return s
}

type CreateLeaseBiznotaryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否租赁宝存证哈希成功，成功则为0，否则不为0
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 错误码具体详情
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
}

func (s CreateLeaseBiznotaryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseBiznotaryResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseBiznotaryResponse) SetReqMsgId(v string) *CreateLeaseBiznotaryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseBiznotaryResponse) SetResultCode(v string) *CreateLeaseBiznotaryResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseBiznotaryResponse) SetResultMsg(v string) *CreateLeaseBiznotaryResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseBiznotaryResponse) SetCode(v int64) *CreateLeaseBiznotaryResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseBiznotaryResponse) SetErrMessage(v string) *CreateLeaseBiznotaryResponse {
	s.ErrMessage = &v
	return s
}

type CreateInternalContractRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 签署结束信息，phase为FINISH时必选
	FinishInfo *ContractNotaryFinishInfo `json:"finish_info,omitempty" xml:"finish_info,omitempty"`
	// 签署流程ID
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 签署发起信息，phase为INIT时必选
	InitInfo *ContractNotaryInitInfo `json:"init_info,omitempty" xml:"init_info,omitempty"`
	// 存证阶段，分为INIT(发起)，SIGN(签署)，FINISH(结束)，DOCUMENT(正式合同文件)，DEDUCT_CANCEL(代扣计划取消)，DEDUCT_EXECUTION(代扣计划执行)，DEDUCT_PLAN(代扣计划保存)，DEDUCT_REFUND(代扣计划退款)
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 签署过程信息，phase为SIGN时必选
	SignInfo *ContractNotarySignInfo `json:"sign_info,omitempty" xml:"sign_info,omitempty"`
	// 存证事务ID
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
	// 签署文件存档阶段存证核验信息
	DocumentInfo *ContractNotaryDocumentInfo `json:"document_info,omitempty" xml:"document_info,omitempty"`
	// 电子合同代扣计划取消操作信息
	CancelInfo *ContractNotaryDeductCancelInfo `json:"cancel_info,omitempty" xml:"cancel_info,omitempty"`
	// 电子合同存证代扣计划执行操作信息
	ExecutionInfo *ContractNotaryDeductExecutionInfo `json:"execution_info,omitempty" xml:"execution_info,omitempty"`
	// 电子合同存证代扣计划信息
	PlanInfo *ContractNotaryDeductPlanInfo `json:"plan_info,omitempty" xml:"plan_info,omitempty"`
	// 电子合同存证代扣计划退款信息
	RefundInfo *ContractNotaryDeductRefundInfo `json:"refund_info,omitempty" xml:"refund_info,omitempty"`
}

func (s CreateInternalContractRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateInternalContractRequest) GoString() string {
	return s.String()
}

func (s *CreateInternalContractRequest) SetAuthToken(v string) *CreateInternalContractRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateInternalContractRequest) SetProductInstanceId(v string) *CreateInternalContractRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateInternalContractRequest) SetFinishInfo(v *ContractNotaryFinishInfo) *CreateInternalContractRequest {
	s.FinishInfo = v
	return s
}

func (s *CreateInternalContractRequest) SetFlowId(v string) *CreateInternalContractRequest {
	s.FlowId = &v
	return s
}

func (s *CreateInternalContractRequest) SetInitInfo(v *ContractNotaryInitInfo) *CreateInternalContractRequest {
	s.InitInfo = v
	return s
}

func (s *CreateInternalContractRequest) SetPhase(v string) *CreateInternalContractRequest {
	s.Phase = &v
	return s
}

func (s *CreateInternalContractRequest) SetSignInfo(v *ContractNotarySignInfo) *CreateInternalContractRequest {
	s.SignInfo = v
	return s
}

func (s *CreateInternalContractRequest) SetTransactionId(v string) *CreateInternalContractRequest {
	s.TransactionId = &v
	return s
}

func (s *CreateInternalContractRequest) SetDocumentInfo(v *ContractNotaryDocumentInfo) *CreateInternalContractRequest {
	s.DocumentInfo = v
	return s
}

func (s *CreateInternalContractRequest) SetCancelInfo(v *ContractNotaryDeductCancelInfo) *CreateInternalContractRequest {
	s.CancelInfo = v
	return s
}

func (s *CreateInternalContractRequest) SetExecutionInfo(v *ContractNotaryDeductExecutionInfo) *CreateInternalContractRequest {
	s.ExecutionInfo = v
	return s
}

func (s *CreateInternalContractRequest) SetPlanInfo(v *ContractNotaryDeductPlanInfo) *CreateInternalContractRequest {
	s.PlanInfo = v
	return s
}

func (s *CreateInternalContractRequest) SetRefundInfo(v *ContractNotaryDeductRefundInfo) *CreateInternalContractRequest {
	s.RefundInfo = v
	return s
}

type CreateInternalContractResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证凭据
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateInternalContractResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateInternalContractResponse) GoString() string {
	return s.String()
}

func (s *CreateInternalContractResponse) SetReqMsgId(v string) *CreateInternalContractResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateInternalContractResponse) SetResultCode(v string) *CreateInternalContractResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateInternalContractResponse) SetResultMsg(v string) *CreateInternalContractResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateInternalContractResponse) SetTxHash(v string) *CreateInternalContractResponse {
	s.TxHash = &v
	return s
}

type CreateLeaseZftagreementsignRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty" require:"true"`
	// 网商直付通代扣协议号
	AgreementNo *string `json:"agreement_no,omitempty" xml:"agreement_no,omitempty" require:"true"`
	// 实际签署协议的用户支付宝uid
	AlipayUserId *string `json:"alipay_user_id,omitempty" xml:"alipay_user_id,omitempty"`
	// 签署时间
	SignTime *string `json:"sign_time,omitempty" xml:"sign_time,omitempty"`
	// 协议生效时间
	ValidTime *string `json:"valid_time,omitempty" xml:"valid_time,omitempty"`
	// 协议失效时间
	InvalidTime *string `json:"invalid_time,omitempty" xml:"invalid_time,omitempty"`
	// 租赁方金融科技租户id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
	// 核验结果，1表示通过，-1表示不通过
	AgreementStatus *int64 `json:"agreement_status,omitempty" xml:"agreement_status,omitempty" require:"true"`
	// 租赁机构支付宝uid
	LeaseCorpAlipayUid *string `json:"lease_corp_alipay_uid,omitempty" xml:"lease_corp_alipay_uid,omitempty"`
	// 直付通代扣协议核验结果说明
	FailMessage *string `json:"fail_message,omitempty" xml:"fail_message,omitempty"`
}

func (s CreateLeaseZftagreementsignRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseZftagreementsignRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseZftagreementsignRequest) SetAuthToken(v string) *CreateLeaseZftagreementsignRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseZftagreementsignRequest) SetProductInstanceId(v string) *CreateLeaseZftagreementsignRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseZftagreementsignRequest) SetOrderId(v string) *CreateLeaseZftagreementsignRequest {
	s.OrderId = &v
	return s
}

func (s *CreateLeaseZftagreementsignRequest) SetApplicationId(v string) *CreateLeaseZftagreementsignRequest {
	s.ApplicationId = &v
	return s
}

func (s *CreateLeaseZftagreementsignRequest) SetAgreementNo(v string) *CreateLeaseZftagreementsignRequest {
	s.AgreementNo = &v
	return s
}

func (s *CreateLeaseZftagreementsignRequest) SetAlipayUserId(v string) *CreateLeaseZftagreementsignRequest {
	s.AlipayUserId = &v
	return s
}

func (s *CreateLeaseZftagreementsignRequest) SetSignTime(v string) *CreateLeaseZftagreementsignRequest {
	s.SignTime = &v
	return s
}

func (s *CreateLeaseZftagreementsignRequest) SetValidTime(v string) *CreateLeaseZftagreementsignRequest {
	s.ValidTime = &v
	return s
}

func (s *CreateLeaseZftagreementsignRequest) SetInvalidTime(v string) *CreateLeaseZftagreementsignRequest {
	s.InvalidTime = &v
	return s
}

func (s *CreateLeaseZftagreementsignRequest) SetLeaseId(v string) *CreateLeaseZftagreementsignRequest {
	s.LeaseId = &v
	return s
}

func (s *CreateLeaseZftagreementsignRequest) SetAgreementStatus(v int64) *CreateLeaseZftagreementsignRequest {
	s.AgreementStatus = &v
	return s
}

func (s *CreateLeaseZftagreementsignRequest) SetLeaseCorpAlipayUid(v string) *CreateLeaseZftagreementsignRequest {
	s.LeaseCorpAlipayUid = &v
	return s
}

func (s *CreateLeaseZftagreementsignRequest) SetFailMessage(v string) *CreateLeaseZftagreementsignRequest {
	s.FailMessage = &v
	return s
}

type CreateLeaseZftagreementsignResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误码描述
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 错误码
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 协议上链哈希
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s CreateLeaseZftagreementsignResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseZftagreementsignResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseZftagreementsignResponse) SetReqMsgId(v string) *CreateLeaseZftagreementsignResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseZftagreementsignResponse) SetResultCode(v string) *CreateLeaseZftagreementsignResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseZftagreementsignResponse) SetResultMsg(v string) *CreateLeaseZftagreementsignResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseZftagreementsignResponse) SetErrMessage(v string) *CreateLeaseZftagreementsignResponse {
	s.ErrMessage = &v
	return s
}

func (s *CreateLeaseZftagreementsignResponse) SetCode(v int64) *CreateLeaseZftagreementsignResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseZftagreementsignResponse) SetResponseData(v string) *CreateLeaseZftagreementsignResponse {
	s.ResponseData = &v
	return s
}

type CreateLeaseZftagreementunsignRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
	// 合约id
	ApplicationId *string `json:"application_id,omitempty" xml:"application_id,omitempty" require:"true"`
	// 租赁方金融科技租户id
	LeaseId *string `json:"lease_id,omitempty" xml:"lease_id,omitempty" require:"true"`
	// 直付通网商模式代扣协议号
	AgreementNo *string `json:"agreement_no,omitempty" xml:"agreement_no,omitempty" require:"true"`
	// 直付通代扣协议解约时间
	UnsignTime *string `json:"unsign_time,omitempty" xml:"unsign_time,omitempty" require:"true"`
}

func (s CreateLeaseZftagreementunsignRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseZftagreementunsignRequest) GoString() string {
	return s.String()
}

func (s *CreateLeaseZftagreementunsignRequest) SetAuthToken(v string) *CreateLeaseZftagreementunsignRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateLeaseZftagreementunsignRequest) SetProductInstanceId(v string) *CreateLeaseZftagreementunsignRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateLeaseZftagreementunsignRequest) SetOrderId(v string) *CreateLeaseZftagreementunsignRequest {
	s.OrderId = &v
	return s
}

func (s *CreateLeaseZftagreementunsignRequest) SetApplicationId(v string) *CreateLeaseZftagreementunsignRequest {
	s.ApplicationId = &v
	return s
}

func (s *CreateLeaseZftagreementunsignRequest) SetLeaseId(v string) *CreateLeaseZftagreementunsignRequest {
	s.LeaseId = &v
	return s
}

func (s *CreateLeaseZftagreementunsignRequest) SetAgreementNo(v string) *CreateLeaseZftagreementunsignRequest {
	s.AgreementNo = &v
	return s
}

func (s *CreateLeaseZftagreementunsignRequest) SetUnsignTime(v string) *CreateLeaseZftagreementunsignRequest {
	s.UnsignTime = &v
	return s
}

type CreateLeaseZftagreementunsignResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 错误码描述信息
	ErrMessage *string `json:"err_message,omitempty" xml:"err_message,omitempty"`
	// 错误码
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 网商直付通解约链上哈希
	ResponseData *string `json:"response_data,omitempty" xml:"response_data,omitempty"`
}

func (s CreateLeaseZftagreementunsignResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLeaseZftagreementunsignResponse) GoString() string {
	return s.String()
}

func (s *CreateLeaseZftagreementunsignResponse) SetReqMsgId(v string) *CreateLeaseZftagreementunsignResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateLeaseZftagreementunsignResponse) SetResultCode(v string) *CreateLeaseZftagreementunsignResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateLeaseZftagreementunsignResponse) SetResultMsg(v string) *CreateLeaseZftagreementunsignResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateLeaseZftagreementunsignResponse) SetErrMessage(v string) *CreateLeaseZftagreementunsignResponse {
	s.ErrMessage = &v
	return s
}

func (s *CreateLeaseZftagreementunsignResponse) SetCode(v int64) *CreateLeaseZftagreementunsignResponse {
	s.Code = &v
	return s
}

func (s *CreateLeaseZftagreementunsignResponse) SetResponseData(v string) *CreateLeaseZftagreementunsignResponse {
	s.ResponseData = &v
	return s
}

type GetCertificateDetailRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证哈希地址
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
}

func (s GetCertificateDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCertificateDetailRequest) GoString() string {
	return s.String()
}

func (s *GetCertificateDetailRequest) SetAuthToken(v string) *GetCertificateDetailRequest {
	s.AuthToken = &v
	return s
}

func (s *GetCertificateDetailRequest) SetProductInstanceId(v string) *GetCertificateDetailRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetCertificateDetailRequest) SetTxHash(v string) *GetCertificateDetailRequest {
	s.TxHash = &v
	return s
}

type GetCertificateDetailResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证证明下载地址
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
	// 状态值
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// 状态信息描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s GetCertificateDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCertificateDetailResponse) GoString() string {
	return s.String()
}

func (s *GetCertificateDetailResponse) SetReqMsgId(v string) *GetCertificateDetailResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetCertificateDetailResponse) SetResultCode(v string) *GetCertificateDetailResponse {
	s.ResultCode = &v
	return s
}

func (s *GetCertificateDetailResponse) SetResultMsg(v string) *GetCertificateDetailResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetCertificateDetailResponse) SetUrl(v string) *GetCertificateDetailResponse {
	s.Url = &v
	return s
}

func (s *GetCertificateDetailResponse) SetCode(v int64) *GetCertificateDetailResponse {
	s.Code = &v
	return s
}

func (s *GetCertificateDetailResponse) SetMessage(v string) *GetCertificateDetailResponse {
	s.Message = &v
	return s
}

type GetInternalTextRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 描述本条存证在存证事务中的阶段，用户可自行维护
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 存证事务id
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty"`
	// 存证凭据
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
	// 租户
	RealTenant *string `json:"real_tenant,omitempty" xml:"real_tenant,omitempty"`
	// 授权码
	AuthCode *string `json:"auth_code,omitempty" xml:"auth_code,omitempty"`
	// 产品码
	Product *string `json:"product,omitempty" xml:"product,omitempty"`
}

func (s GetInternalTextRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInternalTextRequest) GoString() string {
	return s.String()
}

func (s *GetInternalTextRequest) SetAuthToken(v string) *GetInternalTextRequest {
	s.AuthToken = &v
	return s
}

func (s *GetInternalTextRequest) SetProductInstanceId(v string) *GetInternalTextRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetInternalTextRequest) SetLocation(v *Location) *GetInternalTextRequest {
	s.Location = v
	return s
}

func (s *GetInternalTextRequest) SetPhase(v string) *GetInternalTextRequest {
	s.Phase = &v
	return s
}

func (s *GetInternalTextRequest) SetProperties(v string) *GetInternalTextRequest {
	s.Properties = &v
	return s
}

func (s *GetInternalTextRequest) SetTransactionId(v string) *GetInternalTextRequest {
	s.TransactionId = &v
	return s
}

func (s *GetInternalTextRequest) SetTxHash(v string) *GetInternalTextRequest {
	s.TxHash = &v
	return s
}

func (s *GetInternalTextRequest) SetRealTenant(v string) *GetInternalTextRequest {
	s.RealTenant = &v
	return s
}

func (s *GetInternalTextRequest) SetAuthCode(v string) *GetInternalTextRequest {
	s.AuthCode = &v
	return s
}

func (s *GetInternalTextRequest) SetProduct(v string) *GetInternalTextRequest {
	s.Product = &v
	return s
}

type GetInternalTextResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证信息
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// 可信信息
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 文本存证类型
	TextNotaryType *string `json:"text_notary_type,omitempty" xml:"text_notary_type,omitempty"`
	// 哈希算法
	HashAlgorithm *string `json:"hash_algorithm,omitempty" xml:"hash_algorithm,omitempty"`
}

func (s GetInternalTextResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInternalTextResponse) GoString() string {
	return s.String()
}

func (s *GetInternalTextResponse) SetReqMsgId(v string) *GetInternalTextResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetInternalTextResponse) SetResultCode(v string) *GetInternalTextResponse {
	s.ResultCode = &v
	return s
}

func (s *GetInternalTextResponse) SetResultMsg(v string) *GetInternalTextResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetInternalTextResponse) SetContent(v string) *GetInternalTextResponse {
	s.Content = &v
	return s
}

func (s *GetInternalTextResponse) SetTsr(v *TsrResponse) *GetInternalTextResponse {
	s.Tsr = v
	return s
}

func (s *GetInternalTextResponse) SetTextNotaryType(v string) *GetInternalTextResponse {
	s.TextNotaryType = &v
	return s
}

func (s *GetInternalTextResponse) SetHashAlgorithm(v string) *GetInternalTextResponse {
	s.HashAlgorithm = &v
	return s
}

type OpenInternalTwcRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 授权开通的租户ID
	TenantId *string `json:"tenant_id,omitempty" xml:"tenant_id,omitempty" require:"true"`
	// 授权开通的产品码
	Product *string `json:"product,omitempty" xml:"product,omitempty" require:"true"`
	// 授权开通的行业类型（版权/租赁）
	CustomerBizId *string `json:"customer_biz_id,omitempty" xml:"customer_biz_id,omitempty" require:"true"`
	// 授权码
	AuthCode *string `json:"auth_code,omitempty" xml:"auth_code,omitempty" require:"true"`
}

func (s OpenInternalTwcRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenInternalTwcRequest) GoString() string {
	return s.String()
}

func (s *OpenInternalTwcRequest) SetAuthToken(v string) *OpenInternalTwcRequest {
	s.AuthToken = &v
	return s
}

func (s *OpenInternalTwcRequest) SetProductInstanceId(v string) *OpenInternalTwcRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *OpenInternalTwcRequest) SetTenantId(v string) *OpenInternalTwcRequest {
	s.TenantId = &v
	return s
}

func (s *OpenInternalTwcRequest) SetProduct(v string) *OpenInternalTwcRequest {
	s.Product = &v
	return s
}

func (s *OpenInternalTwcRequest) SetCustomerBizId(v string) *OpenInternalTwcRequest {
	s.CustomerBizId = &v
	return s
}

func (s *OpenInternalTwcRequest) SetAuthCode(v string) *OpenInternalTwcRequest {
	s.AuthCode = &v
	return s
}

type OpenInternalTwcResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 状态值
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// 状态信息描述
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s OpenInternalTwcResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenInternalTwcResponse) GoString() string {
	return s.String()
}

func (s *OpenInternalTwcResponse) SetReqMsgId(v string) *OpenInternalTwcResponse {
	s.ReqMsgId = &v
	return s
}

func (s *OpenInternalTwcResponse) SetResultCode(v string) *OpenInternalTwcResponse {
	s.ResultCode = &v
	return s
}

func (s *OpenInternalTwcResponse) SetResultMsg(v string) *OpenInternalTwcResponse {
	s.ResultMsg = &v
	return s
}

func (s *OpenInternalTwcResponse) SetCode(v string) *OpenInternalTwcResponse {
	s.Code = &v
	return s
}

func (s *OpenInternalTwcResponse) SetMessage(v string) *OpenInternalTwcResponse {
	s.Message = &v
	return s
}

type CreateSpecifyTransRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证关联实体（个人/企业）的身份识别信息
	Customer *Identity `json:"customer,omitempty" xml:"customer,omitempty" require:"true"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 业务子类型标识
	SubBizId *string `json:"sub_biz_id,omitempty" xml:"sub_biz_id,omitempty"`
	// 是否使用可信时间戳，默认为false
	Tsr *bool `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 链账户名称
	ChainAccount *string `json:"chain_account,omitempty" xml:"chain_account,omitempty" require:"true"`
	// 指定的上链节点ip
	NodeIp *string `json:"node_ip,omitempty" xml:"node_ip,omitempty"`
}

func (s CreateSpecifyTransRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSpecifyTransRequest) GoString() string {
	return s.String()
}

func (s *CreateSpecifyTransRequest) SetAuthToken(v string) *CreateSpecifyTransRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSpecifyTransRequest) SetProductInstanceId(v string) *CreateSpecifyTransRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSpecifyTransRequest) SetCustomer(v *Identity) *CreateSpecifyTransRequest {
	s.Customer = v
	return s
}

func (s *CreateSpecifyTransRequest) SetProperties(v string) *CreateSpecifyTransRequest {
	s.Properties = &v
	return s
}

func (s *CreateSpecifyTransRequest) SetSubBizId(v string) *CreateSpecifyTransRequest {
	s.SubBizId = &v
	return s
}

func (s *CreateSpecifyTransRequest) SetTsr(v bool) *CreateSpecifyTransRequest {
	s.Tsr = &v
	return s
}

func (s *CreateSpecifyTransRequest) SetChainAccount(v string) *CreateSpecifyTransRequest {
	s.ChainAccount = &v
	return s
}

func (s *CreateSpecifyTransRequest) SetNodeIp(v string) *CreateSpecifyTransRequest {
	s.NodeIp = &v
	return s
}

type CreateSpecifyTransResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回事务ID，全局唯一
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty"`
	// 可信时间信息
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
}

func (s CreateSpecifyTransResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSpecifyTransResponse) GoString() string {
	return s.String()
}

func (s *CreateSpecifyTransResponse) SetReqMsgId(v string) *CreateSpecifyTransResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSpecifyTransResponse) SetResultCode(v string) *CreateSpecifyTransResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSpecifyTransResponse) SetResultMsg(v string) *CreateSpecifyTransResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateSpecifyTransResponse) SetTransactionId(v string) *CreateSpecifyTransResponse {
	s.TransactionId = &v
	return s
}

func (s *CreateSpecifyTransResponse) SetTsr(v *TsrResponse) *CreateSpecifyTransResponse {
	s.Tsr = v
	return s
}

type CreateSpecifyTextRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证地点(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 存证内容
	NotaryContent *string `json:"notary_content,omitempty" xml:"notary_content,omitempty" require:"true"`
	// 描述本条存证在存证事务中的阶段，用户可自行维护
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 存证事务id
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
	// 是否使用可信时间戳，默认为false
	Tsr *bool `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 文本存证类型，支持源文本/文本哈希
	TextNotaryType *string `json:"text_notary_type,omitempty" xml:"text_notary_type,omitempty"`
	// 哈希算法，目前仅支持 SHA256
	HashAlgorithm *string `json:"hash_algorithm,omitempty" xml:"hash_algorithm,omitempty"`
	// 链账户名称
	ChainAccount *string `json:"chain_account,omitempty" xml:"chain_account,omitempty" require:"true"`
	// 指定上链的节点ip，固定只能传一个，不传则按照链账号绑定ip随机上链
	NodeIp *string `json:"node_ip,omitempty" xml:"node_ip,omitempty"`
}

func (s CreateSpecifyTextRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSpecifyTextRequest) GoString() string {
	return s.String()
}

func (s *CreateSpecifyTextRequest) SetAuthToken(v string) *CreateSpecifyTextRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateSpecifyTextRequest) SetProductInstanceId(v string) *CreateSpecifyTextRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateSpecifyTextRequest) SetLocation(v *Location) *CreateSpecifyTextRequest {
	s.Location = v
	return s
}

func (s *CreateSpecifyTextRequest) SetNotaryContent(v string) *CreateSpecifyTextRequest {
	s.NotaryContent = &v
	return s
}

func (s *CreateSpecifyTextRequest) SetPhase(v string) *CreateSpecifyTextRequest {
	s.Phase = &v
	return s
}

func (s *CreateSpecifyTextRequest) SetProperties(v string) *CreateSpecifyTextRequest {
	s.Properties = &v
	return s
}

func (s *CreateSpecifyTextRequest) SetTransactionId(v string) *CreateSpecifyTextRequest {
	s.TransactionId = &v
	return s
}

func (s *CreateSpecifyTextRequest) SetTsr(v bool) *CreateSpecifyTextRequest {
	s.Tsr = &v
	return s
}

func (s *CreateSpecifyTextRequest) SetTextNotaryType(v string) *CreateSpecifyTextRequest {
	s.TextNotaryType = &v
	return s
}

func (s *CreateSpecifyTextRequest) SetHashAlgorithm(v string) *CreateSpecifyTextRequest {
	s.HashAlgorithm = &v
	return s
}

func (s *CreateSpecifyTextRequest) SetChainAccount(v string) *CreateSpecifyTextRequest {
	s.ChainAccount = &v
	return s
}

func (s *CreateSpecifyTextRequest) SetNodeIp(v string) *CreateSpecifyTextRequest {
	s.NodeIp = &v
	return s
}

type CreateSpecifyTextResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 可信时间信息
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 存证凭据
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateSpecifyTextResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSpecifyTextResponse) GoString() string {
	return s.String()
}

func (s *CreateSpecifyTextResponse) SetReqMsgId(v string) *CreateSpecifyTextResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateSpecifyTextResponse) SetResultCode(v string) *CreateSpecifyTextResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateSpecifyTextResponse) SetResultMsg(v string) *CreateSpecifyTextResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateSpecifyTextResponse) SetTsr(v *TsrResponse) *CreateSpecifyTextResponse {
	s.Tsr = v
	return s
}

func (s *CreateSpecifyTextResponse) SetTxHash(v string) *CreateSpecifyTextResponse {
	s.TxHash = &v
	return s
}

type CreateInternalFileRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证事务id
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
	// 描述本条存证在存证事务中的阶段，用户可自行维护
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 存证文件内容，对文件内容做base64编码后得到。例如FILE_RAW模式下，文件内容为“test”，那么base64编码后的结果则为“dGVzdA==”。如果是FILE_HASh模式，则该字段直接为文件hash。
	NotaryFile *string `json:"notary_file,omitempty" xml:"notary_file,omitempty" require:"true"`
	// 存证文件名称
	NotaryName *string `json:"notary_name,omitempty" xml:"notary_name,omitempty" require:"true"`
	// 文件存证模式，目前仅支持 FILE_RAW(文件原文内容) 和 FILE_HASH(文件hash)，建议填写，不填默认是FILE_RAW
	FileNotaryType *string `json:"file_notary_type,omitempty" xml:"file_notary_type,omitempty"`
	// 哈希算法，当 fileNotaryType 为 FILE_HASH 时填写，目前仅支持 SHA256
	HashAlgorithm *string `json:"hash_algorithm,omitempty" xml:"hash_algorithm,omitempty"`
	// 是否使用可信时间戳，默认为false
	Tsr *bool `json:"tsr,omitempty" xml:"tsr,omitempty"`
	// 存证地点信息(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 代理客户存证时，实际用户的租户ID
	RealTenant *string `json:"real_tenant,omitempty" xml:"real_tenant,omitempty"`
	// 授权码
	AuthCode *string `json:"auth_code,omitempty" xml:"auth_code,omitempty"`
	// 授权码对应产品码
	Product *string `json:"product,omitempty" xml:"product,omitempty"`
}

func (s CreateInternalFileRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateInternalFileRequest) GoString() string {
	return s.String()
}

func (s *CreateInternalFileRequest) SetAuthToken(v string) *CreateInternalFileRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateInternalFileRequest) SetProductInstanceId(v string) *CreateInternalFileRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateInternalFileRequest) SetTransactionId(v string) *CreateInternalFileRequest {
	s.TransactionId = &v
	return s
}

func (s *CreateInternalFileRequest) SetPhase(v string) *CreateInternalFileRequest {
	s.Phase = &v
	return s
}

func (s *CreateInternalFileRequest) SetNotaryFile(v string) *CreateInternalFileRequest {
	s.NotaryFile = &v
	return s
}

func (s *CreateInternalFileRequest) SetNotaryName(v string) *CreateInternalFileRequest {
	s.NotaryName = &v
	return s
}

func (s *CreateInternalFileRequest) SetFileNotaryType(v string) *CreateInternalFileRequest {
	s.FileNotaryType = &v
	return s
}

func (s *CreateInternalFileRequest) SetHashAlgorithm(v string) *CreateInternalFileRequest {
	s.HashAlgorithm = &v
	return s
}

func (s *CreateInternalFileRequest) SetTsr(v bool) *CreateInternalFileRequest {
	s.Tsr = &v
	return s
}

func (s *CreateInternalFileRequest) SetLocation(v *Location) *CreateInternalFileRequest {
	s.Location = v
	return s
}

func (s *CreateInternalFileRequest) SetProperties(v string) *CreateInternalFileRequest {
	s.Properties = &v
	return s
}

func (s *CreateInternalFileRequest) SetRealTenant(v string) *CreateInternalFileRequest {
	s.RealTenant = &v
	return s
}

func (s *CreateInternalFileRequest) SetAuthCode(v string) *CreateInternalFileRequest {
	s.AuthCode = &v
	return s
}

func (s *CreateInternalFileRequest) SetProduct(v string) *CreateInternalFileRequest {
	s.Product = &v
	return s
}

type CreateInternalFileResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证凭据，存证交易Hash值
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
	// 可信时间信息
	Tsr *TsrResponse `json:"tsr,omitempty" xml:"tsr,omitempty"`
}

func (s CreateInternalFileResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateInternalFileResponse) GoString() string {
	return s.String()
}

func (s *CreateInternalFileResponse) SetReqMsgId(v string) *CreateInternalFileResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateInternalFileResponse) SetResultCode(v string) *CreateInternalFileResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateInternalFileResponse) SetResultMsg(v string) *CreateInternalFileResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateInternalFileResponse) SetTxHash(v string) *CreateInternalFileResponse {
	s.TxHash = &v
	return s
}

func (s *CreateInternalFileResponse) SetTsr(v *TsrResponse) *CreateInternalFileResponse {
	s.Tsr = v
	return s
}

type GetInternalFileRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证凭据，需要先调用内部文本存证接口twc.notary.internal.file.create创建存证
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
	// 描述本条存证在存证事务中的阶段，用户可自行维护
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty"`
	// 存证事务id，通过twc.notary.internal.trans.create(创建存证事务)获得
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty"`
	// 存证地点信息(如手机硬件ID，Wi-Fi地址，GPS位置，IP地址)
	Location *Location `json:"location,omitempty" xml:"location,omitempty"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 代理客户存证时，实际用户的租户ID
	RealTenant *string `json:"real_tenant,omitempty" xml:"real_tenant,omitempty"`
	// 授权码
	//
	AuthCode *string `json:"auth_code,omitempty" xml:"auth_code,omitempty"`
	// 授权码对应产品码
	Product *string `json:"product,omitempty" xml:"product,omitempty"`
}

func (s GetInternalFileRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInternalFileRequest) GoString() string {
	return s.String()
}

func (s *GetInternalFileRequest) SetAuthToken(v string) *GetInternalFileRequest {
	s.AuthToken = &v
	return s
}

func (s *GetInternalFileRequest) SetProductInstanceId(v string) *GetInternalFileRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetInternalFileRequest) SetTxHash(v string) *GetInternalFileRequest {
	s.TxHash = &v
	return s
}

func (s *GetInternalFileRequest) SetPhase(v string) *GetInternalFileRequest {
	s.Phase = &v
	return s
}

func (s *GetInternalFileRequest) SetTransactionId(v string) *GetInternalFileRequest {
	s.TransactionId = &v
	return s
}

func (s *GetInternalFileRequest) SetLocation(v *Location) *GetInternalFileRequest {
	s.Location = v
	return s
}

func (s *GetInternalFileRequest) SetProperties(v string) *GetInternalFileRequest {
	s.Properties = &v
	return s
}

func (s *GetInternalFileRequest) SetRealTenant(v string) *GetInternalFileRequest {
	s.RealTenant = &v
	return s
}

func (s *GetInternalFileRequest) SetAuthCode(v string) *GetInternalFileRequest {
	s.AuthCode = &v
	return s
}

func (s *GetInternalFileRequest) SetProduct(v string) *GetInternalFileRequest {
	s.Product = &v
	return s
}

type GetInternalFileResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 文件存证模式，FILE_RAW(文件原文内容) 和 FILE_HASH(文件hash)
	FileNotaryType *string `json:"file_notary_type,omitempty" xml:"file_notary_type,omitempty"`
	// 文件下载地址，当fileNotaryType 为 FILE_RAW 时才有此值，下载链接有效期1个小时
	OssPath *string `json:"oss_path,omitempty" xml:"oss_path,omitempty"`
	// 文件哈希，当 fileNotaryType 为 FILE_HASH 时才有此值
	FileHash *string `json:"file_hash,omitempty" xml:"file_hash,omitempty"`
	// 哈希算法，当 fileNotaryType 为 FILE_HASH 时，此返回值才有效
	HashAlgorithm *string `json:"hash_algorithm,omitempty" xml:"hash_algorithm,omitempty"`
}

func (s GetInternalFileResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInternalFileResponse) GoString() string {
	return s.String()
}

func (s *GetInternalFileResponse) SetReqMsgId(v string) *GetInternalFileResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetInternalFileResponse) SetResultCode(v string) *GetInternalFileResponse {
	s.ResultCode = &v
	return s
}

func (s *GetInternalFileResponse) SetResultMsg(v string) *GetInternalFileResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetInternalFileResponse) SetFileNotaryType(v string) *GetInternalFileResponse {
	s.FileNotaryType = &v
	return s
}

func (s *GetInternalFileResponse) SetOssPath(v string) *GetInternalFileResponse {
	s.OssPath = &v
	return s
}

func (s *GetInternalFileResponse) SetFileHash(v string) *GetInternalFileResponse {
	s.FileHash = &v
	return s
}

func (s *GetInternalFileResponse) SetHashAlgorithm(v string) *GetInternalFileResponse {
	s.HashAlgorithm = &v
	return s
}

type CreateDataflowTextRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 用户本地加密后的存证内容
	NotaryContent *string `json:"notary_content,omitempty" xml:"notary_content,omitempty" require:"true"`
	// 存证阶段
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 存证事务id
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
	// 存证拓展信息
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
	// 存证类型，支持
	// ● TEXT_HASH：文本哈希
	// ● TEXT_RAW：源文本（默认）
	TextNotaryType *string `json:"text_notary_type,omitempty" xml:"text_notary_type,omitempty"`
	// 哈希算法，当存证类型为TEXT_HASH时必填，目前支持两种
	// ● SHA256
	// ● SM3
	HashAlgorithm *string `json:"hash_algorithm,omitempty" xml:"hash_algorithm,omitempty"`
}

func (s CreateDataflowTextRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataflowTextRequest) GoString() string {
	return s.String()
}

func (s *CreateDataflowTextRequest) SetAuthToken(v string) *CreateDataflowTextRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDataflowTextRequest) SetProductInstanceId(v string) *CreateDataflowTextRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDataflowTextRequest) SetNotaryContent(v string) *CreateDataflowTextRequest {
	s.NotaryContent = &v
	return s
}

func (s *CreateDataflowTextRequest) SetPhase(v string) *CreateDataflowTextRequest {
	s.Phase = &v
	return s
}

func (s *CreateDataflowTextRequest) SetTransactionId(v string) *CreateDataflowTextRequest {
	s.TransactionId = &v
	return s
}

func (s *CreateDataflowTextRequest) SetProperties(v string) *CreateDataflowTextRequest {
	s.Properties = &v
	return s
}

func (s *CreateDataflowTextRequest) SetTextNotaryType(v string) *CreateDataflowTextRequest {
	s.TextNotaryType = &v
	return s
}

func (s *CreateDataflowTextRequest) SetHashAlgorithm(v string) *CreateDataflowTextRequest {
	s.HashAlgorithm = &v
	return s
}

type CreateDataflowTextResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 交易哈希，链上存证地址
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s CreateDataflowTextResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataflowTextResponse) GoString() string {
	return s.String()
}

func (s *CreateDataflowTextResponse) SetReqMsgId(v string) *CreateDataflowTextResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDataflowTextResponse) SetResultCode(v string) *CreateDataflowTextResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDataflowTextResponse) SetResultMsg(v string) *CreateDataflowTextResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDataflowTextResponse) SetTxHash(v string) *CreateDataflowTextResponse {
	s.TxHash = &v
	return s
}

type GetDataflowTextRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证地址
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
	// 存证方使用的8位英文租户id，当存证地址来自其他存证方用户时必填
	TargetTenantId *string `json:"target_tenant_id,omitempty" xml:"target_tenant_id,omitempty"`
}

func (s GetDataflowTextRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDataflowTextRequest) GoString() string {
	return s.String()
}

func (s *GetDataflowTextRequest) SetAuthToken(v string) *GetDataflowTextRequest {
	s.AuthToken = &v
	return s
}

func (s *GetDataflowTextRequest) SetProductInstanceId(v string) *GetDataflowTextRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetDataflowTextRequest) SetTxHash(v string) *GetDataflowTextRequest {
	s.TxHash = &v
	return s
}

func (s *GetDataflowTextRequest) SetTargetTenantId(v string) *GetDataflowTextRequest {
	s.TargetTenantId = &v
	return s
}

type GetDataflowTextResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证内容
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
}

func (s GetDataflowTextResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDataflowTextResponse) GoString() string {
	return s.String()
}

func (s *GetDataflowTextResponse) SetReqMsgId(v string) *GetDataflowTextResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetDataflowTextResponse) SetResultCode(v string) *GetDataflowTextResponse {
	s.ResultCode = &v
	return s
}

func (s *GetDataflowTextResponse) SetResultMsg(v string) *GetDataflowTextResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetDataflowTextResponse) SetContent(v string) *GetDataflowTextResponse {
	s.Content = &v
	return s
}

type CreateDataflowTransRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证主体信息，使用存证公钥加密
	Customer *string `json:"customer,omitempty" xml:"customer,omitempty" require:"true"`
	// 子业务ID，选填
	SubBizId *string `json:"sub_biz_id,omitempty" xml:"sub_biz_id,omitempty"`
	// 扩展属性信息，使用存证公钥加密，选填
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
}

func (s CreateDataflowTransRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataflowTransRequest) GoString() string {
	return s.String()
}

func (s *CreateDataflowTransRequest) SetAuthToken(v string) *CreateDataflowTransRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDataflowTransRequest) SetProductInstanceId(v string) *CreateDataflowTransRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDataflowTransRequest) SetCustomer(v string) *CreateDataflowTransRequest {
	s.Customer = &v
	return s
}

func (s *CreateDataflowTransRequest) SetSubBizId(v string) *CreateDataflowTransRequest {
	s.SubBizId = &v
	return s
}

func (s *CreateDataflowTransRequest) SetProperties(v string) *CreateDataflowTransRequest {
	s.Properties = &v
	return s
}

type CreateDataflowTransResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证事务id
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty"`
}

func (s CreateDataflowTransResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataflowTransResponse) GoString() string {
	return s.String()
}

func (s *CreateDataflowTransResponse) SetReqMsgId(v string) *CreateDataflowTransResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDataflowTransResponse) SetResultCode(v string) *CreateDataflowTransResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDataflowTransResponse) SetResultMsg(v string) *CreateDataflowTransResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDataflowTransResponse) SetTransactionId(v string) *CreateDataflowTransResponse {
	s.TransactionId = &v
	return s
}

type DeployDataflowContractRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 信封密钥。存证方本地自行派生一堆非对称密钥，将公钥作为信封密钥。存证方用户后续读取链上信息（如存证密钥、存证数据原文）时，为避免链上明文信息泄漏，会使用该信封密钥对所有链上数据进行加密后再返回，保障数据安全。
	Pubkey *string `json:"pubkey,omitempty" xml:"pubkey,omitempty" require:"true"`
}

func (s DeployDataflowContractRequest) String() string {
	return tea.Prettify(s)
}

func (s DeployDataflowContractRequest) GoString() string {
	return s.String()
}

func (s *DeployDataflowContractRequest) SetAuthToken(v string) *DeployDataflowContractRequest {
	s.AuthToken = &v
	return s
}

func (s *DeployDataflowContractRequest) SetProductInstanceId(v string) *DeployDataflowContractRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DeployDataflowContractRequest) SetPubkey(v string) *DeployDataflowContractRequest {
	s.Pubkey = &v
	return s
}

type DeployDataflowContractResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 发起部署的请求回执，用于后续做部署结果查询。
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
}

func (s DeployDataflowContractResponse) String() string {
	return tea.Prettify(s)
}

func (s DeployDataflowContractResponse) GoString() string {
	return s.String()
}

func (s *DeployDataflowContractResponse) SetReqMsgId(v string) *DeployDataflowContractResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DeployDataflowContractResponse) SetResultCode(v string) *DeployDataflowContractResponse {
	s.ResultCode = &v
	return s
}

func (s *DeployDataflowContractResponse) SetResultMsg(v string) *DeployDataflowContractResponse {
	s.ResultMsg = &v
	return s
}

func (s *DeployDataflowContractResponse) SetOrderId(v string) *DeployDataflowContractResponse {
	s.OrderId = &v
	return s
}

type CreateDataflowAuthorizeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 被授权账户的租户ID
	TargetTenant *string `json:"target_tenant,omitempty" xml:"target_tenant,omitempty" require:"true"`
	// 授权类型：
	// 1. PUBKEY_UPLOAD：上传信封公钥
	// 2. GET_NOTARY：查询存证原文
	// 3. CHECK_NOTARY：核验存证信息
	AuthType *string `json:"auth_type,omitempty" xml:"auth_type,omitempty" require:"true"`
	// 授权范围，授权类型为GET_NOTARY或者CHECK_NOTARY时必填，取值为：
	// 1. TXHASH：交易哈希维度授权
	// 2. ACCOUNT：账号维度授权
	AuthScope *string `json:"auth_scope,omitempty" xml:"auth_scope,omitempty"`
	// 授权的目标存证地址，当授权类型为GET_NOTARY或者CHECK_NOTARY，且授权范围为TXHASH时必填，最多20个
	TxHashList []*string `json:"tx_hash_list,omitempty" xml:"tx_hash_list,omitempty" type:"Repeated"`
	// 授权有效的时间戳
	ExpireTime *int64 `json:"expire_time,omitempty" xml:"expire_time,omitempty" require:"true"`
}

func (s CreateDataflowAuthorizeRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataflowAuthorizeRequest) GoString() string {
	return s.String()
}

func (s *CreateDataflowAuthorizeRequest) SetAuthToken(v string) *CreateDataflowAuthorizeRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDataflowAuthorizeRequest) SetProductInstanceId(v string) *CreateDataflowAuthorizeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDataflowAuthorizeRequest) SetTargetTenant(v string) *CreateDataflowAuthorizeRequest {
	s.TargetTenant = &v
	return s
}

func (s *CreateDataflowAuthorizeRequest) SetAuthType(v string) *CreateDataflowAuthorizeRequest {
	s.AuthType = &v
	return s
}

func (s *CreateDataflowAuthorizeRequest) SetAuthScope(v string) *CreateDataflowAuthorizeRequest {
	s.AuthScope = &v
	return s
}

func (s *CreateDataflowAuthorizeRequest) SetTxHashList(v []*string) *CreateDataflowAuthorizeRequest {
	s.TxHashList = v
	return s
}

func (s *CreateDataflowAuthorizeRequest) SetExpireTime(v int64) *CreateDataflowAuthorizeRequest {
	s.ExpireTime = &v
	return s
}

type CreateDataflowAuthorizeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 发起授权的请求回执，用于后续做发起授权结果查询。
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
}

func (s CreateDataflowAuthorizeResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataflowAuthorizeResponse) GoString() string {
	return s.String()
}

func (s *CreateDataflowAuthorizeResponse) SetReqMsgId(v string) *CreateDataflowAuthorizeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDataflowAuthorizeResponse) SetResultCode(v string) *CreateDataflowAuthorizeResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDataflowAuthorizeResponse) SetResultMsg(v string) *CreateDataflowAuthorizeResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDataflowAuthorizeResponse) SetOrderId(v string) *CreateDataflowAuthorizeResponse {
	s.OrderId = &v
	return s
}

type CancelDataflowAuthorizeRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 目标租户ID
	TargetTenant *string `json:"target_tenant,omitempty" xml:"target_tenant,omitempty" require:"true"`
	// 授权类型： 1. PUBKEY_UPLOAD：上传信封公钥 2. GET_NOTARY：查询存证原文 3. CHECK_NOTARY：核验存证信息
	AuthType *string `json:"auth_type,omitempty" xml:"auth_type,omitempty" require:"true"`
	// 授权范围，授权类型为GET_NOTARY或者CHECK_NOTARY时必填，取值为： 1. TXHASH：交易哈希维度授权 2. ACCOUNT：账号维度授权
	AuthScope *string `json:"auth_scope,omitempty" xml:"auth_scope,omitempty"`
	// 授权的目标存证地址，当授权类型为GET_NOTARY或者CHECK_NOTARY，且授权范围为TXHASH时必填，最多20个
	TxHashList []*string `json:"tx_hash_list,omitempty" xml:"tx_hash_list,omitempty" type:"Repeated"`
}

func (s CancelDataflowAuthorizeRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelDataflowAuthorizeRequest) GoString() string {
	return s.String()
}

func (s *CancelDataflowAuthorizeRequest) SetAuthToken(v string) *CancelDataflowAuthorizeRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelDataflowAuthorizeRequest) SetProductInstanceId(v string) *CancelDataflowAuthorizeRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CancelDataflowAuthorizeRequest) SetTargetTenant(v string) *CancelDataflowAuthorizeRequest {
	s.TargetTenant = &v
	return s
}

func (s *CancelDataflowAuthorizeRequest) SetAuthType(v string) *CancelDataflowAuthorizeRequest {
	s.AuthType = &v
	return s
}

func (s *CancelDataflowAuthorizeRequest) SetAuthScope(v string) *CancelDataflowAuthorizeRequest {
	s.AuthScope = &v
	return s
}

func (s *CancelDataflowAuthorizeRequest) SetTxHashList(v []*string) *CancelDataflowAuthorizeRequest {
	s.TxHashList = v
	return s
}

type CancelDataflowAuthorizeResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 发起授权的请求回执，用于后续做撤销授权的结果查询。
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
}

func (s CancelDataflowAuthorizeResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelDataflowAuthorizeResponse) GoString() string {
	return s.String()
}

func (s *CancelDataflowAuthorizeResponse) SetReqMsgId(v string) *CancelDataflowAuthorizeResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelDataflowAuthorizeResponse) SetResultCode(v string) *CancelDataflowAuthorizeResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelDataflowAuthorizeResponse) SetResultMsg(v string) *CancelDataflowAuthorizeResponse {
	s.ResultMsg = &v
	return s
}

func (s *CancelDataflowAuthorizeResponse) SetOrderId(v string) *CancelDataflowAuthorizeResponse {
	s.OrderId = &v
	return s
}

type QueryDataflowActionRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 查询类型：
	// 1. 合约部署：DEPLOY
	// 2. 授权：AUTH
	// 3. 撤销授权：CANCEL_AUTH
	// 4. 密钥上传：PUB_KEY_UPLOAD
	QueryType *string `json:"query_type,omitempty" xml:"query_type,omitempty" require:"true"`
	// 发起操作的请求回执
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
}

func (s QueryDataflowActionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDataflowActionRequest) GoString() string {
	return s.String()
}

func (s *QueryDataflowActionRequest) SetAuthToken(v string) *QueryDataflowActionRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryDataflowActionRequest) SetProductInstanceId(v string) *QueryDataflowActionRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryDataflowActionRequest) SetQueryType(v string) *QueryDataflowActionRequest {
	s.QueryType = &v
	return s
}

func (s *QueryDataflowActionRequest) SetOrderId(v string) *QueryDataflowActionRequest {
	s.OrderId = &v
	return s
}

type QueryDataflowActionResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 操作状态
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
	// 信封公钥加密后的存证公钥信息，当查询类型为DEPLOY且status为密钥上传成功时返回。
	EncryptedPubkey *string `json:"encrypted_pubkey,omitempty" xml:"encrypted_pubkey,omitempty"`
}

func (s QueryDataflowActionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDataflowActionResponse) GoString() string {
	return s.String()
}

func (s *QueryDataflowActionResponse) SetReqMsgId(v string) *QueryDataflowActionResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryDataflowActionResponse) SetResultCode(v string) *QueryDataflowActionResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryDataflowActionResponse) SetResultMsg(v string) *QueryDataflowActionResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryDataflowActionResponse) SetStatus(v int64) *QueryDataflowActionResponse {
	s.Status = &v
	return s
}

func (s *QueryDataflowActionResponse) SetEncryptedPubkey(v string) *QueryDataflowActionResponse {
	s.EncryptedPubkey = &v
	return s
}

type UploadDataflowPubkeyRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 信封公钥内容
	Pubkey *string `json:"pubkey,omitempty" xml:"pubkey,omitempty" require:"true"`
	// 存证方的租户ID
	FromTenant *string `json:"from_tenant,omitempty" xml:"from_tenant,omitempty" require:"true"`
}

func (s UploadDataflowPubkeyRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadDataflowPubkeyRequest) GoString() string {
	return s.String()
}

func (s *UploadDataflowPubkeyRequest) SetAuthToken(v string) *UploadDataflowPubkeyRequest {
	s.AuthToken = &v
	return s
}

func (s *UploadDataflowPubkeyRequest) SetProductInstanceId(v string) *UploadDataflowPubkeyRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UploadDataflowPubkeyRequest) SetPubkey(v string) *UploadDataflowPubkeyRequest {
	s.Pubkey = &v
	return s
}

func (s *UploadDataflowPubkeyRequest) SetFromTenant(v string) *UploadDataflowPubkeyRequest {
	s.FromTenant = &v
	return s
}

type UploadDataflowPubkeyResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 发起密钥上传的请求回执，用于后续做密钥上传结果查询。
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
}

func (s UploadDataflowPubkeyResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadDataflowPubkeyResponse) GoString() string {
	return s.String()
}

func (s *UploadDataflowPubkeyResponse) SetReqMsgId(v string) *UploadDataflowPubkeyResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UploadDataflowPubkeyResponse) SetResultCode(v string) *UploadDataflowPubkeyResponse {
	s.ResultCode = &v
	return s
}

func (s *UploadDataflowPubkeyResponse) SetResultMsg(v string) *UploadDataflowPubkeyResponse {
	s.ResultMsg = &v
	return s
}

func (s *UploadDataflowPubkeyResponse) SetOrderId(v string) *UploadDataflowPubkeyResponse {
	s.OrderId = &v
	return s
}

type CreateDataflowAccountRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链上账号名称，真实名称会在前加租户ID
	BizChainAccount *string `json:"biz_chain_account,omitempty" xml:"biz_chain_account,omitempty" require:"true"`
	// 账户密钥算法
	KeyAlgorithm *string `json:"key_algorithm,omitempty" xml:"key_algorithm,omitempty"`
}

func (s CreateDataflowAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataflowAccountRequest) GoString() string {
	return s.String()
}

func (s *CreateDataflowAccountRequest) SetAuthToken(v string) *CreateDataflowAccountRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateDataflowAccountRequest) SetProductInstanceId(v string) *CreateDataflowAccountRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateDataflowAccountRequest) SetBizChainAccount(v string) *CreateDataflowAccountRequest {
	s.BizChainAccount = &v
	return s
}

func (s *CreateDataflowAccountRequest) SetKeyAlgorithm(v string) *CreateDataflowAccountRequest {
	s.KeyAlgorithm = &v
	return s
}

type CreateDataflowAccountResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 实际生成的链上账户ID
	ChainAccount *string `json:"chain_account,omitempty" xml:"chain_account,omitempty"`
}

func (s CreateDataflowAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataflowAccountResponse) GoString() string {
	return s.String()
}

func (s *CreateDataflowAccountResponse) SetReqMsgId(v string) *CreateDataflowAccountResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateDataflowAccountResponse) SetResultCode(v string) *CreateDataflowAccountResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateDataflowAccountResponse) SetResultMsg(v string) *CreateDataflowAccountResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateDataflowAccountResponse) SetChainAccount(v string) *CreateDataflowAccountResponse {
	s.ChainAccount = &v
	return s
}

type CreateFileIntegrationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 存证链路的统一Id，全局唯一
	TransactionId *string `json:"transaction_id,omitempty" xml:"transaction_id,omitempty" require:"true"`
	// 描述本条存证在存证事务中的阶段，用户可自行维护
	Phase *string `json:"phase,omitempty" xml:"phase,omitempty" require:"true"`
	// 存证类型为文本哈希时的哈希算法，目前仅支持SHA256
	HashAlgorithm *string `json:"hash_algorithm,omitempty" xml:"hash_algorithm,omitempty"`
}

func (s CreateFileIntegrationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFileIntegrationRequest) GoString() string {
	return s.String()
}

func (s *CreateFileIntegrationRequest) SetAuthToken(v string) *CreateFileIntegrationRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateFileIntegrationRequest) SetProductInstanceId(v string) *CreateFileIntegrationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateFileIntegrationRequest) SetTransactionId(v string) *CreateFileIntegrationRequest {
	s.TransactionId = &v
	return s
}

func (s *CreateFileIntegrationRequest) SetPhase(v string) *CreateFileIntegrationRequest {
	s.Phase = &v
	return s
}

func (s *CreateFileIntegrationRequest) SetHashAlgorithm(v string) *CreateFileIntegrationRequest {
	s.HashAlgorithm = &v
	return s
}

type CreateFileIntegrationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存储的文件名称，完成存证阶段需传入
	ObjectName *string `json:"object_name,omitempty" xml:"object_name,omitempty"`
	// 文件上传的地址
	UploadLink *string `json:"upload_link,omitempty" xml:"upload_link,omitempty"`
}

func (s CreateFileIntegrationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFileIntegrationResponse) GoString() string {
	return s.String()
}

func (s *CreateFileIntegrationResponse) SetReqMsgId(v string) *CreateFileIntegrationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateFileIntegrationResponse) SetResultCode(v string) *CreateFileIntegrationResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateFileIntegrationResponse) SetResultMsg(v string) *CreateFileIntegrationResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateFileIntegrationResponse) SetObjectName(v string) *CreateFileIntegrationResponse {
	s.ObjectName = &v
	return s
}

func (s *CreateFileIntegrationResponse) SetUploadLink(v string) *CreateFileIntegrationResponse {
	s.UploadLink = &v
	return s
}

type FinishFileIntegrationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 文件一体化存储id，全局唯一
	ObjectName *string `json:"object_name,omitempty" xml:"object_name,omitempty" require:"true"`
}

func (s FinishFileIntegrationRequest) String() string {
	return tea.Prettify(s)
}

func (s FinishFileIntegrationRequest) GoString() string {
	return s.String()
}

func (s *FinishFileIntegrationRequest) SetAuthToken(v string) *FinishFileIntegrationRequest {
	s.AuthToken = &v
	return s
}

func (s *FinishFileIntegrationRequest) SetProductInstanceId(v string) *FinishFileIntegrationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *FinishFileIntegrationRequest) SetObjectName(v string) *FinishFileIntegrationRequest {
	s.ObjectName = &v
	return s
}

type FinishFileIntegrationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 上链哈希
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
}

func (s FinishFileIntegrationResponse) String() string {
	return tea.Prettify(s)
}

func (s FinishFileIntegrationResponse) GoString() string {
	return s.String()
}

func (s *FinishFileIntegrationResponse) SetReqMsgId(v string) *FinishFileIntegrationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *FinishFileIntegrationResponse) SetResultCode(v string) *FinishFileIntegrationResponse {
	s.ResultCode = &v
	return s
}

func (s *FinishFileIntegrationResponse) SetResultMsg(v string) *FinishFileIntegrationResponse {
	s.ResultMsg = &v
	return s
}

func (s *FinishFileIntegrationResponse) SetTxHash(v string) *FinishFileIntegrationResponse {
	s.TxHash = &v
	return s
}

type GetFileIntegrationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 完成存证接口中获取的交易哈希
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
}

func (s GetFileIntegrationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFileIntegrationRequest) GoString() string {
	return s.String()
}

func (s *GetFileIntegrationRequest) SetAuthToken(v string) *GetFileIntegrationRequest {
	s.AuthToken = &v
	return s
}

func (s *GetFileIntegrationRequest) SetProductInstanceId(v string) *GetFileIntegrationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *GetFileIntegrationRequest) SetTxHash(v string) *GetFileIntegrationRequest {
	s.TxHash = &v
	return s
}

type GetFileIntegrationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证下载链接
	DownloadLink *string `json:"download_link,omitempty" xml:"download_link,omitempty"`
}

func (s GetFileIntegrationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFileIntegrationResponse) GoString() string {
	return s.String()
}

func (s *GetFileIntegrationResponse) SetReqMsgId(v string) *GetFileIntegrationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *GetFileIntegrationResponse) SetResultCode(v string) *GetFileIntegrationResponse {
	s.ResultCode = &v
	return s
}

func (s *GetFileIntegrationResponse) SetResultMsg(v string) *GetFileIntegrationResponse {
	s.ResultMsg = &v
	return s
}

func (s *GetFileIntegrationResponse) SetDownloadLink(v string) *GetFileIntegrationResponse {
	s.DownloadLink = &v
	return s
}

type AuthFileIntegrationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 授权类型：BUCKET，OBJECT
	AuthType *string `json:"auth_type,omitempty" xml:"auth_type,omitempty" require:"true"`
	// object名称（当auth_type为OBJECT必填）
	ObjectName *string `json:"object_name,omitempty" xml:"object_name,omitempty"`
	// 授权过期时间，格式为 yyyy-MM-dd HH:mm:ss
	AuthExpireTime *string `json:"auth_expire_time,omitempty" xml:"auth_expire_time,omitempty" require:"true"`
	// 被授权的租户id
	TargetTenant *string `json:"target_tenant,omitempty" xml:"target_tenant,omitempty" require:"true"`
}

func (s AuthFileIntegrationRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthFileIntegrationRequest) GoString() string {
	return s.String()
}

func (s *AuthFileIntegrationRequest) SetAuthToken(v string) *AuthFileIntegrationRequest {
	s.AuthToken = &v
	return s
}

func (s *AuthFileIntegrationRequest) SetProductInstanceId(v string) *AuthFileIntegrationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *AuthFileIntegrationRequest) SetAuthType(v string) *AuthFileIntegrationRequest {
	s.AuthType = &v
	return s
}

func (s *AuthFileIntegrationRequest) SetObjectName(v string) *AuthFileIntegrationRequest {
	s.ObjectName = &v
	return s
}

func (s *AuthFileIntegrationRequest) SetAuthExpireTime(v string) *AuthFileIntegrationRequest {
	s.AuthExpireTime = &v
	return s
}

func (s *AuthFileIntegrationRequest) SetTargetTenant(v string) *AuthFileIntegrationRequest {
	s.TargetTenant = &v
	return s
}

type AuthFileIntegrationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 授权结果
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s AuthFileIntegrationResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthFileIntegrationResponse) GoString() string {
	return s.String()
}

func (s *AuthFileIntegrationResponse) SetReqMsgId(v string) *AuthFileIntegrationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *AuthFileIntegrationResponse) SetResultCode(v string) *AuthFileIntegrationResponse {
	s.ResultCode = &v
	return s
}

func (s *AuthFileIntegrationResponse) SetResultMsg(v string) *AuthFileIntegrationResponse {
	s.ResultMsg = &v
	return s
}

func (s *AuthFileIntegrationResponse) SetResult(v bool) *AuthFileIntegrationResponse {
	s.Result = &v
	return s
}

type CancelFileIntegrationRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 被授权目标租户ID
	TargetTenant *string `json:"target_tenant,omitempty" xml:"target_tenant,omitempty" require:"true"`
	// 授权类型：BUCKET，OBJECT
	AuthType *string `json:"auth_type,omitempty" xml:"auth_type,omitempty" require:"true"`
	// object名称（当auth_type为OBJECT必填）
	ObjectName *string `json:"object_name,omitempty" xml:"object_name,omitempty"`
}

func (s CancelFileIntegrationRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelFileIntegrationRequest) GoString() string {
	return s.String()
}

func (s *CancelFileIntegrationRequest) SetAuthToken(v string) *CancelFileIntegrationRequest {
	s.AuthToken = &v
	return s
}

func (s *CancelFileIntegrationRequest) SetProductInstanceId(v string) *CancelFileIntegrationRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CancelFileIntegrationRequest) SetTargetTenant(v string) *CancelFileIntegrationRequest {
	s.TargetTenant = &v
	return s
}

func (s *CancelFileIntegrationRequest) SetAuthType(v string) *CancelFileIntegrationRequest {
	s.AuthType = &v
	return s
}

func (s *CancelFileIntegrationRequest) SetObjectName(v string) *CancelFileIntegrationRequest {
	s.ObjectName = &v
	return s
}

type CancelFileIntegrationResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 取消授权结果
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CancelFileIntegrationResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelFileIntegrationResponse) GoString() string {
	return s.String()
}

func (s *CancelFileIntegrationResponse) SetReqMsgId(v string) *CancelFileIntegrationResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CancelFileIntegrationResponse) SetResultCode(v string) *CancelFileIntegrationResponse {
	s.ResultCode = &v
	return s
}

func (s *CancelFileIntegrationResponse) SetResultMsg(v string) *CancelFileIntegrationResponse {
	s.ResultMsg = &v
	return s
}

func (s *CancelFileIntegrationResponse) SetResult(v bool) *CancelFileIntegrationResponse {
	s.Result = &v
	return s
}

type CreateFlowInstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 全流程模板id，需要提前创建好模板才能获取
	TemplateId *string `json:"template_id,omitempty" xml:"template_id,omitempty" require:"true"`
	// 流程名称，同一个租户下同一个模板，建议唯一不重复
	FlowName *string `json:"flow_name,omitempty" xml:"flow_name,omitempty" require:"true"`
	// 存证关联实体（个人/企业）的身份识别信息
	NotaryUser *NotaryUser `json:"notary_user,omitempty" xml:"notary_user,omitempty" require:"true"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
}

func (s CreateFlowInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowInstanceRequest) SetAuthToken(v string) *CreateFlowInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateFlowInstanceRequest) SetProductInstanceId(v string) *CreateFlowInstanceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateFlowInstanceRequest) SetTemplateId(v string) *CreateFlowInstanceRequest {
	s.TemplateId = &v
	return s
}

func (s *CreateFlowInstanceRequest) SetFlowName(v string) *CreateFlowInstanceRequest {
	s.FlowName = &v
	return s
}

func (s *CreateFlowInstanceRequest) SetNotaryUser(v *NotaryUser) *CreateFlowInstanceRequest {
	s.NotaryUser = v
	return s
}

func (s *CreateFlowInstanceRequest) SetProperties(v string) *CreateFlowInstanceRequest {
	s.Properties = &v
	return s
}

type CreateFlowInstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 流程ID，全局唯一
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty"`
}

func (s CreateFlowInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowInstanceResponse) SetReqMsgId(v string) *CreateFlowInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateFlowInstanceResponse) SetResultCode(v string) *CreateFlowInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateFlowInstanceResponse) SetResultMsg(v string) *CreateFlowInstanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateFlowInstanceResponse) SetFlowId(v string) *CreateFlowInstanceResponse {
	s.FlowId = &v
	return s
}

type FinishFlowInstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程id，通过twc.notary.instance.create(创建存证流程实例)获取
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 是否需要legal标，默认为false，如果需要则填true
	NeedLegalLogo *bool `json:"need_legal_logo,omitempty" xml:"need_legal_logo,omitempty"`
	// 证据包类型，默认为空，不需要证据包，如果需要则按需填写，目前支持ChainEvidencePack(链上证据包)，其他包括LocalEvidencePack(链下证据包)，链下证据包前置依赖链上证据包，因此填写链下证据包会先生成链上证据包。
	// 链上证据包，即全流程所有阶段存证关系链上固化，生成全流程链上证据统一txHash；
	// 链下证据包，即全流程所有内容生成链下压缩包文件。
	EvidencePackType *string `json:"evidence_pack_type,omitempty" xml:"evidence_pack_type,omitempty"`
}

func (s FinishFlowInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s FinishFlowInstanceRequest) GoString() string {
	return s.String()
}

func (s *FinishFlowInstanceRequest) SetAuthToken(v string) *FinishFlowInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *FinishFlowInstanceRequest) SetProductInstanceId(v string) *FinishFlowInstanceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *FinishFlowInstanceRequest) SetFlowId(v string) *FinishFlowInstanceRequest {
	s.FlowId = &v
	return s
}

func (s *FinishFlowInstanceRequest) SetNeedLegalLogo(v bool) *FinishFlowInstanceRequest {
	s.NeedLegalLogo = &v
	return s
}

func (s *FinishFlowInstanceRequest) SetEvidencePackType(v string) *FinishFlowInstanceRequest {
	s.EvidencePackType = &v
	return s
}

type FinishFlowInstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// legal标URL，只有当入参needLegalLogo为true且响应resultCode=200时才会返回
	LegalLogoUrl *string `json:"legal_logo_url,omitempty" xml:"legal_logo_url,omitempty"`
}

func (s FinishFlowInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s FinishFlowInstanceResponse) GoString() string {
	return s.String()
}

func (s *FinishFlowInstanceResponse) SetReqMsgId(v string) *FinishFlowInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *FinishFlowInstanceResponse) SetResultCode(v string) *FinishFlowInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *FinishFlowInstanceResponse) SetResultMsg(v string) *FinishFlowInstanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *FinishFlowInstanceResponse) SetLegalLogoUrl(v string) *FinishFlowInstanceResponse {
	s.LegalLogoUrl = &v
	return s
}

type InitFlowPhaseRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程id，通过twc.notary.instance.create(创建存证流程实例)获取
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 阶段编号，与模板阶段编号保持一致，不同阶段阶段编号不一样，要与阶段存证内容保持一致
	PhaseNo *int64 `json:"phase_no,omitempty" xml:"phase_no,omitempty" require:"true"`
	// 阶段存证内容，如果模板数据类型定义是Hash(哈希)则填入Hash即可，如果定义是Structure(结构化)，则填入模板所有字段json对象的字符串Base64后的值
	NotaryContent *string `json:"notary_content,omitempty" xml:"notary_content,omitempty" require:"true"`
	// 业务方原始数据ID，方便与业务方进行数据核对使用
	OriginDataId *string `json:"origin_data_id,omitempty" xml:"origin_data_id,omitempty" require:"true"`
}

func (s InitFlowPhaseRequest) String() string {
	return tea.Prettify(s)
}

func (s InitFlowPhaseRequest) GoString() string {
	return s.String()
}

func (s *InitFlowPhaseRequest) SetAuthToken(v string) *InitFlowPhaseRequest {
	s.AuthToken = &v
	return s
}

func (s *InitFlowPhaseRequest) SetProductInstanceId(v string) *InitFlowPhaseRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *InitFlowPhaseRequest) SetFlowId(v string) *InitFlowPhaseRequest {
	s.FlowId = &v
	return s
}

func (s *InitFlowPhaseRequest) SetPhaseNo(v int64) *InitFlowPhaseRequest {
	s.PhaseNo = &v
	return s
}

func (s *InitFlowPhaseRequest) SetNotaryContent(v string) *InitFlowPhaseRequest {
	s.NotaryContent = &v
	return s
}

func (s *InitFlowPhaseRequest) SetOriginDataId(v string) *InitFlowPhaseRequest {
	s.OriginDataId = &v
	return s
}

type InitFlowPhaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 阶段id
	PhaseId *string `json:"phase_id,omitempty" xml:"phase_id,omitempty"`
}

func (s InitFlowPhaseResponse) String() string {
	return tea.Prettify(s)
}

func (s InitFlowPhaseResponse) GoString() string {
	return s.String()
}

func (s *InitFlowPhaseResponse) SetReqMsgId(v string) *InitFlowPhaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *InitFlowPhaseResponse) SetResultCode(v string) *InitFlowPhaseResponse {
	s.ResultCode = &v
	return s
}

func (s *InitFlowPhaseResponse) SetResultMsg(v string) *InitFlowPhaseResponse {
	s.ResultMsg = &v
	return s
}

func (s *InitFlowPhaseResponse) SetPhaseId(v string) *InitFlowPhaseResponse {
	s.PhaseId = &v
	return s
}

type QueryFlowPhaseRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程id，通过twc.notary.instance.create(创建存证流程实例)获取
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 阶段id，通过twc.notary.flow.phase.init获取
	PhaseId *string `json:"phase_id,omitempty" xml:"phase_id,omitempty" require:"true"`
}

func (s QueryFlowPhaseRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowPhaseRequest) GoString() string {
	return s.String()
}

func (s *QueryFlowPhaseRequest) SetAuthToken(v string) *QueryFlowPhaseRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryFlowPhaseRequest) SetProductInstanceId(v string) *QueryFlowPhaseRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryFlowPhaseRequest) SetFlowId(v string) *QueryFlowPhaseRequest {
	s.FlowId = &v
	return s
}

func (s *QueryFlowPhaseRequest) SetPhaseId(v string) *QueryFlowPhaseRequest {
	s.PhaseId = &v
	return s
}

type QueryFlowPhaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 交易Hash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
	// 存证状态，FINISH(生成完毕)、INIT(初始化中)、FAILED(生成失败)
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 阶段注册成功时间戳
	RegisterTime *int64 `json:"register_time,omitempty" xml:"register_time,omitempty"`
}

func (s QueryFlowPhaseResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowPhaseResponse) GoString() string {
	return s.String()
}

func (s *QueryFlowPhaseResponse) SetReqMsgId(v string) *QueryFlowPhaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryFlowPhaseResponse) SetResultCode(v string) *QueryFlowPhaseResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryFlowPhaseResponse) SetResultMsg(v string) *QueryFlowPhaseResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryFlowPhaseResponse) SetTxHash(v string) *QueryFlowPhaseResponse {
	s.TxHash = &v
	return s
}

func (s *QueryFlowPhaseResponse) SetStatus(v string) *QueryFlowPhaseResponse {
	s.Status = &v
	return s
}

func (s *QueryFlowPhaseResponse) SetRegisterTime(v int64) *QueryFlowPhaseResponse {
	s.RegisterTime = &v
	return s
}

type DetailFlowPhaseRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程id，通过twc.notary.instance.create(创建存证流程实例)获取
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 阶段ID，通过twc.notary.flow.phase.create(创建阶段存证)创建了阶段存证获取
	PhaseId *string `json:"phase_id,omitempty" xml:"phase_id,omitempty" require:"true"`
	// 链上交易Hash，必须成功阶段存证后，通过twc.notary.flow.phase.query获取
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty" require:"true"`
}

func (s DetailFlowPhaseRequest) String() string {
	return tea.Prettify(s)
}

func (s DetailFlowPhaseRequest) GoString() string {
	return s.String()
}

func (s *DetailFlowPhaseRequest) SetAuthToken(v string) *DetailFlowPhaseRequest {
	s.AuthToken = &v
	return s
}

func (s *DetailFlowPhaseRequest) SetProductInstanceId(v string) *DetailFlowPhaseRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DetailFlowPhaseRequest) SetFlowId(v string) *DetailFlowPhaseRequest {
	s.FlowId = &v
	return s
}

func (s *DetailFlowPhaseRequest) SetPhaseId(v string) *DetailFlowPhaseRequest {
	s.PhaseId = &v
	return s
}

func (s *DetailFlowPhaseRequest) SetTxHash(v string) *DetailFlowPhaseRequest {
	s.TxHash = &v
	return s
}

type DetailFlowPhaseResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 阶段存证交易hash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
	// 模板字段类型，Hash/Structure，(Hash->哈希,Structure->结构化)
	DataType *string `json:"data_type,omitempty" xml:"data_type,omitempty"`
	// 阶段存证内容，如果模板数据类型定义是Hash(哈希)则返回存证时Hash，如果定义是Structure(结构化)，则返回所有字段json对象的字符串Base64后的值
	NotaryContent *string `json:"notary_content,omitempty" xml:"notary_content,omitempty"`
	// 结构化数据里面英文key对应的中文名称关系，json格式，key为字段英文名，value为字段中文名称
	//
	DataTypeKey *string `json:"data_type_key,omitempty" xml:"data_type_key,omitempty"`
	// 阶段存证内容csv下载地址，暂时预留，存证内容过大时采用文件形式输出，有效期1个小时
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
	// 交易所在的区块Hash
	BlockHash *string `json:"block_hash,omitempty" xml:"block_hash,omitempty"`
	// 交易所在的区块高
	BlockHeight *string `json:"block_height,omitempty" xml:"block_height,omitempty"`
	// 阶段注册成功时间戳
	RegisterTime *int64 `json:"register_time,omitempty" xml:"register_time,omitempty"`
}

func (s DetailFlowPhaseResponse) String() string {
	return tea.Prettify(s)
}

func (s DetailFlowPhaseResponse) GoString() string {
	return s.String()
}

func (s *DetailFlowPhaseResponse) SetReqMsgId(v string) *DetailFlowPhaseResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DetailFlowPhaseResponse) SetResultCode(v string) *DetailFlowPhaseResponse {
	s.ResultCode = &v
	return s
}

func (s *DetailFlowPhaseResponse) SetResultMsg(v string) *DetailFlowPhaseResponse {
	s.ResultMsg = &v
	return s
}

func (s *DetailFlowPhaseResponse) SetTxHash(v string) *DetailFlowPhaseResponse {
	s.TxHash = &v
	return s
}

func (s *DetailFlowPhaseResponse) SetDataType(v string) *DetailFlowPhaseResponse {
	s.DataType = &v
	return s
}

func (s *DetailFlowPhaseResponse) SetNotaryContent(v string) *DetailFlowPhaseResponse {
	s.NotaryContent = &v
	return s
}

func (s *DetailFlowPhaseResponse) SetDataTypeKey(v string) *DetailFlowPhaseResponse {
	s.DataTypeKey = &v
	return s
}

func (s *DetailFlowPhaseResponse) SetUrl(v string) *DetailFlowPhaseResponse {
	s.Url = &v
	return s
}

func (s *DetailFlowPhaseResponse) SetBlockHash(v string) *DetailFlowPhaseResponse {
	s.BlockHash = &v
	return s
}

func (s *DetailFlowPhaseResponse) SetBlockHeight(v string) *DetailFlowPhaseResponse {
	s.BlockHeight = &v
	return s
}

func (s *DetailFlowPhaseResponse) SetRegisterTime(v int64) *DetailFlowPhaseResponse {
	s.RegisterTime = &v
	return s
}

type CreateFlowOnestepnotaryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 全流程模板id，需要提前创建好模板才能获取
	TemplateId *string `json:"template_id,omitempty" xml:"template_id,omitempty" require:"true"`
	// 流程名称，同一个租户下同一个模板，建议唯一不重复
	FlowName *string `json:"flow_name,omitempty" xml:"flow_name,omitempty" require:"true"`
	// 存证关联实体（个人/企业）的身份识别信息
	NotaryUser *NotaryUser `json:"notary_user,omitempty" xml:"notary_user,omitempty" require:"true"`
	// 阶段存证内容列表，根据模板定义传入
	PhaseNotaryList []*PhaseNotary `json:"phase_notary_list,omitempty" xml:"phase_notary_list,omitempty" require:"true" type:"Repeated"`
	// 扩展属性
	Properties *string `json:"properties,omitempty" xml:"properties,omitempty"`
}

func (s CreateFlowOnestepnotaryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowOnestepnotaryRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowOnestepnotaryRequest) SetAuthToken(v string) *CreateFlowOnestepnotaryRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateFlowOnestepnotaryRequest) SetProductInstanceId(v string) *CreateFlowOnestepnotaryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateFlowOnestepnotaryRequest) SetTemplateId(v string) *CreateFlowOnestepnotaryRequest {
	s.TemplateId = &v
	return s
}

func (s *CreateFlowOnestepnotaryRequest) SetFlowName(v string) *CreateFlowOnestepnotaryRequest {
	s.FlowName = &v
	return s
}

func (s *CreateFlowOnestepnotaryRequest) SetNotaryUser(v *NotaryUser) *CreateFlowOnestepnotaryRequest {
	s.NotaryUser = v
	return s
}

func (s *CreateFlowOnestepnotaryRequest) SetPhaseNotaryList(v []*PhaseNotary) *CreateFlowOnestepnotaryRequest {
	s.PhaseNotaryList = v
	return s
}

func (s *CreateFlowOnestepnotaryRequest) SetProperties(v string) *CreateFlowOnestepnotaryRequest {
	s.Properties = &v
	return s
}

type CreateFlowOnestepnotaryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回流程ID，全局唯一
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty"`
	// 阶段存证结果列表
	PhaseCreateResultList []*PhaseCreateResult `json:"phase_create_result_list,omitempty" xml:"phase_create_result_list,omitempty" type:"Repeated"`
}

func (s CreateFlowOnestepnotaryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowOnestepnotaryResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowOnestepnotaryResponse) SetReqMsgId(v string) *CreateFlowOnestepnotaryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateFlowOnestepnotaryResponse) SetResultCode(v string) *CreateFlowOnestepnotaryResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateFlowOnestepnotaryResponse) SetResultMsg(v string) *CreateFlowOnestepnotaryResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateFlowOnestepnotaryResponse) SetFlowId(v string) *CreateFlowOnestepnotaryResponse {
	s.FlowId = &v
	return s
}

func (s *CreateFlowOnestepnotaryResponse) SetPhaseCreateResultList(v []*PhaseCreateResult) *CreateFlowOnestepnotaryResponse {
	s.PhaseCreateResultList = v
	return s
}

type QueryFlowOnestepnotaryRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程id，通过twc.notary.flow.onestepnotary.create接口获取
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 是否需要legal标，默认为false，如果需要则填true
	NeedLegalLogo *bool `json:"need_legal_logo,omitempty" xml:"need_legal_logo,omitempty"`
	// 证据包类型，默认为空，不需要证据包，如果需要则按需填写，目前支持ChainEvidencePack(链上证据包)，其他包括LocalEvidencePack(链下证据包)，链下证据包前置依赖链上证据包，因此填写链下证据包会先生成链上证据包。
	// 链上证据包，即全流程所有阶段存证关系链上固化，生成全流程链上证据统一txHash；
	// 链下证据包，即全流程所有内容生成链下压缩包文件。
	EvidencePackType *string `json:"evidence_pack_type,omitempty" xml:"evidence_pack_type,omitempty"`
}

func (s QueryFlowOnestepnotaryRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowOnestepnotaryRequest) GoString() string {
	return s.String()
}

func (s *QueryFlowOnestepnotaryRequest) SetAuthToken(v string) *QueryFlowOnestepnotaryRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryFlowOnestepnotaryRequest) SetProductInstanceId(v string) *QueryFlowOnestepnotaryRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryFlowOnestepnotaryRequest) SetFlowId(v string) *QueryFlowOnestepnotaryRequest {
	s.FlowId = &v
	return s
}

func (s *QueryFlowOnestepnotaryRequest) SetNeedLegalLogo(v bool) *QueryFlowOnestepnotaryRequest {
	s.NeedLegalLogo = &v
	return s
}

func (s *QueryFlowOnestepnotaryRequest) SetEvidencePackType(v string) *QueryFlowOnestepnotaryRequest {
	s.EvidencePackType = &v
	return s
}

type QueryFlowOnestepnotaryResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证全流程状态，FINISH(完结)、PROCESSING(上链中)、DISABLE(失效)、FAILED(失败)
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 阶段存证查询结果列表
	PhaseQueryResultList []*PhaseQueryResult `json:"phase_query_result_list,omitempty" xml:"phase_query_result_list,omitempty" type:"Repeated"`
	// legal标URL，只有当入参needLegalLogo为true且响应status为FINISH时才会返回
	LegalLogoUrl *string `json:"legal_logo_url,omitempty" xml:"legal_logo_url,omitempty"`
}

func (s QueryFlowOnestepnotaryResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowOnestepnotaryResponse) GoString() string {
	return s.String()
}

func (s *QueryFlowOnestepnotaryResponse) SetReqMsgId(v string) *QueryFlowOnestepnotaryResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryFlowOnestepnotaryResponse) SetResultCode(v string) *QueryFlowOnestepnotaryResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryFlowOnestepnotaryResponse) SetResultMsg(v string) *QueryFlowOnestepnotaryResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryFlowOnestepnotaryResponse) SetStatus(v string) *QueryFlowOnestepnotaryResponse {
	s.Status = &v
	return s
}

func (s *QueryFlowOnestepnotaryResponse) SetPhaseQueryResultList(v []*PhaseQueryResult) *QueryFlowOnestepnotaryResponse {
	s.PhaseQueryResultList = v
	return s
}

func (s *QueryFlowOnestepnotaryResponse) SetLegalLogoUrl(v string) *QueryFlowOnestepnotaryResponse {
	s.LegalLogoUrl = &v
	return s
}

type ApplyFlowCertificateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 证书类型，AntchainCertification（蚂蚁链存证证明）、OrgCertification（公证处存证证明），目前支持公证处
	CertificationType *string `json:"certification_type,omitempty" xml:"certification_type,omitempty" require:"true"`
	// 公证处ID，OrgCertification（公证处存证证明）选填，不填则为默认公证处
	OrgId *string `json:"org_id,omitempty" xml:"org_id,omitempty"`
	// 是否需要legal码，默认为false即不需要，true表示需要
	NeedLegalCode *bool `json:"need_legal_code,omitempty" xml:"need_legal_code,omitempty"`
}

func (s ApplyFlowCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyFlowCertificateRequest) GoString() string {
	return s.String()
}

func (s *ApplyFlowCertificateRequest) SetAuthToken(v string) *ApplyFlowCertificateRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyFlowCertificateRequest) SetProductInstanceId(v string) *ApplyFlowCertificateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyFlowCertificateRequest) SetFlowId(v string) *ApplyFlowCertificateRequest {
	s.FlowId = &v
	return s
}

func (s *ApplyFlowCertificateRequest) SetCertificationType(v string) *ApplyFlowCertificateRequest {
	s.CertificationType = &v
	return s
}

func (s *ApplyFlowCertificateRequest) SetOrgId(v string) *ApplyFlowCertificateRequest {
	s.OrgId = &v
	return s
}

func (s *ApplyFlowCertificateRequest) SetNeedLegalCode(v bool) *ApplyFlowCertificateRequest {
	s.NeedLegalCode = &v
	return s
}

type ApplyFlowCertificateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 出证订单号
	OrderNo *string `json:"order_no,omitempty" xml:"order_no,omitempty"`
}

func (s ApplyFlowCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyFlowCertificateResponse) GoString() string {
	return s.String()
}

func (s *ApplyFlowCertificateResponse) SetReqMsgId(v string) *ApplyFlowCertificateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyFlowCertificateResponse) SetResultCode(v string) *ApplyFlowCertificateResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyFlowCertificateResponse) SetResultMsg(v string) *ApplyFlowCertificateResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyFlowCertificateResponse) SetOrderNo(v string) *ApplyFlowCertificateResponse {
	s.OrderNo = &v
	return s
}

type QueryFlowCertificateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 证书类型，AntchainCertification（蚂蚁链存证证明）、OrgCertification（公证处存证证明），目前支持公证处
	CertificationType *string `json:"certification_type,omitempty" xml:"certification_type,omitempty" require:"true"`
	// 通过twc.notary.flow.certificate.apply(存证全流程证明申请)获取到的订单号
	OrderNo *string `json:"order_no,omitempty" xml:"order_no,omitempty" require:"true"`
}

func (s QueryFlowCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowCertificateRequest) GoString() string {
	return s.String()
}

func (s *QueryFlowCertificateRequest) SetAuthToken(v string) *QueryFlowCertificateRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryFlowCertificateRequest) SetProductInstanceId(v string) *QueryFlowCertificateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryFlowCertificateRequest) SetFlowId(v string) *QueryFlowCertificateRequest {
	s.FlowId = &v
	return s
}

func (s *QueryFlowCertificateRequest) SetCertificationType(v string) *QueryFlowCertificateRequest {
	s.CertificationType = &v
	return s
}

func (s *QueryFlowCertificateRequest) SetOrderNo(v string) *QueryFlowCertificateRequest {
	s.OrderNo = &v
	return s
}

type QueryFlowCertificateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证证明下载地址，有效期1个小时
	CertificateUrl *string `json:"certificate_url,omitempty" xml:"certificate_url,omitempty"`
	// Legal码H5页面URL
	LegalCodeUrl *string `json:"legal_code_url,omitempty" xml:"legal_code_url,omitempty"`
	// Legal码证书H5页面URL
	LegalShowUrl *string `json:"legal_show_url,omitempty" xml:"legal_show_url,omitempty"`
}

func (s QueryFlowCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowCertificateResponse) GoString() string {
	return s.String()
}

func (s *QueryFlowCertificateResponse) SetReqMsgId(v string) *QueryFlowCertificateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryFlowCertificateResponse) SetResultCode(v string) *QueryFlowCertificateResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryFlowCertificateResponse) SetResultMsg(v string) *QueryFlowCertificateResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryFlowCertificateResponse) SetCertificateUrl(v string) *QueryFlowCertificateResponse {
	s.CertificateUrl = &v
	return s
}

func (s *QueryFlowCertificateResponse) SetLegalCodeUrl(v string) *QueryFlowCertificateResponse {
	s.LegalCodeUrl = &v
	return s
}

func (s *QueryFlowCertificateResponse) SetLegalShowUrl(v string) *QueryFlowCertificateResponse {
	s.LegalShowUrl = &v
	return s
}

type ApplyStubCertificateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 证书类型，AntchainCertification（蚂蚁链存证证明）、OrgCertification（公证处存证证明），目前支持公证处
	CertificationType *string `json:"certification_type,omitempty" xml:"certification_type,omitempty" require:"true"`
	// 公证处ID，OrgCertification（公证处存证证明）选填，不填则为默认公证处
	OrgId *string `json:"org_id,omitempty" xml:"org_id,omitempty"`
	// 是否需要legal码，默认为false即不需要，true表示需要
	NeedLegalCode *bool `json:"need_legal_code,omitempty" xml:"need_legal_code,omitempty"`
}

func (s ApplyStubCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyStubCertificateRequest) GoString() string {
	return s.String()
}

func (s *ApplyStubCertificateRequest) SetAuthToken(v string) *ApplyStubCertificateRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyStubCertificateRequest) SetProductInstanceId(v string) *ApplyStubCertificateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyStubCertificateRequest) SetFlowId(v string) *ApplyStubCertificateRequest {
	s.FlowId = &v
	return s
}

func (s *ApplyStubCertificateRequest) SetCertificationType(v string) *ApplyStubCertificateRequest {
	s.CertificationType = &v
	return s
}

func (s *ApplyStubCertificateRequest) SetOrgId(v string) *ApplyStubCertificateRequest {
	s.OrgId = &v
	return s
}

func (s *ApplyStubCertificateRequest) SetNeedLegalCode(v bool) *ApplyStubCertificateRequest {
	s.NeedLegalCode = &v
	return s
}

type ApplyStubCertificateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 出证订单号
	OrderNo *string `json:"order_no,omitempty" xml:"order_no,omitempty"`
}

func (s ApplyStubCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyStubCertificateResponse) GoString() string {
	return s.String()
}

func (s *ApplyStubCertificateResponse) SetReqMsgId(v string) *ApplyStubCertificateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyStubCertificateResponse) SetResultCode(v string) *ApplyStubCertificateResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyStubCertificateResponse) SetResultMsg(v string) *ApplyStubCertificateResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyStubCertificateResponse) SetOrderNo(v string) *ApplyStubCertificateResponse {
	s.OrderNo = &v
	return s
}

type QueryStubCertificateRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 证书类型，AntchainCertification（蚂蚁链存证证明）、OrgCertification（公证处存证证明），目前支持公证处
	CertificationType *string `json:"certification_type,omitempty" xml:"certification_type,omitempty" require:"true"`
	// 通过twc.notary.stub.certificate.apply(数字票根全流程出证申请)获取到的订单号
	OrderNo *string `json:"order_no,omitempty" xml:"order_no,omitempty" require:"true"`
}

func (s QueryStubCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryStubCertificateRequest) GoString() string {
	return s.String()
}

func (s *QueryStubCertificateRequest) SetAuthToken(v string) *QueryStubCertificateRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryStubCertificateRequest) SetProductInstanceId(v string) *QueryStubCertificateRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryStubCertificateRequest) SetFlowId(v string) *QueryStubCertificateRequest {
	s.FlowId = &v
	return s
}

func (s *QueryStubCertificateRequest) SetCertificationType(v string) *QueryStubCertificateRequest {
	s.CertificationType = &v
	return s
}

func (s *QueryStubCertificateRequest) SetOrderNo(v string) *QueryStubCertificateRequest {
	s.OrderNo = &v
	return s
}

type QueryStubCertificateResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 存证证明下载地址，有效期1个小时
	CertificateUrl *string `json:"certificate_url,omitempty" xml:"certificate_url,omitempty"`
	// Legal码H5页面URL
	LegalCodeUrl *string `json:"legal_code_url,omitempty" xml:"legal_code_url,omitempty"`
	// Legal码证书H5页面URL
	LegalShowUrl *string `json:"legal_show_url,omitempty" xml:"legal_show_url,omitempty"`
}

func (s QueryStubCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryStubCertificateResponse) GoString() string {
	return s.String()
}

func (s *QueryStubCertificateResponse) SetReqMsgId(v string) *QueryStubCertificateResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryStubCertificateResponse) SetResultCode(v string) *QueryStubCertificateResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryStubCertificateResponse) SetResultMsg(v string) *QueryStubCertificateResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryStubCertificateResponse) SetCertificateUrl(v string) *QueryStubCertificateResponse {
	s.CertificateUrl = &v
	return s
}

func (s *QueryStubCertificateResponse) SetLegalCodeUrl(v string) *QueryStubCertificateResponse {
	s.LegalCodeUrl = &v
	return s
}

func (s *QueryStubCertificateResponse) SetLegalShowUrl(v string) *QueryStubCertificateResponse {
	s.LegalShowUrl = &v
	return s
}

type QueryStubRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程id，通过twc.notary.stub.create接口获取
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 是否需要legal标，默认为false，如果需要则填true
	NeedLegalLogo *bool `json:"need_legal_logo,omitempty" xml:"need_legal_logo,omitempty"`
}

func (s QueryStubRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryStubRequest) GoString() string {
	return s.String()
}

func (s *QueryStubRequest) SetAuthToken(v string) *QueryStubRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryStubRequest) SetProductInstanceId(v string) *QueryStubRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryStubRequest) SetFlowId(v string) *QueryStubRequest {
	s.FlowId = &v
	return s
}

func (s *QueryStubRequest) SetNeedLegalLogo(v bool) *QueryStubRequest {
	s.NeedLegalLogo = &v
	return s
}

type QueryStubResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 数字票根存证全流程状态，FINISH(完结)、PROCESSING(上链中)、DISABLE(失效)、FAILED(失败)
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// 阶段存证查询结果列表
	PhaseQueryResultList []*PhaseQueryResult `json:"phase_query_result_list,omitempty" xml:"phase_query_result_list,omitempty" type:"Repeated"`
	// legal标URL，只有当入参needLegalLogo为true且响应status为FINISH时才会返回
	LegalLogoUrl *string `json:"legal_logo_url,omitempty" xml:"legal_logo_url,omitempty"`
	// 数字纪念票背面URL，只有当创建数字票根时写入了backType字段且响应status为FINISH时才会返回
	StubBackUrl *string `json:"stub_back_url,omitempty" xml:"stub_back_url,omitempty"`
}

func (s QueryStubResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryStubResponse) GoString() string {
	return s.String()
}

func (s *QueryStubResponse) SetReqMsgId(v string) *QueryStubResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryStubResponse) SetResultCode(v string) *QueryStubResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryStubResponse) SetResultMsg(v string) *QueryStubResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryStubResponse) SetStatus(v string) *QueryStubResponse {
	s.Status = &v
	return s
}

func (s *QueryStubResponse) SetPhaseQueryResultList(v []*PhaseQueryResult) *QueryStubResponse {
	s.PhaseQueryResultList = v
	return s
}

func (s *QueryStubResponse) SetLegalLogoUrl(v string) *QueryStubResponse {
	s.LegalLogoUrl = &v
	return s
}

func (s *QueryStubResponse) SetStubBackUrl(v string) *QueryStubResponse {
	s.StubBackUrl = &v
	return s
}

type CreateStubRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 数字票根全流程存证内容
	OnestepFlowNotaryInfo *OnestepFlowNotaryInfo `json:"onestep_flow_notary_info,omitempty" xml:"onestep_flow_notary_info,omitempty" require:"true"`
	// 数字票根通用业务字段
	StubCommonInfo *StubCommonInfo `json:"stub_common_info,omitempty" xml:"stub_common_info,omitempty" require:"true"`
	// 数字票根扩展字段
	StubExtraInfo *StubExtraInfo `json:"stub_extra_info,omitempty" xml:"stub_extra_info,omitempty"`
	// 数字票根计量字段
	MetricInfo *MetricInfo `json:"metric_info,omitempty" xml:"metric_info,omitempty"`
}

func (s CreateStubRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateStubRequest) GoString() string {
	return s.String()
}

func (s *CreateStubRequest) SetAuthToken(v string) *CreateStubRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateStubRequest) SetProductInstanceId(v string) *CreateStubRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateStubRequest) SetOnestepFlowNotaryInfo(v *OnestepFlowNotaryInfo) *CreateStubRequest {
	s.OnestepFlowNotaryInfo = v
	return s
}

func (s *CreateStubRequest) SetStubCommonInfo(v *StubCommonInfo) *CreateStubRequest {
	s.StubCommonInfo = v
	return s
}

func (s *CreateStubRequest) SetStubExtraInfo(v *StubExtraInfo) *CreateStubRequest {
	s.StubExtraInfo = v
	return s
}

func (s *CreateStubRequest) SetMetricInfo(v *MetricInfo) *CreateStubRequest {
	s.MetricInfo = v
	return s
}

type CreateStubResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回流程ID，全局唯一
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty"`
	// 阶段存证结果列表
	PhaseCreateResultList []*PhaseCreateResult `json:"phase_create_result_list,omitempty" xml:"phase_create_result_list,omitempty" type:"Repeated"`
}

func (s CreateStubResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateStubResponse) GoString() string {
	return s.String()
}

func (s *CreateStubResponse) SetReqMsgId(v string) *CreateStubResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateStubResponse) SetResultCode(v string) *CreateStubResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateStubResponse) SetResultMsg(v string) *CreateStubResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateStubResponse) SetFlowId(v string) *CreateStubResponse {
	s.FlowId = &v
	return s
}

func (s *CreateStubResponse) SetPhaseCreateResultList(v []*PhaseCreateResult) *CreateStubResponse {
	s.PhaseCreateResultList = v
	return s
}

type ExistStubRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 客户id。支付宝情况下传支付宝id，2088打头；景区情况下为自定义的客户id
	CustomerId *string `json:"customer_id,omitempty" xml:"customer_id,omitempty" require:"true"`
	// 景区名称
	SceneName *string `json:"scene_name,omitempty" xml:"scene_name,omitempty" require:"true"`
}

func (s ExistStubRequest) String() string {
	return tea.Prettify(s)
}

func (s ExistStubRequest) GoString() string {
	return s.String()
}

func (s *ExistStubRequest) SetAuthToken(v string) *ExistStubRequest {
	s.AuthToken = &v
	return s
}

func (s *ExistStubRequest) SetProductInstanceId(v string) *ExistStubRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ExistStubRequest) SetFlowId(v string) *ExistStubRequest {
	s.FlowId = &v
	return s
}

func (s *ExistStubRequest) SetCustomerId(v string) *ExistStubRequest {
	s.CustomerId = &v
	return s
}

func (s *ExistStubRequest) SetSceneName(v string) *ExistStubRequest {
	s.SceneName = &v
	return s
}

type ExistStubResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 是否存在数字票根。true：存在；false：不存在
	Exist *bool `json:"exist,omitempty" xml:"exist,omitempty"`
}

func (s ExistStubResponse) String() string {
	return tea.Prettify(s)
}

func (s ExistStubResponse) GoString() string {
	return s.String()
}

func (s *ExistStubResponse) SetReqMsgId(v string) *ExistStubResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ExistStubResponse) SetResultCode(v string) *ExistStubResponse {
	s.ResultCode = &v
	return s
}

func (s *ExistStubResponse) SetResultMsg(v string) *ExistStubResponse {
	s.ResultMsg = &v
	return s
}

func (s *ExistStubResponse) SetExist(v bool) *ExistStubResponse {
	s.Exist = &v
	return s
}

type CreateStubClearingRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 待分账金额，单位：分。如传100，即为100分，1元
	StubAmount *int64 `json:"stub_amount,omitempty" xml:"stub_amount,omitempty" require:"true"`
	// 清分状态，CLEARING_SUCCESS（清分成功）；CLEARING_FAIL（清分失败）；CLEARING_NONEED（不需要进行清分）
	ClearingStatus *string `json:"clearing_status,omitempty" xml:"clearing_status,omitempty" require:"true"`
	// 数字票根计量字段，当clearing_status为CLEARING_SUCCESS时，该字段必填
	MetricInfo *MetricInfo `json:"metric_info,omitempty" xml:"metric_info,omitempty"`
}

func (s CreateStubClearingRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateStubClearingRequest) GoString() string {
	return s.String()
}

func (s *CreateStubClearingRequest) SetAuthToken(v string) *CreateStubClearingRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateStubClearingRequest) SetProductInstanceId(v string) *CreateStubClearingRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateStubClearingRequest) SetFlowId(v string) *CreateStubClearingRequest {
	s.FlowId = &v
	return s
}

func (s *CreateStubClearingRequest) SetStubAmount(v int64) *CreateStubClearingRequest {
	s.StubAmount = &v
	return s
}

func (s *CreateStubClearingRequest) SetClearingStatus(v string) *CreateStubClearingRequest {
	s.ClearingStatus = &v
	return s
}

func (s *CreateStubClearingRequest) SetMetricInfo(v *MetricInfo) *CreateStubClearingRequest {
	s.MetricInfo = v
	return s
}

type CreateStubClearingResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s CreateStubClearingResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateStubClearingResponse) GoString() string {
	return s.String()
}

func (s *CreateStubClearingResponse) SetReqMsgId(v string) *CreateStubClearingResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateStubClearingResponse) SetResultCode(v string) *CreateStubClearingResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateStubClearingResponse) SetResultMsg(v string) *CreateStubClearingResponse {
	s.ResultMsg = &v
	return s
}

type ApplyFlowEvidenceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 证据包类型，默认为ChainEvidencePack(链上证据包)，按需填写，目前支持ChainEvidencePack(链上证据包)，其他包括LocalEvidencePack(链下证据包)，链下证据包前置依赖链上证据包，因此填写链下证据包会先生成链上证据包。
	// 链上证据包，即全流程所有阶段存证关系链上固化，生成全流程链上证据统一txHash；
	// 链下证据包，即全流程所有内容生成链下压缩包文件。
	EvidencePackType *string `json:"evidence_pack_type,omitempty" xml:"evidence_pack_type,omitempty" require:"true"`
}

func (s ApplyFlowEvidenceRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyFlowEvidenceRequest) GoString() string {
	return s.String()
}

func (s *ApplyFlowEvidenceRequest) SetAuthToken(v string) *ApplyFlowEvidenceRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyFlowEvidenceRequest) SetProductInstanceId(v string) *ApplyFlowEvidenceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyFlowEvidenceRequest) SetFlowId(v string) *ApplyFlowEvidenceRequest {
	s.FlowId = &v
	return s
}

func (s *ApplyFlowEvidenceRequest) SetEvidencePackType(v string) *ApplyFlowEvidenceRequest {
	s.EvidencePackType = &v
	return s
}

type ApplyFlowEvidenceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
}

func (s ApplyFlowEvidenceResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyFlowEvidenceResponse) GoString() string {
	return s.String()
}

func (s *ApplyFlowEvidenceResponse) SetReqMsgId(v string) *ApplyFlowEvidenceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyFlowEvidenceResponse) SetResultCode(v string) *ApplyFlowEvidenceResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyFlowEvidenceResponse) SetResultMsg(v string) *ApplyFlowEvidenceResponse {
	s.ResultMsg = &v
	return s
}

type QueryFlowEvidenceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 证据包类型，默认为ChainEvidencePack(链上证据包)，其他包括LocalEvidencePack(链下证据包)，链下证据包前置依赖链上证据包，因此链下证据包会返回链上证据包，但如果查询链下证据包，则只有等链下证据包完整生成才会返回，否则返回都是生成中。
	EvidencePackType *string `json:"evidence_pack_type,omitempty" xml:"evidence_pack_type,omitempty" require:"true"`
}

func (s QueryFlowEvidenceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowEvidenceRequest) GoString() string {
	return s.String()
}

func (s *QueryFlowEvidenceRequest) SetAuthToken(v string) *QueryFlowEvidenceRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryFlowEvidenceRequest) SetProductInstanceId(v string) *QueryFlowEvidenceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryFlowEvidenceRequest) SetFlowId(v string) *QueryFlowEvidenceRequest {
	s.FlowId = &v
	return s
}

func (s *QueryFlowEvidenceRequest) SetEvidencePackType(v string) *QueryFlowEvidenceRequest {
	s.EvidencePackType = &v
	return s
}

type QueryFlowEvidenceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 链上证据包对应的链上交易Hash，只有resultMsg为success时才返回
	ChainPackTxHash *string `json:"chain_pack_tx_hash,omitempty" xml:"chain_pack_tx_hash,omitempty"`
	// 暂不支持，预留字段，链下证据包对应的可下载链接，有效期3小时，只有申请时选择了链下证据包、查询入参evidencePackType选择LocalEvidencePack及resultMsg为success时才返回
	LocalPackUrl *string `json:"local_pack_url,omitempty" xml:"local_pack_url,omitempty"`
}

func (s QueryFlowEvidenceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowEvidenceResponse) GoString() string {
	return s.String()
}

func (s *QueryFlowEvidenceResponse) SetReqMsgId(v string) *QueryFlowEvidenceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryFlowEvidenceResponse) SetResultCode(v string) *QueryFlowEvidenceResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryFlowEvidenceResponse) SetResultMsg(v string) *QueryFlowEvidenceResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryFlowEvidenceResponse) SetChainPackTxHash(v string) *QueryFlowEvidenceResponse {
	s.ChainPackTxHash = &v
	return s
}

func (s *QueryFlowEvidenceResponse) SetLocalPackUrl(v string) *QueryFlowEvidenceResponse {
	s.LocalPackUrl = &v
	return s
}

type ApplyFlowAuthRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 链上证据包对应的链上交易Hash，通过twc.notary.flow.evidence.query(全流程证据包生成进度查询)获取
	ChainPackTxHash *string `json:"chain_pack_tx_hash,omitempty" xml:"chain_pack_tx_hash,omitempty" require:"true"`
	// 授权时间长度，单位为s，默认72小时，即259200s，有效期为接口调用时间开始，接口调用时间+授权时间长度的时间为结束时间，例如当前时间为2022-08-18 00:00:00，授权时间长度为86400s(即一天)，则授权截止时间为2022-08-19 00:00:00
	AuthTimePeriod *int64 `json:"auth_time_period,omitempty" xml:"auth_time_period,omitempty"`
}

func (s ApplyFlowAuthRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyFlowAuthRequest) GoString() string {
	return s.String()
}

func (s *ApplyFlowAuthRequest) SetAuthToken(v string) *ApplyFlowAuthRequest {
	s.AuthToken = &v
	return s
}

func (s *ApplyFlowAuthRequest) SetProductInstanceId(v string) *ApplyFlowAuthRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *ApplyFlowAuthRequest) SetFlowId(v string) *ApplyFlowAuthRequest {
	s.FlowId = &v
	return s
}

func (s *ApplyFlowAuthRequest) SetChainPackTxHash(v string) *ApplyFlowAuthRequest {
	s.ChainPackTxHash = &v
	return s
}

func (s *ApplyFlowAuthRequest) SetAuthTimePeriod(v int64) *ApplyFlowAuthRequest {
	s.AuthTimePeriod = &v
	return s
}

type ApplyFlowAuthResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 链上证据包授权码，只有resultMsg为success时才返回
	AuthCode *string `json:"auth_code,omitempty" xml:"auth_code,omitempty"`
	// 链上证据包授权码过期时间
	ExpireTime *int64 `json:"expire_time,omitempty" xml:"expire_time,omitempty"`
}

func (s ApplyFlowAuthResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyFlowAuthResponse) GoString() string {
	return s.String()
}

func (s *ApplyFlowAuthResponse) SetReqMsgId(v string) *ApplyFlowAuthResponse {
	s.ReqMsgId = &v
	return s
}

func (s *ApplyFlowAuthResponse) SetResultCode(v string) *ApplyFlowAuthResponse {
	s.ResultCode = &v
	return s
}

func (s *ApplyFlowAuthResponse) SetResultMsg(v string) *ApplyFlowAuthResponse {
	s.ResultMsg = &v
	return s
}

func (s *ApplyFlowAuthResponse) SetAuthCode(v string) *ApplyFlowAuthResponse {
	s.AuthCode = &v
	return s
}

func (s *ApplyFlowAuthResponse) SetExpireTime(v int64) *ApplyFlowAuthResponse {
	s.ExpireTime = &v
	return s
}

type DetailFlowInstanceRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 流程id
	FlowId *string `json:"flow_id,omitempty" xml:"flow_id,omitempty" require:"true"`
	// 链上证据包对应的链上交易Hash，通过twc.notary.flow.evidence.query(全流程证据包生成进度查询)获取
	ChainPackTxHash *string `json:"chain_pack_tx_hash,omitempty" xml:"chain_pack_tx_hash,omitempty" require:"true"`
	// 链上证据包授权码，不传默认按照当前租户校验，填写则按照授权租户检查
	AuthCode *string `json:"auth_code,omitempty" xml:"auth_code,omitempty"`
}

func (s DetailFlowInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DetailFlowInstanceRequest) GoString() string {
	return s.String()
}

func (s *DetailFlowInstanceRequest) SetAuthToken(v string) *DetailFlowInstanceRequest {
	s.AuthToken = &v
	return s
}

func (s *DetailFlowInstanceRequest) SetProductInstanceId(v string) *DetailFlowInstanceRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *DetailFlowInstanceRequest) SetFlowId(v string) *DetailFlowInstanceRequest {
	s.FlowId = &v
	return s
}

func (s *DetailFlowInstanceRequest) SetChainPackTxHash(v string) *DetailFlowInstanceRequest {
	s.ChainPackTxHash = &v
	return s
}

func (s *DetailFlowInstanceRequest) SetAuthCode(v string) *DetailFlowInstanceRequest {
	s.AuthCode = &v
	return s
}

type DetailFlowInstanceResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 本次存证的存证主体信息
	NotaryUser *NotaryUser `json:"notary_user,omitempty" xml:"notary_user,omitempty"`
	// 本次全流程的阶段存证详情列表
	PhaseDetailList []*PhaseDetail `json:"phase_detail_list,omitempty" xml:"phase_detail_list,omitempty" type:"Repeated"`
}

func (s DetailFlowInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DetailFlowInstanceResponse) GoString() string {
	return s.String()
}

func (s *DetailFlowInstanceResponse) SetReqMsgId(v string) *DetailFlowInstanceResponse {
	s.ReqMsgId = &v
	return s
}

func (s *DetailFlowInstanceResponse) SetResultCode(v string) *DetailFlowInstanceResponse {
	s.ResultCode = &v
	return s
}

func (s *DetailFlowInstanceResponse) SetResultMsg(v string) *DetailFlowInstanceResponse {
	s.ResultMsg = &v
	return s
}

func (s *DetailFlowInstanceResponse) SetNotaryUser(v *NotaryUser) *DetailFlowInstanceResponse {
	s.NotaryUser = v
	return s
}

func (s *DetailFlowInstanceResponse) SetPhaseDetailList(v []*PhaseDetail) *DetailFlowInstanceResponse {
	s.PhaseDetailList = v
	return s
}

type CheckContractRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 链路由字段，如：copyright、judicatory、contract
	Chain *string `json:"chain,omitempty" xml:"chain,omitempty" require:"true"`
	// 是否跨链，目前仅支持跨链：true
	CrossChain *bool `json:"cross_chain,omitempty" xml:"cross_chain,omitempty" require:"true"`
	// 业务合约id，当crossChain为false时，该字段必填
	ContractId *string `json:"contract_id,omitempty" xml:"contract_id,omitempty"`
	// 业务合约方法名称，当crossChain为false时，该字段必填
	ContractMethod *string `json:"contract_method,omitempty" xml:"contract_method,omitempty"`
	// 业务合约方法入参，当crossChain为false时，该字段必填
	ContractParam *string `json:"contract_param,omitempty" xml:"contract_param,omitempty"`
	// 业务合约方法的返回值类型
	ContractOutTypes *string `json:"contract_out_types,omitempty" xml:"contract_out_types,omitempty"`
	// 跨链的业务合约的contractId，contractMethod，contractParam，contractOutTypes的JSON组合。当crossChain为true时，该字段必填。
	CrossParam *string `json:"cross_param,omitempty" xml:"cross_param,omitempty"`
	// 是否本地执行
	Local *bool `json:"local,omitempty" xml:"local,omitempty"`
	// 链上账户名称
	ContractAccount *string `json:"contract_account,omitempty" xml:"contract_account,omitempty"`
	// 业务订单id
	BizOrderId *string `json:"biz_order_id,omitempty" xml:"biz_order_id,omitempty" require:"true"`
}

func (s CheckContractRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckContractRequest) GoString() string {
	return s.String()
}

func (s *CheckContractRequest) SetAuthToken(v string) *CheckContractRequest {
	s.AuthToken = &v
	return s
}

func (s *CheckContractRequest) SetProductInstanceId(v string) *CheckContractRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CheckContractRequest) SetChain(v string) *CheckContractRequest {
	s.Chain = &v
	return s
}

func (s *CheckContractRequest) SetCrossChain(v bool) *CheckContractRequest {
	s.CrossChain = &v
	return s
}

func (s *CheckContractRequest) SetContractId(v string) *CheckContractRequest {
	s.ContractId = &v
	return s
}

func (s *CheckContractRequest) SetContractMethod(v string) *CheckContractRequest {
	s.ContractMethod = &v
	return s
}

func (s *CheckContractRequest) SetContractParam(v string) *CheckContractRequest {
	s.ContractParam = &v
	return s
}

func (s *CheckContractRequest) SetContractOutTypes(v string) *CheckContractRequest {
	s.ContractOutTypes = &v
	return s
}

func (s *CheckContractRequest) SetCrossParam(v string) *CheckContractRequest {
	s.CrossParam = &v
	return s
}

func (s *CheckContractRequest) SetLocal(v bool) *CheckContractRequest {
	s.Local = &v
	return s
}

func (s *CheckContractRequest) SetContractAccount(v string) *CheckContractRequest {
	s.ContractAccount = &v
	return s
}

func (s *CheckContractRequest) SetBizOrderId(v string) *CheckContractRequest {
	s.BizOrderId = &v
	return s
}

type CheckContractResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
}

func (s CheckContractResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckContractResponse) GoString() string {
	return s.String()
}

func (s *CheckContractResponse) SetReqMsgId(v string) *CheckContractResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CheckContractResponse) SetResultCode(v string) *CheckContractResponse {
	s.ResultCode = &v
	return s
}

func (s *CheckContractResponse) SetResultMsg(v string) *CheckContractResponse {
	s.ResultMsg = &v
	return s
}

func (s *CheckContractResponse) SetOrderId(v string) *CheckContractResponse {
	s.OrderId = &v
	return s
}

type QueryContractStatusRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty" require:"true"`
}

func (s QueryContractStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContractStatusRequest) GoString() string {
	return s.String()
}

func (s *QueryContractStatusRequest) SetAuthToken(v string) *QueryContractStatusRequest {
	s.AuthToken = &v
	return s
}

func (s *QueryContractStatusRequest) SetProductInstanceId(v string) *QueryContractStatusRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *QueryContractStatusRequest) SetOrderId(v string) *QueryContractStatusRequest {
	s.OrderId = &v
	return s
}

type QueryContractStatusResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 交易hash
	TxHash *string `json:"tx_hash,omitempty" xml:"tx_hash,omitempty"`
	// 订单id
	OrderId *string `json:"order_id,omitempty" xml:"order_id,omitempty"`
	// 合约执行结果，Base64编码后的
	ContentBase64 *string `json:"content_base64,omitempty" xml:"content_base64,omitempty"`
	// 块高
	BlockNumber *int64 `json:"block_number,omitempty" xml:"block_number,omitempty"`
	// 消耗gas量
	GasUsed *int64 `json:"gas_used,omitempty" xml:"gas_used,omitempty"`
	// log信息
	LogBase64 *string `json:"log_base64,omitempty" xml:"log_base64,omitempty"`
}

func (s QueryContractStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContractStatusResponse) GoString() string {
	return s.String()
}

func (s *QueryContractStatusResponse) SetReqMsgId(v string) *QueryContractStatusResponse {
	s.ReqMsgId = &v
	return s
}

func (s *QueryContractStatusResponse) SetResultCode(v string) *QueryContractStatusResponse {
	s.ResultCode = &v
	return s
}

func (s *QueryContractStatusResponse) SetResultMsg(v string) *QueryContractStatusResponse {
	s.ResultMsg = &v
	return s
}

func (s *QueryContractStatusResponse) SetTxHash(v string) *QueryContractStatusResponse {
	s.TxHash = &v
	return s
}

func (s *QueryContractStatusResponse) SetOrderId(v string) *QueryContractStatusResponse {
	s.OrderId = &v
	return s
}

func (s *QueryContractStatusResponse) SetContentBase64(v string) *QueryContractStatusResponse {
	s.ContentBase64 = &v
	return s
}

func (s *QueryContractStatusResponse) SetBlockNumber(v int64) *QueryContractStatusResponse {
	s.BlockNumber = &v
	return s
}

func (s *QueryContractStatusResponse) SetGasUsed(v int64) *QueryContractStatusResponse {
	s.GasUsed = &v
	return s
}

func (s *QueryContractStatusResponse) SetLogBase64(v string) *QueryContractStatusResponse {
	s.LogBase64 = &v
	return s
}

type CreateTrafficTraceidRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 业务场景码
	SceneCode *string `json:"scene_code,omitempty" xml:"scene_code,omitempty" require:"true"`
	// 用户Id
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	// 渠道说明
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
}

func (s CreateTrafficTraceidRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTrafficTraceidRequest) GoString() string {
	return s.String()
}

func (s *CreateTrafficTraceidRequest) SetAuthToken(v string) *CreateTrafficTraceidRequest {
	s.AuthToken = &v
	return s
}

func (s *CreateTrafficTraceidRequest) SetProductInstanceId(v string) *CreateTrafficTraceidRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *CreateTrafficTraceidRequest) SetSceneCode(v string) *CreateTrafficTraceidRequest {
	s.SceneCode = &v
	return s
}

func (s *CreateTrafficTraceidRequest) SetUserId(v string) *CreateTrafficTraceidRequest {
	s.UserId = &v
	return s
}

func (s *CreateTrafficTraceidRequest) SetSource(v string) *CreateTrafficTraceidRequest {
	s.Source = &v
	return s
}

type CreateTrafficTraceidResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 返回traceId，全局唯一
	TraceId *string `json:"trace_id,omitempty" xml:"trace_id,omitempty"`
}

func (s CreateTrafficTraceidResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTrafficTraceidResponse) GoString() string {
	return s.String()
}

func (s *CreateTrafficTraceidResponse) SetReqMsgId(v string) *CreateTrafficTraceidResponse {
	s.ReqMsgId = &v
	return s
}

func (s *CreateTrafficTraceidResponse) SetResultCode(v string) *CreateTrafficTraceidResponse {
	s.ResultCode = &v
	return s
}

func (s *CreateTrafficTraceidResponse) SetResultMsg(v string) *CreateTrafficTraceidResponse {
	s.ResultMsg = &v
	return s
}

func (s *CreateTrafficTraceidResponse) SetTraceId(v string) *CreateTrafficTraceidResponse {
	s.TraceId = &v
	return s
}

type UploadTrafficOperatelogRequest struct {
	// OAuth模式下的授权token
	AuthToken         *string `json:"auth_token,omitempty" xml:"auth_token,omitempty"`
	ProductInstanceId *string `json:"product_instance_id,omitempty" xml:"product_instance_id,omitempty"`
	// 通过trace_id生成接口生成的trace_id
	TraceId *string `json:"trace_id,omitempty" xml:"trace_id,omitempty" require:"true"`
	// 事件时间
	EventTime *string `json:"event_time,omitempty" xml:"event_time,omitempty" require:"true"`
	// 当前页面类型标记
	PageFlag *string `json:"page_flag,omitempty" xml:"page_flag,omitempty" require:"true"`
	// 行为标记
	ActionFlag *string `json:"action_flag,omitempty" xml:"action_flag,omitempty" require:"true"`
	// 当前页面地址
	CurUrl *string `json:"cur_url,omitempty" xml:"cur_url,omitempty" require:"true"`
	// 事件对应位置编码
	PositionNo *string `json:"position_no,omitempty" xml:"position_no,omitempty" require:"true"`
	// 商品标识
	ItemId *string `json:"item_id,omitempty" xml:"item_id,omitempty"`
	// 店铺标识
	ShopId *string `json:"shop_id,omitempty" xml:"shop_id,omitempty"`
	// 上一跳页面地址
	PreUrl *string `json:"pre_url,omitempty" xml:"pre_url,omitempty"`
	// 渠道说明
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
	// 当前广告位级别
	AdSpaceLevel *string `json:"ad_space_level,omitempty" xml:"ad_space_level,omitempty"`
	// 人群组标签ID
	GroupId *string `json:"group_id,omitempty" xml:"group_id,omitempty"`
}

func (s UploadTrafficOperatelogRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadTrafficOperatelogRequest) GoString() string {
	return s.String()
}

func (s *UploadTrafficOperatelogRequest) SetAuthToken(v string) *UploadTrafficOperatelogRequest {
	s.AuthToken = &v
	return s
}

func (s *UploadTrafficOperatelogRequest) SetProductInstanceId(v string) *UploadTrafficOperatelogRequest {
	s.ProductInstanceId = &v
	return s
}

func (s *UploadTrafficOperatelogRequest) SetTraceId(v string) *UploadTrafficOperatelogRequest {
	s.TraceId = &v
	return s
}

func (s *UploadTrafficOperatelogRequest) SetEventTime(v string) *UploadTrafficOperatelogRequest {
	s.EventTime = &v
	return s
}

func (s *UploadTrafficOperatelogRequest) SetPageFlag(v string) *UploadTrafficOperatelogRequest {
	s.PageFlag = &v
	return s
}

func (s *UploadTrafficOperatelogRequest) SetActionFlag(v string) *UploadTrafficOperatelogRequest {
	s.ActionFlag = &v
	return s
}

func (s *UploadTrafficOperatelogRequest) SetCurUrl(v string) *UploadTrafficOperatelogRequest {
	s.CurUrl = &v
	return s
}

func (s *UploadTrafficOperatelogRequest) SetPositionNo(v string) *UploadTrafficOperatelogRequest {
	s.PositionNo = &v
	return s
}

func (s *UploadTrafficOperatelogRequest) SetItemId(v string) *UploadTrafficOperatelogRequest {
	s.ItemId = &v
	return s
}

func (s *UploadTrafficOperatelogRequest) SetShopId(v string) *UploadTrafficOperatelogRequest {
	s.ShopId = &v
	return s
}

func (s *UploadTrafficOperatelogRequest) SetPreUrl(v string) *UploadTrafficOperatelogRequest {
	s.PreUrl = &v
	return s
}

func (s *UploadTrafficOperatelogRequest) SetSource(v string) *UploadTrafficOperatelogRequest {
	s.Source = &v
	return s
}

func (s *UploadTrafficOperatelogRequest) SetAdSpaceLevel(v string) *UploadTrafficOperatelogRequest {
	s.AdSpaceLevel = &v
	return s
}

func (s *UploadTrafficOperatelogRequest) SetGroupId(v string) *UploadTrafficOperatelogRequest {
	s.GroupId = &v
	return s
}

type UploadTrafficOperatelogResponse struct {
	// 请求唯一ID，用于链路跟踪和问题排查
	ReqMsgId *string `json:"req_msg_id,omitempty" xml:"req_msg_id,omitempty"`
	// 结果码，一般OK表示调用成功
	ResultCode *string `json:"result_code,omitempty" xml:"result_code,omitempty"`
	// 异常信息的文本描述
	ResultMsg *string `json:"result_msg,omitempty" xml:"result_msg,omitempty"`
	// 上传结果
	UploadResult *bool `json:"upload_result,omitempty" xml:"upload_result,omitempty"`
}

func (s UploadTrafficOperatelogResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadTrafficOperatelogResponse) GoString() string {
	return s.String()
}

func (s *UploadTrafficOperatelogResponse) SetReqMsgId(v string) *UploadTrafficOperatelogResponse {
	s.ReqMsgId = &v
	return s
}

func (s *UploadTrafficOperatelogResponse) SetResultCode(v string) *UploadTrafficOperatelogResponse {
	s.ResultCode = &v
	return s
}

func (s *UploadTrafficOperatelogResponse) SetResultMsg(v string) *UploadTrafficOperatelogResponse {
	s.ResultMsg = &v
	return s
}

func (s *UploadTrafficOperatelogResponse) SetUploadResult(v bool) *UploadTrafficOperatelogResponse {
	s.UploadResult = &v
	return s
}

type Client struct {
	Endpoint                *string
	RegionId                *string
	AccessKeyId             *string
	AccessKeySecret         *string
	Protocol                *string
	UserAgent               *string
	ReadTimeout             *int
	ConnectTimeout          *int
	HttpProxy               *string
	HttpsProxy              *string
	Socks5Proxy             *string
	Socks5NetWork           *string
	NoProxy                 *string
	MaxIdleConns            *int
	SecurityToken           *string
	MaxIdleTimeMillis       *int
	KeepAliveDurationMillis *int
	MaxRequests             *int
	MaxRequestsPerHost      *int
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
func NewClient(config *Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *Config) (_err error) {
	if tea.BoolValue(util.IsUnset(tea.ToMap(config))) {
		_err = tea.NewSDKError(map[string]interface{}{
			"code":    "ParameterMissing",
			"message": "'config' can not be unset",
		})
		return _err
	}

	client.AccessKeyId = config.AccessKeyId
	client.AccessKeySecret = config.AccessKeySecret
	client.SecurityToken = config.SecurityToken
	client.Endpoint = config.Endpoint
	client.Protocol = config.Protocol
	client.UserAgent = config.UserAgent
	client.ReadTimeout = util.DefaultNumber(config.ReadTimeout, tea.Int(20000))
	client.ConnectTimeout = util.DefaultNumber(config.ConnectTimeout, tea.Int(20000))
	client.HttpProxy = config.HttpProxy
	client.HttpsProxy = config.HttpsProxy
	client.NoProxy = config.NoProxy
	client.Socks5Proxy = config.Socks5Proxy
	client.Socks5NetWork = config.Socks5NetWork
	client.MaxIdleConns = util.DefaultNumber(config.MaxIdleConns, tea.Int(60000))
	client.MaxIdleTimeMillis = util.DefaultNumber(config.MaxIdleTimeMillis, tea.Int(5))
	client.KeepAliveDurationMillis = util.DefaultNumber(config.KeepAliveDurationMillis, tea.Int(5000))
	client.MaxRequests = util.DefaultNumber(config.MaxRequests, tea.Int(100))
	client.MaxRequestsPerHost = util.DefaultNumber(config.MaxRequestsPerHost, tea.Int(100))
	return nil
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
func (client *Client) DoRequest(version *string, action *string, protocol *string, method *string, pathname *string, request map[string]interface{}, headers map[string]*string, runtime *util.RuntimeOptions) (_result map[string]interface{}, _err error) {
	_err = tea.Validate(runtime)
	if _err != nil {
		return _result, _err
	}
	_runtime := map[string]interface{}{
		"timeouted":          "retry",
		"readTimeout":        tea.IntValue(util.DefaultNumber(runtime.ReadTimeout, client.ReadTimeout)),
		"connectTimeout":     tea.IntValue(util.DefaultNumber(runtime.ConnectTimeout, client.ConnectTimeout)),
		"httpProxy":          tea.StringValue(util.DefaultString(runtime.HttpProxy, client.HttpProxy)),
		"httpsProxy":         tea.StringValue(util.DefaultString(runtime.HttpsProxy, client.HttpsProxy)),
		"noProxy":            tea.StringValue(util.DefaultString(runtime.NoProxy, client.NoProxy)),
		"maxIdleConns":       tea.IntValue(util.DefaultNumber(runtime.MaxIdleConns, client.MaxIdleConns)),
		"maxIdleTimeMillis":  tea.IntValue(client.MaxIdleTimeMillis),
		"keepAliveDuration":  tea.IntValue(client.KeepAliveDurationMillis),
		"maxRequests":        tea.IntValue(client.MaxRequests),
		"maxRequestsPerHost": tea.IntValue(client.MaxRequestsPerHost),
		"retry": map[string]interface{}{
			"retryable":   tea.BoolValue(runtime.Autoretry),
			"maxAttempts": tea.IntValue(util.DefaultNumber(runtime.MaxAttempts, tea.Int(3))),
		},
		"backoff": map[string]interface{}{
			"policy": tea.StringValue(util.DefaultString(runtime.BackoffPolicy, tea.String("no"))),
			"period": tea.IntValue(util.DefaultNumber(runtime.BackoffPeriod, tea.Int(1))),
		},
		"ignoreSSL": tea.BoolValue(runtime.IgnoreSSL),
	}

	_resp := make(map[string]interface{})
	for _retryTimes := 0; tea.BoolValue(tea.AllowRetry(_runtime["retry"], tea.Int(_retryTimes))); _retryTimes++ {
		if _retryTimes > 0 {
			_backoffTime := tea.GetBackoffTime(_runtime["backoff"], tea.Int(_retryTimes))
			if tea.IntValue(_backoffTime) > 0 {
				tea.Sleep(_backoffTime)
			}
		}

		_resp, _err = func() (map[string]interface{}, error) {
			request_ := tea.NewRequest()
			request_.Protocol = util.DefaultString(client.Protocol, protocol)
			request_.Method = method
			request_.Pathname = pathname
			request_.Query = map[string]*string{
				"method":           action,
				"version":          version,
				"sign_type":        tea.String("HmacSHA1"),
				"req_time":         antchainutil.GetTimestamp(),
				"req_msg_id":       antchainutil.GetNonce(),
				"access_key":       client.AccessKeyId,
				"base_sdk_version": tea.String("TeaSDK-2.0"),
				"sdk_version":      tea.String("1.12.8"),
				"_prod_code":       tea.String("TWC"),
				"_prod_channel":    tea.String("undefined"),
			}
			if !tea.BoolValue(util.Empty(client.SecurityToken)) {
				request_.Query["security_token"] = client.SecurityToken
			}

			request_.Headers = tea.Merge(map[string]*string{
				"host":       util.DefaultString(client.Endpoint, tea.String("twc-openapi.antchain.antgroup.com")),
				"user-agent": util.GetUserAgent(client.UserAgent),
			}, headers)
			tmp := util.AnyifyMapValue(rpcutil.Query(request))
			request_.Body = tea.ToReader(util.ToFormString(tmp))
			request_.Headers["content-type"] = tea.String("application/x-www-form-urlencoded")
			signedParam := tea.Merge(request_.Query,
				rpcutil.Query(request))
			request_.Query["sign"] = antchainutil.GetSignature(signedParam, client.AccessKeySecret)
			response_, _err := tea.DoRequest(request_, _runtime)
			if _err != nil {
				return _result, _err
			}
			raw, _err := util.ReadAsString(response_.Body)
			if _err != nil {
				return _result, _err
			}

			obj := util.ParseJSON(raw)
			res, _err := util.AssertAsMap(obj)
			if _err != nil {
				return _result, _err
			}

			resp, _err := util.AssertAsMap(res["response"])
			if _err != nil {
				return _result, _err
			}

			if tea.BoolValue(antchainutil.HasError(raw, client.AccessKeySecret)) {
				_err = tea.NewSDKError(map[string]interface{}{
					"message": resp["result_msg"],
					"data":    resp,
					"code":    resp["result_code"],
				})
				return _result, _err
			}

			_result = resp
			return _result, _err
		}()
		if !tea.BoolValue(tea.Retryable(_err)) {
			break
		}
	}

	return _resp, _err
}

/**
 * Description: 提供给第三方仲裁isv的仲裁申请状态变化回调接口
 * Summary: 仲裁状态信息变更回调接口
 */
func (client *Client) CallbackArbitrationStatus(request *CallbackArbitrationStatusRequest) (_result *CallbackArbitrationStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CallbackArbitrationStatusResponse{}
	_body, _err := client.CallbackArbitrationStatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 提供给第三方仲裁isv的仲裁申请状态变化回调接口
 * Summary: 仲裁状态信息变更回调接口
 */
func (client *Client) CallbackArbitrationStatusEx(request *CallbackArbitrationStatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CallbackArbitrationStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CallbackArbitrationStatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.arbitration.status.callback"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 仲裁签署状态信息变更回调接口
 * Summary: 仲裁签署状态信息变更回调接口
 */
func (client *Client) CallbackArbitrationSignstatus(request *CallbackArbitrationSignstatusRequest) (_result *CallbackArbitrationSignstatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CallbackArbitrationSignstatusResponse{}
	_body, _err := client.CallbackArbitrationSignstatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 仲裁签署状态信息变更回调接口
 * Summary: 仲裁签署状态信息变更回调接口
 */
func (client *Client) CallbackArbitrationSignstatusEx(request *CallbackArbitrationSignstatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CallbackArbitrationSignstatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CallbackArbitrationSignstatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.arbitration.signstatus.callback"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 租赁物流信息添加
 * Summary: 租赁物流信息添加
 */
func (client *Client) AddBclLogisticinfo(request *AddBclLogisticinfoRequest) (_result *AddBclLogisticinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddBclLogisticinfoResponse{}
	_body, _err := client.AddBclLogisticinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 租赁物流信息添加
 * Summary: 租赁物流信息添加
 */
func (client *Client) AddBclLogisticinfoEx(request *AddBclLogisticinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddBclLogisticinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddBclLogisticinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.bcl.logisticinfo.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 租赁订单发起
 * Summary: 租赁订单发起
 */
func (client *Client) SubmitBclOrder(request *SubmitBclOrderRequest) (_result *SubmitBclOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SubmitBclOrderResponse{}
	_body, _err := client.SubmitBclOrderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 租赁订单发起
 * Summary: 租赁订单发起
 */
func (client *Client) SubmitBclOrderEx(request *SubmitBclOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SubmitBclOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SubmitBclOrderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.bcl.order.submit"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建租赁订单
 * Summary: 创建租赁订单
 */
func (client *Client) CreateBclOrder(request *CreateBclOrderRequest) (_result *CreateBclOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateBclOrderResponse{}
	_body, _err := client.CreateBclOrderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建租赁订单
 * Summary: 创建租赁订单
 */
func (client *Client) CreateBclOrderEx(request *CreateBclOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateBclOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateBclOrderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.bcl.order.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 租赁订单查询
 * Summary: 租赁订单查询
 */
func (client *Client) QueryBclOrder(request *QueryBclOrderRequest) (_result *QueryBclOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBclOrderResponse{}
	_body, _err := client.QueryBclOrderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 租赁订单查询
 * Summary: 租赁订单查询
 */
func (client *Client) QueryBclOrderEx(request *QueryBclOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBclOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBclOrderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.bcl.order.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 履约信息上传接口
 * Summary: 履约信息上传接口
 */
func (client *Client) UploadBclPerformance(request *UploadBclPerformanceRequest) (_result *UploadBclPerformanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UploadBclPerformanceResponse{}
	_body, _err := client.UploadBclPerformanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 履约信息上传接口
 * Summary: 履约信息上传接口
 */
func (client *Client) UploadBclPerformanceEx(request *UploadBclPerformanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UploadBclPerformanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UploadBclPerformanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.bcl.performance.upload"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商品导入
 * Summary: 商品导入
 */
func (client *Client) CreateBclProduct(request *CreateBclProductRequest) (_result *CreateBclProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateBclProductResponse{}
	_body, _err := client.CreateBclProductEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商品导入
 * Summary: 商品导入
 */
func (client *Client) CreateBclProductEx(request *CreateBclProductRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateBclProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateBclProductResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.bcl.product.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商品查询
 * Summary: 商品查询
 */
func (client *Client) QueryBclProduct(request *QueryBclProductRequest) (_result *QueryBclProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBclProductResponse{}
	_body, _err := client.QueryBclProductEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商品查询
 * Summary: 商品查询
 */
func (client *Client) QueryBclProductEx(request *QueryBclProductRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBclProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBclProductResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.bcl.product.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 合同资源量校验与资源扣减
 * Summary: 合同资源量校验与资源扣减
 */
func (client *Client) VerifyBclContractmetric(request *VerifyBclContractmetricRequest) (_result *VerifyBclContractmetricResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &VerifyBclContractmetricResponse{}
	_body, _err := client.VerifyBclContractmetricEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 合同资源量校验与资源扣减
 * Summary: 合同资源量校验与资源扣减
 */
func (client *Client) VerifyBclContractmetricEx(request *VerifyBclContractmetricRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *VerifyBclContractmetricResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &VerifyBclContractmetricResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.bcl.contractmetric.verify"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取授权访问oss链接
 * Summary: 获取授权访问oss链接
 */
func (client *Client) GetBclUploadurl(request *GetBclUploadurlRequest) (_result *GetBclUploadurlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetBclUploadurlResponse{}
	_body, _err := client.GetBclUploadurlEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取授权访问oss链接
 * Summary: 获取授权访问oss链接
 */
func (client *Client) GetBclUploadurlEx(request *GetBclUploadurlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetBclUploadurlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetBclUploadurlResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.bcl.uploadurl.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 变更BCL订单承诺履约还款方式。合同代扣类型的订单，可以调用该接口取消某一期的代扣(转换为主动还款)。
 * Summary: 变更BCL订单承诺履约还款方式
 */
func (client *Client) UpdateBclPromiserepayment(request *UpdateBclPromiserepaymentRequest) (_result *UpdateBclPromiserepaymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateBclPromiserepaymentResponse{}
	_body, _err := client.UpdateBclPromiserepaymentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 变更BCL订单承诺履约还款方式。合同代扣类型的订单，可以调用该接口取消某一期的代扣(转换为主动还款)。
 * Summary: 变更BCL订单承诺履约还款方式
 */
func (client *Client) UpdateBclPromiserepaymentEx(request *UpdateBclPromiserepaymentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateBclPromiserepaymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateBclPromiserepaymentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.bcl.promiserepayment.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建收款方
 * Summary: 创建收款方
 */
func (client *Client) CreateBclPayee(request *CreateBclPayeeRequest) (_result *CreateBclPayeeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateBclPayeeResponse{}
	_body, _err := client.CreateBclPayeeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建收款方
 * Summary: 创建收款方
 */
func (client *Client) CreateBclPayeeEx(request *CreateBclPayeeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateBclPayeeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateBclPayeeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.bcl.payee.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 租赁宝plus订单融资申请接口
 * Summary: 租赁宝plus订单融资申请接口
 */
func (client *Client) ApplyBclFinancing(request *ApplyBclFinancingRequest) (_result *ApplyBclFinancingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyBclFinancingResponse{}
	_body, _err := client.ApplyBclFinancingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 租赁宝plus订单融资申请接口
 * Summary: 租赁宝plus订单融资申请接口
 */
func (client *Client) ApplyBclFinancingEx(request *ApplyBclFinancingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyBclFinancingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyBclFinancingResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.bcl.financing.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商家发起入驻成功后，可以通过此接口查询入驻的结果
 * Summary: 查询商家入驻结果
 */
func (client *Client) QueryBclMerchant(request *QueryBclMerchantRequest) (_result *QueryBclMerchantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBclMerchantResponse{}
	_body, _err := client.QueryBclMerchantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商家发起入驻成功后，可以通过此接口查询入驻的结果
 * Summary: 查询商家入驻结果
 */
func (client *Client) QueryBclMerchantEx(request *QueryBclMerchantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBclMerchantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBclMerchantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.bcl.merchant.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商家入驻租赁宝plus平台接口
 * Summary: 商家入驻租赁宝plus平台接口
 */
func (client *Client) RegisterBclMerchant(request *RegisterBclMerchantRequest) (_result *RegisterBclMerchantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RegisterBclMerchantResponse{}
	_body, _err := client.RegisterBclMerchantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商家入驻租赁宝plus平台接口
 * Summary: 商家入驻租赁宝plus平台接口
 */
func (client *Client) RegisterBclMerchantEx(request *RegisterBclMerchantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RegisterBclMerchantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RegisterBclMerchantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.bcl.merchant.register"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 当商家收到买家想解除代扣协议的消息后，可选择同意或拒绝用户解约操作；前置条件：商家已成功收到买家解除代扣协议的消息；
 * Summary: 解除代扣协议
 */
func (client *Client) CancelBclWithhold(request *CancelBclWithholdRequest) (_result *CancelBclWithholdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelBclWithholdResponse{}
	_body, _err := client.CancelBclWithholdEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 当商家收到买家想解除代扣协议的消息后，可选择同意或拒绝用户解约操作；前置条件：商家已成功收到买家解除代扣协议的消息；
 * Summary: 解除代扣协议
 */
func (client *Client) CancelBclWithholdEx(request *CancelBclWithholdRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelBclWithholdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelBclWithholdResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.bcl.withhold.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询单条交易投诉详情接口
 * Summary: 查询单条交易投诉详情接口
 */
func (client *Client) QueryBclComplain(request *QueryBclComplainRequest) (_result *QueryBclComplainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBclComplainResponse{}
	_body, _err := client.QueryBclComplainEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询单条交易投诉详情接口
 * Summary: 查询单条交易投诉详情接口
 */
func (client *Client) QueryBclComplainEx(request *QueryBclComplainRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBclComplainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBclComplainResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.bcl.complain.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商户上传处理图片
 * Summary: 商户上传处理图片
 */
func (client *Client) UploadBclComplainimage(request *UploadBclComplainimageRequest) (_result *UploadBclComplainimageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UploadBclComplainimageResponse{}
	_body, _err := client.UploadBclComplainimageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商户上传处理图片
 * Summary: 商户上传处理图片
 */
func (client *Client) UploadBclComplainimageEx(request *UploadBclComplainimageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UploadBclComplainimageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UploadBclComplainimageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.bcl.complainimage.upload"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商家处理交易投诉
 * Summary: 商家处理交易投诉
 */
func (client *Client) SubmitBclComplainfeedback(request *SubmitBclComplainfeedbackRequest) (_result *SubmitBclComplainfeedbackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SubmitBclComplainfeedbackResponse{}
	_body, _err := client.SubmitBclComplainfeedbackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商家处理交易投诉
 * Summary: 商家处理交易投诉
 */
func (client *Client) SubmitBclComplainfeedbackEx(request *SubmitBclComplainfeedbackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SubmitBclComplainfeedbackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SubmitBclComplainfeedbackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.bcl.complainfeedback.submit"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询投诉单id列表
 * Summary: 查询投诉单id列表
 */
func (client *Client) QueryBclComplaineventids(request *QueryBclComplaineventidsRequest) (_result *QueryBclComplaineventidsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBclComplaineventidsResponse{}
	_body, _err := client.QueryBclComplaineventidsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询投诉单id列表
 * Summary: 查询投诉单id列表
 */
func (client *Client) QueryBclComplaineventidsEx(request *QueryBclComplaineventidsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBclComplaineventidsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBclComplaineventidsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.bcl.complaineventids.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 租赁宝plus文件上传接口
 * Summary: 租赁文件上传接口
 */
func (client *Client) UploadBclFile(request *UploadBclFileRequest) (_result *UploadBclFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UploadBclFileResponse{}
	_body, _err := client.UploadBclFileEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 租赁宝plus文件上传接口
 * Summary: 租赁文件上传接口
 */
func (client *Client) UploadBclFileEx(request *UploadBclFileRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UploadBclFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UploadBclFileResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.bcl.file.upload"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 完成租赁单推进终态，本期要支持非自建代扣+新租赁宝代扣+老合同+老租赁宝代扣的租赁单完结
 * Summary: 完结租赁单
 */
func (client *Client) FinishBclOrder(request *FinishBclOrderRequest) (_result *FinishBclOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &FinishBclOrderResponse{}
	_body, _err := client.FinishBclOrderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 完成租赁单推进终态，本期要支持非自建代扣+新租赁宝代扣+老合同+老租赁宝代扣的租赁单完结
 * Summary: 完结租赁单
 */
func (client *Client) FinishBclOrderEx(request *FinishBclOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *FinishBclOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &FinishBclOrderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.bcl.order.finish"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 租赁宝plus退款
 * Summary: 租赁宝plus退款
 */
func (client *Client) CreateBclRefund(request *CreateBclRefundRequest) (_result *CreateBclRefundResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateBclRefundResponse{}
	_body, _err := client.CreateBclRefundEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 租赁宝plus退款
 * Summary: 租赁宝plus退款
 */
func (client *Client) CreateBclRefundEx(request *CreateBclRefundRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateBclRefundResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateBclRefundResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.bcl.refund.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 租赁宝plus退款查询
 * Summary: 租赁宝plus退款查询
 */
func (client *Client) QueryBclRefund(request *QueryBclRefundRequest) (_result *QueryBclRefundResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryBclRefundResponse{}
	_body, _err := client.QueryBclRefundEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 租赁宝plus退款查询
 * Summary: 租赁宝plus退款查询
 */
func (client *Client) QueryBclRefundEx(request *QueryBclRefundRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryBclRefundResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBclRefundResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.bcl.refund.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 调用本接口创建个人账号，后续有关该用户的所有操作都需使用该用户的accountId。如提供用户证件信息，则将根据提供的用户证件信息申请数字证书。
 * Summary: 创建电子合同签署个人帐户
 */
func (client *Client) CreateContractAccount(request *CreateContractAccountRequest) (_result *CreateContractAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractAccountResponse{}
	_body, _err := client.CreateContractAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 调用本接口创建个人账号，后续有关该用户的所有操作都需使用该用户的accountId。如提供用户证件信息，则将根据提供的用户证件信息申请数字证书。
 * Summary: 创建电子合同签署个人帐户
 */
func (client *Client) CreateContractAccountEx(request *CreateContractAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.account.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过模版参数，创建个人印章
 * Summary: 创建电子合同个人帐户印章
 */
func (client *Client) CreateContractAccountseal(request *CreateContractAccountsealRequest) (_result *CreateContractAccountsealResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractAccountsealResponse{}
	_body, _err := client.CreateContractAccountsealEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过模版参数，创建个人印章
 * Summary: 创建电子合同个人帐户印章
 */
func (client *Client) CreateContractAccountsealEx(request *CreateContractAccountsealRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractAccountsealResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractAccountsealResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.accountseal.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 对接方调用本接口创建机构账号，后续有关该机构的所有操作都需使用该机构的orgId。如提供机构证件信息，则将根据提供的机构证件信息申请数字证书。
创建机构账号前需要先创建一个个人账号并通过本接口传给服务器，该个人账号将作为该机构签署的经办人，代表企业完成实名认证和意愿认证，并完成签署操作。
 * Summary: 创建电子合同签署机构帐户
*/
func (client *Client) CreateContractOrganization(request *CreateContractOrganizationRequest) (_result *CreateContractOrganizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractOrganizationResponse{}
	_body, _err := client.CreateContractOrganizationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 对接方调用本接口创建机构账号，后续有关该机构的所有操作都需使用该机构的orgId。如提供机构证件信息，则将根据提供的机构证件信息申请数字证书。
创建机构账号前需要先创建一个个人账号并通过本接口传给服务器，该个人账号将作为该机构签署的经办人，代表企业完成实名认证和意愿认证，并完成签署操作。
 * Summary: 创建电子合同签署机构帐户
*/
func (client *Client) CreateContractOrganizationEx(request *CreateContractOrganizationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractOrganizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractOrganizationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.organization.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过模版参数，创建机构印章
 * Summary: 创建电子合同机构帐户印章
 */
func (client *Client) CreateContractOrgseal(request *CreateContractOrgsealRequest) (_result *CreateContractOrgsealResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractOrgsealResponse{}
	_body, _err := client.CreateContractOrgsealEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过模版参数，创建机构印章
 * Summary: 创建电子合同机构帐户印章
 */
func (client *Client) CreateContractOrgsealEx(request *CreateContractOrgsealRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractOrgsealResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractOrgsealResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.orgseal.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 静默签署授权
 * Summary: 静默签署授权
 */
func (client *Client) AuthContractSign(request *AuthContractSignRequest) (_result *AuthContractSignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AuthContractSignResponse{}
	_body, _err := client.AuthContractSignEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 静默签署授权
 * Summary: 静默签署授权
 */
func (client *Client) AuthContractSignEx(request *AuthContractSignRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AuthContractSignResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AuthContractSignResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.sign.auth"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过文件直传地址创建模板，创建模板后上传文件，上传方法请参考文件流上传方法
 * Summary: 通过文件上传方式创建电子合同签署模板
 */
func (client *Client) CreateContractTemplate(request *CreateContractTemplateRequest) (_result *CreateContractTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractTemplateResponse{}
	_body, _err := client.CreateContractTemplateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过文件直传地址创建模板，创建模板后上传文件，上传方法请参考文件流上传方法
 * Summary: 通过文件上传方式创建电子合同签署模板
 */
func (client *Client) CreateContractTemplateEx(request *CreateContractTemplateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractTemplateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.template.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建签署流程
 * Summary: 创建电子合同签署流程
 */
func (client *Client) CreateContractFlow(request *CreateContractFlowRequest) (_result *CreateContractFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractFlowResponse{}
	_body, _err := client.CreateContractFlowEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建签署流程
 * Summary: 创建电子合同签署流程
 */
func (client *Client) CreateContractFlowEx(request *CreateContractFlowRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractFlowResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.flow.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 向流程中添加待签署文档，文档必须先用文档管理接口创建，创建方式请参见文件管理接口文档。已经开启的流程不能再添加签署文档。
 * Summary: 向电子合同签署流程中添加待签署文档
 */
func (client *Client) AddContractDocument(request *AddContractDocumentRequest) (_result *AddContractDocumentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddContractDocumentResponse{}
	_body, _err := client.AddContractDocumentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 向流程中添加待签署文档，文档必须先用文档管理接口创建，创建方式请参见文件管理接口文档。已经开启的流程不能再添加签署文档。
 * Summary: 向电子合同签署流程中添加待签署文档
 */
func (client *Client) AddContractDocumentEx(request *AddContractDocumentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddContractDocumentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddContractDocumentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.document.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 向指定流程中创建签署区，每个签署区视为一个任务，系统会自动按照流程流转。 签署区的添加必须在签署文档添加之后, 签署区信息内部包含签署人、签署文档信息。 签署区创建完成，流程开启后，系统将自动完成“用户自动盖章签署区”的盖章。用户可全程无感完成本次签署。创建签署方自动盖章签署区前，需确定已完成账号静默签署授权。签署方自动盖章的合同，需要由对接平台方自行校验真实身份和真实意愿
 * Summary: 添加电子合同签署方自动盖章签署区
 */
func (client *Client) AddContractSignfield(request *AddContractSignfieldRequest) (_result *AddContractSignfieldResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddContractSignfieldResponse{}
	_body, _err := client.AddContractSignfieldEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 向指定流程中创建签署区，每个签署区视为一个任务，系统会自动按照流程流转。 签署区的添加必须在签署文档添加之后, 签署区信息内部包含签署人、签署文档信息。 签署区创建完成，流程开启后，系统将自动完成“用户自动盖章签署区”的盖章。用户可全程无感完成本次签署。创建签署方自动盖章签署区前，需确定已完成账号静默签署授权。签署方自动盖章的合同，需要由对接平台方自行校验真实身份和真实意愿
 * Summary: 添加电子合同签署方自动盖章签署区
 */
func (client *Client) AddContractSignfieldEx(request *AddContractSignfieldRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddContractSignfieldResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddContractSignfieldResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.signfield.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 开启签署流程，开启后流程文档不可再添加或修改文档，签署任务会自动按照设置开始流转。流程开启后，归档前，可随时追加签署区（指定签署人的签署信息）
 * Summary: 电子合同签署流程开启
 */
func (client *Client) StartContractFlow(request *StartContractFlowRequest) (_result *StartContractFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartContractFlowResponse{}
	_body, _err := client.StartContractFlowEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 开启签署流程，开启后流程文档不可再添加或修改文档，签署任务会自动按照设置开始流转。流程开启后，归档前，可随时追加签署区（指定签署人的签署信息）
 * Summary: 电子合同签署流程开启
 */
func (client *Client) StartContractFlowEx(request *StartContractFlowRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartContractFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartContractFlowResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.flow.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 手动归档签署流程，归档后所有资源均不可修改。归档前签署流程中的所有签署人必须都签署完成。如创建流程时设置了自动归档，则无需调用本接口，签署完成后系统会自动调用
 * Summary: 电子合同签署流程归档
 */
func (client *Client) SaveContractFlow(request *SaveContractFlowRequest) (_result *SaveContractFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SaveContractFlowResponse{}
	_body, _err := client.SaveContractFlowEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 手动归档签署流程，归档后所有资源均不可修改。归档前签署流程中的所有签署人必须都签署完成。如创建流程时设置了自动归档，则无需调用本接口，签署完成后系统会自动调用
 * Summary: 电子合同签署流程归档
 */
func (client *Client) SaveContractFlowEx(request *SaveContractFlowRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SaveContractFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SaveContractFlowResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.flow.save"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 流程归档后，查询和下载签署后的文件
 * Summary: 电子合同流程文档下载
 */
func (client *Client) DownloadContractDocument(request *DownloadContractDocumentRequest) (_result *DownloadContractDocumentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DownloadContractDocumentResponse{}
	_body, _err := client.DownloadContractDocumentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 流程归档后，查询和下载签署后的文件
 * Summary: 电子合同流程文档下载
 */
func (client *Client) DownloadContractDocumentEx(request *DownloadContractDocumentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DownloadContractDocumentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DownloadContractDocumentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.document.download"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 基于文件模板生成待签文件用于后续文件，该文件可用用于签署，也可作为附件
 * Summary: 通过电子合同模板添加文档
 */
func (client *Client) AddContractFile(request *AddContractFileRequest) (_result *AddContractFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddContractFileResponse{}
	_body, _err := client.AddContractFileEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 基于文件模板生成待签文件用于后续文件，该文件可用用于签署，也可作为附件
 * Summary: 通过电子合同模板添加文档
 */
func (client *Client) AddContractFileEx(request *AddContractFileRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddContractFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddContractFileResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.file.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 电子合同平台方发起注册，提供企业信息、合同签署的经办人信息，注册成为电子合同平台方用户
 * Summary: 电子合同平台方注册
 */
func (client *Client) CreateContractPlatform(request *CreateContractPlatformRequest) (_result *CreateContractPlatformResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractPlatformResponse{}
	_body, _err := client.CreateContractPlatformEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 电子合同平台方发起注册，提供企业信息、合同签署的经办人信息，注册成为电子合同平台方用户
 * Summary: 电子合同平台方注册
 */
func (client *Client) CreateContractPlatformEx(request *CreateContractPlatformRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractPlatformResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractPlatformResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.platform.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 电子合同平台方提供用户信息，注册成为平台用户
 * Summary: 电子合同平台方的用户注册
 */
func (client *Client) CreateContractUser(request *CreateContractUserRequest) (_result *CreateContractUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractUserResponse{}
	_body, _err := client.CreateContractUserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 电子合同平台方提供用户信息，注册成为平台用户
 * Summary: 电子合同平台方的用户注册
 */
func (client *Client) CreateContractUserEx(request *CreateContractUserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractUserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.user.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 电子合同平台方发起签署流程，用户在H5页面完成手动签署
 * Summary: 电子合同平台方发起手动签署流程
 */
func (client *Client) StartContractHandsign(request *StartContractHandsignRequest) (_result *StartContractHandsignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartContractHandsignResponse{}
	_body, _err := client.StartContractHandsignEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 电子合同平台方发起签署流程，用户在H5页面完成手动签署
 * Summary: 电子合同平台方发起手动签署流程
 */
func (client *Client) StartContractHandsignEx(request *StartContractHandsignRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartContractHandsignResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartContractHandsignResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.handsign.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询签署流程的详细信息，包括流程配置、签署状态等
 * Summary: 签署流程查询
 */
func (client *Client) QueryContractFlow(request *QueryContractFlowRequest) (_result *QueryContractFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContractFlowResponse{}
	_body, _err := client.QueryContractFlowEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询签署流程的详细信息，包括流程配置、签署状态等
 * Summary: 签署流程查询
 */
func (client *Client) QueryContractFlowEx(request *QueryContractFlowRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContractFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContractFlowResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.flow.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建个人/机构图片印章
 * Summary: 创建个人/机构图片印章
 */
func (client *Client) CreateContractAccountsealimage(request *CreateContractAccountsealimageRequest) (_result *CreateContractAccountsealimageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractAccountsealimageResponse{}
	_body, _err := client.CreateContractAccountsealimageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建个人/机构图片印章
 * Summary: 创建个人/机构图片印章
 */
func (client *Client) CreateContractAccountsealimageEx(request *CreateContractAccountsealimageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractAccountsealimageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractAccountsealimageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.accountsealimage.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 采用文件直传的方式完成用户文件的上传。对接方通过该接口获取文件上传的授权地址
 * Summary: 通过上传方式创建文件
 */
func (client *Client) GetContractFileuploadurl(request *GetContractFileuploadurlRequest) (_result *GetContractFileuploadurlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetContractFileuploadurlResponse{}
	_body, _err := client.GetContractFileuploadurlEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 采用文件直传的方式完成用户文件的上传。对接方通过该接口获取文件上传的授权地址
 * Summary: 通过上传方式创建文件
 */
func (client *Client) GetContractFileuploadurlEx(request *GetContractFileuploadurlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetContractFileuploadurlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetContractFileuploadurlResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.fileuploadurl.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 向指定流程中创建签署区，每个签署区视为一个任务，系统会自动按照流程流转。 签署区的添加必须在签署文档添加之后, 签署区信息内部包含签署文档信息（平台自动签无需指定签署人信息，默认签署人是对接的企业）。
签署区创建完成，流程开启后，系统将自动完成“对接平台自动盖章签署区”的盖章，对接平台可全程无感完成本次签署。
 * Summary: 添加平台自动盖章签署区
*/
func (client *Client) AddContractPlatformsignfields(request *AddContractPlatformsignfieldsRequest) (_result *AddContractPlatformsignfieldsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddContractPlatformsignfieldsResponse{}
	_body, _err := client.AddContractPlatformsignfieldsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 向指定流程中创建签署区，每个签署区视为一个任务，系统会自动按照流程流转。 签署区的添加必须在签署文档添加之后, 签署区信息内部包含签署文档信息（平台自动签无需指定签署人信息，默认签署人是对接的企业）。
签署区创建完成，流程开启后，系统将自动完成“对接平台自动盖章签署区”的盖章，对接平台可全程无感完成本次签署。
 * Summary: 添加平台自动盖章签署区
*/
func (client *Client) AddContractPlatformsignfieldsEx(request *AddContractPlatformsignfieldsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddContractPlatformsignfieldsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddContractPlatformsignfieldsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.platformsignfields.add"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询文件详情，包括文件名称、大小、下载地址等
 * Summary: 查询文件详情
 */
func (client *Client) GetContractFile(request *GetContractFileRequest) (_result *GetContractFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetContractFileResponse{}
	_body, _err := client.GetContractFileEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询文件详情，包括文件名称、大小、下载地址等
 * Summary: 查询文件详情
 */
func (client *Client) GetContractFileEx(request *GetContractFileRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetContractFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetContractFileResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.file.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询个人所有印章
 * Summary: 查询个人印章
 */
func (client *Client) QueryContractAccountseals(request *QueryContractAccountsealsRequest) (_result *QueryContractAccountsealsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContractAccountsealsResponse{}
	_body, _err := client.QueryContractAccountsealsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询个人所有印章
 * Summary: 查询个人印章
 */
func (client *Client) QueryContractAccountsealsEx(request *QueryContractAccountsealsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContractAccountsealsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContractAccountsealsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.accountseals.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询机构所有印章
 * Summary: 查询机构印章
 */
func (client *Client) QueryContractOrganizationseals(request *QueryContractOrganizationsealsRequest) (_result *QueryContractOrganizationsealsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContractOrganizationsealsResponse{}
	_body, _err := client.QueryContractOrganizationsealsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询机构所有印章
 * Summary: 查询机构印章
 */
func (client *Client) QueryContractOrganizationsealsEx(request *QueryContractOrganizationsealsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContractOrganizationsealsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContractOrganizationsealsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.organizationseals.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询流程所有签署人列表。
 * Summary: 查询流程签署人列表
 */
func (client *Client) QueryContractFlowsigner(request *QueryContractFlowsignerRequest) (_result *QueryContractFlowsignerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContractFlowsignerResponse{}
	_body, _err := client.QueryContractFlowsignerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询流程所有签署人列表。
 * Summary: 查询流程签署人列表
 */
func (client *Client) QueryContractFlowsignerEx(request *QueryContractFlowsignerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContractFlowsignerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContractFlowsignerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.flowsigner.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询流程签署区列表，可以查询指定指定id或者签署人所属的签署区
 * Summary: 查询签署区列表
 */
func (client *Client) QueryContractSignfields(request *QueryContractSignfieldsRequest) (_result *QueryContractSignfieldsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContractSignfieldsResponse{}
	_body, _err := client.QueryContractSignfieldsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询流程签署区列表，可以查询指定指定id或者签署人所属的签署区
 * Summary: 查询签署区列表
 */
func (client *Client) QueryContractSignfieldsEx(request *QueryContractSignfieldsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContractSignfieldsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContractSignfieldsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.signfields.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 使用创建账号返回的账号id查询用户的账号。
 * Summary: 查询个人账号
 */
func (client *Client) QueryContractAccount(request *QueryContractAccountRequest) (_result *QueryContractAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContractAccountResponse{}
	_body, _err := client.QueryContractAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 使用创建账号返回的账号id查询用户的账号。
 * Summary: 查询个人账号
 */
func (client *Client) QueryContractAccountEx(request *QueryContractAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContractAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContractAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.account.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 使用创建账号返回的账号id查询机构账号。
 * Summary: 查询机构账号
 */
func (client *Client) QueryContractOrganization(request *QueryContractOrganizationRequest) (_result *QueryContractOrganizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContractOrganizationResponse{}
	_body, _err := client.QueryContractOrganizationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 使用创建账号返回的账号id查询机构账号。
 * Summary: 查询机构账号
 */
func (client *Client) QueryContractOrganizationEx(request *QueryContractOrganizationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContractOrganizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContractOrganizationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.organization.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询模板详情，包括文件模板基本信息和输入项组件信息
 * Summary: 查询模板详情详情
 */
func (client *Client) QueryContractTemplate(request *QueryContractTemplateRequest) (_result *QueryContractTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContractTemplateResponse{}
	_body, _err := client.QueryContractTemplateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询模板详情，包括文件模板基本信息和输入项组件信息
 * Summary: 查询模板详情详情
 */
func (client *Client) QueryContractTemplateEx(request *QueryContractTemplateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContractTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContractTemplateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.template.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 平台方制定签约模板和用户，发起手动签署流程，获得签署流程ID
 * Summary: 创建签署流程
 */
func (client *Client) CreateContractSignflow(request *CreateContractSignflowRequest) (_result *CreateContractSignflowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractSignflowResponse{}
	_body, _err := client.CreateContractSignflowEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 平台方制定签约模板和用户，发起手动签署流程，获得签署流程ID
 * Summary: 创建签署流程
 */
func (client *Client) CreateContractSignflowEx(request *CreateContractSignflowRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractSignflowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractSignflowResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.signflow.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商户签署直付通协议
 * Summary: 商户签署直付通协议
 */
func (client *Client) CreateContractRegisterzft(request *CreateContractRegisterzftRequest) (_result *CreateContractRegisterzftResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractRegisterzftResponse{}
	_body, _err := client.CreateContractRegisterzftEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商户签署直付通协议
 * Summary: 商户签署直付通协议
 */
func (client *Client) CreateContractRegisterzftEx(request *CreateContractRegisterzftRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractRegisterzftResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractRegisterzftResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.registerzft.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建模板的同时，指定平台方签署信息，完成智能合同模板创建
 * Summary: 创建智能合同模板
 */
func (client *Client) CreateContractPlatformtemplate(request *CreateContractPlatformtemplateRequest) (_result *CreateContractPlatformtemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractPlatformtemplateResponse{}
	_body, _err := client.CreateContractPlatformtemplateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建模板的同时，指定平台方签署信息，完成智能合同模板创建
 * Summary: 创建智能合同模板
 */
func (client *Client) CreateContractPlatformtemplateEx(request *CreateContractPlatformtemplateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractPlatformtemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractPlatformtemplateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.platformtemplate.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询商户直付通入驻信息
 * Summary: 查询商户直付通入驻信息
 */
func (client *Client) QueryContractMerchantzft(request *QueryContractMerchantzftRequest) (_result *QueryContractMerchantzftResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContractMerchantzftResponse{}
	_body, _err := client.QueryContractMerchantzftEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询商户直付通入驻信息
 * Summary: 查询商户直付通入驻信息
 */
func (client *Client) QueryContractMerchantzftEx(request *QueryContractMerchantzftRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContractMerchantzftResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContractMerchantzftResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.merchantzft.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 列举本租户合同相关交易
 * Summary: 列举本租户合同相关交易
 */
func (client *Client) ListContractOuttradeid(request *ListContractOuttradeidRequest) (_result *ListContractOuttradeidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListContractOuttradeidResponse{}
	_body, _err := client.ListContractOuttradeidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 列举本租户合同相关交易
 * Summary: 列举本租户合同相关交易
 */
func (client *Client) ListContractOuttradeidEx(request *ListContractOuttradeidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListContractOuttradeidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListContractOuttradeidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.outtradeid.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据订单id查询订单代扣详情
 * Summary: 根据订单id查询订单代扣详情
 */
func (client *Client) QueryContractTradedetail(request *QueryContractTradedetailRequest) (_result *QueryContractTradedetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContractTradedetailResponse{}
	_body, _err := client.QueryContractTradedetailEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据订单id查询订单代扣详情
 * Summary: 根据订单id查询订单代扣详情
 */
func (client *Client) QueryContractTradedetailEx(request *QueryContractTradedetailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContractTradedetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContractTradedetailResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.tradedetail.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商户根据订单id退款
 * Summary: 商户根据订单id退款
 */
func (client *Client) CreateContractMerchantrefund(request *CreateContractMerchantrefundRequest) (_result *CreateContractMerchantrefundResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractMerchantrefundResponse{}
	_body, _err := client.CreateContractMerchantrefundEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商户根据订单id退款
 * Summary: 商户根据订单id退款
 */
func (client *Client) CreateContractMerchantrefundEx(request *CreateContractMerchantrefundRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractMerchantrefundResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractMerchantrefundResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.merchantrefund.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建蚂蚁区块链账户
 * Summary: 创建蚂蚁区块链账户
 */
func (client *Client) CreateContractAdminaccount(request *CreateContractAdminaccountRequest) (_result *CreateContractAdminaccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractAdminaccountResponse{}
	_body, _err := client.CreateContractAdminaccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建蚂蚁区块链账户
 * Summary: 创建蚂蚁区块链账户
 */
func (client *Client) CreateContractAdminaccountEx(request *CreateContractAdminaccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractAdminaccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractAdminaccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.adminaccount.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商户根据合同id列举所有的tradeId
 * Summary: 商户根据合同id列举所有的tradeId
 */
func (client *Client) ListContractTradeids(request *ListContractTradeidsRequest) (_result *ListContractTradeidsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListContractTradeidsResponse{}
	_body, _err := client.ListContractTradeidsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商户根据合同id列举所有的tradeId
 * Summary: 商户根据合同id列举所有的tradeId
 */
func (client *Client) ListContractTradeidsEx(request *ListContractTradeidsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListContractTradeidsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListContractTradeidsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.tradeids.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商户上传代扣规则
 * Summary: 商户上传代扣规则
 */
func (client *Client) CreateContractCommontrigger(request *CreateContractCommontriggerRequest) (_result *CreateContractCommontriggerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractCommontriggerResponse{}
	_body, _err := client.CreateContractCommontriggerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商户上传代扣规则
 * Summary: 商户上传代扣规则
 */
func (client *Client) CreateContractCommontriggerEx(request *CreateContractCommontriggerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractCommontriggerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractCommontriggerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.commontrigger.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商户入驻直付通
 * Summary: 商户入驻直付通
 */
func (client *Client) CreateContractMerchantindirectzft(request *CreateContractMerchantindirectzftRequest) (_result *CreateContractMerchantindirectzftResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractMerchantindirectzftResponse{}
	_body, _err := client.CreateContractMerchantindirectzftEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商户入驻直付通
 * Summary: 商户入驻直付通
 */
func (client *Client) CreateContractMerchantindirectzftEx(request *CreateContractMerchantindirectzftRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractMerchantindirectzftResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractMerchantindirectzftResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.merchantindirectzft.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据订单id查询直付通商户入驻信息
 * Summary: 根据订单id查询直付通商户入驻信息
 */
func (client *Client) QueryContractMerchantindirectzft(request *QueryContractMerchantindirectzftRequest) (_result *QueryContractMerchantindirectzftResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContractMerchantindirectzftResponse{}
	_body, _err := client.QueryContractMerchantindirectzftEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据订单id查询直付通商户入驻信息
 * Summary: 根据订单id查询直付通商户入驻信息
 */
func (client *Client) QueryContractMerchantindirectzftEx(request *QueryContractMerchantindirectzftRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContractMerchantindirectzftResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContractMerchantindirectzftResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.merchantindirectzft.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取支付对账文件的url
 * Summary: 获取支付对账文件的url
 */
func (client *Client) QueryPayresultfileurl(request *QueryPayresultfileurlRequest) (_result *QueryPayresultfileurlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryPayresultfileurlResponse{}
	_body, _err := client.QueryPayresultfileurlEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取支付对账文件的url
 * Summary: 获取支付对账文件的url
 */
func (client *Client) QueryPayresultfileurlEx(request *QueryPayresultfileurlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryPayresultfileurlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryPayresultfileurlResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.payresultfileurl.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 智能合同图片上传
 * Summary: 智能合同图片上传
 */
func (client *Client) CreateContractMerchantimage(request *CreateContractMerchantimageRequest) (_result *CreateContractMerchantimageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractMerchantimageResponse{}
	_body, _err := client.CreateContractMerchantimageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 智能合同图片上传
 * Summary: 智能合同图片上传
 */
func (client *Client) CreateContractMerchantimageEx(request *CreateContractMerchantimageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractMerchantimageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractMerchantimageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.merchantimage.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 取消智能合同剩余代扣条目
 * Summary: 取消智能合同剩余代扣条目
 */
func (client *Client) CancelContractPaytrade(request *CancelContractPaytradeRequest) (_result *CancelContractPaytradeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelContractPaytradeResponse{}
	_body, _err := client.CancelContractPaytradeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 取消智能合同剩余代扣条目
 * Summary: 取消智能合同剩余代扣条目
 */
func (client *Client) CancelContractPaytradeEx(request *CancelContractPaytradeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelContractPaytradeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelContractPaytradeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.paytrade.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建手动签署流程
 * Summary: 创建手动签署流程
 */
func (client *Client) CreateContractHandsignflow(request *CreateContractHandsignflowRequest) (_result *CreateContractHandsignflowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractHandsignflowResponse{}
	_body, _err := client.CreateContractHandsignflowEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建手动签署流程
 * Summary: 创建手动签署流程
 */
func (client *Client) CreateContractHandsignflowEx(request *CreateContractHandsignflowRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractHandsignflowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractHandsignflowResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.handsignflow.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 向指定流程中创建签署区，每个签署区视为一个任务，系统会自动按照流程流转。 签署区的添加必须在签署文档添加之后, 签署区信息内部包含签署文档信息。签署区创建完成，流程开启后，通过获取签署地址接口，可获取用户手动签署链接，通过此链接可打开文件签署页面，进行人工确认签署。
 * Summary: 添加电子合同签署方手动盖章签署区
 */
func (client *Client) CreateContractHandsignfield(request *CreateContractHandsignfieldRequest) (_result *CreateContractHandsignfieldResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractHandsignfieldResponse{}
	_body, _err := client.CreateContractHandsignfieldEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 向指定流程中创建签署区，每个签署区视为一个任务，系统会自动按照流程流转。 签署区的添加必须在签署文档添加之后, 签署区信息内部包含签署文档信息。签署区创建完成，流程开启后，通过获取签署地址接口，可获取用户手动签署链接，通过此链接可打开文件签署页面，进行人工确认签署。
 * Summary: 添加电子合同签署方手动盖章签署区
 */
func (client *Client) CreateContractHandsignfieldEx(request *CreateContractHandsignfieldRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractHandsignfieldResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractHandsignfieldResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.handsignfield.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 流程开启后，获取指定签署人的签署链接地址，如仅传入签署人账号id，则获取的签署任务链接仅包含本人的签署任务；如同时签署人账号id+机构id，则获取的签署任务链接包含机构与个人的签署任务；organizeId传入0，则返回的任务链接包含签署人“本人+所有代签机构”的签署任务。
 * Summary: 获取签署地址
 */
func (client *Client) GetContractSignurl(request *GetContractSignurlRequest) (_result *GetContractSignurlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetContractSignurlResponse{}
	_body, _err := client.GetContractSignurlEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 流程开启后，获取指定签署人的签署链接地址，如仅传入签署人账号id，则获取的签署任务链接仅包含本人的签署任务；如同时签署人账号id+机构id，则获取的签署任务链接包含机构与个人的签署任务；organizeId传入0，则返回的任务链接包含签署人“本人+所有代签机构”的签署任务。
 * Summary: 获取签署地址
 */
func (client *Client) GetContractSignurlEx(request *GetContractSignurlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetContractSignurlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetContractSignurlResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.signurl.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 可信付代扣规则内容创建
 * Summary: 可信付代扣规则内容创建
 */
func (client *Client) CreateWithholdAgreement(request *CreateWithholdAgreementRequest) (_result *CreateWithholdAgreementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateWithholdAgreementResponse{}
	_body, _err := client.CreateWithholdAgreementEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 可信付代扣规则内容创建
 * Summary: 可信付代扣规则内容创建
 */
func (client *Client) CreateWithholdAgreementEx(request *CreateWithholdAgreementRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateWithholdAgreementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateWithholdAgreementResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.withhold.agreement.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询消金代扣协议
 * Summary: 查询可信付代扣协议内容
 */
func (client *Client) QueryWithholdAgreement(request *QueryWithholdAgreementRequest) (_result *QueryWithholdAgreementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryWithholdAgreementResponse{}
	_body, _err := client.QueryWithholdAgreementEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询消金代扣协议
 * Summary: 查询可信付代扣协议内容
 */
func (client *Client) QueryWithholdAgreementEx(request *QueryWithholdAgreementRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryWithholdAgreementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryWithholdAgreementResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.withhold.agreement.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询可信付协议的入口
 * Summary: 查询可信付协议的入口
 */
func (client *Client) QueryWithholdAgreementurl(request *QueryWithholdAgreementurlRequest) (_result *QueryWithholdAgreementurlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryWithholdAgreementurlResponse{}
	_body, _err := client.QueryWithholdAgreementurlEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询可信付协议的入口
 * Summary: 查询可信付协议的入口
 */
func (client *Client) QueryWithholdAgreementurlEx(request *QueryWithholdAgreementurlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryWithholdAgreementurlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryWithholdAgreementurlResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.withhold.agreementurl.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 后台录入商家的产品的逾期日
 * Summary: 后台录入商家的产品的逾期日
 */
func (client *Client) CreateWithholdOverduetime(request *CreateWithholdOverduetimeRequest) (_result *CreateWithholdOverduetimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateWithholdOverduetimeResponse{}
	_body, _err := client.CreateWithholdOverduetimeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 后台录入商家的产品的逾期日
 * Summary: 后台录入商家的产品的逾期日
 */
func (client *Client) CreateWithholdOverduetimeEx(request *CreateWithholdOverduetimeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateWithholdOverduetimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateWithholdOverduetimeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.withhold.overduetime.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 可信付代扣的扣费请求
 * Summary: 发送代扣请求
 */
func (client *Client) SendWithholdDeduct(request *SendWithholdDeductRequest) (_result *SendWithholdDeductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SendWithholdDeductResponse{}
	_body, _err := client.SendWithholdDeductEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 可信付代扣的扣费请求
 * Summary: 发送代扣请求
 */
func (client *Client) SendWithholdDeductEx(request *SendWithholdDeductRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SendWithholdDeductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SendWithholdDeductResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.withhold.deduct.send"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 可信付代扣结果查询
 * Summary: 可信付代扣结果查询
 */
func (client *Client) QueryWithholdPayresult(request *QueryWithholdPayresultRequest) (_result *QueryWithholdPayresultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryWithholdPayresultResponse{}
	_body, _err := client.QueryWithholdPayresultEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 可信付代扣结果查询
 * Summary: 可信付代扣结果查询
 */
func (client *Client) QueryWithholdPayresultEx(request *QueryWithholdPayresultRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryWithholdPayresultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryWithholdPayresultResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.withhold.payresult.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 可信付退款请求
 * Summary: 可信付退款请求
 */
func (client *Client) SendWithholdRefund(request *SendWithholdRefundRequest) (_result *SendWithholdRefundResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SendWithholdRefundResponse{}
	_body, _err := client.SendWithholdRefundEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 可信付退款请求
 * Summary: 可信付退款请求
 */
func (client *Client) SendWithholdRefundEx(request *SendWithholdRefundRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SendWithholdRefundResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SendWithholdRefundResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.withhold.refund.send"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建邀请任务，被邀请人收到通知后需要注册并完成实名认证方可开通电子签名服务。
 * Summary: 创建注册邀请任务
 */
func (client *Client) SendContractInvitation(request *SendContractInvitationRequest) (_result *SendContractInvitationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SendContractInvitationResponse{}
	_body, _err := client.SendContractInvitationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建邀请任务，被邀请人收到通知后需要注册并完成实名认证方可开通电子签名服务。
 * Summary: 创建注册邀请任务
 */
func (client *Client) SendContractInvitationEx(request *SendContractInvitationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SendContractInvitationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SendContractInvitationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.invitation.send"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询代扣规则
 * Summary: 查询代扣规则
 */
func (client *Client) ListContractPayrule(request *ListContractPayruleRequest) (_result *ListContractPayruleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListContractPayruleResponse{}
	_body, _err := client.ListContractPayruleEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询代扣规则
 * Summary: 查询代扣规则
 */
func (client *Client) ListContractPayruleEx(request *ListContractPayruleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListContractPayruleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListContractPayruleResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.payrule.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取可信付免签协议的二维码
 * Summary: 获取可信付免签协议的二维码
 */
func (client *Client) CreateWithholdQrcode(request *CreateWithholdQrcodeRequest) (_result *CreateWithholdQrcodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateWithholdQrcodeResponse{}
	_body, _err := client.CreateWithholdQrcodeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取可信付免签协议的二维码
 * Summary: 获取可信付免签协议的二维码
 */
func (client *Client) CreateWithholdQrcodeEx(request *CreateWithholdQrcodeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateWithholdQrcodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateWithholdQrcodeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.withhold.qrcode.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 取消某一期的代扣规则
 * Summary: 取消某一期的代扣规则
 */
func (client *Client) CancelContractPaysingletrade(request *CancelContractPaysingletradeRequest) (_result *CancelContractPaysingletradeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelContractPaysingletradeResponse{}
	_body, _err := client.CancelContractPaysingletradeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 取消某一期的代扣规则
 * Summary: 取消某一期的代扣规则
 */
func (client *Client) CancelContractPaysingletradeEx(request *CancelContractPaysingletradeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelContractPaysingletradeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelContractPaysingletradeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.paysingletrade.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 使用区块链合同回调服务，需要申请加签时使用的key。该key每个平台方对应一个，不可变更，多次申请结果幂等。
 * Summary: 申请区块链合同回调加签key
 */
func (client *Client) ApplyContractCallbackkey(request *ApplyContractCallbackkeyRequest) (_result *ApplyContractCallbackkeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyContractCallbackkeyResponse{}
	_body, _err := client.ApplyContractCallbackkeyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 使用区块链合同回调服务，需要申请加签时使用的key。该key每个平台方对应一个，不可变更，多次申请结果幂等。
 * Summary: 申请区块链合同回调加签key
 */
func (client *Client) ApplyContractCallbackkeyEx(request *ApplyContractCallbackkeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyContractCallbackkeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyContractCallbackkeyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.callbackkey.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 快速创建签署流程，完成添加待签文档、流程基本信息、签署方，支持自动开启、自动归档。
 * Summary: 一步创建签署流程接口
 */
func (client *Client) CreateContractOnestepflow(request *CreateContractOnestepflowRequest) (_result *CreateContractOnestepflowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractOnestepflowResponse{}
	_body, _err := client.CreateContractOnestepflowEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 快速创建签署流程，完成添加待签文档、流程基本信息、签署方，支持自动开启、自动归档。
 * Summary: 一步创建签署流程接口
 */
func (client *Client) CreateContractOnestepflowEx(request *CreateContractOnestepflowRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractOnestepflowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractOnestepflowResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.onestepflow.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过流程ID查询合同存证信息
 * Summary: 查询合同存证信息
 */
func (client *Client) QueryContractNotary(request *QueryContractNotaryRequest) (_result *QueryContractNotaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContractNotaryResponse{}
	_body, _err := client.QueryContractNotaryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过流程ID查询合同存证信息
 * Summary: 查询合同存证信息
 */
func (client *Client) QueryContractNotaryEx(request *QueryContractNotaryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContractNotaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContractNotaryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.notary.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取合同存证事务ID
 * Summary: 获取合同存证事务ID
 */
func (client *Client) CreateEcocontractTrans(request *CreateEcocontractTransRequest) (_result *CreateEcocontractTransResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateEcocontractTransResponse{}
	_body, _err := client.CreateEcocontractTransEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取合同存证事务ID
 * Summary: 获取合同存证事务ID
 */
func (client *Client) CreateEcocontractTransEx(request *CreateEcocontractTransRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateEcocontractTransResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateEcocontractTransResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.ecocontract.trans.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 合同文本存证
 * Summary: 合同文本存证
 */
func (client *Client) CreateEcocontractText(request *CreateEcocontractTextRequest) (_result *CreateEcocontractTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateEcocontractTextResponse{}
	_body, _err := client.CreateEcocontractTextEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 合同文本存证
 * Summary: 合同文本存证
 */
func (client *Client) CreateEcocontractTextEx(request *CreateEcocontractTextRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateEcocontractTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateEcocontractTextResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.ecocontract.text.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 搜索关键字坐标，以关键字左下角为原点去查询坐标
 * Summary: 搜索关键字坐标
 */
func (client *Client) QueryContractWordsposition(request *QueryContractWordspositionRequest) (_result *QueryContractWordspositionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContractWordspositionResponse{}
	_body, _err := client.QueryContractWordspositionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 搜索关键字坐标，以关键字左下角为原点去查询坐标
 * Summary: 搜索关键字坐标
 */
func (client *Client) QueryContractWordspositionEx(request *QueryContractWordspositionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContractWordspositionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContractWordspositionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.wordsposition.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 执行签署人删除逻辑
 * Summary: 删除签署人
 */
func (client *Client) DeleteContractSigner(request *DeleteContractSignerRequest) (_result *DeleteContractSignerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteContractSignerResponse{}
	_body, _err := client.DeleteContractSignerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 执行签署人删除逻辑
 * Summary: 删除签署人
 */
func (client *Client) DeleteContractSignerEx(request *DeleteContractSignerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteContractSignerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteContractSignerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.signer.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取区块链合同存证证明
 * Summary: 获取区块链合同存证证明
 */
func (client *Client) GetContractCertificate(request *GetContractCertificateRequest) (_result *GetContractCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetContractCertificateResponse{}
	_body, _err := client.GetContractCertificateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取区块链合同存证证明
 * Summary: 获取区块链合同存证证明
 */
func (client *Client) GetContractCertificateEx(request *GetContractCertificateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetContractCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetContractCertificateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.certificate.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 已归档的合同，支持根据合同流程签署区查询已使用的印章id
 * Summary: 根据合同流程签署区查询已使用的印章id
 */
func (client *Client) QueryContractSignfieldsealid(request *QueryContractSignfieldsealidRequest) (_result *QueryContractSignfieldsealidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContractSignfieldsealidResponse{}
	_body, _err := client.QueryContractSignfieldsealidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 已归档的合同，支持根据合同流程签署区查询已使用的印章id
 * Summary: 根据合同流程签署区查询已使用的印章id
 */
func (client *Client) QueryContractSignfieldsealidEx(request *QueryContractSignfieldsealidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContractSignfieldsealidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContractSignfieldsealidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.signfieldsealid.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 本接口功能默认不开启，如有需求请联系技术支持。添加手动签署区，并启动签署流程之后，触发通知，提醒签署方执行签署。通知方式以创建流程时的配置为准（目前仅支持短信）。
 * Summary: 通知签署方执行合同签署
 */
func (client *Client) NotifyContractSigner(request *NotifyContractSignerRequest) (_result *NotifyContractSignerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &NotifyContractSignerResponse{}
	_body, _err := client.NotifyContractSignerEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 本接口功能默认不开启，如有需求请联系技术支持。添加手动签署区，并启动签署流程之后，触发通知，提醒签署方执行签署。通知方式以创建流程时的配置为准（目前仅支持短信）。
 * Summary: 通知签署方执行合同签署
 */
func (client *Client) NotifyContractSignerEx(request *NotifyContractSignerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *NotifyContractSignerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &NotifyContractSignerResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.signer.notify"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过配置白名单，临时允许修改证件号/名称等所有字段以及经办人的信息，修改后从白名单中去除
 * Summary: 修改平台方注册信息
 */
func (client *Client) UpdateContractPlatform(request *UpdateContractPlatformRequest) (_result *UpdateContractPlatformResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateContractPlatformResponse{}
	_body, _err := client.UpdateContractPlatformEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过配置白名单，临时允许修改证件号/名称等所有字段以及经办人的信息，修改后从白名单中去除
 * Summary: 修改平台方注册信息
 */
func (client *Client) UpdateContractPlatformEx(request *UpdateContractPlatformRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateContractPlatformResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateContractPlatformResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.platform.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 个人的注册信息中证件信息为空时允许修改姓名、证件等各项信息，如果不为空，则不允许修改
 * Summary: 修改用户注册信息
 */
func (client *Client) UpdateContractUser(request *UpdateContractUserRequest) (_result *UpdateContractUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateContractUserResponse{}
	_body, _err := client.UpdateContractUserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 个人的注册信息中证件信息为空时允许修改姓名、证件等各项信息，如果不为空，则不允许修改
 * Summary: 修改用户注册信息
 */
func (client *Client) UpdateContractUserEx(request *UpdateContractUserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateContractUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateContractUserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.user.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 机构的注册信息中证件信息为空时允许修改机构名、证件等各项信息，但不允许修改经办人信息，如果不为空，则无法修改
 * Summary: 修改机构用户注册信息
 */
func (client *Client) UpdateContractOrganization(request *UpdateContractOrganizationRequest) (_result *UpdateContractOrganizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateContractOrganizationResponse{}
	_body, _err := client.UpdateContractOrganizationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 机构的注册信息中证件信息为空时允许修改机构名、证件等各项信息，但不允许修改经办人信息，如果不为空，则无法修改
 * Summary: 修改机构用户注册信息
 */
func (client *Client) UpdateContractOrganizationEx(request *UpdateContractOrganizationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateContractOrganizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateContractOrganizationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.organization.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商户入驻直付通新接口，通过此接口创建的商户，签约模式默认走单独签约授权模式（即不同商户都需要进行单独的代扣签约授权）。
 * Summary: 商户入驻直付通新接口
 */
func (client *Client) ApplyContractMerchant(request *ApplyContractMerchantRequest) (_result *ApplyContractMerchantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyContractMerchantResponse{}
	_body, _err := client.ApplyContractMerchantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商户入驻直付通新接口，通过此接口创建的商户，签约模式默认走单独签约授权模式（即不同商户都需要进行单独的代扣签约授权）。
 * Summary: 商户入驻直付通新接口
 */
func (client *Client) ApplyContractMerchantEx(request *ApplyContractMerchantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyContractMerchantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyContractMerchantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.merchant.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 直付通商户入驻确认（确认成功则表明入驻成功）
 * Summary: 直付通商户入驻确认
 */
func (client *Client) ConfirmContractMerchant(request *ConfirmContractMerchantRequest) (_result *ConfirmContractMerchantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmContractMerchantResponse{}
	_body, _err := client.ConfirmContractMerchantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 直付通商户入驻确认（确认成功则表明入驻成功）
 * Summary: 直付通商户入驻确认
 */
func (client *Client) ConfirmContractMerchantEx(request *ConfirmContractMerchantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmContractMerchantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmContractMerchantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.merchant.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建合同存证事务ID。私有云使用。
 * Summary: 创建合同存证事务ID。私有云使用。
 */
func (client *Client) CreatePrivatecontractTrans(request *CreatePrivatecontractTransRequest) (_result *CreatePrivatecontractTransResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreatePrivatecontractTransResponse{}
	_body, _err := client.CreatePrivatecontractTransEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建合同存证事务ID。私有云使用。
 * Summary: 创建合同存证事务ID。私有云使用。
 */
func (client *Client) CreatePrivatecontractTransEx(request *CreatePrivatecontractTransRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreatePrivatecontractTransResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreatePrivatecontractTransResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.privatecontract.trans.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 合同文本存证。私有云使用。
 * Summary: 合同文本存证。私有云使用。
 */
func (client *Client) CreatePrivatecontractText(request *CreatePrivatecontractTextRequest) (_result *CreatePrivatecontractTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreatePrivatecontractTextResponse{}
	_body, _err := client.CreatePrivatecontractTextEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 合同文本存证。私有云使用。
 * Summary: 合同文本存证。私有云使用。
 */
func (client *Client) CreatePrivatecontractTextEx(request *CreatePrivatecontractTextRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreatePrivatecontractTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreatePrivatecontractTextResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.privatecontract.text.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 个人二要素校验
 * Summary: 个人二要素校验
 */
func (client *Client) VerifyPrivatepersonTwometa(request *VerifyPrivatepersonTwometaRequest) (_result *VerifyPrivatepersonTwometaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &VerifyPrivatepersonTwometaResponse{}
	_body, _err := client.VerifyPrivatepersonTwometaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 个人二要素校验
 * Summary: 个人二要素校验
 */
func (client *Client) VerifyPrivatepersonTwometaEx(request *VerifyPrivatepersonTwometaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *VerifyPrivatepersonTwometaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &VerifyPrivatepersonTwometaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.privateperson.twometa.verify"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 企业二要素校验
 * Summary: 企业二要素校验
 */
func (client *Client) VerifyPrivatecompanyTwometa(request *VerifyPrivatecompanyTwometaRequest) (_result *VerifyPrivatecompanyTwometaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &VerifyPrivatecompanyTwometaResponse{}
	_body, _err := client.VerifyPrivatecompanyTwometaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 企业二要素校验
 * Summary: 企业二要素校验
 */
func (client *Client) VerifyPrivatecompanyTwometaEx(request *VerifyPrivatecompanyTwometaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *VerifyPrivatecompanyTwometaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &VerifyPrivatecompanyTwometaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.privatecompany.twometa.verify"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 企业四要素校验
 * Summary: 企业四要素校验
 */
func (client *Client) VerifyPrivatecompanyFourmeta(request *VerifyPrivatecompanyFourmetaRequest) (_result *VerifyPrivatecompanyFourmetaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &VerifyPrivatecompanyFourmetaResponse{}
	_body, _err := client.VerifyPrivatecompanyFourmetaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 企业四要素校验
 * Summary: 企业四要素校验
 */
func (client *Client) VerifyPrivatecompanyFourmetaEx(request *VerifyPrivatecompanyFourmetaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *VerifyPrivatecompanyFourmetaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &VerifyPrivatecompanyFourmetaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.privatecompany.fourmeta.verify"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 开放给私有云的外部用户的注册接口.
 * Summary: 私有云的外部用户注册接口.
 */
func (client *Client) ApplyPrivatecontractCert(request *ApplyPrivatecontractCertRequest) (_result *ApplyPrivatecontractCertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyPrivatecontractCertResponse{}
	_body, _err := client.ApplyPrivatecontractCertEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 开放给私有云的外部用户的注册接口.
 * Summary: 私有云的外部用户注册接口.
 */
func (client *Client) ApplyPrivatecontractCertEx(request *ApplyPrivatecontractCertRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyPrivatecontractCertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyPrivatecontractCertResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.privatecontract.cert.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 代扣计划状态查询接口，仅能查询到由新状态机执行的代扣计划，未切换到新状态机的老数据查询不到
 * Summary: 代扣计划状态查询
 */
func (client *Client) QueryContractTradestatus(request *QueryContractTradestatusRequest) (_result *QueryContractTradestatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContractTradestatusResponse{}
	_body, _err := client.QueryContractTradestatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 代扣计划状态查询接口，仅能查询到由新状态机执行的代扣计划，未切换到新状态机的老数据查询不到
 * Summary: 代扣计划状态查询
 */
func (client *Client) QueryContractTradestatusEx(request *QueryContractTradestatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContractTradestatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContractTradestatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.tradestatus.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 代扣退款查询，仅支持新代扣状态机处理过的数据，老状态机处理的数据无法查到。
 * Summary: 代扣退款查询
 */
func (client *Client) QueryContractRefund(request *QueryContractRefundRequest) (_result *QueryContractRefundResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContractRefundResponse{}
	_body, _err := client.QueryContractRefundEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 代扣退款查询，仅支持新代扣状态机处理过的数据，老状态机处理的数据无法查到。
 * Summary: 代扣退款查询
 */
func (client *Client) QueryContractRefundEx(request *QueryContractRefundRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContractRefundResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContractRefundResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.refund.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 私有云合同服务通过调用公有云合同服务，获取可公网访问的外部客户的签署地址
 * Summary: 私有云服务获取外部用户签署地址
 */
func (client *Client) GetPrivatecontractSignurl(request *GetPrivatecontractSignurlRequest) (_result *GetPrivatecontractSignurlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetPrivatecontractSignurlResponse{}
	_body, _err := client.GetPrivatecontractSignurlEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 私有云合同服务通过调用公有云合同服务，获取可公网访问的外部客户的签署地址
 * Summary: 私有云服务获取外部用户签署地址
 */
func (client *Client) GetPrivatecontractSignurlEx(request *GetPrivatecontractSignurlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetPrivatecontractSignurlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetPrivatecontractSignurlResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.privatecontract.signurl.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商户入驻直付通进度查询，替代twc.notary.contract.merchantindirectzft.query
 * Summary: 商户入驻直付通进度查询
 */
func (client *Client) QueryContractMerchantorder(request *QueryContractMerchantorderRequest) (_result *QueryContractMerchantorderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContractMerchantorderResponse{}
	_body, _err := client.QueryContractMerchantorderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商户入驻直付通进度查询，替代twc.notary.contract.merchantindirectzft.query
 * Summary: 商户入驻直付通进度查询
 */
func (client *Client) QueryContractMerchantorderEx(request *QueryContractMerchantorderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContractMerchantorderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContractMerchantorderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.merchantorder.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 修改商户进件信息，单商户可能被多个用户代理，信息修改会生效到所有代理用户上。
 * Summary: 商户进件信息修改
 */
func (client *Client) UpdateContractMerchant(request *UpdateContractMerchantRequest) (_result *UpdateContractMerchantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateContractMerchantResponse{}
	_body, _err := client.UpdateContractMerchantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 修改商户进件信息，单商户可能被多个用户代理，信息修改会生效到所有代理用户上。
 * Summary: 商户进件信息修改
 */
func (client *Client) UpdateContractMerchantEx(request *UpdateContractMerchantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateContractMerchantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateContractMerchantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.merchant.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 一个二级商户可以挂接多个平台方用户，此接口可以对已进件的商户进行挂接操作。
 * Summary: 二级商户代理挂接接口
 */
func (client *Client) BindContractMerchant(request *BindContractMerchantRequest) (_result *BindContractMerchantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BindContractMerchantResponse{}
	_body, _err := client.BindContractMerchantEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 一个二级商户可以挂接多个平台方用户，此接口可以对已进件的商户进行挂接操作。
 * Summary: 二级商户代理挂接接口
 */
func (client *Client) BindContractMerchantEx(request *BindContractMerchantRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BindContractMerchantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BindContractMerchantResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.merchant.bind"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 初始化私有化合同服务实例，生成服务验签的公/私钥，以及回调使用的公/私钥
 * Summary: 初始化新的私有化合同服务实例
 */
func (client *Client) InitPrivatecontractIntance(request *InitPrivatecontractIntanceRequest) (_result *InitPrivatecontractIntanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InitPrivatecontractIntanceResponse{}
	_body, _err := client.InitPrivatecontractIntanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 初始化私有化合同服务实例，生成服务验签的公/私钥，以及回调使用的公/私钥
 * Summary: 初始化新的私有化合同服务实例
 */
func (client *Client) InitPrivatecontractIntanceEx(request *InitPrivatecontractIntanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InitPrivatecontractIntanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InitPrivatecontractIntanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.privatecontract.intance.init"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新已有的私有化合同服务实例信息，如私有化服务地址
 * Summary: 更新私有化合同服务实例信息
 */
func (client *Client) UpdatePrivatecontractIntance(request *UpdatePrivatecontractIntanceRequest) (_result *UpdatePrivatecontractIntanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdatePrivatecontractIntanceResponse{}
	_body, _err := client.UpdatePrivatecontractIntanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新已有的私有化合同服务实例信息，如私有化服务地址
 * Summary: 更新私有化合同服务实例信息
 */
func (client *Client) UpdatePrivatecontractIntanceEx(request *UpdatePrivatecontractIntanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdatePrivatecontractIntanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdatePrivatecontractIntanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.privatecontract.intance.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 开放给私有云的外部用户的证书更新接口.
 * Summary: 私有云用户证书更新接口.
 */
func (client *Client) UpdatePrivatecontractCert(request *UpdatePrivatecontractCertRequest) (_result *UpdatePrivatecontractCertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdatePrivatecontractCertResponse{}
	_body, _err := client.UpdatePrivatecontractCertEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 开放给私有云的外部用户的证书更新接口.
 * Summary: 私有云用户证书更新接口.
 */
func (client *Client) UpdatePrivatecontractCertEx(request *UpdatePrivatecontractCertRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdatePrivatecontractCertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdatePrivatecontractCertResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.privatecontract.cert.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 修改商户进件申请信息状态数据，只允许超管租户操作
 * Summary: 商户进件申请信息重置
 */
func (client *Client) ResetContractMerchantapply(request *ResetContractMerchantapplyRequest) (_result *ResetContractMerchantapplyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ResetContractMerchantapplyResponse{}
	_body, _err := client.ResetContractMerchantapplyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 修改商户进件申请信息状态数据，只允许超管租户操作
 * Summary: 商户进件申请信息重置
 */
func (client *Client) ResetContractMerchantapplyEx(request *ResetContractMerchantapplyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ResetContractMerchantapplyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ResetContractMerchantapplyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.merchantapply.reset"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 内部接口，校验私有化合同服务实例权限状态，可能为开通/释放/恢复/停服等
 * Summary: 校验私有化合同服务实例权限情况
 */
func (client *Client) CheckPrivatecontractProvision(request *CheckPrivatecontractProvisionRequest) (_result *CheckPrivatecontractProvisionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckPrivatecontractProvisionResponse{}
	_body, _err := client.CheckPrivatecontractProvisionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 内部接口，校验私有化合同服务实例权限状态，可能为开通/释放/恢复/停服等
 * Summary: 校验私有化合同服务实例权限情况
 */
func (client *Client) CheckPrivatecontractProvisionEx(request *CheckPrivatecontractProvisionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckPrivatecontractProvisionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckPrivatecontractProvisionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.privatecontract.provision.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 私有化合同服务实例计量数据推送
 * Summary: 私有化合同服务实例计量数据推送
 */
func (client *Client) PushPrivatecontractGauge(request *PushPrivatecontractGaugeRequest) (_result *PushPrivatecontractGaugeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PushPrivatecontractGaugeResponse{}
	_body, _err := client.PushPrivatecontractGaugeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 私有化合同服务实例计量数据推送
 * Summary: 私有化合同服务实例计量数据推送
 */
func (client *Client) PushPrivatecontractGaugeEx(request *PushPrivatecontractGaugeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PushPrivatecontractGaugeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PushPrivatecontractGaugeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.privatecontract.gauge.push"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 法院代扣链路，扣款前需要进行账户预校验，验证此接口是否可以进行付款
 * Summary: 法院代扣账户扣款预校验
 */
func (client *Client) CheckContractCourtdeduct(request *CheckContractCourtdeductRequest) (_result *CheckContractCourtdeductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckContractCourtdeductResponse{}
	_body, _err := client.CheckContractCourtdeductEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 法院代扣链路，扣款前需要进行账户预校验，验证此接口是否可以进行付款
 * Summary: 法院代扣账户扣款预校验
 */
func (client *Client) CheckContractCourtdeductEx(request *CheckContractCourtdeductRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckContractCourtdeductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckContractCourtdeductResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.courtdeduct.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 法院代扣计划创建
 * Summary: 法院代扣计划创建
 */
func (client *Client) CreateContractCourtdeduct(request *CreateContractCourtdeductRequest) (_result *CreateContractCourtdeductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractCourtdeductResponse{}
	_body, _err := client.CreateContractCourtdeductEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 法院代扣计划创建
 * Summary: 法院代扣计划创建
 */
func (client *Client) CreateContractCourtdeductEx(request *CreateContractCourtdeductRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractCourtdeductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractCourtdeductResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.courtdeduct.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 法院代扣执行扣款
 * Summary: 法院代扣执行扣款
 */
func (client *Client) ExecContractCourtdeduct(request *ExecContractCourtdeductRequest) (_result *ExecContractCourtdeductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecContractCourtdeductResponse{}
	_body, _err := client.ExecContractCourtdeductEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 法院代扣执行扣款
 * Summary: 法院代扣执行扣款
 */
func (client *Client) ExecContractCourtdeductEx(request *ExecContractCourtdeductRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecContractCourtdeductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecContractCourtdeductResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.courtdeduct.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 文本签名
 * Summary: 文本签接口
 */
func (client *Client) GetContractTextsign(request *GetContractTextsignRequest) (_result *GetContractTextsignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetContractTextsignResponse{}
	_body, _err := client.GetContractTextsignEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 文本签名
 * Summary: 文本签接口
 */
func (client *Client) GetContractTextsignEx(request *GetContractTextsignRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetContractTextsignResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetContractTextsignResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.textsign.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 文本验签
 * Summary: 文本验签接口
 */
func (client *Client) VerifyContractTextsign(request *VerifyContractTextsignRequest) (_result *VerifyContractTextsignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &VerifyContractTextsignResponse{}
	_body, _err := client.VerifyContractTextsignEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 文本验签
 * Summary: 文本验签接口
 */
func (client *Client) VerifyContractTextsignEx(request *VerifyContractTextsignRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *VerifyContractTextsignResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &VerifyContractTextsignResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.textsign.verify"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 文件签验签
 * Summary: 文件签验签
 */
func (client *Client) VerifyContractDocsign(request *VerifyContractDocsignRequest) (_result *VerifyContractDocsignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &VerifyContractDocsignResponse{}
	_body, _err := client.VerifyContractDocsignEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 文件签验签
 * Summary: 文件签验签
 */
func (client *Client) VerifyContractDocsignEx(request *VerifyContractDocsignRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *VerifyContractDocsignResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &VerifyContractDocsignResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.docsign.verify"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除签署区
 * Summary: 删除签署区
 */
func (client *Client) DeleteContractSignfield(request *DeleteContractSignfieldRequest) (_result *DeleteContractSignfieldResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteContractSignfieldResponse{}
	_body, _err := client.DeleteContractSignfieldEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除签署区
 * Summary: 删除签署区
 */
func (client *Client) DeleteContractSignfieldEx(request *DeleteContractSignfieldRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteContractSignfieldResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteContractSignfieldResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.signfield.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建平台方用户接口twc.notary.contract.user.create加密版
 * Summary: 创建平台方用户加密版
 */
func (client *Client) CreateContractEncrypteduser(request *CreateContractEncrypteduserRequest) (_result *CreateContractEncrypteduserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractEncrypteduserResponse{}
	_body, _err := client.CreateContractEncrypteduserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建平台方用户接口twc.notary.contract.user.create加密版
 * Summary: 创建平台方用户加密版
 */
func (client *Client) CreateContractEncrypteduserEx(request *CreateContractEncrypteduserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractEncrypteduserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractEncrypteduserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.encrypteduser.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户需要同时设置解密密钥与通信秘钥才可使用文件解密服务；
 * Summary: 用户密钥设置接口
 */
func (client *Client) SetContractTenantkey(request *SetContractTenantkeyRequest) (_result *SetContractTenantkeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetContractTenantkeyResponse{}
	_body, _err := client.SetContractTenantkeyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户需要同时设置解密密钥与通信秘钥才可使用文件解密服务；
 * Summary: 用户密钥设置接口
 */
func (client *Client) SetContractTenantkeyEx(request *SetContractTenantkeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetContractTenantkeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetContractTenantkeyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.tenantkey.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取加密文件上传链接
 * Summary: 获取加密文件上传链接
 */
func (client *Client) GetContractEncryptedfileuploadurl(request *GetContractEncryptedfileuploadurlRequest) (_result *GetContractEncryptedfileuploadurlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetContractEncryptedfileuploadurlResponse{}
	_body, _err := client.GetContractEncryptedfileuploadurlEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取加密文件上传链接
 * Summary: 获取加密文件上传链接
 */
func (client *Client) GetContractEncryptedfileuploadurlEx(request *GetContractEncryptedfileuploadurlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetContractEncryptedfileuploadurlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetContractEncryptedfileuploadurlResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.encryptedfileuploadurl.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建异步任务
 * Summary: 创建任务接口
 */
func (client *Client) CreateContractTask(request *CreateContractTaskRequest) (_result *CreateContractTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractTaskResponse{}
	_body, _err := client.CreateContractTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建异步任务
 * Summary: 创建任务接口
 */
func (client *Client) CreateContractTaskEx(request *CreateContractTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.task.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 任务查询接口
 * Summary: 任务查询
 */
func (client *Client) QueryContractTask(request *QueryContractTaskRequest) (_result *QueryContractTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContractTaskResponse{}
	_body, _err := client.QueryContractTaskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 任务查询接口
 * Summary: 任务查询
 */
func (client *Client) QueryContractTaskEx(request *QueryContractTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContractTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContractTaskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.task.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 合同代扣触发接口，每笔订单仅一天仅允许触发一次
 * Summary: 合同代扣触发接口
 */
func (client *Client) ExecContractPay(request *ExecContractPayRequest) (_result *ExecContractPayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecContractPayResponse{}
	_body, _err := client.ExecContractPayEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 合同代扣触发接口，每笔订单仅一天仅允许触发一次
 * Summary: 合同代扣触发接口
 */
func (client *Client) ExecContractPayEx(request *ExecContractPayRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecContractPayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecContractPayResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.pay.exec"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 强制帮用户接触代扣协议，未执行成功的代扣会被取消，已执行成功的代扣不变。
 * Summary: 代扣强制解约
 */
func (client *Client) UnbindContractPay(request *UnbindContractPayRequest) (_result *UnbindContractPayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UnbindContractPayResponse{}
	_body, _err := client.UnbindContractPayEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 强制帮用户接触代扣协议，未执行成功的代扣会被取消，已执行成功的代扣不变。
 * Summary: 代扣强制解约
 */
func (client *Client) UnbindContractPayEx(request *UnbindContractPayRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UnbindContractPayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnbindContractPayResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.pay.unbind"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商户每次收到客户投诉回调通知，商户端均需要通过此接口来查询投诉数据。
 * Summary: 投诉数据查询
 */
func (client *Client) QueryContractComplain(request *QueryContractComplainRequest) (_result *QueryContractComplainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContractComplainResponse{}
	_body, _err := client.QueryContractComplainEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商户每次收到客户投诉回调通知，商户端均需要通过此接口来查询投诉数据。
 * Summary: 投诉数据查询
 */
func (client *Client) QueryContractComplainEx(request *QueryContractComplainRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContractComplainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContractComplainResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.complain.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商家收到用户投诉后，可通过此接口进行投诉反馈。注意，只有当投诉单状态为MERCHANT_PROCESSING时，才允许商家进行投诉反馈。
 * Summary: 投诉反馈
 */
func (client *Client) SendContractComplainfeedback(request *SendContractComplainfeedbackRequest) (_result *SendContractComplainfeedbackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SendContractComplainfeedbackResponse{}
	_body, _err := client.SendContractComplainfeedbackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商家收到用户投诉后，可通过此接口进行投诉反馈。注意，只有当投诉单状态为MERCHANT_PROCESSING时，才允许商家进行投诉反馈。
 * Summary: 投诉反馈
 */
func (client *Client) SendContractComplainfeedbackEx(request *SendContractComplainfeedbackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SendContractComplainfeedbackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SendContractComplainfeedbackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.complainfeedback.send"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 商户上传处理图片
 * Summary: 商户上传处理图片
 */
func (client *Client) UploadContractComplainimage(request *UploadContractComplainimageRequest) (_result *UploadContractComplainimageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UploadContractComplainimageResponse{}
	_body, _err := client.UploadContractComplainimageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 商户上传处理图片
 * Summary: 商户上传处理图片
 */
func (client *Client) UploadContractComplainimageEx(request *UploadContractComplainimageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UploadContractComplainimageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UploadContractComplainimageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.complainimage.upload"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据起止日期查询体验宝投诉工单
 * Summary: 根据起止日期查询体验宝投诉工单
 */
func (client *Client) QueryContractComplaineventids(request *QueryContractComplaineventidsRequest) (_result *QueryContractComplaineventidsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContractComplaineventidsResponse{}
	_body, _err := client.QueryContractComplaineventidsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据起止日期查询体验宝投诉工单
 * Summary: 根据起止日期查询体验宝投诉工单
 */
func (client *Client) QueryContractComplaineventidsEx(request *QueryContractComplaineventidsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContractComplaineventidsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContractComplaineventidsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.complaineventids.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户使用mp4内容，集成方通过该openAPI进行使用上报。
 * Summary: 集成方通过该接口进行使用mp4上报
 */
func (client *Client) PushDigitalcontentUsage(request *PushDigitalcontentUsageRequest) (_result *PushDigitalcontentUsageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PushDigitalcontentUsageResponse{}
	_body, _err := client.PushDigitalcontentUsageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户使用mp4内容，集成方通过该openAPI进行使用上报。
 * Summary: 集成方通过该接口进行使用mp4上报
 */
func (client *Client) PushDigitalcontentUsageEx(request *PushDigitalcontentUsageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PushDigitalcontentUsageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PushDigitalcontentUsageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.digitalcontent.usage.push"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户使用apk内容，集成方通过该openAPI申请该使用的订单id。
 * Summary: 集成方通过该接口申请apk订单id
 */
func (client *Client) ApplyDigitalcontentOrder(request *ApplyDigitalcontentOrderRequest) (_result *ApplyDigitalcontentOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyDigitalcontentOrderResponse{}
	_body, _err := client.ApplyDigitalcontentOrderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户使用apk内容，集成方通过该openAPI申请该使用的订单id。
 * Summary: 集成方通过该接口申请apk订单id
 */
func (client *Client) ApplyDigitalcontentOrderEx(request *ApplyDigitalcontentOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyDigitalcontentOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyDigitalcontentOrderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.digitalcontent.order.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户使用apk内容支付后，集成方通过订单id和支付id反馈支付结果，并申请交互token。
 * Summary: 集成方反馈apk订单支付结果
 */
func (client *Client) SubmitDigitalcontentOrder(request *SubmitDigitalcontentOrderRequest) (_result *SubmitDigitalcontentOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SubmitDigitalcontentOrderResponse{}
	_body, _err := client.SubmitDigitalcontentOrderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户使用apk内容支付后，集成方通过订单id和支付id反馈支付结果，并申请交互token。
 * Summary: 集成方反馈apk订单支付结果
 */
func (client *Client) SubmitDigitalcontentOrderEx(request *SubmitDigitalcontentOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SubmitDigitalcontentOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SubmitDigitalcontentOrderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.digitalcontent.order.submit"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: baas-notary向notarycore同步生成的事务数据，仅做数据同步使用
 * Summary: 向notarycore同步事务数据
 */
func (client *Client) SyncInnerTrans(request *SyncInnerTransRequest) (_result *SyncInnerTransResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SyncInnerTransResponse{}
	_body, _err := client.SyncInnerTransEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: baas-notary向notarycore同步生成的事务数据，仅做数据同步使用
 * Summary: 向notarycore同步事务数据
 */
func (client *Client) SyncInnerTransEx(request *SyncInnerTransRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SyncInnerTransResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SyncInnerTransResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.inner.trans.sync"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 从baas-notary向notarycore同步存证数据
 * Summary: 向notarycore同步存证数据
 */
func (client *Client) SyncInnerNotary(request *SyncInnerNotaryRequest) (_result *SyncInnerNotaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SyncInnerNotaryResponse{}
	_body, _err := client.SyncInnerNotaryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 从baas-notary向notarycore同步存证数据
 * Summary: 向notarycore同步存证数据
 */
func (client *Client) SyncInnerNotaryEx(request *SyncInnerNotaryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SyncInnerNotaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SyncInnerNotaryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.inner.notary.sync"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 从baas-notary向notarycore同步自租户信息
 * Summary: 向notarycore同步子租户数据
 */
func (client *Client) SyncInnerTwcopen(request *SyncInnerTwcopenRequest) (_result *SyncInnerTwcopenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SyncInnerTwcopenResponse{}
	_body, _err := client.SyncInnerTwcopenEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 从baas-notary向notarycore同步自租户信息
 * Summary: 向notarycore同步子租户数据
 */
func (client *Client) SyncInnerTwcopenEx(request *SyncInnerTwcopenRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SyncInnerTwcopenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SyncInnerTwcopenResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.inner.twcopen.sync"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 从baas-notary向notarycore同步租户权限数据
 * Summary: 向notarycore同步租户数据
 */
func (client *Client) SyncInnerProvision(request *SyncInnerProvisionRequest) (_result *SyncInnerProvisionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SyncInnerProvisionResponse{}
	_body, _err := client.SyncInnerProvisionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 从baas-notary向notarycore同步租户权限数据
 * Summary: 向notarycore同步租户数据
 */
func (client *Client) SyncInnerProvisionEx(request *SyncInnerProvisionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SyncInnerProvisionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SyncInnerProvisionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.inner.provision.sync"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 从baas-notary向notarycore同步tsr数据
 * Summary: 向notarycore同步tsr数据
 */
func (client *Client) SyncInnerTsr(request *SyncInnerTsrRequest) (_result *SyncInnerTsrResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SyncInnerTsrResponse{}
	_body, _err := client.SyncInnerTsrEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 从baas-notary向notarycore同步tsr数据
 * Summary: 向notarycore同步tsr数据
 */
func (client *Client) SyncInnerTsrEx(request *SyncInnerTsrRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SyncInnerTsrResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SyncInnerTsrResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.inner.tsr.sync"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 输入企业名+证件号，发起企业二要素认证请求。
 * Summary: 企业二要素认证
 */
func (client *Client) CheckEpidentityTwometa(request *CheckEpidentityTwometaRequest) (_result *CheckEpidentityTwometaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckEpidentityTwometaResponse{}
	_body, _err := client.CheckEpidentityTwometaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 输入企业名+证件号，发起企业二要素认证请求。
 * Summary: 企业二要素认证
 */
func (client *Client) CheckEpidentityTwometaEx(request *CheckEpidentityTwometaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckEpidentityTwometaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckEpidentityTwometaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.epidentity.twometa.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 输入企业名+证件号+企业法人姓名，发起企业三要素认证请求。
 * Summary: 企业三要素认证
 */
func (client *Client) CheckEpidentityThreemeta(request *CheckEpidentityThreemetaRequest) (_result *CheckEpidentityThreemetaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckEpidentityThreemetaResponse{}
	_body, _err := client.CheckEpidentityThreemetaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 输入企业名+证件号+企业法人姓名，发起企业三要素认证请求。
 * Summary: 企业三要素认证
 */
func (client *Client) CheckEpidentityThreemetaEx(request *CheckEpidentityThreemetaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckEpidentityThreemetaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckEpidentityThreemetaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.epidentity.threemeta.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 输入企业名+证件号+企业法人姓+法人证件号，发起企业四要素认证请求。
 * Summary: 企业四要素认证
 */
func (client *Client) CheckEpidentityFourmeta(request *CheckEpidentityFourmetaRequest) (_result *CheckEpidentityFourmetaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckEpidentityFourmetaResponse{}
	_body, _err := client.CheckEpidentityFourmetaEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 输入企业名+证件号+企业法人姓+法人证件号，发起企业四要素认证请求。
 * Summary: 企业四要素认证
 */
func (client *Client) CheckEpidentityFourmetaEx(request *CheckEpidentityFourmetaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckEpidentityFourmetaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckEpidentityFourmetaResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.epidentity.fourmeta.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询公证订单的有效性
 * Summary: 查询公证订单的有效性
 */
func (client *Client) CheckNotarizationOrder(request *CheckNotarizationOrderRequest) (_result *CheckNotarizationOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckNotarizationOrderResponse{}
	_body, _err := client.CheckNotarizationOrderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询公证订单的有效性
 * Summary: 查询公证订单的有效性
 */
func (client *Client) CheckNotarizationOrderEx(request *CheckNotarizationOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckNotarizationOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckNotarizationOrderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.notarization.order.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 更新公证订单状态
 * Summary: 更新公证订单状态
 */
func (client *Client) UpdateNotarizationOrder(request *UpdateNotarizationOrderRequest) (_result *UpdateNotarizationOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateNotarizationOrderResponse{}
	_body, _err := client.UpdateNotarizationOrderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 更新公证订单状态
 * Summary: 更新公证订单状态
 */
func (client *Client) UpdateNotarizationOrderEx(request *UpdateNotarizationOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateNotarizationOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateNotarizationOrderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.notarization.order.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 设置订单属性
 * Summary: 设置订单属性
 */
func (client *Client) SetNotarizationOrder(request *SetNotarizationOrderRequest) (_result *SetNotarizationOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetNotarizationOrderResponse{}
	_body, _err := client.SetNotarizationOrderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 设置订单属性
 * Summary: 设置订单属性
 */
func (client *Client) SetNotarizationOrderEx(request *SetNotarizationOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetNotarizationOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetNotarizationOrderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.notarization.order.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 实人认证初始化
 * Summary: 实人认证初始化
 */
func (client *Client) InitIdentificationFaceauth(request *InitIdentificationFaceauthRequest) (_result *InitIdentificationFaceauthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InitIdentificationFaceauthResponse{}
	_body, _err := client.InitIdentificationFaceauthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 实人认证初始化
 * Summary: 实人认证初始化
 */
func (client *Client) InitIdentificationFaceauthEx(request *InitIdentificationFaceauthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InitIdentificationFaceauthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InitIdentificationFaceauthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.identification.faceauth.init"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发起实人认证
 * Summary: 发起实人认证
 */
func (client *Client) CertifyIdentificationFaceauth(request *CertifyIdentificationFaceauthRequest) (_result *CertifyIdentificationFaceauthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CertifyIdentificationFaceauthResponse{}
	_body, _err := client.CertifyIdentificationFaceauthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发起实人认证
 * Summary: 发起实人认证
 */
func (client *Client) CertifyIdentificationFaceauthEx(request *CertifyIdentificationFaceauthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CertifyIdentificationFaceauthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CertifyIdentificationFaceauthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.identification.faceauth.certify"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询实人认证结果
 * Summary: 查询实人认证结果
 */
func (client *Client) QueryIdentificationFaceauth(request *QueryIdentificationFaceauthRequest) (_result *QueryIdentificationFaceauthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIdentificationFaceauthResponse{}
	_body, _err := client.QueryIdentificationFaceauthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询实人认证结果
 * Summary: 查询实人认证结果
 */
func (client *Client) QueryIdentificationFaceauthEx(request *QueryIdentificationFaceauthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIdentificationFaceauthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIdentificationFaceauthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.identification.faceauth.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 企业法人认证查询结果接口
 * Summary: 企业法人认证查询
 */
func (client *Client) QueryEnterpriseFaceauth(request *QueryEnterpriseFaceauthRequest) (_result *QueryEnterpriseFaceauthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryEnterpriseFaceauthResponse{}
	_body, _err := client.QueryEnterpriseFaceauthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 企业法人认证查询结果接口
 * Summary: 企业法人认证查询
 */
func (client *Client) QueryEnterpriseFaceauthEx(request *QueryEnterpriseFaceauthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryEnterpriseFaceauthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryEnterpriseFaceauthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.enterprise.faceauth.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 企业法人认证初始化接口
 * Summary: 企业法人认证初始化
 */
func (client *Client) InitEnterpriseFaceauth(request *InitEnterpriseFaceauthRequest) (_result *InitEnterpriseFaceauthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InitEnterpriseFaceauthResponse{}
	_body, _err := client.InitEnterpriseFaceauthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 企业法人认证初始化接口
 * Summary: 企业法人认证初始化
 */
func (client *Client) InitEnterpriseFaceauthEx(request *InitEnterpriseFaceauthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InitEnterpriseFaceauthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InitEnterpriseFaceauthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.enterprise.faceauth.init"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 企业法人认证开始接口
 * Summary: 企业法人认证开始
 */
func (client *Client) CertifyEnterpriseFaceauth(request *CertifyEnterpriseFaceauthRequest) (_result *CertifyEnterpriseFaceauthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CertifyEnterpriseFaceauthResponse{}
	_body, _err := client.CertifyEnterpriseFaceauthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 企业法人认证开始接口
 * Summary: 企业法人认证开始
 */
func (client *Client) CertifyEnterpriseFaceauthEx(request *CertifyEnterpriseFaceauthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CertifyEnterpriseFaceauthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CertifyEnterpriseFaceauthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.enterprise.faceauth.certify"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建租赁订单
 * Summary: 租赁订单创建
 */
func (client *Client) CreateLeaseOrder(request *CreateLeaseOrderRequest) (_result *CreateLeaseOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseOrderResponse{}
	_body, _err := client.CreateLeaseOrderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建租赁订单
 * Summary: 租赁订单创建
 */
func (client *Client) CreateLeaseOrderEx(request *CreateLeaseOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseOrderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.order.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 电子公证或存证证明场景中，用户通过回传相关信息创建收费订单。
 * Summary: 公证场景创建收费订单
 */
func (client *Client) CreateNotarizationBill(request *CreateNotarizationBillRequest) (_result *CreateNotarizationBillResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateNotarizationBillResponse{}
	_body, _err := client.CreateNotarizationBillEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 电子公证或存证证明场景中，用户通过回传相关信息创建收费订单。
 * Summary: 公证场景创建收费订单
 */
func (client *Client) CreateNotarizationBillEx(request *CreateNotarizationBillRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateNotarizationBillResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateNotarizationBillResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.notarization.bill.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 提供必要的存证信息，初始化一个存证证明的订单，提交公证处审核，并返回订单号
 * Summary: 初始化存证证明订单
 */
func (client *Client) InitCertification(request *InitCertificationRequest) (_result *InitCertificationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InitCertificationResponse{}
	_body, _err := client.InitCertificationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 提供必要的存证信息，初始化一个存证证明的订单，提交公证处审核，并返回订单号
 * Summary: 初始化存证证明订单
 */
func (client *Client) InitCertificationEx(request *InitCertificationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InitCertificationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InitCertificationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.certification.init"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 输入申请ID，查询存证证明申请状态，成功后返回下载地址等信息
 * Summary: 查询存证证明申请状态
 */
func (client *Client) QueryCertification(request *QueryCertificationRequest) (_result *QueryCertificationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryCertificationResponse{}
	_body, _err := client.QueryCertificationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 输入申请ID，查询存证证明申请状态，成功后返回下载地址等信息
 * Summary: 查询存证证明申请状态
 */
func (client *Client) QueryCertificationEx(request *QueryCertificationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryCertificationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryCertificationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.certification.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 可以根据存证过程中获得当可信时间戳凭证，获取国家授时中心颁发的PDF格式可信时间证书
 * Summary: 可信时间凭证服务 - 获取时间凭证证书
 */
func (client *Client) GetTsrCertificate(request *GetTsrCertificateRequest) (_result *GetTsrCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetTsrCertificateResponse{}
	_body, _err := client.GetTsrCertificateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 可以根据存证过程中获得当可信时间戳凭证，获取国家授时中心颁发的PDF格式可信时间证书
 * Summary: 可信时间凭证服务 - 获取时间凭证证书
 */
func (client *Client) GetTsrCertificateEx(request *GetTsrCertificateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetTsrCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetTsrCertificateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.tsr.certificate.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发起实人认证，这是改造后的接口
 * Summary: 实人认证创建
 */
func (client *Client) CreateIdentificationRealperson(request *CreateIdentificationRealpersonRequest) (_result *CreateIdentificationRealpersonResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateIdentificationRealpersonResponse{}
	_body, _err := client.CreateIdentificationRealpersonEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发起实人认证，这是改造后的接口
 * Summary: 实人认证创建
 */
func (client *Client) CreateIdentificationRealpersonEx(request *CreateIdentificationRealpersonRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateIdentificationRealpersonResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateIdentificationRealpersonResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.identification.realperson.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询实人认证结果
 * Summary: 查询实人认证结果
 */
func (client *Client) QueryIdentificationRealperson(request *QueryIdentificationRealpersonRequest) (_result *QueryIdentificationRealpersonResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryIdentificationRealpersonResponse{}
	_body, _err := client.QueryIdentificationRealpersonEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询实人认证结果
 * Summary: 查询实人认证结果
 */
func (client *Client) QueryIdentificationRealpersonEx(request *QueryIdentificationRealpersonRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryIdentificationRealpersonResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryIdentificationRealpersonResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.identification.realperson.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 新增/修改履行记录，依据contractCode与contractFulfillmentCode判断唯一性
 * Summary: 联合执行履行记录新增/修改接口
 */
func (client *Client) SaveJointconstraintRecord(request *SaveJointconstraintRecordRequest) (_result *SaveJointconstraintRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SaveJointconstraintRecordResponse{}
	_body, _err := client.SaveJointconstraintRecordEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 新增/修改履行记录，依据contractCode与contractFulfillmentCode判断唯一性
 * Summary: 联合执行履行记录新增/修改接口
 */
func (client *Client) SaveJointconstraintRecordEx(request *SaveJointconstraintRecordRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SaveJointconstraintRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SaveJointconstraintRecordResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.jointconstraint.record.save"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 删除履行记录
 * Summary: 履行记录删除接口
 */
func (client *Client) DeleteJointconstraintRecord(request *DeleteJointconstraintRecordRequest) (_result *DeleteJointconstraintRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteJointconstraintRecordResponse{}
	_body, _err := client.DeleteJointconstraintRecordEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 删除履行记录
 * Summary: 履行记录删除接口
 */
func (client *Client) DeleteJointconstraintRecordEx(request *DeleteJointconstraintRecordRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteJointconstraintRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteJointconstraintRecordResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.jointconstraint.record.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询违约记录
 * Summary: 违约记录查询接口
 */
func (client *Client) QueryJointconstraintBreachrecord(request *QueryJointconstraintBreachrecordRequest) (_result *QueryJointconstraintBreachrecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryJointconstraintBreachrecordResponse{}
	_body, _err := client.QueryJointconstraintBreachrecordEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询违约记录
 * Summary: 违约记录查询接口
 */
func (client *Client) QueryJointconstraintBreachrecordEx(request *QueryJointconstraintBreachrecordRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryJointconstraintBreachrecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryJointconstraintBreachrecordResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.jointconstraint.breachrecord.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 提供给第三方调解申请提交
 * Summary: 调解申请
 */
func (client *Client) ApplyJusticeMediation(request *ApplyJusticeMediationRequest) (_result *ApplyJusticeMediationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyJusticeMediationResponse{}
	_body, _err := client.ApplyJusticeMediationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 提供给第三方调解申请提交
 * Summary: 调解申请
 */
func (client *Client) ApplyJusticeMediationEx(request *ApplyJusticeMediationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyJusticeMediationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyJusticeMediationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.justice.mediation.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 调解申请进度查询
 * Summary: 调解申请进度查询
 */
func (client *Client) QueryJusticeMediation(request *QueryJusticeMediationRequest) (_result *QueryJusticeMediationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryJusticeMediationResponse{}
	_body, _err := client.QueryJusticeMediationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 调解申请进度查询
 * Summary: 调解申请进度查询
 */
func (client *Client) QueryJusticeMediationEx(request *QueryJusticeMediationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryJusticeMediationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryJusticeMediationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.justice.mediation.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 汇裁证据要素查询接口
 * Summary: 汇裁证据要素查询接口
 */
func (client *Client) QueryJusticeCaseinfo(request *QueryJusticeCaseinfoRequest) (_result *QueryJusticeCaseinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryJusticeCaseinfoResponse{}
	_body, _err := client.QueryJusticeCaseinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 汇裁证据要素查询接口
 * Summary: 汇裁证据要素查询接口
 */
func (client *Client) QueryJusticeCaseinfoEx(request *QueryJusticeCaseinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryJusticeCaseinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryJusticeCaseinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.justice.caseinfo.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取oss文件上传路径，返回业务方oss文件上传链接和fileKey
 * Summary: 获取OSS文件上传路径
 */
func (client *Client) GetJusticeUploadfilepath(request *GetJusticeUploadfilepathRequest) (_result *GetJusticeUploadfilepathResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetJusticeUploadfilepathResponse{}
	_body, _err := client.GetJusticeUploadfilepathEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取oss文件上传路径，返回业务方oss文件上传链接和fileKey
 * Summary: 获取OSS文件上传路径
 */
func (client *Client) GetJusticeUploadfilepathEx(request *GetJusticeUploadfilepathRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetJusticeUploadfilepathResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetJusticeUploadfilepathResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.justice.uploadfilepath.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 纠纷处理平台提供回调接口供业务平台自动插入案件模型中，业务方需要调用回写接口创建案件。
 * Summary: 自动进件案件回写
 */
func (client *Client) CreateJusticeCasewriteback(request *CreateJusticeCasewritebackRequest) (_result *CreateJusticeCasewritebackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateJusticeCasewritebackResponse{}
	_body, _err := client.CreateJusticeCasewritebackEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 纠纷处理平台提供回调接口供业务平台自动插入案件模型中，业务方需要调用回写接口创建案件。
 * Summary: 自动进件案件回写
 */
func (client *Client) CreateJusticeCasewritebackEx(request *CreateJusticeCasewritebackRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateJusticeCasewritebackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateJusticeCasewritebackResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.justice.casewriteback.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 案件基础信息查询
 * Summary: 案件基础信息查询
 */
func (client *Client) QueryJusticeBasecase(request *QueryJusticeBasecaseRequest) (_result *QueryJusticeBasecaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryJusticeBasecaseResponse{}
	_body, _err := client.QueryJusticeBasecaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 案件基础信息查询
 * Summary: 案件基础信息查询
 */
func (client *Client) QueryJusticeBasecaseEx(request *QueryJusticeBasecaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryJusticeBasecaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryJusticeBasecaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.justice.basecase.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 案件材料下载
 * Summary: 案件材料下载
 */
func (client *Client) DownloadJusticeCasefile(request *DownloadJusticeCasefileRequest) (_result *DownloadJusticeCasefileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DownloadJusticeCasefileResponse{}
	_body, _err := client.DownloadJusticeCasefileEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 案件材料下载
 * Summary: 案件材料下载
 */
func (client *Client) DownloadJusticeCasefileEx(request *DownloadJusticeCasefileRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DownloadJusticeCasefileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DownloadJusticeCasefileResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.justice.casefile.download"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 开通纠纷平台使用权限
 * Summary: 开通纠纷平台使用权限
 */
func (client *Client) OpenInternalJudicial(request *OpenInternalJudicialRequest) (_result *OpenInternalJudicialResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &OpenInternalJudicialResponse{}
	_body, _err := client.OpenInternalJudicialEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 开通纠纷平台使用权限
 * Summary: 开通纠纷平台使用权限
 */
func (client *Client) OpenInternalJudicialEx(request *OpenInternalJudicialRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *OpenInternalJudicialResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &OpenInternalJudicialResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.internal.judicial.open"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 案件当事人信息保存
 * Summary: 案件当事人信息保存
 */
func (client *Client) SaveJusticeParty(request *SaveJusticePartyRequest) (_result *SaveJusticePartyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SaveJusticePartyResponse{}
	_body, _err := client.SaveJusticePartyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 案件当事人信息保存
 * Summary: 案件当事人信息保存
 */
func (client *Client) SaveJusticePartyEx(request *SaveJusticePartyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SaveJusticePartyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SaveJusticePartyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.justice.party.save"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 普通案件创建
 * Summary: 普通案件创建
 */
func (client *Client) CreateJusticeNormalcase(request *CreateJusticeNormalcaseRequest) (_result *CreateJusticeNormalcaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateJusticeNormalcaseResponse{}
	_body, _err := client.CreateJusticeNormalcaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 普通案件创建
 * Summary: 普通案件创建
 */
func (client *Client) CreateJusticeNormalcaseEx(request *CreateJusticeNormalcaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateJusticeNormalcaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateJusticeNormalcaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.justice.normalcase.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 链上案件创建
 * Summary: 链上案件创建
 */
func (client *Client) CreateJusticeChaincase(request *CreateJusticeChaincaseRequest) (_result *CreateJusticeChaincaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateJusticeChaincaseResponse{}
	_body, _err := client.CreateJusticeChaincaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 链上案件创建
 * Summary: 链上案件创建
 */
func (client *Client) CreateJusticeChaincaseEx(request *CreateJusticeChaincaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateJusticeChaincaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateJusticeChaincaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.justice.chaincase.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 案件维权发起
 * Summary: 案件维权发起
 */
func (client *Client) StartJusticeCase(request *StartJusticeCaseRequest) (_result *StartJusticeCaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartJusticeCaseResponse{}
	_body, _err := client.StartJusticeCaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 案件维权发起
 * Summary: 案件维权发起
 */
func (client *Client) StartJusticeCaseEx(request *StartJusticeCaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartJusticeCaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartJusticeCaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.justice.case.start"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 案件查询
 * Summary: 案件查询
 */
func (client *Client) QueryJusticeCase(request *QueryJusticeCaseRequest) (_result *QueryJusticeCaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryJusticeCaseResponse{}
	_body, _err := client.QueryJusticeCaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 案件查询
 * Summary: 案件查询
 */
func (client *Client) QueryJusticeCaseEx(request *QueryJusticeCaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryJusticeCaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryJusticeCaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.justice.case.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 案件事件响应
 * Summary: 案件事件响应
 */
func (client *Client) OperateJusticeEvent(request *OperateJusticeEventRequest) (_result *OperateJusticeEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &OperateJusticeEventResponse{}
	_body, _err := client.OperateJusticeEventEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 案件事件响应
 * Summary: 案件事件响应
 */
func (client *Client) OperateJusticeEventEx(request *OperateJusticeEventRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *OperateJusticeEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &OperateJusticeEventResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.justice.event.operate"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 司法解纷平台API服务，创建案件要素模板接口
 * Summary: 创建案件要素模板
 */
func (client *Client) CreateJusticeCasetemplate(request *CreateJusticeCasetemplateRequest) (_result *CreateJusticeCasetemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateJusticeCasetemplateResponse{}
	_body, _err := client.CreateJusticeCasetemplateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 司法解纷平台API服务，创建案件要素模板接口
 * Summary: 创建案件要素模板
 */
func (client *Client) CreateJusticeCasetemplateEx(request *CreateJusticeCasetemplateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateJusticeCasetemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateJusticeCasetemplateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.justice.casetemplate.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 司法解纷平台API服务，创建维权要素模板接口
 * Summary: 创建维权要素模板
 */
func (client *Client) CreateJusticeRightprotecttemplate(request *CreateJusticeRightprotecttemplateRequest) (_result *CreateJusticeRightprotecttemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateJusticeRightprotecttemplateResponse{}
	_body, _err := client.CreateJusticeRightprotecttemplateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 司法解纷平台API服务，创建维权要素模板接口
 * Summary: 创建维权要素模板
 */
func (client *Client) CreateJusticeRightprotecttemplateEx(request *CreateJusticeRightprotecttemplateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateJusticeRightprotecttemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateJusticeRightprotecttemplateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.justice.rightprotecttemplate.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取司法文件上传链接
 * Summary: 获取司法文件上传链接
 */
func (client *Client) GetJusticeFileuploadurl(request *GetJusticeFileuploadurlRequest) (_result *GetJusticeFileuploadurlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetJusticeFileuploadurlResponse{}
	_body, _err := client.GetJusticeFileuploadurlEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取司法文件上传链接
 * Summary: 获取司法文件上传链接
 */
func (client *Client) GetJusticeFileuploadurlEx(request *GetJusticeFileuploadurlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetJusticeFileuploadurlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetJusticeFileuploadurlResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.justice.fileuploadurl.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 司法解纷平台API服务，创建文书要素模板接口
 * Summary: 创建文书要素模板
 */
func (client *Client) CreateJusticeDocumenttemplate(request *CreateJusticeDocumenttemplateRequest) (_result *CreateJusticeDocumenttemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateJusticeDocumenttemplateResponse{}
	_body, _err := client.CreateJusticeDocumenttemplateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 司法解纷平台API服务，创建文书要素模板接口
 * Summary: 创建文书要素模板
 */
func (client *Client) CreateJusticeDocumenttemplateEx(request *CreateJusticeDocumenttemplateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateJusticeDocumenttemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateJusticeDocumenttemplateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.justice.documenttemplate.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 仲裁-通用版本进件要素信息查询
 * Summary: 仲裁-通用版本进件要素信息查询
 */
func (client *Client) QueryJusticeCommoncaseinfo(request *QueryJusticeCommoncaseinfoRequest) (_result *QueryJusticeCommoncaseinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryJusticeCommoncaseinfoResponse{}
	_body, _err := client.QueryJusticeCommoncaseinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 仲裁-通用版本进件要素信息查询
 * Summary: 仲裁-通用版本进件要素信息查询
 */
func (client *Client) QueryJusticeCommoncaseinfoEx(request *QueryJusticeCommoncaseinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryJusticeCommoncaseinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryJusticeCommoncaseinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.justice.commoncaseinfo.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 1级商户为2级商户进件
 * Summary: 代理二级商户进件
 */
func (client *Client) CreateJusticeAgentcase(request *CreateJusticeAgentcaseRequest) (_result *CreateJusticeAgentcaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateJusticeAgentcaseResponse{}
	_body, _err := client.CreateJusticeAgentcaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 1级商户为2级商户进件
 * Summary: 代理二级商户进件
 */
func (client *Client) CreateJusticeAgentcaseEx(request *CreateJusticeAgentcaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateJusticeAgentcaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateJusticeAgentcaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.justice.agentcase.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: isv机构-案件要素查询
 * Summary: isv机构-案件要素查询
 */
func (client *Client) QueryJusticeRights(request *QueryJusticeRightsRequest) (_result *QueryJusticeRightsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryJusticeRightsResponse{}
	_body, _err := client.QueryJusticeRightsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: isv机构-案件要素查询
 * Summary: isv机构-案件要素查询
 */
func (client *Client) QueryJusticeRightsEx(request *QueryJusticeRightsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryJusticeRightsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryJusticeRightsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.justice.rights.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: isv机构-维权状态更新
 * Summary: isv机构-维权状态更新
 */
func (client *Client) UpdateJusticeRights(request *UpdateJusticeRightsRequest) (_result *UpdateJusticeRightsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateJusticeRightsResponse{}
	_body, _err := client.UpdateJusticeRightsEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: isv机构-维权状态更新
 * Summary: isv机构-维权状态更新
 */
func (client *Client) UpdateJusticeRightsEx(request *UpdateJusticeRightsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateJusticeRightsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateJusticeRightsResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.justice.rights.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: isv机构-案件缴费通知接口
 * Summary: isv机构-案件缴费通知接口
 */
func (client *Client) NotifyJusticeRightspayment(request *NotifyJusticeRightspaymentRequest) (_result *NotifyJusticeRightspaymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &NotifyJusticeRightspaymentResponse{}
	_body, _err := client.NotifyJusticeRightspaymentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: isv机构-案件缴费通知接口
 * Summary: isv机构-案件缴费通知接口
 */
func (client *Client) NotifyJusticeRightspaymentEx(request *NotifyJusticeRightspaymentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *NotifyJusticeRightspaymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &NotifyJusticeRightspaymentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.justice.rightspayment.notify"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资服务平台上传商品类别信息
 * Summary: 融资服务平台上传商品类别信息
 */
func (client *Client) CreateLeaseProductinfo(request *CreateLeaseProductinfoRequest) (_result *CreateLeaseProductinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseProductinfoResponse{}
	_body, _err := client.CreateLeaseProductinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资服务平台上传商品类别信息
 * Summary: 融资服务平台上传商品类别信息
 */
func (client *Client) CreateLeaseProductinfoEx(request *CreateLeaseProductinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseProductinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseProductinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.productinfo.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 升级融资租赁合约
 * Summary: 升级融资租赁合约
 */
func (client *Client) UpdateLeaseContract(request *UpdateLeaseContractRequest) (_result *UpdateLeaseContractResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateLeaseContractResponse{}
	_body, _err := client.UpdateLeaseContractEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 升级融资租赁合约
 * Summary: 升级融资租赁合约
 */
func (client *Client) UpdateLeaseContractEx(request *UpdateLeaseContractRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateLeaseContractResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateLeaseContractResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.contract.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 租赁平台isv模式代理商户入驻
 * Summary: 租赁平台isv模式代理商户入驻
 */
func (client *Client) CreateLeaseAssetagentregister(request *CreateLeaseAssetagentregisterRequest) (_result *CreateLeaseAssetagentregisterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseAssetagentregisterResponse{}
	_body, _err := client.CreateLeaseAssetagentregisterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 租赁平台isv模式代理商户入驻
 * Summary: 租赁平台isv模式代理商户入驻
 */
func (client *Client) CreateLeaseAssetagentregisterEx(request *CreateLeaseAssetagentregisterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseAssetagentregisterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseAssetagentregisterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.assetagentregister.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资租赁商品信息查询接口
 * Summary: 融资租赁商品信息查询接口
 */
func (client *Client) QueryLeaseProductinfo(request *QueryLeaseProductinfoRequest) (_result *QueryLeaseProductinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseProductinfoResponse{}
	_body, _err := client.QueryLeaseProductinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资租赁商品信息查询接口
 * Summary: 融资租赁商品信息查询接口
 */
func (client *Client) QueryLeaseProductinfoEx(request *QueryLeaseProductinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseProductinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseProductinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.productinfo.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 同步采购平台订单状态
 * Summary: 同步采购平台订单状态
 */
func (client *Client) SyncLeaseSupplierorderstatus(request *SyncLeaseSupplierorderstatusRequest) (_result *SyncLeaseSupplierorderstatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SyncLeaseSupplierorderstatusResponse{}
	_body, _err := client.SyncLeaseSupplierorderstatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 同步采购平台订单状态
 * Summary: 同步采购平台订单状态
 */
func (client *Client) SyncLeaseSupplierorderstatusEx(request *SyncLeaseSupplierorderstatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SyncLeaseSupplierorderstatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SyncLeaseSupplierorderstatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.supplierorderstatus.sync"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 采购供应商初始化
 * Summary: 采购供应商初始化
 */
func (client *Client) InitLeaseSupplier(request *InitLeaseSupplierRequest) (_result *InitLeaseSupplierResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InitLeaseSupplierResponse{}
	_body, _err := client.InitLeaseSupplierEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 采购供应商初始化
 * Summary: 采购供应商初始化
 */
func (client *Client) InitLeaseSupplierEx(request *InitLeaseSupplierRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InitLeaseSupplierResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InitLeaseSupplierResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.supplier.init"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 租赁订单接收采购平台的采购状态信息，完成采购流程
 * Summary: 租赁订单接收采购状态信息，完成采购流程
 */
func (client *Client) FinishLeaseSupplierstatus(request *FinishLeaseSupplierstatusRequest) (_result *FinishLeaseSupplierstatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &FinishLeaseSupplierstatusResponse{}
	_body, _err := client.FinishLeaseSupplierstatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 租赁订单接收采购平台的采购状态信息，完成采购流程
 * Summary: 租赁订单接收采购状态信息，完成采购流程
 */
func (client *Client) FinishLeaseSupplierstatusEx(request *FinishLeaseSupplierstatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *FinishLeaseSupplierstatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &FinishLeaseSupplierstatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.supplierstatus.finish"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 采购商品初始化
 * Summary: 采购商品初始化
 */
func (client *Client) CreateLeaseSupplierproduct(request *CreateLeaseSupplierproductRequest) (_result *CreateLeaseSupplierproductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseSupplierproductResponse{}
	_body, _err := client.CreateLeaseSupplierproductEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 采购商品初始化
 * Summary: 采购商品初始化
 */
func (client *Client) CreateLeaseSupplierproductEx(request *CreateLeaseSupplierproductRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseSupplierproductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseSupplierproductResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.supplierproduct.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 链上采购申请
 * Summary: 链上采购申请
 */
func (client *Client) ApplyLeaseSupplierorder(request *ApplyLeaseSupplierorderRequest) (_result *ApplyLeaseSupplierorderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyLeaseSupplierorderResponse{}
	_body, _err := client.ApplyLeaseSupplierorderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 链上采购申请
 * Summary: 链上采购申请
 */
func (client *Client) ApplyLeaseSupplierorderEx(request *ApplyLeaseSupplierorderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyLeaseSupplierorderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyLeaseSupplierorderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.supplierorder.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建融资租赁提前还款人脸认证信息
 * Summary: 创建融资租赁提前还款人脸认证信息
 */
func (client *Client) CreateLeaseFinancecertify(request *CreateLeaseFinancecertifyRequest) (_result *CreateLeaseFinancecertifyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseFinancecertifyResponse{}
	_body, _err := client.CreateLeaseFinancecertifyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建融资租赁提前还款人脸认证信息
 * Summary: 创建融资租赁提前还款人脸认证信息
 */
func (client *Client) CreateLeaseFinancecertifyEx(request *CreateLeaseFinancecertifyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseFinancecertifyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseFinancecertifyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.financecertify.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资租赁提前还款人脸识别核验
 * Summary: 融资租赁提前还款人脸识别核验
 */
func (client *Client) QueryLeaseFinancecertify(request *QueryLeaseFinancecertifyRequest) (_result *QueryLeaseFinancecertifyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseFinancecertifyResponse{}
	_body, _err := client.QueryLeaseFinancecertifyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资租赁提前还款人脸识别核验
 * Summary: 融资租赁提前还款人脸识别核验
 */
func (client *Client) QueryLeaseFinancecertifyEx(request *QueryLeaseFinancecertifyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseFinancecertifyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseFinancecertifyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.financecertify.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询融资租赁合约内核验结果
 * Summary: 查询融资租赁合约内核验结果
 */
func (client *Client) QueryLeaseFinancecertifyincontract(request *QueryLeaseFinancecertifyincontractRequest) (_result *QueryLeaseFinancecertifyincontractResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseFinancecertifyincontractResponse{}
	_body, _err := client.QueryLeaseFinancecertifyincontractEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询融资租赁合约内核验结果
 * Summary: 查询融资租赁合约内核验结果
 */
func (client *Client) QueryLeaseFinancecertifyincontractEx(request *QueryLeaseFinancecertifyincontractRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseFinancecertifyincontractResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseFinancecertifyincontractResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.financecertifyincontract.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资租赁用户信息查询
 * Summary: 融资租赁用户信息查询
 */
func (client *Client) QueryLeaseUser(request *QueryLeaseUserRequest) (_result *QueryLeaseUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseUserResponse{}
	_body, _err := client.QueryLeaseUserEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资租赁用户信息查询
 * Summary: 融资租赁用户信息查询
 */
func (client *Client) QueryLeaseUserEx(request *QueryLeaseUserRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseUserResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.user.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资租赁订单详情查询
 * Summary: 融资租赁订单详情查询
 */
func (client *Client) QueryLeaseOrderdetailinfo(request *QueryLeaseOrderdetailinfoRequest) (_result *QueryLeaseOrderdetailinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseOrderdetailinfoResponse{}
	_body, _err := client.QueryLeaseOrderdetailinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资租赁订单详情查询
 * Summary: 融资租赁订单详情查询
 */
func (client *Client) QueryLeaseOrderdetailinfoEx(request *QueryLeaseOrderdetailinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseOrderdetailinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseOrderdetailinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.orderdetailinfo.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资租赁租赁机构承诺查询
 * Summary: 融资租赁租赁机构承诺查询
 */
func (client *Client) QueryLeaseLeasepromise(request *QueryLeaseLeasepromiseRequest) (_result *QueryLeaseLeasepromiseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseLeasepromiseResponse{}
	_body, _err := client.QueryLeaseLeasepromiseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资租赁租赁机构承诺查询
 * Summary: 融资租赁租赁机构承诺查询
 */
func (client *Client) QueryLeaseLeasepromiseEx(request *QueryLeaseLeasepromiseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseLeasepromiseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseLeasepromiseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.leasepromise.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资租赁资方承诺查询
 * Summary: 融资租赁资方承诺查询
 */
func (client *Client) QueryLeaseCreditpromise(request *QueryLeaseCreditpromiseRequest) (_result *QueryLeaseCreditpromiseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseCreditpromiseResponse{}
	_body, _err := client.QueryLeaseCreditpromiseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资租赁资方承诺查询
 * Summary: 融资租赁资方承诺查询
 */
func (client *Client) QueryLeaseCreditpromiseEx(request *QueryLeaseCreditpromiseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseCreditpromiseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseCreditpromiseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.creditpromise.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资租赁订单清分信息查询
 * Summary: 融资租赁订单清分信息查询
 */
func (client *Client) QueryLeaseClearing(request *QueryLeaseClearingRequest) (_result *QueryLeaseClearingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseClearingResponse{}
	_body, _err := client.QueryLeaseClearingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资租赁订单清分信息查询
 * Summary: 融资租赁订单清分信息查询
 */
func (client *Client) QueryLeaseClearingEx(request *QueryLeaseClearingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseClearingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseClearingResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.clearing.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资租赁用户侧还款信息
 * Summary: 融资租赁用户侧还款信息
 */
func (client *Client) QueryLeaseRentalinfo(request *QueryLeaseRentalinfoRequest) (_result *QueryLeaseRentalinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseRentalinfoResponse{}
	_body, _err := client.QueryLeaseRentalinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资租赁用户侧还款信息
 * Summary: 融资租赁用户侧还款信息
 */
func (client *Client) QueryLeaseRentalinfoEx(request *QueryLeaseRentalinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseRentalinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseRentalinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.rentalinfo.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资租赁资方还款信息查询
 * Summary: 融资租赁资方还款信息查询
 */
func (client *Client) QueryLeaseRepayment(request *QueryLeaseRepaymentRequest) (_result *QueryLeaseRepaymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseRepaymentResponse{}
	_body, _err := client.QueryLeaseRepaymentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资租赁资方还款信息查询
 * Summary: 融资租赁资方还款信息查询
 */
func (client *Client) QueryLeaseRepaymentEx(request *QueryLeaseRepaymentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseRepaymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseRepaymentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.repayment.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询订单商品信息
 * Summary: 查询订单商品信息
 */
func (client *Client) QueryLeaseOrderproduct(request *QueryLeaseOrderproductRequest) (_result *QueryLeaseOrderproductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseOrderproductResponse{}
	_body, _err := client.QueryLeaseOrderproductEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询订单商品信息
 * Summary: 查询订单商品信息
 */
func (client *Client) QueryLeaseOrderproductEx(request *QueryLeaseOrderproductRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseOrderproductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseOrderproductResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.orderproduct.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资租赁查询资金方信息
 * Summary: 融资租赁查询资金方信息
 */
func (client *Client) QueryLeaseFinancecredit(request *QueryLeaseFinancecreditRequest) (_result *QueryLeaseFinancecreditResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseFinancecreditResponse{}
	_body, _err := client.QueryLeaseFinancecreditEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资租赁查询资金方信息
 * Summary: 融资租赁查询资金方信息
 */
func (client *Client) QueryLeaseFinancecreditEx(request *QueryLeaseFinancecreditRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseFinancecreditResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseFinancecreditResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.financecredit.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据资产包id分页查询再融资订单id
 * Summary: 分页查询再融资订单id
 */
func (client *Client) QueryRefinanceOrderid(request *QueryRefinanceOrderidRequest) (_result *QueryRefinanceOrderidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRefinanceOrderidResponse{}
	_body, _err := client.QueryRefinanceOrderidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据资产包id分页查询再融资订单id
 * Summary: 分页查询再融资订单id
 */
func (client *Client) QueryRefinanceOrderidEx(request *QueryRefinanceOrderidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRefinanceOrderidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRefinanceOrderidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.refinance.orderid.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 资产明细查询
 * Summary: 资产明细
 */
func (client *Client) QueryRefinanceOrder(request *QueryRefinanceOrderRequest) (_result *QueryRefinanceOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRefinanceOrderResponse{}
	_body, _err := client.QueryRefinanceOrderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 资产明细查询
 * Summary: 资产明细
 */
func (client *Client) QueryRefinanceOrderEx(request *QueryRefinanceOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRefinanceOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRefinanceOrderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.refinance.order.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 再融资的商品信息查询
 * Summary: 再融资的商品信息查询
 */
func (client *Client) QueryRefinanceProduct(request *QueryRefinanceProductRequest) (_result *QueryRefinanceProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRefinanceProductResponse{}
	_body, _err := client.QueryRefinanceProductEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 再融资的商品信息查询
 * Summary: 再融资的商品信息查询
 */
func (client *Client) QueryRefinanceProductEx(request *QueryRefinanceProductRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRefinanceProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRefinanceProductResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.refinance.product.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 资产包的受让/驳回资产包
 * Summary: 资产包的受让/驳回资产包
 */
func (client *Client) VerifyRefinancePackage(request *VerifyRefinancePackageRequest) (_result *VerifyRefinancePackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &VerifyRefinancePackageResponse{}
	_body, _err := client.VerifyRefinancePackageEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 资产包的受让/驳回资产包
 * Summary: 资产包的受让/驳回资产包
 */
func (client *Client) VerifyRefinancePackageEx(request *VerifyRefinancePackageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *VerifyRefinancePackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &VerifyRefinancePackageResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.refinance.package.verify"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资租赁查询清分信息
 * Summary: 融资租赁查询清分信息
 */
func (client *Client) QueryLeaseOrderclearing(request *QueryLeaseOrderclearingRequest) (_result *QueryLeaseOrderclearingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseOrderclearingResponse{}
	_body, _err := client.QueryLeaseOrderclearingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资租赁查询清分信息
 * Summary: 融资租赁查询清分信息
 */
func (client *Client) QueryLeaseOrderclearingEx(request *QueryLeaseOrderclearingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseOrderclearingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseOrderclearingResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.orderclearing.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资租赁提前还款详情查询
 * Summary: 融资租赁提前还款详情查询
 */
func (client *Client) QueryLeaseRepaymentstatus(request *QueryLeaseRepaymentstatusRequest) (_result *QueryLeaseRepaymentstatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseRepaymentstatusResponse{}
	_body, _err := client.QueryLeaseRepaymentstatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资租赁提前还款详情查询
 * Summary: 融资租赁提前还款详情查询
 */
func (client *Client) QueryLeaseRepaymentstatusEx(request *QueryLeaseRepaymentstatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseRepaymentstatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseRepaymentstatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.repaymentstatus.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 续租过程中，当前资方希望查询用户历史的履约表现
 * Summary: 核验链上用户的履约情况
 */
func (client *Client) QueryLeaseUserperformance(request *QueryLeaseUserperformanceRequest) (_result *QueryLeaseUserperformanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseUserperformanceResponse{}
	_body, _err := client.QueryLeaseUserperformanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 续租过程中，当前资方希望查询用户历史的履约表现
 * Summary: 核验链上用户的履约情况
 */
func (client *Client) QueryLeaseUserperformanceEx(request *QueryLeaseUserperformanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseUserperformanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseUserperformanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.userperformance.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 履约流水核验查询
 * Summary: 履约流水核验查询
 */
func (client *Client) QueryLeaseRentalverify(request *QueryLeaseRentalverifyRequest) (_result *QueryLeaseRentalverifyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseRentalverifyResponse{}
	_body, _err := client.QueryLeaseRentalverifyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 履约流水核验查询
 * Summary: 履约流水核验查询
 */
func (client *Client) QueryLeaseRentalverifyEx(request *QueryLeaseRentalverifyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseRentalverifyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseRentalverifyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.rentalverify.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 分期查询用户归还记录 资方还款 清分信息
 * Summary: 分期查询用户归还记录 资方还款 清分信息
 */
func (client *Client) QueryLeaseInstallment(request *QueryLeaseInstallmentRequest) (_result *QueryLeaseInstallmentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseInstallmentResponse{}
	_body, _err := client.QueryLeaseInstallmentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 分期查询用户归还记录 资方还款 清分信息
 * Summary: 分期查询用户归还记录 资方还款 清分信息
 */
func (client *Client) QueryLeaseInstallmentEx(request *QueryLeaseInstallmentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseInstallmentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseInstallmentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.installment.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 租赁保险退保接口
 * Summary: 租赁保险退保
 */
func (client *Client) CancelLeaseInsurance(request *CancelLeaseInsuranceRequest) (_result *CancelLeaseInsuranceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelLeaseInsuranceResponse{}
	_body, _err := client.CancelLeaseInsuranceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 租赁保险退保接口
 * Summary: 租赁保险退保
 */
func (client *Client) CancelLeaseInsuranceEx(request *CancelLeaseInsuranceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelLeaseInsuranceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelLeaseInsuranceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.insurance.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 二级资方调用，通过此接口将资产包中的无效或者有效资产推送至租赁平台
 * Summary: 再融资资产推送
 */
func (client *Client) PushRefinanceInvalidorder(request *PushRefinanceInvalidorderRequest) (_result *PushRefinanceInvalidorderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PushRefinanceInvalidorderResponse{}
	_body, _err := client.PushRefinanceInvalidorderEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 二级资方调用，通过此接口将资产包中的无效或者有效资产推送至租赁平台
 * Summary: 再融资资产推送
 */
func (client *Client) PushRefinanceInvalidorderEx(request *PushRefinanceInvalidorderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PushRefinanceInvalidorderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PushRefinanceInvalidorderResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.refinance.invalidorder.push"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 蚂蚁链租赁的风控
 * Summary: 蚂蚁链租赁的风控
 */
func (client *Client) CreateLeaseRisk(request *CreateLeaseRiskRequest) (_result *CreateLeaseRiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseRiskResponse{}
	_body, _err := client.CreateLeaseRiskEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 蚂蚁链租赁的风控
 * Summary: 蚂蚁链租赁的风控
 */
func (client *Client) CreateLeaseRiskEx(request *CreateLeaseRiskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseRiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseRiskResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.risk.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资平台上传租赁物购买贷款订单信息，此接口为异步接口，上链结果需调用查询接口来查
 * Summary: 上传租赁物购买贷款订单信息（异步）
 */
func (client *Client) CreateLeaseAsyncverifyinfo(request *CreateLeaseAsyncverifyinfoRequest) (_result *CreateLeaseAsyncverifyinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseAsyncverifyinfoResponse{}
	_body, _err := client.CreateLeaseAsyncverifyinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资平台上传租赁物购买贷款订单信息，此接口为异步接口，上链结果需调用查询接口来查
 * Summary: 上传租赁物购买贷款订单信息（异步）
 */
func (client *Client) CreateLeaseAsyncverifyinfoEx(request *CreateLeaseAsyncverifyinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseAsyncverifyinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseAsyncverifyinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.asyncverifyinfo.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资方上传承诺信息，此接口异步上合约，合约调用结果需调用查询接口
 * Summary: 融资方上传承诺信息(异步)
 */
func (client *Client) CreateLeaseAsynccreditpromise(request *CreateLeaseAsynccreditpromiseRequest) (_result *CreateLeaseAsynccreditpromiseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseAsynccreditpromiseResponse{}
	_body, _err := client.CreateLeaseAsynccreditpromiseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资方上传承诺信息，此接口异步上合约，合约调用结果需调用查询接口
 * Summary: 融资方上传承诺信息(异步)
 */
func (client *Client) CreateLeaseAsynccreditpromiseEx(request *CreateLeaseAsynccreditpromiseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseAsynccreditpromiseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseAsynccreditpromiseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.asynccreditpromise.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 清分服务机构上传资金清算记录，分期上传。异步上链，上链结果需要调用查询接口。
 * Summary: 清分服务机构上传资金清算记录，分期
 */
func (client *Client) CreateLeaseAsyncclearing(request *CreateLeaseAsyncclearingRequest) (_result *CreateLeaseAsyncclearingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseAsyncclearingResponse{}
	_body, _err := client.CreateLeaseAsyncclearingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 清分服务机构上传资金清算记录，分期上传。异步上链，上链结果需要调用查询接口。
 * Summary: 清分服务机构上传资金清算记录，分期
 */
func (client *Client) CreateLeaseAsyncclearingEx(request *CreateLeaseAsyncclearingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseAsyncclearingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseAsyncclearingResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.asyncclearing.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资金融机构上传还款信息 每期。异步上链，上链结果需要调用查询接口
 * Summary: 融资金融机构上传还款信息 每期
 */
func (client *Client) CreateLeaseAsyncrepayment(request *CreateLeaseAsyncrepaymentRequest) (_result *CreateLeaseAsyncrepaymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseAsyncrepaymentResponse{}
	_body, _err := client.CreateLeaseAsyncrepaymentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资金融机构上传还款信息 每期。异步上链，上链结果需要调用查询接口
 * Summary: 融资金融机构上传还款信息 每期
 */
func (client *Client) CreateLeaseAsyncrepaymentEx(request *CreateLeaseAsyncrepaymentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseAsyncrepaymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseAsyncrepaymentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.asyncrepayment.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资平台审核订单信息，异步上链，上链结果可调用查询接口
 * Summary: 融资平台审核订单信息
 */
func (client *Client) CreateLeaseAsyncaudit(request *CreateLeaseAsyncauditRequest) (_result *CreateLeaseAsyncauditResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseAsyncauditResponse{}
	_body, _err := client.CreateLeaseAsyncauditEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资平台审核订单信息，异步上链，上链结果可调用查询接口
 * Summary: 融资平台审核订单信息
 */
func (client *Client) CreateLeaseAsyncauditEx(request *CreateLeaseAsyncauditRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseAsyncauditResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseAsyncauditResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.asyncaudit.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 租赁平台上传付款通知信息，异步上链，上链结果可调用查询接口
 * Summary: 租赁平台上传付款通知信息
 */
func (client *Client) CreateLeaseAsyncpaymentfile(request *CreateLeaseAsyncpaymentfileRequest) (_result *CreateLeaseAsyncpaymentfileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseAsyncpaymentfileResponse{}
	_body, _err := client.CreateLeaseAsyncpaymentfileEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 租赁平台上传付款通知信息，异步上链，上链结果可调用查询接口
 * Summary: 租赁平台上传付款通知信息
 */
func (client *Client) CreateLeaseAsyncpaymentfileEx(request *CreateLeaseAsyncpaymentfileRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseAsyncpaymentfileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseAsyncpaymentfileResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.asyncpaymentfile.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询用户等加密信息，返回加密后的结果，用户自己进行解密。此接口为异步查询接口，建议间隔一段时间后再次查询获取结果
 * Summary: 查询用户等加密信息
 */
func (client *Client) QueryLeaseAsyncencryptedinfo(request *QueryLeaseAsyncencryptedinfoRequest) (_result *QueryLeaseAsyncencryptedinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseAsyncencryptedinfoResponse{}
	_body, _err := client.QueryLeaseAsyncencryptedinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询用户等加密信息，返回加密后的结果，用户自己进行解密。此接口为异步查询接口，建议间隔一段时间后再次查询获取结果
 * Summary: 查询用户等加密信息
 */
func (client *Client) QueryLeaseAsyncencryptedinfoEx(request *QueryLeaseAsyncencryptedinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseAsyncencryptedinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseAsyncencryptedinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.asyncencryptedinfo.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 租赁异步调用上链结果回查
 * Summary: 租赁异步调用上链结果回查
 */
func (client *Client) QueryLeaseAsynccall(request *QueryLeaseAsynccallRequest) (_result *QueryLeaseAsynccallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseAsynccallResponse{}
	_body, _err := client.QueryLeaseAsynccallEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 租赁异步调用上链结果回查
 * Summary: 租赁异步调用上链结果回查
 */
func (client *Client) QueryLeaseAsynccallEx(request *QueryLeaseAsynccallRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseAsynccallResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseAsynccallResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.asynccall.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建签署见证流程
 * Summary: 创建见证流程
 */
func (client *Client) CreateWitnessFlow(request *CreateWitnessFlowRequest) (_result *CreateWitnessFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateWitnessFlowResponse{}
	_body, _err := client.CreateWitnessFlowEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建签署见证流程
 * Summary: 创建见证流程
 */
func (client *Client) CreateWitnessFlowEx(request *CreateWitnessFlowRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateWitnessFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateWitnessFlowResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.witness.flow.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 保存见证流程快照数据
 * Summary: 保存见证流程快照数据
 */
func (client *Client) SaveWitnessSnapshot(request *SaveWitnessSnapshotRequest) (_result *SaveWitnessSnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SaveWitnessSnapshotResponse{}
	_body, _err := client.SaveWitnessSnapshotEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 保存见证流程快照数据
 * Summary: 保存见证流程快照数据
 */
func (client *Client) SaveWitnessSnapshotEx(request *SaveWitnessSnapshotRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SaveWitnessSnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SaveWitnessSnapshotResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.witness.snapshot.save"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 见证流程签署权限校验
 * Summary: 见证流程签署权限校验
 */
func (client *Client) CheckWitnessSignaccess(request *CheckWitnessSignaccessRequest) (_result *CheckWitnessSignaccessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckWitnessSignaccessResponse{}
	_body, _err := client.CheckWitnessSignaccessEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 见证流程签署权限校验
 * Summary: 见证流程签署权限校验
 */
func (client *Client) CheckWitnessSignaccessEx(request *CheckWitnessSignaccessRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckWitnessSignaccessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckWitnessSignaccessResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.witness.signaccess.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 见证流程签署
 * Summary: 见证流程签署
 */
func (client *Client) AuthWitnessFlow(request *AuthWitnessFlowRequest) (_result *AuthWitnessFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AuthWitnessFlowResponse{}
	_body, _err := client.AuthWitnessFlowEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 见证流程签署
 * Summary: 见证流程签署
 */
func (client *Client) AuthWitnessFlowEx(request *AuthWitnessFlowRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AuthWitnessFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AuthWitnessFlowResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.witness.flow.auth"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 见证流程签署确认
 * Summary: 见证流程签署确认
 */
func (client *Client) ConfirmWitnessFlow(request *ConfirmWitnessFlowRequest) (_result *ConfirmWitnessFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmWitnessFlowResponse{}
	_body, _err := client.ConfirmWitnessFlowEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 见证流程签署确认
 * Summary: 见证流程签署确认
 */
func (client *Client) ConfirmWitnessFlowEx(request *ConfirmWitnessFlowRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmWitnessFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConfirmWitnessFlowResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.witness.flow.confirm"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取存证事务ID
 * Summary: 获取存证事务ID
 */
func (client *Client) CreateTrans(request *CreateTransRequest) (_result *CreateTransResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateTransResponse{}
	_body, _err := client.CreateTransEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取存证事务ID
 * Summary: 获取存证事务ID
 */
func (client *Client) CreateTransEx(request *CreateTransRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateTransResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateTransResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.trans.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 通过存证事务Token，获取事务中所有的存证信息
 * Summary: 获取事务中所有的存证信息
 */
func (client *Client) GetTrans(request *GetTransRequest) (_result *GetTransResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetTransResponse{}
	_body, _err := client.GetTransEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 通过存证事务Token，获取事务中所有的存证信息
 * Summary: 获取事务中所有的存证信息
 */
func (client *Client) GetTransEx(request *GetTransRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetTransResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetTransResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.trans.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发起文本存证，将文本内容存证上链
 * Summary: 文本存证，将文本内容存证上链
 */
func (client *Client) CreateText(request *CreateTextRequest) (_result *CreateTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateTextResponse{}
	_body, _err := client.CreateTextEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发起文本存证，将文本内容存证上链
 * Summary: 文本存证，将文本内容存证上链
 */
func (client *Client) CreateTextEx(request *CreateTextRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateTextResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.text.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户通过交易哈希获取自己上传的文本存证内容
 * Summary: 获取文本存证内容
 */
func (client *Client) GetText(request *GetTextRequest) (_result *GetTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetTextResponse{}
	_body, _err := client.GetTextEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户通过交易哈希获取自己上传的文本存证内容
 * Summary: 获取文本存证内容
 */
func (client *Client) GetTextEx(request *GetTextRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetTextResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.text.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发起文件存证，将文件内容存证上链
 * Summary: 文件内容存证上链
 */
func (client *Client) CreateFile(request *CreateFileRequest) (_result *CreateFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateFileResponse{}
	_body, _err := client.CreateFileEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发起文件存证，将文件内容存证上链
 * Summary: 文件内容存证上链
 */
func (client *Client) CreateFileEx(request *CreateFileRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateFileResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.file.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户通过交易哈希获取自己上传的文件存证oss下载地址
 * Summary: 获取文件存证oss下载地址
 */
func (client *Client) GetFile(request *GetFileRequest) (_result *GetFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetFileResponse{}
	_body, _err := client.GetFileEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户通过交易哈希获取自己上传的文件存证oss下载地址
 * Summary: 获取文件存证oss下载地址
 */
func (client *Client) GetFileEx(request *GetFileRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetFileResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.file.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发起原文存证，将原文内容存证上链
 * Summary: 原文内容存证
 */
func (client *Client) CreateSource(request *CreateSourceRequest) (_result *CreateSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSourceResponse{}
	_body, _err := client.CreateSourceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发起原文存证，将原文内容存证上链
 * Summary: 原文内容存证
 */
func (client *Client) CreateSourceEx(request *CreateSourceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSourceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.source.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户通过交易哈希获取自己上传的原文存证oss下载地址
 * Summary: 获取原文存证oss下载地址
 */
func (client *Client) GetSource(request *GetSourceRequest) (_result *GetSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSourceResponse{}
	_body, _err := client.GetSourceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户通过交易哈希获取自己上传的原文存证oss下载地址
 * Summary: 获取原文存证oss下载地址
 */
func (client *Client) GetSourceEx(request *GetSourceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSourceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.source.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建存证后，使用存证凭据核验存证状态。
 * Summary: 存证内容核验
 */
func (client *Client) CheckStatus(request *CheckStatusRequest) (_result *CheckStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckStatusResponse{}
	_body, _err := client.CheckStatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建存证后，使用存证凭据核验存证状态。
 * Summary: 存证内容核验
 */
func (client *Client) CheckStatusEx(request *CheckStatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckStatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.status.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资服务平台部署合约
 * Summary: 融资服务平台部署合约
 */
func (client *Client) DeployLeaseContract(request *DeployLeaseContractRequest) (_result *DeployLeaseContractResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeployLeaseContractResponse{}
	_body, _err := client.DeployLeaseContractEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资服务平台部署合约
 * Summary: 融资服务平台部署合约
 */
func (client *Client) DeployLeaseContractEx(request *DeployLeaseContractRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeployLeaseContractResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeployLeaseContractResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.contract.deploy"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 租赁服务平台授权融资服务平台
 * Summary: 租赁服务平台授权融资服务平台
 */
func (client *Client) AuthLeaseContract(request *AuthLeaseContractRequest) (_result *AuthLeaseContractResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AuthLeaseContractResponse{}
	_body, _err := client.AuthLeaseContractEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 租赁服务平台授权融资服务平台
 * Summary: 租赁服务平台授权融资服务平台
 */
func (client *Client) AuthLeaseContractEx(request *AuthLeaseContractRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AuthLeaseContractResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AuthLeaseContractResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.contract.auth"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 租赁服务平台上传用户信息
 * Summary: 租赁服务平台上传用户信息
 */
func (client *Client) CreateLeaseUserinfo(request *CreateLeaseUserinfoRequest) (_result *CreateLeaseUserinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseUserinfoResponse{}
	_body, _err := client.CreateLeaseUserinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 租赁服务平台上传用户信息
 * Summary: 租赁服务平台上传用户信息
 */
func (client *Client) CreateLeaseUserinfoEx(request *CreateLeaseUserinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseUserinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseUserinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.userinfo.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 租赁服务平台上传订单产品/服务信息
 * Summary: 租赁服务平台上传订单产品/服务信息
 */
func (client *Client) CreateLeaseOrderinfo(request *CreateLeaseOrderinfoRequest) (_result *CreateLeaseOrderinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseOrderinfoResponse{}
	_body, _err := client.CreateLeaseOrderinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 租赁服务平台上传订单产品/服务信息
 * Summary: 租赁服务平台上传订单产品/服务信息
 */
func (client *Client) CreateLeaseOrderinfoEx(request *CreateLeaseOrderinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseOrderinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseOrderinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.orderinfo.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 租赁服务平台上传承诺信息
 * Summary: 租赁服务平台上传承诺信息
 */
func (client *Client) CreateLeasePromise(request *CreateLeasePromiseRequest) (_result *CreateLeasePromiseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeasePromiseResponse{}
	_body, _err := client.CreateLeasePromiseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 租赁服务平台上传承诺信息
 * Summary: 租赁服务平台上传承诺信息
 */
func (client *Client) CreateLeasePromiseEx(request *CreateLeasePromiseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeasePromiseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeasePromiseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.promise.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资平台上传租赁物购买贷款订单信息
 * Summary: 融资平台上传租赁物购买贷款订单信息
 */
func (client *Client) CreateLeaseVerifyinfo(request *CreateLeaseVerifyinfoRequest) (_result *CreateLeaseVerifyinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseVerifyinfoResponse{}
	_body, _err := client.CreateLeaseVerifyinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资平台上传租赁物购买贷款订单信息
 * Summary: 融资平台上传租赁物购买贷款订单信息
 */
func (client *Client) CreateLeaseVerifyinfoEx(request *CreateLeaseVerifyinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseVerifyinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseVerifyinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.verifyinfo.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资方上传承诺信息
 * Summary: 融资方上传承诺信息
 */
func (client *Client) CreateLeaseCreditpromise(request *CreateLeaseCreditpromiseRequest) (_result *CreateLeaseCreditpromiseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseCreditpromiseResponse{}
	_body, _err := client.CreateLeaseCreditpromiseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资方上传承诺信息
 * Summary: 融资方上传承诺信息
 */
func (client *Client) CreateLeaseCreditpromiseEx(request *CreateLeaseCreditpromiseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseCreditpromiseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseCreditpromiseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.creditpromise.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 租赁平台上传支用/还款信息
 * Summary: 租赁平台上传支用/还款信息
 */
func (client *Client) CreateLeaseDisburseinfo(request *CreateLeaseDisburseinfoRequest) (_result *CreateLeaseDisburseinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseDisburseinfoResponse{}
	_body, _err := client.CreateLeaseDisburseinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 租赁平台上传支用/还款信息
 * Summary: 租赁平台上传支用/还款信息
 */
func (client *Client) CreateLeaseDisburseinfoEx(request *CreateLeaseDisburseinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseDisburseinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseDisburseinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.disburseinfo.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description:  查询订单详细信息
 * Summary:  查询订单详细信息
 */
func (client *Client) QueryLeaseOrderinfo(request *QueryLeaseOrderinfoRequest) (_result *QueryLeaseOrderinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseOrderinfoResponse{}
	_body, _err := client.QueryLeaseOrderinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description:  查询订单详细信息
 * Summary:  查询订单详细信息
 */
func (client *Client) QueryLeaseOrderinfoEx(request *QueryLeaseOrderinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseOrderinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseOrderinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.orderinfo.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建金融行业标准文本存证
 * Summary: 创建金融行业文本存证
 */
func (client *Client) CreateFinanceTextnotary(request *CreateFinanceTextnotaryRequest) (_result *CreateFinanceTextnotaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateFinanceTextnotaryResponse{}
	_body, _err := client.CreateFinanceTextnotaryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建金融行业标准文本存证
 * Summary: 创建金融行业文本存证
 */
func (client *Client) CreateFinanceTextnotaryEx(request *CreateFinanceTextnotaryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateFinanceTextnotaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateFinanceTextnotaryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.finance.textnotary.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取金融行业文本存证接口描述
 * Summary: 获取金融行业文本存证
 */
func (client *Client) GetFinanceTextnotary(request *GetFinanceTextnotaryRequest) (_result *GetFinanceTextnotaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetFinanceTextnotaryResponse{}
	_body, _err := client.GetFinanceTextnotaryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取金融行业文本存证接口描述
 * Summary: 获取金融行业文本存证
 */
func (client *Client) GetFinanceTextnotaryEx(request *GetFinanceTextnotaryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetFinanceTextnotaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetFinanceTextnotaryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.finance.textnotary.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建金融行业文件存证接口描述
 * Summary: 创建金融行业文件存证
 */
func (client *Client) CreateFinanceFilenotary(request *CreateFinanceFilenotaryRequest) (_result *CreateFinanceFilenotaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateFinanceFilenotaryResponse{}
	_body, _err := client.CreateFinanceFilenotaryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建金融行业文件存证接口描述
 * Summary: 创建金融行业文件存证
 */
func (client *Client) CreateFinanceFilenotaryEx(request *CreateFinanceFilenotaryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateFinanceFilenotaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateFinanceFilenotaryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.finance.filenotary.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取金融行业文件存证接口描述
 * Summary: 获取金融行业文件存证
 */
func (client *Client) GetFinanceFilenotary(request *GetFinanceFilenotaryRequest) (_result *GetFinanceFilenotaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetFinanceFilenotaryResponse{}
	_body, _err := client.GetFinanceFilenotaryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取金融行业文件存证接口描述
 * Summary: 获取金融行业文件存证
 */
func (client *Client) GetFinanceFilenotaryEx(request *GetFinanceFilenotaryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetFinanceFilenotaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetFinanceFilenotaryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.finance.filenotary.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 统一存证核验接口
 * Summary: 统一存证核验接口（已下架）
 */
func (client *Client) CheckIndustryNotary(request *CheckIndustryNotaryRequest) (_result *CheckIndustryNotaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckIndustryNotaryResponse{}
	_body, _err := client.CheckIndustryNotaryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 统一存证核验接口
 * Summary: 统一存证核验接口（已下架）
 */
func (client *Client) CheckIndustryNotaryEx(request *CheckIndustryNotaryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckIndustryNotaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckIndustryNotaryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.industry.notary.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 违约案件信息提交服务
 * Summary: 违约案件信息提交服务
 */
func (client *Client) CreateSueBreakpromiseinfo(request *CreateSueBreakpromiseinfoRequest) (_result *CreateSueBreakpromiseinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSueBreakpromiseinfoResponse{}
	_body, _err := client.CreateSueBreakpromiseinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 违约案件信息提交服务
 * Summary: 违约案件信息提交服务
 */
func (client *Client) CreateSueBreakpromiseinfoEx(request *CreateSueBreakpromiseinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSueBreakpromiseinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSueBreakpromiseinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.sue.breakpromiseinfo.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 违约案件信息修改服务
 * Summary: 违约案件信息修改服务
 */
func (client *Client) UpdateSueBreakpromiseinfo(request *UpdateSueBreakpromiseinfoRequest) (_result *UpdateSueBreakpromiseinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSueBreakpromiseinfoResponse{}
	_body, _err := client.UpdateSueBreakpromiseinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 违约案件信息修改服务
 * Summary: 违约案件信息修改服务
 */
func (client *Client) UpdateSueBreakpromiseinfoEx(request *UpdateSueBreakpromiseinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSueBreakpromiseinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSueBreakpromiseinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.sue.breakpromiseinfo.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 违约案件信息删除服务
 * Summary: 违约案件信息删除服务
 */
func (client *Client) DeleteSueBreakpromiseinfo(request *DeleteSueBreakpromiseinfoRequest) (_result *DeleteSueBreakpromiseinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSueBreakpromiseinfoResponse{}
	_body, _err := client.DeleteSueBreakpromiseinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 违约案件信息删除服务
 * Summary: 违约案件信息删除服务
 */
func (client *Client) DeleteSueBreakpromiseinfoEx(request *DeleteSueBreakpromiseinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSueBreakpromiseinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSueBreakpromiseinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.sue.breakpromiseinfo.delete"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询惩戒信息
 * Summary: 查询惩戒信息
 */
func (client *Client) QuerySueUserinfo(request *QuerySueUserinfoRequest) (_result *QuerySueUserinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySueUserinfoResponse{}
	_body, _err := client.QuerySueUserinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询惩戒信息
 * Summary: 查询惩戒信息
 */
func (client *Client) QuerySueUserinfoEx(request *QuerySueUserinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySueUserinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySueUserinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.sue.userinfo.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 升级用户管理合约
 * Summary: 升级用户管理合约
 */
func (client *Client) UpdateSueExeplarycontract(request *UpdateSueExeplarycontractRequest) (_result *UpdateSueExeplarycontractResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSueExeplarycontractResponse{}
	_body, _err := client.UpdateSueExeplarycontractEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 升级用户管理合约
 * Summary: 升级用户管理合约
 */
func (client *Client) UpdateSueExeplarycontractEx(request *UpdateSueExeplarycontractRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSueExeplarycontractResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSueExeplarycontractResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.sue.exeplarycontract.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 回退用户管理合约
 * Summary: 回退用户管理合约
 */
func (client *Client) UpdateSueExemplaryrevert(request *UpdateSueExemplaryrevertRequest) (_result *UpdateSueExemplaryrevertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSueExemplaryrevertResponse{}
	_body, _err := client.UpdateSueExemplaryrevertEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 回退用户管理合约
 * Summary: 回退用户管理合约
 */
func (client *Client) UpdateSueExemplaryrevertEx(request *UpdateSueExemplaryrevertRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSueExemplaryrevertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSueExemplaryrevertResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.sue.exemplaryrevert.update"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资平台审核订单信息
 * Summary: 融资平台审核订单信息
 */
func (client *Client) CreateLeaseAudit(request *CreateLeaseAuditRequest) (_result *CreateLeaseAuditResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseAuditResponse{}
	_body, _err := client.CreateLeaseAuditEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资平台审核订单信息
 * Summary: 融资平台审核订单信息
 */
func (client *Client) CreateLeaseAuditEx(request *CreateLeaseAuditRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseAuditResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseAuditResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.audit.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 租赁平台上传付款通知信息
 * Summary: 租赁平台上传付款通知信息
 */
func (client *Client) CreateLeasePaymentfile(request *CreateLeasePaymentfileRequest) (_result *CreateLeasePaymentfileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeasePaymentfileResponse{}
	_body, _err := client.CreateLeasePaymentfileEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 租赁平台上传付款通知信息
 * Summary: 租赁平台上传付款通知信息
 */
func (client *Client) CreateLeasePaymentfileEx(request *CreateLeasePaymentfileRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeasePaymentfileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeasePaymentfileResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.paymentfile.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 租赁系统上传租金归还记录 分期调用
 * Summary: 租赁系统上传租金归还记录 分期调用
 */
func (client *Client) CreateLeaseRental(request *CreateLeaseRentalRequest) (_result *CreateLeaseRentalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseRentalResponse{}
	_body, _err := client.CreateLeaseRentalEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 租赁系统上传租金归还记录 分期调用
 * Summary: 租赁系统上传租金归还记录 分期调用
 */
func (client *Client) CreateLeaseRentalEx(request *CreateLeaseRentalRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseRentalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseRentalResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.rental.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 清分服务机构上传资金清算记录，分期
 * Summary: 清分服务机构上传资金清算记录，分期
 */
func (client *Client) CreateLeaseClearing(request *CreateLeaseClearingRequest) (_result *CreateLeaseClearingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseClearingResponse{}
	_body, _err := client.CreateLeaseClearingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 清分服务机构上传资金清算记录，分期
 * Summary: 清分服务机构上传资金清算记录，分期
 */
func (client *Client) CreateLeaseClearingEx(request *CreateLeaseClearingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseClearingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseClearingResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.clearing.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资金融机构上传还款信息 每期
 * Summary: 融资金融机构上传还款信息 每期
 */
func (client *Client) CreateLeaseRepayment(request *CreateLeaseRepaymentRequest) (_result *CreateLeaseRepaymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseRepaymentResponse{}
	_body, _err := client.CreateLeaseRepaymentEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资金融机构上传还款信息 每期
 * Summary: 融资金融机构上传还款信息 每期
 */
func (client *Client) CreateLeaseRepaymentEx(request *CreateLeaseRepaymentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseRepaymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseRepaymentResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.repayment.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资租赁通知系统注册
 * Summary: 融资租赁通知系统注册
 */
func (client *Client) CreateLeaseNotifyregister(request *CreateLeaseNotifyregisterRequest) (_result *CreateLeaseNotifyregisterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseNotifyregisterResponse{}
	_body, _err := client.CreateLeaseNotifyregisterEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资租赁通知系统注册
 * Summary: 融资租赁通知系统注册
 */
func (client *Client) CreateLeaseNotifyregisterEx(request *CreateLeaseNotifyregisterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseNotifyregisterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseNotifyregisterResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.notifyregister.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据imeiID查询iot设备的详情
 * Summary: 根据imeiID查询iot设备的详情
 */
func (client *Client) QueryLeaseIotinfo(request *QueryLeaseIotinfoRequest) (_result *QueryLeaseIotinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseIotinfoResponse{}
	_body, _err := client.QueryLeaseIotinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据imeiID查询iot设备的详情
 * Summary: 根据imeiID查询iot设备的详情
 */
func (client *Client) QueryLeaseIotinfoEx(request *QueryLeaseIotinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseIotinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseIotinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.iotinfo.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建法院通用文本存证
 * Summary: 法院通用文本存证创建接口
 */
func (client *Client) CreateCourtTextnotary(request *CreateCourtTextnotaryRequest) (_result *CreateCourtTextnotaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateCourtTextnotaryResponse{}
	_body, _err := client.CreateCourtTextnotaryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建法院通用文本存证
 * Summary: 法院通用文本存证创建接口
 */
func (client *Client) CreateCourtTextnotaryEx(request *CreateCourtTextnotaryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateCourtTextnotaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateCourtTextnotaryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.court.textnotary.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取法院通用文本存证
 * Summary: 法院通用文本存证获取接口
 */
func (client *Client) GetCourtTextnotary(request *GetCourtTextnotaryRequest) (_result *GetCourtTextnotaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetCourtTextnotaryResponse{}
	_body, _err := client.GetCourtTextnotaryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取法院通用文本存证
 * Summary: 法院通用文本存证获取接口
 */
func (client *Client) GetCourtTextnotaryEx(request *GetCourtTextnotaryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetCourtTextnotaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetCourtTextnotaryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.court.textnotary.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建法院通用文件存证接口
 * Summary: 法院通用文件存证创建接口
 */
func (client *Client) CreateCourtFilenotary(request *CreateCourtFilenotaryRequest) (_result *CreateCourtFilenotaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateCourtFilenotaryResponse{}
	_body, _err := client.CreateCourtFilenotaryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建法院通用文件存证接口
 * Summary: 法院通用文件存证创建接口
 */
func (client *Client) CreateCourtFilenotaryEx(request *CreateCourtFilenotaryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateCourtFilenotaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateCourtFilenotaryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.court.filenotary.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取法院通用文件存证
 * Summary: 法院通用文件存证获取接口
 */
func (client *Client) GetCourtFilenotary(request *GetCourtFilenotaryRequest) (_result *GetCourtFilenotaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetCourtFilenotaryResponse{}
	_body, _err := client.GetCourtFilenotaryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取法院通用文件存证
 * Summary: 法院通用文件存证获取接口
 */
func (client *Client) GetCourtFilenotaryEx(request *GetCourtFilenotaryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetCourtFilenotaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetCourtFilenotaryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.court.filenotary.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资租赁定制化统一入口
 * Summary: 融资租赁定制化统一入口
 */
func (client *Client) CreateLeaseRoute(request *CreateLeaseRouteRequest) (_result *CreateLeaseRouteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseRouteResponse{}
	_body, _err := client.CreateLeaseRouteEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资租赁定制化统一入口
 * Summary: 融资租赁定制化统一入口
 */
func (client *Client) CreateLeaseRouteEx(request *CreateLeaseRouteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseRouteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseRouteResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.route.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询用户等加密信息，返回加密后的结果，用户自己进行解密
 * Summary: 查询用户等加密信息
 */
func (client *Client) QueryLeaseEncryptedinfo(request *QueryLeaseEncryptedinfoRequest) (_result *QueryLeaseEncryptedinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseEncryptedinfoResponse{}
	_body, _err := client.QueryLeaseEncryptedinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询用户等加密信息，返回加密后的结果，用户自己进行解密
 * Summary: 查询用户等加密信息
 */
func (client *Client) QueryLeaseEncryptedinfoEx(request *QueryLeaseEncryptedinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseEncryptedinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseEncryptedinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.encryptedinfo.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 电子合同文本存证
 * Summary: 电子合同文本存证
 */
func (client *Client) CreateContractText(request *CreateContractTextRequest) (_result *CreateContractTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateContractTextResponse{}
	_body, _err := client.CreateContractTextEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 电子合同文本存证
 * Summary: 电子合同文本存证
 */
func (client *Client) CreateContractTextEx(request *CreateContractTextRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateContractTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateContractTextResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.text.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 全流程存证后，批量提交全流程核验信息，申请出证报告授权码。成功后可生成全流程上链报告
 * Summary: 申请电子合同存证报告
 */
func (client *Client) ApplyContractReport(request *ApplyContractReportRequest) (_result *ApplyContractReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyContractReportResponse{}
	_body, _err := client.ApplyContractReportEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 全流程存证后，批量提交全流程核验信息，申请出证报告授权码。成功后可生成全流程上链报告
 * Summary: 申请电子合同存证报告
 */
func (client *Client) ApplyContractReportEx(request *ApplyContractReportRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyContractReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyContractReportResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.report.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 下载合同存证某个环节的内容，得到存证信息对象最终上链的JSON序列化形式，该内容可用于统一核验
 * Summary: 下载合同存证
 */
func (client *Client) GetContractText(request *GetContractTextRequest) (_result *GetContractTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetContractTextResponse{}
	_body, _err := client.GetContractTextEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 下载合同存证某个环节的内容，得到存证信息对象最终上链的JSON序列化形式，该内容可用于统一核验
 * Summary: 下载合同存证
 */
func (client *Client) GetContractTextEx(request *GetContractTextRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetContractTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetContractTextResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.text.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取存证事务ID内部接口
 * Summary: 获取存证事务ID内部接口
 */
func (client *Client) CreateInternalTrans(request *CreateInternalTransRequest) (_result *CreateInternalTransResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateInternalTransResponse{}
	_body, _err := client.CreateInternalTransEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取存证事务ID内部接口
 * Summary: 获取存证事务ID内部接口
 */
func (client *Client) CreateInternalTransEx(request *CreateInternalTransRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateInternalTransResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateInternalTransResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.internal.trans.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 文本存证内部接口，将文本内容存证上链
 * Summary: 文本存证内部接口，将文本内容存证上链
 */
func (client *Client) CreateInternalText(request *CreateInternalTextRequest) (_result *CreateInternalTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateInternalTextResponse{}
	_body, _err := client.CreateInternalTextEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 文本存证内部接口，将文本内容存证上链
 * Summary: 文本存证内部接口，将文本内容存证上链
 */
func (client *Client) CreateInternalTextEx(request *CreateInternalTextRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateInternalTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateInternalTextResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.internal.text.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发起文本存证，将文本内容存证上链，租赁业务专用。
 * Summary: 租赁业务文本存证，将文本内容存证上链
 */
func (client *Client) CreateLeaseText(request *CreateLeaseTextRequest) (_result *CreateLeaseTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseTextResponse{}
	_body, _err := client.CreateLeaseTextEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发起文本存证，将文本内容存证上链，租赁业务专用。
 * Summary: 租赁业务文本存证，将文本内容存证上链
 */
func (client *Client) CreateLeaseTextEx(request *CreateLeaseTextRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseTextResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.text.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发起文件存证，将文件内容存证上链，租赁业务专用。
 * Summary: 租赁业务文件内容存证上链
 */
func (client *Client) CreateLeaseFile(request *CreateLeaseFileRequest) (_result *CreateLeaseFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseFileResponse{}
	_body, _err := client.CreateLeaseFileEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发起文件存证，将文件内容存证上链，租赁业务专用。
 * Summary: 租赁业务文件内容存证上链
 */
func (client *Client) CreateLeaseFileEx(request *CreateLeaseFileRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseFileResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.file.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 使用接口查询订单存证的信息，需要在完成订单回传后才可返回。获取到txhash后，用户可使用 获取文本存证、存证核验 等存证服务功能。
 * Summary: 租赁业务获取订单存证列表
 */
func (client *Client) ListLeaseNotary(request *ListLeaseNotaryRequest) (_result *ListLeaseNotaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListLeaseNotaryResponse{}
	_body, _err := client.ListLeaseNotaryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 使用接口查询订单存证的信息，需要在完成订单回传后才可返回。获取到txhash后，用户可使用 获取文本存证、存证核验 等存证服务功能。
 * Summary: 租赁业务获取订单存证列表
 */
func (client *Client) ListLeaseNotaryEx(request *ListLeaseNotaryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListLeaseNotaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListLeaseNotaryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.notary.list"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询融资租赁application
 * Summary: 查询融资租赁application
 */
func (client *Client) QueryLeaseApplication(request *QueryLeaseApplicationRequest) (_result *QueryLeaseApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseApplicationResponse{}
	_body, _err := client.QueryLeaseApplicationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询融资租赁application
 * Summary: 查询融资租赁application
 */
func (client *Client) QueryLeaseApplicationEx(request *QueryLeaseApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseApplicationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.application.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询融资租赁application的定义详情
 * Summary: 查询application的定义详情
 */
func (client *Client) QueryLeaseApplicationdetailinfo(request *QueryLeaseApplicationdetailinfoRequest) (_result *QueryLeaseApplicationdetailinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseApplicationdetailinfoResponse{}
	_body, _err := client.QueryLeaseApplicationdetailinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询融资租赁application的定义详情
 * Summary: 查询application的定义详情
 */
func (client *Client) QueryLeaseApplicationdetailinfoEx(request *QueryLeaseApplicationdetailinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseApplicationdetailinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseApplicationdetailinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.applicationdetailinfo.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 融资租赁资方重置订单状态
 * Summary: 融资租赁资方重置订单状态
 */
func (client *Client) SetLeaseRepaymentstatus(request *SetLeaseRepaymentstatusRequest) (_result *SetLeaseRepaymentstatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SetLeaseRepaymentstatusResponse{}
	_body, _err := client.SetLeaseRepaymentstatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 融资租赁资方重置订单状态
 * Summary: 融资租赁资方重置订单状态
 */
func (client *Client) SetLeaseRepaymentstatusEx(request *SetLeaseRepaymentstatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SetLeaseRepaymentstatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetLeaseRepaymentstatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.repaymentstatus.set"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 供应商上传采购等相关信息
 * Summary: 供应商上传采购等相关信息
 */
func (client *Client) CreateLeaseSupplierinfo(request *CreateLeaseSupplierinfoRequest) (_result *CreateLeaseSupplierinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseSupplierinfoResponse{}
	_body, _err := client.CreateLeaseSupplierinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 供应商上传采购等相关信息
 * Summary: 供应商上传采购等相关信息
 */
func (client *Client) CreateLeaseSupplierinfoEx(request *CreateLeaseSupplierinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseSupplierinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseSupplierinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.supplierinfo.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: mytf的tapp部署
 * Summary: mytf的tapp部署
 */
func (client *Client) DeployMytfTapp(request *DeployMytfTappRequest) (_result *DeployMytfTappResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeployMytfTappResponse{}
	_body, _err := client.DeployMytfTappEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: mytf的tapp部署
 * Summary: mytf的tapp部署
 */
func (client *Client) DeployMytfTappEx(request *DeployMytfTappRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeployMytfTappResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeployMytfTappResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.mytf.tapp.deploy"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 供应商更新物流状态、签收记录等信息
 * Summary: 供应商更新物流状态、签收记录等信息
 */
func (client *Client) CreateLeaseSupplierdynamicinfo(request *CreateLeaseSupplierdynamicinfoRequest) (_result *CreateLeaseSupplierdynamicinfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseSupplierdynamicinfoResponse{}
	_body, _err := client.CreateLeaseSupplierdynamicinfoEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 供应商更新物流状态、签收记录等信息
 * Summary: 供应商更新物流状态、签收记录等信息
 */
func (client *Client) CreateLeaseSupplierdynamicinfoEx(request *CreateLeaseSupplierdynamicinfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseSupplierdynamicinfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseSupplierdynamicinfoResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.supplierdynamicinfo.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建租赁订单相关信息，融资租赁的前置条件
 * Summary: 创建租赁订单相关信息，融资租赁的前置条件
 */
func (client *Client) CreateLeaseBiz(request *CreateLeaseBizRequest) (_result *CreateLeaseBizResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseBizResponse{}
	_body, _err := client.CreateLeaseBizEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建租赁订单相关信息，融资租赁的前置条件
 * Summary: 创建租赁订单相关信息，融资租赁的前置条件
 */
func (client *Client) CreateLeaseBizEx(request *CreateLeaseBizRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseBizResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseBizResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.biz.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询核验结果
 * Summary: 查询核验结果
 */
func (client *Client) QueryLeaseProof(request *QueryLeaseProofRequest) (_result *QueryLeaseProofResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseProofResponse{}
	_body, _err := client.QueryLeaseProofEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询核验结果
 * Summary: 查询核验结果
 */
func (client *Client) QueryLeaseProofEx(request *QueryLeaseProofRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseProofResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseProofResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.proof.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发起文件存证，将文件内容存证上链，可存证10M以内的文件
 * Summary: 大文件内容存证接口
 */
func (client *Client) CreateLargefile(request *CreateLargefileRequest) (_result *CreateLargefileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLargefileResponse{}
	_body, _err := client.CreateLargefileEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发起文件存证，将文件内容存证上链，可存证10M以内的文件
 * Summary: 大文件内容存证接口
 */
func (client *Client) CreateLargefileEx(request *CreateLargefileRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLargefileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLargefileResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.largefile.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 租赁平台查询接口
 * Summary: 租赁平台查询接口
 */
func (client *Client) QueryLeaseBiz(request *QueryLeaseBizRequest) (_result *QueryLeaseBizResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryLeaseBizResponse{}
	_body, _err := client.QueryLeaseBizEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 租赁平台查询接口
 * Summary: 租赁平台查询接口
 */
func (client *Client) QueryLeaseBizEx(request *QueryLeaseBizRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryLeaseBizResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLeaseBizResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.biz.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 租赁宝哈希存证
 * Summary: 租赁宝哈希存证
 */
func (client *Client) CreateLeaseBiznotary(request *CreateLeaseBiznotaryRequest) (_result *CreateLeaseBiznotaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseBiznotaryResponse{}
	_body, _err := client.CreateLeaseBiznotaryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 租赁宝哈希存证
 * Summary: 租赁宝哈希存证
 */
func (client *Client) CreateLeaseBiznotaryEx(request *CreateLeaseBiznotaryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseBiznotaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseBiznotaryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.biznotary.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 合同内部文本存证
 * Summary: 合同内部文本存证
 */
func (client *Client) CreateInternalContract(request *CreateInternalContractRequest) (_result *CreateInternalContractResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateInternalContractResponse{}
	_body, _err := client.CreateInternalContractEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 合同内部文本存证
 * Summary: 合同内部文本存证
 */
func (client *Client) CreateInternalContractEx(request *CreateInternalContractRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateInternalContractResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateInternalContractResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.internal.contract.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 资方上传网商直付通代扣协议核验结果
 * Summary: 资方上传网商直付通代扣协议核验结果
 */
func (client *Client) CreateLeaseZftagreementsign(request *CreateLeaseZftagreementsignRequest) (_result *CreateLeaseZftagreementsignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseZftagreementsignResponse{}
	_body, _err := client.CreateLeaseZftagreementsignEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 资方上传网商直付通代扣协议核验结果
 * Summary: 资方上传网商直付通代扣协议核验结果
 */
func (client *Client) CreateLeaseZftagreementsignEx(request *CreateLeaseZftagreementsignRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseZftagreementsignResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseZftagreementsignResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.zftagreementsign.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 资方上传网商直付通代扣协议解约相关信息
 * Summary: 资方上传网商直付通代扣协议解约相关信息
 */
func (client *Client) CreateLeaseZftagreementunsign(request *CreateLeaseZftagreementunsignRequest) (_result *CreateLeaseZftagreementunsignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateLeaseZftagreementunsignResponse{}
	_body, _err := client.CreateLeaseZftagreementunsignEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 资方上传网商直付通代扣协议解约相关信息
 * Summary: 资方上传网商直付通代扣协议解约相关信息
 */
func (client *Client) CreateLeaseZftagreementunsignEx(request *CreateLeaseZftagreementunsignRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateLeaseZftagreementunsignResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLeaseZftagreementunsignResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.lease.zftagreementunsign.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取蚂蚁链版存证证明
 * Summary: 获取蚂蚁链版存证证明
 */
func (client *Client) GetCertificateDetail(request *GetCertificateDetailRequest) (_result *GetCertificateDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetCertificateDetailResponse{}
	_body, _err := client.GetCertificateDetailEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取蚂蚁链版存证证明
 * Summary: 获取蚂蚁链版存证证明
 */
func (client *Client) GetCertificateDetailEx(request *GetCertificateDetailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetCertificateDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetCertificateDetailResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.certificate.detail.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 用户通过交易哈希获取自己上传的文本存证内容
 * Summary: 获取文本存证内容
 */
func (client *Client) GetInternalText(request *GetInternalTextRequest) (_result *GetInternalTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetInternalTextResponse{}
	_body, _err := client.GetInternalTextEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 用户通过交易哈希获取自己上传的文本存证内容
 * Summary: 获取文本存证内容
 */
func (client *Client) GetInternalTextEx(request *GetInternalTextRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetInternalTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetInternalTextResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.internal.text.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 三方服务获取开通权限，标记开通状态。
 * Summary: 三方服务获取开通权限，标记开通状态。
 */
func (client *Client) OpenInternalTwc(request *OpenInternalTwcRequest) (_result *OpenInternalTwcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &OpenInternalTwcResponse{}
	_body, _err := client.OpenInternalTwcEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 三方服务获取开通权限，标记开通状态。
 * Summary: 三方服务获取开通权限，标记开通状态。
 */
func (client *Client) OpenInternalTwcEx(request *OpenInternalTwcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *OpenInternalTwcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &OpenInternalTwcResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.internal.twc.open"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 指定节点获取存证事务Id
 * Summary: 指定节点获取存证事务id
 */
func (client *Client) CreateSpecifyTrans(request *CreateSpecifyTransRequest) (_result *CreateSpecifyTransResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSpecifyTransResponse{}
	_body, _err := client.CreateSpecifyTransEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 指定节点获取存证事务Id
 * Summary: 指定节点获取存证事务id
 */
func (client *Client) CreateSpecifyTransEx(request *CreateSpecifyTransRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSpecifyTransResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSpecifyTransResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.specify.trans.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 指定节点文本存证
 * Summary: 指定节点文本存证
 */
func (client *Client) CreateSpecifyText(request *CreateSpecifyTextRequest) (_result *CreateSpecifyTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSpecifyTextResponse{}
	_body, _err := client.CreateSpecifyTextEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 指定节点文本存证
 * Summary: 指定节点文本存证
 */
func (client *Client) CreateSpecifyTextEx(request *CreateSpecifyTextRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSpecifyTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSpecifyTextResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.specify.text.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 文件存证大租户内部接口
 * Summary: 文件存证内部接口
 */
func (client *Client) CreateInternalFile(request *CreateInternalFileRequest) (_result *CreateInternalFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateInternalFileResponse{}
	_body, _err := client.CreateInternalFileEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 文件存证大租户内部接口
 * Summary: 文件存证内部接口
 */
func (client *Client) CreateInternalFileEx(request *CreateInternalFileRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateInternalFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateInternalFileResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.internal.file.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 获取文件存证内容内部接口
 * Summary: 获取文件存证内容内部接口
 */
func (client *Client) GetInternalFile(request *GetInternalFileRequest) (_result *GetInternalFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetInternalFileResponse{}
	_body, _err := client.GetInternalFileEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 获取文件存证内容内部接口
 * Summary: 获取文件存证内容内部接口
 */
func (client *Client) GetInternalFileEx(request *GetInternalFileRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetInternalFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetInternalFileResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.internal.file.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据流转文本存证
 * Summary: 数据流转文本存证
 */
func (client *Client) CreateDataflowText(request *CreateDataflowTextRequest) (_result *CreateDataflowTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDataflowTextResponse{}
	_body, _err := client.CreateDataflowTextEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据流转文本存证
 * Summary: 数据流转文本存证
 */
func (client *Client) CreateDataflowTextEx(request *CreateDataflowTextRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDataflowTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDataflowTextResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.dataflow.text.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询数据流转文本存证内容
 * Summary: 查询数据流转文本存证内容
 */
func (client *Client) GetDataflowText(request *GetDataflowTextRequest) (_result *GetDataflowTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetDataflowTextResponse{}
	_body, _err := client.GetDataflowTextEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询数据流转文本存证内容
 * Summary: 查询数据流转文本存证内容
 */
func (client *Client) GetDataflowTextEx(request *GetDataflowTextRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetDataflowTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetDataflowTextResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.dataflow.text.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据流转存证创建存证事务
 * Summary: 数据流转存证创建存证事务
 */
func (client *Client) CreateDataflowTrans(request *CreateDataflowTransRequest) (_result *CreateDataflowTransResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDataflowTransResponse{}
	_body, _err := client.CreateDataflowTransEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据流转存证创建存证事务
 * Summary: 数据流转存证创建存证事务
 */
func (client *Client) CreateDataflowTransEx(request *CreateDataflowTransRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDataflowTransResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDataflowTransResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.dataflow.trans.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据流转存证需要通过存证合约进行授权和流转的管理，存证方可以通过本接口发起管理合约的部署。
 * Summary: 发起管理合约部署
 */
func (client *Client) DeployDataflowContract(request *DeployDataflowContractRequest) (_result *DeployDataflowContractResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeployDataflowContractResponse{}
	_body, _err := client.DeployDataflowContractEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据流转存证需要通过存证合约进行授权和流转的管理，存证方可以通过本接口发起管理合约的部署。
 * Summary: 发起管理合约部署
 */
func (client *Client) DeployDataflowContractEx(request *DeployDataflowContractRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeployDataflowContractResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeployDataflowContractResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.dataflow.contract.deploy"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 存证方对证据的使用方进行各类型的权限授予，允许使用方调用存证合约中的对应方法。
 * Summary: 发起授权
 */
func (client *Client) CreateDataflowAuthorize(request *CreateDataflowAuthorizeRequest) (_result *CreateDataflowAuthorizeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDataflowAuthorizeResponse{}
	_body, _err := client.CreateDataflowAuthorizeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 存证方对证据的使用方进行各类型的权限授予，允许使用方调用存证合约中的对应方法。
 * Summary: 发起授权
 */
func (client *Client) CreateDataflowAuthorizeEx(request *CreateDataflowAuthorizeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDataflowAuthorizeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDataflowAuthorizeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.dataflow.authorize.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 存证方对撤销已经发起的权限授予。
 * Summary: 撤销授权
 */
func (client *Client) CancelDataflowAuthorize(request *CancelDataflowAuthorizeRequest) (_result *CancelDataflowAuthorizeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelDataflowAuthorizeResponse{}
	_body, _err := client.CancelDataflowAuthorizeEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 存证方对撤销已经发起的权限授予。
 * Summary: 撤销授权
 */
func (client *Client) CancelDataflowAuthorizeEx(request *CancelDataflowAuthorizeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelDataflowAuthorizeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelDataflowAuthorizeResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.dataflow.authorize.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询存证管理合约的部署/授权/撤销授权/密钥上传等操作的执行结果。
 * Summary: 查询对存证合约的各类操作执行结果
 */
func (client *Client) QueryDataflowAction(request *QueryDataflowActionRequest) (_result *QueryDataflowActionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryDataflowActionResponse{}
	_body, _err := client.QueryDataflowActionEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询存证管理合约的部署/授权/撤销授权/密钥上传等操作的执行结果。
 * Summary: 查询对存证合约的各类操作执行结果
 */
func (client *Client) QueryDataflowActionEx(request *QueryDataflowActionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryDataflowActionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDataflowActionResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.dataflow.action.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 存证的使用方，在获得密钥上传（PUBKEY_UPLOAD）授权后，使用本接口上传信封密钥，后续查询存证时，会使用此信封密钥对存证原文加密，将密文返回，保障数据安全。
 * Summary: 发起信封密钥上传
 */
func (client *Client) UploadDataflowPubkey(request *UploadDataflowPubkeyRequest) (_result *UploadDataflowPubkeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UploadDataflowPubkeyResponse{}
	_body, _err := client.UploadDataflowPubkeyEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 存证的使用方，在获得密钥上传（PUBKEY_UPLOAD）授权后，使用本接口上传信封密钥，后续查询存证时，会使用此信封密钥对存证原文加密，将密文返回，保障数据安全。
 * Summary: 发起信封密钥上传
 */
func (client *Client) UploadDataflowPubkeyEx(request *UploadDataflowPubkeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UploadDataflowPubkeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UploadDataflowPubkeyResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.dataflow.pubkey.upload"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数据流转存证创建链上账户
 * Summary: 数据流转存证创建链上账户
 */
func (client *Client) CreateDataflowAccount(request *CreateDataflowAccountRequest) (_result *CreateDataflowAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDataflowAccountResponse{}
	_body, _err := client.CreateDataflowAccountEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数据流转存证创建链上账户
 * Summary: 数据流转存证创建链上账户
 */
func (client *Client) CreateDataflowAccountEx(request *CreateDataflowAccountRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDataflowAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDataflowAccountResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.dataflow.account.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 发起一体化文件存证
 * Summary: 发起一体化文件存证
 */
func (client *Client) CreateFileIntegration(request *CreateFileIntegrationRequest) (_result *CreateFileIntegrationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateFileIntegrationResponse{}
	_body, _err := client.CreateFileIntegrationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 发起一体化文件存证
 * Summary: 发起一体化文件存证
 */
func (client *Client) CreateFileIntegrationEx(request *CreateFileIntegrationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateFileIntegrationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateFileIntegrationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.file.integration.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 完成一体化文件存证
 * Summary: 完成一体化文件存证
 */
func (client *Client) FinishFileIntegration(request *FinishFileIntegrationRequest) (_result *FinishFileIntegrationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &FinishFileIntegrationResponse{}
	_body, _err := client.FinishFileIntegrationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 完成一体化文件存证
 * Summary: 完成一体化文件存证
 */
func (client *Client) FinishFileIntegrationEx(request *FinishFileIntegrationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *FinishFileIntegrationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &FinishFileIntegrationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.file.integration.finish"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询一体化文件存证
 * Summary: 查询一体化文件存证
 */
func (client *Client) GetFileIntegration(request *GetFileIntegrationRequest) (_result *GetFileIntegrationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetFileIntegrationResponse{}
	_body, _err := client.GetFileIntegrationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询一体化文件存证
 * Summary: 查询一体化文件存证
 */
func (client *Client) GetFileIntegrationEx(request *GetFileIntegrationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetFileIntegrationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetFileIntegrationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.file.integration.get"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 一体化文件存证-发起授权
 * Summary: 一体化文件存证-发起授权
 */
func (client *Client) AuthFileIntegration(request *AuthFileIntegrationRequest) (_result *AuthFileIntegrationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AuthFileIntegrationResponse{}
	_body, _err := client.AuthFileIntegrationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 一体化文件存证-发起授权
 * Summary: 一体化文件存证-发起授权
 */
func (client *Client) AuthFileIntegrationEx(request *AuthFileIntegrationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AuthFileIntegrationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AuthFileIntegrationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.file.integration.auth"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 一体化文件存证-取消授权
 * Summary: 一体化文件存证-取消授权
 */
func (client *Client) CancelFileIntegration(request *CancelFileIntegrationRequest) (_result *CancelFileIntegrationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelFileIntegrationResponse{}
	_body, _err := client.CancelFileIntegrationEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 一体化文件存证-取消授权
 * Summary: 一体化文件存证-取消授权
 */
func (client *Client) CancelFileIntegrationEx(request *CancelFileIntegrationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelFileIntegrationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelFileIntegrationResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.file.integration.cancel"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建存证流程实例
 * Summary: 创建存证流程实例
 */
func (client *Client) CreateFlowInstance(request *CreateFlowInstanceRequest) (_result *CreateFlowInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateFlowInstanceResponse{}
	_body, _err := client.CreateFlowInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建存证流程实例
 * Summary: 创建存证流程实例
 */
func (client *Client) CreateFlowInstanceEx(request *CreateFlowInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateFlowInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateFlowInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.flow.instance.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 存证流程实例完结
 * Summary: 存证流程实例完结
 */
func (client *Client) FinishFlowInstance(request *FinishFlowInstanceRequest) (_result *FinishFlowInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &FinishFlowInstanceResponse{}
	_body, _err := client.FinishFlowInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 存证流程实例完结
 * Summary: 存证流程实例完结
 */
func (client *Client) FinishFlowInstanceEx(request *FinishFlowInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *FinishFlowInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &FinishFlowInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.flow.instance.finish"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 创建阶段存证
 * Summary: 创建阶段存证
 */
func (client *Client) InitFlowPhase(request *InitFlowPhaseRequest) (_result *InitFlowPhaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InitFlowPhaseResponse{}
	_body, _err := client.InitFlowPhaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 创建阶段存证
 * Summary: 创建阶段存证
 */
func (client *Client) InitFlowPhaseEx(request *InitFlowPhaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InitFlowPhaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InitFlowPhaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.flow.phase.init"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询阶段存证结果
 * Summary: 查询阶段存证结果
 */
func (client *Client) QueryFlowPhase(request *QueryFlowPhaseRequest) (_result *QueryFlowPhaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryFlowPhaseResponse{}
	_body, _err := client.QueryFlowPhaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询阶段存证结果
 * Summary: 查询阶段存证结果
 */
func (client *Client) QueryFlowPhaseEx(request *QueryFlowPhaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryFlowPhaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryFlowPhaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.flow.phase.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 阶段存证数据详情
 * Summary: 阶段存证数据详情
 */
func (client *Client) DetailFlowPhase(request *DetailFlowPhaseRequest) (_result *DetailFlowPhaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DetailFlowPhaseResponse{}
	_body, _err := client.DetailFlowPhaseEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 阶段存证数据详情
 * Summary: 阶段存证数据详情
 */
func (client *Client) DetailFlowPhaseEx(request *DetailFlowPhaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DetailFlowPhaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DetailFlowPhaseResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.flow.phase.detail"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 一键创建全流程存证实例和阶段存证
 * Summary: 一键创建全流程存证实例和阶段存证
 */
func (client *Client) CreateFlowOnestepnotary(request *CreateFlowOnestepnotaryRequest) (_result *CreateFlowOnestepnotaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateFlowOnestepnotaryResponse{}
	_body, _err := client.CreateFlowOnestepnotaryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 一键创建全流程存证实例和阶段存证
 * Summary: 一键创建全流程存证实例和阶段存证
 */
func (client *Client) CreateFlowOnestepnotaryEx(request *CreateFlowOnestepnotaryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateFlowOnestepnotaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateFlowOnestepnotaryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.flow.onestepnotary.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询一键创建全流程存证进度状态
 * Summary: 查询一键创建全流程存证进度状态
 */
func (client *Client) QueryFlowOnestepnotary(request *QueryFlowOnestepnotaryRequest) (_result *QueryFlowOnestepnotaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryFlowOnestepnotaryResponse{}
	_body, _err := client.QueryFlowOnestepnotaryEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询一键创建全流程存证进度状态
 * Summary: 查询一键创建全流程存证进度状态
 */
func (client *Client) QueryFlowOnestepnotaryEx(request *QueryFlowOnestepnotaryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryFlowOnestepnotaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryFlowOnestepnotaryResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.flow.onestepnotary.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 存证全流程证明申请
 * Summary: 存证全流程证明申请
 */
func (client *Client) ApplyFlowCertificate(request *ApplyFlowCertificateRequest) (_result *ApplyFlowCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyFlowCertificateResponse{}
	_body, _err := client.ApplyFlowCertificateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 存证全流程证明申请
 * Summary: 存证全流程证明申请
 */
func (client *Client) ApplyFlowCertificateEx(request *ApplyFlowCertificateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyFlowCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyFlowCertificateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.flow.certificate.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 存证全流程证明出证进度查询
 * Summary: 存证全流程证明出证进度查询
 */
func (client *Client) QueryFlowCertificate(request *QueryFlowCertificateRequest) (_result *QueryFlowCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryFlowCertificateResponse{}
	_body, _err := client.QueryFlowCertificateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 存证全流程证明出证进度查询
 * Summary: 存证全流程证明出证进度查询
 */
func (client *Client) QueryFlowCertificateEx(request *QueryFlowCertificateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryFlowCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryFlowCertificateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.flow.certificate.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字票根全流程出证申请
 * Summary: 数字票根全流程出证申请
 */
func (client *Client) ApplyStubCertificate(request *ApplyStubCertificateRequest) (_result *ApplyStubCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyStubCertificateResponse{}
	_body, _err := client.ApplyStubCertificateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字票根全流程出证申请
 * Summary: 数字票根全流程出证申请
 */
func (client *Client) ApplyStubCertificateEx(request *ApplyStubCertificateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyStubCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyStubCertificateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.stub.certificate.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字票根全流程证明出证进度查询
 * Summary: 数字票根全流程证明出证进度查询
 */
func (client *Client) QueryStubCertificate(request *QueryStubCertificateRequest) (_result *QueryStubCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryStubCertificateResponse{}
	_body, _err := client.QueryStubCertificateEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字票根全流程证明出证进度查询
 * Summary: 数字票根全流程证明出证进度查询
 */
func (client *Client) QueryStubCertificateEx(request *QueryStubCertificateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryStubCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryStubCertificateResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.stub.certificate.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字票根全流程存证进度查询
 * Summary: 数字票根全流程存证进度查询
 */
func (client *Client) QueryStub(request *QueryStubRequest) (_result *QueryStubResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryStubResponse{}
	_body, _err := client.QueryStubEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字票根全流程存证进度查询
 * Summary: 数字票根全流程存证进度查询
 */
func (client *Client) QueryStubEx(request *QueryStubRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryStubResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryStubResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.stub.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字票根全流程存证创建
 * Summary: 数字票根全流程存证创建
 */
func (client *Client) CreateStub(request *CreateStubRequest) (_result *CreateStubResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateStubResponse{}
	_body, _err := client.CreateStubEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字票根全流程存证创建
 * Summary: 数字票根全流程存证创建
 */
func (client *Client) CreateStubEx(request *CreateStubRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateStubResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateStubResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.stub.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询数字票根是否存在
 * Summary: 查询数字票根是否存在
 */
func (client *Client) ExistStub(request *ExistStubRequest) (_result *ExistStubResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExistStubResponse{}
	_body, _err := client.ExistStubEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询数字票根是否存在
 * Summary: 查询数字票根是否存在
 */
func (client *Client) ExistStubEx(request *ExistStubRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExistStubResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExistStubResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.stub.exist"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 数字票根-清分接口
 * Summary: 数字票根-清分接口
 */
func (client *Client) CreateStubClearing(request *CreateStubClearingRequest) (_result *CreateStubClearingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateStubClearingResponse{}
	_body, _err := client.CreateStubClearingEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 数字票根-清分接口
 * Summary: 数字票根-清分接口
 */
func (client *Client) CreateStubClearingEx(request *CreateStubClearingRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateStubClearingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateStubClearingResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.stub.clearing.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 申请全流程证据包，包括链上证据包和链下证据包
 * Summary: 申请全流程证据包
 */
func (client *Client) ApplyFlowEvidence(request *ApplyFlowEvidenceRequest) (_result *ApplyFlowEvidenceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyFlowEvidenceResponse{}
	_body, _err := client.ApplyFlowEvidenceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 申请全流程证据包，包括链上证据包和链下证据包
 * Summary: 申请全流程证据包
 */
func (client *Client) ApplyFlowEvidenceEx(request *ApplyFlowEvidenceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyFlowEvidenceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyFlowEvidenceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.flow.evidence.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 全流程证据包生成进度查询
 * Summary: 全流程证据包生成进度查询
 */
func (client *Client) QueryFlowEvidence(request *QueryFlowEvidenceRequest) (_result *QueryFlowEvidenceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryFlowEvidenceResponse{}
	_body, _err := client.QueryFlowEvidenceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 全流程证据包生成进度查询
 * Summary: 全流程证据包生成进度查询
 */
func (client *Client) QueryFlowEvidenceEx(request *QueryFlowEvidenceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryFlowEvidenceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryFlowEvidenceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.flow.evidence.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 全流程证据授权码申请
 * Summary: 全流程证据授权码申请
 */
func (client *Client) ApplyFlowAuth(request *ApplyFlowAuthRequest) (_result *ApplyFlowAuthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ApplyFlowAuthResponse{}
	_body, _err := client.ApplyFlowAuthEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 全流程证据授权码申请
 * Summary: 全流程证据授权码申请
 */
func (client *Client) ApplyFlowAuthEx(request *ApplyFlowAuthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ApplyFlowAuthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyFlowAuthResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.flow.auth.apply"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 全流程详情查询
 * Summary: 全流程详情查询
 */
func (client *Client) DetailFlowInstance(request *DetailFlowInstanceRequest) (_result *DetailFlowInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DetailFlowInstanceResponse{}
	_body, _err := client.DetailFlowInstanceEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 全流程详情查询
 * Summary: 全流程详情查询
 */
func (client *Client) DetailFlowInstanceEx(request *DetailFlowInstanceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DetailFlowInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DetailFlowInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.flow.instance.detail"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 合约校验接口
 * Summary: 合约校验接口
 */
func (client *Client) CheckContract(request *CheckContractRequest) (_result *CheckContractResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CheckContractResponse{}
	_body, _err := client.CheckContractEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 合约校验接口
 * Summary: 合约校验接口
 */
func (client *Client) CheckContractEx(request *CheckContractRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CheckContractResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckContractResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.check"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 查询合约核验结果
 * Summary: 查询合约核验结果
 */
func (client *Client) QueryContractStatus(request *QueryContractStatusRequest) (_result *QueryContractStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryContractStatusResponse{}
	_body, _err := client.QueryContractStatusEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 查询合约核验结果
 * Summary: 查询合约核验结果
 */
func (client *Client) QueryContractStatusEx(request *QueryContractStatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryContractStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryContractStatusResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.contract.status.query"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 根据业务场景码创建raceId
 * Summary: traceId创建接口
 */
func (client *Client) CreateTrafficTraceid(request *CreateTrafficTraceidRequest) (_result *CreateTrafficTraceidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateTrafficTraceidResponse{}
	_body, _err := client.CreateTrafficTraceidEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 根据业务场景码创建raceId
 * Summary: traceId创建接口
 */
func (client *Client) CreateTrafficTraceidEx(request *CreateTrafficTraceidRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateTrafficTraceidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateTrafficTraceidResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.traffic.traceid.create"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Description: 业务方操作行为日志传入
 * Summary: 操作行为日志传入
 */
func (client *Client) UploadTrafficOperatelog(request *UploadTrafficOperatelogRequest) (_result *UploadTrafficOperatelogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UploadTrafficOperatelogResponse{}
	_body, _err := client.UploadTrafficOperatelogEx(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Description: 业务方操作行为日志传入
 * Summary: 操作行为日志传入
 */
func (client *Client) UploadTrafficOperatelogEx(request *UploadTrafficOperatelogRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UploadTrafficOperatelogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UploadTrafficOperatelogResponse{}
	_body, _err := client.DoRequest(tea.String("1.0"), tea.String("twc.notary.traffic.operatelog.upload"), tea.String("HTTPS"), tea.String("POST"), tea.String("/gateway.do"), tea.ToMap(request), headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}
